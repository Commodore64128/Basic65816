
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Thu Jun 20 12:06:18 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 5f 1e 01	jmp $011e5f			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	c6 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	29 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	39 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	49 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	8d 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	f4 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	59 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	d6 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	b8 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	73 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	73 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	f4 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	00 0d					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	7d 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	f4 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	05 0b					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	17 0b					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	8e 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	6e 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	4a 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	34 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	b6 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	d6 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	c8 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	00 0e					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	34 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	6a 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	84 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	9b 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	3f 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	fd 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	7e 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	15 0f					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	a7 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	96 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	70 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	c6 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	c6 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	c6 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	c6 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	c6 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	c6 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	c6 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	c6 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	c1 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	81 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	a2 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	fd 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	00 1b					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	8f 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	8b 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	e8 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	bd 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	89 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	8b 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	ea 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	06 1a					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	48 19					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	3c 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	5c 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	74 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	88 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	51 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	d8 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	7c 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	05 13					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	cb 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	38 1a					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	96 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	d5 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	11 18					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	c6 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	cd 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	4f 1a					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	c6 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	6a 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	8c 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	7c 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 41 03	brl $0105d7			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c d7 05	jmp $0105d7			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 3d		bcc $01038e			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 19 04	jsr $010419			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	f0 0a		beq $010373			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010369	18		clc				clc 								; returning a number, read high data word
.01036a	a0 02 00	ldy #$0002			ldy 	#2
.01036d	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01036f	a8		tay				tay 								; put A into Y (this is the high byte)
.010370	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010372	60		rts				rts
.010373					_VANIsString:
.010373	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.010375	f0 05		beq $01037c			beq 	_VANNull
.010377	a0 00 00	ldy #$0000			ldy 	#0
.01037a	38		sec				sec
.01037b	60		rts				rts
.01037c					_VANNull:
.01037c	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01037f	53 74 72 69 6e 67 20 69				.text 	"String is NULL",$00 								; with this message
>010387	73 20 4e 55 4c 4c 00
.01038e					_VANError:
.01038e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010391	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010399	20 75 6e 6b 6e 6f 77 6e 00
.0103a2					VariableFind:
.0103a2	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0103a4	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a7	90 5c		bcc $010405			bcc 	_VFError
.0103a9	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103ac	b0 11		bcs $0103bf			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103ae	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103b1	3a		dec a				dec 	a 							; now 0-25
.0103b2	0a		asl a				asl 	a 							; x 4 and clear carry
.0103b3	0a		asl a				asl 	a
.0103b4	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b7	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b9	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103bb	e6 06		inc $06				inc 	DCodePtr
.0103bd	38		sec				sec 								; return with carry set.
.0103be	60		rts				rts
.0103bf					_VFSlowVariable:
.0103bf	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103c1	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103c4	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103c5	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103c6	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c9	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103cb	85 08		sta $08				sta 	DTemp1
.0103cd	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103cf	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103d2	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103d3	65 08		adc $08				adc 	DTemp1
.0103d5	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d7	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d9					_VFNext:
.0103d9	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103db	f0 26		beq $010403			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103dd	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103df	a8		tay				tay 								; read the address of the name at $0002,y
.0103e0	b9 02 00	lda $0002,y			lda 	$0002,y
.0103e3	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103e5	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103e8					_VFCompare:
.0103e8	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103ea	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103ec	d0 eb		bne $0103d9			bne 	_VFNext 					; if not, go to the next one.
.0103ee	c8		iny				iny 								; advance token pointer
.0103ef	c8		iny				iny
.0103f0	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103f3	d0 f3		bne $0103e8			bne 	_VFCompare
.0103f5	98		tya				tya 								; this is the length of the word.
.0103f6	18		clc				clc 								; so we add it to the code pointer
.0103f7	65 06		adc $06				adc 	DCodePtr
.0103f9	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103fb	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103fd	18		clc				clc 								; four on is the actual data
.0103fe	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010401	38		sec				sec 								; return with CS indicating success
.010402	60		rts				rts
.010403					_VFFail:
.010403	18		clc				clc
.010404	60		rts				rts
.010405					_VFError:
.010405	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010408	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010410	76 61 72 69 61 62 6c 65 00
.010419					VariableSubscript:
.010419	48		pha				pha		 							; save variable address on stack.
.01041a	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.01041d	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; skip right bracket.
.010420	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010423	d0 10		bne $010435			bne 	_VANSubscript
.010425	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010427	f0 02		beq $01042b			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010429	b0 0a		bcs $010435			bcs 	_VANSubscript
.01042b					_VANSubOkay:
.01042b	0a		asl a				asl 	a 							; double lsword
.01042c	0a		asl a				asl 	a 							; and again, also clears carry.
.01042d	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.01042f	68		pla				pla 								; restore DVariablePtr
.010430	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010431	1a		inc a				inc 	a
.010432	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010434	60		rts				rts
.010435					_VANSubscript:
.010435	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010438	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010440	79 20 53 75 62 73 63 72 69 70 74 00
.01044c					VariableCreate:
.01044c	48		pha				pha 								; save count.
.01044d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010450	29 00 20	and #$2000			and 	#IDTypeMask
.010453	f0 06		beq $01045b			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010455	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010458	18		clc				clc 								; which is guaranteed by have a 0 length.
.010459	65 02		adc $02				adc 	DBaseAddress
.01045b					_VCIsInteger:
.01045b	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01045d	68		pla				pla 								; restore count
.01045e	48		pha				pha
.01045f	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010460	0a		asl a				asl 	a 							; 2 x # items.
.010461	0a		asl a				asl 	a 							; 4 x # items.
.010462					_VCNotSingle:
.010462	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010464	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010467	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01046a	f0 04		beq $010470			beq 	_VCNotArray
.01046c	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01046e	e6 08		inc $08				inc 	DTemp1
.010470					_VCNotArray:
.010470	5a		phy				phy 								; save address of first token on stack.
.010471	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010474	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010476	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010478	18		clc				clc 								; add 4 for link and name words
.010479	69 04 00	adc #$0004			adc 	#4
.01047c	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01047e	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010480	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010482					_VCErase:
.010482	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010484	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010487	c8		iny				iny
.010488	c8		iny				iny
.010489	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01048b	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01048d	d0 f3		bne $010482			bne 	_VCErase
.01048f	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010491	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010493	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010496	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010499	18		clc				clc
.01049a	65 02		adc $02				adc 	DBaseAddress
.01049c	85 08		sta $08				sta 	DTemp1
.01049e	68		pla				pla 								; restore the token address
.01049f	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.0104a1	b0 03		bcs $0104a6			bcs 	_VCDontClone 				; because the variable being created has its identifier
.0104a3	20 b7 04	jsr $0104b7			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.0104a6					_VCDontClone:
.0104a6	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0104a9	68		pla				pla 								; restore count and store (if nonzero)
.0104aa	f0 03		beq $0104af			beq 	_VCNotArray2
.0104ac	99 04 00	sta $0004,y			sta 	$0004,y
.0104af					_VCNotArray2:
.0104af	98		tya				tya 								; update the head link
.0104b0	92 20		sta ($20)			sta 	(DHashTablePtr)
.0104b2	18		clc				clc 								; advance pointer to the data bit.
.0104b3	69 04 00	adc #$0004			adc 	#4
.0104b6	60		rts				rts 								; and done.
.0104b7					VCCloneIdentifier:
.0104b7	da		phx				phx 								; save XY
.0104b8	5a		phy				phy
.0104b9	aa		tax				tax 								; identifier address in Y.
.0104ba	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104bd	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104bf	48		pha				pha
.0104c0					_VCCloneLoop:
.0104c0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104c3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104c5	48		pha				pha 								; save on stack
.0104c6	1a		inc a				inc 	a 							; space for one token.
.0104c7	1a		inc a				inc 	a
.0104c8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104ca	7a		ply				ply 								; address of word in Y
.0104cb	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104ce	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104d1	e8		inx				inx 								; advance the token pointer
.0104d2	e8		inx				inx
.0104d3	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104d6	d0 e8		bne $0104c0			bne 	_VCCloneLoop
.0104d8	68		pla				pla 								; restore start address
.0104d9	7a		ply				ply 								; and the others
.0104da	fa		plx				plx
.0104db	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104dc					LineDelete:
.0104dc	aa		tax				tax 	 							; this is the one we're looking for ....
.0104dd	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104df	18		clc				clc
.0104e0	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104e3	a8		tay				tay
.0104e4					_LDLoop:
.0104e4	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104e7	f0 2d		beq $010516			beq 	_LDExit						; exit if zero ; line does not exist
.0104e9	8a		txa				txa 								; found a match
.0104ea	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104ed	f0 08		beq $0104f7			beq		_LDFound
.0104ef	98		tya				tya 								; follow the link.
.0104f0	18		clc				clc
.0104f1	79 00 00	adc $0000,y			adc 	$0000,y
.0104f4	a8		tay				tay
.0104f5	80 ed		bra $0104e4			bra 	_LDLoop
.0104f7					_LDFound:
.0104f7	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104f9	98		tya				tya 								; follow link to next.
.0104fa	18		clc				clc
.0104fb	79 00 00	adc $0000,y			adc 	$0000,y
.0104fe	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.010500	20 d2 1b	jsr $011bd2			jsr 	FindCodeEnd 				; find the end of the code.
.010503	38		sec				sec
.010504	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.010506	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.010507	1a		inc a				inc 	a
.010508	aa		tax				tax
.010509	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.01050c	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.01050e	91 08		sta ($08),y			sta 	(DTemp1),y
.010510	c8		iny				iny
.010511	c8		iny				iny
.010512	ca		dex				dex
.010513	ca		dex				dex
.010514	d0 f6		bne $01050c			bne 	_LDCopy
.010516					_LDExit:
.010516	60		rts				rts
.010517					LineInsert:
.010517	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.010519	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.01051b	a0 00 00	ldy #$0000			ldy 	#0
.01051e					_LIFindLength:
.01051e	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010520	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010523	f0 10		beq $010535			beq 	_LIFindEnd
.010525	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.010528	90 04		bcc $01052e			bcc 	_LIQString
.01052a	c8		iny				iny 								; otherwise just skip it.
.01052b	c8		iny				iny
.01052c	80 f0		bra $01051e			bra 	_LIFindLength
.01052e					_LIQString:
.01052e	98		tya				tya 								; skip quoted strings
.01052f	18		clc				clc
.010530	71 08		adc ($08),y			adc 	(DTemp1),y
.010532	a8		tay				tay
.010533	80 e9		bra $01051e			bra 	_LIFindLength
.010535					_LIFindEnd:
.010535	98		tya				tya 								; the tokens in the line
.010536	18		clc				clc
.010537	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01053a	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.01053c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.01053f	18		clc				clc
.010540	65 02		adc $02				adc 	DBaseAddress
.010542	a8		tay				tay
.010543					_LIFindInsertPoint:
.010543	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010546	f0 0f		beq $010557			beq		_LIFoundInsertPoint
.010548	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.01054b	c5 0c		cmp $0c				cmp 	DTemp2
.01054d	b0 08		bcs $010557			bcs 	_LIFoundInsertPoint
.01054f	98		tya				tya 								; if < go to the next line.
.010550	18		clc				clc
.010551	79 00 00	adc $0000,y			adc 	$0000,y
.010554	a8		tay				tay
.010555	80 ec		bra $010543			bra 	_LIFindInsertPoint
.010557					_LIFoundInsertPoint:
.010557	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.010559	20 d2 1b	jsr $011bd2			jsr 	FindCodeEnd 				; get the end of the code.
.01055c	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.01055e	18		clc				clc
.01055f	65 24		adc $24				adc 	DTemp3
.010561	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010563					_LICopyMove:
.010563	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010565	92 34		sta ($34)			sta 	(DTemp4+2)
.010567	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.010569	c5 36		cmp $36				cmp 	DTemp5
.01056b	f0 0a		beq $010577			beq 	_LICopyMoveOver
.01056d	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.01056f	c6 32		dec $32				dec 	DTemp4
.010571	c6 34		dec $34				dec 	DTemp4+2
.010573	c6 34		dec $34				dec 	DTemp4+2
.010575	80 ec		bra $010563			bra 	_LICopyMove
.010577					_LICopyMoveOver:
.010577	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010579	92 36		sta ($36)			sta 	(DTemp5)
.01057b	a0 02 00	ldy #$0002			ldy 	#2
.01057e	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010580	91 36		sta ($36),y			sta 	(DTemp5),y
.010582	a0 04 00	ldy #$0004			ldy 	#4
.010585					_LICopyTokens:
.010585	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010587	91 36		sta ($36),y			sta 	(DTemp5),y
.010589	c8		iny				iny
.01058a	c8		iny				iny
.01058b	e6 08		inc $08				inc 	DTemp1
.01058d	e6 08		inc $08				inc 	DTemp1
.01058f	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010591	c6 24		dec $24				dec 	DTemp3
.010593	a5 24		lda $24				lda 	DTemp3
.010595	c9 04 00	cmp #$0004			cmp 	#4
.010598	d0 eb		bne $010585			bne 	_LICopyTokens
.01059a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01059b					ErrorHandler:
.01059b	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01059d	fa		plx				plx 								; address of error message -1
.01059e	e8		inx				inx 								; error message.
.01059f	20 43 06	jsr $010643			jsr 	PrintROMMessage 			; print message in ROM
.0105a2	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0105a4	f0 15		beq $0105bb			beq 	_EHEndMessage
.0105a6	a2 c1 05	ldx #$05c1			ldx 	#_EHAt & $FFFF 				; print " at "
.0105a9	20 43 06	jsr $010643			jsr 	PrintROMMessage
.0105ac	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0105ae	a0 00 00	ldy #$0000			ldy 	#0
.0105b1	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105b4	20 f1 10	jsr $0110f1			jsr 	ConvertToString 			; convert and print it.
.0105b7	a8		tay				tay
.0105b8	20 61 06	jsr $010661			jsr 	PrintBASICString
.0105bb					_EHEndMessage:
.0105bb	20 85 1d	jsr $011d85			jsr 	HWNewLine
.0105be	4c 89 1e	jmp $011e89			jmp 	NextCommand 				; get next command.
>0105c1	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105c6					IllegalToken:
.0105c6	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105c9	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105d1	54 6f 6b 65 6e 00
.0105d7					SyntaxError:
.0105d7	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105da	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105e2	72 72 6f 72 00
.0105e7					ExpectToken:
.0105e7	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105e9	d0 05		bne $0105f0			bne 	_CTKError					; error if not
.0105eb	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105ed	e6 06		inc $06				inc 	DCodePtr
.0105ef	60		rts				rts
.0105f0					_CTKError:
.0105f0	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105f3	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105fb	74 6f 6b 65 6e 00
.010601					ExpectRightBracket:
.010601	48		pha				pha
.010602	a9 28 32	lda #$3228			lda 	#rparenTokenID
.010605	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.010608	68		pla				pla
.010609	60		rts				rts
.01060a					ExpectComma:
.01060a	48		pha				pha
.01060b	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01060e	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.010611	68		pla				pla
.010612	60		rts				rts
.010613					CheckBothNumeric:
.010613	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010615	15 42		ora $42,x			ora 	EXSPrecType+2,x
.010617	30 01		bmi $01061a			bmi 	_CBNFail 					; need to both be zero in bit 15
.010619	60		rts				rts
.01061a					_CBNFail:
.01061a	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01061d	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010625	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010633					ResetTypeInteger:
.010633	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010635	29 ff 7f	and #$7fff			and 	#$7FFF
.010638	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01063a	60		rts				rts
.01063b					ResetTypeString:
.01063b	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01063d	09 00 80	ora #$8000			ora 	#$8000
.010640	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010642	60		rts				rts
.010643					PrintROMMessage:
.010643	48		pha				pha
.010644	da		phx				phx
.010645					_PRMLoop:
.010645	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010649	29 ff 00	and #$00ff			and 	#$00FF
.01064c	f0 10		beq $01065e			beq 	_PRMExit
.01064e	c9 0d 00	cmp #$000d			cmp 	#13
.010651	d0 05		bne $010658			bne 	_PRMChar
.010653	20 85 1d	jsr $011d85			jsr 	HWNewLine
.010656	80 03		bra $01065b			bra 	_PRMNext
.010658					_PRMChar:
.010658	20 34 1d	jsr $011d34			jsr 	HWPrintChar
.01065b					_PRMNext:
.01065b	e8		inx				inx
.01065c	80 e7		bra $010645			bra 	_PRMLoop
.01065e					_PRMExit:
.01065e	fa		plx				plx
.01065f	68		pla				pla
.010660	60		rts				rts
.010661					PrintBASICString:
.010661	48		pha				pha
.010662	da		phx				phx
.010663	5a		phy				phy
.010664	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010667	29 ff 00	and #$00ff			and 	#$00FF
.01066a	f0 0b		beq $010677			beq 	_PBSExit 					; null string
.01066c	aa		tax				tax
.01066d					_PBSLoop:
.01066d	c8		iny				iny
.01066e	b9 00 00	lda $0000,y			lda 	$0000,y
.010671	20 34 1d	jsr $011d34			jsr 	HWPrintChar
.010674	ca		dex				dex
.010675	d0 f6		bne $01066d			bne 	_PBSLoop
.010677					_PBSExit:
.010677	7a		ply				ply
.010678	fa		plx				plx
.010679	68		pla				pla
.01067a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.01067b					StringResetPermanent:
.01067b	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.01067d	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.01067e	3a		dec a				dec 	a
.01067f	a8		tay				tay
.010680	48		pha				pha
.010681	a9 00 00	lda #$0000			lda 	#$0000
.010684	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.010687	68		pla				pla
.010688	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the start of the link
.01068b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01068d	60		rts				rts
.01068e					StringReassign:
.01068e	da		phx				phx 								; save X.
.01068f	bb		tyx				tyx 								; save the pointer to the current on X.
.010690	a8		tay				tay 								; get length of new string.
.010691	b9 00 00	lda $0000,y			lda 	@w$0000,y
.010694	29 ff 00	and #$00ff			and 	#$00FF
.010697	d0 03		bne $01069c			bne 	_SRAContent
.010699	82 89 00	brl $010725			brl 	_SRAEmpty 					; if zero, return empty address.
.01069c					_SRAContent:
.01069c	5a		phy				phy 								; save the new string address on stack
.01069d	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; address of the old string in A
.0106a0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.0106a3	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it first.
.0106a5	90 0e		bcc $0106b5			bcc 	_SRANoRelease
.0106a7	bc 00 00	ldy $0000,x			ldy 	@w$0000,x 					; the address of the old string
.0106aa	88		dey				dey 								; point to the link.
.0106ab	88		dey				dey
.0106ac	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.0106af	09 00 80	ora #$8000			ora 	#$8000
.0106b2	99 00 00	sta $0000,y			sta 	@w$0000,y
.0106b5					_SRANoRelease:
.0106b5	7a		ply				ply 								; restore and save the new string address
.0106b6	5a		phy				phy
.0106b7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.0106ba	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.0106bd	1a		inc a				inc 	a 							; we want one more, for the length byte.
.0106be	85 36		sta $36				sta 	DTemp5
.0106c0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.0106c3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106c5	a8		tay				tay
.0106c6					_SRACheckUnused:
.0106c6	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset to next
.0106c9	f0 22		beq $0106ed			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106cb	10 0f		bpl $0106dc			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106cd	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size.
.0106d0	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106d2	90 08		bcc $0106dc			bcc 	_SRACheckNext 				; too small.
.0106d4	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with the bit cleared.
.0106d7	98		tya				tya 								; A is the address of the link
.0106d8	1a		inc a				inc 	a 							; add 2, it's the data.
.0106d9	1a		inc a				inc 	a
.0106da	80 26		bra $010702			bra 	_SRACopyA 					; copy there.
.0106dc					_SRACheckNext:
.0106dc	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15
.0106df	29 ff 7f	and #$7fff			and 	#$7FFF
.0106e2	85 38		sta $38				sta 	DTemp5+2 					; save it
.0106e4	98		tya				tya 								; add to Y
.0106e5	18		clc				clc
.0106e6	65 38		adc $38				adc 	DTemp5+2
.0106e8	1a		inc a				inc 	a 							; add 2 more for the link itself
.0106e9	1a		inc a				inc 	a
.0106ea	a8		tay				tay
.0106eb	80 d9		bra $0106c6			bra 	_SRACheckUnused
.0106ed					_SRAAllocate:
.0106ed	7a		ply				ply 								; get the new string address back.
.0106ee	5a		phy				phy 								; push it back on the stack.
.0106ef	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106f2	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106f5	1a		inc a				inc 	a
.0106f6	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106f7	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106fa	90 03		bcc $0106ff			bcc 	_SRANoCarry
.0106fc	a9 ff 00	lda #$00ff			lda 	#255
.0106ff					_SRANoCarry:
.0106ff	20 33 07	jsr $010733			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.010702					_SRACopyA:
.010702	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.010705	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.010708	aa		tax				tax 								; where we are copying to.
.010709	7a		ply				ply 								; where we're coming from.
.01070a	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.01070d	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.010710	1a		inc a				inc 	a
.010711	85 36		sta $36				sta 	DTemp5 						; save counter.
.010713					_SRACopy:
.010713	e2 20		sep #$20			sep 	#$20
.010715	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.010718	9d 00 00	sta $0000,x			sta 	@W$0000,x
.01071b	c2 20		rep #$20			rep 	#$20
.01071d	c8		iny				iny
.01071e	e8		inx				inx
.01071f	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.010721	d0 f0		bne $010713			bne 	_SRACopy
.010723	fa		plx				plx 								; restore X and exit.
.010724	60		rts				rts
.010725					_SRAEmpty:
.010725	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010728	18		clc				clc 								; which is guaranteed by have a 0 length.
.010729	65 02		adc $02				adc 	DBaseAddress
.01072b	9d 00 00	sta $0000,x			sta 	@w$0000,x
.01072e	9e 02 00	stz $0002,x			stz 	@w$0002,x
.010731	fa		plx				plx
.010732	60		rts				rts
.010733					StringAllocateSpace:
.010733	da		phx				phx									; save XY
.010734	5a		phy				phy
.010735	48		pha				pha 								; save the length.
.010736	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.010737	1a		inc a				inc 	a
.010738	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.01073b	38		sec				sec 								; add 1 (2's complement)
.01073c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01073f	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010741	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.010743	a8		tay				tay 								; put in Y
.010744	68		pla				pla 								; restore the length
.010745	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.010748	98		tya				tya 								; get the address back
.010749	1a		inc a				inc 	a 							; skip over the link
.01074a	1a		inc a				inc 	a
.01074b	7a		ply				ply									; restore YX and exit.
.01074c	fa		plx				plx
.01074d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.01074e					StringTempAllocate:
.01074e	48		pha				pha
.01074f	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010751	d0 09		bne $01075c			bne 	_STANoReset
.010753	5a		phy				phy 								; reset the temp string pointer.
.010754	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010757	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010759	85 16		sta $16				sta 	DTempStringPointer
.01075b	7a		ply				ply
.01075c					_STANoReset:
.01075c	68		pla				pla 								; get length.
.01075d	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010760	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010763	18		clc				clc 								; this adds one, for the length.
.010764	65 16		adc $16				adc 	DTempStringPointer
.010766	85 16		sta $16				sta 	DTempStringPointer
.010768	48		pha				pha 								; save start address
.010769	a9 00 00	lda #$0000			lda 	#$0000
.01076c	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01076e	92 16		sta ($16)			sta		(DTempStringPointer)
.010770	c2 20		rep #$20			rep 	#$20
.010772	68		pla				pla 								; restore start address
.010773	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010775	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010777	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010779	60		rts				rts
.01077a					StringWriteCharacter:
.01077a	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.01077c	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.01077e	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010780	1a		inc a				inc 	a
.010781	92 18		sta ($18)			sta 	(DStartTempString)
.010783	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010785	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010787	60		rts				rts
.010788					StringCreateCopy:
.010788	a8		tay				tay 								; put pointer to string in Y
.010789	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01078c	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01078f	f0 17		beq $0107a8			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010791	da		phx				phx 								; save X and put the character count in X
.010792	aa		tax				tax
.010793					_SCCCopy:
.010793	c8		iny				iny 								; advance and read (first time skips length)
.010794	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010796	b9 00 00	lda $0000,y			lda 	$0000,y
.010799	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01079b	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01079d	1a		inc a				inc 	a
.01079e	92 18		sta ($18)			sta 	(DStartTempString)
.0107a0	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0107a2	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0107a4	ca		dex				dex 								; do X times
.0107a5	d0 ec		bne $010793			bne 	_SCCCopy
.0107a7	fa		plx				plx
.0107a8					_SCCExit:
.0107a8	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.0107a9					Tokenise:
.0107a9	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0107ab	84 0a		sty $0a				sty 	DTemp1+2
.0107ad	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0107b0	18		clc				clc
.0107b1	65 02		adc $02				adc 	DBaseAddress
.0107b3	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0107b5	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0107b8	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0107bb					_TOKCap:
.0107bb	c8		iny				iny 								; go to next
.0107bc	b7 08		lda [$08],y			lda 	[DTemp1],y
.0107be	29 ff 00	and #$00ff			and 	#$00FF
.0107c1	f0 22		beq $0107e5			beq 	_TOKEndCap
.0107c3	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107c6	d0 01		bne $0107c9			bne 	_TOKNotQuote
.0107c8	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107c9					_TOKNotQuote:
.0107c9	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107cc	90 ed		bcc $0107bb			bcc 	_TOKCap
.0107ce	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107d1	b0 e8		bcs $0107bb			bcs 	_TOKCap
.0107d3	8a		txa				txa 								; check if in quotes
.0107d4	4a		lsr a				lsr 	a
.0107d5	b0 e4		bcs $0107bb			bcs 	_TOKCap
.0107d7	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107d9	38		sec				sec
.0107da	e9 20 00	sbc #$0020			sbc 	#32
.0107dd	e2 20		sep #$20			sep 	#$20
.0107df	97 08		sta [$08],y			sta 	[DTemp1],y
.0107e1	c2 20		rep #$20			rep 	#$20
.0107e3	80 d6		bra $0107bb			bra 	_TOKCap
.0107e5					_TOKEndCap:
.0107e5	c6 08		dec $08				dec 	DTemp1
.0107e7					_TOKMainNext:
.0107e7	e6 08		inc $08				inc 	DTemp1
.0107e9					_TOKMainLoop:
.0107e9	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107eb	29 ff 00	and #$00ff			and 	#$00FF
.0107ee	c9 20 00	cmp #$0020			cmp 	#32
.0107f1	90 1d		bcc $010810			bcc 	_TOKExit 					; 0-31 exit.
.0107f3	f0 f2		beq $0107e7			beq 	_TOKMainNext 				; 32 (space) skip.
.0107f5	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107f8	f0 1d		beq $010817			beq 	_TOKString
.0107fa	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107fd	90 1d		bcc $01081c			bcc 	_TOKPunctuation
.0107ff	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.010802	90 42		bcc $010846			bcc 	_TOKNumber
.010804	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010807	90 13		bcc $01081c			bcc 	_TOKPunctuation
.010809	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.01080c	90 3d		bcc $01084b			bcc 	_TOKIdentifier
.01080e	80 0c		bra $01081c			bra 	_TOKPunctuation 			; 91-   punctuation.
.010810					_TOKExit:
.010810	a9 00 00	lda #$0000			lda 	#$0000
.010813	20 50 08	jsr $010850			jsr 	TOKWriteToken
.010816	60		rts				rts
.010817					_TOKString:
.010817	20 ee 08	jsr $0108ee			jsr 	TOKQuotedString
.01081a	80 cd		bra $0107e9			bra 	_TOKMainLoop
.01081c					_TOKPunctuation:
.01081c	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01081f	20 55 09	jsr $010955			jsr 	TOKKeywordSearch
.010822	b0 1d		bcs $010841			bcs 	_TOKFoundPunctuation
.010824	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010827	20 55 09	jsr $010955			jsr 	TOKKeywordSearch
.01082a	b0 15		bcs $010841			bcs 	_TOKFoundPunctuation
.01082c	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01082f	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010837	61 72 73 65 20 6c 69 6e 65 00
.010841					_TOKFoundPunctuation:
.010841	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; output the token and go round again.
.010844	80 a3		bra $0107e9			bra 	_TOKMainLoop
.010846					_TOKNumber:
.010846	20 6f 08	jsr $01086f			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010849	80 9e		bra $0107e9			bra 	_TOKMainLoop
.01084b					_TOKIdentifier:
.01084b	20 b0 09	jsr $0109b0			jsr 	TOKIdentifier
.01084e	80 99		bra $0107e9			bra 	_TOKMainLoop
.010850					TOKWriteToken:
.010850	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010852	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010854	e6 0c		inc $0c				inc 	DTemp2
.010856	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010858	29 ff 00	and #$00ff			and 	#$00FF
.01085b	f0 01		beq $01085e			beq 	_TOKWriteOverflow
.01085d	60		rts				rts
.01085e					_TOKWriteOverflow:
.01085e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010861	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010869	20 6c 6f 6e 67 00
.01086f					TOKInteger:
.01086f	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010871	64 26		stz $26				stz 	DTemp3+2
.010873					_TOKINLoop:
.010873	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010875	48		pha				pha
.010876	a5 24		lda $24				lda 	DTemp3
.010878	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01087a	26 26		rol $26				rol 	DTemp3+2
.01087c	06 24		asl $24				asl 	DTemp3
.01087e	26 26		rol $26				rol 	DTemp3+2
.010880	18		clc				clc
.010881	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010883	85 24		sta $24				sta 	DTemp3
.010885	68		pla				pla
.010886	65 26		adc $26				adc 	DTemp3+2
.010888	85 26		sta $26				sta 	DTemp3+2
.01088a	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.01088c	26 26		rol $26				rol 	DTemp3+2
.01088e	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010890	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010893	d0 44		bne $0108d9			bne 	_TOKINSize
.010895	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010897	29 0f 00	and #$000f			and 	#15
.01089a	18		clc				clc
.01089b	65 24		adc $24				adc 	DTemp3 						; add to the running count
.01089d	85 24		sta $24				sta 	DTemp3
.01089f	90 02		bcc $0108a3			bcc 	_TOKINNoCarry
.0108a1	e6 26		inc $26				inc 	DTemp3+2
.0108a3					_TOKINNoCarry:
.0108a3	e6 08		inc $08				inc 	DTemp1 						; look at next
.0108a5	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0108a7	29 ff 00	and #$00ff			and 	#$00FF
.0108aa	c9 30 00	cmp #$0030			cmp 	#"0"
.0108ad	90 05		bcc $0108b4			bcc 	_TOKINGotInteger
.0108af	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0108b2	90 bf		bcc $010873			bcc		_TOKINLoop
.0108b4					_TOKINGotInteger:
.0108b4	a5 24		lda $24				lda 	DTemp3 						; lower word
.0108b6	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0108b9	18		clc				clc
.0108ba	69 00 40	adc #$4000			adc 	#$4000
.0108bd	48		pha				pha 								; save it.
.0108be	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108c0	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108c2	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108c4	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108c7	b0 10		bcs $0108d9			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108c9	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108cc	f0 06		beq $0108d4			beq 	_TOKINNoShift 				; don't need constant shift.
.0108ce	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108d1	20 50 08	jsr $010850			jsr 	TOKWriteToken
.0108d4					_TOKINNoShift:
.0108d4	68		pla				pla 								; get lower its token
.0108d5	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; output it
.0108d8	60		rts				rts
.0108d9					_TOKINSize:
.0108d9	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0108dc	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108e4	74 6f 6f 20 6c 61 72 67 65 00
.0108ee					TOKQuotedString:
.0108ee	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108f0	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108f2	85 32		sta $32				sta 	DTemp4
.0108f4	a5 0a		lda $0a				lda 	DTemp1+2
.0108f6	85 34		sta $34				sta 	DTemp4+2
.0108f8					_TOKQFindSize:
.0108f8	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108fa	e6 08		inc $08				inc 	DTemp1
.0108fc	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108ff	f0 3b		beq $01093c			beq 	_TOQImbalance 				; end of line, and no quote found.
.010901	c9 22 00	cmp #$0022			cmp 	#34
.010904	d0 f2		bne $0108f8			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010906	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010908	38		sec				sec
.010909	e5 32		sbc $32				sbc 	DTemp4
.01090b	3a		dec a				dec 	a 							; one less character for closing quote
.01090c	85 26		sta $26				sta 	DTemp3+2
.01090e	18		clc				clc
.01090f	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010912	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010915	20 50 08	jsr $010850			jsr 	TOKWriteToken
.010918	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.01091a	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; effectively a byte-write.
.01091d	c6 0c		dec $0c				dec 	DTemp2
.01091f	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010921	f0 0f		beq $010932			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010923					_TOKQWriteString:
.010923	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010925	29 ff 00	and #$00ff			and 	#$00FF
.010928	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; effectively a byte-write.
.01092b	c6 0c		dec $0c				dec 	DTemp2
.01092d	e6 32		inc $32				inc 	DTemp4 						; advance character
.01092f	ca		dex				dex 								; do X times
.010930	d0 f1		bne $010923			bne 	_TOKQWriteString
.010932					_TOKQWriteEnd:
.010932	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010934	29 01 00	and #$0001			and 	#1
.010937	f0 02		beq $01093b			beq 	_TOKQExit
.010939	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01093b					_TOKQExit:
.01093b	60		rts				rts
.01093c					_TOQImbalance:
.01093c	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01093f	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010947	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010955					TOKKeywordSearch:
.010955	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010957	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01095a	85 34		sta $34				sta 	DTemp4+2
.01095c	a2 00 00	ldx #$0000			ldx 	#0
.01095f					_TOKScan:
.01095f	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010963	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010966	f0 46		beq $0109ae			beq 	_TOKFail 					; if zero then we have failed.
.010968	3a		dec a				dec 	a 							; -1 gives the length.
.010969	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01096b	d0 2f		bne $01099c			bne 	_TOKNext 					; no, then skip to next token.
.01096d	da		phx				phx 								; save X
.01096e	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010971					_TOKCompare:
.010971	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010973	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.010977	29 ff 00	and #$00ff			and 	#$00FF
.01097a	d0 1f		bne $01099b			bne 	_TOKPopNext 				; if different, pop and goto next.
.01097c	e8		inx				inx 								; bump X and Y.
.01097d	c8		iny				iny
.01097e	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010980	d0 ef		bne $010971			bne 	_TOKCompare
.010982	98		tya				tya 								; add length to the text pointer
.010983	18		clc				clc
.010984	65 08		adc $08				adc 	DTemp1
.010986	85 08		sta $08				sta 	DTemp1
.010988	fa		plx				plx 								; restore X.
.010989	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.01098d	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010990	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010991	4a		lsr a				lsr		a
.010992	4a		lsr a				lsr 	a
.010993	eb		xba				xba
.010994	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010996	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010999	38		sec				sec
.01099a	60		rts				rts
.01099b					_TOKPopNext:
.01099b	fa		plx				plx 								; restore X.
.01099c					_TOKNext:
.01099c	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.0109a0	29 0f 00	and #$000f			and 	#$000F
.0109a3	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0109a5	8a		txa				txa
.0109a6	18		clc				clc
.0109a7	65 14		adc $14				adc 	DSignCount
.0109a9	aa		tax				tax
.0109aa	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0109ac	80 b1		bra $01095f			bra 	_TOKScan
.0109ae					_TOKFail:
.0109ae	18		clc				clc
.0109af	60		rts				rts
.0109b0					TOKIdentifier:
.0109b0	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0109b2	85 24		sta $24				sta 	DTemp3
.0109b4					_TOKIFindLength:
.0109b4	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0109b6	a7 08		lda [$08]			lda 	[DTemp1]
.0109b8	29 ff 00	and #$00ff			and 	#$00FF
.0109bb	20 5b 0a	jsr $010a5b			jsr 	TOKIsIdentifierCharacter
.0109be	b0 f4		bcs $0109b4			bcs 	_TOKIFindLength
.0109c0	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109c2	38		sec				sec
.0109c3	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109c5	85 36		sta $36				sta 	DTemp5
.0109c7	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109c9	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109cc	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109ce	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109d0	29 ff 00	and #$00ff			and 	#$00FF
.0109d3	c9 24 00	cmp #$0024			cmp 	#"$"
.0109d6	d0 0b		bne $0109e3			bne 	_TOKINotString
.0109d8	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109da	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109dc	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109de	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109e1	85 26		sta $26				sta 	DTemp3+2
.0109e3					_TOKINotString:
.0109e3	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109e5	29 ff 00	and #$00ff			and 	#$00FF
.0109e8	c9 28 00	cmp #$0028			cmp 	#"("
.0109eb	d0 0b		bne $0109f8			bne 	_TOKINotArray
.0109ed	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109ef	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109f1	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109f3	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109f6	85 26		sta $26				sta 	DTemp3+2
.0109f8					_TOKINotArray:
.0109f8	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109fa	85 08		sta $08				sta 	DTemp1
.0109fc	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109fe	20 55 09	jsr $010955			jsr 	TOKKeywordSearch
.010a01	90 04		bcc $010a07			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010a03	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; if CS write token and exit.
.010a06	60		rts				rts
.010a07					_TOKIIdentifier:
.010a07	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010a09	e6 08		inc $08				inc 	DTemp1
.010a0b	20 47 0a	jsr $010a47			jsr		_TOKIToConstant 			; convert to range 0-35
.010a0e	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.010a10	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010a12	f0 1d		beq $010a31			beq 	_TOKINoSecond
.010a14	48		pha				pha 								; save current on stack.
.010a15	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010a17	e6 08		inc $08				inc 	DTemp1
.010a19	20 47 0a	jsr $010a47			jsr		_TOKIToConstant 			; convert to range 0-35
.010a1c	85 14		sta $14				sta 	DSignCount 					; save it.
.010a1e	0a		asl a				asl 	a 							; x 4
.010a1f	0a		asl a				asl 	a
.010a20	65 14		adc $14				adc 	DSignCount 					; x 5
.010a22	0a		asl a				asl 	a 							; x 10
.010a23	65 14		adc $14				adc 	DSignCount 					; x 11
.010a25	0a		asl a				asl 	a 							; x 22
.010a26	0a		asl a				asl 	a 							; x 44
.010a27	65 14		adc $14				adc 	DSignCount 					; x 45
.010a29	85 14		sta $14				sta 	DSignCount
.010a2b	68		pla				pla 								; get old token and add x 45
.010a2c	18		clc				clc
.010a2d	65 14		adc $14				adc 	DSignCount
.010a2f	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a31					_TOKINoSecond:
.010a31	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a33	f0 03		beq $010a38			beq 	_TOKINotLast				; if yes
.010a35	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a38					_TOKINotLast:
.010a38	20 50 08	jsr $010850			jsr 	TOKWriteToken 				; output the token
.010a3b	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a3d	d0 c8		bne $010a07			bne 	_TOKIIdentifier
.010a3f					_TOKIOut:
.010a3f	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a41	18		clc				clc
.010a42	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a44	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a46	60		rts				rts
.010a47					_TOKIToConstant:
.010a47	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a4a	c9 41 00	cmp #$0041			cmp 	#65
.010a4d	90 04		bcc $010a53			bcc 	_TOKITInteger
.010a4f	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a52	60		rts				rts
.010a53					_TOKITInteger:
.010a53	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a56	18		clc				clc
.010a57	69 1b 00	adc #$001b			adc 	#27
.010a5a	60		rts				rts
.010a5b					TOKIsIdentifierCharacter:
.010a5b	c9 30 00	cmp #$0030			cmp 	#"0"
.010a5e	90 0f		bcc $010a6f			bcc 	_TOKIIFail
.010a60	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a63	90 0c		bcc $010a71			bcc 	_TOKIIOk
.010a65	c9 41 00	cmp #$0041			cmp 	#"A"
.010a68	90 05		bcc $010a6f			bcc 	_TOKIIFail
.010a6a	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a6d	90 02		bcc $010a71			bcc 	_TOKIIOk
.010a6f					_TOKIIFail:
.010a6f	18		clc				clc
.010a70	60		rts				rts
.010a71					_TOKIIOk:
.010a71	38		sec				sec
.010a72	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a73					Binary_Add:
.010a73	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a75	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a77	30 12		bmi $010a8b		bmi 	_BATypeError
.010a79	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a7b	30 3f		bmi $010abc		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a7d	18		clc			clc 										; add the results
.010a7e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a80	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a82	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a84	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a86	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a88	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a8a	60		rts			rts
.010a8b					_BATypeError:
.010a8b	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010a8e	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a96	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010aa6	65 73 00
.010aa9					_BALengthError:
.010aa9	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010aac	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ab4	6f 6f 20 6c 6f 6e 67 00
.010abc					_BAConcatenateString:
.010abc	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010abe	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010ac0	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ac2	85 0c		sta $0c			sta 	DTemp2
.010ac4	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010ac6	18		clc			clc 										; work out the total length
.010ac7	b2 08		lda ($08)		lda 	(DTemp1)
.010ac9	72 0c		adc ($0c)		adc 	(DTemp2)
.010acb	b0 14		bcs $010ae1		bcs 	_BAConcatLengthError 				; string is too long.
.010acd	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010acf	20 4e 07	jsr $01074e		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010ad2	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010ad4	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ad6	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010ad8	20 88 07	jsr $010788		jsr 	StringCreateCopy
.010adb	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010add	20 88 07	jsr $010788		jsr 	StringCreateCopy
.010ae0	60		rts			rts
.010ae1					_BAConcatLengthError:
.010ae1	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010ae4	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010aec	6f 6f 20 6c 6f 6e 67 00
.010af4					Binary_Subtract:
.010af4	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010af7	38		sec			sec
.010af8	b5 00		lda $00,x		lda		EXSValueL+0,x
.010afa	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010afc	95 00		sta $00,x		sta 	EXSValueL+0,x
.010afe	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b00	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b02	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b04	60		rts			rts
.010b05					Binary_ShiftRight:
.010b05	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b08	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b0a	29 3f 00	and #$003f		and 	#63
.010b0d	f0 07		beq $010b16		beq		_Binary_SRExit
.010b0f					_Binary_SRLoop:
.010b0f	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010b11	76 00		ror $00,x		ror 	EXSValueL+0,x
.010b13	3a		dec a			dec 	a
.010b14	d0 f9		bne $010b0f		bne 	_Binary_SRLoop
.010b16					_Binary_SRExit:
.010b16	60		rts			rts
.010b17					Binary_ShiftLeft:
.010b17	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b1a	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b1c	29 3f 00	and #$003f		and 	#63
.010b1f	f0 07		beq $010b28		beq		_Binary_SLExit
.010b21					_Binary_SLLoop:
.010b21	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b23	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b25	3a		dec a			dec 	a
.010b26	d0 f9		bne $010b21		bne 	_Binary_SLLoop
.010b28					_Binary_SLExit:
.010b28	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010b29					Binary_And:
.010b29	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b2c	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b2e	35 02		and $02,x		and 	EXSValueL+2,x
.010b30	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b32	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b34	35 22		and $22,x		and 	EXSValueH+2,x
.010b36	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b38	60		rts			rts
.010b39					Binary_Or:
.010b39	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b3c	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b3e	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b40	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b42	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b44	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b46	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b48	60		rts			rts
.010b49					Binary_Xor:
.010b49	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b4c	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b4e	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b50	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b52	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b54	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b56	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b58	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b59					Binary_Equals:
.010b59	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b5c	b0 0e		bcs $010b6c		bcs 	_BEString
.010b5e	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b60	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b62	d0 4f		bne $010bb3		bne 	Compare_Fail
.010b64	b5 20		lda $20,x		lda 	EXSValueH,x
.010b66	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b68	d0 49		bne $010bb3		bne 	Compare_Fail
.010b6a	80 3f		bra $010bab		bra 	Compare_Succeed
.010b6c					_BEString:
.010b6c	09 00 00	ora #$0000		ora 	#$0000
.010b6f	f0 3a		beq $010bab		beq 	Compare_Succeed
.010b71	80 40		bra $010bb3		bra 	Compare_Fail
.010b73					Binary_NotEquals:
.010b73	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b76	b0 0e		bcs $010b86		bcs 	_BNEString
.010b78	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b7a	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b7c	d0 2d		bne $010bab		bne 	Compare_Succeed
.010b7e	b5 20		lda $20,x		lda 	EXSValueH,x
.010b80	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b82	d0 27		bne $010bab		bne 	Compare_Succeed
.010b84	80 2d		bra $010bb3		bra 	Compare_Fail
.010b86					_BNEString:
.010b86	09 00 00	ora #$0000		ora 	#$0000
.010b89	d0 20		bne $010bab		bne 	Compare_Succeed
.010b8b	80 26		bra $010bb3		bra 	Compare_Fail
.010b8d					Binary_Less:
.010b8d	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b90	b0 12		bcs $010ba4		bcs 	_BLString
.010b92	38		sec			sec
.010b93	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b95	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b97	b5 20		lda $20,x		lda 	EXSValueH,x
.010b99	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b9b	50 03		bvc $010ba0		bvc 	*+5
.010b9d	49 00 80	eor #$8000		eor 	#$8000
.010ba0	30 09		bmi $010bab		bmi 	Compare_Succeed
.010ba2	80 0f		bra $010bb3		bra 	Compare_Fail
.010ba4					_BLString:
.010ba4	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010ba7	f0 02		beq $010bab		beq 	Compare_Succeed
.010ba9	80 08		bra $010bb3		bra 	Compare_Fail
.010bab					Compare_Succeed:
.010bab	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010bae	95 00		sta $00,x		sta 	EXSValueL,x
.010bb0	95 20		sta $20,x		sta 	EXSValueH,x
.010bb2	60		rts			rts
.010bb3					Compare_Fail:
.010bb3	74 00		stz $00,x		stz 	EXSValueL,x
.010bb5	74 20		stz $20,x		stz 	EXSValueH,x
.010bb7	60		rts			rts
.010bb8					Binary_GreaterEqual:
.010bb8	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bbb	b0 12		bcs $010bcf		bcs 	_BGEString
.010bbd	38		sec			sec
.010bbe	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010bc0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc2	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc4	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bc6	50 03		bvc $010bcb		bvc 	*+5
.010bc8	49 00 80	eor #$8000		eor 	#$8000
.010bcb	10 de		bpl $010bab		bpl 	Compare_Succeed
.010bcd	80 e4		bra $010bb3		bra 	Compare_Fail
.010bcf					_BGEString:
.010bcf	09 00 00	ora #$0000		ora 	#$0000
.010bd2	10 d7		bpl $010bab		bpl 	Compare_Succeed
.010bd4	80 dd		bra $010bb3		bra 	Compare_Fail
.010bd6					Binary_LessEqual:
.010bd6	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bd9	b0 12		bcs $010bed		bcs 	_BLEString
.010bdb	18		clc			clc 									; numeric <= signed
.010bdc	b5 00		lda $00,x		lda 	EXSValueL,x
.010bde	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010be0	b5 20		lda $20,x		lda 	EXSValueH,x
.010be2	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010be4	50 03		bvc $010be9		bvc 	*+5
.010be6	49 00 80	eor #$8000		eor 	#$8000
.010be9	30 c0		bmi $010bab		bmi 	Compare_Succeed
.010beb	80 c6		bra $010bb3		bra 	Compare_Fail
.010bed					_BLEString:
.010bed	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bf0	d0 b9		bne $010bab		bne 	Compare_Succeed
.010bf2	80 bf		bra $010bb3		bra 	Compare_Fail
.010bf4					Binary_Greater:
.010bf4	20 12 0c	jsr $010c12		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bf7	b0 12		bcs $010c0b		bcs 	_BGString
.010bf9	18		clc			clc 									; numeric > signed
.010bfa	b5 00		lda $00,x		lda 	EXSValueL,x
.010bfc	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bfe	b5 20		lda $20,x		lda 	EXSValueH,x
.010c00	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c02	50 03		bvc $010c07		bvc 	*+5
.010c04	49 00 80	eor #$8000		eor 	#$8000
.010c07	10 a2		bpl $010bab		bpl 	Compare_Succeed
.010c09	80 a8		bra $010bb3		bra 	Compare_Fail
.010c0b					_BGString:
.010c0b	c9 01 00	cmp #$0001		cmp 	#$0001
.010c0e	f0 9b		beq $010bab		beq 	Compare_Succeed
.010c10	80 a1		bra $010bb3		bra 	Compare_Fail
.010c12					CompareTypeCheck:
.010c12	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010c14	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010c16	30 06		bmi $010c1e		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010c18	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010c1a	30 1c		bmi $010c38		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010c1c	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010c1d	60		rts			rts
.010c1e					_CTCFail:
.010c1e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010c21	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c29	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c38					_CTCStringCompare:
.010c38	20 33 06	jsr $010633		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c3b	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c3d	85 08		sta $08			sta 	DTemp1
.010c3f	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c41	85 0c		sta $0c			sta 	DTemp2
.010c43	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c46	a8		tay			tay
.010c47	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c49	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c4b	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c4d	90 02		bcc $010c51		bcc 	_CTCSmallest
.010c4f	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c51					_CTCSmallest:
.010c51	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c53					_CTCCompare:
.010c53	c8		iny			iny 									; look at next character (done first, first char is size)
.010c54	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c56	30 16		bmi $010c6e		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c58	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c5a	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c5c	f0 f5		beq $010c53		beq 	_CTCCompare 					; if zero, try the next character.
.010c5e	b0 07		bcs $010c67		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c60					_CTCLess:
.010c60	c2 20		rep #$20		rep 	#$20
.010c62	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c65	80 14		bra $010c7b		bra 	_CTCExit
.010c67					_CTCGreater:
.010c67	c2 20		rep #$20		rep 	#$20
.010c69	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c6c	80 0d		bra $010c7b		bra 	_CTCExit
.010c6e					_CTCEqualSoFar:
.010c6e	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c70	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c72	90 ec		bcc $010c60		bcc 	_CTCLess
.010c74	d0 f1		bne $010c67		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c76	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c78	a9 00 00	lda #$0000		lda 	#$0000
.010c7b					_CTCExit:
.010c7b	38		sec			sec 									; return with CS indicating string comparison.
.010c7c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c7d					Binary_Divide:
.010c7d	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010c80	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c82	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c84	d0 14		bne $010c9a		bne 	_BinaryDivide_Ok
.010c86	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010c89	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c91	20 62 79 20 7a 65 72 6f 00
.010c9a					_BinaryDivide_Ok:
.010c9a	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c9c	64 0a		stz $0a			stz 	DTemp1+2
.010c9e	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010ca0	5a		phy			phy 										; save Y (bit counter)
.010ca1	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010ca3	10 07		bpl $010cac		bpl 	_BinaryDivide_RightDone
.010ca5	e8		inx			inx
.010ca6	e8		inx			inx
.010ca7	20 e2 0c	jsr $010ce2		jsr 	Binary_DivNegate
.010caa	ca		dex			dex
.010cab	ca		dex			dex
.010cac					_BinaryDivide_RightDone:
.010cac	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010cae	10 03		bpl $010cb3		bpl 	_BinaryDivide_LeftDone
.010cb0	20 e2 0c	jsr $010ce2		jsr 	Binary_DivNegate
.010cb3					_BinaryDivide_LeftDone:
.010cb3	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010cb6					_BinaryDivide_Loop:
.010cb6	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010cb8	36 20		rol $20,x		rol 	EXSValueH+0,x
.010cba	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010cbc	26 0a		rol $0a			rol 	DTemp1+2
.010cbe	38		sec			sec											; calculate A-M
.010cbf	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010cc1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010cc3	85 0c		sta $0c			sta 	DTemp2
.010cc5	a5 0a		lda $0a			lda 	DTemp1+2
.010cc7	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010cc9	90 08		bcc $010cd3		bcc 	_Binary_NoSubract 					; if A < M skip this
.010ccb	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010ccd	a5 0c		lda $0c			lda 	DTemp2
.010ccf	85 08		sta $08			sta 	DTemp1+0
.010cd1	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cd3					_Binary_NoSubract:
.010cd3	88		dey			dey 										; do it 32 times.
.010cd4	d0 e0		bne $010cb6		bne 	_BinaryDivide_Loop
.010cd6					_BinaryDivide_Exit:
.010cd6	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cd8	29 01 00	and #$0001		and 	#1
.010cdb	f0 03		beq $010ce0		beq 	_BinaryDivide_Exit2
.010cdd	20 e2 0c	jsr $010ce2		jsr 	Binary_DivNegate
.010ce0					_BinaryDivide_Exit2:
.010ce0	7a		ply			ply 										; restore Y
.010ce1	60		rts			rts
.010ce2					Binary_DivNegate:
.010ce2	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010ce4	38		sec			sec 										; negate the value at stack X.
.010ce5	a9 00 00	lda #$0000		lda 	#$0000
.010ce8	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cea	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cec	a9 00 00	lda #$0000		lda 	#$0000
.010cef	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cf1	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cf3	60		rts			rts
.010cf4					Binary_Modulus:
.010cf4	20 7d 0c	jsr $010c7d		jsr 	Binary_Divide 						; do the divide
.010cf7	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cf9	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cfb	a5 0a		lda $0a			lda 	DTemp1+2
.010cfd	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cff	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010d00					Binary_Multiply:
.010d00	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010d03	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010d05	85 08		sta $08			sta 	DTemp1
.010d07	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d09	85 0a		sta $0a			sta		DTemp1+2
.010d0b	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010d0d	74 20		stz $20,x		stz 	EXSValueH+0,x
.010d0f					_BinaryMultiply_Loop:
.010d0f	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010d11	05 0a		ora $0a			ora 	DTemp1+2
.010d13	f0 1e		beq $010d33		beq 	_BinaryMultiply_Exit
.010d15	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010d17	29 01 00	and #$0001		and 	#1
.010d1a	f0 0d		beq $010d29		beq 	_BinaryMultiply_NoAdd
.010d1c	18		clc			clc 										; add multiplicand to result.
.010d1d	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d1f	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d21	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d23	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d25	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d27	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d29					_BinaryMultiply_NoAdd:
.010d29	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d2b	66 08		ror $08			ror 	DTemp1
.010d2d	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d2f	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d31	80 dc		bra $010d0f		bra 	_BinaryMultiply_Loop 				; go round again.
.010d33					_BinaryMultiply_Exit:
.010d33	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010d34					Function_Len:
.010d34	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010d37	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d3a	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d3d	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d3f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d42	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d45	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d47	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d49	60		rts				rts
.010d4a					Function_Abs:
.010d4a	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010d4d	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d50	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d53	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d55	30 07		bmi $010d5e			bmi 	_FAbsNegative 				; negate it if negative
.010d57	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d59	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d5b	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d5d	60		rts				rts
.010d5e					_FAbsNegative:
.010d5e	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d5f	a9 00 00	lda #$0000			lda 	#0
.010d62	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d64	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d66	a9 00 00	lda #$0000			lda 	#0
.010d69	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d6b	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d6d	60		rts				rts
.010d6e					Function_Sgn:
.010d6e	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns integer
.010d71	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d74	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d77	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d79	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d7b	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d7d	30 07		bmi $010d86			bmi 	_FSgnNegative 				; set to -1 if signed
.010d7f	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d81	f0 02		beq $010d85			beq 	_FSgnExit
.010d83	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d85					_FSgnExit:
.010d85	60		rts				rts
.010d86					_FSgnNegative:
.010d86	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d89	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d8b	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d8d	60		rts				rts
.010d8e					Function_Random:
.010d8e	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d91	20 33 06	jsr $010633			jsr 	ResetTypeInteger
.010d94	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d96	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d98	d0 0a		bne $010da4			bne 	_Rnd_NotZero
.010d9a	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d9d	85 10		sta $10				sta 	DRandom
.010d9f	a9 ea 00	lda #$00ea			lda 	#$EA
.010da2	85 12		sta $12				sta 	DRandom+2
.010da4					_Rnd_NotZero:
.010da4	20 af 0d	jsr $010daf			jsr 	_Rnd_Process 				; call randomiser twice
.010da7	95 20		sta $20,x			sta 	EXSValueH+0,x
.010da9	20 af 0d	jsr $010daf			jsr 	_Rnd_Process
.010dac	95 00		sta $00,x			sta 	EXSValueL+0,x
.010dae	60		rts				rts
.010daf					_Rnd_Process:
.010daf	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010db1	26 12		rol $12				rol 	DRandom+2
.010db3	90 0e		bcc $010dc3			bcc 	_Rnd_Exit
.010db5	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010db7	49 54 d4	eor #$d454			eor 	#$D454
.010dba	85 10		sta $10				sta 	DRandom
.010dbc	a5 12		lda $12				lda 	DRandom+2
.010dbe	49 d5 55	eor #$55d5			eor 	#$55D5
.010dc1	85 12		sta $12				sta 	DRandom+2
.010dc3					_Rnd_Exit:
.010dc3	a5 10		lda $10				lda 	DRandom
.010dc5	45 12		eor $12				eor 	DRandom+2
.010dc7	60		rts				rts
.010dc8					Function_Chr:
.010dc8	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string
.010dcb	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010dce	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010dd1	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dd4	d0 12		bne $010de8			bne 	_FCHBad
.010dd6	48		pha				pha  								; save char # on stack
.010dd7	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dda	20 4e 07	jsr $01074e			jsr 	StringTempAllocate
.010ddd	68		pla				pla 								; restore character number
.010dde	20 7a 07	jsr $01077a			jsr 	StringWriteCharacter 		; write it out.
.010de1	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010de3	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010de5	74 20		stz $20,x			stz 	EXSValueH+0,x
.010de7	60		rts				rts
.010de8					_FCHBad:
.010de8	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010deb	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010df3	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010e00					Function_Asc:
.010e00	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010e03	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010e06	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e09	a8		tay				tay 								; string address in Y
.010e0a	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010e0d	29 ff 00	and #$00ff			and 	#$00FF
.010e10	f0 0b		beq $010e1d			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010e12	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010e15	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010e18	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010e1a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e1c	60		rts				rts
.010e1d					_FASBad:
.010e1d	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010e20	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e28	65 20 66 6f 72 20 61 73 63 28 29 00
.010e34					Function_SPC:
.010e34	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string
.010e37	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e3a	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e3d	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e40	d0 17		bne $010e59			bne 	_FSPBad
.010e42	48		pha				pha 								; save length
.010e43	20 4e 07	jsr $01074e			jsr 	StringTempAllocate 			; allocate character space
.010e46	7a		ply				ply 								; get count in Y
.010e47	f0 09		beq $010e52			beq 	_FSPExit 					; if zero, just empty string
.010e49					_FSPCopy:
.010e49	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e4c	20 7a 07	jsr $01077a			jsr 	StringWriteCharacter 		; write it out.
.010e4f	88		dey				dey
.010e50	d0 f7		bne $010e49			bne 	_FSPCopy	 				; do it Y times
.010e52					_FSPExit:
.010e52	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e54	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e56	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e58	60		rts				rts
.010e59					_FSPBad:
.010e59	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010e5c	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e64	65 20 66 6f 72 20 73 70 63 28 29 00
.010e70					Function_Inkey:
.010e70	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e73	20 33 06	jsr $010633			jsr 	ResetTypeInteger
.010e76	20 a6 1d	jsr $011da6			jsr 	HWInkey 					; read current key
.010e79	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e7b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e7d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e7e					Function_LEFT:
.010e7e	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010e81	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e84	48		pha				pha 								; save string on stack.
.010e85	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get count
.010e88	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e8b	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e8e	d0 6d		bne $010efd			bne 	FNStringParameter
.010e90	85 08		sta $08				sta 	DTemp1 						; save count.
.010e92	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010e95	7a		ply				ply 								; Y points to string.
.010e96	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e99	29 ff 00	and #$00ff			and 	#$00FF
.010e9c	f0 52		beq $010ef0			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e9e	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ea0	f0 55		beq $010ef7			beq 	FNStringY 					; return string in Y if current len = required len.
.010ea2	90 53		bcc $010ef7			bcc 	FNStringY 					; if current < required return whole thing.
.010ea4	c8		iny				iny 								; take from here - start of string
.010ea5	80 33		bra $010eda			bra 	FNDTemp1Characters
.010ea7					Function_RIGHT:
.010ea7	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010eaa	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ead	48		pha				pha 								; save string on stack.
.010eae	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get count
.010eb1	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010eb4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010eb7	d0 44		bne $010efd			bne 	FNStringParameter
.010eb9	85 08		sta $08				sta 	DTemp1 						; save count.
.010ebb	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010ebe	7a		ply				ply 								; Y points to string.
.010ebf	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010ec2	29 ff 00	and #$00ff			and 	#$00FF
.010ec5	f0 29		beq $010ef0			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ec7	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ec9	f0 2c		beq $010ef7			beq 	FNStringY 					; return string in Y if current len = required len.
.010ecb	90 2a		bcc $010ef7			bcc 	FNStringY 					; if current < required return whole thing.
.010ecd	38		sec				sec 								; current-required is the number to skip
.010ece	e5 08		sbc $08				sbc 	DTemp1
.010ed0	85 0a		sta $0a				sta 	DTemp1+2
.010ed2	98		tya				tya
.010ed3	18		clc				clc
.010ed4	65 0a		adc $0a				adc 	DTemp1+2
.010ed6	a8		tay				tay
.010ed7	c8		iny				iny 								; +1 for the count.
.010ed8	80 00		bra $010eda			bra 	FNDTemp1Characters
.010eda					FNDTemp1Characters:
.010eda	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010edc	f0 12		beq $010ef0			beq 	FNStringEmpty 				; if zero, return empty string.
.010ede	20 4e 07	jsr $01074e			jsr 	StringTempAllocate
.010ee1	48		pha				pha 								; save the address
.010ee2					_FND1Loop:
.010ee2	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ee5	20 7a 07	jsr $01077a			jsr 	StringWriteCharacter
.010ee8	c8		iny				iny
.010ee9	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010eeb	d0 f5		bne $010ee2			bne 	_FND1Loop
.010eed	7a		ply				ply 								; string address in Y
.010eee	80 07		bra $010ef7			bra 	FNStringY
.010ef0					FNStringEmpty:
.010ef0	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ef3	20 4e 07	jsr $01074e			jsr 	StringTempAllocate 			; put address of it in Y
.010ef6	a8		tay				tay
.010ef7					FNStringY:
.010ef7	98		tya				tya
.010ef8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010efa	74 22		stz $22,x			stz 	EXSValueH+2,x
.010efc	60		rts				rts
.010efd					FNStringParameter:
.010efd	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010f00	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010f08	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010f15					Function_MID:
.010f15	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010f18	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f1b	48		pha				pha 								; save string on stack.
.010f1c	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get offset (n)
.010f1f	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010f22	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f25	d0 d6		bne $010efd			bne 	FNStringParameter
.010f27	c9 00 00	cmp #$0000			cmp 	#0
.010f2a	f0 d1		beq $010efd			beq 	FNStringParameter 			; or zero
.010f2c	48		pha				pha 								; save start position on stack.
.010f2d	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f30	85 08		sta $08				sta 	DTemp1
.010f32	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f34	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f37	d0 0e		bne $010f47			bne 	_FMINoThird
.010f39	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f3b	e6 06		inc $06				inc 	DCodePtr
.010f3d	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f40	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f43	d0 b8		bne $010efd			bne 	FNStringParameter
.010f45	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f47					_FMINoThird:
.010f47	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010f4a	68		pla				pla 								; get offset position
.010f4b	85 0c		sta $0c				sta 	DTemp2
.010f4d	7a		ply				ply 								; get address of string in Y
.010f4e	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f51	29 ff 00	and #$00ff			and 	#$00FF
.010f54	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f56	90 98		bcc $010ef0			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f58	38		sec				sec 								; calculate number of characters left after
.010f59	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f5b	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f5c	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f5e	b0 02		bcs $010f62			bcs 	_FMISufficient
.010f60	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f62					_FMISufficient:
.010f62	98		tya				tya 								; get address
.010f63	18		clc				clc
.010f64	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f66	a8		tay				tay 								; put in Y
.010f67	82 70 ff	brl $010eda			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f6a					Function_Peek:
.010f6a	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010f6d	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f70	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010f73	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f75	84 0a		sty $0a				sty 	DTemp1+2
.010f77	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f7a	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f7c	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f7f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f81	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f83	60		rts				rts
.010f84					Function_Deek:
.010f84	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010f87	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f8a	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010f8d	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f8f	84 0a		sty $0a				sty 	DTemp1+2
.010f91	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f94	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f96	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f98	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f9a	60		rts				rts
.010f9b					Function_Leek:
.010f9b	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010f9e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010fa1	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010fa4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010fa6	84 0a		sty $0a				sty 	DTemp1+2
.010fa8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010fab	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fad	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010faf	c8		iny				iny
.010fb0	c8		iny				iny
.010fb1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fb3	95 20		sta $20,x			sta 	EXSValueH+0,x
.010fb5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010fb6					Function_VAL:
.010fb6	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010fb9	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010fbc	48		pha				pha 								; put string address on stack.
.010fbd	20 cd 0f	jsr $010fcd			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fc0	7a		ply				ply 								; get string address back
.010fc1	da		phx				phx 								; save X on stack
.010fc2	aa		tax				tax 								; base in X
.010fc3	98		tya				tya 								; address in A
.010fc4	20 07 10	jsr $011007			jsr 	StringToInteger
.010fc7	fa		plx				plx 								; restore X
.010fc8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fca	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fcc	60		rts				rts
.010fcd					VALGetBase:
.010fcd	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fcf	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fd2	f0 07		beq $010fdb			beq 	_VGBAlternate
.010fd4	20 01 06	jsr $010601			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fd7	a9 0a 00	lda #$000a			lda 	#10
.010fda	60		rts				rts
.010fdb					_VGBAlternate:
.010fdb	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; skip comma.
.010fde	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fe1	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fe4	d0 0e		bne $010ff4			bne 	_VGBBadBase
.010fe6	c9 02 00	cmp #$0002			cmp 	#2
.010fe9	90 09		bcc $010ff4			bcc 	_VGBBadBase
.010feb	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fee	b0 04		bcs $010ff4			bcs 	_VGBBadBase
.010ff0	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; get right bracket and return.
.010ff3	60		rts				rts
.010ff4					_VGBBadBase:
.010ff4	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010ff7	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fff	65 72 20 42 61 73 65 00
.011007					StringToInteger:
.011007	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.011009	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.01100b	29 ff 00	and #$00ff			and 	#$00FF
.01100e	85 26		sta $26				sta 	DTemp3+2
.011010	f0 6e		beq $011080			beq 	_STIError 					; if length zero it's bad.
.011012	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.011014	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.011016	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.011018	64 0a		stz $0a				stz 	DTemp1+2
.01101a	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01101c	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.01101f	48		pha				pha 								; push on stack
.011020	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011023	d0 06		bne $01102b			bne 	_STILoop
.011025	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.011027	c6 26		dec $26				dec 	DTemp3+2					; dec count
.011029	f0 55		beq $011080			beq 	_STIError 					; if only - then error.
.01102b					_STILoop:
.01102b	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01102d	20 9f 10	jsr $01109f			jsr 	MultiplyTemp1ByA
.011030	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011032	29 ff 00	and #$00ff			and 	#$00FF
.011035	20 90 10	jsr $011090			jsr 	ConvertUpperCase	 		; make U/C
.011038	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.01103b	90 43		bcc $011080			bcc 	_STIError
.01103d	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011040	90 0e		bcc $011050			bcc 	_STIOkay1
.011042	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011045	90 39		bcc $011080			bcc 	_STIError
.011047	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01104a	b0 34		bcs $011080			bcs 	_STIError
.01104c	18		clc				clc 								; shift to correct range.
.01104d	69 09 00	adc #$0009			adc 	#9
.011050					_STIOkay1:
.011050	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011053	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011055	b0 29		bcs $011080			bcs 	_STIError
.011057	18		clc				clc 								; add A to DTemp1
.011058	65 08		adc $08				adc 	DTemp1
.01105a	85 08		sta $08				sta 	DTemp1
.01105c	90 02		bcc $011060			bcc 	_STINoCarry
.01105e	e6 0a		inc $0a				inc 	DTemp1+2
.011060					_STINoCarry:
.011060	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011062	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011064	d0 c5		bne $01102b			bne 	_STILoop 					; loop back.
.011066	68		pla				pla 								; get optional minus bac
.011067	c9 2d 00	cmp #$002d			cmp 	#"-"
.01106a	d0 0f		bne $01107b			bne 	_STINotNegative 			; handle the negative character
.01106c	38		sec				sec 								; negate DTemp1
.01106d	a9 00 00	lda #$0000			lda 	#0
.011070	e5 08		sbc $08				sbc 	DTemp1
.011072	85 08		sta $08				sta 	DTemp1
.011074	a9 00 00	lda #$0000			lda 	#0
.011077	e5 0a		sbc $0a				sbc 	DTemp1+2
.011079	85 0a		sta $0a				sta 	DTemp1+2
.01107b					_STINotNegative:
.01107b	a5 08		lda $08				lda 	DTemp1 						; get the result
.01107d	a4 0a		ldy $0a				ldy 	DTemp1+2
.01107f	60		rts				rts
.011080					_STIError:
.011080	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011083	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01108b	74 61 6e 74 00
.011090					ConvertUpperCase:
.011090	c9 61 00	cmp #$0061			cmp 	#'a'
.011093	90 09		bcc $01109e			bcc 	_CUCExit
.011095	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.011098	b0 04		bcs $01109e			bcs 	_CUCExit
.01109a	38		sec				sec
.01109b	e9 20 00	sbc #$0020			sbc 	#32
.01109e					_CUCExit:
.01109e	60		rts				rts
.01109f					MultiplyTemp1ByA:
.01109f					_MTGeneral:
.01109f	da		phx				phx
.0110a0	aa		tax				tax 								; multiplier in X
.0110a1	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0110a3	85 0c		sta $0c				sta 	DTemp2
.0110a5	a5 0a		lda $0a				lda 	DTemp1+2
.0110a7	85 0e		sta $0e				sta 	DTemp2+2
.0110a9	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.0110ab	64 0a		stz $0a				stz 	DTemp1+2
.0110ad	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.0110b0					_MTLoop:
.0110b0	8a		txa				txa 								; shift X right into C
.0110b1	4a		lsr a				lsr 	a
.0110b2	aa		tax				tax
.0110b3	90 10		bcc $0110c5			bcc 	_MTNoAdd
.0110b5	18		clc				clc
.0110b6	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0110b8	65 0c		adc $0c				adc 	DTemp2
.0110ba	85 08		sta $08				sta 	DTemp1
.0110bc	a5 0a		lda $0a				lda 	DTemp1+2
.0110be	65 0e		adc $0e				adc 	DTemp2+2
.0110c0	85 0a		sta $0a				sta 	DTemp1+2
.0110c2	90 01		bcc $0110c5			bcc 	_MTNoAdd
.0110c4	c8		iny				iny
.0110c5					_MTNoAdd:
.0110c5	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110c7	26 0e		rol $0e				rol 	DTemp2+2
.0110c9	90 01		bcc $0110cc			bcc 	_MTNoOverflow
.0110cb	c8		iny				iny
.0110cc					_MTNoOverflow:
.0110cc	8a		txa				txa 								; until multiplier is zero.
.0110cd	d0 e1		bne $0110b0			bne 	_MTLoop
.0110cf	98		tya				tya
.0110d0	18		clc				clc
.0110d1	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110d4	fa		plx				plx 								; restore X
.0110d5	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.0110d6					Function_Str:
.0110d6	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.0110d9	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110dc	48		pha				pha 								; save YA on the stack
.0110dd	5a		phy				phy
.0110de	20 cd 0f	jsr $010fcd			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110e1	85 14		sta $14				sta 	DSignCount
.0110e3	7a		ply				ply 								; YA is the number
.0110e4	68		pla				pla
.0110e5	da		phx				phx
.0110e6	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110e8	20 f1 10	jsr $0110f1			jsr 	ConvertToString 			; convert it to a string.
.0110eb	fa		plx				plx 								; restore X
.0110ec	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110ee	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110f0	60		rts				rts
.0110f1					ConvertToString:
.0110f1	48		pha				pha
.0110f2	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110f5	20 4e 07	jsr $01074e			jsr 	StringTempAllocate 			; allocate space for return string.
.0110f8	68		pla				pla
.0110f9					ConvertToStringAlreadyAllocated:
.0110f9	da		phx				phx 								; save X (base)
.0110fa	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110fc	84 26		sty $26				sty 	DTemp3+2
.0110fe	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.011100	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.011102	10 15		bpl $011119			bpl 	_CTSNotNegative
.011104	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.011107	20 83 11	jsr $011183			jsr 	CTSOutputA
.01110a	38		sec				sec 								; negate DTemp3 which is the number
.01110b	a9 00 00	lda #$0000			lda 	#0
.01110e	e5 24		sbc $24				sbc 	DTemp3
.011110	85 24		sta $24				sta 	DTemp3
.011112	a9 00 00	lda #$0000			lda 	#0
.011115	e5 26		sbc $26				sbc 	DTemp3+2
.011117	85 26		sta $26				sta 	DTemp3+2
.011119					_CTSNotNegative:
.011119	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.01111c	48		pha				pha
.01111d	a9 00 00	lda #$0000			lda 	#0
.011120	48		pha				pha
.011121	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011123	85 08		sta $08				sta 	DTemp1
.011125	64 0a		stz $0a				stz 	DTemp1+2
.011127					_CTSMultiplySubtractor:
.011127	38		sec				sec 								; check number vs subtractor
.011128	a5 24		lda $24				lda 	DTemp3
.01112a	e5 08		sbc $08				sbc 	DTemp1
.01112c	a5 26		lda $26				lda 	DTemp3+2
.01112e	e5 0a		sbc $0a				sbc 	DTemp1+2
.011130	90 0f		bcc $011141			bcc		_CTSScaledUp 				; if >= then scaled up.
.011132	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011134	48		pha				pha
.011135	a5 0a		lda $0a				lda 	DTemp1+2
.011137	48		pha				pha
.011138	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01113a	20 9f 10	jsr $01109f			jsr 	MultiplyTemp1ByA
.01113d	b0 02		bcs $011141			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01113f	80 e6		bra $011127			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011141					_CTSScaledUp:
.011141	7a		ply				ply 								; YA contains the previous divider.
.011142	68		pla				pla
.011143	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011146	d0 05		bne $01114d			bne 	_CTSHasDigit
.011148	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01114b	f0 20		beq $01116d			beq 	_CTSExit
.01114d					_CTSHasDigit:
.01114d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01114f	84 0e		sty $0e				sty 	DTemp2+2
.011151	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011154					_CTSSubLoop:
.011154	38		sec				sec 								; subtract subtractor from number
.011155	a5 24		lda $24				lda 	DTemp3
.011157	e5 0c		sbc $0c				sbc 	DTemp2
.011159	a8		tay				tay 								; intermediate in Y
.01115a	a5 26		lda $26				lda 	DTemp3+2
.01115c	e5 0e		sbc $0e				sbc 	DTemp2+2
.01115e	90 07		bcc $011167			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011160	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011162	84 24		sty $24				sty 	DTemp3
.011164	e8		inx				inx 								; one more subtraction
.011165	80 ed		bra $011154			bra 	_CTSSubLoop 				; try it again.
.011167					_CTSFinishedSubtracting:
.011167	8a		txa				txa 								; convert to ASCII.
.011168	20 76 11	jsr $011176			jsr 	CTSOutputHexDigit 			; write that out.
.01116b	80 d4		bra $011141			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.01116d					_CTSExit:
.01116d	a5 24		lda $24				lda 	DTemp3 						; output last digit
.01116f	20 76 11	jsr $011176			jsr 	CTSOutputHexDigit
.011172	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011174	fa		plx				plx 								; restore X.
.011175	60		rts				rts
.011176					CTSOutputHexDigit:
.011176	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.011179	90 04		bcc $01117f			bcc 	_CTSNotLetter
.01117b	18		clc				clc
.01117c	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.01117f					_CTSNotLetter:
.01117f	18		clc				clc
.011180	69 30 00	adc #$0030			adc 	#48
.011183					CTSOutputA:
.011183	5a		phy				phy 								; save Y, set Y to current pointer
.011184	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011186	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.011189	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01118b	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.01118d	1a		inc a				inc 	a
.01118e	92 18		sta ($18)			sta 	(DStartTempString)
.011190	c2 20		rep #$20			rep 	#$20
.011192	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011194	7a		ply				ply 								; restore Y and exit.
.011195	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011196					Function_INSTR:
.011196	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns a integer
.011199	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.01119c	48		pha				pha 								; save string to search
.01119d	20 0a 06	jsr $01060a			jsr 	ExpectComma
.0111a0	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.0111a3	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.0111a6	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.0111a8	68		pla				pla
.0111a9	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.0111ab	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0111ad	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0111af	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0111b1	38		sec				sec
.0111b2	b2 0c		lda ($0c)			lda 	(DTemp2)
.0111b4	f2 08		sbc ($08)			sbc		(DTemp1)
.0111b6	c2 20		rep #$20			rep 	#$20
.0111b8	90 2c		bcc $0111e6			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0111ba	29 ff 00	and #$00ff			and 	#$00FF
.0111bd	1a		inc a				inc 	a
.0111be	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111c0	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111c2	29 ff 00	and #$00ff			and 	#$00FF
.0111c5	f0 22		beq $0111e9			beq 	_FINSError
.0111c7					_FINSLoop:
.0111c7	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111c9	1a		inc a				inc 	a
.0111ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111cc	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111ce	29 ff 00	and #$00ff			and 	#$00FF
.0111d1	a8		tay				tay									; start comparing at index 1.
.0111d2					_FINSCompare:
.0111d2	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111d4	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111d6	29 ff 00	and #$00ff			and 	#$00FF
.0111d9	d0 05		bne $0111e0			bne 	_FINSNext
.0111db	88		dey				dey
.0111dc	d0 f4		bne $0111d2			bne 	_FINSCompare
.0111de	80 08		bra $0111e8			bra 	_FINSExit
.0111e0					_FINSNext:
.0111e0	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111e2	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111e4	d0 e1		bne $0111c7			bne 	_FINSLoop
.0111e6					_FINSFail:
.0111e6	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111e8					_FINSExit:
.0111e8	60		rts				rts
.0111e9					_FINSError:
.0111e9	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0111ec	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111f4	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0111fd					Function_UPPER:
.0111fd	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.011200	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011203	48		pha				pha
.011204	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; close call.
.011207	20 4e 07	jsr $01074e			jsr		StringTempAllocate 			; allocate memory for it
.01120a	68		pla				pla
.01120b	20 88 07	jsr $010788			jsr 	StringCreateCopy 			; create a copy of it.
.01120e	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011210	95 00		sta $00,x			sta 	EXSValueL+0,x
.011212	a8		tay				tay 								; address in Y
.011213	74 20		stz $20,x			stz 	EXSValueH+0,x
.011215	da		phx				phx 								; save X
.011216	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011218	29 ff 00	and #$00ff			and 	#$00FF
.01121b	f0 20		beq $01123d			beq 	_FUPExit
.01121d	aa		tax				tax 								; put in X
.01121e					_FUPLoop:
.01121e	c8		iny				iny 								; increment and load character
.01121f	b9 00 00	lda $0000,y			lda 	$0000,y
.011222	29 ff 00	and #$00ff			and 	#$00FF
.011225	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011228	90 10		bcc $01123a			bcc 	_FUPNoChange
.01122a	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01122d	b0 0b		bcs $01123a			bcs 	_FUPNoChange
.01122f	38		sec				sec 								; shift case
.011230	e9 20 00	sbc #$0020			sbc 	#32
.011233	e2 20		sep #$20			sep 	#$20 						; write back
.011235	99 00 00	sta $0000,y			sta 	$0000,y
.011238	c2 20		rep #$20			rep 	#$20
.01123a					_FUPNoChange:
.01123a	ca		dex				dex 								; do X times
.01123b	d0 e1		bne $01121e			bne 	_FUPLoop
.01123d					_FUPExit:
.01123d	fa		plx				plx 								; restore X
.01123e	60		rts				rts
.01123f					Function_LOWER:
.01123f	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.011242	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011245	48		pha				pha
.011246	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; close call.
.011249	20 4e 07	jsr $01074e			jsr		StringTempAllocate 			; allocate memory for it
.01124c	68		pla				pla
.01124d	20 88 07	jsr $010788			jsr 	StringCreateCopy 			; create a copy of it.
.011250	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011252	95 00		sta $00,x			sta 	EXSValueL+0,x
.011254	a8		tay				tay 								; address in Y
.011255	74 20		stz $20,x			stz 	EXSValueH+0,x
.011257	da		phx				phx 								; save X
.011258	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01125a	29 ff 00	and #$00ff			and 	#$00FF
.01125d	f0 20		beq $01127f			beq 	_FLOExit
.01125f	aa		tax				tax 								; put in X
.011260					_FLOLoop:
.011260	c8		iny				iny 								; increment and load character
.011261	b9 00 00	lda $0000,y			lda 	$0000,y
.011264	29 ff 00	and #$00ff			and 	#$00FF
.011267	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01126a	90 10		bcc $01127c			bcc 	_FLONoChange
.01126c	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01126f	b0 0b		bcs $01127c			bcs 	_FLONoChange
.011271	18		clc				clc 								; shift case
.011272	69 20 00	adc #$0020			adc 	#32
.011275	e2 20		sep #$20			sep 	#$20 						; write back
.011277	99 00 00	sta $0000,y			sta 	$0000,y
.01127a	c2 20		rep #$20			rep 	#$20
.01127c					_FLONoChange:
.01127c	ca		dex				dex 								; do X times
.01127d	d0 e1		bne $011260			bne 	_FLOLoop
.01127f					_FLOExit:
.01127f	fa		plx				plx 								; restore X
.011280	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011281					Function_Let:
.011281	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011283	48		pha				pha  								; save on stack for later.
.011284	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; find the variable
.011287	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.011289	b0 1c		bcs $0112a7			bcs 	_FLetFound 					; skip if found.
.01128b	68		pla				pla 								; get and push the first token again.
.01128c	48		pha				pha
.01128d	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011290	d0 60		bne $0112f2			bne 	_FLError					; arrays, so this causes an error.
.011292	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011294	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011297	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.01129a	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01129c					_FLSkipToken:
.01129c	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01129e	e6 06		inc $06				inc 	DCodePtr
.0112a0	e6 06		inc $06				inc 	DCodePtr
.0112a2	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0112a5	d0 f5		bne $01129c			bne 	_FLSkipToken
.0112a7					_FLetFound:
.0112a7	68		pla				pla 								; get and save the first token.
.0112a8	48		pha				pha
.0112a9	a8		tay				tay 								; put it in Y
.0112aa	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0112ad	f0 07		beq $0112b6			beq 	_FLetNotArray
.0112af	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0112b1	20 19 04	jsr $010419			jsr 	VariableSubscript			; index calculation
.0112b4	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0112b6					_FLetNotArray:
.0112b6	7a		ply				ply 								; get the first token into Y
.0112b7	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0112b9	48		pha				pha
.0112ba	5a		phy				phy 								; save the first token on the stack.
.0112bb	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0112be	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112c0	d0 23		bne $0112e5			bne 	_FLetMissingEquals
.0112c2	e6 06		inc $06				inc 	DCodePtr
.0112c4	e6 06		inc $06				inc 	DCodePtr
.0112c6	68		pla				pla 								; restore the first token.
.0112c7	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112ca	d0 0f		bne $0112db			bne 	_FLetString 				; skip if string.
.0112cc	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.0112cf	7a		ply				ply 								; get address in Y
.0112d0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112d2	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112d5	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112d7	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112da	60		rts				rts
.0112db					_FLetString:
.0112db	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112de	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112e0	7a		ply				ply 								; get address we are overwriting.
.0112e1	20 8e 06	jsr $01068e			jsr 	StringReassign 				; reassign that address
.0112e4	60		rts				rts
.0112e5					_FLetMissingEquals:
.0112e5	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0112e8	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112f0	3d 00
.0112f2					_FLError:
.0112f2	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0112f5	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112fd	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.011305					Function_PROC:
.011305	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.011308	18		clc				clc
.011309	65 02		adc $02				adc 	DBaseAddress
.01130b	aa		tax				tax 								; X is used to track it
.01130c					_FPROLoop:
.01130c	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.01130f	f0 56		beq $011367			beq 	_FPROUnknown
.011311	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.011314	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.011317	f0 08		beq $011321			beq 	_FPROFoundDefProc
.011319					_FPRONext:
.011319	8a		txa				txa 								; follow the link.
.01131a	18		clc				clc
.01131b	7d 00 00	adc $0000,x			adc 	@w$0000,x
.01131e	aa		tax				tax
.01131f	80 eb		bra $01130c			bra 	_FPROLoop
.011321					_FPROFoundDefProc:
.011321	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.011324	d2 06		cmp ($06)			cmp 	(DCodePtr)
.011326	d0 f1		bne $011319			bne 	_FPRONext
.011328	8a		txa				txa 								; DTemp1 points to the token.
.011329	18		clc				clc
.01132a	69 06 00	adc #$0006			adc 	#6
.01132d	85 08		sta $08				sta 	DTemp1
.01132f	a0 00 00	ldy #$0000			ldy 	#0
.011332					_FPROCompare:
.011332	b1 08		lda ($08),y			lda 	(DTemp1),y
.011334	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.011336	d0 e1		bne $011319			bne 	_FPRONext 					; fails, different
.011338	c8		iny				iny
.011339	c8		iny				iny
.01133a	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.01133d	d0 f3		bne $011332			bne 	_FPROCompare
.01133f	98		tya				tya 								; this is the offset to the next element
.011340	18		clc				clc
.011341	65 08		adc $08				adc 	DTemp1
.011343	48		pha				pha 								; push the next command on the stack
.011344	da		phx				phx 								; push the record address on the stack.
.011345	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011347	98		tya				tya 								; work out the return address
.011348	18		clc				clc
.011349	65 06		adc $06				adc 	DCodePtr
.01134b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01134d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01134f	95 04		sta $04,x			sta 	$04,x
.011351	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011354	95 06		sta $06,x			sta 	$06,x
.011356	8a		txa				txa 								; advance stack by 6.
.011357	18		clc				clc
.011358	69 06 00	adc #$0006			adc 	#6
.01135b	85 2a		sta $2a				sta 	DStack
.01135d	7a		ply				ply 								; line record address
.01135e	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011361	85 22		sta $22				sta 	DLineNumber
.011363	68		pla				pla 								; next command
.011364	85 06		sta $06				sta 	DCodePtr
.011366	60		rts				rts
.011367					_FPROUnknown:
.011367	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01136a	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011372	70 72 6f 63 65 64 75 72 65 00
.01137c					Function_ENDPROC:
.01137c	a6 2a		ldx $2a				ldx 	DStack
.01137e	b5 00		lda $00,x			lda 	$00,x
.011380	c9 00 c0	cmp #$c000			cmp 	#$C000 						; is it a local/parameter ?
.011383	b0 2e		bcs $0113b3			bcs 	_FENPPopLocal
.011385	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011388	d0 11		bne $01139b			bne 	_FENPFail
.01138a	8a		txa				txa 								; unpick stack.
.01138b	38		sec				sec
.01138c	e9 06 00	sbc #$0006			sbc 	#6
.01138f	85 2a		sta $2a				sta 	DStack
.011391	aa		tax				tax
.011392	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011394	85 06		sta $06				sta 	DCodePtr
.011396	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011398	85 22		sta $22				sta 	DLineNumber
.01139a	60		rts				rts
.01139b					_FENPFail:
.01139b	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01139e	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>0113a6	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.0113b3					_FENPPopLocal:
.0113b3	a5 2a		lda $2a				lda 	DStack 						; wind stack down.
.0113b5	38		sec				sec
.0113b6	e9 08 00	sbc #$0008			sbc 	#8
.0113b9	85 2a		sta $2a				sta 	DStack
.0113bb	aa		tax				tax
.0113bc	b5 02		lda $02,x			lda 	$02,x 						; get address
.0113be	a8		tay				tay
.0113bf	b5 04		lda $04,x			lda 	$04,x 						; copy data
.0113c1	99 00 00	sta $0000,y			sta 	$0000,y
.0113c4	b5 06		lda $06,x			lda 	$06,x
.0113c6	99 02 00	sta $0002,y			sta 	$0002,y
.0113c9	80 b1		bra $01137c			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.0113cb					Command_LOCAL:
.0113cb	20 f5 13	jsr $0113f5			jsr 	LocalProcessVariable 		; make one variable 'local'
.0113ce	90 0e		bcc $0113de			bcc 	_CLOFail
.0113d0	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.0113d2	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113d5	d0 06		bne $0113dd			bne 	_CLOExit
.0113d7	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113d9	e6 06		inc $06				inc 	DCodePtr
.0113db	80 ee		bra $0113cb			bra 	Command_Local
.0113dd					_CLOExit:
.0113dd	60		rts				rts
.0113de					_CLOFail:
.0113de	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0113e1	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113e9	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113f5					LocalProcessVariable:
.0113f5	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113f7	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113fa	90 53		bcc $01144f			bcc 	_LPVFail
.0113fc	29 00 10	and #$1000			and 	#IDArrayMask
.0113ff	d0 4e		bne $01144f			bne 	_LPVFail
.011401	b2 06		lda ($06)			lda 	(DCodePtr)
.011403	29 00 e0	and #$e000			and 	#$E000
.011406	48		pha				pha
.011407	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find the variable
.01140a	b0 13		bcs $01141f			bcs 	_LPVFound 					; if found, A points to the data.
.01140c	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01140e	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.011411	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.011414					_LPVSkipToken:
.011414	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011416	e6 06		inc $06				inc 	DCodePtr
.011418	e6 06		inc $06				inc 	DCodePtr
.01141a	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01141d	d0 f5		bne $011414			bne 	_LPVSkipToken
.01141f					_LPVFound:
.01141f	a8		tay				tay 								; data pointer in Y
.011420	a6 2a		ldx $2a				ldx 	DStack
.011422	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.011424	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.011427	95 04		sta $04,x			sta 	$04,x
.011429	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.01142c	95 06		sta $06,x			sta 	$06,x
.01142e	68		pla				pla 								; get the type header
.01142f	95 08		sta $08,x			sta 	$08,x 						; update the BASIC stack.
.011431	29 00 20	and #$2000			and 	#IDTypeMask 				; zero if integer, non zero if string
.011434	f0 06		beq $01143c			beq 	_LPVClear
.011436	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; if string use this address.
.011439	18		clc				clc 								; which is guaranteed by have a 0 length.
.01143a	65 02		adc $02				adc 	DBaseAddress
.01143c					_LPVClear:
.01143c	99 00 00	sta $0000,y			sta 	$0000,y
.01143f	a9 00 00	lda #$0000			lda 	#$0000
.011442	99 02 00	sta $0002,y			sta 	$0002,y
.011445	8a		txa				txa
.011446	18		clc				clc
.011447	69 08 00	adc #$0008			adc 	#8
.01144a	85 2a		sta $2a				sta 	DStack
.01144c	38		sec				sec
.01144d	98		tya				tya 								; return address
.01144e	60		rts				rts
.01144f					_LPVFail:
.01144f	18		clc				clc
.011450	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.011451					Command_List:
.011451	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011454	20 4e 07	jsr $01074e		jsr 	StringTempAllocate
.011457	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011459	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01145b	64 2e		stz $2e			stz 	DIndent2
.01145d	64 32		stz $32			stz 	DTemp4+0 						; low number
.01145f	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011462	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011464	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011466	f0 3b		beq $0114a3		beq 	_CLIList
.011468	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01146b	f0 36		beq $0114a3		beq 	_CLIList
.01146d	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.011470	f0 13		beq $011485		beq 	_CLIComma
.011472	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.011475	c0 00 00	cpy #$0000		cpy 	#0
.011478	d0 21		bne $01149b		bne 	_CLIError
.01147a	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01147c	85 34		sta $34			sta 	DTemp4+2
.01147e	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011480	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011483	d0 1e		bne $0114a3		bne 	_CLIList
.011485					_CLIComma:
.011485	20 0a 06	jsr $01060a		jsr 	ExpectComma 					; skip comma
.011488	b2 06		lda ($06)		lda 	(DCodePtr)
.01148a	f0 12		beq $01149e		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.01148c	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01148f	f0 0d		beq $01149e		beq 	_CLIToEnd
.011491	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.011494	85 34		sta $34			sta 	DTemp4+2
.011496	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011499	f0 08		beq $0114a3		beq 	_CLIList
.01149b					_CLIError:
.01149b	82 39 f1	brl $0105d7		brl 	SyntaxError
.01149e					_CLIToEnd:
.01149e	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0114a1	85 34		sta $34			sta 	DTemp4+2
.0114a3					_CLIList:
.0114a3	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114a6	18		clc			clc
.0114a7	65 02		adc $02			adc 	DBaseAddress
.0114a9	a8		tay			tay 									; put in Y
.0114aa					_CLINextLine:
.0114aa	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114ad	f0 29		beq $0114d8		beq 	_CLIExit
.0114af	20 40 16	jsr $011640		jsr 	ScanIndent  					; scan for formatting.
.0114b2	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114b5	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114b7	90 14		bcc $0114cd		bcc 	_CLIFollowLink
.0114b9	c5 34		cmp $34			cmp 	DTemp4+2
.0114bb	f0 02		beq $0114bf		beq 	_CLIShowLine
.0114bd	b0 0e		bcs $0114cd		bcs 	_CLIFollowLink
.0114bf					_CLIShowLine:
.0114bf	a5 30		lda $30			lda 	DListBuffer
.0114c1	20 db 14	jsr $0114db		jsr 	Detokenise 						; detokenise it
.0114c4	5a		phy			phy
.0114c5	a8		tay			tay 									; print buffer out
.0114c6	20 61 06	jsr $010661		jsr 	PrintBasicString
.0114c9	20 85 1d	jsr $011d85		jsr 	HWNewLine
.0114cc	7a		ply			ply 									; get address
.0114cd					_CLIFollowLink:
.0114cd	98		tya			tya 									; follow link
.0114ce	18		clc			clc
.0114cf	79 00 00	adc $0000,y		adc 	$0000,y
.0114d2	a8		tay			tay
.0114d3	20 a1 1d	jsr $011da1		jsr 	HWCheckBreak 					; break key pressed.
.0114d6	f0 d2		beq $0114aa		beq 	_CLINextLine
.0114d8					_CLIExit:
.0114d8	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114da	60		rts			rts
.0114db					Detokenise:
.0114db	48		pha			pha
.0114dc	da		phx			phx
.0114dd	5a		phy			phy
.0114de	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0114e0	1a		inc a			inc 	a
.0114e1	85 1a		sta $1a			sta 	DCurrentTempString
.0114e3	64 1c		stz $1c			stz		DConstantShift
.0114e5	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114e8	92 18		sta ($18)		sta 	(DStartTempString)
.0114ea	5a		phy			phy 									; save Y
.0114eb	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0114ee	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0114f1	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114f4	20 f9 10	jsr $0110f9		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114f7	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0114f9	c5 2e		cmp $2e			cmp 	DIndent2
.0114fb	90 02		bcc $0114ff		bcc 	_DTKSmaller
.0114fd	a5 2e		lda $2e			lda 	DIndent2
.0114ff					_DTKSmaller:
.0114ff	0a		asl a			asl 	a
.011500	69 06 00	adc #$0006		adc 	#6
.011503	85 08		sta $08			sta 	DTemp1
.011505					_DTKPadLineNo:
.011505	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011508	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.01150b	b2 18		lda ($18)		lda 	(DStartTempString)
.01150d	29 ff 00	and #$00ff		and 	#$00FF
.011510	c5 08		cmp $08			cmp 	DTemp1
.011512	d0 f1		bne $011505		bne 	_DTKPadLineNo
.011514	68		pla			pla 									; get pointer
.011515	18		clc			clc 									; point to start of line
.011516	69 04 00	adc #$0004		adc 	#4
.011519	a8		tay			tay 									; put back in Y.
.01151a					_DTKMainLoop:
.01151a	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01151d	d0 04		bne $011523		bne 	_DTKNotZero 					; if zero, return.
.01151f	7a		ply			ply
.011520	fa		plx			plx
.011521	68		pla			pla
.011522	60		rts			rts
.011523					_DTKNotZero:
.011523	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011526	b0 1c		bcs $011544		bcs 	_DTKNotString
.011528	5a		phy			phy										; save token address on stack.
.011529	c8		iny			iny 									; skip first token
.01152a	c8		iny			iny
.01152b	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01152e	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.011531	98		tya			tya 									; copy the string out.
.011532	20 88 07	jsr $010788		jsr 	StringCreateCopy
.011535	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011538	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.01153b	68		pla			pla 									; get token, which is its own offset
.01153c	a8		tay			tay
.01153d	18		clc			clc
.01153e	79 00 00	adc $0000,y		adc 	$0000,y
.011541	a8		tay			tay
.011542	80 d6		bra $01151a		bra 	_DTKMainLoop
.011544					_DTKNotString:
.011544	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011547	b0 09		bcs $011552		bcs 	_DTKNotShift
.011549	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01154c	85 1c		sta $1c			sta 	DConstantShift
.01154e	c8		iny			iny 									; skip token.
.01154f	c8		iny			iny
.011550	80 c8		bra $01151a		bra 	_DTKMainLoop
.011552					_DTKNotShift:
.011552	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011555	b0 07		bcs $01155e		bcs 	_DTKNotKeyword
.011557	c8		iny			iny 									; skip over token
.011558	c8		iny			iny
.011559	20 d8 15	jsr $0115d8		jsr 	_DTKDecodeKeyword 				; decode it.
.01155c	80 bc		bra $01151a		bra 	_DTKMainLoop
.01155e					_DTKNotKeyword:
.01155e	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011561	b0 18		bcs $01157b		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011563	5a		phy			phy 									; save pointer
.011564	38		sec			sec  									; shift it in the range 0-32767
.011565	e9 00 40	sbc #$4000		sbc 	#$4000
.011568	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011569	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01156b	6a		ror a			ror 	a 								; rotate that into the constant value
.01156c	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01156e	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011571	20 f9 10	jsr $0110f9		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011574	64 1c		stz $1c			stz 	DConstantShift
.011576	7a		ply			ply 									; restore pointer
.011577	c8		iny			iny 									; skip token.
.011578	c8		iny			iny
.011579	80 9f		bra $01151a		bra 	_DTKMainLoop
.01157b					_DTKIdentifier:
.01157b	48		pha			pha 									; save token for typing at end
.01157c					_DTKILoop:
.01157c	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01157f	20 a8 15	jsr $0115a8		jsr 	_DTKIDecodeToken 				; decode it.
.011582	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011585	c8		iny			iny 									; skip it
.011586	c8		iny			iny
.011587	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01158a	d0 f0		bne $01157c		bne 	_DTKILoop
.01158c	68		pla			pla 									; add $( as required.
.01158d	48		pha			pha 									; comes from the first token.
.01158e	29 00 20	and #$2000		and 	#IDTypeMask
.011591	f0 06		beq $011599		beq 	_DTKINotString
.011593	a9 24 00	lda #$0024		lda 	#"$"
.011596	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.011599					_DTKINotString:
.011599	68		pla			pla
.01159a	29 00 10	and #$1000		and 	#IDArrayMask
.01159d	f0 06		beq $0115a5		beq 	_DTKINotArray
.01159f	a9 28 00	lda #$0028		lda 	#"("
.0115a2	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.0115a5					_DTKINotArray:
.0115a5	82 72 ff	brl $01151a		brl 	_DTKMainLoop
.0115a8					_DTKIDecodeToken:
.0115a8	5a		phy			phy
.0115a9	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115ac	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115af					_DTKIDivide:
.0115af	38		sec			sec
.0115b0	e9 2d 00	sbc #$002d		sbc 	#45
.0115b3	c8		iny			iny
.0115b4	b0 f9		bcs $0115af		bcs 	_DTKIDivide
.0115b6	69 2d 00	adc #$002d		adc 	#45
.0115b9	20 c2 15	jsr $0115c2		jsr 	_DTKIOutA 						; output low.
.0115bc	98		tya			tya
.0115bd	20 c2 15	jsr $0115c2		jsr 	_DTKIOutA 						; output high
.0115c0	7a		ply			ply
.0115c1	60		rts			rts
.0115c2					_DTKIOutA:
.0115c2	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115c5	f0 10		beq $0115d7		beq 	_DTKIOutExit
.0115c7	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115ca	90 04		bcc $0115d0		bcc 	_DTKIOutAlpha
.0115cc	38		sec			sec  									; adjust for 0-9
.0115cd	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115d0					_DTKIOutAlpha:
.0115d0	18		clc			clc										; adjust for A-Z
.0115d1	69 60 00	adc #$0060		adc 	#96
.0115d4	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.0115d7					_DTKIOutExit:
.0115d7	60		rts			rts
.0115d8					_DTKDecodeKeyword:
.0115d8	48		pha			pha
.0115d9	da		phx			phx
.0115da	5a		phy			phy
.0115db	a8		tay			tay 									; save token ID in Y
.0115dc	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115df	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115e2	48		pha			pha 									; save this flag on a stack
.0115e3	5a		phy			phy 									; save the token ID
.0115e4	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115e7	d0 19		bne $011602		bne 	_DTKNotSpecial1
.0115e9	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115eb	88		dey			dey
.0115ec	b9 00 00	lda $0000,y		lda 	$0000,y
.0115ef	29 ff 00	and #$00ff		and 	#$00FF
.0115f2	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0115f5	f0 0b		beq $011602		beq 	_DTKNotSpecial1
.0115f7	c9 3a 00	cmp #$003a		cmp 	#":"
.0115fa	f0 06		beq $011602		beq 	_DTKNotSpecial1
.0115fc	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0115ff	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.011602					_DTKNotSpecial1:
.011602	68		pla			pla
.011603	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011606	a8		tay			tay 									; into Y.
.011607	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01160a					_DTKDWorkThrough:
.01160a	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01160b	f0 0f		beq $01161c		beq 	_DTKDFound
.01160d	86 08		stx $08			stx 	DTemp1
.01160f	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.011613	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011616	18		clc			clc
.011617	65 08		adc $08			adc 	DTemp1
.011619	aa		tax			tax
.01161a	80 ee		bra $01160a		bra 	_DTKDWorkThrough
.01161c					_DTKDFound:
.01161c	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.011620	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011623	3a		dec a			dec 	a
.011624	a8		tay			tay 									; put in Y
.011625					_DTKOut:
.011625	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.011629	29 ff 00	and #$00ff		and 	#$00FF
.01162c					_DTKNotLC:
.01162c	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.01162f	e8		inx			inx
.011630	88		dey			dey
.011631	d0 f2		bne $011625		bne 	_DTKOut
.011633	68		pla			pla 									; trailing space.
.011634	d0 06		bne $01163c		bne 	_DTKNotSpecial2
.011636	a9 20 00	lda #$0020		lda 	#" "
.011639	20 7a 07	jsr $01077a		jsr 	StringWriteCharacter
.01163c					_DTKNotSpecial2:
.01163c	7a		ply			ply
.01163d	fa		plx			plx
.01163e	68		pla			pla
.01163f	60		rts			rts
.011640					ScanIndent:
.011640	48		pha			pha
.011641	5a		phy			phy
.011642	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011644	85 2e		sta $2e			sta 	DIndent2
.011646	98		tya			tya
.011647	18		clc			clc 									; point to code.
.011648	69 04 00	adc #$0004		adc 	#4
.01164b	a8		tay			tay
.01164c					_SILoop:
.01164c	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01164f	f0 35		beq $011686		beq 	_SIExit
.011651	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011654	b0 08		bcs $01165e		bcs 	_SICheckKeyword
.011656	98		tya			tya 									; skip string.
.011657	18		clc			clc
.011658	79 00 00	adc $0000,y		adc 	$0000,y
.01165b	a8		tay			tay
.01165c	80 ee		bra $01164c		bra 	_SILoop
.01165e					_SICheckKeyword:
.01165e	29 00 e0	and #$e000		and 	#$E000
.011661	c9 00 20	cmp #$2000		cmp 	#$2000
.011664	f0 04		beq $01166a		beq 	_SIFoundKeyword
.011666					_SIAdvance:
.011666	c8		iny			iny 									; if not, loop round.
.011667	c8		iny			iny
.011668	80 e2		bra $01164c		bra 	_SILoop
.01166a					_SIFoundKeyword:
.01166a	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01166d	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011670	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011673	f0 0d		beq $011682		beq 	_SIKeyPlus
.011675	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011678	d0 ec		bne $011666		bne 	_SIAdvance
.01167a	c6 2c		dec $2c			dec 	DIndent
.01167c	10 e8		bpl $011666		bpl 	_SIAdvance
.01167e	64 2c		stz $2c			stz 	DIndent
.011680	80 e4		bra $011666		bra 	_SIAdvance
.011682					_SIKeyPlus:
.011682	e6 2c		inc $2c			inc 	DIndent
.011684	80 e0		bra $011666		bra 	_SIAdvance
.011686					_SIExit:
.011686	7a		ply			ply
.011687	68		pla			pla
.011688	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011689					Function_PRINT:
.011689	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01168b	f0 33		beq $0116c0			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01168d	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.011690	f0 2e		beq $0116c0			beq 	_FPRExitCR
.011692	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011695	f0 23		beq $0116ba			beq 	_FPRSkipLoop
.011697	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.01169a	f0 1b		beq $0116b7			beq 	_FPRNewLine
.01169c	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.01169f	f0 11		beq $0116b2			beq 	_FPRTab
.0116a1					_FPRExpression:
.0116a1	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.0116a4	b0 06		bcs $0116ac			bcs 	_FPRHaveString
.0116a6	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116a9	20 f1 10	jsr $0110f1			jsr 	ConvertToString
.0116ac					_FPRHaveString:
.0116ac	a8		tay				tay 								; print the basic String.
.0116ad	20 61 06	jsr $010661			jsr 	PrintBASICString
.0116b0	80 d7		bra $011689			bra 	Function_Print 				; and go round again.
.0116b2					_FPRTab:
.0116b2	20 9a 1d	jsr $011d9a			jsr 	HWTab
.0116b5	80 03		bra $0116ba			bra 	_FPRSkipLoop
.0116b7					_FPRNewLine:
.0116b7	20 85 1d	jsr $011d85			jsr 	HWNewLine
.0116ba					_FPRSkipLoop:
.0116ba	e6 06		inc $06				inc 	DCodePtr
.0116bc	e6 06		inc $06				inc 	DCodePtr
.0116be	80 c9		bra $011689			bra 	Function_Print
.0116c0					_FPRExitCR:
.0116c0	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116c2	88		dey				dey
.0116c3	88		dey				dey
.0116c4	b9 00 00	lda $0000,y			lda 	$0000,y
.0116c7	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116ca	f0 08		beq $0116d4			beq 	_FPRExit
.0116cc	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116cf	f0 03		beq $0116d4			beq 	_FPRExit
.0116d1	20 85 1d	jsr $011d85			jsr 	HWNewLine 					; print a new line.
.0116d4					_FPRExit:
.0116d4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0116d5					Function_IF:
.0116d5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.0116d8	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116da	05 08		ora $08				ora 	DTemp1
.0116dc	a8		tay				tay 								; success flag in Y.
.0116dd	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116df	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.0116e2	d0 32		bne $011716			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116e4	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116e6	e6 06		inc $06				inc 	DCodePtr
.0116e8	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116eb	f0 0f		beq $0116fc			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0116ed	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0116ef	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116f2	90 21		bcc $011715			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116f4	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116f7	b0 1c		bcs $011715			bcs 	_FIFContinue
.0116f9	4c 8b 19	jmp $01198b			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0116fc					_FIFEndOfLine:
.0116fc	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0116fe	f0 15		beq $011715			beq 	_FIFContinue 				; if done so, continue.
.011700	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011703	90 06		bcc $01170b			bcc 	_FIFStringConstant
.011705	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011707	e6 06		inc $06				inc 	DCodePtr
.011709	80 f1		bra $0116fc			bra 	_FIFEndOfLine
.01170b					_FIFStringConstant:
.01170b	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01170e	18		clc				clc
.01170f	65 06		adc $06				adc 	DCodePtr
.011711	85 06		sta $06				sta 	DCodePtr
.011713	80 e7		bra $0116fc			bra 	_FIFEndOfLine
.011715					_FIFContinue:
.011715	60		rts				rts
.011716					_FIFExtended:
.011716	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011718	e6 2a		inc $2a				inc 	DStack
.01171a	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.01171d	a6 2a		ldx $2a				ldx 	DStack
.01171f	95 00		sta $00,x			sta 	$00,x
.011721	98		tya				tya 								; see if the test was passed.
.011722	f0 01		beq $011725			beq 	_FIXSkip 					; if zero then it has failed.
.011724	60		rts				rts 								; test passed, so continue executing
.011725					_FIXSkip:
.011725	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011728	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.01172b	20 8b 17	jsr $01178b			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01172e	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011730	e6 06		inc $06				inc 	DCodePtr
.011732	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011735	d0 04		bne $01173b			bne 	_FIXNoThrow
.011737	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011739	c6 2a		dec $2a				dec 	DStack
.01173b					_FIXNoThrow:
.01173b	60		rts				rts
.01173c					Handler_ELSE:
.01173c	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01173e	b5 00		lda $00,x			lda 	$00,x
.011740	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.011743	d0 12		bne $011757			bne 	_HEBadStructure
.011745	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011748	a2 00 00	ldx #$0000			ldx 	#$0000
.01174b	20 8b 17	jsr $01178b			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01174e	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011750	e6 06		inc $06				inc 	DCodePtr
.011752	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011754	c6 2a		dec $2a				dec 	DStack
.011756	60		rts				rts
.011757					_HEBadStructure:
.011757	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01175a	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011762	68 6f 75 74 20 49 66 00
.01176a					Handler_ENDIF:
.01176a	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01176c	b5 00		lda $00,x			lda 	$00,x
.01176e	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.011771	d0 05		bne $011778			bne 	_HEIBadStructure
.011773	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011775	c6 2a		dec $2a				dec 	DStack
.011777	60		rts				rts
.011778					_HEIBadStructure:
.011778	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01177b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011783	68 6f 75 74 20 49 66 00
.01178b					ScanForwardLevel:
.01178b	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01178d	86 0a		stx $0a				stx 	DTemp1+2
.01178f	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011791	85 0c		sta $0c				sta 	DTemp2
.011793	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011796					_SFLLoop:
.011796	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011799	d0 0d		bne $0117a8			bne 	_SFLNoCheck 				; we're in a substructure.
.01179b	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01179d	f0 09		beq $0117a8			beq 	_SFLNoCheck 				; don't check zero
.01179f	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0117a1	f0 04		beq $0117a7			beq 	_SFLFound
.0117a3	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117a5	d0 01		bne $0117a8			bne 	_SFLNoCheck
.0117a7					_SFLFound:
.0117a7	60		rts				rts
.0117a8					_SFLNoCheck:
.0117a8	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117aa	f0 4f		beq $0117fb			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117ac	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117af	90 40		bcc $0117f1			bcc 	_SFLSkipString 				; then handle that.
.0117b1	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117b3	e6 06		inc $06				inc 	DCodePtr
.0117b5	a8		tay				tay 								; put token in Y temporarily.
.0117b6	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117b9	c9 00 20	cmp #$2000			cmp 	#$2000
.0117bc	d0 d8		bne $011796			bne 	_SFLLoop
.0117be	98		tya				tya 								; get the token back.
.0117bf	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117c2	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117c5	f0 cf		beq $011796			beq 	_SFLLoop
.0117c7	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117ca	90 ca		bcc $011796			bcc 	_SFLLoop
.0117cc	e8		inx				inx 								; increment the level.
.0117cd	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117d0	f0 c4		beq $011796			beq 	_SFLLoop
.0117d2	ca		dex				dex 								; decrement the level
.0117d3	ca		dex				dex 								; one overdoes the previous inx.
.0117d4	10 c0		bpl $011796			bpl 	_SFLLoop 					; if gone -ve then error.
.0117d6					_SFLError:
.0117d6	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117d8	85 22		sta $22				sta 	DLineNumber
.0117da	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0117dd	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117e5	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0117f1					_SFLSkipString:
.0117f1	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117f4	18		clc				clc
.0117f5	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0117f7	85 06		sta $06				sta 	DCodePtr
.0117f9	80 9b		bra $011796			bra 	_SFLLoop 					; go round again.
.0117fb					_SFLNextLine:
.0117fb	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0117fd	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011800	f0 d4		beq $0117d6			beq 	_SFLError 					; if zero, then there's no more code to search.
.011802	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011805	85 22		sta $22				sta 	DLineNumber
.011807	18		clc				clc
.011808	a5 06		lda $06				lda 	DCodePtr
.01180a	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01180d	85 06		sta $06				sta 	DCodePtr
.01180f	80 85		bra $011796			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.011811					Command_FOR:
.011811	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011813	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011816	d0 60		bne $011878			bne		_CFOBad
.011818	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find variable
.01181b	b0 15		bcs $011832			bcs 	_CFOExists
.01181d	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01181f	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011822	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.011825	48		pha				pha 								; save on stack
.011826					_CFOSkipToken:
.011826	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011828	e6 06		inc $06				inc 	DCodePtr
.01182a	e6 06		inc $06				inc 	DCodePtr
.01182c	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01182f	d0 f5		bne $011826			bne 	_CFOSkipToken
.011831	68		pla				pla 								; restore address
.011832					_CFOExists:
.011832	48		pha				pha 								; push variable address on stack
.011833	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011836	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.011839	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.01183c	bb		tyx				tyx 								; put high value in X
.01183d	7a		ply				ply 								; address in Y
.01183e	99 00 00	sta $0000,y			sta 	$0000,y
.011841	8a		txa				txa
.011842	99 02 00	sta $0002,y			sta 	$0002,y
.011845	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011848	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.01184b	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01184d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01184f	95 02		sta $02,x			sta 	$02,x
.011851	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011853	95 04		sta $04,x			sta 	$04,x
.011855	98		tya				tya 								; save variable address at +6
.011856	95 06		sta $06,x			sta 	$06,x
.011858	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.01185b	95 08		sta $08,x			sta 	$08,x
.01185d	8a		txa				txa 								; add 8 to stack position
.01185e	18		clc				clc
.01185f	69 08 00	adc #$0008			adc 	#8
.011862	85 2a		sta $2a				sta 	DStack
.011864	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011867	b2 06		lda ($06)			lda 	(DCodePtr)
.011869	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01186c	d0 09		bne $011877			bne 	_CFONoStep
.01186e	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.011871	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.011874	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.011877					_CFONoStep:
.011877	60		rts				rts
.011878					_CFOBad:
.011878	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01187b	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011883	76 61 72 69 61 62 6c 65 00
.01188c					Command_NEXT:
.01188c	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01188e	b5 00		lda $00,x			lda 	$00,x
.011890	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.011893	f0 14		beq $0118a9			beq 	_CNXOk
.011895	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011898	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0118a0	68 6f 75 74 20 46 6f 72 00
.0118a9					_CNXOk:
.0118a9	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0118ab	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0118ae	90 22		bcc $0118d2			bcc 	_CNXNoVariable
.0118b0	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; get address of variable.
.0118b3	90 08		bcc $0118bd			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118b5	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118b7	ca		dex				dex
.0118b8	ca		dex				dex
.0118b9	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118bb	f0 15		beq $0118d2			beq 	_CNXNoVariable 				; then continue
.0118bd					_CNXNextVar:
.0118bd	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0118c0	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118c8	20 76 61 72 69 61 62 6c 65 00
.0118d2					_CNXNoVariable:
.0118d2	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118d4	48		pha				pha
.0118d5	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118d7	38		sec				sec
.0118d8	e9 08 00	sbc #$0008			sbc 	#8
.0118db	85 2a		sta $2a				sta 	DStack
.0118dd	aa		tax				tax 								; X points to the stack.
.0118de	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118e0	85 06		sta $06				sta 	DCodePtr
.0118e2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.0118e5	5a		phy				phy 								; save the target on the stack
.0118e6	48		pha				pha
.0118e7	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118ea	85 08		sta $08				sta 	DTemp1
.0118ec	64 0a		stz $0a				stz 	DTemp1+2
.0118ee	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118f0	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118f3	d0 0b		bne $011900			bne 	_CNXNoStep
.0118f5	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0118f7	e6 06		inc $06				inc 	DCodePtr
.0118f9	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.0118fc	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0118fe	84 0a		sty $0a				sty 	DTemp1+2
.011900					_CNXNoStep:
.011900	68		pla				pla 								; save the Target in DTemp2
.011901	85 0c		sta $0c				sta 	DTemp2
.011903	68		pla				pla
.011904	85 0e		sta $0e				sta 	DTemp2+2
.011906	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011908	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01190a	a8		tay				tay
.01190b	18		clc				clc
.01190c	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.01190f	65 08		adc $08				adc 	DTemp1
.011911	99 00 00	sta $0000,y			sta 	$0000,y
.011914	b9 02 00	lda $0002,y			lda 	$0002,y
.011917	65 0a		adc $0a				adc 	DTemp1+2
.011919	99 02 00	sta $0002,y			sta 	$0002,y
.01191c	38		sec				sec
.01191d	a5 0c		lda $0c				lda 	DTemp2
.01191f	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011922	85 0c		sta $0c				sta 	DTemp2
.011924	a5 0e		lda $0e				lda 	DTemp2+2
.011926	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011929	85 0e		sta $0e				sta 	DTemp2+2
.01192b	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01192d	f0 0a		beq $011939			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01192f	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011931	45 0a		eor $0a				eor 	DTemp1+2
.011933	10 04		bpl $011939			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011935	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011936	85 06		sta $06				sta 	DCodePtr
.011938	60		rts				rts
.011939					_CNXLoopAgain:
.011939	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01193a	18		clc				clc
.01193b	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01193d	aa		tax				tax
.01193e	69 08 00	adc #$0008			adc 	#8
.011941	85 2a		sta $2a				sta 	DStack
.011943	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011945	85 22		sta $22				sta 	DLineNumber
.011947	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011948					Function_ONGOTO:
.011948	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.01194b	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01194e	d0 25		bne $011975			bne 	_FOGoFail
.011950	c9 00 00	cmp #$0000			cmp 	#0
.011953	f0 20		beq $011975			beq 	_FOGoFail 					; we start with index = 1
.011955	48		pha				pha 								; save count on stack
.011956	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011959	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.01195c	fa		plx				plx 								; put count in X.
.01195d					_FOGoLoop:
.01195d	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01195f	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011962	90 73		bcc $0119d7			bcc 	FGOFail 					; if not, then we have an error.
.011964	c9 00 c0	cmp #$c000			cmp 	#$C000
.011967	b0 6e		bcs $0119d7			bcs 	FGOFail
.011969	ca		dex				dex 								; subtract one, if done, call GOTO code
.01196a	f0 1f		beq $01198b			beq 	Function_GOTO
.01196c	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01196e	e6 06		inc $06				inc 	DCodePtr
.011970	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; expect a comma
.011973	80 e8		bra $01195d			bra 	_FOGoLoop 					; and loop round.
.011975					_FOGoFail:
.011975	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011978	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011980	47 6f 74 6f 20 76 61 6c 75 65 00
.01198b					Function_GOTO:
.01198b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01198d	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011990	90 45		bcc $0119d7			bcc 	FGOFail 					; we don't do calculate line numbers.
.011992	c9 00 c0	cmp #$c000			cmp 	#$C000
.011995	b0 40		bcs $0119d7			bcs 	FGOFail
.011997	38		sec				sec 								; convert to 0-32767
.011998	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01199b	aa		tax				tax
.01199c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.01199f	18		clc				clc
.0119a0	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0119a2	a8		tay				tay
.0119a3					_FGOSearch:
.0119a3	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0119a6	f0 18		beq $0119c0			beq 	_FGOUnknown
.0119a8	8a		txa				txa 								; does it match line number ?
.0119a9	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0119ac	f0 08		beq $0119b6			beq 	_FGOFound 					; yes, then found.
.0119ae	98		tya				tya 								; no follow the link
.0119af	18		clc				clc
.0119b0	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119b3	a8		tay				tay
.0119b4	80 ed		bra $0119a3			bra 	_FGOSearch 					; and keep looking
.0119b6					_FGOFound:
.0119b6	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119b8	98		tya				tya 								; Y + 4 is the code pointer.
.0119b9	18		clc				clc 								; (skipping link and line #)
.0119ba	69 04 00	adc #$0004			adc 	#4
.0119bd	85 06		sta $06				sta 	DCodePtr
.0119bf	60		rts				rts									; and continue
.0119c0					_FGOUnknown:
.0119c0	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0119c3	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119cb	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119d7					FGOFail:
.0119d7	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0119da	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119e2	20 4e 75 6d 62 65 72 00
.0119ea					Function_GOSUB:
.0119ea	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119ec	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119ee	18		clc				clc
.0119ef	69 02 00	adc #$0002			adc 	#2
.0119f2	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119f4	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119f6	95 04		sta $04,x			sta 	$04,x
.0119f8	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119fb	95 06		sta $06,x			sta 	$06,x
.0119fd	8a		txa				txa 								; advance stack by 6.
.0119fe	18		clc				clc
.0119ff	69 06 00	adc #$0006			adc 	#6
.011a02	85 2a		sta $2a				sta 	DStack
.011a04	80 85		bra $01198b			bra 	Function_GOTO 				; and do a GOTO.
.011a06					Function_RETURN:
.011a06	a6 2a		ldx $2a				ldx 	DStack
.011a08	b5 00		lda $00,x			lda 	$00,x
.011a0a	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011a0d	d0 11		bne $011a20			bne 	_FRetFail
.011a0f	8a		txa				txa 								; unpick stack.
.011a10	38		sec				sec
.011a11	e9 06 00	sbc #$0006			sbc 	#6
.011a14	85 2a		sta $2a				sta 	DStack
.011a16	aa		tax				tax
.011a17	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a19	85 06		sta $06				sta 	DCodePtr
.011a1b	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a1d	85 22		sta $22				sta 	DLineNumber
.011a1f	60		rts				rts
.011a20					_FRetFail:
.011a20	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011a23	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a2b	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011a38					Function_REPEAT:
.011a38	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a3a	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a3c	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a3e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a40	95 04		sta $04,x			sta 	$04,x
.011a42	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011a45	95 06		sta $06,x			sta 	$06,x
.011a47	8a		txa				txa 								; advance stack by 6.
.011a48	18		clc				clc
.011a49	69 06 00	adc #$0006			adc 	#6
.011a4c	85 2a		sta $2a				sta 	DStack
.011a4e	60		rts				rts
.011a4f					Function_UNTIL:
.011a4f	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a51	b5 00		lda $00,x			lda 	$00,x
.011a53	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a56	d0 26		bne $011a7e			bne 	_FUNFail
.011a58	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a5b	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a5e	d0 15		bne $011a75			bne 	_FUNExit
.011a60	c9 00 00	cmp #$0000			cmp 	#0
.011a63	d0 10		bne $011a75			bne 	_FUNExit
.011a65	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a67	38		sec				sec
.011a68	e9 06 00	sbc #$0006			sbc 	#6
.011a6b	aa		tax				tax
.011a6c	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a6e	85 06		sta $06				sta 	DCodePtr
.011a70	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a72	85 22		sta $22				sta 	DLineNumber
.011a74	60		rts				rts
.011a75					_FUNExit:
.011a75	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a77	38		sec				sec
.011a78	e9 06 00	sbc #$0006			sbc 	#6
.011a7b	85 2a		sta $2a				sta 	DStack
.011a7d	60		rts				rts
.011a7e					_FUNFail:
.011a7e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011a81	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a89	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011a96					Function_WHILE:
.011a96	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a98	48		pha				pha 								; save on stack
.011a99	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011a9c	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a9f	d0 14		bne $011ab5			bne 	_FWHExecute
.011aa1	c9 00 00	cmp #$0000			cmp 	#0
.011aa4	d0 0f		bne $011ab5			bne 	_FWHExecute
.011aa6	68		pla				pla 								; throw away current instruction
.011aa7	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011aaa	a2 00 00	ldx #$0000			ldx 	#0
.011aad	20 8b 17	jsr $01178b			jsr 	ScanForwardLevel 			; scan forward checking structures
.011ab0	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011ab2	e6 06		inc $06				inc 	DCodePtr
.011ab4	60		rts				rts
.011ab5					_FWHExecute:
.011ab5	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011ab7	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011ab8	3a		dec a				dec 	a
.011ab9	3a		dec a				dec 	a
.011aba	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011abc	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011abe	95 04		sta $04,x			sta 	$04,x
.011ac0	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011ac3	95 06		sta $06,x			sta 	$06,x
.011ac5	8a		txa				txa 								; advance stack by 6.
.011ac6	18		clc				clc
.011ac7	69 06 00	adc #$0006			adc 	#6
.011aca	85 2a		sta $2a				sta 	DStack
.011acc	60		rts				rts
.011acd					Function_WEND:
.011acd	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011acf	b5 00		lda $00,x			lda 	$00,x
.011ad1	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011ad4	d0 11		bne $011ae7			bne 	_FWEFail
.011ad6	8a		txa				txa 								; unpick stack and always loop back.
.011ad7	38		sec				sec 								; we do the check at the top.
.011ad8	e9 06 00	sbc #$0006			sbc 	#6
.011adb	85 2a		sta $2a				sta 	DStack
.011add	aa		tax				tax
.011ade	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011ae0	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011ae2	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011ae4	85 22		sta $22				sta 	DLineNumber
.011ae6	60		rts				rts
.011ae7					_FWEFail:
.011ae7	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011aea	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011af2	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011afd					Function_END:
.011afd	4c 83 1e	jmp $011e83			jmp 	WarmStart
.011b00					Function_RUN:
.011b00	20 8b 1b	jsr $011b8b			jsr 	Function_CLEAR 				; clear all variables.
.011b03	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011b05	18		clc				clc
.011b06	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011b09	80 0c		bra $011b17			bra 	FRun_NextLineNumber
.011b0b					RUNExecuteTokenBuffer:
.011b0b	64 22		stz $22				stz 	DLineNumber					; zero line number
.011b0d	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011b10	18		clc				clc
.011b11	65 02		adc $02				adc 	DBaseAddress
.011b13	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b15	80 12		bra $011b29			bra 	FRun_NextInstruction
.011b17					FRun_NextLineNumber:
.011b17	a8		tay				tay 								; put in Y
.011b18	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b1b	f0 e0		beq $011afd			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011b1d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b20	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b22	98		tya				tya 								; get address back
.011b23	18		clc				clc 								; skip over the link/line number
.011b24	69 04 00	adc #$0004			adc 	#4
.011b27	85 06		sta $06				sta 	DCodePtr
.011b29					FRun_NextInstruction:
.011b29	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b2b	20 a1 1d	jsr $011da1			jsr 	HWCheckBreak 				; break key pressed.
.011b2e	d0 40		bne $011b70			bne 	_FRun_Break
.011b30	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b32	f0 32		beq $011b66			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b34	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b37	f0 18		beq $011b51			beq 	_FRun_Colon
.011b39	a8		tay				tay 								; save in Y
.011b3a	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b3d	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b40	d0 15		bne $011b57			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b42	98		tya				tya 								; get token back
.011b43	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b46	0a		asl a				asl 	a 							; double it into X
.011b47	aa		tax				tax
.011b48	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b4a	e6 06		inc $06				inc 	DCodePtr
.011b4c	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b4f	80 d8		bra $011b29			bra 	FRun_NextInstruction 		; do the following instruction.
.011b51					_FRun_Colon:
.011b51	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b53	e6 06		inc $06				inc 	DCodePtr
.011b55	80 d2		bra $011b29			bra 	FRun_NextInstruction 		; do the following instruction.
.011b57					_FRun_TryLET:
.011b57	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b59	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b5c	90 05		bcc $011b63			bcc		_FRunSyntax 				; no, must be syntax.
.011b5e	20 81 12	jsr $011281			jsr 	Function_LET 				; try as a LET.
.011b61	80 c6		bra $011b29			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b63					_FRunSyntax:
.011b63	82 71 ea	brl $0105d7			brl 	SyntaxError
.011b66					_FRun_EndInstruction:
.011b66	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b68	f0 0f		beq $011b79			beq 	_FRun_WarmStart
.011b6a	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b6c	1a		inc a				inc 	a 							; go to link for next line
.011b6d	1a		inc a				inc 	a
.011b6e	80 a7		bra $011b17			bra 	FRun_NextLineNumber
.011b70					_FRun_Break:
.011b70	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011b73	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b79					_FRun_WarmStart:
.011b79	82 07 03	brl $011e83			brl 	WarmStart
.011b7c					Function_NEW:
.011b7c	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b7f	18		clc				clc
.011b80	65 02		adc $02				adc 	DBaseAddress
.011b82	a8		tay				tay
.011b83	a9 00 00	lda #$0000			lda 	#$0000
.011b86	99 00 00	sta $0000,y			sta 	$0000,y
.011b89	80 00		bra $011b8b			bra 	Function_Clear
.011b8b					Function_CLEAR:
.011b8b	20 97 1b	jsr $011b97			jsr 	ClearVariablesPointersAndStacks
.011b8e	60		rts				rts
.011b8f					Function_STOP:
.011b8f	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011b92	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b97					ClearVariablesPointersAndStacks:
.011b97	a9 80 00	lda #$0080			lda 	#BASStack
.011b9a	85 2a		sta $2a				sta 	DStack
.011b9c	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b9e	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011ba1	a9 00 00	lda #$0000			lda 	#$0000
.011ba4	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ba6	20 d2 1b	jsr $011bd2			jsr 	FindCodeEnd 				; find where the program ends.
.011ba9	a8		tay				tay 								; Y points to it.
.011baa	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011bad	99 02 00	sta $0002,y			sta 	$0002,y
.011bb0	99 04 00	sta $0004,y			sta 	$0004,y
.011bb3	98		tya				tya 								; start of working memory up
.011bb4	18		clc				clc
.011bb5	69 06 00	adc #$0006			adc 	#6
.011bb8	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011bbb	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bbd	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bc0					_FCLoop:
.011bc0	a9 00 00	lda #$0000			lda 	#$0000
.011bc3	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bc5	c8		iny				iny
.011bc6	c8		iny				iny
.011bc7	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bca	d0 f4		bne $011bc0			bne 	_FCLoop
.011bcc	64 16		stz $16				stz 	DTempStringPointer
.011bce	20 7b 06	jsr $01067b			jsr 	StringResetPermanent
.011bd1	60		rts				rts
.011bd2					FindCodeEnd:
.011bd2	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011bd5	18		clc				clc
.011bd6	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011bd8	a8		tay				tay
.011bd9					_FCELoop:
.011bd9	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011bdc	f0 08		beq $011be6			beq 	_FCEExit
.011bde	98		tya				tya 								; add offset
.011bdf	18		clc				clc
.011be0	79 00 00	adc $0000,y			adc 	$0000,y
.011be3	a8		tay				tay
.011be4	80 f3		bra $011bd9			bra 	_FCELoop
.011be6					_FCEExit:
.011be6	98		tya				tya 								; return in A
.011be7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011be8					Function_Dim:
.011be8	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bea	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011bed	f0 3b		beq $011c2a			beq		_FDIMNotArray 				; no, error.
.011bef	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find it.
.011bf2	b0 41		bcs $011c35			bcs 	_FDIMExists 				; if it does, that's an error.
.011bf4	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011bf6	48		pha				pha
.011bf7	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011bf9	48		pha				pha
.011bfa					_FDIMSkip:
.011bfa	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011bfc	e6 06		inc $06				inc 	DCodePtr
.011bfe	e6 06		inc $06				inc 	DCodePtr
.011c00	29 00 08	and #$0800			and 	#IDContMask
.011c03	d0 f5		bne $011bfa			bne 	_FDIMSkip
.011c05	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011c08	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check the ) following.
.011c0b	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011c0e	d0 3b		bne $011c4b			bne 	_FDIMSize
.011c10	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c13	f0 36		beq $011c4b			beq 	_FDIMSize
.011c15	7a		ply				ply 								; restore HashTablePtr
.011c16	84 20		sty $20				sty 	DHashTablePtr
.011c18	7a		ply				ply 								; so now A is the high index, Y points to the token
.011c19	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create the variable.
.011c1c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c1e	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c21	d0 06		bne $011c29			bne 	_FDIMExit
.011c23	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c25	e6 06		inc $06				inc 	DCodePtr
.011c27	80 bf		bra $011be8			bra 	Function_DIM 				; and do another
.011c29					_FDIMExit:
.011c29	60		rts				rts
.011c2a					_FDIMNotArray:
.011c2a	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c2d	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c35					_FDIMExists:
.011c35	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c38	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c40	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c4b					_FDIMSize:
.011c4b	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c4e	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c56	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c5c					Command_POKE:
.011c5c	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c5f	48		pha				pha	 								; save on stack
.011c60	5a		phy				phy
.011c61	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011c64	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c67	fa		plx				plx 								; pull address and store in DTemp1
.011c68	86 0a		stx $0a				stx 	DTemp1+2
.011c6a	fa		plx				plx
.011c6b	86 08		stx $08				stx 	DTemp1+0
.011c6d	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c6f	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c71	c2 20		rep #$20			rep 	#$20 						; word mode
.011c73	60		rts				rts
.011c74					Command_DOKE:
.011c74	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c77	48		pha				pha	 								; save on stack
.011c78	5a		phy				phy
.011c79	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011c7c	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c7f	fa		plx				plx 								; pull address and store in DTemp1
.011c80	86 0a		stx $0a				stx 	DTemp1+2
.011c82	fa		plx				plx
.011c83	86 08		stx $08				stx 	DTemp1+0
.011c85	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c87	60		rts				rts
.011c88					Command_LOKE:
.011c88	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c8b	48		pha				pha	 								; save on stack
.011c8c	5a		phy				phy
.011c8d	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011c90	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c93	fa		plx				plx 								; pull address and store in DTemp1
.011c94	86 0a		stx $0a				stx 	DTemp1+2
.011c96	fa		plx				plx
.011c97	86 08		stx $08				stx 	DTemp1+0
.011c99	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c9b	98		tya				tya
.011c9c	a0 02 00	ldy #$0002			ldy 	#2
.011c9f	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011ca1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011ca2					Function_ASSERT:
.011ca2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011ca5	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011ca7	05 08		ora $08				ora 	Dtemp1
.011ca9	f0 01		beq $011cac			beq 	_FAssFail
.011cab	60		rts				rts
.011cac					_FAssFail:
.011cac	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011caf	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011cb7	61 69 6c 65 64 00
.011cbd					Function_CLS:
.011cbd	20 1b 1d	jsr $011d1b			jsr 	HWClearScreen
.011cc0	60		rts				rts
.011cc1					Function_REM:
.011cc1	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cc3	f0 0f		beq $011cd4			beq 	_FRemExit 					; no comment present
.011cc5	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cc8	f0 0a		beq $011cd4			beq 	_FRemExit 					; no comment present
.011cca	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011ccd	b0 06		bcs $011cd5			bcs 	_FRemSyntax
.011ccf	18		clc				clc 								; add to DCodePtr
.011cd0	65 06		adc $06				adc 	DCodePtr
.011cd2	85 06		sta $06				sta 	DCodePtr
.011cd4					_FRemExit:
.011cd4	60		rts				rts
.011cd5					_FRemSyntax:
.011cd5	82 ff e8	brl $0105d7			brl 	SyntaxError
.011cd8					Function_LINK:
.011cd8	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011cdb	85 08		sta $08				sta 	DTemp1 						; target address
.011cdd	84 0a		sty $0a				sty 	DTemp1+2
.011cdf	7b		tdc				tda 								; work out what the actual address is
.011ce0	18		clc				clc
.011ce1	69 08 00	adc #$0008			adc 	#DTemp1
.011ce4	8f 19 1d 01	sta $011d19			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011ce8	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011cea	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011ced	48		pha				pha
.011cee	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011cf1	aa		tax				tax
.011cf2	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011cf5	a8		tay				tay
.011cf6	68		pla				pla
.011cf7	22 18 1d 01	jsl $011d18			jsl 	_FLIExecuteIt
.011cfb	5a		phy				phy 								; save Y
.011cfc	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cfe	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d01	8a		txa				txa
.011d02	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d05	68		pla				pla
.011d06	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d09	c8		iny				iny 								; point to their high bytes and clear them
.011d0a	c8		iny				iny
.011d0b	a9 00 00	lda #$0000			lda 	#0
.011d0e	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d11	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d14	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d17	60		rts				rts
.011d18					_FLIExecuteIt:
.011d18	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d1b					HWClearScreen:
.011d1b	48		pha				pha
.011d1c	da		phx				phx
.011d1d	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d20	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d23	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d27	ca		dex				dex
.011d28	10 f6		bpl $011d20			bpl 	_CS0
.011d2a	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d2d	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d31	fa		plx				plx
.011d32	68		pla				pla
.011d33	60		rts				rts
.011d34					HWPrintChar:
.011d34	48		pha				pha
.011d35	da		phx				phx
.011d36	5a		phy				phy
.011d37	48		pha				pha 								; cursor position -> X
.011d38	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d3c	aa		tax				tax
.011d3d	68		pla				pla
.011d3e	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d41	f0 08		beq $011d4b			beq 	_HWPCNoWrite
.011d43	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d45	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d49	c2 20		rep #$20			rep 	#$20
.011d4b					_HWPCNoWrite:
.011d4b	e8		inx				inx 								; bump cursor position.
.011d4c	8a		txa				txa
.011d4d	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d51	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d54	d0 2b		bne $011d81			bne 	_HWNotEnd
.011d56	38		sec				sec 	 							; back up one line
.011d57	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d5a	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d5e	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d61					_HWScrollUp:
.011d61	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d65	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d69	e8		inx				inx
.011d6a	e8		inx				inx
.011d6b	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d6e	d0 f1		bne $011d61			bne 	_HWScrollUp
.011d70	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d73					_HWBlank:
.011d73	a9 20 20	lda #$2020			lda 	#$2020
.011d76	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d7a	e8		inx				inx
.011d7b	e8		inx				inx
.011d7c	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d7f	d0 f2		bne $011d73			bne 	_HWBlank
.011d81					_HWNotEnd:
.011d81	7a		ply				ply
.011d82	fa		plx				plx
.011d83	68		pla				pla
.011d84	60		rts				rts
.011d85					HWNewLine:
.011d85	48		pha				pha
.011d86	da		phx				phx
.011d87	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d8a					HWMoveCursor:
.011d8a	a9 ff ff	lda #$ffff			lda 	#-1
.011d8d	20 34 1d	jsr $011d34			jsr 	HWPrintChar
.011d90	8a		txa				txa
.011d91	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d95	d0 f3		bne $011d8a			bne 	HWMoveCursor
.011d97	fa		plx				plx
.011d98	68		pla				pla
.011d99	60		rts				rts
.011d9a	48		pha		HWTab:	pha
.011d9b	da		phx				phx
.011d9c	a2 07 00	ldx #$0007			ldx 	#7
.011d9f	80 e9		bra $011d8a			bra 	HWMoveCursor
.011da1					HWCheckBreak:
.011da1	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011da5	60		rts				rts
.011da6					HWInkey:
.011da6	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011daa	60		rts				rts
.011dab					HWInputLine:
.011dab	20 a6 1d	jsr $011da6			jsr 	HWInkey 					; get a keystroke.
.011dae	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011db2	f0 f7		beq $011dab			beq 	HWInputLine
.011db4					_HWILWait:
.011db4	20 a6 1d	jsr $011da6			jsr 	HWInkey
.011db7	c9 00 00	cmp #$0000			cmp		#0
.011dba	f0 f8		beq $011db4			beq 	_HWILWait
.011dbc	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011dc0	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011dc3	90 2f		bcc $011df4			bcc 	_HWILControl
.011dc5	20 34 1d	jsr $011d34			jsr 	HWPrintChar 				; print out.
.011dc8	80 e1		bra $011dab			bra 	HWInputLine 				; loop back.
.011dca					_HWILBackSpace:
.011dca	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011dce	f0 db		beq $011dab			beq 	HWInputLine
.011dd0	aa		tax				tax
.011dd1	ca		dex				dex
.011dd2	a9 20 00	lda #$0020			lda 	#" "
.011dd5	e2 20		sep #$20			sep 	#$20
.011dd7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011ddb	c2 20		rep #$20			rep 	#$20
.011ddd	a2 ff ff	ldx #$ffff			ldx 	#-1
.011de0					_HWILMove:
.011de0	8a		txa				txa
.011de1	18		clc				clc
.011de2	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011de6	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011de9	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011ded	80 bc		bra $011dab			bra 	HWInputLine
.011def					_HWILClear:
.011def	20 1b 1d	jsr $011d1b			jsr 	HWClearScreen
.011df2	80 b7		bra $011dab			bra 	HWInputLine
.011df4					_HWILControl:
.011df4	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011df7	f0 60		beq $011e59			beq 	_HWILTab
.011df9	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011dfc	f0 cc		beq $011dca			beq 	_HWILBackSpace
.011dfe	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011e01	c9 17 00	cmp #$0017			cmp 	#23
.011e04	f0 da		beq $011de0			beq 	_HWILMove
.011e06	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e09	c9 13 00	cmp #$0013			cmp 	#19
.011e0c	f0 d2		beq $011de0			beq 	_HWILMove
.011e0e	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e11	c9 01 00	cmp #$0001			cmp 	#1
.011e14	f0 ca		beq $011de0			beq 	_HWILMove
.011e16	a2 01 00	ldx #$0001			ldx 	#1
.011e19	c9 04 00	cmp #$0004			cmp 	#4
.011e1c	f0 c2		beq $011de0			beq 	_HWILMove
.011e1e	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e21	f0 cc		beq $011def			beq 	_HWILClear
.011e23	c9 0d 00	cmp #$000d			cmp 	#13
.011e26	d0 83		bne $011dab			bne 	HWInputLine
.011e28	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e2c	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e2f	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e31	a9 0f 00	lda #$000f			lda 	#$000F
.011e34	85 0a		sta $0a				sta 	DTemp1+2
.011e36	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e39					_HWILCopy:
.011e39	bb		tyx				tyx
.011e3a	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e3c	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e40	c8		iny				iny
.011e41	c8		iny				iny
.011e42	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e45	d0 f2		bne $011e39			bne 	_HWILCopy
.011e47	a9 00 00	lda #$0000			lda 	#0
.011e4a	bb		tyx				tyx
.011e4b	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e4f	20 85 1d	jsr $011d85			jsr 	HWNewLine 					; next line.
.011e52	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e55	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e58	60		rts				rts
.011e59					_HWILTab:
.011e59	20 9a 1d	jsr $011d9a			jsr 	HWTab
.011e5c	82 4c ff	brl $011dab			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e5f					SwitchBasicInstance:
.011e5f	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e61	20 1b 1d	jsr $011d1b			jsr 	HWClearScreen 						; clear screen
.011e64	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e67	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e69	86 02		stx $02				stx		DBaseAddress
.011e6b	84 04		sty $04				sty 	DHighAddress
.011e6d	ba		tsx				tsx 										; save the current SP.
.011e6e	86 3a		stx $3a				stx 	DStack65816
.011e70	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e71	48		pha				pha 										; then copy it into B.
.011e72	ab		plb				plb
.011e73	ab		plb				plb
.011e74	20 97 1b	jsr $011b97			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e77	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e7a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e7c	f0 05		beq $011e83			beq 	WarmStart
.011e7e	3a		dec a				dec 	a 									; decrement zero.
.011e7f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e81	80 18		bra $011e9b			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e83					WarmStart:
.011e83	a2 e9 1e	ldx #$1ee9			ldx 	#BasicPrompt & $FFFF
.011e86	20 43 06	jsr $010643			jsr 	PrintROMMessage
.011e89					NextCommand:
.011e89	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e8b	9a		txs				txs
.011e8c	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e8e	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e91	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e93	d0 52		bne $011ee7			bne 	ExitEmulator
.011e95	20 ab 1d	jsr $011dab			jsr 	HWInputLine 						; read line to YA.
.011e98	20 a9 07	jsr $0107a9			jsr 	Tokenise 							; tokenise it.
.011e9b					ExecuteTokenBuffer:
.011e9b	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e9e	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011ea0	f0 e7		beq $011e89			beq 	NextCommand 						; nothing.
.011ea2	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011ea5	90 27		bcc $011ece			bcc 	_ETBCommand
.011ea7	c9 00 c0	cmp #$c000			cmp 	#$C000
.011eaa	b0 22		bcs $011ece			bcs 	_ETBCommand
.011eac	38		sec				sec
.011ead	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011eb0	f0 1f		beq $011ed1			beq 	_ETBError
.011eb2	48		pha				pha
.011eb3	20 dc 04	jsr $0104dc			jsr 	LineDelete 							; delete the line, if it exists.
.011eb6	20 97 1b	jsr $011b97			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011eb9	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011ebc	18		clc				clc
.011ebd	65 02		adc $02				adc 	DBaseAddress
.011ebf	a8		tay				tay 										; Y contains the code.
.011ec0	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ec3	f0 c4		beq $011e89			beq 	NextCommand 						; no, next command.
.011ec5	68		pla				pla 										; line number in A, code in Y.
.011ec6	20 17 05	jsr $010517			jsr 	LineInsert 							; insert the line
.011ec9	20 97 1b	jsr $011b97			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ecc	80 bb		bra $011e89			bra 	NextCommand
.011ece					_ETBCommand:
.011ece	4c 0b 1b	jmp $011b0b			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011ed1					_ETBError:
.011ed1	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011ed4	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011edc	61 76 65 20 6c 69 6e 65 20 30 00
.011ee7					ExitEmulator:
.011ee7	02 00		cop #$00			cop 	#0
.011ee9					BasicPrompt:
>011ee9	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 a9 07	jsr $0107a9			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	1e 45 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 0e 00 66 00 33 3e 04 f0
>024208	03 40 28 32 00 00 0e 00 67 00 35 3e 04 f0 02 40
>024218	28 32 00 00 12 00 69 00 01 e0 06 22 08 00 05 4f
>024228	75 74 65 72 00 00 0a 00 6b 00 35 3e 01 e0 00 00
>024238	0c 00 6c 00 41 3e e5 c8 b0 c2 00 00 0a 00 6d 00
>024248	35 3e 01 e0 00 00 16 00 6e 00 04 c5 06 22 01 40
>024258	26 32 1a c0 06 22 0b 24 0b 40 00 00 2a 00 53 04
>024268	35 3e 16 00 12 53 68 6f 75 6c 64 20 62 65 20 6f
>024278	75 74 65 72 20 3a 20 00 25 32 01 e0 24 32 04 c5
>024288	24 32 1a c0 00 00 1e 00 56 04 41 3e 97 cb 2b cb
>024298	14 c0 26 32 35 3e 0c 00 09 57 6f 72 6b 65 64 20
>0242a8	31 21 00 00 2a 00 58 04 35 3e 16 00 12 53 68 6f
>0242b8	75 6c 64 20 62 65 20 6f 75 74 65 72 20 3a 20 00
>0242c8	25 32 01 e0 24 32 04 c5 24 32 1a c0 00 00 1e 00
>0242d8	5a 04 41 3e 97 cb 2b cb 14 c0 26 32 35 3e 0c 00
>0242e8	09 57 6f 72 6b 65 64 20 32 21 00 00 2a 00 5c 04
>0242f8	35 3e 16 00 12 53 68 6f 75 6c 64 20 62 65 20 6f
>024308	75 74 65 72 20 3a 20 00 25 32 01 e0 24 32 04 c5
>024318	24 32 1a c0 00 00 0e 00 5d 04 03 e0 06 22 04 00
>024328	01 21 00 00 0e 00 5f 04 35 3e 03 e0 03 e0 03 e0
>024338	00 00 08 00 60 04 2f 3e 00 00 0e 00 f8 2a 47 3c
>024348	97 cb 2b cb 14 c0 00 00 12 00 f9 2a 42 3e 01 e0
>024358	24 32 04 c5 24 32 1a c0 00 00 18 00 fa 2a 35 3e
>024368	0c 00 08 49 6e 20 73 74 61 72 74 00 24 32 01 e0
>024378	00 00 24 00 fc 2a 01 e0 06 22 08 00 05 49 6e 6e
>024388	65 72 26 32 04 c5 06 22 63 40 26 32 1a c0 06 22
>024398	0b 24 01 40 00 00 2a 00 fd 2a 35 3e 16 00 13 09
>0243a8	53 68 6f 75 6c 64 20 62 65 20 69 6e 6e 65 72 20
>0243b8	3a 20 25 32 01 e0 24 32 04 c5 24 32 1a c0 00 00
>0243c8	12 00 00 2b 41 3e c4 cb 4b ca 89 cb ab ca 04 c0
>0243d8	00 00 2a 00 01 2b 35 3e 16 00 13 09 53 68 6f 75
>0243e8	6c 64 20 62 65 20 69 6e 6e 65 72 20 3a 20 25 32
>0243f8	01 e0 24 32 04 c5 24 32 1a c0 00 00 08 00 20 2b
>024408	4d 3a 00 00 12 00 5c 2b 47 3c c4 cb 4b ca 89 cb
>024418	ab ca 04 c0 00 00 26 00 61 2b 42 3e 01 e0 26 32
>024428	01 e0 06 22 10 00 0c 72 65 61 6c 6c 79 20 69 6e
>024438	6e 65 72 00 26 32 42 3e 04 c5 00 00 26 00 66 2b
>024448	35 3e 12 00 0f 20 20 20 09 09 73 75 62 20 6d 65
>024458	74 68 6f 64 24 32 01 e0 24 32 04 c5 24 32 1a c0
>024468	00 00 08 00 70 2b 4d 3a 00 00 0c 00 e0 2e 47 3c
>024478	e5 c8 b0 c2 00 00 1e 00 e5 2e 42 3e 01 e0 26 32
>024488	01 e0 06 22 0e 00 0a 49 6e 20 72 6f 75 74 69 6e
>024498	65 00 00 00 0a 00 ea 2e 35 3e 01 e0 00 00 0e 00
>0244a8	ec 2e 41 3e e5 c8 b0 ca 1d c0 00 00 0a 00 ef 2e
>0244b8	35 3e 01 e0 00 00 08 00 f4 2e 4d 3a 00 00 0e 00
>0244c8	c8 32 47 3c e5 c8 b0 ca 1d c0 00 00 3c 00 cd 32
>0244d8	42 3e 01 e0 26 32 35 3e 04 00 01 28 25 32 01 e0
>0244e8	25 32 04 00 01 29 26 32 01 e0 06 22 08 00 04 3f
>0244f8	3f 3f 3f 00 26 32 35 3e 04 00 01 28 25 32 01 e0
>024508	25 32 04 00 01 29 00 00 08 00 d2 32 4d 3a 00 00
>024518	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>024528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1964 times (31424 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
