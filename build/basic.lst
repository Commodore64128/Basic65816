
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 14 07:56:41 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c b6 10 01	jmp $0110b6			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	14 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	f3 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	03 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	13 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	57 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	be 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	23 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	a0 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	82 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	3d 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	3d 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	be 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	ca 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	47 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	be 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	cf 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	e1 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	58 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	38 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	14 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	fe 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	fe 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	53 0a					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	92 08					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	ca 08					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	14 04					.word IllegalToken             & $FFFF ; token $3219 ","
>010034	14 04					.word IllegalToken             & $FFFF ; token $321a ";"
>010036	14 04					.word IllegalToken             & $FFFF ; token $321b ":"
>010038	14 04					.word IllegalToken             & $FFFF ; token $321c "("
>01003a	14 04					.word IllegalToken             & $FFFF ; token $321d ")"
>01003c	14 04					.word IllegalToken             & $FFFF ; token $321e "'"
>01003e	14 04					.word IllegalToken             & $FFFF ; token $321f "to"
>010040	14 04					.word IllegalToken             & $FFFF ; token $3220 "step"
>010042	a3 10					.word Function_REM             & $FFFF ; token $3e21 "rem"
>010044	0f 0b					.word Function_Let             & $FFFF ; token $3e22 "let"
>010046	84 10					.word Function_ASSERT          & $FFFF ; token $3e23 "assert"
>010048	c7 0e					.word Function_END             & $FFFF ; token $3e24 "end"
>01004a	c9 0e					.word Function_RUN             & $FFFF ; token $3e25 "run"
>01004c	25 0f					.word Function_STOP            & $FFFF ; token $3e26 "stop"
>01004e	21 0f					.word Function_CLEAR           & $FFFF ; token $3e27 "clear"
>010050	80 0f					.word Function_Dim             & $FFFF ; token $3e28 "dim"
>010052	f4 0f					.word Function_COLLECT         & $FFFF ; token $3e29 "collect"
>010054	9f 10					.word Function_CLS             & $FFFF ; token $3e2a "cls"
>010056	8a 0b					.word Function_PRINT           & $FFFF ; token $3e2b "print"
>010058	55 0d					.word Function_GOTO            & $FFFF ; token $3e2c "goto"
>01005a	b4 0d					.word Function_GOSUB           & $FFFF ; token $3e2d "gosub"
>01005c	d0 0d					.word Function_RETURN          & $FFFF ; token $3e2e "return"
>01005e	12 0d					.word Function_ONGOTO          & $FFFF ; token $3e2f "on"
>010060	3d 0c					.word Handler_ELSE             & $FFFF ; token $3e30 "else"
>010062	02 0e					.word Function_REPEAT          & $FFFF ; token $3c31 "repeat"
>010064	60 0e					.word Function_WHILE           & $FFFF ; token $3c32 "while"
>010066	d6 0b					.word Function_IF              & $FFFF ; token $3c33 "if"
>010068	14 04					.word IllegalToken             & $FFFF ; token $3c34 "for"
>01006a	97 0e					.word Function_WEND            & $FFFF ; token $3a35 "wend"
>01006c	19 0e					.word Function_UNTIL           & $FFFF ; token $3a36 "until"
>01006e	14 04					.word IllegalToken             & $FFFF ; token $3a37 "then"
>010070	6b 0c					.word Handler_ENDIF            & $FFFF ; token $3a38 "endif"
>010072	14 04					.word IllegalToken             & $FFFF ; token $3a39 "next"
.010074					TokenText:
>010074	02 26					 .text $02,"&"        ; token $2001
>010076	02 7c					 .text $02,"|"        ; token $2002
>010078	02 5e					 .text $02,"^"        ; token $2003
>01007a	12 3c					 .text $12,"<"        ; token $2204
>01007c	12 3e					 .text $12,">"        ; token $2205
>01007e	12 3d					 .text $12,"="        ; token $2206
>010080	13 3c 3d				 .text $13,"<="       ; token $2207
>010083	13 3e 3d				 .text $13,">="       ; token $2208
>010086	13 3c 3e				 .text $13,"<>"       ; token $2209
>010089	22 2b					 .text $22,"+"        ; token $240a
>01008b	22 2d					 .text $22,"-"        ; token $240b
>01008d	32 2a					 .text $32,"*"        ; token $260c
>01008f	32 2f					 .text $32,"/"        ; token $260d
>010091	32 25					 .text $32,"%"        ; token $260e
>010093	33 3e 3e				 .text $33,">>"       ; token $260f
>010096	33 3c 3c				 .text $33,"<<"       ; token $2610
>010099	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>01009e	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100a3	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100a8	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100ad	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100b2	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100b8	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100be	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100c3	92 2c					 .text $92,","        ; token $3219
>0100c5	92 3b					 .text $92,";"        ; token $321a
>0100c7	92 3a					 .text $92,":"        ; token $321b
>0100c9	92 28					 .text $92,"("        ; token $321c
>0100cb	92 29					 .text $92,")"        ; token $321d
>0100cd	92 27					 .text $92,"'"        ; token $321e
>0100cf	93 74 6f				 .text $93,"to"       ; token $321f
>0100d2	95 73 74 65 70				 .text $95,"step"     ; token $3220
>0100d7	f4 72 65 6d				 .text $f4,"rem"      ; token $3e21
>0100db	f4 6c 65 74				 .text $f4,"let"      ; token $3e22
>0100df	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e23
>0100e6	f4 65 6e 64				 .text $f4,"end"      ; token $3e24
>0100ea	f4 72 75 6e				 .text $f4,"run"      ; token $3e25
>0100ee	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e26
>0100f3	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e27
>0100f9	f4 64 69 6d				 .text $f4,"dim"      ; token $3e28
>0100fd	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e29
>010105	f4 63 6c 73				 .text $f4,"cls"      ; token $3e2a
>010109	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e2b
>01010f	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e2c
>010114	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e2d
>01011a	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e2e
>010121	f3 6f 6e				 .text $f3,"on"       ; token $3e2f
>010124	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e30
>010129	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c31
>010130	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c32
>010136	e3 69 66				 .text $e3,"if"       ; token $3c33
>010139	e4 66 6f 72				 .text $e4,"for"      ; token $3c34
>01013d	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a35
>010142	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a36
>010148	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a37
>01014d	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a38
>010153	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a39
>010158	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3219					commaTokenID                     = $3219
=$321a					semicolonTokenID                 = $321a
=$321b					colonTokenID                     = $321b
=$321c					lparenTokenID                    = $321c
=$321d					rparenTokenID                    = $321d
=$321e					squoteTokenID                    = $321e
=$321f					toTokenID                        = $321f
=$3220					stepTokenID                      = $3220
=$3e21					remTokenID                       = $3e21
=$3e22					letTokenID                       = $3e22
=$3e23					assertTokenID                    = $3e23
=$3e24					endTokenID                       = $3e24
=$3e25					runTokenID                       = $3e25
=$3e26					stopTokenID                      = $3e26
=$3e27					clearTokenID                     = $3e27
=$3e28					dimTokenID                       = $3e28
=$3e29					collectTokenID                   = $3e29
=$3e2a					clsTokenID                       = $3e2a
=$3e2b					printTokenID                     = $3e2b
=$3e2c					gotoTokenID                      = $3e2c
=$3e2d					gosubTokenID                     = $3e2d
=$3e2e					returnTokenID                    = $3e2e
=$3e2f					onTokenID                        = $3e2f
=$3e30					elseTokenID                      = $3e30
=$3c31					repeatTokenID                    = $3c31
=$3c32					whileTokenID                     = $3c32
=$3c33					ifTokenID                        = $3c33
=$3c34					forTokenID                       = $3c34
=$3a35					wendTokenID                      = $3a35
=$3a36					untilTokenID                     = $3a36
=$3a37					thenTokenID                      = $3a37
=$3a38					endifTokenID                     = $3a38
=$3a39					nextTokenID                      = $3a39

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010159					Evaluate:
.010159	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.01015c	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.01015f					EvaluateLevel:
.01015f	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010162	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010164	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010166	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010169	b0 79		bcs $0101e4			bcs 	_ELVariable
.01016b	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01016e	b0 16		bcs $010186			bcs 	_ELConstant
.010170	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010173	90 7f		bcc $0101f4			bcc 	_ELStringConstant
.010175	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010178	90 03		bcc $01017d			bcc 	_ELConstantShift
.01017a	82 94 00	brl $010211			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01017d					_ELConstantShift:
.01017d	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010180	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010182	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010184	e6 06		inc $06				inc 	DCodePtr
.010186					_ELConstant:
.010186	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010188	38		sec				sec  								; shift it in the range 0-32767
.010189	e9 00 40	sbc #$4000			sbc 	#$4000
.01018c	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01018d	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.01018f	6a		ror a				ror 	a 							; rotate that into the constant value
.010190	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010192	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010194	95 10		sta $10,x			sta 	EXSValueH+0,x
.010196	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010198	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01019a	e6 06		inc $06				inc 	DCodePtr
.01019c					_ELGotAtom:
.01019c	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.01019e	a8		tay				tay 								; save in Y
.01019f	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0101a2	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0101a5	d0 35		bne $0101dc			bne 	_ELExit
.0101a7	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0101a9	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101ac	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0101ae	98		tya				tya 								; get the keyword token back
.0101af	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101b2	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0101b4	90 26		bcc $0101dc			bcc 	_ELExit 					; precedence too low, then exit.
.0101b6	5a		phy				phy 								; save the binary operator on the stack
.0101b7	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0101b9	e6 06		inc $06				inc 	DCodePtr
.0101bb	18		clc				clc 								; try the next level up
.0101bc	69 00 02	adc #$0200			adc 	#1 << TokenShift
.0101bf	e8		inx				inx 								; calculate the RHS at the next stack level.
.0101c0	e8		inx				inx
.0101c1	20 5f 01	jsr $01015f			jsr 	EvaluateLevel
.0101c4	ca		dex				dex
.0101c5	ca		dex				dex
.0101c6	7a		ply				ply 								; get operator token back into Y
.0101c7					_ELExecuteY:
.0101c7	98		tya				tya
.0101c8	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101cb	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.0101cc	9b		txy				txy 								; save X in Y
.0101cd	aa		tax				tax 								; double keyword ID in X
.0101ce	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.0101d2	bb		tyx				tyx 								; restore X.
.0101d3	8f d8 01 01	sta $0101d8			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.0101d7					_ELCallRoutine:
.0101d7	20 d7 01	jsr $0101d7			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.0101da	80 c0		bra $01019c			bra 	_ELGotAtom 					; go round operator level again.
.0101dc	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.0101de	0a		asl a				asl 	a
.0101df	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.0101e1	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.0101e3	60		rts				rts
.0101e4					_ELVariable:
.0101e4	16 20		asl $20,x			asl 	EXSPrecType+0,x
.0101e6	20 a5 02	jsr $0102a5			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.0101e9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.0101eb	94 10		sty $10,x			sty 	EXSValueH+0,x
.0101ed	76 20		ror $20,x			ror 	EXSPrecType+0,x
.0101ef	80 ab		bra $01019c			bra 	_ELGotAtom
.0101f1					_ELSyntax
.0101f1	82 31 02	brl $010425			brl 	SyntaxError
.0101f4					_ELStringConstant:
.0101f4	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.0101f7	f0 f8		beq $0101f1			beq 	_ELSyntax
.0101f9	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0101fb	1a		inc a				inc 	a
.0101fc	1a		inc a				inc 	a
.0101fd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101ff	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010201	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010203	18		clc				clc 								; add to string constant.
.010204	65 06		adc $06				adc 	DCodePtr
.010206	85 06		sta $06				sta 	DCodePtr
.010208	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01020a	09 00 80	ora #$8000			ora 	#$8000
.01020d	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01020f	80 8b		bra $01019c			bra 	_ELGotAtom
.010211					_ELUnaryKeyword:
.010211	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010213	a8		tay				tay 								; put the token in Y.
.010214	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010216	e6 06		inc $06				inc 	DCodePtr
.010218	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01021b	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.01021e	f0 a7		beq $0101c7			beq 	_ELExecuteY					; go back and execute it
.010220	c0 1c 32	cpy #$321c			cpy 	#lparenTokenID 				; is it an open bracket ?
.010223	d0 11		bne $010236			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010225	20 5c 02	jsr $01025c			jsr 	EvaluateNext 				; evaluate the expression
.010228	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; consume the right bracket.
.01022b					_ELCopy:
.01022b	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01022d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01022f	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010231	95 10		sta $10,x			sta 	EXSValueH+0,x
.010233	82 66 ff	brl $01019c			brl 	_ELGotAtom 					; and continue.
.010236					_ELUnaryOperator:
.010236	5a		phy				phy 								; save the operator on the stack.
.010237	e8		inx				inx 								; this is like evaluate next
.010238	e8		inx				inx
.010239	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01023c	20 5f 01	jsr $01015f			jsr 	EvaluateLevel
.01023f	ca		dex				dex 								; unwind the stack.
.010240	ca		dex				dex
.010241	68		pla				pla 								; restore the unary operator.
.010242	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010245	f0 03		beq $01024a			beq 	_ELMinus
.010247	4c 25 04	jmp $010425			jmp 	SyntaxError
.01024a					_ELMinus:
.01024a	38		sec				sec 								; do the negation calculation.
.01024b	a9 00 00	lda #$0000			lda 	#0
.01024e	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010250	95 00		sta $00,x			sta 	EXSValueL+0,x
.010252	a9 00 00	lda #$0000			lda 	#0
.010255	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010257	95 10		sta $10,x			sta 	EXSValueH+0,x
.010259	82 40 ff	brl $01019c			brl 	_ELGotAtom					; and continue.
.01025c					EvaluateNext:
.01025c	e8		inx				inx
.01025d	e8		inx				inx
.01025e	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010261	20 5f 01	jsr $01015f			jsr 	EvaluateLevel
.010264	ca		dex				dex
.010265	ca		dex				dex
.010266	60		rts				rts
.010267					EvaluateInteger:
.010267	20 59 01	jsr $010159			jsr 	Evaluate
.01026a	b0 01		bcs $01026d			bcs 	EIType
.01026c	60		rts				rts
.01026d					EIType:
.01026d	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010270	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010278	78 70 65 63 74 65 64 00
.010280					EvaluateNextInteger:
.010280	20 5c 02	jsr $01025c			jsr 	EvaluateNext
.010283	b0 e8		bcs $01026d			bcs 	EIType
.010285	60		rts				rts
.010286					EvaluateString:
.010286	20 59 01	jsr $010159			jsr 	Evaluate
.010289	90 01		bcc $01028c			bcc 	ESType
.01028b	60		rts				rts
.01028c					ESType:
.01028c	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>01028f	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010297	78 70 65 63 74 65 64 00
.01029f					EvaluateNextString:
.01029f	20 5c 02	jsr $01025c			jsr 	EvaluateNext
.0102a2	90 e8		bcc $01028c			bcc 	ESType
.0102a4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0102a5					VariableAccessExpression:
.0102a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0102a7	48		pha				pha
.0102a8	20 e6 02	jsr $0102e6			jsr 	VariableFind 				; try to find the variables
.0102ab	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0102ad	90 23		bcc $0102d2			bcc 	_VANError
.0102af	68		pla				pla 								; get and save that first token
.0102b0	48		pha				pha
.0102b1	a8		tay				tay 								; put first token in Y.
.0102b2	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102b5	f0 07		beq $0102be			beq 	_VANNotArray
.0102b7	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.0102b9	20 5d 03	jsr $01035d			jsr 	VariableSubscript			; index calculation
.0102bc	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0102be					_VANNotArray:
.0102be	68		pla				pla 								; get the token back.
.0102bf	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.0102c2	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.0102c5	38		sec				sec 								; set up return string.
.0102c6	f0 06		beq $0102ce			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.0102c8	18		clc				clc 								; returning a number, read high data word
.0102c9	a0 02 00	ldy #$0002			ldy 	#2
.0102cc	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.0102ce					_VANLoadLower:
.0102ce	a8		tay				tay 								; put A into Y (this is the high byte)
.0102cf	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.0102d1	60		rts				rts
.0102d2					_VANError:
.0102d2	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0102d5	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>0102dd	20 75 6e 6b 6e 6f 77 6e 00
.0102e6					VariableFind:
.0102e6	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0102e8	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0102eb	90 5c		bcc $010349			bcc 	_VFError
.0102ed	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0102f0	b0 11		bcs $010303			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0102f2	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0102f5	3a		dec a				dec 	a 							; now 0-25
.0102f6	0a		asl a				asl 	a 							; x 4 and clear carry
.0102f7	0a		asl a				asl 	a
.0102f8	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0102fb	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102fd	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102ff	e6 06		inc $06				inc 	DCodePtr
.010301	38		sec				sec 								; return with carry set.
.010302	60		rts				rts
.010303					_VFSlowVariable:
.010303	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010305	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010308	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010309	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01030a	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.01030d	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.01030f	85 08		sta $08				sta 	DTemp1
.010311	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010313	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010316	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010317	65 08		adc $08				adc 	DTemp1
.010319	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01031b	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01031d					_VFNext:
.01031d	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.01031f	f0 26		beq $010347			beq 	_VFFail 					; if zero, then it's the end of the list.
.010321	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010323	a8		tay				tay 								; read the address of the name at $0002,y
.010324	b9 02 00	lda $0002,y			lda 	$0002,y
.010327	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010329	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01032c					_VFCompare:
.01032c	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.01032e	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010330	d0 eb		bne $01031d			bne 	_VFNext 					; if not, go to the next one.
.010332	c8		iny				iny 								; advance token pointer
.010333	c8		iny				iny
.010334	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010337	d0 f3		bne $01032c			bne 	_VFCompare
.010339	98		tya				tya 								; this is the length of the word.
.01033a	18		clc				clc 								; so we add it to the code pointer
.01033b	65 06		adc $06				adc 	DCodePtr
.01033d	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.01033f	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010341	18		clc				clc 								; four on is the actual data
.010342	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010345	38		sec				sec 								; return with CS indicating success
.010346	60		rts				rts
.010347					_VFFail:
.010347	18		clc				clc
.010348	60		rts				rts
.010349					_VFError:
.010349	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>01034c	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010354	76 61 72 69 61 62 6c 65 00
.01035d					VariableSubscript:
.01035d	48		pha				pha		 							; save variable address on stack.
.01035e	20 80 02	jsr $010280			jsr		EvaluateNextInteger 		; get the subscript
.010361	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; skip right bracket.
.010364	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010367	d0 10		bne $010379			bne 	_VANSubscript
.010369	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01036b	f0 02		beq $01036f			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01036d	b0 0a		bcs $010379			bcs 	_VANSubscript
.01036f					_VANSubOkay:
.01036f	0a		asl a				asl 	a 							; double lsword
.010370	0a		asl a				asl 	a 							; and again, also clears carry.
.010371	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010373	68		pla				pla 								; restore DVariablePtr
.010374	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010375	1a		inc a				inc 	a
.010376	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010378	60		rts				rts
.010379					_VANSubscript:
.010379	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>01037c	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010384	79 20 53 75 62 73 63 72 69 70 74 00
.010390					VariableCreate:
.010390	48		pha				pha 								; save count.
.010391	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010394	29 00 20	and #$2000			and 	#IDTypeMask
.010397	f0 06		beq $01039f			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010399	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01039c	18		clc				clc
.01039d	65 02		adc $02				adc 	DBaseAddress
.01039f					_VCIsInteger:
.01039f	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.0103a1	68		pla				pla 								; restore count
.0103a2	48		pha				pha
.0103a3	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.0103a4	0a		asl a				asl 	a 							; 2 x # items.
.0103a5	0a		asl a				asl 	a 							; 4 x # items.
.0103a6					_VCNotSingle:
.0103a6	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0103a8	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0103ab	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.0103ae	f0 04		beq $0103b4			beq 	_VCNotArray
.0103b0	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.0103b2	e6 08		inc $08				inc 	DTemp1
.0103b4					_VCNotArray:
.0103b4	5a		phy				phy 								; save address of token on stack.
.0103b5	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0103b8	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.0103ba	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103bc	18		clc				clc 								; add 4 for link and name.
.0103bd	69 04 00	adc #$0004			adc 	#4
.0103c0	65 08		adc $08				adc 	DTemp1 						; add memory required
.0103c2	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.0103c4	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.0103c6					_VCErase:
.0103c6	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103c8	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103cb	c8		iny				iny
.0103cc	c8		iny				iny
.0103cd	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.0103cf	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.0103d1	d0 f3		bne $0103c6			bne 	_VCErase
.0103d3	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.0103d5	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.0103d7	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.0103da	68		pla				pla 								; restore the token address
.0103db	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0103de	68		pla				pla 								; restore count and store.
.0103df	99 04 00	sta $0004,y			sta 	$0004,y
.0103e2					_VCNotArray2:
.0103e2	98		tya				tya 								; update the head link
.0103e3	92 20		sta ($20)			sta 	(DHashTablePtr)
.0103e5	18		clc				clc 								; advance pointer to the data bit.
.0103e6	69 04 00	adc #$0004			adc 	#4
.0103e9	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.0103ea					ErrorHandler:
.0103ea	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0103ec	fa		plx				plx 								; address of error message -1
.0103ed	e8		inx				inx 								; error message.
.0103ee	20 91 04	jsr $010491			jsr 	PrintROMMessage 			; print message in ROM
.0103f1	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0103f3	f0 15		beq $01040a			beq 	_EHEndMessage
.0103f5	a2 0f 04	ldx #$040f			ldx 	#_EHAt & $FFFF 				; print " at "
.0103f8	20 91 04	jsr $010491			jsr 	PrintROMMessage
.0103fb	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103fd	a0 00 00	ldy #$0000			ldy 	#0
.010400	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010403	20 6e 0a	jsr $010a6e			jsr 	ConvertToString 			; convert and print it.
.010406	a8		tay				tay
.010407	20 a5 04	jsr $0104a5			jsr 	PrintBASICString
.01040a					_EHEndMessage:
.01040a	20 08 11	jsr $011108			jsr 	HWNewLine
.01040d	80 fe		bra $01040d	_EH1:	bra 	_EH1
>01040f	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010414					IllegalToken:
.010414	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010417	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01041f	54 6f 6b 65 6e 00
.010425					SyntaxError:
.010425	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010428	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010430	72 72 6f 72 00
.010435					ExpectToken:
.010435	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010437	d0 05		bne $01043e			bne 	_CTKError					; error if not
.010439	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01043b	e6 06		inc $06				inc 	DCodePtr
.01043d	60		rts				rts
.01043e					_CTKError:
.01043e	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010441	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010449	74 6f 6b 65 6e 00
.01044f					ExpectRightBracket:
.01044f	48		pha				pha
.010450	a9 1d 32	lda #$321d			lda 	#rparenTokenID
.010453	20 35 04	jsr $010435			jsr 	ExpectToken
.010456	68		pla				pla
.010457	60		rts				rts
.010458					ExpectComma:
.010458	48		pha				pha
.010459	a9 19 32	lda #$3219			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01045c	20 35 04	jsr $010435			jsr 	ExpectToken
.01045f	68		pla				pla
.010460	60		rts				rts
.010461					CheckBothNumeric:
.010461	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010463	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010465	30 01		bmi $010468			bmi 	_CBNFail 					; need to both be zero in bit 15
.010467	60		rts				rts
.010468					_CBNFail:
.010468	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>01046b	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010473	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010481					ResetTypeInteger:
.010481	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010483	29 ff 7f	and #$7fff			and 	#$7FFF
.010486	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010488	60		rts				rts
.010489					ResetTypeString:
.010489	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01048b	09 00 80	ora #$8000			ora 	#$8000
.01048e	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010490	60		rts				rts
.010491					PrintROMMessage:
.010491	48		pha				pha
.010492	da		phx				phx
.010493					_PRMLoop:
.010493	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010497	29 ff 00	and #$00ff			and 	#$00FF
.01049a	f0 06		beq $0104a2			beq 	_PRMExit
.01049c	20 e6 10	jsr $0110e6			jsr 	HWPrintChar
.01049f	e8		inx				inx
.0104a0	80 f1		bra $010493			bra 	_PRMLoop
.0104a2					_PRMExit:
.0104a2	fa		plx				plx
.0104a3	68		pla				pla
.0104a4	60		rts				rts
.0104a5					PrintBASICString:
.0104a5	48		pha				pha
.0104a6	da		phx				phx
.0104a7	5a		phy				phy
.0104a8	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0104ab	29 ff 00	and #$00ff			and 	#$00FF
.0104ae	f0 0b		beq $0104bb			beq 	_PBSExit 					; null string
.0104b0	aa		tax				tax
.0104b1					_PBSLoop:
.0104b1	c8		iny				iny
.0104b2	b9 00 00	lda $0000,y			lda 	$0000,y
.0104b5	20 e6 10	jsr $0110e6			jsr 	HWPrintChar
.0104b8	ca		dex				dex
.0104b9	d0 f6		bne $0104b1			bne 	_PBSLoop
.0104bb					_PBSExit:
.0104bb	7a		ply				ply
.0104bc	fa		plx				plx
.0104bd	68		pla				pla
.0104be	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0104bf					StringTempAllocate:
.0104bf	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0104c2	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0104c5	18		clc				clc 								; this adds one, for the length.
.0104c6	65 16		adc $16				adc 	DTempStringPointer
.0104c8	85 16		sta $16				sta 	DTempStringPointer
.0104ca	48		pha				pha
.0104cb	a9 00 00	lda #$0000			lda 	#$0000
.0104ce	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0104d0	92 16		sta ($16)			sta		(DTempStringPointer)
.0104d2	c2 20		rep #$20			rep 	#$20
.0104d4	68		pla				pla
.0104d5	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0104d7	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0104d9	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0104db	60		rts				rts
.0104dc					StringWriteCharacter:
.0104dc	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.0104de	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.0104e0	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.0104e2	1a		inc a				inc 	a
.0104e3	92 18		sta ($18)			sta 	(DStartTempString)
.0104e5	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.0104e7	60		rts				rts
.0104e8					StringCreateCopy:
.0104e8	a8		tay				tay 								; put pointer to string in Y
.0104e9	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0104ec	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0104ef	f0 17		beq $010508			beq 	_SCCExit 					; do nothing if length zero.
.0104f1	da		phx				phx 								; save X and put the character count in X
.0104f2	aa		tax				tax
.0104f3					_SCCCopy:
.0104f3	c8		iny				iny 								; advance and read (first time skips length)
.0104f4	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0104f6	b9 00 00	lda $0000,y			lda 	$0000,y
.0104f9	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0104fb	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0104fd	1a		inc a				inc 	a
.0104fe	92 18		sta ($18)			sta 	(DStartTempString)
.010500	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010502	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010504	ca		dex				dex 								; do X times
.010505	d0 ec		bne $0104f3			bne 	_SCCCopy
.010507	fa		plx				plx
.010508					_SCCExit:
.010508	60		rts				rts
.010509					StringMakeConcrete:
.010509	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01050c	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01050e	90 0f		bcc $01051f			bcc 	_SMCExit
.010510	85 08		sta $08				sta 	DTemp1 						; source
.010512	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010514	29 ff 00	and #$00ff			and 	#$00FF
.010517	d0 07		bne $010520			bne 	_SMCNonZero 				; if not "" skip.
.010519	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01051c	18		clc				clc
.01051d	65 02		adc $02				adc 	DBaseAddress
.01051f					_SMCExit:
.01051f	60		rts				rts
.010520					_SMCNonZero:
.010520	48		pha				pha 								; save on stack.
.010521	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010524	18		clc				clc
.010525	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010528	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01052a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01052c	85 0c		sta $0c				sta 	DTemp2 						; target
.01052e	7a		ply				ply 								; get length copy from here until Y goes -ve
.01052f	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010531					_SMCLoop:
.010531	b1 08		lda ($08),y			lda 	(DTemp1),y
.010533	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010535	88		dey				dey
.010536	10 f9		bpl $010531			bpl 	_SMCLoop
.010538	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01053a	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01053c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01053d					Binary_Add:
.01053d	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01053f	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010541	30 12		bmi $010555		bmi 	_BATypeError
.010543	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010545	30 3f		bmi $010586		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010547	18		clc			clc
.010548	b5 00		lda $00,x		lda		EXSValueL+0,x
.01054a	75 02		adc $02,x		adc 	EXSValueL+2,x
.01054c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01054e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010550	75 12		adc $12,x		adc 	EXSValueH+2,x
.010552	95 10		sta $10,x		sta 	EXSValueH+0,x
.010554	60		rts			rts
.010555					_BATypeError:
.010555	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010558	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010560	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010570	65 73 00
.010573					_BALengthError:
.010573	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010576	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01057e	6f 6f 20 6c 6f 6e 67 00
.010586					_BAConcatenateString:
.010586	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010588	85 08		sta $08			sta 	DTemp1
.01058a	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01058c	85 0c		sta $0c			sta 	DTemp2
.01058e	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010590	18		clc			clc 										; work out the total length
.010591	b2 08		lda ($08)		lda 	(DTemp1)
.010593	72 0c		adc ($0c)		adc 	(DTemp2)
.010595	b0 14		bcs $0105ab		bcs 	_BAConcatLengthError 				; string is too long.
.010597	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010599	20 bf 04	jsr $0104bf		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.01059c	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01059e	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105a0	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0105a2	20 e8 04	jsr $0104e8		jsr 	StringCreateCopy
.0105a5	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0105a7	20 e8 04	jsr $0104e8		jsr 	StringCreateCopy
.0105aa	60		rts			rts
.0105ab					_BAConcatLengthError:
.0105ab	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0105ae	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105b6	6f 6f 20 6c 6f 6e 67 00
.0105be					Binary_Subtract:
.0105be	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.0105c1	38		sec			sec
.0105c2	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105c4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105c6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c8	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105ca	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105cc	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ce	60		rts			rts
.0105cf					Binary_ShiftRight:
.0105cf	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.0105d2	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105d4	29 3f 00	and #$003f		and 	#63
.0105d7	f0 07		beq $0105e0		beq		_Binary_SRExit
.0105d9					_Binary_SRLoop:
.0105d9	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0105db	76 00		ror $00,x		ror 	EXSValueL+0,x
.0105dd	3a		dec a			dec 	a
.0105de	d0 f9		bne $0105d9		bne 	_Binary_SRLoop
.0105e0					_Binary_SRExit:
.0105e0	60		rts			rts
.0105e1					Binary_ShiftLeft:
.0105e1	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e4	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105e6	29 3f 00	and #$003f		and 	#63
.0105e9	f0 07		beq $0105f2		beq		_Binary_SLExit
.0105eb					_Binary_SLLoop:
.0105eb	16 00		asl $00,x		asl 	EXSValueL+0,x
.0105ed	36 10		rol $10,x		rol 	EXSValueH+0,x
.0105ef	3a		dec a			dec 	a
.0105f0	d0 f9		bne $0105eb		bne 	_Binary_SLLoop
.0105f2					_Binary_SLExit:
.0105f2	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.0105f3					Binary_And:
.0105f3	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.0105f6	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105f8	35 02		and $02,x		and 	EXSValueL+2,x
.0105fa	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105fc	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105fe	35 12		and $12,x		and 	EXSValueH+2,x
.010600	95 10		sta $10,x		sta 	EXSValueH+0,x
.010602	60		rts			rts
.010603					Binary_Or:
.010603	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.010606	b5 00		lda $00,x		lda		EXSValueL+0,x
.010608	15 02		ora $02,x		ora 	EXSValueL+2,x
.01060a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01060c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01060e	15 12		ora $12,x		ora 	EXSValueH+2,x
.010610	95 10		sta $10,x		sta 	EXSValueH+0,x
.010612	60		rts			rts
.010613					Binary_Xor:
.010613	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.010616	b5 00		lda $00,x		lda		EXSValueL+0,x
.010618	55 02		eor $02,x		eor 	EXSValueL+2,x
.01061a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01061c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01061e	55 12		eor $12,x		eor 	EXSValueH+2,x
.010620	95 10		sta $10,x		sta 	EXSValueH+0,x
.010622	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010623					Binary_Equals:
.010623	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010626	b0 0e		bcs $010636		bcs 	_BEString
.010628	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01062a	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01062c	d0 4f		bne $01067d		bne 	Compare_Fail
.01062e	b5 10		lda $10,x		lda 	EXSValueH,x
.010630	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010632	d0 49		bne $01067d		bne 	Compare_Fail
.010634	80 3f		bra $010675		bra 	Compare_Succeed
.010636					_BEString:
.010636	09 00 00	ora #$0000		ora 	#$0000
.010639	f0 3a		beq $010675		beq 	Compare_Succeed
.01063b	80 40		bra $01067d		bra 	Compare_Fail
.01063d					Binary_NotEquals:
.01063d	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010640	b0 0e		bcs $010650		bcs 	_BNEString
.010642	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010644	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010646	d0 2d		bne $010675		bne 	Compare_Succeed
.010648	b5 10		lda $10,x		lda 	EXSValueH,x
.01064a	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01064c	d0 27		bne $010675		bne 	Compare_Succeed
.01064e	80 2d		bra $01067d		bra 	Compare_Fail
.010650					_BNEString:
.010650	09 00 00	ora #$0000		ora 	#$0000
.010653	d0 20		bne $010675		bne 	Compare_Succeed
.010655	80 26		bra $01067d		bra 	Compare_Fail
.010657					Binary_Less:
.010657	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01065a	b0 12		bcs $01066e		bcs 	_BLString
.01065c	38		sec			sec
.01065d	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01065f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010661	b5 10		lda $10,x		lda 	EXSValueH,x
.010663	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010665	50 03		bvc $01066a		bvc 	*+5
.010667	49 00 80	eor #$8000		eor 	#$8000
.01066a	30 09		bmi $010675		bmi 	Compare_Succeed
.01066c	80 0f		bra $01067d		bra 	Compare_Fail
.01066e					_BLString:
.01066e	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010671	f0 02		beq $010675		beq 	Compare_Succeed
.010673	80 08		bra $01067d		bra 	Compare_Fail
.010675					Compare_Succeed:
.010675	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010678	95 00		sta $00,x		sta 	EXSValueL,x
.01067a	95 10		sta $10,x		sta 	EXSValueH,x
.01067c	60		rts			rts
.01067d					Compare_Fail:
.01067d	74 00		stz $00,x		stz 	EXSValueL,x
.01067f	74 10		stz $10,x		stz 	EXSValueH,x
.010681	60		rts			rts
.010682					Binary_GreaterEqual:
.010682	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010685	b0 12		bcs $010699		bcs 	_BGEString
.010687	38		sec			sec
.010688	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01068a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01068c	b5 10		lda $10,x		lda 	EXSValueH,x
.01068e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010690	50 03		bvc $010695		bvc 	*+5
.010692	49 00 80	eor #$8000		eor 	#$8000
.010695	10 de		bpl $010675		bpl 	Compare_Succeed
.010697	80 e4		bra $01067d		bra 	Compare_Fail
.010699					_BGEString:
.010699	09 00 00	ora #$0000		ora 	#$0000
.01069c	10 d7		bpl $010675		bpl 	Compare_Succeed
.01069e	80 dd		bra $01067d		bra 	Compare_Fail
.0106a0					Binary_LessEqual:
.0106a0	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106a3	b0 12		bcs $0106b7		bcs 	_BLEString
.0106a5	18		clc			clc 									; numeric <= signed
.0106a6	b5 00		lda $00,x		lda 	EXSValueL,x
.0106a8	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106aa	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ac	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106ae	50 03		bvc $0106b3		bvc 	*+5
.0106b0	49 00 80	eor #$8000		eor 	#$8000
.0106b3	30 c0		bmi $010675		bmi 	Compare_Succeed
.0106b5	80 c6		bra $01067d		bra 	Compare_Fail
.0106b7					_BLEString:
.0106b7	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0106ba	d0 b9		bne $010675		bne 	Compare_Succeed
.0106bc	80 bf		bra $01067d		bra 	Compare_Fail
.0106be					Binary_Greater:
.0106be	20 dc 06	jsr $0106dc		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106c1	b0 12		bcs $0106d5		bcs 	_BGString
.0106c3	18		clc			clc 									; numeric > signed
.0106c4	b5 00		lda $00,x		lda 	EXSValueL,x
.0106c6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106c8	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ca	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106cc	50 03		bvc $0106d1		bvc 	*+5
.0106ce	49 00 80	eor #$8000		eor 	#$8000
.0106d1	10 a2		bpl $010675		bpl 	Compare_Succeed
.0106d3	80 a8		bra $01067d		bra 	Compare_Fail
.0106d5					_BGString:
.0106d5	c9 01 00	cmp #$0001		cmp 	#$0001
.0106d8	f0 9b		beq $010675		beq 	Compare_Succeed
.0106da	80 a1		bra $01067d		bra 	Compare_Fail
.0106dc					CompareTypeCheck:
.0106dc	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0106de	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0106e0	30 06		bmi $0106e8		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0106e2	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0106e4	30 1c		bmi $010702		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0106e6	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0106e7	60		rts			rts
.0106e8					_CTCFail:
.0106e8	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0106eb	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0106f3	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010702					_CTCStringCompare:
.010702	20 81 04	jsr $010481		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010705	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010707	85 08		sta $08			sta 	DTemp1
.010709	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01070b	85 0c		sta $0c			sta 	DTemp2
.01070d	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010710	a8		tay			tay
.010711	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010713	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010715	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010717	90 02		bcc $01071b		bcc 	_CTCSmallest
.010719	b2 0c		lda ($0c)		lda 	(DTemp2)
.01071b					_CTCSmallest:
.01071b	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01071d					_CTCCompare:
.01071d	c8		iny			iny 									; look at next character (done first, first char is size)
.01071e	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010720	30 16		bmi $010738		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010722	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010724	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010726	f0 f5		beq $01071d		beq 	_CTCCompare 					; if zero, try the next character.
.010728	b0 07		bcs $010731		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01072a					_CTCLess:
.01072a	c2 20		rep #$20		rep 	#$20
.01072c	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01072f	80 14		bra $010745		bra 	_CTCExit
.010731					_CTCGreater:
.010731	c2 20		rep #$20		rep 	#$20
.010733	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010736	80 0d		bra $010745		bra 	_CTCExit
.010738					_CTCEqualSoFar:
.010738	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01073a	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01073c	90 ec		bcc $01072a		bcc 	_CTCLess
.01073e	d0 f1		bne $010731		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010740	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010742	a9 00 00	lda #$0000		lda 	#$0000
.010745					_CTCExit:
.010745	38		sec			sec 									; return with CS indicating string comparison.
.010746	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010747					Binary_Divide:
.010747	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.01074a	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01074c	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01074e	d0 14		bne $010764		bne 	_BinaryDivide_Ok
.010750	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010753	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01075b	20 62 79 20 7a 65 72 6f 00
.010764					_BinaryDivide_Ok:
.010764	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010766	64 0a		stz $0a			stz 	DTemp1+2
.010768	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01076a	5a		phy			phy 										; save Y (bit counter)
.01076b	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01076d	10 07		bpl $010776		bpl 	_BinaryDivide_RightDone
.01076f	e8		inx			inx
.010770	e8		inx			inx
.010771	20 ac 07	jsr $0107ac		jsr 	Binary_DivNegate
.010774	ca		dex			dex
.010775	ca		dex			dex
.010776					_BinaryDivide_RightDone:
.010776	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010778	10 03		bpl $01077d		bpl 	_BinaryDivide_LeftDone
.01077a	20 ac 07	jsr $0107ac		jsr 	Binary_DivNegate
.01077d					_BinaryDivide_LeftDone:
.01077d	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010780					_BinaryDivide_Loop:
.010780	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010782	36 10		rol $10,x		rol 	EXSValueH+0,x
.010784	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010786	26 0a		rol $0a			rol 	DTemp1+2
.010788	38		sec			sec											; calculate A-M
.010789	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01078b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01078d	85 0c		sta $0c			sta 	DTemp2
.01078f	a5 0a		lda $0a			lda 	DTemp1+2
.010791	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010793	90 08		bcc $01079d		bcc 	_Binary_NoSubract 					; if A < M skip this
.010795	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010797	a5 0c		lda $0c			lda 	DTemp2
.010799	85 08		sta $08			sta 	DTemp1+0
.01079b	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01079d					_Binary_NoSubract:
.01079d	88		dey			dey 										; do it 32 times.
.01079e	d0 e0		bne $010780		bne 	_BinaryDivide_Loop
.0107a0					_BinaryDivide_Exit:
.0107a0	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0107a2	29 01 00	and #$0001		and 	#1
.0107a5	f0 03		beq $0107aa		beq 	_BinaryDivide_Exit2
.0107a7	20 ac 07	jsr $0107ac		jsr 	Binary_DivNegate
.0107aa					_BinaryDivide_Exit2:
.0107aa	7a		ply			ply 										; restore Y
.0107ab	60		rts			rts
.0107ac					Binary_DivNegate:
.0107ac	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0107ae	38		sec			sec 										; negate the value at stack X.
.0107af	a9 00 00	lda #$0000		lda 	#$0000
.0107b2	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0107b4	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107b6	a9 00 00	lda #$0000		lda 	#$0000
.0107b9	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0107bb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107bd	60		rts			rts
.0107be					Binary_Modulus:
.0107be	20 47 07	jsr $010747		jsr 	Binary_Divide 						; do the divide
.0107c1	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0107c3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107c5	a5 0a		lda $0a			lda 	DTemp1+2
.0107c7	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107c9	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0107ca					Binary_Multiply:
.0107ca	20 61 04	jsr $010461		jsr 	CheckBothNumeric 					; check both values are numeric
.0107cd	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0107cf	85 08		sta $08			sta 	DTemp1
.0107d1	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107d3	85 0a		sta $0a			sta		DTemp1+2
.0107d5	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0107d7	74 10		stz $10,x		stz 	EXSValueH+0,x
.0107d9					_BinaryMultiply_Loop:
.0107d9	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0107db	05 0a		ora $0a			ora 	DTemp1+2
.0107dd	f0 1e		beq $0107fd		beq 	_BinaryMultiply_Exit
.0107df	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0107e1	29 01 00	and #$0001		and 	#1
.0107e4	f0 0d		beq $0107f3		beq 	_BinaryMultiply_NoAdd
.0107e6	18		clc			clc 										; add multiplicand to result.
.0107e7	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0107e9	75 02		adc $02,x		adc 	EXSValueL+2,x
.0107eb	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107ed	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107ef	75 12		adc $12,x		adc 	EXSValueH+2,x
.0107f1	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107f3					_BinaryMultiply_NoAdd:
.0107f3	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0107f5	66 08		ror $08			ror 	DTemp1
.0107f7	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0107f9	36 12		rol $12,x		rol 	EXSValueH+2,x
.0107fb	80 dc		bra $0107d9		bra 	_BinaryMultiply_Loop 				; go round again.
.0107fd					_BinaryMultiply_Exit:
.0107fd	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.0107fe					Function_Len:
.0107fe	20 81 04	jsr $010481			jsr 	ResetTypeInteger 			; returns an integer
.010801	20 9f 02	jsr $01029f			jsr 	EvaluateNextString 			; get the value you are absoluting
.010804	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.010807	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010809	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01080c	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01080f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010811	74 10		stz $10,x			stz 	EXSValueH+0,x
.010813	60		rts				rts
.010814					Function_Abs:
.010814	20 81 04	jsr $010481			jsr 	ResetTypeInteger 			; returns an integer
.010817	20 80 02	jsr $010280			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01081a	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.01081d	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01081f	30 07		bmi $010828			bmi 	_FAbsNegative 				; negate it if negative
.010821	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010823	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010825	95 00		sta $00,x			sta 	EXSValueL+0,x
.010827	60		rts				rts
.010828					_FAbsNegative:
.010828	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010829	a9 00 00	lda #$0000			lda 	#0
.01082c	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01082e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010830	a9 00 00	lda #$0000			lda 	#0
.010833	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010835	95 10		sta $10,x			sta 	EXSValueH+0,x
.010837	60		rts				rts
.010838					Function_Sgn:
.010838	20 81 04	jsr $010481			jsr 	ResetTypeInteger 			; returns integer
.01083b	20 80 02	jsr $010280			jsr 	EvaluateNextInteger 		; get an integer
.01083e	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.010841	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010843	74 10		stz $10,x			stz 	EXSValueH+0,x
.010845	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010847	30 07		bmi $010850			bmi 	_FSgnNegative 				; set to -1 if signed
.010849	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01084b	f0 02		beq $01084f			beq 	_FSgnExit
.01084d	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01084f					_FSgnExit:
.01084f	60		rts				rts
.010850					_FSgnNegative:
.010850	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010853	95 00		sta $00,x			sta 	EXSValueL+0,x
.010855	95 10		sta $10,x			sta 	EXSValueH+0,x
.010857	60		rts				rts
.010858					Function_Random:
.010858	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.01085b	20 81 04	jsr $010481			jsr 	ResetTypeInteger
.01085e	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010860	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010862	d0 0a		bne $01086e			bne 	_Rnd_NotZero
.010864	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010867	85 10		sta $10				sta 	DRandom
.010869	a9 ea 00	lda #$00ea			lda 	#$EA
.01086c	85 12		sta $12				sta 	DRandom+2
.01086e					_Rnd_NotZero:
.01086e	20 79 08	jsr $010879			jsr 	_Rnd_Process 				; call randomiser twice
.010871	95 10		sta $10,x			sta 	EXSValueH+0,x
.010873	20 79 08	jsr $010879			jsr 	_Rnd_Process
.010876	95 00		sta $00,x			sta 	EXSValueL+0,x
.010878	60		rts				rts
.010879					_Rnd_Process:
.010879	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01087b	26 12		rol $12				rol 	DRandom+2
.01087d	90 0e		bcc $01088d			bcc 	_Rnd_Exit
.01087f	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010881	49 54 d4	eor #$d454			eor 	#$D454
.010884	85 10		sta $10				sta 	DRandom
.010886	a5 12		lda $12				lda 	DRandom+2
.010888	49 d5 55	eor #$55d5			eor 	#$55D5
.01088b	85 12		sta $12				sta 	DRandom+2
.01088d					_Rnd_Exit:
.01088d	a5 10		lda $10				lda 	DRandom
.01088f	45 12		eor $12				eor 	DRandom+2
.010891	60		rts				rts
.010892					Function_Chr:
.010892	20 89 04	jsr $010489			jsr 	ResetTypeString 			; returns a string
.010895	20 80 02	jsr $010280			jsr 	EvaluateNextInteger 		; get integer
.010898	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.01089b	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01089e	d0 12		bne $0108b2			bne 	_FCHBad
.0108a0	48		pha				pha
.0108a1	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character
.0108a4	20 bf 04	jsr $0104bf			jsr 	StringTempAllocate
.0108a7	68		pla				pla
.0108a8	20 dc 04	jsr $0104dc			jsr 	StringWriteCharacter 		; write it out.
.0108ab	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0108ad	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108af	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108b1	60		rts				rts
.0108b2					_FCHBad:
.0108b2	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0108b5	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>0108bd	65 20 66 6f 72 20 63 68 72 24 28 29 00
.0108ca					Function_Asc:
.0108ca	20 81 04	jsr $010481			jsr 	ResetTypeInteger 			; returns an integer
.0108cd	20 9f 02	jsr $01029f			jsr 	EvaluateNextString 			; get string
.0108d0	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check )
.0108d3	a8		tay				tay 								; string address in Y
.0108d4	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.0108d7	29 ff 00	and #$00ff			and 	#$00FF
.0108da	f0 0b		beq $0108e7			beq 	_FASBad
.0108dc	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.0108df	29 ff 00	and #$00ff			and 	#$00FF
.0108e2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108e4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108e6	60		rts				rts
.0108e7					_FASBad:
.0108e7	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0108ea	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>0108f2	65 20 66 6f 72 20 61 73 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0108fe					Function_VAL:
.0108fe	20 81 04	jsr $010481			jsr 	ResetTypeInteger 			; returns an integer
.010901	20 9f 02	jsr $01029f			jsr 	EvaluateNextString 			; get the value you are absoluting
.010904	48		pha				pha 								; put string address on stack.
.010905	20 15 09	jsr $010915			jsr 	VALGetBase 					; process , base (shared with STR$())
.010908	7a		ply				ply 								; get string address back
.010909	da		phx				phx 								; save X on stack
.01090a	aa		tax				tax 								; base in X
.01090b	98		tya				tya 								; address in A
.01090c	20 4f 09	jsr $01094f			jsr 	StringToInteger
.01090f	fa		plx				plx 								; restore X
.010910	95 00		sta $00,x			sta 	EXSValueL+0,x
.010912	94 10		sty $10,x			sty 	EXSValueH+0,x
.010914	60		rts				rts
.010915					VALGetBase:
.010915	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010917	c9 19 32	cmp #$3219			cmp 	#commaTokenID 				; if comma, go to get base code.
.01091a	f0 07		beq $010923			beq 	_VGBAlternate
.01091c	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket			; expect ), and return 10.
.01091f	a9 0a 00	lda #$000a			lda 	#10
.010922	60		rts				rts
.010923					_VGBAlternate:
.010923	20 58 04	jsr $010458			jsr 	ExpectComma 				; skip comma.
.010926	20 80 02	jsr $010280			jsr 	EvaluateNextInteger 		; get base
.010929	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.01092c	d0 0e		bne $01093c			bne 	_VGBBadBase
.01092e	c9 02 00	cmp #$0002			cmp 	#2
.010931	90 09		bcc $01093c			bcc 	_VGBBadBase
.010933	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.010936	b0 04		bcs $01093c			bcs 	_VGBBadBase
.010938	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; get right bracket and return.
.01093b	60		rts				rts
.01093c					_VGBBadBase:
.01093c	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>01093f	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010947	65 72 20 42 61 73 65 00
.01094f					StringToInteger:
.01094f	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010951	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010953	29 ff 00	and #$00ff			and 	#$00FF
.010956	85 26		sta $26				sta 	DTemp3+2
.010958	f0 6e		beq $0109c8			beq 	_STIError 					; if length zero it's bad.
.01095a	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.01095c	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.01095e	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010960	64 0a		stz $0a				stz 	DTemp1+2
.010962	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010964	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010967	48		pha				pha 								; push on stack
.010968	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.01096b	d0 06		bne $010973			bne 	_STILoop
.01096d	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01096f	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010971	f0 55		beq $0109c8			beq 	_STIError 					; if only - then error.
.010973					_STILoop:
.010973	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010975	20 e7 09	jsr $0109e7			jsr 	MultiplyTemp1ByA
.010978	b2 24		lda ($24)			lda 	(DTemp3)
.01097a	29 ff 00	and #$00ff			and 	#$00FF
.01097d	20 d8 09	jsr $0109d8			jsr 	ConvertUpperCase
.010980	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.010983	90 43		bcc $0109c8			bcc 	_STIError
.010985	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010988	90 0e		bcc $010998			bcc 	_STIOkay1
.01098a	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01098d	90 39		bcc $0109c8			bcc 	_STIError
.01098f	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010992	b0 34		bcs $0109c8			bcs 	_STIError
.010994	18		clc				clc 								; shift to correct range.
.010995	69 09 00	adc #$0009			adc 	#9
.010998					_STIOkay1:
.010998	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.01099b	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01099d	b0 29		bcs $0109c8			bcs 	_STIError
.01099f	18		clc				clc 								; add A to DTemp1
.0109a0	65 08		adc $08				adc 	DTemp1
.0109a2	85 08		sta $08				sta 	DTemp1
.0109a4	90 02		bcc $0109a8			bcc 	_STINoCarry
.0109a6	e6 0a		inc $0a				inc 	DTemp1+2
.0109a8					_STINoCarry:
.0109a8	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0109aa	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0109ac	d0 c5		bne $010973			bne 	_STILoop 					; loop back.
.0109ae	68		pla				pla 								; get optional minus bac
.0109af	c9 2d 00	cmp #$002d			cmp 	#"-"
.0109b2	d0 0f		bne $0109c3			bne 	_STINotNegative 			; handle the negative character
.0109b4	38		sec				sec 								; negate DTemp1
.0109b5	a9 00 00	lda #$0000			lda 	#0
.0109b8	e5 08		sbc $08				sbc 	DTemp1
.0109ba	85 08		sta $08				sta 	DTemp1
.0109bc	a9 00 00	lda #$0000			lda 	#0
.0109bf	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109c1	85 0a		sta $0a				sta 	DTemp1+2
.0109c3					_STINotNegative:
.0109c3	a5 08		lda $08				lda 	DTemp1 						; get the result
.0109c5	a4 0a		ldy $0a				ldy 	DTemp1+2
.0109c7	60		rts				rts
.0109c8					_STIError:
.0109c8	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>0109cb	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>0109d3	74 61 6e 74 00
.0109d8					ConvertUpperCase:
.0109d8	c9 61 00	cmp #$0061			cmp 	#'a'
.0109db	90 09		bcc $0109e6			bcc 	_CUCExit
.0109dd	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.0109e0	b0 04		bcs $0109e6			bcs 	_CUCExit
.0109e2	38		sec				sec
.0109e3	e9 20 00	sbc #$0020			sbc 	#32
.0109e6					_CUCExit:
.0109e6	60		rts				rts
.0109e7					MultiplyTemp1ByA:
.0109e7	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.0109ea	f0 56		beq $010a42			beq 	_MT1_16
.0109ec	c9 0a 00	cmp #$000a			cmp 	#10
.0109ef	f0 33		beq $010a24			beq 	_MT1_10
.0109f1	c9 08 00	cmp #$0008			cmp 	#8
.0109f4	f0 50		beq $010a46			beq 	_MT1_8
.0109f6	c9 02 00	cmp #$0002			cmp 	#2
.0109f9	f0 53		beq $010a4e			beq 	_MT1_2
.0109fb					_MTGeneral:
.0109fb	da		phx				phx
.0109fc	aa		tax				tax 								; multiplier in X
.0109fd	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0109ff	85 0c		sta $0c				sta 	DTemp2
.010a01	a5 0a		lda $0a				lda 	DTemp1+2
.010a03	85 0e		sta $0e				sta 	DTemp2+2
.010a05	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010a07	64 0a		stz $0a				stz 	DTemp1+2
.010a09					_MTLoop:
.010a09	8a		txa				txa 								; shift X right into C
.010a0a	4a		lsr a				lsr 	a
.010a0b	aa		tax				tax
.010a0c	90 0d		bcc $010a1b			bcc 	_MTNoAdd
.010a0e	18		clc				clc
.010a0f	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010a11	65 0c		adc $0c				adc 	DTemp2
.010a13	85 08		sta $08				sta 	DTemp1
.010a15	a5 0a		lda $0a				lda 	DTemp1+2
.010a17	65 0e		adc $0e				adc 	DTemp2+2
.010a19	85 0a		sta $0a				sta 	DTemp1+2
.010a1b					_MTNoAdd:
.010a1b	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010a1d	26 0e		rol $0e				rol 	DTemp2+2
.010a1f	8a		txa				txa 								; until multiplier is zero.
.010a20	d0 e7		bne $010a09			bne 	_MTLoop
.010a22					_MTGExit:
.010a22	fa		plx				plx 								; restore X
.010a23	60		rts				rts 								; and exit
.010a24					_MT1_10:
.010a24	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010a26	48		pha				pha
.010a27	a5 08		lda $08				lda 	DTemp1
.010a29	48		pha				pha
.010a2a	06 08		asl $08				asl 	DTemp1						; x 4
.010a2c	26 0a		rol $0a				rol 	DTemp1+2
.010a2e	06 08		asl $08				asl 	DTemp1
.010a30	26 0a		rol $0a				rol 	DTemp1+2
.010a32	68		pla				pla 								; add saved value, x 5
.010a33	18		clc				clc
.010a34	65 08		adc $08				adc 	DTemp1
.010a36	85 08		sta $08				sta 	DTemp1
.010a38	68		pla				pla
.010a39	65 0a		adc $0a				adc 	DTemp1+2
.010a3b	85 0a		sta $0a				sta 	DTemp1+2
.010a3d	06 08		asl $08				asl 	DTemp1
.010a3f	26 0a		rol $0a				rol 	DTemp1+2
.010a41	60		rts				rts
.010a42					_MT1_16:
.010a42	06 08		asl $08				asl 	DTemp1
.010a44	26 0a		rol $0a				rol 	DTemp1+2
.010a46					_MT1_8:
.010a46	06 08		asl $08				asl 	DTemp1
.010a48	26 0a		rol $0a				rol 	DTemp1+2
.010a4a					_MT1_4:
.010a4a	06 08		asl $08				asl 	DTemp1
.010a4c	26 0a		rol $0a				rol 	DTemp1+2
.010a4e					_MT1_2
.010a4e	06 08		asl $08				asl 	DTemp1
.010a50	26 0a		rol $0a				rol 	DTemp1+2
.010a52	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010a53					Function_Str:
.010a53	20 89 04	jsr $010489			jsr 	ResetTypeString 			; returns a string.
.010a56	20 80 02	jsr $010280			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010a59	48		pha				pha 								; save YA on the stack
.010a5a	5a		phy				phy
.010a5b	20 15 09	jsr $010915			jsr 	VALGetBase 					; process , base (shared with STR$())
.010a5e	85 14		sta $14				sta 	DSignCount
.010a60	7a		ply				ply 								; YA is the number
.010a61	68		pla				pla
.010a62	da		phx				phx
.010a63	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010a65	20 6e 0a	jsr $010a6e			jsr 	ConvertToString 			; convert it to a string.
.010a68	fa		plx				plx 								; restore X
.010a69	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010a6b	74 10		stz $10,x			stz 	EXSValueH+0,x
.010a6d	60		rts				rts
.010a6e					ConvertToString:
.010a6e	da		phx				phx 								; save X
.010a6f	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010a71	84 26		sty $26				sty 	DTemp3+2
.010a73	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010a75	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.010a78	20 bf 04	jsr $0104bf			jsr 	StringTempAllocate 			; allocate space for return string.
.010a7b	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010a7d	10 15		bpl $010a94			bpl 	_CTSNotNegative
.010a7f	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.010a82	20 fc 0a	jsr $010afc			jsr 	CTSOutputA
.010a85	38		sec				sec 								; negate DTemp3
.010a86	a9 00 00	lda #$0000			lda 	#0
.010a89	e5 24		sbc $24				sbc 	DTemp3
.010a8b	85 24		sta $24				sta 	DTemp3
.010a8d	a9 00 00	lda #$0000			lda 	#0
.010a90	e5 26		sbc $26				sbc 	DTemp3+2
.010a92	85 26		sta $26				sta 	DTemp3+2
.010a94					_CTSNotNegative:
.010a94	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.010a97	48		pha				pha
.010a98	a9 00 00	lda #$0000			lda 	#0
.010a9b	48		pha				pha
.010a9c	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.010a9e	85 08		sta $08				sta 	DTemp1
.010aa0	64 0a		stz $0a				stz 	DTemp1+2
.010aa2					_CTSMultiplySubtractor:
.010aa2	38		sec				sec
.010aa3	a5 24		lda $24				lda 	DTemp3
.010aa5	e5 08		sbc $08				sbc 	DTemp1
.010aa7	a5 26		lda $26				lda 	DTemp3+2
.010aa9	e5 0a		sbc $0a				sbc 	DTemp1+2
.010aab	90 0d		bcc $010aba			bcc		_CTSScaledUp 				; if >= then scaled up.
.010aad	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010aaf	48		pha				pha
.010ab0	a5 0a		lda $0a				lda 	DTemp1+2
.010ab2	48		pha				pha
.010ab3	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010ab5	20 e7 09	jsr $0109e7			jsr 	MultiplyTemp1ByA
.010ab8	80 e8		bra $010aa2			bra 	_CTSMultiplySubtractor
.010aba					_CTSScaledUp:
.010aba	7a		ply				ply 								; YA contains the previous divider.
.010abb	68		pla				pla
.010abc	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010abf	d0 05		bne $010ac6			bne 	_CTSHasDigit
.010ac1	c9 01 00	cmp #$0001			cmp 	#1 							;
.010ac4	f0 20		beq $010ae6			beq 	_CTSExit
.010ac6					_CTSHasDigit:
.010ac6	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010ac8	84 0e		sty $0e				sty 	DTemp2+2
.010aca	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010acd					_CTSSubLoop:
.010acd	38		sec				sec 								; subtract subtractor from number
.010ace	a5 24		lda $24				lda 	DTemp3
.010ad0	e5 0c		sbc $0c				sbc 	DTemp2
.010ad2	a8		tay				tay 								; intermediate in Y
.010ad3	a5 26		lda $26				lda 	DTemp3+2
.010ad5	e5 0e		sbc $0e				sbc 	DTemp2+2
.010ad7	90 07		bcc $010ae0			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010ad9	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010adb	84 24		sty $24				sty 	DTemp3
.010add	e8		inx				inx 								; one more subtraction
.010ade	80 ed		bra $010acd			bra 	_CTSSubLoop 				; try it again.
.010ae0					_CTSFinishedSubtracting:
.010ae0	8a		txa				txa 								; convert to ASCII.
.010ae1	20 ef 0a	jsr $010aef			jsr 	CTSOutputHexDigit 			; write that out.
.010ae4	80 d4		bra $010aba			bra 	_CTSScaledUp
.010ae6					_CTSExit:
.010ae6	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010ae8	20 ef 0a	jsr $010aef			jsr 	CTSOutputHexDigit
.010aeb	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010aed	fa		plx				plx 								; restore X.
.010aee	60		rts				rts
.010aef					CTSOutputHexDigit:
.010aef	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010af2	90 04		bcc $010af8			bcc 	_CTSNotLetter
.010af4	18		clc				clc
.010af5	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010af8					_CTSNotLetter:
.010af8	18		clc				clc
.010af9	69 30 00	adc #$0030			adc 	#48
.010afc					CTSOutputA:
.010afc	5a		phy				phy 								; save Y, set Y to current pointer
.010afd	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010aff	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010b02	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010b04	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010b06	1a		inc a				inc 	a
.010b07	92 18		sta ($18)			sta 	(DStartTempString)
.010b09	c2 20		rep #$20			rep 	#$20
.010b0b	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010b0d	7a		ply				ply 								; restore Y and exit.
.010b0e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010b0f					Function_Let:
.010b0f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010b11	48		pha				pha
.010b12	20 e6 02	jsr $0102e6			jsr 	VariableFind 				; find the variable
.010b15	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010b17	b0 1c		bcs $010b35			bcs 	_FLetFound 					; skip if found.
.010b19	68		pla				pla 								; get and push the first token again.
.010b1a	48		pha				pha
.010b1b	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010b1e	d0 57		bne $010b77			bne 	_FLError					; arrays, so this causes an error.
.010b20	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010b22	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010b25	20 90 03	jsr $010390			jsr 	VariableCreate 				; create it.
.010b28	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010b2a					_FLSkipToken:
.010b2a	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010b2c	e6 06		inc $06				inc 	DCodePtr
.010b2e	e6 06		inc $06				inc 	DCodePtr
.010b30	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010b33	d0 f5		bne $010b2a			bne 	_FLSkipToken
.010b35					_FLetFound:
.010b35	68		pla				pla 								; get and save the first token.
.010b36	48		pha				pha
.010b37	a8		tay				tay 								; put it in Y
.010b38	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010b3b	f0 07		beq $010b44			beq 	_FLetNotArray
.010b3d	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010b3f	20 5d 03	jsr $01035d			jsr 	VariableSubscript			; index calculation
.010b42	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010b44					_FLetNotArray:
.010b44	7a		ply				ply 								; get the first token into Y
.010b45	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010b47	48		pha				pha
.010b48	5a		phy				phy 								; save the first token on the stack.
.010b49	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010b4c	20 35 04	jsr $010435			jsr 	ExpectToken
.010b4f	68		pla				pla 								; restore the first token.
.010b50	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010b53	d0 0f		bne $010b64			bne 	_FLetString 				; skip if string.
.010b55	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; get an integer
.010b58	7a		ply				ply 								; get address in Y
.010b59	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010b5b	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010b5e	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010b60	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010b63	60		rts				rts
.010b64					_FLetString:
.010b64	20 86 02	jsr $010286			jsr 	EvaluateString 				; get a string.
.010b67	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010b69	20 09 05	jsr $010509			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010b6c	7a		ply				ply 								; get address
.010b6d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010b70	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010b73	99 02 00	sta $0002,y			sta 	$0002,y
.010b76	60		rts				rts
.010b77					_FLError:
.010b77	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010b7a	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010b82	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010b8a					Function_PRINT:
.010b8a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010b8c	f0 33		beq $010bc1			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010b8e	c9 1b 32	cmp #$321b			cmp 	#colonTokenID 				; likewise if a colon.
.010b91	f0 2e		beq $010bc1			beq 	_FPRExitCR
.010b93	c9 1a 32	cmp #$321a			cmp 	#semicolonTokenID 			; semicolon, skip it
.010b96	f0 23		beq $010bbb			beq 	_FPRSkipLoop
.010b98	c9 1e 32	cmp #$321e			cmp 	#squoteTokenID 				; single quote is CR
.010b9b	f0 1b		beq $010bb8			beq 	_FPRNewLine
.010b9d	c9 19 32	cmp #$3219			cmp 	#commaTokenID 				; , is tab.
.010ba0	f0 11		beq $010bb3			beq 	_FPRTab
.010ba2					_FPRExpression:
.010ba2	20 59 01	jsr $010159			jsr 	Evaluate 					; evaluate a string or integer.
.010ba5	b0 06		bcs $010bad			bcs 	_FPRHaveString
.010ba7	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010baa	20 6e 0a	jsr $010a6e			jsr 	ConvertToString
.010bad					_FPRHaveString:
.010bad	a8		tay				tay 								; print the basic String.
.010bae	20 a5 04	jsr $0104a5			jsr 	PrintBASICString
.010bb1	80 d7		bra $010b8a			bra 	Function_Print 				; and go round again.
.010bb3					_FPRTab:
.010bb3	20 1b 11	jsr $01111b			jsr 	HWTab
.010bb6	80 03		bra $010bbb			bra 	_FPRSkipLoop
.010bb8					_FPRNewLine:
.010bb8	20 08 11	jsr $011108			jsr 	HWNewLine
.010bbb					_FPRSkipLoop:
.010bbb	e6 06		inc $06				inc 	DCodePtr
.010bbd	e6 06		inc $06				inc 	DCodePtr
.010bbf	80 c9		bra $010b8a			bra 	Function_Print
.010bc1					_FPRExitCR:
.010bc1	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010bc3	88		dey				dey
.010bc4	88		dey				dey
.010bc5	b9 00 00	lda $0000,y			lda 	$0000,y
.010bc8	c9 19 32	cmp #$3219			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010bcb	f0 08		beq $010bd5			beq 	_FPRExit
.010bcd	c9 1a 32	cmp #$321a			cmp 	#semicolonTokenID
.010bd0	f0 03		beq $010bd5			beq 	_FPRExit
.010bd2	20 08 11	jsr $011108			jsr 	HWNewLine 					; print a new line.
.010bd5					_FPRExit:
.010bd5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.010bd6					Function_IF:
.010bd6	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; check success.
.010bd9	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010bdb	05 08		ora $08				ora 	DTemp1
.010bdd	a8		tay				tay 								; success flag in Y.
.010bde	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010be0	c9 37 3a	cmp #$3a37			cmp 	#thenTokenID
.010be3	d0 32		bne $010c17			bne 	_FIFExtended 				; if so, go to the extended IF.
.010be5	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010be7	e6 06		inc $06				inc 	DCodePtr
.010be9	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010bec	f0 0f		beq $010bfd			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010bee	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010bf0	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010bf3	90 21		bcc $010c16			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010bf5	c9 00 c0	cmp #$c000			cmp 	#$C000
.010bf8	b0 1c		bcs $010c16			bcs 	_FIFContinue
.010bfa	4c 55 0d	jmp $010d55			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010bfd					_FIFEndOfLine:
.010bfd	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010bff	f0 15		beq $010c16			beq 	_FIFContinue 				; if done so, continue.
.010c01	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010c04	90 06		bcc $010c0c			bcc 	_FIFStringConstant
.010c06	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010c08	e6 06		inc $06				inc 	DCodePtr
.010c0a	80 f1		bra $010bfd			bra 	_FIFEndOfLine
.010c0c					_FIFStringConstant:
.010c0c	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010c0f	18		clc				clc
.010c10	65 06		adc $06				adc 	DCodePtr
.010c12	85 06		sta $06				sta 	DCodePtr
.010c14	80 e7		bra $010bfd			bra 	_FIFEndOfLine
.010c16					_FIFContinue:
.010c16	60		rts				rts
.010c17					_FIFExtended:
.010c17	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010c19	e6 2a		inc $2a				inc 	DStack
.010c1b	a9 33 3c	lda #$3c33			lda 	#ifTokenID
.010c1e	a6 2a		ldx $2a				ldx 	DStack
.010c20	95 00		sta $00,x			sta 	$00,x
.010c22	98		tya				tya 								; see if the test was passed.
.010c23	f0 01		beq $010c26			beq 	_FIXSkip 					; if zero then it has failed.
.010c25	60		rts				rts 								; test passed, so continue executing
.010c26					_FIXSkip:
.010c26	a9 30 3e	lda #$3e30			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010c29	a2 38 3a	ldx #$3a38			ldx 	#endifTokenID 				; at the same level.
.010c2c	20 8c 0c	jsr $010c8c			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010c2f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010c31	e6 06		inc $06				inc 	DCodePtr
.010c33	c9 38 3a	cmp #$3a38			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010c36	d0 04		bne $010c3c			bne 	_FIXNoThrow
.010c38	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010c3a	c6 2a		dec $2a				dec 	DStack
.010c3c					_FIXNoThrow:
.010c3c	60		rts				rts
.010c3d					Handler_ELSE:
.010c3d	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010c3f	b5 00		lda $00,x			lda 	$00,x
.010c41	c9 33 3c	cmp #$3c33			cmp 	#ifTokenID
.010c44	d0 12		bne $010c58			bne 	_HEBadStructure
.010c46	a9 38 3a	lda #$3a38			lda 	#endifTokenID 				; only searching one token.
.010c49	a2 00 00	ldx #$0000			ldx 	#$0000
.010c4c	20 8c 0c	jsr $010c8c			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010c4f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010c51	e6 06		inc $06				inc 	DCodePtr
.010c53	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010c55	c6 2a		dec $2a				dec 	DStack
.010c57	60		rts				rts
.010c58					_HEBadStructure:
.010c58	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010c5b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010c63	68 6f 75 74 20 49 66 00
.010c6b					Handler_ENDIF:
.010c6b	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010c6d	b5 00		lda $00,x			lda 	$00,x
.010c6f	c9 33 3c	cmp #$3c33			cmp 	#ifTokenID
.010c72	d0 05		bne $010c79			bne 	_HEIBadStructure
.010c74	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010c76	c6 2a		dec $2a				dec 	DStack
.010c78	60		rts				rts
.010c79					_HEIBadStructure:
.010c79	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010c7c	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010c84	68 6f 75 74 20 49 66 00
.010c8c					ScanForwardLevel:
.010c8c	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010c8e	86 0a		stx $0a				stx 	DTemp1+2
.010c90	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010c92	85 0c		sta $0c				sta 	DTemp2
.010c94	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010c97					_SFLLoop:
.010c97	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010c9a	d0 0d		bne $010ca9			bne 	_SFLNoCheck
.010c9c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010c9e	f0 09		beq $010ca9			beq 	_SFLNoCheck 				; don't check zero
.010ca0	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010ca2	f0 04		beq $010ca8			beq 	_SFLFound
.010ca4	c5 0a		cmp $0a				cmp 	DTemp1+2
.010ca6	d0 01		bne $010ca9			bne 	_SFLNoCheck
.010ca8					_SFLFound:
.010ca8	60		rts				rts
.010ca9					_SFLNoCheck:
.010ca9	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010cab	f0 4f		beq $010cfc			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010cad	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010cb0	90 40		bcc $010cf2			bcc 	_SFLSkipString 				; then handle that.
.010cb2	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010cb4	e6 06		inc $06				inc 	DCodePtr
.010cb6	a8		tay				tay 								; put token in Y temporarily.
.010cb7	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010cba	c9 00 20	cmp #$2000			cmp 	#$2000
.010cbd	d0 d8		bne $010c97			bne 	_SFLLoop
.010cbf	98		tya				tya 								; get the token back.
.010cc0	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010cc3	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010cc6	f0 cf		beq $010c97			beq 	_SFLLoop
.010cc8	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010ccb	90 ca		bcc $010c97			bcc 	_SFLLoop
.010ccd	e8		inx				inx 								; increment the level.
.010cce	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010cd1	f0 c4		beq $010c97			beq 	_SFLLoop
.010cd3	ca		dex				dex 								; decrement the level
.010cd4	ca		dex				dex 								; one overdoes the previous inx.
.010cd5	10 c0		bpl $010c97			bpl 	_SFLLoop 					; if gone -ve then error.
.010cd7					_SFLError:
.010cd7	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010cd9	85 22		sta $22				sta 	DLineNumber
.010cdb	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010cde	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010ce6	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010cf2					_SFLSkipString:
.010cf2	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010cf5	18		clc				clc
.010cf6	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010cf8	85 06		sta $06				sta 	DCodePtr
.010cfa	80 9b		bra $010c97			bra 	_SFLLoop 					; go round again.
.010cfc					_SFLNextLine:
.010cfc	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010cfe	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010d01	f0 d4		beq $010cd7			beq 	_SFLError 					; if zero, then there's no more code to search.
.010d03	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010d06	85 22		sta $22				sta 	DLineNumber
.010d08	18		clc				clc
.010d09	a5 06		lda $06				lda 	DCodePtr
.010d0b	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010d0e	85 06		sta $06				sta 	DCodePtr
.010d10	80 85		bra $010c97			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010d12					Function_ONGOTO:
.010d12	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; on what GOTO :)
.010d15	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010d18	d0 25		bne $010d3f			bne 	_FOGoFail
.010d1a	c9 00 00	cmp #$0000			cmp 	#0
.010d1d	f0 20		beq $010d3f			beq 	_FOGoFail 					; we start with index = 1
.010d1f	48		pha				pha 								; save count.
.010d20	a9 2c 3e	lda #$3e2c			lda 	#gotoTokenID 				; expect GOTO
.010d23	20 35 04	jsr $010435			jsr 	ExpectToken
.010d26	fa		plx				plx 								; put count in X.
.010d27					_FOGoLoop:
.010d27	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010d29	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010d2c	90 73		bcc $010da1			bcc 	FGOFail
.010d2e	c9 00 c0	cmp #$c000			cmp 	#$C000
.010d31	b0 6e		bcs $010da1			bcs 	FGOFail
.010d33	ca		dex				dex 								; subtract one, if done, call GOTO code
.010d34	f0 1f		beq $010d55			beq 	Function_GOTO
.010d36	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010d38	e6 06		inc $06				inc 	DCodePtr
.010d3a	20 58 04	jsr $010458			jsr 	ExpectComma 				; expect a comma
.010d3d	80 e8		bra $010d27			bra 	_FOGoLoop 					; and loop round.
.010d3f					_FOGoFail:
.010d3f	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010d42	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010d4a	47 6f 74 6f 20 76 61 6c 75 65 00
.010d55					Function_GOTO:
.010d55	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010d57	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010d5a	90 45		bcc $010da1			bcc 	FGOFail
.010d5c	c9 00 c0	cmp #$c000			cmp 	#$C000
.010d5f	b0 40		bcs $010da1			bcs 	FGOFail
.010d61	38		sec				sec 								; convert to 0-32767
.010d62	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010d65	aa		tax				tax
.010d66	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010d69	18		clc				clc
.010d6a	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010d6c	a8		tay				tay
.010d6d					_FGOSearch:
.010d6d	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010d70	f0 18		beq $010d8a			beq 	_FGOUnknown
.010d72	8a		txa				txa 								; does it match line number.
.010d73	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010d76	f0 08		beq $010d80			beq 	_FGOFound 					; yes, then found.
.010d78	98		tya				tya 								; no follow the link
.010d79	18		clc				clc
.010d7a	79 00 00	adc $0000,y			adc 	$0000,y
.010d7d	a8		tay				tay
.010d7e	80 ed		bra $010d6d			bra 	_FGOSearch
.010d80					_FGOFound:
.010d80	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010d82	98		tya				tya 								; Y + 4 is the code pointer.
.010d83	18		clc				clc
.010d84	69 04 00	adc #$0004			adc 	#4
.010d87	85 06		sta $06				sta 	DCodePtr
.010d89	60		rts				rts									; and continue
.010d8a					_FGOUnknown:
.010d8a	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010d8d	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010d95	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010da1					FGOFail:
.010da1	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010da4	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010dac	20 4e 75 6d 62 65 72 00
.010db4					Function_GOSUB:
.010db4	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010db6	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010db8	18		clc				clc
.010db9	69 02 00	adc #$0002			adc 	#2
.010dbc	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010dbe	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010dc0	95 04		sta $04,x			sta 	$04,x
.010dc2	a9 2d 3e	lda #$3e2d			lda 	#gosubTokenID 				; save gosub token at +6
.010dc5	95 06		sta $06,x			sta 	$06,x
.010dc7	8a		txa				txa 								; advance stack by 6.
.010dc8	18		clc				clc
.010dc9	69 06 00	adc #$0006			adc 	#6
.010dcc	85 2a		sta $2a				sta 	DStack
.010dce	80 85		bra $010d55			bra 	Function_GOTO 				; and do a GOTO.
.010dd0					Function_RETURN:
.010dd0	a6 2a		ldx $2a				ldx 	DStack
.010dd2	b5 00		lda $00,x			lda 	$00,x
.010dd4	c9 2d 3e	cmp #$3e2d			cmp 	#gosubTokenID 				; check top token.
.010dd7	d0 11		bne $010dea			bne 	_FRetFail
.010dd9	8a		txa				txa 								; unpick stack.
.010dda	38		sec				sec
.010ddb	e9 06 00	sbc #$0006			sbc 	#6
.010dde	85 2a		sta $2a				sta 	DStack
.010de0	aa		tax				tax
.010de1	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010de3	85 06		sta $06				sta 	DCodePtr
.010de5	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010de7	85 22		sta $22				sta 	DLineNumber
.010de9	60		rts				rts
.010dea					_FRetFail:
.010dea	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010ded	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010df5	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.010e02					Function_REPEAT:
.010e02	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010e04	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010e06	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010e08	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e0a	95 04		sta $04,x			sta 	$04,x
.010e0c	a9 31 3c	lda #$3c31			lda 	#repeatTokenID 				; save repeat token at +6
.010e0f	95 06		sta $06,x			sta 	$06,x
.010e11	8a		txa				txa 								; advance stack by 6.
.010e12	18		clc				clc
.010e13	69 06 00	adc #$0006			adc 	#6
.010e16	85 2a		sta $2a				sta 	DStack
.010e18	60		rts				rts
.010e19					Function_UNTIL:
.010e19	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010e1b	b5 00		lda $00,x			lda 	$00,x
.010e1d	c9 31 3c	cmp #$3c31			cmp 	#repeatTokenID
.010e20	d0 26		bne $010e48			bne 	_FUNFail
.010e22	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; .... until what.
.010e25	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010e28	d0 15		bne $010e3f			bne 	_FUNExit
.010e2a	c9 00 00	cmp #$0000			cmp 	#0
.010e2d	d0 10		bne $010e3f			bne 	_FUNExit
.010e2f	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010e31	38		sec				sec
.010e32	e9 06 00	sbc #$0006			sbc 	#6
.010e35	aa		tax				tax
.010e36	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010e38	85 06		sta $06				sta 	DCodePtr
.010e3a	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010e3c	85 22		sta $22				sta 	DLineNumber
.010e3e	60		rts				rts
.010e3f					_FUNExit:
.010e3f	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010e41	38		sec				sec
.010e42	e9 06 00	sbc #$0006			sbc 	#6
.010e45	85 2a		sta $2a				sta 	DStack
.010e47	60		rts				rts
.010e48					_FUNFail:
.010e48	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010e4b	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010e53	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.010e60					Function_WHILE:
.010e60	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.010e62	48		pha				pha 								; save on stack
.010e63	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; .... until what.
.010e66	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.010e69	d0 14		bne $010e7f			bne 	_FWHExecute
.010e6b	c9 00 00	cmp #$0000			cmp 	#0
.010e6e	d0 0f		bne $010e7f			bne 	_FWHExecute
.010e70	68		pla				pla 								; throw away current instruction
.010e71	a9 35 3a	lda #$3a35			lda 	#wendTokenID 				; skip to WEND
.010e74	a2 00 00	ldx #$0000			ldx 	#0
.010e77	20 8c 0c	jsr $010c8c			jsr 	ScanForwardLevel
.010e7a	e6 06		inc $06				inc 	DCodePtr 					; and skip over that
.010e7c	e6 06		inc $06				inc 	DCodePtr
.010e7e	60		rts				rts
.010e7f					_FWHExecute:
.010e7f	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010e81	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.010e82	3a		dec a				dec 	a
.010e83	3a		dec a				dec 	a
.010e84	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010e86	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e88	95 04		sta $04,x			sta 	$04,x
.010e8a	a9 32 3c	lda #$3c32			lda 	#whileTokenID 				; save while token at +6
.010e8d	95 06		sta $06,x			sta 	$06,x
.010e8f	8a		txa				txa 								; advance stack by 6.
.010e90	18		clc				clc
.010e91	69 06 00	adc #$0006			adc 	#6
.010e94	85 2a		sta $2a				sta 	DStack
.010e96	60		rts				rts
.010e97					Function_WEND:
.010e97	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.010e99	b5 00		lda $00,x			lda 	$00,x
.010e9b	c9 32 3c	cmp #$3c32			cmp 	#whileTokenID
.010e9e	d0 11		bne $010eb1			bne 	_FWEFail
.010ea0	8a		txa				txa 								; unpick stack and always loop back.
.010ea1	38		sec				sec
.010ea2	e9 06 00	sbc #$0006			sbc 	#6
.010ea5	85 2a		sta $2a				sta 	DStack
.010ea7	aa		tax				tax
.010ea8	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010eaa	85 06		sta $06				sta 	DCodePtr
.010eac	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010eae	85 22		sta $22				sta 	DLineNumber
.010eb0	60		rts				rts
.010eb1					_FWEFail:
.010eb1	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010eb4	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>010ebc	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010ec7					Function_END:
.010ec7	02 00		cop #$00			cop 	#0
.010ec9					Function_RUN:
.010ec9	20 21 0f	jsr $010f21			jsr 	Function_CLEAR 				; clear all variables.
.010ecc	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010ece	18		clc				clc
.010ecf	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010ed2					_FRun_NextLineNumber:
.010ed2	a8		tay				tay 								; put in Y
.010ed3	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010ed6	f0 ef		beq $010ec7			beq 	Function_END 				; if zero, off the end of the program
.010ed8	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010edb	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010edd	98		tya				tya 								; get address back
.010ede	18		clc				clc 								; skip over the link/line number
.010edf	69 04 00	adc #$0004			adc 	#4
.010ee2	85 06		sta $06				sta 	DCodePtr
.010ee4					_FRun_NextInstruction:
.010ee4	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010ee7	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010ee9	38		sec				sec
.010eea	e9 00 01	sbc #$0100			sbc 	#256
.010eed	85 16		sta $16				sta 	DTempStringPointer
.010eef	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010ef1	f0 28		beq $010f1b			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010ef3	c9 1b 32	cmp #$321b			cmp 	#colonTokenID 				; colon then skip
.010ef6	f0 18		beq $010f10			beq 	_FRun_Colon
.010ef8	a8		tay				tay 								; save in Y
.010ef9	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010efc	c9 00 20	cmp #$2000			cmp 	#$2000
.010eff	d0 15		bne $010f16			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010f01	98		tya				tya 								; get token back
.010f02	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010f05	0a		asl a				asl 	a 							; double it into X
.010f06	aa		tax				tax
.010f07	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010f09	e6 06		inc $06				inc 	DCodePtr
.010f0b	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010f0e	80 d4		bra $010ee4			bra 	_FRun_NextInstruction 		; do the following instruction.
.010f10					_FRun_Colon:
.010f10	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010f12	e6 06		inc $06				inc 	DCodePtr
.010f14	80 ce		bra $010ee4			bra 	_FRun_NextInstruction 		; do the following instruction.
.010f16					_FRun_TryLET:
.010f16	20 0f 0b	jsr $010b0f			jsr 	Function_LET 				; try as a LET.
.010f19	80 c9		bra $010ee4			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010f1b					_FRun_EndInstruction:
.010f1b	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010f1d	1a		inc a				inc 	a 							; go to link for next line
.010f1e	1a		inc a				inc 	a
.010f1f	80 b1		bra $010ed2			bra 	_FRun_NextLineNumber
.010f21					Function_CLEAR:
.010f21	20 2d 0f	jsr $010f2d			jsr 	ClearVariablesPointersAndStacks
.010f24	60		rts				rts
.010f25					Function_STOP:
.010f25	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010f28	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010f2d					ClearVariablesPointersAndStacks:
.010f2d	a9 80 00	lda #$0080			lda 	#BASStack
.010f30	85 2a		sta $2a				sta 	DStack
.010f32	64 80		stz $80				stz 	BASStack
.010f34	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010f37	a9 00 00	lda #$0000			lda 	#$0000
.010f3a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010f3c	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010f3e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010f41	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010f43	20 6a 0f	jsr $010f6a			jsr 	FindCodeEnd 				; find where the program ends.
.010f46	a8		tay				tay 								; Y points to it.
.010f47	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010f4a	99 02 00	sta $0002,y			sta 	$0002,y
.010f4d	99 04 00	sta $0004,y			sta 	$0004,y
.010f50	98		tya				tya 								; start of working memory up
.010f51	18		clc				clc
.010f52	69 06 00	adc #$0006			adc 	#6
.010f55	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010f58	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010f5a	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010f5d					_FCLoop:
.010f5d	a9 00 00	lda #$0000			lda 	#$0000
.010f60	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010f62	c8		iny				iny
.010f63	c8		iny				iny
.010f64	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010f67	d0 f4		bne $010f5d			bne 	_FCLoop
.010f69	60		rts				rts
.010f6a					FindCodeEnd:
.010f6a	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010f6d	18		clc				clc
.010f6e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010f70	a8		tay				tay
.010f71					_FCELoop:
.010f71	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010f74	f0 08		beq $010f7e			beq 	_FCEExit
.010f76	98		tya				tya 								; add offset
.010f77	18		clc				clc
.010f78	79 00 00	adc $0000,y			adc 	$0000,y
.010f7b	a8		tay				tay
.010f7c	80 f3		bra $010f71			bra 	_FCELoop
.010f7e					_FCEExit:
.010f7e	98		tya				tya 								; return in A
.010f7f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010f80					Function_Dim:
.010f80	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010f82	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010f85	f0 3b		beq $010fc2			beq		_FDIMNotArray 				; no, error.
.010f87	20 e6 02	jsr $0102e6			jsr 	VariableFind 				; try to find it.
.010f8a	b0 41		bcs $010fcd			bcs 	_FDIMExists 				; if it does, that's an error.
.010f8c	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010f8e	48		pha				pha
.010f8f	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010f91	48		pha				pha
.010f92					_FDIMSkip:
.010f92	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010f94	e6 06		inc $06				inc 	DCodePtr
.010f96	e6 06		inc $06				inc 	DCodePtr
.010f98	29 00 08	and #$0800			and 	#IDContMask
.010f9b	d0 f5		bne $010f92			bne 	_FDIMSkip
.010f9d	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; evaluate the size
.010fa0	20 4f 04	jsr $01044f			jsr 	ExpectRightBracket 			; check the ) following.
.010fa3	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010fa6	d0 3b		bne $010fe3			bne 	_FDIMSize
.010fa8	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010fab	f0 36		beq $010fe3			beq 	_FDIMSize
.010fad	7a		ply				ply 								; restore HashTablePtr
.010fae	84 20		sty $20				sty 	DHashTablePtr
.010fb0	7a		ply				ply 								; so now A is the high index, Y points to the token
.010fb1	20 90 03	jsr $010390			jsr 	VariableCreate 				; create the variable.
.010fb4	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010fb6	c9 19 32	cmp #$3219			cmp 	#commaTokenID 				; if not a comma, exit
.010fb9	d0 06		bne $010fc1			bne 	_FDIMExit
.010fbb	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010fbd	e6 06		inc $06				inc 	DCodePtr
.010fbf	80 bf		bra $010f80			bra 	Function_DIM 				; and do another
.010fc1					_FDIMExit:
.010fc1	60		rts				rts
.010fc2					_FDIMNotArray:
.010fc2	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010fc5	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010fcd					_FDIMExists:
.010fcd	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010fd0	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010fd8	65 64 69 6d 65 6e 73 69 6f 6e 00
.010fe3					_FDIMSize:
.010fe3	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>010fe6	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010fee	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010ff4					Function_COLLECT:
.010ff4	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010ff6	85 0c		sta $0c				sta 	DTemp2
.010ff8	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010ffb	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010ffd	85 0e		sta $0e				sta 	DTemp2+2
.010fff	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011001	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011003					_FCNextPass:
.011003	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011005	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011007	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011009	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.01100c	18		clc				clc
.01100d	65 02		adc $02				adc 	DBaseAddress
.01100f	a8		tay				tay 								; put in Y
.011010	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011013					_FCO1:
.011013	20 39 10	jsr $011039			jsr  	COLLECTScanVariable 		; scan that one.
.011016	c8		iny				iny 	 							; go to next pointer
.011017	c8		iny				iny
.011018	ca		dex				dex
.011019	d0 f8		bne $011013			bne 	_FCO1 						; until done all 16.
.01101b	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01101e					_FCO2:
.01101e	20 4d 10	jsr $01104d			jsr  	COLLECTScanArray 			; scan that one.
.011021	c8		iny				iny 	 							; go to next pointer
.011022	c8		iny				iny
.011023	ca		dex				dex
.011024	d0 f8		bne $01101e			bne 	_FCO2 						; until done all 16.
.011026	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011028	f0 0e		beq $011038			beq		_FCExit 					; if finished then exit.
.01102a	48		pha				pha 								; save the target address
.01102b	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01102d	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01102f	20 09 05	jsr $010509			jsr 	StringMakeConcrete 			; make the string concrete.
.011032	7a		ply				ply 								; restore the string.
.011033	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011036	80 cb		bra $011003			bra		_FCNextPass
.011038					_FCExit:
.011038	60		rts				rts
.011039					COLLECTScanVariable:
.011039	da		phx				phx 								; save XY
.01103a	5a		phy				phy
.01103b					_CSVLoop:
.01103b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01103e	f0 0a		beq $01104a			beq 	_CSVExit
.011040	a8		tay				tay 								; put new address into Y
.011041	18		clc				clc 								; which is four on.
.011042	69 04 00	adc #$0004			adc 	#4
.011045	20 6e 10	jsr $01106e			jsr 	COLLECTCheck
.011048	80 f1		bra $01103b			bra 	_CSVLoop
.01104a					_CSVExit:
.01104a	7a		ply				ply
.01104b	fa		plx				plx
.01104c	60		rts				rts
.01104d					COLLECTScanArray:
.01104d	da		phx				phx 								; save XY
.01104e	5a		phy				phy
.01104f					_CSALoop:
.01104f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011052	f0 17		beq $01106b			beq 	_CSAExit
.011054	a8		tay				tay 								; put new address in Y
.011055	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011058	aa		tax				tax
.011059	e8		inx				inx									; +1 as one more data element.
.01105a	98		tya				tya 								; point A to first element, at +6
.01105b	18		clc				clc
.01105c	69 06 00	adc #$0006			adc 	#6
.01105f					_CSADoAllStrings:
.01105f	20 6e 10	jsr $01106e			jsr 	COLLECTCheck 				; collect check the first.
.011062	1a		inc a				inc 	a 							; advance the pointer.
.011063	1a		inc a				inc 	a
.011064	1a		inc a				inc 	a
.011065	1a		inc a				inc 	a
.011066	ca		dex				dex
.011067	d0 f6		bne $01105f			bne 	_CSADoAllStrings 			; until all strings are done.
.011069	80 e4		bra $01104f			bra 	_CSALoop
.01106b					_CSAExit:
.01106b	7a		ply				ply
.01106c	fa		plx				plx
.01106d	60		rts				rts
.01106e					COLLECTCheck:
.01106e	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011070	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011072	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011074	90 0a		bcc $011080			bcc 	_COCExit
.011076	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011078	b0 06		bcs $011080			bcs 	_COCExit
.01107a	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01107c	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01107e	85 14		sta $14				sta 	DSignCount
.011080					_COCExit:
.011080	a5 0a		lda $0a				lda 	DTemp1+2
.011082	60		rts				rts
.011083	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011084					Function_ASSERT:
.011084	20 67 02	jsr $010267			jsr 	EvaluateInteger 			; something that returns an integer.
.011087	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011089	05 08		ora $08				ora 	Dtemp1
.01108b	f0 01		beq $01108e			beq 	_FAssFail
.01108d	60		rts				rts
.01108e					_FAssFail:
.01108e	20 ea 03	jsr $0103ea			jsr 	ErrorHandler 						; call error routine
>011091	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011099	61 69 6c 65 64 00
.01109f					Function_CLS:
.01109f	20 cb 10	jsr $0110cb			jsr 	HWClearScreen
.0110a2	60		rts				rts
.0110a3					Function_REM:
.0110a3	ea		nop				nop
.0110a4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0110a6	f0 0b		beq $0110b3			beq 	_FRemSyntax 				; if 0, syntax error
.0110a8	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0110ab	b0 06		bcs $0110b3			bcs 	_FRemSyntax
.0110ad	18		clc				clc 								; add to DCodePtr
.0110ae	65 06		adc $06				adc 	DCodePtr
.0110b0	85 06		sta $06				sta 	DCodePtr
.0110b2	60		rts				rts
.0110b3					_FRemSyntax:
.0110b3	82 6f f3	brl $010425			brl 	SyntaxError

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0110b6					SwitchBasicInstance:
.0110b6	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0110b8	20 cb 10	jsr $0110cb			jsr 	HWClearScreen 						; clear screen
.0110bb	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0110be	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0110c0	86 02		stx $02				stx		DBaseAddress
.0110c2	84 04		sty $04				sty 	DHighAddress
.0110c4	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0110c5	48		pha				pha 										; then copy it into B.
.0110c6	ab		plb				plb
.0110c7	ab		plb				plb
.0110c8	4c c9 0e	jmp $010ec9			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.0110cb					HWClearScreen:
.0110cb	48		pha				pha
.0110cc	da		phx				phx
.0110cd	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.0110d0	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.0110d3	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0110d7	ca		dex				dex
.0110d8	10 f6		bpl $0110d0			bpl 	_CS0
.0110da	64 28		stz $28				stz 	DCursor
.0110dc	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.0110df	8f 00 00 0f	sta $0f0000			sta 	$F0000
.0110e3	fa		plx				plx
.0110e4	68		pla				pla
.0110e5	60		rts				rts
.0110e6					HWPrintChar:
.0110e6	48		pha				pha
.0110e7	da		phx				phx
.0110e8	a6 28		ldx $28				ldx 	DCursor
.0110ea	e2 20		sep #$20			sep 	#$20
.0110ec	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0110f0	c2 20		rep #$20			rep 	#$20
.0110f2	e8		inx				inx
.0110f3	8a		txa				txa
.0110f4	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.0110f7	85 28		sta $28				sta 	DCursor
.0110f9	aa		tax				tax
.0110fa	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.0110fd	e2 20		sep #$20			sep 	#$20
.0110ff	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011103	c2 20		rep #$20			rep 	#$20
.011105	fa		plx				plx
.011106	68		pla				pla
.011107	60		rts				rts
.011108					HWNewLine:
.011108	48		pha				pha
.011109	da		phx				phx
.01110a	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01110d					HWMoveCursor:
.01110d	a9 20 00	lda #$0020			lda 	#32
.011110	20 e6 10	jsr $0110e6			jsr 	HWPrintChar
.011113	8a		txa				txa
.011114	25 28		and $28				and 	DCursor
.011116	d0 f5		bne $01110d			bne 	HWMoveCursor
.011118	fa		plx				plx
.011119	68		pla				pla
.01111a	60		rts				rts
.01111b	48		pha		HWTab:	pha
.01111c	da		phx				phx
.01111d	a2 07 00	ldx #$0007			ldx 	#7
.011120	80 eb		bra $01110d			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	56 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 05 00 18 c0 06 22
>024108	20 40 00 00 08 00 06 00 31 3c 00 00 16 00 0a 00
>024118	2b 3e 17 30 18 c0 1d 32 1a 32 04 00 01 20 1a 32
>024128	00 00 10 00 0c 00 18 c0 06 22 18 c0 0a 24 01 40
>024138	00 00 0e 00 0f 00 36 3a 18 c0 06 22 80 40 00 00
>024148	08 00 14 00 26 3e 00 00 00 00 ee ee ee ee 00 00
>024158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2025 times (32400 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
