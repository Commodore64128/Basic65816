
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 22 18:15:59 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 1b 1e 01	jmp $011e1b			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ac 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	f2 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	02 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	12 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	56 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	bd 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	22 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	9f 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	81 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	3c 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	3c 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	bd 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	c9 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	46 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	bd 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ce 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	e0 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	57 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	37 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	13 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	fd 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	7f 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	9f 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	91 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	c9 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	fd 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	33 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	4d 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	64 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	08 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	c6 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	47 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	de 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	70 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	5f 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	39 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	ac 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	ac 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	ac 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	ac 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	ac 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	ac 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	ac 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	ac 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	4f 1c					.word Command_REM              & $FFFF ; token $3e2c "rem"
>01005a	4a 12					.word Command_Let              & $FFFF ; token $3e2d "let"
>01005c	30 1c					.word Command_ASSERT           & $FFFF ; token $3e2e "assert"
>01005e	5c 1a					.word Command_END              & $FFFF ; token $3e2f "end"
>010060	5f 1a					.word Command_RUN              & $FFFF ; token $3e30 "run"
>010062	ee 1a					.word Command_STOP             & $FFFF ; token $3e31 "stop"
>010064	ea 1a					.word Command_CLEAR            & $FFFF ; token $3e32 "clear"
>010066	47 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	4b 1c					.word Command_CLS              & $FFFF ; token $3e34 "cls"
>01006a	fa 15					.word Command_PRINT            & $FFFF ; token $3e35 "print"
>01006c	ea 18					.word Command_GOTO             & $FFFF ; token $3e36 "goto"
>01006e	49 19					.word Command_GOSUB            & $FFFF ; token $3e37 "gosub"
>010070	65 19					.word Command_RETURN           & $FFFF ; token $3e38 "return"
>010072	a7 18					.word Command_ONGOTO           & $FFFF ; token $3e39 "on"
>010074	ad 16					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	ea 1b					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	02 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	16 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	c2 13					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	66 1c					.word Command_LINK             & $FFFF ; token $3e3f "link"
>010080	db 1a					.word Command_NEW              & $FFFF ; token $3e40 "new"
>010082	c0 12					.word Command_PROC             & $FFFF ; token $3e41 "proc"
>010084	73 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	a9 1c					.word Command_VDU              & $FFFF ; token $3e43 "vdu"
>010088	97 19					.word Command_REPEAT           & $FFFF ; token $3c44 "repeat"
>01008a	f5 19					.word Command_WHILE            & $FFFF ; token $3c45 "while"
>01008c	46 16					.word Command_IF               & $FFFF ; token $3c46 "if"
>01008e	82 17					.word Command_FOR              & $FFFF ; token $3c47 "for"
>010090	ac 05					.word IllegalToken             & $FFFF ; token $3c48 "defproc"
>010092	2c 1a					.word Command_WEND             & $FFFF ; token $3a49 "wend"
>010094	ae 19					.word Command_UNTIL            & $FFFF ; token $3a4a "until"
>010096	ac 05					.word IllegalToken             & $FFFF ; token $3a4b "then"
>010098	db 16					.word Handler_ENDIF            & $FFFF ; token $3a4c "endif"
>01009a	eb 17					.word Command_NEXT             & $FFFF ; token $3a4d "next"
>01009c	37 13					.word Command_ENDPROC          & $FFFF ; token $3a4e "endproc"
.01009e					TokenText:
>01009e	02 26					 .text $02,"&"        ; token $2001
>0100a0	02 7c					 .text $02,"|"        ; token $2002
>0100a2	02 5e					 .text $02,"^"        ; token $2003
>0100a4	12 3c					 .text $12,"<"        ; token $2204
>0100a6	12 3e					 .text $12,">"        ; token $2205
>0100a8	12 3d					 .text $12,"="        ; token $2206
>0100aa	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ad	13 3e 3d				 .text $13,">="       ; token $2208
>0100b0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b3	22 2b					 .text $22,"+"        ; token $240a
>0100b5	22 2d					 .text $22,"-"        ; token $240b
>0100b7	32 2a					 .text $32,"*"        ; token $260c
>0100b9	32 2f					 .text $32,"/"        ; token $260d
>0100bb	32 25					 .text $32,"%"        ; token $260e
>0100bd	33 3e 3e				 .text $33,">>"       ; token $260f
>0100c0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c3	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c8	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cd	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d2	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d7	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100dc	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e2	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e8	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100ed	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f2	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f8	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fe	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010104	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010c	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010114	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01011b	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010121	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010129	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010130	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010137	92 2c					 .text $92,","        ; token $3224
>010139	92 3b					 .text $92,";"        ; token $3225
>01013b	92 3a					 .text $92,":"        ; token $3226
>01013d	92 28					 .text $92,"("        ; token $3227
>01013f	92 29					 .text $92,")"        ; token $3228
>010141	92 27					 .text $92,"'"        ; token $3229
>010143	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010146	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>01014b	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014f	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010153	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>01015a	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015e	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010162	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010167	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016d	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010171	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010175	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>01017b	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010180	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010186	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018d	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010190	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010195	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01019a	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019f	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a4	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a9	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ae	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b2	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b7	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bd	f4 56 44 55				 .text $f4,"VDU"      ; token $3e43
>0101c1	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c44
>0101c8	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c45
>0101ce	e3 49 46				 .text $e3,"IF"       ; token $3c46
>0101d1	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c47
>0101d5	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c48
>0101dd	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a49
>0101e2	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a4a
>0101e8	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4b
>0101ed	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4c
>0101f3	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4d
>0101f8	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4e
>010200	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3e43					vduTokenID                       = $3e43
=$3c44					repeatTokenID                    = $3c44
=$3c45					whileTokenID                     = $3c45
=$3c46					ifTokenID                        = $3c46
=$3c47					forTokenID                       = $3c47
=$3c48					defprocTokenID                   = $3c48
=$3a49					wendTokenID                      = $3a49
=$3a4a					untilTokenID                     = $3a4a
=$3a4b					thenTokenID                      = $3a4b
=$3a4c					endifTokenID                     = $3a4c
=$3a4d					nextTokenID                      = $3a4d
=$3a4e					endprocTokenID                   = $3a4e

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=62					DArrayType = DPBaseAddress + 62 			; type of array being created.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010201					Evaluate:
.010201	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.010204	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010207					EvaluateLevel:
.010207	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.01020a	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01020c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01020e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010211	b0 79		bcs $01028c			bcs 	_ELVariable
.010213	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010216	b0 16		bcs $01022e			bcs 	_ELConstant
.010218	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01021b	90 7f		bcc $01029c			bcc 	_ELStringConstant
.01021d	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010220	90 03		bcc $010225			bcc 	_ELConstantShift
.010222	82 94 00	brl $0102b9			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010225					_ELConstantShift:
.010225	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010228	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01022a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01022c	e6 06		inc $06				inc 	DCodePtr
.01022e					_ELConstant:
.01022e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010230	38		sec				sec  								; shift it in the range 0-32767
.010231	e9 00 40	sbc #$4000			sbc 	#$4000
.010234	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010235	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010237	6a		ror a				ror 	a 							; rotate that into the constant value
.010238	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01023a	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01023c	95 20		sta $20,x			sta 	EXSValueH+0,x
.01023e	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010240	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010242	e6 06		inc $06				inc 	DCodePtr
.010244					_ELGotAtom:
.010244	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010246	a8		tay				tay 								; save in Y
.010247	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01024a	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01024d	d0 35		bne $010284			bne 	_ELExit
.01024f	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010256	98		tya				tya 								; get the keyword token back
.010257	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01025a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01025c	90 26		bcc $010284			bcc 	_ELExit 					; precedence too low, then exit.
.01025e	5a		phy				phy 								; save the binary operator on the stack
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	18		clc				clc 								; try the next level up
.010264	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010267	e8		inx				inx 								; calculate the RHS at the next stack level.
.010268	e8		inx				inx
.010269	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01026c	ca		dex				dex
.01026d	ca		dex				dex
.01026e	7a		ply				ply 								; get operator token back into Y
.01026f					_ELExecuteY:
.01026f	98		tya				tya
.010270	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010273	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010274	9b		txy				txy 								; save X in Y
.010275	aa		tax				tax 								; double keyword ID in X
.010276	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01027a	bb		tyx				tyx 								; restore X.
.01027b	8f 80 02 01	sta $010280			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01027f					_ELCallRoutine:
.01027f	20 7f 02	jsr $01027f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010282	80 c0		bra $010244			bra 	_ELGotAtom 					; go round operator level again.
.010284	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010286	0a		asl a				asl 	a
.010287	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010289	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01028b	60		rts				rts
.01028c					_ELVariable:
.01028c	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.01028e	20 4d 03	jsr $01034d			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010291	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010293	94 20		sty $20,x			sty 	EXSValueH+0,x
.010295	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010297	80 ab		bra $010244			bra 	_ELGotAtom
.010299					_ELSyntax
.010299	82 21 03	brl $0105bd			brl 	SyntaxError
.01029c					_ELStringConstant:
.01029c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01029f	f0 f8		beq $010299			beq 	_ELSyntax
.0102a1	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0102a3	1a		inc a				inc 	a
.0102a4	1a		inc a				inc 	a
.0102a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a9	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102ab	18		clc				clc 								; add to string constant.
.0102ac	65 06		adc $06				adc 	DCodePtr
.0102ae	85 06		sta $06				sta 	DCodePtr
.0102b0	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102b2	09 00 80	ora #$8000			ora 	#$8000
.0102b5	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b7	80 8b		bra $010244			bra 	_ELGotAtom
.0102b9					_ELUnaryKeyword:
.0102b9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102bb	a8		tay				tay 								; put the token in Y.
.0102bc	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102be	e6 06		inc $06				inc 	DCodePtr
.0102c0	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102c3	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c6	f0 a7		beq $01026f			beq 	_ELExecuteY					; go back and execute it
.0102c8	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102cb	d0 11		bne $0102de			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102cd	20 04 03	jsr $010304			jsr 	EvaluateNext 				; evaluate the expression
.0102d0	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102d3					_ELCopy:
.0102d3	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102d5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d7	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102db	82 66 ff	brl $010244			brl 	_ELGotAtom 					; and continue.
.0102de					_ELUnaryOperator:
.0102de	5a		phy				phy 								; save the operator on the stack.
.0102df	e8		inx				inx 								; this is like evaluate next
.0102e0	e8		inx				inx
.0102e1	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102e4	20 07 02	jsr $010207			jsr 	EvaluateLevel
.0102e7	ca		dex				dex 								; unwind the stack.
.0102e8	ca		dex				dex
.0102e9	68		pla				pla 								; restore the unary operator.
.0102ea	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102ed	f0 03		beq $0102f2			beq 	_ELMinus
.0102ef	4c bd 05	jmp $0105bd			jmp 	SyntaxError
.0102f2					_ELMinus:
.0102f2	38		sec				sec 								; do the negation calculation.
.0102f3	a9 00 00	lda #$0000			lda 	#0
.0102f6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102fa	a9 00 00	lda #$0000			lda 	#0
.0102fd	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102ff	95 20		sta $20,x			sta 	EXSValueH+0,x
.010301	82 40 ff	brl $010244			brl 	_ELGotAtom					; and continue.
.010304					EvaluateNext:
.010304	e8		inx				inx
.010305	e8		inx				inx
.010306	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010309	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01030c	ca		dex				dex
.01030d	ca		dex				dex
.01030e	60		rts				rts
.01030f					EvaluateInteger:
.01030f	20 01 02	jsr $010201			jsr 	Evaluate
.010312	b0 01		bcs $010315			bcs 	EIType
.010314	60		rts				rts
.010315					EIType:
.010315	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010318	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010320	78 70 65 63 74 65 64 00
.010328					EvaluateNextInteger:
.010328	20 04 03	jsr $010304			jsr 	EvaluateNext
.01032b	b0 e8		bcs $010315			bcs 	EIType
.01032d	60		rts				rts
.01032e					EvaluateString:
.01032e	20 01 02	jsr $010201			jsr 	Evaluate
.010331	90 01		bcc $010334			bcc 	ESType
.010333	60		rts				rts
.010334					ESType:
.010334	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010337	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01033f	78 70 65 63 74 65 64 00
.010347					EvaluateNextString:
.010347	20 04 03	jsr $010304			jsr 	EvaluateNext
.01034a	90 e8		bcc $010334			bcc 	ESType
.01034c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01034d					VariableAccessExpression:
.01034d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01034f	48		pha				pha
.010350	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find the variables
.010353	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010355	90 31		bcc $010388			bcc 	_VANError 					; not found, so report an error.
.010357	68		pla				pla 								; get and save that first token
.010358	48		pha				pha 								; we use it for typing.
.010359	a8		tay				tay 								; put first token in Y.
.01035a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01035d	f0 07		beq $010366			beq 	_VANNotArray
.01035f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010361	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.010364	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010366					_VANNotArray:
.010366	68		pla				pla 								; get the token back.
.010367	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01036a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01036d	f0 0a		beq $010379			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036f	18		clc				clc 								; returning a number, read high data word
.010370	a0 02 00	ldy #$0002			ldy 	#2
.010373	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010375	a8		tay				tay 								; put A into Y (this is the high byte)
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010378	60		rts				rts
.010379					_VANIsString:
.010379	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.01037c	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.01037e	d0 06		bne $010386			bne 	_VANNotEmptyString
.010380	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.010383	18		clc				clc
.010384	65 02		adc $02				adc 	DBaseAddress
.010386					_VANNotEmptyString:
.010386	38		sec				sec
.010387	60		rts				rts
.010388					_VANError:
.010388	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01038b	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010393	20 75 6e 6b 6e 6f 77 6e 00
.01039c					VariableFind:
.01039c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01039e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a1	90 5c		bcc $0103ff			bcc 	_VFError
.0103a3	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a6	b0 11		bcs $0103b9			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a8	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103ab	3a		dec a				dec 	a 							; now 0-25
.0103ac	0a		asl a				asl 	a 							; x 4 and clear carry
.0103ad	0a		asl a				asl 	a
.0103ae	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b1	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b3	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103b5	e6 06		inc $06				inc 	DCodePtr
.0103b7	38		sec				sec 								; return with carry set.
.0103b8	60		rts				rts
.0103b9					_VFSlowVariable:
.0103b9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103bb	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103be	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103bf	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103c0	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c3	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103c5	85 08		sta $08				sta 	DTemp1
.0103c7	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c9	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103cc	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103cd	65 08		adc $08				adc 	DTemp1
.0103cf	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d3					_VFNext:
.0103d3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103d5	f0 26		beq $0103fd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d9	a8		tay				tay 								; read the address of the name at $0002,y
.0103da	b9 02 00	lda $0002,y			lda 	$0002,y
.0103dd	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103df	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103e2					_VFCompare:
.0103e2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103e4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e6	d0 eb		bne $0103d3			bne 	_VFNext 					; if not, go to the next one.
.0103e8	c8		iny				iny 								; advance token pointer
.0103e9	c8		iny				iny
.0103ea	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103ed	d0 f3		bne $0103e2			bne 	_VFCompare
.0103ef	98		tya				tya 								; this is the length of the word.
.0103f0	18		clc				clc 								; so we add it to the code pointer
.0103f1	65 06		adc $06				adc 	DCodePtr
.0103f3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103f5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f7	18		clc				clc 								; four on is the actual data
.0103f8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103fb	38		sec				sec 								; return with CS indicating success
.0103fc	60		rts				rts
.0103fd					_VFFail:
.0103fd	18		clc				clc
.0103fe	60		rts				rts
.0103ff					_VFError:
.0103ff	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010402	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01040a	76 61 72 69 61 62 6c 65 00
.010413					VariableSubscript:
.010413	5a		phy				phy
.010414	a8		tay				tay 								; put the link pointer into Y
.010415	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link, this is the size word.
.010418	48		pha				pha		 							; save variable address on stack.
.010419	20 28 03	jsr $010328			jsr		EvaluateNextInteger 		; get the subscript
.01041c	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; skip right bracket.
.01041f	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010422	d0 14		bne $010438			bne 	_VANSubscript
.010424	7a		ply				ply 								; start of array memory block.
.010425	d9 00 00	cmp $0000,y			cmp 	$0000,y						; the max index is at the start, so check against that.
.010428	f0 02		beq $01042c			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01042a	b0 0c		bcs $010438			bcs 	_VANSubscript
.01042c					_VANSubOkay:
.01042c	0a		asl a				asl 	a 							; double lsword
.01042d	0a		asl a				asl 	a 							; and again, also clears carry.
.01042e	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010430	98		tya				tya 								; restore DVariablePtr
.010431	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010432	1a		inc a				inc 	a
.010433	18		clc				clc
.010434	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010436	7a		ply				ply
.010437	60		rts				rts
.010438					_VANSubscript:
.010438	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01043b	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010443	79 20 53 75 62 73 63 72 69 70 74 00
.01044f					VariableCreate:
.01044f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010452	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010454	48		pha				pha 								; save it
.010455	18		clc				clc
.010456	69 08 00	adc #$0008			adc 	#8
.010459	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01045b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; check allocation.
.01045e	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.010460	b0 38		bcs $01049a			bcs 	_VCOutOfMemory
.010462	7a		ply				ply 								; restore new variable address to Y.
.010463	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.010466	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4..+7 is zeroed.
.010469	99 06 00	sta $0006,y			sta 	$0006,y
.01046c	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01046e	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010471	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010474	18		clc				clc
.010475	65 02		adc $02				adc 	DBaseAddress
.010477	85 08		sta $08				sta 	DTemp1
.010479	a5 06		lda $06				lda 	DCodePtr 					; get the address of the token.
.01047b	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.01047d	b0 03		bcs $010482			bcs 	_VCDontClone 				; because the variable being created has its identifier
.01047f	20 9d 04	jsr $01049d			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010482					_VCDontClone:
.010482	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010485	98		tya				tya 								; update the head link
.010486	92 20		sta ($20)			sta 	(DHashTablePtr)
.010488	18		clc				clc 								; advance pointer to the data bit.
.010489	69 04 00	adc #$0004			adc 	#4
.01048c	48		pha				pha 								; save on stack.
.01048d					_VCSkipToken:
.01048d	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01048f	e6 06		inc $06				inc 	DCodePtr
.010491	e6 06		inc $06				inc 	DCodePtr
.010493	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010496	d0 f5		bne $01048d			bne 	_VCSkipToken
.010498	68		pla				pla 								; restore data address
.010499	60		rts				rts 								; and done.
.01049a					_VCOutOfMemory:
.01049a	82 30 01	brl $0105cd			brl 	OutOfMemoryError
.01049d					VCCloneIdentifier:
.01049d	da		phx				phx 								; save XY
.01049e	5a		phy				phy
.01049f	aa		tax				tax 								; identifier address in Y.
.0104a0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a5	48		pha				pha
.0104a6					_VCCloneLoop:
.0104a6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ab	48		pha				pha 								; save on stack
.0104ac	1a		inc a				inc 	a 							; space for one token.
.0104ad	1a		inc a				inc 	a
.0104ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b0	7a		ply				ply 								; address of word in Y
.0104b1	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b4	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b7	e8		inx				inx 								; advance the token pointer
.0104b8	e8		inx				inx
.0104b9	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104bc	d0 e8		bne $0104a6			bne 	_VCCloneLoop
.0104be	68		pla				pla 								; restore start address
.0104bf	7a		ply				ply 								; and the others
.0104c0	fa		plx				plx
.0104c1	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/editline.asm

.0104c2					LineDelete:
.0104c2	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c3	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c5	18		clc				clc
.0104c6	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c9	a8		tay				tay
.0104ca					_LDLoop:
.0104ca	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104cd	f0 2d		beq $0104fc			beq 	_LDExit						; exit if zero ; line does not exist
.0104cf	8a		txa				txa 								; found a match
.0104d0	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d3	f0 08		beq $0104dd			beq		_LDFound
.0104d5	98		tya				tya 								; follow the link.
.0104d6	18		clc				clc
.0104d7	79 00 00	adc $0000,y			adc 	$0000,y
.0104da	a8		tay				tay
.0104db	80 ed		bra $0104ca			bra 	_LDLoop
.0104dd					_LDFound:
.0104dd	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104df	98		tya				tya 								; follow link to next.
.0104e0	18		clc				clc
.0104e1	79 00 00	adc $0000,y			adc 	$0000,y
.0104e4	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e6	20 31 1b	jsr $011b31			jsr 	FindCodeEnd 				; find the end of the code.
.0104e9	38		sec				sec
.0104ea	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104ec	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104ed	1a		inc a				inc 	a
.0104ee	aa		tax				tax
.0104ef	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104f2	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f4	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f6	c8		iny				iny
.0104f7	c8		iny				iny
.0104f8	ca		dex				dex
.0104f9	ca		dex				dex
.0104fa	d0 f6		bne $0104f2			bne 	_LDCopy
.0104fc					_LDExit:
.0104fc	60		rts				rts
.0104fd					LineInsert:
.0104fd	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104ff	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010501	a0 00 00	ldy #$0000			ldy 	#0
.010504					_LIFindLength:
.010504	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010506	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010509	f0 10		beq $01051b			beq 	_LIFindEnd
.01050b	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050e	90 04		bcc $010514			bcc 	_LIQString
.010510	c8		iny				iny 								; otherwise just skip it.
.010511	c8		iny				iny
.010512	80 f0		bra $010504			bra 	_LIFindLength
.010514					_LIQString:
.010514	98		tya				tya 								; skip quoted strings
.010515	18		clc				clc
.010516	71 08		adc ($08),y			adc 	(DTemp1),y
.010518	a8		tay				tay
.010519	80 e9		bra $010504			bra 	_LIFindLength
.01051b					_LIFindEnd:
.01051b	98		tya				tya 								; the tokens in the line
.01051c	18		clc				clc
.01051d	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010520	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010522	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010525	18		clc				clc
.010526	65 02		adc $02				adc 	DBaseAddress
.010528	a8		tay				tay
.010529					_LIFindInsertPoint:
.010529	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01052c	f0 0f		beq $01053d			beq		_LIFoundInsertPoint
.01052e	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010531	c5 0c		cmp $0c				cmp 	DTemp2
.010533	b0 08		bcs $01053d			bcs 	_LIFoundInsertPoint
.010535	98		tya				tya 								; if < go to the next line.
.010536	18		clc				clc
.010537	79 00 00	adc $0000,y			adc 	$0000,y
.01053a	a8		tay				tay
.01053b	80 ec		bra $010529			bra 	_LIFindInsertPoint
.01053d					_LIFoundInsertPoint:
.01053d	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053f	20 31 1b	jsr $011b31			jsr 	FindCodeEnd 				; get the end of the code.
.010542	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010544	18		clc				clc
.010545	65 24		adc $24				adc 	DTemp3
.010547	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010549					_LICopyMove:
.010549	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01054b	92 34		sta ($34)			sta 	(DTemp4+2)
.01054d	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054f	c5 36		cmp $36				cmp 	DTemp5
.010551	f0 0a		beq $01055d			beq 	_LICopyMoveOver
.010553	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010555	c6 32		dec $32				dec 	DTemp4
.010557	c6 34		dec $34				dec 	DTemp4+2
.010559	c6 34		dec $34				dec 	DTemp4+2
.01055b	80 ec		bra $010549			bra 	_LICopyMove
.01055d					_LICopyMoveOver:
.01055d	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055f	92 36		sta ($36)			sta 	(DTemp5)
.010561	a0 02 00	ldy #$0002			ldy 	#2
.010564	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010566	91 36		sta ($36),y			sta 	(DTemp5),y
.010568	a0 04 00	ldy #$0004			ldy 	#4
.01056b					_LICopyTokens:
.01056b	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056d	91 36		sta ($36),y			sta 	(DTemp5),y
.01056f	c8		iny				iny
.010570	c8		iny				iny
.010571	e6 08		inc $08				inc 	DTemp1
.010573	e6 08		inc $08				inc 	DTemp1
.010575	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010577	c6 24		dec $24				dec 	DTemp3
.010579	a5 24		lda $24				lda 	DTemp3
.01057b	c9 04 00	cmp #$0004			cmp 	#4
.01057e	d0 eb		bne $01056b			bne 	_LICopyTokens
.010580	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010581					ErrorHandler:
.010581	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010583	fa		plx				plx 								; address of error message -1
.010584	e8		inx				inx 								; error message.
.010585	20 3a 06	jsr $01063a			jsr 	PrintROMMessage 			; print message in ROM
.010588	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01058a	f0 15		beq $0105a1			beq 	_EHEndMessage
.01058c	a2 a7 05	ldx #$05a7			ldx 	#_EHAt & $FFFF 				; print " at "
.01058f	20 3a 06	jsr $01063a			jsr 	PrintROMMessage
.010592	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010594	a0 00 00	ldy #$0000			ldy 	#0
.010597	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01059a	20 ba 10	jsr $0110ba			jsr 	ConvertToString 			; convert and print it.
.01059d	a8		tay				tay
.01059e	20 58 06	jsr $010658			jsr 	PrintBASICString
.0105a1					_EHEndMessage:
.0105a1	20 41 1d	jsr $011d41			jsr 	HWNewLine
.0105a4	4c 45 1e	jmp $011e45			jmp 	NextCommand 				; get next command.
>0105a7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105ac					IllegalToken:
.0105ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105af	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b7	54 6f 6b 65 6e 00
.0105bd					SyntaxError:
.0105bd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105c0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c8	72 72 6f 72 00
.0105cd					OutOfMemoryError:
.0105cd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105d0	4f 75 74 20 6f 66 20 6d				.text 	"Out of memory",$00 								; with this message
>0105d8	65 6d 6f 72 79 00
.0105de					ExpectToken:
.0105de	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105e0	d0 05		bne $0105e7			bne 	_CTKError					; error if not
.0105e2	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105e4	e6 06		inc $06				inc 	DCodePtr
.0105e6	60		rts				rts
.0105e7					_CTKError:
.0105e7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105ea	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105f2	74 6f 6b 65 6e 00
.0105f8					ExpectRightBracket:
.0105f8	48		pha				pha
.0105f9	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105fc	20 de 05	jsr $0105de			jsr 	ExpectToken
.0105ff	68		pla				pla
.010600	60		rts				rts
.010601					ExpectComma:
.010601	48		pha				pha
.010602	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010605	20 de 05	jsr $0105de			jsr 	ExpectToken
.010608	68		pla				pla
.010609	60		rts				rts
.01060a					CheckBothNumeric:
.01060a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01060c	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01060e	30 01		bmi $010611			bmi 	_CBNFail 					; need to both be zero in bit 15
.010610	60		rts				rts
.010611					_CBNFail:
.010611	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010614	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01061c	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.01062a					ResetTypeInteger:
.01062a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01062c	29 ff 7f	and #$7fff			and 	#$7FFF
.01062f	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010631	60		rts				rts
.010632					ResetTypeString:
.010632	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010634	09 00 80	ora #$8000			ora 	#$8000
.010637	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010639	60		rts				rts
.01063a					PrintROMMessage:
.01063a	48		pha				pha
.01063b	da		phx				phx
.01063c					_PRMLoop:
.01063c	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010640	29 ff 00	and #$00ff			and 	#$00FF
.010643	f0 10		beq $010655			beq 	_PRMExit
.010645	c9 0d 00	cmp #$000d			cmp 	#13
.010648	d0 05		bne $01064f			bne 	_PRMChar
.01064a	20 41 1d	jsr $011d41			jsr 	HWNewLine
.01064d	80 03		bra $010652			bra 	_PRMNext
.01064f					_PRMChar:
.01064f	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar
.010652					_PRMNext:
.010652	e8		inx				inx
.010653	80 e7		bra $01063c			bra 	_PRMLoop
.010655					_PRMExit:
.010655	fa		plx				plx
.010656	68		pla				pla
.010657	60		rts				rts
.010658					PrintBASICString:
.010658	48		pha				pha
.010659	da		phx				phx
.01065a	5a		phy				phy
.01065b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01065e	29 ff 00	and #$00ff			and 	#$00FF
.010661	f0 0b		beq $01066e			beq 	_PBSExit 					; null string
.010663	aa		tax				tax
.010664					_PBSLoop:
.010664	c8		iny				iny
.010665	b9 00 00	lda $0000,y			lda 	$0000,y
.010668	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar
.01066b	ca		dex				dex
.01066c	d0 f6		bne $010664			bne 	_PBSLoop
.01066e					_PBSExit:
.01066e	7a		ply				ply
.01066f	fa		plx				plx
.010670	68		pla				pla
.010671	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringconcrete.asm

.010672					StringResetPermanent:
.010672	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010674	a8		tay				tay
.010675	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.010678	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01067a	60		rts				rts
.01067b					StringAssign:
.01067b	da		phx				phx 								; save X
.01067c	aa		tax				tax 								; new string to X.
.01067d	b9 00 00	lda $0000,y			lda 	$0000,y 					; does the string have an address yet.
.010680	f0 41		beq $0106c3			beq 	_SAAllocate 				; if not , allocate space for it and copy the string.
.010682	5a		phy				phy
.010683	b9 00 00	lda $0000,y			lda 	$0000,y 					; compare calculate saved address - high memory pointer
.010686	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.010688	a8		tay				tay 								; read the max available length of the old string
.010689	88		dey				dey  								; CC still contains first allocation check
.01068a	b9 00 00	lda $0000,y			lda 	$0000,y
.01068d	7a		ply				ply 								; restore Y
.01068e	90 33		bcc $0106c3			bcc 	_SAAllocate					; if < high memory pointer, first allocation.
.010690	29 ff 00	and #$00ff			and 	#$00FF 						; max length of old string
.010693	e2 20		sep #$20			sep 	#$20
.010695	dd 00 00	cmp $0000,x			cmp 	@w$0000,x 					; compare against length of new string
.010698	c2 20		rep #$20			rep 	#$20
.01069a	b0 5a		bcs $0106f6			bcs 	_SACopyString 				; just copy it in if old max length >= new
.01069c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the address of the string.
.01069f	3a		dec a				dec 	a 							; if bottom, compare the previous byte address
.0106a0	5a		phy				phy 								; which is the max length.
.0106a1	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106a4	51 02		eor ($02),y			eor 	(DBaseAddress),y
.0106a6	7a		ply				ply
.0106a7	09 00 00	ora #$0000			ora 	#$0000 						; if not, then allocate memory.
.0106aa	d0 17		bne $0106c3			bne 	_SAAllocate
.0106ac	5a		phy				phy
.0106ad	b9 00 00	lda $0000,y			lda 	$0000,y 					; address of old string
.0106b0	a8		tay				tay 								; to Y
.0106b1	88		dey				dey 								; get maximum length.
.0106b2	b9 00 00	lda $0000,y			lda 	$0000,y
.0106b5	29 ff 00	and #$00ff			and 	#$00FF
.0106b8	1a		inc a				inc 	a 							; add 2 (string,max)
.0106b9	1a		inc a				inc 	a
.0106ba	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; return memory back
.0106bd	18		clc				clc
.0106be	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106c0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106c2	7a		ply				ply
.0106c3					_SAAllocate:
.0106c3	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get the length of the string
.0106c6	29 ff 00	and #$00ff			and 	#$00FF
.0106c9	18		clc				clc
.0106ca	69 08 00	adc #$0008			adc 	#8 							; allocate extra space if needed.
.0106cd	c9 ff 00	cmp #$00ff			cmp 	#255 						; can't be larger than this.
.0106d0	90 03		bcc $0106d5			bcc 	_SASizeOkay
.0106d2	a9 ff 00	lda #$00ff			lda 	#255
.0106d5					_SASizeOkay:
.0106d5	5a		phy				phy 								; push [string] on the stack.
.0106d6	48		pha				pha 								; push largest string size on the stack.
.0106d7	1a		inc a				inc 	a  							; one more for the string size byte
.0106d8	1a		inc a				inc 	a 							; one more for the maximum size byte
.0106d9	49 ff ff	eor #$ffff			eor 	#$FFFF 						; subtract from the high memory pointer
.0106dc	38		sec				sec
.0106dd	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106e0	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106e2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106e4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; out of memory ? - if below the lowmemorypointer
.0106e7	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.0106e9	90 29		bcc $010714			bcc 	_SAMemory
.0106eb	a8		tay				tay 								; address of start of space in Y.
.0106ec	68		pla				pla 								; restore largest string size and save it
.0106ed	99 00 00	sta $0000,y			sta 	@w$0000,y 					; doesn't matter it's a word.
.0106f0	c8		iny				iny 								; Y now points to the first byte of the string we'll copy
.0106f1	98		tya				tya 								; in A now
.0106f2	7a		ply				ply 								; Y is the address of the variable pointer.
.0106f3	99 00 00	sta $0000,y			sta 	@w$0000,y 					; make that pointer the first byte
.0106f6					_SACopyString
.0106f6	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get length
.0106f9	29 ff 00	and #$00ff			and 	#$00FF
.0106fc	85 08		sta $08				sta 	DTemp1 						; save it.
.0106fe	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; Y now contains the actual address of the string
.010701	a8		tay				tay
.010702					_SACopyStringLoop:
.010702	e2 20		sep #$20			sep 	#$20
.010704	bd 00 00	lda $0000,x			lda 	@w$0000,x
.010707	99 00 00	sta $0000,y			sta 	@w$0000,y
.01070a	c2 20		rep #$20			rep 	#$20
.01070c	e8		inx				inx
.01070d	c8		iny				iny
.01070e	c6 08		dec $08				dec 	DTemp1
.010710	10 f0		bpl $010702			bpl 	_SACopyStringLoop
.010712	fa		plx				plx 								; restore X
.010713	60		rts				rts
.010714					_SAMemory:
.010714	82 b6 fe	brl $0105cd			brl 	OutOfMemoryError

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringtemp.asm

.010717					StringTempAllocate:
.010717	48		pha				pha
.010718	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01071a	d0 09		bne $010725			bne 	_STANoReset
.01071c	5a		phy				phy 								; reset the temp string pointer.
.01071d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010720	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010722	85 16		sta $16				sta 	DTempStringPointer
.010724	7a		ply				ply
.010725					_STANoReset:
.010725	68		pla				pla 								; get length.
.010726	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010729	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01072c	18		clc				clc 								; this adds one, for the length.
.01072d	65 16		adc $16				adc 	DTempStringPointer
.01072f	85 16		sta $16				sta 	DTempStringPointer
.010731	48		pha				pha 								; save start address
.010732	a9 00 00	lda #$0000			lda 	#$0000
.010735	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010737	92 16		sta ($16)			sta		(DTempStringPointer)
.010739	c2 20		rep #$20			rep 	#$20
.01073b	68		pla				pla 								; restore start address
.01073c	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01073e	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010740	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010742	60		rts				rts
.010743					StringWriteCharacter:
.010743	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010745	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010747	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010749	1a		inc a				inc 	a
.01074a	92 18		sta ($18)			sta 	(DStartTempString)
.01074c	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01074e	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010750	60		rts				rts
.010751					StringCreateCopy:
.010751	a8		tay				tay 								; put pointer to string in Y
.010752	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010755	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010758	f0 17		beq $010771			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01075a	da		phx				phx 								; save X and put the character count in X
.01075b	aa		tax				tax
.01075c					_SCCCopy:
.01075c	c8		iny				iny 								; advance and read (first time skips length)
.01075d	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01075f	b9 00 00	lda $0000,y			lda 	$0000,y
.010762	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010764	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010766	1a		inc a				inc 	a
.010767	92 18		sta ($18)			sta 	(DStartTempString)
.010769	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01076b	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01076d	ca		dex				dex 								; do X times
.01076e	d0 ec		bne $01075c			bne 	_SCCCopy
.010770	fa		plx				plx
.010771					_SCCExit:
.010771	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.010772					Tokenise:
.010772	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010774	84 0a		sty $0a				sty 	DTemp1+2
.010776	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010779	18		clc				clc
.01077a	65 02		adc $02				adc 	DBaseAddress
.01077c	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01077e	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.010781	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.010784					_TOKCap:
.010784	c8		iny				iny 								; go to next
.010785	b7 08		lda [$08],y			lda 	[DTemp1],y
.010787	29 ff 00	and #$00ff			and 	#$00FF
.01078a	f0 22		beq $0107ae			beq 	_TOKEndCap
.01078c	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.01078f	d0 01		bne $010792			bne 	_TOKNotQuote
.010791	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.010792					_TOKNotQuote:
.010792	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.010795	90 ed		bcc $010784			bcc 	_TOKCap
.010797	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01079a	b0 e8		bcs $010784			bcs 	_TOKCap
.01079c	8a		txa				txa 								; check if in quotes
.01079d	4a		lsr a				lsr 	a
.01079e	b0 e4		bcs $010784			bcs 	_TOKCap
.0107a0	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107a2	38		sec				sec
.0107a3	e9 20 00	sbc #$0020			sbc 	#32
.0107a6	e2 20		sep #$20			sep 	#$20
.0107a8	97 08		sta [$08],y			sta 	[DTemp1],y
.0107aa	c2 20		rep #$20			rep 	#$20
.0107ac	80 d6		bra $010784			bra 	_TOKCap
.0107ae					_TOKEndCap:
.0107ae	c6 08		dec $08				dec 	DTemp1
.0107b0					_TOKMainNext:
.0107b0	e6 08		inc $08				inc 	DTemp1
.0107b2					_TOKMainLoop:
.0107b2	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107b4	29 ff 00	and #$00ff			and 	#$00FF
.0107b7	c9 20 00	cmp #$0020			cmp 	#32
.0107ba	90 1d		bcc $0107d9			bcc 	_TOKExit 					; 0-31 exit.
.0107bc	f0 f2		beq $0107b0			beq 	_TOKMainNext 				; 32 (space) skip.
.0107be	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107c1	f0 1d		beq $0107e0			beq 	_TOKString
.0107c3	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107c6	90 1d		bcc $0107e5			bcc 	_TOKPunctuation
.0107c8	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107cb	90 42		bcc $01080f			bcc 	_TOKNumber
.0107cd	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107d0	90 13		bcc $0107e5			bcc 	_TOKPunctuation
.0107d2	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107d5	90 3d		bcc $010814			bcc 	_TOKIdentifier
.0107d7	80 0c		bra $0107e5			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107d9					_TOKExit:
.0107d9	a9 00 00	lda #$0000			lda 	#$0000
.0107dc	20 19 08	jsr $010819			jsr 	TOKWriteToken
.0107df	60		rts				rts
.0107e0					_TOKString:
.0107e0	20 b7 08	jsr $0108b7			jsr 	TOKQuotedString
.0107e3	80 cd		bra $0107b2			bra 	_TOKMainLoop
.0107e5					_TOKPunctuation:
.0107e5	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.0107e8	20 1e 09	jsr $01091e			jsr 	TOKKeywordSearch
.0107eb	b0 1d		bcs $01080a			bcs 	_TOKFoundPunctuation
.0107ed	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.0107f0	20 1e 09	jsr $01091e			jsr 	TOKKeywordSearch
.0107f3	b0 15		bcs $01080a			bcs 	_TOKFoundPunctuation
.0107f5	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0107f8	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010800	61 72 73 65 20 6c 69 6e 65 00
.01080a					_TOKFoundPunctuation:
.01080a	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; output the token and go round again.
.01080d	80 a3		bra $0107b2			bra 	_TOKMainLoop
.01080f					_TOKNumber:
.01080f	20 38 08	jsr $010838			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010812	80 9e		bra $0107b2			bra 	_TOKMainLoop
.010814					_TOKIdentifier:
.010814	20 79 09	jsr $010979			jsr 	TOKIdentifier
.010817	80 99		bra $0107b2			bra 	_TOKMainLoop
.010819					TOKWriteToken:
.010819	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01081b	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.01081d	e6 0c		inc $0c				inc 	DTemp2
.01081f	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010821	29 ff 00	and #$00ff			and 	#$00FF
.010824	f0 01		beq $010827			beq 	_TOKWriteOverflow
.010826	60		rts				rts
.010827					_TOKWriteOverflow:
.010827	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01082a	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010832	20 6c 6f 6e 67 00
.010838					TOKInteger:
.010838	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.01083a	64 26		stz $26				stz 	DTemp3+2
.01083c					_TOKINLoop:
.01083c	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01083e	48		pha				pha
.01083f	a5 24		lda $24				lda 	DTemp3
.010841	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010843	26 26		rol $26				rol 	DTemp3+2
.010845	06 24		asl $24				asl 	DTemp3
.010847	26 26		rol $26				rol 	DTemp3+2
.010849	18		clc				clc
.01084a	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.01084c	85 24		sta $24				sta 	DTemp3
.01084e	68		pla				pla
.01084f	65 26		adc $26				adc 	DTemp3+2
.010851	85 26		sta $26				sta 	DTemp3+2
.010853	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010855	26 26		rol $26				rol 	DTemp3+2
.010857	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010859	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.01085c	d0 44		bne $0108a2			bne 	_TOKINSize
.01085e	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010860	29 0f 00	and #$000f			and 	#15
.010863	18		clc				clc
.010864	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010866	85 24		sta $24				sta 	DTemp3
.010868	90 02		bcc $01086c			bcc 	_TOKINNoCarry
.01086a	e6 26		inc $26				inc 	DTemp3+2
.01086c					_TOKINNoCarry:
.01086c	e6 08		inc $08				inc 	DTemp1 						; look at next
.01086e	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.010870	29 ff 00	and #$00ff			and 	#$00FF
.010873	c9 30 00	cmp #$0030			cmp 	#"0"
.010876	90 05		bcc $01087d			bcc 	_TOKINGotInteger
.010878	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01087b	90 bf		bcc $01083c			bcc		_TOKINLoop
.01087d					_TOKINGotInteger:
.01087d	a5 24		lda $24				lda 	DTemp3 						; lower word
.01087f	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.010882	18		clc				clc
.010883	69 00 40	adc #$4000			adc 	#$4000
.010886	48		pha				pha 								; save it.
.010887	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.010889	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.01088b	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.01088d	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.010890	b0 10		bcs $0108a2			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.010892	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.010895	f0 06		beq $01089d			beq 	_TOKINNoShift 				; don't need constant shift.
.010897	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.01089a	20 19 08	jsr $010819			jsr 	TOKWriteToken
.01089d					_TOKINNoShift:
.01089d	68		pla				pla 								; get lower its token
.01089e	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; output it
.0108a1	60		rts				rts
.0108a2					_TOKINSize:
.0108a2	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0108a5	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108ad	74 6f 6f 20 6c 61 72 67 65 00
.0108b7					TOKQuotedString:
.0108b7	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108b9	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108bb	85 32		sta $32				sta 	DTemp4
.0108bd	a5 0a		lda $0a				lda 	DTemp1+2
.0108bf	85 34		sta $34				sta 	DTemp4+2
.0108c1					_TOKQFindSize:
.0108c1	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108c3	e6 08		inc $08				inc 	DTemp1
.0108c5	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108c8	f0 3b		beq $010905			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108ca	c9 22 00	cmp #$0022			cmp 	#34
.0108cd	d0 f2		bne $0108c1			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108cf	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108d1	38		sec				sec
.0108d2	e5 32		sbc $32				sbc 	DTemp4
.0108d4	3a		dec a				dec 	a 							; one less character for closing quote
.0108d5	85 26		sta $26				sta 	DTemp3+2
.0108d7	18		clc				clc
.0108d8	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108db	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108de	20 19 08	jsr $010819			jsr 	TOKWriteToken
.0108e1	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.0108e3	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108e6	c6 0c		dec $0c				dec 	DTemp2
.0108e8	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.0108ea	f0 0f		beq $0108fb			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.0108ec					_TOKQWriteString:
.0108ec	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.0108ee	29 ff 00	and #$00ff			and 	#$00FF
.0108f1	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108f4	c6 0c		dec $0c				dec 	DTemp2
.0108f6	e6 32		inc $32				inc 	DTemp4 						; advance character
.0108f8	ca		dex				dex 								; do X times
.0108f9	d0 f1		bne $0108ec			bne 	_TOKQWriteString
.0108fb					_TOKQWriteEnd:
.0108fb	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.0108fd	29 01 00	and #$0001			and 	#1
.010900	f0 02		beq $010904			beq 	_TOKQExit
.010902	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010904					_TOKQExit:
.010904	60		rts				rts
.010905					_TOQImbalance:
.010905	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010908	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010910	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01091e					TOKKeywordSearch:
.01091e	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010920	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010923	85 34		sta $34				sta 	DTemp4+2
.010925	a2 00 00	ldx #$0000			ldx 	#0
.010928					_TOKScan:
.010928	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; read the first byte
.01092c	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01092f	f0 46		beq $010977			beq 	_TOKFail 					; if zero then we have failed.
.010931	3a		dec a				dec 	a 							; -1 gives the length.
.010932	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010934	d0 2f		bne $010965			bne 	_TOKNext 					; no, then skip to next token.
.010936	da		phx				phx 								; save X
.010937	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.01093a					_TOKCompare:
.01093a	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01093c	5f 9f 00 01	eor $01009f,x			eor 	TokenText+1,x
.010940	29 ff 00	and #$00ff			and 	#$00FF
.010943	d0 1f		bne $010964			bne 	_TOKPopNext 				; if different, pop and goto next.
.010945	e8		inx				inx 								; bump X and Y.
.010946	c8		iny				iny
.010947	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010949	d0 ef		bne $01093a			bne 	_TOKCompare
.01094b	98		tya				tya 								; add length to the text pointer
.01094c	18		clc				clc
.01094d	65 08		adc $08				adc 	DTemp1
.01094f	85 08		sta $08				sta 	DTemp1
.010951	fa		plx				plx 								; restore X.
.010952	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the type/token bit.
.010956	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010959	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.01095a	4a		lsr a				lsr		a
.01095b	4a		lsr a				lsr 	a
.01095c	eb		xba				xba
.01095d	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01095f	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010962	38		sec				sec
.010963	60		rts				rts
.010964					_TOKPopNext:
.010964	fa		plx				plx 								; restore X.
.010965					_TOKNext:
.010965	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the token skip again.
.010969	29 0f 00	and #$000f			and 	#$000F
.01096c	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01096e	8a		txa				txa
.01096f	18		clc				clc
.010970	65 14		adc $14				adc 	DSignCount
.010972	aa		tax				tax
.010973	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010975	80 b1		bra $010928			bra 	_TOKScan
.010977					_TOKFail:
.010977	18		clc				clc
.010978	60		rts				rts
.010979					TOKIdentifier:
.010979	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.01097b	85 24		sta $24				sta 	DTemp3
.01097d					_TOKIFindLength:
.01097d	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01097f	a7 08		lda [$08]			lda 	[DTemp1]
.010981	29 ff 00	and #$00ff			and 	#$00FF
.010984	20 24 0a	jsr $010a24			jsr 	TOKIsIdentifierCharacter
.010987	b0 f4		bcs $01097d			bcs 	_TOKIFindLength
.010989	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.01098b	38		sec				sec
.01098c	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.01098e	85 36		sta $36				sta 	DTemp5
.010990	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.010992	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.010995	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.010997	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010999	29 ff 00	and #$00ff			and 	#$00FF
.01099c	c9 24 00	cmp #$0024			cmp 	#"$"
.01099f	d0 0b		bne $0109ac			bne 	_TOKINotString
.0109a1	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109a3	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109a5	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109a7	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109aa	85 26		sta $26				sta 	DTemp3+2
.0109ac					_TOKINotString:
.0109ac	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109ae	29 ff 00	and #$00ff			and 	#$00FF
.0109b1	c9 28 00	cmp #$0028			cmp 	#"("
.0109b4	d0 0b		bne $0109c1			bne 	_TOKINotArray
.0109b6	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109b8	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109ba	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109bc	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109bf	85 26		sta $26				sta 	DTemp3+2
.0109c1					_TOKINotArray:
.0109c1	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109c3	85 08		sta $08				sta 	DTemp1
.0109c5	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109c7	20 1e 09	jsr $01091e			jsr 	TOKKeywordSearch
.0109ca	90 04		bcc $0109d0			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109cc	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109cf	60		rts				rts
.0109d0					_TOKIIdentifier:
.0109d0	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109d2	e6 08		inc $08				inc 	DTemp1
.0109d4	20 10 0a	jsr $010a10			jsr		_TOKIToConstant 			; convert to range 0-35
.0109d7	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109d9	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109db	f0 1d		beq $0109fa			beq 	_TOKINoSecond
.0109dd	48		pha				pha 								; save current on stack.
.0109de	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109e0	e6 08		inc $08				inc 	DTemp1
.0109e2	20 10 0a	jsr $010a10			jsr		_TOKIToConstant 			; convert to range 0-35
.0109e5	85 14		sta $14				sta 	DSignCount 					; save it.
.0109e7	0a		asl a				asl 	a 							; x 4
.0109e8	0a		asl a				asl 	a
.0109e9	65 14		adc $14				adc 	DSignCount 					; x 5
.0109eb	0a		asl a				asl 	a 							; x 10
.0109ec	65 14		adc $14				adc 	DSignCount 					; x 11
.0109ee	0a		asl a				asl 	a 							; x 22
.0109ef	0a		asl a				asl 	a 							; x 44
.0109f0	65 14		adc $14				adc 	DSignCount 					; x 45
.0109f2	85 14		sta $14				sta 	DSignCount
.0109f4	68		pla				pla 								; get old token and add x 45
.0109f5	18		clc				clc
.0109f6	65 14		adc $14				adc 	DSignCount
.0109f8	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.0109fa					_TOKINoSecond:
.0109fa	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.0109fc	f0 03		beq $010a01			beq 	_TOKINotLast				; if yes
.0109fe	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a01					_TOKINotLast:
.010a01	20 19 08	jsr $010819			jsr 	TOKWriteToken 				; output the token
.010a04	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a06	d0 c8		bne $0109d0			bne 	_TOKIIdentifier
.010a08					_TOKIOut:
.010a08	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a0a	18		clc				clc
.010a0b	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a0d	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a0f	60		rts				rts
.010a10					_TOKIToConstant:
.010a10	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a13	c9 41 00	cmp #$0041			cmp 	#65
.010a16	90 04		bcc $010a1c			bcc 	_TOKITInteger
.010a18	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a1b	60		rts				rts
.010a1c					_TOKITInteger:
.010a1c	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a1f	18		clc				clc
.010a20	69 1b 00	adc #$001b			adc 	#27
.010a23	60		rts				rts
.010a24					TOKIsIdentifierCharacter:
.010a24	c9 30 00	cmp #$0030			cmp 	#"0"
.010a27	90 0f		bcc $010a38			bcc 	_TOKIIFail
.010a29	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a2c	90 0c		bcc $010a3a			bcc 	_TOKIIOk
.010a2e	c9 41 00	cmp #$0041			cmp 	#"A"
.010a31	90 05		bcc $010a38			bcc 	_TOKIIFail
.010a33	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a36	90 02		bcc $010a3a			bcc 	_TOKIIOk
.010a38					_TOKIIFail:
.010a38	18		clc				clc
.010a39	60		rts				rts
.010a3a					_TOKIIOk:
.010a3a	38		sec				sec
.010a3b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010a3c					Binary_Add:
.010a3c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a3e	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a40	30 12		bmi $010a54		bmi 	_BATypeError
.010a42	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a44	30 3f		bmi $010a85		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a46	18		clc			clc 										; add the results
.010a47	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a49	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a4b	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a4d	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a4f	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a51	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a53	60		rts			rts
.010a54					_BATypeError:
.010a54	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a57	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a5f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a6f	65 73 00
.010a72					_BALengthError:
.010a72	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a75	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a7d	6f 6f 20 6c 6f 6e 67 00
.010a85					_BAConcatenateString:
.010a85	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a87	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a89	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a8b	85 0c		sta $0c			sta 	DTemp2
.010a8d	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a8f	18		clc			clc 										; work out the total length
.010a90	b2 08		lda ($08)		lda 	(DTemp1)
.010a92	72 0c		adc ($0c)		adc 	(DTemp2)
.010a94	b0 14		bcs $010aaa		bcs 	_BAConcatLengthError 				; string is too long.
.010a96	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010a98	20 17 07	jsr $010717		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010a9b	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010a9d	74 20		stz $20,x		stz 	EXSValueH+0,x
.010a9f	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010aa1	20 51 07	jsr $010751		jsr 	StringCreateCopy
.010aa4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010aa6	20 51 07	jsr $010751		jsr 	StringCreateCopy
.010aa9	60		rts			rts
.010aaa					_BAConcatLengthError:
.010aaa	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010aad	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ab5	6f 6f 20 6c 6f 6e 67 00
.010abd					Binary_Subtract:
.010abd	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010ac0	38		sec			sec
.010ac1	b5 00		lda $00,x		lda		EXSValueL+0,x
.010ac3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ac5	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ac7	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ac9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010acb	95 20		sta $20,x		sta 	EXSValueH+0,x
.010acd	60		rts			rts
.010ace					Binary_ShiftRight:
.010ace	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010ad1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ad3	29 3f 00	and #$003f		and 	#63
.010ad6	f0 07		beq $010adf		beq		_Binary_SRExit
.010ad8					_Binary_SRLoop:
.010ad8	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010ada	76 00		ror $00,x		ror 	EXSValueL+0,x
.010adc	3a		dec a			dec 	a
.010add	d0 f9		bne $010ad8		bne 	_Binary_SRLoop
.010adf					_Binary_SRExit:
.010adf	60		rts			rts
.010ae0					Binary_ShiftLeft:
.010ae0	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010ae3	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ae5	29 3f 00	and #$003f		and 	#63
.010ae8	f0 07		beq $010af1		beq		_Binary_SLExit
.010aea					_Binary_SLLoop:
.010aea	16 00		asl $00,x		asl 	EXSValueL+0,x
.010aec	36 20		rol $20,x		rol 	EXSValueH+0,x
.010aee	3a		dec a			dec 	a
.010aef	d0 f9		bne $010aea		bne 	_Binary_SLLoop
.010af1					_Binary_SLExit:
.010af1	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010af2					Binary_And:
.010af2	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010af5	b5 00		lda $00,x		lda		EXSValueL+0,x
.010af7	35 02		and $02,x		and 	EXSValueL+2,x
.010af9	95 00		sta $00,x		sta 	EXSValueL+0,x
.010afb	b5 20		lda $20,x		lda		EXSValueH+0,x
.010afd	35 22		and $22,x		and 	EXSValueH+2,x
.010aff	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b01	60		rts			rts
.010b02					Binary_Or:
.010b02	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010b05	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b07	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b09	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b0b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b0d	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b0f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b11	60		rts			rts
.010b12					Binary_Xor:
.010b12	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010b15	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b17	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b19	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b1b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b1d	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b1f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b21	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010b22					Binary_Equals:
.010b22	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b25	b0 0e		bcs $010b35		bcs 	_BEString
.010b27	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b29	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b2b	d0 4f		bne $010b7c		bne 	Compare_Fail
.010b2d	b5 20		lda $20,x		lda 	EXSValueH,x
.010b2f	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b31	d0 49		bne $010b7c		bne 	Compare_Fail
.010b33	80 3f		bra $010b74		bra 	Compare_Succeed
.010b35					_BEString:
.010b35	09 00 00	ora #$0000		ora 	#$0000
.010b38	f0 3a		beq $010b74		beq 	Compare_Succeed
.010b3a	80 40		bra $010b7c		bra 	Compare_Fail
.010b3c					Binary_NotEquals:
.010b3c	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b3f	b0 0e		bcs $010b4f		bcs 	_BNEString
.010b41	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b43	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b45	d0 2d		bne $010b74		bne 	Compare_Succeed
.010b47	b5 20		lda $20,x		lda 	EXSValueH,x
.010b49	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b4b	d0 27		bne $010b74		bne 	Compare_Succeed
.010b4d	80 2d		bra $010b7c		bra 	Compare_Fail
.010b4f					_BNEString:
.010b4f	09 00 00	ora #$0000		ora 	#$0000
.010b52	d0 20		bne $010b74		bne 	Compare_Succeed
.010b54	80 26		bra $010b7c		bra 	Compare_Fail
.010b56					Binary_Less:
.010b56	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b59	b0 12		bcs $010b6d		bcs 	_BLString
.010b5b	38		sec			sec
.010b5c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b5e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b60	b5 20		lda $20,x		lda 	EXSValueH,x
.010b62	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b64	50 03		bvc $010b69		bvc 	*+5
.010b66	49 00 80	eor #$8000		eor 	#$8000
.010b69	30 09		bmi $010b74		bmi 	Compare_Succeed
.010b6b	80 0f		bra $010b7c		bra 	Compare_Fail
.010b6d					_BLString:
.010b6d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b70	f0 02		beq $010b74		beq 	Compare_Succeed
.010b72	80 08		bra $010b7c		bra 	Compare_Fail
.010b74					Compare_Succeed:
.010b74	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b77	95 00		sta $00,x		sta 	EXSValueL,x
.010b79	95 20		sta $20,x		sta 	EXSValueH,x
.010b7b	60		rts			rts
.010b7c					Compare_Fail:
.010b7c	74 00		stz $00,x		stz 	EXSValueL,x
.010b7e	74 20		stz $20,x		stz 	EXSValueH,x
.010b80	60		rts			rts
.010b81					Binary_GreaterEqual:
.010b81	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b84	b0 12		bcs $010b98		bcs 	_BGEString
.010b86	38		sec			sec
.010b87	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b89	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b8b	b5 20		lda $20,x		lda 	EXSValueH,x
.010b8d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b8f	50 03		bvc $010b94		bvc 	*+5
.010b91	49 00 80	eor #$8000		eor 	#$8000
.010b94	10 de		bpl $010b74		bpl 	Compare_Succeed
.010b96	80 e4		bra $010b7c		bra 	Compare_Fail
.010b98					_BGEString:
.010b98	09 00 00	ora #$0000		ora 	#$0000
.010b9b	10 d7		bpl $010b74		bpl 	Compare_Succeed
.010b9d	80 dd		bra $010b7c		bra 	Compare_Fail
.010b9f					Binary_LessEqual:
.010b9f	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ba2	b0 12		bcs $010bb6		bcs 	_BLEString
.010ba4	18		clc			clc 									; numeric <= signed
.010ba5	b5 00		lda $00,x		lda 	EXSValueL,x
.010ba7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ba9	b5 20		lda $20,x		lda 	EXSValueH,x
.010bab	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bad	50 03		bvc $010bb2		bvc 	*+5
.010baf	49 00 80	eor #$8000		eor 	#$8000
.010bb2	30 c0		bmi $010b74		bmi 	Compare_Succeed
.010bb4	80 c6		bra $010b7c		bra 	Compare_Fail
.010bb6					_BLEString:
.010bb6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bb9	d0 b9		bne $010b74		bne 	Compare_Succeed
.010bbb	80 bf		bra $010b7c		bra 	Compare_Fail
.010bbd					Binary_Greater:
.010bbd	20 db 0b	jsr $010bdb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bc0	b0 12		bcs $010bd4		bcs 	_BGString
.010bc2	18		clc			clc 									; numeric > signed
.010bc3	b5 00		lda $00,x		lda 	EXSValueL,x
.010bc5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc7	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bcb	50 03		bvc $010bd0		bvc 	*+5
.010bcd	49 00 80	eor #$8000		eor 	#$8000
.010bd0	10 a2		bpl $010b74		bpl 	Compare_Succeed
.010bd2	80 a8		bra $010b7c		bra 	Compare_Fail
.010bd4					_BGString:
.010bd4	c9 01 00	cmp #$0001		cmp 	#$0001
.010bd7	f0 9b		beq $010b74		beq 	Compare_Succeed
.010bd9	80 a1		bra $010b7c		bra 	Compare_Fail
.010bdb					CompareTypeCheck:
.010bdb	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010bdd	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010bdf	30 06		bmi $010be7		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010be1	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010be3	30 1c		bmi $010c01		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010be5	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010be6	60		rts			rts
.010be7					_CTCFail:
.010be7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010bea	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010bf2	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c01					_CTCStringCompare:
.010c01	20 2a 06	jsr $01062a		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c04	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c06	85 08		sta $08			sta 	DTemp1
.010c08	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c0a	85 0c		sta $0c			sta 	DTemp2
.010c0c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c0f	a8		tay			tay
.010c10	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c12	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c14	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c16	90 02		bcc $010c1a		bcc 	_CTCSmallest
.010c18	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c1a					_CTCSmallest:
.010c1a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c1c					_CTCCompare:
.010c1c	c8		iny			iny 									; look at next character (done first, first char is size)
.010c1d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c1f	30 16		bmi $010c37		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c21	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c23	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c25	f0 f5		beq $010c1c		beq 	_CTCCompare 					; if zero, try the next character.
.010c27	b0 07		bcs $010c30		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c29					_CTCLess:
.010c29	c2 20		rep #$20		rep 	#$20
.010c2b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c2e	80 14		bra $010c44		bra 	_CTCExit
.010c30					_CTCGreater:
.010c30	c2 20		rep #$20		rep 	#$20
.010c32	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c35	80 0d		bra $010c44		bra 	_CTCExit
.010c37					_CTCEqualSoFar:
.010c37	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c39	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c3b	90 ec		bcc $010c29		bcc 	_CTCLess
.010c3d	d0 f1		bne $010c30		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c3f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c41	a9 00 00	lda #$0000		lda 	#$0000
.010c44					_CTCExit:
.010c44	38		sec			sec 									; return with CS indicating string comparison.
.010c45	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010c46					Binary_Divide:
.010c46	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010c49	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c4b	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c4d	d0 14		bne $010c63		bne 	_BinaryDivide_Ok
.010c4f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010c52	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c5a	20 62 79 20 7a 65 72 6f 00
.010c63					_BinaryDivide_Ok:
.010c63	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c65	64 0a		stz $0a			stz 	DTemp1+2
.010c67	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c69	5a		phy			phy 										; save Y (bit counter)
.010c6a	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c6c	10 07		bpl $010c75		bpl 	_BinaryDivide_RightDone
.010c6e	e8		inx			inx
.010c6f	e8		inx			inx
.010c70	20 ab 0c	jsr $010cab		jsr 	Binary_DivNegate
.010c73	ca		dex			dex
.010c74	ca		dex			dex
.010c75					_BinaryDivide_RightDone:
.010c75	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c77	10 03		bpl $010c7c		bpl 	_BinaryDivide_LeftDone
.010c79	20 ab 0c	jsr $010cab		jsr 	Binary_DivNegate
.010c7c					_BinaryDivide_LeftDone:
.010c7c	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c7f					_BinaryDivide_Loop:
.010c7f	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c81	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c83	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c85	26 0a		rol $0a			rol 	DTemp1+2
.010c87	38		sec			sec											; calculate A-M
.010c88	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c8a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c8c	85 0c		sta $0c			sta 	DTemp2
.010c8e	a5 0a		lda $0a			lda 	DTemp1+2
.010c90	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c92	90 08		bcc $010c9c		bcc 	_Binary_NoSubract 					; if A < M skip this
.010c94	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010c96	a5 0c		lda $0c			lda 	DTemp2
.010c98	85 08		sta $08			sta 	DTemp1+0
.010c9a	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010c9c					_Binary_NoSubract:
.010c9c	88		dey			dey 										; do it 32 times.
.010c9d	d0 e0		bne $010c7f		bne 	_BinaryDivide_Loop
.010c9f					_BinaryDivide_Exit:
.010c9f	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010ca1	29 01 00	and #$0001		and 	#1
.010ca4	f0 03		beq $010ca9		beq 	_BinaryDivide_Exit2
.010ca6	20 ab 0c	jsr $010cab		jsr 	Binary_DivNegate
.010ca9					_BinaryDivide_Exit2:
.010ca9	7a		ply			ply 										; restore Y
.010caa	60		rts			rts
.010cab					Binary_DivNegate:
.010cab	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cad	38		sec			sec 										; negate the value at stack X.
.010cae	a9 00 00	lda #$0000		lda 	#$0000
.010cb1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cb3	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cb5	a9 00 00	lda #$0000		lda 	#$0000
.010cb8	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cba	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cbc	60		rts			rts
.010cbd					Binary_Modulus:
.010cbd	20 46 0c	jsr $010c46		jsr 	Binary_Divide 						; do the divide
.010cc0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cc2	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cc4	a5 0a		lda $0a			lda 	DTemp1+2
.010cc6	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cc8	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010cc9					Binary_Multiply:
.010cc9	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010ccc	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cce	85 08		sta $08			sta 	DTemp1
.010cd0	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cd2	85 0a		sta $0a			sta		DTemp1+2
.010cd4	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010cd6	74 20		stz $20,x		stz 	EXSValueH+0,x
.010cd8					_BinaryMultiply_Loop:
.010cd8	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010cda	05 0a		ora $0a			ora 	DTemp1+2
.010cdc	f0 1e		beq $010cfc		beq 	_BinaryMultiply_Exit
.010cde	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010ce0	29 01 00	and #$0001		and 	#1
.010ce3	f0 0d		beq $010cf2		beq 	_BinaryMultiply_NoAdd
.010ce5	18		clc			clc 										; add multiplicand to result.
.010ce6	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010ce8	75 02		adc $02,x		adc 	EXSValueL+2,x
.010cea	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cec	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cee	75 22		adc $22,x		adc 	EXSValueH+2,x
.010cf0	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cf2					_BinaryMultiply_NoAdd:
.010cf2	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010cf4	66 08		ror $08			ror 	DTemp1
.010cf6	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010cf8	36 22		rol $22,x		rol 	EXSValueH+2,x
.010cfa	80 dc		bra $010cd8		bra 	_BinaryMultiply_Loop 				; go round again.
.010cfc					_BinaryMultiply_Exit:
.010cfc	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010cfd					Function_Len:
.010cfd	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010d00	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d03	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d06	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d08	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d0b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d0e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d10	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d12	60		rts				rts
.010d13					Function_Abs:
.010d13	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010d16	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d19	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d1c	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d1e	30 07		bmi $010d27			bmi 	_FAbsNegative 				; negate it if negative
.010d20	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d22	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d24	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d26	60		rts				rts
.010d27					_FAbsNegative:
.010d27	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d28	a9 00 00	lda #$0000			lda 	#0
.010d2b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d2d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d2f	a9 00 00	lda #$0000			lda 	#0
.010d32	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d34	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d36	60		rts				rts
.010d37					Function_Sgn:
.010d37	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns integer
.010d3a	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get an integer
.010d3d	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d40	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d42	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d44	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d46	30 07		bmi $010d4f			bmi 	_FSgnNegative 				; set to -1 if signed
.010d48	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d4a	f0 02		beq $010d4e			beq 	_FSgnExit
.010d4c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d4e					_FSgnExit:
.010d4e	60		rts				rts
.010d4f					_FSgnNegative:
.010d4f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d52	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d54	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d56	60		rts				rts
.010d57					Function_Random:
.010d57	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d5a	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger
.010d5d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d5f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d61	d0 0a		bne $010d6d			bne 	_Rnd_NotZero
.010d63	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d66	85 10		sta $10				sta 	DRandom
.010d68	a9 ea 00	lda #$00ea			lda 	#$EA
.010d6b	85 12		sta $12				sta 	DRandom+2
.010d6d					_Rnd_NotZero:
.010d6d	20 78 0d	jsr $010d78			jsr 	_Rnd_Process 				; call randomiser twice
.010d70	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d72	20 78 0d	jsr $010d78			jsr 	_Rnd_Process
.010d75	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d77	60		rts				rts
.010d78					_Rnd_Process:
.010d78	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d7a	26 12		rol $12				rol 	DRandom+2
.010d7c	90 0e		bcc $010d8c			bcc 	_Rnd_Exit
.010d7e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d80	49 54 d4	eor #$d454			eor 	#$D454
.010d83	85 10		sta $10				sta 	DRandom
.010d85	a5 12		lda $12				lda 	DRandom+2
.010d87	49 d5 55	eor #$55d5			eor 	#$55D5
.010d8a	85 12		sta $12				sta 	DRandom+2
.010d8c					_Rnd_Exit:
.010d8c	a5 10		lda $10				lda 	DRandom
.010d8e	45 12		eor $12				eor 	DRandom+2
.010d90	60		rts				rts
.010d91					Function_Chr:
.010d91	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string
.010d94	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer
.010d97	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d9a	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d9d	d0 12		bne $010db1			bne 	_FCHBad
.010d9f	48		pha				pha  								; save char # on stack
.010da0	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010da3	20 17 07	jsr $010717			jsr 	StringTempAllocate
.010da6	68		pla				pla 								; restore character number
.010da7	20 43 07	jsr $010743			jsr 	StringWriteCharacter 		; write it out.
.010daa	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dac	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dae	74 20		stz $20,x			stz 	EXSValueH+0,x
.010db0	60		rts				rts
.010db1					_FCHBad:
.010db1	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010db4	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010dbc	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010dc9					Function_Asc:
.010dc9	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010dcc	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get string
.010dcf	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010dd2	a8		tay				tay 								; string address in Y
.010dd3	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010dd6	29 ff 00	and #$00ff			and 	#$00FF
.010dd9	f0 0b		beq $010de6			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010ddb	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010dde	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010de1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010de3	74 20		stz $20,x			stz 	EXSValueH+0,x
.010de5	60		rts				rts
.010de6					_FASBad:
.010de6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010de9	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010df1	65 20 66 6f 72 20 61 73 63 28 29 00
.010dfd					Function_SPC:
.010dfd	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string
.010e00	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e03	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010e06	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e09	d0 17		bne $010e22			bne 	_FSPBad
.010e0b	48		pha				pha 								; save length
.010e0c	20 17 07	jsr $010717			jsr 	StringTempAllocate 			; allocate character space
.010e0f	7a		ply				ply 								; get count in Y
.010e10	f0 09		beq $010e1b			beq 	_FSPExit 					; if zero, just empty string
.010e12					_FSPCopy:
.010e12	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e15	20 43 07	jsr $010743			jsr 	StringWriteCharacter 		; write it out.
.010e18	88		dey				dey
.010e19	d0 f7		bne $010e12			bne 	_FSPCopy	 				; do it Y times
.010e1b					_FSPExit:
.010e1b	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e1d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e1f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e21	60		rts				rts
.010e22					_FSPBad:
.010e22	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010e25	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e2d	65 20 66 6f 72 20 73 70 63 28 29 00
.010e39					Function_Inkey:
.010e39	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010e3c	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger
.010e3f	20 62 1d	jsr $011d62			jsr 	HWInkey 					; read current key
.010e42	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e44	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e46	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010e47					Function_LEFT:
.010e47	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010e4a	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e4d	48		pha				pha 								; save string on stack.
.010e4e	20 01 06	jsr $010601			jsr 	ExpectComma 				; get count
.010e51	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e54	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e57	d0 6d		bne $010ec6			bne 	FNStringParameter
.010e59	85 08		sta $08				sta 	DTemp1 						; save count.
.010e5b	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010e5e	7a		ply				ply 								; Y points to string.
.010e5f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e62	29 ff 00	and #$00ff			and 	#$00FF
.010e65	f0 52		beq $010eb9			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e67	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e69	f0 55		beq $010ec0			beq 	FNStringY 					; return string in Y if current len = required len.
.010e6b	90 53		bcc $010ec0			bcc 	FNStringY 					; if current < required return whole thing.
.010e6d	c8		iny				iny 								; take from here - start of string
.010e6e	80 33		bra $010ea3			bra 	FNDTemp1Characters
.010e70					Function_RIGHT:
.010e70	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010e73	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e76	48		pha				pha 								; save string on stack.
.010e77	20 01 06	jsr $010601			jsr 	ExpectComma 				; get count
.010e7a	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e7d	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e80	d0 44		bne $010ec6			bne 	FNStringParameter
.010e82	85 08		sta $08				sta 	DTemp1 						; save count.
.010e84	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010e87	7a		ply				ply 								; Y points to string.
.010e88	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e8b	29 ff 00	and #$00ff			and 	#$00FF
.010e8e	f0 29		beq $010eb9			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e90	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e92	f0 2c		beq $010ec0			beq 	FNStringY 					; return string in Y if current len = required len.
.010e94	90 2a		bcc $010ec0			bcc 	FNStringY 					; if current < required return whole thing.
.010e96	38		sec				sec 								; current-required is the number to skip
.010e97	e5 08		sbc $08				sbc 	DTemp1
.010e99	85 0a		sta $0a				sta 	DTemp1+2
.010e9b	98		tya				tya
.010e9c	18		clc				clc
.010e9d	65 0a		adc $0a				adc 	DTemp1+2
.010e9f	a8		tay				tay
.010ea0	c8		iny				iny 								; +1 for the count.
.010ea1	80 00		bra $010ea3			bra 	FNDTemp1Characters
.010ea3					FNDTemp1Characters:
.010ea3	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ea5	f0 12		beq $010eb9			beq 	FNStringEmpty 				; if zero, return empty string.
.010ea7	20 17 07	jsr $010717			jsr 	StringTempAllocate
.010eaa	48		pha				pha 								; save the address
.010eab					_FND1Loop:
.010eab	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010eae	20 43 07	jsr $010743			jsr 	StringWriteCharacter
.010eb1	c8		iny				iny
.010eb2	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010eb4	d0 f5		bne $010eab			bne 	_FND1Loop
.010eb6	7a		ply				ply 								; string address in Y
.010eb7	80 07		bra $010ec0			bra 	FNStringY
.010eb9					FNStringEmpty:
.010eb9	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ebc	20 17 07	jsr $010717			jsr 	StringTempAllocate 			; put address of it in Y
.010ebf	a8		tay				tay
.010ec0					FNStringY:
.010ec0	98		tya				tya
.010ec1	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ec3	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ec5	60		rts				rts
.010ec6					FNStringParameter:
.010ec6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010ec9	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010ed1	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010ede					Function_MID:
.010ede	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010ee1	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ee4	48		pha				pha 								; save string on stack.
.010ee5	20 01 06	jsr $010601			jsr 	ExpectComma 				; get offset (n)
.010ee8	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010eeb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010eee	d0 d6		bne $010ec6			bne 	FNStringParameter
.010ef0	c9 00 00	cmp #$0000			cmp 	#0
.010ef3	f0 d1		beq $010ec6			beq 	FNStringParameter 			; or zero
.010ef5	48		pha				pha 								; save start position on stack.
.010ef6	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010ef9	85 08		sta $08				sta 	DTemp1
.010efb	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010efd	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f00	d0 0e		bne $010f10			bne 	_FMINoThird
.010f02	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f04	e6 06		inc $06				inc 	DCodePtr
.010f06	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f09	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f0c	d0 b8		bne $010ec6			bne 	FNStringParameter
.010f0e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f10					_FMINoThird:
.010f10	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010f13	68		pla				pla 								; get offset position
.010f14	85 0c		sta $0c				sta 	DTemp2
.010f16	7a		ply				ply 								; get address of string in Y
.010f17	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f1a	29 ff 00	and #$00ff			and 	#$00FF
.010f1d	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f1f	90 98		bcc $010eb9			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f21	38		sec				sec 								; calculate number of characters left after
.010f22	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f24	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f25	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f27	b0 02		bcs $010f2b			bcs 	_FMISufficient
.010f29	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f2b					_FMISufficient:
.010f2b	98		tya				tya 								; get address
.010f2c	18		clc				clc
.010f2d	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f2f	a8		tay				tay 								; put in Y
.010f30	82 70 ff	brl $010ea3			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010f33					Function_Peek:
.010f33	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f36	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f39	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f3c	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f3e	84 0a		sty $0a				sty 	DTemp1+2
.010f40	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f43	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f45	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f48	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f4a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f4c	60		rts				rts
.010f4d					Function_Deek:
.010f4d	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f50	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f53	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f56	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f58	84 0a		sty $0a				sty 	DTemp1+2
.010f5a	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f5d	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f5f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f61	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f63	60		rts				rts
.010f64					Function_Leek:
.010f64	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f67	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f6a	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f6d	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f6f	84 0a		sty $0a				sty 	DTemp1+2
.010f71	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f74	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f76	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f78	c8		iny				iny
.010f79	c8		iny				iny
.010f7a	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f7c	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f7e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010f7f					Function_VAL:
.010f7f	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f82	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f85	48		pha				pha 								; put string address on stack.
.010f86	20 96 0f	jsr $010f96			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f89	7a		ply				ply 								; get string address back
.010f8a	da		phx				phx 								; save X on stack
.010f8b	aa		tax				tax 								; base in X
.010f8c	98		tya				tya 								; address in A
.010f8d	20 d0 0f	jsr $010fd0			jsr 	StringToInteger
.010f90	fa		plx				plx 								; restore X
.010f91	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f93	94 20		sty $20,x			sty 	EXSValueH+0,x
.010f95	60		rts				rts
.010f96					VALGetBase:
.010f96	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010f98	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010f9b	f0 07		beq $010fa4			beq 	_VGBAlternate
.010f9d	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fa0	a9 0a 00	lda #$000a			lda 	#10
.010fa3	60		rts				rts
.010fa4					_VGBAlternate:
.010fa4	20 01 06	jsr $010601			jsr 	ExpectComma 				; skip comma.
.010fa7	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get base
.010faa	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fad	d0 0e		bne $010fbd			bne 	_VGBBadBase
.010faf	c9 02 00	cmp #$0002			cmp 	#2
.010fb2	90 09		bcc $010fbd			bcc 	_VGBBadBase
.010fb4	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fb7	b0 04		bcs $010fbd			bcs 	_VGBBadBase
.010fb9	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fbc	60		rts				rts
.010fbd					_VGBBadBase:
.010fbd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010fc0	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fc8	65 72 20 42 61 73 65 00
.010fd0					StringToInteger:
.010fd0	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fd2	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010fd4	29 ff 00	and #$00ff			and 	#$00FF
.010fd7	85 26		sta $26				sta 	DTemp3+2
.010fd9	f0 6e		beq $011049			beq 	_STIError 					; if length zero it's bad.
.010fdb	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010fdd	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010fdf	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010fe1	64 0a		stz $0a				stz 	DTemp1+2
.010fe3	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010fe5	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010fe8	48		pha				pha 								; push on stack
.010fe9	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010fec	d0 06		bne $010ff4			bne 	_STILoop
.010fee	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010ff0	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010ff2	f0 55		beq $011049			beq 	_STIError 					; if only - then error.
.010ff4					_STILoop:
.010ff4	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010ff6	20 68 10	jsr $011068			jsr 	MultiplyTemp1ByA
.010ff9	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010ffb	29 ff 00	and #$00ff			and 	#$00FF
.010ffe	20 59 10	jsr $011059			jsr 	ConvertUpperCase	 		; make U/C
.011001	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.011004	90 43		bcc $011049			bcc 	_STIError
.011006	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011009	90 0e		bcc $011019			bcc 	_STIOkay1
.01100b	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01100e	90 39		bcc $011049			bcc 	_STIError
.011010	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.011013	b0 34		bcs $011049			bcs 	_STIError
.011015	18		clc				clc 								; shift to correct range.
.011016	69 09 00	adc #$0009			adc 	#9
.011019					_STIOkay1:
.011019	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.01101c	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01101e	b0 29		bcs $011049			bcs 	_STIError
.011020	18		clc				clc 								; add A to DTemp1
.011021	65 08		adc $08				adc 	DTemp1
.011023	85 08		sta $08				sta 	DTemp1
.011025	90 02		bcc $011029			bcc 	_STINoCarry
.011027	e6 0a		inc $0a				inc 	DTemp1+2
.011029					_STINoCarry:
.011029	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.01102b	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.01102d	d0 c5		bne $010ff4			bne 	_STILoop 					; loop back.
.01102f	68		pla				pla 								; get optional minus bac
.011030	c9 2d 00	cmp #$002d			cmp 	#"-"
.011033	d0 0f		bne $011044			bne 	_STINotNegative 			; handle the negative character
.011035	38		sec				sec 								; negate DTemp1
.011036	a9 00 00	lda #$0000			lda 	#0
.011039	e5 08		sbc $08				sbc 	DTemp1
.01103b	85 08		sta $08				sta 	DTemp1
.01103d	a9 00 00	lda #$0000			lda 	#0
.011040	e5 0a		sbc $0a				sbc 	DTemp1+2
.011042	85 0a		sta $0a				sta 	DTemp1+2
.011044					_STINotNegative:
.011044	a5 08		lda $08				lda 	DTemp1 						; get the result
.011046	a4 0a		ldy $0a				ldy 	DTemp1+2
.011048	60		rts				rts
.011049					_STIError:
.011049	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01104c	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>011054	74 61 6e 74 00
.011059					ConvertUpperCase:
.011059	c9 61 00	cmp #$0061			cmp 	#'a'
.01105c	90 09		bcc $011067			bcc 	_CUCExit
.01105e	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.011061	b0 04		bcs $011067			bcs 	_CUCExit
.011063	38		sec				sec
.011064	e9 20 00	sbc #$0020			sbc 	#32
.011067					_CUCExit:
.011067	60		rts				rts
.011068					MultiplyTemp1ByA:
.011068					_MTGeneral:
.011068	da		phx				phx
.011069	aa		tax				tax 								; multiplier in X
.01106a	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.01106c	85 0c		sta $0c				sta 	DTemp2
.01106e	a5 0a		lda $0a				lda 	DTemp1+2
.011070	85 0e		sta $0e				sta 	DTemp2+2
.011072	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.011074	64 0a		stz $0a				stz 	DTemp1+2
.011076	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011079					_MTLoop:
.011079	8a		txa				txa 								; shift X right into C
.01107a	4a		lsr a				lsr 	a
.01107b	aa		tax				tax
.01107c	90 10		bcc $01108e			bcc 	_MTNoAdd
.01107e	18		clc				clc
.01107f	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.011081	65 0c		adc $0c				adc 	DTemp2
.011083	85 08		sta $08				sta 	DTemp1
.011085	a5 0a		lda $0a				lda 	DTemp1+2
.011087	65 0e		adc $0e				adc 	DTemp2+2
.011089	85 0a		sta $0a				sta 	DTemp1+2
.01108b	90 01		bcc $01108e			bcc 	_MTNoAdd
.01108d	c8		iny				iny
.01108e					_MTNoAdd:
.01108e	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.011090	26 0e		rol $0e				rol 	DTemp2+2
.011092	90 01		bcc $011095			bcc 	_MTNoOverflow
.011094	c8		iny				iny
.011095					_MTNoOverflow:
.011095	8a		txa				txa 								; until multiplier is zero.
.011096	d0 e1		bne $011079			bne 	_MTLoop
.011098	98		tya				tya
.011099	18		clc				clc
.01109a	69 ff ff	adc #$ffff			adc 	#$FFFF
.01109d	fa		plx				plx 								; restore X
.01109e	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.01109f					Function_Str:
.01109f	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.0110a2	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110a5	48		pha				pha 								; save YA on the stack
.0110a6	5a		phy				phy
.0110a7	20 96 0f	jsr $010f96			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110aa	85 14		sta $14				sta 	DSignCount
.0110ac	7a		ply				ply 								; YA is the number
.0110ad	68		pla				pla
.0110ae	da		phx				phx
.0110af	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110b1	20 ba 10	jsr $0110ba			jsr 	ConvertToString 			; convert it to a string.
.0110b4	fa		plx				plx 								; restore X
.0110b5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110b7	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110b9	60		rts				rts
.0110ba					ConvertToString:
.0110ba	48		pha				pha
.0110bb	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110be	20 17 07	jsr $010717			jsr 	StringTempAllocate 			; allocate space for return string.
.0110c1	68		pla				pla
.0110c2					ConvertToStringAlreadyAllocated:
.0110c2	da		phx				phx 								; save X (base)
.0110c3	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110c5	84 26		sty $26				sty 	DTemp3+2
.0110c7	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110c9	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110cb	10 15		bpl $0110e2			bpl 	_CTSNotNegative
.0110cd	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110d0	20 4c 11	jsr $01114c			jsr 	CTSOutputA
.0110d3	38		sec				sec 								; negate DTemp3 which is the number
.0110d4	a9 00 00	lda #$0000			lda 	#0
.0110d7	e5 24		sbc $24				sbc 	DTemp3
.0110d9	85 24		sta $24				sta 	DTemp3
.0110db	a9 00 00	lda #$0000			lda 	#0
.0110de	e5 26		sbc $26				sbc 	DTemp3+2
.0110e0	85 26		sta $26				sta 	DTemp3+2
.0110e2					_CTSNotNegative:
.0110e2	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.0110e5	48		pha				pha
.0110e6	a9 00 00	lda #$0000			lda 	#0
.0110e9	48		pha				pha
.0110ea	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.0110ec	85 08		sta $08				sta 	DTemp1
.0110ee	64 0a		stz $0a				stz 	DTemp1+2
.0110f0					_CTSMultiplySubtractor:
.0110f0	38		sec				sec 								; check number vs subtractor
.0110f1	a5 24		lda $24				lda 	DTemp3
.0110f3	e5 08		sbc $08				sbc 	DTemp1
.0110f5	a5 26		lda $26				lda 	DTemp3+2
.0110f7	e5 0a		sbc $0a				sbc 	DTemp1+2
.0110f9	90 0f		bcc $01110a			bcc		_CTSScaledUp 				; if >= then scaled up.
.0110fb	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0110fd	48		pha				pha
.0110fe	a5 0a		lda $0a				lda 	DTemp1+2
.011100	48		pha				pha
.011101	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011103	20 68 10	jsr $011068			jsr 	MultiplyTemp1ByA
.011106	b0 02		bcs $01110a			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011108	80 e6		bra $0110f0			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.01110a					_CTSScaledUp:
.01110a	7a		ply				ply 								; YA contains the previous divider.
.01110b	68		pla				pla
.01110c	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01110f	d0 05		bne $011116			bne 	_CTSHasDigit
.011111	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011114	f0 20		beq $011136			beq 	_CTSExit
.011116					_CTSHasDigit:
.011116	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011118	84 0e		sty $0e				sty 	DTemp2+2
.01111a	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.01111d					_CTSSubLoop:
.01111d	38		sec				sec 								; subtract subtractor from number
.01111e	a5 24		lda $24				lda 	DTemp3
.011120	e5 0c		sbc $0c				sbc 	DTemp2
.011122	a8		tay				tay 								; intermediate in Y
.011123	a5 26		lda $26				lda 	DTemp3+2
.011125	e5 0e		sbc $0e				sbc 	DTemp2+2
.011127	90 07		bcc $011130			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011129	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01112b	84 24		sty $24				sty 	DTemp3
.01112d	e8		inx				inx 								; one more subtraction
.01112e	80 ed		bra $01111d			bra 	_CTSSubLoop 				; try it again.
.011130					_CTSFinishedSubtracting:
.011130	8a		txa				txa 								; convert to ASCII.
.011131	20 3f 11	jsr $01113f			jsr 	CTSOutputHexDigit 			; write that out.
.011134	80 d4		bra $01110a			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011136					_CTSExit:
.011136	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011138	20 3f 11	jsr $01113f			jsr 	CTSOutputHexDigit
.01113b	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.01113d	fa		plx				plx 								; restore X.
.01113e	60		rts				rts
.01113f					CTSOutputHexDigit:
.01113f	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.011142	90 04		bcc $011148			bcc 	_CTSNotLetter
.011144	18		clc				clc
.011145	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011148					_CTSNotLetter:
.011148	18		clc				clc
.011149	69 30 00	adc #$0030			adc 	#48
.01114c					CTSOutputA:
.01114c	5a		phy				phy 								; save Y, set Y to current pointer
.01114d	a4 1a		ldy $1a				ldy 	DCurrentTempString
.01114f	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.011152	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011154	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011156	1a		inc a				inc 	a
.011157	92 18		sta ($18)			sta 	(DStartTempString)
.011159	c2 20		rep #$20			rep 	#$20
.01115b	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.01115d	7a		ply				ply 								; restore Y and exit.
.01115e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.01115f					Function_INSTR:
.01115f	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns a integer
.011162	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.011165	48		pha				pha 								; save string to search
.011166	20 01 06	jsr $010601			jsr 	ExpectComma
.011169	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; string to search for
.01116c	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.01116f	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011171	68		pla				pla
.011172	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011174	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011176	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011178	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.01117a	38		sec				sec
.01117b	b2 0c		lda ($0c)			lda 	(DTemp2)
.01117d	f2 08		sbc ($08)			sbc		(DTemp1)
.01117f	c2 20		rep #$20			rep 	#$20
.011181	90 2c		bcc $0111af			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011183	29 ff 00	and #$00ff			and 	#$00FF
.011186	1a		inc a				inc 	a
.011187	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.011189	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.01118b	29 ff 00	and #$00ff			and 	#$00FF
.01118e	f0 22		beq $0111b2			beq 	_FINSError
.011190					_FINSLoop:
.011190	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.011192	1a		inc a				inc 	a
.011193	95 00		sta $00,x			sta 	EXSValueL+0,x
.011195	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.011197	29 ff 00	and #$00ff			and 	#$00FF
.01119a	a8		tay				tay									; start comparing at index 1.
.01119b					_FINSCompare:
.01119b	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.01119d	51 0c		eor ($0c),y			eor 	(DTemp2),y
.01119f	29 ff 00	and #$00ff			and 	#$00FF
.0111a2	d0 05		bne $0111a9			bne 	_FINSNext
.0111a4	88		dey				dey
.0111a5	d0 f4		bne $01119b			bne 	_FINSCompare
.0111a7	80 08		bra $0111b1			bra 	_FINSExit
.0111a9					_FINSNext:
.0111a9	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111ab	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111ad	d0 e1		bne $011190			bne 	_FINSLoop
.0111af					_FINSFail:
.0111af	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111b1					_FINSExit:
.0111b1	60		rts				rts
.0111b2					_FINSError:
.0111b2	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0111b5	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111bd	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.0111c6					Function_UPPER:
.0111c6	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.0111c9	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.0111cc	48		pha				pha
.0111cd	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; close call.
.0111d0	20 17 07	jsr $010717			jsr		StringTempAllocate 			; allocate memory for it
.0111d3	68		pla				pla
.0111d4	20 51 07	jsr $010751			jsr 	StringCreateCopy 			; create a copy of it.
.0111d7	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111d9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111db	a8		tay				tay 								; address in Y
.0111dc	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111de	da		phx				phx 								; save X
.0111df	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111e1	29 ff 00	and #$00ff			and 	#$00FF
.0111e4	f0 20		beq $011206			beq 	_FUPExit
.0111e6	aa		tax				tax 								; put in X
.0111e7					_FUPLoop:
.0111e7	c8		iny				iny 								; increment and load character
.0111e8	b9 00 00	lda $0000,y			lda 	$0000,y
.0111eb	29 ff 00	and #$00ff			and 	#$00FF
.0111ee	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.0111f1	90 10		bcc $011203			bcc 	_FUPNoChange
.0111f3	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0111f6	b0 0b		bcs $011203			bcs 	_FUPNoChange
.0111f8	38		sec				sec 								; shift case
.0111f9	e9 20 00	sbc #$0020			sbc 	#32
.0111fc	e2 20		sep #$20			sep 	#$20 						; write back
.0111fe	99 00 00	sta $0000,y			sta 	$0000,y
.011201	c2 20		rep #$20			rep 	#$20
.011203					_FUPNoChange:
.011203	ca		dex				dex 								; do X times
.011204	d0 e1		bne $0111e7			bne 	_FUPLoop
.011206					_FUPExit:
.011206	fa		plx				plx 								; restore X
.011207	60		rts				rts
.011208					Function_LOWER:
.011208	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.01120b	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.01120e	48		pha				pha
.01120f	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; close call.
.011212	20 17 07	jsr $010717			jsr		StringTempAllocate 			; allocate memory for it
.011215	68		pla				pla
.011216	20 51 07	jsr $010751			jsr 	StringCreateCopy 			; create a copy of it.
.011219	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01121b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01121d	a8		tay				tay 								; address in Y
.01121e	74 20		stz $20,x			stz 	EXSValueH+0,x
.011220	da		phx				phx 								; save X
.011221	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011223	29 ff 00	and #$00ff			and 	#$00FF
.011226	f0 20		beq $011248			beq 	_FLOExit
.011228	aa		tax				tax 								; put in X
.011229					_FLOLoop:
.011229	c8		iny				iny 								; increment and load character
.01122a	b9 00 00	lda $0000,y			lda 	$0000,y
.01122d	29 ff 00	and #$00ff			and 	#$00FF
.011230	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011233	90 10		bcc $011245			bcc 	_FLONoChange
.011235	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011238	b0 0b		bcs $011245			bcs 	_FLONoChange
.01123a	18		clc				clc 								; shift case
.01123b	69 20 00	adc #$0020			adc 	#32
.01123e	e2 20		sep #$20			sep 	#$20 						; write back
.011240	99 00 00	sta $0000,y			sta 	$0000,y
.011243	c2 20		rep #$20			rep 	#$20
.011245					_FLONoChange:
.011245	ca		dex				dex 								; do X times
.011246	d0 e1		bne $011229			bne 	_FLOLoop
.011248					_FLOExit:
.011248	fa		plx				plx 								; restore X
.011249	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.01124a					Command_Let:
.01124a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01124c	48		pha				pha  								; save on stack for later.
.01124d	20 9c 03	jsr $01039c			jsr 	VariableFind 				; find the variable
.011250	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.011252	b0 0c		bcs $011260			bcs 	_FLetFound 					; skip if found.
.011254	68		pla				pla 								; get and push the first token again.
.011255	48		pha				pha
.011256	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011259	d0 52		bne $0112ad			bne 	_FLError					; arrays, so this causes an error.
.01125b	20 4f 04	jsr $01044f			jsr 	VariableCreate 				; create it.
.01125e	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011260					_FLetFound:
.011260	68		pla				pla 								; get and save the first token.
.011261	48		pha				pha
.011262	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011265	f0 0a		beq $011271			beq 	_FLetNotArray
.011267	a2 00 02	ldx #$0200			ldx		#EXSBase 					; in LET, so do it from the base stack.
.01126a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.01126c	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.01126f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011271					_FLetNotArray:
.011271	7a		ply				ply 								; get the first token into Y
.011272	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011274	48		pha				pha
.011275	5a		phy				phy 								; save the first token on the stack.
.011276	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011279	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01127b	d0 23		bne $0112a0			bne 	_FLetMissingEquals
.01127d	e6 06		inc $06				inc 	DCodePtr
.01127f	e6 06		inc $06				inc 	DCodePtr
.011281	68		pla				pla 								; restore the first token.
.011282	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011285	d0 0f		bne $011296			bne 	_FLetString 				; skip if string.
.011287	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get an integer
.01128a	7a		ply				ply 								; get address in Y
.01128b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.01128d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011290	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.011292	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.011295	60		rts				rts
.011296					_FLetString:
.011296	20 2e 03	jsr $01032e			jsr 	EvaluateString 				; get a string.
.011299	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01129b	7a		ply				ply 								; get address we are overwriting.
.01129c	20 7b 06	jsr $01067b			jsr 	StringAssign 				; assign the string in memory.
.01129f	60		rts				rts
.0112a0					_FLetMissingEquals:
.0112a0	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112a3	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112ab	3d 00
.0112ad					_FLError:
.0112ad	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112b0	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112b8	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/procedure.asm

.0112c0					Command_PROC:
.0112c0	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112c3	18		clc				clc
.0112c4	65 02		adc $02				adc 	DBaseAddress
.0112c6	aa		tax				tax 								; X is used to track it
.0112c7					_FPROLoop:
.0112c7	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112ca	f0 56		beq $011322			beq 	_FPROUnknown
.0112cc	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112cf	c9 48 3c	cmp #$3c48			cmp 	#defprocTokenID
.0112d2	f0 08		beq $0112dc			beq 	_FPROFoundDefProc
.0112d4					_FPRONext:
.0112d4	8a		txa				txa 								; follow the link.
.0112d5	18		clc				clc
.0112d6	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112d9	aa		tax				tax
.0112da	80 eb		bra $0112c7			bra 	_FPROLoop
.0112dc					_FPROFoundDefProc:
.0112dc	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.0112df	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112e1	d0 f1		bne $0112d4			bne 	_FPRONext
.0112e3	8a		txa				txa 								; DTemp1 points to the token.
.0112e4	18		clc				clc
.0112e5	69 06 00	adc #$0006			adc 	#6
.0112e8	85 08		sta $08				sta 	DTemp1
.0112ea	a0 00 00	ldy #$0000			ldy 	#0
.0112ed					_FPROCompare:
.0112ed	b1 08		lda ($08),y			lda 	(DTemp1),y
.0112ef	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0112f1	d0 e1		bne $0112d4			bne 	_FPRONext 					; fails, different
.0112f3	c8		iny				iny
.0112f4	c8		iny				iny
.0112f5	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.0112f8	d0 f3		bne $0112ed			bne 	_FPROCompare
.0112fa	98		tya				tya 								; this is the offset to the next element
.0112fb	18		clc				clc
.0112fc	65 08		adc $08				adc 	DTemp1
.0112fe	48		pha				pha 								; push the next command on the stack
.0112ff	da		phx				phx 								; push the record address on the stack.
.011300	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011302	98		tya				tya 								; work out the return address
.011303	18		clc				clc
.011304	65 06		adc $06				adc 	DCodePtr
.011306	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011308	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01130a	95 04		sta $04,x			sta 	$04,x
.01130c	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.01130f	95 06		sta $06,x			sta 	$06,x
.011311	8a		txa				txa 								; advance stack by 6.
.011312	18		clc				clc
.011313	69 06 00	adc #$0006			adc 	#6
.011316	85 2a		sta $2a				sta 	DStack
.011318	7a		ply				ply 								; line record address
.011319	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.01131c	85 22		sta $22				sta 	DLineNumber
.01131e	68		pla				pla 								; next command
.01131f	85 06		sta $06				sta 	DCodePtr
.011321	60		rts				rts
.011322					_FPROUnknown:
.011322	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011325	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>01132d	70 72 6f 63 65 64 75 72 65 00
.011337					Command_ENDPROC:
.011337	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.011339	b5 00		lda $00,x			lda 	$00,x
.01133b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.01133e	b0 2e		bcs $01136e			bcs 	_FENPUnstack
.011340	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011343	d0 11		bne $011356			bne 	_FENPFail
.011345	8a		txa				txa 								; unpick stack.
.011346	38		sec				sec
.011347	e9 06 00	sbc #$0006			sbc 	#6
.01134a	85 2a		sta $2a				sta 	DStack
.01134c	aa		tax				tax
.01134d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01134f	85 06		sta $06				sta 	DCodePtr
.011351	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011353	85 22		sta $22				sta 	DLineNumber
.011355	60		rts				rts
.011356					_FENPFail:
.011356	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011359	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011361	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.01136e					_FENPUnstack:
.01136e	20 c1 13	jsr $0113c1			jsr 	LocalRestore 				; restore off the stack.
.011371	80 c4		bra $011337			bra 	Command_ENDPROC

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/local.asm

.011373					Command_LOCAL:
.011373	20 9d 13	jsr $01139d			jsr 	LocalProcessVariable 		; make one variable 'local'
.011376	90 0e		bcc $011386			bcc 	_CLOFail
.011378	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.01137a	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.01137d	d0 06		bne $011385			bne 	_CLOExit
.01137f	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.011381	e6 06		inc $06				inc 	DCodePtr
.011383	80 ee		bra $011373			bra 	Command_Local
.011385					_CLOExit:
.011385	60		rts				rts
.011386					_CLOFail:
.011386	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011389	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>011391	6c 20 53 74 61 74 65 6d 65 6e 74 00
.01139d					LocalProcessVariable:
.01139d	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.01139f	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113a2	90 08		bcc $0113ac			bcc 	_LPVFail
.0113a4	29 00 10	and #$1000			and 	#IDArrayMask
.0113a7	d0 03		bne $0113ac			bne 	_LPVFail
.0113a9	ea		nop				nop
.0113aa	ea		nop				nop
.0113ab	ea		nop				nop
.0113ac					_LPVFail:
.0113ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0113af	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>0113b7	6c 20 43 6f 6d 6d 61 6e 64 00
.0113c1					LocalRestore:
.0113c1	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.0113c2					Command_List:
.0113c2	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.0113c5	20 17 07	jsr $010717		jsr 	StringTempAllocate
.0113c8	85 30		sta $30			sta 	DListBuffer						; save buffer.
.0113ca	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.0113cc	64 2e		stz $2e			stz 	DIndent2
.0113ce	64 32		stz $32			stz 	DTemp4+0 						; low number
.0113d0	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113d3	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0113d5	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0113d7	f0 3b		beq $011414		beq 	_CLIList
.0113d9	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113dc	f0 36		beq $011414		beq 	_CLIList
.0113de	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.0113e1	f0 13		beq $0113f6		beq 	_CLIComma
.0113e3	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; yes, first number
.0113e6	c0 00 00	cpy #$0000		cpy 	#0
.0113e9	d0 21		bne $01140c		bne 	_CLIError
.0113eb	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0113ed	85 34		sta $34			sta 	DTemp4+2
.0113ef	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.0113f1	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.0113f4	d0 1e		bne $011414		bne 	_CLIList
.0113f6					_CLIComma:
.0113f6	20 01 06	jsr $010601		jsr 	ExpectComma 					; skip comma
.0113f9	b2 06		lda ($06)		lda 	(DCodePtr)
.0113fb	f0 12		beq $01140f		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.0113fd	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011400	f0 0d		beq $01140f		beq 	_CLIToEnd
.011402	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; get end line.
.011405	85 34		sta $34			sta 	DTemp4+2
.011407	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.01140a	f0 08		beq $011414		beq 	_CLIList
.01140c					_CLIError:
.01140c	82 ae f1	brl $0105bd		brl 	SyntaxError
.01140f					_CLIToEnd:
.01140f	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011412	85 34		sta $34			sta 	DTemp4+2
.011414					_CLIList:
.011414	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011417	18		clc			clc
.011418	65 02		adc $02			adc 	DBaseAddress
.01141a	a8		tay			tay 									; put in Y
.01141b					_CLINextLine:
.01141b	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.01141e	f0 29		beq $011449		beq 	_CLIExit
.011420	20 b1 15	jsr $0115b1		jsr 	ScanIndent  					; scan for formatting.
.011423	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011426	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011428	90 14		bcc $01143e		bcc 	_CLIFollowLink
.01142a	c5 34		cmp $34			cmp 	DTemp4+2
.01142c	f0 02		beq $011430		beq 	_CLIShowLine
.01142e	b0 0e		bcs $01143e		bcs 	_CLIFollowLink
.011430					_CLIShowLine:
.011430	a5 30		lda $30			lda 	DListBuffer
.011432	20 4c 14	jsr $01144c		jsr 	Detokenise 						; detokenise it
.011435	5a		phy			phy
.011436	a8		tay			tay 									; print buffer out
.011437	20 58 06	jsr $010658		jsr 	PrintBasicString
.01143a	20 41 1d	jsr $011d41		jsr 	HWNewLine
.01143d	7a		ply			ply 									; get address
.01143e					_CLIFollowLink:
.01143e	98		tya			tya 									; follow link
.01143f	18		clc			clc
.011440	79 00 00	adc $0000,y		adc 	$0000,y
.011443	a8		tay			tay
.011444	20 5d 1d	jsr $011d5d		jsr 	HWCheckBreak 					; break key pressed.
.011447	f0 d2		beq $01141b		beq 	_CLINextLine
.011449					_CLIExit:
.011449	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01144b	60		rts			rts
.01144c					Detokenise:
.01144c	48		pha			pha
.01144d	da		phx			phx
.01144e	5a		phy			phy
.01144f	85 18		sta $18			sta 	DStartTempString 				; set the temp Command pointers to this buffer
.011451	1a		inc a			inc 	a
.011452	85 1a		sta $1a			sta 	DCurrentTempString
.011454	64 1c		stz $1c			stz		DConstantShift
.011456	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011459	92 18		sta ($18)		sta 	(DStartTempString)
.01145b	5a		phy			phy 									; save Y
.01145c	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01145f	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011462	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011465	20 c2 10	jsr $0110c2		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011468	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01146a	c5 2e		cmp $2e			cmp 	DIndent2
.01146c	90 02		bcc $011470		bcc 	_DTKSmaller
.01146e	a5 2e		lda $2e			lda 	DIndent2
.011470					_DTKSmaller:
.011470	0a		asl a			asl 	a
.011471	69 06 00	adc #$0006		adc 	#6
.011474	85 08		sta $08			sta 	DTemp1
.011476					_DTKPadLineNo:
.011476	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011479	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.01147c	b2 18		lda ($18)		lda 	(DStartTempString)
.01147e	29 ff 00	and #$00ff		and 	#$00FF
.011481	c5 08		cmp $08			cmp 	DTemp1
.011483	d0 f1		bne $011476		bne 	_DTKPadLineNo
.011485	68		pla			pla 									; get pointer
.011486	18		clc			clc 									; point to start of line
.011487	69 04 00	adc #$0004		adc 	#4
.01148a	a8		tay			tay 									; put back in Y.
.01148b					_DTKMainLoop:
.01148b	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01148e	d0 04		bne $011494		bne 	_DTKNotZero 					; if zero, return.
.011490	7a		ply			ply
.011491	fa		plx			plx
.011492	68		pla			pla
.011493	60		rts			rts
.011494					_DTKNotZero:
.011494	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011497	b0 1c		bcs $0114b5		bcs 	_DTKNotString
.011499	5a		phy			phy										; save token address on stack.
.01149a	c8		iny			iny 									; skip first token
.01149b	c8		iny			iny
.01149c	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01149f	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.0114a2	98		tya			tya 									; copy the string out.
.0114a3	20 51 07	jsr $010751		jsr 	StringCreateCopy
.0114a6	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0114a9	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.0114ac	68		pla			pla 									; get token, which is its own offset
.0114ad	a8		tay			tay
.0114ae	18		clc			clc
.0114af	79 00 00	adc $0000,y		adc 	$0000,y
.0114b2	a8		tay			tay
.0114b3	80 d6		bra $01148b		bra 	_DTKMainLoop
.0114b5					_DTKNotString:
.0114b5	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0114b8	b0 09		bcs $0114c3		bcs 	_DTKNotShift
.0114ba	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0114bd	85 1c		sta $1c			sta 	DConstantShift
.0114bf	c8		iny			iny 									; skip token.
.0114c0	c8		iny			iny
.0114c1	80 c8		bra $01148b		bra 	_DTKMainLoop
.0114c3					_DTKNotShift:
.0114c3	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.0114c6	b0 07		bcs $0114cf		bcs 	_DTKNotKeyword
.0114c8	c8		iny			iny 									; skip over token
.0114c9	c8		iny			iny
.0114ca	20 49 15	jsr $011549		jsr 	_DTKDecodeKeyword 				; decode it.
.0114cd	80 bc		bra $01148b		bra 	_DTKMainLoop
.0114cf					_DTKNotKeyword:
.0114cf	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0114d2	b0 18		bcs $0114ec		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0114d4	5a		phy			phy 									; save pointer
.0114d5	38		sec			sec  									; shift it in the range 0-32767
.0114d6	e9 00 40	sbc #$4000		sbc 	#$4000
.0114d9	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0114da	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0114dc	6a		ror a			ror 	a 								; rotate that into the constant value
.0114dd	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0114df	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0114e2	20 c2 10	jsr $0110c2		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114e5	64 1c		stz $1c			stz 	DConstantShift
.0114e7	7a		ply			ply 									; restore pointer
.0114e8	c8		iny			iny 									; skip token.
.0114e9	c8		iny			iny
.0114ea	80 9f		bra $01148b		bra 	_DTKMainLoop
.0114ec					_DTKIdentifier:
.0114ec	48		pha			pha 									; save token for typing at end
.0114ed					_DTKILoop:
.0114ed	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0114f0	20 19 15	jsr $011519		jsr 	_DTKIDecodeToken 				; decode it.
.0114f3	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0114f6	c8		iny			iny 									; skip it
.0114f7	c8		iny			iny
.0114f8	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0114fb	d0 f0		bne $0114ed		bne 	_DTKILoop
.0114fd	68		pla			pla 									; add $( as required.
.0114fe	48		pha			pha 									; comes from the first token.
.0114ff	29 00 20	and #$2000		and 	#IDTypeMask
.011502	f0 06		beq $01150a		beq 	_DTKINotString
.011504	a9 24 00	lda #$0024		lda 	#"$"
.011507	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.01150a					_DTKINotString:
.01150a	68		pla			pla
.01150b	29 00 10	and #$1000		and 	#IDArrayMask
.01150e	f0 06		beq $011516		beq 	_DTKINotArray
.011510	a9 28 00	lda #$0028		lda 	#"("
.011513	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.011516					_DTKINotArray:
.011516	82 72 ff	brl $01148b		brl 	_DTKMainLoop
.011519					_DTKIDecodeToken:
.011519	5a		phy			phy
.01151a	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01151d	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011520					_DTKIDivide:
.011520	38		sec			sec
.011521	e9 2d 00	sbc #$002d		sbc 	#45
.011524	c8		iny			iny
.011525	b0 f9		bcs $011520		bcs 	_DTKIDivide
.011527	69 2d 00	adc #$002d		adc 	#45
.01152a	20 33 15	jsr $011533		jsr 	_DTKIOutA 						; output low.
.01152d	98		tya			tya
.01152e	20 33 15	jsr $011533		jsr 	_DTKIOutA 						; output high
.011531	7a		ply			ply
.011532	60		rts			rts
.011533					_DTKIOutA:
.011533	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011536	f0 10		beq $011548		beq 	_DTKIOutExit
.011538	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01153b	90 04		bcc $011541		bcc 	_DTKIOutAlpha
.01153d	38		sec			sec  									; adjust for 0-9
.01153e	e9 4b 00	sbc #$004b		sbc 	#$4B
.011541					_DTKIOutAlpha:
.011541	18		clc			clc										; adjust for A-Z
.011542	69 60 00	adc #$0060		adc 	#96
.011545	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.011548					_DTKIOutExit:
.011548	60		rts			rts
.011549					_DTKDecodeKeyword:
.011549	48		pha			pha
.01154a	da		phx			phx
.01154b	5a		phy			phy
.01154c	a8		tay			tay 									; save token ID in Y
.01154d	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011550	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011553	48		pha			pha 									; save this flag on a stack
.011554	5a		phy			phy 									; save the token ID
.011555	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011558	d0 19		bne $011573		bne 	_DTKNotSpecial1
.01155a	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01155c	88		dey			dey
.01155d	b9 00 00	lda $0000,y		lda 	$0000,y
.011560	29 ff 00	and #$00ff		and 	#$00FF
.011563	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011566	f0 0b		beq $011573		beq 	_DTKNotSpecial1
.011568	c9 3a 00	cmp #$003a		cmp 	#":"
.01156b	f0 06		beq $011573		beq 	_DTKNotSpecial1
.01156d	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011570	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.011573					_DTKNotSpecial1:
.011573	68		pla			pla
.011574	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011577	a8		tay			tay 									; into Y.
.011578	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01157b					_DTKDWorkThrough:
.01157b	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01157c	f0 0f		beq $01158d		beq 	_DTKDFound
.01157e	86 08		stx $08			stx 	DTemp1
.011580	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; read the type/skip byte.
.011584	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011587	18		clc			clc
.011588	65 08		adc $08			adc 	DTemp1
.01158a	aa		tax			tax
.01158b	80 ee		bra $01157b		bra 	_DTKDWorkThrough
.01158d					_DTKDFound:
.01158d	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; get skip
.011591	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011594	3a		dec a			dec 	a
.011595	a8		tay			tay 									; put in Y
.011596					_DTKOut:
.011596	bf 9f 00 01	lda $01009f,x		lda 	TokenText+1,x 					; output it.
.01159a	29 ff 00	and #$00ff		and 	#$00FF
.01159d					_DTKNotLC:
.01159d	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.0115a0	e8		inx			inx
.0115a1	88		dey			dey
.0115a2	d0 f2		bne $011596		bne 	_DTKOut
.0115a4	68		pla			pla 									; trailing space.
.0115a5	d0 06		bne $0115ad		bne 	_DTKNotSpecial2
.0115a7	a9 20 00	lda #$0020		lda 	#" "
.0115aa	20 43 07	jsr $010743		jsr 	StringWriteCharacter
.0115ad					_DTKNotSpecial2:
.0115ad	7a		ply			ply
.0115ae	fa		plx			plx
.0115af	68		pla			pla
.0115b0	60		rts			rts
.0115b1					ScanIndent:
.0115b1	48		pha			pha
.0115b2	5a		phy			phy
.0115b3	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0115b5	85 2e		sta $2e			sta 	DIndent2
.0115b7	98		tya			tya
.0115b8	18		clc			clc 									; point to code.
.0115b9	69 04 00	adc #$0004		adc 	#4
.0115bc	a8		tay			tay
.0115bd					_SILoop:
.0115bd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0115c0	f0 35		beq $0115f7		beq 	_SIExit
.0115c2	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.0115c5	b0 08		bcs $0115cf		bcs 	_SICheckKeyword
.0115c7	98		tya			tya 									; skip string.
.0115c8	18		clc			clc
.0115c9	79 00 00	adc $0000,y		adc 	$0000,y
.0115cc	a8		tay			tay
.0115cd	80 ee		bra $0115bd		bra 	_SILoop
.0115cf					_SICheckKeyword:
.0115cf	29 00 e0	and #$e000		and 	#$E000
.0115d2	c9 00 20	cmp #$2000		cmp 	#$2000
.0115d5	f0 04		beq $0115db		beq 	_SIFoundKeyword
.0115d7					_SIAdvance:
.0115d7	c8		iny			iny 									; if not, loop round.
.0115d8	c8		iny			iny
.0115d9	80 e2		bra $0115bd		bra 	_SILoop
.0115db					_SIFoundKeyword:
.0115db	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0115de	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0115e1	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0115e4	f0 0d		beq $0115f3		beq 	_SIKeyPlus
.0115e6	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0115e9	d0 ec		bne $0115d7		bne 	_SIAdvance
.0115eb	c6 2c		dec $2c			dec 	DIndent
.0115ed	10 e8		bpl $0115d7		bpl 	_SIAdvance
.0115ef	64 2c		stz $2c			stz 	DIndent
.0115f1	80 e4		bra $0115d7		bra 	_SIAdvance
.0115f3					_SIKeyPlus:
.0115f3	e6 2c		inc $2c			inc 	DIndent
.0115f5	80 e0		bra $0115d7		bra 	_SIAdvance
.0115f7					_SIExit:
.0115f7	7a		ply			ply
.0115f8	68		pla			pla
.0115f9	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.0115fa					Command_PRINT:
.0115fa	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0115fc	f0 33		beq $011631			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0115fe	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.011601	f0 2e		beq $011631			beq 	_FPRExitCR
.011603	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011606	f0 23		beq $01162b			beq 	_FPRSkipLoop
.011608	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.01160b	f0 1b		beq $011628			beq 	_FPRNewLine
.01160d	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.011610	f0 11		beq $011623			beq 	_FPRTab
.011612					_FPRExpression:
.011612	20 01 02	jsr $010201			jsr 	Evaluate 					; evaluate a string or integer.
.011615	b0 06		bcs $01161d			bcs 	_FPRHaveString
.011617	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01161a	20 ba 10	jsr $0110ba			jsr 	ConvertToString
.01161d					_FPRHaveString:
.01161d	a8		tay				tay 								; print the basic String.
.01161e	20 58 06	jsr $010658			jsr 	PrintBASICString
.011621	80 d7		bra $0115fa			bra 	Command_Print 				; and go round again.
.011623					_FPRTab:
.011623	20 56 1d	jsr $011d56			jsr 	HWTab
.011626	80 03		bra $01162b			bra 	_FPRSkipLoop
.011628					_FPRNewLine:
.011628	20 41 1d	jsr $011d41			jsr 	HWNewLine
.01162b					_FPRSkipLoop:
.01162b	e6 06		inc $06				inc 	DCodePtr
.01162d	e6 06		inc $06				inc 	DCodePtr
.01162f	80 c9		bra $0115fa			bra 	Command_Print
.011631					_FPRExitCR:
.011631	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011633	88		dey				dey
.011634	88		dey				dey
.011635	b9 00 00	lda $0000,y			lda 	$0000,y
.011638	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01163b	f0 08		beq $011645			beq 	_FPRExit
.01163d	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.011640	f0 03		beq $011645			beq 	_FPRExit
.011642	20 41 1d	jsr $011d41			jsr 	HWNewLine 					; print a new line.
.011645					_FPRExit:
.011645	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011646					Command_IF:
.011646	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; check success.
.011649	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01164b	05 08		ora $08				ora 	DTemp1
.01164d	a8		tay				tay 								; success flag in Y.
.01164e	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011650	c9 4b 3a	cmp #$3a4b			cmp 	#thenTokenID
.011653	d0 32		bne $011687			bne 	_FIFExtended 				; if so, go to the extended IF.
.011655	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011657	e6 06		inc $06				inc 	DCodePtr
.011659	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01165c	f0 0f		beq $01166d			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01165e	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011660	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011663	90 21		bcc $011686			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011665	c9 00 c0	cmp #$c000			cmp 	#$C000
.011668	b0 1c		bcs $011686			bcs 	_FIFContinue
.01166a	4c ea 18	jmp $0118ea			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01166d					_FIFEndOfLine:
.01166d	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.01166f	f0 15		beq $011686			beq 	_FIFContinue 				; if done so, continue.
.011671	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011674	90 06		bcc $01167c			bcc 	_FIFStringConstant
.011676	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011678	e6 06		inc $06				inc 	DCodePtr
.01167a	80 f1		bra $01166d			bra 	_FIFEndOfLine
.01167c					_FIFStringConstant:
.01167c	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01167f	18		clc				clc
.011680	65 06		adc $06				adc 	DCodePtr
.011682	85 06		sta $06				sta 	DCodePtr
.011684	80 e7		bra $01166d			bra 	_FIFEndOfLine
.011686					_FIFContinue:
.011686	60		rts				rts
.011687					_FIFExtended:
.011687	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011689	e6 2a		inc $2a				inc 	DStack
.01168b	a9 46 3c	lda #$3c46			lda 	#ifTokenID
.01168e	a6 2a		ldx $2a				ldx 	DStack
.011690	95 00		sta $00,x			sta 	$00,x
.011692	98		tya				tya 								; see if the test was passed.
.011693	f0 01		beq $011696			beq 	_FIXSkip 					; if zero then it has failed.
.011695	60		rts				rts 								; test passed, so continue executing
.011696					_FIXSkip:
.011696	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011699	a2 4c 3a	ldx #$3a4c			ldx 	#endifTokenID 				; at the same level.
.01169c	20 fc 16	jsr $0116fc			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01169f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0116a1	e6 06		inc $06				inc 	DCodePtr
.0116a3	c9 4c 3a	cmp #$3a4c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0116a6	d0 04		bne $0116ac			bne 	_FIXNoThrow
.0116a8	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116aa	c6 2a		dec $2a				dec 	DStack
.0116ac					_FIXNoThrow:
.0116ac	60		rts				rts
.0116ad					Handler_ELSE:
.0116ad	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116af	b5 00		lda $00,x			lda 	$00,x
.0116b1	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.0116b4	d0 12		bne $0116c8			bne 	_HEBadStructure
.0116b6	a9 4c 3a	lda #$3a4c			lda 	#endifTokenID 				; only searching one token.
.0116b9	a2 00 00	ldx #$0000			ldx 	#$0000
.0116bc	20 fc 16	jsr $0116fc			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0116bf	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0116c1	e6 06		inc $06				inc 	DCodePtr
.0116c3	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116c5	c6 2a		dec $2a				dec 	DStack
.0116c7	60		rts				rts
.0116c8					_HEBadStructure:
.0116c8	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0116cb	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116d3	68 6f 75 74 20 49 66 00
.0116db					Handler_ENDIF:
.0116db	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116dd	b5 00		lda $00,x			lda 	$00,x
.0116df	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.0116e2	d0 05		bne $0116e9			bne 	_HEIBadStructure
.0116e4	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116e6	c6 2a		dec $2a				dec 	DStack
.0116e8	60		rts				rts
.0116e9					_HEIBadStructure:
.0116e9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0116ec	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116f4	68 6f 75 74 20 49 66 00
.0116fc					ScanForwardLevel:
.0116fc	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0116fe	86 0a		stx $0a				stx 	DTemp1+2
.011700	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011702	85 0c		sta $0c				sta 	DTemp2
.011704	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011707					_SFLLoop:
.011707	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01170a	d0 0d		bne $011719			bne 	_SFLNoCheck 				; we're in a substructure.
.01170c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01170e	f0 09		beq $011719			beq 	_SFLNoCheck 				; don't check zero
.011710	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011712	f0 04		beq $011718			beq 	_SFLFound
.011714	c5 0a		cmp $0a				cmp 	DTemp1+2
.011716	d0 01		bne $011719			bne 	_SFLNoCheck
.011718					_SFLFound:
.011718	60		rts				rts
.011719					_SFLNoCheck:
.011719	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01171b	f0 4f		beq $01176c			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01171d	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011720	90 40		bcc $011762			bcc 	_SFLSkipString 				; then handle that.
.011722	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011724	e6 06		inc $06				inc 	DCodePtr
.011726	a8		tay				tay 								; put token in Y temporarily.
.011727	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01172a	c9 00 20	cmp #$2000			cmp 	#$2000
.01172d	d0 d8		bne $011707			bne 	_SFLLoop
.01172f	98		tya				tya 								; get the token back.
.011730	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011733	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011736	f0 cf		beq $011707			beq 	_SFLLoop
.011738	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01173b	90 ca		bcc $011707			bcc 	_SFLLoop
.01173d	e8		inx				inx 								; increment the level.
.01173e	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011741	f0 c4		beq $011707			beq 	_SFLLoop
.011743	ca		dex				dex 								; decrement the level
.011744	ca		dex				dex 								; one overdoes the previous inx.
.011745	10 c0		bpl $011707			bpl 	_SFLLoop 					; if gone -ve then error.
.011747					_SFLError:
.011747	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011749	85 22		sta $22				sta 	DLineNumber
.01174b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01174e	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011756	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011762					_SFLSkipString:
.011762	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011765	18		clc				clc
.011766	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011768	85 06		sta $06				sta 	DCodePtr
.01176a	80 9b		bra $011707			bra 	_SFLLoop 					; go round again.
.01176c					_SFLNextLine:
.01176c	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.01176e	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011771	f0 d4		beq $011747			beq 	_SFLError 					; if zero, then there's no more code to search.
.011773	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011776	85 22		sta $22				sta 	DLineNumber
.011778	18		clc				clc
.011779	a5 06		lda $06				lda 	DCodePtr
.01177b	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01177e	85 06		sta $06				sta 	DCodePtr
.011780	80 85		bra $011707			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.011782					Command_FOR:
.011782	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011784	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011787	d0 4e		bne $0117d7			bne		_CFOBad
.011789	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find variable
.01178c	b0 03		bcs $011791			bcs 	_CFOExists
.01178e	20 4f 04	jsr $01044f			jsr 	VariableCreate				; create it and skip token.
.011791					_CFOExists:
.011791	48		pha				pha 								; push variable address on stack
.011792	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011795	20 de 05	jsr $0105de			jsr 	ExpectToken
.011798	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the start value
.01179b	bb		tyx				tyx 								; put high value in X
.01179c	7a		ply				ply 								; address of for variable in Y
.01179d	99 00 00	sta $0000,y			sta 	$0000,y
.0117a0	8a		txa				txa
.0117a1	99 02 00	sta $0002,y			sta 	$0002,y
.0117a4	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.0117a7	20 de 05	jsr $0105de			jsr 	ExpectToken
.0117aa	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0117ac	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0117ae	95 02		sta $02,x			sta 	$02,x
.0117b0	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117b2	95 04		sta $04,x			sta 	$04,x
.0117b4	98		tya				tya 								; save variable address at +6
.0117b5	95 06		sta $06,x			sta 	$06,x
.0117b7	a9 47 3c	lda #$3c47			lda 	#forTokenID 				; save for token at +8
.0117ba	95 08		sta $08,x			sta 	$08,x
.0117bc	8a		txa				txa 								; add 8 to stack position
.0117bd	18		clc				clc
.0117be	69 08 00	adc #$0008			adc 	#8
.0117c1	85 2a		sta $2a				sta 	DStack
.0117c3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0117c6	b2 06		lda ($06)			lda 	(DCodePtr)
.0117c8	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.0117cb	d0 09		bne $0117d6			bne 	_CFONoStep
.0117cd	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.0117d0	20 de 05	jsr $0105de			jsr 	ExpectToken
.0117d3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; and whatever the step is.
.0117d6					_CFONoStep:
.0117d6	60		rts				rts
.0117d7					_CFOBad:
.0117d7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0117da	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0117e2	76 61 72 69 61 62 6c 65 00
.0117eb					Command_NEXT:
.0117eb	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.0117ed	b5 00		lda $00,x			lda 	$00,x
.0117ef	c9 47 3c	cmp #$3c47			cmp 	#forTokenID 				; if not FOR then error
.0117f2	f0 14		beq $011808			beq 	_CNXOk
.0117f4	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0117f7	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0117ff	68 6f 75 74 20 46 6f 72 00
.011808					_CNXOk:
.011808	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01180a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01180d	90 22		bcc $011831			bcc 	_CNXNoVariable
.01180f	20 9c 03	jsr $01039c			jsr 	VariableFind 				; get address of variable.
.011812	90 08		bcc $01181c			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011814	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011816	ca		dex				dex
.011817	ca		dex				dex
.011818	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01181a	f0 15		beq $011831			beq 	_CNXNoVariable 				; then continue
.01181c					_CNXNextVar:
.01181c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01181f	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011827	20 76 61 72 69 61 62 6c 65 00
.011831					_CNXNoVariable:
.011831	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011833	48		pha				pha
.011834	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011836	38		sec				sec
.011837	e9 08 00	sbc #$0008			sbc 	#8
.01183a	85 2a		sta $2a				sta 	DStack
.01183c	aa		tax				tax 								; X points to the stack.
.01183d	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01183f	85 06		sta $06				sta 	DCodePtr
.011841	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the target constant
.011844	5a		phy				phy 								; save the target on the stack
.011845	48		pha				pha
.011846	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011849	85 08		sta $08				sta 	DTemp1
.01184b	64 0a		stz $0a				stz 	DTemp1+2
.01184d	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01184f	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.011852	d0 0b		bne $01185f			bne 	_CNXNoStep
.011854	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011856	e6 06		inc $06				inc 	DCodePtr
.011858	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; work out the step.
.01185b	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.01185d	84 0a		sty $0a				sty 	DTemp1+2
.01185f					_CNXNoStep:
.01185f	68		pla				pla 								; save the Target in DTemp2
.011860	85 0c		sta $0c				sta 	DTemp2
.011862	68		pla				pla
.011863	85 0e		sta $0e				sta 	DTemp2+2
.011865	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011867	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.011869	a8		tay				tay
.01186a	18		clc				clc
.01186b	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.01186e	65 08		adc $08				adc 	DTemp1
.011870	99 00 00	sta $0000,y			sta 	$0000,y
.011873	b9 02 00	lda $0002,y			lda 	$0002,y
.011876	65 0a		adc $0a				adc 	DTemp1+2
.011878	99 02 00	sta $0002,y			sta 	$0002,y
.01187b	38		sec				sec
.01187c	a5 0c		lda $0c				lda 	DTemp2
.01187e	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011881	85 0c		sta $0c				sta 	DTemp2
.011883	a5 0e		lda $0e				lda 	DTemp2+2
.011885	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011888	85 0e		sta $0e				sta 	DTemp2+2
.01188a	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01188c	f0 0a		beq $011898			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01188e	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011890	45 0a		eor $0a				eor 	DTemp1+2
.011892	10 04		bpl $011898			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011894	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011895	85 06		sta $06				sta 	DCodePtr
.011897	60		rts				rts
.011898					_CNXLoopAgain:
.011898	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011899	18		clc				clc
.01189a	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01189c	aa		tax				tax
.01189d	69 08 00	adc #$0008			adc 	#8
.0118a0	85 2a		sta $2a				sta 	DStack
.0118a2	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0118a4	85 22		sta $22				sta 	DLineNumber
.0118a6	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.0118a7					Command_ONGOTO:
.0118a7	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; on what GOTO :)
.0118aa	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0118ad	d0 25		bne $0118d4			bne 	_FOGoFail
.0118af	c9 00 00	cmp #$0000			cmp 	#0
.0118b2	f0 20		beq $0118d4			beq 	_FOGoFail 					; we start with index = 1
.0118b4	48		pha				pha 								; save count on stack
.0118b5	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.0118b8	20 de 05	jsr $0105de			jsr 	ExpectToken
.0118bb	fa		plx				plx 								; put count in X.
.0118bc					_FOGoLoop:
.0118bc	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0118be	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118c1	90 73		bcc $011936			bcc 	FGOFail 					; if not, then we have an error.
.0118c3	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118c6	b0 6e		bcs $011936			bcs 	FGOFail
.0118c8	ca		dex				dex 								; subtract one, if done, call GOTO code
.0118c9	f0 1f		beq $0118ea			beq 	Command_GOTO
.0118cb	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0118cd	e6 06		inc $06				inc 	DCodePtr
.0118cf	20 01 06	jsr $010601			jsr 	ExpectComma 				; expect a comma
.0118d2	80 e8		bra $0118bc			bra 	_FOGoLoop 					; and loop round.
.0118d4					_FOGoFail:
.0118d4	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0118d7	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0118df	47 6f 74 6f 20 76 61 6c 75 65 00
.0118ea					Command_GOTO:
.0118ea	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0118ec	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118ef	90 45		bcc $011936			bcc 	FGOFail 					; we don't do calculate line numbers.
.0118f1	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118f4	b0 40		bcs $011936			bcs 	FGOFail
.0118f6	38		sec				sec 								; convert to 0-32767
.0118f7	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0118fa	aa		tax				tax
.0118fb	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0118fe	18		clc				clc
.0118ff	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011901	a8		tay				tay
.011902					_FGOSearch:
.011902	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011905	f0 18		beq $01191f			beq 	_FGOUnknown
.011907	8a		txa				txa 								; does it match line number ?
.011908	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01190b	f0 08		beq $011915			beq 	_FGOFound 					; yes, then found.
.01190d	98		tya				tya 								; no follow the link
.01190e	18		clc				clc
.01190f	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011912	a8		tay				tay
.011913	80 ed		bra $011902			bra 	_FGOSearch 					; and keep looking
.011915					_FGOFound:
.011915	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011917	98		tya				tya 								; Y + 4 is the code pointer.
.011918	18		clc				clc 								; (skipping link and line #)
.011919	69 04 00	adc #$0004			adc 	#4
.01191c	85 06		sta $06				sta 	DCodePtr
.01191e	60		rts				rts									; and continue
.01191f					_FGOUnknown:
.01191f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011922	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01192a	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011936					FGOFail:
.011936	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011939	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011941	20 4e 75 6d 62 65 72 00
.011949					Command_GOSUB:
.011949	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01194b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01194d	18		clc				clc
.01194e	69 02 00	adc #$0002			adc 	#2
.011951	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011953	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011955	95 04		sta $04,x			sta 	$04,x
.011957	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.01195a	95 06		sta $06,x			sta 	$06,x
.01195c	8a		txa				txa 								; advance stack by 6.
.01195d	18		clc				clc
.01195e	69 06 00	adc #$0006			adc 	#6
.011961	85 2a		sta $2a				sta 	DStack
.011963	80 85		bra $0118ea			bra 	Command_GOTO 				; and do a GOTO.
.011965					Command_RETURN:
.011965	a6 2a		ldx $2a				ldx 	DStack
.011967	b5 00		lda $00,x			lda 	$00,x
.011969	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.01196c	d0 11		bne $01197f			bne 	_FRetFail
.01196e	8a		txa				txa 								; unpick stack.
.01196f	38		sec				sec
.011970	e9 06 00	sbc #$0006			sbc 	#6
.011973	85 2a		sta $2a				sta 	DStack
.011975	aa		tax				tax
.011976	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011978	85 06		sta $06				sta 	DCodePtr
.01197a	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01197c	85 22		sta $22				sta 	DLineNumber
.01197e	60		rts				rts
.01197f					_FRetFail:
.01197f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011982	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01198a	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011997					Command_REPEAT:
.011997	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011999	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01199b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01199d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01199f	95 04		sta $04,x			sta 	$04,x
.0119a1	a9 44 3c	lda #$3c44			lda 	#repeatTokenID 				; save repeat token at +6
.0119a4	95 06		sta $06,x			sta 	$06,x
.0119a6	8a		txa				txa 								; advance stack by 6.
.0119a7	18		clc				clc
.0119a8	69 06 00	adc #$0006			adc 	#6
.0119ab	85 2a		sta $2a				sta 	DStack
.0119ad	60		rts				rts
.0119ae					Command_UNTIL:
.0119ae	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0119b0	b5 00		lda $00,x			lda 	$00,x
.0119b2	c9 44 3c	cmp #$3c44			cmp 	#repeatTokenID
.0119b5	d0 26		bne $0119dd			bne 	_FUNFail
.0119b7	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; .... until what.
.0119ba	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.0119bd	d0 15		bne $0119d4			bne 	_FUNExit
.0119bf	c9 00 00	cmp #$0000			cmp 	#0
.0119c2	d0 10		bne $0119d4			bne 	_FUNExit
.0119c4	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0119c6	38		sec				sec
.0119c7	e9 06 00	sbc #$0006			sbc 	#6
.0119ca	aa		tax				tax
.0119cb	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119cd	85 06		sta $06				sta 	DCodePtr
.0119cf	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119d1	85 22		sta $22				sta 	DLineNumber
.0119d3	60		rts				rts
.0119d4					_FUNExit:
.0119d4	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0119d6	38		sec				sec
.0119d7	e9 06 00	sbc #$0006			sbc 	#6
.0119da	85 2a		sta $2a				sta 	DStack
.0119dc	60		rts				rts
.0119dd					_FUNFail:
.0119dd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119e0	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0119e8	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.0119f5					Command_WHILE:
.0119f5	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0119f7	48		pha				pha 								; save on stack
.0119f8	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; while what.
.0119fb	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0119fe	d0 14		bne $011a14			bne 	_FWHExecute
.011a00	c9 00 00	cmp #$0000			cmp 	#0
.011a03	d0 0f		bne $011a14			bne 	_FWHExecute
.011a05	68		pla				pla 								; throw away current instruction
.011a06	a9 49 3a	lda #$3a49			lda 	#wendTokenID 				; skip to WEND
.011a09	a2 00 00	ldx #$0000			ldx 	#0
.011a0c	20 fc 16	jsr $0116fc			jsr 	ScanForwardLevel 			; scan forward checking structures
.011a0f	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011a11	e6 06		inc $06				inc 	DCodePtr
.011a13	60		rts				rts
.011a14					_FWHExecute:
.011a14	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a16	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011a17	3a		dec a				dec 	a
.011a18	3a		dec a				dec 	a
.011a19	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a1b	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a1d	95 04		sta $04,x			sta 	$04,x
.011a1f	a9 45 3c	lda #$3c45			lda 	#whileTokenID 				; save while token at +6
.011a22	95 06		sta $06,x			sta 	$06,x
.011a24	8a		txa				txa 								; advance stack by 6.
.011a25	18		clc				clc
.011a26	69 06 00	adc #$0006			adc 	#6
.011a29	85 2a		sta $2a				sta 	DStack
.011a2b	60		rts				rts
.011a2c					Command_WEND:
.011a2c	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011a2e	b5 00		lda $00,x			lda 	$00,x
.011a30	c9 45 3c	cmp #$3c45			cmp 	#whileTokenID
.011a33	d0 11		bne $011a46			bne 	_FWEFail
.011a35	8a		txa				txa 								; unpick stack and always loop back.
.011a36	38		sec				sec 								; we do the check at the top.
.011a37	e9 06 00	sbc #$0006			sbc 	#6
.011a3a	85 2a		sta $2a				sta 	DStack
.011a3c	aa		tax				tax
.011a3d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a3f	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011a41	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a43	85 22		sta $22				sta 	DLineNumber
.011a45	60		rts				rts
.011a46					_FWEFail:
.011a46	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a49	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011a51	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011a5c					Command_END:
.011a5c	4c 3f 1e	jmp $011e3f			jmp 	WarmStart
.011a5f					Command_RUN:
.011a5f	20 ea 1a	jsr $011aea			jsr 	Command_CLEAR 				; clear all variables.
.011a62	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011a64	18		clc				clc
.011a65	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011a68	80 0c		bra $011a76			bra 	FRun_NextLineNumber
.011a6a					RUNExecuteTokenBuffer:
.011a6a	64 22		stz $22				stz 	DLineNumber					; zero line number
.011a6c	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011a6f	18		clc				clc
.011a70	65 02		adc $02				adc 	DBaseAddress
.011a72	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011a74	80 12		bra $011a88			bra 	FRun_NextInstruction
.011a76					FRun_NextLineNumber:
.011a76	a8		tay				tay 								; put in Y
.011a77	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011a7a	f0 e0		beq $011a5c			beq 	Command_END 				; if zero, off the end of the program, so END the program
.011a7c	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011a7f	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011a81	98		tya				tya 								; get address back
.011a82	18		clc				clc 								; skip over the link/line number
.011a83	69 04 00	adc #$0004			adc 	#4
.011a86	85 06		sta $06				sta 	DCodePtr
.011a88					FRun_NextInstruction:
.011a88	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011a8a	20 5d 1d	jsr $011d5d			jsr 	HWCheckBreak 				; break key pressed.
.011a8d	d0 40		bne $011acf			bne 	_FRun_Break
.011a8f	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011a91	f0 32		beq $011ac5			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011a93	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011a96	f0 18		beq $011ab0			beq 	_FRun_Colon
.011a98	a8		tay				tay 								; save in Y
.011a99	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011a9c	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011a9f	d0 15		bne $011ab6			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011aa1	98		tya				tya 								; get token back
.011aa2	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011aa5	0a		asl a				asl 	a 							; double it into X
.011aa6	aa		tax				tax
.011aa7	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011aa9	e6 06		inc $06				inc 	DCodePtr
.011aab	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011aae	80 d8		bra $011a88			bra 	FRun_NextInstruction 		; do the following instruction.
.011ab0					_FRun_Colon:
.011ab0	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011ab2	e6 06		inc $06				inc 	DCodePtr
.011ab4	80 d2		bra $011a88			bra 	FRun_NextInstruction 		; do the following instruction.
.011ab6					_FRun_TryLET:
.011ab6	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011ab8	c9 00 c0	cmp #$c000			cmp 	#$C000
.011abb	90 05		bcc $011ac2			bcc		_FRunSyntax 				; no, must be syntax.
.011abd	20 4a 12	jsr $01124a			jsr 	Command_LET 				; try as a LET.
.011ac0	80 c6		bra $011a88			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011ac2					_FRunSyntax:
.011ac2	82 f8 ea	brl $0105bd			brl 	SyntaxError
.011ac5					_FRun_EndInstruction:
.011ac5	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011ac7	f0 0f		beq $011ad8			beq 	_FRun_WarmStart
.011ac9	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011acb	1a		inc a				inc 	a 							; go to link for next line
.011acc	1a		inc a				inc 	a
.011acd	80 a7		bra $011a76			bra 	FRun_NextLineNumber
.011acf					_FRun_Break:
.011acf	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011ad2	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011ad8					_FRun_WarmStart:
.011ad8	82 64 03	brl $011e3f			brl 	WarmStart
.011adb					Command_NEW:
.011adb	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011ade	18		clc				clc
.011adf	65 02		adc $02				adc 	DBaseAddress
.011ae1	a8		tay				tay
.011ae2	a9 00 00	lda #$0000			lda 	#$0000
.011ae5	99 00 00	sta $0000,y			sta 	$0000,y
.011ae8	80 00		bra $011aea			bra 	Command_Clear
.011aea					Command_CLEAR:
.011aea	20 f6 1a	jsr $011af6			jsr 	ClearVariablesPointersAndStacks
.011aed	60		rts				rts
.011aee					Command_STOP:
.011aee	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011af1	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011af6					ClearVariablesPointersAndStacks:
.011af6	a9 80 00	lda #$0080			lda 	#BASStack
.011af9	85 2a		sta $2a				sta 	DStack
.011afb	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011afd	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011b00	a9 00 00	lda #$0000			lda 	#$0000
.011b03	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b05	20 31 1b	jsr $011b31			jsr 	FindCodeEnd 				; find where the program ends.
.011b08	a8		tay				tay 								; Y points to it.
.011b09	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011b0c	99 02 00	sta $0002,y			sta 	$0002,y
.011b0f	99 04 00	sta $0004,y			sta 	$0004,y
.011b12	98		tya				tya 								; start of working memory up
.011b13	18		clc				clc
.011b14	69 06 00	adc #$0006			adc 	#6
.011b17	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011b1a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b1c	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b1f					_FCLoop:
.011b1f	a9 00 00	lda #$0000			lda 	#$0000
.011b22	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b24	c8		iny				iny
.011b25	c8		iny				iny
.011b26	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011b29	d0 f4		bne $011b1f			bne 	_FCLoop
.011b2b	64 16		stz $16				stz 	DTempStringPointer
.011b2d	20 72 06	jsr $010672			jsr 	StringResetPermanent
.011b30	60		rts				rts
.011b31					FindCodeEnd:
.011b31	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011b34	18		clc				clc
.011b35	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011b37	a8		tay				tay
.011b38					_FCELoop:
.011b38	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011b3b	f0 08		beq $011b45			beq 	_FCEExit
.011b3d	98		tya				tya 								; add offset
.011b3e	18		clc				clc
.011b3f	79 00 00	adc $0000,y			adc 	$0000,y
.011b42	a8		tay				tay
.011b43	80 f3		bra $011b38			bra 	_FCELoop
.011b45					_FCEExit:
.011b45	98		tya				tya 								; return in A
.011b46	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011b47					Function_Dim:
.011b47	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011b49	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011b4c	f0 2e		beq $011b7c			beq		_FDIMNotArray 				; no, error.
.011b4e	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find it.
.011b51	b0 34		bcs $011b87			bcs 	_FDIMExists 				; if it does, that's an error.
.011b53	20 4f 04	jsr $01044f			jsr 	VariableCreate 				; create the empty variable.
.011b56	48		pha				pha 								; save array address on the stack.
.011b57	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; evaluate the size
.011b5a	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check the ) following.
.011b5d	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011b60	d0 3b		bne $011b9d			bne 	_FDIMSize
.011b62	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011b65	f0 36		beq $011b9d			beq 	_FDIMSize
.011b67	20 ae 1b	jsr $011bae			jsr 	DIMCreateArrayBlock 		; create and return empty array, size A+1.
.011b6a	7a		ply				ply 								; this is where it goes.
.011b6b	99 00 00	sta $0000,y			sta 	$0000,y 					; pointer to first array level block.
.011b6e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011b70	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011b73	d0 06		bne $011b7b			bne 	_FDIMExit
.011b75	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011b77	e6 06		inc $06				inc 	DCodePtr
.011b79	80 cc		bra $011b47			bra 	Function_DIM 				; and do another
.011b7b					_FDIMExit:
.011b7b	60		rts				rts
.011b7c					_FDIMNotArray:
.011b7c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b7f	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011b87					_FDIMExists:
.011b87	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b8a	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011b92	65 64 69 6d 65 6e 73 69 6f 6e 00
.011b9d					_FDIMSize:
.011b9d	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011ba0	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011ba8	6c 61 72 67 65 00
.011bae					DIMCreateArrayBlock:
.011bae	48		pha				pha
.011baf	1a		inc a				inc 	a 							; work out size + 1 x 4
.011bb0	0a		asl a				asl 	a
.011bb1	b0 34		bcs $011be7			bcs 	_DCABFail
.011bb3	0a		asl a				asl 	a
.011bb4	b0 31		bcs $011be7			bcs 	_DCABFail
.011bb6	18		clc				clc 								; 2 for size word.
.011bb7	69 02 00	adc #$0002			adc 	#2
.011bba	b0 2b		bcs $011be7			bcs 	_DCABFail
.011bbc	85 08		sta $08				sta 	DTemp1
.011bbe	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; add to pointer.
.011bc1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011bc3	48		pha				pha 								; save return address
.011bc4	18		clc				clc
.011bc5	65 08		adc $08				adc 	DTemp1
.011bc7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bc9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011bcc	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.011bce	b0 17		bcs $011be7			bcs 	_DCABFail
.011bd0	a6 08		ldx $08				ldx 	DTemp1
.011bd2	7a		ply				ply
.011bd3	5a		phy				phy
.011bd4					_DCABClear:
.011bd4	a9 00 00	lda #$0000			lda 	#0
.011bd7	99 00 00	sta $0000,y			sta 	$0000,y
.011bda	c8		iny				iny
.011bdb	c8		iny				iny
.011bdc	ca		dex				dex
.011bdd	ca		dex				dex
.011bde	d0 f4		bne $011bd4			bne 	_DCABClear
.011be0	7a		ply				ply 								; restore start address
.011be1	68		pla				pla 								; restore high index
.011be2	99 00 00	sta $0000,y			sta 	$0000,y 					; save high index
.011be5	98		tya				tya 								; return in A.
.011be6	60		rts				rts
.011be7					_DCABFail:
.011be7	82 e3 e9	brl $0105cd			brl 	OutOfMemoryError

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011bea					Command_POKE:
.011bea	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011bed	48		pha				pha	 								; save on stack
.011bee	5a		phy				phy
.011bef	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011bf2	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011bf5	fa		plx				plx 								; pull address and store in DTemp1
.011bf6	86 0a		stx $0a				stx 	DTemp1+2
.011bf8	fa		plx				plx
.011bf9	86 08		stx $08				stx 	DTemp1+0
.011bfb	e2 20		sep #$20			sep 	#$20 						; byte mode
.011bfd	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011bff	c2 20		rep #$20			rep 	#$20 						; word mode
.011c01	60		rts				rts
.011c02					Command_DOKE:
.011c02	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c05	48		pha				pha	 								; save on stack
.011c06	5a		phy				phy
.011c07	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011c0a	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c0d	fa		plx				plx 								; pull address and store in DTemp1
.011c0e	86 0a		stx $0a				stx 	DTemp1+2
.011c10	fa		plx				plx
.011c11	86 08		stx $08				stx 	DTemp1+0
.011c13	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c15	60		rts				rts
.011c16					Command_LOKE:
.011c16	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c19	48		pha				pha	 								; save on stack
.011c1a	5a		phy				phy
.011c1b	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011c1e	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c21	fa		plx				plx 								; pull address and store in DTemp1
.011c22	86 0a		stx $0a				stx 	DTemp1+2
.011c24	fa		plx				plx
.011c25	86 08		stx $08				stx 	DTemp1+0
.011c27	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c29	98		tya				tya
.011c2a	a0 02 00	ldy #$0002			ldy 	#2
.011c2d	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c2f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.011c30					Command_ASSERT:
.011c30	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; something that returns an integer.
.011c33	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011c35	05 08		ora $08				ora 	Dtemp1
.011c37	f0 01		beq $011c3a			beq 	_FAssFail
.011c39	60		rts				rts
.011c3a					_FAssFail:
.011c3a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c3d	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011c45	61 69 6c 65 64 00
.011c4b					Command_CLS:
.011c4b	20 d7 1c	jsr $011cd7			jsr 	HWClearScreen
.011c4e	60		rts				rts
.011c4f					Command_REM:
.011c4f	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c51	f0 0f		beq $011c62			beq 	_FRemExit 					; no comment present
.011c53	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011c56	f0 0a		beq $011c62			beq 	_FRemExit 					; no comment present
.011c58	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011c5b	b0 06		bcs $011c63			bcs 	_FRemSyntax
.011c5d	18		clc				clc 								; add to DCodePtr
.011c5e	65 06		adc $06				adc 	DCodePtr
.011c60	85 06		sta $06				sta 	DCodePtr
.011c62					_FRemExit:
.011c62	60		rts				rts
.011c63					_FRemSyntax:
.011c63	82 57 e9	brl $0105bd			brl 	SyntaxError
.011c66					Command_LINK:
.011c66	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; call address same page.
.011c69	85 08		sta $08				sta 	DTemp1 						; target address
.011c6b	84 0a		sty $0a				sty 	DTemp1+2
.011c6d	7b		tdc				tda 								; work out what the actual address is
.011c6e	18		clc				clc
.011c6f	69 08 00	adc #$0008			adc 	#DTemp1
.011c72	8f a7 1c 01	sta $011ca7			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011c76	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011c78	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011c7b	48		pha				pha
.011c7c	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011c7f	aa		tax				tax
.011c80	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011c83	a8		tay				tay
.011c84	68		pla				pla
.011c85	22 a6 1c 01	jsl $011ca6			jsl 	_FLIExecuteIt
.011c89	5a		phy				phy 								; save Y
.011c8a	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011c8c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c8f	8a		txa				txa
.011c90	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011c93	68		pla				pla
.011c94	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011c97	c8		iny				iny 								; point to their high bytes and clear them
.011c98	c8		iny				iny
.011c99	a9 00 00	lda #$0000			lda 	#0
.011c9c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c9f	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011ca2	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011ca5	60		rts				rts
.011ca6					_FLIExecuteIt:
.011ca6	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.
.011ca9					Command_VDU:
.011ca9	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get integer to YA.
.011cac	a8		tay				tay 								; put into Y
.011cad	29 ff 00	and #$00ff			and 	#$00FF 						; mask out LSB
.011cb0	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar 				; print the LSB.
.011cb3	b2 06		lda ($06)			lda 	(DCodePtr)
.011cb5	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if , goto next
.011cb8	f0 0e		beq $011cc8			beq 	_CVDUNext
.011cba	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; if ; print MSB and goto next
.011cbd	f0 01		beq $011cc0			beq 	_CVDUHighByte
.011cbf					_CVDUExit:
.011cbf	60		rts				rts
.011cc0					_CVDUHighByte:
.011cc0	98		tya				tya 								; get back.
.011cc1	eb		xba				xba 								; byte swap
.011cc2	29 ff 00	and #$00ff			and 	#$00FF 						; mask and print
.011cc5	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar
.011cc8					_CVDUNext:
.011cc8	e6 06		inc $06				inc 	DCodePtr 					; skip , ;
.011cca	e6 06		inc $06				inc 	DCodePtr
.011ccc	b2 06		lda ($06)			lda 	(DCodePtr)					; continue ?
.011cce	f0 ef		beq $011cbf			beq		_CVDUExit
.011cd0	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cd3	f0 ea		beq $011cbf			beq 	_CVDUExit
.011cd5	80 d2		bra $011ca9			bra 	Command_VDU

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011cd7					HWClearScreen:
.011cd7	48		pha				pha
.011cd8	da		phx				phx
.011cd9	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011cdc	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011cdf	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011ce3	ca		dex				dex
.011ce4	10 f6		bpl $011cdc			bpl 	_CS0
.011ce6	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011ce9	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011ced	fa		plx				plx
.011cee	68		pla				pla
.011cef	60		rts				rts
.011cf0					HWPrintChar:
.011cf0	48		pha				pha
.011cf1	da		phx				phx
.011cf2	5a		phy				phy
.011cf3	48		pha				pha 								; cursor position -> X
.011cf4	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011cf8	aa		tax				tax
.011cf9	68		pla				pla
.011cfa	c9 ff ff	cmp #$ffff			cmp 	#-1
.011cfd	f0 08		beq $011d07			beq 	_HWPCNoWrite
.011cff	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d01	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d05	c2 20		rep #$20			rep 	#$20
.011d07					_HWPCNoWrite:
.011d07	e8		inx				inx 								; bump cursor position.
.011d08	8a		txa				txa
.011d09	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d0d	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d10	d0 2b		bne $011d3d			bne 	_HWNotEnd
.011d12	38		sec				sec 	 							; back up one line
.011d13	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d16	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d1a	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d1d					_HWScrollUp:
.011d1d	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d21	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d25	e8		inx				inx
.011d26	e8		inx				inx
.011d27	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d2a	d0 f1		bne $011d1d			bne 	_HWScrollUp
.011d2c	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d2f					_HWBlank:
.011d2f	a9 20 20	lda #$2020			lda 	#$2020
.011d32	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d36	e8		inx				inx
.011d37	e8		inx				inx
.011d38	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d3b	d0 f2		bne $011d2f			bne 	_HWBlank
.011d3d					_HWNotEnd:
.011d3d	7a		ply				ply
.011d3e	fa		plx				plx
.011d3f	68		pla				pla
.011d40	60		rts				rts
.011d41					HWNewLine:
.011d41	48		pha				pha
.011d42	da		phx				phx
.011d43	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d46					HWMoveCursor:
.011d46	a9 ff ff	lda #$ffff			lda 	#-1
.011d49	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar
.011d4c	8a		txa				txa
.011d4d	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d51	d0 f3		bne $011d46			bne 	HWMoveCursor
.011d53	fa		plx				plx
.011d54	68		pla				pla
.011d55	60		rts				rts
.011d56	48		pha		HWTab:	pha
.011d57	da		phx				phx
.011d58	a2 07 00	ldx #$0007			ldx 	#7
.011d5b	80 e9		bra $011d46			bra 	HWMoveCursor
.011d5d					HWCheckBreak:
.011d5d	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011d61	60		rts				rts
.011d62					HWInkey:
.011d62	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011d66	60		rts				rts
.011d67					HWInputLine:
.011d67	20 62 1d	jsr $011d62			jsr 	HWInkey 					; get a keystroke.
.011d6a	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011d6e	f0 f7		beq $011d67			beq 	HWInputLine
.011d70					_HWILWait:
.011d70	20 62 1d	jsr $011d62			jsr 	HWInkey
.011d73	c9 00 00	cmp #$0000			cmp		#0
.011d76	f0 f8		beq $011d70			beq 	_HWILWait
.011d78	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d7c	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d7f	90 2f		bcc $011db0			bcc 	_HWILControl
.011d81	20 f0 1c	jsr $011cf0			jsr 	HWPrintChar 				; print out.
.011d84	80 e1		bra $011d67			bra 	HWInputLine 				; loop back.
.011d86					_HWILBackSpace:
.011d86	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d8a	f0 db		beq $011d67			beq 	HWInputLine
.011d8c	aa		tax				tax
.011d8d	ca		dex				dex
.011d8e	a9 20 00	lda #$0020			lda 	#" "
.011d91	e2 20		sep #$20			sep 	#$20
.011d93	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d97	c2 20		rep #$20			rep 	#$20
.011d99	a2 ff ff	ldx #$ffff			ldx 	#-1
.011d9c					_HWILMove:
.011d9c	8a		txa				txa
.011d9d	18		clc				clc
.011d9e	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011da2	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011da5	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011da9	80 bc		bra $011d67			bra 	HWInputLine
.011dab					_HWILClear:
.011dab	20 d7 1c	jsr $011cd7			jsr 	HWClearScreen
.011dae	80 b7		bra $011d67			bra 	HWInputLine
.011db0					_HWILControl:
.011db0	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011db3	f0 60		beq $011e15			beq 	_HWILTab
.011db5	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011db8	f0 cc		beq $011d86			beq 	_HWILBackSpace
.011dba	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011dbd	c9 17 00	cmp #$0017			cmp 	#23
.011dc0	f0 da		beq $011d9c			beq 	_HWILMove
.011dc2	a2 40 00	ldx #$0040			ldx 	#sWidth
.011dc5	c9 13 00	cmp #$0013			cmp 	#19
.011dc8	f0 d2		beq $011d9c			beq 	_HWILMove
.011dca	a2 ff ff	ldx #$ffff			ldx 	#-1
.011dcd	c9 01 00	cmp #$0001			cmp 	#1
.011dd0	f0 ca		beq $011d9c			beq 	_HWILMove
.011dd2	a2 01 00	ldx #$0001			ldx 	#1
.011dd5	c9 04 00	cmp #$0004			cmp 	#4
.011dd8	f0 c2		beq $011d9c			beq 	_HWILMove
.011dda	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011ddd	f0 cc		beq $011dab			beq 	_HWILClear
.011ddf	c9 0d 00	cmp #$000d			cmp 	#13
.011de2	d0 83		bne $011d67			bne 	HWInputLine
.011de4	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011de8	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011deb	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011ded	a9 0f 00	lda #$000f			lda 	#$000F
.011df0	85 0a		sta $0a				sta 	DTemp1+2
.011df2	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011df5					_HWILCopy:
.011df5	bb		tyx				tyx
.011df6	b7 08		lda [$08],y			lda 	[DTemp1],y
.011df8	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011dfc	c8		iny				iny
.011dfd	c8		iny				iny
.011dfe	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e01	d0 f2		bne $011df5			bne 	_HWILCopy
.011e03	a9 00 00	lda #$0000			lda 	#0
.011e06	bb		tyx				tyx
.011e07	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e0b	20 41 1d	jsr $011d41			jsr 	HWNewLine 					; next line.
.011e0e	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e11	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e14	60		rts				rts
.011e15					_HWILTab:
.011e15	20 56 1d	jsr $011d56			jsr 	HWTab
.011e18	82 4c ff	brl $011d67			brl 	HWInputLine

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e1b					SwitchBasicInstance:
.011e1b	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e1d	20 d7 1c	jsr $011cd7			jsr 	HWClearScreen 						; clear screen
.011e20	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e23	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e25	86 02		stx $02				stx		DBaseAddress
.011e27	84 04		sty $04				sty 	DHighAddress
.011e29	ba		tsx				tsx 										; save the current SP.
.011e2a	86 3a		stx $3a				stx 	DStack65816
.011e2c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e2d	48		pha				pha 										; then copy it into B.
.011e2e	ab		plb				plb
.011e2f	ab		plb				plb
.011e30	20 f6 1a	jsr $011af6			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e33	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e36	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e38	f0 05		beq $011e3f			beq 	WarmStart
.011e3a	3a		dec a				dec 	a 									; decrement zero.
.011e3b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e3d	80 18		bra $011e57			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e3f					WarmStart:
.011e3f	a2 a5 1e	ldx #$1ea5			ldx 	#BasicPrompt & $FFFF
.011e42	20 3a 06	jsr $01063a			jsr 	PrintROMMessage
.011e45					NextCommand:
.011e45	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e47	9a		txs				txs
.011e48	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e4a	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e4d	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e4f	d0 52		bne $011ea3			bne 	ExitEmulator
.011e51	20 67 1d	jsr $011d67			jsr 	HWInputLine 						; read line to YA.
.011e54	20 72 07	jsr $010772			jsr 	Tokenise 							; tokenise it.
.011e57					ExecuteTokenBuffer:
.011e57	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e5a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e5c	f0 e7		beq $011e45			beq 	NextCommand 						; nothing.
.011e5e	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011e61	90 27		bcc $011e8a			bcc 	_ETBCommand
.011e63	c9 00 c0	cmp #$c000			cmp 	#$C000
.011e66	b0 22		bcs $011e8a			bcs 	_ETBCommand
.011e68	38		sec				sec
.011e69	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011e6c	f0 1f		beq $011e8d			beq 	_ETBError
.011e6e	48		pha				pha
.011e6f	20 c2 04	jsr $0104c2			jsr 	LineDelete 							; delete the line, if it exists.
.011e72	20 f6 1a	jsr $011af6			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e75	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011e78	18		clc				clc
.011e79	65 02		adc $02				adc 	DBaseAddress
.011e7b	a8		tay				tay 										; Y contains the code.
.011e7c	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e7f	f0 c4		beq $011e45			beq 	NextCommand 						; no, next command.
.011e81	68		pla				pla 										; line number in A, code in Y.
.011e82	20 fd 04	jsr $0104fd			jsr 	LineInsert 							; insert the line
.011e85	20 f6 1a	jsr $011af6			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e88	80 bb		bra $011e45			bra 	NextCommand
.011e8a					_ETBCommand:
.011e8a	4c 6a 1a	jmp $011a6a			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011e8d					_ETBError:
.011e8d	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011e90	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011e98	61 76 65 20 6c 69 6e 65 20 30 00
.011ea3					ExitEmulator:
.011ea3	02 00		cop #$00			cop 	#0
.011ea5					BasicPrompt:
>011ea5	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 72 07	jsr $010772			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	ac b3 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 0e 00 01 00 33 3e f7 d4
>024208	06 40 28 32 00 00 0e 00 02 00 33 3e 8a d5 05 40
>024218	28 32 00 00 0e 00 03 00 33 3e 19 d0 05 40 28 32
>024228	00 00 10 00 04 00 33 3e 3f de 07 d0 05 40 28 32
>024238	00 00 10 00 05 00 33 3e d5 dd d7 d0 05 40 28 32
>024248	00 00 0e 00 06 00 33 3e 03 d5 04 40 28 32 00 00
>024258	0e 00 07 00 33 3e 0b d0 03 40 28 32 00 00 0e 00
>024268	08 00 33 3e 09 d0 06 40 28 32 00 00 12 00 09 00
>024278	33 3e d9 dd 0e dc 09 d0 05 40 28 32 00 00 10 00
>024288	0a 00 33 3e 35 de 1b d0 05 40 28 32 00 00 12 00
>024298	0b 00 01 cd 20 c0 06 22 0b 24 05 10 b5 bb 00 00
>0242a8	12 00 0c 00 2d 3e 88 cd 02 c5 06 22 01 10 e8 5c
>0242b8	00 00 0e 00 0d 00 06 c0 06 22 0b 24 65 40 00 00
>0242c8	14 00 0e 00 2d 3e 84 cd 4c c9 0d c0 06 22 02 10
>0242d8	d4 62 00 00 16 00 0f 00 2d 3e e0 cd 66 ca 0a c0
>0242e8	06 22 0b 24 04 10 15 b2 00 00 14 00 10 00 2d 3e
>0242f8	a9 cd 11 c0 06 22 0b 24 03 10 13 a3 00 00 10 00
>024308	11 00 80 cd 1e c0 06 22 0b 24 10 40 00 00 14 00
>024318	12 00 2d 3e c9 cc 0e c6 06 22 0b 24 06 10 c6 49
>024328	00 00 12 00 13 00 2d 3e 87 cd 2b cb 0f c0 06 22
>024338	50 40 00 00 10 00 14 00 de cd 03 c0 06 22 02 10
>024348	af 9c 00 00 0e 00 15 00 03 c0 06 22 02 10 3a 7f
>024358	00 00 10 00 16 00 2d 3e 67 ce 0d c0 06 22 2d 40
>024368	00 00 12 00 17 00 2d 3e 4a c5 06 22 0b 24 01 10
>024378	fe 64 00 00 10 00 18 00 57 cd b5 cc 06 c0 06 22
>024388	9c 40 00 00 12 00 19 00 28 cd 18 c0 06 22 0b 24
>024398	04 10 1c 66 00 00 0e 00 1a 00 18 c0 06 22 01 10
>0243a8	20 ba 00 00 14 00 1b 00 2d 3e 2e cd 52 c9 11 c0
>0243b8	06 22 0b 24 77 40 00 00 12 00 1c 00 2d 3e 08 c0
>0243c8	06 22 0b 24 01 10 7a b6 00 00 16 00 1d 00 2d 3e
>0243d8	c1 cc b1 ca 0c c0 06 22 0b 24 02 10 6d 80 00 00
>0243e8	12 00 1e 00 2d 3e c9 cc 1b c0 06 22 02 10 d5 4e
>0243f8	00 00 14 00 1f 00 2d 3e 74 cd 1c ce 0c c0 06 22
>024408	03 10 8d 64 00 00 0e 00 20 00 53 cd 1b c0 06 22
>024418	a0 40 00 00 10 00 21 00 2d 3e 10 c6 06 22 0b 24
>024428	92 63 00 00 0e 00 22 00 cd c4 06 22 05 10 6e 78
>024438	00 00 0c 00 23 00 58 c6 06 22 3a a0 00 00 0e 00
>024448	24 00 21 c5 06 22 0b 24 e6 66 00 00 12 00 25 00
>024458	2d 3e 68 ce 01 ca 1d c0 06 22 c8 40 00 00 10 00
>024468	26 00 57 c5 06 22 0b 24 04 10 81 51 00 00 12 00
>024478	27 00 2d 3e 5d cd 63 c2 06 22 03 10 52 ad 00 00
>024488	12 00 28 00 2d 3e 67 ce 05 c5 06 22 05 10 6a b9
>024498	00 00 0e 00 29 00 2d 3e 39 c6 06 22 11 40 00 00
>0244a8	14 00 2a 00 2d 3e c3 cc 17 c0 06 22 0b 24 01 10
>0244b8	30 b8 00 00 10 00 2b 00 2a cd e6 c1 06 22 02 10
>0244c8	07 49 00 00 0e 00 2c 00 2d 3e d5 c4 06 22 83 a9
>0244d8	00 00 12 00 2d 00 2d 3e 55 c5 06 22 0b 24 04 10
>0244e8	3f 9d 00 00 12 00 2e 00 2d 3e 5b cd 9f c0 06 22
>0244f8	0b 24 ba b5 00 00 12 00 2f 00 7d cd 1d c0 06 22
>024508	0b 24 02 10 d7 54 00 00 0e 00 30 00 db cd 11 c4
>024518	06 22 28 b4 00 00 10 00 31 00 2d 3e ca cc 08 c0
>024528	06 22 eb 55 00 00 0e 00 32 00 65 c6 06 22 0b 24
>024538	53 40 00 00 12 00 33 00 2d 3e 11 c0 06 22 0b 24
>024548	03 10 e3 9b 00 00 12 00 34 00 00 ce 04 c0 06 22
>024558	0b 24 01 10 34 87 00 00 14 00 35 00 2d 3e c8 cc
>024568	8b c9 04 c0 06 22 0b 24 83 7d 00 00 0e 00 36 00
>024578	79 c5 06 22 02 10 8e a7 00 00 12 00 37 00 2d 3e
>024588	e6 cd 14 c0 06 22 05 10 b2 44 00 00 12 00 38 00
>024598	e2 cd 0c c0 06 22 0b 24 03 10 77 72 00 00 0c 00
>0245a8	39 00 fa c4 06 22 9b 40 00 00 10 00 3a 00 2d 3e
>0245b8	5e c5 06 22 04 10 60 8a 00 00 16 00 3b 00 2d 3e
>0245c8	d5 cd c9 cb 07 c0 06 22 0b 24 03 10 9c 8e 00 00
>0245d8	12 00 3c 00 2d 3e f2 cc 58 ce 11 c0 06 22 8c b3
>0245e8	00 00 12 00 3d 00 2d 3e b5 c5 06 22 0b 24 05 10
>0245f8	e3 93 00 00 0e 00 3e 00 16 c0 06 22 0b 24 b0 7c
>024608	00 00 12 00 3f 00 2d 3e 62 ce 51 c4 06 22 0b 24
>024618	61 40 00 00 0e 00 40 00 89 c5 06 22 0b 24 3c a2
>024628	00 00 0c 00 41 00 fd c5 06 22 9e 40 00 00 10 00
>024638	42 00 2d 3e ce c5 06 22 05 10 a2 6e 00 00 12 00
>024648	43 00 2d 3e 32 ce 7a c5 06 22 04 10 be 8c 00 00
>024658	0e 00 44 00 2b c6 06 22 03 10 d3 b5 00 00 12 00
>024668	45 00 2d 3e f5 cc 73 c8 02 c0 06 22 9f 40 00 00
>024678	14 00 46 00 2d 3e 6b ce ca cb 13 c0 06 22 0b 24
>024688	05 40 00 00 6a 00 47 00 f7 d4 00 40 28 32 06 22
>024698	0b 24 03 10 25 89 26 32 f7 d4 01 40 28 32 06 22
>0246a8	0b 24 05 10 4d 49 26 32 f7 d4 02 40 28 32 06 22
>0246b8	03 10 71 ab 26 32 f7 d4 03 40 28 32 06 22 0b 24
>0246c8	05 10 ab 6e 26 32 f7 d4 04 40 28 32 06 22 02 10
>0246d8	50 a2 26 32 f7 d4 05 40 28 32 06 22 62 40 26 32
>0246e8	f7 d4 06 40 28 32 06 22 02 10 78 bb 00 00 5e 00
>0246f8	48 00 8a d5 00 40 28 32 06 22 0b 24 7e 40 26 32
>024708	8a d5 01 40 28 32 06 22 04 10 ee ab 26 32 8a d5
>024718	02 40 28 32 06 22 0b 24 0a 40 26 32 8a d5 03 40
>024728	28 32 06 22 0b 24 04 10 94 99 26 32 8a d5 04 40
>024738	28 32 06 22 0b 24 03 10 3e a1 26 32 8a d5 05 40
>024748	28 32 06 22 0b 24 01 10 e2 49 00 00 58 00 49 00
>024758	19 d0 00 40 28 32 06 22 0b 24 03 10 b4 63 26 32
>024768	19 d0 01 40 28 32 06 22 86 48 26 32 19 d0 02 40
>024778	28 32 06 22 0b 24 3b 89 26 32 19 d0 03 40 28 32
>024788	06 22 02 10 af 6b 26 32 19 d0 04 40 28 32 06 22
>024798	0b 24 69 bd 26 32 19 d0 05 40 28 32 06 22 02 10
>0247a8	70 6b 00 00 6a 00 4a 00 3f de 07 d0 00 40 28 32
>0247b8	06 22 0b 24 01 10 4d 82 26 32 3f de 07 d0 01 40
>0247c8	28 32 06 22 0b 24 01 10 c9 bc 26 32 3f de 07 d0
>0247d8	02 40 28 32 06 22 0b 24 a9 40 26 32 3f de 07 d0
>0247e8	03 40 28 32 06 22 04 10 10 73 26 32 3f de 07 d0
>0247f8	04 40 28 32 06 22 0b 24 01 10 68 7e 26 32 3f de
>024808	07 d0 05 40 28 32 06 22 02 10 a3 ba 00 00 66 00
>024818	4b 00 d5 dd d7 d0 00 40 28 32 06 22 0b 24 02 10
>024828	3e 4c 26 32 d5 dd d7 d0 01 40 28 32 06 22 88 40
>024838	26 32 d5 dd d7 d0 02 40 28 32 06 22 01 10 71 44
>024848	26 32 d5 dd d7 d0 03 40 28 32 06 22 0b 24 f6 be
>024858	26 32 d5 dd d7 d0 04 40 28 32 06 22 0b 24 04 10
>024868	86 ac 26 32 d5 dd d7 d0 05 40 28 32 06 22 05 10
>024878	35 9f 00 00 46 00 4c 00 03 d5 00 40 28 32 06 22
>024888	05 10 7d b4 26 32 03 d5 01 40 28 32 06 22 04 10
>024898	40 6b 26 32 03 d5 02 40 28 32 06 22 0b 24 92 40
>0248a8	26 32 03 d5 03 40 28 32 06 22 9e 40 26 32 03 d5
>0248b8	04 40 28 32 06 22 a2 40 00 00 3e 00 4d 00 0b d0
>0248c8	00 40 28 32 06 22 ab 75 26 32 0b d0 01 40 28 32
>0248d8	06 22 0b 24 05 10 ac 64 26 32 0b d0 02 40 28 32
>0248e8	06 22 0b 24 03 10 4e 75 26 32 0b d0 03 40 28 32
>0248f8	06 22 04 10 8f 8d 00 00 5c 00 4e 00 09 d0 00 40
>024908	28 32 06 22 1d 49 26 32 09 d0 01 40 28 32 06 22
>024918	50 bb 26 32 09 d0 02 40 28 32 06 22 05 10 26 aa
>024928	26 32 09 d0 03 40 28 32 06 22 b0 40 26 32 09 d0
>024938	04 40 28 32 06 22 0b 24 c2 40 26 32 09 d0 05 40
>024948	28 32 06 22 bd 40 26 32 09 d0 06 40 28 32 06 22
>024958	65 40 00 00 6c 00 4f 00 d9 dd 0e dc 09 d0 00 40
>024968	28 32 06 22 0b 24 46 40 26 32 d9 dd 0e dc 09 d0
>024978	01 40 28 32 06 22 18 40 26 32 d9 dd 0e dc 09 d0
>024988	02 40 28 32 06 22 0b 24 4f 40 26 32 d9 dd 0e dc
>024998	09 d0 03 40 28 32 06 22 0b 24 05 10 26 54 26 32
>0249a8	d9 dd 0e dc 09 d0 04 40 28 32 06 22 ae 58 26 32
>0249b8	d9 dd 0e dc 09 d0 05 40 28 32 06 22 0e 40 00 00
>0249c8	66 00 50 00 35 de 1b d0 00 40 28 32 06 22 0b 24
>0249d8	01 10 ae 47 26 32 35 de 1b d0 01 40 28 32 06 22
>0249e8	01 10 22 b6 26 32 35 de 1b d0 02 40 28 32 06 22
>0249f8	03 10 44 63 26 32 35 de 1b d0 03 40 28 32 06 22
>024a08	0b 24 03 10 f6 79 26 32 35 de 1b d0 04 40 28 32
>024a18	06 22 04 10 83 91 26 32 35 de 1b d0 05 40 28 32
>024a28	06 22 4d 44 00 00 1c 00 51 00 2e 3e 27 32 c3 cc
>024a38	17 c0 01 20 09 d0 06 40 28 32 28 32 06 22 40 40
>024a48	00 00 1c 00 52 00 2e 3e 27 32 21 c5 0c 26 ca cc
>024a58	08 c0 28 32 06 22 0b 24 a9 16 22 53 00 00 1c 00
>024a68	53 00 2e 3e 27 32 0b 24 53 40 02 20 80 cd 1e c0
>024a78	28 32 06 22 0b 24 03 40 00 00 1e 00 54 00 2e 3e
>024a88	27 32 50 40 0c 26 0b 24 04 10 81 51 28 32 06 22
>024a98	0b 24 4a 11 50 b8 00 00 20 00 55 00 2e 3e 27 32
>024aa8	c8 cc 8b c9 04 c0 0a 24 f5 cc 73 c8 02 c0 28 32
>024ab8	06 22 0b 24 e4 7c 00 00 1c 00 56 00 2e 3e 27 32
>024ac8	68 ce 01 ca 1d c0 01 20 80 cd 1e c0 28 32 06 22
>024ad8	c0 40 00 00 1a 00 57 00 2e 3e 27 32 0b 24 92 63
>024ae8	0d 26 9b 40 28 32 06 22 0b 24 3a 40 00 00 1a 00
>024af8	58 00 2e 3e 27 32 9f 40 0d 26 0b 24 61 40 28 32
>024b08	06 22 0b 24 01 40 00 00 18 00 59 00 2e 3e 27 32
>024b18	0b 24 65 40 03 20 65 c6 28 32 06 22 36 40 00 00
>024b28	1e 00 5a 00 2e 3e 27 32 65 c6 0c 26 03 d5 01 40
>024b38	28 32 28 32 06 22 0b 24 68 11 c0 45 00 00 1a 00
>024b48	5b 00 2e 3e 27 32 01 10 e8 5c 0c 26 fd c5 28 32
>024b58	06 22 c1 10 30 97 00 00 1e 00 5c 00 2e 3e 27 32
>024b68	86 48 0a 24 8a d5 05 40 28 32 28 32 06 22 0b 24
>024b78	01 10 5c 41 00 00 16 00 5d 00 2e 3e 27 32 39 c6
>024b88	0c 26 50 40 28 32 06 22 50 45 00 00 1a 00 5e 00
>024b98	2e 3e 27 32 16 c0 0d 26 ca cc 08 c0 28 32 06 22
>024ba8	0b 24 02 40 00 00 16 00 5f 00 2e 3e 27 32 5e c5
>024bb8	01 20 50 40 28 32 06 22 40 40 00 00 1a 00 60 00
>024bc8	2e 3e 27 32 fa c4 02 20 02 10 d5 4e 28 32 06 22
>024bd8	02 10 df 4e 00 00 1a 00 61 00 2e 3e 27 32 84 cd
>024be8	4c c9 0d c0 01 20 9f 40 28 32 06 22 94 40 00 00
>024bf8	1c 00 62 00 2e 3e 27 32 0b 24 53 40 0c 26 2b c6
>024c08	28 32 06 22 0b 24 45 11 69 73 00 00 20 00 63 00
>024c18	2e 3e 27 32 19 d0 00 40 28 32 0b 24 67 ce 0d c0
>024c28	28 32 06 22 0b 24 03 10 e1 63 00 00 1c 00 64 00
>024c38	2e 3e 27 32 2b c6 0c 26 0b 24 61 40 28 32 06 22
>024c48	0b 24 7c 11 f3 64 00 00 22 00 65 00 2e 3e 27 32
>024c58	0b 24 04 10 3f 9d 02 20 f7 d4 05 40 28 32 28 32
>024c68	06 22 0b 24 04 10 1d 9d 00 00 1c 00 66 00 2e 3e
>024c78	27 32 ca cc 08 c0 0a 24 68 ce 01 ca 1d c0 28 32
>024c88	06 22 b3 56 00 00 1e 00 67 00 2e 3e 27 32 67 ce
>024c98	0d c0 0a 24 28 cd 18 c0 28 32 06 22 0b 24 04 10
>024ca8	ef 65 00 00 18 00 68 00 2e 3e 27 32 39 c6 01 20
>024cb8	0b 24 65 40 28 32 06 22 11 40 00 00 22 00 69 00
>024cc8	2e 3e 27 32 d5 dd d7 d0 01 40 28 32 0c 26 6b ce
>024cd8	ca cb 13 c0 28 32 06 22 0b 24 a8 42 00 00 1c 00
>024ce8	6a 00 2e 3e 27 32 0b 24 c2 40 03 20 e2 cd 0c c0
>024cf8	28 32 06 22 03 10 b7 72 00 00 20 00 6b 00 2e 3e
>024d08	27 32 fd c5 02 20 d9 dd 0e dc 09 d0 02 40 28 32
>024d18	28 32 06 22 0b 24 41 40 00 00 24 00 6c 00 2e 3e
>024d28	27 32 d5 dd d7 d0 00 40 28 32 03 20 f5 cc 73 c8
>024d38	02 c0 28 32 06 22 0b 24 02 10 a3 4c 00 00 1e 00
>024d48	6d 00 2e 3e 27 32 d5 cd c9 cb 07 c0 03 20 39 c6
>024d58	28 32 06 22 0b 24 03 10 8b 8e 00 00 1a 00 6e 00
>024d68	2e 3e 27 32 50 40 02 20 02 10 d5 4e 28 32 06 22
>024d78	02 10 d5 4e 00 00 20 00 6f 00 2e 3e 27 32 62 ce
>024d88	51 c4 0a 24 0b 24 04 10 3f 9d 28 32 06 22 0b 24
>024d98	04 10 a0 9d 00 00 20 00 70 00 2e 3e 27 32 d5 dd
>024da8	d7 d0 00 40 28 32 0a 24 65 c6 28 32 06 22 0b 24
>024db8	02 10 91 4c 00 00 1e 00 71 00 2e 3e 27 32 55 c5
>024dc8	01 20 6b ce ca cb 13 c0 28 32 06 22 0b 24 04 10
>024dd8	3f 9d 00 00 22 00 72 00 2e 3e 27 32 d9 dd 0e dc
>024de8	09 d0 00 40 28 32 0a 24 0b 24 83 7d 28 32 06 22
>024df8	0b 24 c9 7d 00 00 1c 00 73 00 2e 3e 27 32 0b 24
>024e08	65 40 01 20 0b 24 e6 66 28 32 06 22 0b 24 e6 66
>024e18	00 00 18 00 74 00 2e 3e 27 32 ae 58 0b 24 0b 24
>024e28	53 40 28 32 06 22 01 59 00 00 1c 00 75 00 2e 3e
>024e38	27 32 19 d0 01 40 28 32 0b 24 0b 24 05 40 28 32
>024e48	06 22 8b 48 00 00 22 00 76 00 2e 3e 27 32 d5 dd
>024e58	d7 d0 02 40 28 32 03 20 62 ce 51 c4 28 32 06 22
>024e68	0b 24 01 10 12 44 00 00 1a 00 77 00 2e 3e 27 32
>024e78	03 c0 01 20 0b 24 4f 40 28 32 06 22 02 10 30 7f
>024e88	00 00 1a 00 78 00 2e 3e 27 32 02 10 78 bb 03 20
>024e98	c8 40 28 32 06 22 02 10 b0 bb 00 00 1e 00 79 00
>024ea8	2e 3e 27 32 f7 d4 05 40 28 32 03 20 e6 cd 14 c0
>024eb8	28 32 06 22 05 10 d0 44 00 00 1c 00 7a 00 2e 3e
>024ec8	27 32 02 10 d4 62 01 20 0b 24 46 40 28 32 06 22
>024ed8	02 10 90 62 00 00 1a 00 7b 00 2e 3e 27 32 d5 c4
>024ee8	02 20 0b 24 77 40 28 32 06 22 0b 24 75 40 00 00
>024ef8	18 00 7c 00 2e 3e 27 32 9e 40 01 20 5d cd 63 c2
>024f08	28 32 06 22 12 40 00 00 20 00 7d 00 2e 3e 27 32
>024f18	11 40 0b 24 3f de 07 d0 05 40 28 32 28 32 06 22
>024f28	0b 24 02 10 92 ba 00 00 1e 00 7e 00 2e 3e 27 32
>024f38	53 cd 1b c0 0a 24 a9 cd 11 c0 28 32 06 22 0b 24
>024f48	03 10 73 a2 00 00 1c 00 7f 00 2e 3e 27 32 86 48
>024f58	01 20 d5 dd d7 d0 02 40 28 32 28 32 06 22 00 40
>024f68	00 00 18 00 80 00 2e 3e 27 32 11 40 01 20 0b 24
>024f78	05 40 28 32 06 22 11 40 00 00 1c 00 81 00 2e 3e
>024f88	27 32 16 c0 02 20 03 d5 04 40 28 32 28 32 06 22
>024f98	0b 24 0e 7c 00 00 16 00 82 00 2e 3e 27 32 9c 40
>024fa8	01 20 a0 40 28 32 06 22 80 40 00 00 1e 00 83 00
>024fb8	2e 3e 27 32 05 10 6e 78 03 20 57 cd b5 cc 06 c0
>024fc8	28 32 06 22 05 10 f2 78 00 00 1a 00 84 00 2e 3e
>024fd8	27 32 b5 c5 02 20 fd c5 28 32 06 22 0b 24 05 10
>024fe8	61 93 00 00 1a 00 85 00 2e 3e 27 32 50 40 0b 24
>024ff8	5e c5 28 32 06 22 0b 24 04 10 10 8a 00 00 1e 00
>025008	86 00 2e 3e 27 32 9f 40 0c 26 0b 24 01 10 30 b8
>025018	28 32 06 22 0b 24 34 11 d0 65 00 00 1a 00 87 00
>025028	2e 3e 27 32 08 c0 0b 24 9f 40 28 32 06 22 0b 24
>025038	01 10 19 b7 00 00 20 00 88 00 2e 3e 27 32 2e cd
>025048	52 c9 11 c0 0b 24 0b 24 03 10 13 a3 28 32 06 22
>025058	03 10 9c a2 00 00 1a 00 89 00 2e 3e 27 32 9c 40
>025068	0b 24 c9 cc 0e c6 28 32 06 22 06 10 62 4a 00 00
>025078	18 00 8a 00 2e 3e 27 32 04 10 be 8c 01 20 9b 40
>025088	28 32 06 22 9a 40 00 00 1a 00 8b 00 2e 3e 27 32
>025098	c9 cc 1b c0 03 20 50 40 28 32 06 22 02 10 85 4e
>0250a8	00 00 1e 00 8c 00 2e 3e 27 32 2d 40 03 20 0b 24
>0250b8	03 10 77 72 28 32 06 22 0b 24 03 10 5c 72 00 00
>0250c8	1c 00 8d 00 2e 3e 27 32 67 ce 05 c5 0d 26 0b 24
>0250d8	65 40 28 32 06 22 0b 24 89 47 00 00 1a 00 8e 00
>0250e8	2e 3e 27 32 02 10 af 6b 0c 26 39 c6 28 32 06 22
>0250f8	27 10 9f a6 00 00 16 00 8f 00 2e 3e 27 32 39 c6
>025108	02 20 ae 58 28 32 06 22 bf 58 00 00 18 00 90 00
>025118	2e 3e 27 32 67 ce 0d c0 0d 26 62 40 28 32 06 22
>025128	00 40 00 00 1a 00 91 00 2e 3e 27 32 0b 24 3c a2
>025138	0b 24 50 40 28 32 06 22 0b 24 8c a2 00 00 1c 00
>025148	92 00 2e 3e 27 32 67 ce 0d c0 03 20 02 10 d4 62
>025158	28 32 06 22 02 10 f9 62 00 00 1c 00 93 00 2e 3e
>025168	27 32 9f 40 0b 24 0b 24 01 10 ae 47 28 32 06 22
>025178	01 10 4d 48 00 00 18 00 94 00 2e 3e 27 32 a0 40
>025188	02 20 21 c5 28 32 06 22 0b 24 46 66 00 00 18 00
>025198	95 00 2e 3e 27 32 89 c5 03 20 0b 24 53 40 28 32
>0251a8	06 22 69 a2 00 00 1a 00 96 00 2e 3e 27 32 05 10
>0251b8	b2 44 0c 26 11 40 28 32 06 22 55 10 d2 8f 00 00
>0251c8	18 00 97 00 2e 3e 27 32 fa c4 0d 26 28 cd 18 c0
>0251d8	28 32 06 22 00 40 00 00 1c 00 98 00 2e 3e 27 32
>0251e8	67 ce 05 c5 02 20 53 cd 1b c0 28 32 06 22 05 10
>0251f8	ea b9 00 00 1e 00 99 00 2e 3e 27 32 09 d0 05 40
>025208	28 32 0a 24 5d cd 63 c2 28 32 06 22 03 10 0f ae
>025218	00 00 1a 00 9a 00 2e 3e 27 32 11 40 0b 24 79 c5
>025228	28 32 06 22 0b 24 02 10 7d a7 00 00 1e 00 9b 00
>025238	2e 3e 27 32 0b 24 65 40 0b 24 05 10 6e 78 28 32
>025248	06 22 0b 24 05 10 d3 78 00 00 1a 00 9c 00 2e 3e
>025258	27 32 2a cd e6 c1 02 20 fd c5 28 32 06 22 02 10
>025268	9f 49 00 00 1e 00 9d 00 2e 3e 27 32 d5 cd c9 cb
>025278	07 c0 03 20 a0 40 28 32 06 22 0b 24 03 10 3c 8e
>025288	00 00 18 00 9e 00 2e 3e 27 32 50 bb 0c 26 50 40
>025298	28 32 06 22 4d 10 00 49 00 00 16 00 9f 00 2e 3e
>0252a8	27 32 9e 40 0a 24 06 c0 28 32 06 22 39 40 00 00
>0252b8	1c 00 a0 00 2e 3e 27 32 f5 cc 73 c8 02 c0 0a 24
>0252c8	5e c5 28 32 06 22 04 10 ff 8a 00 00 1a 00 a1 00
>0252d8	2e 3e 27 32 28 b4 02 20 0b 24 46 40 28 32 06 22
>0252e8	0b 24 46 40 00 00 1e 00 a2 00 2e 3e 27 32 0b 24
>0252f8	e6 66 0b 24 87 cd 2b cb 0f c0 28 32 06 22 0b 24
>025308	36 67 00 00 1a 00 a3 00 2e 3e 27 32 ce c5 0d 26
>025318	0b 24 77 40 28 32 06 22 0b 24 c5 45 00 00 1c 00
>025328	a4 00 2e 3e 27 32 80 cd 1e c0 01 20 01 10 e8 5c
>025338	28 32 06 22 01 10 e0 5c 00 00 20 00 a5 00 2e 3e
>025348	27 32 0b 24 53 40 01 20 d9 dd 0e dc 09 d0 05 40
>025358	28 32 28 32 06 22 0c 40 00 00 1c 00 a6 00 2e 3e
>025368	27 32 c1 cc b1 ca 0c c0 02 20 65 c6 28 32 06 22
>025378	0b 24 41 40 00 00 24 00 a7 00 2e 3e 27 32 f5 cc
>025388	73 c8 02 c0 0d 26 d9 dd 0e dc 09 d0 00 40 28 32
>025398	28 32 06 22 0b 24 02 40 00 00 1a 00 a8 00 2e 3e
>0253a8	27 32 58 c6 03 20 80 cd 1e c0 28 32 06 22 0b 24
>0253b8	36 a0 00 00 18 00 a9 00 2e 3e 27 32 9f 40 01 20
>0253c8	0b 24 92 63 28 32 06 22 0e 40 00 00 1a 00 aa 00
>0253d8	2e 3e 27 32 9b 40 0d 26 0b 24 05 40 28 32 06 22
>0253e8	0b 24 1f 40 00 00 1a 00 ab 00 2e 3e 27 32 f5 cc
>0253f8	73 c8 02 c0 02 20 fa c4 28 32 06 22 9f 40 00 00
>025408	1a 00 ac 00 2e 3e 27 32 c8 cc 8b c9 04 c0 01 20
>025418	9b 40 28 32 06 22 19 40 00 00 1e 00 ad 00 2e 3e
>025428	27 32 f5 cc 73 c8 02 c0 0a 24 02 10 3a 7f 28 32
>025438	06 22 02 10 d9 7f 00 00 1c 00 ae 00 2e 3e 27 32
>025448	0b 24 05 40 01 20 04 10 60 8a 28 32 06 22 04 10
>025458	60 8a 00 00 18 00 af 00 2e 3e 27 32 c8 40 01 20
>025468	53 cd 1b c0 28 32 06 22 80 40 00 00 1a 00 b0 00
>025478	2e 3e 27 32 57 cd b5 cc 06 c0 0c 26 fd c5 28 32
>025488	06 22 48 a0 00 00 1c 00 b1 00 2e 3e 27 32 0b 24
>025498	10 40 02 20 03 10 d3 b5 28 32 06 22 0b 24 0d 40
>0254a8	00 00 1a 00 b2 00 2e 3e 27 32 9b 40 0d 26 0b 24
>0254b8	04 10 1c 66 28 32 06 22 00 40 00 00 1e 00 b3 00
>0254c8	2e 3e 27 32 0b 24 53 40 03 20 f5 cc 73 c8 02 c0
>0254d8	28 32 06 22 0b 24 ce 40 00 00 1c 00 b4 00 2e 3e
>0254e8	27 32 2d 40 0b 24 0b d0 00 40 28 32 28 32 06 22
>0254f8	0b 24 7e 75 00 00 18 00 b5 00 2e 3e 27 32 18 c0
>025508	0b 24 4d 44 28 32 06 22 01 10 d3 b5 00 00 1c 00
>025518	b6 00 2e 3e 27 32 04 10 be 8c 0b 24 62 ce 51 c4
>025528	28 32 06 22 04 10 1f 8d 00 00 1e 00 b7 00 2e 3e
>025538	27 32 67 ce 0d c0 01 20 35 de 1b d0 01 40 28 32
>025548	28 32 06 22 20 40 00 00 1a 00 b8 00 2e 3e 27 32
>025558	68 ce 01 ca 1d c0 0d 26 03 c0 28 32 06 22 00 40
>025568	00 00 1a 00 b9 00 2e 3e 27 32 09 d0 05 40 28 32
>025578	02 20 a0 40 28 32 06 22 bd 40 00 00 18 00 ba 00
>025588	2e 3e 27 32 89 c5 03 20 0b 24 65 40 28 32 06 22
>025598	5f a2 00 00 1c 00 bb 00 2e 3e 27 32 09 d0 06 40
>0255a8	28 32 0c 26 03 c0 28 32 06 22 fb 10 e2 b1 00 00
>0255b8	1a 00 bc 00 2e 3e 27 32 fa c4 01 20 68 ce 01 ca
>0255c8	1d c0 28 32 06 22 88 40 00 00 1e 00 bd 00 2e 3e
>0255d8	27 32 32 ce 7a c5 0b 24 87 cd 2b cb 0f c0 28 32
>0255e8	06 22 04 10 6e 8c 00 00 1a 00 be 00 2e 3e 27 32
>0255f8	18 c0 01 20 80 cd 1e c0 28 32 06 22 01 10 20 ba
>025608	00 00 18 00 bf 00 2e 3e 27 32 50 40 0d 26 05 10
>025618	26 aa 28 32 06 22 00 40 00 00 1a 00 c0 00 2e 3e
>025628	27 32 0b 24 7e 40 0d 26 03 10 8d 64 28 32 06 22
>025638	00 40 00 00 1c 00 c1 00 2e 3e 27 32 9e 40 0d 26
>025648	6b ce ca cb 13 c0 28 32 06 22 0b 24 1f 40 00 00
>025658	1a 00 c2 00 2e 3e 27 32 67 ce 0d c0 0d 26 c9 cc
>025668	0e c6 28 32 06 22 00 40 00 00 1a 00 c3 00 2e 3e
>025678	27 32 fa c4 0a 24 05 10 7d b4 28 32 06 22 05 10
>025688	18 b5 00 00 1a 00 c4 00 2e 3e 27 32 0b 24 04 10
>025698	15 b2 01 20 a2 40 28 32 06 22 a2 40 00 00 1c 00
>0256a8	c5 00 2e 3e 27 32 03 c0 02 20 68 ce 01 ca 1d c0
>0256b8	28 32 06 22 02 10 fa 7f 00 00 1c 00 c6 00 2e 3e
>0256c8	27 32 0b 24 61 40 0c 26 53 cd 1b c0 28 32 06 22
>0256d8	0b 24 a0 7c 00 00 22 00 c7 00 2e 3e 27 32 68 ce
>0256e8	01 ca 1d c0 03 20 e0 cd 66 ca 0a c0 28 32 06 22
>0256f8	0b 24 04 10 dd b2 00 00 20 00 c8 00 2e 3e 27 32
>025708	87 cd 2b cb 0f c0 02 20 74 cd 1c ce 0c c0 28 32
>025718	06 22 03 10 dd 64 00 00 20 00 c9 00 2e 3e 27 32
>025728	57 cd b5 cc 06 c0 0c 26 01 cd 20 c0 28 32 06 22
>025738	0b 24 a2 13 4c a2 00 00 20 00 ca 00 2e 3e 27 32
>025748	2e cd 52 c9 11 c0 0a 24 09 d0 04 40 28 32 28 32
>025758	06 22 0b 24 39 41 00 00 1e 00 cb 00 2e 3e 27 32
>025768	02 10 af 9c 0b 24 68 ce 01 ca 1d c0 28 32 06 22
>025778	02 10 e7 9b 00 00 1a 00 cc 00 2e 3e 27 32 6b ce
>025788	ca cb 13 c0 0d 26 08 c0 28 32 06 22 00 40 00 00
>025798	1e 00 cd 00 2e 3e 27 32 0b 24 65 40 0b 24 87 cd
>0257a8	2b cb 0f c0 28 32 06 22 0b 24 b5 40 00 00 1e 00
>0257b8	ce 00 2e 3e 27 32 09 d0 03 40 28 32 01 20 03 d5
>0257c8	01 40 28 32 28 32 06 22 00 40 00 00 1a 00 cf 00
>0257d8	2e 3e 27 32 0b 24 53 40 01 20 67 ce 0d c0 28 32
>0257e8	06 22 2d 40 00 00 1c 00 d0 00 2e 3e 27 32 0e 40
>0257f8	0c 26 7d cd 1d c0 28 32 06 22 0b 24 1e 10 c2 63
>025808	00 00 1e 00 d1 00 2e 3e 27 32 57 cd b5 cc 06 c0
>025818	0b 24 53 cd 1b c0 28 32 06 22 0b 24 04 40 00 00
>025828	20 00 d2 00 2e 3e 27 32 2e cd 52 c9 11 c0 03 20
>025838	05 10 6e 78 28 32 06 22 0b 24 05 10 19 78 00 00
>025848	1e 00 d3 00 2e 3e 27 32 6b ce ca cb 13 c0 03 20
>025858	cd c4 28 32 06 22 0b 24 05 10 6b 78 00 00 18 00
>025868	d4 00 2e 3e 27 32 eb 55 0a 24 0b 24 05 40 28 32
>025878	06 22 e6 55 00 00 1a 00 d5 00 2e 3e 27 32 83 a9
>025888	02 20 f5 cc 73 c8 02 c0 28 32 06 22 9f a9 00 00
>025898	18 00 d6 00 2e 3e 27 32 65 c6 0a 24 53 cd 1b c0
>0258a8	28 32 06 22 4d 40 00 00 18 00 d7 00 2e 3e 27 32
>0258b8	2d 40 0d 26 db cd 11 c4 28 32 06 22 00 40 00 00
>0258c8	1a 00 d8 00 2e 3e 27 32 fd c5 02 20 0b 24 65 40
>0258d8	28 32 06 22 0b 24 61 40 00 00 1a 00 d9 00 2e 3e
>0258e8	27 32 0b 24 01 10 fe 64 01 20 50 40 28 32 06 22
>0258f8	00 40 00 00 1a 00 da 00 2e 3e 27 32 02 10 78 bb
>025908	02 20 0e 40 28 32 06 22 02 10 7e bb 00 00 1c 00
>025918	db 00 2e 3e 27 32 58 c6 0c 26 0b 24 61 40 28 32
>025928	06 22 0b 24 48 10 fa b5 00 00 18 00 dc 00 2e 3e
>025938	27 32 01 10 e8 5c 01 20 fd c5 28 32 06 22 88 40
>025948	00 00 18 00 dd 00 2e 3e 27 32 cd c4 02 20 9b 40
>025958	28 32 06 22 05 10 ff 78 00 00 1a 00 de 00 2e 3e
>025968	27 32 65 40 0d 26 0b 24 04 10 3f 9d 28 32 06 22
>025978	00 40 00 00 20 00 df 00 2e 3e 27 32 d5 cd c9 cb
>025988	07 c0 0a 24 0b 24 61 40 28 32 06 22 0b 24 03 10
>025998	fd 8e 00 00 1c 00 e0 00 2e 3e 27 32 53 cd 1b c0
>0259a8	02 20 02 10 d4 62 28 32 06 22 02 10 f4 62 00 00
>0259b8	1a 00 e1 00 2e 3e 27 32 b5 c5 0c 26 0b 24 05 40
>0259c8	28 32 06 22 1c 10 6f 63 00 00 1c 00 e2 00 2e 3e
>0259d8	27 32 0b 24 69 bd 0b 24 0b 24 05 40 28 32 06 22
>0259e8	0b 24 64 bd 00 00 1a 00 e3 00 2e 3e 27 32 0b 24
>0259f8	05 40 02 20 10 c6 28 32 06 22 0b 24 01 40 00 00
>025a08	1c 00 e4 00 2e 3e 27 32 39 c6 0a 24 e2 cd 0c c0
>025a18	28 32 06 22 0b 24 03 10 66 72 00 00 20 00 e5 00
>025a28	2e 3e 27 32 57 cd b5 cc 06 c0 03 20 03 d5 02 40
>025a38	28 32 28 32 06 22 0b 24 0e 40 00 00 20 00 e6 00
>025a48	2e 3e 27 32 0b 24 04 10 94 99 0a 24 0b 24 7e 40
>025a58	28 32 06 22 0b 24 04 10 12 9a 00 00 18 00 e7 00
>025a68	2e 3e 27 32 0b 24 10 40 0d 26 57 c5 28 32 06 22
>025a78	00 40 00 00 1a 00 e8 00 2e 3e 27 32 eb 55 03 20
>025a88	0b 24 61 40 28 32 06 22 0b 24 8c 55 00 00 20 00
>025a98	e9 00 2e 3e 27 32 80 cd 1e c0 03 20 74 cd 1c ce
>025aa8	0c c0 28 32 06 22 0b 24 03 10 83 64 00 00 1e 00
>025ab8	ea 00 2e 3e 27 32 0b 24 10 40 0b 24 02 10 07 49
>025ac8	28 32 06 22 0b 24 02 10 17 49 00 00 1a 00 eb 00
>025ad8	2e 3e 27 32 57 cd b5 cc 06 c0 0d 26 11 c0 28 32
>025ae8	06 22 00 40 00 00 1c 00 ec 00 2e 3e 27 32 35 de
>025af8	1b d0 05 40 28 32 01 20 18 c0 28 32 06 22 00 40
>025b08	00 00 20 00 ed 00 2e 3e 27 32 35 de 1b d0 05 40
>025b18	28 32 03 20 de cd 03 c0 28 32 06 22 02 10 e2 98
>025b28	00 00 1c 00 ee 00 2e 3e 27 32 87 cd 2b cb 0f c0
>025b38	02 20 ca cc 08 c0 28 32 06 22 fb 55 00 00 22 00
>025b48	ef 00 2e 3e 27 32 3f de 07 d0 02 40 28 32 0c 26
>025b58	05 10 b2 44 28 32 06 22 0b 24 53 13 82 59 00 00
>025b68	1a 00 f0 00 2e 3e 27 32 08 c0 02 20 c8 40 28 32
>025b78	06 22 0b 24 01 10 32 b6 00 00 1e 00 f1 00 2e 3e
>025b88	27 32 03 d5 03 40 28 32 0d 26 57 cd b5 cc 06 c0
>025b98	28 32 06 22 01 40 00 00 1a 00 f2 00 2e 3e 27 32
>025ba8	88 40 01 20 0b 24 03 10 77 72 28 32 06 22 88 40
>025bb8	00 00 1a 00 f3 00 2e 3e 27 32 0b 24 77 40 02 20
>025bc8	fd c5 28 32 06 22 0b 24 61 40 00 00 1c 00 f4 00
>025bd8	2e 3e 27 32 cd c4 0a 24 2e cd 52 c9 11 c0 28 32
>025be8	06 22 05 10 f7 77 00 00 1a 00 f5 00 2e 3e 27 32
>025bf8	58 c6 01 20 f5 cc 73 c8 02 c0 28 32 06 22 1a 40
>025c08	00 00 1a 00 f6 00 2e 3e 27 32 0b 24 53 40 02 20
>025c18	65 c6 28 32 06 22 0b 24 53 40 00 00 1a 00 f7 00
>025c28	2e 3e 27 32 9f 40 02 20 5d cd 63 c2 28 32 06 22
>025c38	03 10 df ad 00 00 1c 00 f8 00 2e 3e 27 32 62 ce
>025c48	51 c4 0d 26 03 d5 00 40 28 32 28 32 06 22 00 40
>025c58	00 00 1c 00 f9 00 2e 3e 27 32 08 c0 03 20 6b ce
>025c68	ca cb 13 c0 28 32 06 22 01 10 7d b6 00 00 20 00
>025c78	fa 00 2e 3e 27 32 68 ce 01 ca 1d c0 01 20 35 de
>025c88	1b d0 02 40 28 32 28 32 06 22 40 40 00 00 1a 00
>025c98	fb 00 2e 3e 27 32 0b 24 e6 66 0b 24 10 c6 28 32
>025ca8	06 22 0b 24 54 43 00 00 18 00 fc 00 2e 3e 27 32
>025cb8	0b 24 77 40 01 20 8c b3 28 32 06 22 88 b3 00 00
>025cc8	1a 00 fd 00 2e 3e 27 32 06 c0 0c 26 e2 cd 0c c0
>025cd8	28 32 06 22 56 11 f3 a8 00 00 1c 00 fe 00 2e 3e
>025ce8	27 32 8c b3 0c 26 0b 24 05 40 28 32 06 22 0b 24
>025cf8	04 10 bc 81 00 00 1a 00 ff 00 2e 3e 27 32 58 c6
>025d08	0a 24 87 cd 2b cb 0f c0 28 32 06 22 8a a0 00 00
>025d18	1e 00 00 01 2e 3e 27 32 9e 40 02 20 0b 24 03 10
>025d28	e3 9b 28 32 06 22 0b 24 03 10 61 9b 00 00 1a 00
>025d38	01 01 2e 3e 27 32 3a a0 0d 26 0b 24 05 40 28 32
>025d48	06 22 0b 24 3e 53 00 00 20 00 02 01 2e 3e 27 32
>025d58	87 cd 2b cb 0f c0 0b 24 02 10 07 49 28 32 06 22
>025d68	0b 24 02 10 b7 48 00 00 1a 00 03 01 2e 3e 27 32
>025d78	fa c4 0c 26 16 c0 28 32 06 22 0b 24 49 10 90 7e
>025d88	00 00 1a 00 04 01 2e 3e 27 32 06 c0 02 20 02 10
>025d98	d5 4e 28 32 06 22 0b 24 21 40 00 00 20 00 05 01
>025da8	2e 3e 27 32 67 ce 0d c0 02 20 0b 24 01 10 68 7e
>025db8	28 32 06 22 0b 24 01 10 43 7e 00 00 1e 00 06 01
>025dc8	2e 3e 27 32 57 cd b5 cc 06 c0 0c 26 b5 c5 28 32
>025dd8	06 22 0b 24 72 13 54 5e 00 00 20 00 07 01 2e 3e
>025de8	27 32 39 c6 03 20 d9 dd 0e dc 09 d0 02 40 28 32
>025df8	28 32 06 22 0b 24 60 40 00 00 16 00 08 01 2e 3e
>025e08	27 32 55 c5 0d 26 06 c0 28 32 06 22 fe 45 00 00
>025e18	1c 00 09 01 2e 3e 27 32 f5 cc 73 c8 02 c0 02 20
>025e28	5e c5 28 32 06 22 04 10 ff 8a 00 00 1c 00 0a 01
>025e38	2e 3e 27 32 67 ce 0d c0 02 20 04 10 83 91 28 32
>025e48	06 22 04 10 af 91 00 00 20 00 0b 01 2e 3e 27 32
>025e58	53 cd 1b c0 0a 24 0b 24 01 10 e2 49 28 32 06 22
>025e68	0b 24 01 10 42 49 00 00 18 00 0c 01 2e 3e 27 32
>025e78	10 c6 01 20 65 c6 28 32 06 22 0b 24 d4 63 00 00
>025e88	20 00 0d 01 2e 3e 27 32 6b ce ca cb 13 c0 0a 24
>025e98	d5 dd d7 d0 01 40 28 32 28 32 06 22 83 40 00 00
>025ea8	1e 00 0e 01 2e 3e 27 32 8a d5 03 40 28 32 03 20
>025eb8	9e 40 28 32 06 22 0b 24 04 10 0e 99 00 00 18 00
>025ec8	0f 01 2e 3e 27 32 50 40 02 20 65 c6 28 32 06 22
>025ed8	0b 24 03 40 00 00 1e 00 10 01 2e 3e 27 32 d9 dd
>025ee8	0e dc 09 d0 05 40 28 32 01 20 0e 40 28 32 06 22
>025ef8	0e 40 00 00 1e 00 11 01 2e 3e 27 32 0b d0 03 40
>025f08	28 32 0b 24 0b 24 53 40 28 32 06 22 04 10 e2 8d
>025f18	00 00 1a 00 12 01 2e 3e 27 32 57 cd b5 cc 06 c0
>025f28	0b 24 16 c0 28 32 06 22 4c 7d 00 00 16 00 13 01
>025f38	2e 3e 27 32 39 c6 03 20 3a a0 28 32 06 22 2b a0
>025f48	00 00 1a 00 14 01 2e 3e 27 32 0b 24 77 40 03 20
>025f58	55 c5 28 32 06 22 04 10 48 9d 00 00 22 00 15 01
>025f68	2e 3e 27 32 09 d0 06 40 28 32 0c 26 0b 24 02 10
>025f78	6d 80 28 32 06 22 0b 24 fc 10 01 ab 00 00 1a 00
>025f88	16 01 2e 3e 27 32 11 c0 03 20 c8 40 28 32 06 22
>025f98	0b 24 03 10 2b 9b 00 00 18 00 17 01 2e 3e 27 32
>025fa8	53 cd 1b c0 0a 24 9e 40 28 32 06 22 3e 41 00 00
>025fb8	1c 00 18 01 2e 3e 27 32 0b 24 77 40 01 20 0b 24
>025fc8	53 40 28 32 06 22 0b 24 77 40 00 00 18 00 19 01
>025fd8	2e 3e 27 32 06 c0 02 20 55 c5 28 32 06 22 0b 24
>025fe8	25 40 00 00 20 00 1a 01 2e 3e 27 32 f2 cc 58 ce
>025ff8	11 c0 0c 26 62 ce 51 c4 28 32 06 22 0b 24 57 10
>026008	0c 88 00 00 1a 00 1b 01 2e 3e 27 32 0b 24 77 40
>026018	0d 26 e2 cd 0c c0 28 32 06 22 00 40 00 00 1a 00
>026028	1c 01 2e 3e 27 32 10 c6 0c 26 2d 40 28 32 06 22
>026038	0b 24 0c 10 aa 80 00 00 1e 00 1d 01 2e 3e 27 32
>026048	0b 24 06 10 c6 49 0c 26 0b 24 10 40 28 32 06 22
>026058	61 10 60 5c 00 00 20 00 1e 01 2e 3e 27 32 f5 cc
>026068	73 c8 02 c0 02 20 c3 cc 17 c0 28 32 06 22 0b 24
>026078	01 10 21 b8 00 00 1e 00 1f 01 2e 3e 27 32 68 ce
>026088	01 ca 1d c0 03 20 05 10 35 9f 28 32 06 22 05 10
>026098	fd 9f 00 00 1c 00 20 01 2e 3e 27 32 89 c5 02 20
>0260a8	09 d0 06 40 28 32 28 32 06 22 0b 24 1b a2 00 00
>0260b8	1c 00 21 01 2e 3e 27 32 0b 24 10 40 0a 24 08 c0
>0260c8	28 32 06 22 0b 24 01 10 8a b6 00 00 1a 00 22 01
>0260d8	2e 3e 27 32 80 cd 1e c0 02 20 39 c6 28 32 06 22
>0260e8	0b 24 0f 40 00 00 20 00 23 01 2e 3e 27 32 f7 d4
>0260f8	06 40 28 32 0c 26 09 d0 03 40 28 32 28 32 06 22
>026108	09 12 80 a2 00 00 1a 00 24 01 2e 3e 27 32 c9 cc
>026118	1b c0 0b 24 bd 40 28 32 06 22 02 10 18 4e 00 00
>026128	1e 00 25 01 2e 3e 27 32 2e cd 52 c9 11 c0 01 20
>026138	0b 24 e6 66 28 32 06 22 0b 24 f8 66 00 00 1e 00
>026148	26 01 2e 3e 27 32 3f de 07 d0 04 40 28 32 0d 26
>026158	9f 40 28 32 06 22 0b 24 32 41 00 00 1c 00 27 01
>026168	2e 3e 27 32 ce c5 0b 24 8a d5 02 40 28 32 28 32
>026178	06 22 05 10 ac 6e 00 00 1c 00 28 01 2e 3e 27 32
>026188	ce c5 03 20 57 cd b5 cc 06 c0 28 32 06 22 05 10
>026198	3e 6e 00 00 1c 00 29 01 2e 3e 27 32 0b 24 61 40
>0261a8	01 20 0b 24 b0 7c 28 32 06 22 0b 24 f0 7c 00 00
>0261b8	20 00 2a 01 2e 3e 27 32 e6 cd 14 c0 0c 26 2e cd
>0261c8	52 c9 11 c0 28 32 06 22 0b 24 57 12 be 6e 00 00
>0261d8	24 00 2b 01 2e 3e 27 32 f7 d4 06 40 28 32 01 20
>0261e8	d9 dd 0e dc 09 d0 00 40 28 32 28 32 06 22 02 10
>0261f8	38 bb 00 00 24 00 2c 01 2e 3e 27 32 d9 dd 0e dc
>026208	09 d0 02 40 28 32 02 20 f5 cc 73 c8 02 c0 28 32
>026218	06 22 0b 24 41 40 00 00 16 00 2d 01 2e 3e 27 32
>026228	9e 40 03 20 9f 40 28 32 06 22 01 40 00 00 1c 00
>026238	2e 01 2e 3e 27 32 80 cd 1e c0 02 20 04 10 40 6b
>026248	28 32 06 22 0b 24 10 40 00 00 1a 00 2f 01 2e 3e
>026258	27 32 d5 c4 02 20 57 cd b5 cc 06 c0 28 32 06 22
>026268	9f a9 00 00 1c 00 30 01 2e 3e 27 32 0b 24 03 10
>026278	4e 75 0d 26 62 ce 51 c4 28 32 06 22 82 44 00 00
>026288	1a 00 31 01 2e 3e 27 32 65 c6 0b 24 03 c0 28 32
>026298	06 22 0b 24 02 10 8d 7f 00 00 1e 00 32 01 2e 3e
>0262a8	27 32 09 d0 05 40 28 32 0a 24 02 10 d4 62 28 32
>0262b8	06 22 02 10 91 63 00 00 20 00 33 01 2e 3e 27 32
>0262c8	d9 dd 0e dc 09 d0 04 40 28 32 01 20 0b 24 92 63
>0262d8	28 32 06 22 2e 58 00 00 1e 00 34 01 2e 3e 27 32
>0262e8	c8 40 0d 26 d9 dd 0e dc 09 d0 05 40 28 32 28 32
>0262f8	06 22 0e 40 00 00 1c 00 35 01 2e 3e 27 32 0b 24
>026308	61 40 0d 26 19 d0 02 40 28 32 28 32 06 22 00 40
>026318	00 00 18 00 36 01 2e 3e 27 32 67 ce 0d c0 0d 26
>026328	eb 55 28 32 06 22 00 40 00 00 1c 00 37 01 2e 3e
>026338	27 32 67 ce 0d c0 0a 24 02 10 3a 7f 28 32 06 22
>026348	02 10 67 7f 00 00 18 00 38 01 2e 3e 27 32 58 c6
>026358	0a 24 62 ce 51 c4 28 32 06 22 d9 9f 00 00 1e 00
>026368	39 01 2e 3e 27 32 53 cd 1b c0 0d 26 35 de 1b d0
>026378	03 40 28 32 28 32 06 22 00 40 00 00 1e 00 3a 01
>026388	2e 3e 27 32 0b 24 05 10 b5 bb 02 20 c8 40 28 32
>026398	06 22 0b 24 05 10 35 bb 00 00 18 00 3b 01 2e 3e
>0263a8	27 32 0b 24 92 63 01 20 50 40 28 32 06 22 40 40
>0263b8	00 00 1c 00 3c 01 2e 3e 27 32 d5 c4 0d 26 6b ce
>0263c8	ca cb 13 c0 28 32 06 22 0b 24 1a 55 00 00 20 00
>0263d8	3d 01 2e 3e 27 32 0b 24 03 10 25 89 0b 24 0b 24
>0263e8	53 40 28 32 06 22 0b 24 03 10 d2 88 00 00 1c 00
>0263f8	3e 01 2e 3e 27 32 0b 24 61 40 02 20 2a cd e6 c1
>026408	28 32 06 22 0b 24 61 40 00 00 1e 00 3f 01 2e 3e
>026418	27 32 02 10 07 49 0c 26 0b 24 46 40 28 32 06 22
>026428	0b 24 90 10 ea b7 00 00 1e 00 40 01 2e 3e 27 32
>026438	9e 40 0c 26 3f de 07 d0 03 40 28 32 28 32 06 22
>026448	b7 12 e0 43 00 00 1e 00 41 01 2e 3e 27 32 db cd
>026458	11 c4 0c 26 0b 24 53 40 28 32 06 22 0b 24 4b 10
>026468	f8 68 00 00 1a 00 42 01 2e 3e 27 32 05 10 6e 78
>026478	0c 26 9c 40 28 32 06 22 50 13 08 a3 00 00 1a 00
>026488	43 01 2e 3e 27 32 62 ce 51 c4 0b 24 57 c5 28 32
>026498	06 22 04 10 20 51 00 00 1a 00 44 01 2e 3e 27 32
>0264a8	10 c6 01 20 57 cd b5 cc 06 c0 28 32 06 22 0c 40
>0264b8	00 00 1c 00 45 01 2e 3e 27 32 b5 c5 0b 24 0b 24
>0264c8	65 40 28 32 06 22 0b 24 05 10 7e 93 00 00 1c 00
>0264d8	46 01 2e 3e 27 32 0b 24 02 10 d7 54 0d 26 39 c6
>0264e8	28 32 06 22 0b 24 48 50 00 00 18 00 47 01 2e 3e
>0264f8	27 32 9f 40 02 20 5e c5 28 32 06 22 04 10 ff 8a
>026508	00 00 1c 00 48 01 2e 3e 27 32 11 c0 0a 24 0b 24
>026518	65 40 28 32 06 22 0b 24 03 10 48 9c 00 00 18 00
>026528	49 01 2e 3e 27 32 02 10 d5 4e 01 20 9f 40 28 32
>026538	06 22 95 40 00 00 16 00 4a 01 2e 3e 27 32 c8 40
>026548	0d 26 ce c5 28 32 06 22 00 40 00 00 16 00 4b 01
>026558	2e 3e 27 32 50 40 03 20 3a a0 28 32 06 22 6a a0
>026568	00 00 1a 00 4c 01 2e 3e 27 32 65 c6 0a 24 08 c0
>026578	28 32 06 22 0b 24 01 10 cd b6 00 00 1e 00 4d 01
>026588	2e 3e 27 32 f5 cc 73 c8 02 c0 03 20 05 10 a2 6e
>026598	28 32 06 22 05 10 3d 6e 00 00 1e 00 4e 01 2e 3e
>0265a8	27 32 0b 24 06 10 c6 49 0b 24 9f 40 28 32 06 22
>0265b8	0b 24 06 10 65 4a 00 00 1c 00 4f 01 2e 3e 27 32
>0265c8	02 10 70 6b 0a 24 0b 24 10 40 28 32 06 22 02 10
>0265d8	60 6b 00 00 1c 00 50 01 2e 3e 27 32 0b 24 53 40
>0265e8	0d 26 0b 24 01 10 fe 64 28 32 06 22 00 40 00 00
>0265f8	1a 00 51 01 2e 3e 27 32 0b 24 3c a2 0b 24 a0 40
>026608	28 32 06 22 0b 24 dc a2 00 00 1c 00 52 01 2e 3e
>026618	27 32 9b 40 0b 24 01 10 e8 5c 28 32 06 22 0b 24
>026628	01 10 4d 5c 00 00 1a 00 53 01 2e 3e 27 32 57 cd
>026638	b5 cc 06 c0 02 20 d5 c4 28 32 06 22 9f a9 00 00
>026648	1e 00 54 01 2e 3e 27 32 7d cd 1d c0 0a 24 0b 24
>026658	65 40 28 32 06 22 0b 24 02 10 3c 55 00 00 1e 00
>026668	55 01 2e 3e 27 32 f5 cc 73 c8 02 c0 01 20 c1 cc
>026678	b1 ca 0c c0 28 32 06 22 93 40 00 00 1a 00 56 01
>026688	2e 3e 27 32 9c 40 0b 24 c8 cc 8b c9 04 c0 28 32
>026698	06 22 1f 7e 00 00 1c 00 57 01 2e 3e 27 32 03 d5
>0266a8	00 40 28 32 02 20 a0 40 28 32 06 22 05 10 fd b4
>0266b8	00 00 1c 00 58 01 2e 3e 27 32 7d cd 1d c0 03 20
>0266c8	c8 40 28 32 06 22 0b 24 02 10 1f 54 00 00 16 00
>0266d8	59 01 2e 3e 27 32 c8 40 01 20 9e 40 28 32 06 22
>0266e8	88 40 00 00 1c 00 5a 01 2e 3e 27 32 2b c6 03 20
>0266f8	0b 24 77 40 28 32 06 22 0b 24 03 10 a6 b5 00 00
>026708	1a 00 5b 01 2e 3e 27 32 03 10 71 ab 0c 26 fd c5
>026718	28 32 06 22 5e 12 be 8f 00 00 1e 00 5c 01 2e 3e
>026728	27 32 0b 24 53 40 0c 26 32 ce 7a c5 28 32 06 22
>026738	0b 24 7d 11 9a a1 00 00 1a 00 5d 01 2e 3e 27 32
>026748	57 c5 03 20 9e 40 28 32 06 22 0b 24 04 10 1f 51
>026758	00 00 18 00 5e 01 2e 3e 27 32 58 c6 0d 26 65 c6
>026768	28 32 06 22 0b 24 28 41 00 00 18 00 5f 01 2e 3e
>026778	27 32 0b 24 e6 66 03 20 21 c5 28 32 06 22 00 40
>026788	00 00 22 00 60 01 2e 3e 27 32 3f de 07 d0 00 40
>026798	28 32 0d 26 68 ce 01 ca 1d c0 28 32 06 22 0b 24
>0267a8	f8 40 00 00 22 00 61 01 2e 3e 27 32 05 10 b2 44
>0267b8	01 20 d9 dd 0e dc 09 d0 02 40 28 32 28 32 06 22
>0267c8	05 10 b0 44 00 00 1c 00 62 01 2e 3e 27 32 9e 40
>0267d8	0a 24 84 cd 4c c9 0d c0 28 32 06 22 02 10 72 63
>0267e8	00 00 22 00 63 01 2e 3e 27 32 0b 24 01 10 7a b6
>0267f8	03 20 09 d0 06 40 28 32 28 32 06 22 0b 24 01 10
>026808	1d b6 00 00 1c 00 64 01 2e 3e 27 32 ca cc 08 c0
>026818	0c 26 65 c6 28 32 06 22 0b 24 0e 10 31 5b 00 00
>026828	1c 00 65 01 2e 3e 27 32 62 ce 51 c4 01 20 03 10
>026838	d3 b5 28 32 06 22 03 10 93 b5 00 00 1c 00 66 01
>026848	2e 3e 27 32 80 cd 1e c0 0a 24 0b 24 ba b5 28 32
>026858	06 22 0b 24 ca b5 00 00 16 00 67 01 2e 3e 27 32
>026868	ce c5 01 20 fd c5 28 32 06 22 82 40 00 00 1a 00
>026878	68 01 2e 3e 27 32 3a a0 0d 26 0b 24 05 40 28 32
>026888	06 22 0b 24 3e 53 00 00 1a 00 69 01 2e 3e 27 32
>026898	9c 40 0b 24 e2 cd 0c c0 28 32 06 22 03 10 13 73
>0268a8	00 00 1a 00 6a 01 2e 3e 27 32 2d 40 0a 24 0b 24
>0268b8	83 7d 28 32 06 22 0b 24 56 7d 00 00 1a 00 6b 01
>0268c8	2e 3e 27 32 0b 24 53 40 01 20 65 c6 28 32 06 22
>0268d8	0b 24 53 40 00 00 1a 00 6c 01 2e 3e 27 32 0b 24
>0268e8	77 40 0d 26 02 10 3a 7f 28 32 06 22 00 40 00 00
>0268f8	18 00 6d 01 2e 3e 27 32 9e 40 01 20 5d cd 63 c2
>026908	28 32 06 22 12 40 00 00 20 00 6e 01 2e 3e 27 32
>026918	87 cd 2b cb 0f c0 0b 24 03 10 52 ad 28 32 06 22
>026928	0b 24 03 10 02 ad 00 00 1c 00 6f 01 2e 3e 27 32
>026938	9f 40 02 20 2e cd 52 c9 11 c0 28 32 06 22 0b 24
>026948	61 40 00 00 18 00 70 01 2e 3e 27 32 65 40 0a 24
>026958	67 ce 0d c0 28 32 06 22 92 40 00 00 1c 00 71 01
>026968	2e 3e 27 32 53 cd 1b c0 0d 26 0b 24 04 10 15 b2
>026978	28 32 06 22 00 40 00 00 20 00 72 01 2e 3e 27 32
>026988	8a d5 00 40 28 32 0a 24 7d cd 1d c0 28 32 06 22
>026998	0b 24 02 10 55 55 00 00 20 00 73 01 2e 3e 27 32
>0269a8	0b 24 05 40 0a 24 0b 24 01 10 34 87 28 32 06 22
>0269b8	0b 24 01 10 39 87 00 00 1e 00 74 01 2e 3e 27 32
>0269c8	39 c6 0b 24 84 cd 4c c9 0d c0 28 32 06 22 0b 24
>0269d8	02 10 c3 62 00 00 1c 00 75 01 2e 3e 27 32 c9 cc
>0269e8	0e c6 0c 26 0b 24 61 40 28 32 06 22 4d 12 06 74
>0269f8	00 00 1e 00 76 01 2e 3e 27 32 65 c6 01 20 0b 24
>026a08	06 10 c6 49 28 32 06 22 0b 24 06 10 d8 49 00 00
>026a18	20 00 77 01 2e 3e 27 32 c8 40 03 20 3f de 07 d0
>026a28	01 40 28 32 28 32 06 22 0b 24 01 10 01 bc 00 00
>026a38	1a 00 78 01 2e 3e 27 32 0b 24 61 40 0a 24 2d 40
>026a48	28 32 06 22 0b 24 34 40 00 00 1e 00 79 01 2e 3e
>026a58	27 32 28 cd 18 c0 0b 24 0b 24 61 40 28 32 06 22
>026a68	0b 24 04 10 bb 65 00 00 1a 00 7a 01 2e 3e 27 32
>026a78	11 40 03 20 02 10 d5 4e 28 32 06 22 02 10 c4 4e
>026a88	00 00 1e 00 7b 01 2e 3e 27 32 0b 24 92 63 03 20
>026a98	68 ce 01 ca 1d c0 28 32 06 22 0b 24 5a 63 00 00
>026aa8	1e 00 7c 01 2e 3e 27 32 05 10 6a b9 0b 24 87 cd
>026ab8	2b cb 0f c0 28 32 06 22 05 10 1a b9 00 00 20 00
>026ac8	7d 01 2e 3e 27 32 53 cd 1b c0 01 20 d9 dd 0e dc
>026ad8	09 d0 00 40 28 32 28 32 06 22 a0 40 00 00 1a 00
>026ae8	7e 01 2e 3e 27 32 0b 24 61 40 03 20 9c 40 28 32
>026af8	06 22 0b 24 fd 40 00 00 1e 00 7f 01 2e 3e 27 32
>026b08	0b 24 01 10 7a b6 0b 24 bd 40 28 32 06 22 0b 24
>026b18	01 10 37 b7 00 00 1e 00 80 01 2e 3e 27 32 0b 24
>026b28	e6 66 03 20 f5 cc 73 c8 02 c0 28 32 06 22 0b 24
>026b38	7b 66 00 00 1e 00 81 01 2e 3e 27 32 05 10 6a b9
>026b48	0a 24 09 d0 03 40 28 32 28 32 06 22 05 10 1a ba
>026b58	00 00 1e 00 82 01 2e 3e 27 32 28 b4 0c 26 2e cd
>026b68	52 c9 11 c0 28 32 06 22 0b 24 6b 10 98 be 00 00
>026b78	1a 00 83 01 2e 3e 27 32 02 10 d5 4e 0c 26 fa c4
>026b88	28 32 06 22 47 11 f7 ba 00 00 18 00 84 01 2e 3e
>026b98	27 32 db cd 11 c4 02 20 2d 40 28 32 06 22 2d b4
>026ba8	00 00 18 00 85 01 2e 3e 27 32 fa c4 0c 26 ae 58
>026bb8	28 32 06 22 1d 10 5a b1 00 00 18 00 86 01 2e 3e
>026bc8	27 32 5e c5 0a 24 9c 40 28 32 06 22 04 10 fc 8a
>026bd8	00 00 1c 00 87 01 2e 3e 27 32 65 c6 03 20 f2 cc
>026be8	58 ce 11 c0 28 32 06 22 0b 24 df b3 00 00 1c 00
>026bf8	88 01 2e 3e 27 32 8a d5 00 40 28 32 0b 24 c8 40
>026c08	28 32 06 22 0b 24 46 41 00 00 16 00 89 01 2e 3e
>026c18	27 32 ce c5 01 20 11 40 28 32 06 22 00 40 00 00
>026c28	1e 00 8a 01 2e 3e 27 32 0b 24 a9 40 03 20 0b 24
>026c38	01 10 fe 64 28 32 06 22 01 10 55 64 00 00 1a 00
>026c48	8b 01 2e 3e 27 32 f2 cc 58 ce 11 c0 0b 24 2d 40
>026c58	28 32 06 22 5f b3 00 00 1c 00 8c 01 2e 3e 27 32
>026c68	0b 24 05 40 0d 26 0b 24 03 10 4e 75 28 32 06 22
>026c78	00 40 00 00 1c 00 8d 01 2e 3e 27 32 0b 24 04 10
>026c88	1c 66 0d 26 fd c5 28 32 06 22 0b 24 7b 43 00 00
>026c98	18 00 8e 01 2e 3e 27 32 a0 40 0d 26 05 10 6e 78
>026ca8	28 32 06 22 00 40 00 00 18 00 8f 01 2e 3e 27 32
>026cb8	9e 40 02 20 10 c6 28 32 06 22 0b 24 02 63 00 00
>026cc8	1a 00 90 01 2e 3e 27 32 5e c5 0c 26 53 cd 1b c0
>026cd8	28 32 06 22 dc 12 00 bc 00 00 1c 00 91 01 2e 3e
>026ce8	27 32 67 ce 0d c0 01 20 87 cd 2b cb 0f c0 28 32
>026cf8	06 22 00 40 00 00 18 00 92 01 2e 3e 27 32 9f 40
>026d08	03 20 53 cd 1b c0 28 32 06 22 3f 40 00 00 1e 00
>026d18	93 01 2e 3e 27 32 0b 24 4f 40 0b 24 8a d5 04 40
>026d28	28 32 28 32 06 22 03 10 ef a0 00 00 18 00 94 01
>026d38	2e 3e 27 32 0b 24 10 40 0d 26 ae 58 28 32 06 22
>026d48	00 40 00 00 1c 00 95 01 2e 3e 27 32 65 c6 0a 24
>026d58	e2 cd 0c c0 28 32 06 22 0b 24 03 10 ca 72 00 00
>026d68	1c 00 96 01 2e 3e 27 32 74 cd 1c ce 0c c0 02 20
>026d78	fd c5 28 32 06 22 03 10 9f 64 00 00 18 00 97 01
>026d88	2e 3e 27 32 cd c4 01 20 65 c6 28 32 06 22 05 10
>026d98	2c 78 00 00 1c 00 98 01 2e 3e 27 32 2d 40 03 20
>026da8	00 ce 04 c0 28 32 06 22 0b 24 01 10 1f 87 00 00
>026db8	1a 00 99 01 2e 3e 27 32 9e 40 0d 26 0b 24 01 10
>026dc8	fe 64 28 32 06 22 00 40 00 00 1a 00 9a 01 2e 3e
>026dd8	27 32 50 40 02 20 0b 24 65 40 28 32 06 22 0b 24
>026de8	25 40 00 00 22 00 9b 01 2e 3e 27 32 0b 24 10 40
>026df8	0c 26 35 de 1b d0 04 40 28 32 28 32 06 22 0b 24
>026e08	4a 10 30 58 00 00 18 00 9c 01 2e 3e 27 32 0b 24
>026e18	53 40 0d 26 9c 40 28 32 06 22 00 40 00 00 1c 00
>026e28	9d 01 2e 3e 27 32 0b 24 53 40 0a 24 08 c0 28 32
>026e38	06 22 0b 24 01 10 cd b6 00 00 1a 00 9e 01 2e 3e
>026e48	27 32 0b 24 10 40 0a 24 67 ce 0d c0 28 32 06 22
>026e58	1d 40 00 00 1e 00 9f 01 2e 3e 27 32 6b ce ca cb
>026e68	13 c0 02 20 db cd 11 c4 28 32 06 22 0b 24 05 40
>026e78	00 00 16 00 a0 01 2e 3e 27 32 86 48 02 20 9f 40
>026e88	28 32 06 22 9f 48 00 00 1c 00 a1 01 2e 3e 27 32
>026e98	0b 24 b0 7c 0a 24 53 cd 1b c0 28 32 06 22 0b 24
>026ea8	10 7c 00 00 16 00 a2 01 2e 3e 27 32 39 c6 01 20
>026eb8	18 40 28 32 06 22 10 40 00 00 1c 00 a3 01 2e 3e
>026ec8	27 32 0b 24 10 40 0a 24 68 ce 01 ca 1d c0 28 32
>026ed8	06 22 b8 40 00 00 18 00 a4 01 2e 3e 27 32 50 40
>026ee8	02 20 ca cc 08 c0 28 32 06 22 fb 55 00 00 20 00
>026ef8	a5 01 2e 3e 27 32 84 cd 4c c9 0d c0 02 20 f5 cc
>026f08	73 c8 02 c0 28 32 06 22 02 10 df 62 00 00 1e 00
>026f18	a6 01 2e 3e 27 32 2a cd e6 c1 0a 24 2e cd 52 c9
>026f28	11 c0 28 32 06 22 02 10 90 48 00 00 1c 00 a7 01
>026f38	2e 3e 27 32 32 ce 7a c5 0d 26 0b 24 05 40 28 32
>026f48	06 22 0b 24 bf b5 00 00 1c 00 a8 01 2e 3e 27 32
>026f58	0b 24 e6 66 0a 24 53 cd 1b c0 28 32 06 22 0b 24
>026f68	46 66 00 00 1a 00 a9 01 2e 3e 27 32 03 10 52 ad
>026f78	03 20 b0 40 28 32 06 22 03 10 e2 ad 00 00 1e 00
>026f88	aa 01 2e 3e 27 32 0b 24 03 10 f6 79 03 20 50 40
>026f98	28 32 06 22 0b 24 03 10 a6 79 00 00 20 00 ab 01
>026fa8	2e 3e 27 32 3f de 07 d0 02 40 28 32 0c 26 a9 cd
>026fb8	11 c0 28 32 06 22 7d 12 8b a7 00 00 18 00 ac 01
>026fc8	2e 3e 27 32 01 10 20 ba 01 20 2d 40 28 32 06 22
>026fd8	20 40 00 00 16 00 ad 01 2e 3e 27 32 d5 c4 02 20
>026fe8	50 40 28 32 06 22 d3 a9 00 00 1c 00 ae 01 2e 3e
>026ff8	27 32 c9 cc 0e c6 03 20 11 40 28 32 06 22 0b 24
>027008	06 10 d5 49 00 00 1a 00 af 01 2e 3e 27 32 02 10
>027018	3a 7f 0d 26 67 ce 0d c0 28 32 06 22 18 47 00 00
>027028	16 00 b0 01 2e 3e 27 32 9f 40 0d 26 16 c0 28 32
>027038	06 22 00 40 00 00 1e 00 b1 01 2e 3e 27 32 de cd
>027048	03 c0 02 20 f7 d4 05 40 28 32 28 32 06 22 02 10
>027058	ef 9c 00 00 1c 00 b2 01 2e 3e 27 32 db cd 11 c4
>027068	02 20 0b 24 65 40 28 32 06 22 0b 24 45 40 00 00
>027078	22 00 b3 01 2e 3e 27 32 f5 cc 73 c8 02 c0 03 20
>027088	f7 d4 03 40 28 32 28 32 06 22 0b 24 05 10 36 6e
>027098	00 00 1a 00 b4 01 2e 3e 27 32 01 10 20 ba 0a 24
>0270a8	9f 40 28 32 06 22 01 10 bf ba 00 00 18 00 b5 01
>0270b8	2e 3e 27 32 89 c5 0b 24 9b 40 28 32 06 22 0b 24
>0270c8	d7 a2 00 00 1c 00 b6 01 2e 3e 27 32 0b 24 03 10
>0270d8	9c 8e 0d 26 80 cd 1e c0 28 32 06 22 e9 5c 00 00
>0270e8	1c 00 b7 01 2e 3e 27 32 e0 cd 66 ca 0a c0 0d 26
>0270f8	0b 24 a9 40 28 32 06 22 b4 43 00 00 1c 00 b8 01
>027108	2e 3e 27 32 0b 24 77 40 0c 26 2b c6 28 32 06 22
>027118	0b 24 d2 11 15 85 00 00 20 00 b9 01 2e 3e 27 32
>027128	0b 24 04 10 15 b2 0a 24 80 cd 1e c0 28 32 06 22
>027138	0b 24 04 10 25 b2 00 00 18 00 ba 01 2e 3e 27 32
>027148	83 a9 0c 26 11 40 28 32 06 22 0e 10 b3 41 00 00
>027158	1a 00 bb 01 2e 3e 27 32 62 ce 51 c4 0d 26 05 10
>027168	b2 44 28 32 06 22 00 40 00 00 1e 00 bc 01 2e 3e
>027178	27 32 0b d0 01 40 28 32 03 20 a0 40 28 32 06 22
>027188	0b 24 05 10 0c 64 00 00 1e 00 bd 01 2e 3e 27 32
>027198	c1 cc b1 ca 0c c0 02 20 9f 40 28 32 06 22 0b 24
>0271a8	02 10 61 80 00 00 1c 00 be 01 2e 3e 27 32 7d cd
>0271b8	1d c0 02 20 0b 24 53 40 28 32 06 22 0b 24 53 40
>0271c8	00 00 16 00 bf 01 2e 3e 27 32 88 40 0d 26 65 40
>0271d8	28 32 06 22 01 40 00 00 22 00 c0 01 2e 3e 27 32
>0271e8	d9 dd 0e dc 09 d0 01 40 28 32 02 20 f2 cc 58 ce
>0271f8	11 c0 28 32 06 22 9c b3 00 00 1a 00 c1 01 2e 3e
>027208	27 32 a0 40 0a 24 03 10 52 ad 28 32 06 22 03 10
>027218	f2 ad 00 00 1c 00 c2 01 2e 3e 27 32 c3 cc 17 c0
>027228	0a 24 2d 40 28 32 06 22 0b 24 01 10 03 b8 00 00
>027238	16 00 c3 01 2e 3e 27 32 11 c0 01 20 fa c4 28 32
>027248	06 22 19 40 00 00 1e 00 c4 01 2e 3e 27 32 0b 24
>027258	05 10 b5 bb 0a 24 a0 40 28 32 06 22 0b 24 05 10
>027268	15 bb 00 00 1e 00 c5 01 2e 3e 27 32 19 d0 01 40
>027278	28 32 0b 24 87 cd 2b cb 0f c0 28 32 06 22 36 48
>027288	00 00 22 00 c6 01 2e 3e 27 32 03 d5 03 40 28 32
>027298	0c 26 8a d5 04 40 28 32 28 32 06 22 0b 24 52 12
>0272a8	44 44 00 00 18 00 c7 01 2e 3e 27 32 9e 40 0b 24
>0272b8	62 ce 51 c4 28 32 06 22 ff 40 00 00 1a 00 c8 01
>0272c8	2e 3e 27 32 09 d0 04 40 28 32 0d 26 83 a9 28 32
>0272d8	06 22 00 40 00 00 1e 00 c9 01 2e 3e 27 32 0b 24
>0272e8	e6 66 0c 26 ca cc 08 c0 28 32 06 22 0b 24 a9 16
>0272f8	22 53 00 00 1e 00 ca 01 2e 3e 27 32 0b 24 10 40
>027308	0b 24 0b 24 02 10 6d 80 28 32 06 22 02 10 5d 80
>027318	00 00 20 00 cb 01 2e 3e 27 32 f2 cc 58 ce 11 c0
>027328	0c 26 0b 24 77 40 28 32 06 22 0b 24 6b 10 14 76
>027338	00 00 1a 00 cc 01 2e 3e 27 32 65 c6 01 20 0b 24
>027348	3c a2 28 32 06 22 0b 24 7c a2 00 00 1c 00 cd 01
>027358	2e 3e 27 32 2e cd 52 c9 11 c0 03 20 0b 24 61 40
>027368	28 32 06 22 16 40 00 00 1a 00 ce 01 2e 3e 27 32
>027378	6b ce ca cb 13 c0 0a 24 fa c4 28 32 06 22 96 40
>027388	00 00 1c 00 cf 01 2e 3e 27 32 84 cd 4c c9 0d c0
>027398	0d 26 65 c6 28 32 06 22 0b 24 81 43 00 00 20 00
>0273a8	d0 01 2e 3e 27 32 0b 24 02 10 6d 80 0b 24 0b 24
>0273b8	61 40 28 32 06 22 0b 24 02 10 0c 80 00 00 1a 00
>0273c8	d1 01 2e 3e 27 32 02 10 d5 4e 0c 26 39 c6 28 32
>0273d8	06 22 23 10 25 bc 00 00 1e 00 d2 01 2e 3e 27 32
>0273e8	57 cd b5 cc 06 c0 02 20 0b 24 65 40 28 32 06 22
>0273f8	0b 24 61 40 00 00 1e 00 d3 01 2e 3e 27 32 9b 40
>027408	02 20 c1 cc b1 ca 0c c0 28 32 06 22 0b 24 02 10
>027418	65 80 00 00 22 00 d4 01 2e 3e 27 32 d5 dd d7 d0
>027428	03 40 28 32 02 20 6b ce ca cb 13 c0 28 32 06 22
>027438	0b 24 05 40 00 00 18 00 d5 01 2e 3e 27 32 fa c4
>027448	0a 24 db cd 11 c4 28 32 06 22 c3 b4 00 00 1a 00
>027458	d6 01 2e 3e 27 32 9b 40 0a 24 05 10 6a b9 28 32
>027468	06 22 05 10 05 ba 00 00 1e 00 d7 01 2e 3e 27 32
>027478	04 10 60 8a 0a 24 6b ce ca cb 13 c0 28 32 06 22
>027488	04 10 5b 8a 00 00 1a 00 d8 01 2e 3e 27 32 9f 40
>027498	03 20 05 10 6a b9 28 32 06 22 05 10 f5 b9 00 00
>0274a8	1a 00 d9 01 2e 3e 27 32 0b 24 77 40 0c 26 fd c5
>0274b8	28 32 06 22 0b 24 72 89 00 00 1e 00 da 01 2e 3e
>0274c8	27 32 02 10 8e a7 0a 24 2e cd 52 c9 11 c0 28 32
>0274d8	06 22 02 10 17 a7 00 00 1a 00 db 01 2e 3e 27 32
>0274e8	83 a9 0c 26 67 ce 0d c0 28 32 06 22 25 10 07 4c
>0274f8	00 00 16 00 dc 01 2e 3e 27 32 11 40 0d 26 9c 40
>027508	28 32 06 22 00 40 00 00 1a 00 dd 01 2e 3e 27 32
>027518	62 ce 51 c4 0d 26 62 ce 51 c4 28 32 06 22 01 40
>027528	00 00 20 00 de 01 2e 3e 27 32 0b 24 65 40 0a 24
>027538	d5 dd d7 d0 02 40 28 32 28 32 06 22 01 10 0c 44
>027548	00 00 1e 00 df 01 2e 3e 27 32 0b 24 61 40 0c 26
>027558	0b 24 05 10 b5 bb 28 32 06 22 42 12 95 9f 00 00
>027568	1e 00 e0 01 2e 3e 27 32 9f 40 03 20 0b 24 02 10
>027578	d7 54 28 32 06 22 0b 24 02 10 4a 54 00 00 1e 00
>027588	e1 01 2e 3e 27 32 03 10 8d 64 0a 24 03 d5 04 40
>027598	28 32 28 32 06 22 03 10 2f 65 00 00 1e 00 e2 01
>0275a8	2e 3e 27 32 a9 cd 11 c0 0b 24 67 ce 0d c0 28 32
>0275b8	06 22 0b 24 03 10 40 a3 00 00 1a 00 e3 01 2e 3e
>0275c8	27 32 0b 24 83 7d 0a 24 fa c4 28 32 06 22 0b 24
>0275d8	e8 7c 00 00 16 00 e4 01 2e 3e 27 32 0e 40 03 20
>0275e8	58 c6 28 32 06 22 34 a0 00 00 1e 00 e5 01 2e 3e
>0275f8	27 32 87 cd 2b cb 0f c0 0c 26 02 10 8e a7 28 32
>027608	06 22 e0 10 60 9c 00 00 1c 00 e6 01 2e 3e 27 32
>027618	0b 24 77 40 0c 26 01 cd 20 c0 28 32 06 22 c6 12
>027628	23 41 00 00 16 00 e7 01 2e 3e 27 32 9e 40 0b 24
>027638	89 c5 28 32 06 22 da a2 00 00 18 00 e8 01 2e 3e
>027648	27 32 9f 40 01 20 03 10 52 ad 28 32 06 22 12 40
>027658	00 00 18 00 e9 01 2e 3e 27 32 9b 40 0d 26 02 10
>027668	a3 ba 28 32 06 22 00 40 00 00 1c 00 ea 01 2e 3e
>027678	27 32 0b 24 a9 40 0c 26 ce c5 28 32 06 22 0b 24
>027688	8a 13 f2 88 00 00 1c 00 eb 01 2e 3e 27 32 55 c5
>027698	0d 26 f5 cc 73 c8 02 c0 28 32 06 22 0b 24 ce 43
>0276a8	00 00 1a 00 ec 01 2e 3e 27 32 4a c5 03 20 0b 24
>0276b8	77 40 28 32 06 22 01 10 8b 64 00 00 1a 00 ed 01
>0276c8	2e 3e 27 32 9c 40 0a 24 f2 cc 58 ce 11 c0 28 32
>0276d8	06 22 28 b4 00 00 1e 00 ee 01 2e 3e 27 32 a0 40
>0276e8	02 20 0b 24 04 10 86 ac 28 32 06 22 0b 24 04 10
>0276f8	06 ac 00 00 1a 00 ef 01 2e 3e 27 32 b5 c5 0c 26
>027708	65 40 28 32 06 22 0b 24 3b 12 8f 58 00 00 1e 00
>027718	f0 01 2e 3e 27 32 01 cd 20 c0 0b 24 53 cd 1b c0
>027728	28 32 06 22 0b 24 05 10 55 bc 00 00 1e 00 f1 01
>027738	2e 3e 27 32 50 40 0b 24 0b d0 03 40 28 32 28 32
>027748	06 22 0b 24 04 10 3f 8d 00 00 20 00 f2 01 2e 3e
>027758	27 32 67 ce 0d c0 0a 24 0b 24 03 10 77 72 28 32
>027768	06 22 0b 24 03 10 4a 72 00 00 1e 00 f3 01 2e 3e
>027778	27 32 88 cd 02 c5 03 20 f5 cc 73 c8 02 c0 28 32
>027788	06 22 01 10 77 5c 00 00 18 00 f4 01 2e 3e 27 32
>027798	79 c5 03 20 39 c6 28 32 06 22 02 10 9f a7 00 00
>0277a8	1c 00 f5 01 2e 3e 27 32 0b 24 61 40 0b 24 5e c5
>0277b8	28 32 06 22 0b 24 04 10 c1 8a 00 00 18 00 f6 01
>0277c8	2e 3e 27 32 ca cc 08 c0 03 20 fd c5 28 32 06 22
>0277d8	75 55 00 00 22 00 f7 01 2e 3e 27 32 09 d0 04 40
>0277e8	28 32 0a 24 0b 24 03 10 4e 75 28 32 06 22 0b 24
>0277f8	03 10 10 76 00 00 18 00 f8 01 2e 3e 27 32 9e 40
>027808	01 20 04 10 60 8a 28 32 06 22 00 40 00 00 16 00
>027818	f9 01 2e 3e 27 32 55 c5 0d 26 65 c6 28 32 06 22
>027828	4a 47 00 00 1e 00 fa 01 2e 3e 27 32 09 d0 00 40
>027838	28 32 03 20 0b 24 7e 40 28 32 06 22 0b 24 61 49
>027848	00 00 1c 00 fb 01 2e 3e 27 32 0b 24 53 40 02 20
>027858	32 ce 7a c5 28 32 06 22 0b 24 41 40 00 00 1c 00
>027868	fc 01 2e 3e 27 32 04 10 ee ab 02 20 67 ce 0d c0
>027878	28 32 06 22 04 10 ef ab 00 00 1e 00 fd 01 2e 3e
>027888	27 32 0b 24 04 10 1c 66 03 20 0b 24 65 40 28 32
>027898	06 22 04 10 7f 66 00 00 1c 00 fe 01 2e 3e 27 32
>0278a8	65 c6 02 20 0b 24 01 10 34 87 28 32 06 22 0b 24
>0278b8	13 40 00 00 1c 00 ff 01 2e 3e 27 32 53 cd 1b c0
>0278c8	0a 24 f5 cc 73 c8 02 c0 28 32 06 22 3f 41 00 00
>0278d8	1c 00 00 02 2e 3e 27 32 5d cd 63 c2 0b 24 80 cd
>0278e8	1e c0 28 32 06 22 03 10 62 ad 00 00 16 00 01 02
>0278f8	2e 3e 27 32 2d 40 0d 26 fa c4 28 32 06 22 00 40
>027908	00 00 1c 00 02 02 2e 3e 27 32 c8 40 0c 26 01 cd
>027918	20 c0 28 32 06 22 0b 24 a9 14 68 65 00 00 1a 00
>027928	03 02 2e 3e 27 32 f5 cc 73 c8 02 c0 0d 26 cd c4
>027938	28 32 06 22 00 40 00 00 1a 00 04 02 2e 3e 27 32
>027948	0b 24 53 40 0d 26 04 10 be 8c 28 32 06 22 00 40
>027958	00 00 1a 00 05 02 2e 3e 27 32 16 c0 0b 24 0b 24
>027968	53 40 28 32 06 22 0b 24 5d 7c 00 00 18 00 06 02
>027978	2e 3e 27 32 0b 24 61 40 01 20 11 40 28 32 06 22
>027988	11 40 00 00 1c 00 07 02 2e 3e 27 32 8a d5 00 40
>027998	28 32 03 20 08 c0 28 32 06 22 01 10 04 b6 00 00
>0279a8	1e 00 08 02 2e 3e 27 32 0b 24 65 40 0b 24 0b 24
>0279b8	03 10 e3 9b 28 32 06 22 03 10 7e 9b 00 00 16 00
>0279c8	09 02 2e 3e 27 32 83 a9 0a 24 65 c6 28 32 06 22
>0279d8	30 a9 00 00 1c 00 0a 02 2e 3e 27 32 0b 24 65 40
>0279e8	0b 24 cd c4 28 32 06 22 0b 24 05 10 d3 78 00 00
>0279f8	1e 00 0b 02 2e 3e 27 32 0b 24 10 40 03 20 02 10
>027a08	d5 4e 28 32 06 22 0b 24 02 10 db 4e 00 00 1c 00
>027a18	0c 02 2e 3e 27 32 0b 24 77 40 02 20 02 10 d4 62
>027a28	28 32 06 22 0b 24 23 40 00 00 1e 00 0d 02 2e 3e
>027a38	27 32 5b cd 9f c0 0b 24 87 cd 2b cb 0f c0 28 32
>027a48	06 22 0b 24 0a b6 00 00 1a 00 0e 02 2e 3e 27 32
>027a58	9b 40 02 20 02 10 af 9c 28 32 06 22 02 10 bf 9c
>027a68	00 00 1a 00 0f 02 2e 3e 27 32 62 ce 51 c4 02 20
>027a78	eb 55 28 32 06 22 0b 24 01 40 00 00 1e 00 10 02
>027a88	2e 3e 27 32 0b 24 7e 40 02 20 0b 24 04 10 1c 66
>027a98	28 32 06 22 0b 24 1a 40 00 00 1c 00 11 02 2e 3e
>027aa8	27 32 80 cd 1e c0 01 20 de cd 03 c0 28 32 06 22
>027ab8	02 10 a0 9c 00 00 1a 00 12 02 2e 3e 27 32 39 c6
>027ac8	02 20 0b 24 92 63 28 32 06 22 0b 24 81 63 00 00
>027ad8	1c 00 13 02 2e 3e 27 32 0b 24 10 40 02 20 2a cd
>027ae8	e6 c1 28 32 06 22 0b 24 09 40 00 00 1e 00 14 02
>027af8	2e 3e 27 32 a0 40 02 20 d5 dd d7 d0 05 40 28 32
>027b08	28 32 06 22 05 10 b5 9f 00 00 22 00 15 02 2e 3e
>027b18	27 32 d9 dd 0e dc 09 d0 04 40 28 32 0a 24 68 ce
>027b28	01 ca 1d c0 28 32 06 22 76 59 00 00 18 00 16 02
>027b38	2e 3e 27 32 db cd 11 c4 02 20 50 40 28 32 06 22
>027b48	78 b4 00 00 22 00 17 02 2e 3e 27 32 3f de 07 d0
>027b58	02 40 28 32 0c 26 0b 24 03 10 77 72 28 32 06 22
>027b68	3d 12 8f 90 00 00 1a 00 18 02 2e 3e 27 32 5b cd
>027b78	9f c0 02 20 9e 40 28 32 06 22 0b 24 22 b5 00 00
>027b88	1c 00 19 02 2e 3e 27 32 01 10 e8 5c 02 20 53 cd
>027b98	1b c0 28 32 06 22 01 10 e8 5c 00 00 1e 00 1a 02
>027ba8	2e 3e 27 32 67 ce 0d c0 0a 24 03 d5 00 40 28 32
>027bb8	28 32 06 22 05 10 aa b4 00 00 1c 00 1b 02 2e 3e
>027bc8	27 32 0b 24 10 40 0a 24 0b 24 e6 66 28 32 06 22
>027bd8	0b 24 f6 66 00 00 20 00 1c 02 2e 3e 27 32 6b ce
>027be8	ca cb 13 c0 01 20 c8 cc 8b c9 04 c0 28 32 06 22
>027bf8	0b 24 87 7d 00 00 20 00 1d 02 2e 3e 27 32 0b 24
>027c08	04 10 86 ac 0c 26 2e cd 52 c9 11 c0 28 32 06 22
>027c18	40 12 4a b2 00 00 18 00 1e 02 2e 3e 27 32 05 10
>027c28	6a b9 0d 26 62 40 28 32 06 22 c5 47 00 00 1c 00
>027c38	1f 02 2e 3e 27 32 2e cd 52 c9 11 c0 0d 26 a9 cd
>027c48	11 c0 28 32 06 22 00 40 00 00 1c 00 20 02 2e 3e
>027c58	27 32 65 c6 0c 26 04 10 40 6b 28 32 06 22 0b 24
>027c68	68 11 c0 45 00 00 1a 00 21 02 2e 3e 27 32 4a c5
>027c78	03 20 39 c6 28 32 06 22 0b 24 01 10 ed 64 00 00
>027c88	18 00 22 02 2e 3e 27 32 d5 c4 0d 26 06 c0 28 32
>027c98	06 22 0b 24 0b 41 00 00 1e 00 23 02 2e 3e 27 32
>027ca8	ce c5 03 20 03 d5 02 40 28 32 28 32 06 22 0b 24
>027cb8	05 10 34 6e 00 00 1e 00 24 02 2e 3e 27 32 d9 dd
>027cc8	0e dc 09 d0 01 40 28 32 02 20 fa c4 28 32 06 22
>027cd8	9b 40 00 00 18 00 25 02 2e 3e 27 32 11 40 01 20
>027ce8	03 10 52 ad 28 32 06 22 10 40 00 00 1e 00 26 02
>027cf8	2e 3e 27 32 0b 24 46 40 0a 24 84 cd 4c c9 0d c0
>027d08	28 32 06 22 02 10 8e 62 00 00 1e 00 27 02 2e 3e
>027d18	27 32 0b 24 10 40 03 20 04 10 be 8c 28 32 06 22
>027d28	0b 24 04 10 b2 8c 00 00 1a 00 28 02 2e 3e 27 32
>027d38	55 c5 02 20 50 40 28 32 06 22 0b 24 04 10 2f 9d
>027d48	00 00 1a 00 29 02 2e 3e 27 32 62 ce 51 c4 0b 24
>027d58	d5 c4 28 32 06 22 0b 24 e4 a9 00 00 1e 00 2a 02
>027d68	2e 3e 27 32 0b 24 02 10 d7 54 03 20 0b 24 05 40
>027d78	28 32 06 22 02 10 d2 54 00 00 1c 00 2b 02 2e 3e
>027d88	27 32 fd c5 0a 24 c3 cc 17 c0 28 32 06 22 0b 24
>027d98	01 10 92 b7 00 00 20 00 2c 02 2e 3e 27 32 80 cd
>027da8	1e c0 0a 24 0b 24 01 10 7a b6 28 32 06 22 0b 24
>027db8	01 10 8a b6 00 00 1a 00 2d 02 2e 3e 27 32 03 c0
>027dc8	02 20 0b 24 53 40 28 32 06 22 0b 24 41 40 00 00
>027dd8	1e 00 2e 02 2e 3e 27 32 0b 24 61 40 0b 24 57 cd
>027de8	b5 cc 06 c0 28 32 06 22 0b 24 fd 40 00 00 1c 00
>027df8	2f 02 2e 3e 27 32 ce c5 0a 24 09 d0 06 40 28 32
>027e08	28 32 06 22 05 10 07 6f 00 00 1c 00 30 02 2e 3e
>027e18	27 32 b5 c5 01 20 0b 24 4f 40 28 32 06 22 0b 24
>027e28	05 10 ef 93 00 00 1c 00 31 02 2e 3e 27 32 87 cd
>027e38	2b cb 0f c0 0d 26 05 10 6e 78 28 32 06 22 00 40
>027e48	00 00 18 00 32 02 2e 3e 27 32 0b 24 53 40 0d 26
>027e58	55 c5 28 32 06 22 00 40 00 00 1c 00 33 02 2e 3e
>027e68	27 32 2e cd 52 c9 11 c0 03 20 b5 c5 28 32 06 22
>027e78	05 10 94 93 00 00 18 00 34 02 2e 3e 27 32 a9 cd
>027e88	11 c0 01 20 9f 40 28 32 06 22 8d 40 00 00 18 00
>027e98	35 02 2e 3e 27 32 d5 c4 0c 26 1d 49 28 32 06 22
>027ea8	83 17 d7 4e 00 00 1c 00 36 02 2e 3e 27 32 7d cd
>027eb8	1d c0 0b 24 a2 40 28 32 06 22 0b 24 02 10 79 55
>027ec8	00 00 16 00 37 02 2e 3e 27 32 d5 c4 02 20 39 c6
>027ed8	28 32 06 22 93 a9 00 00 1a 00 38 02 2e 3e 27 32
>027ee8	50 40 0a 24 88 cd 02 c5 28 32 06 22 01 10 38 5d
>027ef8	00 00 1e 00 39 02 2e 3e 27 32 de cd 03 c0 03 20
>027f08	80 cd 1e c0 28 32 06 22 0b 24 02 10 a1 9c 00 00
>027f18	1e 00 3a 02 2e 3e 27 32 e0 cd 66 ca 0a c0 0c 26
>027f28	0b 24 92 40 28 32 06 22 ca 12 fa 4f 00 00 1a 00
>027f38	3b 02 2e 3e 27 32 7d cd 1d c0 01 20 67 ce 0d c0
>027f48	28 32 06 22 29 40 00 00 1c 00 3c 02 2e 3e 27 32
>027f58	11 40 03 20 00 ce 04 c0 28 32 06 22 0b 24 01 10
>027f68	23 87 00 00 1e 00 3d 02 2e 3e 27 32 80 cd 1e c0
>027f78	02 20 57 cd b5 cc 06 c0 28 32 06 22 0b 24 04 40
>027f88	00 00 1a 00 3e 02 2e 3e 27 32 2d 40 01 20 0b 24
>027f98	03 10 9c 8e 28 32 06 22 24 40 00 00 1a 00 3f 02
>027fa8	2e 3e 27 32 6b ce ca cb 13 c0 01 20 9e 40 28 32
>027fb8	06 22 9a 40 00 00 1a 00 40 02 2e 3e 27 32 2b c6
>027fc8	01 20 0b 24 0a 40 28 32 06 22 03 10 d2 b5 00 00
>027fd8	1c 00 41 02 2e 3e 27 32 0b 24 77 40 0d 26 e0 cd
>027fe8	66 ca 0a c0 28 32 06 22 00 40 00 00 1a 00 42 02
>027ff8	2e 3e 27 32 9c 40 03 20 68 ce 01 ca 1d c0 28 32
>028008	06 22 54 40 00 00 18 00 43 02 2e 3e 27 32 c8 40
>028018	03 20 16 c0 28 32 06 22 0b 24 68 7c 00 00 1e 00
>028028	44 02 2e 3e 27 32 0b 24 05 10 26 54 02 20 2d 40
>028038	28 32 06 22 0b 24 05 10 01 54 00 00 1e 00 45 02
>028048	2e 3e 27 32 0b 24 53 40 0a 24 74 cd 1c ce 0c c0
>028058	28 32 06 22 03 10 3a 64 00 00 1a 00 46 02 2e 3e
>028068	27 32 0b 24 92 63 03 20 0b 24 77 40 28 32 06 22
>028078	e7 63 00 00 22 00 47 02 2e 3e 27 32 0b 24 01 10
>028088	30 b8 0a 24 2e cd 52 c9 11 c0 28 32 06 22 0b 24
>028098	01 10 a7 b8 00 00 1a 00 48 02 2e 3e 27 32 8c b3
>0280a8	03 20 0b 24 61 40 28 32 06 22 0b 24 ed b3 00 00
>0280b8	1c 00 49 02 2e 3e 27 32 06 c0 0c 26 0b 24 02 10
>0280c8	d7 54 28 32 06 22 da 10 d3 78 00 00 18 00 4a 02
>0280d8	2e 3e 27 32 fd c5 0d 26 de cd 03 c0 28 32 06 22
>0280e8	00 40 00 00 1c 00 4b 02 2e 3e 27 32 02 10 af 9c
>0280f8	02 20 80 cd 1e c0 28 32 06 22 0b 24 01 40 00 00
>028108	16 00 4c 02 2e 3e 27 32 9b 40 0b 24 9b 40 28 32
>028118	06 22 00 40 00 00 20 00 4d 02 2e 3e 27 32 9c 40
>028128	0b 24 d5 dd d7 d0 02 40 28 32 28 32 06 22 0b 24
>028138	01 10 d5 43 00 00 1a 00 4e 02 2e 3e 27 32 04 10
>028148	60 8a 0d 26 67 ce 0d c0 28 32 06 22 07 4d 00 00
>028158	18 00 4f 02 2e 3e 27 32 9c 40 01 20 7d cd 1d c0
>028168	28 32 06 22 08 40 00 00 24 00 50 02 2e 3e 27 32
>028178	0b 24 04 10 1c 66 0b 24 d5 dd d7 d0 01 40 28 32
>028188	28 32 06 22 0b 24 04 10 a4 66 00 00 20 00 51 02
>028198	2e 3e 27 32 88 cd 02 c5 0c 26 2e cd 52 c9 11 c0
>0281a8	28 32 06 22 0b 24 91 10 d8 af 00 00 18 00 52 02
>0281b8	2e 3e 27 32 04 10 ee ab 0d 26 39 c6 28 32 06 22
>0281c8	77 64 00 00 1c 00 53 02 2e 3e 27 32 0b 24 10 40
>0281d8	0c 26 67 ce 0d c0 28 32 06 22 0b 24 d0 42 00 00
>0281e8	1c 00 54 02 2e 3e 27 32 62 40 0b 24 32 ce 7a c5
>0281f8	28 32 06 22 0b 24 04 10 5c 8c 00 00 1c 00 55 02
>028208	2e 3e 27 32 0b 24 03 10 e3 9b 01 20 67 ce 0d c0
>028218	28 32 06 22 0d 40 00 00 18 00 56 02 2e 3e 27 32
>028228	c8 40 0b 24 0b 24 05 40 28 32 06 22 cd 40 00 00
>028238	1e 00 57 02 2e 3e 27 32 87 cd 2b cb 0f c0 01 20
>028248	0b 24 01 10 fe 64 28 32 06 22 00 40 00 00 1a 00
>028258	58 02 2e 3e 27 32 06 c0 0b 24 79 c5 28 32 06 22
>028268	0b 24 02 10 f3 a7 00 00 1c 00 59 02 2e 3e 27 32
>028278	7d cd 1d c0 0c 26 fd c5 28 32 06 22 0b 24 55 11
>028288	b2 9c 00 00 1c 00 5a 02 2e 3e 27 32 bd 40 0b 24
>028298	0b 24 06 10 c6 49 28 32 06 22 06 10 83 4a 00 00
>0282a8	1e 00 5b 02 2e 3e 27 32 f2 cc 58 ce 11 c0 03 20
>0282b8	0b 24 0a 40 28 32 06 22 0b 24 86 b3 00 00 1e 00
>0282c8	5c 02 2e 3e 27 32 2a cd e6 c1 0c 26 57 cd b5 cc
>0282d8	06 c0 28 32 06 22 43 11 44 40 00 00 1e 00 5d 02
>0282e8	2e 3e 27 32 0b 24 02 10 d7 54 0c 26 9e 40 28 32
>0282f8	06 22 0b 24 55 11 b2 9c 00 00 1a 00 5e 02 2e 3e
>028308	27 32 03 d5 00 40 28 32 0d 26 fd c5 28 32 06 22
>028318	c9 44 00 00 1a 00 5f 02 2e 3e 27 32 a0 40 0b 24
>028328	c3 cc 17 c0 28 32 06 22 01 10 d0 b8 00 00 1a 00
>028338	60 02 2e 3e 27 32 fa c4 0c 26 55 c5 28 32 06 22
>028348	0b 24 dc 12 25 b5 00 00 1c 00 61 02 2e 3e 27 32
>028358	19 d0 01 40 28 32 0c 26 65 40 28 32 06 22 06 10
>028368	de 9c 00 00 1c 00 62 02 2e 3e 27 32 65 c6 0b 24
>028378	03 10 d3 b5 28 32 06 22 0b 24 03 10 26 b6 00 00
>028388	1a 00 63 02 2e 3e 27 32 0b 24 c2 40 0b 24 06 c0
>028398	28 32 06 22 0b 24 5d 40 00 00 20 00 64 02 2e 3e
>0283a8	27 32 f7 d4 04 40 28 32 0b 24 09 d0 06 40 28 32
>0283b8	28 32 06 22 02 10 eb a1 00 00 1a 00 65 02 2e 3e
>0283c8	27 32 03 10 8d 64 0b 24 2d 40 28 32 06 22 03 10
>0283d8	60 64 00 00 1a 00 66 02 2e 3e 27 32 fa c4 0a 24
>0283e8	0b 24 3c a2 28 32 06 22 0b 24 a1 a1 00 00 1e 00
>0283f8	67 02 2e 3e 27 32 57 cd b5 cc 06 c0 02 20 62 ce
>028408	51 c4 28 32 06 22 0b 24 61 40 00 00 1a 00 68 02
>028418	2e 3e 27 32 9e 40 0c 26 0b 24 0a 40 28 32 06 22
>028428	0b 24 2c 46 00 00 18 00 69 02 2e 3e 27 32 11 40
>028438	02 20 89 c5 28 32 06 22 0b 24 2b a2 00 00 1e 00
>028448	6a 02 2e 3e 27 32 11 40 0a 24 0b 24 01 10 7a b6
>028458	28 32 06 22 0b 24 01 10 69 b6 00 00 20 00 6b 02
>028468	2e 3e 27 32 09 d0 05 40 28 32 03 20 6b ce ca cb
>028478	13 c0 28 32 06 22 0b 24 ba 40 00 00 16 00 6c 02
>028488	2e 3e 27 32 9e 40 0a 24 bd 40 28 32 06 22 5b 41
>028498	00 00 1a 00 6d 02 2e 3e 27 32 5e c5 0b 24 0b 24
>0284a8	92 40 28 32 06 22 04 10 f2 8a 00 00 22 00 6e 02
>0284b8	2e 3e 27 32 35 de 1b d0 04 40 28 32 03 20 0b 24
>0284c8	05 40 28 32 06 22 0b 24 04 10 88 91 00 00 1c 00
>0284d8	6f 02 2e 3e 27 32 28 cd 18 c0 0b 24 9c 40 28 32
>0284e8	06 22 0b 24 04 10 b8 66 00 00 1e 00 70 02 2e 3e
>0284f8	27 32 f5 cc 73 c8 02 c0 02 20 02 10 8e a7 28 32
>028508	06 22 02 10 9f a7 00 00 1a 00 71 02 2e 3e 27 32
>028518	62 ce 51 c4 0d 26 05 10 26 aa 28 32 06 22 00 40
>028528	00 00 1e 00 72 02 2e 3e 27 32 a9 cd 11 c0 0a 24
>028538	0b 24 77 40 28 32 06 22 0b 24 03 10 8a a3 00 00
>028548	1e 00 73 02 2e 3e 27 32 0b 24 a9 40 03 20 05 10
>028558	6a b9 28 32 06 22 0b 24 05 10 c3 b9 00 00 1e 00
>028568	74 02 2e 3e 27 32 0b 24 03 10 9c 8e 0b 24 9c 40
>028578	28 32 06 22 0b 24 03 10 38 8f 00 00 1e 00 75 02
>028588	2e 3e 27 32 0b 24 02 10 d7 54 02 20 80 cd 1e c0
>028598	28 32 06 22 0b 24 07 40 00 00 1a 00 76 02 2e 3e
>0285a8	27 32 b0 40 03 20 0b 24 3c a2 28 32 06 22 0b 24
>0285b8	8c a2 00 00 1c 00 77 02 2e 3e 27 32 0b 24 10 40
>0285c8	0b 24 03 c0 28 32 06 22 0b 24 02 10 4a 7f 00 00
>0285d8	1c 00 78 02 2e 3e 27 32 74 cd 1c ce 0c c0 0a 24
>0285e8	06 c0 28 32 06 22 03 10 28 64 00 00 1c 00 79 02
>0285f8	2e 3e 27 32 11 40 03 20 6b ce ca cb 13 c0 28 32
>028608	06 22 0b 24 16 40 00 00 1c 00 7a 02 2e 3e 27 32
>028618	6b ce ca cb 13 c0 03 20 9f 40 28 32 06 22 0b 24
>028628	9c 40 00 00 1e 00 7b 02 2e 3e 27 32 0b 24 10 40
>028638	03 20 0b 24 03 10 13 a3 28 32 06 22 03 10 1d a3
>028648	00 00 1c 00 7c 02 2e 3e 27 32 0b 24 b0 7c 0c 26
>028658	0e 40 28 32 06 22 0b 24 06 10 a0 91 00 00 18 00
>028668	7d 02 2e 3e 27 32 fd c5 03 20 67 ce 0d c0 28 32
>028678	06 22 b3 40 00 00 1e 00 7e 02 2e 3e 27 32 57 cd
>028688	b5 cc 06 c0 0c 26 05 10 b2 44 28 32 06 22 11 13
>028698	78 9c 00 00 16 00 7f 02 2e 3e 27 32 fa c4 01 20
>0286a8	a0 40 28 32 06 22 80 40 00 00 1e 00 80 02 2e 3e
>0286b8	27 32 fd c5 02 20 0b 24 04 10 3f 9d 28 32 06 22
>0286c8	0b 24 04 10 21 9d 00 00 16 00 81 02 2e 3e 27 32
>0286d8	50 bb 01 20 39 c6 28 32 06 22 10 40 00 00 1e 00
>0286e8	82 02 2e 3e 27 32 c8 cc 8b c9 04 c0 03 20 2e cd
>0286f8	52 c9 11 c0 28 32 06 22 f4 7d 00 00 18 00 83 02
>028708	2e 3e 27 32 11 40 0c 26 cd c4 28 32 06 22 5c 10
>028718	4e 7f 00 00 1a 00 84 02 2e 3e 27 32 89 c5 0b 24
>028728	0b 24 65 40 28 32 06 22 0b 24 d7 a1 00 00 1e 00
>028738	85 02 2e 3e 27 32 39 c6 0a 24 d5 cd c9 cb 07 c0
>028748	28 32 06 22 0b 24 03 10 8b 8e 00 00 20 00 86 02
>028758	2e 3e 27 32 04 10 60 8a 03 20 2e cd 52 c9 11 c0
>028768	28 32 06 22 0b 24 04 10 17 8a 00 00 1e 00 87 02
>028778	2e 3e 27 32 d9 dd 0e dc 09 d0 02 40 28 32 0d 26
>028788	b5 c5 28 32 06 22 00 40 00 00 1e 00 88 02 2e 3e
>028798	27 32 0b 24 02 10 d7 54 0c 26 9b 40 28 32 06 22
>0287a8	0b 24 4f 11 2d 5e 00 00 1a 00 89 02 2e 3e 27 32
>0287b8	06 c0 02 20 0b 24 e6 66 28 32 06 22 0b 24 65 40
>0287c8	00 00 1c 00 8a 02 2e 3e 27 32 0b 24 10 40 0c 26
>0287d8	58 c6 28 32 06 22 0b 24 0c 10 a0 43 00 00 1a 00
>0287e8	8b 02 2e 3e 27 32 9e 40 0a 24 68 ce 01 ca 1d c0
>0287f8	28 32 06 22 66 41 00 00 1c 00 8c 02 2e 3e 27 32
>028808	0b 24 65 40 01 20 0b 24 83 7d 28 32 06 22 0b 24
>028818	e7 7d 00 00 18 00 8d 02 2e 3e 27 32 06 c0 03 20
>028828	0b 24 e6 66 28 32 06 22 81 66 00 00 1e 00 8e 02
>028838	2e 3e 27 32 57 cd b5 cc 06 c0 0b 24 e2 cd 0c c0
>028848	28 32 06 22 03 10 13 73 00 00 1c 00 8f 02 2e 3e
>028858	27 32 ce c5 0a 24 2e cd 52 c9 11 c0 28 32 06 22
>028868	05 10 2b 6e 00 00 1c 00 90 02 2e 3e 27 32 ca cc
>028878	08 c0 02 20 57 cd b5 cc 06 c0 28 32 06 22 ff 55
>028888	00 00 1c 00 91 02 2e 3e 27 32 02 10 a3 ba 0b 24
>028898	0b 24 61 40 28 32 06 22 02 10 04 bb 00 00 18 00
>0288a8	92 02 2e 3e 27 32 a2 40 0d 26 db cd 11 c4 28 32
>0288b8	06 22 00 40 00 00 18 00 93 02 2e 3e 27 32 ce c5
>0288c8	0d 26 53 cd 1b c0 28 32 06 22 4a 44 00 00 1e 00
>0288d8	94 02 2e 3e 27 32 05 10 a2 6e 03 20 0b 24 61 40
>0288e8	28 32 06 22 0b 24 05 10 c3 6e 00 00 18 00 95 02
>0288f8	2e 3e 27 32 21 c5 0d 26 0b 24 77 40 28 32 06 22
>028908	53 40 00 00 20 00 96 02 2e 3e 27 32 28 cd 18 c0
>028918	0a 24 2e cd 52 c9 11 c0 28 32 06 22 0b 24 04 10
>028928	93 66 00 00 1c 00 97 02 2e 3e 27 32 05 10 b2 44
>028938	0c 26 06 c0 28 32 06 22 0b 24 fc 11 3a 9a 00 00
>028948	1e 00 98 02 2e 3e 27 32 0b 24 04 10 15 b2 0a 24
>028958	50 40 28 32 06 22 0b 24 04 10 c5 b1 00 00 1c 00
>028968	99 02 2e 3e 27 32 53 cd 1b c0 0d 26 68 ce 01 ca
>028978	1d c0 28 32 06 22 00 40 00 00 1a 00 9a 02 2e 3e
>028988	27 32 5d cd 63 c2 0b 24 06 c0 28 32 06 22 03 10
>028998	b7 ad 00 00 20 00 9b 02 2e 3e 27 32 2e cd 52 c9
>0289a8	11 c0 0b 24 03 10 d3 b5 28 32 06 22 0b 24 03 10
>0289b8	4a b6 00 00 18 00 9c 02 2e 3e 27 32 06 c0 03 20
>0289c8	d5 c4 28 32 06 22 0b 24 e8 a9 00 00 16 00 9d 02
>0289d8	2e 3e 27 32 b5 c5 01 20 11 40 28 32 06 22 11 40
>0289e8	00 00 1c 00 9e 02 2e 3e 27 32 fa c4 03 20 00 ce
>0289f8	04 c0 28 32 06 22 0b 24 01 10 a9 87 00 00 1a 00
>028a08	9f 02 2e 3e 27 32 05 10 b2 44 02 20 fd c5 28 32
>028a18	06 22 05 10 be 44 00 00 20 00 a0 02 2e 3e 27 32
>028a28	53 cd 1b c0 0c 26 0b 24 03 10 9c 8e 28 32 06 22
>028a38	0b 24 42 12 80 61 00 00 1c 00 a1 02 2e 3e 27 32
>028a48	f7 d4 03 40 28 32 0d 26 fa c4 28 32 06 22 0b 24
>028a58	6e 44 00 00 1a 00 a2 02 2e 3e 27 32 c8 40 01 20
>028a68	0b 24 02 10 6d 80 28 32 06 22 80 40 00 00 1a 00
>028a78	a3 02 2e 3e 27 32 0b 24 10 40 03 20 fa c4 28 32
>028a88	06 22 0b 24 95 40 00 00 24 00 a4 02 2e 3e 27 32
>028a98	d5 cd c9 cb 07 c0 02 20 d9 dd 0e dc 09 d0 00 40
>028aa8	28 32 28 32 06 22 0b 24 02 40 00 00 1c 00 a5 02
>028ab8	2e 3e 27 32 08 c0 0b 24 62 ce 51 c4 28 32 06 22
>028ac8	0b 24 01 10 19 b6 00 00 1e 00 a6 02 2e 3e 27 32
>028ad8	0b 24 01 10 4d 82 03 20 50 40 28 32 06 22 0b 24
>028ae8	01 10 1d 82 00 00 1a 00 a7 02 2e 3e 27 32 65 c6
>028af8	01 20 0b 24 ba b5 28 32 06 22 0b 24 fc b5 00 00
>028b08	1a 00 a8 02 2e 3e 27 32 80 cd 1e c0 03 20 0b 24
>028b18	65 40 28 32 06 22 6b 40 00 00 1e 00 a9 02 2e 3e
>028b28	27 32 f5 cc 73 c8 02 c0 03 20 0b 24 4f 40 28 32
>028b38	06 22 0b 24 d2 40 00 00 18 00 aa 02 2e 3e 27 32
>028b48	65 40 0d 26 65 c6 28 32 06 22 0b 24 01 40 00 00
>028b58	1c 00 ab 02 2e 3e 27 32 01 cd 20 c0 0b 24 a2 40
>028b68	28 32 06 22 0b 24 05 10 57 bc 00 00 1a 00 ac 02
>028b78	2e 3e 27 32 f5 cc 73 c8 02 c0 01 20 9e 40 28 32
>028b88	06 22 9e 40 00 00 1c 00 ad 02 2e 3e 27 32 0b 24
>028b98	05 40 01 20 03 10 44 63 28 32 06 22 03 10 40 63
>028ba8	00 00 20 00 ae 02 2e 3e 27 32 80 cd 1e c0 01 20
>028bb8	0b 24 03 10 e3 9b 28 32 06 22 0b 24 03 10 f0 9b
>028bc8	00 00 1a 00 af 02 2e 3e 27 32 02 10 d4 62 0b 24
>028bd8	c8 40 28 32 06 22 02 10 0c 62 00 00 1c 00 b0 02
>028be8	2e 3e 27 32 01 10 e8 5c 0d 26 0b 24 c2 40 28 32
>028bf8	06 22 0b 24 cf 40 00 00 18 00 b1 02 2e 3e 27 32
>028c08	4a c5 0d 26 c8 40 28 32 06 22 0b 24 d3 40 00 00
>028c18	1c 00 b2 02 2e 3e 27 32 74 cd 1c ce 0c c0 0b 24
>028c28	a0 40 28 32 06 22 03 10 ed 63 00 00 1a 00 b3 02
>028c38	2e 3e 27 32 05 10 a2 6e 0c 26 9b 40 28 32 06 22
>028c48	3f 13 16 7c 00 00 18 00 b4 02 2e 3e 27 32 0b 24
>028c58	61 40 0d 26 fd c5 28 32 06 22 00 40 00 00 1c 00
>028c68	b5 02 2e 3e 27 32 a0 40 02 20 28 cd 18 c0 28 32
>028c78	06 22 0b 24 04 10 1c 66 00 00 1a 00 b6 02 2e 3e
>028c88	27 32 02 10 8e a7 02 20 39 c6 28 32 06 22 02 10
>028c98	9f a7 00 00 1c 00 b7 02 2e 3e 27 32 62 ce 51 c4
>028ca8	02 20 88 cd 02 c5 28 32 06 22 0b 24 01 40 00 00
>028cb8	18 00 b8 02 2e 3e 27 32 0b 24 10 40 03 20 06 c0
>028cc8	28 32 06 22 6b 40 00 00 20 00 b9 02 2e 3e 27 32
>028cd8	d9 dd 0e dc 09 d0 02 40 28 32 0d 26 c9 cc 1b c0
>028ce8	28 32 06 22 00 40 00 00 1a 00 ba 02 2e 3e 27 32
>028cf8	0b 24 46 40 0a 24 65 c6 28 32 06 22 0b 24 99 40
>028d08	00 00 1a 00 bb 02 2e 3e 27 32 0b 24 65 40 0d 26
>028d18	2a cd e6 c1 28 32 06 22 00 40 00 00 1c 00 bc 02
>028d28	2e 3e 27 32 8a d5 02 40 28 32 0d 26 04 10 be 8c
>028d38	28 32 06 22 00 40 00 00 20 00 bd 02 2e 3e 27 32
>028d48	67 ce 0d c0 03 20 0b 24 04 10 15 b2 28 32 06 22
>028d58	0b 24 04 10 3a b2 00 00 1c 00 be 02 2e 3e 27 32
>028d68	2e cd 52 c9 11 c0 0c 26 9c 40 28 32 06 22 0b 24
>028d78	84 88 00 00 1e 00 bf 02 2e 3e 27 32 03 10 52 ad
>028d88	0b 24 03 d5 04 40 28 32 28 32 06 22 03 10 b0 ac
>028d98	00 00 1c 00 c0 02 2e 3e 27 32 80 cd 1e c0 0c 26
>028da8	03 c0 28 32 06 22 0b 24 27 10 a0 b3 00 00 18 00
>028db8	c1 02 2e 3e 27 32 39 c6 01 20 0b 24 77 40 28 32
>028dc8	06 22 01 40 00 00 1a 00 c2 02 2e 3e 27 32 cd c4
>028dd8	0d 26 0b 24 65 40 28 32 06 22 0b 24 e5 46 00 00
>028de8	1e 00 c3 02 2e 3e 27 32 0b 24 65 40 03 20 0b 24
>028df8	06 10 c6 49 28 32 06 22 06 10 a1 49 00 00 1c 00
>028e08	c4 02 2e 3e 27 32 02 10 d4 62 01 20 0b 24 0a 40
>028e18	28 32 06 22 02 10 d4 62 00 00 16 00 c5 02 2e 3e
>028e28	27 32 9e 40 03 20 8c b3 28 32 06 22 12 b3 00 00
>028e38	22 00 c6 02 2e 3e 27 32 74 cd 1c ce 0c c0 0d 26
>028e48	d9 dd 0e dc 09 d0 01 40 28 32 28 32 06 22 85 51
>028e58	00 00 1a 00 c7 02 2e 3e 27 32 11 40 01 20 0b 24
>028e68	05 10 26 54 28 32 06 22 10 40 00 00 20 00 c8 02
>028e78	2e 3e 27 32 0b 24 03 10 e3 9b 0d 26 57 cd b5 cc
>028e88	06 c0 28 32 06 22 0b 24 0c 43 00 00 16 00 c9 02
>028e98	2e 3e 27 32 39 c6 0c 26 c8 40 28 32 06 22 48 4d
>028ea8	00 00 1c 00 ca 02 2e 3e 27 32 02 10 8e a7 0d 26
>028eb8	0b 24 65 40 28 32 06 22 0b 24 8f 43 00 00 1a 00
>028ec8	cb 02 2e 3e 27 32 05 10 6e 78 0c 26 9c 40 28 32
>028ed8	06 22 50 13 08 a3 00 00 1a 00 cc 02 2e 3e 27 32
>028ee8	04 10 60 8a 03 20 fa c4 28 32 06 22 04 10 fb 8a
>028ef8	00 00 16 00 cd 02 2e 3e 27 32 9c 40 0c 26 c8 40
>028f08	28 32 06 22 e0 b9 00 00 1a 00 ce 02 2e 3e 27 32
>028f18	62 40 02 20 0b 24 e6 66 28 32 06 22 0b 24 86 66
>028f28	00 00 18 00 cf 02 2e 3e 27 32 cd c4 0a 24 50 40
>028f38	28 32 06 22 05 10 be 78 00 00 18 00 d0 02 2e 3e
>028f48	27 32 0b 24 10 40 0d 26 39 c6 28 32 06 22 00 40
>028f58	00 00 16 00 d1 02 2e 3e 27 32 28 b4 03 20 39 c6
>028f68	28 32 06 22 39 b4 00 00 16 00 d2 02 2e 3e 27 32
>028f78	86 48 0d 26 39 c6 28 32 06 22 80 40 00 00 16 00
>028f88	d3 02 2e 3e 27 32 fd c5 0a 24 9b 40 28 32 06 22
>028f98	39 41 00 00 1a 00 d4 02 2e 3e 27 32 2d 40 01 20
>028fa8	0b 24 03 10 13 a3 28 32 06 22 2d 40 00 00 1a 00
>028fb8	d5 02 2e 3e 27 32 de cd 03 c0 0d 26 67 ce 0d c0
>028fc8	28 32 06 22 bf 47 00 00 1e 00 d6 02 2e 3e 27 32
>028fd8	c8 40 03 20 0b 24 01 10 30 b8 28 32 06 22 0b 24
>028fe8	01 10 e8 b8 00 00 1a 00 d7 02 2e 3e 27 32 9e 40
>028ff8	0a 24 04 10 40 6b 28 32 06 22 04 10 de 6b 00 00
>029008	1c 00 d8 02 2e 3e 27 32 02 10 78 bb 0c 26 06 c0
>029018	28 32 06 22 0b 24 2b 11 58 76 00 00 1a 00 d9 02
>029028	2e 3e 27 32 9e 40 03 20 01 10 20 ba 28 32 06 22
>029038	01 10 be ba 00 00 1a 00 da 02 2e 3e 27 32 11 40
>029048	0c 26 de cd 03 c0 28 32 06 22 2e 10 9f 67 00 00
>029058	1c 00 db 02 2e 3e 27 32 06 c0 03 20 c1 cc b1 ca
>029068	0c c0 28 32 06 22 02 10 08 80 00 00 1c 00 dc 02
>029078	2e 3e 27 32 7d cd 1d c0 03 20 0b 24 65 40 28 32
>029088	06 22 02 10 b2 54 00 00 1a 00 dd 02 2e 3e 27 32
>029098	80 cd 1e c0 0d 26 03 10 8d 64 28 32 06 22 00 40
>0290a8	00 00 1e 00 de 02 2e 3e 27 32 a0 40 03 20 0b 24
>0290b8	02 10 6d 80 28 32 06 22 0b 24 02 10 cd 80 00 00
>0290c8	1c 00 df 02 2e 3e 27 32 19 d0 02 40 28 32 0b 24
>0290d8	b0 40 28 32 06 22 0b 24 eb 89 00 00 1e 00 e0 02
>0290e8	2e 3e 27 32 a0 40 0c 26 0b 24 05 10 ab 6e 28 32
>0290f8	06 22 0b 24 5a 13 e0 6a 00 00 18 00 e1 02 2e 3e
>029108	27 32 ca cc 08 c0 0d 26 50 40 28 32 06 22 46 40
>029118	00 00 1c 00 e2 02 2e 3e 27 32 57 cd b5 cc 06 c0
>029128	01 20 e2 cd 0c c0 28 32 06 22 88 40 00 00 1c 00
>029138	e3 02 2e 3e 27 32 0b 24 04 10 86 ac 0d 26 0b 24
>029148	46 40 28 32 06 22 dd 48 00 00 1c 00 e4 02 2e 3e
>029158	27 32 9e 40 0b 24 04 10 be 8c 28 32 06 22 0b 24
>029168	04 10 20 8c 00 00 1e 00 e5 02 2e 3e 27 32 0b 24
>029178	04 10 3f 9d 02 20 9e 40 28 32 06 22 0b 24 04 10
>029188	21 9d 00 00 1c 00 e6 02 2e 3e 27 32 0b 24 92 40
>029198	0a 24 62 ce 51 c4 28 32 06 22 0b 24 f3 40 00 00
>0291a8	18 00 e7 02 2e 3e 27 32 9c 40 0d 26 04 10 be 8c
>0291b8	28 32 06 22 00 40 00 00 1a 00 e8 02 2e 3e 27 32
>0291c8	0b 24 92 63 0a 24 ae 58 28 32 06 22 0b 24 e4 4a
>0291d8	00 00 1e 00 e9 02 2e 3e 27 32 0b 24 04 10 3f 9d
>0291e8	0c 26 9b 40 28 32 06 22 0b 24 dc 12 25 b5 00 00
>0291f8	1e 00 ea 02 2e 3e 27 32 03 10 8d 64 01 20 03 d5
>029208	02 40 28 32 28 32 06 22 03 10 0c 64 00 00 1e 00
>029218	eb 02 2e 3e 27 32 2e cd 52 c9 11 c0 0d 26 09 d0
>029228	02 40 28 32 28 32 06 22 00 40 00 00 1a 00 ec 02
>029238	2e 3e 27 32 9b 40 02 20 5d cd 63 c2 28 32 06 22
>029248	03 10 db ad 00 00 1e 00 ed 02 2e 3e 27 32 11 40
>029258	0c 26 0b 24 04 10 1c 66 28 32 06 22 0b 24 49 10
>029268	dc 47 00 00 1c 00 ee 02 2e 3e 27 32 2d 40 0a 24
>029278	19 d0 03 40 28 32 28 32 06 22 02 10 dc 6b 00 00
>029288	1c 00 ef 02 2e 3e 27 32 03 c0 0b 24 68 ce 01 ca
>029298	1d c0 28 32 06 22 02 10 72 7e 00 00 16 00 f0 02
>0292a8	2e 3e 27 32 39 c6 0d 26 21 c5 28 32 06 22 00 40
>0292b8	00 00 1e 00 f1 02 2e 3e 27 32 0b 24 05 10 ab 6e
>0292c8	0c 26 9f 40 28 32 06 22 0b 24 54 13 35 bc 00 00
>0292d8	1e 00 f2 02 2e 3e 27 32 05 10 6e 78 0c 26 80 cd
>0292e8	1e c0 28 32 06 22 0b 24 57 10 e0 46 00 00 1c 00
>0292f8	f3 02 2e 3e 27 32 fd c5 02 20 c3 cc 17 c0 28 32
>029308	06 22 0b 24 01 10 22 b8 00 00 1e 00 f4 02 2e 3e
>029318	27 32 0b 24 10 40 0b 24 05 10 26 aa 28 32 06 22
>029328	0b 24 05 10 36 aa 00 00 1c 00 f5 02 2e 3e 27 32
>029338	c8 40 0d 26 35 de 1b d0 04 40 28 32 28 32 06 22
>029348	00 40 00 00 1e 00 f6 02 2e 3e 27 32 0b 24 04 10
>029358	3f 9d 02 20 0b 24 77 40 28 32 06 22 0b 24 37 40
>029368	00 00 1e 00 f7 02 2e 3e 27 32 a2 40 0c 26 0b 24
>029378	03 10 b4 63 28 32 06 22 0b 24 13 12 e8 57 00 00
>029388	1e 00 f8 02 2e 3e 27 32 0b 24 02 10 d7 54 0c 26
>029398	0b 24 4f 40 28 32 06 22 aa 10 59 ae 00 00 1e 00
>0293a8	f9 02 2e 3e 27 32 02 10 3a 7f 0c 26 0b 24 05 40
>0293b8	28 32 06 22 0b 24 0c 10 22 7c 00 00 1a 00 fa 02
>0293c8	2e 3e 27 32 a0 40 01 20 0b 24 05 10 b5 bb 28 32
>0293d8	06 22 00 40 00 00 1e 00 fb 02 2e 3e 27 32 0b 24
>0293e8	05 40 0b 24 02 10 3a 7f 28 32 06 22 0b 24 02 10
>0293f8	3f 7f 00 00 1e 00 fc 02 2e 3e 27 32 0b 24 a9 40
>029408	0a 24 09 d0 04 40 28 32 28 32 06 22 0b 24 6b 41
>029418	00 00 18 00 fd 02 2e 3e 27 32 06 c0 03 20 50 40
>029428	28 32 06 22 0b 24 35 40 00 00 18 00 fe 02 2e 3e
>029438	27 32 65 c6 0b 24 39 c6 28 32 06 22 0b 24 64 40
>029448	00 00 1c 00 ff 02 2e 3e 27 32 80 cd 1e c0 01 20
>029458	0b 24 a9 40 28 32 06 22 0b 24 b0 40 00 00 18 00
>029468	00 03 2e 3e 27 32 fa c4 03 20 65 c6 28 32 06 22
>029478	0b 24 ca 40 00 00 1c 00 01 03 2e 3e 27 32 02 10
>029488	d5 4e 0a 24 62 ce 51 c4 28 32 06 22 02 10 74 4e
>029498	00 00 1a 00 02 03 2e 3e 27 32 0b 24 61 40 02 20
>0294a8	57 c5 28 32 06 22 0b 24 01 40 00 00 1a 00 03 03
>0294b8	2e 3e 27 32 0b 24 05 40 0c 26 16 c0 28 32 06 22
>0294c8	02 10 70 6f 00 00 1e 00 04 03 2e 3e 27 32 0b 24
>0294d8	02 10 d7 54 02 20 0b 24 61 40 28 32 06 22 0b 24
>0294e8	41 40 00 00 16 00 05 03 2e 3e 27 32 3a a0 02 20
>0294f8	11 40 28 32 06 22 3b a0 00 00 1e 00 06 03 2e 3e
>029508	27 32 0b 24 01 10 fe 64 0c 26 0b 24 53 40 28 32
>029518	06 22 6a 10 5a be 00 00 1a 00 07 03 2e 3e 27 32
>029528	53 cd 1b c0 0d 26 02 10 af 6b 28 32 06 22 00 40
>029538	00 00 1e 00 08 03 2e 3e 27 32 c9 cc 1b c0 0c 26
>029548	0b 24 77 40 28 32 06 22 0b 24 fb 10 03 a5 00 00
>029558	1a 00 09 03 2e 3e 27 32 8c b3 02 20 19 d0 01 40
>029568	28 32 28 32 06 22 8e bb 00 00 18 00 0a 03 2e 3e
>029578	27 32 9e 40 0a 24 ca cc 08 c0 28 32 06 22 89 56
>029588	00 00 18 00 0b 03 2e 3e 27 32 16 c0 0b 24 11 40
>029598	28 32 06 22 0b 24 c1 7c 00 00 1c 00 0c 03 2e 3e
>0295a8	27 32 02 10 d5 4e 0d 26 0b 24 05 40 28 32 06 22
>0295b8	0b 24 2a 76 00 00 1a 00 0d 03 2e 3e 27 32 62 ce
>0295c8	51 c4 03 20 eb 55 28 32 06 22 0b 24 8c 55 00 00
>0295d8	1c 00 0e 03 2e 3e 27 32 f5 cc 73 c8 02 c0 01 20
>0295e8	03 10 44 63 28 32 06 22 04 40 00 00 1c 00 0f 03
>0295f8	2e 3e 27 32 ce c5 0a 24 2e cd 52 c9 11 c0 28 32
>029608	06 22 05 10 2b 6e 00 00 1c 00 10 03 2e 3e 27 32
>029618	65 c6 0b 24 0b 24 05 10 ac 64 28 32 06 22 05 10
>029628	59 64 00 00 16 00 11 03 2e 3e 27 32 65 c6 0d 26
>029638	03 c0 28 32 06 22 00 40 00 00 1c 00 12 03 2e 3e
>029648	27 32 02 10 d5 4e 0d 26 87 cd 2b cb 0f c0 28 32
>029658	06 22 62 43 00 00 1a 00 13 03 2e 3e 27 32 0b 24
>029668	46 40 0b 24 39 c6 28 32 06 22 0b 24 57 40 00 00
>029678	16 00 14 03 2e 3e 27 32 a0 40 03 20 83 a9 28 32
>029688	06 22 23 a9 00 00 1a 00 15 03 2e 3e 27 32 2d 40
>029698	0a 24 b5 c5 28 32 06 22 0b 24 05 10 b6 93 00 00
>0296a8	1a 00 16 03 2e 3e 27 32 b5 c5 0b 24 9b 40 28 32
>0296b8	06 22 0b 24 05 10 7e 94 00 00 18 00 17 03 2e 3e
>0296c8	27 32 fa c4 0c 26 ce c5 28 32 06 22 3f 13 16 7c
>0296d8	00 00 1e 00 18 03 2e 3e 27 32 e2 cd 0c c0 03 20
>0296e8	53 cd 1b c0 28 32 06 22 0b 24 03 10 d7 72 00 00
>0296f8	20 00 19 03 2e 3e 27 32 0b 24 83 7d 0c 26 f5 cc
>029708	73 c8 02 c0 28 32 06 22 0b 24 4c 10 5d 74 00 00
>029718	1a 00 1a 03 2e 3e 27 32 9b 40 0c 26 5d cd 63 c2
>029728	28 32 06 22 55 12 a6 70 00 00 1a 00 1b 03 2e 3e
>029738	27 32 80 cd 1e c0 0b 24 2d 40 28 32 06 22 0b 24
>029748	3d 40 00 00 16 00 1c 03 2e 3e 27 32 c8 40 0a 24
>029758	28 b4 28 32 06 22 f0 b4 00 00 20 00 1d 03 2e 3e
>029768	27 32 d5 dd d7 d0 01 40 28 32 0a 24 01 10 e8 5c
>029778	28 32 06 22 01 10 70 5d 00 00 24 00 1e 03 2e 3e
>029788	27 32 88 cd 02 c5 0c 26 d9 dd 0e dc 09 d0 00 40
>029798	28 32 28 32 06 22 0b 24 55 10 70 a7 00 00 1c 00
>0297a8	1f 03 2e 3e 27 32 53 cd 1b c0 0c 26 03 10 52 ad
>0297b8	28 32 06 22 68 12 40 93 00 00 1e 00 20 03 2e 3e
>0297c8	27 32 c1 cc b1 ca 0c c0 0c 26 0b 24 65 40 28 32
>0297d8	06 22 fc 10 01 ab 00 00 20 00 21 03 2e 3e 27 32
>0297e8	0b 24 77 40 0a 24 0b 24 02 10 d7 54 28 32 06 22
>0297f8	0b 24 02 10 4e 55 00 00 18 00 22 03 2e 3e 27 32
>029808	7d cd 1d c0 01 20 fa c4 28 32 06 22 09 40 00 00
>029818	1a 00 23 03 2e 3e 27 32 11 40 03 20 80 cd 1e c0
>029828	28 32 06 22 0b 24 1f 40 00 00 22 00 24 03 2e 3e
>029838	27 32 57 cd b5 cc 06 c0 0c 26 8a d5 05 40 28 32
>029848	28 32 06 22 0b 24 a8 10 b8 45 00 00 1a 00 25 03
>029858	2e 3e 27 32 67 ce 0d c0 01 20 7d cd 1d c0 28 32
>029868	06 22 29 40 00 00 1e 00 26 03 2e 3e 27 32 4a c5
>029878	0a 24 57 cd b5 cc 06 c0 28 32 06 22 0b 24 01 10
>029888	62 64 00 00 18 00 27 03 2e 3e 27 32 62 ce 51 c4
>029898	03 20 16 c0 28 32 06 22 cf 7c 00 00 20 00 28 03
>0298a8	2e 3e 27 32 09 d0 03 40 28 32 0a 24 c8 cc 8b c9
>0298b8	04 c0 28 32 06 22 0b 24 d3 7c 00 00 1e 00 29 03
>0298c8	2e 3e 27 32 50 40 0a 24 d9 dd 0e dc 09 d0 05 40
>0298d8	28 32 28 32 06 22 5e 40 00 00 1e 00 2a 03 2e 3e
>0298e8	27 32 6b ce ca cb 13 c0 0a 24 04 10 be 8c 28 32
>0298f8	06 22 04 10 b9 8c 00 00 1c 00 2b 03 2e 3e 27 32
>029908	65 c6 0b 24 0b 24 03 10 f6 79 28 32 06 22 03 10
>029918	a3 79 00 00 1a 00 2c 03 2e 3e 27 32 0b 24 e6 66
>029928	0a 24 fd c5 28 32 06 22 0b 24 48 66 00 00 1a 00
>029938	2d 03 2e 3e 27 32 0b 24 77 40 03 20 83 a9 28 32
>029948	06 22 0b 24 f6 a9 00 00 1a 00 2e 03 2e 3e 27 32
>029958	0e 40 0d 26 0b 24 06 10 c6 49 28 32 06 22 00 40
>029968	00 00 1a 00 2f 03 2e 3e 27 32 a0 40 03 20 0b 24
>029978	ba b5 28 32 06 22 0b 24 1a b5 00 00 1a 00 30 03
>029988	2e 3e 27 32 2d 40 0c 26 02 10 8e a7 28 32 06 22
>029998	7e 10 f6 73 00 00 1e 00 31 03 2e 3e 27 32 2e cd
>0299a8	52 c9 11 c0 0c 26 0b 24 e6 66 28 32 06 22 24 10
>0299b8	ea 54 00 00 1e 00 32 03 2e 3e 27 32 0b 24 77 40
>0299c8	0a 24 28 cd 18 c0 28 32 06 22 0b 24 04 10 93 66
>0299d8	00 00 1a 00 33 03 2e 3e 27 32 a0 40 02 20 0b 24
>0299e8	05 40 28 32 06 22 0b 24 05 40 00 00 16 00 34 03
>0299f8	2e 3e 27 32 fd c5 0d 26 88 40 28 32 06 22 01 40
>029a08	00 00 1c 00 35 03 2e 3e 27 32 09 d0 01 40 28 32
>029a18	01 20 53 cd 1b c0 28 32 06 22 00 40 00 00 20 00
>029a28	36 03 2e 3e 27 32 d9 dd 0e dc 09 d0 05 40 28 32
>029a38	0d 26 e2 cd 0c c0 28 32 06 22 00 40 00 00 1c 00
>029a48	37 03 2e 3e 27 32 03 d5 02 40 28 32 02 20 10 c6
>029a58	28 32 06 22 0b 24 92 40 00 00 1c 00 38 03 2e 3e
>029a68	27 32 d5 cd c9 cb 07 c0 03 20 06 c0 28 32 06 22
>029a78	03 10 ff 8e 00 00 1c 00 39 03 2e 3e 27 32 50 40
>029a88	0b 24 8a d5 03 40 28 32 28 32 06 22 04 10 e4 99
>029a98	00 00 1e 00 3a 03 2e 3e 27 32 02 10 70 6b 0b 24
>029aa8	09 d0 03 40 28 32 28 32 06 22 02 10 c0 6a 00 00
>029ab8	1c 00 3b 03 2e 3e 27 32 62 ce 51 c4 02 20 0b 24
>029ac8	ba b5 28 32 06 22 0b 24 21 40 00 00 18 00 3c 03
>029ad8	2e 3e 27 32 0b 24 f6 be 01 20 9e 40 28 32 06 22
>029ae8	0a 40 00 00 1c 00 3d 03 2e 3e 27 32 09 d0 05 40
>029af8	28 32 0d 26 e6 cd 14 c0 28 32 06 22 00 40 00 00
>029b08	18 00 3e 03 2e 3e 27 32 18 c0 01 20 06 c0 28 32
>029b18	06 22 01 10 00 ba 00 00 1a 00 3f 03 2e 3e 27 32
>029b28	5b cd 9f c0 0b 24 9f 40 28 32 06 22 0b 24 59 b6
>029b38	00 00 20 00 40 03 2e 3e 27 32 0b 24 06 10 c6 49
>029b48	02 20 6b ce ca cb 13 c0 28 32 06 22 0b 24 05 40
>029b58	00 00 1a 00 41 03 2e 3e 27 32 06 c0 0b 24 0b 24
>029b68	10 40 28 32 06 22 0b 24 55 40 00 00 1a 00 42 03
>029b78	2e 3e 27 32 cd c4 0b 24 0b 24 61 40 28 32 06 22
>029b88	05 10 cf 78 00 00 1c 00 43 03 2e 3e 27 32 c3 cc
>029b98	17 c0 03 20 0b 24 53 40 28 32 06 22 01 10 7d b8
>029ba8	00 00 1a 00 44 03 2e 3e 27 32 05 10 6e 78 01 20
>029bb8	65 c6 28 32 06 22 05 10 2c 78 00 00 1a 00 45 03
>029bc8	2e 3e 27 32 06 c0 0b 24 0b 24 05 40 28 32 06 22
>029bd8	0b 24 60 40 00 00 18 00 46 03 2e 3e 27 32 21 c5
>029be8	0b 24 9e 40 28 32 06 22 0b 24 84 67 00 00 1e 00
>029bf8	47 03 2e 3e 27 32 0b 24 05 10 b5 bb 03 20 9e 40
>029c08	28 32 06 22 0b 24 05 10 2b bb 00 00 1c 00 48 03
>029c18	2e 3e 27 32 0b 24 10 40 02 20 67 ce 0d c0 28 32
>029c28	06 22 0b 24 03 40 00 00 1e 00 49 03 2e 3e 27 32
>029c38	0b 24 04 10 3f 9d 03 20 0b 24 77 40 28 32 06 22
>029c48	04 10 48 9d 00 00 1c 00 4a 03 2e 3e 27 32 fa c4
>029c58	0a 24 00 ce 04 c0 28 32 06 22 0b 24 01 10 99 86
>029c68	00 00 16 00 4b 03 2e 3e 27 32 39 c6 02 20 9b 40
>029c78	28 32 06 22 9b 40 00 00 1a 00 4c 03 2e 3e 27 32
>029c88	cd c4 01 20 0b 24 46 40 28 32 06 22 05 10 2a 78
>029c98	00 00 20 00 4d 03 2e 3e 27 32 0b 24 02 10 6d 80
>029ca8	0a 24 80 cd 1e c0 28 32 06 22 0b 24 02 10 7d 80
>029cb8	00 00 1e 00 4e 03 2e 3e 27 32 de cd 03 c0 0a 24
>029cc8	68 ce 01 ca 1d c0 28 32 06 22 02 10 77 9d 00 00
>029cd8	1a 00 4f 03 2e 3e 27 32 10 c6 01 20 0b 24 92 63
>029ce8	28 32 06 22 0b 24 92 63 00 00 18 00 50 03 2e 3e
>029cf8	27 32 50 40 0d 26 02 10 3a 7f 28 32 06 22 00 40
>029d08	00 00 1a 00 51 03 2e 3e 27 32 06 c0 02 20 7d cd
>029d18	1d c0 28 32 06 22 0b 24 45 40 00 00 16 00 52 03
>029d28	2e 3e 27 32 fd c5 01 20 06 c0 28 32 06 22 9a 40
>029d38	00 00 1a 00 53 03 2e 3e 27 32 c9 cc 1b c0 01 20
>029d48	65 c6 28 32 06 22 02 10 85 4e 00 00 20 00 54 03
>029d58	2e 3e 27 32 f5 cc 73 c8 02 c0 0a 24 c3 cc 17 c0
>029d68	28 32 06 22 0b 24 01 10 91 b7 00 00 16 00 55 03
>029d78	2e 3e 27 32 3a a0 0d 26 50 40 28 32 06 22 33 41
>029d88	00 00 18 00 56 03 2e 3e 27 32 39 c6 0d 26 0b 24
>029d98	69 bd 28 32 06 22 00 40 00 00 18 00 57 03 2e 3e
>029da8	27 32 0b 24 83 7d 0d 26 06 c0 28 32 06 22 9b 40
>029db8	00 00 1a 00 58 03 2e 3e 27 32 06 c0 0d 26 0b 24
>029dc8	05 10 b5 bb 28 32 06 22 00 40 00 00 18 00 59 03
>029dd8	2e 3e 27 32 79 c5 0a 24 9b 40 28 32 06 22 02 10
>029de8	29 a8 00 00 1c 00 5a 03 2e 3e 27 32 03 d5 04 40
>029df8	28 32 01 20 0b 24 ba b5 28 32 06 22 02 40 00 00
>029e08	18 00 5b 03 2e 3e 27 32 eb 55 01 20 0b 24 83 7d
>029e18	28 32 06 22 69 40 00 00 1a 00 5c 03 2e 3e 27 32
>029e28	0b 24 e6 66 0b 24 9f 40 28 32 06 22 0b 24 85 67
>029e38	00 00 1a 00 5d 03 2e 3e 27 32 f2 cc 58 ce 11 c0
>029e48	01 20 39 c6 28 32 06 22 00 40 00 00 22 00 5e 03
>029e58	2e 3e 27 32 0b 24 04 10 81 51 03 20 68 ce 01 ca
>029e68	1d c0 28 32 06 22 0b 24 04 10 49 51 00 00 18 00
>029e78	5f 03 2e 3e 27 32 0b 24 e6 66 01 20 0e 40 28 32
>029e88	06 22 0a 40 00 00 1c 00 60 03 2e 3e 27 32 c9 cc
>029e98	0e c6 03 20 39 c6 28 32 06 22 0b 24 06 10 d5 49
>029ea8	00 00 1a 00 61 03 2e 3e 27 32 0b 24 83 7d 02 20
>029eb8	9f 40 28 32 06 22 0b 24 01 7d 00 00 1e 00 62 03
>029ec8	2e 3e 27 32 0b 24 01 10 30 b8 03 20 0b 24 53 40
>029ed8	28 32 06 22 01 10 7d b8 00 00 1c 00 63 03 2e 3e
>029ee8	27 32 18 40 0a 24 8a d5 01 40 28 32 28 32 06 22
>029ef8	04 10 06 ac 00 00 24 00 64 03 2e 3e 27 32 0b d0
>029f08	03 40 28 32 0c 26 3f de 07 d0 02 40 28 32 28 32
>029f18	06 22 0b 24 0a 13 67 73 00 00 1c 00 65 03 2e 3e
>029f28	27 32 f2 cc 58 ce 11 c0 0d 26 67 ce 0d c0 28 32
>029f38	06 22 91 42 00 00 1c 00 66 03 2e 3e 27 32 06 c0
>029f48	03 20 57 cd b5 cc 06 c0 28 32 06 22 0b 24 f9 40
>029f58	00 00 16 00 67 03 2e 3e 27 32 fa c4 03 20 9f 40
>029f68	28 32 06 22 04 40 00 00 1e 00 68 03 2e 3e 27 32
>029f78	2e cd 52 c9 11 c0 01 20 01 10 20 ba 28 32 06 22
>029f88	01 10 00 ba 00 00 1e 00 69 03 2e 3e 27 32 f7 d4
>029f98	03 40 28 32 0a 24 fd c5 28 32 06 22 0b 24 05 10
>029fa8	0d 6e 00 00 1a 00 6a 03 2e 3e 27 32 04 10 be 8c
>029fb8	02 20 9b 40 28 32 06 22 04 10 bf 8c 00 00 1e 00
>029fc8	6b 03 2e 3e 27 32 9b 40 02 20 0b 24 04 10 1c 66
>029fd8	28 32 06 22 0b 24 04 10 01 66 00 00 18 00 6c 03
>029fe8	2e 3e 27 32 2d 40 0d 26 05 10 a2 6e 28 32 06 22
>029ff8	00 40 00 00 1c 00 6d 03 2e 3e 27 32 62 ce 51 c4
>02a008	0b 24 5e c5 28 32 06 22 0b 24 04 10 c1 8a 00 00
>02a018	1a 00 6e 03 2e 3e 27 32 2e cd 52 c9 11 c0 0a 24
>02a028	28 b4 28 32 06 22 b1 b3 00 00 1c 00 6f 03 2e 3e
>02a038	27 32 89 c5 0b 24 f7 d4 05 40 28 32 28 32 06 22
>02a048	0b 24 9e a2 00 00 1a 00 70 03 2e 3e 27 32 9f 40
>02a058	0b 24 db cd 11 c4 28 32 06 22 0b 24 89 b3 00 00
>02a068	1c 00 71 03 2e 3e 27 32 80 cd 1e c0 03 20 ca cc
>02a078	08 c0 28 32 06 22 0b 24 e5 55 00 00 1a 00 72 03
>02a088	2e 3e 27 32 0b 24 05 40 02 20 11 c0 28 32 06 22
>02a098	0b 24 01 40 00 00 1a 00 73 03 2e 3e 27 32 2d 40
>02a0a8	02 20 03 10 d3 b5 28 32 06 22 03 10 ff b5 00 00
>02a0b8	1a 00 74 03 2e 3e 27 32 db cd 11 c4 03 20 65 c6
>02a0c8	28 32 06 22 0b 24 7b b4 00 00 1e 00 75 03 2e 3e
>02a0d8	27 32 0b 24 05 10 e3 93 0c 26 0b 24 53 40 28 32
>02a0e8	06 22 d5 11 99 72 00 00 18 00 76 03 2e 3e 27 32
>02a0f8	39 c6 0d 26 05 10 a2 6e 28 32 06 22 00 40 00 00
>02a108	18 00 77 03 2e 3e 27 32 03 10 52 ad 0d 26 fa c4
>02a118	28 32 06 22 2e 43 00 00 1c 00 78 03 2e 3e 27 32
>02a128	6b ce ca cb 13 c0 0d 26 0b 24 83 7d 28 32 06 22
>02a138	00 40 00 00 1c 00 79 03 2e 3e 27 32 fa c4 02 20
>02a148	28 cd 18 c0 28 32 06 22 0b 24 04 10 01 66 00 00
>02a158	1a 00 7a 03 2e 3e 27 32 28 cd 18 c0 0d 26 b0 40
>02a168	28 32 06 22 0b 24 20 43 00 00 1e 00 7b 03 2e 3e
>02a178	27 32 0b 24 0a 40 03 20 2a cd e6 c1 28 32 06 22
>02a188	0b 24 02 10 0f 49 00 00 18 00 7c 03 2e 3e 27 32
>02a198	9e 40 01 20 0b 24 53 40 28 32 06 22 8c 40 00 00
>02a1a8	1c 00 7d 03 2e 3e 27 32 0b 24 77 40 01 20 02 10
>02a1b8	af 9c 28 32 06 22 02 10 89 9c 00 00 1e 00 7e 03
>02a1c8	2e 3e 27 32 9b 40 0c 26 0b 24 02 10 6d 80 28 32
>02a1d8	06 22 0b 24 84 11 ff 41 00 00 24 00 7f 03 2e 3e
>02a1e8	27 32 e0 cd 66 ca 0a c0 0c 26 d5 dd d7 d0 01 40
>02a1f8	28 32 28 32 06 22 0b 24 99 12 28 5b 00 00 1c 00
>02a208	80 03 2e 3e 27 32 11 40 0b 24 0b 24 03 10 25 89
>02a218	28 32 06 22 03 10 36 89 00 00 1c 00 81 03 2e 3e
>02a228	27 32 5e c5 03 20 0b 24 61 40 28 32 06 22 0b 24
>02a238	04 10 01 8a 00 00 16 00 82 03 2e 3e 27 32 0e 40
>02a248	0a 24 58 c6 28 32 06 22 48 a0 00 00 20 00 83 03
>02a258	2e 3e 27 32 87 cd 2b cb 0f c0 03 20 6b ce ca cb
>02a268	13 c0 28 32 06 22 0b 24 55 40 00 00 1c 00 84 03
>02a278	2e 3e 27 32 18 40 0b 24 0b d0 00 40 28 32 28 32
>02a288	06 22 0b 24 93 75 00 00 1e 00 85 03 2e 3e 27 32
>02a298	c3 cc 17 c0 0d 26 03 d5 03 40 28 32 28 32 06 22
>02a2a8	0b 24 92 41 00 00 16 00 86 03 2e 3e 27 32 9c 40
>02a2b8	0d 26 58 c6 28 32 06 22 00 40 00 00 1e 00 87 03
>02a2c8	2e 3e 27 32 0b 24 77 40 0a 24 6b ce ca cb 13 c0
>02a2d8	28 32 06 22 0b 24 7c 40 00 00 18 00 88 03 2e 3e
>02a2e8	27 32 83 a9 0b 24 80 cd 1e c0 28 32 06 22 93 a9
>02a2f8	00 00 1a 00 89 03 2e 3e 27 32 03 10 d3 b5 0b 24
>02a308	c8 40 28 32 06 22 03 10 0b b5 00 00 18 00 8a 03
>02a318	2e 3e 27 32 80 cd 1e c0 01 20 9f 40 28 32 06 22
>02a328	90 40 00 00 1e 00 8b 03 2e 3e 27 32 0b 24 02 10
>02a338	6d 80 02 20 2d 40 28 32 06 22 0b 24 02 10 41 80
>02a348	00 00 1a 00 8c 03 2e 3e 27 32 fa c4 0d 26 0b 24
>02a358	01 10 30 b8 28 32 06 22 00 40 00 00 18 00 8d 03
>02a368	2e 3e 27 32 e6 cd 14 c0 01 20 11 40 28 32 06 22
>02a378	10 40 00 00 1a 00 8e 03 2e 3e 27 32 fa c4 03 20
>02a388	32 ce 7a c5 28 32 06 22 04 10 25 8c 00 00 1c 00
>02a398	8f 03 2e 3e 27 32 09 d0 03 40 28 32 03 20 53 cd
>02a3a8	1b c0 28 32 06 22 10 40 00 00 1e 00 90 03 2e 3e
>02a3b8	27 32 fd c5 0a 24 0b 24 05 10 b5 bb 28 32 06 22
>02a3c8	0b 24 05 10 17 bb 00 00 1e 00 91 03 2e 3e 27 32
>02a3d8	67 ce 0d c0 02 20 19 d0 04 40 28 32 28 32 06 22
>02a3e8	0b 24 41 bd 00 00 1a 00 92 03 2e 3e 27 32 0b 24
>02a3f8	61 40 02 20 65 c6 28 32 06 22 0b 24 41 40 00 00
>02a408	1a 00 93 03 2e 3e 27 32 57 cd b5 cc 06 c0 0d 26
>02a418	28 b4 28 32 06 22 00 40 00 00 1e 00 94 03 2e 3e
>02a428	27 32 0b 24 92 40 03 20 c1 cc b1 ca 0c c0 28 32
>02a438	06 22 02 10 fd 80 00 00 1e 00 95 03 2e 3e 27 32
>02a448	01 cd 20 c0 0b 24 0b 24 61 40 28 32 06 22 0b 24
>02a458	05 10 54 bb 00 00 1e 00 96 03 2e 3e 27 32 03 10
>02a468	52 ad 0b 24 2e cd 52 c9 11 c0 28 32 06 22 03 10
>02a478	c9 ad 00 00 1e 00 97 03 2e 3e 27 32 f7 d4 05 40
>02a488	28 32 0a 24 5b cd 9f c0 28 32 06 22 0b 24 58 b5
>02a498	00 00 1e 00 98 03 2e 3e 27 32 32 ce 7a c5 03 20
>02a4a8	0b 24 61 40 28 32 06 22 0b 24 04 10 df 8c 00 00
>02a4b8	1a 00 99 03 2e 3e 27 32 53 cd 1b c0 01 20 e6 cd
>02a4c8	14 c0 28 32 06 22 a0 40 00 00 1c 00 9a 03 2e 3e
>02a4d8	27 32 db cd 11 c4 0d 26 62 ce 51 c4 28 32 06 22
>02a4e8	0b 24 32 41 00 00 20 00 9b 03 2e 3e 27 32 0b 24
>02a4f8	61 40 0a 24 0b 24 05 10 b5 bb 28 32 06 22 0b 24
>02a508	05 10 16 bc 00 00 1e 00 9c 03 2e 3e 27 32 32 ce
>02a518	7a c5 0d 26 2e cd 52 c9 11 c0 28 32 06 22 0b 24
>02a528	f2 44 00 00 18 00 9d 03 2e 3e 27 32 62 ce 51 c4
>02a538	0d 26 65 c6 28 32 06 22 01 40 00 00 16 00 9e 03
>02a548	2e 3e 27 32 9b 40 0a 24 83 a9 28 32 06 22 1e aa
>02a558	00 00 1c 00 9f 03 2e 3e 27 32 ca cc 08 c0 02 20
>02a568	09 d0 06 40 28 32 28 32 06 22 ef 55 00 00 1c 00
>02a578	a0 03 2e 3e 27 32 0b 24 05 40 0c 26 cd c4 28 32
>02a588	06 22 0b 24 1b 10 26 5a 00 00 1a 00 a1 03 2e 3e
>02a598	27 32 0b 24 10 40 02 20 18 c0 28 32 06 22 0b 24
>02a5a8	10 40 00 00 1e 00 a2 03 2e 3e 27 32 0b 24 10 40
>02a5b8	0b 24 0b 24 02 10 d7 54 28 32 06 22 02 10 c7 54
>02a5c8	00 00 1e 00 a3 03 2e 3e 27 32 0b 24 02 10 3e 4c
>02a5d8	02 20 0b 24 77 40 28 32 06 22 0b 24 35 40 00 00
>02a5e8	1e 00 a4 03 2e 3e 27 32 02 10 af 9c 0a 24 03 d5
>02a5f8	04 40 28 32 28 32 06 22 02 10 51 9d 00 00 18 00
>02a608	a5 03 2e 3e 27 32 b5 c5 0d 26 c8 40 28 32 06 22
>02a618	0b 24 9e 43 00 00 1c 00 a6 03 2e 3e 27 32 c8 40
>02a628	0b 24 03 10 52 ad 28 32 06 22 0b 24 03 10 8a ac
>02a638	00 00 22 00 a7 03 2e 3e 27 32 11 c0 0b 24 d9 dd
>02a648	0e dc 09 d0 01 40 28 32 28 32 06 22 0b 24 03 10
>02a658	fb 9b 00 00 1a 00 a8 03 2e 3e 27 32 0b 24 92 63
>02a668	0b 24 06 c0 28 32 06 22 0b 24 2d 63 00 00 1a 00
>02a678	a9 03 2e 3e 27 32 67 ce 05 c5 0a 24 06 c0 28 32
>02a688	06 22 05 10 05 b9 00 00 1e 00 aa 03 2e 3e 27 32
>02a698	0b 24 02 10 d7 54 03 20 62 ce 51 c4 28 32 06 22
>02a6a8	02 10 b6 54 00 00 20 00 ab 03 2e 3e 27 32 d9 dd
>02a6b8	0e dc 09 d0 01 40 28 32 01 20 05 10 6a b9 28 32
>02a6c8	06 22 08 40 00 00 1e 00 ac 03 2e 3e 27 32 0b 24
>02a6d8	02 10 d7 54 03 20 b0 40 28 32 06 22 0b 24 02 10
>02a6e8	67 54 00 00 1c 00 ad 03 2e 3e 27 32 2d 40 02 20
>02a6f8	03 d5 01 40 28 32 28 32 06 22 04 10 6d 6b 00 00
>02a708	1a 00 ae 03 2e 3e 27 32 06 c0 01 20 02 10 af 9c
>02a718	28 32 06 22 02 10 8b 9c 00 00 1c 00 af 03 2e 3e
>02a728	27 32 32 ce 7a c5 0a 24 0b 24 05 40 28 32 06 22
>02a738	04 10 b9 8c 00 00 1a 00 b0 03 2e 3e 27 32 79 c5
>02a748	02 20 0b 24 53 40 28 32 06 22 0b 24 51 40 00 00
>02a758	1c 00 b1 03 2e 3e 27 32 0b 24 65 40 02 20 5d cd
>02a768	63 c2 28 32 06 22 0b 24 25 40 00 00 1c 00 b2 03
>02a778	2e 3e 27 32 0b 24 65 40 01 20 03 d5 03 40 28 32
>02a788	28 32 06 22 9a 40 00 00 1e 00 b3 03 2e 3e 27 32
>02a798	87 cd 2b cb 0f c0 0a 24 04 10 60 8a 28 32 06 22
>02a7a8	04 10 b0 8a 00 00 20 00 b4 03 2e 3e 27 32 0b 24
>02a7b8	3b 89 0c 26 57 cd b5 cc 06 c0 28 32 06 22 0b 24
>02a7c8	59 10 f4 5f 00 00 16 00 b5 03 2e 3e 27 32 fd c5
>02a7d8	0b 24 2d 40 28 32 06 22 71 40 00 00 20 00 b6 03
>02a7e8	2e 3e 27 32 28 cd 18 c0 02 20 68 ce 01 ca 1d c0
>02a7f8	28 32 06 22 0b 24 04 10 14 66 00 00 18 00 b7 03
>02a808	2e 3e 27 32 06 c0 0c 26 62 ce 51 c4 28 32 06 22
>02a818	45 66 00 00 1c 00 b8 03 2e 3e 27 32 0b 24 b0 7c
>02a828	0b 24 0b 24 77 40 28 32 06 22 0b 24 39 7c 00 00
>02a838	18 00 b9 03 2e 3e 27 32 5d cd 63 c2 0d 26 9c 40
>02a848	28 32 06 22 29 43 00 00 18 00 ba 03 2e 3e 27 32
>02a858	c8 40 0d 26 2a cd e6 c1 28 32 06 22 00 40 00 00
>02a868	18 00 bb 03 2e 3e 27 32 39 c6 0b 24 55 c5 28 32
>02a878	06 22 04 10 50 9d 00 00 1e 00 bc 03 2e 3e 27 32
>02a888	0b 24 01 10 fe 64 01 20 65 c6 28 32 06 22 0b 24
>02a898	01 10 00 65 00 00 1e 00 bd 03 2e 3e 27 32 0b 24
>02a8a8	01 10 fe 64 0c 26 0b 24 65 40 28 32 06 22 82 10
>02a8b8	36 58 00 00 1e 00 be 03 2e 3e 27 32 0b 24 05 10
>02a8c8	e3 93 03 20 50 40 28 32 06 22 0b 24 05 10 b3 93
>02a8d8	00 00 1e 00 bf 03 2e 3e 27 32 fd c5 02 20 d5 cd
>02a8e8	c9 cb 07 c0 28 32 06 22 0b 24 03 10 02 8e 00 00
>02a8f8	1c 00 c0 03 2e 3e 27 32 0b 24 b0 7c 02 20 53 cd
>02a908	1b c0 28 32 06 22 0b 24 10 7c 00 00 22 00 c1 03
>02a918	2e 3e 27 32 f2 cc 58 ce 11 c0 0c 26 6b ce ca cb
>02a928	13 c0 28 32 06 22 0b 24 04 10 bc 81 00 00 1e 00
>02a938	c2 03 2e 3e 27 32 0b 24 02 10 3e 4c 01 20 65 c6
>02a948	28 32 06 22 0b 24 02 10 80 4c 00 00 1c 00 c3 03
>02a958	2e 3e 27 32 87 cd 2b cb 0f c0 0b 24 fa c4 28 32
>02a968	06 22 0b 24 4b 40 00 00 20 00 c4 03 2e 3e 27 32
>02a978	87 cd 2b cb 0f c0 0c 26 0b 24 3c a2 28 32 06 22
>02a988	0b 24 3d 10 c0 72 00 00 1a 00 c5 03 2e 3e 27 32
>02a998	9f 40 0d 26 f5 cc 73 c8 02 c0 28 32 06 22 01 40
>02a9a8	00 00 20 00 c6 03 2e 3e 27 32 e2 cd 0c c0 0a 24
>02a9b8	6b ce ca cb 13 c0 28 32 06 22 0b 24 03 10 7c 72
>02a9c8	00 00 1a 00 c7 03 2e 3e 27 32 2d 40 02 20 03 10
>02a9d8	44 63 28 32 06 22 03 10 6d 63 00 00 22 00 c8 03
>02a9e8	2e 3e 27 32 2e cd 52 c9 11 c0 01 20 e0 cd 66 ca
>02a9f8	0a c0 28 32 06 22 0b 24 04 10 77 b2 00 00 1e 00
>02aa08	c9 03 2e 3e 27 32 05 10 a2 6e 0a 24 57 cd b5 cc
>02aa18	06 c0 28 32 06 22 05 10 3e 6f 00 00 1c 00 ca 03
>02aa28	2e 3e 27 32 0b 24 65 40 0d 26 d5 cd c9 cb 07 c0
>02aa38	28 32 06 22 00 40 00 00 20 00 cb 03 2e 3e 27 32
>02aa48	68 ce 01 ca 1d c0 0b 24 d5 cd c9 cb 07 c0 28 32
>02aa58	06 22 03 10 64 8f 00 00 16 00 cc 03 2e 3e 27 32
>02aa68	83 a9 01 20 9f 40 28 32 06 22 83 40 00 00 1e 00
>02aa78	cd 03 2e 3e 27 32 0b d0 00 40 28 32 0b 24 6b ce
>02aa88	ca cb 13 c0 28 32 06 22 b0 75 00 00 1a 00 ce 03
>02aa98	2e 3e 27 32 32 ce 7a c5 03 20 fa c4 28 32 06 22
>02aaa8	04 10 25 8c 00 00 22 00 cf 03 2e 3e 27 32 0b 24
>02aab8	05 10 b5 bb 0a 24 68 ce 01 ca 1d c0 28 32 06 22
>02aac8	0b 24 05 10 ed ba 00 00 1c 00 d0 03 2e 3e 27 32
>02aad8	4d 44 02 20 74 cd 1c ce 0c c0 28 32 06 22 03 10
>02aae8	cd 64 00 00 22 00 d1 03 2e 3e 27 32 02 10 07 49
>02aaf8	03 20 d9 dd 0e dc 09 d0 01 40 28 32 28 32 06 22
>02ab08	02 10 1f 49 00 00 1e 00 d2 03 2e 3e 27 32 0b 24
>02ab18	a9 40 03 20 d5 cd c9 cb 07 c0 28 32 06 22 03 10
>02ab28	33 8e 00 00 1e 00 d3 03 2e 3e 27 32 f5 cc 73 c8
>02ab38	02 c0 0d 26 c8 cc 8b c9 04 c0 28 32 06 22 00 40
>02ab48	00 00 1c 00 d4 03 2e 3e 27 32 74 cd 1c ce 0c c0
>02ab58	0a 24 a0 40 28 32 06 22 03 10 2d 65 00 00 14 00
>02ab68	d5 03 2e 3e 01 cd 20 c0 06 22 0b 24 05 10 b5 bb
>02ab78	00 00 12 00 d6 03 2e 3e 88 cd 02 c5 06 22 01 10
>02ab88	e8 5c 00 00 10 00 d7 03 2e 3e 06 c0 06 22 0b 24
>02ab98	65 40 00 00 14 00 d8 03 2e 3e 84 cd 4c c9 0d c0
>02aba8	06 22 02 10 d4 62 00 00 16 00 d9 03 2e 3e e0 cd
>02abb8	66 ca 0a c0 06 22 0b 24 04 10 15 b2 00 00 14 00
>02abc8	da 03 2e 3e a9 cd 11 c0 06 22 0b 24 03 10 13 a3
>02abd8	00 00 12 00 db 03 2e 3e 80 cd 1e c0 06 22 0b 24
>02abe8	10 40 00 00 14 00 dc 03 2e 3e c9 cc 0e c6 06 22
>02abf8	0b 24 06 10 c6 49 00 00 12 00 dd 03 2e 3e 87 cd
>02ac08	2b cb 0f c0 06 22 50 40 00 00 12 00 de 03 2e 3e
>02ac18	de cd 03 c0 06 22 02 10 af 9c 00 00 10 00 df 03
>02ac28	2e 3e 03 c0 06 22 02 10 3a 7f 00 00 10 00 e0 03
>02ac38	2e 3e 67 ce 0d c0 06 22 2d 40 00 00 12 00 e1 03
>02ac48	2e 3e 4a c5 06 22 0b 24 01 10 fe 64 00 00 12 00
>02ac58	e2 03 2e 3e 57 cd b5 cc 06 c0 06 22 9c 40 00 00
>02ac68	14 00 e3 03 2e 3e 28 cd 18 c0 06 22 0b 24 04 10
>02ac78	1c 66 00 00 10 00 e4 03 2e 3e 18 c0 06 22 01 10
>02ac88	20 ba 00 00 14 00 e5 03 2e 3e 2e cd 52 c9 11 c0
>02ac98	06 22 0b 24 77 40 00 00 12 00 e6 03 2e 3e 08 c0
>02aca8	06 22 0b 24 01 10 7a b6 00 00 16 00 e7 03 2e 3e
>02acb8	c1 cc b1 ca 0c c0 06 22 0b 24 02 10 6d 80 00 00
>02acc8	12 00 e8 03 2e 3e c9 cc 1b c0 06 22 02 10 d5 4e
>02acd8	00 00 14 00 e9 03 2e 3e 74 cd 1c ce 0c c0 06 22
>02ace8	03 10 8d 64 00 00 10 00 ea 03 2e 3e 53 cd 1b c0
>02acf8	06 22 a0 40 00 00 10 00 eb 03 2e 3e 10 c6 06 22
>02ad08	0b 24 92 63 00 00 10 00 ec 03 2e 3e cd c4 06 22
>02ad18	05 10 6e 78 00 00 0e 00 ed 03 2e 3e 58 c6 06 22
>02ad28	3a a0 00 00 10 00 ee 03 2e 3e 21 c5 06 22 0b 24
>02ad38	e6 66 00 00 12 00 ef 03 2e 3e 68 ce 01 ca 1d c0
>02ad48	06 22 c8 40 00 00 12 00 f0 03 2e 3e 57 c5 06 22
>02ad58	0b 24 04 10 81 51 00 00 12 00 f1 03 2e 3e 5d cd
>02ad68	63 c2 06 22 03 10 52 ad 00 00 12 00 f2 03 2e 3e
>02ad78	67 ce 05 c5 06 22 05 10 6a b9 00 00 0e 00 f3 03
>02ad88	2e 3e 39 c6 06 22 11 40 00 00 14 00 f4 03 2e 3e
>02ad98	c3 cc 17 c0 06 22 0b 24 01 10 30 b8 00 00 12 00
>02ada8	f5 03 2e 3e 2a cd e6 c1 06 22 02 10 07 49 00 00
>02adb8	0e 00 f6 03 2e 3e d5 c4 06 22 83 a9 00 00 12 00
>02adc8	f7 03 2e 3e 55 c5 06 22 0b 24 04 10 3f 9d 00 00
>02add8	12 00 f8 03 2e 3e 5b cd 9f c0 06 22 0b 24 ba b5
>02ade8	00 00 14 00 f9 03 2e 3e 7d cd 1d c0 06 22 0b 24
>02adf8	02 10 d7 54 00 00 10 00 fa 03 2e 3e db cd 11 c4
>02ae08	06 22 28 b4 00 00 10 00 fb 03 2e 3e ca cc 08 c0
>02ae18	06 22 eb 55 00 00 10 00 fc 03 2e 3e 65 c6 06 22
>02ae28	0b 24 53 40 00 00 12 00 fd 03 2e 3e 11 c0 06 22
>02ae38	0b 24 03 10 e3 9b 00 00 14 00 fe 03 2e 3e 00 ce
>02ae48	04 c0 06 22 0b 24 01 10 34 87 00 00 14 00 ff 03
>02ae58	2e 3e c8 cc 8b c9 04 c0 06 22 0b 24 83 7d 00 00
>02ae68	10 00 00 04 2e 3e 79 c5 06 22 02 10 8e a7 00 00
>02ae78	12 00 01 04 2e 3e e6 cd 14 c0 06 22 05 10 b2 44
>02ae88	00 00 14 00 02 04 2e 3e e2 cd 0c c0 06 22 0b 24
>02ae98	03 10 77 72 00 00 0e 00 03 04 2e 3e fa c4 06 22
>02aea8	9b 40 00 00 10 00 04 04 2e 3e 5e c5 06 22 04 10
>02aeb8	60 8a 00 00 16 00 05 04 2e 3e d5 cd c9 cb 07 c0
>02aec8	06 22 0b 24 03 10 9c 8e 00 00 12 00 06 04 2e 3e
>02aed8	f2 cc 58 ce 11 c0 06 22 8c b3 00 00 12 00 07 04
>02aee8	2e 3e b5 c5 06 22 0b 24 05 10 e3 93 00 00 10 00
>02aef8	08 04 2e 3e 16 c0 06 22 0b 24 b0 7c 00 00 12 00
>02af08	09 04 2e 3e 62 ce 51 c4 06 22 0b 24 61 40 00 00
>02af18	10 00 0a 04 2e 3e 89 c5 06 22 0b 24 3c a2 00 00
>02af28	0e 00 0b 04 2e 3e fd c5 06 22 9e 40 00 00 10 00
>02af38	0c 04 2e 3e ce c5 06 22 05 10 a2 6e 00 00 12 00
>02af48	0d 04 2e 3e 32 ce 7a c5 06 22 04 10 be 8c 00 00
>02af58	10 00 0e 04 2e 3e 2b c6 06 22 03 10 d3 b5 00 00
>02af68	12 00 0f 04 2e 3e f5 cc 73 c8 02 c0 06 22 9f 40
>02af78	00 00 14 00 10 04 2e 3e 6b ce ca cb 13 c0 06 22
>02af88	0b 24 05 40 00 00 78 00 11 04 2e 3e f7 d4 00 40
>02af98	28 32 06 22 0b 24 03 10 25 89 26 32 2e 3e f7 d4
>02afa8	01 40 28 32 06 22 0b 24 05 10 4d 49 26 32 2e 3e
>02afb8	f7 d4 02 40 28 32 06 22 03 10 71 ab 26 32 2e 3e
>02afc8	f7 d4 03 40 28 32 06 22 0b 24 05 10 ab 6e 26 32
>02afd8	2e 3e f7 d4 04 40 28 32 06 22 02 10 50 a2 26 32
>02afe8	2e 3e f7 d4 05 40 28 32 06 22 62 40 26 32 2e 3e
>02aff8	f7 d4 06 40 28 32 06 22 02 10 78 bb 00 00 6a 00
>02b008	12 04 2e 3e 8a d5 00 40 28 32 06 22 0b 24 7e 40
>02b018	26 32 2e 3e 8a d5 01 40 28 32 06 22 04 10 ee ab
>02b028	26 32 2e 3e 8a d5 02 40 28 32 06 22 0b 24 0a 40
>02b038	26 32 2e 3e 8a d5 03 40 28 32 06 22 0b 24 04 10
>02b048	94 99 26 32 2e 3e 8a d5 04 40 28 32 06 22 0b 24
>02b058	03 10 3e a1 26 32 2e 3e 8a d5 05 40 28 32 06 22
>02b068	0b 24 01 10 e2 49 00 00 64 00 13 04 2e 3e 19 d0
>02b078	00 40 28 32 06 22 0b 24 03 10 b4 63 26 32 2e 3e
>02b088	19 d0 01 40 28 32 06 22 86 48 26 32 2e 3e 19 d0
>02b098	02 40 28 32 06 22 0b 24 3b 89 26 32 2e 3e 19 d0
>02b0a8	03 40 28 32 06 22 02 10 af 6b 26 32 2e 3e 19 d0
>02b0b8	04 40 28 32 06 22 0b 24 69 bd 26 32 2e 3e 19 d0
>02b0c8	05 40 28 32 06 22 02 10 70 6b 00 00 76 00 14 04
>02b0d8	2e 3e 3f de 07 d0 00 40 28 32 06 22 0b 24 01 10
>02b0e8	4d 82 26 32 2e 3e 3f de 07 d0 01 40 28 32 06 22
>02b0f8	0b 24 01 10 c9 bc 26 32 2e 3e 3f de 07 d0 02 40
>02b108	28 32 06 22 0b 24 a9 40 26 32 2e 3e 3f de 07 d0
>02b118	03 40 28 32 06 22 04 10 10 73 26 32 2e 3e 3f de
>02b128	07 d0 04 40 28 32 06 22 0b 24 01 10 68 7e 26 32
>02b138	2e 3e 3f de 07 d0 05 40 28 32 06 22 02 10 a3 ba
>02b148	00 00 72 00 15 04 2e 3e d5 dd d7 d0 00 40 28 32
>02b158	06 22 0b 24 02 10 3e 4c 26 32 2e 3e d5 dd d7 d0
>02b168	01 40 28 32 06 22 88 40 26 32 2e 3e d5 dd d7 d0
>02b178	02 40 28 32 06 22 01 10 71 44 26 32 2e 3e d5 dd
>02b188	d7 d0 03 40 28 32 06 22 0b 24 f6 be 26 32 2e 3e
>02b198	d5 dd d7 d0 04 40 28 32 06 22 0b 24 04 10 86 ac
>02b1a8	26 32 2e 3e d5 dd d7 d0 05 40 28 32 06 22 05 10
>02b1b8	35 9f 00 00 50 00 16 04 2e 3e 03 d5 00 40 28 32
>02b1c8	06 22 05 10 7d b4 26 32 2e 3e 03 d5 01 40 28 32
>02b1d8	06 22 04 10 40 6b 26 32 2e 3e 03 d5 02 40 28 32
>02b1e8	06 22 0b 24 92 40 26 32 2e 3e 03 d5 03 40 28 32
>02b1f8	06 22 9e 40 26 32 2e 3e 03 d5 04 40 28 32 06 22
>02b208	a2 40 00 00 46 00 17 04 2e 3e 0b d0 00 40 28 32
>02b218	06 22 ab 75 26 32 2e 3e 0b d0 01 40 28 32 06 22
>02b228	0b 24 05 10 ac 64 26 32 2e 3e 0b d0 02 40 28 32
>02b238	06 22 0b 24 03 10 4e 75 26 32 2e 3e 0b d0 03 40
>02b248	28 32 06 22 04 10 8f 8d 00 00 6a 00 18 04 2e 3e
>02b258	09 d0 00 40 28 32 06 22 1d 49 26 32 2e 3e 09 d0
>02b268	01 40 28 32 06 22 50 bb 26 32 2e 3e 09 d0 02 40
>02b278	28 32 06 22 05 10 26 aa 26 32 2e 3e 09 d0 03 40
>02b288	28 32 06 22 b0 40 26 32 2e 3e 09 d0 04 40 28 32
>02b298	06 22 0b 24 c2 40 26 32 2e 3e 09 d0 05 40 28 32
>02b2a8	06 22 bd 40 26 32 2e 3e 09 d0 06 40 28 32 06 22
>02b2b8	65 40 00 00 78 00 19 04 2e 3e d9 dd 0e dc 09 d0
>02b2c8	00 40 28 32 06 22 0b 24 46 40 26 32 2e 3e d9 dd
>02b2d8	0e dc 09 d0 01 40 28 32 06 22 18 40 26 32 2e 3e
>02b2e8	d9 dd 0e dc 09 d0 02 40 28 32 06 22 0b 24 4f 40
>02b2f8	26 32 2e 3e d9 dd 0e dc 09 d0 03 40 28 32 06 22
>02b308	0b 24 05 10 26 54 26 32 2e 3e d9 dd 0e dc 09 d0
>02b318	04 40 28 32 06 22 ae 58 26 32 2e 3e d9 dd 0e dc
>02b328	09 d0 05 40 28 32 06 22 0e 40 00 00 72 00 1a 04
>02b338	2e 3e 35 de 1b d0 00 40 28 32 06 22 0b 24 01 10
>02b348	ae 47 26 32 2e 3e 35 de 1b d0 01 40 28 32 06 22
>02b358	01 10 22 b6 26 32 2e 3e 35 de 1b d0 02 40 28 32
>02b368	06 22 03 10 44 63 26 32 2e 3e 35 de 1b d0 03 40
>02b378	28 32 06 22 0b 24 03 10 f6 79 26 32 2e 3e 35 de
>02b388	1b d0 04 40 28 32 06 22 04 10 83 91 26 32 2e 3e
>02b398	35 de 1b d0 05 40 28 32 06 22 4d 44 00 00 00 00
>02b3a8	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>02b3b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 195 times (3120 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
