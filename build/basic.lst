
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sun Jun 23 20:11:34 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c bf 1e 01	jmp $011ebf			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ac 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	fe 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	0e 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	1e 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	62 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	c9 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	2e 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	ab 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	8d 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	48 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	48 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	c9 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	d5 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	52 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	c9 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	da 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	ec 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	63 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	43 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	1f 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	09 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	8b 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	ab 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	9d 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	d5 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	09 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	3f 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	59 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	70 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	14 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	d2 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	53 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	ea 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	7c 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	6b 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	45 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	ac 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	ac 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	ac 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	ac 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	ac 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	ac 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	ac 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	ac 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	f3 1c					.word Command_REM              & $FFFF ; token $3e2c "rem"
>01005a	56 12					.word Command_Let              & $FFFF ; token $3e2d "let"
>01005c	d3 1c					.word Command_ASSERT           & $FFFF ; token $3e2e "assert"
>01005e	ff 1a					.word Command_END              & $FFFF ; token $3e2f "end"
>010060	02 1b					.word Command_RUN              & $FFFF ; token $3e30 "run"
>010062	91 1b					.word Command_STOP             & $FFFF ; token $3e31 "stop"
>010064	8d 1b					.word Command_CLEAR            & $FFFF ; token $3e32 "clear"
>010066	ea 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	ef 1c					.word Command_CLS              & $FFFF ; token $3e34 "cls"
>01006a	9d 16					.word Command_PRINT            & $FFFF ; token $3e35 "print"
>01006c	8d 19					.word Command_GOTO             & $FFFF ; token $3e36 "goto"
>01006e	ec 19					.word Command_GOSUB            & $FFFF ; token $3e37 "gosub"
>010070	08 1a					.word Command_RETURN           & $FFFF ; token $3e38 "return"
>010072	4a 19					.word Command_ONGOTO           & $FFFF ; token $3e39 "on"
>010074	50 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	8d 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	a5 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	b9 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	65 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	0a 1d					.word Command_LINK             & $FFFF ; token $3e3f "link"
>010080	7e 1b					.word Command_NEW              & $FFFF ; token $3e40 "new"
>010082	cc 12					.word Command_PROC             & $FFFF ; token $3e41 "proc"
>010084	78 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	4d 1d					.word Command_VDU              & $FFFF ; token $3e43 "vdu"
>010088	3a 1a					.word Command_REPEAT           & $FFFF ; token $3c44 "repeat"
>01008a	98 1a					.word Command_WHILE            & $FFFF ; token $3c45 "while"
>01008c	e9 16					.word Command_IF               & $FFFF ; token $3c46 "if"
>01008e	25 18					.word Command_FOR              & $FFFF ; token $3c47 "for"
>010090	ac 05					.word IllegalToken             & $FFFF ; token $3c48 "defproc"
>010092	cf 1a					.word Command_WEND             & $FFFF ; token $3a49 "wend"
>010094	51 1a					.word Command_UNTIL            & $FFFF ; token $3a4a "until"
>010096	ac 05					.word IllegalToken             & $FFFF ; token $3a4b "then"
>010098	7e 17					.word Handler_ENDIF            & $FFFF ; token $3a4c "endif"
>01009a	8e 18					.word Command_NEXT             & $FFFF ; token $3a4d "next"
>01009c	43 13					.word Command_ENDPROC          & $FFFF ; token $3a4e "endproc"
.01009e					TokenText:
>01009e	02 26					 .text $02,"&"        ; token $2001
>0100a0	02 7c					 .text $02,"|"        ; token $2002
>0100a2	02 5e					 .text $02,"^"        ; token $2003
>0100a4	12 3c					 .text $12,"<"        ; token $2204
>0100a6	12 3e					 .text $12,">"        ; token $2205
>0100a8	12 3d					 .text $12,"="        ; token $2206
>0100aa	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ad	13 3e 3d				 .text $13,">="       ; token $2208
>0100b0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b3	22 2b					 .text $22,"+"        ; token $240a
>0100b5	22 2d					 .text $22,"-"        ; token $240b
>0100b7	32 2a					 .text $32,"*"        ; token $260c
>0100b9	32 2f					 .text $32,"/"        ; token $260d
>0100bb	32 25					 .text $32,"%"        ; token $260e
>0100bd	33 3e 3e				 .text $33,">>"       ; token $260f
>0100c0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c3	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c8	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cd	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d2	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d7	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100dc	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e2	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e8	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100ed	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f2	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f8	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fe	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010104	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010c	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010114	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01011b	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010121	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010129	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010130	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010137	92 2c					 .text $92,","        ; token $3224
>010139	92 3b					 .text $92,";"        ; token $3225
>01013b	92 3a					 .text $92,":"        ; token $3226
>01013d	92 28					 .text $92,"("        ; token $3227
>01013f	92 29					 .text $92,")"        ; token $3228
>010141	92 27					 .text $92,"'"        ; token $3229
>010143	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010146	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>01014b	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014f	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010153	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>01015a	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015e	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010162	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010167	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016d	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010171	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010175	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>01017b	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010180	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010186	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018d	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010190	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010195	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01019a	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019f	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a4	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a9	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ae	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b2	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b7	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bd	f4 56 44 55				 .text $f4,"VDU"      ; token $3e43
>0101c1	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c44
>0101c8	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c45
>0101ce	e3 49 46				 .text $e3,"IF"       ; token $3c46
>0101d1	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c47
>0101d5	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c48
>0101dd	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a49
>0101e2	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a4a
>0101e8	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4b
>0101ed	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4c
>0101f3	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4d
>0101f8	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4e
>010200	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3e43					vduTokenID                       = $3e43
=$3c44					repeatTokenID                    = $3c44
=$3c45					whileTokenID                     = $3c45
=$3c46					ifTokenID                        = $3c46
=$3c47					forTokenID                       = $3c47
=$3c48					defprocTokenID                   = $3c48
=$3a49					wendTokenID                      = $3a49
=$3a4a					untilTokenID                     = $3a4a
=$3a4b					thenTokenID                      = $3a4b
=$3a4c					endifTokenID                     = $3a4c
=$3a4d					nextTokenID                      = $3a4d
=$3a4e					endprocTokenID                   = $3a4e

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=62					DArrayType = DPBaseAddress + 62 			; type of array being created.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010201					Evaluate:
.010201	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.010204	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010207					EvaluateLevel:
.010207	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.01020a	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01020c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01020e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010211	b0 79		bcs $01028c			bcs 	_ELVariable
.010213	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010216	b0 16		bcs $01022e			bcs 	_ELConstant
.010218	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01021b	90 7f		bcc $01029c			bcc 	_ELStringConstant
.01021d	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010220	90 03		bcc $010225			bcc 	_ELConstantShift
.010222	82 94 00	brl $0102b9			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010225					_ELConstantShift:
.010225	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010228	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01022a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01022c	e6 06		inc $06				inc 	DCodePtr
.01022e					_ELConstant:
.01022e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010230	38		sec				sec  								; shift it in the range 0-32767
.010231	e9 00 40	sbc #$4000			sbc 	#$4000
.010234	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010235	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010237	6a		ror a				ror 	a 							; rotate that into the constant value
.010238	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01023a	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01023c	95 20		sta $20,x			sta 	EXSValueH+0,x
.01023e	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010240	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010242	e6 06		inc $06				inc 	DCodePtr
.010244					_ELGotAtom:
.010244	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010246	a8		tay				tay 								; save in Y
.010247	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01024a	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01024d	d0 35		bne $010284			bne 	_ELExit
.01024f	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010256	98		tya				tya 								; get the keyword token back
.010257	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01025a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01025c	90 26		bcc $010284			bcc 	_ELExit 					; precedence too low, then exit.
.01025e	5a		phy				phy 								; save the binary operator on the stack
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	18		clc				clc 								; try the next level up
.010264	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010267	e8		inx				inx 								; calculate the RHS at the next stack level.
.010268	e8		inx				inx
.010269	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01026c	ca		dex				dex
.01026d	ca		dex				dex
.01026e	7a		ply				ply 								; get operator token back into Y
.01026f					_ELExecuteY:
.01026f	98		tya				tya
.010270	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010273	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010274	9b		txy				txy 								; save X in Y
.010275	aa		tax				tax 								; double keyword ID in X
.010276	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01027a	bb		tyx				tyx 								; restore X.
.01027b	8f 80 02 01	sta $010280			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01027f					_ELCallRoutine:
.01027f	20 7f 02	jsr $01027f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010282	80 c0		bra $010244			bra 	_ELGotAtom 					; go round operator level again.
.010284	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010286	0a		asl a				asl 	a
.010287	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010289	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01028b	60		rts				rts
.01028c					_ELVariable:
.01028c	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.01028e	20 4d 03	jsr $01034d			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010291	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010293	94 20		sty $20,x			sty 	EXSValueH+0,x
.010295	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010297	80 ab		bra $010244			bra 	_ELGotAtom
.010299					_ELSyntax
.010299	82 21 03	brl $0105bd			brl 	SyntaxError
.01029c					_ELStringConstant:
.01029c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01029f	f0 f8		beq $010299			beq 	_ELSyntax
.0102a1	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0102a3	1a		inc a				inc 	a
.0102a4	1a		inc a				inc 	a
.0102a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a9	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102ab	18		clc				clc 								; add to string constant.
.0102ac	65 06		adc $06				adc 	DCodePtr
.0102ae	85 06		sta $06				sta 	DCodePtr
.0102b0	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102b2	09 00 80	ora #$8000			ora 	#$8000
.0102b5	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b7	80 8b		bra $010244			bra 	_ELGotAtom
.0102b9					_ELUnaryKeyword:
.0102b9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102bb	a8		tay				tay 								; put the token in Y.
.0102bc	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102be	e6 06		inc $06				inc 	DCodePtr
.0102c0	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102c3	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c6	f0 a7		beq $01026f			beq 	_ELExecuteY					; go back and execute it
.0102c8	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102cb	d0 11		bne $0102de			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102cd	20 04 03	jsr $010304			jsr 	EvaluateNext 				; evaluate the expression
.0102d0	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102d3					_ELCopy:
.0102d3	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102d5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d7	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102db	82 66 ff	brl $010244			brl 	_ELGotAtom 					; and continue.
.0102de					_ELUnaryOperator:
.0102de	5a		phy				phy 								; save the operator on the stack.
.0102df	e8		inx				inx 								; this is like evaluate next
.0102e0	e8		inx				inx
.0102e1	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102e4	20 07 02	jsr $010207			jsr 	EvaluateLevel
.0102e7	ca		dex				dex 								; unwind the stack.
.0102e8	ca		dex				dex
.0102e9	68		pla				pla 								; restore the unary operator.
.0102ea	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102ed	f0 03		beq $0102f2			beq 	_ELMinus
.0102ef	4c bd 05	jmp $0105bd			jmp 	SyntaxError
.0102f2					_ELMinus:
.0102f2	38		sec				sec 								; do the negation calculation.
.0102f3	a9 00 00	lda #$0000			lda 	#0
.0102f6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102fa	a9 00 00	lda #$0000			lda 	#0
.0102fd	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102ff	95 20		sta $20,x			sta 	EXSValueH+0,x
.010301	82 40 ff	brl $010244			brl 	_ELGotAtom					; and continue.
.010304					EvaluateNext:
.010304	e8		inx				inx
.010305	e8		inx				inx
.010306	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010309	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01030c	ca		dex				dex
.01030d	ca		dex				dex
.01030e	60		rts				rts
.01030f					EvaluateInteger:
.01030f	20 01 02	jsr $010201			jsr 	Evaluate
.010312	b0 01		bcs $010315			bcs 	EIType
.010314	60		rts				rts
.010315					EIType:
.010315	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010318	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010320	78 70 65 63 74 65 64 00
.010328					EvaluateNextInteger:
.010328	20 04 03	jsr $010304			jsr 	EvaluateNext
.01032b	b0 e8		bcs $010315			bcs 	EIType
.01032d	60		rts				rts
.01032e					EvaluateString:
.01032e	20 01 02	jsr $010201			jsr 	Evaluate
.010331	90 01		bcc $010334			bcc 	ESType
.010333	60		rts				rts
.010334					ESType:
.010334	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010337	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01033f	78 70 65 63 74 65 64 00
.010347					EvaluateNextString:
.010347	20 04 03	jsr $010304			jsr 	EvaluateNext
.01034a	90 e8		bcc $010334			bcc 	ESType
.01034c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01034d					VariableAccessExpression:
.01034d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01034f	48		pha				pha
.010350	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find the variables
.010353	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010355	90 31		bcc $010388			bcc 	_VANError 					; not found, so report an error.
.010357	68		pla				pla 								; get and save that first token
.010358	48		pha				pha 								; we use it for typing.
.010359	a8		tay				tay 								; put first token in Y.
.01035a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01035d	f0 07		beq $010366			beq 	_VANNotArray
.01035f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010361	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.010364	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010366					_VANNotArray:
.010366	68		pla				pla 								; get the token back.
.010367	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01036a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01036d	f0 0a		beq $010379			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036f	18		clc				clc 								; returning a number, read high data word
.010370	a0 02 00	ldy #$0002			ldy 	#2
.010373	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010375	a8		tay				tay 								; put A into Y (this is the high byte)
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010378	60		rts				rts
.010379					_VANIsString:
.010379	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.01037c	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.01037e	d0 06		bne $010386			bne 	_VANNotEmptyString
.010380	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.010383	18		clc				clc 								; which is always maintained.
.010384	65 02		adc $02				adc 	DBaseAddress
.010386					_VANNotEmptyString:
.010386	38		sec				sec
.010387	60		rts				rts
.010388					_VANError:
.010388	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01038b	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010393	20 75 6e 6b 6e 6f 77 6e 00
.01039c					VariableFind:
.01039c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01039e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a1	90 5c		bcc $0103ff			bcc 	_VFError
.0103a3	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a6	b0 11		bcs $0103b9			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a8	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103ab	3a		dec a				dec 	a 							; now 0-25
.0103ac	0a		asl a				asl 	a 							; x 4 and clear carry
.0103ad	0a		asl a				asl 	a
.0103ae	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b1	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b3	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103b5	e6 06		inc $06				inc 	DCodePtr
.0103b7	38		sec				sec 								; return with carry set.
.0103b8	60		rts				rts
.0103b9					_VFSlowVariable:
.0103b9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103bb	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103be	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103bf	0a		asl a				asl 	a 							; 32 bytes (16 x 2 byteentries) per table, also clc
.0103c0	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c3	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103c5	85 08		sta $08				sta 	DTemp1 						; so this is the base of the hash table for the type
.0103c7	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c9	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value, very simple but okay I think.
.0103cc	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103cd	65 08		adc $08				adc 	DTemp1 						; add to the base hash table
.0103cf	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d3					_VFNext:
.0103d3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103d5	f0 26		beq $0103fd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d9	a8		tay				tay 								; read the address of the name at $0002,y
.0103da	b9 02 00	lda $0002,y			lda 	$0002,y
.0103dd	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103df	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens, we can do it in words
.0103e2					_VFCompare:
.0103e2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103e4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e6	d0 eb		bne $0103d3			bne 	_VFNext 					; if not, go to the next one.
.0103e8	c8		iny				iny 								; advance token pointer
.0103e9	c8		iny				iny
.0103ea	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103ed	d0 f3		bne $0103e2			bne 	_VFCompare
.0103ef	98		tya				tya 								; this is the length of the word.
.0103f0	18		clc				clc 								; so we add it to the code pointer
.0103f1	65 06		adc $06				adc 	DCodePtr
.0103f3	85 06		sta $06				sta 	DCodePtr 					; now points to the token after the identifier.
.0103f5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f7	18		clc				clc 								; four on is the actual data
.0103f8	69 04 00	adc #$0004			adc 	#4 							; or it's the reference for the data for arrays.
.0103fb	38		sec				sec 								; return with CS indicating success
.0103fc	60		rts				rts
.0103fd					_VFFail:
.0103fd	18		clc				clc
.0103fe	60		rts				rts
.0103ff					_VFError:
.0103ff	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010402	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01040a	76 61 72 69 61 62 6c 65 00
.010413					VariableSubscript:
.010413	5a		phy				phy 								; save Y
.010414	a8		tay				tay 								; put the link pointer into Y
.010415	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link, this is the array data block.
.010418	48		pha				pha		 							; save array data block address on stack.
.010419	20 28 03	jsr $010328			jsr		EvaluateNextInteger 		; get the subscript
.01041c	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; skip right bracket.
.01041f	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010422	d0 14		bne $010438			bne 	_VANSubscript
.010424	7a		ply				ply 								; start of array memory block.
.010425	d9 00 00	cmp $0000,y			cmp 	$0000,y						; the max index is at the start, so check against that.
.010428	f0 02		beq $01042c			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01042a	b0 0c		bcs $010438			bcs 	_VANSubscript
.01042c					_VANSubOkay:
.01042c	0a		asl a				asl 	a 							; double lsword
.01042d	0a		asl a				asl 	a 							; and again, also clears carry.
.01042e	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010430	98		tya				tya 								; restore the address of the array memory block.
.010431	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010432	1a		inc a				inc 	a
.010433	18		clc				clc
.010434	65 08		adc $08				adc 	DTemp1 						; add the subscript x 4
.010436	7a		ply				ply 								; restore Y
.010437	60		rts				rts
.010438					_VANSubscript:
.010438	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01043b	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010443	79 20 53 75 62 73 63 72 69 70 74 00
.01044f					VariableCreate:
.01044f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010452	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010454	48		pha				pha 								; save it
.010455	18		clc				clc
.010456	69 08 00	adc #$0008			adc 	#8
.010459	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01045b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; check allocation.
.01045e	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.010460	b0 38		bcs $01049a			bcs 	_VCOutOfMemory
.010462	7a		ply				ply 								; restore new variable address to Y.
.010463	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.010466	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4..+7 is zeroed.
.010469	99 06 00	sta $0006,y			sta 	$0006,y
.01046c	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01046e	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010471	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010474	18		clc				clc 								; in DTemp1.
.010475	65 02		adc $02				adc 	DBaseAddress
.010477	85 08		sta $08				sta 	DTemp1
.010479	a5 06		lda $06				lda 	DCodePtr 					; get the address of the token.
.01047b	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.01047d	b0 03		bcs $010482			bcs 	_VCDontClone 				; because the variable being created has its identifier
.01047f	20 9d 04	jsr $01049d			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010482					_VCDontClone:
.010482	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010485	98		tya				tya 								; update the head link
.010486	92 20		sta ($20)			sta 	(DHashTablePtr)
.010488	18		clc				clc 								; advance pointer to the data part.
.010489	69 04 00	adc #$0004			adc 	#4
.01048c	48		pha				pha 								; save on stack.
.01048d					_VCSkipToken:
.01048d	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01048f	e6 06		inc $06				inc 	DCodePtr
.010491	e6 06		inc $06				inc 	DCodePtr
.010493	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010496	d0 f5		bne $01048d			bne 	_VCSkipToken
.010498	68		pla				pla 								; restore data address
.010499	60		rts				rts 								; and done.
.01049a					_VCOutOfMemory:
.01049a	82 30 01	brl $0105cd			brl 	OutOfMemoryError
.01049d					VCCloneIdentifier:
.01049d	da		phx				phx 								; save XY
.01049e	5a		phy				phy
.01049f	aa		tax				tax 								; identifier address in Y.
.0104a0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a5	48		pha				pha
.0104a6					_VCCloneLoop:
.0104a6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ab	48		pha				pha 								; save on stack
.0104ac	1a		inc a				inc 	a 							; space for one token.
.0104ad	1a		inc a				inc 	a
.0104ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b0	7a		ply				ply 								; address of word in Y
.0104b1	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b4	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b7	e8		inx				inx 								; advance the token pointer
.0104b8	e8		inx				inx
.0104b9	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104bc	d0 e8		bne $0104a6			bne 	_VCCloneLoop
.0104be	68		pla				pla 								; restore start address
.0104bf	7a		ply				ply 								; and the others
.0104c0	fa		plx				plx
.0104c1	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/editline.asm

.0104c2					LineDelete:
.0104c2	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c3	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c5	18		clc				clc
.0104c6	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c9	a8		tay				tay
.0104ca					_LDLoop:
.0104ca	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104cd	f0 2d		beq $0104fc			beq 	_LDExit						; exit if zero ; line does not exist
.0104cf	8a		txa				txa 								; found a match
.0104d0	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d3	f0 08		beq $0104dd			beq		_LDFound
.0104d5	98		tya				tya 								; follow the link.
.0104d6	18		clc				clc
.0104d7	79 00 00	adc $0000,y			adc 	$0000,y
.0104da	a8		tay				tay
.0104db	80 ed		bra $0104ca			bra 	_LDLoop
.0104dd					_LDFound:
.0104dd	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104df	98		tya				tya 								; follow link to next.
.0104e0	18		clc				clc
.0104e1	79 00 00	adc $0000,y			adc 	$0000,y
.0104e4	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e6	20 d4 1b	jsr $011bd4			jsr 	FindCodeEnd 				; find the end of the code.
.0104e9	38		sec				sec
.0104ea	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104ec	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104ed	1a		inc a				inc 	a
.0104ee	aa		tax				tax
.0104ef	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104f2	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f4	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f6	c8		iny				iny
.0104f7	c8		iny				iny
.0104f8	ca		dex				dex
.0104f9	ca		dex				dex
.0104fa	d0 f6		bne $0104f2			bne 	_LDCopy
.0104fc					_LDExit:
.0104fc	60		rts				rts
.0104fd					LineInsert:
.0104fd	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104ff	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010501	a0 00 00	ldy #$0000			ldy 	#0
.010504					_LIFindLength:
.010504	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010506	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010509	f0 10		beq $01051b			beq 	_LIFindEnd
.01050b	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050e	90 04		bcc $010514			bcc 	_LIQString
.010510	c8		iny				iny 								; otherwise just skip it.
.010511	c8		iny				iny
.010512	80 f0		bra $010504			bra 	_LIFindLength
.010514					_LIQString:
.010514	98		tya				tya 								; skip quoted strings
.010515	18		clc				clc
.010516	71 08		adc ($08),y			adc 	(DTemp1),y
.010518	a8		tay				tay
.010519	80 e9		bra $010504			bra 	_LIFindLength
.01051b					_LIFindEnd:
.01051b	98		tya				tya 								; the tokens in the line
.01051c	18		clc				clc
.01051d	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010520	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010522	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010525	18		clc				clc
.010526	65 02		adc $02				adc 	DBaseAddress
.010528	a8		tay				tay
.010529					_LIFindInsertPoint:
.010529	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01052c	f0 0f		beq $01053d			beq		_LIFoundInsertPoint
.01052e	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010531	c5 0c		cmp $0c				cmp 	DTemp2
.010533	b0 08		bcs $01053d			bcs 	_LIFoundInsertPoint
.010535	98		tya				tya 								; if < go to the next line.
.010536	18		clc				clc
.010537	79 00 00	adc $0000,y			adc 	$0000,y
.01053a	a8		tay				tay
.01053b	80 ec		bra $010529			bra 	_LIFindInsertPoint
.01053d					_LIFoundInsertPoint:
.01053d	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053f	20 d4 1b	jsr $011bd4			jsr 	FindCodeEnd 				; get the end of the code.
.010542	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010544	18		clc				clc
.010545	65 24		adc $24				adc 	DTemp3
.010547	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010549					_LICopyMove:
.010549	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01054b	92 34		sta ($34)			sta 	(DTemp4+2)
.01054d	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054f	c5 36		cmp $36				cmp 	DTemp5
.010551	f0 0a		beq $01055d			beq 	_LICopyMoveOver
.010553	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010555	c6 32		dec $32				dec 	DTemp4
.010557	c6 34		dec $34				dec 	DTemp4+2
.010559	c6 34		dec $34				dec 	DTemp4+2
.01055b	80 ec		bra $010549			bra 	_LICopyMove
.01055d					_LICopyMoveOver:
.01055d	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055f	92 36		sta ($36)			sta 	(DTemp5)
.010561	a0 02 00	ldy #$0002			ldy 	#2
.010564	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010566	91 36		sta ($36),y			sta 	(DTemp5),y
.010568	a0 04 00	ldy #$0004			ldy 	#4
.01056b					_LICopyTokens:
.01056b	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056d	91 36		sta ($36),y			sta 	(DTemp5),y
.01056f	c8		iny				iny
.010570	c8		iny				iny
.010571	e6 08		inc $08				inc 	DTemp1
.010573	e6 08		inc $08				inc 	DTemp1
.010575	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010577	c6 24		dec $24				dec 	DTemp3
.010579	a5 24		lda $24				lda 	DTemp3
.01057b	c9 04 00	cmp #$0004			cmp 	#4
.01057e	d0 eb		bne $01056b			bne 	_LICopyTokens
.010580	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010581					ErrorHandler:
.010581	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010583	fa		plx				plx 								; address of error message -1
.010584	e8		inx				inx 								; error message.
.010585	20 3a 06	jsr $01063a			jsr 	PrintROMMessage 			; print message in ROM
.010588	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01058a	f0 15		beq $0105a1			beq 	_EHEndMessage
.01058c	a2 a7 05	ldx #$05a7			ldx 	#_EHAt & $FFFF 				; print " at "
.01058f	20 3a 06	jsr $01063a			jsr 	PrintROMMessage
.010592	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010594	a0 00 00	ldy #$0000			ldy 	#0
.010597	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01059a	20 c6 10	jsr $0110c6			jsr 	ConvertToString 			; convert and print it.
.01059d	a8		tay				tay
.01059e	20 58 06	jsr $010658			jsr 	PrintBASICString
.0105a1					_EHEndMessage:
.0105a1	20 e5 1d	jsr $011de5			jsr 	HWNewLine
.0105a4	4c e9 1e	jmp $011ee9			jmp 	NextCommand 				; get next command.
>0105a7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105ac					IllegalToken:
.0105ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105af	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b7	54 6f 6b 65 6e 00
.0105bd					SyntaxError:
.0105bd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105c0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c8	72 72 6f 72 00
.0105cd					OutOfMemoryError:
.0105cd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105d0	4f 75 74 20 6f 66 20 6d				.text 	"Out of memory",$00 								; with this message
>0105d8	65 6d 6f 72 79 00
.0105de					ExpectToken:
.0105de	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105e0	d0 05		bne $0105e7			bne 	_CTKError					; error if not
.0105e2	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105e4	e6 06		inc $06				inc 	DCodePtr
.0105e6	60		rts				rts
.0105e7					_CTKError:
.0105e7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105ea	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105f2	74 6f 6b 65 6e 00
.0105f8					ExpectRightBracket:
.0105f8	48		pha				pha
.0105f9	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105fc	20 de 05	jsr $0105de			jsr 	ExpectToken
.0105ff	68		pla				pla
.010600	60		rts				rts
.010601					ExpectComma:
.010601	48		pha				pha
.010602	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010605	20 de 05	jsr $0105de			jsr 	ExpectToken
.010608	68		pla				pla
.010609	60		rts				rts
.01060a					CheckBothNumeric:
.01060a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01060c	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01060e	30 01		bmi $010611			bmi 	_CBNFail 					; need to both be zero in bit 15
.010610	60		rts				rts
.010611					_CBNFail:
.010611	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010614	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01061c	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.01062a					ResetTypeInteger:
.01062a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01062c	29 ff 7f	and #$7fff			and 	#$7FFF
.01062f	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010631	60		rts				rts
.010632					ResetTypeString:
.010632	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010634	09 00 80	ora #$8000			ora 	#$8000
.010637	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010639	60		rts				rts
.01063a					PrintROMMessage:
.01063a	48		pha				pha
.01063b	da		phx				phx
.01063c					_PRMLoop:
.01063c	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010640	29 ff 00	and #$00ff			and 	#$00FF
.010643	f0 10		beq $010655			beq 	_PRMExit
.010645	c9 0d 00	cmp #$000d			cmp 	#13
.010648	d0 05		bne $01064f			bne 	_PRMChar
.01064a	20 e5 1d	jsr $011de5			jsr 	HWNewLine
.01064d	80 03		bra $010652			bra 	_PRMNext
.01064f					_PRMChar:
.01064f	20 94 1d	jsr $011d94			jsr 	HWPrintChar
.010652					_PRMNext:
.010652	e8		inx				inx
.010653	80 e7		bra $01063c			bra 	_PRMLoop
.010655					_PRMExit:
.010655	fa		plx				plx
.010656	68		pla				pla
.010657	60		rts				rts
.010658					PrintBASICString:
.010658	48		pha				pha
.010659	da		phx				phx
.01065a	5a		phy				phy
.01065b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01065e	29 ff 00	and #$00ff			and 	#$00FF
.010661	f0 0b		beq $01066e			beq 	_PBSExit 					; null string
.010663	aa		tax				tax
.010664					_PBSLoop:
.010664	c8		iny				iny
.010665	b9 00 00	lda $0000,y			lda 	$0000,y
.010668	20 94 1d	jsr $011d94			jsr 	HWPrintChar
.01066b	ca		dex				dex
.01066c	d0 f6		bne $010664			bne 	_PBSLoop
.01066e					_PBSExit:
.01066e	7a		ply				ply
.01066f	fa		plx				plx
.010670	68		pla				pla
.010671	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringconcrete.asm

.010672					StringResetPermanent:
.010672	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010674	a8		tay				tay
.010675	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.010678	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01067a	60		rts				rts
.01067b					StringAssign:
.01067b	da		phx				phx 								; save X
.01067c	aa		tax				tax 								; new string address to X.
.01067d	b9 00 00	lda $0000,y			lda 	$0000,y 					; does the string pointer we replace have an address yet.
.010680	f0 49		beq $0106cb			beq 	_SAAllocate 				; if not , allocate space for it and copy the string.
.010682	5a		phy				phy
.010683	b9 00 00	lda $0000,y			lda 	$0000,y 					; compare calculate saved address - high memory pointer
.010686	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010689	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.01068b	7a		ply				ply
.01068c	90 3d		bcc $0106cb			bcc 	_SAAllocate					; if < high memory pointer, first allocation.
.01068e	5a		phy				phy
.01068f	b9 00 00	lda $0000,y			lda 	$0000,y 					; address of the string
.010692	a8		tay				tay
.010693	88		dey				dey 								; point to the max length of the old string.
.010694	b9 00 00	lda $0000,y			lda 	$0000,y 					; length of string
.010697	7a		ply				ply
.010698	29 ff 00	and #$00ff			and 	#$00FF 						; max length of old string
.01069b	e2 20		sep #$20			sep 	#$20
.01069d	dd 00 00	cmp $0000,x			cmp 	@w$0000,x 					; compare against length of new string
.0106a0	c2 20		rep #$20			rep 	#$20
.0106a2	b0 5a		bcs $0106fe			bcs 	_SACopyString 				; just copy it in if old max length >= new
.0106a4	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the address of the string.
.0106a7	3a		dec a				dec 	a 							; if bottom, compare the previous byte address
.0106a8	5a		phy				phy 								; which is the max length.
.0106a9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106ac	51 02		eor ($02),y			eor 	(DBaseAddress),y
.0106ae	7a		ply				ply
.0106af	09 00 00	ora #$0000			ora 	#$0000 						; if not, then allocate memory.
.0106b2	d0 17		bne $0106cb			bne 	_SAAllocate
.0106b4	5a		phy				phy
.0106b5	b9 00 00	lda $0000,y			lda 	$0000,y 					; address of old string
.0106b8	a8		tay				tay 								; to Y
.0106b9	88		dey				dey 								; get maximum length.
.0106ba	b9 00 00	lda $0000,y			lda 	$0000,y
.0106bd	29 ff 00	and #$00ff			and 	#$00FF
.0106c0	1a		inc a				inc 	a 							; add 2 (string,max)
.0106c1	1a		inc a				inc 	a
.0106c2	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; return memory back
.0106c5	18		clc				clc
.0106c6	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106c8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106ca	7a		ply				ply
.0106cb					_SAAllocate:
.0106cb	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get the length of the string
.0106ce	29 ff 00	and #$00ff			and 	#$00FF
.0106d1	18		clc				clc
.0106d2	69 08 00	adc #$0008			adc 	#8 							; allocate extra space if needed.
.0106d5	c9 ff 00	cmp #$00ff			cmp 	#255 						; can't be larger than this.
.0106d8	90 03		bcc $0106dd			bcc 	_SASizeOkay
.0106da	a9 ff 00	lda #$00ff			lda 	#255
.0106dd					_SASizeOkay:
.0106dd	5a		phy				phy 								; push [string] on the stack.
.0106de	48		pha				pha 								; push largest string size on the stack.
.0106df	1a		inc a				inc 	a  							; one more for the string size byte
.0106e0	1a		inc a				inc 	a 							; one more for the maximum size byte
.0106e1	49 ff ff	eor #$ffff			eor 	#$FFFF 						; subtract from the high memory pointer
.0106e4	38		sec				sec
.0106e5	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106e8	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106ea	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106ec	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; out of memory ? - if below the lowmemorypointer
.0106ef	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.0106f1	90 29		bcc $01071c			bcc 	_SAMemory
.0106f3	a8		tay				tay 								; address of start of space in Y.
.0106f4	68		pla				pla 								; restore largest string size and save it
.0106f5	99 00 00	sta $0000,y			sta 	@w$0000,y 					; doesn't matter it's a word.
.0106f8	c8		iny				iny 								; Y now points to the first byte of the string we'll copy
.0106f9	98		tya				tya 								; in A now
.0106fa	7a		ply				ply 								; Y is the address of the variable pointer.
.0106fb	99 00 00	sta $0000,y			sta 	@w$0000,y 					; make that pointer the first byte
.0106fe					_SACopyString
.0106fe	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get length
.010701	29 ff 00	and #$00ff			and 	#$00FF
.010704	85 08		sta $08				sta 	DTemp1 						; save it.
.010706	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; Y now contains the actual address of the string
.010709	a8		tay				tay
.01070a					_SACopyStringLoop:
.01070a	e2 20		sep #$20			sep 	#$20
.01070c	bd 00 00	lda $0000,x			lda 	@w$0000,x
.01070f	99 00 00	sta $0000,y			sta 	@w$0000,y
.010712	c2 20		rep #$20			rep 	#$20
.010714	e8		inx				inx
.010715	c8		iny				iny
.010716	c6 08		dec $08				dec 	DTemp1
.010718	10 f0		bpl $01070a			bpl 	_SACopyStringLoop
.01071a	fa		plx				plx 								; restore X
.01071b	60		rts				rts
.01071c					_SAMemory:
.01071c	82 ae fe	brl $0105cd			brl 	OutOfMemoryError

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringtemp.asm

.01071f					StringTempAllocate:
.01071f	48		pha				pha
.010720	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ? we do this by zeroing this
.010722	d0 0d		bne $010731			bne 	_STANoReset 				; string pointer.
.010724	5a		phy				phy 								; reset the temp string pointer.
.010725	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; this is at high memory - 256, so we can
.010728	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; create permanent strings if needed.
.01072a	38		sec				sec
.01072b	e9 00 01	sbc #$0100			sbc 	#256
.01072e	85 16		sta $16				sta 	DTempStringPointer
.010730	7a		ply				ply
.010731					_STANoReset:
.010731	68		pla				pla 								; get length.
.010732	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010735	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010738	18		clc				clc 								; this adds one, for the length.
.010739	65 16		adc $16				adc 	DTempStringPointer
.01073b	85 16		sta $16				sta 	DTempStringPointer
.01073d	48		pha				pha 								; save start address
.01073e	a9 00 00	lda #$0000			lda 	#$0000
.010741	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010743	92 16		sta ($16)			sta		(DTempStringPointer)
.010745	c2 20		rep #$20			rep 	#$20
.010747	68		pla				pla 								; restore start address
.010748	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01074a	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01074c	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01074e	60		rts				rts
.01074f					StringWriteCharacter:
.01074f	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010751	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010753	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010755	1a		inc a				inc 	a
.010756	92 18		sta ($18)			sta 	(DStartTempString)
.010758	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01075a	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01075c	60		rts				rts
.01075d					StringCreateCopy:
.01075d	a8		tay				tay 								; put pointer to string in Y
.01075e	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010761	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010764	f0 17		beq $01077d			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010766	da		phx				phx 								; save X and put the character count in X
.010767	aa		tax				tax
.010768					_SCCCopy:
.010768	c8		iny				iny 								; advance and read (first time skips length)
.010769	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01076b	b9 00 00	lda $0000,y			lda 	$0000,y
.01076e	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010770	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010772	1a		inc a				inc 	a
.010773	92 18		sta ($18)			sta 	(DStartTempString)
.010775	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010777	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010779	ca		dex				dex 								; do X times
.01077a	d0 ec		bne $010768			bne 	_SCCCopy
.01077c	fa		plx				plx
.01077d					_SCCExit:
.01077d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.01077e					Tokenise:
.01077e	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010780	84 0a		sty $0a				sty 	DTemp1+2
.010782	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010785	18		clc				clc
.010786	65 02		adc $02				adc 	DBaseAddress
.010788	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01078a	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.01078d	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.010790					_TOKCap:
.010790	c8		iny				iny 								; go to next
.010791	b7 08		lda [$08],y			lda 	[DTemp1],y
.010793	29 ff 00	and #$00ff			and 	#$00FF
.010796	f0 22		beq $0107ba			beq 	_TOKEndCap
.010798	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.01079b	d0 01		bne $01079e			bne 	_TOKNotQuote
.01079d	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.01079e					_TOKNotQuote:
.01079e	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107a1	90 ed		bcc $010790			bcc 	_TOKCap
.0107a3	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107a6	b0 e8		bcs $010790			bcs 	_TOKCap
.0107a8	8a		txa				txa 								; check if in quotes
.0107a9	4a		lsr a				lsr 	a
.0107aa	b0 e4		bcs $010790			bcs 	_TOKCap
.0107ac	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107ae	38		sec				sec
.0107af	e9 20 00	sbc #$0020			sbc 	#32
.0107b2	e2 20		sep #$20			sep 	#$20
.0107b4	97 08		sta [$08],y			sta 	[DTemp1],y
.0107b6	c2 20		rep #$20			rep 	#$20
.0107b8	80 d6		bra $010790			bra 	_TOKCap
.0107ba					_TOKEndCap:
.0107ba	c6 08		dec $08				dec 	DTemp1
.0107bc					_TOKMainNext:
.0107bc	e6 08		inc $08				inc 	DTemp1
.0107be					_TOKMainLoop:
.0107be	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107c0	29 ff 00	and #$00ff			and 	#$00FF
.0107c3	c9 20 00	cmp #$0020			cmp 	#32
.0107c6	90 1d		bcc $0107e5			bcc 	_TOKExit 					; 0-31 exit.
.0107c8	f0 f2		beq $0107bc			beq 	_TOKMainNext 				; 32 (space) skip.
.0107ca	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107cd	f0 1d		beq $0107ec			beq 	_TOKString
.0107cf	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107d2	90 1d		bcc $0107f1			bcc 	_TOKPunctuation
.0107d4	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107d7	90 42		bcc $01081b			bcc 	_TOKNumber
.0107d9	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107dc	90 13		bcc $0107f1			bcc 	_TOKPunctuation
.0107de	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107e1	90 3d		bcc $010820			bcc 	_TOKIdentifier
.0107e3	80 0c		bra $0107f1			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107e5					_TOKExit:
.0107e5	a9 00 00	lda #$0000			lda 	#$0000
.0107e8	20 25 08	jsr $010825			jsr 	TOKWriteToken
.0107eb	60		rts				rts
.0107ec					_TOKString:
.0107ec	20 c3 08	jsr $0108c3			jsr 	TOKQuotedString
.0107ef	80 cd		bra $0107be			bra 	_TOKMainLoop
.0107f1					_TOKPunctuation:
.0107f1	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.0107f4	20 2a 09	jsr $01092a			jsr 	TOKKeywordSearch
.0107f7	b0 1d		bcs $010816			bcs 	_TOKFoundPunctuation
.0107f9	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.0107fc	20 2a 09	jsr $01092a			jsr 	TOKKeywordSearch
.0107ff	b0 15		bcs $010816			bcs 	_TOKFoundPunctuation
.010801	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010804	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01080c	61 72 73 65 20 6c 69 6e 65 00
.010816					_TOKFoundPunctuation:
.010816	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; output the token and go round again.
.010819	80 a3		bra $0107be			bra 	_TOKMainLoop
.01081b					_TOKNumber:
.01081b	20 44 08	jsr $010844			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01081e	80 9e		bra $0107be			bra 	_TOKMainLoop
.010820					_TOKIdentifier:
.010820	20 85 09	jsr $010985			jsr 	TOKIdentifier
.010823	80 99		bra $0107be			bra 	_TOKMainLoop
.010825					TOKWriteToken:
.010825	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010827	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010829	e6 0c		inc $0c				inc 	DTemp2
.01082b	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01082d	29 ff 00	and #$00ff			and 	#$00FF
.010830	f0 01		beq $010833			beq 	_TOKWriteOverflow
.010832	60		rts				rts
.010833					_TOKWriteOverflow:
.010833	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010836	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01083e	20 6c 6f 6e 67 00
.010844					TOKInteger:
.010844	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010846	64 26		stz $26				stz 	DTemp3+2
.010848					_TOKINLoop:
.010848	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01084a	48		pha				pha
.01084b	a5 24		lda $24				lda 	DTemp3
.01084d	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01084f	26 26		rol $26				rol 	DTemp3+2
.010851	06 24		asl $24				asl 	DTemp3
.010853	26 26		rol $26				rol 	DTemp3+2
.010855	18		clc				clc
.010856	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010858	85 24		sta $24				sta 	DTemp3
.01085a	68		pla				pla
.01085b	65 26		adc $26				adc 	DTemp3+2
.01085d	85 26		sta $26				sta 	DTemp3+2
.01085f	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010861	26 26		rol $26				rol 	DTemp3+2
.010863	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010865	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010868	d0 44		bne $0108ae			bne 	_TOKINSize
.01086a	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01086c	29 0f 00	and #$000f			and 	#15
.01086f	18		clc				clc
.010870	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010872	85 24		sta $24				sta 	DTemp3
.010874	90 02		bcc $010878			bcc 	_TOKINNoCarry
.010876	e6 26		inc $26				inc 	DTemp3+2
.010878					_TOKINNoCarry:
.010878	e6 08		inc $08				inc 	DTemp1 						; look at next
.01087a	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01087c	29 ff 00	and #$00ff			and 	#$00FF
.01087f	c9 30 00	cmp #$0030			cmp 	#"0"
.010882	90 05		bcc $010889			bcc 	_TOKINGotInteger
.010884	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010887	90 bf		bcc $010848			bcc		_TOKINLoop
.010889					_TOKINGotInteger:
.010889	a5 24		lda $24				lda 	DTemp3 						; lower word
.01088b	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.01088e	18		clc				clc
.01088f	69 00 40	adc #$4000			adc 	#$4000
.010892	48		pha				pha 								; save it.
.010893	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.010895	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.010897	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.010899	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.01089c	b0 10		bcs $0108ae			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.01089e	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108a1	f0 06		beq $0108a9			beq 	_TOKINNoShift 				; don't need constant shift.
.0108a3	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108a6	20 25 08	jsr $010825			jsr 	TOKWriteToken
.0108a9					_TOKINNoShift:
.0108a9	68		pla				pla 								; get lower its token
.0108aa	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; output it
.0108ad	60		rts				rts
.0108ae					_TOKINSize:
.0108ae	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0108b1	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108b9	74 6f 6f 20 6c 61 72 67 65 00
.0108c3					TOKQuotedString:
.0108c3	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108c5	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108c7	85 32		sta $32				sta 	DTemp4
.0108c9	a5 0a		lda $0a				lda 	DTemp1+2
.0108cb	85 34		sta $34				sta 	DTemp4+2
.0108cd					_TOKQFindSize:
.0108cd	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108cf	e6 08		inc $08				inc 	DTemp1
.0108d1	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108d4	f0 3b		beq $010911			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108d6	c9 22 00	cmp #$0022			cmp 	#34
.0108d9	d0 f2		bne $0108cd			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108db	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108dd	38		sec				sec
.0108de	e5 32		sbc $32				sbc 	DTemp4
.0108e0	3a		dec a				dec 	a 							; one less character for closing quote
.0108e1	85 26		sta $26				sta 	DTemp3+2
.0108e3	18		clc				clc
.0108e4	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108e7	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108ea	20 25 08	jsr $010825			jsr 	TOKWriteToken
.0108ed	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.0108ef	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108f2	c6 0c		dec $0c				dec 	DTemp2
.0108f4	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.0108f6	f0 0f		beq $010907			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.0108f8					_TOKQWriteString:
.0108f8	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.0108fa	29 ff 00	and #$00ff			and 	#$00FF
.0108fd	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; effectively a byte-write.
.010900	c6 0c		dec $0c				dec 	DTemp2
.010902	e6 32		inc $32				inc 	DTemp4 						; advance character
.010904	ca		dex				dex 								; do X times
.010905	d0 f1		bne $0108f8			bne 	_TOKQWriteString
.010907					_TOKQWriteEnd:
.010907	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010909	29 01 00	and #$0001			and 	#1
.01090c	f0 02		beq $010910			beq 	_TOKQExit
.01090e	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010910					_TOKQExit:
.010910	60		rts				rts
.010911					_TOQImbalance:
.010911	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010914	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01091c	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01092a					TOKKeywordSearch:
.01092a	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01092c	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01092f	85 34		sta $34				sta 	DTemp4+2
.010931	a2 00 00	ldx #$0000			ldx 	#0
.010934					_TOKScan:
.010934	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; read the first byte
.010938	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01093b	f0 46		beq $010983			beq 	_TOKFail 					; if zero then we have failed.
.01093d	3a		dec a				dec 	a 							; -1 gives the length.
.01093e	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010940	d0 2f		bne $010971			bne 	_TOKNext 					; no, then skip to next token.
.010942	da		phx				phx 								; save X
.010943	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010946					_TOKCompare:
.010946	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010948	5f 9f 00 01	eor $01009f,x			eor 	TokenText+1,x
.01094c	29 ff 00	and #$00ff			and 	#$00FF
.01094f	d0 1f		bne $010970			bne 	_TOKPopNext 				; if different, pop and goto next.
.010951	e8		inx				inx 								; bump X and Y.
.010952	c8		iny				iny
.010953	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010955	d0 ef		bne $010946			bne 	_TOKCompare
.010957	98		tya				tya 								; add length to the text pointer
.010958	18		clc				clc
.010959	65 08		adc $08				adc 	DTemp1
.01095b	85 08		sta $08				sta 	DTemp1
.01095d	fa		plx				plx 								; restore X.
.01095e	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the type/token bit.
.010962	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010965	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010966	4a		lsr a				lsr		a
.010967	4a		lsr a				lsr 	a
.010968	eb		xba				xba
.010969	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01096b	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01096e	38		sec				sec
.01096f	60		rts				rts
.010970					_TOKPopNext:
.010970	fa		plx				plx 								; restore X.
.010971					_TOKNext:
.010971	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the token skip again.
.010975	29 0f 00	and #$000f			and 	#$000F
.010978	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01097a	8a		txa				txa
.01097b	18		clc				clc
.01097c	65 14		adc $14				adc 	DSignCount
.01097e	aa		tax				tax
.01097f	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010981	80 b1		bra $010934			bra 	_TOKScan
.010983					_TOKFail:
.010983	18		clc				clc
.010984	60		rts				rts
.010985					TOKIdentifier:
.010985	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010987	85 24		sta $24				sta 	DTemp3
.010989					_TOKIFindLength:
.010989	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01098b	a7 08		lda [$08]			lda 	[DTemp1]
.01098d	29 ff 00	and #$00ff			and 	#$00FF
.010990	20 30 0a	jsr $010a30			jsr 	TOKIsIdentifierCharacter
.010993	b0 f4		bcs $010989			bcs 	_TOKIFindLength
.010995	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.010997	38		sec				sec
.010998	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.01099a	85 36		sta $36				sta 	DTemp5
.01099c	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.01099e	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109a1	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109a3	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109a5	29 ff 00	and #$00ff			and 	#$00FF
.0109a8	c9 24 00	cmp #$0024			cmp 	#"$"
.0109ab	d0 0b		bne $0109b8			bne 	_TOKINotString
.0109ad	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109af	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109b1	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109b3	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109b6	85 26		sta $26				sta 	DTemp3+2
.0109b8					_TOKINotString:
.0109b8	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109ba	29 ff 00	and #$00ff			and 	#$00FF
.0109bd	c9 28 00	cmp #$0028			cmp 	#"("
.0109c0	d0 0b		bne $0109cd			bne 	_TOKINotArray
.0109c2	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109c4	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109c6	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109c8	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109cb	85 26		sta $26				sta 	DTemp3+2
.0109cd					_TOKINotArray:
.0109cd	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109cf	85 08		sta $08				sta 	DTemp1
.0109d1	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109d3	20 2a 09	jsr $01092a			jsr 	TOKKeywordSearch
.0109d6	90 04		bcc $0109dc			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109d8	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109db	60		rts				rts
.0109dc					_TOKIIdentifier:
.0109dc	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109de	e6 08		inc $08				inc 	DTemp1
.0109e0	20 1c 0a	jsr $010a1c			jsr		_TOKIToConstant 			; convert to range 0-35
.0109e3	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109e5	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109e7	f0 1d		beq $010a06			beq 	_TOKINoSecond
.0109e9	48		pha				pha 								; save current on stack.
.0109ea	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109ec	e6 08		inc $08				inc 	DTemp1
.0109ee	20 1c 0a	jsr $010a1c			jsr		_TOKIToConstant 			; convert to range 0-35
.0109f1	85 14		sta $14				sta 	DSignCount 					; save it.
.0109f3	0a		asl a				asl 	a 							; x 4
.0109f4	0a		asl a				asl 	a
.0109f5	65 14		adc $14				adc 	DSignCount 					; x 5
.0109f7	0a		asl a				asl 	a 							; x 10
.0109f8	65 14		adc $14				adc 	DSignCount 					; x 11
.0109fa	0a		asl a				asl 	a 							; x 22
.0109fb	0a		asl a				asl 	a 							; x 44
.0109fc	65 14		adc $14				adc 	DSignCount 					; x 45
.0109fe	85 14		sta $14				sta 	DSignCount
.010a00	68		pla				pla 								; get old token and add x 45
.010a01	18		clc				clc
.010a02	65 14		adc $14				adc 	DSignCount
.010a04	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a06					_TOKINoSecond:
.010a06	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a08	f0 03		beq $010a0d			beq 	_TOKINotLast				; if yes
.010a0a	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a0d					_TOKINotLast:
.010a0d	20 25 08	jsr $010825			jsr 	TOKWriteToken 				; output the token
.010a10	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a12	d0 c8		bne $0109dc			bne 	_TOKIIdentifier
.010a14					_TOKIOut:
.010a14	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a16	18		clc				clc
.010a17	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a19	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a1b	60		rts				rts
.010a1c					_TOKIToConstant:
.010a1c	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a1f	c9 41 00	cmp #$0041			cmp 	#65
.010a22	90 04		bcc $010a28			bcc 	_TOKITInteger
.010a24	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a27	60		rts				rts
.010a28					_TOKITInteger:
.010a28	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a2b	18		clc				clc
.010a2c	69 1b 00	adc #$001b			adc 	#27
.010a2f	60		rts				rts
.010a30					TOKIsIdentifierCharacter:
.010a30	c9 30 00	cmp #$0030			cmp 	#"0"
.010a33	90 0f		bcc $010a44			bcc 	_TOKIIFail
.010a35	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a38	90 0c		bcc $010a46			bcc 	_TOKIIOk
.010a3a	c9 41 00	cmp #$0041			cmp 	#"A"
.010a3d	90 05		bcc $010a44			bcc 	_TOKIIFail
.010a3f	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a42	90 02		bcc $010a46			bcc 	_TOKIIOk
.010a44					_TOKIIFail:
.010a44	18		clc				clc
.010a45	60		rts				rts
.010a46					_TOKIIOk:
.010a46	38		sec				sec
.010a47	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010a48					Binary_Add:
.010a48	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a4a	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a4c	30 12		bmi $010a60		bmi 	_BATypeError
.010a4e	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a50	30 3f		bmi $010a91		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a52	18		clc			clc 										; add the results
.010a53	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a55	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a57	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a59	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a5b	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a5d	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a5f	60		rts			rts
.010a60					_BATypeError:
.010a60	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a63	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a6b	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a7b	65 73 00
.010a7e					_BALengthError:
.010a7e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a81	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a89	6f 6f 20 6c 6f 6e 67 00
.010a91					_BAConcatenateString:
.010a91	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a93	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a95	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a97	85 0c		sta $0c			sta 	DTemp2
.010a99	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a9b	18		clc			clc 										; work out the total length
.010a9c	b2 08		lda ($08)		lda 	(DTemp1)
.010a9e	72 0c		adc ($0c)		adc 	(DTemp2)
.010aa0	b0 14		bcs $010ab6		bcs 	_BAConcatLengthError 				; string is too long.
.010aa2	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010aa4	20 1f 07	jsr $01071f		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010aa7	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010aa9	74 20		stz $20,x		stz 	EXSValueH+0,x
.010aab	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010aad	20 5d 07	jsr $01075d		jsr 	StringCreateCopy
.010ab0	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010ab2	20 5d 07	jsr $01075d		jsr 	StringCreateCopy
.010ab5	60		rts			rts
.010ab6					_BAConcatLengthError:
.010ab6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010ab9	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ac1	6f 6f 20 6c 6f 6e 67 00
.010ac9					Binary_Subtract:
.010ac9	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010acc	38		sec			sec
.010acd	b5 00		lda $00,x		lda		EXSValueL+0,x
.010acf	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ad1	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ad3	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ad5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ad7	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ad9	60		rts			rts
.010ada					Binary_ShiftRight:
.010ada	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010add	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010adf	29 3f 00	and #$003f		and 	#63
.010ae2	f0 07		beq $010aeb		beq		_Binary_SRExit
.010ae4					_Binary_SRLoop:
.010ae4	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010ae6	76 00		ror $00,x		ror 	EXSValueL+0,x
.010ae8	3a		dec a			dec 	a
.010ae9	d0 f9		bne $010ae4		bne 	_Binary_SRLoop
.010aeb					_Binary_SRExit:
.010aeb	60		rts			rts
.010aec					Binary_ShiftLeft:
.010aec	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010aef	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010af1	29 3f 00	and #$003f		and 	#63
.010af4	f0 07		beq $010afd		beq		_Binary_SLExit
.010af6					_Binary_SLLoop:
.010af6	16 00		asl $00,x		asl 	EXSValueL+0,x
.010af8	36 20		rol $20,x		rol 	EXSValueH+0,x
.010afa	3a		dec a			dec 	a
.010afb	d0 f9		bne $010af6		bne 	_Binary_SLLoop
.010afd					_Binary_SLExit:
.010afd	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010afe					Binary_And:
.010afe	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010b01	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b03	35 02		and $02,x		and 	EXSValueL+2,x
.010b05	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b07	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b09	35 22		and $22,x		and 	EXSValueH+2,x
.010b0b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b0d	60		rts			rts
.010b0e					Binary_Or:
.010b0e	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010b11	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b13	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b15	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b17	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b19	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b1b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b1d	60		rts			rts
.010b1e					Binary_Xor:
.010b1e	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010b21	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b23	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b25	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b27	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b29	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b2b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b2d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010b2e					Binary_Equals:
.010b2e	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b31	b0 0e		bcs $010b41		bcs 	_BEString
.010b33	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b35	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b37	d0 4f		bne $010b88		bne 	Compare_Fail
.010b39	b5 20		lda $20,x		lda 	EXSValueH,x
.010b3b	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b3d	d0 49		bne $010b88		bne 	Compare_Fail
.010b3f	80 3f		bra $010b80		bra 	Compare_Succeed
.010b41					_BEString:
.010b41	09 00 00	ora #$0000		ora 	#$0000
.010b44	f0 3a		beq $010b80		beq 	Compare_Succeed
.010b46	80 40		bra $010b88		bra 	Compare_Fail
.010b48					Binary_NotEquals:
.010b48	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b4b	b0 0e		bcs $010b5b		bcs 	_BNEString
.010b4d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b4f	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b51	d0 2d		bne $010b80		bne 	Compare_Succeed
.010b53	b5 20		lda $20,x		lda 	EXSValueH,x
.010b55	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b57	d0 27		bne $010b80		bne 	Compare_Succeed
.010b59	80 2d		bra $010b88		bra 	Compare_Fail
.010b5b					_BNEString:
.010b5b	09 00 00	ora #$0000		ora 	#$0000
.010b5e	d0 20		bne $010b80		bne 	Compare_Succeed
.010b60	80 26		bra $010b88		bra 	Compare_Fail
.010b62					Binary_Less:
.010b62	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b65	b0 12		bcs $010b79		bcs 	_BLString
.010b67	38		sec			sec
.010b68	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b6a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b6c	b5 20		lda $20,x		lda 	EXSValueH,x
.010b6e	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b70	50 03		bvc $010b75		bvc 	*+5
.010b72	49 00 80	eor #$8000		eor 	#$8000
.010b75	30 09		bmi $010b80		bmi 	Compare_Succeed
.010b77	80 0f		bra $010b88		bra 	Compare_Fail
.010b79					_BLString:
.010b79	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b7c	f0 02		beq $010b80		beq 	Compare_Succeed
.010b7e	80 08		bra $010b88		bra 	Compare_Fail
.010b80					Compare_Succeed:
.010b80	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b83	95 00		sta $00,x		sta 	EXSValueL,x
.010b85	95 20		sta $20,x		sta 	EXSValueH,x
.010b87	60		rts			rts
.010b88					Compare_Fail:
.010b88	74 00		stz $00,x		stz 	EXSValueL,x
.010b8a	74 20		stz $20,x		stz 	EXSValueH,x
.010b8c	60		rts			rts
.010b8d					Binary_GreaterEqual:
.010b8d	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b90	b0 12		bcs $010ba4		bcs 	_BGEString
.010b92	38		sec			sec
.010b93	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b95	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b97	b5 20		lda $20,x		lda 	EXSValueH,x
.010b99	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b9b	50 03		bvc $010ba0		bvc 	*+5
.010b9d	49 00 80	eor #$8000		eor 	#$8000
.010ba0	10 de		bpl $010b80		bpl 	Compare_Succeed
.010ba2	80 e4		bra $010b88		bra 	Compare_Fail
.010ba4					_BGEString:
.010ba4	09 00 00	ora #$0000		ora 	#$0000
.010ba7	10 d7		bpl $010b80		bpl 	Compare_Succeed
.010ba9	80 dd		bra $010b88		bra 	Compare_Fail
.010bab					Binary_LessEqual:
.010bab	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bae	b0 12		bcs $010bc2		bcs 	_BLEString
.010bb0	18		clc			clc 									; numeric <= signed
.010bb1	b5 00		lda $00,x		lda 	EXSValueL,x
.010bb3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bb5	b5 20		lda $20,x		lda 	EXSValueH,x
.010bb7	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bb9	50 03		bvc $010bbe		bvc 	*+5
.010bbb	49 00 80	eor #$8000		eor 	#$8000
.010bbe	30 c0		bmi $010b80		bmi 	Compare_Succeed
.010bc0	80 c6		bra $010b88		bra 	Compare_Fail
.010bc2					_BLEString:
.010bc2	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bc5	d0 b9		bne $010b80		bne 	Compare_Succeed
.010bc7	80 bf		bra $010b88		bra 	Compare_Fail
.010bc9					Binary_Greater:
.010bc9	20 e7 0b	jsr $010be7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bcc	b0 12		bcs $010be0		bcs 	_BGString
.010bce	18		clc			clc 									; numeric > signed
.010bcf	b5 00		lda $00,x		lda 	EXSValueL,x
.010bd1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bd3	b5 20		lda $20,x		lda 	EXSValueH,x
.010bd5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bd7	50 03		bvc $010bdc		bvc 	*+5
.010bd9	49 00 80	eor #$8000		eor 	#$8000
.010bdc	10 a2		bpl $010b80		bpl 	Compare_Succeed
.010bde	80 a8		bra $010b88		bra 	Compare_Fail
.010be0					_BGString:
.010be0	c9 01 00	cmp #$0001		cmp 	#$0001
.010be3	f0 9b		beq $010b80		beq 	Compare_Succeed
.010be5	80 a1		bra $010b88		bra 	Compare_Fail
.010be7					CompareTypeCheck:
.010be7	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010be9	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010beb	30 06		bmi $010bf3		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010bed	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010bef	30 1c		bmi $010c0d		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010bf1	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010bf2	60		rts			rts
.010bf3					_CTCFail:
.010bf3	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010bf6	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010bfe	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c0d					_CTCStringCompare:
.010c0d	20 2a 06	jsr $01062a		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c10	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c12	85 08		sta $08			sta 	DTemp1
.010c14	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c16	85 0c		sta $0c			sta 	DTemp2
.010c18	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c1b	a8		tay			tay
.010c1c	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c1e	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c20	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c22	90 02		bcc $010c26		bcc 	_CTCSmallest
.010c24	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c26					_CTCSmallest:
.010c26	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c28					_CTCCompare:
.010c28	c8		iny			iny 									; look at next character (done first, first char is size)
.010c29	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c2b	30 16		bmi $010c43		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c2d	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c2f	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c31	f0 f5		beq $010c28		beq 	_CTCCompare 					; if zero, try the next character.
.010c33	b0 07		bcs $010c3c		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c35					_CTCLess:
.010c35	c2 20		rep #$20		rep 	#$20
.010c37	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c3a	80 14		bra $010c50		bra 	_CTCExit
.010c3c					_CTCGreater:
.010c3c	c2 20		rep #$20		rep 	#$20
.010c3e	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c41	80 0d		bra $010c50		bra 	_CTCExit
.010c43					_CTCEqualSoFar:
.010c43	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c45	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c47	90 ec		bcc $010c35		bcc 	_CTCLess
.010c49	d0 f1		bne $010c3c		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c4b	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c4d	a9 00 00	lda #$0000		lda 	#$0000
.010c50					_CTCExit:
.010c50	38		sec			sec 									; return with CS indicating string comparison.
.010c51	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010c52					Binary_Divide:
.010c52	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010c55	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c57	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c59	d0 14		bne $010c6f		bne 	_BinaryDivide_Ok
.010c5b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010c5e	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c66	20 62 79 20 7a 65 72 6f 00
.010c6f					_BinaryDivide_Ok:
.010c6f	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c71	64 0a		stz $0a			stz 	DTemp1+2
.010c73	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c75	5a		phy			phy 										; save Y (bit counter)
.010c76	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c78	10 07		bpl $010c81		bpl 	_BinaryDivide_RightDone
.010c7a	e8		inx			inx
.010c7b	e8		inx			inx
.010c7c	20 b7 0c	jsr $010cb7		jsr 	Binary_DivNegate
.010c7f	ca		dex			dex
.010c80	ca		dex			dex
.010c81					_BinaryDivide_RightDone:
.010c81	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c83	10 03		bpl $010c88		bpl 	_BinaryDivide_LeftDone
.010c85	20 b7 0c	jsr $010cb7		jsr 	Binary_DivNegate
.010c88					_BinaryDivide_LeftDone:
.010c88	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c8b					_BinaryDivide_Loop:
.010c8b	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c8d	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c8f	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c91	26 0a		rol $0a			rol 	DTemp1+2
.010c93	38		sec			sec											; calculate A-M
.010c94	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c96	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c98	85 0c		sta $0c			sta 	DTemp2
.010c9a	a5 0a		lda $0a			lda 	DTemp1+2
.010c9c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c9e	90 08		bcc $010ca8		bcc 	_Binary_NoSubract 					; if A < M skip this
.010ca0	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010ca2	a5 0c		lda $0c			lda 	DTemp2
.010ca4	85 08		sta $08			sta 	DTemp1+0
.010ca6	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010ca8					_Binary_NoSubract:
.010ca8	88		dey			dey 										; do it 32 times.
.010ca9	d0 e0		bne $010c8b		bne 	_BinaryDivide_Loop
.010cab					_BinaryDivide_Exit:
.010cab	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cad	29 01 00	and #$0001		and 	#1
.010cb0	f0 03		beq $010cb5		beq 	_BinaryDivide_Exit2
.010cb2	20 b7 0c	jsr $010cb7		jsr 	Binary_DivNegate
.010cb5					_BinaryDivide_Exit2:
.010cb5	7a		ply			ply 										; restore Y
.010cb6	60		rts			rts
.010cb7					Binary_DivNegate:
.010cb7	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cb9	38		sec			sec 										; negate the value at stack X.
.010cba	a9 00 00	lda #$0000		lda 	#$0000
.010cbd	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cbf	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cc1	a9 00 00	lda #$0000		lda 	#$0000
.010cc4	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cc6	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cc8	60		rts			rts
.010cc9					Binary_Modulus:
.010cc9	20 52 0c	jsr $010c52		jsr 	Binary_Divide 						; do the divide
.010ccc	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cce	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cd0	a5 0a		lda $0a			lda 	DTemp1+2
.010cd2	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cd4	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010cd5					Binary_Multiply:
.010cd5	20 0a 06	jsr $01060a		jsr 	CheckBothNumeric 					; check both values are numeric
.010cd8	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cda	85 08		sta $08			sta 	DTemp1
.010cdc	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cde	85 0a		sta $0a			sta		DTemp1+2
.010ce0	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010ce2	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ce4					_BinaryMultiply_Loop:
.010ce4	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010ce6	05 0a		ora $0a			ora 	DTemp1+2
.010ce8	f0 1e		beq $010d08		beq 	_BinaryMultiply_Exit
.010cea	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010cec	29 01 00	and #$0001		and 	#1
.010cef	f0 0d		beq $010cfe		beq 	_BinaryMultiply_NoAdd
.010cf1	18		clc			clc 										; add multiplicand to result.
.010cf2	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010cf4	75 02		adc $02,x		adc 	EXSValueL+2,x
.010cf6	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cf8	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cfa	75 22		adc $22,x		adc 	EXSValueH+2,x
.010cfc	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cfe					_BinaryMultiply_NoAdd:
.010cfe	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d00	66 08		ror $08			ror 	DTemp1
.010d02	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d04	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d06	80 dc		bra $010ce4		bra 	_BinaryMultiply_Loop 				; go round again.
.010d08					_BinaryMultiply_Exit:
.010d08	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010d09					Function_Len:
.010d09	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010d0c	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d0f	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d12	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d14	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d17	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d1a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d1c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d1e	60		rts				rts
.010d1f					Function_Abs:
.010d1f	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010d22	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d25	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d28	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d2a	30 07		bmi $010d33			bmi 	_FAbsNegative 				; negate it if negative
.010d2c	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d2e	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d30	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d32	60		rts				rts
.010d33					_FAbsNegative:
.010d33	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d34	a9 00 00	lda #$0000			lda 	#0
.010d37	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d39	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d3b	a9 00 00	lda #$0000			lda 	#0
.010d3e	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d40	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d42	60		rts				rts
.010d43					Function_Sgn:
.010d43	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns integer
.010d46	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get an integer
.010d49	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d4c	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d4e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d50	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d52	30 07		bmi $010d5b			bmi 	_FSgnNegative 				; set to -1 if signed
.010d54	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d56	f0 02		beq $010d5a			beq 	_FSgnExit
.010d58	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d5a					_FSgnExit:
.010d5a	60		rts				rts
.010d5b					_FSgnNegative:
.010d5b	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d5e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d60	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d62	60		rts				rts
.010d63					Function_Random:
.010d63	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010d66	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger
.010d69	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d6b	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d6d	d0 0a		bne $010d79			bne 	_Rnd_NotZero
.010d6f	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d72	85 10		sta $10				sta 	DRandom
.010d74	a9 ea 00	lda #$00ea			lda 	#$EA
.010d77	85 12		sta $12				sta 	DRandom+2
.010d79					_Rnd_NotZero:
.010d79	20 84 0d	jsr $010d84			jsr 	_Rnd_Process 				; call randomiser twice
.010d7c	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d7e	20 84 0d	jsr $010d84			jsr 	_Rnd_Process
.010d81	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d83	60		rts				rts
.010d84					_Rnd_Process:
.010d84	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d86	26 12		rol $12				rol 	DRandom+2
.010d88	90 0e		bcc $010d98			bcc 	_Rnd_Exit
.010d8a	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d8c	49 54 d4	eor #$d454			eor 	#$D454
.010d8f	85 10		sta $10				sta 	DRandom
.010d91	a5 12		lda $12				lda 	DRandom+2
.010d93	49 d5 55	eor #$55d5			eor 	#$55D5
.010d96	85 12		sta $12				sta 	DRandom+2
.010d98					_Rnd_Exit:
.010d98	a5 10		lda $10				lda 	DRandom
.010d9a	45 12		eor $12				eor 	DRandom+2
.010d9c	60		rts				rts
.010d9d					Function_Chr:
.010d9d	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string
.010da0	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer
.010da3	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010da6	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010da9	d0 12		bne $010dbd			bne 	_FCHBad
.010dab	48		pha				pha  								; save char # on stack
.010dac	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010daf	20 1f 07	jsr $01071f			jsr 	StringTempAllocate
.010db2	68		pla				pla 								; restore character number
.010db3	20 4f 07	jsr $01074f			jsr 	StringWriteCharacter 		; write it out.
.010db6	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010db8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dba	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dbc	60		rts				rts
.010dbd					_FCHBad:
.010dbd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010dc0	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010dc8	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010dd5					Function_Asc:
.010dd5	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010dd8	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get string
.010ddb	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010dde	a8		tay				tay 								; string address in Y
.010ddf	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010de2	29 ff 00	and #$00ff			and 	#$00FF
.010de5	f0 0b		beq $010df2			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010de7	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010dea	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010ded	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010def	74 20		stz $20,x			stz 	EXSValueH+0,x
.010df1	60		rts				rts
.010df2					_FASBad:
.010df2	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010df5	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010dfd	65 20 66 6f 72 20 61 73 63 28 29 00
.010e09					Function_SPC:
.010e09	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string
.010e0c	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e0f	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010e12	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e15	d0 17		bne $010e2e			bne 	_FSPBad
.010e17	48		pha				pha 								; save length
.010e18	20 1f 07	jsr $01071f			jsr 	StringTempAllocate 			; allocate character space
.010e1b	7a		ply				ply 								; get count in Y
.010e1c	f0 09		beq $010e27			beq 	_FSPExit 					; if zero, just empty string
.010e1e					_FSPCopy:
.010e1e	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e21	20 4f 07	jsr $01074f			jsr 	StringWriteCharacter 		; write it out.
.010e24	88		dey				dey
.010e25	d0 f7		bne $010e1e			bne 	_FSPCopy	 				; do it Y times
.010e27					_FSPExit:
.010e27	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e29	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e2b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e2d	60		rts				rts
.010e2e					_FSPBad:
.010e2e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010e31	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e39	65 20 66 6f 72 20 73 70 63 28 29 00
.010e45					Function_Inkey:
.010e45	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010e48	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger
.010e4b	20 06 1e	jsr $011e06			jsr 	HWInkey 					; read current key
.010e4e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e50	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e52	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010e53					Function_LEFT:
.010e53	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010e56	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e59	48		pha				pha 								; save string on stack.
.010e5a	20 01 06	jsr $010601			jsr 	ExpectComma 				; get count
.010e5d	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e60	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e63	d0 6d		bne $010ed2			bne 	FNStringParameter
.010e65	85 08		sta $08				sta 	DTemp1 						; save count.
.010e67	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010e6a	7a		ply				ply 								; Y points to string.
.010e6b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e6e	29 ff 00	and #$00ff			and 	#$00FF
.010e71	f0 52		beq $010ec5			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e73	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e75	f0 55		beq $010ecc			beq 	FNStringY 					; return string in Y if current len = required len.
.010e77	90 53		bcc $010ecc			bcc 	FNStringY 					; if current < required return whole thing.
.010e79	c8		iny				iny 								; take from here - start of string
.010e7a	80 33		bra $010eaf			bra 	FNDTemp1Characters
.010e7c					Function_RIGHT:
.010e7c	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010e7f	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e82	48		pha				pha 								; save string on stack.
.010e83	20 01 06	jsr $010601			jsr 	ExpectComma 				; get count
.010e86	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e89	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e8c	d0 44		bne $010ed2			bne 	FNStringParameter
.010e8e	85 08		sta $08				sta 	DTemp1 						; save count.
.010e90	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010e93	7a		ply				ply 								; Y points to string.
.010e94	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e97	29 ff 00	and #$00ff			and 	#$00FF
.010e9a	f0 29		beq $010ec5			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e9c	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e9e	f0 2c		beq $010ecc			beq 	FNStringY 					; return string in Y if current len = required len.
.010ea0	90 2a		bcc $010ecc			bcc 	FNStringY 					; if current < required return whole thing.
.010ea2	38		sec				sec 								; current-required is the number to skip
.010ea3	e5 08		sbc $08				sbc 	DTemp1
.010ea5	85 0a		sta $0a				sta 	DTemp1+2
.010ea7	98		tya				tya
.010ea8	18		clc				clc
.010ea9	65 0a		adc $0a				adc 	DTemp1+2
.010eab	a8		tay				tay
.010eac	c8		iny				iny 								; +1 for the count.
.010ead	80 00		bra $010eaf			bra 	FNDTemp1Characters
.010eaf					FNDTemp1Characters:
.010eaf	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010eb1	f0 12		beq $010ec5			beq 	FNStringEmpty 				; if zero, return empty string.
.010eb3	20 1f 07	jsr $01071f			jsr 	StringTempAllocate
.010eb6	48		pha				pha 								; save the address
.010eb7					_FND1Loop:
.010eb7	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010eba	20 4f 07	jsr $01074f			jsr 	StringWriteCharacter
.010ebd	c8		iny				iny
.010ebe	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ec0	d0 f5		bne $010eb7			bne 	_FND1Loop
.010ec2	7a		ply				ply 								; string address in Y
.010ec3	80 07		bra $010ecc			bra 	FNStringY
.010ec5					FNStringEmpty:
.010ec5	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ec8	20 1f 07	jsr $01071f			jsr 	StringTempAllocate 			; put address of it in Y
.010ecb	a8		tay				tay
.010ecc					FNStringY:
.010ecc	98		tya				tya
.010ecd	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ecf	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ed1	60		rts				rts
.010ed2					FNStringParameter:
.010ed2	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010ed5	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010edd	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010eea					Function_MID:
.010eea	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.010eed	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ef0	48		pha				pha 								; save string on stack.
.010ef1	20 01 06	jsr $010601			jsr 	ExpectComma 				; get offset (n)
.010ef4	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010ef7	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010efa	d0 d6		bne $010ed2			bne 	FNStringParameter
.010efc	c9 00 00	cmp #$0000			cmp 	#0
.010eff	f0 d1		beq $010ed2			beq 	FNStringParameter 			; or zero
.010f01	48		pha				pha 								; save start position on stack.
.010f02	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f05	85 08		sta $08				sta 	DTemp1
.010f07	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f09	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f0c	d0 0e		bne $010f1c			bne 	_FMINoThird
.010f0e	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f10	e6 06		inc $06				inc 	DCodePtr
.010f12	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f15	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f18	d0 b8		bne $010ed2			bne 	FNStringParameter
.010f1a	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f1c					_FMINoThird:
.010f1c	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.010f1f	68		pla				pla 								; get offset position
.010f20	85 0c		sta $0c				sta 	DTemp2
.010f22	7a		ply				ply 								; get address of string in Y
.010f23	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f26	29 ff 00	and #$00ff			and 	#$00FF
.010f29	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f2b	90 98		bcc $010ec5			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f2d	38		sec				sec 								; calculate number of characters left after
.010f2e	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f30	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f31	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f33	b0 02		bcs $010f37			bcs 	_FMISufficient
.010f35	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f37					_FMISufficient:
.010f37	98		tya				tya 								; get address
.010f38	18		clc				clc
.010f39	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f3b	a8		tay				tay 								; put in Y
.010f3c	82 70 ff	brl $010eaf			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010f3f					Function_Peek:
.010f3f	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f42	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f45	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f48	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f4a	84 0a		sty $0a				sty 	DTemp1+2
.010f4c	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f4f	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f51	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f54	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f56	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f58	60		rts				rts
.010f59					Function_Deek:
.010f59	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f5c	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f5f	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f62	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f64	84 0a		sty $0a				sty 	DTemp1+2
.010f66	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f69	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f6b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f6d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f6f	60		rts				rts
.010f70					Function_Leek:
.010f70	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f73	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f76	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check )
.010f79	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f7b	84 0a		sty $0a				sty 	DTemp1+2
.010f7d	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f80	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f82	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f84	c8		iny				iny
.010f85	c8		iny				iny
.010f86	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f88	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f8a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010f8b					Function_VAL:
.010f8b	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns an integer
.010f8e	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f91	48		pha				pha 								; put string address on stack.
.010f92	20 a2 0f	jsr $010fa2			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f95	7a		ply				ply 								; get string address back
.010f96	da		phx				phx 								; save X on stack
.010f97	aa		tax				tax 								; base in X
.010f98	98		tya				tya 								; address in A
.010f99	20 dc 0f	jsr $010fdc			jsr 	StringToInteger
.010f9c	fa		plx				plx 								; restore X
.010f9d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f9f	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fa1	60		rts				rts
.010fa2					VALGetBase:
.010fa2	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fa4	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fa7	f0 07		beq $010fb0			beq 	_VGBAlternate
.010fa9	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fac	a9 0a 00	lda #$000a			lda 	#10
.010faf	60		rts				rts
.010fb0					_VGBAlternate:
.010fb0	20 01 06	jsr $010601			jsr 	ExpectComma 				; skip comma.
.010fb3	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get base
.010fb6	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fb9	d0 0e		bne $010fc9			bne 	_VGBBadBase
.010fbb	c9 02 00	cmp #$0002			cmp 	#2
.010fbe	90 09		bcc $010fc9			bcc 	_VGBBadBase
.010fc0	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fc3	b0 04		bcs $010fc9			bcs 	_VGBBadBase
.010fc5	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fc8	60		rts				rts
.010fc9					_VGBBadBase:
.010fc9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010fcc	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fd4	65 72 20 42 61 73 65 00
.010fdc					StringToInteger:
.010fdc	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fde	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010fe0	29 ff 00	and #$00ff			and 	#$00FF
.010fe3	85 26		sta $26				sta 	DTemp3+2
.010fe5	f0 6e		beq $011055			beq 	_STIError 					; if length zero it's bad.
.010fe7	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010fe9	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010feb	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010fed	64 0a		stz $0a				stz 	DTemp1+2
.010fef	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010ff1	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010ff4	48		pha				pha 								; push on stack
.010ff5	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010ff8	d0 06		bne $011000			bne 	_STILoop
.010ffa	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010ffc	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010ffe	f0 55		beq $011055			beq 	_STIError 					; if only - then error.
.011000					_STILoop:
.011000	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.011002	20 74 10	jsr $011074			jsr 	MultiplyTemp1ByA
.011005	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011007	29 ff 00	and #$00ff			and 	#$00FF
.01100a	20 65 10	jsr $011065			jsr 	ConvertUpperCase	 		; make U/C
.01100d	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.011010	90 43		bcc $011055			bcc 	_STIError
.011012	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011015	90 0e		bcc $011025			bcc 	_STIOkay1
.011017	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01101a	90 39		bcc $011055			bcc 	_STIError
.01101c	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01101f	b0 34		bcs $011055			bcs 	_STIError
.011021	18		clc				clc 								; shift to correct range.
.011022	69 09 00	adc #$0009			adc 	#9
.011025					_STIOkay1:
.011025	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011028	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01102a	b0 29		bcs $011055			bcs 	_STIError
.01102c	18		clc				clc 								; add A to DTemp1
.01102d	65 08		adc $08				adc 	DTemp1
.01102f	85 08		sta $08				sta 	DTemp1
.011031	90 02		bcc $011035			bcc 	_STINoCarry
.011033	e6 0a		inc $0a				inc 	DTemp1+2
.011035					_STINoCarry:
.011035	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011037	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011039	d0 c5		bne $011000			bne 	_STILoop 					; loop back.
.01103b	68		pla				pla 								; get optional minus bac
.01103c	c9 2d 00	cmp #$002d			cmp 	#"-"
.01103f	d0 0f		bne $011050			bne 	_STINotNegative 			; handle the negative character
.011041	38		sec				sec 								; negate DTemp1
.011042	a9 00 00	lda #$0000			lda 	#0
.011045	e5 08		sbc $08				sbc 	DTemp1
.011047	85 08		sta $08				sta 	DTemp1
.011049	a9 00 00	lda #$0000			lda 	#0
.01104c	e5 0a		sbc $0a				sbc 	DTemp1+2
.01104e	85 0a		sta $0a				sta 	DTemp1+2
.011050					_STINotNegative:
.011050	a5 08		lda $08				lda 	DTemp1 						; get the result
.011052	a4 0a		ldy $0a				ldy 	DTemp1+2
.011054	60		rts				rts
.011055					_STIError:
.011055	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011058	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>011060	74 61 6e 74 00
.011065					ConvertUpperCase:
.011065	c9 61 00	cmp #$0061			cmp 	#'a'
.011068	90 09		bcc $011073			bcc 	_CUCExit
.01106a	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01106d	b0 04		bcs $011073			bcs 	_CUCExit
.01106f	38		sec				sec
.011070	e9 20 00	sbc #$0020			sbc 	#32
.011073					_CUCExit:
.011073	60		rts				rts
.011074					MultiplyTemp1ByA:
.011074					_MTGeneral:
.011074	da		phx				phx
.011075	aa		tax				tax 								; multiplier in X
.011076	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011078	85 0c		sta $0c				sta 	DTemp2
.01107a	a5 0a		lda $0a				lda 	DTemp1+2
.01107c	85 0e		sta $0e				sta 	DTemp2+2
.01107e	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.011080	64 0a		stz $0a				stz 	DTemp1+2
.011082	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011085					_MTLoop:
.011085	8a		txa				txa 								; shift X right into C
.011086	4a		lsr a				lsr 	a
.011087	aa		tax				tax
.011088	90 10		bcc $01109a			bcc 	_MTNoAdd
.01108a	18		clc				clc
.01108b	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01108d	65 0c		adc $0c				adc 	DTemp2
.01108f	85 08		sta $08				sta 	DTemp1
.011091	a5 0a		lda $0a				lda 	DTemp1+2
.011093	65 0e		adc $0e				adc 	DTemp2+2
.011095	85 0a		sta $0a				sta 	DTemp1+2
.011097	90 01		bcc $01109a			bcc 	_MTNoAdd
.011099	c8		iny				iny
.01109a					_MTNoAdd:
.01109a	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01109c	26 0e		rol $0e				rol 	DTemp2+2
.01109e	90 01		bcc $0110a1			bcc 	_MTNoOverflow
.0110a0	c8		iny				iny
.0110a1					_MTNoOverflow:
.0110a1	8a		txa				txa 								; until multiplier is zero.
.0110a2	d0 e1		bne $011085			bne 	_MTLoop
.0110a4	98		tya				tya
.0110a5	18		clc				clc
.0110a6	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110a9	fa		plx				plx 								; restore X
.0110aa	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.0110ab					Function_Str:
.0110ab	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.0110ae	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110b1	48		pha				pha 								; save YA on the stack
.0110b2	5a		phy				phy
.0110b3	20 a2 0f	jsr $010fa2			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110b6	85 14		sta $14				sta 	DSignCount
.0110b8	7a		ply				ply 								; YA is the number
.0110b9	68		pla				pla
.0110ba	da		phx				phx
.0110bb	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110bd	20 c6 10	jsr $0110c6			jsr 	ConvertToString 			; convert it to a string.
.0110c0	fa		plx				plx 								; restore X
.0110c1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110c3	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110c5	60		rts				rts
.0110c6					ConvertToString:
.0110c6	48		pha				pha
.0110c7	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110ca	20 1f 07	jsr $01071f			jsr 	StringTempAllocate 			; allocate space for return string.
.0110cd	68		pla				pla
.0110ce					ConvertToStringAlreadyAllocated:
.0110ce	da		phx				phx 								; save X (base)
.0110cf	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110d1	84 26		sty $26				sty 	DTemp3+2
.0110d3	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110d5	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110d7	10 15		bpl $0110ee			bpl 	_CTSNotNegative
.0110d9	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110dc	20 58 11	jsr $011158			jsr 	CTSOutputA
.0110df	38		sec				sec 								; negate DTemp3 which is the number
.0110e0	a9 00 00	lda #$0000			lda 	#0
.0110e3	e5 24		sbc $24				sbc 	DTemp3
.0110e5	85 24		sta $24				sta 	DTemp3
.0110e7	a9 00 00	lda #$0000			lda 	#0
.0110ea	e5 26		sbc $26				sbc 	DTemp3+2
.0110ec	85 26		sta $26				sta 	DTemp3+2
.0110ee					_CTSNotNegative:
.0110ee	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.0110f1	48		pha				pha
.0110f2	a9 00 00	lda #$0000			lda 	#0
.0110f5	48		pha				pha
.0110f6	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.0110f8	85 08		sta $08				sta 	DTemp1
.0110fa	64 0a		stz $0a				stz 	DTemp1+2
.0110fc					_CTSMultiplySubtractor:
.0110fc	38		sec				sec 								; check number vs subtractor
.0110fd	a5 24		lda $24				lda 	DTemp3
.0110ff	e5 08		sbc $08				sbc 	DTemp1
.011101	a5 26		lda $26				lda 	DTemp3+2
.011103	e5 0a		sbc $0a				sbc 	DTemp1+2
.011105	90 0f		bcc $011116			bcc		_CTSScaledUp 				; if >= then scaled up.
.011107	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011109	48		pha				pha
.01110a	a5 0a		lda $0a				lda 	DTemp1+2
.01110c	48		pha				pha
.01110d	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01110f	20 74 10	jsr $011074			jsr 	MultiplyTemp1ByA
.011112	b0 02		bcs $011116			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011114	80 e6		bra $0110fc			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011116					_CTSScaledUp:
.011116	7a		ply				ply 								; YA contains the previous divider.
.011117	68		pla				pla
.011118	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01111b	d0 05		bne $011122			bne 	_CTSHasDigit
.01111d	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011120	f0 20		beq $011142			beq 	_CTSExit
.011122					_CTSHasDigit:
.011122	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011124	84 0e		sty $0e				sty 	DTemp2+2
.011126	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011129					_CTSSubLoop:
.011129	38		sec				sec 								; subtract subtractor from number
.01112a	a5 24		lda $24				lda 	DTemp3
.01112c	e5 0c		sbc $0c				sbc 	DTemp2
.01112e	a8		tay				tay 								; intermediate in Y
.01112f	a5 26		lda $26				lda 	DTemp3+2
.011131	e5 0e		sbc $0e				sbc 	DTemp2+2
.011133	90 07		bcc $01113c			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011135	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011137	84 24		sty $24				sty 	DTemp3
.011139	e8		inx				inx 								; one more subtraction
.01113a	80 ed		bra $011129			bra 	_CTSSubLoop 				; try it again.
.01113c					_CTSFinishedSubtracting:
.01113c	8a		txa				txa 								; convert to ASCII.
.01113d	20 4b 11	jsr $01114b			jsr 	CTSOutputHexDigit 			; write that out.
.011140	80 d4		bra $011116			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011142					_CTSExit:
.011142	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011144	20 4b 11	jsr $01114b			jsr 	CTSOutputHexDigit
.011147	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011149	fa		plx				plx 								; restore X.
.01114a	60		rts				rts
.01114b					CTSOutputHexDigit:
.01114b	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01114e	90 04		bcc $011154			bcc 	_CTSNotLetter
.011150	18		clc				clc
.011151	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011154					_CTSNotLetter:
.011154	18		clc				clc
.011155	69 30 00	adc #$0030			adc 	#48
.011158					CTSOutputA:
.011158	5a		phy				phy 								; save Y, set Y to current pointer
.011159	a4 1a		ldy $1a				ldy 	DCurrentTempString
.01115b	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01115e	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011160	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011162	1a		inc a				inc 	a
.011163	92 18		sta ($18)			sta 	(DStartTempString)
.011165	c2 20		rep #$20			rep 	#$20
.011167	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011169	7a		ply				ply 								; restore Y and exit.
.01116a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.01116b					Function_INSTR:
.01116b	20 2a 06	jsr $01062a			jsr 	ResetTypeInteger 			; returns a integer
.01116e	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.011171	48		pha				pha 								; save string to search
.011172	20 01 06	jsr $010601			jsr 	ExpectComma
.011175	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; string to search for
.011178	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket
.01117b	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.01117d	68		pla				pla
.01117e	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011180	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011182	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011184	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011186	38		sec				sec
.011187	b2 0c		lda ($0c)			lda 	(DTemp2)
.011189	f2 08		sbc ($08)			sbc		(DTemp1)
.01118b	c2 20		rep #$20			rep 	#$20
.01118d	90 2c		bcc $0111bb			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.01118f	29 ff 00	and #$00ff			and 	#$00FF
.011192	1a		inc a				inc 	a
.011193	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.011195	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.011197	29 ff 00	and #$00ff			and 	#$00FF
.01119a	f0 22		beq $0111be			beq 	_FINSError
.01119c					_FINSLoop:
.01119c	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.01119e	1a		inc a				inc 	a
.01119f	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111a1	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111a3	29 ff 00	and #$00ff			and 	#$00FF
.0111a6	a8		tay				tay									; start comparing at index 1.
.0111a7					_FINSCompare:
.0111a7	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111a9	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111ab	29 ff 00	and #$00ff			and 	#$00FF
.0111ae	d0 05		bne $0111b5			bne 	_FINSNext
.0111b0	88		dey				dey
.0111b1	d0 f4		bne $0111a7			bne 	_FINSCompare
.0111b3	80 08		bra $0111bd			bra 	_FINSExit
.0111b5					_FINSNext:
.0111b5	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111b7	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111b9	d0 e1		bne $01119c			bne 	_FINSLoop
.0111bb					_FINSFail:
.0111bb	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111bd					_FINSExit:
.0111bd	60		rts				rts
.0111be					_FINSError:
.0111be	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0111c1	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111c9	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.0111d2					Function_UPPER:
.0111d2	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.0111d5	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.0111d8	48		pha				pha
.0111d9	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; close call.
.0111dc	20 1f 07	jsr $01071f			jsr		StringTempAllocate 			; allocate memory for it
.0111df	68		pla				pla
.0111e0	20 5d 07	jsr $01075d			jsr 	StringCreateCopy 			; create a copy of it.
.0111e3	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111e5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111e7	a8		tay				tay 								; address in Y
.0111e8	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111ea	da		phx				phx 								; save X
.0111eb	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111ed	29 ff 00	and #$00ff			and 	#$00FF
.0111f0	f0 20		beq $011212			beq 	_FUPExit
.0111f2	aa		tax				tax 								; put in X
.0111f3					_FUPLoop:
.0111f3	c8		iny				iny 								; increment and load character
.0111f4	b9 00 00	lda $0000,y			lda 	$0000,y
.0111f7	29 ff 00	and #$00ff			and 	#$00FF
.0111fa	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.0111fd	90 10		bcc $01120f			bcc 	_FUPNoChange
.0111ff	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011202	b0 0b		bcs $01120f			bcs 	_FUPNoChange
.011204	38		sec				sec 								; shift case
.011205	e9 20 00	sbc #$0020			sbc 	#32
.011208	e2 20		sep #$20			sep 	#$20 						; write back
.01120a	99 00 00	sta $0000,y			sta 	$0000,y
.01120d	c2 20		rep #$20			rep 	#$20
.01120f					_FUPNoChange:
.01120f	ca		dex				dex 								; do X times
.011210	d0 e1		bne $0111f3			bne 	_FUPLoop
.011212					_FUPExit:
.011212	fa		plx				plx 								; restore X
.011213	60		rts				rts
.011214					Function_LOWER:
.011214	20 32 06	jsr $010632			jsr 	ResetTypeString 			; returns a string.
.011217	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.01121a	48		pha				pha
.01121b	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; close call.
.01121e	20 1f 07	jsr $01071f			jsr		StringTempAllocate 			; allocate memory for it
.011221	68		pla				pla
.011222	20 5d 07	jsr $01075d			jsr 	StringCreateCopy 			; create a copy of it.
.011225	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011227	95 00		sta $00,x			sta 	EXSValueL+0,x
.011229	a8		tay				tay 								; address in Y
.01122a	74 20		stz $20,x			stz 	EXSValueH+0,x
.01122c	da		phx				phx 								; save X
.01122d	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01122f	29 ff 00	and #$00ff			and 	#$00FF
.011232	f0 20		beq $011254			beq 	_FLOExit
.011234	aa		tax				tax 								; put in X
.011235					_FLOLoop:
.011235	c8		iny				iny 								; increment and load character
.011236	b9 00 00	lda $0000,y			lda 	$0000,y
.011239	29 ff 00	and #$00ff			and 	#$00FF
.01123c	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01123f	90 10		bcc $011251			bcc 	_FLONoChange
.011241	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011244	b0 0b		bcs $011251			bcs 	_FLONoChange
.011246	18		clc				clc 								; shift case
.011247	69 20 00	adc #$0020			adc 	#32
.01124a	e2 20		sep #$20			sep 	#$20 						; write back
.01124c	99 00 00	sta $0000,y			sta 	$0000,y
.01124f	c2 20		rep #$20			rep 	#$20
.011251					_FLONoChange:
.011251	ca		dex				dex 								; do X times
.011252	d0 e1		bne $011235			bne 	_FLOLoop
.011254					_FLOExit:
.011254	fa		plx				plx 								; restore X
.011255	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.011256					Command_Let:
.011256	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011258	48		pha				pha  								; save on stack for later.
.011259	20 9c 03	jsr $01039c			jsr 	VariableFind 				; find the variable
.01125c	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01125e	b0 0c		bcs $01126c			bcs 	_FLetFound 					; skip if found.
.011260	68		pla				pla 								; get and push the first token again.
.011261	48		pha				pha
.011262	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011265	d0 52		bne $0112b9			bne 	_FLError					; arrays, so this causes an error.
.011267	20 4f 04	jsr $01044f			jsr 	VariableCreate 				; create it as a single variable.
.01126a	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01126c					_FLetFound:
.01126c	68		pla				pla 								; get and save the first token.
.01126d	48		pha				pha
.01126e	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011271	f0 0a		beq $01127d			beq 	_FLetNotArray
.011273	a2 00 02	ldx #$0200			ldx		#EXSBase 					; in LET, so do it from the base stack.
.011276	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011278	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.01127b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01127d					_FLetNotArray:
.01127d	7a		ply				ply 								; get the first token into Y
.01127e	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011280	48		pha				pha
.011281	5a		phy				phy 								; save the first token on the stack.
.011282	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011285	d2 06		cmp ($06)			cmp 	(DCodePtr)
.011287	d0 23		bne $0112ac			bne 	_FLetMissingEquals
.011289	e6 06		inc $06				inc 	DCodePtr
.01128b	e6 06		inc $06				inc 	DCodePtr
.01128d	68		pla				pla 								; restore the first token.
.01128e	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011291	d0 0f		bne $0112a2			bne 	_FLetString 				; skip if string.
.011293	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get an integer
.011296	7a		ply				ply 								; get address in Y
.011297	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.011299	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.01129c	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.01129e	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112a1	60		rts				rts
.0112a2					_FLetString:
.0112a2	20 2e 03	jsr $01032e			jsr 	EvaluateString 				; get a string.
.0112a5	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112a7	7a		ply				ply 								; get address we are overwriting in Y - this is the
.0112a8	20 7b 06	jsr $01067b			jsr 	StringAssign 				; assign the string in memory.
.0112ab	60		rts				rts
.0112ac					_FLetMissingEquals:
.0112ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112af	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112b7	3d 00
.0112b9					_FLError:
.0112b9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112bc	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112c4	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/procedure.asm

.0112cc					Command_PROC:
.0112cc	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112cf	18		clc				clc
.0112d0	65 02		adc $02				adc 	DBaseAddress
.0112d2	aa		tax				tax 								; X is used to track it
.0112d3					_FPROLoop:
.0112d3	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112d6	f0 56		beq $01132e			beq 	_FPROUnknown
.0112d8	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112db	c9 48 3c	cmp #$3c48			cmp 	#defprocTokenID
.0112de	f0 08		beq $0112e8			beq 	_FPROFoundDefProc
.0112e0					_FPRONext:
.0112e0	8a		txa				txa 								; follow the link.
.0112e1	18		clc				clc
.0112e2	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112e5	aa		tax				tax
.0112e6	80 eb		bra $0112d3			bra 	_FPROLoop
.0112e8					_FPROFoundDefProc:
.0112e8	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.0112eb	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112ed	d0 f1		bne $0112e0			bne 	_FPRONext
.0112ef	8a		txa				txa 								; DTemp1 points to the token.
.0112f0	18		clc				clc
.0112f1	69 06 00	adc #$0006			adc 	#6
.0112f4	85 08		sta $08				sta 	DTemp1
.0112f6	a0 00 00	ldy #$0000			ldy 	#0
.0112f9					_FPROCompare:
.0112f9	b1 08		lda ($08),y			lda 	(DTemp1),y
.0112fb	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0112fd	d0 e1		bne $0112e0			bne 	_FPRONext 					; fails, different
.0112ff	c8		iny				iny
.011300	c8		iny				iny
.011301	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011304	d0 f3		bne $0112f9			bne 	_FPROCompare
.011306	98		tya				tya 								; this is the offset to the next element
.011307	18		clc				clc
.011308	65 08		adc $08				adc 	DTemp1
.01130a	48		pha				pha 								; push the next command on the stack
.01130b	da		phx				phx 								; push the record address on the stack.
.01130c	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01130e	98		tya				tya 								; work out the return address
.01130f	18		clc				clc
.011310	65 06		adc $06				adc 	DCodePtr
.011312	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011314	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011316	95 04		sta $04,x			sta 	$04,x
.011318	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.01131b	95 06		sta $06,x			sta 	$06,x
.01131d	8a		txa				txa 								; advance stack by 6.
.01131e	18		clc				clc
.01131f	69 06 00	adc #$0006			adc 	#6
.011322	85 2a		sta $2a				sta 	DStack
.011324	7a		ply				ply 								; line record address
.011325	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011328	85 22		sta $22				sta 	DLineNumber
.01132a	68		pla				pla 								; next command
.01132b	85 06		sta $06				sta 	DCodePtr
.01132d	60		rts				rts
.01132e					_FPROUnknown:
.01132e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011331	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011339	70 72 6f 63 65 64 75 72 65 00
.011343					Command_ENDPROC:
.011343	20 1e 14	jsr $01141e			jsr 	LocalRestore 				; restore any local variables.
.011346	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.011348	b5 00		lda $00,x			lda 	$00,x
.01134a	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.01134d	d0 11		bne $011360			bne 	_FENPFail
.01134f	8a		txa				txa 								; unpick stack.
.011350	38		sec				sec
.011351	e9 06 00	sbc #$0006			sbc 	#6
.011354	85 2a		sta $2a				sta 	DStack
.011356	aa		tax				tax
.011357	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011359	85 06		sta $06				sta 	DCodePtr
.01135b	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01135d	85 22		sta $22				sta 	DLineNumber
.01135f	60		rts				rts
.011360					_FENPFail:
.011360	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011363	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>01136b	77 69 74 68 6f 75 74 20 50 72 6f 63 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/local.asm

.011378					Command_LOCAL:
.011378	20 a0 13	jsr $0113a0			jsr 	LocalProcessVariable 		; make one variable 'local'
.01137b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.01137d	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.011380	d0 06		bne $011388			bne 	_CLOExit
.011382	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.011384	e6 06		inc $06				inc 	DCodePtr
.011386	80 f0		bra $011378			bra 	Command_Local
.011388					_CLOExit:
.011388	60		rts				rts
.011389					_CLOFail:
.011389	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01138c	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>011394	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113a0					LocalProcessVariable:
.0113a0	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113a2	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113a5	90 5f		bcc $011406			bcc 	_LPVFail
.0113a7	29 00 10	and #$1000			and 	#IDArrayMask
.0113aa	d0 5a		bne $011406			bne 	_LPVFail
.0113ac	b2 06		lda ($06)			lda 	(DCodePtr) 					; get type
.0113ae	48		pha				pha 								; save on stack.
.0113af	20 9c 03	jsr $01039c			jsr 	VariableFind 				; find a variable
.0113b2	b0 03		bcs $0113b7			bcs 	_LPVFound
.0113b4	20 4f 04	jsr $01044f			jsr 	VariableCreate 				; create it if it doesn't exist.
.0113b7					_LPVFound:
.0113b7	a8		tay				tay 								; variable address in Y
.0113b8	68		pla				pla 								; get the type back
.0113b9	29 00 20	and #$2000			and 	#IDTypeMask 				; identify it
.0113bc	d0 1e		bne $0113dc			bne 	_LPVStringPush 				; if string, push that on the stack.
.0113be	a6 2a		ldx $2a				ldx 	DStack
.0113c0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get LSW and write
.0113c3	95 02		sta $02,x			sta 	$02,x
.0113c5	b9 02 00	lda $0002,y			lda 	$0002,y 					; get MSW and write
.0113c8	95 04		sta $04,x			sta 	$04,x
.0113ca	98		tya				tya 								; write address.
.0113cb	95 06		sta $06,x			sta 	$06,x
.0113cd	a9 00 c0	lda #$c000			lda 	#$C000 						; write $C000 marker.
.0113d0	95 08		sta $08,x			sta 	$08,x
.0113d2	8a		txa				txa 								; shift to top of stack.
.0113d3	18		clc				clc
.0113d4	69 08 00	adc #$0008			adc 	#8
.0113d7	85 2a		sta $2a				sta 	DStack
.0113d9	98		tya				tya 								; return address of variable data.
.0113da	18		clc				clc
.0113db	60		rts				rts
.0113dc					_LPVStringPush:
.0113dc	b9 00 00	lda $0000,y			lda 	$0000,y 					; if uninitialised then leave it like that.
.0113df	f0 22		beq $011403			beq		_LPVExit
.0113e1	5a		phy				phy 								; save storage address on stack.
.0113e2	85 08		sta $08				sta 	DTemp1 						; address of physical string.
.0113e4	a6 2a		ldx $2a				ldx 	DStack 						; get stack.
.0113e6	e8		inx				inx 								; point to free stack byte.
.0113e7	e8		inx				inx
.0113e8	b2 08		lda ($08)			lda 	(DTemp1) 					; get length of string.
.0113ea	29 ff 00	and #$00ff			and 	#$00FF
.0113ed	a8		tay				tay 								; copy backwards
.0113ee					_LPVPushOut:
.0113ee	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy byte at a time. just do words :)
.0113f0	95 00		sta $00,x			sta 	$00,x
.0113f2	e8		inx				inx
.0113f3	88		dey				dey
.0113f4	10 f8		bpl $0113ee			bpl 	_LPVPushOut 				; push one extra because of length byte.
.0113f6	68		pla				pla 								; write out the address of the storage.
.0113f7	a8		tay				tay 								; save it in Y
.0113f8	95 00		sta $00,x			sta 	$00,x 						; (e.g. this address has the physical string address)
.0113fa	a9 00 e0	lda #$e000			lda 	#$E000 						; write $E000 out.
.0113fd	95 02		sta $02,x			sta 	$02,x
.0113ff	e8		inx				inx
.011400	e8		inx				inx
.011401	86 2a		stx $2a				stx 	DStack 						; save $E000 marker
.011403					_LPVExit:
.011403	98		tya				tya  								; return address of marker.
.011404	38		sec				sec
.011405	60		rts				rts
.011406					_LPVFail:
.011406	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011409	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Identifier",$00 								; with this message
>011411	6c 20 49 64 65 6e 74 69 66 69 65 72 00
.01141e					LocalRestore:
.01141e	a6 2a		ldx $2a				ldx 	DStack 						; access basic stack.
.011420	b5 00		lda $00,x			lda 	$00,x 						; read top word.
.011422	c9 00 c0	cmp #$c000			cmp 	#$C000 						; $C000-$FFFF indicates stacked local/parameter
.011425	f0 03		beq $01142a			beq 	_LRIntegerPull 				; $C000 unstack integer
.011427	b0 18		bcs $011441			bcs 	_LRString 					; $C001-$FFFF unstack string
.011429	60		rts				rts
.01142a					_LRIntegerPull:
.01142a	8a		txa				txa 								; pull 8 bytes off stack.
.01142b	38		sec				sec
.01142c	e9 08 00	sbc #$0008			sbc 	#8
.01142f	85 2a		sta $2a				sta 	DStack
.011431	aa		tax				tax 								; put in X
.011432	b5 06		lda $06,x			lda 	$06,x 						; get address to restore
.011434	a8		tay				tay
.011435	b5 02		lda $02,x			lda 	$02,x 						; restore MSW
.011437	99 00 00	sta $0000,y			sta 	@w$0000,y
.01143a	b5 04		lda $04,x			lda 	$04,x 						; and LSW
.01143c	99 02 00	sta $0002,y			sta 	@w$0002,y
.01143f	80 dd		bra $01141e			bra 	LocalRestore 				; and try again.
.011441					_LRString:
.011441	ca		dex				dex									; access the address
.011442	ca		dex				dex
.011443	b5 00		lda $00,x			lda 	$00,x 						; the address of the storage address
.011445	a8		tay				tay
.011446	b9 00 00	lda $0000,y			lda 	$0000,y 					; the actual storage address
.011449	85 08		sta $08				sta 	DTemp1 						; save so we can write to it.
.01144b	ca		dex				dex 								; length is the next byte.
.01144c	b5 00		lda $00,x			lda 	$00,x 						; so get the length
.01144e	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off
.011451	a8		tay				tay 								; count in Y
.011452					_LRRecover:
.011452	b5 00		lda $00,x			lda 	$00,x 						; extract and write bytes
.011454	e2 20		sep #$20			sep 	#$20
.011456	92 08		sta ($08)			sta 	(DTemp1)
.011458	c2 20		rep #$20			rep 	#$20
.01145a	ca		dex				dex 								; stack backwards
.01145b	e6 08		inc $08				inc 	DTemp1 						; pointer forwards
.01145d	88		dey				dey 								; do Y+1 times.
.01145e	10 f2		bpl $011452			bpl 	_LRRecover
.011460	ca		dex				dex 								; stack should now point to next token
.011461	86 2a		stx $2a				stx 	DStack
.011463	80 b9		bra $01141e			bra 	LocalRestore 				; and try again.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.011465					Command_List:
.011465	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011468	20 1f 07	jsr $01071f		jsr 	StringTempAllocate
.01146b	85 30		sta $30			sta 	DListBuffer						; save buffer.
.01146d	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01146f	64 2e		stz $2e			stz 	DIndent2
.011471	64 32		stz $32			stz 	DTemp4+0 						; low number
.011473	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011476	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011478	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.01147a	f0 3b		beq $0114b7		beq 	_CLIList
.01147c	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01147f	f0 36		beq $0114b7		beq 	_CLIList
.011481	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.011484	f0 13		beq $011499		beq 	_CLIComma
.011486	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; yes, first number
.011489	c0 00 00	cpy #$0000		cpy 	#0
.01148c	d0 21		bne $0114af		bne 	_CLIError
.01148e	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011490	85 34		sta $34			sta 	DTemp4+2
.011492	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011494	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011497	d0 1e		bne $0114b7		bne 	_CLIList
.011499					_CLIComma:
.011499	20 01 06	jsr $010601		jsr 	ExpectComma 					; skip comma
.01149c	b2 06		lda ($06)		lda 	(DCodePtr)
.01149e	f0 12		beq $0114b2		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.0114a0	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0114a3	f0 0d		beq $0114b2		beq 	_CLIToEnd
.0114a5	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; get end line.
.0114a8	85 34		sta $34			sta 	DTemp4+2
.0114aa	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0114ad	f0 08		beq $0114b7		beq 	_CLIList
.0114af					_CLIError:
.0114af	82 0b f1	brl $0105bd		brl 	SyntaxError
.0114b2					_CLIToEnd:
.0114b2	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0114b5	85 34		sta $34			sta 	DTemp4+2
.0114b7					_CLIList:
.0114b7	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114ba	18		clc			clc
.0114bb	65 02		adc $02			adc 	DBaseAddress
.0114bd	a8		tay			tay 									; put in Y
.0114be					_CLINextLine:
.0114be	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114c1	f0 29		beq $0114ec		beq 	_CLIExit
.0114c3	20 54 16	jsr $011654		jsr 	ScanIndent  					; scan for formatting.
.0114c6	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114c9	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114cb	90 14		bcc $0114e1		bcc 	_CLIFollowLink
.0114cd	c5 34		cmp $34			cmp 	DTemp4+2
.0114cf	f0 02		beq $0114d3		beq 	_CLIShowLine
.0114d1	b0 0e		bcs $0114e1		bcs 	_CLIFollowLink
.0114d3					_CLIShowLine:
.0114d3	a5 30		lda $30			lda 	DListBuffer
.0114d5	20 ef 14	jsr $0114ef		jsr 	Detokenise 						; detokenise it
.0114d8	5a		phy			phy
.0114d9	a8		tay			tay 									; print buffer out
.0114da	20 58 06	jsr $010658		jsr 	PrintBasicString
.0114dd	20 e5 1d	jsr $011de5		jsr 	HWNewLine
.0114e0	7a		ply			ply 									; get address
.0114e1					_CLIFollowLink:
.0114e1	98		tya			tya 									; follow link
.0114e2	18		clc			clc
.0114e3	79 00 00	adc $0000,y		adc 	$0000,y
.0114e6	a8		tay			tay
.0114e7	20 01 1e	jsr $011e01		jsr 	HWCheckBreak 					; break key pressed.
.0114ea	f0 d2		beq $0114be		beq 	_CLINextLine
.0114ec					_CLIExit:
.0114ec	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114ee	60		rts			rts
.0114ef					Detokenise:
.0114ef	48		pha			pha
.0114f0	da		phx			phx
.0114f1	5a		phy			phy
.0114f2	85 18		sta $18			sta 	DStartTempString 				; set the temp Command pointers to this buffer
.0114f4	1a		inc a			inc 	a
.0114f5	85 1a		sta $1a			sta 	DCurrentTempString
.0114f7	64 1c		stz $1c			stz		DConstantShift
.0114f9	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114fc	92 18		sta ($18)		sta 	(DStartTempString)
.0114fe	5a		phy			phy 									; save Y
.0114ff	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.011502	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011505	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011508	20 ce 10	jsr $0110ce		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01150b	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01150d	c5 2e		cmp $2e			cmp 	DIndent2
.01150f	90 02		bcc $011513		bcc 	_DTKSmaller
.011511	a5 2e		lda $2e			lda 	DIndent2
.011513					_DTKSmaller:
.011513	0a		asl a			asl 	a
.011514	69 06 00	adc #$0006		adc 	#6
.011517	85 08		sta $08			sta 	DTemp1
.011519					_DTKPadLineNo:
.011519	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.01151c	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.01151f	b2 18		lda ($18)		lda 	(DStartTempString)
.011521	29 ff 00	and #$00ff		and 	#$00FF
.011524	c5 08		cmp $08			cmp 	DTemp1
.011526	d0 f1		bne $011519		bne 	_DTKPadLineNo
.011528	68		pla			pla 									; get pointer
.011529	18		clc			clc 									; point to start of line
.01152a	69 04 00	adc #$0004		adc 	#4
.01152d	a8		tay			tay 									; put back in Y.
.01152e					_DTKMainLoop:
.01152e	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011531	d0 04		bne $011537		bne 	_DTKNotZero 					; if zero, return.
.011533	7a		ply			ply
.011534	fa		plx			plx
.011535	68		pla			pla
.011536	60		rts			rts
.011537					_DTKNotZero:
.011537	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.01153a	b0 1c		bcs $011558		bcs 	_DTKNotString
.01153c	5a		phy			phy										; save token address on stack.
.01153d	c8		iny			iny 									; skip first token
.01153e	c8		iny			iny
.01153f	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.011542	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.011545	98		tya			tya 									; copy the string out.
.011546	20 5d 07	jsr $01075d		jsr 	StringCreateCopy
.011549	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.01154c	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.01154f	68		pla			pla 									; get token, which is its own offset
.011550	a8		tay			tay
.011551	18		clc			clc
.011552	79 00 00	adc $0000,y		adc 	$0000,y
.011555	a8		tay			tay
.011556	80 d6		bra $01152e		bra 	_DTKMainLoop
.011558					_DTKNotString:
.011558	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.01155b	b0 09		bcs $011566		bcs 	_DTKNotShift
.01155d	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011560	85 1c		sta $1c			sta 	DConstantShift
.011562	c8		iny			iny 									; skip token.
.011563	c8		iny			iny
.011564	80 c8		bra $01152e		bra 	_DTKMainLoop
.011566					_DTKNotShift:
.011566	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011569	b0 07		bcs $011572		bcs 	_DTKNotKeyword
.01156b	c8		iny			iny 									; skip over token
.01156c	c8		iny			iny
.01156d	20 ec 15	jsr $0115ec		jsr 	_DTKDecodeKeyword 				; decode it.
.011570	80 bc		bra $01152e		bra 	_DTKMainLoop
.011572					_DTKNotKeyword:
.011572	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011575	b0 18		bcs $01158f		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011577	5a		phy			phy 									; save pointer
.011578	38		sec			sec  									; shift it in the range 0-32767
.011579	e9 00 40	sbc #$4000		sbc 	#$4000
.01157c	0a		asl a			asl 	a 								; shift it left, losing bit 15
.01157d	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01157f	6a		ror a			ror 	a 								; rotate that into the constant value
.011580	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011582	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011585	20 ce 10	jsr $0110ce		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011588	64 1c		stz $1c			stz 	DConstantShift
.01158a	7a		ply			ply 									; restore pointer
.01158b	c8		iny			iny 									; skip token.
.01158c	c8		iny			iny
.01158d	80 9f		bra $01152e		bra 	_DTKMainLoop
.01158f					_DTKIdentifier:
.01158f	48		pha			pha 									; save token for typing at end
.011590					_DTKILoop:
.011590	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011593	20 bc 15	jsr $0115bc		jsr 	_DTKIDecodeToken 				; decode it.
.011596	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011599	c8		iny			iny 									; skip it
.01159a	c8		iny			iny
.01159b	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01159e	d0 f0		bne $011590		bne 	_DTKILoop
.0115a0	68		pla			pla 									; add $( as required.
.0115a1	48		pha			pha 									; comes from the first token.
.0115a2	29 00 20	and #$2000		and 	#IDTypeMask
.0115a5	f0 06		beq $0115ad		beq 	_DTKINotString
.0115a7	a9 24 00	lda #$0024		lda 	#"$"
.0115aa	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.0115ad					_DTKINotString:
.0115ad	68		pla			pla
.0115ae	29 00 10	and #$1000		and 	#IDArrayMask
.0115b1	f0 06		beq $0115b9		beq 	_DTKINotArray
.0115b3	a9 28 00	lda #$0028		lda 	#"("
.0115b6	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.0115b9					_DTKINotArray:
.0115b9	82 72 ff	brl $01152e		brl 	_DTKMainLoop
.0115bc					_DTKIDecodeToken:
.0115bc	5a		phy			phy
.0115bd	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115c0	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115c3					_DTKIDivide:
.0115c3	38		sec			sec
.0115c4	e9 2d 00	sbc #$002d		sbc 	#45
.0115c7	c8		iny			iny
.0115c8	b0 f9		bcs $0115c3		bcs 	_DTKIDivide
.0115ca	69 2d 00	adc #$002d		adc 	#45
.0115cd	20 d6 15	jsr $0115d6		jsr 	_DTKIOutA 						; output low.
.0115d0	98		tya			tya
.0115d1	20 d6 15	jsr $0115d6		jsr 	_DTKIOutA 						; output high
.0115d4	7a		ply			ply
.0115d5	60		rts			rts
.0115d6					_DTKIOutA:
.0115d6	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115d9	f0 10		beq $0115eb		beq 	_DTKIOutExit
.0115db	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115de	90 04		bcc $0115e4		bcc 	_DTKIOutAlpha
.0115e0	38		sec			sec  									; adjust for 0-9
.0115e1	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115e4					_DTKIOutAlpha:
.0115e4	18		clc			clc										; adjust for A-Z
.0115e5	69 60 00	adc #$0060		adc 	#96
.0115e8	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.0115eb					_DTKIOutExit:
.0115eb	60		rts			rts
.0115ec					_DTKDecodeKeyword:
.0115ec	48		pha			pha
.0115ed	da		phx			phx
.0115ee	5a		phy			phy
.0115ef	a8		tay			tay 									; save token ID in Y
.0115f0	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115f3	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115f6	48		pha			pha 									; save this flag on a stack
.0115f7	5a		phy			phy 									; save the token ID
.0115f8	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115fb	d0 19		bne $011616		bne 	_DTKNotSpecial1
.0115fd	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115ff	88		dey			dey
.011600	b9 00 00	lda $0000,y		lda 	$0000,y
.011603	29 ff 00	and #$00ff		and 	#$00FF
.011606	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011609	f0 0b		beq $011616		beq 	_DTKNotSpecial1
.01160b	c9 3a 00	cmp #$003a		cmp 	#":"
.01160e	f0 06		beq $011616		beq 	_DTKNotSpecial1
.011610	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011613	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.011616					_DTKNotSpecial1:
.011616	68		pla			pla
.011617	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.01161a	a8		tay			tay 									; into Y.
.01161b	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01161e					_DTKDWorkThrough:
.01161e	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01161f	f0 0f		beq $011630		beq 	_DTKDFound
.011621	86 08		stx $08			stx 	DTemp1
.011623	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; read the type/skip byte.
.011627	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.01162a	18		clc			clc
.01162b	65 08		adc $08			adc 	DTemp1
.01162d	aa		tax			tax
.01162e	80 ee		bra $01161e		bra 	_DTKDWorkThrough
.011630					_DTKDFound:
.011630	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; get skip
.011634	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011637	3a		dec a			dec 	a
.011638	a8		tay			tay 									; put in Y
.011639					_DTKOut:
.011639	bf 9f 00 01	lda $01009f,x		lda 	TokenText+1,x 					; output it.
.01163d	29 ff 00	and #$00ff		and 	#$00FF
.011640					_DTKNotLC:
.011640	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.011643	e8		inx			inx
.011644	88		dey			dey
.011645	d0 f2		bne $011639		bne 	_DTKOut
.011647	68		pla			pla 									; trailing space.
.011648	d0 06		bne $011650		bne 	_DTKNotSpecial2
.01164a	a9 20 00	lda #$0020		lda 	#" "
.01164d	20 4f 07	jsr $01074f		jsr 	StringWriteCharacter
.011650					_DTKNotSpecial2:
.011650	7a		ply			ply
.011651	fa		plx			plx
.011652	68		pla			pla
.011653	60		rts			rts
.011654					ScanIndent:
.011654	48		pha			pha
.011655	5a		phy			phy
.011656	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011658	85 2e		sta $2e			sta 	DIndent2
.01165a	98		tya			tya
.01165b	18		clc			clc 									; point to code.
.01165c	69 04 00	adc #$0004		adc 	#4
.01165f	a8		tay			tay
.011660					_SILoop:
.011660	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011663	f0 35		beq $01169a		beq 	_SIExit
.011665	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011668	b0 08		bcs $011672		bcs 	_SICheckKeyword
.01166a	98		tya			tya 									; skip string.
.01166b	18		clc			clc
.01166c	79 00 00	adc $0000,y		adc 	$0000,y
.01166f	a8		tay			tay
.011670	80 ee		bra $011660		bra 	_SILoop
.011672					_SICheckKeyword:
.011672	29 00 e0	and #$e000		and 	#$E000
.011675	c9 00 20	cmp #$2000		cmp 	#$2000
.011678	f0 04		beq $01167e		beq 	_SIFoundKeyword
.01167a					_SIAdvance:
.01167a	c8		iny			iny 									; if not, loop round.
.01167b	c8		iny			iny
.01167c	80 e2		bra $011660		bra 	_SILoop
.01167e					_SIFoundKeyword:
.01167e	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011681	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011684	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011687	f0 0d		beq $011696		beq 	_SIKeyPlus
.011689	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.01168c	d0 ec		bne $01167a		bne 	_SIAdvance
.01168e	c6 2c		dec $2c			dec 	DIndent
.011690	10 e8		bpl $01167a		bpl 	_SIAdvance
.011692	64 2c		stz $2c			stz 	DIndent
.011694	80 e4		bra $01167a		bra 	_SIAdvance
.011696					_SIKeyPlus:
.011696	e6 2c		inc $2c			inc 	DIndent
.011698	80 e0		bra $01167a		bra 	_SIAdvance
.01169a					_SIExit:
.01169a	7a		ply			ply
.01169b	68		pla			pla
.01169c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.01169d					Command_PRINT:
.01169d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01169f	f0 33		beq $0116d4			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0116a1	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.0116a4	f0 2e		beq $0116d4			beq 	_FPRExitCR
.0116a6	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.0116a9	f0 23		beq $0116ce			beq 	_FPRSkipLoop
.0116ab	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.0116ae	f0 1b		beq $0116cb			beq 	_FPRNewLine
.0116b0	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0116b3	f0 11		beq $0116c6			beq 	_FPRTab
.0116b5					_FPRExpression:
.0116b5	20 01 02	jsr $010201			jsr 	Evaluate 					; evaluate a string or integer.
.0116b8	b0 06		bcs $0116c0			bcs 	_FPRHaveString
.0116ba	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116bd	20 c6 10	jsr $0110c6			jsr 	ConvertToString
.0116c0					_FPRHaveString:
.0116c0	a8		tay				tay 								; print the basic String.
.0116c1	20 58 06	jsr $010658			jsr 	PrintBASICString
.0116c4	80 d7		bra $01169d			bra 	Command_Print 				; and go round again.
.0116c6					_FPRTab:
.0116c6	20 fa 1d	jsr $011dfa			jsr 	HWTab
.0116c9	80 03		bra $0116ce			bra 	_FPRSkipLoop
.0116cb					_FPRNewLine:
.0116cb	20 e5 1d	jsr $011de5			jsr 	HWNewLine
.0116ce					_FPRSkipLoop:
.0116ce	e6 06		inc $06				inc 	DCodePtr
.0116d0	e6 06		inc $06				inc 	DCodePtr
.0116d2	80 c9		bra $01169d			bra 	Command_Print
.0116d4					_FPRExitCR:
.0116d4	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116d6	88		dey				dey
.0116d7	88		dey				dey
.0116d8	b9 00 00	lda $0000,y			lda 	$0000,y
.0116db	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116de	f0 08		beq $0116e8			beq 	_FPRExit
.0116e0	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116e3	f0 03		beq $0116e8			beq 	_FPRExit
.0116e5	20 e5 1d	jsr $011de5			jsr 	HWNewLine 					; print a new line.
.0116e8					_FPRExit:
.0116e8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.0116e9					Command_IF:
.0116e9	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; check success.
.0116ec	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116ee	05 08		ora $08				ora 	DTemp1
.0116f0	a8		tay				tay 								; success flag in Y.
.0116f1	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116f3	c9 4b 3a	cmp #$3a4b			cmp 	#thenTokenID
.0116f6	d0 32		bne $01172a			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116f8	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116fa	e6 06		inc $06				inc 	DCodePtr
.0116fc	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116ff	f0 0f		beq $011710			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011701	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011703	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011706	90 21		bcc $011729			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011708	c9 00 c0	cmp #$c000			cmp 	#$C000
.01170b	b0 1c		bcs $011729			bcs 	_FIFContinue
.01170d	4c 8d 19	jmp $01198d			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.011710					_FIFEndOfLine:
.011710	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011712	f0 15		beq $011729			beq 	_FIFContinue 				; if done so, continue.
.011714	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011717	90 06		bcc $01171f			bcc 	_FIFStringConstant
.011719	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.01171b	e6 06		inc $06				inc 	DCodePtr
.01171d	80 f1		bra $011710			bra 	_FIFEndOfLine
.01171f					_FIFStringConstant:
.01171f	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011722	18		clc				clc
.011723	65 06		adc $06				adc 	DCodePtr
.011725	85 06		sta $06				sta 	DCodePtr
.011727	80 e7		bra $011710			bra 	_FIFEndOfLine
.011729					_FIFContinue:
.011729	60		rts				rts
.01172a					_FIFExtended:
.01172a	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.01172c	e6 2a		inc $2a				inc 	DStack
.01172e	a9 46 3c	lda #$3c46			lda 	#ifTokenID
.011731	a6 2a		ldx $2a				ldx 	DStack
.011733	95 00		sta $00,x			sta 	$00,x
.011735	98		tya				tya 								; see if the test was passed.
.011736	f0 01		beq $011739			beq 	_FIXSkip 					; if zero then it has failed.
.011738	60		rts				rts 								; test passed, so continue executing
.011739					_FIXSkip:
.011739	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.01173c	a2 4c 3a	ldx #$3a4c			ldx 	#endifTokenID 				; at the same level.
.01173f	20 9f 17	jsr $01179f			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.011742	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011744	e6 06		inc $06				inc 	DCodePtr
.011746	c9 4c 3a	cmp #$3a4c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011749	d0 04		bne $01174f			bne 	_FIXNoThrow
.01174b	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01174d	c6 2a		dec $2a				dec 	DStack
.01174f					_FIXNoThrow:
.01174f	60		rts				rts
.011750					Handler_ELSE:
.011750	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011752	b5 00		lda $00,x			lda 	$00,x
.011754	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.011757	d0 12		bne $01176b			bne 	_HEBadStructure
.011759	a9 4c 3a	lda #$3a4c			lda 	#endifTokenID 				; only searching one token.
.01175c	a2 00 00	ldx #$0000			ldx 	#$0000
.01175f	20 9f 17	jsr $01179f			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011762	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011764	e6 06		inc $06				inc 	DCodePtr
.011766	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011768	c6 2a		dec $2a				dec 	DStack
.01176a	60		rts				rts
.01176b					_HEBadStructure:
.01176b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01176e	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011776	68 6f 75 74 20 49 66 00
.01177e					Handler_ENDIF:
.01177e	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011780	b5 00		lda $00,x			lda 	$00,x
.011782	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.011785	d0 05		bne $01178c			bne 	_HEIBadStructure
.011787	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011789	c6 2a		dec $2a				dec 	DStack
.01178b	60		rts				rts
.01178c					_HEIBadStructure:
.01178c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01178f	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011797	68 6f 75 74 20 49 66 00
.01179f					ScanForwardLevel:
.01179f	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0117a1	86 0a		stx $0a				stx 	DTemp1+2
.0117a3	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.0117a5	85 0c		sta $0c				sta 	DTemp2
.0117a7	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0117aa					_SFLLoop:
.0117aa	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0117ad	d0 0d		bne $0117bc			bne 	_SFLNoCheck 				; we're in a substructure.
.0117af	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0117b1	f0 09		beq $0117bc			beq 	_SFLNoCheck 				; don't check zero
.0117b3	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0117b5	f0 04		beq $0117bb			beq 	_SFLFound
.0117b7	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117b9	d0 01		bne $0117bc			bne 	_SFLNoCheck
.0117bb					_SFLFound:
.0117bb	60		rts				rts
.0117bc					_SFLNoCheck:
.0117bc	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117be	f0 4f		beq $01180f			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117c0	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117c3	90 40		bcc $011805			bcc 	_SFLSkipString 				; then handle that.
.0117c5	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117c7	e6 06		inc $06				inc 	DCodePtr
.0117c9	a8		tay				tay 								; put token in Y temporarily.
.0117ca	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117cd	c9 00 20	cmp #$2000			cmp 	#$2000
.0117d0	d0 d8		bne $0117aa			bne 	_SFLLoop
.0117d2	98		tya				tya 								; get the token back.
.0117d3	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117d6	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117d9	f0 cf		beq $0117aa			beq 	_SFLLoop
.0117db	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117de	90 ca		bcc $0117aa			bcc 	_SFLLoop
.0117e0	e8		inx				inx 								; increment the level.
.0117e1	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117e4	f0 c4		beq $0117aa			beq 	_SFLLoop
.0117e6	ca		dex				dex 								; decrement the level
.0117e7	ca		dex				dex 								; one overdoes the previous inx.
.0117e8	10 c0		bpl $0117aa			bpl 	_SFLLoop 					; if gone -ve then error.
.0117ea					_SFLError:
.0117ea	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117ec	85 22		sta $22				sta 	DLineNumber
.0117ee	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0117f1	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117f9	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011805					_SFLSkipString:
.011805	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011808	18		clc				clc
.011809	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.01180b	85 06		sta $06				sta 	DCodePtr
.01180d	80 9b		bra $0117aa			bra 	_SFLLoop 					; go round again.
.01180f					_SFLNextLine:
.01180f	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011811	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011814	f0 d4		beq $0117ea			beq 	_SFLError 					; if zero, then there's no more code to search.
.011816	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011819	85 22		sta $22				sta 	DLineNumber
.01181b	18		clc				clc
.01181c	a5 06		lda $06				lda 	DCodePtr
.01181e	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011821	85 06		sta $06				sta 	DCodePtr
.011823	80 85		bra $0117aa			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.011825					Command_FOR:
.011825	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011827	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.01182a	d0 4e		bne $01187a			bne		_CFOBad
.01182c	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find variable
.01182f	b0 03		bcs $011834			bcs 	_CFOExists
.011831	20 4f 04	jsr $01044f			jsr 	VariableCreate				; create it and skip token.
.011834					_CFOExists:
.011834	48		pha				pha 								; push variable address on stack
.011835	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011838	20 de 05	jsr $0105de			jsr 	ExpectToken
.01183b	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the start value
.01183e	bb		tyx				tyx 								; put high value in X
.01183f	7a		ply				ply 								; address of for variable in Y
.011840	99 00 00	sta $0000,y			sta 	$0000,y 					; copy into variable
.011843	8a		txa				txa
.011844	99 02 00	sta $0002,y			sta 	$0002,y
.011847	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.01184a	20 de 05	jsr $0105de			jsr 	ExpectToken
.01184d	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01184f	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011851	95 02		sta $02,x			sta 	$02,x
.011853	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011855	95 04		sta $04,x			sta 	$04,x
.011857	98		tya				tya 								; save variable address at +6
.011858	95 06		sta $06,x			sta 	$06,x
.01185a	a9 47 3c	lda #$3c47			lda 	#forTokenID 				; save for token at +8
.01185d	95 08		sta $08,x			sta 	$08,x
.01185f	8a		txa				txa 								; add 8 to stack position
.011860	18		clc				clc
.011861	69 08 00	adc #$0008			adc 	#8
.011864	85 2a		sta $2a				sta 	DStack
.011866	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011869	b2 06		lda ($06)			lda 	(DCodePtr)
.01186b	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01186e	d0 09		bne $011879			bne 	_CFONoStep
.011870	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.011873	20 de 05	jsr $0105de			jsr 	ExpectToken
.011876	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; and whatever the step is, throw away this time.
.011879					_CFONoStep:
.011879	60		rts				rts
.01187a					_CFOBad:
.01187a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01187d	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011885	76 61 72 69 61 62 6c 65 00
.01188e					Command_NEXT:
.01188e	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011890	b5 00		lda $00,x			lda 	$00,x
.011892	c9 47 3c	cmp #$3c47			cmp 	#forTokenID 				; if not FOR then error
.011895	f0 14		beq $0118ab			beq 	_CNXOk
.011897	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01189a	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0118a2	68 6f 75 74 20 46 6f 72 00
.0118ab					_CNXOk:
.0118ab	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0118ad	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0118b0	90 22		bcc $0118d4			bcc 	_CNXNoVariable
.0118b2	20 9c 03	jsr $01039c			jsr 	VariableFind 				; get address of variable.
.0118b5	90 08		bcc $0118bf			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118b7	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118b9	ca		dex				dex
.0118ba	ca		dex				dex
.0118bb	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118bd	f0 15		beq $0118d4			beq 	_CNXNoVariable 				; then continue
.0118bf					_CNXNextVar:
.0118bf	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0118c2	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118ca	20 76 61 72 69 61 62 6c 65 00
.0118d4					_CNXNoVariable:
.0118d4	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118d6	48		pha				pha
.0118d7	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118d9	38		sec				sec
.0118da	e9 08 00	sbc #$0008			sbc 	#8
.0118dd	85 2a		sta $2a				sta 	DStack
.0118df	aa		tax				tax 								; X points to the stack.
.0118e0	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118e2	85 06		sta $06				sta 	DCodePtr
.0118e4	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the target constant
.0118e7	5a		phy				phy 								; save the target on the stack
.0118e8	48		pha				pha
.0118e9	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118ec	85 08		sta $08				sta 	DTemp1
.0118ee	64 0a		stz $0a				stz 	DTemp1+2
.0118f0	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118f2	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118f5	d0 0b		bne $011902			bne 	_CNXNoStep
.0118f7	e6 06		inc $06				inc 	DCodePtr 					; skip over the step token.
.0118f9	e6 06		inc $06				inc 	DCodePtr
.0118fb	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; work out the step.
.0118fe	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011900	84 0a		sty $0a				sty 	DTemp1+2
.011902					_CNXNoStep:
.011902	68		pla				pla 								; save the Target in DTemp2
.011903	85 0c		sta $0c				sta 	DTemp2
.011905	68		pla				pla
.011906	85 0e		sta $0e				sta 	DTemp2+2
.011908	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.01190a	b5 06		lda $06,x			lda 	$06,x 						; address of the FOR variable into Y
.01190c	a8		tay				tay
.01190d	18		clc				clc
.01190e	b9 00 00	lda $0000,y			lda 	$0000,y
.011911	65 08		adc $08				adc 	DTemp1
.011913	99 00 00	sta $0000,y			sta 	$0000,y
.011916	b9 02 00	lda $0002,y			lda 	$0002,y
.011919	65 0a		adc $0a				adc 	DTemp1+2
.01191b	99 02 00	sta $0002,y			sta 	$0002,y
.01191e	38		sec				sec
.01191f	a5 0c		lda $0c				lda 	DTemp2
.011921	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011924	85 0c		sta $0c				sta 	DTemp2
.011926	a5 0e		lda $0e				lda 	DTemp2+2
.011928	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01192b	85 0e		sta $0e				sta 	DTemp2+2
.01192d	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01192f	f0 0a		beq $01193b			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011931	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011933	45 0a		eor $0a				eor 	DTemp1+2
.011935	10 04		bpl $01193b			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011937	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011938	85 06		sta $06				sta 	DCodePtr
.01193a	60		rts				rts
.01193b					_CNXLoopAgain:
.01193b	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01193c	18		clc				clc
.01193d	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01193f	aa		tax				tax
.011940	69 08 00	adc #$0008			adc 	#8
.011943	85 2a		sta $2a				sta 	DStack
.011945	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011947	85 22		sta $22				sta 	DLineNumber 				; and make that right again.
.011949	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.01194a					Command_ONGOTO:
.01194a	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; on what GOTO :)
.01194d	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011950	d0 25		bne $011977			bne 	_FOGoFail
.011952	c9 00 00	cmp #$0000			cmp 	#0
.011955	f0 20		beq $011977			beq 	_FOGoFail 					; we start with index = 1
.011957	48		pha				pha 								; save count on stack
.011958	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.01195b	20 de 05	jsr $0105de			jsr 	ExpectToken
.01195e	fa		plx				plx 								; put count in X.
.01195f					_FOGoLoop:
.01195f	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011961	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011964	90 73		bcc $0119d9			bcc 	FGOFail 					; if not, then we have an error.
.011966	c9 00 c0	cmp #$c000			cmp 	#$C000
.011969	b0 6e		bcs $0119d9			bcs 	FGOFail
.01196b	ca		dex				dex 								; subtract one, if done, call GOTO code
.01196c	f0 1f		beq $01198d			beq 	Command_GOTO
.01196e	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011970	e6 06		inc $06				inc 	DCodePtr
.011972	20 01 06	jsr $010601			jsr 	ExpectComma 				; expect a comma
.011975	80 e8		bra $01195f			bra 	_FOGoLoop 					; and loop round.
.011977					_FOGoFail:
.011977	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01197a	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011982	47 6f 74 6f 20 76 61 6c 75 65 00
.01198d					Command_GOTO:
.01198d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01198f	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011992	90 45		bcc $0119d9			bcc 	FGOFail 					; we don't do calculate line numbers.
.011994	c9 00 c0	cmp #$c000			cmp 	#$C000
.011997	b0 40		bcs $0119d9			bcs 	FGOFail
.011999	38		sec				sec 								; convert to 0-32767
.01199a	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01199d	aa		tax				tax
.01199e	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0119a1	18		clc				clc
.0119a2	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0119a4	a8		tay				tay
.0119a5					_FGOSearch:
.0119a5	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0119a8	f0 18		beq $0119c2			beq 	_FGOUnknown
.0119aa	8a		txa				txa 								; does it match line number ?
.0119ab	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0119ae	f0 08		beq $0119b8			beq 	_FGOFound 					; yes, then found.
.0119b0	98		tya				tya 								; no follow the link
.0119b1	18		clc				clc
.0119b2	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119b5	a8		tay				tay
.0119b6	80 ed		bra $0119a5			bra 	_FGOSearch 					; and keep looking
.0119b8					_FGOFound:
.0119b8	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119ba	98		tya				tya 								; Y + 4 is the code pointer.
.0119bb	18		clc				clc 								; (skipping link and line #)
.0119bc	69 04 00	adc #$0004			adc 	#4
.0119bf	85 06		sta $06				sta 	DCodePtr
.0119c1	60		rts				rts									; and continue
.0119c2					_FGOUnknown:
.0119c2	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119c5	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119cd	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119d9					FGOFail:
.0119d9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119dc	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119e4	20 4e 75 6d 62 65 72 00
.0119ec					Command_GOSUB:
.0119ec	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119ee	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119f0	18		clc				clc
.0119f1	69 02 00	adc #$0002			adc 	#2
.0119f4	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119f6	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119f8	95 04		sta $04,x			sta 	$04,x
.0119fa	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119fd	95 06		sta $06,x			sta 	$06,x
.0119ff	8a		txa				txa 								; advance stack by 6.
.011a00	18		clc				clc
.011a01	69 06 00	adc #$0006			adc 	#6
.011a04	85 2a		sta $2a				sta 	DStack
.011a06	80 85		bra $01198d			bra 	Command_GOTO 				; and do a GOTO.
.011a08					Command_RETURN:
.011a08	a6 2a		ldx $2a				ldx 	DStack
.011a0a	b5 00		lda $00,x			lda 	$00,x
.011a0c	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011a0f	d0 11		bne $011a22			bne 	_FRetFail
.011a11	8a		txa				txa 								; unpick stack.
.011a12	38		sec				sec
.011a13	e9 06 00	sbc #$0006			sbc 	#6
.011a16	85 2a		sta $2a				sta 	DStack
.011a18	aa		tax				tax
.011a19	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a1b	85 06		sta $06				sta 	DCodePtr
.011a1d	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a1f	85 22		sta $22				sta 	DLineNumber
.011a21	60		rts				rts
.011a22					_FRetFail:
.011a22	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a25	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a2d	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011a3a					Command_REPEAT:
.011a3a	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a3c	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a3e	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a40	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a42	95 04		sta $04,x			sta 	$04,x
.011a44	a9 44 3c	lda #$3c44			lda 	#repeatTokenID 				; save repeat token at +6
.011a47	95 06		sta $06,x			sta 	$06,x
.011a49	8a		txa				txa 								; advance stack by 6.
.011a4a	18		clc				clc
.011a4b	69 06 00	adc #$0006			adc 	#6
.011a4e	85 2a		sta $2a				sta 	DStack
.011a50	60		rts				rts
.011a51					Command_UNTIL:
.011a51	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a53	b5 00		lda $00,x			lda 	$00,x
.011a55	c9 44 3c	cmp #$3c44			cmp 	#repeatTokenID
.011a58	d0 26		bne $011a80			bne 	_FUNFail
.011a5a	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; .... until what.
.011a5d	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a60	d0 15		bne $011a77			bne 	_FUNExit
.011a62	c9 00 00	cmp #$0000			cmp 	#0
.011a65	d0 10		bne $011a77			bne 	_FUNExit
.011a67	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a69	38		sec				sec
.011a6a	e9 06 00	sbc #$0006			sbc 	#6
.011a6d	aa		tax				tax
.011a6e	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a70	85 06		sta $06				sta 	DCodePtr
.011a72	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a74	85 22		sta $22				sta 	DLineNumber
.011a76	60		rts				rts
.011a77					_FUNExit:
.011a77	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a79	38		sec				sec
.011a7a	e9 06 00	sbc #$0006			sbc 	#6
.011a7d	85 2a		sta $2a				sta 	DStack
.011a7f	60		rts				rts
.011a80					_FUNFail:
.011a80	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a83	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a8b	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011a98					Command_WHILE:
.011a98	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a9a	48		pha				pha 								; save on stack
.011a9b	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; while what.
.011a9e	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011aa1	d0 14		bne $011ab7			bne 	_FWHExecute
.011aa3	c9 00 00	cmp #$0000			cmp 	#0
.011aa6	d0 0f		bne $011ab7			bne 	_FWHExecute
.011aa8	68		pla				pla 								; throw away current instruction
.011aa9	a9 49 3a	lda #$3a49			lda 	#wendTokenID 				; skip to WEND
.011aac	a2 00 00	ldx #$0000			ldx 	#0
.011aaf	20 9f 17	jsr $01179f			jsr 	ScanForwardLevel 			; scan forward checking structures
.011ab2	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011ab4	e6 06		inc $06				inc 	DCodePtr
.011ab6	60		rts				rts
.011ab7					_FWHExecute:
.011ab7	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011ab9	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011aba	3a		dec a				dec 	a
.011abb	3a		dec a				dec 	a
.011abc	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011abe	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011ac0	95 04		sta $04,x			sta 	$04,x
.011ac2	a9 45 3c	lda #$3c45			lda 	#whileTokenID 				; save while token at +6
.011ac5	95 06		sta $06,x			sta 	$06,x
.011ac7	8a		txa				txa 								; advance stack by 6.
.011ac8	18		clc				clc
.011ac9	69 06 00	adc #$0006			adc 	#6
.011acc	85 2a		sta $2a				sta 	DStack
.011ace	60		rts				rts
.011acf					Command_WEND:
.011acf	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011ad1	b5 00		lda $00,x			lda 	$00,x
.011ad3	c9 45 3c	cmp #$3c45			cmp 	#whileTokenID
.011ad6	d0 11		bne $011ae9			bne 	_FWEFail
.011ad8	8a		txa				txa 								; unpick stack and always loop back.
.011ad9	38		sec				sec 								; we do the check at the top.
.011ada	e9 06 00	sbc #$0006			sbc 	#6
.011add	85 2a		sta $2a				sta 	DStack
.011adf	aa		tax				tax
.011ae0	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011ae2	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011ae4	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011ae6	85 22		sta $22				sta 	DLineNumber
.011ae8	60		rts				rts
.011ae9					_FWEFail:
.011ae9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011aec	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011af4	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011aff					Command_END:
.011aff	4c e3 1e	jmp $011ee3			jmp 	WarmStart
.011b02					Command_RUN:
.011b02	20 8d 1b	jsr $011b8d			jsr 	Command_CLEAR 				; clear all variables.
.011b05	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011b07	18		clc				clc
.011b08	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011b0b	80 0c		bra $011b19			bra 	FRun_NextLineNumber
.011b0d					RUNExecuteTokenBuffer:
.011b0d	64 22		stz $22				stz 	DLineNumber					; zero line number
.011b0f	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011b12	18		clc				clc
.011b13	65 02		adc $02				adc 	DBaseAddress
.011b15	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b17	80 12		bra $011b2b			bra 	FRun_NextInstruction
.011b19					FRun_NextLineNumber:
.011b19	a8		tay				tay 								; put in Y
.011b1a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b1d	f0 e0		beq $011aff			beq 	Command_END 				; if zero, off the end of the program, so END the program
.011b1f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b22	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b24	98		tya				tya 								; get address back
.011b25	18		clc				clc 								; skip over the link/line number
.011b26	69 04 00	adc #$0004			adc 	#4
.011b29	85 06		sta $06				sta 	DCodePtr
.011b2b					FRun_NextInstruction:
.011b2b	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b2d	20 01 1e	jsr $011e01			jsr 	HWCheckBreak 				; break key pressed.
.011b30	d0 40		bne $011b72			bne 	_FRun_Break
.011b32	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b34	f0 32		beq $011b68			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b36	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b39	f0 18		beq $011b53			beq 	_FRun_Colon
.011b3b	a8		tay				tay 								; save in Y
.011b3c	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b3f	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b42	d0 15		bne $011b59			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b44	98		tya				tya 								; get token back
.011b45	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b48	0a		asl a				asl 	a 							; double it into X
.011b49	aa		tax				tax
.011b4a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b4c	e6 06		inc $06				inc 	DCodePtr
.011b4e	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b51	80 d8		bra $011b2b			bra 	FRun_NextInstruction 		; do the following instruction.
.011b53					_FRun_Colon:
.011b53	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b55	e6 06		inc $06				inc 	DCodePtr
.011b57	80 d2		bra $011b2b			bra 	FRun_NextInstruction 		; do the following instruction.
.011b59					_FRun_TryLET:
.011b59	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b5b	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b5e	90 05		bcc $011b65			bcc		_FRunSyntax 				; no, must be syntax.
.011b60	20 56 12	jsr $011256			jsr 	Command_LET 				; try as a LET.
.011b63	80 c6		bra $011b2b			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b65					_FRunSyntax:
.011b65	82 55 ea	brl $0105bd			brl 	SyntaxError
.011b68					_FRun_EndInstruction:
.011b68	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b6a	f0 0f		beq $011b7b			beq 	_FRun_WarmStart
.011b6c	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b6e	1a		inc a				inc 	a 							; go to link for next line
.011b6f	1a		inc a				inc 	a
.011b70	80 a7		bra $011b19			bra 	FRun_NextLineNumber
.011b72					_FRun_Break:
.011b72	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b75	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b7b					_FRun_WarmStart:
.011b7b	82 65 03	brl $011ee3			brl 	WarmStart
.011b7e					Command_NEW:
.011b7e	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b81	18		clc				clc
.011b82	65 02		adc $02				adc 	DBaseAddress
.011b84	a8		tay				tay
.011b85	a9 00 00	lda #$0000			lda 	#$0000
.011b88	99 00 00	sta $0000,y			sta 	$0000,y
.011b8b	80 00		bra $011b8d			bra 	Command_Clear
.011b8d					Command_CLEAR:
.011b8d	20 99 1b	jsr $011b99			jsr 	ClearVariablesPointersAndStacks
.011b90	60		rts				rts
.011b91					Command_STOP:
.011b91	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b94	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b99					ClearVariablesPointersAndStacks:
.011b99	a9 80 00	lda #$0080			lda 	#BASStack
.011b9c	85 2a		sta $2a				sta 	DStack
.011b9e	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011ba0	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011ba3	a9 00 00	lda #$0000			lda 	#$0000
.011ba6	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ba8	20 d4 1b	jsr $011bd4			jsr 	FindCodeEnd 				; find where the program ends.
.011bab	a8		tay				tay 								; Y points to it.
.011bac	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011baf	99 02 00	sta $0002,y			sta 	$0002,y
.011bb2	99 04 00	sta $0004,y			sta 	$0004,y
.011bb5	98		tya				tya 								; start of working memory up
.011bb6	18		clc				clc
.011bb7	69 06 00	adc #$0006			adc 	#6
.011bba	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011bbd	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bbf	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bc2					_FCLoop:
.011bc2	a9 00 00	lda #$0000			lda 	#$0000
.011bc5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bc7	c8		iny				iny
.011bc8	c8		iny				iny
.011bc9	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bcc	d0 f4		bne $011bc2			bne 	_FCLoop
.011bce	64 16		stz $16				stz 	DTempStringPointer
.011bd0	20 72 06	jsr $010672			jsr 	StringResetPermanent
.011bd3	60		rts				rts
.011bd4					FindCodeEnd:
.011bd4	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011bd7	18		clc				clc
.011bd8	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011bda	a8		tay				tay
.011bdb					_FCELoop:
.011bdb	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011bde	f0 08		beq $011be8			beq 	_FCEExit
.011be0	98		tya				tya 								; add offset
.011be1	18		clc				clc
.011be2	79 00 00	adc $0000,y			adc 	$0000,y
.011be5	a8		tay				tay
.011be6	80 f3		bra $011bdb			bra 	_FCELoop
.011be8					_FCEExit:
.011be8	98		tya				tya 								; return in A
.011be9	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011bea					Function_Dim:
.011bea	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bec	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011bef	f0 2e		beq $011c1f			beq		_FDIMNotArray 				; no, error.
.011bf1	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find it.
.011bf4	b0 34		bcs $011c2a			bcs 	_FDIMExists 				; if it does, that's an error.
.011bf6	20 4f 04	jsr $01044f			jsr 	VariableCreate 				; create the empty variable.
.011bf9	48		pha				pha 								; save array address on the stack.
.011bfa	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; evaluate the size
.011bfd	20 f8 05	jsr $0105f8			jsr 	ExpectRightBracket 			; check the ) following.
.011c00	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011c03	d0 3b		bne $011c40			bne 	_FDIMSize
.011c05	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c08	f0 36		beq $011c40			beq 	_FDIMSize
.011c0a	20 51 1c	jsr $011c51			jsr 	DIMCreateArrayBlock 		; create and return empty array, size A+1.
.011c0d	7a		ply				ply 								; this is where it goes.
.011c0e	99 00 00	sta $0000,y			sta 	$0000,y 					; pointer to first array level block.
.011c11	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c13	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c16	d0 06		bne $011c1e			bne 	_FDIMExit
.011c18	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c1a	e6 06		inc $06				inc 	DCodePtr
.011c1c	80 cc		bra $011bea			bra 	Function_DIM 				; and do another
.011c1e					_FDIMExit:
.011c1e	60		rts				rts
.011c1f					_FDIMNotArray:
.011c1f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c22	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c2a					_FDIMExists:
.011c2a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c2d	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c35	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c40					_FDIMSize:
.011c40	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c43	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c4b	6c 61 72 67 65 00
.011c51					DIMCreateArrayBlock:
.011c51	48		pha				pha 								; save max index for later.
.011c52	1a		inc a				inc 	a 							; work out size + 1 x 4
.011c53	0a		asl a				asl 	a 							; array(7) has 8 elements indexed from zero.
.011c54	b0 34		bcs $011c8a			bcs 	_DCABFail
.011c56	0a		asl a				asl 	a
.011c57	b0 31		bcs $011c8a			bcs 	_DCABFail
.011c59	18		clc				clc 								; 2 for size word, the first word is the max index.
.011c5a	69 02 00	adc #$0002			adc 	#2
.011c5d	b0 2b		bcs $011c8a			bcs 	_DCABFail
.011c5f	85 08		sta $08				sta 	DTemp1 						; save this total size.
.011c61	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; add to pointer.
.011c64	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011c66	48		pha				pha 								; save return address
.011c67	18		clc				clc
.011c68	65 08		adc $08				adc 	DTemp1
.011c6a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011c6c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011c6f	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.011c71	b0 17		bcs $011c8a			bcs 	_DCABFail
.011c73	a6 08		ldx $08				ldx 	DTemp1
.011c75	7a		ply				ply
.011c76	5a		phy				phy
.011c77					_DCABClear:
.011c77	a9 00 00	lda #$0000			lda 	#0
.011c7a	99 00 00	sta $0000,y			sta 	$0000,y
.011c7d	c8		iny				iny
.011c7e	c8		iny				iny
.011c7f	ca		dex				dex
.011c80	ca		dex				dex
.011c81	d0 f4		bne $011c77			bne 	_DCABClear
.011c83	7a		ply				ply 								; restore start address
.011c84	68		pla				pla 								; restore high index
.011c85	99 00 00	sta $0000,y			sta 	$0000,y 					; save high index
.011c88	98		tya				tya 								; return in A.
.011c89	60		rts				rts
.011c8a					_DCABFail:
.011c8a	82 40 e9	brl $0105cd			brl 	OutOfMemoryError

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011c8d					Command_POKE:
.011c8d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c90	48		pha				pha	 								; save on stack
.011c91	5a		phy				phy
.011c92	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011c95	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c98	fa		plx				plx 								; pull address and store in DTemp1
.011c99	86 0a		stx $0a				stx 	DTemp1+2
.011c9b	fa		plx				plx
.011c9c	86 08		stx $08				stx 	DTemp1+0
.011c9e	e2 20		sep #$20			sep 	#$20 						; byte mode
.011ca0	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011ca2	c2 20		rep #$20			rep 	#$20 						; word mode
.011ca4	60		rts				rts
.011ca5					Command_DOKE:
.011ca5	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011ca8	48		pha				pha	 								; save on stack
.011ca9	5a		phy				phy
.011caa	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011cad	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011cb0	fa		plx				plx 								; pull address and store in DTemp1
.011cb1	86 0a		stx $0a				stx 	DTemp1+2
.011cb3	fa		plx				plx
.011cb4	86 08		stx $08				stx 	DTemp1+0
.011cb6	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011cb8	60		rts				rts
.011cb9					Command_LOKE:
.011cb9	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011cbc	48		pha				pha	 								; save on stack
.011cbd	5a		phy				phy
.011cbe	20 01 06	jsr $010601			jsr 	ExpectComma 				; comma seperator.
.011cc1	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011cc4	fa		plx				plx 								; pull address and store in DTemp1
.011cc5	86 0a		stx $0a				stx 	DTemp1+2
.011cc7	fa		plx				plx
.011cc8	86 08		stx $08				stx 	DTemp1+0
.011cca	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011ccc	98		tya				tya
.011ccd	a0 02 00	ldy #$0002			ldy 	#2
.011cd0	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011cd2	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.011cd3					Command_ASSERT:
.011cd3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; something that returns an integer.
.011cd6	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011cd8	05 08		ora $08				ora 	Dtemp1
.011cda	f0 01		beq $011cdd			beq 	_FAssFail
.011cdc	60		rts				rts
.011cdd					_FAssFail:
.011cdd	ea		nop				nop
.011cde	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011ce1	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011ce9	61 69 6c 65 64 00
.011cef					Command_CLS:
.011cef	20 7b 1d	jsr $011d7b			jsr 	HWClearScreen
.011cf2	60		rts				rts
.011cf3					Command_REM:
.011cf3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cf5	f0 0f		beq $011d06			beq 	_FRemExit 					; no comment present
.011cf7	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cfa	f0 0a		beq $011d06			beq 	_FRemExit 					; no comment present
.011cfc	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011cff	b0 06		bcs $011d07			bcs 	_FRemSyntax
.011d01	18		clc				clc 								; add to DCodePtr
.011d02	65 06		adc $06				adc 	DCodePtr
.011d04	85 06		sta $06				sta 	DCodePtr
.011d06					_FRemExit:
.011d06	60		rts				rts
.011d07					_FRemSyntax:
.011d07	82 b3 e8	brl $0105bd			brl 	SyntaxError
.011d0a					Command_LINK:
.011d0a	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; call address same page.
.011d0d	85 08		sta $08				sta 	DTemp1 						; target address
.011d0f	84 0a		sty $0a				sty 	DTemp1+2
.011d11	7b		tdc				tda 								; work out what the actual address is
.011d12	18		clc				clc
.011d13	69 08 00	adc #$0008			adc 	#DTemp1
.011d16	8f 4b 1d 01	sta $011d4b			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011d1a	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011d1c	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011d1f	48		pha				pha
.011d20	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011d23	aa		tax				tax
.011d24	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011d27	a8		tay				tay
.011d28	68		pla				pla
.011d29	22 4a 1d 01	jsl $011d4a			jsl 	_FLIExecuteIt
.011d2d	5a		phy				phy 								; save Y
.011d2e	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011d30	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d33	8a		txa				txa
.011d34	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d37	68		pla				pla
.011d38	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d3b	c8		iny				iny 								; point to their high bytes and clear them
.011d3c	c8		iny				iny
.011d3d	a9 00 00	lda #$0000			lda 	#0
.011d40	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d43	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d46	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d49	60		rts				rts
.011d4a					_FLIExecuteIt:
.011d4a	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.
.011d4d					Command_VDU:
.011d4d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get integer to YA.
.011d50	a8		tay				tay 								; put into Y
.011d51	29 ff 00	and #$00ff			and 	#$00FF 						; mask out LSB
.011d54	20 94 1d	jsr $011d94			jsr 	HWPrintChar 				; print the LSB.
.011d57	b2 06		lda ($06)			lda 	(DCodePtr)
.011d59	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if , goto next
.011d5c	f0 0e		beq $011d6c			beq 	_CVDUNext
.011d5e	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; if ; print MSB and goto next
.011d61	f0 01		beq $011d64			beq 	_CVDUHighByte
.011d63					_CVDUExit:
.011d63	60		rts				rts
.011d64					_CVDUHighByte:
.011d64	98		tya				tya 								; get back.
.011d65	eb		xba				xba 								; byte swap
.011d66	29 ff 00	and #$00ff			and 	#$00FF 						; mask and print
.011d69	20 94 1d	jsr $011d94			jsr 	HWPrintChar
.011d6c					_CVDUNext:
.011d6c	e6 06		inc $06				inc 	DCodePtr 					; skip , ;
.011d6e	e6 06		inc $06				inc 	DCodePtr
.011d70	b2 06		lda ($06)			lda 	(DCodePtr)					; continue ?
.011d72	f0 ef		beq $011d63			beq		_CVDUExit
.011d74	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011d77	f0 ea		beq $011d63			beq 	_CVDUExit
.011d79	80 d2		bra $011d4d			bra 	Command_VDU

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d7b					HWClearScreen:
.011d7b	48		pha				pha
.011d7c	da		phx				phx
.011d7d	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d80	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d83	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d87	ca		dex				dex
.011d88	10 f6		bpl $011d80			bpl 	_CS0
.011d8a	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d8d	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d91	fa		plx				plx
.011d92	68		pla				pla
.011d93	60		rts				rts
.011d94					HWPrintChar:
.011d94	48		pha				pha
.011d95	da		phx				phx
.011d96	5a		phy				phy
.011d97	48		pha				pha 								; cursor position -> X
.011d98	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d9c	aa		tax				tax
.011d9d	68		pla				pla
.011d9e	c9 ff ff	cmp #$ffff			cmp 	#-1
.011da1	f0 08		beq $011dab			beq 	_HWPCNoWrite
.011da3	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011da5	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011da9	c2 20		rep #$20			rep 	#$20
.011dab					_HWPCNoWrite:
.011dab	e8		inx				inx 								; bump cursor position.
.011dac	8a		txa				txa
.011dad	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011db1	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011db4	d0 2b		bne $011de1			bne 	_HWNotEnd
.011db6	38		sec				sec 	 							; back up one line
.011db7	e9 40 00	sbc #$0040			sbc 	#sWidth
.011dba	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011dbe	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011dc1					_HWScrollUp:
.011dc1	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011dc5	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011dc9	e8		inx				inx
.011dca	e8		inx				inx
.011dcb	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011dce	d0 f1		bne $011dc1			bne 	_HWScrollUp
.011dd0	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011dd3					_HWBlank:
.011dd3	a9 20 20	lda #$2020			lda 	#$2020
.011dd6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011dda	e8		inx				inx
.011ddb	e8		inx				inx
.011ddc	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011ddf	d0 f2		bne $011dd3			bne 	_HWBlank
.011de1					_HWNotEnd:
.011de1	7a		ply				ply
.011de2	fa		plx				plx
.011de3	68		pla				pla
.011de4	60		rts				rts
.011de5					HWNewLine:
.011de5	48		pha				pha
.011de6	da		phx				phx
.011de7	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011dea					HWMoveCursor:
.011dea	a9 ff ff	lda #$ffff			lda 	#-1
.011ded	20 94 1d	jsr $011d94			jsr 	HWPrintChar
.011df0	8a		txa				txa
.011df1	2f 20 80 0f	and $0f8020			and 	HWCursor
.011df5	d0 f3		bne $011dea			bne 	HWMoveCursor
.011df7	fa		plx				plx
.011df8	68		pla				pla
.011df9	60		rts				rts
.011dfa	48		pha		HWTab:	pha
.011dfb	da		phx				phx
.011dfc	a2 07 00	ldx #$0007			ldx 	#7
.011dff	80 e9		bra $011dea			bra 	HWMoveCursor
.011e01					HWCheckBreak:
.011e01	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011e05	60		rts				rts
.011e06					HWInkey:
.011e06	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011e0a	60		rts				rts
.011e0b					HWInputLine:
.011e0b	20 06 1e	jsr $011e06			jsr 	HWInkey 					; get a keystroke.
.011e0e	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011e12	f0 f7		beq $011e0b			beq 	HWInputLine
.011e14					_HWILWait:
.011e14	20 06 1e	jsr $011e06			jsr 	HWInkey
.011e17	c9 00 00	cmp #$0000			cmp		#0
.011e1a	f0 f8		beq $011e14			beq 	_HWILWait
.011e1c	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011e20	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011e23	90 2f		bcc $011e54			bcc 	_HWILControl
.011e25	20 94 1d	jsr $011d94			jsr 	HWPrintChar 				; print out.
.011e28	80 e1		bra $011e0b			bra 	HWInputLine 				; loop back.
.011e2a					_HWILBackSpace:
.011e2a	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011e2e	f0 db		beq $011e0b			beq 	HWInputLine
.011e30	aa		tax				tax
.011e31	ca		dex				dex
.011e32	a9 20 00	lda #$0020			lda 	#" "
.011e35	e2 20		sep #$20			sep 	#$20
.011e37	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011e3b	c2 20		rep #$20			rep 	#$20
.011e3d	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e40					_HWILMove:
.011e40	8a		txa				txa
.011e41	18		clc				clc
.011e42	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011e46	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011e49	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011e4d	80 bc		bra $011e0b			bra 	HWInputLine
.011e4f					_HWILClear:
.011e4f	20 7b 1d	jsr $011d7b			jsr 	HWClearScreen
.011e52	80 b7		bra $011e0b			bra 	HWInputLine
.011e54					_HWILControl:
.011e54	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011e57	f0 60		beq $011eb9			beq 	_HWILTab
.011e59	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011e5c	f0 cc		beq $011e2a			beq 	_HWILBackSpace
.011e5e	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011e61	c9 17 00	cmp #$0017			cmp 	#23
.011e64	f0 da		beq $011e40			beq 	_HWILMove
.011e66	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e69	c9 13 00	cmp #$0013			cmp 	#19
.011e6c	f0 d2		beq $011e40			beq 	_HWILMove
.011e6e	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e71	c9 01 00	cmp #$0001			cmp 	#1
.011e74	f0 ca		beq $011e40			beq 	_HWILMove
.011e76	a2 01 00	ldx #$0001			ldx 	#1
.011e79	c9 04 00	cmp #$0004			cmp 	#4
.011e7c	f0 c2		beq $011e40			beq 	_HWILMove
.011e7e	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e81	f0 cc		beq $011e4f			beq 	_HWILClear
.011e83	c9 0d 00	cmp #$000d			cmp 	#13
.011e86	d0 83		bne $011e0b			bne 	HWInputLine
.011e88	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e8c	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e8f	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e91	a9 0f 00	lda #$000f			lda 	#$000F
.011e94	85 0a		sta $0a				sta 	DTemp1+2
.011e96	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e99					_HWILCopy:
.011e99	bb		tyx				tyx
.011e9a	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e9c	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011ea0	c8		iny				iny
.011ea1	c8		iny				iny
.011ea2	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011ea5	d0 f2		bne $011e99			bne 	_HWILCopy
.011ea7	a9 00 00	lda #$0000			lda 	#0
.011eaa	bb		tyx				tyx
.011eab	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011eaf	20 e5 1d	jsr $011de5			jsr 	HWNewLine 					; next line.
.011eb2	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011eb5	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011eb8	60		rts				rts
.011eb9					_HWILTab:
.011eb9	20 fa 1d	jsr $011dfa			jsr 	HWTab
.011ebc	82 4c ff	brl $011e0b			brl 	HWInputLine

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011ebf					SwitchBasicInstance:
.011ebf	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011ec1	20 7b 1d	jsr $011d7b			jsr 	HWClearScreen 						; clear screen
.011ec4	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011ec7	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011ec9	86 02		stx $02				stx		DBaseAddress
.011ecb	84 04		sty $04				sty 	DHighAddress
.011ecd	ba		tsx				tsx 										; save the current SP.
.011ece	86 3a		stx $3a				stx 	DStack65816
.011ed0	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011ed1	48		pha				pha 										; then copy it into B.
.011ed2	ab		plb				plb
.011ed3	ab		plb				plb
.011ed4	20 99 1b	jsr $011b99			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ed7	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011eda	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011edc	f0 05		beq $011ee3			beq 	WarmStart
.011ede	3a		dec a				dec 	a 									; decrement zero.
.011edf	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ee1	80 18		bra $011efb			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011ee3					WarmStart:
.011ee3	a2 49 1f	ldx #$1f49			ldx 	#BasicPrompt & $FFFF
.011ee6	20 3a 06	jsr $01063a			jsr 	PrintROMMessage
.011ee9					NextCommand:
.011ee9	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011eeb	9a		txs				txs
.011eec	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011eee	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011ef1	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011ef3	d0 52		bne $011f47			bne 	ExitEmulator
.011ef5	20 0b 1e	jsr $011e0b			jsr 	HWInputLine 						; read line to YA.
.011ef8	20 7e 07	jsr $01077e			jsr 	Tokenise 							; tokenise it.
.011efb					ExecuteTokenBuffer:
.011efb	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011efe	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011f00	f0 e7		beq $011ee9			beq 	NextCommand 						; nothing.
.011f02	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011f05	90 27		bcc $011f2e			bcc 	_ETBCommand
.011f07	c9 00 c0	cmp #$c000			cmp 	#$C000
.011f0a	b0 22		bcs $011f2e			bcs 	_ETBCommand
.011f0c	38		sec				sec
.011f0d	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011f10	f0 1f		beq $011f31			beq 	_ETBError
.011f12	48		pha				pha
.011f13	20 c2 04	jsr $0104c2			jsr 	LineDelete 							; delete the line, if it exists.
.011f16	20 99 1b	jsr $011b99			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011f19	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011f1c	18		clc				clc
.011f1d	65 02		adc $02				adc 	DBaseAddress
.011f1f	a8		tay				tay 										; Y contains the code.
.011f20	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011f23	f0 c4		beq $011ee9			beq 	NextCommand 						; no, next command.
.011f25	68		pla				pla 										; line number in A, code in Y.
.011f26	20 fd 04	jsr $0104fd			jsr 	LineInsert 							; insert the line
.011f29	20 99 1b	jsr $011b99			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011f2c	80 bb		bra $011ee9			bra 	NextCommand
.011f2e					_ETBCommand:
.011f2e	4c 0d 1b	jmp $011b0d			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011f31					_ETBError:
.011f31	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011f34	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011f3c	61 76 65 20 6c 69 6e 65 20 30 00
.011f47					ExitEmulator:
.011f47	02 00		cop #$00			cop 	#0
.011f49					BasicPrompt:
>011f49	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 7e 07	jsr $01077e			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	2a b0 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 01 00 33 3e ed dc
>024208	d2 d9 17 d0 04 40 28 32 00 00 0e 00 02 00 33 3e
>024218	a3 d5 04 40 28 32 00 00 10 00 03 00 33 3e 1a dd
>024228	08 d0 03 40 28 32 00 00 0e 00 04 00 33 3e c8 d4
>024238	05 40 28 32 00 00 12 00 05 00 33 3e cd dc 66 de
>024248	15 d0 06 40 28 32 00 00 0e 00 06 00 33 3e d9 d5
>024258	05 40 28 32 00 00 10 00 07 00 33 3e b8 fd b8 f2
>024268	02 40 28 32 00 00 10 00 08 00 33 3e 8a fd fb f3
>024278	06 40 28 32 00 00 0e 00 09 00 33 3e 06 f0 02 40
>024288	28 32 00 00 12 00 0a 00 33 3e d6 fd c4 f8 1d f0
>024298	05 40 28 32 00 00 10 00 0b 00 33 3e 14 fe c5 f4
>0242a8	02 40 28 32 00 00 10 00 0c 00 33 3e 5b fe 4c f4
>0242b8	05 40 28 32 00 00 12 00 0d 00 2d 3e 1a c0 06 22
>0242c8	0b 24 03 10 1b 72 00 00 12 00 0e 00 2d 3e 6e ce
>0242d8	16 c0 06 22 0b 24 9f 40 00 00 10 00 0f 00 82 cd
>0242e8	c6 c4 06 22 0b 24 87 40 00 00 0e 00 10 00 17 c0
>0242f8	06 22 04 10 cd 5e 00 00 10 00 11 00 82 cd 1a c0
>024308	06 22 03 10 5e b3 00 00 14 00 12 00 2d 3e 28 cd
>024318	2e c2 06 22 0b 24 05 10 74 6d 00 00 12 00 13 00
>024328	2d 3e 0c c0 06 22 0b 24 01 10 e5 50 00 00 12 00
>024338	14 00 2d 3e c6 cc fe c2 06 22 03 10 7f b3 00 00
>024348	0e 00 15 00 80 c5 06 22 03 10 ce 92 00 00 10 00
>024358	16 00 2d 3e 8c c5 06 22 01 10 ca af 00 00 12 00
>024368	17 00 da cd 1f c0 06 22 0b 24 01 10 e6 98 00 00
>024378	0e 00 18 00 2d 3e 12 c0 06 22 25 b2 00 00 14 00
>024388	19 00 2d 3e 35 ce 16 c9 01 c0 06 22 01 10 2d 9b
>024398	00 00 14 00 1a 00 04 cd 66 ce 0a c0 06 22 0b 24
>0243a8	02 10 70 71 00 00 12 00 1b 00 40 ce 16 c0 06 22
>0243b8	0b 24 02 10 91 94 00 00 10 00 1c 00 cb cc 2c c4
>0243c8	06 22 0b 24 3f 40 00 00 0e 00 1d 00 2d 3e dd c5
>0243d8	06 22 eb 98 00 00 12 00 1e 00 06 ce b5 c9 05 c0
>0243e8	06 22 01 10 bd a0 00 00 10 00 1f 00 a8 cd be c3
>0243f8	06 22 0b 24 bf 40 00 00 12 00 20 00 2d 3e ba cd
>024408	c8 c1 06 22 02 10 4f 4b 00 00 0e 00 21 00 14 c0
>024418	06 22 05 10 3f 93 00 00 14 00 22 00 f3 cc 24 cd
>024428	16 c0 06 22 0b 24 05 10 90 44 00 00 12 00 23 00
>024438	2d 3e b3 cd 3f c2 06 22 0b 24 03 40 00 00 0e 00
>024448	24 00 3c c6 06 22 02 10 36 72 00 00 12 00 25 00
>024458	69 ce a1 cd 1b c0 06 22 02 10 d4 66 00 00 10 00
>024468	26 00 2d 3e 02 c6 06 22 03 10 34 9f 00 00 10 00
>024478	27 00 2d 3e e7 c5 06 22 0b 24 c8 40 00 00 14 00
>024488	28 00 2d 3e 5f ce 65 cb 02 c0 06 22 05 10 60 57
>024498	00 00 12 00 29 00 2d 3e 2f ce 23 c0 06 22 0b 24
>0244a8	4e 40 00 00 14 00 2a 00 5c cd 4d c9 17 c0 06 22
>0244b8	0b 24 01 10 af a4 00 00 0c 00 2b 00 03 c0 06 22
>0244c8	b0 40 00 00 12 00 2c 00 5b cd 02 c0 06 22 0b 24
>0244d8	01 10 dc 8c 00 00 14 00 2d 00 2d 3e 48 cd f1 c4
>0244e8	06 22 0b 24 03 10 d7 8f 00 00 12 00 2e 00 2d 3e
>0244f8	1d cd 1f c0 06 22 02 10 1a 81 00 00 10 00 2f 00
>024508	2d 3e e2 cd 9b c3 06 22 2e b5 00 00 16 00 30 00
>024518	2d 3e 3f ce fc c8 0d c0 06 22 0b 24 03 10 c5 9e
>024528	00 00 12 00 31 00 2d 3e 30 cd c3 c3 06 22 0b 24
>024538	5f 40 00 00 10 00 32 00 02 c0 06 22 0b 24 03 10
>024548	e2 46 00 00 10 00 33 00 0a ce 2b c3 06 22 01 10
>024558	db 52 00 00 12 00 34 00 c7 cc e6 ca 11 c0 06 22
>024568	05 10 69 6e 00 00 12 00 35 00 8a ed fb ec 09 e0
>024578	06 22 04 00 01 59 00 00 0e 00 36 00 11 e0 06 22
>024588	04 00 00 00 00 00 16 00 37 00 c9 ec 02 e0 06 22
>024598	0a 00 07 4f 43 47 54 20 20 54 00 00 16 00 38 00
>0245a8	63 e6 06 22 0c 00 09 41 4d 4e 42 44 4c 4e 20 50
>0245b8	00 00 10 00 39 00 83 e5 06 22 06 00 03 46 41 4e
>0245c8	00 00 1c 00 3a 00 2f ed c4 e9 22 e0 06 22 0e 00
>0245d8	0a 41 50 54 44 52 56 20 43 49 49 00 00 00 18 00
>0245e8	3b 00 2d 3e fd e4 06 22 0c 00 09 53 20 4b 49 41
>0245f8	49 49 4f 53 00 00 12 00 3c 00 2d 3e b9 e5 06 22
>024608	06 00 02 57 49 00 00 00 18 00 3d 00 2d 3e 21 ed
>024618	23 e0 06 22 0a 00 07 41 54 4a 51 48 20 47 00 00
>024628	12 00 3e 00 2d 3e 2d ee 17 e0 06 22 04 00 01 54
>024638	00 00 14 00 3f 00 2d 3e 74 ed e4 e9 23 e0 06 22
>024648	04 00 01 52 00 00 10 00 40 00 2d 3e 0b e0 06 22
>024658	04 00 01 4f 00 00 14 00 41 00 2d 3e d3 e5 06 22
>024668	08 00 05 59 5a 53 20 4b 00 00 1c 00 42 00 2d 3e
>024678	ce ec 19 e0 06 22 0e 00 0a 56 58 54 50 20 20 4f
>024688	4e 49 4e 00 00 00 14 00 43 00 2d 3e 04 e0 06 22
>024698	08 00 04 44 47 20 54 00 00 00 16 00 44 00 2d 3e
>0246a8	cf ed 1a e0 06 22 08 00 04 44 4a 5a 53 00 00 00
>0246b8	1a 00 45 00 14 ee 5c e3 06 22 0e 00 0b 49 46 20
>0246c8	41 20 44 20 20 58 47 48 00 00 12 00 46 00 28 ee
>0246d8	18 e0 06 22 06 00 03 52 51 49 00 00 1a 00 47 00
>0246e8	2d 3e d8 ed 30 eb 08 e0 06 22 0a 00 06 44 4c 20
>0246f8	20 20 59 00 00 00 12 00 48 00 ae ed 23 e0 06 22
>024708	06 00 02 42 51 00 00 00 14 00 49 00 2d 3e 0f e0
>024718	06 22 08 00 05 58 45 51 20 42 00 00 12 00 4a 00
>024728	2d 3e 03 e0 06 22 06 00 03 57 20 59 00 00 10 00
>024738	4b 00 05 e0 06 22 06 00 03 52 55 57 00 00 18 00
>024748	4c 00 2d 3e 1d ed 71 e0 06 22 0a 00 06 4e 20 48
>024758	4a 4c 52 00 00 00 12 00 4d 00 0e e0 06 22 08 00
>024768	05 49 43 4e 43 43 00 00 1c 00 4e 00 2d 3e fa ec
>024778	15 e0 06 22 0e 00 0a 42 49 44 4e 56 42 43 4d 43
>024788	4f 00 00 00 16 00 4f 00 2d 3e 03 ee 12 e0 06 22
>024798	08 00 05 51 56 42 54 43 00 00 14 00 50 00 2d 3e
>0247a8	08 e0 06 22 08 00 05 4c 55 4a 5a 4a 00 00 18 00
>0247b8	51 00 f4 ec 02 e0 06 22 0c 00 08 41 47 4b 54 5a
>0247c8	4b 58 47 00 00 00 18 00 52 00 20 ed 15 e0 06 22
>0247d8	0c 00 09 52 48 20 43 46 4e 5a 58 41 00 00 0e 00
>0247e8	53 00 17 e0 06 22 04 00 00 00 00 00 12 00 54 00
>0247f8	2d 3e 59 ed 1b e0 06 22 04 00 01 48 00 00 0e 00
>024808	55 00 7a e5 06 22 04 00 00 00 00 00 0e 00 56 00
>024818	0b e6 06 22 04 00 01 43 00 00 18 00 57 00 13 ee
>024828	1b e0 06 22 0c 00 09 55 20 51 4f 4a 56 20 20 54
>024838	00 00 16 00 58 00 2d 3e d2 ec 99 e3 06 22 08 00
>024848	05 43 56 54 4a 42 00 00 18 00 59 00 1e ed 01 eb
>024858	12 e0 06 22 0a 00 06 54 47 4c 59 52 58 00 00 00
>024868	16 00 5a 00 2d 3e 3b ee b7 e1 06 22 08 00 04 41
>024878	49 42 43 00 00 00 12 00 5b 00 2d 3e 02 e0 06 22
>024888	06 00 03 45 20 4e 00 00 16 00 5c 00 2d 3e d5 e5
>024898	06 22 0a 00 06 58 51 4a 20 59 44 00 00 00 60 00
>0248a8	5d 00 ed dc d2 d9 17 d0 00 40 28 32 06 22 01 10
>0248b8	e9 96 26 32 ed dc d2 d9 17 d0 01 40 28 32 06 22
>0248c8	0b 24 45 40 26 32 ed dc d2 d9 17 d0 02 40 28 32
>0248d8	06 22 0b 24 04 10 06 ab 26 32 ed dc d2 d9 17 d0
>0248e8	03 40 28 32 06 22 04 10 09 72 26 32 ed dc d2 d9
>0248f8	17 d0 04 40 28 32 06 22 05 10 92 a1 00 00 4c 00
>024908	5e 00 a3 d5 00 40 28 32 06 22 02 10 5c a1 26 32
>024918	a3 d5 01 40 28 32 06 22 05 10 67 9f 26 32 a3 d5
>024928	02 40 28 32 06 22 01 10 d9 a0 26 32 a3 d5 03 40
>024938	28 32 06 22 0b 24 06 10 cb 41 26 32 a3 d5 04 40
>024948	28 32 06 22 0b 24 c7 79 00 00 48 00 5f 00 1a dd
>024958	08 d0 00 40 28 32 06 22 04 10 59 6a 26 32 1a dd
>024968	08 d0 01 40 28 32 06 22 0b 24 02 10 cd b2 26 32
>024978	1a dd 08 d0 02 40 28 32 06 22 0b 24 c4 40 26 32
>024988	1a dd 08 d0 03 40 28 32 06 22 0b 24 02 10 40 90
>024998	00 00 58 00 60 00 c8 d4 00 40 28 32 06 22 04 10
>0249a8	3e 44 26 32 c8 d4 01 40 28 32 06 22 01 10 fb 7c
>0249b8	26 32 c8 d4 02 40 28 32 06 22 0b 24 05 10 38 89
>0249c8	26 32 c8 d4 03 40 28 32 06 22 0b 24 3d 40 26 32
>0249d8	c8 d4 04 40 28 32 06 22 71 40 26 32 c8 d4 05 40
>0249e8	28 32 06 22 02 10 e0 bf 00 00 88 00 61 00 cd dc
>0249f8	66 de 15 d0 00 40 28 32 06 22 01 10 cd 5d 26 32
>024a08	cd dc 66 de 15 d0 01 40 28 32 06 22 0b 24 05 10
>024a18	88 5a 26 32 cd dc 66 de 15 d0 02 40 28 32 06 22
>024a28	02 10 a8 46 26 32 cd dc 66 de 15 d0 03 40 28 32
>024a38	06 22 02 10 81 56 26 32 cd dc 66 de 15 d0 04 40
>024a48	28 32 06 22 0b 24 53 bc 26 32 cd dc 66 de 15 d0
>024a58	05 40 28 32 06 22 0b 24 01 10 59 45 26 32 cd dc
>024a68	66 de 15 d0 06 40 28 32 06 22 0b 24 04 10 dc 7a
>024a78	00 00 58 00 62 00 d9 d5 00 40 28 32 06 22 02 10
>024a88	df 81 26 32 d9 d5 01 40 28 32 06 22 0b 24 2f 40
>024a98	26 32 d9 d5 02 40 28 32 06 22 0b 24 01 10 2a 5b
>024aa8	26 32 d9 d5 03 40 28 32 06 22 0b 24 b7 61 26 32
>024ab8	d9 d5 04 40 28 32 06 22 02 10 38 8d 26 32 d9 d5
>024ac8	05 40 28 32 06 22 aa 40 00 00 48 00 63 00 b8 fd
>024ad8	b8 f2 00 40 28 32 06 22 0c 00 09 59 43 52 51 50
>024ae8	49 52 43 47 26 32 b8 fd b8 f2 01 40 28 32 06 22
>024af8	06 00 02 53 54 00 26 32 b8 fd b8 f2 02 40 28 32
>024b08	06 22 0e 00 0b 52 56 4b 41 20 42 4a 43 59 52 45
>024b18	00 00 9a 00 64 00 8a fd fb f3 00 40 28 32 06 22
>024b28	0e 00 0a 44 4a 20 52 20 56 42 50 20 55 00 26 32
>024b38	8a fd fb f3 01 40 28 32 06 22 0c 00 09 57 20 57
>024b48	41 53 4b 4b 57 57 26 32 8a fd fb f3 02 40 28 32
>024b58	06 22 0e 00 0a 41 48 58 4e 42 20 56 20 48 43 00
>024b68	26 32 8a fd fb f3 03 40 28 32 06 22 04 00 00 00
>024b78	26 32 8a fd fb f3 04 40 28 32 06 22 08 00 04 50
>024b88	4a 46 51 00 26 32 8a fd fb f3 05 40 28 32 06 22
>024b98	08 00 04 44 4c 46 53 00 26 32 8a fd fb f3 06 40
>024ba8	28 32 06 22 06 00 03 4e 59 4e 00 00 38 00 65 00
>024bb8	06 f0 00 40 28 32 06 22 04 00 00 00 26 32 06 f0
>024bc8	01 40 28 32 06 22 08 00 05 4d 42 4a 48 41 26 32
>024bd8	06 f0 02 40 28 32 06 22 0a 00 07 50 41 4c 20 20
>024be8	42 41 00 00 8e 00 66 00 d6 fd c4 f8 1d f0 00 40
>024bf8	28 32 06 22 04 00 00 00 26 32 d6 fd c4 f8 1d f0
>024c08	01 40 28 32 06 22 04 00 01 5a 26 32 d6 fd c4 f8
>024c18	1d f0 02 40 28 32 06 22 0c 00 09 53 59 20 20 54
>024c28	20 51 20 55 26 32 d6 fd c4 f8 1d f0 03 40 28 32
>024c38	06 22 08 00 05 52 43 4a 43 46 26 32 d6 fd c4 f8
>024c48	1d f0 04 40 28 32 06 22 0e 00 0a 53 58 49 48 53
>024c58	43 20 42 20 48 00 26 32 d6 fd c4 f8 1d f0 05 40
>024c68	28 32 06 22 0c 00 08 4d 4e 56 48 46 4e 20 4d 00
>024c78	00 00 42 00 67 00 14 fe c5 f4 00 40 28 32 06 22
>024c88	0c 00 09 57 20 56 56 20 20 4d 43 4c 26 32 14 fe
>024c98	c5 f4 01 40 28 32 06 22 0a 00 07 55 20 41 44 56
>024ca8	20 51 26 32 14 fe c5 f4 02 40 28 32 06 22 04 00
>024cb8	01 47 00 00 84 00 68 00 5b fe 4c f4 00 40 28 32
>024cc8	06 22 04 00 00 00 26 32 5b fe 4c f4 01 40 28 32
>024cd8	06 22 0e 00 0a 4f 20 4b 20 50 58 4d 45 20 52 00
>024ce8	26 32 5b fe 4c f4 02 40 28 32 06 22 0e 00 0b 4d
>024cf8	45 41 59 20 20 51 47 20 20 42 26 32 5b fe 4c f4
>024d08	03 40 28 32 06 22 04 00 00 00 26 32 5b fe 4c f4
>024d18	04 40 28 32 06 22 08 00 04 57 55 42 53 00 26 32
>024d28	5b fe 4c f4 05 40 28 32 06 22 0c 00 08 45 43 53
>024d38	4f 20 48 4f 42 00 00 00 18 00 69 00 2e 3e 13 30
>024d48	0b 24 03 10 c5 9e 28 32 06 22 03 10 c5 9e 00 00
>024d58	18 00 6a 00 2e 3e 12 30 3f ce fc c8 0d c0 28 32
>024d68	06 22 0b 24 01 40 00 00 12 00 6b 00 2e 3e 14 30
>024d78	b9 e5 28 32 06 22 02 40 00 00 22 00 6c 00 2e 3e
>024d88	15 30 0a 00 06 2d 38 34 30 41 33 00 24 32 0b 40
>024d98	28 32 06 22 0b 24 03 10 c5 9e 00 00 22 00 6d 00
>024da8	2e 3e 16 30 0b 24 03 10 c5 9e 24 32 0b 40 28 32
>024db8	06 22 0a 00 06 2d 38 34 30 61 33 00 00 00 18 00
>024dc8	6e 00 2e 3e 1f 30 b9 e5 24 32 01 40 28 32 06 22
>024dd8	04 00 01 57 00 00 18 00 6f 00 2e 3e 21 30 b9 e5
>024de8	24 32 01 40 28 32 06 22 04 00 01 49 00 00 20 00
>024df8	70 00 2e 3e 20 30 06 00 02 57 49 00 24 32 02 40
>024e08	24 32 00 40 28 32 06 22 04 00 00 00 00 00 1e 00
>024e18	71 00 2e 3e 22 30 08 00 05 51 56 42 54 43 24 32
>024e28	04 00 01 42 28 32 06 22 03 40 00 00 16 00 72 00
>024e38	2e 3e 13 30 05 10 60 57 28 32 06 22 05 10 60 57
>024e48	00 00 14 00 73 00 2e 3e 12 30 05 10 60 57 28 32
>024e58	06 22 01 40 00 00 14 00 74 00 2e 3e 14 30 2d ee
>024e68	17 e0 28 32 06 22 01 40 00 00 20 00 75 00 2e 3e
>024e78	15 30 0a 00 07 33 33 35 30 31 32 30 24 32 06 40
>024e88	28 32 06 22 05 10 60 57 00 00 20 00 76 00 2e 3e
>024e98	16 30 05 10 60 57 24 32 06 40 28 32 06 22 0a 00
>024ea8	07 33 33 35 30 31 32 30 00 00 1a 00 77 00 2e 3e
>024eb8	1f 30 2d ee 17 e0 24 32 00 40 28 32 06 22 04 00
>024ec8	00 00 00 00 1a 00 78 00 2e 3e 21 30 2d ee 17 e0
>024ed8	24 32 00 40 28 32 06 22 04 00 00 00 00 00 1e 00
>024ee8	79 00 2e 3e 20 30 04 00 01 54 24 32 02 40 24 32
>024ef8	01 40 28 32 06 22 04 00 00 00 00 00 1c 00 7a 00
>024f08	2e 3e 22 30 06 00 03 57 20 59 24 32 04 00 01 20
>024f18	28 32 06 22 02 40 00 00 16 00 7b 00 2e 3e 13 30
>024f28	48 cd f1 c4 28 32 06 22 03 10 d7 8f 00 00 18 00
>024f38	7c 00 2e 3e 12 30 0b 24 03 10 d7 8f 28 32 06 22
>024f48	0b 24 01 40 00 00 14 00 7d 00 2e 3e 14 30 59 ed
>024f58	1b e0 28 32 06 22 01 40 00 00 22 00 7e 00 2e 3e
>024f68	15 30 0a 00 06 2d 38 31 32 33 39 00 24 32 0b 40
>024f78	28 32 06 22 0b 24 03 10 d7 8f 00 00 22 00 7f 00
>024f88	2e 3e 16 30 0b 24 03 10 d7 8f 24 32 0b 40 28 32
>024f98	06 22 0a 00 06 2d 38 31 32 33 39 00 00 00 1a 00
>024fa8	80 00 2e 3e 1f 30 04 00 01 48 24 32 00 40 28 32
>024fb8	06 22 04 00 00 00 00 00 1a 00 81 00 2e 3e 21 30
>024fc8	04 00 01 48 24 32 00 40 28 32 06 22 04 00 00 00
>024fd8	00 00 1e 00 82 00 2e 3e 20 30 04 00 01 48 24 32
>024fe8	03 40 24 32 01 40 28 32 06 22 04 00 00 00 00 00
>024ff8	1e 00 83 00 2e 3e 22 30 08 00 04 44 4c 46 53 00
>025008	24 32 04 00 01 53 28 32 06 22 04 40 00 00 18 00
>025018	84 00 2e 3e 13 30 0b 24 03 10 e2 46 28 32 06 22
>025028	03 10 e2 46 00 00 14 00 85 00 2e 3e 12 30 02 c0
>025038	28 32 06 22 0b 24 01 40 00 00 14 00 86 00 2e 3e
>025048	14 30 d2 ec 99 e3 28 32 06 22 05 40 00 00 24 00
>025058	87 00 2e 3e 15 30 0c 00 09 2d 31 31 32 30 30 32
>025068	33 31 24 32 05 40 28 32 06 22 0b 24 03 10 e2 46
>025078	00 00 24 00 88 00 2e 3e 16 30 0b 24 03 10 e2 46
>025088	24 32 05 40 28 32 06 22 0c 00 09 2d 31 31 32 30
>025098	30 32 33 31 00 00 1a 00 89 00 2e 3e 1f 30 d2 ec
>0250a8	99 e3 24 32 00 40 28 32 06 22 04 00 00 00 00 00
>0250b8	1a 00 8a 00 2e 3e 21 30 d2 ec 99 e3 24 32 00 40
>0250c8	28 32 06 22 04 00 00 00 00 00 22 00 8b 00 2e 3e
>0250d8	20 30 08 00 05 43 56 54 4a 42 24 32 03 40 24 32
>0250e8	00 40 28 32 06 22 04 00 00 00 00 00 1e 00 8c 00
>0250f8	2e 3e 22 30 06 00 03 57 20 59 24 32 06 00 02 43
>025108	47 00 28 32 06 22 00 40 00 00 12 00 8d 00 2e 3e
>025118	13 30 b0 40 28 32 06 22 b0 40 00 00 12 00 8e 00
>025128	2e 3e 12 30 03 c0 28 32 06 22 01 40 00 00 14 00
>025138	8f 00 2e 3e 14 30 ce ec 19 e0 28 32 06 22 0a 40
>025148	00 00 1c 00 90 00 2e 3e 15 30 08 00 04 32 33 30
>025158	30 00 24 32 04 40 28 32 06 22 b0 40 00 00 1c 00
>025168	91 00 2e 3e 16 30 b0 40 24 32 04 40 28 32 06 22
>025178	08 00 04 32 33 30 30 00 00 00 1a 00 92 00 2e 3e
>025188	1f 30 ce ec 19 e0 24 32 00 40 28 32 06 22 04 00
>025198	00 00 00 00 1a 00 93 00 2e 3e 21 30 ce ec 19 e0
>0251a8	24 32 00 40 28 32 06 22 04 00 00 00 00 00 2e 00
>0251b8	94 00 2e 3e 20 30 0e 00 0a 56 58 54 50 20 20 4f
>0251c8	4e 49 4e 00 24 32 03 40 24 32 06 40 28 32 06 22
>0251d8	0a 00 06 54 50 20 20 4f 4e 00 00 00 1c 00 95 00
>0251e8	2e 3e 22 30 04 00 00 00 24 32 06 00 02 57 49 00
>0251f8	28 32 06 22 00 40 00 00 16 00 96 00 2e 3e 13 30
>025208	05 10 60 57 28 32 06 22 05 10 60 57 00 00 14 00
>025218	97 00 2e 3e 12 30 05 10 60 57 28 32 06 22 01 40
>025228	00 00 18 00 98 00 2e 3e 14 30 8a fd fb f3 04 40
>025238	28 32 28 32 06 22 04 40 00 00 1e 00 99 00 2e 3e
>025248	15 30 08 00 05 34 35 43 36 34 24 32 0e 40 28 32
>025258	06 22 05 10 60 57 00 00 1e 00 9a 00 2e 3e 16 30
>025268	05 10 60 57 24 32 0e 40 28 32 06 22 08 00 05 34
>025278	35 63 36 34 00 00 20 00 9b 00 2e 3e 1f 30 08 00
>025288	04 50 4a 46 51 00 24 32 03 40 28 32 06 22 06 00
>025298	03 50 4a 46 00 00 20 00 9c 00 2e 3e 21 30 8a fd
>0252a8	fb f3 04 40 28 32 24 32 03 40 28 32 06 22 06 00
>0252b8	03 4a 46 51 00 00 22 00 9d 00 2e 3e 20 30 08 00
>0252c8	04 50 4a 46 51 00 24 32 06 40 24 32 01 40 28 32
>0252d8	06 22 04 00 00 00 00 00 22 00 9e 00 2e 3e 22 30
>0252e8	0c 00 08 41 47 4b 54 5a 4b 58 47 00 24 32 04 00
>0252f8	01 54 28 32 06 22 04 40 00 00 12 00 9f 00 2e 3e
>025308	13 30 25 b2 28 32 06 22 25 b2 00 00 12 00 a0 00
>025318	2e 3e 12 30 12 c0 28 32 06 22 01 40 00 00 18 00
>025328	a1 00 2e 3e 14 30 b8 fd b8 f2 01 40 28 32 28 32
>025338	06 22 02 40 00 00 22 00 a2 00 2e 3e 15 30 0e 00
>025348	0a 31 31 31 31 30 30 32 30 32 31 00 24 32 03 40
>025358	28 32 06 22 25 b2 00 00 22 00 a3 00 2e 3e 16 30
>025368	25 b2 24 32 03 40 28 32 06 22 0e 00 0a 31 31 31
>025378	31 30 30 32 30 32 31 00 00 00 1e 00 a4 00 2e 3e
>025388	1f 30 b8 fd b8 f2 01 40 28 32 24 32 01 40 28 32
>025398	06 22 04 00 01 53 00 00 1c 00 a5 00 2e 3e 21 30
>0253a8	06 00 02 53 54 00 24 32 01 40 28 32 06 22 04 00
>0253b8	01 54 00 00 20 00 a6 00 2e 3e 20 30 06 00 02 53
>0253c8	54 00 24 32 04 40 24 32 00 40 28 32 06 22 04 00
>0253d8	00 00 00 00 24 00 a7 00 2e 3e 22 30 0c 00 09 52
>0253e8	48 20 43 46 4e 5a 58 41 24 32 06 00 03 20 43 46
>0253f8	28 32 06 22 03 40 00 00 14 00 a8 00 2e 3e 13 30
>025408	82 cd c6 c4 28 32 06 22 87 40 00 00 16 00 a9 00
>025418	2e 3e 12 30 82 cd c6 c4 28 32 06 22 0b 24 01 40
>025428	00 00 14 00 aa 00 2e 3e 14 30 14 ee 5c e3 28 32
>025438	06 22 0b 40 00 00 1c 00 ab 00 2e 3e 15 30 06 00
>025448	03 2d 39 39 24 32 0e 40 28 32 06 22 0b 24 87 40
>025458	00 00 1c 00 ac 00 2e 3e 16 30 0b 24 87 40 24 32
>025468	0e 40 28 32 06 22 06 00 03 2d 39 39 00 00 2e 00
>025478	ad 00 2e 3e 1f 30 0e 00 0b 49 46 20 41 20 44 20
>025488	20 58 47 48 24 32 0a 40 28 32 06 22 0e 00 0a 49
>025498	46 20 41 20 44 20 20 58 47 00 00 00 2e 00 ae 00
>0254a8	2e 3e 21 30 0e 00 0b 49 46 20 41 20 44 20 20 58
>0254b8	47 48 24 32 0a 40 28 32 06 22 0e 00 0a 46 20 41
>0254c8	20 44 20 20 58 47 48 00 00 00 28 00 af 00 2e 3e
>0254d8	20 30 0e 00 0b 49 46 20 41 20 44 20 20 58 47 48
>0254e8	24 32 09 40 24 32 00 40 28 32 06 22 04 00 00 00
>0254f8	00 00 22 00 b0 00 2e 3e 22 30 0a 00 07 4f 43 47
>025508	54 20 20 54 24 32 06 00 03 20 20 54 28 32 06 22
>025518	05 40 00 00 18 00 b1 00 2e 3e 13 30 0b 24 05 10
>025528	74 6d 28 32 06 22 05 10 74 6d 00 00 16 00 b2 00
>025538	2e 3e 12 30 28 cd 2e c2 28 32 06 22 0b 24 01 40
>025548	00 00 12 00 b3 00 2e 3e 14 30 0e e0 28 32 06 22
>025558	05 40 00 00 24 00 b4 00 2e 3e 15 30 0c 00 09 2d
>025568	32 31 31 30 33 34 30 31 24 32 05 40 28 32 06 22
>025578	0b 24 05 10 74 6d 00 00 24 00 b5 00 2e 3e 16 30
>025588	0b 24 05 10 74 6d 24 32 05 40 28 32 06 22 0c 00
>025598	09 2d 32 31 31 30 33 34 30 31 00 00 22 00 b6 00
>0255a8	2e 3e 1f 30 08 00 05 49 43 4e 43 43 24 32 07 40
>0255b8	28 32 06 22 08 00 05 49 43 4e 43 43 00 00 22 00
>0255c8	b7 00 2e 3e 21 30 08 00 05 49 43 4e 43 43 24 32
>0255d8	07 40 28 32 06 22 08 00 05 49 43 4e 43 43 00 00
>0255e8	22 00 b8 00 2e 3e 20 30 08 00 05 49 43 4e 43 43
>0255f8	24 32 06 40 24 32 02 40 28 32 06 22 04 00 00 00
>025608	00 00 20 00 b9 00 2e 3e 22 30 08 00 05 58 45 51
>025618	20 42 24 32 06 00 02 43 4c 00 28 32 06 22 00 40
>025628	00 00 18 00 ba 00 2e 3e 13 30 5f ce 65 cb 02 c0
>025638	28 32 06 22 05 10 60 57 00 00 14 00 bb 00 2e 3e
>025648	12 30 05 10 60 57 28 32 06 22 01 40 00 00 18 00
>025658	bc 00 2e 3e 14 30 5b fe 4c f4 02 40 28 32 28 32
>025668	06 22 0b 40 00 00 22 00 bd 00 2e 3e 15 30 0c 00
>025678	08 32 30 34 31 33 32 34 34 00 24 32 05 40 28 32
>025688	06 22 05 10 60 57 00 00 22 00 be 00 2e 3e 16 30
>025698	05 10 60 57 24 32 05 40 28 32 06 22 0c 00 08 32
>0256a8	30 34 31 33 32 34 34 00 00 00 24 00 bf 00 2e 3e
>0256b8	1f 30 5b fe 4c f4 02 40 28 32 24 32 07 40 28 32
>0256c8	06 22 0a 00 07 4d 45 41 59 20 20 51 00 00 24 00
>0256d8	c0 00 2e 3e 21 30 5b fe 4c f4 02 40 28 32 24 32
>0256e8	07 40 28 32 06 22 0a 00 07 20 20 51 47 20 20 42
>0256f8	00 00 2e 00 c1 00 2e 3e 20 30 0e 00 0b 4d 45 41
>025708	59 20 20 51 47 20 20 42 24 32 04 40 24 32 06 40
>025718	28 32 06 22 0a 00 06 59 20 20 51 47 20 00 00 00
>025728	1e 00 c2 00 2e 3e 22 30 08 00 05 59 5a 53 20 4b
>025738	24 32 04 00 01 4b 28 32 06 22 05 40 00 00 14 00
>025748	c3 00 2e 3e 13 30 0b 24 bf 40 28 32 06 22 bf 40
>025758	00 00 16 00 c4 00 2e 3e 12 30 0b 24 bf 40 28 32
>025768	06 22 0b 24 01 40 00 00 18 00 c5 00 2e 3e 14 30
>025778	08 00 05 4c 55 4a 5a 4a 28 32 06 22 05 40 00 00
>025788	1e 00 c6 00 2e 3e 15 30 08 00 04 2d 31 33 42 00
>025798	24 32 0c 40 28 32 06 22 0b 24 bf 40 00 00 1e 00
>0257a8	c7 00 2e 3e 16 30 0b 24 bf 40 24 32 0c 40 28 32
>0257b8	06 22 08 00 04 2d 31 33 62 00 00 00 18 00 c8 00
>0257c8	2e 3e 1f 30 08 e0 24 32 01 40 28 32 06 22 04 00
>0257d8	01 4c 00 00 18 00 c9 00 2e 3e 21 30 08 e0 24 32
>0257e8	01 40 28 32 06 22 04 00 01 4a 00 00 22 00 ca 00
>0257f8	2e 3e 20 30 08 00 05 4c 55 4a 5a 4a 24 32 07 40
>025808	24 32 00 40 28 32 06 22 04 00 00 00 00 00 1a 00
>025818	cb 00 2e 3e 22 30 04 00 01 43 24 32 04 00 01 4a
>025828	28 32 06 22 00 40 00 00 18 00 cc 00 2e 3e 13 30
>025838	a3 d5 01 40 28 32 28 32 06 22 05 10 67 9f 00 00
>025848	14 00 cd 00 2e 3e 12 30 05 10 67 9f 28 32 06 22
>025858	01 40 00 00 12 00 ce 00 2e 3e 14 30 d3 e5 28 32
>025868	06 22 05 40 00 00 1e 00 cf 00 2e 3e 15 30 08 00
>025878	05 32 44 46 36 37 24 32 10 40 28 32 06 22 05 10
>025888	67 9f 00 00 1e 00 d0 00 2e 3e 16 30 05 10 67 9f
>025898	24 32 10 40 28 32 06 22 08 00 05 32 64 66 36 37
>0258a8	00 00 22 00 d1 00 2e 3e 1f 30 08 00 05 59 5a 53
>0258b8	20 4b 24 32 04 40 28 32 06 22 08 00 04 59 5a 53
>0258c8	20 00 00 00 1c 00 d2 00 2e 3e 21 30 d3 e5 24 32
>0258d8	04 40 28 32 06 22 08 00 04 5a 53 20 4b 00 00 00
>0258e8	22 00 d3 00 2e 3e 20 30 08 00 05 59 5a 53 20 4b
>0258f8	24 32 06 40 24 32 01 40 28 32 06 22 04 00 00 00
>025908	00 00 20 00 d4 00 2e 3e 22 30 0a 00 06 58 51 4a
>025918	20 59 44 00 24 32 04 00 01 44 28 32 06 22 06 40
>025928	00 00 14 00 d5 00 2e 3e 13 30 0c c0 28 32 06 22
>025938	01 10 e5 50 00 00 14 00 d6 00 2e 3e 12 30 0c c0
>025948	28 32 06 22 0b 24 01 40 00 00 14 00 d7 00 2e 3e
>025958	14 30 fa ec 15 e0 28 32 06 22 0a 40 00 00 22 00
>025968	d8 00 2e 3e 15 30 0a 00 07 2d 31 31 30 33 34 35
>025978	24 32 08 40 28 32 06 22 0b 24 01 10 e5 50 00 00
>025988	22 00 d9 00 2e 3e 16 30 0b 24 01 10 e5 50 24 32
>025998	08 40 28 32 06 22 0a 00 07 2d 31 31 30 33 34 35
>0259a8	00 00 1a 00 da 00 2e 3e 1f 30 fa ec 15 e0 24 32
>0259b8	01 40 28 32 06 22 04 00 01 42 00 00 1a 00 db 00
>0259c8	2e 3e 21 30 fa ec 15 e0 24 32 01 40 28 32 06 22
>0259d8	04 00 01 4f 00 00 2c 00 dc 00 2e 3e 20 30 0e 00
>0259e8	0a 42 49 44 4e 56 42 43 4d 43 4f 00 24 32 03 40
>0259f8	24 32 05 40 28 32 06 22 08 00 05 44 4e 56 42 43
>025a08	00 00 24 00 dd 00 2e 3e 22 30 0c 00 09 55 20 51
>025a18	4f 4a 56 20 20 54 24 32 06 00 02 55 20 00 28 32
>025a28	06 22 01 40 00 00 14 00 de 00 2e 3e 13 30 0b 24
>025a38	4e 40 28 32 06 22 4e 40 00 00 16 00 df 00 2e 3e
>025a48	12 30 2f ce 23 c0 28 32 06 22 0b 24 01 40 00 00
>025a58	14 00 e0 00 2e 3e 14 30 04 00 01 43 28 32 06 22
>025a68	01 40 00 00 1c 00 e1 00 2e 3e 15 30 06 00 03 2d
>025a78	35 38 24 32 0e 40 28 32 06 22 0b 24 4e 40 00 00
>025a88	1c 00 e2 00 2e 3e 16 30 0b 24 4e 40 24 32 0e 40
>025a98	28 32 06 22 06 00 03 2d 35 38 00 00 1a 00 e3 00
>025aa8	2e 3e 1f 30 04 00 01 43 24 32 00 40 28 32 06 22
>025ab8	04 00 00 00 00 00 18 00 e4 00 2e 3e 21 30 0b e6
>025ac8	24 32 00 40 28 32 06 22 04 00 00 00 00 00 1e 00
>025ad8	e5 00 2e 3e 20 30 04 00 01 43 24 32 03 40 24 32
>025ae8	00 40 28 32 06 22 04 00 00 00 00 00 1e 00 e6 00
>025af8	2e 3e 22 30 08 00 05 58 45 51 20 42 24 32 04 00
>025b08	01 20 28 32 06 22 04 40 00 00 16 00 e7 00 2e 3e
>025b18	13 30 da cd 1f c0 28 32 06 22 01 10 e6 98 00 00
>025b28	16 00 e8 00 2e 3e 12 30 da cd 1f c0 28 32 06 22
>025b38	0b 24 01 40 00 00 1c 00 e9 00 2e 3e 14 30 0c 00
>025b48	09 55 20 51 4f 4a 56 20 20 54 28 32 06 22 09 40
>025b58	00 00 22 00 ea 00 2e 3e 15 30 0a 00 06 2d 32 38
>025b68	31 37 32 00 24 32 0c 40 28 32 06 22 0b 24 01 10
>025b78	e6 98 00 00 22 00 eb 00 2e 3e 16 30 0b 24 01 10
>025b88	e6 98 24 32 0c 40 28 32 06 22 0a 00 06 2d 32 38
>025b98	31 37 32 00 00 00 1e 00 ec 00 2e 3e 1f 30 13 ee
>025ba8	1b e0 24 32 04 40 28 32 06 22 08 00 04 55 20 51
>025bb8	4f 00 00 00 1e 00 ed 00 2e 3e 21 30 13 ee 1b e0
>025bc8	24 32 04 40 28 32 06 22 08 00 04 56 20 20 54 00
>025bd8	00 00 28 00 ee 00 2e 3e 20 30 0c 00 09 55 20 51
>025be8	4f 4a 56 20 20 54 24 32 02 40 24 32 02 40 28 32
>025bf8	06 22 06 00 02 20 51 00 00 00 20 00 ef 00 2e 3e
>025c08	22 30 08 00 04 44 4a 5a 53 00 24 32 06 00 02 20
>025c18	59 00 28 32 06 22 00 40 00 00 14 00 f0 00 2e 3e
>025c28	13 30 a8 cd be c3 28 32 06 22 bf 40 00 00 16 00
>025c38	f1 00 2e 3e 12 30 0b 24 bf 40 28 32 06 22 0b 24
>025c48	01 40 00 00 1a 00 f2 00 2e 3e 14 30 0a 00 07 41
>025c58	54 4a 51 48 20 47 28 32 06 22 07 40 00 00 1e 00
>025c68	f3 00 2e 3e 15 30 08 00 04 2d 33 36 32 00 24 32
>025c78	07 40 28 32 06 22 0b 24 bf 40 00 00 1e 00 f4 00
>025c88	2e 3e 16 30 0b 24 bf 40 24 32 07 40 28 32 06 22
>025c98	08 00 04 2d 33 36 32 00 00 00 1e 00 f5 00 2e 3e
>025ca8	1f 30 21 ed 23 e0 24 32 04 40 28 32 06 22 08 00
>025cb8	04 41 54 4a 51 00 00 00 1e 00 f6 00 2e 3e 21 30
>025cc8	21 ed 23 e0 24 32 04 40 28 32 06 22 08 00 04 51
>025cd8	48 20 47 00 00 00 24 00 f7 00 2e 3e 20 30 0a 00
>025ce8	07 41 54 4a 51 48 20 47 24 32 01 40 24 32 01 40
>025cf8	28 32 06 22 04 00 01 41 00 00 24 00 f8 00 2e 3e
>025d08	22 30 0c 00 08 41 47 4b 54 5a 4b 58 47 00 24 32
>025d18	06 00 03 54 5a 4b 28 32 06 22 04 40 00 00 16 00
>025d28	f9 00 2e 3e 13 30 05 10 69 6e 28 32 06 22 05 10
>025d38	69 6e 00 00 14 00 fa 00 2e 3e 12 30 05 10 69 6e
>025d48	28 32 06 22 01 40 00 00 16 00 fb 00 2e 3e 14 30
>025d58	06 00 02 42 51 00 28 32 06 22 02 40 00 00 1e 00
>025d68	fc 00 2e 3e 15 30 08 00 05 33 37 30 45 42 24 32
>025d78	0f 40 28 32 06 22 05 10 69 6e 00 00 1e 00 fd 00
>025d88	2e 3e 16 30 05 10 69 6e 24 32 0f 40 28 32 06 22
>025d98	08 00 05 33 37 30 65 62 00 00 1a 00 fe 00 2e 3e
>025da8	1f 30 ae ed 23 e0 24 32 00 40 28 32 06 22 04 00
>025db8	00 00 00 00 1a 00 ff 00 2e 3e 21 30 ae ed 23 e0
>025dc8	24 32 00 40 28 32 06 22 04 00 00 00 00 00 20 00
>025dd8	00 01 2e 3e 20 30 06 00 02 42 51 00 24 32 03 40
>025de8	24 32 02 40 28 32 06 22 04 00 00 00 00 00 20 00
>025df8	01 01 2e 3e 22 30 0a 00 07 4f 43 47 54 20 20 54
>025e08	24 32 04 00 01 20 28 32 06 22 05 40 00 00 18 00
>025e18	02 01 2e 3e 13 30 69 ce a1 cd 1b c0 28 32 06 22
>025e28	02 10 d4 66 00 00 16 00 03 01 2e 3e 12 30 69 ce
>025e38	a1 cd 1b c0 28 32 06 22 01 40 00 00 12 00 04 01
>025e48	2e 3e 14 30 b9 e5 28 32 06 22 02 40 00 00 20 00
>025e58	05 01 2e 3e 15 30 0a 00 07 34 34 30 33 34 30 31
>025e68	24 32 05 40 28 32 06 22 02 10 d4 66 00 00 20 00
>025e78	06 01 2e 3e 16 30 02 10 d4 66 24 32 05 40 28 32
>025e88	06 22 0a 00 07 34 34 30 33 34 30 31 00 00 1e 00
>025e98	07 01 2e 3e 1f 30 06 00 02 57 49 00 24 32 04 40
>025ea8	28 32 06 22 06 00 02 57 49 00 00 00 1a 00 08 01
>025eb8	2e 3e 21 30 b9 e5 24 32 04 40 28 32 06 22 06 00
>025ec8	02 57 49 00 00 00 20 00 09 01 2e 3e 20 30 06 00
>025ed8	02 57 49 00 24 32 04 40 24 32 00 40 28 32 06 22
>025ee8	04 00 00 00 00 00 1a 00 0a 01 2e 3e 22 30 04 00
>025ef8	01 59 24 32 04 00 01 59 28 32 06 22 01 40 00 00
>025f08	14 00 0b 01 2e 3e 13 30 17 c0 28 32 06 22 04 10
>025f18	cd 5e 00 00 14 00 0c 01 2e 3e 12 30 04 10 cd 5e
>025f28	28 32 06 22 01 40 00 00 12 00 0d 01 2e 3e 14 30
>025f38	0f e0 28 32 06 22 05 40 00 00 1e 00 0e 01 2e 3e
>025f48	15 30 08 00 05 32 31 45 43 44 24 32 10 40 28 32
>025f58	06 22 04 10 cd 5e 00 00 1e 00 0f 01 2e 3e 16 30
>025f68	04 10 cd 5e 24 32 10 40 28 32 06 22 08 00 05 32
>025f78	31 65 63 64 00 00 1c 00 10 01 2e 3e 1f 30 0f e0
>025f88	24 32 04 40 28 32 06 22 08 00 04 58 45 51 20 00
>025f98	00 00 22 00 11 01 2e 3e 21 30 08 00 05 58 45 51
>025fa8	20 42 24 32 04 40 28 32 06 22 08 00 04 45 51 20
>025fb8	42 00 00 00 22 00 12 01 2e 3e 20 30 08 00 05 58
>025fc8	45 51 20 42 24 32 03 40 24 32 01 40 28 32 06 22
>025fd8	04 00 01 51 00 00 26 00 13 01 2e 3e 22 30 0e 00
>025fe8	0a 56 58 54 50 20 20 4f 4e 49 4e 00 24 32 06 00
>025ff8	02 20 42 00 28 32 06 22 00 40 00 00 16 00 14 01
>026008	2e 3e 13 30 01 10 ca af 28 32 06 22 01 10 ca af
>026018	00 00 14 00 15 01 2e 3e 12 30 01 10 ca af 28 32
>026028	06 22 01 40 00 00 16 00 16 01 2e 3e 14 30 d8 ed
>026038	30 eb 08 e0 28 32 06 22 06 40 00 00 20 00 17 01
>026048	2e 3e 15 30 0a 00 06 31 36 37 37 31 32 00 24 32
>026058	08 40 28 32 06 22 01 10 ca af 00 00 20 00 18 01
>026068	2e 3e 16 30 01 10 ca af 24 32 08 40 28 32 06 22
>026078	0a 00 06 31 36 37 37 31 32 00 00 00 1e 00 19 01
>026088	2e 3e 1f 30 d8 ed 30 eb 08 e0 24 32 02 40 28 32
>026098	06 22 06 00 02 44 4c 00 00 00 22 00 1a 01 2e 3e
>0260a8	21 30 0a 00 06 44 4c 20 20 20 59 00 24 32 02 40
>0260b8	28 32 06 22 06 00 02 20 59 00 00 00 24 00 1b 01
>0260c8	2e 3e 20 30 0a 00 06 44 4c 20 20 20 59 00 24 32
>0260d8	03 40 24 32 01 40 28 32 06 22 04 00 01 20 00 00
>0260e8	1e 00 1c 01 2e 3e 22 30 08 00 05 51 56 42 54 43
>0260f8	24 32 04 00 01 43 28 32 06 22 05 40 00 00 18 00
>026108	1d 01 2e 3e 13 30 5f ce 65 cb 02 c0 28 32 06 22
>026118	05 10 60 57 00 00 16 00 1e 01 2e 3e 12 30 5f ce
>026128	65 cb 02 c0 28 32 06 22 01 40 00 00 1e 00 1f 01
>026138	2e 3e 14 30 0e 00 0a 56 58 54 50 20 20 4f 4e 49
>026148	4e 00 28 32 06 22 0a 40 00 00 20 00 20 01 2e 3e
>026158	15 30 0a 00 06 35 31 33 35 34 30 00 24 32 08 40
>026168	28 32 06 22 05 10 60 57 00 00 20 00 21 01 2e 3e
>026178	16 30 05 10 60 57 24 32 08 40 28 32 06 22 0a 00
>026188	06 35 31 33 35 34 30 00 00 00 22 00 22 01 2e 3e
>026198	1f 30 ce ec 19 e0 24 32 08 40 28 32 06 22 0c 00
>0261a8	08 56 58 54 50 20 20 4f 4e 00 00 00 2c 00 23 01
>0261b8	2e 3e 21 30 0e 00 0a 56 58 54 50 20 20 4f 4e 49
>0261c8	4e 00 24 32 08 40 28 32 06 22 0c 00 08 54 50 20
>0261d8	20 4f 4e 49 4e 00 00 00 2a 00 24 01 2e 3e 20 30
>0261e8	0e 00 0a 56 58 54 50 20 20 4f 4e 49 4e 00 24 32
>0261f8	09 40 24 32 05 40 28 32 06 22 06 00 02 49 4e 00
>026208	00 00 1a 00 25 01 2e 3e 22 30 04 00 01 59 24 32
>026218	04 00 01 57 28 32 06 22 00 40 00 00 1c 00 26 01
>026228	2e 3e 13 30 cd dc 66 de 15 d0 01 40 28 32 28 32
>026238	06 22 05 10 88 5a 00 00 1c 00 27 01 2e 3e 12 30
>026248	cd dc 66 de 15 d0 01 40 28 32 28 32 06 22 0b 24
>026258	01 40 00 00 16 00 28 01 2e 3e 14 30 06 00 03 52
>026268	51 49 28 32 06 22 03 40 00 00 22 00 29 01 2e 3e
>026278	15 30 0a 00 06 2d 38 32 38 42 34 00 24 32 0c 40
>026288	28 32 06 22 0b 24 05 10 88 5a 00 00 22 00 2a 01
>026298	2e 3e 16 30 0b 24 05 10 88 5a 24 32 0c 40 28 32
>0262a8	06 22 0a 00 06 2d 38 32 38 62 34 00 00 00 1e 00
>0262b8	2b 01 2e 3e 1f 30 06 00 03 52 51 49 24 32 03 40
>0262c8	28 32 06 22 06 00 03 52 51 49 00 00 1e 00 2c 01
>0262d8	2e 3e 21 30 06 00 03 52 51 49 24 32 03 40 28 32
>0262e8	06 22 06 00 03 52 51 49 00 00 20 00 2d 01 2e 3e
>0262f8	20 30 06 00 03 52 51 49 24 32 05 40 24 32 00 40
>026308	28 32 06 22 04 00 00 00 00 00 20 00 2e 01 2e 3e
>026318	22 30 0a 00 07 41 54 4a 51 48 20 47 24 32 04 00
>026328	01 4a 28 32 06 22 03 40 00 00 18 00 2f 01 2e 3e
>026338	13 30 0b 24 02 10 70 71 28 32 06 22 02 10 70 71
>026348	00 00 18 00 30 01 2e 3e 12 30 04 cd 66 ce 0a c0
>026358	28 32 06 22 0b 24 01 40 00 00 1c 00 31 01 2e 3e
>026368	14 30 0c 00 09 53 20 4b 49 41 49 49 4f 53 28 32
>026378	06 22 09 40 00 00 22 00 32 01 2e 3e 15 30 0a 00
>026388	06 2d 35 33 38 32 34 00 24 32 0b 40 28 32 06 22
>026398	0b 24 02 10 70 71 00 00 22 00 33 01 2e 3e 16 30
>0263a8	0b 24 02 10 70 71 24 32 0b 40 28 32 06 22 0a 00
>0263b8	06 2d 35 33 38 32 34 00 00 00 28 00 34 01 2e 3e
>0263c8	1f 30 0c 00 09 53 20 4b 49 41 49 49 4f 53 24 32
>0263d8	07 40 28 32 06 22 0a 00 07 53 20 4b 49 41 49 49
>0263e8	00 00 28 00 35 01 2e 3e 21 30 0c 00 09 53 20 4b
>0263f8	49 41 49 49 4f 53 24 32 07 40 28 32 06 22 0a 00
>026408	07 4b 49 41 49 49 4f 53 00 00 26 00 36 01 2e 3e
>026418	20 30 0c 00 09 53 20 4b 49 41 49 49 4f 53 24 32
>026428	09 40 24 32 05 40 28 32 06 22 04 00 01 53 00 00
>026438	1c 00 37 01 2e 3e 22 30 06 00 03 52 51 49 24 32
>026448	04 00 01 51 28 32 06 22 02 40 00 00 18 00 38 01
>026458	2e 3e 13 30 5f ce 65 cb 02 c0 28 32 06 22 05 10
>026468	60 57 00 00 14 00 39 01 2e 3e 12 30 05 10 60 57
>026478	28 32 06 22 01 40 00 00 14 00 3a 01 2e 3e 14 30
>026488	04 00 00 00 28 32 06 22 00 40 00 00 1e 00 3b 01
>026498	2e 3e 15 30 08 00 05 32 39 37 36 30 24 32 10 40
>0264a8	28 32 06 22 05 10 60 57 00 00 1e 00 3c 01 2e 3e
>0264b8	16 30 05 10 60 57 24 32 10 40 28 32 06 22 08 00
>0264c8	05 32 39 37 36 30 00 00 18 00 3d 01 2e 3e 1f 30
>0264d8	7a e5 24 32 02 40 28 32 06 22 04 00 00 00 00 00
>0264e8	18 00 3e 01 2e 3e 21 30 7a e5 24 32 02 40 28 32
>0264f8	06 22 04 00 00 00 00 00 1e 00 3f 01 2e 3e 20 30
>026508	04 00 00 00 24 32 02 40 24 32 00 40 28 32 06 22
>026518	04 00 00 00 00 00 1e 00 40 01 2e 3e 22 30 08 00
>026528	05 49 43 4e 43 43 24 32 04 00 01 46 28 32 06 22
>026538	00 40 00 00 12 00 41 01 2e 3e 13 30 b0 40 28 32
>026548	06 22 b0 40 00 00 12 00 42 01 2e 3e 12 30 b0 40
>026558	28 32 06 22 01 40 00 00 14 00 43 01 2e 3e 14 30
>026568	59 ed 1b e0 28 32 06 22 01 40 00 00 1c 00 44 01
>026578	2e 3e 15 30 08 00 04 31 32 30 31 00 24 32 05 40
>026588	28 32 06 22 b0 40 00 00 1c 00 45 01 2e 3e 16 30
>026598	b0 40 24 32 05 40 28 32 06 22 08 00 04 31 32 30
>0265a8	31 00 00 00 1a 00 46 01 2e 3e 1f 30 04 00 01 48
>0265b8	24 32 02 40 28 32 06 22 04 00 01 48 00 00 1a 00
>0265c8	47 01 2e 3e 21 30 59 ed 1b e0 24 32 02 40 28 32
>0265d8	06 22 04 00 01 48 00 00 1e 00 48 01 2e 3e 20 30
>0265e8	04 00 01 48 24 32 01 40 24 32 01 40 28 32 06 22
>0265f8	04 00 01 48 00 00 1c 00 49 01 2e 3e 22 30 06 00
>026608	03 57 20 59 24 32 04 00 01 59 28 32 06 22 03 40
>026618	00 00 16 00 4a 01 2e 3e 13 30 0a ce 2b c3 28 32
>026628	06 22 01 10 db 52 00 00 14 00 4b 01 2e 3e 12 30
>026638	01 10 db 52 28 32 06 22 01 40 00 00 14 00 4c 01
>026648	2e 3e 14 30 f4 ec 02 e0 28 32 06 22 08 40 00 00
>026658	1e 00 4d 01 2e 3e 15 30 08 00 04 44 39 42 35 00
>026668	24 32 0e 40 28 32 06 22 01 10 db 52 00 00 1e 00
>026678	4e 01 2e 3e 16 30 01 10 db 52 24 32 0e 40 28 32
>026688	06 22 08 00 04 64 39 62 35 00 00 00 1c 00 4f 01
>026698	2e 3e 1f 30 f4 ec 02 e0 24 32 02 40 28 32 06 22
>0266a8	06 00 02 41 47 00 00 00 1c 00 50 01 2e 3e 21 30
>0266b8	f4 ec 02 e0 24 32 02 40 28 32 06 22 06 00 02 58
>0266c8	47 00 00 00 28 00 51 01 2e 3e 20 30 0c 00 08 41
>0266d8	47 4b 54 5a 4b 58 47 00 24 32 07 40 24 32 04 40
>0266e8	28 32 06 22 06 00 02 58 47 00 00 00 24 00 52 01
>0266f8	2e 3e 22 30 0c 00 08 41 47 4b 54 5a 4b 58 47 00
>026708	24 32 06 00 02 47 4b 00 28 32 06 22 02 40 00 00
>026718	14 00 53 01 2e 3e 13 30 0b 24 03 40 28 32 06 22
>026728	03 40 00 00 16 00 54 01 2e 3e 12 30 b3 cd 3f c2
>026738	28 32 06 22 0b 24 01 40 00 00 14 00 55 01 2e 3e
>026748	14 30 04 00 01 54 28 32 06 22 01 40 00 00 1c 00
>026758	56 01 2e 3e 15 30 06 00 02 2d 33 00 24 32 04 40
>026768	28 32 06 22 0b 24 03 40 00 00 1c 00 57 01 2e 3e
>026778	16 30 0b 24 03 40 24 32 04 40 28 32 06 22 06 00
>026788	02 2d 33 00 00 00 1a 00 58 01 2e 3e 1f 30 04 00
>026798	01 54 24 32 00 40 28 32 06 22 04 00 00 00 00 00
>0267a8	1a 00 59 01 2e 3e 21 30 2d ee 17 e0 24 32 00 40
>0267b8	28 32 06 22 04 00 00 00 00 00 1e 00 5a 01 2e 3e
>0267c8	20 30 04 00 01 54 24 32 02 40 24 32 01 40 28 32
>0267d8	06 22 04 00 00 00 00 00 24 00 5b 01 2e 3e 22 30
>0267e8	0c 00 09 55 20 51 4f 4a 56 20 20 54 24 32 06 00
>0267f8	02 20 54 00 28 32 06 22 08 40 00 00 14 00 5c 01
>026808	2e 3e 13 30 6e ce 16 c0 28 32 06 22 9f 40 00 00
>026818	16 00 5d 01 2e 3e 12 30 6e ce 16 c0 28 32 06 22
>026828	0b 24 01 40 00 00 1e 00 5e 01 2e 3e 14 30 0e 00
>026838	0a 41 50 54 44 52 56 20 43 49 49 00 28 32 06 22
>026848	0a 40 00 00 20 00 5f 01 2e 3e 15 30 0a 00 06 2d
>026858	31 32 32 32 30 00 24 32 03 40 28 32 06 22 0b 24
>026868	9f 40 00 00 20 00 60 01 2e 3e 16 30 0b 24 9f 40
>026878	24 32 03 40 28 32 06 22 0a 00 06 2d 31 32 32 32
>026888	30 00 00 00 20 00 61 01 2e 3e 1f 30 2f ed c4 e9
>026898	22 e0 24 32 05 40 28 32 06 22 08 00 05 41 50 54
>0268a8	44 52 00 00 20 00 62 01 2e 3e 21 30 2f ed c4 e9
>0268b8	22 e0 24 32 05 40 28 32 06 22 08 00 05 56 20 43
>0268c8	49 49 00 00 2a 00 63 01 2e 3e 20 30 0e 00 0a 41
>0268d8	50 54 44 52 56 20 43 49 49 00 24 32 06 40 24 32
>0268e8	03 40 28 32 06 22 06 00 03 56 20 43 00 00 1a 00
>0268f8	64 01 2e 3e 22 30 04 00 01 48 24 32 04 00 01 48
>026908	28 32 06 22 01 40 00 00 16 00 65 01 2e 3e 13 30
>026918	05 10 69 6e 28 32 06 22 05 10 69 6e 00 00 16 00
>026928	66 01 2e 3e 12 30 c7 cc e6 ca 11 c0 28 32 06 22
>026938	01 40 00 00 12 00 67 01 2e 3e 14 30 02 e0 28 32
>026948	06 22 03 40 00 00 22 00 68 01 2e 3e 15 30 0c 00
>026958	09 32 32 32 33 32 31 32 32 31 24 32 04 40 28 32
>026968	06 22 05 10 69 6e 00 00 22 00 69 01 2e 3e 16 30
>026978	05 10 69 6e 24 32 04 40 28 32 06 22 0c 00 09 32
>026988	32 32 33 32 31 32 32 31 00 00 1a 00 6a 01 2e 3e
>026998	1f 30 02 e0 24 32 03 40 28 32 06 22 06 00 03 45
>0269a8	20 4e 00 00 1e 00 6b 01 2e 3e 21 30 06 00 03 45
>0269b8	20 4e 24 32 03 40 28 32 06 22 06 00 03 45 20 4e
>0269c8	00 00 20 00 6c 01 2e 3e 20 30 06 00 03 45 20 4e
>0269d8	24 32 03 40 24 32 01 40 28 32 06 22 04 00 01 4e
>0269e8	00 00 24 00 6d 01 2e 3e 22 30 0e 00 0b 52 56 4b
>0269f8	41 20 42 4a 43 59 52 45 24 32 04 00 01 56 28 32
>026a08	06 22 02 40 00 00 18 00 6e 01 2e 3e 13 30 a3 d5
>026a18	03 40 28 32 28 32 06 22 06 10 cb 41 00 00 18 00
>026a28	6f 01 2e 3e 12 30 a3 d5 03 40 28 32 28 32 06 22
>026a38	0b 24 01 40 00 00 1a 00 70 01 2e 3e 14 30 0a 00
>026a48	06 4e 20 48 4a 4c 52 00 28 32 06 22 06 40 00 00
>026a58	24 00 71 01 2e 3e 15 30 0c 00 08 2d 31 34 35 30
>026a68	33 35 33 00 24 32 07 40 28 32 06 22 0b 24 06 10
>026a78	cb 41 00 00 24 00 72 01 2e 3e 16 30 0b 24 06 10
>026a88	cb 41 24 32 07 40 28 32 06 22 0c 00 08 2d 31 34
>026a98	35 30 33 35 33 00 00 00 26 00 73 01 2e 3e 1f 30
>026aa8	0a 00 06 4e 20 48 4a 4c 52 00 24 32 07 40 28 32
>026ab8	06 22 0a 00 06 4e 20 48 4a 4c 52 00 00 00 26 00
>026ac8	74 01 2e 3e 21 30 0a 00 06 4e 20 48 4a 4c 52 00
>026ad8	24 32 07 40 28 32 06 22 0a 00 06 4e 20 48 4a 4c
>026ae8	52 00 00 00 26 00 75 01 2e 3e 20 30 0a 00 06 4e
>026af8	20 48 4a 4c 52 00 24 32 05 40 24 32 03 40 28 32
>026b08	06 22 06 00 02 4c 52 00 00 00 1e 00 76 01 2e 3e
>026b18	22 30 08 00 04 44 47 20 54 00 24 32 04 00 01 54
>026b28	28 32 06 22 04 40 00 00 16 00 77 01 2e 3e 13 30
>026b38	02 10 36 72 28 32 06 22 02 10 36 72 00 00 14 00
>026b48	78 01 2e 3e 12 30 02 10 36 72 28 32 06 22 01 40
>026b58	00 00 18 00 79 01 2e 3e 14 30 5b fe 4c f4 05 40
>026b68	28 32 28 32 06 22 08 40 00 00 20 00 7a 01 2e 3e
>026b78	15 30 0a 00 06 32 33 31 30 36 36 00 24 32 08 40
>026b88	28 32 06 22 02 10 36 72 00 00 20 00 7b 01 2e 3e
>026b98	16 30 02 10 36 72 24 32 08 40 28 32 06 22 0a 00
>026ba8	06 32 33 31 30 36 36 00 00 00 20 00 7c 01 2e 3e
>026bb8	1f 30 5b fe 4c f4 05 40 28 32 24 32 02 40 28 32
>026bc8	06 22 06 00 02 45 43 00 00 00 20 00 7d 01 2e 3e
>026bd8	21 30 5b fe 4c f4 05 40 28 32 24 32 02 40 28 32
>026be8	06 22 06 00 02 4f 42 00 00 00 28 00 7e 01 2e 3e
>026bf8	20 30 0c 00 08 45 43 53 4f 20 48 4f 42 00 24 32
>026c08	01 40 24 32 03 40 28 32 06 22 06 00 03 45 43 53
>026c18	00 00 26 00 7f 01 2e 3e 22 30 0e 00 0a 42 49 44
>026c28	4e 56 42 43 4d 43 4f 00 24 32 06 00 03 43 4d 43
>026c38	28 32 06 22 07 40 00 00 16 00 80 01 2e 3e 13 30
>026c48	03 10 5e b3 28 32 06 22 03 10 5e b3 00 00 14 00
>026c58	81 01 2e 3e 12 30 03 10 5e b3 28 32 06 22 01 40
>026c68	00 00 12 00 82 01 2e 3e 14 30 0b e0 28 32 06 22
>026c78	01 40 00 00 22 00 83 01 2e 3e 15 30 0c 00 09 31
>026c88	33 33 30 33 31 31 33 32 24 32 04 40 28 32 06 22
>026c98	03 10 5e b3 00 00 22 00 84 01 2e 3e 16 30 03 10
>026ca8	5e b3 24 32 04 40 28 32 06 22 0c 00 09 31 33 33
>026cb8	30 33 31 31 33 32 00 00 18 00 85 01 2e 3e 1f 30
>026cc8	0b e0 24 32 02 40 28 32 06 22 04 00 01 4f 00 00
>026cd8	18 00 86 01 2e 3e 21 30 0b e0 24 32 02 40 28 32
>026ce8	06 22 04 00 01 4f 00 00 1e 00 87 01 2e 3e 20 30
>026cf8	04 00 01 4f 24 32 02 40 24 32 01 40 28 32 06 22
>026d08	04 00 00 00 00 00 22 00 88 01 2e 3e 22 30 0a 00
>026d18	06 54 47 4c 59 52 58 00 24 32 06 00 02 59 52 00
>026d28	28 32 06 22 04 40 00 00 14 00 89 01 2e 3e 13 30
>026d38	3c c6 28 32 06 22 02 10 36 72 00 00 12 00 8a 01
>026d48	2e 3e 12 30 3c c6 28 32 06 22 01 40 00 00 18 00
>026d58	8b 01 2e 3e 14 30 14 fe c5 f4 00 40 28 32 28 32
>026d68	06 22 09 40 00 00 2a 00 8c 01 2e 3e 15 30 14 00
>026d78	11 31 30 30 31 31 30 30 31 30 30 30 31 31 30 31
>026d88	31 30 24 32 02 40 28 32 06 22 02 10 36 72 00 00
>026d98	2a 00 8d 01 2e 3e 16 30 02 10 36 72 24 32 02 40
>026da8	28 32 06 22 14 00 11 31 30 30 31 31 30 30 31 30
>026db8	30 30 31 31 30 31 31 30 00 00 22 00 8e 01 2e 3e
>026dc8	1f 30 0c 00 09 57 20 56 56 20 20 4d 43 4c 24 32
>026dd8	00 40 28 32 06 22 04 00 00 00 00 00 1e 00 8f 01
>026de8	2e 3e 21 30 14 fe c5 f4 00 40 28 32 24 32 00 40
>026df8	28 32 06 22 04 00 00 00 00 00 28 00 90 01 2e 3e
>026e08	20 30 0c 00 09 57 20 56 56 20 20 4d 43 4c 24 32
>026e18	06 40 24 32 02 40 28 32 06 22 06 00 02 20 4d 00
>026e28	00 00 1a 00 91 01 2e 3e 22 30 04 00 01 54 24 32
>026e38	04 00 01 54 28 32 06 22 01 40 00 00 16 00 92 01
>026e48	2e 3e 13 30 04 10 3e 44 28 32 06 22 04 10 3e 44
>026e58	00 00 14 00 93 01 2e 3e 12 30 04 10 3e 44 28 32
>026e68	06 22 01 40 00 00 12 00 94 01 2e 3e 14 30 0f e0
>026e78	28 32 06 22 05 40 00 00 1e 00 95 01 2e 3e 15 30
>026e88	08 00 05 36 34 35 39 32 24 32 0c 40 28 32 06 22
>026e98	04 10 3e 44 00 00 1e 00 96 01 2e 3e 16 30 04 10
>026ea8	3e 44 24 32 0c 40 28 32 06 22 08 00 05 36 34 35
>026eb8	39 32 00 00 1a 00 97 01 2e 3e 1f 30 0f e0 24 32
>026ec8	02 40 28 32 06 22 06 00 02 58 45 00 00 00 1a 00
>026ed8	98 01 2e 3e 21 30 0f e0 24 32 02 40 28 32 06 22
>026ee8	06 00 02 20 42 00 00 00 22 00 99 01 2e 3e 20 30
>026ef8	08 00 05 58 45 51 20 42 24 32 02 40 24 32 01 40
>026f08	28 32 06 22 04 00 01 45 00 00 1c 00 9a 01 2e 3e
>026f18	22 30 06 00 02 42 51 00 24 32 04 00 01 51 28 32
>026f28	06 22 02 40 00 00 18 00 9b 01 2e 3e 13 30 0b 24
>026f38	01 10 af a4 28 32 06 22 01 10 af a4 00 00 18 00
>026f48	9c 01 2e 3e 12 30 5c cd 4d c9 17 c0 28 32 06 22
>026f58	0b 24 01 40 00 00 14 00 9d 01 2e 3e 14 30 3b ee
>026f68	b7 e1 28 32 06 22 04 40 00 00 24 00 9e 01 2e 3e
>026f78	15 30 0c 00 08 2d 31 31 33 31 30 31 31 00 24 32
>026f88	06 40 28 32 06 22 0b 24 01 10 af a4 00 00 24 00
>026f98	9f 01 2e 3e 16 30 0b 24 01 10 af a4 24 32 06 40
>026fa8	28 32 06 22 0c 00 08 2d 31 31 33 31 30 31 31 00
>026fb8	00 00 1a 00 a0 01 2e 3e 1f 30 3b ee b7 e1 24 32
>026fc8	01 40 28 32 06 22 04 00 01 41 00 00 1e 00 a1 01
>026fd8	2e 3e 21 30 08 00 04 41 49 42 43 00 24 32 01 40
>026fe8	28 32 06 22 04 00 01 43 00 00 22 00 a2 01 2e 3e
>026ff8	20 30 08 00 04 41 49 42 43 00 24 32 02 40 24 32
>027008	00 40 28 32 06 22 04 00 00 00 00 00 24 00 a3 01
>027018	2e 3e 22 30 0e 00 0a 41 50 54 44 52 56 20 43 49
>027028	49 00 24 32 04 00 01 52 28 32 06 22 05 40 00 00
>027038	14 00 a4 01 2e 3e 13 30 0b 24 9f 40 28 32 06 22
>027048	9f 40 00 00 16 00 a5 01 2e 3e 12 30 6e ce 16 c0
>027058	28 32 06 22 0b 24 01 40 00 00 12 00 a6 01 2e 3e
>027068	14 30 fd e4 28 32 06 22 09 40 00 00 1e 00 a7 01
>027078	2e 3e 15 30 08 00 04 2d 31 35 39 00 24 32 0a 40
>027088	28 32 06 22 0b 24 9f 40 00 00 1e 00 a8 01 2e 3e
>027098	16 30 0b 24 9f 40 24 32 0a 40 28 32 06 22 08 00
>0270a8	04 2d 31 35 39 00 00 00 26 00 a9 01 2e 3e 1f 30
>0270b8	0c 00 09 53 20 4b 49 41 49 49 4f 53 24 32 04 40
>0270c8	28 32 06 22 08 00 04 53 20 4b 49 00 00 00 1c 00
>0270d8	aa 01 2e 3e 21 30 fd e4 24 32 04 40 28 32 06 22
>0270e8	08 00 04 49 49 4f 53 00 00 00 2a 00 ab 01 2e 3e
>0270f8	20 30 0c 00 09 53 20 4b 49 41 49 49 4f 53 24 32
>027108	06 40 24 32 05 40 28 32 06 22 08 00 04 49 49 4f
>027118	53 00 00 00 26 00 ac 01 2e 3e 22 30 0e 00 0b 52
>027128	56 4b 41 20 42 4a 43 59 52 45 24 32 06 00 02 4a
>027138	43 00 28 32 06 22 07 40 00 00 16 00 ad 01 2e 3e
>027148	13 30 02 10 1a 81 28 32 06 22 02 10 1a 81 00 00
>027158	14 00 ae 01 2e 3e 12 30 1d cd 1f c0 28 32 06 22
>027168	01 40 00 00 16 00 af 01 2e 3e 14 30 06 00 02 42
>027178	51 00 28 32 06 22 02 40 00 00 20 00 b0 01 2e 3e
>027188	15 30 0a 00 07 31 34 33 32 33 32 32 24 32 06 40
>027198	28 32 06 22 02 10 1a 81 00 00 20 00 b1 01 2e 3e
>0271a8	16 30 02 10 1a 81 24 32 06 40 28 32 06 22 0a 00
>0271b8	07 31 34 33 32 33 32 32 00 00 1c 00 b2 01 2e 3e
>0271c8	1f 30 ae ed 23 e0 24 32 02 40 28 32 06 22 06 00
>0271d8	02 42 51 00 00 00 1c 00 b3 01 2e 3e 21 30 ae ed
>0271e8	23 e0 24 32 02 40 28 32 06 22 06 00 02 42 51 00
>0271f8	00 00 20 00 b4 01 2e 3e 20 30 06 00 02 42 51 00
>027208	24 32 03 40 24 32 02 40 28 32 06 22 04 00 00 00
>027218	00 00 26 00 b5 01 2e 3e 22 30 0e 00 0a 41 50 54
>027228	44 52 56 20 43 49 49 00 24 32 06 00 02 56 20 00
>027238	28 32 06 22 06 40 00 00 18 00 b6 01 2e 3e 13 30
>027248	f3 cc 24 cd 16 c0 28 32 06 22 05 10 90 44 00 00
>027258	18 00 b7 01 2e 3e 12 30 f3 cc 24 cd 16 c0 28 32
>027268	06 22 0b 24 01 40 00 00 14 00 b8 01 2e 3e 14 30
>027278	21 ed 23 e0 28 32 06 22 07 40 00 00 24 00 b9 01
>027288	2e 3e 15 30 0c 00 08 2d 31 32 35 35 30 33 34 00
>027298	24 32 07 40 28 32 06 22 0b 24 05 10 90 44 00 00
>0272a8	24 00 ba 01 2e 3e 16 30 0b 24 05 10 90 44 24 32
>0272b8	07 40 28 32 06 22 0c 00 08 2d 31 32 35 35 30 33
>0272c8	34 00 00 00 1c 00 bb 01 2e 3e 1f 30 21 ed 23 e0
>0272d8	24 32 02 40 28 32 06 22 06 00 02 41 54 00 00 00
>0272e8	22 00 bc 01 2e 3e 21 30 0a 00 07 41 54 4a 51 48
>0272f8	20 47 24 32 02 40 28 32 06 22 06 00 02 20 47 00
>027308	00 00 24 00 bd 01 2e 3e 20 30 0a 00 07 41 54 4a
>027318	51 48 20 47 24 32 02 40 24 32 01 40 28 32 06 22
>027328	04 00 01 54 00 00 1e 00 be 01 2e 3e 22 30 08 00
>027338	05 51 56 42 54 43 24 32 04 00 01 42 28 32 06 22
>027348	03 40 00 00 16 00 bf 01 2e 3e 13 30 5b cd 02 c0
>027358	28 32 06 22 01 10 dc 8c 00 00 16 00 c0 01 2e 3e
>027368	12 30 5b cd 02 c0 28 32 06 22 0b 24 01 40 00 00
>027378	14 00 c1 01 2e 3e 14 30 28 ee 18 e0 28 32 06 22
>027388	03 40 00 00 24 00 c2 01 2e 3e 15 30 0c 00 08 2d
>027398	31 30 34 32 34 34 34 00 24 32 06 40 28 32 06 22
>0273a8	0b 24 01 10 dc 8c 00 00 24 00 c3 01 2e 3e 16 30
>0273b8	0b 24 01 10 dc 8c 24 32 06 40 28 32 06 22 0c 00
>0273c8	08 2d 31 30 34 32 34 34 34 00 00 00 1c 00 c4 01
>0273d8	2e 3e 1f 30 06 00 03 52 51 49 24 32 01 40 28 32
>0273e8	06 22 04 00 01 52 00 00 1c 00 c5 01 2e 3e 21 30
>0273f8	06 00 03 52 51 49 24 32 01 40 28 32 06 22 04 00
>027408	01 49 00 00 20 00 c6 01 2e 3e 20 30 06 00 03 52
>027418	51 49 24 32 04 40 24 32 01 40 28 32 06 22 04 00
>027428	00 00 00 00 1e 00 c7 01 2e 3e 22 30 08 00 05 52
>027438	43 4a 43 46 24 32 04 00 01 52 28 32 06 22 01 40
>027448	00 00 14 00 c8 01 2e 3e 13 30 cb cc 2c c4 28 32
>027458	06 22 3f 40 00 00 16 00 c9 01 2e 3e 12 30 0b 24
>027468	3f 40 28 32 06 22 0b 24 01 40 00 00 14 00 ca 01
>027478	2e 3e 14 30 59 ed 1b e0 28 32 06 22 01 40 00 00
>027488	1c 00 cb 01 2e 3e 15 30 06 00 03 2d 34 33 24 32
>027498	0f 40 28 32 06 22 0b 24 3f 40 00 00 1c 00 cc 01
>0274a8	2e 3e 16 30 0b 24 3f 40 24 32 0f 40 28 32 06 22
>0274b8	06 00 03 2d 34 33 00 00 1a 00 cd 01 2e 3e 1f 30
>0274c8	59 ed 1b e0 24 32 00 40 28 32 06 22 04 00 00 00
>0274d8	00 00 1a 00 ce 01 2e 3e 21 30 59 ed 1b e0 24 32
>0274e8	00 40 28 32 06 22 04 00 00 00 00 00 1e 00 cf 01
>0274f8	2e 3e 20 30 04 00 01 48 24 32 01 40 24 32 00 40
>027508	28 32 06 22 04 00 00 00 00 00 22 00 d0 01 2e 3e
>027518	22 30 0a 00 07 41 54 4a 51 48 20 47 24 32 06 00
>027528	02 20 47 00 28 32 06 22 06 40 00 00 18 00 d1 01
>027538	2e 3e 13 30 0b 24 01 10 dc 8c 28 32 06 22 01 10
>027548	dc 8c 00 00 16 00 d2 01 2e 3e 12 30 5b cd 02 c0
>027558	28 32 06 22 0b 24 01 40 00 00 14 00 d3 01 2e 3e
>027568	14 30 2d ee 17 e0 28 32 06 22 01 40 00 00 24 00
>027578	d4 01 2e 3e 15 30 0c 00 08 2d 31 30 34 32 34 34
>027588	34 00 24 32 06 40 28 32 06 22 0b 24 01 10 dc 8c
>027598	00 00 24 00 d5 01 2e 3e 16 30 0b 24 01 10 dc 8c
>0275a8	24 32 06 40 28 32 06 22 0c 00 08 2d 31 30 34 32
>0275b8	34 34 34 00 00 00 1a 00 d6 01 2e 3e 1f 30 2d ee
>0275c8	17 e0 24 32 02 40 28 32 06 22 04 00 01 54 00 00
>0275d8	1a 00 d7 01 2e 3e 21 30 2d ee 17 e0 24 32 02 40
>0275e8	28 32 06 22 04 00 01 54 00 00 1e 00 d8 01 2e 3e
>0275f8	20 30 04 00 01 54 24 32 01 40 24 32 00 40 28 32
>027608	06 22 04 00 00 00 00 00 22 00 d9 01 2e 3e 22 30
>027618	0a 00 07 4f 43 47 54 20 20 54 24 32 06 00 02 20
>027628	54 00 28 32 06 22 06 40 00 00 16 00 da 01 2e 3e
>027638	13 30 01 10 2d 9b 28 32 06 22 01 10 2d 9b 00 00
>027648	16 00 db 01 2e 3e 12 30 35 ce 16 c9 01 c0 28 32
>027658	06 22 01 40 00 00 1c 00 dc 01 2e 3e 14 30 0c 00
>027668	09 41 4d 4e 42 44 4c 4e 20 50 28 32 06 22 09 40
>027678	00 00 20 00 dd 01 2e 3e 15 30 0a 00 07 31 31 31
>027688	31 34 33 33 24 32 06 40 28 32 06 22 01 10 2d 9b
>027698	00 00 20 00 de 01 2e 3e 16 30 01 10 2d 9b 24 32
>0276a8	06 40 28 32 06 22 0a 00 07 31 31 31 31 34 33 33
>0276b8	00 00 26 00 df 01 2e 3e 1f 30 0c 00 09 41 4d 4e
>0276c8	42 44 4c 4e 20 50 24 32 05 40 28 32 06 22 08 00
>0276d8	05 41 4d 4e 42 44 00 00 1c 00 e0 01 2e 3e 21 30
>0276e8	63 e6 24 32 05 40 28 32 06 22 08 00 05 44 4c 4e
>0276f8	20 50 00 00 28 00 e1 01 2e 3e 20 30 0c 00 09 41
>027708	4d 4e 42 44 4c 4e 20 50 24 32 08 40 24 32 02 40
>027718	28 32 06 22 06 00 02 20 50 00 00 00 24 00 e2 01
>027728	2e 3e 22 30 0c 00 09 53 20 4b 49 41 49 49 4f 53
>027738	24 32 06 00 02 49 41 00 28 32 06 22 04 40 00 00
>027748	14 00 e3 01 2e 3e 13 30 a8 cd be c3 28 32 06 22
>027758	bf 40 00 00 16 00 e4 01 2e 3e 12 30 0b 24 bf 40
>027768	28 32 06 22 0b 24 01 40 00 00 12 00 e5 01 2e 3e
>027778	14 30 02 e0 28 32 06 22 03 40 00 00 1c 00 e6 01
>027788	2e 3e 15 30 06 00 03 2d 43 42 24 32 0f 40 28 32
>027798	06 22 0b 24 bf 40 00 00 1c 00 e7 01 2e 3e 16 30
>0277a8	0b 24 bf 40 24 32 0f 40 28 32 06 22 06 00 03 2d
>0277b8	63 62 00 00 1a 00 e8 01 2e 3e 1f 30 02 e0 24 32
>0277c8	03 40 28 32 06 22 06 00 03 45 20 4e 00 00 1e 00
>0277d8	e9 01 2e 3e 21 30 06 00 03 45 20 4e 24 32 03 40
>0277e8	28 32 06 22 06 00 03 45 20 4e 00 00 20 00 ea 01
>0277f8	2e 3e 20 30 06 00 03 45 20 4e 24 32 05 40 24 32
>027808	02 40 28 32 06 22 04 00 00 00 00 00 20 00 eb 01
>027818	2e 3e 22 30 08 00 05 43 56 54 4a 42 24 32 06 00
>027828	02 4a 42 00 28 32 06 22 04 40 00 00 18 00 ec 01
>027838	2e 3e 13 30 f3 cc 24 cd 16 c0 28 32 06 22 05 10
>027848	90 44 00 00 18 00 ed 01 2e 3e 12 30 0b 24 05 10
>027858	90 44 28 32 06 22 0b 24 01 40 00 00 12 00 ee 01
>027868	2e 3e 14 30 83 e5 28 32 06 22 03 40 00 00 22 00
>027878	ef 01 2e 3e 15 30 0a 00 07 2d 31 36 35 30 30 38
>027888	24 32 0a 40 28 32 06 22 0b 24 05 10 90 44 00 00
>027898	22 00 f0 01 2e 3e 16 30 0b 24 05 10 90 44 24 32
>0278a8	0a 40 28 32 06 22 0a 00 07 2d 31 36 35 30 30 38
>0278b8	00 00 1a 00 f1 01 2e 3e 1f 30 83 e5 24 32 05 40
>0278c8	28 32 06 22 06 00 03 46 41 4e 00 00 1e 00 f2 01
>0278d8	2e 3e 21 30 06 00 03 46 41 4e 24 32 05 40 28 32
>0278e8	06 22 06 00 03 46 41 4e 00 00 22 00 f3 01 2e 3e
>0278f8	20 30 06 00 03 46 41 4e 24 32 01 40 24 32 02 40
>027908	28 32 06 22 06 00 02 46 41 00 00 00 20 00 f4 01
>027918	2e 3e 22 30 08 00 04 44 47 20 54 00 24 32 06 00
>027928	02 20 54 00 28 32 06 22 03 40 00 00 18 00 f5 01
>027938	2e 3e 13 30 0b 24 01 10 dc 8c 28 32 06 22 01 10
>027948	dc 8c 00 00 16 00 f6 01 2e 3e 12 30 5b cd 02 c0
>027958	28 32 06 22 0b 24 01 40 00 00 14 00 f7 01 2e 3e
>027968	14 30 04 00 00 00 28 32 06 22 00 40 00 00 24 00
>027978	f8 01 2e 3e 15 30 0c 00 08 2d 31 30 34 32 34 34
>027988	34 00 24 32 06 40 28 32 06 22 0b 24 01 10 dc 8c
>027998	00 00 24 00 f9 01 2e 3e 16 30 0b 24 01 10 dc 8c
>0279a8	24 32 06 40 28 32 06 22 0c 00 08 2d 31 30 34 32
>0279b8	34 34 34 00 00 00 18 00 fa 01 2e 3e 1f 30 17 e0
>0279c8	24 32 00 40 28 32 06 22 04 00 00 00 00 00 18 00
>0279d8	fb 01 2e 3e 21 30 17 e0 24 32 00 40 28 32 06 22
>0279e8	04 00 00 00 00 00 1e 00 fc 01 2e 3e 20 30 04 00
>0279f8	00 00 24 32 01 40 24 32 00 40 28 32 06 22 04 00
>027a08	00 00 00 00 1e 00 fd 01 2e 3e 22 30 06 00 03 46
>027a18	41 4e 24 32 06 00 02 41 4e 00 28 32 06 22 02 40
>027a28	00 00 16 00 fe 01 2e 3e 13 30 01 10 ca af 28 32
>027a38	06 22 01 10 ca af 00 00 14 00 ff 01 2e 3e 12 30
>027a48	01 10 ca af 28 32 06 22 01 40 00 00 14 00 00 02
>027a58	2e 3e 14 30 cf ed 1a e0 28 32 06 22 04 40 00 00
>027a68	24 00 01 02 2e 3e 15 30 0e 00 0b 31 30 30 31 30
>027a78	30 31 32 31 32 30 24 32 03 40 28 32 06 22 01 10
>027a88	ca af 00 00 24 00 02 02 2e 3e 16 30 01 10 ca af
>027a98	24 32 03 40 28 32 06 22 0e 00 0b 31 30 30 31 30
>027aa8	30 31 32 31 32 30 00 00 1e 00 03 02 2e 3e 1f 30
>027ab8	08 00 04 44 4a 5a 53 00 24 32 00 40 28 32 06 22
>027ac8	04 00 00 00 00 00 1e 00 04 02 2e 3e 21 30 08 00
>027ad8	04 44 4a 5a 53 00 24 32 00 40 28 32 06 22 04 00
>027ae8	00 00 00 00 22 00 05 02 2e 3e 20 30 08 00 04 44
>027af8	4a 5a 53 00 24 32 06 40 24 32 01 40 28 32 06 22
>027b08	04 00 00 00 00 00 20 00 06 02 2e 3e 22 30 0a 00
>027b18	06 58 51 4a 20 59 44 00 24 32 04 00 01 52 28 32
>027b28	06 22 00 40 00 00 18 00 07 02 2e 3e 13 30 5c cd
>027b38	4d c9 17 c0 28 32 06 22 01 10 af a4 00 00 18 00
>027b48	08 02 2e 3e 12 30 5c cd 4d c9 17 c0 28 32 06 22
>027b58	0b 24 01 40 00 00 16 00 09 02 2e 3e 14 30 06 00
>027b68	03 57 20 59 28 32 06 22 03 40 00 00 22 00 0a 02
>027b78	2e 3e 15 30 0a 00 06 2d 38 38 32 36 37 00 24 32
>027b88	09 40 28 32 06 22 0b 24 01 10 af a4 00 00 22 00
>027b98	0b 02 2e 3e 16 30 0b 24 01 10 af a4 24 32 09 40
>027ba8	28 32 06 22 0a 00 06 2d 38 38 32 36 37 00 00 00
>027bb8	1e 00 0c 02 2e 3e 1f 30 06 00 03 57 20 59 24 32
>027bc8	05 40 28 32 06 22 06 00 03 57 20 59 00 00 1a 00
>027bd8	0d 02 2e 3e 21 30 03 e0 24 32 05 40 28 32 06 22
>027be8	06 00 03 57 20 59 00 00 20 00 0e 02 2e 3e 20 30
>027bf8	06 00 03 57 20 59 24 32 02 40 24 32 01 40 28 32
>027c08	06 22 04 00 01 20 00 00 24 00 0f 02 2e 3e 22 30
>027c18	0c 00 09 57 20 56 56 20 20 4d 43 4c 24 32 06 00
>027c28	02 4a 5a 00 28 32 06 22 00 40 00 00 16 00 10 02
>027c38	2e 3e 13 30 0a ce 2b c3 28 32 06 22 01 10 db 52
>027c48	00 00 14 00 11 02 2e 3e 12 30 01 10 db 52 28 32
>027c58	06 22 01 40 00 00 14 00 12 02 2e 3e 14 30 04 00
>027c68	00 00 28 32 06 22 00 40 00 00 1e 00 13 02 2e 3e
>027c78	15 30 08 00 05 31 34 31 35 43 24 32 0d 40 28 32
>027c88	06 22 01 10 db 52 00 00 1e 00 14 02 2e 3e 16 30
>027c98	01 10 db 52 24 32 0d 40 28 32 06 22 08 00 05 31
>027ca8	34 31 35 63 00 00 1a 00 15 02 2e 3e 1f 30 04 00
>027cb8	00 00 24 32 01 40 28 32 06 22 04 00 00 00 00 00
>027cc8	1a 00 16 02 2e 3e 21 30 04 00 00 00 24 32 01 40
>027cd8	28 32 06 22 04 00 00 00 00 00 1e 00 17 02 2e 3e
>027ce8	20 30 04 00 00 00 24 32 02 40 24 32 01 40 28 32
>027cf8	06 22 04 00 00 00 00 00 24 00 18 02 2e 3e 22 30
>027d08	0e 00 0a 41 50 54 44 52 56 20 43 49 49 00 24 32
>027d18	04 00 01 41 28 32 06 22 01 40 00 00 16 00 19 02
>027d28	2e 3e 13 30 02 10 36 72 28 32 06 22 02 10 36 72
>027d38	00 00 14 00 1a 02 2e 3e 12 30 02 10 36 72 28 32
>027d48	06 22 01 40 00 00 16 00 1b 02 2e 3e 14 30 06 00
>027d58	02 53 54 00 28 32 06 22 02 40 00 00 22 00 1c 02
>027d68	2e 3e 15 30 0c 00 09 31 30 33 30 32 30 33 31 32
>027d78	24 32 04 40 28 32 06 22 02 10 36 72 00 00 22 00
>027d88	1d 02 2e 3e 16 30 02 10 36 72 24 32 04 40 28 32
>027d98	06 22 0c 00 09 31 30 33 30 32 30 33 31 32 00 00
>027da8	1c 00 1e 02 2e 3e 1f 30 06 00 02 53 54 00 24 32
>027db8	00 40 28 32 06 22 04 00 00 00 00 00 1e 00 1f 02
>027dc8	2e 3e 21 30 b8 fd b8 f2 01 40 28 32 24 32 00 40
>027dd8	28 32 06 22 04 00 00 00 00 00 20 00 20 02 2e 3e
>027de8	20 30 06 00 02 53 54 00 24 32 02 40 24 32 01 40
>027df8	28 32 06 22 04 00 01 54 00 00 24 00 21 02 2e 3e
>027e08	22 30 0e 00 0a 42 49 44 4e 56 42 43 4d 43 4f 00
>027e18	24 32 04 00 01 49 28 32 06 22 02 40 00 00 14 00
>027e28	22 02 2e 3e 13 30 82 cd c6 c4 28 32 06 22 87 40
>027e38	00 00 16 00 23 02 2e 3e 12 30 82 cd c6 c4 28 32
>027e48	06 22 0b 24 01 40 00 00 12 00 24 02 2e 3e 14 30
>027e58	03 e0 28 32 06 22 03 40 00 00 1e 00 25 02 2e 3e
>027e68	15 30 08 00 04 2d 31 33 35 00 24 32 0a 40 28 32
>027e78	06 22 0b 24 87 40 00 00 1e 00 26 02 2e 3e 16 30
>027e88	0b 24 87 40 24 32 0a 40 28 32 06 22 08 00 04 2d
>027e98	31 33 35 00 00 00 1e 00 27 02 2e 3e 1f 30 06 00
>027ea8	03 57 20 59 24 32 02 40 28 32 06 22 06 00 02 57
>027eb8	20 00 00 00 1e 00 28 02 2e 3e 21 30 06 00 03 57
>027ec8	20 59 24 32 02 40 28 32 06 22 06 00 02 20 59 00
>027ed8	00 00 22 00 29 02 2e 3e 20 30 06 00 03 57 20 59
>027ee8	24 32 02 40 24 32 02 40 28 32 06 22 06 00 02 20
>027ef8	59 00 00 00 24 00 2a 02 2e 3e 22 30 0c 00 09 55
>027f08	20 51 4f 4a 56 20 20 54 24 32 06 00 02 41 50 00
>027f18	28 32 06 22 00 40 00 00 16 00 2b 02 2e 3e 13 30
>027f28	28 cd 2e c2 28 32 06 22 05 10 74 6d 00 00 18 00
>027f38	2c 02 2e 3e 12 30 0b 24 05 10 74 6d 28 32 06 22
>027f48	0b 24 01 40 00 00 12 00 2d 02 2e 3e 14 30 0b e0
>027f58	28 32 06 22 01 40 00 00 22 00 2e 02 2e 3e 15 30
>027f68	0a 00 06 2d 38 35 36 37 30 00 24 32 0c 40 28 32
>027f78	06 22 0b 24 05 10 74 6d 00 00 22 00 2f 02 2e 3e
>027f88	16 30 0b 24 05 10 74 6d 24 32 0c 40 28 32 06 22
>027f98	0a 00 06 2d 38 35 36 37 30 00 00 00 18 00 30 02
>027fa8	2e 3e 1f 30 0b e0 24 32 02 40 28 32 06 22 04 00
>027fb8	01 4f 00 00 18 00 31 02 2e 3e 21 30 0b e0 24 32
>027fc8	02 40 28 32 06 22 04 00 01 4f 00 00 1e 00 32 02
>027fd8	2e 3e 20 30 04 00 01 4f 24 32 03 40 24 32 00 40
>027fe8	28 32 06 22 04 00 00 00 00 00 20 00 33 02 2e 3e
>027ff8	22 30 0a 00 06 4e 20 48 4a 4c 52 00 24 32 04 00
>028008	01 52 28 32 06 22 06 40 00 00 16 00 34 02 2e 3e
>028018	13 30 01 10 ca af 28 32 06 22 01 10 ca af 00 00
>028028	14 00 35 02 2e 3e 12 30 01 10 ca af 28 32 06 22
>028038	01 40 00 00 1a 00 36 02 2e 3e 14 30 0a 00 06 54
>028048	47 4c 59 52 58 00 28 32 06 22 06 40 00 00 2a 00
>028058	37 02 2e 3e 15 30 14 00 10 31 31 31 30 31 31 31
>028068	31 31 31 30 30 31 30 31 30 00 24 32 02 40 28 32
>028078	06 22 01 10 ca af 00 00 2a 00 38 02 2e 3e 16 30
>028088	01 10 ca af 24 32 02 40 28 32 06 22 14 00 10 31
>028098	31 31 30 31 31 31 31 31 31 30 30 31 30 31 30 00
>0280a8	00 00 24 00 39 02 2e 3e 1f 30 0a 00 06 54 47 4c
>0280b8	59 52 58 00 24 32 04 40 28 32 06 22 08 00 04 54
>0280c8	47 4c 59 00 00 00 24 00 3a 02 2e 3e 21 30 0a 00
>0280d8	06 54 47 4c 59 52 58 00 24 32 04 40 28 32 06 22
>0280e8	08 00 04 4c 59 52 58 00 00 00 24 00 3b 02 2e 3e
>0280f8	20 30 0a 00 06 54 47 4c 59 52 58 00 24 32 08 40
>028108	24 32 01 40 28 32 06 22 04 00 00 00 00 00 1c 00
>028118	3c 02 2e 3e 22 30 06 00 03 52 51 49 24 32 04 00
>028128	01 52 28 32 06 22 01 40 00 00 18 00 3d 02 2e 3e
>028138	13 30 69 ce a1 cd 1b c0 28 32 06 22 02 10 d4 66
>028148	00 00 14 00 3e 02 2e 3e 12 30 02 10 d4 66 28 32
>028158	06 22 01 40 00 00 18 00 3f 02 2e 3e 14 30 08 00
>028168	05 59 5a 53 20 4b 28 32 06 22 05 40 00 00 24 00
>028178	40 02 2e 3e 15 30 0e 00 0b 31 30 32 31 31 31 31
>028188	32 31 30 32 24 32 03 40 28 32 06 22 02 10 d4 66
>028198	00 00 24 00 41 02 2e 3e 16 30 02 10 d4 66 24 32
>0281a8	03 40 28 32 06 22 0e 00 0b 31 30 32 31 31 31 31
>0281b8	32 31 30 32 00 00 1a 00 42 02 2e 3e 1f 30 d3 e5
>0281c8	24 32 03 40 28 32 06 22 06 00 03 59 5a 53 00 00
>0281d8	1a 00 43 02 2e 3e 21 30 d3 e5 24 32 03 40 28 32
>0281e8	06 22 06 00 03 53 20 4b 00 00 22 00 44 02 2e 3e
>0281f8	20 30 08 00 05 59 5a 53 20 4b 24 32 06 40 24 32
>028208	01 40 28 32 06 22 04 00 00 00 00 00 20 00 45 02
>028218	2e 3e 22 30 08 00 05 43 56 54 4a 42 24 32 06 00
>028228	02 4a 42 00 28 32 06 22 04 40 00 00 18 00 46 02
>028238	2e 3e 13 30 0b 24 02 10 70 71 28 32 06 22 02 10
>028248	70 71 00 00 18 00 47 02 2e 3e 12 30 04 cd 66 ce
>028258	0a c0 28 32 06 22 0b 24 01 40 00 00 12 00 48 02
>028268	2e 3e 14 30 d3 e5 28 32 06 22 05 40 00 00 22 00
>028278	49 02 2e 3e 15 30 0a 00 07 2d 31 32 38 32 33 30
>028288	24 32 09 40 28 32 06 22 0b 24 02 10 70 71 00 00
>028298	22 00 4a 02 2e 3e 16 30 0b 24 02 10 70 71 24 32
>0282a8	09 40 28 32 06 22 0a 00 07 2d 31 32 38 32 33 30
>0282b8	00 00 1c 00 4b 02 2e 3e 1f 30 d3 e5 24 32 04 40
>0282c8	28 32 06 22 08 00 04 59 5a 53 20 00 00 00 1c 00
>0282d8	4c 02 2e 3e 21 30 d3 e5 24 32 04 40 28 32 06 22
>0282e8	08 00 04 5a 53 20 4b 00 00 00 24 00 4d 02 2e 3e
>0282f8	20 30 08 00 05 59 5a 53 20 4b 24 32 02 40 24 32
>028308	03 40 28 32 06 22 06 00 03 5a 53 20 00 00 24 00
>028318	4e 02 2e 3e 22 30 0c 00 09 55 20 51 4f 4a 56 20
>028328	20 54 24 32 06 00 02 20 20 00 28 32 06 22 07 40
>028338	00 00 18 00 4f 02 2e 3e 13 30 0b 24 01 10 e6 98
>028348	28 32 06 22 01 10 e6 98 00 00 18 00 50 02 2e 3e
>028358	12 30 0b 24 01 10 e6 98 28 32 06 22 0b 24 01 40
>028368	00 00 14 00 51 02 2e 3e 14 30 14 ee 5c e3 28 32
>028378	06 22 0b 40 00 00 20 00 52 02 2e 3e 15 30 08 00
>028388	05 2d 44 38 45 36 24 32 10 40 28 32 06 22 0b 24
>028398	01 10 e6 98 00 00 20 00 53 02 2e 3e 16 30 0b 24
>0283a8	01 10 e6 98 24 32 10 40 28 32 06 22 08 00 05 2d
>0283b8	64 38 65 36 00 00 20 00 54 02 2e 3e 1f 30 14 ee
>0283c8	5c e3 24 32 06 40 28 32 06 22 0a 00 06 49 46 20
>0283d8	41 20 44 00 00 00 2a 00 55 02 2e 3e 21 30 0e 00
>0283e8	0b 49 46 20 41 20 44 20 20 58 47 48 24 32 06 40
>0283f8	28 32 06 22 0a 00 06 44 20 20 58 47 48 00 00 00
>028408	2a 00 56 02 2e 3e 20 30 0e 00 0b 49 46 20 41 20
>028418	44 20 20 58 47 48 24 32 09 40 24 32 05 40 28 32
>028428	06 22 06 00 03 58 47 48 00 00 20 00 57 02 2e 3e
>028438	22 30 08 00 04 41 49 42 43 00 24 32 06 00 02 41
>028448	49 00 28 32 06 22 01 40 00 00 16 00 58 02 2e 3e
>028458	13 30 01 10 bd a0 28 32 06 22 01 10 bd a0 00 00
>028468	16 00 59 02 2e 3e 12 30 06 ce b5 c9 05 c0 28 32
>028478	06 22 01 40 00 00 1c 00 5a 02 2e 3e 14 30 0c 00
>028488	09 53 20 4b 49 41 49 49 4f 53 28 32 06 22 09 40
>028498	00 00 20 00 5b 02 2e 3e 15 30 0a 00 07 33 33 32
>0284a8	30 31 31 33 24 32 05 40 28 32 06 22 01 10 bd a0
>0284b8	00 00 20 00 5c 02 2e 3e 16 30 01 10 bd a0 24 32
>0284c8	05 40 28 32 06 22 0a 00 07 33 33 32 30 31 31 33
>0284d8	00 00 1c 00 5d 02 2e 3e 1f 30 fd e4 24 32 05 40
>0284e8	28 32 06 22 08 00 05 53 20 4b 49 41 00 00 26 00
>0284f8	5e 02 2e 3e 21 30 0c 00 09 53 20 4b 49 41 49 49
>028508	4f 53 24 32 05 40 28 32 06 22 08 00 05 41 49 49
>028518	4f 53 00 00 26 00 5f 02 2e 3e 20 30 0c 00 09 53
>028528	20 4b 49 41 49 49 4f 53 24 32 0b 40 24 32 00 40
>028538	28 32 06 22 04 00 00 00 00 00 1e 00 60 02 2e 3e
>028548	22 30 08 00 05 4c 55 4a 5a 4a 24 32 04 00 01 4c
>028558	28 32 06 22 01 40 00 00 14 00 61 02 2e 3e 13 30
>028568	0b 24 bf 40 28 32 06 22 bf 40 00 00 16 00 62 02
>028578	2e 3e 12 30 a8 cd be c3 28 32 06 22 0b 24 01 40
>028588	00 00 14 00 63 02 2e 3e 14 30 59 ed 1b e0 28 32
>028598	06 22 01 40 00 00 1e 00 64 02 2e 3e 15 30 08 00
>0285a8	04 2d 32 33 32 00 24 32 09 40 28 32 06 22 0b 24
>0285b8	bf 40 00 00 1e 00 65 02 2e 3e 16 30 0b 24 bf 40
>0285c8	24 32 09 40 28 32 06 22 08 00 04 2d 32 33 32 00
>0285d8	00 00 1a 00 66 02 2e 3e 1f 30 04 00 01 48 24 32
>0285e8	02 40 28 32 06 22 04 00 01 48 00 00 1a 00 67 02
>0285f8	2e 3e 21 30 59 ed 1b e0 24 32 02 40 28 32 06 22
>028608	04 00 01 48 00 00 1e 00 68 02 2e 3e 20 30 04 00
>028618	01 48 24 32 03 40 24 32 01 40 28 32 06 22 04 00
>028628	00 00 00 00 24 00 69 02 2e 3e 22 30 0c 00 08 41
>028638	47 4b 54 5a 4b 58 47 00 24 32 06 00 02 54 5a 00
>028648	28 32 06 22 04 40 00 00 16 00 6a 02 2e 3e 13 30
>028658	01 10 bd a0 28 32 06 22 01 10 bd a0 00 00 16 00
>028668	6b 02 2e 3e 12 30 06 ce b5 c9 05 c0 28 32 06 22
>028678	01 40 00 00 14 00 6c 02 2e 3e 14 30 03 ee 12 e0
>028688	28 32 06 22 05 40 00 00 1e 00 6d 02 2e 3e 15 30
>028698	08 00 05 33 41 32 35 33 24 32 0b 40 28 32 06 22
>0286a8	01 10 bd a0 00 00 1e 00 6e 02 2e 3e 16 30 01 10
>0286b8	bd a0 24 32 0b 40 28 32 06 22 08 00 05 33 61 32
>0286c8	35 33 00 00 1e 00 6f 02 2e 3e 1f 30 08 00 05 51
>0286d8	56 42 54 43 24 32 01 40 28 32 06 22 04 00 01 51
>0286e8	00 00 1e 00 70 02 2e 3e 21 30 08 00 05 51 56 42
>0286f8	54 43 24 32 01 40 28 32 06 22 04 00 01 43 00 00
>028708	24 00 71 02 2e 3e 20 30 08 00 05 51 56 42 54 43
>028718	24 32 04 40 24 32 02 40 28 32 06 22 06 00 02 54
>028728	43 00 00 00 20 00 72 02 2e 3e 22 30 08 00 05 51
>028738	56 42 54 43 24 32 06 00 02 56 42 00 28 32 06 22
>028748	02 40 00 00 18 00 73 02 2e 3e 13 30 c8 d4 00 40
>028758	28 32 28 32 06 22 04 10 3e 44 00 00 16 00 74 02
>028768	2e 3e 12 30 c8 d4 00 40 28 32 28 32 06 22 01 40
>028778	00 00 18 00 75 02 2e 3e 14 30 b8 fd b8 f2 01 40
>028788	28 32 28 32 06 22 02 40 00 00 1e 00 76 02 2e 3e
>028798	15 30 08 00 05 32 30 34 33 45 24 32 10 40 28 32
>0287a8	06 22 04 10 3e 44 00 00 1e 00 77 02 2e 3e 16 30
>0287b8	04 10 3e 44 24 32 10 40 28 32 06 22 08 00 05 32
>0287c8	30 34 33 65 00 00 20 00 78 02 2e 3e 1f 30 b8 fd
>0287d8	b8 f2 01 40 28 32 24 32 04 40 28 32 06 22 06 00
>0287e8	02 53 54 00 00 00 1e 00 79 02 2e 3e 21 30 06 00
>0287f8	02 53 54 00 24 32 04 40 28 32 06 22 06 00 02 53
>028808	54 00 00 00 20 00 7a 02 2e 3e 20 30 06 00 02 53
>028818	54 00 24 32 02 40 24 32 01 40 28 32 06 22 04 00
>028828	01 54 00 00 24 00 7b 02 2e 3e 22 30 0e 00 0a 42
>028838	49 44 4e 56 42 43 4d 43 4f 00 24 32 04 00 01 4f
>028848	28 32 06 22 0a 40 00 00 18 00 7c 02 2e 3e 13 30
>028858	69 ce a1 cd 1b c0 28 32 06 22 02 10 d4 66 00 00
>028868	16 00 7d 02 2e 3e 12 30 69 ce a1 cd 1b c0 28 32
>028878	06 22 01 40 00 00 12 00 7e 02 2e 3e 14 30 fd e4
>028888	28 32 06 22 09 40 00 00 20 00 7f 02 2e 3e 15 30
>028898	0a 00 06 31 32 34 34 37 32 00 24 32 09 40 28 32
>0288a8	06 22 02 10 d4 66 00 00 20 00 80 02 2e 3e 16 30
>0288b8	02 10 d4 66 24 32 09 40 28 32 06 22 0a 00 06 31
>0288c8	32 34 34 37 32 00 00 00 1c 00 81 02 2e 3e 1f 30
>0288d8	fd e4 24 32 05 40 28 32 06 22 08 00 05 53 20 4b
>0288e8	49 41 00 00 1c 00 82 02 2e 3e 21 30 fd e4 24 32
>0288f8	05 40 28 32 06 22 08 00 05 41 49 49 4f 53 00 00
>028908	28 00 83 02 2e 3e 20 30 0c 00 09 53 20 4b 49 41
>028918	49 49 4f 53 24 32 07 40 24 32 03 40 28 32 06 22
>028928	06 00 03 49 4f 53 00 00 20 00 84 02 2e 3e 22 30
>028938	08 00 05 59 5a 53 20 4b 24 32 06 00 02 53 20 00
>028948	28 32 06 22 03 40 00 00 14 00 85 02 2e 3e 13 30
>028958	0b 24 4e 40 28 32 06 22 4e 40 00 00 16 00 86 02
>028968	2e 3e 12 30 0b 24 4e 40 28 32 06 22 0b 24 01 40
>028978	00 00 18 00 87 02 2e 3e 14 30 8a fd fb f3 06 40
>028988	28 32 28 32 06 22 03 40 00 00 1e 00 88 02 2e 3e
>028998	15 30 08 00 05 2d 31 30 33 32 24 32 04 40 28 32
>0289a8	06 22 0b 24 4e 40 00 00 1e 00 89 02 2e 3e 16 30
>0289b8	0b 24 4e 40 24 32 04 40 28 32 06 22 08 00 05 2d
>0289c8	31 30 33 32 00 00 20 00 8a 02 2e 3e 1f 30 8a fd
>0289d8	fb f3 06 40 28 32 24 32 05 40 28 32 06 22 06 00
>0289e8	03 4e 59 4e 00 00 1e 00 8b 02 2e 3e 21 30 06 00
>0289f8	03 4e 59 4e 24 32 05 40 28 32 06 22 06 00 03 4e
>028a08	59 4e 00 00 20 00 8c 02 2e 3e 20 30 06 00 03 4e
>028a18	59 4e 24 32 01 40 24 32 00 40 28 32 06 22 04 00
>028a28	00 00 00 00 26 00 8d 02 2e 3e 22 30 0e 00 0b 52
>028a38	56 4b 41 20 42 4a 43 59 52 45 24 32 06 00 03 4a
>028a48	43 59 28 32 06 22 07 40 00 00 18 00 8e 02 2e 3e
>028a58	13 30 5c cd 4d c9 17 c0 28 32 06 22 01 10 af a4
>028a68	00 00 18 00 8f 02 2e 3e 12 30 0b 24 01 10 af a4
>028a78	28 32 06 22 0b 24 01 40 00 00 1c 00 90 02 2e 3e
>028a88	14 30 0c 00 09 55 20 51 4f 4a 56 20 20 54 28 32
>028a98	06 22 09 40 00 00 26 00 91 02 2e 3e 15 30 0e 00
>028aa8	0b 2d 32 32 32 32 30 32 32 30 32 31 24 32 03 40
>028ab8	28 32 06 22 0b 24 01 10 af a4 00 00 26 00 92 02
>028ac8	2e 3e 16 30 0b 24 01 10 af a4 24 32 03 40 28 32
>028ad8	06 22 0e 00 0b 2d 32 32 32 32 30 32 32 30 32 31
>028ae8	00 00 1a 00 93 02 2e 3e 1f 30 13 ee 1b e0 24 32
>028af8	01 40 28 32 06 22 04 00 01 55 00 00 1a 00 94 02
>028b08	2e 3e 21 30 13 ee 1b e0 24 32 01 40 28 32 06 22
>028b18	04 00 01 54 00 00 26 00 95 02 2e 3e 20 30 0c 00
>028b28	09 55 20 51 4f 4a 56 20 20 54 24 32 05 40 24 32
>028b38	01 40 28 32 06 22 04 00 01 4a 00 00 24 00 96 02
>028b48	2e 3e 22 30 0c 00 09 53 20 4b 49 41 49 49 4f 53
>028b58	24 32 06 00 03 49 41 49 28 32 06 22 04 40 00 00
>028b68	16 00 97 02 2e 3e 13 30 03 10 5e b3 28 32 06 22
>028b78	03 10 5e b3 00 00 14 00 98 02 2e 3e 12 30 03 10
>028b88	5e b3 28 32 06 22 01 40 00 00 14 00 99 02 2e 3e
>028b98	14 30 ae ed 23 e0 28 32 06 22 02 40 00 00 20 00
>028ba8	9a 02 2e 3e 15 30 0a 00 07 31 30 34 31 34 36 34
>028bb8	24 32 07 40 28 32 06 22 03 10 5e b3 00 00 20 00
>028bc8	9b 02 2e 3e 16 30 03 10 5e b3 24 32 07 40 28 32
>028bd8	06 22 0a 00 07 31 30 34 31 34 36 34 00 00 1c 00
>028be8	9c 02 2e 3e 1f 30 ae ed 23 e0 24 32 03 40 28 32
>028bf8	06 22 06 00 02 42 51 00 00 00 1e 00 9d 02 2e 3e
>028c08	21 30 06 00 02 42 51 00 24 32 03 40 28 32 06 22
>028c18	06 00 02 42 51 00 00 00 20 00 9e 02 2e 3e 20 30
>028c28	06 00 02 42 51 00 24 32 02 40 24 32 00 40 28 32
>028c38	06 22 04 00 00 00 00 00 1e 00 9f 02 2e 3e 22 30
>028c48	08 00 05 49 43 4e 43 43 24 32 04 00 01 43 28 32
>028c58	06 22 02 40 00 00 18 00 a0 02 2e 3e 13 30 3f ce
>028c68	fc c8 0d c0 28 32 06 22 03 10 c5 9e 00 00 18 00
>028c78	a1 02 2e 3e 12 30 0b 24 03 10 c5 9e 28 32 06 22
>028c88	0b 24 01 40 00 00 12 00 a2 02 2e 3e 14 30 08 e0
>028c98	28 32 06 22 05 40 00 00 22 00 a3 02 2e 3e 15 30
>028ca8	0a 00 06 2d 33 32 39 34 39 00 24 32 0e 40 28 32
>028cb8	06 22 0b 24 03 10 c5 9e 00 00 22 00 a4 02 2e 3e
>028cc8	16 30 0b 24 03 10 c5 9e 24 32 0e 40 28 32 06 22
>028cd8	0a 00 06 2d 33 32 39 34 39 00 00 00 20 00 a5 02
>028ce8	2e 3e 1f 30 08 00 05 4c 55 4a 5a 4a 24 32 03 40
>028cf8	28 32 06 22 06 00 03 4c 55 4a 00 00 1a 00 a6 02
>028d08	2e 3e 21 30 08 e0 24 32 03 40 28 32 06 22 06 00
>028d18	03 4a 5a 4a 00 00 22 00 a7 02 2e 3e 20 30 08 00
>028d28	05 4c 55 4a 5a 4a 24 32 07 40 24 32 00 40 28 32
>028d38	06 22 04 00 00 00 00 00 26 00 a8 02 2e 3e 22 30
>028d48	0e 00 0b 4d 45 41 59 20 20 51 47 20 20 42 24 32
>028d58	06 00 03 59 20 20 28 32 06 22 04 40 00 00 16 00
>028d68	a9 02 2e 3e 13 30 03 10 ce 92 28 32 06 22 03 10
>028d78	ce 92 00 00 14 00 aa 02 2e 3e 12 30 03 10 ce 92
>028d88	28 32 06 22 01 40 00 00 12 00 ab 02 2e 3e 14 30
>028d98	02 e0 28 32 06 22 03 40 00 00 22 00 ac 02 2e 3e
>028da8	15 30 0c 00 09 31 33 31 30 32 33 30 33 32 24 32
>028db8	04 40 28 32 06 22 03 10 ce 92 00 00 22 00 ad 02
>028dc8	2e 3e 16 30 03 10 ce 92 24 32 04 40 28 32 06 22
>028dd8	0c 00 09 31 33 31 30 32 33 30 33 32 00 00 1e 00
>028de8	ae 02 2e 3e 1f 30 06 00 03 45 20 4e 24 32 04 40
>028df8	28 32 06 22 06 00 03 45 20 4e 00 00 1a 00 af 02
>028e08	2e 3e 21 30 02 e0 24 32 04 40 28 32 06 22 06 00
>028e18	03 45 20 4e 00 00 20 00 b0 02 2e 3e 20 30 06 00
>028e28	03 45 20 4e 24 32 03 40 24 32 01 40 28 32 06 22
>028e38	04 00 01 4e 00 00 1e 00 b1 02 2e 3e 22 30 08 00
>028e48	05 58 45 51 20 42 24 32 04 00 01 45 28 32 06 22
>028e58	02 40 00 00 16 00 b2 02 2e 3e 13 30 05 10 3f 93
>028e68	28 32 06 22 05 10 3f 93 00 00 14 00 b3 02 2e 3e
>028e78	12 30 05 10 3f 93 28 32 06 22 01 40 00 00 18 00
>028e88	b4 02 2e 3e 14 30 8a fd fb f3 06 40 28 32 28 32
>028e98	06 22 03 40 00 00 26 00 b5 02 2e 3e 15 30 10 00
>028ea8	0c 31 30 30 31 30 31 32 32 32 31 31 30 00 24 32
>028eb8	03 40 28 32 06 22 05 10 3f 93 00 00 26 00 b6 02
>028ec8	2e 3e 16 30 05 10 3f 93 24 32 03 40 28 32 06 22
>028ed8	10 00 0c 31 30 30 31 30 31 32 32 32 31 31 30 00
>028ee8	00 00 20 00 b7 02 2e 3e 1f 30 8a fd fb f3 06 40
>028ef8	28 32 24 32 03 40 28 32 06 22 06 00 03 4e 59 4e
>028f08	00 00 1e 00 b8 02 2e 3e 21 30 06 00 03 4e 59 4e
>028f18	24 32 03 40 28 32 06 22 06 00 03 4e 59 4e 00 00
>028f28	22 00 b9 02 2e 3e 20 30 06 00 03 4e 59 4e 24 32
>028f38	01 40 24 32 02 40 28 32 06 22 06 00 02 4e 59 00
>028f48	00 00 1c 00 ba 02 2e 3e 22 30 04 00 01 43 24 32
>028f58	06 00 02 5a 4b 00 28 32 06 22 00 40 00 00 14 00
>028f68	bb 02 2e 3e 13 30 8c c5 28 32 06 22 01 10 ca af
>028f78	00 00 14 00 bc 02 2e 3e 12 30 01 10 ca af 28 32
>028f88	06 22 01 40 00 00 14 00 bd 02 2e 3e 14 30 28 ee
>028f98	18 e0 28 32 06 22 03 40 00 00 1e 00 be 02 2e 3e
>028fa8	15 30 08 00 05 31 38 35 32 41 24 32 0e 40 28 32
>028fb8	06 22 01 10 ca af 00 00 1e 00 bf 02 2e 3e 16 30
>028fc8	01 10 ca af 24 32 0e 40 28 32 06 22 08 00 05 31
>028fd8	38 35 32 61 00 00 1a 00 c0 02 2e 3e 1f 30 28 ee
>028fe8	18 e0 24 32 01 40 28 32 06 22 04 00 01 52 00 00
>028ff8	1c 00 c1 02 2e 3e 21 30 06 00 03 52 51 49 24 32
>029008	01 40 28 32 06 22 04 00 01 49 00 00 22 00 c2 02
>029018	2e 3e 20 30 06 00 03 52 51 49 24 32 01 40 24 32
>029028	02 40 28 32 06 22 06 00 02 52 51 00 00 00 22 00
>029038	c3 02 2e 3e 22 30 0a 00 06 54 47 4c 59 52 58 00
>029048	24 32 06 00 02 59 52 00 28 32 06 22 04 40 00 00
>029058	18 00 c4 02 2e 3e 13 30 0b 24 03 10 d7 8f 28 32
>029068	06 22 03 10 d7 8f 00 00 16 00 c5 02 2e 3e 12 30
>029078	48 cd f1 c4 28 32 06 22 0b 24 01 40 00 00 18 00
>029088	c6 02 2e 3e 14 30 8a fd fb f3 02 40 28 32 28 32
>029098	06 22 0a 40 00 00 22 00 c7 02 2e 3e 15 30 0a 00
>0290a8	06 2d 31 43 46 44 37 00 24 32 10 40 28 32 06 22
>0290b8	0b 24 03 10 d7 8f 00 00 22 00 c8 02 2e 3e 16 30
>0290c8	0b 24 03 10 d7 8f 24 32 10 40 28 32 06 22 0a 00
>0290d8	06 2d 31 63 66 64 37 00 00 00 26 00 c9 02 2e 3e
>0290e8	1f 30 8a fd fb f3 02 40 28 32 24 32 09 40 28 32
>0290f8	06 22 0c 00 09 41 48 58 4e 42 20 56 20 48 00 00
>029108	26 00 ca 02 2e 3e 21 30 8a fd fb f3 02 40 28 32
>029118	24 32 09 40 28 32 06 22 0c 00 09 48 58 4e 42 20
>029128	56 20 48 43 00 00 2a 00 cb 02 2e 3e 20 30 0e 00
>029138	0a 41 48 58 4e 42 20 56 20 48 43 00 24 32 08 40
>029148	24 32 04 40 28 32 06 22 06 00 03 20 48 43 00 00
>029158	22 00 cc 02 2e 3e 22 30 0c 00 08 41 47 4b 54 5a
>029168	4b 58 47 00 24 32 04 00 01 47 28 32 06 22 02 40
>029178	00 00 18 00 cd 02 2e 3e 13 30 0b 24 06 10 cb 41
>029188	28 32 06 22 06 10 cb 41 00 00 18 00 ce 02 2e 3e
>029198	12 30 0b 24 06 10 cb 41 28 32 06 22 0b 24 01 40
>0291a8	00 00 14 00 cf 02 2e 3e 14 30 04 00 01 54 28 32
>0291b8	06 22 01 40 00 00 22 00 d0 02 2e 3e 15 30 0a 00
>0291c8	07 2d 33 33 30 32 38 33 24 32 09 40 28 32 06 22
>0291d8	0b 24 06 10 cb 41 00 00 22 00 d1 02 2e 3e 16 30
>0291e8	0b 24 06 10 cb 41 24 32 09 40 28 32 06 22 0a 00
>0291f8	07 2d 33 33 30 32 38 33 00 00 1a 00 d2 02 2e 3e
>029208	1f 30 2d ee 17 e0 24 32 02 40 28 32 06 22 04 00
>029218	01 54 00 00 1a 00 d3 02 2e 3e 21 30 2d ee 17 e0
>029228	24 32 02 40 28 32 06 22 04 00 01 54 00 00 1e 00
>029238	d4 02 2e 3e 20 30 04 00 01 54 24 32 02 40 24 32
>029248	01 40 28 32 06 22 04 00 00 00 00 00 22 00 d5 02
>029258	2e 3e 22 30 0c 00 09 57 20 57 41 53 4b 4b 57 57
>029268	24 32 04 00 01 57 28 32 06 22 01 40 00 00 18 00
>029278	d6 02 2e 3e 13 30 0b 24 03 10 1b 72 28 32 06 22
>029288	03 10 1b 72 00 00 18 00 d7 02 2e 3e 12 30 0b 24
>029298	03 10 1b 72 28 32 06 22 0b 24 01 40 00 00 18 00
>0292a8	d8 02 2e 3e 14 30 08 00 05 4c 55 4a 5a 4a 28 32
>0292b8	06 22 05 40 00 00 22 00 d9 02 2e 3e 15 30 0a 00
>0292c8	06 2d 37 36 35 34 39 00 24 32 0b 40 28 32 06 22
>0292d8	0b 24 03 10 1b 72 00 00 22 00 da 02 2e 3e 16 30
>0292e8	0b 24 03 10 1b 72 24 32 0b 40 28 32 06 22 0a 00
>0292f8	06 2d 37 36 35 34 39 00 00 00 1e 00 db 02 2e 3e
>029308	1f 30 08 00 05 4c 55 4a 5a 4a 24 32 00 40 28 32
>029318	06 22 04 00 00 00 00 00 18 00 dc 02 2e 3e 21 30
>029328	08 e0 24 32 00 40 28 32 06 22 04 00 00 00 00 00
>029338	22 00 dd 02 2e 3e 20 30 08 00 05 4c 55 4a 5a 4a
>029348	24 32 01 40 24 32 00 40 28 32 06 22 04 00 00 00
>029358	00 00 1e 00 de 02 2e 3e 22 30 06 00 03 57 20 59
>029368	24 32 06 00 02 57 20 00 28 32 06 22 01 40 00 00
>029378	1c 00 df 02 2e 3e 13 30 cd dc 66 de 15 d0 00 40
>029388	28 32 28 32 06 22 01 10 cd 5d 00 00 14 00 e0 02
>029398	2e 3e 12 30 01 10 cd 5d 28 32 06 22 01 40 00 00
>0293a8	12 00 e1 02 2e 3e 14 30 0e e0 28 32 06 22 05 40
>0293b8	00 00 1e 00 e2 02 2e 3e 15 30 08 00 05 31 42 34
>0293c8	36 35 24 32 0c 40 28 32 06 22 01 10 cd 5d 00 00
>0293d8	1e 00 e3 02 2e 3e 16 30 01 10 cd 5d 24 32 0c 40
>0293e8	28 32 06 22 08 00 05 31 62 34 36 35 00 00 18 00
>0293f8	e4 02 2e 3e 1f 30 0e e0 24 32 01 40 28 32 06 22
>029408	04 00 01 49 00 00 1e 00 e5 02 2e 3e 21 30 08 00
>029418	05 49 43 4e 43 43 24 32 01 40 28 32 06 22 04 00
>029428	01 43 00 00 22 00 e6 02 2e 3e 20 30 08 00 05 49
>029438	43 4e 43 43 24 32 03 40 24 32 00 40 28 32 06 22
>029448	04 00 00 00 00 00 1a 00 e7 02 2e 3e 22 30 04 00
>029458	01 48 24 32 04 00 01 48 28 32 06 22 01 40 00 00
>029468	16 00 e8 02 2e 3e 13 30 05 10 69 6e 28 32 06 22
>029478	05 10 69 6e 00 00 16 00 e9 02 2e 3e 12 30 c7 cc
>029488	e6 ca 11 c0 28 32 06 22 01 40 00 00 1e 00 ea 02
>029498	2e 3e 14 30 0e 00 0a 42 49 44 4e 56 42 43 4d 43
>0294a8	4f 00 28 32 06 22 0a 40 00 00 22 00 eb 02 2e 3e
>0294b8	15 30 0c 00 09 32 32 32 33 32 31 32 32 31 24 32
>0294c8	04 40 28 32 06 22 05 10 69 6e 00 00 22 00 ec 02
>0294d8	2e 3e 16 30 05 10 69 6e 24 32 04 40 28 32 06 22
>0294e8	0c 00 09 32 32 32 33 32 31 32 32 31 00 00 20 00
>0294f8	ed 02 2e 3e 1f 30 fa ec 15 e0 24 32 07 40 28 32
>029508	06 22 0a 00 07 42 49 44 4e 56 42 43 00 00 2a 00
>029518	ee 02 2e 3e 21 30 0e 00 0a 42 49 44 4e 56 42 43
>029528	4d 43 4f 00 24 32 07 40 28 32 06 22 0a 00 07 4e
>029538	56 42 43 4d 43 4f 00 00 2c 00 ef 02 2e 3e 20 30
>029548	0e 00 0a 42 49 44 4e 56 42 43 4d 43 4f 00 24 32
>029558	06 40 24 32 05 40 28 32 06 22 08 00 05 42 43 4d
>029568	43 4f 00 00 1e 00 f0 02 2e 3e 22 30 08 00 05 43
>029578	56 54 4a 42 24 32 04 00 01 4a 28 32 06 22 04 40
>029588	00 00 1c 00 f1 02 2e 3e 13 30 cd dc 66 de 15 d0
>029598	05 40 28 32 28 32 06 22 01 10 59 45 00 00 18 00
>0295a8	f2 02 2e 3e 12 30 0b 24 01 10 59 45 28 32 06 22
>0295b8	0b 24 01 40 00 00 1c 00 f3 02 2e 3e 14 30 0c 00
>0295c8	09 53 20 4b 49 41 49 49 4f 53 28 32 06 22 09 40
>0295d8	00 00 22 00 f4 02 2e 3e 15 30 0a 00 06 2d 31 37
>0295e8	39 30 39 00 24 32 0c 40 28 32 06 22 0b 24 01 10
>0295f8	59 45 00 00 22 00 f5 02 2e 3e 16 30 0b 24 01 10
>029608	59 45 24 32 0c 40 28 32 06 22 0a 00 06 2d 31 37
>029618	39 30 39 00 00 00 2a 00 f6 02 2e 3e 1f 30 0c 00
>029628	09 53 20 4b 49 41 49 49 4f 53 24 32 08 40 28 32
>029638	06 22 0c 00 08 53 20 4b 49 41 49 49 4f 00 00 00
>029648	20 00 f7 02 2e 3e 21 30 fd e4 24 32 08 40 28 32
>029658	06 22 0c 00 08 20 4b 49 41 49 49 4f 53 00 00 00
>029668	2a 00 f8 02 2e 3e 20 30 0c 00 09 53 20 4b 49 41
>029678	49 49 4f 53 24 32 06 40 24 32 04 40 28 32 06 22
>029688	08 00 04 49 49 4f 53 00 00 00 1e 00 f9 02 2e 3e
>029698	22 30 08 00 05 43 56 54 4a 42 24 32 04 00 01 4a
>0296a8	28 32 06 22 04 40 00 00 12 00 fa 02 2e 3e 13 30
>0296b8	eb 98 28 32 06 22 eb 98 00 00 12 00 fb 02 2e 3e
>0296c8	12 30 dd c5 28 32 06 22 01 40 00 00 12 00 fc 02
>0296d8	2e 3e 14 30 04 e0 28 32 06 22 04 40 00 00 20 00
>0296e8	fd 02 2e 3e 15 30 0c 00 08 31 31 32 30 33 32 32
>0296f8	33 00 24 32 04 40 28 32 06 22 eb 98 00 00 20 00
>029708	fe 02 2e 3e 16 30 eb 98 24 32 04 40 28 32 06 22
>029718	0c 00 08 31 31 32 30 33 32 32 33 00 00 00 18 00
>029728	ff 02 2e 3e 1f 30 04 e0 24 32 00 40 28 32 06 22
>029738	04 00 00 00 00 00 1e 00 00 03 2e 3e 21 30 08 00
>029748	04 44 47 20 54 00 24 32 00 40 28 32 06 22 04 00
>029758	00 00 00 00 24 00 01 03 2e 3e 20 30 08 00 04 44
>029768	47 20 54 00 24 32 02 40 24 32 03 40 28 32 06 22
>029778	06 00 03 47 20 54 00 00 1e 00 02 03 2e 3e 22 30
>029788	06 00 02 57 49 00 24 32 06 00 02 57 49 00 28 32
>029798	06 22 01 40 00 00 18 00 03 03 2e 3e 13 30 0b 24
>0297a8	02 10 70 71 28 32 06 22 02 10 70 71 00 00 18 00
>0297b8	04 03 2e 3e 12 30 04 cd 66 ce 0a c0 28 32 06 22
>0297c8	0b 24 01 40 00 00 12 00 05 03 2e 3e 14 30 fd e4
>0297d8	28 32 06 22 09 40 00 00 22 00 06 03 2e 3e 15 30
>0297e8	0a 00 06 2d 33 39 33 30 30 00 24 32 0c 40 28 32
>0297f8	06 22 0b 24 02 10 70 71 00 00 22 00 07 03 2e 3e
>029808	16 30 0b 24 02 10 70 71 24 32 0c 40 28 32 06 22
>029818	0a 00 06 2d 33 39 33 30 30 00 00 00 1e 00 08 03
>029828	2e 3e 1f 30 fd e4 24 32 06 40 28 32 06 22 0a 00
>029838	06 53 20 4b 49 41 49 00 00 00 28 00 09 03 2e 3e
>029848	21 30 0c 00 09 53 20 4b 49 41 49 49 4f 53 24 32
>029858	06 40 28 32 06 22 0a 00 06 49 41 49 49 4f 53 00
>029868	00 00 26 00 0a 03 2e 3e 20 30 0c 00 09 53 20 4b
>029878	49 41 49 49 4f 53 24 32 05 40 24 32 00 40 28 32
>029888	06 22 04 00 00 00 00 00 24 00 0b 03 2e 3e 22 30
>029898	0c 00 09 55 20 51 4f 4a 56 20 20 54 24 32 06 00
>0298a8	03 55 20 51 28 32 06 22 01 40 00 00 18 00 0c 03
>0298b8	2e 3e 13 30 0b 24 02 10 70 71 28 32 06 22 02 10
>0298c8	70 71 00 00 18 00 0d 03 2e 3e 12 30 0b 24 02 10
>0298d8	70 71 28 32 06 22 0b 24 01 40 00 00 14 00 0e 03
>0298e8	2e 3e 14 30 13 ee 1b e0 28 32 06 22 09 40 00 00
>0298f8	2e 00 0f 03 2e 3e 15 30 16 00 12 2d 31 30 30 31
>029908	31 30 30 30 31 30 31 31 31 30 30 30 30 00 24 32
>029918	02 40 28 32 06 22 0b 24 02 10 70 71 00 00 2e 00
>029928	10 03 2e 3e 16 30 0b 24 02 10 70 71 24 32 02 40
>029938	28 32 06 22 16 00 12 2d 31 30 30 31 31 30 30 30
>029948	31 30 31 31 31 30 30 30 30 00 00 00 2a 00 11 03
>029958	2e 3e 1f 30 0c 00 09 55 20 51 4f 4a 56 20 20 54
>029968	24 32 09 40 28 32 06 22 0c 00 09 55 20 51 4f 4a
>029978	56 20 20 54 00 00 22 00 12 03 2e 3e 21 30 13 ee
>029988	1b e0 24 32 09 40 28 32 06 22 0c 00 09 55 20 51
>029998	4f 4a 56 20 20 54 00 00 26 00 13 03 2e 3e 20 30
>0299a8	0c 00 09 55 20 51 4f 4a 56 20 20 54 24 32 01 40
>0299b8	24 32 01 40 28 32 06 22 04 00 01 55 00 00 22 00
>0299c8	14 03 2e 3e 22 30 0a 00 06 58 51 4a 20 59 44 00
>0299d8	24 32 06 00 03 58 51 4a 28 32 06 22 01 40 00 00
>0299e8	14 00 15 03 2e 3e 13 30 0b 24 4e 40 28 32 06 22
>0299f8	4e 40 00 00 16 00 16 03 2e 3e 12 30 0b 24 4e 40
>029a08	28 32 06 22 0b 24 01 40 00 00 14 00 17 03 2e 3e
>029a18	14 30 04 00 01 5a 28 32 06 22 01 40 00 00 1c 00
>029a28	18 03 2e 3e 15 30 06 00 03 2d 36 36 24 32 0c 40
>029a38	28 32 06 22 0b 24 4e 40 00 00 1c 00 19 03 2e 3e
>029a48	16 30 0b 24 4e 40 24 32 0c 40 28 32 06 22 06 00
>029a58	03 2d 36 36 00 00 20 00 1a 03 2e 3e 1f 30 d6 fd
>029a68	c4 f8 1d f0 01 40 28 32 24 32 02 40 28 32 06 22
>029a78	04 00 01 5a 00 00 20 00 1b 03 2e 3e 21 30 d6 fd
>029a88	c4 f8 1d f0 01 40 28 32 24 32 02 40 28 32 06 22
>029a98	04 00 01 5a 00 00 1e 00 1c 03 2e 3e 20 30 04 00
>029aa8	01 5a 24 32 02 40 24 32 00 40 28 32 06 22 04 00
>029ab8	00 00 00 00 24 00 1d 03 2e 3e 22 30 0e 00 0a 42
>029ac8	49 44 4e 56 42 43 4d 43 4f 00 24 32 04 00 01 42
>029ad8	28 32 06 22 01 40 00 00 18 00 1e 03 2e 3e 13 30
>029ae8	0b 24 02 10 40 90 28 32 06 22 02 10 40 90 00 00
>029af8	18 00 1f 03 2e 3e 12 30 0b 24 02 10 40 90 28 32
>029b08	06 22 0b 24 01 40 00 00 18 00 20 03 2e 3e 14 30
>029b18	08 00 05 58 45 51 20 42 28 32 06 22 05 40 00 00
>029b28	22 00 21 03 2e 3e 15 30 0a 00 07 2d 35 30 35 36
>029b38	35 31 24 32 07 40 28 32 06 22 0b 24 02 10 40 90
>029b48	00 00 22 00 22 03 2e 3e 16 30 0b 24 02 10 40 90
>029b58	24 32 07 40 28 32 06 22 0a 00 07 2d 35 30 35 36
>029b68	35 31 00 00 1a 00 23 03 2e 3e 1f 30 0f e0 24 32
>029b78	02 40 28 32 06 22 06 00 02 58 45 00 00 00 20 00
>029b88	24 03 2e 3e 21 30 08 00 05 58 45 51 20 42 24 32
>029b98	02 40 28 32 06 22 06 00 02 20 42 00 00 00 22 00
>029ba8	25 03 2e 3e 20 30 08 00 05 58 45 51 20 42 24 32
>029bb8	02 40 24 32 01 40 28 32 06 22 04 00 01 45 00 00
>029bc8	20 00 26 03 2e 3e 22 30 0a 00 07 4f 43 47 54 20
>029bd8	20 54 24 32 04 00 01 20 28 32 06 22 05 40 00 00
>029be8	18 00 27 03 2e 3e 13 30 06 ce b5 c9 05 c0 28 32
>029bf8	06 22 01 10 bd a0 00 00 14 00 28 03 2e 3e 12 30
>029c08	01 10 bd a0 28 32 06 22 01 40 00 00 14 00 29 03
>029c18	2e 3e 14 30 28 ee 18 e0 28 32 06 22 03 40 00 00
>029c28	2a 00 2a 03 2e 3e 15 30 14 00 10 31 31 31 30 30
>029c38	30 30 30 31 30 31 31 31 31 30 31 00 24 32 02 40
>029c48	28 32 06 22 01 10 bd a0 00 00 2a 00 2b 03 2e 3e
>029c58	16 30 01 10 bd a0 24 32 02 40 28 32 06 22 14 00
>029c68	10 31 31 31 30 30 30 30 30 31 30 31 31 31 31 30
>029c78	31 00 00 00 1e 00 2c 03 2e 3e 1f 30 06 00 03 52
>029c88	51 49 24 32 05 40 28 32 06 22 06 00 03 52 51 49
>029c98	00 00 1e 00 2d 03 2e 3e 21 30 06 00 03 52 51 49
>029ca8	24 32 05 40 28 32 06 22 06 00 03 52 51 49 00 00
>029cb8	20 00 2e 03 2e 3e 20 30 06 00 03 52 51 49 24 32
>029cc8	05 40 24 32 01 40 28 32 06 22 04 00 00 00 00 00
>029cd8	1a 00 2f 03 2e 3e 22 30 04 00 01 54 24 32 04 00
>029ce8	01 47 28 32 06 22 00 40 00 00 1c 00 30 03 2e 3e
>029cf8	13 30 ed dc d2 d9 17 d0 03 40 28 32 28 32 06 22
>029d08	04 10 09 72 00 00 14 00 31 03 2e 3e 12 30 04 10
>029d18	09 72 28 32 06 22 01 40 00 00 14 00 32 03 2e 3e
>029d28	14 30 c9 ec 02 e0 28 32 06 22 07 40 00 00 1e 00
>029d38	33 03 2e 3e 15 30 08 00 05 32 43 39 37 31 24 32
>029d48	0f 40 28 32 06 22 04 10 09 72 00 00 1e 00 34 03
>029d58	2e 3e 16 30 04 10 09 72 24 32 0f 40 28 32 06 22
>029d68	08 00 05 32 63 39 37 31 00 00 22 00 35 03 2e 3e
>029d78	1f 30 0a 00 07 4f 43 47 54 20 20 54 24 32 03 40
>029d88	28 32 06 22 06 00 03 4f 43 47 00 00 22 00 36 03
>029d98	2e 3e 21 30 0a 00 07 4f 43 47 54 20 20 54 24 32
>029da8	03 40 28 32 06 22 06 00 03 20 20 54 00 00 26 00
>029db8	37 03 2e 3e 20 30 0a 00 07 4f 43 47 54 20 20 54
>029dc8	24 32 03 40 24 32 02 40 28 32 06 22 06 00 02 47
>029dd8	54 00 00 00 1e 00 38 03 2e 3e 22 30 06 00 03 4e
>029de8	59 4e 24 32 06 00 02 55 4a 00 28 32 06 22 00 40
>029df8	00 00 12 00 39 03 2e 3e 1a c0 06 22 0b 24 03 10
>029e08	1b 72 00 00 12 00 3a 03 2e 3e 6e ce 16 c0 06 22
>029e18	0b 24 9f 40 00 00 12 00 3b 03 2e 3e 82 cd c6 c4
>029e28	06 22 0b 24 87 40 00 00 10 00 3c 03 2e 3e 17 c0
>029e38	06 22 04 10 cd 5e 00 00 12 00 3d 03 2e 3e 82 cd
>029e48	1a c0 06 22 03 10 5e b3 00 00 14 00 3e 03 2e 3e
>029e58	28 cd 2e c2 06 22 0b 24 05 10 74 6d 00 00 12 00
>029e68	3f 03 2e 3e 0c c0 06 22 0b 24 01 10 e5 50 00 00
>029e78	12 00 40 03 2e 3e c6 cc fe c2 06 22 03 10 7f b3
>029e88	00 00 10 00 41 03 2e 3e 80 c5 06 22 03 10 ce 92
>029e98	00 00 10 00 42 03 2e 3e 8c c5 06 22 01 10 ca af
>029ea8	00 00 14 00 43 03 2e 3e da cd 1f c0 06 22 0b 24
>029eb8	01 10 e6 98 00 00 0e 00 44 03 2e 3e 12 c0 06 22
>029ec8	25 b2 00 00 14 00 45 03 2e 3e 35 ce 16 c9 01 c0
>029ed8	06 22 01 10 2d 9b 00 00 16 00 46 03 2e 3e 04 cd
>029ee8	66 ce 0a c0 06 22 0b 24 02 10 70 71 00 00 14 00
>029ef8	47 03 2e 3e 40 ce 16 c0 06 22 0b 24 02 10 91 94
>029f08	00 00 12 00 48 03 2e 3e cb cc 2c c4 06 22 0b 24
>029f18	3f 40 00 00 0e 00 49 03 2e 3e dd c5 06 22 eb 98
>029f28	00 00 14 00 4a 03 2e 3e 06 ce b5 c9 05 c0 06 22
>029f38	01 10 bd a0 00 00 12 00 4b 03 2e 3e a8 cd be c3
>029f48	06 22 0b 24 bf 40 00 00 12 00 4c 03 2e 3e ba cd
>029f58	c8 c1 06 22 02 10 4f 4b 00 00 10 00 4d 03 2e 3e
>029f68	14 c0 06 22 05 10 3f 93 00 00 16 00 4e 03 2e 3e
>029f78	f3 cc 24 cd 16 c0 06 22 0b 24 05 10 90 44 00 00
>029f88	12 00 4f 03 2e 3e b3 cd 3f c2 06 22 0b 24 03 40
>029f98	00 00 10 00 50 03 2e 3e 3c c6 06 22 02 10 36 72
>029fa8	00 00 14 00 51 03 2e 3e 69 ce a1 cd 1b c0 06 22
>029fb8	02 10 d4 66 00 00 10 00 52 03 2e 3e 02 c6 06 22
>029fc8	03 10 34 9f 00 00 10 00 53 03 2e 3e e7 c5 06 22
>029fd8	0b 24 c8 40 00 00 14 00 54 03 2e 3e 5f ce 65 cb
>029fe8	02 c0 06 22 05 10 60 57 00 00 12 00 55 03 2e 3e
>029ff8	2f ce 23 c0 06 22 0b 24 4e 40 00 00 16 00 56 03
>02a008	2e 3e 5c cd 4d c9 17 c0 06 22 0b 24 01 10 af a4
>02a018	00 00 0e 00 57 03 2e 3e 03 c0 06 22 b0 40 00 00
>02a028	14 00 58 03 2e 3e 5b cd 02 c0 06 22 0b 24 01 10
>02a038	dc 8c 00 00 14 00 59 03 2e 3e 48 cd f1 c4 06 22
>02a048	0b 24 03 10 d7 8f 00 00 12 00 5a 03 2e 3e 1d cd
>02a058	1f c0 06 22 02 10 1a 81 00 00 10 00 5b 03 2e 3e
>02a068	e2 cd 9b c3 06 22 2e b5 00 00 16 00 5c 03 2e 3e
>02a078	3f ce fc c8 0d c0 06 22 0b 24 03 10 c5 9e 00 00
>02a088	12 00 5d 03 2e 3e 30 cd c3 c3 06 22 0b 24 5f 40
>02a098	00 00 12 00 5e 03 2e 3e 02 c0 06 22 0b 24 03 10
>02a0a8	e2 46 00 00 12 00 5f 03 2e 3e 0a ce 2b c3 06 22
>02a0b8	01 10 db 52 00 00 14 00 60 03 2e 3e c7 cc e6 ca
>02a0c8	11 c0 06 22 05 10 69 6e 00 00 14 00 61 03 2e 3e
>02a0d8	8a ed fb ec 09 e0 06 22 04 00 01 59 00 00 10 00
>02a0e8	62 03 2e 3e 11 e0 06 22 04 00 00 00 00 00 18 00
>02a0f8	63 03 2e 3e c9 ec 02 e0 06 22 0a 00 07 4f 43 47
>02a108	54 20 20 54 00 00 18 00 64 03 2e 3e 63 e6 06 22
>02a118	0c 00 09 41 4d 4e 42 44 4c 4e 20 50 00 00 12 00
>02a128	65 03 2e 3e 83 e5 06 22 06 00 03 46 41 4e 00 00
>02a138	1e 00 66 03 2e 3e 2f ed c4 e9 22 e0 06 22 0e 00
>02a148	0a 41 50 54 44 52 56 20 43 49 49 00 00 00 18 00
>02a158	67 03 2e 3e fd e4 06 22 0c 00 09 53 20 4b 49 41
>02a168	49 49 4f 53 00 00 12 00 68 03 2e 3e b9 e5 06 22
>02a178	06 00 02 57 49 00 00 00 18 00 69 03 2e 3e 21 ed
>02a188	23 e0 06 22 0a 00 07 41 54 4a 51 48 20 47 00 00
>02a198	12 00 6a 03 2e 3e 2d ee 17 e0 06 22 04 00 01 54
>02a1a8	00 00 14 00 6b 03 2e 3e 74 ed e4 e9 23 e0 06 22
>02a1b8	04 00 01 52 00 00 10 00 6c 03 2e 3e 0b e0 06 22
>02a1c8	04 00 01 4f 00 00 14 00 6d 03 2e 3e d3 e5 06 22
>02a1d8	08 00 05 59 5a 53 20 4b 00 00 1c 00 6e 03 2e 3e
>02a1e8	ce ec 19 e0 06 22 0e 00 0a 56 58 54 50 20 20 4f
>02a1f8	4e 49 4e 00 00 00 14 00 6f 03 2e 3e 04 e0 06 22
>02a208	08 00 04 44 47 20 54 00 00 00 16 00 70 03 2e 3e
>02a218	cf ed 1a e0 06 22 08 00 04 44 4a 5a 53 00 00 00
>02a228	1c 00 71 03 2e 3e 14 ee 5c e3 06 22 0e 00 0b 49
>02a238	46 20 41 20 44 20 20 58 47 48 00 00 14 00 72 03
>02a248	2e 3e 28 ee 18 e0 06 22 06 00 03 52 51 49 00 00
>02a258	1a 00 73 03 2e 3e d8 ed 30 eb 08 e0 06 22 0a 00
>02a268	06 44 4c 20 20 20 59 00 00 00 14 00 74 03 2e 3e
>02a278	ae ed 23 e0 06 22 06 00 02 42 51 00 00 00 14 00
>02a288	75 03 2e 3e 0f e0 06 22 08 00 05 58 45 51 20 42
>02a298	00 00 12 00 76 03 2e 3e 03 e0 06 22 06 00 03 57
>02a2a8	20 59 00 00 12 00 77 03 2e 3e 05 e0 06 22 06 00
>02a2b8	03 52 55 57 00 00 18 00 78 03 2e 3e 1d ed 71 e0
>02a2c8	06 22 0a 00 06 4e 20 48 4a 4c 52 00 00 00 14 00
>02a2d8	79 03 2e 3e 0e e0 06 22 08 00 05 49 43 4e 43 43
>02a2e8	00 00 1c 00 7a 03 2e 3e fa ec 15 e0 06 22 0e 00
>02a2f8	0a 42 49 44 4e 56 42 43 4d 43 4f 00 00 00 16 00
>02a308	7b 03 2e 3e 03 ee 12 e0 06 22 08 00 05 51 56 42
>02a318	54 43 00 00 14 00 7c 03 2e 3e 08 e0 06 22 08 00
>02a328	05 4c 55 4a 5a 4a 00 00 1a 00 7d 03 2e 3e f4 ec
>02a338	02 e0 06 22 0c 00 08 41 47 4b 54 5a 4b 58 47 00
>02a348	00 00 1a 00 7e 03 2e 3e 20 ed 15 e0 06 22 0c 00
>02a358	09 52 48 20 43 46 4e 5a 58 41 00 00 10 00 7f 03
>02a368	2e 3e 17 e0 06 22 04 00 00 00 00 00 12 00 80 03
>02a378	2e 3e 59 ed 1b e0 06 22 04 00 01 48 00 00 10 00
>02a388	81 03 2e 3e 7a e5 06 22 04 00 00 00 00 00 10 00
>02a398	82 03 2e 3e 0b e6 06 22 04 00 01 43 00 00 1a 00
>02a3a8	83 03 2e 3e 13 ee 1b e0 06 22 0c 00 09 55 20 51
>02a3b8	4f 4a 56 20 20 54 00 00 16 00 84 03 2e 3e d2 ec
>02a3c8	99 e3 06 22 08 00 05 43 56 54 4a 42 00 00 1a 00
>02a3d8	85 03 2e 3e 1e ed 01 eb 12 e0 06 22 0a 00 06 54
>02a3e8	47 4c 59 52 58 00 00 00 16 00 86 03 2e 3e 3b ee
>02a3f8	b7 e1 06 22 08 00 04 41 49 42 43 00 00 00 12 00
>02a408	87 03 2e 3e 02 e0 06 22 06 00 03 45 20 4e 00 00
>02a418	16 00 88 03 2e 3e d5 e5 06 22 0a 00 06 58 51 4a
>02a428	20 59 44 00 00 00 6a 00 89 03 2e 3e ed dc d2 d9
>02a438	17 d0 00 40 28 32 06 22 01 10 e9 96 26 32 2e 3e
>02a448	ed dc d2 d9 17 d0 01 40 28 32 06 22 0b 24 45 40
>02a458	26 32 2e 3e ed dc d2 d9 17 d0 02 40 28 32 06 22
>02a468	0b 24 04 10 06 ab 26 32 2e 3e ed dc d2 d9 17 d0
>02a478	03 40 28 32 06 22 04 10 09 72 26 32 2e 3e ed dc
>02a488	d2 d9 17 d0 04 40 28 32 06 22 05 10 92 a1 00 00
>02a498	56 00 8a 03 2e 3e a3 d5 00 40 28 32 06 22 02 10
>02a4a8	5c a1 26 32 2e 3e a3 d5 01 40 28 32 06 22 05 10
>02a4b8	67 9f 26 32 2e 3e a3 d5 02 40 28 32 06 22 01 10
>02a4c8	d9 a0 26 32 2e 3e a3 d5 03 40 28 32 06 22 0b 24
>02a4d8	06 10 cb 41 26 32 2e 3e a3 d5 04 40 28 32 06 22
>02a4e8	0b 24 c7 79 00 00 50 00 8b 03 2e 3e 1a dd 08 d0
>02a4f8	00 40 28 32 06 22 04 10 59 6a 26 32 2e 3e 1a dd
>02a508	08 d0 01 40 28 32 06 22 0b 24 02 10 cd b2 26 32
>02a518	2e 3e 1a dd 08 d0 02 40 28 32 06 22 0b 24 c4 40
>02a528	26 32 2e 3e 1a dd 08 d0 03 40 28 32 06 22 0b 24
>02a538	02 10 40 90 00 00 64 00 8c 03 2e 3e c8 d4 00 40
>02a548	28 32 06 22 04 10 3e 44 26 32 2e 3e c8 d4 01 40
>02a558	28 32 06 22 01 10 fb 7c 26 32 2e 3e c8 d4 02 40
>02a568	28 32 06 22 0b 24 05 10 38 89 26 32 2e 3e c8 d4
>02a578	03 40 28 32 06 22 0b 24 3d 40 26 32 2e 3e c8 d4
>02a588	04 40 28 32 06 22 71 40 26 32 2e 3e c8 d4 05 40
>02a598	28 32 06 22 02 10 e0 bf 00 00 96 00 8d 03 2e 3e
>02a5a8	cd dc 66 de 15 d0 00 40 28 32 06 22 01 10 cd 5d
>02a5b8	26 32 2e 3e cd dc 66 de 15 d0 01 40 28 32 06 22
>02a5c8	0b 24 05 10 88 5a 26 32 2e 3e cd dc 66 de 15 d0
>02a5d8	02 40 28 32 06 22 02 10 a8 46 26 32 2e 3e cd dc
>02a5e8	66 de 15 d0 03 40 28 32 06 22 02 10 81 56 26 32
>02a5f8	2e 3e cd dc 66 de 15 d0 04 40 28 32 06 22 0b 24
>02a608	53 bc 26 32 2e 3e cd dc 66 de 15 d0 05 40 28 32
>02a618	06 22 0b 24 01 10 59 45 26 32 2e 3e cd dc 66 de
>02a628	15 d0 06 40 28 32 06 22 0b 24 04 10 dc 7a 00 00
>02a638	64 00 8e 03 2e 3e d9 d5 00 40 28 32 06 22 02 10
>02a648	df 81 26 32 2e 3e d9 d5 01 40 28 32 06 22 0b 24
>02a658	2f 40 26 32 2e 3e d9 d5 02 40 28 32 06 22 0b 24
>02a668	01 10 2a 5b 26 32 2e 3e d9 d5 03 40 28 32 06 22
>02a678	0b 24 b7 61 26 32 2e 3e d9 d5 04 40 28 32 06 22
>02a688	02 10 38 8d 26 32 2e 3e d9 d5 05 40 28 32 06 22
>02a698	aa 40 00 00 4e 00 8f 03 2e 3e b8 fd b8 f2 00 40
>02a6a8	28 32 06 22 0c 00 09 59 43 52 51 50 49 52 43 47
>02a6b8	26 32 2e 3e b8 fd b8 f2 01 40 28 32 06 22 06 00
>02a6c8	02 53 54 00 26 32 2e 3e b8 fd b8 f2 02 40 28 32
>02a6d8	06 22 0e 00 0b 52 56 4b 41 20 42 4a 43 59 52 45
>02a6e8	00 00 a8 00 90 03 2e 3e 8a fd fb f3 00 40 28 32
>02a6f8	06 22 0e 00 0a 44 4a 20 52 20 56 42 50 20 55 00
>02a708	26 32 2e 3e 8a fd fb f3 01 40 28 32 06 22 0c 00
>02a718	09 57 20 57 41 53 4b 4b 57 57 26 32 2e 3e 8a fd
>02a728	fb f3 02 40 28 32 06 22 0e 00 0a 41 48 58 4e 42
>02a738	20 56 20 48 43 00 26 32 2e 3e 8a fd fb f3 03 40
>02a748	28 32 06 22 04 00 00 00 26 32 2e 3e 8a fd fb f3
>02a758	04 40 28 32 06 22 08 00 04 50 4a 46 51 00 26 32
>02a768	2e 3e 8a fd fb f3 05 40 28 32 06 22 08 00 04 44
>02a778	4c 46 53 00 26 32 2e 3e 8a fd fb f3 06 40 28 32
>02a788	06 22 06 00 03 4e 59 4e 00 00 3e 00 91 03 2e 3e
>02a798	06 f0 00 40 28 32 06 22 04 00 00 00 26 32 2e 3e
>02a7a8	06 f0 01 40 28 32 06 22 08 00 05 4d 42 4a 48 41
>02a7b8	26 32 2e 3e 06 f0 02 40 28 32 06 22 0a 00 07 50
>02a7c8	41 4c 20 20 42 41 00 00 9a 00 92 03 2e 3e d6 fd
>02a7d8	c4 f8 1d f0 00 40 28 32 06 22 04 00 00 00 26 32
>02a7e8	2e 3e d6 fd c4 f8 1d f0 01 40 28 32 06 22 04 00
>02a7f8	01 5a 26 32 2e 3e d6 fd c4 f8 1d f0 02 40 28 32
>02a808	06 22 0c 00 09 53 59 20 20 54 20 51 20 55 26 32
>02a818	2e 3e d6 fd c4 f8 1d f0 03 40 28 32 06 22 08 00
>02a828	05 52 43 4a 43 46 26 32 2e 3e d6 fd c4 f8 1d f0
>02a838	04 40 28 32 06 22 0e 00 0a 53 58 49 48 53 43 20
>02a848	42 20 48 00 26 32 2e 3e d6 fd c4 f8 1d f0 05 40
>02a858	28 32 06 22 0c 00 08 4d 4e 56 48 46 4e 20 4d 00
>02a868	00 00 48 00 93 03 2e 3e 14 fe c5 f4 00 40 28 32
>02a878	06 22 0c 00 09 57 20 56 56 20 20 4d 43 4c 26 32
>02a888	2e 3e 14 fe c5 f4 01 40 28 32 06 22 0a 00 07 55
>02a898	20 41 44 56 20 51 26 32 2e 3e 14 fe c5 f4 02 40
>02a8a8	28 32 06 22 04 00 01 47 00 00 90 00 94 03 2e 3e
>02a8b8	5b fe 4c f4 00 40 28 32 06 22 04 00 00 00 26 32
>02a8c8	2e 3e 5b fe 4c f4 01 40 28 32 06 22 0e 00 0a 4f
>02a8d8	20 4b 20 50 58 4d 45 20 52 00 26 32 2e 3e 5b fe
>02a8e8	4c f4 02 40 28 32 06 22 0e 00 0b 4d 45 41 59 20
>02a8f8	20 51 47 20 20 42 26 32 2e 3e 5b fe 4c f4 03 40
>02a908	28 32 06 22 04 00 00 00 26 32 2e 3e 5b fe 4c f4
>02a918	04 40 28 32 06 22 08 00 04 57 55 42 53 00 26 32
>02a928	2e 3e 5b fe 4c f4 05 40 28 32 06 22 0c 00 08 45
>02a938	43 53 4f 20 48 4f 42 00 00 00 14 00 95 03 2e 3e
>02a948	18 30 04 00 01 23 28 32 06 22 23 40 00 00 14 00
>02a958	96 03 2e 3e 17 30 23 40 28 32 06 22 04 00 01 23
>02a968	00 00 1a 00 97 03 2e 3e 1e 30 06 00 03 75 33 4c
>02a978	28 32 06 22 06 00 03 55 33 4c 00 00 1a 00 98 03
>02a988	2e 3e 1d 30 06 00 03 75 33 4c 28 32 06 22 06 00
>02a998	03 75 33 6c 00 00 14 00 99 03 2e 3e 18 30 04 00
>02a9a8	01 56 28 32 06 22 56 40 00 00 14 00 9a 03 2e 3e
>02a9b8	17 30 56 40 28 32 06 22 04 00 01 56 00 00 26 00
>02a9c8	9b 03 2e 3e 1e 30 0c 00 08 39 32 54 65 70 3a 31
>02a9d8	67 00 28 32 06 22 0c 00 08 39 32 54 45 50 3a 31
>02a9e8	47 00 00 00 26 00 9c 03 2e 3e 1d 30 0c 00 08 39
>02a9f8	32 54 65 70 3a 31 67 00 28 32 06 22 0c 00 08 39
>02aa08	32 74 65 70 3a 31 67 00 00 00 14 00 9d 03 2e 3e
>02aa18	18 30 04 00 01 5d 28 32 06 22 5d 40 00 00 14 00
>02aa28	9e 03 2e 3e 17 30 5d 40 28 32 06 22 04 00 01 5d
>02aa38	00 00 22 00 9f 03 2e 3e 1e 30 0a 00 07 47 35 55
>02aa48	64 59 75 4b 28 32 06 22 0a 00 07 47 35 55 44 59
>02aa58	55 4b 00 00 22 00 a0 03 2e 3e 1d 30 0a 00 07 47
>02aa68	35 55 64 59 75 4b 28 32 06 22 0a 00 07 67 35 75
>02aa78	64 79 75 6b 00 00 14 00 a1 03 2e 3e 18 30 04 00
>02aa88	01 7a 28 32 06 22 7a 40 00 00 14 00 a2 03 2e 3e
>02aa98	17 30 7a 40 28 32 06 22 04 00 01 7a 00 00 1a 00
>02aaa8	a3 03 2e 3e 1e 30 06 00 03 43 6b 77 28 32 06 22
>02aab8	06 00 03 43 4b 57 00 00 1a 00 a4 03 2e 3e 1d 30
>02aac8	06 00 03 43 6b 77 28 32 06 22 06 00 03 63 6b 77
>02aad8	00 00 14 00 a5 03 2e 3e 18 30 04 00 01 4f 28 32
>02aae8	06 22 4f 40 00 00 14 00 a6 03 2e 3e 17 30 4f 40
>02aaf8	28 32 06 22 04 00 01 4f 00 00 1e 00 a7 03 2e 3e
>02ab08	1e 30 08 00 05 79 37 30 44 6a 28 32 06 22 08 00
>02ab18	05 59 37 30 44 4a 00 00 1e 00 a8 03 2e 3e 1d 30
>02ab28	08 00 05 79 37 30 44 6a 28 32 06 22 08 00 05 79
>02ab38	37 30 64 6a 00 00 14 00 a9 03 2e 3e 18 30 04 00
>02ab48	01 67 28 32 06 22 67 40 00 00 14 00 aa 03 2e 3e
>02ab58	17 30 67 40 28 32 06 22 04 00 01 67 00 00 22 00
>02ab68	ab 03 2e 3e 1e 30 0a 00 07 34 61 4f 65 3a 44 7a
>02ab78	28 32 06 22 0a 00 07 34 41 4f 45 3a 44 5a 00 00
>02ab88	22 00 ac 03 2e 3e 1d 30 0a 00 07 34 61 4f 65 3a
>02ab98	44 7a 28 32 06 22 0a 00 07 34 61 6f 65 3a 64 7a
>02aba8	00 00 14 00 ad 03 2e 3e 18 30 04 00 01 66 28 32
>02abb8	06 22 66 40 00 00 14 00 ae 03 2e 3e 17 30 66 40
>02abc8	28 32 06 22 04 00 01 66 00 00 22 00 af 03 2e 3e
>02abd8	1e 30 0a 00 06 4c 37 50 75 78 49 00 28 32 06 22
>02abe8	0a 00 06 4c 37 50 55 58 49 00 00 00 22 00 b0 03
>02abf8	2e 3e 1d 30 0a 00 06 4c 37 50 75 78 49 00 28 32
>02ac08	06 22 0a 00 06 6c 37 70 75 78 69 00 00 00 14 00
>02ac18	b1 03 2e 3e 18 30 04 00 01 24 28 32 06 22 24 40
>02ac28	00 00 14 00 b2 03 2e 3e 17 30 24 40 28 32 06 22
>02ac38	04 00 01 24 00 00 22 00 b3 03 2e 3e 1e 30 0a 00
>02ac48	06 73 60 43 35 35 5b 00 28 32 06 22 0a 00 06 53
>02ac58	60 43 35 35 5b 00 00 00 22 00 b4 03 2e 3e 1d 30
>02ac68	0a 00 06 73 60 43 35 35 5b 00 28 32 06 22 0a 00
>02ac78	06 73 60 63 35 35 5b 00 00 00 14 00 b5 03 2e 3e
>02ac88	18 30 04 00 01 3a 28 32 06 22 3a 40 00 00 14 00
>02ac98	b6 03 2e 3e 17 30 3a 40 28 32 06 22 04 00 01 3a
>02aca8	00 00 26 00 b7 03 2e 3e 1e 30 0c 00 08 6c 62 5c
>02acb8	59 54 74 73 64 00 28 32 06 22 0c 00 08 4c 42 5c
>02acc8	59 54 54 53 44 00 00 00 26 00 b8 03 2e 3e 1d 30
>02acd8	0c 00 08 6c 62 5c 59 54 74 73 64 00 28 32 06 22
>02ace8	0c 00 08 6c 62 5c 79 74 74 73 64 00 00 00 14 00
>02acf8	b9 03 2e 3e 18 30 04 00 01 4a 28 32 06 22 4a 40
>02ad08	00 00 14 00 ba 03 2e 3e 17 30 4a 40 28 32 06 22
>02ad18	04 00 01 4a 00 00 1a 00 bb 03 2e 3e 1e 30 06 00
>02ad28	03 42 5a 4e 28 32 06 22 06 00 03 42 5a 4e 00 00
>02ad38	1a 00 bc 03 2e 3e 1d 30 06 00 03 42 5a 4e 28 32
>02ad48	06 22 06 00 03 62 7a 6e 00 00 42 00 bd 03 2e 3e
>02ad58	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02ad68	24 32 02 40 28 32 06 22 22 00 1f 31 31 31 31 31
>02ad78	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31
>02ad88	31 31 31 31 31 31 31 31 31 31 00 00 38 00 be 03
>02ad98	2e 3e 16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10
>02ada8	ff bf 24 32 03 40 28 32 06 22 18 00 14 31 32 31
>02adb8	31 32 31 32 32 32 31 32 31 31 30 32 30 32 31 30
>02adc8	31 00 00 00 34 00 bf 03 2e 3e 16 30 ff bf 0c 26
>02add8	02 10 00 40 0a 24 01 10 ff bf 24 32 04 40 28 32
>02ade8	06 22 14 00 10 31 33 33 33 33 33 33 33 33 33 33
>02adf8	33 33 33 33 33 00 00 00 32 00 c0 03 2e 3e 16 30
>02ae08	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 24 32
>02ae18	05 40 28 32 06 22 12 00 0e 31 33 33 34 34 32 32
>02ae28	33 34 33 34 30 34 32 00 00 00 30 00 c1 03 2e 3e
>02ae38	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02ae48	24 32 06 40 28 32 06 22 10 00 0c 35 35 33 30 33
>02ae58	32 30 30 35 35 33 31 00 00 00 30 00 c2 03 2e 3e
>02ae68	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02ae78	24 32 07 40 28 32 06 22 10 00 0c 31 30 34 31 33
>02ae88	34 32 31 31 31 36 31 00 00 00 2e 00 c3 03 2e 3e
>02ae98	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02aea8	24 32 08 40 28 32 06 22 0e 00 0b 31 37 37 37 37
>02aeb8	37 37 37 37 37 37 00 00 2e 00 c4 03 2e 3e 16 30
>02aec8	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 24 32
>02aed8	09 40 28 32 06 22 0e 00 0a 35 34 37 38 37 37 33
>02aee8	36 37 31 00 00 00 2e 00 c5 03 2e 3e 16 30 ff bf
>02aef8	0c 26 02 10 00 40 0a 24 01 10 ff bf 24 32 0a 40
>02af08	28 32 06 22 0e 00 0a 32 31 34 37 34 38 33 36 34
>02af18	37 00 00 00 2c 00 c6 03 2e 3e 16 30 ff bf 0c 26
>02af28	02 10 00 40 0a 24 01 10 ff bf 24 32 0b 40 28 32
>02af38	06 22 0c 00 09 61 30 32 32 32 30 32 38 31 00 00
>02af48	2c 00 c7 03 2e 3e 16 30 ff bf 0c 26 02 10 00 40
>02af58	0a 24 01 10 ff bf 24 32 0c 40 28 32 06 22 0c 00
>02af68	09 34 62 62 32 33 30 38 61 37 00 00 2c 00 c8 03
>02af78	2e 3e 16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10
>02af88	ff bf 24 32 0d 40 28 32 06 22 0c 00 09 32 38 32
>02af98	62 61 34 61 61 61 00 00 2c 00 c9 03 2e 3e 16 30
>02afa8	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 24 32
>02afb8	0e 40 28 32 06 22 0c 00 09 31 36 35 32 63 61 39
>02afc8	33 31 00 00 2c 00 ca 03 2e 3e 16 30 ff bf 0c 26
>02afd8	02 10 00 40 0a 24 01 10 ff bf 24 32 0f 40 28 32
>02afe8	06 22 0c 00 08 63 38 37 65 36 36 62 37 00 00 00
>02aff8	2c 00 cb 03 2e 3e 16 30 ff bf 0c 26 02 10 00 40
>02b008	0a 24 01 10 ff bf 24 32 10 40 28 32 06 22 0c 00
>02b018	08 37 66 66 66 66 66 66 66 00 00 00 00 00 ee ee
>02b028	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>02b038	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 251 times (4016 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
