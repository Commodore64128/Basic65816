
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 18 15:24:09 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 82 1c 01	jmp $011c82			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	57 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	1b 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	2b 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	3b 0a					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	7f 0a					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	e6 0a					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	4b 0a					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	c8 0a					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	aa 0a					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	65 0a					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	65 09					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	e6 09					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	f2 0b					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	6f 0b					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	e6 0b					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	f7 09					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	09 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	80 0c					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	60 0c					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	3c 0c					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	26 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a8 0e					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	c8 0f					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	ba 0c					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	f2 0c					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	26 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	5c 0e					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	76 0e					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	8d 0e					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	31 11					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	ef 10					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	70 0d					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	07 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	99 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	88 10					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	62 0d					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	57 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	57 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	57 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	57 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	57 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	57 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	57 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	57 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	f4 1a					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	73 11					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	d5 1a					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	ac 18					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	af 18					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	2f 19					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	2b 19					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	8c 19					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	00 1a					.word Function_COLLECT         & $FFFF ; token $3e34 "collect"
>01006a	f0 1a					.word Function_CLS             & $FFFF ; token $3e35 "cls"
>01006c	38 14					.word Function_PRINT           & $FFFF ; token $3e36 "print"
>01006e	3a 17					.word Function_GOTO            & $FFFF ; token $3e37 "goto"
>010070	99 17					.word Function_GOSUB           & $FFFF ; token $3e38 "gosub"
>010072	b5 17					.word Function_RETURN          & $FFFF ; token $3e39 "return"
>010074	f7 16					.word Function_ONGOTO          & $FFFF ; token $3e3a "on"
>010076	eb 14					.word Handler_ELSE             & $FFFF ; token $3e3b "else"
>010078	8f 1a					.word Command_POKE             & $FFFF ; token $3e3c "poke"
>01007a	a7 1a					.word Command_DOKE             & $FFFF ; token $3e3d "doke"
>01007c	bb 1a					.word Command_LOKE             & $FFFF ; token $3e3e "loke"
>01007e	00 12					.word Command_List             & $FFFF ; token $3e3f "list"
>010080	06 1b					.word Function_LINK            & $FFFF ; token $3e40 "link"
>010082	e7 17					.word Function_REPEAT          & $FFFF ; token $3c41 "repeat"
>010084	45 18					.word Function_WHILE           & $FFFF ; token $3c42 "while"
>010086	84 14					.word Function_IF              & $FFFF ; token $3c43 "if"
>010088	c0 15					.word Command_FOR              & $FFFF ; token $3c44 "for"
>01008a	7c 18					.word Function_WEND            & $FFFF ; token $3a45 "wend"
>01008c	fe 17					.word Function_UNTIL           & $FFFF ; token $3a46 "until"
>01008e	57 05					.word IllegalToken             & $FFFF ; token $3a47 "then"
>010090	19 15					.word Handler_ENDIF            & $FFFF ; token $3a48 "endif"
>010092	3b 16					.word Command_NEXT             & $FFFF ; token $3a49 "next"
.010094					TokenText:
>010094	02 26					 .text $02,"&"        ; token $2001
>010096	02 7c					 .text $02,"|"        ; token $2002
>010098	02 5e					 .text $02,"^"        ; token $2003
>01009a	12 3c					 .text $12,"<"        ; token $2204
>01009c	12 3e					 .text $12,">"        ; token $2205
>01009e	12 3d					 .text $12,"="        ; token $2206
>0100a0	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a3	13 3e 3d				 .text $13,">="       ; token $2208
>0100a6	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a9	22 2b					 .text $22,"+"        ; token $240a
>0100ab	22 2d					 .text $22,"-"        ; token $240b
>0100ad	32 2a					 .text $32,"*"        ; token $260c
>0100af	32 2f					 .text $32,"/"        ; token $260d
>0100b1	32 25					 .text $32,"%"        ; token $260e
>0100b3	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b6	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b9	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100be	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c3	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c8	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cd	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d2	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d8	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100de	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e3	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e8	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ee	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f4	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100fa	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010102	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>01010a	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010111	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010117	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011f	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010126	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>01012d	92 2c					 .text $92,","        ; token $3224
>01012f	92 3b					 .text $92,";"        ; token $3225
>010131	92 3a					 .text $92,":"        ; token $3226
>010133	92 28					 .text $92,"("        ; token $3227
>010135	92 29					 .text $92,")"        ; token $3228
>010137	92 27					 .text $92,"'"        ; token $3229
>010139	c3 54 4f				 .text $c3,"TO"       ; token $382a
>01013c	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010141	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>010145	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010149	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010150	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>010154	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010158	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>01015d	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>010163	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010167	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e34
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e35
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e36
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e37
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e38
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e39
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e3a
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3b
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3c
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3d
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3e
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3f
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e40
>0101ac	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c41
>0101b3	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c42
>0101b9	e3 49 46				 .text $e3,"IF"       ; token $3c43
>0101bc	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c44
>0101c0	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a45
>0101c5	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a46
>0101cb	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a47
>0101d0	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a48
>0101d6	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a49
>0101db	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					collectTokenID                   = $3e34
=$3e35					clsTokenID                       = $3e35
=$3e36					printTokenID                     = $3e36
=$3e37					gotoTokenID                      = $3e37
=$3e38					gosubTokenID                     = $3e38
=$3e39					returnTokenID                    = $3e39
=$3e3a					onTokenID                        = $3e3a
=$3e3b					elseTokenID                      = $3e3b
=$3e3c					pokeTokenID                      = $3e3c
=$3e3d					dokeTokenID                      = $3e3d
=$3e3e					lokeTokenID                      = $3e3e
=$3e3f					listTokenID                      = $3e3f
=$3e40					linkTokenID                      = $3e40
=$3c41					repeatTokenID                    = $3c41
=$3c42					whileTokenID                     = $3c42
=$3c43					ifTokenID                        = $3c43
=$3c44					forTokenID                       = $3c44
=$3a45					wendTokenID                      = $3a45
=$3a46					untilTokenID                     = $3a46
=$3a47					thenTokenID                      = $3a47
=$3a48					endifTokenID                     = $3a48
=$3a49					nextTokenID                      = $3a49

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101dc					Evaluate:
.0101dc	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101df	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101e2					EvaluateLevel:
.0101e2	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101e5	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101e7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101ec	b0 79		bcs $010267			bcs 	_ELVariable
.0101ee	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101f1	b0 16		bcs $010209			bcs 	_ELConstant
.0101f3	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101f6	90 7f		bcc $010277			bcc 	_ELStringConstant
.0101f8	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101fb	90 03		bcc $010200			bcc 	_ELConstantShift
.0101fd	82 94 00	brl $010294			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010200					_ELConstantShift:
.010200	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010203	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010205	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010207	e6 06		inc $06				inc 	DCodePtr
.010209					_ELConstant:
.010209	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01020b	38		sec				sec  								; shift it in the range 0-32767
.01020c	e9 00 40	sbc #$4000			sbc 	#$4000
.01020f	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010210	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010212	6a		ror a				ror 	a 							; rotate that into the constant value
.010213	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010215	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010217	95 20		sta $20,x			sta 	EXSValueH+0,x
.010219	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01021b	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01021d	e6 06		inc $06				inc 	DCodePtr
.01021f					_ELGotAtom:
.01021f	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010221	a8		tay				tay 								; save in Y
.010222	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010225	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010228	d0 35		bne $01025f			bne 	_ELExit
.01022a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01022c	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022f	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010231	98		tya				tya 								; get the keyword token back
.010232	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010235	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010237	90 26		bcc $01025f			bcc 	_ELExit 					; precedence too low, then exit.
.010239	5a		phy				phy 								; save the binary operator on the stack
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e	18		clc				clc 								; try the next level up
.01023f	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010242	e8		inx				inx 								; calculate the RHS at the next stack level.
.010243	e8		inx				inx
.010244	20 e2 01	jsr $0101e2			jsr 	EvaluateLevel
.010247	ca		dex				dex
.010248	ca		dex				dex
.010249	7a		ply				ply 								; get operator token back into Y
.01024a					_ELExecuteY:
.01024a	98		tya				tya
.01024b	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01024e	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01024f	9b		txy				txy 								; save X in Y
.010250	aa		tax				tax 								; double keyword ID in X
.010251	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010255	bb		tyx				tyx 								; restore X.
.010256	8f 5b 02 01	sta $01025b			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01025a					_ELCallRoutine:
.01025a	20 5a 02	jsr $01025a			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01025d	80 c0		bra $01021f			bra 	_ELGotAtom 					; go round operator level again.
.01025f	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010261	0a		asl a				asl 	a
.010262	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010264	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010266	60		rts				rts
.010267					_ELVariable:
.010267	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010269	20 28 03	jsr $010328			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01026c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01026e	94 20		sty $20,x			sty 	EXSValueH+0,x
.010270	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010272	80 ab		bra $01021f			bra 	_ELGotAtom
.010274					_ELSyntax
.010274	82 f1 02	brl $010568			brl 	SyntaxError
.010277					_ELStringConstant:
.010277	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01027a	f0 f8		beq $010274			beq 	_ELSyntax
.01027c	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01027e	1a		inc a				inc 	a
.01027f	1a		inc a				inc 	a
.010280	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010282	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.010284	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010286	18		clc				clc 								; add to string constant.
.010287	65 06		adc $06				adc 	DCodePtr
.010289	85 06		sta $06				sta 	DCodePtr
.01028b	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.01028d	09 00 80	ora #$8000			ora 	#$8000
.010290	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010292	80 8b		bra $01021f			bra 	_ELGotAtom
.010294					_ELUnaryKeyword:
.010294	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010296	a8		tay				tay 								; put the token in Y.
.010297	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010299	e6 06		inc $06				inc 	DCodePtr
.01029b	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01029e	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102a1	f0 a7		beq $01024a			beq 	_ELExecuteY					; go back and execute it
.0102a3	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102a6	d0 11		bne $0102b9			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102a8	20 df 02	jsr $0102df			jsr 	EvaluateNext 				; evaluate the expression
.0102ab	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102ae					_ELCopy:
.0102ae	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102b0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102b2	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102b4	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102b6	82 66 ff	brl $01021f			brl 	_ELGotAtom 					; and continue.
.0102b9					_ELUnaryOperator:
.0102b9	5a		phy				phy 								; save the operator on the stack.
.0102ba	e8		inx				inx 								; this is like evaluate next
.0102bb	e8		inx				inx
.0102bc	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102bf	20 e2 01	jsr $0101e2			jsr 	EvaluateLevel
.0102c2	ca		dex				dex 								; unwind the stack.
.0102c3	ca		dex				dex
.0102c4	68		pla				pla 								; restore the unary operator.
.0102c5	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102c8	f0 03		beq $0102cd			beq 	_ELMinus
.0102ca	4c 68 05	jmp $010568			jmp 	SyntaxError
.0102cd					_ELMinus:
.0102cd	38		sec				sec 								; do the negation calculation.
.0102ce	a9 00 00	lda #$0000			lda 	#0
.0102d1	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102d3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d5	a9 00 00	lda #$0000			lda 	#0
.0102d8	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102da	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102dc	82 40 ff	brl $01021f			brl 	_ELGotAtom					; and continue.
.0102df					EvaluateNext:
.0102df	e8		inx				inx
.0102e0	e8		inx				inx
.0102e1	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102e4	20 e2 01	jsr $0101e2			jsr 	EvaluateLevel
.0102e7	ca		dex				dex
.0102e8	ca		dex				dex
.0102e9	60		rts				rts
.0102ea					EvaluateInteger:
.0102ea	20 dc 01	jsr $0101dc			jsr 	Evaluate
.0102ed	b0 01		bcs $0102f0			bcs 	EIType
.0102ef	60		rts				rts
.0102f0					EIType:
.0102f0	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0102f3	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102fb	78 70 65 63 74 65 64 00
.010303					EvaluateNextInteger:
.010303	20 df 02	jsr $0102df			jsr 	EvaluateNext
.010306	b0 e8		bcs $0102f0			bcs 	EIType
.010308	60		rts				rts
.010309					EvaluateString:
.010309	20 dc 01	jsr $0101dc			jsr 	Evaluate
.01030c	90 01		bcc $01030f			bcc 	ESType
.01030e	60		rts				rts
.01030f					ESType:
.01030f	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010312	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextString:
.010322	20 df 02	jsr $0102df			jsr 	EvaluateNext
.010325	90 e8		bcc $01030f			bcc 	ESType
.010327	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010328					VariableAccessExpression:
.010328	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01032a	48		pha				pha
.01032b	20 69 03	jsr $010369			jsr 	VariableFind 				; try to find the variables
.01032e	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010330	90 23		bcc $010355			bcc 	_VANError 					; not found, so report an error.
.010332	68		pla				pla 								; get and save that first token
.010333	48		pha				pha 								; we use it for typing.
.010334	a8		tay				tay 								; put first token in Y.
.010335	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010338	f0 07		beq $010341			beq 	_VANNotArray
.01033a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01033c	20 e0 03	jsr $0103e0			jsr 	VariableSubscript			; index calculation
.01033f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010341					_VANNotArray:
.010341	68		pla				pla 								; get the token back.
.010342	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010345	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010348	38		sec				sec 								; set up return string.
.010349	f0 06		beq $010351			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01034b	18		clc				clc 								; returning a number, read high data word
.01034c	a0 02 00	ldy #$0002			ldy 	#2
.01034f	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010351					_VANLoadLower:
.010351	a8		tay				tay 								; put A into Y (this is the high byte)
.010352	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010354	60		rts				rts
.010355					_VANError:
.010355	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010358	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010360	20 75 6e 6b 6e 6f 77 6e 00
.010369					VariableFind:
.010369	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01036b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01036e	90 5c		bcc $0103cc			bcc 	_VFError
.010370	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010373	b0 11		bcs $010386			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010375	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010378	3a		dec a				dec 	a 							; now 0-25
.010379	0a		asl a				asl 	a 							; x 4 and clear carry
.01037a	0a		asl a				asl 	a
.01037b	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01037e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010380	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010382	e6 06		inc $06				inc 	DCodePtr
.010384	38		sec				sec 								; return with carry set.
.010385	60		rts				rts
.010386					_VFSlowVariable:
.010386	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010388	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.01038b	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01038c	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01038d	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010390	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010392	85 08		sta $08				sta 	DTemp1
.010394	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010396	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010399	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01039a	65 08		adc $08				adc 	DTemp1
.01039c	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01039e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103a0					_VFNext:
.0103a0	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103a2	f0 26		beq $0103ca			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103a4	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103a6	a8		tay				tay 								; read the address of the name at $0002,y
.0103a7	b9 02 00	lda $0002,y			lda 	$0002,y
.0103aa	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103ac	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103af					_VFCompare:
.0103af	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103b1	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103b3	d0 eb		bne $0103a0			bne 	_VFNext 					; if not, go to the next one.
.0103b5	c8		iny				iny 								; advance token pointer
.0103b6	c8		iny				iny
.0103b7	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103ba	d0 f3		bne $0103af			bne 	_VFCompare
.0103bc	98		tya				tya 								; this is the length of the word.
.0103bd	18		clc				clc 								; so we add it to the code pointer
.0103be	65 06		adc $06				adc 	DCodePtr
.0103c0	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103c2	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103c4	18		clc				clc 								; four on is the actual data
.0103c5	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103c8	38		sec				sec 								; return with CS indicating success
.0103c9	60		rts				rts
.0103ca					_VFFail:
.0103ca	18		clc				clc
.0103cb	60		rts				rts
.0103cc					_VFError:
.0103cc	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0103cf	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103d7	76 61 72 69 61 62 6c 65 00
.0103e0					VariableSubscript:
.0103e0	48		pha				pha		 							; save variable address on stack.
.0103e1	20 03 03	jsr $010303			jsr		EvaluateNextInteger 		; get the subscript
.0103e4	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; skip right bracket.
.0103e7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103ea	d0 10		bne $0103fc			bne 	_VANSubscript
.0103ec	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103ee	f0 02		beq $0103f2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103f0	b0 0a		bcs $0103fc			bcs 	_VANSubscript
.0103f2					_VANSubOkay:
.0103f2	0a		asl a				asl 	a 							; double lsword
.0103f3	0a		asl a				asl 	a 							; and again, also clears carry.
.0103f4	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103f6	68		pla				pla 								; restore DVariablePtr
.0103f7	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103f8	1a		inc a				inc 	a
.0103f9	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103fb	60		rts				rts
.0103fc					_VANSubscript:
.0103fc	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0103ff	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010407	79 20 53 75 62 73 63 72 69 70 74 00
.010413					VariableCreate:
.010413	48		pha				pha 								; save count.
.010414	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010417	29 00 20	and #$2000			and 	#IDTypeMask
.01041a	f0 06		beq $010422			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01041c	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01041f	18		clc				clc 								; which is guaranteed by have a 0 length.
.010420	65 02		adc $02				adc 	DBaseAddress
.010422					_VCIsInteger:
.010422	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010424	68		pla				pla 								; restore count
.010425	48		pha				pha
.010426	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010427	0a		asl a				asl 	a 							; 2 x # items.
.010428	0a		asl a				asl 	a 							; 4 x # items.
.010429					_VCNotSingle:
.010429	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01042b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01042e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010431	f0 04		beq $010437			beq 	_VCNotArray
.010433	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010435	e6 08		inc $08				inc 	DTemp1
.010437					_VCNotArray:
.010437	5a		phy				phy 								; save address of first token on stack.
.010438	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01043b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01043d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01043f	18		clc				clc 								; add 4 for link and name words
.010440	69 04 00	adc #$0004			adc 	#4
.010443	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010445	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010447	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010449					_VCErase:
.010449	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01044b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01044e	c8		iny				iny
.01044f	c8		iny				iny
.010450	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010452	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010454	d0 f3		bne $010449			bne 	_VCErase
.010456	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010458	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01045a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01045d	68		pla				pla 								; restore the token address
.01045e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010461	68		pla				pla 								; restore count and store.
.010462	99 04 00	sta $0004,y			sta 	$0004,y
.010465	98		tya				tya 								; update the head link
.010466	92 20		sta ($20)			sta 	(DHashTablePtr)
.010468	18		clc				clc 								; advance pointer to the data bit.
.010469	69 04 00	adc #$0004			adc 	#4
.01046c	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.01046d					LineDelete:
.01046d	aa		tax				tax 	 							; this is the one we're looking for ....
.01046e	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.010470	18		clc				clc
.010471	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.010474	a8		tay				tay
.010475					_LDLoop:
.010475	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.010478	f0 2d		beq $0104a7			beq 	_LDExit						; exit if zero ; line does not exist
.01047a	8a		txa				txa 								; found a match
.01047b	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01047e	f0 08		beq $010488			beq		_LDFound
.010480	98		tya				tya 								; follow the link.
.010481	18		clc				clc
.010482	79 00 00	adc $0000,y			adc 	$0000,y
.010485	a8		tay				tay
.010486	80 ed		bra $010475			bra 	_LDLoop
.010488					_LDFound:
.010488	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.01048a	98		tya				tya 								; follow link to next.
.01048b	18		clc				clc
.01048c	79 00 00	adc $0000,y			adc 	$0000,y
.01048f	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.010491	20 76 19	jsr $011976			jsr 	FindCodeEnd 				; find the end of the code.
.010494	38		sec				sec
.010495	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.010497	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.010498	1a		inc a				inc 	a
.010499	aa		tax				tax
.01049a	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.01049d	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.01049f	91 08		sta ($08),y			sta 	(DTemp1),y
.0104a1	c8		iny				iny
.0104a2	c8		iny				iny
.0104a3	ca		dex				dex
.0104a4	ca		dex				dex
.0104a5	d0 f6		bne $01049d			bne 	_LDCopy
.0104a7					_LDExit:
.0104a7	60		rts				rts
.0104a8					LineInsert:
.0104a8	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104aa	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.0104ac	a0 00 00	ldy #$0000			ldy 	#0
.0104af					_LIFindLength:
.0104af	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.0104b1	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.0104b4	f0 10		beq $0104c6			beq 	_LIFindEnd
.0104b6	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.0104b9	90 04		bcc $0104bf			bcc 	_LIQString
.0104bb	c8		iny				iny 								; otherwise just skip it.
.0104bc	c8		iny				iny
.0104bd	80 f0		bra $0104af			bra 	_LIFindLength
.0104bf					_LIQString:
.0104bf	98		tya				tya 								; skip quoted strings
.0104c0	18		clc				clc
.0104c1	71 08		adc ($08),y			adc 	(DTemp1),y
.0104c3	a8		tay				tay
.0104c4	80 e9		bra $0104af			bra 	_LIFindLength
.0104c6					_LIFindEnd:
.0104c6	98		tya				tya 								; the tokens in the line
.0104c7	18		clc				clc
.0104c8	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.0104cb	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.0104cd	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.0104d0	18		clc				clc
.0104d1	65 02		adc $02				adc 	DBaseAddress
.0104d3	a8		tay				tay
.0104d4					_LIFindInsertPoint:
.0104d4	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.0104d7	f0 0f		beq $0104e8			beq		_LIFoundInsertPoint
.0104d9	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.0104dc	c5 0c		cmp $0c				cmp 	DTemp2
.0104de	b0 08		bcs $0104e8			bcs 	_LIFoundInsertPoint
.0104e0	98		tya				tya 								; if < go to the next line.
.0104e1	18		clc				clc
.0104e2	79 00 00	adc $0000,y			adc 	$0000,y
.0104e5	a8		tay				tay
.0104e6	80 ec		bra $0104d4			bra 	_LIFindInsertPoint
.0104e8					_LIFoundInsertPoint:
.0104e8	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.0104ea	20 76 19	jsr $011976			jsr 	FindCodeEnd 				; get the end of the code.
.0104ed	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.0104ef	18		clc				clc
.0104f0	65 24		adc $24				adc 	DTemp3
.0104f2	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.0104f4					_LICopyMove:
.0104f4	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.0104f6	92 34		sta ($34)			sta 	(DTemp4+2)
.0104f8	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.0104fa	c5 36		cmp $36				cmp 	DTemp5
.0104fc	f0 0a		beq $010508			beq 	_LICopyMoveOver
.0104fe	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010500	c6 32		dec $32				dec 	DTemp4
.010502	c6 34		dec $34				dec 	DTemp4+2
.010504	c6 34		dec $34				dec 	DTemp4+2
.010506	80 ec		bra $0104f4			bra 	_LICopyMove
.010508					_LICopyMoveOver:
.010508	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01050a	92 36		sta ($36)			sta 	(DTemp5)
.01050c	a0 02 00	ldy #$0002			ldy 	#2
.01050f	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010511	91 36		sta ($36),y			sta 	(DTemp5),y
.010513	a0 04 00	ldy #$0004			ldy 	#4
.010516					_LICopyTokens:
.010516	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010518	91 36		sta ($36),y			sta 	(DTemp5),y
.01051a	c8		iny				iny
.01051b	c8		iny				iny
.01051c	e6 08		inc $08				inc 	DTemp1
.01051e	e6 08		inc $08				inc 	DTemp1
.010520	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010522	c6 24		dec $24				dec 	DTemp3
.010524	a5 24		lda $24				lda 	DTemp3
.010526	c9 04 00	cmp #$0004			cmp 	#4
.010529	d0 eb		bne $010516			bne 	_LICopyTokens
.01052b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01052c					ErrorHandler:
.01052c	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01052e	fa		plx				plx 								; address of error message -1
.01052f	e8		inx				inx 								; error message.
.010530	20 d4 05	jsr $0105d4			jsr 	PrintROMMessage 			; print message in ROM
.010533	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010535	f0 15		beq $01054c			beq 	_EHEndMessage
.010537	a2 52 05	ldx #$0552			ldx 	#_EHAt & $FFFF 				; print " at "
.01053a	20 d4 05	jsr $0105d4			jsr 	PrintROMMessage
.01053d	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01053f	a0 00 00	ldy #$0000			ldy 	#0
.010542	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010545	20 e3 0f	jsr $010fe3			jsr 	ConvertToString 			; convert and print it.
.010548	a8		tay				tay
.010549	20 f2 05	jsr $0105f2			jsr 	PrintBASICString
.01054c					_EHEndMessage:
.01054c	20 b3 1b	jsr $011bb3			jsr 	HWNewLine
.01054f	4c ac 1c	jmp $011cac			jmp 	NextCommand 				; get next command.
>010552	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010557					IllegalToken:
.010557	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01055a	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010562	54 6f 6b 65 6e 00
.010568					SyntaxError:
.010568	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01056b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010573	72 72 6f 72 00
.010578					ExpectToken:
.010578	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01057a	d0 05		bne $010581			bne 	_CTKError					; error if not
.01057c	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01057e	e6 06		inc $06				inc 	DCodePtr
.010580	60		rts				rts
.010581					_CTKError:
.010581	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010584	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01058c	74 6f 6b 65 6e 00
.010592					ExpectRightBracket:
.010592	48		pha				pha
.010593	a9 28 32	lda #$3228			lda 	#rparenTokenID
.010596	20 78 05	jsr $010578			jsr 	ExpectToken
.010599	68		pla				pla
.01059a	60		rts				rts
.01059b					ExpectComma:
.01059b	48		pha				pha
.01059c	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01059f	20 78 05	jsr $010578			jsr 	ExpectToken
.0105a2	68		pla				pla
.0105a3	60		rts				rts
.0105a4					CheckBothNumeric:
.0105a4	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105a6	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105a8	30 01		bmi $0105ab			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105aa	60		rts				rts
.0105ab					_CBNFail:
.0105ab	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0105ae	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0105b6	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0105c4					ResetTypeInteger:
.0105c4	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0105c6	29 ff 7f	and #$7fff			and 	#$7FFF
.0105c9	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0105cb	60		rts				rts
.0105cc					ResetTypeString:
.0105cc	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0105ce	09 00 80	ora #$8000			ora 	#$8000
.0105d1	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0105d3	60		rts				rts
.0105d4					PrintROMMessage:
.0105d4	48		pha				pha
.0105d5	da		phx				phx
.0105d6					_PRMLoop:
.0105d6	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0105da	29 ff 00	and #$00ff			and 	#$00FF
.0105dd	f0 10		beq $0105ef			beq 	_PRMExit
.0105df	c9 0d 00	cmp #$000d			cmp 	#13
.0105e2	d0 05		bne $0105e9			bne 	_PRMChar
.0105e4	20 b3 1b	jsr $011bb3			jsr 	HWNewLine
.0105e7	80 03		bra $0105ec			bra 	_PRMNext
.0105e9					_PRMChar:
.0105e9	20 62 1b	jsr $011b62			jsr 	HWPrintChar
.0105ec					_PRMNext:
.0105ec	e8		inx				inx
.0105ed	80 e7		bra $0105d6			bra 	_PRMLoop
.0105ef					_PRMExit:
.0105ef	fa		plx				plx
.0105f0	68		pla				pla
.0105f1	60		rts				rts
.0105f2					PrintBASICString:
.0105f2	48		pha				pha
.0105f3	da		phx				phx
.0105f4	5a		phy				phy
.0105f5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0105f8	29 ff 00	and #$00ff			and 	#$00FF
.0105fb	f0 0b		beq $010608			beq 	_PBSExit 					; null string
.0105fd	aa		tax				tax
.0105fe					_PBSLoop:
.0105fe	c8		iny				iny
.0105ff	b9 00 00	lda $0000,y			lda 	$0000,y
.010602	20 62 1b	jsr $011b62			jsr 	HWPrintChar
.010605	ca		dex				dex
.010606	d0 f6		bne $0105fe			bne 	_PBSLoop
.010608					_PBSExit:
.010608	7a		ply				ply
.010609	fa		plx				plx
.01060a	68		pla				pla
.01060b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringutils.asm

.01060c					StringTempAllocate:
.01060c	48		pha				pha
.01060d	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01060f	d0 09		bne $01061a			bne 	_STANoReset
.010611	5a		phy				phy 								; reset the temp string pointer.
.010612	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010615	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010617	85 16		sta $16				sta 	DTempStringPointer
.010619	7a		ply				ply
.01061a					_STANoReset:
.01061a	68		pla				pla 								; get length.
.01061b	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01061e	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010621	18		clc				clc 								; this adds one, for the length.
.010622	65 16		adc $16				adc 	DTempStringPointer
.010624	85 16		sta $16				sta 	DTempStringPointer
.010626	48		pha				pha 								; save start address
.010627	a9 00 00	lda #$0000			lda 	#$0000
.01062a	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01062c	92 16		sta ($16)			sta		(DTempStringPointer)
.01062e	c2 20		rep #$20			rep 	#$20
.010630	68		pla				pla 								; restore start address
.010631	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010633	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010635	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010637	60		rts				rts
.010638					StringWriteCharacter:
.010638	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.01063a	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.01063c	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01063e	1a		inc a				inc 	a
.01063f	92 18		sta ($18)			sta 	(DStartTempString)
.010641	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010643	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010645	60		rts				rts
.010646					StringCreateCopy:
.010646	a8		tay				tay 								; put pointer to string in Y
.010647	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01064a	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01064d	f0 17		beq $010666			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01064f	da		phx				phx 								; save X and put the character count in X
.010650	aa		tax				tax
.010651					_SCCCopy:
.010651	c8		iny				iny 								; advance and read (first time skips length)
.010652	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010654	b9 00 00	lda $0000,y			lda 	$0000,y
.010657	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010659	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01065b	1a		inc a				inc 	a
.01065c	92 18		sta ($18)			sta 	(DStartTempString)
.01065e	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010660	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010662	ca		dex				dex 								; do X times
.010663	d0 ec		bne $010651			bne 	_SCCCopy
.010665	fa		plx				plx
.010666					_SCCExit:
.010666	60		rts				rts
.010667					StringMakeConcrete:
.010667	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01066a	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01066c	90 0f		bcc $01067d			bcc 	_SMCExit
.01066e	85 08		sta $08				sta 	DTemp1 						; source
.010670	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010672	29 ff 00	and #$00ff			and 	#$00FF
.010675	d0 07		bne $01067e			bne 	_SMCNonZero 				; if not "" skip.
.010677	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01067a	18		clc				clc 								; this reference is used for all empty strings.
.01067b	65 02		adc $02				adc 	DBaseAddress
.01067d					_SMCExit:
.01067d	60		rts				rts
.01067e					_SMCNonZero:
.01067e	48		pha				pha 								; save on stack.
.01067f	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010682	18		clc				clc
.010683	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010686	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010688	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01068a	85 0c		sta $0c				sta 	DTemp2 						; target
.01068c	7a		ply				ply 								; get length copy from here until Y goes -ve
.01068d	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01068f					_SMCLoop:
.01068f	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.010691	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010693	88		dey				dey 								; Y+1 times.
.010694	10 f9		bpl $01068f			bpl 	_SMCLoop
.010696	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010698	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01069a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.01069b					Tokenise:
.01069b	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.01069d	84 0a		sty $0a				sty 	DTemp1+2
.01069f	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0106a2	18		clc				clc
.0106a3	65 02		adc $02				adc 	DBaseAddress
.0106a5	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0106a7	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0106aa	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0106ad					_TOKCap:
.0106ad	c8		iny				iny 								; go to next
.0106ae	b7 08		lda [$08],y			lda 	[DTemp1],y
.0106b0	29 ff 00	and #$00ff			and 	#$00FF
.0106b3	f0 22		beq $0106d7			beq 	_TOKEndCap
.0106b5	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0106b8	d0 01		bne $0106bb			bne 	_TOKNotQuote
.0106ba	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0106bb					_TOKNotQuote:
.0106bb	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0106be	90 ed		bcc $0106ad			bcc 	_TOKCap
.0106c0	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0106c3	b0 e8		bcs $0106ad			bcs 	_TOKCap
.0106c5	8a		txa				txa 								; check if in quotes
.0106c6	4a		lsr a				lsr 	a
.0106c7	b0 e4		bcs $0106ad			bcs 	_TOKCap
.0106c9	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0106cb	38		sec				sec
.0106cc	e9 20 00	sbc #$0020			sbc 	#32
.0106cf	e2 20		sep #$20			sep 	#$20
.0106d1	97 08		sta [$08],y			sta 	[DTemp1],y
.0106d3	c2 20		rep #$20			rep 	#$20
.0106d5	80 d6		bra $0106ad			bra 	_TOKCap
.0106d7					_TOKEndCap:
.0106d7	c6 08		dec $08				dec 	DTemp1
.0106d9					_TOKMainNext:
.0106d9	e6 08		inc $08				inc 	DTemp1
.0106db					_TOKMainLoop:
.0106db	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0106dd	29 ff 00	and #$00ff			and 	#$00FF
.0106e0	c9 20 00	cmp #$0020			cmp 	#32
.0106e3	90 1d		bcc $010702			bcc 	_TOKExit 					; 0-31 exit.
.0106e5	f0 f2		beq $0106d9			beq 	_TOKMainNext 				; 32 (space) skip.
.0106e7	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0106ea	f0 1d		beq $010709			beq 	_TOKString
.0106ec	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0106ef	90 1d		bcc $01070e			bcc 	_TOKPunctuation
.0106f1	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0106f4	90 42		bcc $010738			bcc 	_TOKNumber
.0106f6	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0106f9	90 13		bcc $01070e			bcc 	_TOKPunctuation
.0106fb	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0106fe	90 3d		bcc $01073d			bcc 	_TOKIdentifier
.010700	80 0c		bra $01070e			bra 	_TOKPunctuation 			; 91-   punctuation.
.010702					_TOKExit:
.010702	a9 00 00	lda #$0000			lda 	#$0000
.010705	20 42 07	jsr $010742			jsr 	TOKWriteToken
.010708	60		rts				rts
.010709					_TOKString:
.010709	20 e0 07	jsr $0107e0			jsr 	TOKQuotedString
.01070c	80 cd		bra $0106db			bra 	_TOKMainLoop
.01070e					_TOKPunctuation:
.01070e	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010711	20 47 08	jsr $010847			jsr 	TOKKeywordSearch
.010714	b0 1d		bcs $010733			bcs 	_TOKFoundPunctuation
.010716	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010719	20 47 08	jsr $010847			jsr 	TOKKeywordSearch
.01071c	b0 15		bcs $010733			bcs 	_TOKFoundPunctuation
.01071e	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010721	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010729	61 72 73 65 20 6c 69 6e 65 00
.010733					_TOKFoundPunctuation:
.010733	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; output the token and go round again.
.010736	80 a3		bra $0106db			bra 	_TOKMainLoop
.010738					_TOKNumber:
.010738	20 61 07	jsr $010761			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01073b	80 9e		bra $0106db			bra 	_TOKMainLoop
.01073d					_TOKIdentifier:
.01073d	20 a2 08	jsr $0108a2			jsr 	TOKIdentifier
.010740	80 99		bra $0106db			bra 	_TOKMainLoop
.010742					TOKWriteToken:
.010742	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010744	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010746	e6 0c		inc $0c				inc 	DTemp2
.010748	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01074a	29 ff 00	and #$00ff			and 	#$00FF
.01074d	f0 01		beq $010750			beq 	_TOKWriteOverflow
.01074f	60		rts				rts
.010750					_TOKWriteOverflow:
.010750	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010753	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01075b	20 6c 6f 6e 67 00
.010761					TOKInteger:
.010761	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010763	64 26		stz $26				stz 	DTemp3+2
.010765					_TOKINLoop:
.010765	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010767	48		pha				pha
.010768	a5 24		lda $24				lda 	DTemp3
.01076a	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01076c	26 26		rol $26				rol 	DTemp3+2
.01076e	06 24		asl $24				asl 	DTemp3
.010770	26 26		rol $26				rol 	DTemp3+2
.010772	18		clc				clc
.010773	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010775	85 24		sta $24				sta 	DTemp3
.010777	68		pla				pla
.010778	65 26		adc $26				adc 	DTemp3+2
.01077a	85 26		sta $26				sta 	DTemp3+2
.01077c	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.01077e	26 26		rol $26				rol 	DTemp3+2
.010780	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010782	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010785	d0 44		bne $0107cb			bne 	_TOKINSize
.010787	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010789	29 0f 00	and #$000f			and 	#15
.01078c	18		clc				clc
.01078d	65 24		adc $24				adc 	DTemp3 						; add to the running count
.01078f	85 24		sta $24				sta 	DTemp3
.010791	90 02		bcc $010795			bcc 	_TOKINNoCarry
.010793	e6 26		inc $26				inc 	DTemp3+2
.010795					_TOKINNoCarry:
.010795	e6 08		inc $08				inc 	DTemp1 						; look at next
.010797	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.010799	29 ff 00	and #$00ff			and 	#$00FF
.01079c	c9 30 00	cmp #$0030			cmp 	#"0"
.01079f	90 05		bcc $0107a6			bcc 	_TOKINGotInteger
.0107a1	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0107a4	90 bf		bcc $010765			bcc		_TOKINLoop
.0107a6					_TOKINGotInteger:
.0107a6	a5 24		lda $24				lda 	DTemp3 						; lower word
.0107a8	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0107ab	18		clc				clc
.0107ac	69 00 40	adc #$4000			adc 	#$4000
.0107af	48		pha				pha 								; save it.
.0107b0	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0107b2	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0107b4	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0107b6	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0107b9	b0 10		bcs $0107cb			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0107bb	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0107be	f0 06		beq $0107c6			beq 	_TOKINNoShift 				; don't need constant shift.
.0107c0	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0107c3	20 42 07	jsr $010742			jsr 	TOKWriteToken
.0107c6					_TOKINNoShift:
.0107c6	68		pla				pla 								; get lower its token
.0107c7	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; output it
.0107ca	60		rts				rts
.0107cb					_TOKINSize:
.0107cb	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0107ce	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0107d6	74 6f 6f 20 6c 61 72 67 65 00
.0107e0					TOKQuotedString:
.0107e0	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0107e2	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0107e4	85 32		sta $32				sta 	DTemp4
.0107e6	a5 0a		lda $0a				lda 	DTemp1+2
.0107e8	85 34		sta $34				sta 	DTemp4+2
.0107ea					_TOKQFindSize:
.0107ea	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0107ec	e6 08		inc $08				inc 	DTemp1
.0107ee	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0107f1	f0 3b		beq $01082e			beq 	_TOQImbalance 				; end of line, and no quote found.
.0107f3	c9 22 00	cmp #$0022			cmp 	#34
.0107f6	d0 f2		bne $0107ea			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0107f8	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0107fa	38		sec				sec
.0107fb	e5 32		sbc $32				sbc 	DTemp4
.0107fd	3a		dec a				dec 	a 							; one less character for closing quote
.0107fe	85 26		sta $26				sta 	DTemp3+2
.010800	18		clc				clc
.010801	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010804	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010807	20 42 07	jsr $010742			jsr 	TOKWriteToken
.01080a	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.01080c	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; effectively a byte-write.
.01080f	c6 0c		dec $0c				dec 	DTemp2
.010811	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010813	f0 0f		beq $010824			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010815					_TOKQWriteString:
.010815	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010817	29 ff 00	and #$00ff			and 	#$00FF
.01081a	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; effectively a byte-write.
.01081d	c6 0c		dec $0c				dec 	DTemp2
.01081f	e6 32		inc $32				inc 	DTemp4 						; advance character
.010821	ca		dex				dex 								; do X times
.010822	d0 f1		bne $010815			bne 	_TOKQWriteString
.010824					_TOKQWriteEnd:
.010824	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010826	29 01 00	and #$0001			and 	#1
.010829	f0 02		beq $01082d			beq 	_TOKQExit
.01082b	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01082d					_TOKQExit:
.01082d	60		rts				rts
.01082e					_TOQImbalance:
.01082e	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010831	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010839	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010847					TOKKeywordSearch:
.010847	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010849	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01084c	85 34		sta $34				sta 	DTemp4+2
.01084e	a2 00 00	ldx #$0000			ldx 	#0
.010851					_TOKScan:
.010851	bf 94 00 01	lda $010094,x			lda 	TokenText,x 				; read the first byte
.010855	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010858	f0 46		beq $0108a0			beq 	_TOKFail 					; if zero then we have failed.
.01085a	3a		dec a				dec 	a 							; -1 gives the length.
.01085b	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01085d	d0 2f		bne $01088e			bne 	_TOKNext 					; no, then skip to next token.
.01085f	da		phx				phx 								; save X
.010860	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010863					_TOKCompare:
.010863	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010865	5f 95 00 01	eor $010095,x			eor 	TokenText+1,x
.010869	29 ff 00	and #$00ff			and 	#$00FF
.01086c	d0 1f		bne $01088d			bne 	_TOKPopNext 				; if different, pop and goto next.
.01086e	e8		inx				inx 								; bump X and Y.
.01086f	c8		iny				iny
.010870	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010872	d0 ef		bne $010863			bne 	_TOKCompare
.010874	98		tya				tya 								; add length to the text pointer
.010875	18		clc				clc
.010876	65 08		adc $08				adc 	DTemp1
.010878	85 08		sta $08				sta 	DTemp1
.01087a	fa		plx				plx 								; restore X.
.01087b	bf 94 00 01	lda $010094,x			lda 	TokenText,x 				; get the type/token bit.
.01087f	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010882	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010883	4a		lsr a				lsr		a
.010884	4a		lsr a				lsr 	a
.010885	eb		xba				xba
.010886	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010888	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01088b	38		sec				sec
.01088c	60		rts				rts
.01088d					_TOKPopNext:
.01088d	fa		plx				plx 								; restore X.
.01088e					_TOKNext:
.01088e	bf 94 00 01	lda $010094,x			lda 	TokenText,x 				; get the token skip again.
.010892	29 0f 00	and #$000f			and 	#$000F
.010895	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.010897	8a		txa				txa
.010898	18		clc				clc
.010899	65 14		adc $14				adc 	DSignCount
.01089b	aa		tax				tax
.01089c	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.01089e	80 b1		bra $010851			bra 	_TOKScan
.0108a0					_TOKFail:
.0108a0	18		clc				clc
.0108a1	60		rts				rts
.0108a2					TOKIdentifier:
.0108a2	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0108a4	85 24		sta $24				sta 	DTemp3
.0108a6					_TOKIFindLength:
.0108a6	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0108a8	a7 08		lda [$08]			lda 	[DTemp1]
.0108aa	29 ff 00	and #$00ff			and 	#$00FF
.0108ad	20 4d 09	jsr $01094d			jsr 	TOKIsIdentifierCharacter
.0108b0	b0 f4		bcs $0108a6			bcs 	_TOKIFindLength
.0108b2	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0108b4	38		sec				sec
.0108b5	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0108b7	85 36		sta $36				sta 	DTemp5
.0108b9	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0108bb	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0108be	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0108c0	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0108c2	29 ff 00	and #$00ff			and 	#$00FF
.0108c5	c9 24 00	cmp #$0024			cmp 	#"$"
.0108c8	d0 0b		bne $0108d5			bne 	_TOKINotString
.0108ca	e6 08		inc $08				inc 	DTemp1 						; skip $
.0108cc	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0108ce	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0108d0	09 00 20	ora #$2000			ora 	#IDTypeMask
.0108d3	85 26		sta $26				sta 	DTemp3+2
.0108d5					_TOKINotString:
.0108d5	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0108d7	29 ff 00	and #$00ff			and 	#$00FF
.0108da	c9 28 00	cmp #$0028			cmp 	#"("
.0108dd	d0 0b		bne $0108ea			bne 	_TOKINotArray
.0108df	e6 08		inc $08				inc 	DTemp1 						; skip (
.0108e1	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0108e3	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0108e5	09 00 10	ora #$1000			ora 	#IDArrayMask
.0108e8	85 26		sta $26				sta 	DTemp3+2
.0108ea					_TOKINotArray:
.0108ea	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0108ec	85 08		sta $08				sta 	DTemp1
.0108ee	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0108f0	20 47 08	jsr $010847			jsr 	TOKKeywordSearch
.0108f3	90 04		bcc $0108f9			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0108f5	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; if CS write token and exit.
.0108f8	60		rts				rts
.0108f9					_TOKIIdentifier:
.0108f9	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0108fb	e6 08		inc $08				inc 	DTemp1
.0108fd	20 39 09	jsr $010939			jsr		_TOKIToConstant 			; convert to range 0-35
.010900	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.010902	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010904	f0 1d		beq $010923			beq 	_TOKINoSecond
.010906	48		pha				pha 								; save current on stack.
.010907	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010909	e6 08		inc $08				inc 	DTemp1
.01090b	20 39 09	jsr $010939			jsr		_TOKIToConstant 			; convert to range 0-35
.01090e	85 14		sta $14				sta 	DSignCount 					; save it.
.010910	0a		asl a				asl 	a 							; x 4
.010911	0a		asl a				asl 	a
.010912	65 14		adc $14				adc 	DSignCount 					; x 5
.010914	0a		asl a				asl 	a 							; x 10
.010915	65 14		adc $14				adc 	DSignCount 					; x 11
.010917	0a		asl a				asl 	a 							; x 22
.010918	0a		asl a				asl 	a 							; x 44
.010919	65 14		adc $14				adc 	DSignCount 					; x 45
.01091b	85 14		sta $14				sta 	DSignCount
.01091d	68		pla				pla 								; get old token and add x 45
.01091e	18		clc				clc
.01091f	65 14		adc $14				adc 	DSignCount
.010921	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010923					_TOKINoSecond:
.010923	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010925	f0 03		beq $01092a			beq 	_TOKINotLast				; if yes
.010927	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.01092a					_TOKINotLast:
.01092a	20 42 07	jsr $010742			jsr 	TOKWriteToken 				; output the token
.01092d	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.01092f	d0 c8		bne $0108f9			bne 	_TOKIIdentifier
.010931					_TOKIOut:
.010931	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010933	18		clc				clc
.010934	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010936	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010938	60		rts				rts
.010939					_TOKIToConstant:
.010939	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.01093c	c9 41 00	cmp #$0041			cmp 	#65
.01093f	90 04		bcc $010945			bcc 	_TOKITInteger
.010941	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010944	60		rts				rts
.010945					_TOKITInteger:
.010945	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010948	18		clc				clc
.010949	69 1b 00	adc #$001b			adc 	#27
.01094c	60		rts				rts
.01094d					TOKIsIdentifierCharacter:
.01094d	c9 30 00	cmp #$0030			cmp 	#"0"
.010950	90 0f		bcc $010961			bcc 	_TOKIIFail
.010952	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010955	90 0c		bcc $010963			bcc 	_TOKIIOk
.010957	c9 41 00	cmp #$0041			cmp 	#"A"
.01095a	90 05		bcc $010961			bcc 	_TOKIIFail
.01095c	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01095f	90 02		bcc $010963			bcc 	_TOKIIOk
.010961					_TOKIIFail:
.010961	18		clc				clc
.010962	60		rts				rts
.010963					_TOKIIOk:
.010963	38		sec				sec
.010964	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010965					Binary_Add:
.010965	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010967	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010969	30 12		bmi $01097d		bmi 	_BATypeError
.01096b	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01096d	30 3f		bmi $0109ae		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01096f	18		clc			clc 										; add the results
.010970	b5 00		lda $00,x		lda		EXSValueL+0,x
.010972	75 02		adc $02,x		adc 	EXSValueL+2,x
.010974	95 00		sta $00,x		sta 	EXSValueL+0,x
.010976	b5 20		lda $20,x		lda		EXSValueH+0,x
.010978	75 22		adc $22,x		adc 	EXSValueH+2,x
.01097a	95 20		sta $20,x		sta 	EXSValueH+0,x
.01097c	60		rts			rts
.01097d					_BATypeError:
.01097d	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010980	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010988	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010998	65 73 00
.01099b					_BALengthError:
.01099b	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01099e	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0109a6	6f 6f 20 6c 6f 6e 67 00
.0109ae					_BAConcatenateString:
.0109ae	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0109b0	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0109b2	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0109b4	85 0c		sta $0c			sta 	DTemp2
.0109b6	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0109b8	18		clc			clc 										; work out the total length
.0109b9	b2 08		lda ($08)		lda 	(DTemp1)
.0109bb	72 0c		adc ($0c)		adc 	(DTemp2)
.0109bd	b0 14		bcs $0109d3		bcs 	_BAConcatLengthError 				; string is too long.
.0109bf	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0109c1	20 0c 06	jsr $01060c		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0109c4	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0109c6	74 20		stz $20,x		stz 	EXSValueH+0,x
.0109c8	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0109ca	20 46 06	jsr $010646		jsr 	StringCreateCopy
.0109cd	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0109cf	20 46 06	jsr $010646		jsr 	StringCreateCopy
.0109d2	60		rts			rts
.0109d3					_BAConcatLengthError:
.0109d3	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0109d6	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0109de	6f 6f 20 6c 6f 6e 67 00
.0109e6					Binary_Subtract:
.0109e6	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.0109e9	38		sec			sec
.0109ea	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109ec	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109ee	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109f0	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109f2	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109f4	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109f6	60		rts			rts
.0109f7					Binary_ShiftRight:
.0109f7	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.0109fa	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0109fc	29 3f 00	and #$003f		and 	#63
.0109ff	f0 07		beq $010a08		beq		_Binary_SRExit
.010a01					_Binary_SRLoop:
.010a01	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010a03	76 00		ror $00,x		ror 	EXSValueL+0,x
.010a05	3a		dec a			dec 	a
.010a06	d0 f9		bne $010a01		bne 	_Binary_SRLoop
.010a08					_Binary_SRExit:
.010a08	60		rts			rts
.010a09					Binary_ShiftLeft:
.010a09	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010a0c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a0e	29 3f 00	and #$003f		and 	#63
.010a11	f0 07		beq $010a1a		beq		_Binary_SLExit
.010a13					_Binary_SLLoop:
.010a13	16 00		asl $00,x		asl 	EXSValueL+0,x
.010a15	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a17	3a		dec a			dec 	a
.010a18	d0 f9		bne $010a13		bne 	_Binary_SLLoop
.010a1a					_Binary_SLExit:
.010a1a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010a1b					Binary_And:
.010a1b	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010a1e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a20	35 02		and $02,x		and 	EXSValueL+2,x
.010a22	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a24	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a26	35 22		and $22,x		and 	EXSValueH+2,x
.010a28	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a2a	60		rts			rts
.010a2b					Binary_Or:
.010a2b	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010a2e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a30	15 02		ora $02,x		ora 	EXSValueL+2,x
.010a32	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a34	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a36	15 22		ora $22,x		ora 	EXSValueH+2,x
.010a38	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a3a	60		rts			rts
.010a3b					Binary_Xor:
.010a3b	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010a3e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a40	55 02		eor $02,x		eor 	EXSValueL+2,x
.010a42	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a44	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a46	55 22		eor $22,x		eor 	EXSValueH+2,x
.010a48	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a4a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010a4b					Binary_Equals:
.010a4b	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a4e	b0 0e		bcs $010a5e		bcs 	_BEString
.010a50	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010a52	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010a54	d0 4f		bne $010aa5		bne 	Compare_Fail
.010a56	b5 20		lda $20,x		lda 	EXSValueH,x
.010a58	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010a5a	d0 49		bne $010aa5		bne 	Compare_Fail
.010a5c	80 3f		bra $010a9d		bra 	Compare_Succeed
.010a5e					_BEString:
.010a5e	09 00 00	ora #$0000		ora 	#$0000
.010a61	f0 3a		beq $010a9d		beq 	Compare_Succeed
.010a63	80 40		bra $010aa5		bra 	Compare_Fail
.010a65					Binary_NotEquals:
.010a65	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a68	b0 0e		bcs $010a78		bcs 	_BNEString
.010a6a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010a6c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010a6e	d0 2d		bne $010a9d		bne 	Compare_Succeed
.010a70	b5 20		lda $20,x		lda 	EXSValueH,x
.010a72	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010a74	d0 27		bne $010a9d		bne 	Compare_Succeed
.010a76	80 2d		bra $010aa5		bra 	Compare_Fail
.010a78					_BNEString:
.010a78	09 00 00	ora #$0000		ora 	#$0000
.010a7b	d0 20		bne $010a9d		bne 	Compare_Succeed
.010a7d	80 26		bra $010aa5		bra 	Compare_Fail
.010a7f					Binary_Less:
.010a7f	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a82	b0 12		bcs $010a96		bcs 	_BLString
.010a84	38		sec			sec
.010a85	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010a87	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a89	b5 20		lda $20,x		lda 	EXSValueH,x
.010a8b	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a8d	50 03		bvc $010a92		bvc 	*+5
.010a8f	49 00 80	eor #$8000		eor 	#$8000
.010a92	30 09		bmi $010a9d		bmi 	Compare_Succeed
.010a94	80 0f		bra $010aa5		bra 	Compare_Fail
.010a96					_BLString:
.010a96	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010a99	f0 02		beq $010a9d		beq 	Compare_Succeed
.010a9b	80 08		bra $010aa5		bra 	Compare_Fail
.010a9d					Compare_Succeed:
.010a9d	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010aa0	95 00		sta $00,x		sta 	EXSValueL,x
.010aa2	95 20		sta $20,x		sta 	EXSValueH,x
.010aa4	60		rts			rts
.010aa5					Compare_Fail:
.010aa5	74 00		stz $00,x		stz 	EXSValueL,x
.010aa7	74 20		stz $20,x		stz 	EXSValueH,x
.010aa9	60		rts			rts
.010aaa					Binary_GreaterEqual:
.010aaa	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010aad	b0 12		bcs $010ac1		bcs 	_BGEString
.010aaf	38		sec			sec
.010ab0	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010ab2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ab4	b5 20		lda $20,x		lda 	EXSValueH,x
.010ab6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ab8	50 03		bvc $010abd		bvc 	*+5
.010aba	49 00 80	eor #$8000		eor 	#$8000
.010abd	10 de		bpl $010a9d		bpl 	Compare_Succeed
.010abf	80 e4		bra $010aa5		bra 	Compare_Fail
.010ac1					_BGEString:
.010ac1	09 00 00	ora #$0000		ora 	#$0000
.010ac4	10 d7		bpl $010a9d		bpl 	Compare_Succeed
.010ac6	80 dd		bra $010aa5		bra 	Compare_Fail
.010ac8					Binary_LessEqual:
.010ac8	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010acb	b0 12		bcs $010adf		bcs 	_BLEString
.010acd	18		clc			clc 									; numeric <= signed
.010ace	b5 00		lda $00,x		lda 	EXSValueL,x
.010ad0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ad2	b5 20		lda $20,x		lda 	EXSValueH,x
.010ad4	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ad6	50 03		bvc $010adb		bvc 	*+5
.010ad8	49 00 80	eor #$8000		eor 	#$8000
.010adb	30 c0		bmi $010a9d		bmi 	Compare_Succeed
.010add	80 c6		bra $010aa5		bra 	Compare_Fail
.010adf					_BLEString:
.010adf	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010ae2	d0 b9		bne $010a9d		bne 	Compare_Succeed
.010ae4	80 bf		bra $010aa5		bra 	Compare_Fail
.010ae6					Binary_Greater:
.010ae6	20 04 0b	jsr $010b04		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ae9	b0 12		bcs $010afd		bcs 	_BGString
.010aeb	18		clc			clc 									; numeric > signed
.010aec	b5 00		lda $00,x		lda 	EXSValueL,x
.010aee	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010af0	b5 20		lda $20,x		lda 	EXSValueH,x
.010af2	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010af4	50 03		bvc $010af9		bvc 	*+5
.010af6	49 00 80	eor #$8000		eor 	#$8000
.010af9	10 a2		bpl $010a9d		bpl 	Compare_Succeed
.010afb	80 a8		bra $010aa5		bra 	Compare_Fail
.010afd					_BGString:
.010afd	c9 01 00	cmp #$0001		cmp 	#$0001
.010b00	f0 9b		beq $010a9d		beq 	Compare_Succeed
.010b02	80 a1		bra $010aa5		bra 	Compare_Fail
.010b04					CompareTypeCheck:
.010b04	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010b06	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010b08	30 06		bmi $010b10		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010b0a	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010b0c	30 1c		bmi $010b2a		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010b0e	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010b0f	60		rts			rts
.010b10					_CTCFail:
.010b10	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010b13	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010b1b	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010b2a					_CTCStringCompare:
.010b2a	20 c4 05	jsr $0105c4		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010b2d	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010b2f	85 08		sta $08			sta 	DTemp1
.010b31	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010b33	85 0c		sta $0c			sta 	DTemp2
.010b35	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010b38	a8		tay			tay
.010b39	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010b3b	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010b3d	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b3f	90 02		bcc $010b43		bcc 	_CTCSmallest
.010b41	b2 0c		lda ($0c)		lda 	(DTemp2)
.010b43					_CTCSmallest:
.010b43	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010b45					_CTCCompare:
.010b45	c8		iny			iny 									; look at next character (done first, first char is size)
.010b46	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010b48	30 16		bmi $010b60		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010b4a	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010b4c	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010b4e	f0 f5		beq $010b45		beq 	_CTCCompare 					; if zero, try the next character.
.010b50	b0 07		bcs $010b59		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010b52					_CTCLess:
.010b52	c2 20		rep #$20		rep 	#$20
.010b54	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b57	80 14		bra $010b6d		bra 	_CTCExit
.010b59					_CTCGreater:
.010b59	c2 20		rep #$20		rep 	#$20
.010b5b	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010b5e	80 0d		bra $010b6d		bra 	_CTCExit
.010b60					_CTCEqualSoFar:
.010b60	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010b62	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b64	90 ec		bcc $010b52		bcc 	_CTCLess
.010b66	d0 f1		bne $010b59		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010b68	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010b6a	a9 00 00	lda #$0000		lda 	#$0000
.010b6d					_CTCExit:
.010b6d	38		sec			sec 									; return with CS indicating string comparison.
.010b6e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010b6f					Binary_Divide:
.010b6f	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010b72	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010b74	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010b76	d0 14		bne $010b8c		bne 	_BinaryDivide_Ok
.010b78	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010b7b	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010b83	20 62 79 20 7a 65 72 6f 00
.010b8c					_BinaryDivide_Ok:
.010b8c	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010b8e	64 0a		stz $0a			stz 	DTemp1+2
.010b90	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010b92	5a		phy			phy 										; save Y (bit counter)
.010b93	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010b95	10 07		bpl $010b9e		bpl 	_BinaryDivide_RightDone
.010b97	e8		inx			inx
.010b98	e8		inx			inx
.010b99	20 d4 0b	jsr $010bd4		jsr 	Binary_DivNegate
.010b9c	ca		dex			dex
.010b9d	ca		dex			dex
.010b9e					_BinaryDivide_RightDone:
.010b9e	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010ba0	10 03		bpl $010ba5		bpl 	_BinaryDivide_LeftDone
.010ba2	20 d4 0b	jsr $010bd4		jsr 	Binary_DivNegate
.010ba5					_BinaryDivide_LeftDone:
.010ba5	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010ba8					_BinaryDivide_Loop:
.010ba8	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010baa	36 20		rol $20,x		rol 	EXSValueH+0,x
.010bac	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010bae	26 0a		rol $0a			rol 	DTemp1+2
.010bb0	38		sec			sec											; calculate A-M
.010bb1	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010bb3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bb5	85 0c		sta $0c			sta 	DTemp2
.010bb7	a5 0a		lda $0a			lda 	DTemp1+2
.010bb9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bbb	90 08		bcc $010bc5		bcc 	_Binary_NoSubract 					; if A < M skip this
.010bbd	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010bbf	a5 0c		lda $0c			lda 	DTemp2
.010bc1	85 08		sta $08			sta 	DTemp1+0
.010bc3	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010bc5					_Binary_NoSubract:
.010bc5	88		dey			dey 										; do it 32 times.
.010bc6	d0 e0		bne $010ba8		bne 	_BinaryDivide_Loop
.010bc8					_BinaryDivide_Exit:
.010bc8	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010bca	29 01 00	and #$0001		and 	#1
.010bcd	f0 03		beq $010bd2		beq 	_BinaryDivide_Exit2
.010bcf	20 d4 0b	jsr $010bd4		jsr 	Binary_DivNegate
.010bd2					_BinaryDivide_Exit2:
.010bd2	7a		ply			ply 										; restore Y
.010bd3	60		rts			rts
.010bd4					Binary_DivNegate:
.010bd4	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010bd6	38		sec			sec 										; negate the value at stack X.
.010bd7	a9 00 00	lda #$0000		lda 	#$0000
.010bda	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010bdc	95 00		sta $00,x		sta 	EXSValueL+0,x
.010bde	a9 00 00	lda #$0000		lda 	#$0000
.010be1	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010be3	95 20		sta $20,x		sta 	EXSValueH+0,x
.010be5	60		rts			rts
.010be6					Binary_Modulus:
.010be6	20 6f 0b	jsr $010b6f		jsr 	Binary_Divide 						; do the divide
.010be9	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010beb	95 00		sta $00,x		sta 	EXSValueL+0,x
.010bed	a5 0a		lda $0a			lda 	DTemp1+2
.010bef	95 20		sta $20,x		sta 	EXSValueH+0,x
.010bf1	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010bf2					Binary_Multiply:
.010bf2	20 a4 05	jsr $0105a4		jsr 	CheckBothNumeric 					; check both values are numeric
.010bf5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010bf7	85 08		sta $08			sta 	DTemp1
.010bf9	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010bfb	85 0a		sta $0a			sta		DTemp1+2
.010bfd	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010bff	74 20		stz $20,x		stz 	EXSValueH+0,x
.010c01					_BinaryMultiply_Loop:
.010c01	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010c03	05 0a		ora $0a			ora 	DTemp1+2
.010c05	f0 1e		beq $010c25		beq 	_BinaryMultiply_Exit
.010c07	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010c09	29 01 00	and #$0001		and 	#1
.010c0c	f0 0d		beq $010c1b		beq 	_BinaryMultiply_NoAdd
.010c0e	18		clc			clc 										; add multiplicand to result.
.010c0f	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010c11	75 02		adc $02,x		adc 	EXSValueL+2,x
.010c13	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c15	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c17	75 22		adc $22,x		adc 	EXSValueH+2,x
.010c19	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c1b					_BinaryMultiply_NoAdd:
.010c1b	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010c1d	66 08		ror $08			ror 	DTemp1
.010c1f	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010c21	36 22		rol $22,x		rol 	EXSValueH+2,x
.010c23	80 dc		bra $010c01		bra 	_BinaryMultiply_Loop 				; go round again.
.010c25					_BinaryMultiply_Exit:
.010c25	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010c26					Function_Len:
.010c26	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010c29	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c2c	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010c2f	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010c31	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010c34	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010c37	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010c39	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c3b	60		rts				rts
.010c3c					Function_Abs:
.010c3c	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010c3f	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c42	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010c45	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010c47	30 07		bmi $010c50			bmi 	_FAbsNegative 				; negate it if negative
.010c49	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010c4b	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010c4d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c4f	60		rts				rts
.010c50					_FAbsNegative:
.010c50	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010c51	a9 00 00	lda #$0000			lda 	#0
.010c54	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010c56	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c58	a9 00 00	lda #$0000			lda 	#0
.010c5b	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010c5d	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c5f	60		rts				rts
.010c60					Function_Sgn:
.010c60	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns integer
.010c63	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get an integer
.010c66	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010c69	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010c6b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c6d	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010c6f	30 07		bmi $010c78			bmi 	_FSgnNegative 				; set to -1 if signed
.010c71	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010c73	f0 02		beq $010c77			beq 	_FSgnExit
.010c75	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010c77					_FSgnExit:
.010c77	60		rts				rts
.010c78					_FSgnNegative:
.010c78	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010c7b	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c7d	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c7f	60		rts				rts
.010c80					Function_Random:
.010c80	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010c83	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger
.010c86	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010c88	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010c8a	d0 0a		bne $010c96			bne 	_Rnd_NotZero
.010c8c	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010c8f	85 10		sta $10				sta 	DRandom
.010c91	a9 ea 00	lda #$00ea			lda 	#$EA
.010c94	85 12		sta $12				sta 	DRandom+2
.010c96					_Rnd_NotZero:
.010c96	20 a1 0c	jsr $010ca1			jsr 	_Rnd_Process 				; call randomiser twice
.010c99	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c9b	20 a1 0c	jsr $010ca1			jsr 	_Rnd_Process
.010c9e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ca0	60		rts				rts
.010ca1					_Rnd_Process:
.010ca1	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010ca3	26 12		rol $12				rol 	DRandom+2
.010ca5	90 0e		bcc $010cb5			bcc 	_Rnd_Exit
.010ca7	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010ca9	49 54 d4	eor #$d454			eor 	#$D454
.010cac	85 10		sta $10				sta 	DRandom
.010cae	a5 12		lda $12				lda 	DRandom+2
.010cb0	49 d5 55	eor #$55d5			eor 	#$55D5
.010cb3	85 12		sta $12				sta 	DRandom+2
.010cb5					_Rnd_Exit:
.010cb5	a5 10		lda $10				lda 	DRandom
.010cb7	45 12		eor $12				eor 	DRandom+2
.010cb9	60		rts				rts
.010cba					Function_Chr:
.010cba	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string
.010cbd	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get integer
.010cc0	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010cc3	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010cc6	d0 12		bne $010cda			bne 	_FCHBad
.010cc8	48		pha				pha  								; save char # on stack
.010cc9	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010ccc	20 0c 06	jsr $01060c			jsr 	StringTempAllocate
.010ccf	68		pla				pla 								; restore character number
.010cd0	20 38 06	jsr $010638			jsr 	StringWriteCharacter 		; write it out.
.010cd3	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010cd5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010cd7	74 20		stz $20,x			stz 	EXSValueH+0,x
.010cd9	60		rts				rts
.010cda					_FCHBad:
.010cda	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010cdd	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010ce5	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010cf2					Function_Asc:
.010cf2	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010cf5	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get string
.010cf8	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010cfb	a8		tay				tay 								; string address in Y
.010cfc	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010cff	29 ff 00	and #$00ff			and 	#$00FF
.010d02	f0 0b		beq $010d0f			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010d04	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010d07	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010d0a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d0c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d0e	60		rts				rts
.010d0f					_FASBad:
.010d0f	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010d12	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010d1a	65 20 66 6f 72 20 61 73 63 28 29 00
.010d26					Function_SPC:
.010d26	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string
.010d29	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010d2c	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010d2f	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d32	d0 17		bne $010d4b			bne 	_FSPBad
.010d34	48		pha				pha 								; save length
.010d35	20 0c 06	jsr $01060c			jsr 	StringTempAllocate 			; allocate character space
.010d38	7a		ply				ply 								; get count in Y
.010d39	f0 09		beq $010d44			beq 	_FSPExit 					; if zero, just empty string
.010d3b					_FSPCopy:
.010d3b	a9 20 00	lda #$0020			lda 	#" "						; space character
.010d3e	20 38 06	jsr $010638			jsr 	StringWriteCharacter 		; write it out.
.010d41	88		dey				dey
.010d42	d0 f7		bne $010d3b			bne 	_FSPCopy	 				; do it Y times
.010d44					_FSPExit:
.010d44	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010d46	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d48	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d4a	60		rts				rts
.010d4b					_FSPBad:
.010d4b	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010d4e	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010d56	65 20 66 6f 72 20 73 70 63 28 29 00
.010d62					Function_Inkey:
.010d62	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010d65	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger
.010d68	20 d4 1b	jsr $011bd4			jsr 	HWInkey 					; read current key
.010d6b	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d6d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d6f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010d70					Function_LEFT:
.010d70	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.010d73	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d76	48		pha				pha 								; save string on stack.
.010d77	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; get count
.010d7a	20 03 03	jsr $010303			jsr 	EvaluateNextInteger
.010d7d	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d80	d0 6d		bne $010def			bne 	FNStringParameter
.010d82	85 08		sta $08				sta 	DTemp1 						; save count.
.010d84	20 92 05	jsr $010592			jsr 	ExpectRightBracket
.010d87	7a		ply				ply 								; Y points to string.
.010d88	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010d8b	29 ff 00	and #$00ff			and 	#$00FF
.010d8e	f0 52		beq $010de2			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010d90	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010d92	f0 55		beq $010de9			beq 	FNStringY 					; return string in Y if current len = required len.
.010d94	90 53		bcc $010de9			bcc 	FNStringY 					; if current < required return whole thing.
.010d96	c8		iny				iny 								; take from here - start of string
.010d97	80 33		bra $010dcc			bra 	FNDTemp1Characters
.010d99					Function_RIGHT:
.010d99	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.010d9c	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d9f	48		pha				pha 								; save string on stack.
.010da0	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; get count
.010da3	20 03 03	jsr $010303			jsr 	EvaluateNextInteger
.010da6	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010da9	d0 44		bne $010def			bne 	FNStringParameter
.010dab	85 08		sta $08				sta 	DTemp1 						; save count.
.010dad	20 92 05	jsr $010592			jsr 	ExpectRightBracket
.010db0	7a		ply				ply 								; Y points to string.
.010db1	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010db4	29 ff 00	and #$00ff			and 	#$00FF
.010db7	f0 29		beq $010de2			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010db9	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010dbb	f0 2c		beq $010de9			beq 	FNStringY 					; return string in Y if current len = required len.
.010dbd	90 2a		bcc $010de9			bcc 	FNStringY 					; if current < required return whole thing.
.010dbf	38		sec				sec 								; current-required is the number to skip
.010dc0	e5 08		sbc $08				sbc 	DTemp1
.010dc2	85 0a		sta $0a				sta 	DTemp1+2
.010dc4	98		tya				tya
.010dc5	18		clc				clc
.010dc6	65 0a		adc $0a				adc 	DTemp1+2
.010dc8	a8		tay				tay
.010dc9	c8		iny				iny 								; +1 for the count.
.010dca	80 00		bra $010dcc			bra 	FNDTemp1Characters
.010dcc					FNDTemp1Characters:
.010dcc	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010dce	f0 12		beq $010de2			beq 	FNStringEmpty 				; if zero, return empty string.
.010dd0	20 0c 06	jsr $01060c			jsr 	StringTempAllocate
.010dd3	48		pha				pha 								; save the address
.010dd4					_FND1Loop:
.010dd4	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010dd7	20 38 06	jsr $010638			jsr 	StringWriteCharacter
.010dda	c8		iny				iny
.010ddb	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ddd	d0 f5		bne $010dd4			bne 	_FND1Loop
.010ddf	7a		ply				ply 								; string address in Y
.010de0	80 07		bra $010de9			bra 	FNStringY
.010de2					FNStringEmpty:
.010de2	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010de5	20 0c 06	jsr $01060c			jsr 	StringTempAllocate 			; put address of it in Y
.010de8	a8		tay				tay
.010de9					FNStringY:
.010de9	98		tya				tya
.010dea	95 00		sta $00,x			sta 	EXSValueL+0,x
.010dec	74 22		stz $22,x			stz 	EXSValueH+2,x
.010dee	60		rts				rts
.010def					FNStringParameter:
.010def	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010df2	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010dfa	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010e07					Function_MID:
.010e07	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.010e0a	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e0d	48		pha				pha 								; save string on stack.
.010e0e	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; get offset (n)
.010e11	20 03 03	jsr $010303			jsr 	EvaluateNextInteger
.010e14	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e17	d0 d6		bne $010def			bne 	FNStringParameter
.010e19	c9 00 00	cmp #$0000			cmp 	#0
.010e1c	f0 d1		beq $010def			beq 	FNStringParameter 			; or zero
.010e1e	48		pha				pha 								; save start position on stack.
.010e1f	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010e22	85 08		sta $08				sta 	DTemp1
.010e24	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010e26	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010e29	d0 0e		bne $010e39			bne 	_FMINoThird
.010e2b	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010e2d	e6 06		inc $06				inc 	DCodePtr
.010e2f	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010e32	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e35	d0 b8		bne $010def			bne 	FNStringParameter
.010e37	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010e39					_FMINoThird:
.010e39	20 92 05	jsr $010592			jsr 	ExpectRightBracket
.010e3c	68		pla				pla 								; get offset position
.010e3d	85 0c		sta $0c				sta 	DTemp2
.010e3f	7a		ply				ply 								; get address of string in Y
.010e40	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010e43	29 ff 00	and #$00ff			and 	#$00FF
.010e46	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010e48	90 98		bcc $010de2			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010e4a	38		sec				sec 								; calculate number of characters left after
.010e4b	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010e4d	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010e4e	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010e50	b0 02		bcs $010e54			bcs 	_FMISufficient
.010e52	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010e54					_FMISufficient:
.010e54	98		tya				tya 								; get address
.010e55	18		clc				clc
.010e56	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010e58	a8		tay				tay 								; put in Y
.010e59	82 70 ff	brl $010dcc			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010e5c					Function_Peek:
.010e5c	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010e5f	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e62	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010e65	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e67	84 0a		sty $0a				sty 	DTemp1+2
.010e69	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e6c	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e6e	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010e71	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e73	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e75	60		rts				rts
.010e76					Function_Deek:
.010e76	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010e79	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e7c	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010e7f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e81	84 0a		sty $0a				sty 	DTemp1+2
.010e83	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e86	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e88	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e8a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e8c	60		rts				rts
.010e8d					Function_Leek:
.010e8d	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010e90	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e93	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check )
.010e96	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e98	84 0a		sty $0a				sty 	DTemp1+2
.010e9a	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e9d	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e9f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ea1	c8		iny				iny
.010ea2	c8		iny				iny
.010ea3	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ea5	95 20		sta $20,x			sta 	EXSValueH+0,x
.010ea7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010ea8					Function_VAL:
.010ea8	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns an integer
.010eab	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; get the value you are absoluting
.010eae	48		pha				pha 								; put string address on stack.
.010eaf	20 bf 0e	jsr $010ebf			jsr 	VALGetBase 					; process , base (shared with STR$())
.010eb2	7a		ply				ply 								; get string address back
.010eb3	da		phx				phx 								; save X on stack
.010eb4	aa		tax				tax 								; base in X
.010eb5	98		tya				tya 								; address in A
.010eb6	20 f9 0e	jsr $010ef9			jsr 	StringToInteger
.010eb9	fa		plx				plx 								; restore X
.010eba	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ebc	94 20		sty $20,x			sty 	EXSValueH+0,x
.010ebe	60		rts				rts
.010ebf					VALGetBase:
.010ebf	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010ec1	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010ec4	f0 07		beq $010ecd			beq 	_VGBAlternate
.010ec6	20 92 05	jsr $010592			jsr 	ExpectRightBracket			; expect ), and return 10.
.010ec9	a9 0a 00	lda #$000a			lda 	#10
.010ecc	60		rts				rts
.010ecd					_VGBAlternate:
.010ecd	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; skip comma.
.010ed0	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get base
.010ed3	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010ed6	d0 0e		bne $010ee6			bne 	_VGBBadBase
.010ed8	c9 02 00	cmp #$0002			cmp 	#2
.010edb	90 09		bcc $010ee6			bcc 	_VGBBadBase
.010edd	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010ee0	b0 04		bcs $010ee6			bcs 	_VGBBadBase
.010ee2	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; get right bracket and return.
.010ee5	60		rts				rts
.010ee6					_VGBBadBase:
.010ee6	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010ee9	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010ef1	65 72 20 42 61 73 65 00
.010ef9					StringToInteger:
.010ef9	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010efb	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010efd	29 ff 00	and #$00ff			and 	#$00FF
.010f00	85 26		sta $26				sta 	DTemp3+2
.010f02	f0 6e		beq $010f72			beq 	_STIError 					; if length zero it's bad.
.010f04	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010f06	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010f08	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010f0a	64 0a		stz $0a				stz 	DTemp1+2
.010f0c	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010f0e	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010f11	48		pha				pha 								; push on stack
.010f12	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010f15	d0 06		bne $010f1d			bne 	_STILoop
.010f17	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010f19	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010f1b	f0 55		beq $010f72			beq 	_STIError 					; if only - then error.
.010f1d					_STILoop:
.010f1d	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010f1f	20 91 0f	jsr $010f91			jsr 	MultiplyTemp1ByA
.010f22	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010f24	29 ff 00	and #$00ff			and 	#$00FF
.010f27	20 82 0f	jsr $010f82			jsr 	ConvertUpperCase	 		; make U/C
.010f2a	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010f2d	90 43		bcc $010f72			bcc 	_STIError
.010f2f	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010f32	90 0e		bcc $010f42			bcc 	_STIOkay1
.010f34	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010f37	90 39		bcc $010f72			bcc 	_STIError
.010f39	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010f3c	b0 34		bcs $010f72			bcs 	_STIError
.010f3e	18		clc				clc 								; shift to correct range.
.010f3f	69 09 00	adc #$0009			adc 	#9
.010f42					_STIOkay1:
.010f42	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010f45	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010f47	b0 29		bcs $010f72			bcs 	_STIError
.010f49	18		clc				clc 								; add A to DTemp1
.010f4a	65 08		adc $08				adc 	DTemp1
.010f4c	85 08		sta $08				sta 	DTemp1
.010f4e	90 02		bcc $010f52			bcc 	_STINoCarry
.010f50	e6 0a		inc $0a				inc 	DTemp1+2
.010f52					_STINoCarry:
.010f52	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010f54	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010f56	d0 c5		bne $010f1d			bne 	_STILoop 					; loop back.
.010f58	68		pla				pla 								; get optional minus bac
.010f59	c9 2d 00	cmp #$002d			cmp 	#"-"
.010f5c	d0 0f		bne $010f6d			bne 	_STINotNegative 			; handle the negative character
.010f5e	38		sec				sec 								; negate DTemp1
.010f5f	a9 00 00	lda #$0000			lda 	#0
.010f62	e5 08		sbc $08				sbc 	DTemp1
.010f64	85 08		sta $08				sta 	DTemp1
.010f66	a9 00 00	lda #$0000			lda 	#0
.010f69	e5 0a		sbc $0a				sbc 	DTemp1+2
.010f6b	85 0a		sta $0a				sta 	DTemp1+2
.010f6d					_STINotNegative:
.010f6d	a5 08		lda $08				lda 	DTemp1 						; get the result
.010f6f	a4 0a		ldy $0a				ldy 	DTemp1+2
.010f71	60		rts				rts
.010f72					_STIError:
.010f72	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>010f75	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010f7d	74 61 6e 74 00
.010f82					ConvertUpperCase:
.010f82	c9 61 00	cmp #$0061			cmp 	#'a'
.010f85	90 09		bcc $010f90			bcc 	_CUCExit
.010f87	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010f8a	b0 04		bcs $010f90			bcs 	_CUCExit
.010f8c	38		sec				sec
.010f8d	e9 20 00	sbc #$0020			sbc 	#32
.010f90					_CUCExit:
.010f90	60		rts				rts
.010f91					MultiplyTemp1ByA:
.010f91					_MTGeneral:
.010f91	da		phx				phx
.010f92	aa		tax				tax 								; multiplier in X
.010f93	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010f95	85 0c		sta $0c				sta 	DTemp2
.010f97	a5 0a		lda $0a				lda 	DTemp1+2
.010f99	85 0e		sta $0e				sta 	DTemp2+2
.010f9b	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010f9d	64 0a		stz $0a				stz 	DTemp1+2
.010f9f	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010fa2					_MTLoop:
.010fa2	8a		txa				txa 								; shift X right into C
.010fa3	4a		lsr a				lsr 	a
.010fa4	aa		tax				tax
.010fa5	90 10		bcc $010fb7			bcc 	_MTNoAdd
.010fa7	18		clc				clc
.010fa8	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010faa	65 0c		adc $0c				adc 	DTemp2
.010fac	85 08		sta $08				sta 	DTemp1
.010fae	a5 0a		lda $0a				lda 	DTemp1+2
.010fb0	65 0e		adc $0e				adc 	DTemp2+2
.010fb2	85 0a		sta $0a				sta 	DTemp1+2
.010fb4	90 01		bcc $010fb7			bcc 	_MTNoAdd
.010fb6	c8		iny				iny
.010fb7					_MTNoAdd:
.010fb7	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010fb9	26 0e		rol $0e				rol 	DTemp2+2
.010fbb	90 01		bcc $010fbe			bcc 	_MTNoOverflow
.010fbd	c8		iny				iny
.010fbe					_MTNoOverflow:
.010fbe	8a		txa				txa 								; until multiplier is zero.
.010fbf	d0 e1		bne $010fa2			bne 	_MTLoop
.010fc1	98		tya				tya
.010fc2	18		clc				clc
.010fc3	69 ff ff	adc #$ffff			adc 	#$FFFF
.010fc6	fa		plx				plx 								; restore X
.010fc7	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010fc8					Function_Str:
.010fc8	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.010fcb	20 03 03	jsr $010303			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010fce	48		pha				pha 								; save YA on the stack
.010fcf	5a		phy				phy
.010fd0	20 bf 0e	jsr $010ebf			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fd3	85 14		sta $14				sta 	DSignCount
.010fd5	7a		ply				ply 								; YA is the number
.010fd6	68		pla				pla
.010fd7	da		phx				phx
.010fd8	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010fda	20 e3 0f	jsr $010fe3			jsr 	ConvertToString 			; convert it to a string.
.010fdd	fa		plx				plx 								; restore X
.010fde	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010fe0	74 20		stz $20,x			stz 	EXSValueH+0,x
.010fe2	60		rts				rts
.010fe3					ConvertToString:
.010fe3	48		pha				pha
.010fe4	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010fe7	20 0c 06	jsr $01060c			jsr 	StringTempAllocate 			; allocate space for return string.
.010fea	68		pla				pla
.010feb					ConvertToStringAlreadyAllocated:
.010feb	da		phx				phx 								; save X (base)
.010fec	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010fee	84 26		sty $26				sty 	DTemp3+2
.010ff0	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010ff2	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010ff4	10 15		bpl $01100b			bpl 	_CTSNotNegative
.010ff6	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010ff9	20 75 10	jsr $011075			jsr 	CTSOutputA
.010ffc	38		sec				sec 								; negate DTemp3 which is the number
.010ffd	a9 00 00	lda #$0000			lda 	#0
.011000	e5 24		sbc $24				sbc 	DTemp3
.011002	85 24		sta $24				sta 	DTemp3
.011004	a9 00 00	lda #$0000			lda 	#0
.011007	e5 26		sbc $26				sbc 	DTemp3+2
.011009	85 26		sta $26				sta 	DTemp3+2
.01100b					_CTSNotNegative:
.01100b	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.01100e	48		pha				pha
.01100f	a9 00 00	lda #$0000			lda 	#0
.011012	48		pha				pha
.011013	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011015	85 08		sta $08				sta 	DTemp1
.011017	64 0a		stz $0a				stz 	DTemp1+2
.011019					_CTSMultiplySubtractor:
.011019	38		sec				sec 								; check number vs subtractor
.01101a	a5 24		lda $24				lda 	DTemp3
.01101c	e5 08		sbc $08				sbc 	DTemp1
.01101e	a5 26		lda $26				lda 	DTemp3+2
.011020	e5 0a		sbc $0a				sbc 	DTemp1+2
.011022	90 0f		bcc $011033			bcc		_CTSScaledUp 				; if >= then scaled up.
.011024	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011026	48		pha				pha
.011027	a5 0a		lda $0a				lda 	DTemp1+2
.011029	48		pha				pha
.01102a	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01102c	20 91 0f	jsr $010f91			jsr 	MultiplyTemp1ByA
.01102f	b0 02		bcs $011033			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011031	80 e6		bra $011019			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011033					_CTSScaledUp:
.011033	7a		ply				ply 								; YA contains the previous divider.
.011034	68		pla				pla
.011035	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011038	d0 05		bne $01103f			bne 	_CTSHasDigit
.01103a	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01103d	f0 20		beq $01105f			beq 	_CTSExit
.01103f					_CTSHasDigit:
.01103f	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011041	84 0e		sty $0e				sty 	DTemp2+2
.011043	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011046					_CTSSubLoop:
.011046	38		sec				sec 								; subtract subtractor from number
.011047	a5 24		lda $24				lda 	DTemp3
.011049	e5 0c		sbc $0c				sbc 	DTemp2
.01104b	a8		tay				tay 								; intermediate in Y
.01104c	a5 26		lda $26				lda 	DTemp3+2
.01104e	e5 0e		sbc $0e				sbc 	DTemp2+2
.011050	90 07		bcc $011059			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011052	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011054	84 24		sty $24				sty 	DTemp3
.011056	e8		inx				inx 								; one more subtraction
.011057	80 ed		bra $011046			bra 	_CTSSubLoop 				; try it again.
.011059					_CTSFinishedSubtracting:
.011059	8a		txa				txa 								; convert to ASCII.
.01105a	20 68 10	jsr $011068			jsr 	CTSOutputHexDigit 			; write that out.
.01105d	80 d4		bra $011033			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.01105f					_CTSExit:
.01105f	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011061	20 68 10	jsr $011068			jsr 	CTSOutputHexDigit
.011064	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011066	fa		plx				plx 								; restore X.
.011067	60		rts				rts
.011068					CTSOutputHexDigit:
.011068	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01106b	90 04		bcc $011071			bcc 	_CTSNotLetter
.01106d	18		clc				clc
.01106e	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011071					_CTSNotLetter:
.011071	18		clc				clc
.011072	69 30 00	adc #$0030			adc 	#48
.011075					CTSOutputA:
.011075	5a		phy				phy 								; save Y, set Y to current pointer
.011076	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011078	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01107b	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01107d	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.01107f	1a		inc a				inc 	a
.011080	92 18		sta ($18)			sta 	(DStartTempString)
.011082	c2 20		rep #$20			rep 	#$20
.011084	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011086	7a		ply				ply 								; restore Y and exit.
.011087	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011088					Function_INSTR:
.011088	20 c4 05	jsr $0105c4			jsr 	ResetTypeInteger 			; returns a integer
.01108b	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; evaluate a string.
.01108e	48		pha				pha 								; save string to search
.01108f	20 9b 05	jsr $01059b			jsr 	ExpectComma
.011092	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; string to search for
.011095	20 92 05	jsr $010592			jsr 	ExpectRightBracket
.011098	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.01109a	68		pla				pla
.01109b	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.01109d	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.01109f	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0110a1	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0110a3	38		sec				sec
.0110a4	b2 0c		lda ($0c)			lda 	(DTemp2)
.0110a6	f2 08		sbc ($08)			sbc		(DTemp1)
.0110a8	c2 20		rep #$20			rep 	#$20
.0110aa	90 2c		bcc $0110d8			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0110ac	29 ff 00	and #$00ff			and 	#$00FF
.0110af	1a		inc a				inc 	a
.0110b0	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0110b2	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0110b4	29 ff 00	and #$00ff			and 	#$00FF
.0110b7	f0 22		beq $0110db			beq 	_FINSError
.0110b9					_FINSLoop:
.0110b9	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0110bb	1a		inc a				inc 	a
.0110bc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0110be	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0110c0	29 ff 00	and #$00ff			and 	#$00FF
.0110c3	a8		tay				tay									; start comparing at index 1.
.0110c4					_FINSCompare:
.0110c4	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0110c6	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0110c8	29 ff 00	and #$00ff			and 	#$00FF
.0110cb	d0 05		bne $0110d2			bne 	_FINSNext
.0110cd	88		dey				dey
.0110ce	d0 f4		bne $0110c4			bne 	_FINSCompare
.0110d0	80 08		bra $0110da			bra 	_FINSExit
.0110d2					_FINSNext:
.0110d2	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0110d4	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0110d6	d0 e1		bne $0110b9			bne 	_FINSLoop
.0110d8					_FINSFail:
.0110d8	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0110da					_FINSExit:
.0110da	60		rts				rts
.0110db					_FINSError:
.0110db	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0110de	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0110e6	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0110ef					Function_UPPER:
.0110ef	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.0110f2	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; evaluate a string.
.0110f5	48		pha				pha
.0110f6	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; close call.
.0110f9	20 0c 06	jsr $01060c			jsr		StringTempAllocate 			; allocate memory for it
.0110fc	68		pla				pla
.0110fd	20 46 06	jsr $010646			jsr 	StringCreateCopy 			; create a copy of it.
.011100	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011102	95 00		sta $00,x			sta 	EXSValueL+0,x
.011104	a8		tay				tay 								; address in Y
.011105	74 20		stz $20,x			stz 	EXSValueH+0,x
.011107	da		phx				phx 								; save X
.011108	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01110a	29 ff 00	and #$00ff			and 	#$00FF
.01110d	f0 20		beq $01112f			beq 	_FUPExit
.01110f	aa		tax				tax 								; put in X
.011110					_FUPLoop:
.011110	c8		iny				iny 								; increment and load character
.011111	b9 00 00	lda $0000,y			lda 	$0000,y
.011114	29 ff 00	and #$00ff			and 	#$00FF
.011117	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.01111a	90 10		bcc $01112c			bcc 	_FUPNoChange
.01111c	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01111f	b0 0b		bcs $01112c			bcs 	_FUPNoChange
.011121	38		sec				sec 								; shift case
.011122	e9 20 00	sbc #$0020			sbc 	#32
.011125	e2 20		sep #$20			sep 	#$20 						; write back
.011127	99 00 00	sta $0000,y			sta 	$0000,y
.01112a	c2 20		rep #$20			rep 	#$20
.01112c					_FUPNoChange:
.01112c	ca		dex				dex 								; do X times
.01112d	d0 e1		bne $011110			bne 	_FUPLoop
.01112f					_FUPExit:
.01112f	fa		plx				plx 								; restore X
.011130	60		rts				rts
.011131					Function_LOWER:
.011131	20 cc 05	jsr $0105cc			jsr 	ResetTypeString 			; returns a string.
.011134	20 22 03	jsr $010322			jsr 	EvaluateNextString 			; evaluate a string.
.011137	48		pha				pha
.011138	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; close call.
.01113b	20 0c 06	jsr $01060c			jsr		StringTempAllocate 			; allocate memory for it
.01113e	68		pla				pla
.01113f	20 46 06	jsr $010646			jsr 	StringCreateCopy 			; create a copy of it.
.011142	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011144	95 00		sta $00,x			sta 	EXSValueL+0,x
.011146	a8		tay				tay 								; address in Y
.011147	74 20		stz $20,x			stz 	EXSValueH+0,x
.011149	da		phx				phx 								; save X
.01114a	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01114c	29 ff 00	and #$00ff			and 	#$00FF
.01114f	f0 20		beq $011171			beq 	_FLOExit
.011151	aa		tax				tax 								; put in X
.011152					_FLOLoop:
.011152	c8		iny				iny 								; increment and load character
.011153	b9 00 00	lda $0000,y			lda 	$0000,y
.011156	29 ff 00	and #$00ff			and 	#$00FF
.011159	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01115c	90 10		bcc $01116e			bcc 	_FLONoChange
.01115e	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011161	b0 0b		bcs $01116e			bcs 	_FLONoChange
.011163	18		clc				clc 								; shift case
.011164	69 20 00	adc #$0020			adc 	#32
.011167	e2 20		sep #$20			sep 	#$20 						; write back
.011169	99 00 00	sta $0000,y			sta 	$0000,y
.01116c	c2 20		rep #$20			rep 	#$20
.01116e					_FLONoChange:
.01116e	ca		dex				dex 								; do X times
.01116f	d0 e1		bne $011152			bne 	_FLOLoop
.011171					_FLOExit:
.011171	fa		plx				plx 								; restore X
.011172	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011173					Function_Let:
.011173	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011175	48		pha				pha  								; save on stack for later.
.011176	20 69 03	jsr $010369			jsr 	VariableFind 				; find the variable
.011179	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01117b	b0 1c		bcs $011199			bcs 	_FLetFound 					; skip if found.
.01117d	68		pla				pla 								; get and push the first token again.
.01117e	48		pha				pha
.01117f	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011182	d0 69		bne $0111ed			bne 	_FLError					; arrays, so this causes an error.
.011184	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011186	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011189	20 13 04	jsr $010413			jsr 	VariableCreate 				; create it.
.01118c	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01118e					_FLSkipToken:
.01118e	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011190	e6 06		inc $06				inc 	DCodePtr
.011192	e6 06		inc $06				inc 	DCodePtr
.011194	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011197	d0 f5		bne $01118e			bne 	_FLSkipToken
.011199					_FLetFound:
.011199	68		pla				pla 								; get and save the first token.
.01119a	48		pha				pha
.01119b	a8		tay				tay 								; put it in Y
.01119c	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.01119f	f0 07		beq $0111a8			beq 	_FLetNotArray
.0111a1	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0111a3	20 e0 03	jsr $0103e0			jsr 	VariableSubscript			; index calculation
.0111a6	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0111a8					_FLetNotArray:
.0111a8	7a		ply				ply 								; get the first token into Y
.0111a9	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0111ab	48		pha				pha
.0111ac	5a		phy				phy 								; save the first token on the stack.
.0111ad	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0111b0	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0111b2	d0 2c		bne $0111e0			bne 	_FLetMissingEquals
.0111b4	e6 06		inc $06				inc 	DCodePtr
.0111b6	e6 06		inc $06				inc 	DCodePtr
.0111b8	68		pla				pla 								; restore the first token.
.0111b9	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0111bc	d0 0f		bne $0111cd			bne 	_FLetString 				; skip if string.
.0111be	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; get an integer
.0111c1	7a		ply				ply 								; get address in Y
.0111c2	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0111c4	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0111c7	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0111c9	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0111cc	60		rts				rts
.0111cd					_FLetString:
.0111cd	20 09 03	jsr $010309			jsr 	EvaluateString 				; get a string.
.0111d0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0111d2	20 67 06	jsr $010667			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0111d5	7a		ply				ply 								; get address
.0111d6	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0111d9	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.0111dc	99 02 00	sta $0002,y			sta 	$0002,y
.0111df	60		rts				rts
.0111e0					_FLetMissingEquals:
.0111e0	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0111e3	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0111eb	3d 00
.0111ed					_FLError:
.0111ed	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0111f0	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0111f8	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.011200					Command_List:
.011200	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011203	20 0c 06	jsr $01060c		jsr 	StringTempAllocate
.011206	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011208	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01120a	64 2e		stz $2e			stz 	DIndent2
.01120c	64 32		stz $32			stz 	DTemp4+0 						; low number
.01120e	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011211	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011213	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011215	f0 3b		beq $011252		beq 	_CLIList
.011217	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01121a	f0 36		beq $011252		beq 	_CLIList
.01121c	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01121f	f0 13		beq $011234		beq 	_CLIComma
.011221	20 03 03	jsr $010303		jsr 	EvaluateNextInteger 			; yes, first number
.011224	c0 00 00	cpy #$0000		cpy 	#0
.011227	d0 21		bne $01124a		bne 	_CLIError
.011229	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01122b	85 34		sta $34			sta 	DTemp4+2
.01122d	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01122f	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011232	d0 1e		bne $011252		bne 	_CLIList
.011234					_CLIComma:
.011234	20 9b 05	jsr $01059b		jsr 	ExpectComma 					; skip comma
.011237	b2 06		lda ($06)		lda 	(DCodePtr)
.011239	f0 12		beq $01124d		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.01123b	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01123e	f0 0d		beq $01124d		beq 	_CLIToEnd
.011240	20 03 03	jsr $010303		jsr 	EvaluateNextInteger 			; get end line.
.011243	85 34		sta $34			sta 	DTemp4+2
.011245	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011248	f0 08		beq $011252		beq 	_CLIList
.01124a					_CLIError:
.01124a	82 1b f3	brl $010568		brl 	SyntaxError
.01124d					_CLIToEnd:
.01124d	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011250	85 34		sta $34			sta 	DTemp4+2
.011252					_CLIList:
.011252	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011255	18		clc			clc
.011256	65 02		adc $02			adc 	DBaseAddress
.011258	a8		tay			tay 									; put in Y
.011259					_CLINextLine:
.011259	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.01125c	f0 29		beq $011287		beq 	_CLIExit
.01125e	20 ef 13	jsr $0113ef		jsr 	ScanIndent  					; scan for formatting.
.011261	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011264	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011266	90 14		bcc $01127c		bcc 	_CLIFollowLink
.011268	c5 34		cmp $34			cmp 	DTemp4+2
.01126a	f0 02		beq $01126e		beq 	_CLIShowLine
.01126c	b0 0e		bcs $01127c		bcs 	_CLIFollowLink
.01126e					_CLIShowLine:
.01126e	a5 30		lda $30			lda 	DListBuffer
.011270	20 8a 12	jsr $01128a		jsr 	Detokenise 						; detokenise it
.011273	5a		phy			phy
.011274	a8		tay			tay 									; print buffer out
.011275	20 f2 05	jsr $0105f2		jsr 	PrintBasicString
.011278	20 b3 1b	jsr $011bb3		jsr 	HWNewLine
.01127b	7a		ply			ply 									; get address
.01127c					_CLIFollowLink:
.01127c	98		tya			tya 									; follow link
.01127d	18		clc			clc
.01127e	79 00 00	adc $0000,y		adc 	$0000,y
.011281	a8		tay			tay
.011282	20 cf 1b	jsr $011bcf		jsr 	HWCheckBreak 					; break key pressed.
.011285	f0 d2		beq $011259		beq 	_CLINextLine
.011287					_CLIExit:
.011287	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.011289	60		rts			rts
.01128a					Detokenise:
.01128a	48		pha			pha
.01128b	da		phx			phx
.01128c	5a		phy			phy
.01128d	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.01128f	1a		inc a			inc 	a
.011290	85 1a		sta $1a			sta 	DCurrentTempString
.011292	64 1c		stz $1c			stz		DConstantShift
.011294	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011297	92 18		sta ($18)		sta 	(DStartTempString)
.011299	5a		phy			phy 									; save Y
.01129a	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01129d	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0112a0	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0112a3	20 eb 0f	jsr $010feb		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0112a6	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0112a8	c5 2e		cmp $2e			cmp 	DIndent2
.0112aa	90 02		bcc $0112ae		bcc 	_DTKSmaller
.0112ac	a5 2e		lda $2e			lda 	DIndent2
.0112ae					_DTKSmaller:
.0112ae	0a		asl a			asl 	a
.0112af	69 06 00	adc #$0006		adc 	#6
.0112b2	85 08		sta $08			sta 	DTemp1
.0112b4					_DTKPadLineNo:
.0112b4	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0112b7	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0112ba	b2 18		lda ($18)		lda 	(DStartTempString)
.0112bc	29 ff 00	and #$00ff		and 	#$00FF
.0112bf	c5 08		cmp $08			cmp 	DTemp1
.0112c1	d0 f1		bne $0112b4		bne 	_DTKPadLineNo
.0112c3	68		pla			pla 									; get pointer
.0112c4	18		clc			clc 									; point to start of line
.0112c5	69 04 00	adc #$0004		adc 	#4
.0112c8	a8		tay			tay 									; put back in Y.
.0112c9					_DTKMainLoop:
.0112c9	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.0112cc	d0 04		bne $0112d2		bne 	_DTKNotZero 					; if zero, return.
.0112ce	7a		ply			ply
.0112cf	fa		plx			plx
.0112d0	68		pla			pla
.0112d1	60		rts			rts
.0112d2					_DTKNotZero:
.0112d2	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.0112d5	b0 1c		bcs $0112f3		bcs 	_DTKNotString
.0112d7	5a		phy			phy										; save token address on stack.
.0112d8	c8		iny			iny 									; skip first token
.0112d9	c8		iny			iny
.0112da	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0112dd	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0112e0	98		tya			tya 									; copy the string out.
.0112e1	20 46 06	jsr $010646		jsr 	StringCreateCopy
.0112e4	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0112e7	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0112ea	68		pla			pla 									; get token, which is its own offset
.0112eb	a8		tay			tay
.0112ec	18		clc			clc
.0112ed	79 00 00	adc $0000,y		adc 	$0000,y
.0112f0	a8		tay			tay
.0112f1	80 d6		bra $0112c9		bra 	_DTKMainLoop
.0112f3					_DTKNotString:
.0112f3	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0112f6	b0 09		bcs $011301		bcs 	_DTKNotShift
.0112f8	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0112fb	85 1c		sta $1c			sta 	DConstantShift
.0112fd	c8		iny			iny 									; skip token.
.0112fe	c8		iny			iny
.0112ff	80 c8		bra $0112c9		bra 	_DTKMainLoop
.011301					_DTKNotShift:
.011301	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011304	b0 07		bcs $01130d		bcs 	_DTKNotKeyword
.011306	c8		iny			iny 									; skip over token
.011307	c8		iny			iny
.011308	20 87 13	jsr $011387		jsr 	_DTKDecodeKeyword 				; decode it.
.01130b	80 bc		bra $0112c9		bra 	_DTKMainLoop
.01130d					_DTKNotKeyword:
.01130d	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011310	b0 18		bcs $01132a		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011312	5a		phy			phy 									; save pointer
.011313	38		sec			sec  									; shift it in the range 0-32767
.011314	e9 00 40	sbc #$4000		sbc 	#$4000
.011317	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011318	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01131a	6a		ror a			ror 	a 								; rotate that into the constant value
.01131b	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01131d	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011320	20 eb 0f	jsr $010feb		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011323	64 1c		stz $1c			stz 	DConstantShift
.011325	7a		ply			ply 									; restore pointer
.011326	c8		iny			iny 									; skip token.
.011327	c8		iny			iny
.011328	80 9f		bra $0112c9		bra 	_DTKMainLoop
.01132a					_DTKIdentifier:
.01132a	48		pha			pha 									; save token for typing at end
.01132b					_DTKILoop:
.01132b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01132e	20 57 13	jsr $011357		jsr 	_DTKIDecodeToken 				; decode it.
.011331	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011334	c8		iny			iny 									; skip it
.011335	c8		iny			iny
.011336	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011339	d0 f0		bne $01132b		bne 	_DTKILoop
.01133b	68		pla			pla 									; add $( as required.
.01133c	48		pha			pha 									; comes from the first token.
.01133d	29 00 20	and #$2000		and 	#IDTypeMask
.011340	f0 06		beq $011348		beq 	_DTKINotString
.011342	a9 24 00	lda #$0024		lda 	#"$"
.011345	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.011348					_DTKINotString:
.011348	68		pla			pla
.011349	29 00 10	and #$1000		and 	#IDArrayMask
.01134c	f0 06		beq $011354		beq 	_DTKINotArray
.01134e	a9 28 00	lda #$0028		lda 	#"("
.011351	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.011354					_DTKINotArray:
.011354	82 72 ff	brl $0112c9		brl 	_DTKMainLoop
.011357					_DTKIDecodeToken:
.011357	5a		phy			phy
.011358	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01135b	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.01135e					_DTKIDivide:
.01135e	38		sec			sec
.01135f	e9 2d 00	sbc #$002d		sbc 	#45
.011362	c8		iny			iny
.011363	b0 f9		bcs $01135e		bcs 	_DTKIDivide
.011365	69 2d 00	adc #$002d		adc 	#45
.011368	20 71 13	jsr $011371		jsr 	_DTKIOutA 						; output low.
.01136b	98		tya			tya
.01136c	20 71 13	jsr $011371		jsr 	_DTKIOutA 						; output high
.01136f	7a		ply			ply
.011370	60		rts			rts
.011371					_DTKIOutA:
.011371	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011374	f0 10		beq $011386		beq 	_DTKIOutExit
.011376	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.011379	90 04		bcc $01137f		bcc 	_DTKIOutAlpha
.01137b	38		sec			sec  									; adjust for 0-9
.01137c	e9 4b 00	sbc #$004b		sbc 	#$4B
.01137f					_DTKIOutAlpha:
.01137f	18		clc			clc										; adjust for A-Z
.011380	69 60 00	adc #$0060		adc 	#96
.011383	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.011386					_DTKIOutExit:
.011386	60		rts			rts
.011387					_DTKDecodeKeyword:
.011387	48		pha			pha
.011388	da		phx			phx
.011389	5a		phy			phy
.01138a	a8		tay			tay 									; save token ID in Y
.01138b	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.01138e	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011391	48		pha			pha 									; save this flag on a stack
.011392	5a		phy			phy 									; save the token ID
.011393	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011396	d0 19		bne $0113b1		bne 	_DTKNotSpecial1
.011398	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01139a	88		dey			dey
.01139b	b9 00 00	lda $0000,y		lda 	$0000,y
.01139e	29 ff 00	and #$00ff		and 	#$00FF
.0113a1	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0113a4	f0 0b		beq $0113b1		beq 	_DTKNotSpecial1
.0113a6	c9 3a 00	cmp #$003a		cmp 	#":"
.0113a9	f0 06		beq $0113b1		beq 	_DTKNotSpecial1
.0113ab	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0113ae	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0113b1					_DTKNotSpecial1:
.0113b1	68		pla			pla
.0113b2	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0113b5	a8		tay			tay 									; into Y.
.0113b6	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0113b9					_DTKDWorkThrough:
.0113b9	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0113ba	f0 0f		beq $0113cb		beq 	_DTKDFound
.0113bc	86 08		stx $08			stx 	DTemp1
.0113be	bf 94 00 01	lda $010094,x		lda 	TokenText,x 					; read the type/skip byte.
.0113c2	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0113c5	18		clc			clc
.0113c6	65 08		adc $08			adc 	DTemp1
.0113c8	aa		tax			tax
.0113c9	80 ee		bra $0113b9		bra 	_DTKDWorkThrough
.0113cb					_DTKDFound:
.0113cb	bf 94 00 01	lda $010094,x		lda 	TokenText,x 					; get skip
.0113cf	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0113d2	3a		dec a			dec 	a
.0113d3	a8		tay			tay 									; put in Y
.0113d4					_DTKOut:
.0113d4	bf 95 00 01	lda $010095,x		lda 	TokenText+1,x 					; output it.
.0113d8	29 ff 00	and #$00ff		and 	#$00FF
.0113db	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0113de	e8		inx			inx
.0113df	88		dey			dey
.0113e0	d0 f2		bne $0113d4		bne 	_DTKOut
.0113e2	68		pla			pla 									; trailing space.
.0113e3	d0 06		bne $0113eb		bne 	_DTKNotSpecial2
.0113e5	a9 20 00	lda #$0020		lda 	#" "
.0113e8	20 38 06	jsr $010638		jsr 	StringWriteCharacter
.0113eb					_DTKNotSpecial2:
.0113eb	7a		ply			ply
.0113ec	fa		plx			plx
.0113ed	68		pla			pla
.0113ee	60		rts			rts
.0113ef					ScanIndent:
.0113ef	48		pha			pha
.0113f0	5a		phy			phy
.0113f1	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0113f3	85 2e		sta $2e			sta 	DIndent2
.0113f5	98		tya			tya
.0113f6	18		clc			clc 									; point to code.
.0113f7	69 04 00	adc #$0004		adc 	#4
.0113fa	a8		tay			tay
.0113fb					_SILoop:
.0113fb	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0113fe	f0 35		beq $011435		beq 	_SIExit
.011400	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011403	b0 08		bcs $01140d		bcs 	_SICheckKeyword
.011405	98		tya			tya 									; skip string.
.011406	18		clc			clc
.011407	79 00 00	adc $0000,y		adc 	$0000,y
.01140a	a8		tay			tay
.01140b	80 ee		bra $0113fb		bra 	_SILoop
.01140d					_SICheckKeyword:
.01140d	29 00 e0	and #$e000		and 	#$E000
.011410	c9 00 20	cmp #$2000		cmp 	#$2000
.011413	f0 04		beq $011419		beq 	_SIFoundKeyword
.011415					_SIAdvance:
.011415	c8		iny			iny 									; if not, loop round.
.011416	c8		iny			iny
.011417	80 e2		bra $0113fb		bra 	_SILoop
.011419					_SIFoundKeyword:
.011419	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01141c	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01141f	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011422	f0 0d		beq $011431		beq 	_SIKeyPlus
.011424	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011427	d0 ec		bne $011415		bne 	_SIAdvance
.011429	c6 2c		dec $2c			dec 	DIndent
.01142b	10 e8		bpl $011415		bpl 	_SIAdvance
.01142d	64 2c		stz $2c			stz 	DIndent
.01142f	80 e4		bra $011415		bra 	_SIAdvance
.011431					_SIKeyPlus:
.011431	e6 2c		inc $2c			inc 	DIndent
.011433	80 e0		bra $011415		bra 	_SIAdvance
.011435					_SIExit:
.011435	7a		ply			ply
.011436	68		pla			pla
.011437	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011438					Function_PRINT:
.011438	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01143a	f0 33		beq $01146f			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01143c	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.01143f	f0 2e		beq $01146f			beq 	_FPRExitCR
.011441	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011444	f0 23		beq $011469			beq 	_FPRSkipLoop
.011446	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.011449	f0 1b		beq $011466			beq 	_FPRNewLine
.01144b	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.01144e	f0 11		beq $011461			beq 	_FPRTab
.011450					_FPRExpression:
.011450	20 dc 01	jsr $0101dc			jsr 	Evaluate 					; evaluate a string or integer.
.011453	b0 06		bcs $01145b			bcs 	_FPRHaveString
.011455	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011458	20 e3 0f	jsr $010fe3			jsr 	ConvertToString
.01145b					_FPRHaveString:
.01145b	a8		tay				tay 								; print the basic String.
.01145c	20 f2 05	jsr $0105f2			jsr 	PrintBASICString
.01145f	80 d7		bra $011438			bra 	Function_Print 				; and go round again.
.011461					_FPRTab:
.011461	20 c8 1b	jsr $011bc8			jsr 	HWTab
.011464	80 03		bra $011469			bra 	_FPRSkipLoop
.011466					_FPRNewLine:
.011466	20 b3 1b	jsr $011bb3			jsr 	HWNewLine
.011469					_FPRSkipLoop:
.011469	e6 06		inc $06				inc 	DCodePtr
.01146b	e6 06		inc $06				inc 	DCodePtr
.01146d	80 c9		bra $011438			bra 	Function_Print
.01146f					_FPRExitCR:
.01146f	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011471	88		dey				dey
.011472	88		dey				dey
.011473	b9 00 00	lda $0000,y			lda 	$0000,y
.011476	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.011479	f0 08		beq $011483			beq 	_FPRExit
.01147b	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.01147e	f0 03		beq $011483			beq 	_FPRExit
.011480	20 b3 1b	jsr $011bb3			jsr 	HWNewLine 					; print a new line.
.011483					_FPRExit:
.011483	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011484					Function_IF:
.011484	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; check success.
.011487	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011489	05 08		ora $08				ora 	DTemp1
.01148b	a8		tay				tay 								; success flag in Y.
.01148c	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.01148e	c9 47 3a	cmp #$3a47			cmp 	#thenTokenID
.011491	d0 32		bne $0114c5			bne 	_FIFExtended 				; if so, go to the extended IF.
.011493	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011495	e6 06		inc $06				inc 	DCodePtr
.011497	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01149a	f0 0f		beq $0114ab			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01149c	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.01149e	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0114a1	90 21		bcc $0114c4			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0114a3	c9 00 c0	cmp #$c000			cmp 	#$C000
.0114a6	b0 1c		bcs $0114c4			bcs 	_FIFContinue
.0114a8	4c 3a 17	jmp $01173a			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0114ab					_FIFEndOfLine:
.0114ab	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0114ad	f0 15		beq $0114c4			beq 	_FIFContinue 				; if done so, continue.
.0114af	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0114b2	90 06		bcc $0114ba			bcc 	_FIFStringConstant
.0114b4	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0114b6	e6 06		inc $06				inc 	DCodePtr
.0114b8	80 f1		bra $0114ab			bra 	_FIFEndOfLine
.0114ba					_FIFStringConstant:
.0114ba	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0114bd	18		clc				clc
.0114be	65 06		adc $06				adc 	DCodePtr
.0114c0	85 06		sta $06				sta 	DCodePtr
.0114c2	80 e7		bra $0114ab			bra 	_FIFEndOfLine
.0114c4					_FIFContinue:
.0114c4	60		rts				rts
.0114c5					_FIFExtended:
.0114c5	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0114c7	e6 2a		inc $2a				inc 	DStack
.0114c9	a9 43 3c	lda #$3c43			lda 	#ifTokenID
.0114cc	a6 2a		ldx $2a				ldx 	DStack
.0114ce	95 00		sta $00,x			sta 	$00,x
.0114d0	98		tya				tya 								; see if the test was passed.
.0114d1	f0 01		beq $0114d4			beq 	_FIXSkip 					; if zero then it has failed.
.0114d3	60		rts				rts 								; test passed, so continue executing
.0114d4					_FIXSkip:
.0114d4	a9 3b 3e	lda #$3e3b			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0114d7	a2 48 3a	ldx #$3a48			ldx 	#endifTokenID 				; at the same level.
.0114da	20 3a 15	jsr $01153a			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0114dd	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0114df	e6 06		inc $06				inc 	DCodePtr
.0114e1	c9 48 3a	cmp #$3a48			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0114e4	d0 04		bne $0114ea			bne 	_FIXNoThrow
.0114e6	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0114e8	c6 2a		dec $2a				dec 	DStack
.0114ea					_FIXNoThrow:
.0114ea	60		rts				rts
.0114eb					Handler_ELSE:
.0114eb	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0114ed	b5 00		lda $00,x			lda 	$00,x
.0114ef	c9 43 3c	cmp #$3c43			cmp 	#ifTokenID
.0114f2	d0 12		bne $011506			bne 	_HEBadStructure
.0114f4	a9 48 3a	lda #$3a48			lda 	#endifTokenID 				; only searching one token.
.0114f7	a2 00 00	ldx #$0000			ldx 	#$0000
.0114fa	20 3a 15	jsr $01153a			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0114fd	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0114ff	e6 06		inc $06				inc 	DCodePtr
.011501	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011503	c6 2a		dec $2a				dec 	DStack
.011505	60		rts				rts
.011506					_HEBadStructure:
.011506	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011509	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011511	68 6f 75 74 20 49 66 00
.011519					Handler_ENDIF:
.011519	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01151b	b5 00		lda $00,x			lda 	$00,x
.01151d	c9 43 3c	cmp #$3c43			cmp 	#ifTokenID
.011520	d0 05		bne $011527			bne 	_HEIBadStructure
.011522	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011524	c6 2a		dec $2a				dec 	DStack
.011526	60		rts				rts
.011527					_HEIBadStructure:
.011527	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01152a	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011532	68 6f 75 74 20 49 66 00
.01153a					ScanForwardLevel:
.01153a	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01153c	86 0a		stx $0a				stx 	DTemp1+2
.01153e	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011540	85 0c		sta $0c				sta 	DTemp2
.011542	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011545					_SFLLoop:
.011545	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011548	d0 0d		bne $011557			bne 	_SFLNoCheck 				; we're in a substructure.
.01154a	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01154c	f0 09		beq $011557			beq 	_SFLNoCheck 				; don't check zero
.01154e	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011550	f0 04		beq $011556			beq 	_SFLFound
.011552	c5 0a		cmp $0a				cmp 	DTemp1+2
.011554	d0 01		bne $011557			bne 	_SFLNoCheck
.011556					_SFLFound:
.011556	60		rts				rts
.011557					_SFLNoCheck:
.011557	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011559	f0 4f		beq $0115aa			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01155b	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01155e	90 40		bcc $0115a0			bcc 	_SFLSkipString 				; then handle that.
.011560	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011562	e6 06		inc $06				inc 	DCodePtr
.011564	a8		tay				tay 								; put token in Y temporarily.
.011565	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011568	c9 00 20	cmp #$2000			cmp 	#$2000
.01156b	d0 d8		bne $011545			bne 	_SFLLoop
.01156d	98		tya				tya 								; get the token back.
.01156e	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011571	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011574	f0 cf		beq $011545			beq 	_SFLLoop
.011576	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011579	90 ca		bcc $011545			bcc 	_SFLLoop
.01157b	e8		inx				inx 								; increment the level.
.01157c	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.01157f	f0 c4		beq $011545			beq 	_SFLLoop
.011581	ca		dex				dex 								; decrement the level
.011582	ca		dex				dex 								; one overdoes the previous inx.
.011583	10 c0		bpl $011545			bpl 	_SFLLoop 					; if gone -ve then error.
.011585					_SFLError:
.011585	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011587	85 22		sta $22				sta 	DLineNumber
.011589	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01158c	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011594	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0115a0					_SFLSkipString:
.0115a0	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0115a3	18		clc				clc
.0115a4	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0115a6	85 06		sta $06				sta 	DCodePtr
.0115a8	80 9b		bra $011545			bra 	_SFLLoop 					; go round again.
.0115aa					_SFLNextLine:
.0115aa	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0115ac	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0115af	f0 d4		beq $011585			beq 	_SFLError 					; if zero, then there's no more code to search.
.0115b1	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0115b4	85 22		sta $22				sta 	DLineNumber
.0115b6	18		clc				clc
.0115b7	a5 06		lda $06				lda 	DCodePtr
.0115b9	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0115bc	85 06		sta $06				sta 	DCodePtr
.0115be	80 85		bra $011545			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.0115c0					Command_FOR:
.0115c0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0115c2	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0115c5	d0 60		bne $011627			bne		_CFOBad
.0115c7	20 69 03	jsr $010369			jsr 	VariableFind 				; try to find variable
.0115ca	b0 15		bcs $0115e1			bcs 	_CFOExists
.0115cc	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0115ce	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0115d1	20 13 04	jsr $010413			jsr 	VariableCreate 				; create it.
.0115d4	48		pha				pha 								; save on stack
.0115d5					_CFOSkipToken:
.0115d5	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0115d7	e6 06		inc $06				inc 	DCodePtr
.0115d9	e6 06		inc $06				inc 	DCodePtr
.0115db	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0115de	d0 f5		bne $0115d5			bne 	_CFOSkipToken
.0115e0	68		pla				pla 								; restore address
.0115e1					_CFOExists:
.0115e1	48		pha				pha 								; push variable address on stack
.0115e2	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0115e5	20 78 05	jsr $010578			jsr 	ExpectToken
.0115e8	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; this is the start value
.0115eb	bb		tyx				tyx 								; put high value in X
.0115ec	7a		ply				ply 								; address in Y
.0115ed	99 00 00	sta $0000,y			sta 	$0000,y
.0115f0	8a		txa				txa
.0115f1	99 02 00	sta $0002,y			sta 	$0002,y
.0115f4	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.0115f7	20 78 05	jsr $010578			jsr 	ExpectToken
.0115fa	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0115fc	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0115fe	95 02		sta $02,x			sta 	$02,x
.011600	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011602	95 04		sta $04,x			sta 	$04,x
.011604	98		tya				tya 								; save variable address at +6
.011605	95 06		sta $06,x			sta 	$06,x
.011607	a9 44 3c	lda #$3c44			lda 	#forTokenID 				; save for token at +8
.01160a	95 08		sta $08,x			sta 	$08,x
.01160c	8a		txa				txa 								; add 8 to stack position
.01160d	18		clc				clc
.01160e	69 08 00	adc #$0008			adc 	#8
.011611	85 2a		sta $2a				sta 	DStack
.011613	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011616	b2 06		lda ($06)			lda 	(DCodePtr)
.011618	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01161b	d0 09		bne $011626			bne 	_CFONoStep
.01161d	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.011620	20 78 05	jsr $010578			jsr 	ExpectToken
.011623	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; and whatever the step is.
.011626					_CFONoStep:
.011626	60		rts				rts
.011627					_CFOBad:
.011627	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01162a	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011632	76 61 72 69 61 62 6c 65 00
.01163b					Command_NEXT:
.01163b	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01163d	b5 00		lda $00,x			lda 	$00,x
.01163f	c9 44 3c	cmp #$3c44			cmp 	#forTokenID 				; if not FOR then error
.011642	f0 14		beq $011658			beq 	_CNXOk
.011644	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011647	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01164f	68 6f 75 74 20 46 6f 72 00
.011658					_CNXOk:
.011658	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01165a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01165d	90 22		bcc $011681			bcc 	_CNXNoVariable
.01165f	20 69 03	jsr $010369			jsr 	VariableFind 				; get address of variable.
.011662	90 08		bcc $01166c			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011664	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011666	ca		dex				dex
.011667	ca		dex				dex
.011668	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01166a	f0 15		beq $011681			beq 	_CNXNoVariable 				; then continue
.01166c					_CNXNextVar:
.01166c	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>01166f	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011677	20 76 61 72 69 61 62 6c 65 00
.011681					_CNXNoVariable:
.011681	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011683	48		pha				pha
.011684	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011686	38		sec				sec
.011687	e9 08 00	sbc #$0008			sbc 	#8
.01168a	85 2a		sta $2a				sta 	DStack
.01168c	aa		tax				tax 								; X points to the stack.
.01168d	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01168f	85 06		sta $06				sta 	DCodePtr
.011691	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; this is the target constant
.011694	5a		phy				phy 								; save the target on the stack
.011695	48		pha				pha
.011696	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011699	85 08		sta $08				sta 	DTemp1
.01169b	64 0a		stz $0a				stz 	DTemp1+2
.01169d	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01169f	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0116a2	d0 0b		bne $0116af			bne 	_CNXNoStep
.0116a4	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0116a6	e6 06		inc $06				inc 	DCodePtr
.0116a8	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; work out the step.
.0116ab	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0116ad	84 0a		sty $0a				sty 	DTemp1+2
.0116af					_CNXNoStep:
.0116af	68		pla				pla 								; save the Target in DTemp2
.0116b0	85 0c		sta $0c				sta 	DTemp2
.0116b2	68		pla				pla
.0116b3	85 0e		sta $0e				sta 	DTemp2+2
.0116b5	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0116b7	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0116b9	a8		tay				tay
.0116ba	18		clc				clc
.0116bb	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0116be	65 08		adc $08				adc 	DTemp1
.0116c0	99 00 00	sta $0000,y			sta 	$0000,y
.0116c3	b9 02 00	lda $0002,y			lda 	$0002,y
.0116c6	65 0a		adc $0a				adc 	DTemp1+2
.0116c8	99 02 00	sta $0002,y			sta 	$0002,y
.0116cb	38		sec				sec
.0116cc	a5 0c		lda $0c				lda 	DTemp2
.0116ce	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0116d1	85 0c		sta $0c				sta 	DTemp2
.0116d3	a5 0e		lda $0e				lda 	DTemp2+2
.0116d5	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0116d8	85 0e		sta $0e				sta 	DTemp2+2
.0116da	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0116dc	f0 0a		beq $0116e8			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0116de	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0116e0	45 0a		eor $0a				eor 	DTemp1+2
.0116e2	10 04		bpl $0116e8			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0116e4	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0116e5	85 06		sta $06				sta 	DCodePtr
.0116e7	60		rts				rts
.0116e8					_CNXLoopAgain:
.0116e8	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0116e9	18		clc				clc
.0116ea	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0116ec	aa		tax				tax
.0116ed	69 08 00	adc #$0008			adc 	#8
.0116f0	85 2a		sta $2a				sta 	DStack
.0116f2	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0116f4	85 22		sta $22				sta 	DLineNumber
.0116f6	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.0116f7					Function_ONGOTO:
.0116f7	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; on what GOTO :)
.0116fa	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0116fd	d0 25		bne $011724			bne 	_FOGoFail
.0116ff	c9 00 00	cmp #$0000			cmp 	#0
.011702	f0 20		beq $011724			beq 	_FOGoFail 					; we start with index = 1
.011704	48		pha				pha 								; save count on stack
.011705	a9 37 3e	lda #$3e37			lda 	#gotoTokenID 				; expect GOTO
.011708	20 78 05	jsr $010578			jsr 	ExpectToken
.01170b	fa		plx				plx 								; put count in X.
.01170c					_FOGoLoop:
.01170c	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01170e	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011711	90 73		bcc $011786			bcc 	FGOFail 					; if not, then we have an error.
.011713	c9 00 c0	cmp #$c000			cmp 	#$C000
.011716	b0 6e		bcs $011786			bcs 	FGOFail
.011718	ca		dex				dex 								; subtract one, if done, call GOTO code
.011719	f0 1f		beq $01173a			beq 	Function_GOTO
.01171b	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01171d	e6 06		inc $06				inc 	DCodePtr
.01171f	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; expect a comma
.011722	80 e8		bra $01170c			bra 	_FOGoLoop 					; and loop round.
.011724					_FOGoFail:
.011724	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011727	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01172f	47 6f 74 6f 20 76 61 6c 75 65 00
.01173a					Function_GOTO:
.01173a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01173c	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01173f	90 45		bcc $011786			bcc 	FGOFail 					; we don't do calculate line numbers.
.011741	c9 00 c0	cmp #$c000			cmp 	#$C000
.011744	b0 40		bcs $011786			bcs 	FGOFail
.011746	38		sec				sec 								; convert to 0-32767
.011747	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01174a	aa		tax				tax
.01174b	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.01174e	18		clc				clc
.01174f	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011751	a8		tay				tay
.011752					_FGOSearch:
.011752	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011755	f0 18		beq $01176f			beq 	_FGOUnknown
.011757	8a		txa				txa 								; does it match line number ?
.011758	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01175b	f0 08		beq $011765			beq 	_FGOFound 					; yes, then found.
.01175d	98		tya				tya 								; no follow the link
.01175e	18		clc				clc
.01175f	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011762	a8		tay				tay
.011763	80 ed		bra $011752			bra 	_FGOSearch 					; and keep looking
.011765					_FGOFound:
.011765	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011767	98		tya				tya 								; Y + 4 is the code pointer.
.011768	18		clc				clc 								; (skipping link and line #)
.011769	69 04 00	adc #$0004			adc 	#4
.01176c	85 06		sta $06				sta 	DCodePtr
.01176e	60		rts				rts									; and continue
.01176f					_FGOUnknown:
.01176f	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011772	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01177a	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011786					FGOFail:
.011786	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011789	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011791	20 4e 75 6d 62 65 72 00
.011799					Function_GOSUB:
.011799	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01179b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01179d	18		clc				clc
.01179e	69 02 00	adc #$0002			adc 	#2
.0117a1	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0117a3	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117a5	95 04		sta $04,x			sta 	$04,x
.0117a7	a9 38 3e	lda #$3e38			lda 	#gosubTokenID 				; save gosub token at +6
.0117aa	95 06		sta $06,x			sta 	$06,x
.0117ac	8a		txa				txa 								; advance stack by 6.
.0117ad	18		clc				clc
.0117ae	69 06 00	adc #$0006			adc 	#6
.0117b1	85 2a		sta $2a				sta 	DStack
.0117b3	80 85		bra $01173a			bra 	Function_GOTO 				; and do a GOTO.
.0117b5					Function_RETURN:
.0117b5	a6 2a		ldx $2a				ldx 	DStack
.0117b7	b5 00		lda $00,x			lda 	$00,x
.0117b9	c9 38 3e	cmp #$3e38			cmp 	#gosubTokenID 				; check top token.
.0117bc	d0 11		bne $0117cf			bne 	_FRetFail
.0117be	8a		txa				txa 								; unpick stack.
.0117bf	38		sec				sec
.0117c0	e9 06 00	sbc #$0006			sbc 	#6
.0117c3	85 2a		sta $2a				sta 	DStack
.0117c5	aa		tax				tax
.0117c6	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0117c8	85 06		sta $06				sta 	DCodePtr
.0117ca	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0117cc	85 22		sta $22				sta 	DLineNumber
.0117ce	60		rts				rts
.0117cf					_FRetFail:
.0117cf	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0117d2	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0117da	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.0117e7					Function_REPEAT:
.0117e7	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0117e9	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0117eb	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0117ed	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117ef	95 04		sta $04,x			sta 	$04,x
.0117f1	a9 41 3c	lda #$3c41			lda 	#repeatTokenID 				; save repeat token at +6
.0117f4	95 06		sta $06,x			sta 	$06,x
.0117f6	8a		txa				txa 								; advance stack by 6.
.0117f7	18		clc				clc
.0117f8	69 06 00	adc #$0006			adc 	#6
.0117fb	85 2a		sta $2a				sta 	DStack
.0117fd	60		rts				rts
.0117fe					Function_UNTIL:
.0117fe	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011800	b5 00		lda $00,x			lda 	$00,x
.011802	c9 41 3c	cmp #$3c41			cmp 	#repeatTokenID
.011805	d0 26		bne $01182d			bne 	_FUNFail
.011807	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; .... until what.
.01180a	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01180d	d0 15		bne $011824			bne 	_FUNExit
.01180f	c9 00 00	cmp #$0000			cmp 	#0
.011812	d0 10		bne $011824			bne 	_FUNExit
.011814	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011816	38		sec				sec
.011817	e9 06 00	sbc #$0006			sbc 	#6
.01181a	aa		tax				tax
.01181b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01181d	85 06		sta $06				sta 	DCodePtr
.01181f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011821	85 22		sta $22				sta 	DLineNumber
.011823	60		rts				rts
.011824					_FUNExit:
.011824	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011826	38		sec				sec
.011827	e9 06 00	sbc #$0006			sbc 	#6
.01182a	85 2a		sta $2a				sta 	DStack
.01182c	60		rts				rts
.01182d					_FUNFail:
.01182d	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011830	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011838	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011845					Function_WHILE:
.011845	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011847	48		pha				pha 								; save on stack
.011848	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; while what.
.01184b	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.01184e	d0 14		bne $011864			bne 	_FWHExecute
.011850	c9 00 00	cmp #$0000			cmp 	#0
.011853	d0 0f		bne $011864			bne 	_FWHExecute
.011855	68		pla				pla 								; throw away current instruction
.011856	a9 45 3a	lda #$3a45			lda 	#wendTokenID 				; skip to WEND
.011859	a2 00 00	ldx #$0000			ldx 	#0
.01185c	20 3a 15	jsr $01153a			jsr 	ScanForwardLevel 			; scan forward checking structures
.01185f	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011861	e6 06		inc $06				inc 	DCodePtr
.011863	60		rts				rts
.011864					_FWHExecute:
.011864	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011866	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011867	3a		dec a				dec 	a
.011868	3a		dec a				dec 	a
.011869	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01186b	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01186d	95 04		sta $04,x			sta 	$04,x
.01186f	a9 42 3c	lda #$3c42			lda 	#whileTokenID 				; save while token at +6
.011872	95 06		sta $06,x			sta 	$06,x
.011874	8a		txa				txa 								; advance stack by 6.
.011875	18		clc				clc
.011876	69 06 00	adc #$0006			adc 	#6
.011879	85 2a		sta $2a				sta 	DStack
.01187b	60		rts				rts
.01187c					Function_WEND:
.01187c	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.01187e	b5 00		lda $00,x			lda 	$00,x
.011880	c9 42 3c	cmp #$3c42			cmp 	#whileTokenID
.011883	d0 11		bne $011896			bne 	_FWEFail
.011885	8a		txa				txa 								; unpick stack and always loop back.
.011886	38		sec				sec 								; we do the check at the top.
.011887	e9 06 00	sbc #$0006			sbc 	#6
.01188a	85 2a		sta $2a				sta 	DStack
.01188c	aa		tax				tax
.01188d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01188f	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011891	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011893	85 22		sta $22				sta 	DLineNumber
.011895	60		rts				rts
.011896					_FWEFail:
.011896	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011899	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0118a1	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.0118ac					Function_END:
.0118ac	4c a6 1c	jmp $011ca6			jmp 	WarmStart
.0118af					Function_RUN:
.0118af	20 2b 19	jsr $01192b			jsr 	Function_CLEAR 				; clear all variables.
.0118b2	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0118b4	18		clc				clc
.0118b5	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.0118b8	80 0c		bra $0118c6			bra 	FRun_NextLineNumber
.0118ba					RUNExecuteTokenBuffer:
.0118ba	64 22		stz $22				stz 	DLineNumber					; zero line number
.0118bc	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.0118bf	18		clc				clc
.0118c0	65 02		adc $02				adc 	DBaseAddress
.0118c2	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.0118c4	80 12		bra $0118d8			bra 	FRun_NextInstruction
.0118c6					FRun_NextLineNumber:
.0118c6	a8		tay				tay 								; put in Y
.0118c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0118ca	f0 e0		beq $0118ac			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0118cc	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0118cf	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0118d1	98		tya				tya 								; get address back
.0118d2	18		clc				clc 								; skip over the link/line number
.0118d3	69 04 00	adc #$0004			adc 	#4
.0118d6	85 06		sta $06				sta 	DCodePtr
.0118d8					FRun_NextInstruction:
.0118d8	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0118da	20 cf 1b	jsr $011bcf			jsr 	HWCheckBreak 				; break key pressed.
.0118dd	d0 40		bne $01191f			bne 	_FRun_Break
.0118df	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0118e1	f0 32		beq $011915			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0118e3	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.0118e6	f0 18		beq $011900			beq 	_FRun_Colon
.0118e8	a8		tay				tay 								; save in Y
.0118e9	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0118ec	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0118ef	d0 15		bne $011906			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0118f1	98		tya				tya 								; get token back
.0118f2	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0118f5	0a		asl a				asl 	a 							; double it into X
.0118f6	aa		tax				tax
.0118f7	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0118f9	e6 06		inc $06				inc 	DCodePtr
.0118fb	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0118fe	80 d8		bra $0118d8			bra 	FRun_NextInstruction 		; do the following instruction.
.011900					_FRun_Colon:
.011900	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011902	e6 06		inc $06				inc 	DCodePtr
.011904	80 d2		bra $0118d8			bra 	FRun_NextInstruction 		; do the following instruction.
.011906					_FRun_TryLET:
.011906	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011908	c9 00 c0	cmp #$c000			cmp 	#$C000
.01190b	90 05		bcc $011912			bcc		_FRunSyntax 				; no, must be syntax.
.01190d	20 73 11	jsr $011173			jsr 	Function_LET 				; try as a LET.
.011910	80 c6		bra $0118d8			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011912					_FRunSyntax:
.011912	82 53 ec	brl $010568			brl 	SyntaxError
.011915					_FRun_EndInstruction:
.011915	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011917	f0 0f		beq $011928			beq 	_FRun_WarmStart
.011919	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01191b	1a		inc a				inc 	a 							; go to link for next line
.01191c	1a		inc a				inc 	a
.01191d	80 a7		bra $0118c6			bra 	FRun_NextLineNumber
.01191f					_FRun_Break:
.01191f	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011922	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011928					_FRun_WarmStart:
.011928	82 7b 03	brl $011ca6			brl 	WarmStart
.01192b					Function_CLEAR:
.01192b	20 37 19	jsr $011937			jsr 	ClearVariablesPointersAndStacks
.01192e	60		rts				rts
.01192f					Function_STOP:
.01192f	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011932	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011937					ClearVariablesPointersAndStacks:
.011937	a9 80 00	lda #$0080			lda 	#BASStack
.01193a	85 2a		sta $2a				sta 	DStack
.01193c	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.01193e	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011941	a9 00 00	lda #$0000			lda 	#$0000
.011944	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011946	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011948	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01194b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01194d	20 76 19	jsr $011976			jsr 	FindCodeEnd 				; find where the program ends.
.011950	a8		tay				tay 								; Y points to it.
.011951	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011954	99 02 00	sta $0002,y			sta 	$0002,y
.011957	99 04 00	sta $0004,y			sta 	$0004,y
.01195a	98		tya				tya 								; start of working memory up
.01195b	18		clc				clc
.01195c	69 06 00	adc #$0006			adc 	#6
.01195f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011962	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011964	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011967					_FCLoop:
.011967	a9 00 00	lda #$0000			lda 	#$0000
.01196a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01196c	c8		iny				iny
.01196d	c8		iny				iny
.01196e	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011971	d0 f4		bne $011967			bne 	_FCLoop
.011973	64 16		stz $16				stz 	DTempStringPointer
.011975	60		rts				rts
.011976					FindCodeEnd:
.011976	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011979	18		clc				clc
.01197a	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01197c	a8		tay				tay
.01197d					_FCELoop:
.01197d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011980	f0 08		beq $01198a			beq 	_FCEExit
.011982	98		tya				tya 								; add offset
.011983	18		clc				clc
.011984	79 00 00	adc $0000,y			adc 	$0000,y
.011987	a8		tay				tay
.011988	80 f3		bra $01197d			bra 	_FCELoop
.01198a					_FCEExit:
.01198a	98		tya				tya 								; return in A
.01198b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.01198c					Function_Dim:
.01198c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01198e	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011991	f0 3b		beq $0119ce			beq		_FDIMNotArray 				; no, error.
.011993	20 69 03	jsr $010369			jsr 	VariableFind 				; try to find it.
.011996	b0 41		bcs $0119d9			bcs 	_FDIMExists 				; if it does, that's an error.
.011998	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01199a	48		pha				pha
.01199b	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.01199d	48		pha				pha
.01199e					_FDIMSkip:
.01199e	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0119a0	e6 06		inc $06				inc 	DCodePtr
.0119a2	e6 06		inc $06				inc 	DCodePtr
.0119a4	29 00 08	and #$0800			and 	#IDContMask
.0119a7	d0 f5		bne $01199e			bne 	_FDIMSkip
.0119a9	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; evaluate the size
.0119ac	20 92 05	jsr $010592			jsr 	ExpectRightBracket 			; check the ) following.
.0119af	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0119b2	d0 3b		bne $0119ef			bne 	_FDIMSize
.0119b4	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0119b7	f0 36		beq $0119ef			beq 	_FDIMSize
.0119b9	7a		ply				ply 								; restore HashTablePtr
.0119ba	84 20		sty $20				sty 	DHashTablePtr
.0119bc	7a		ply				ply 								; so now A is the high index, Y points to the token
.0119bd	20 13 04	jsr $010413			jsr 	VariableCreate 				; create the variable.
.0119c0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0119c2	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.0119c5	d0 06		bne $0119cd			bne 	_FDIMExit
.0119c7	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0119c9	e6 06		inc $06				inc 	DCodePtr
.0119cb	80 bf		bra $01198c			bra 	Function_DIM 				; and do another
.0119cd					_FDIMExit:
.0119cd	60		rts				rts
.0119ce					_FDIMNotArray:
.0119ce	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0119d1	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0119d9					_FDIMExists:
.0119d9	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0119dc	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0119e4	65 64 69 6d 65 6e 73 69 6f 6e 00
.0119ef					_FDIMSize:
.0119ef	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>0119f2	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0119fa	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.011a00					Function_COLLECT:
.011a00	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011a02	85 0c		sta $0c				sta 	DTemp2
.011a04	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011a07	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011a09	85 0e		sta $0e				sta 	DTemp2+2
.011a0b	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011a0d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011a0f					_FCNextPass:
.011a0f	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011a11	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011a13	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011a15	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011a18	18		clc				clc
.011a19	65 02		adc $02				adc 	DBaseAddress
.011a1b	a8		tay				tay 								; put in Y
.011a1c	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011a1f					_FCO1:
.011a1f	20 45 1a	jsr $011a45			jsr  	COLLECTScanVariable 		; scan that one.
.011a22	c8		iny				iny 	 							; go to next pointer
.011a23	c8		iny				iny
.011a24	ca		dex				dex
.011a25	d0 f8		bne $011a1f			bne 	_FCO1 						; until done all 16.
.011a27	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011a2a					_FCO2:
.011a2a	20 59 1a	jsr $011a59			jsr  	COLLECTScanArray 			; scan that one.
.011a2d	c8		iny				iny 	 							; go to next pointer
.011a2e	c8		iny				iny
.011a2f	ca		dex				dex
.011a30	d0 f8		bne $011a2a			bne 	_FCO2 						; until done all 16.
.011a32	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011a34	f0 0e		beq $011a44			beq		_FCExit 					; if finished then exit.
.011a36	48		pha				pha 								; save the target address
.011a37	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011a39	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011a3b	20 67 06	jsr $010667			jsr 	StringMakeConcrete 			; make the string concrete.
.011a3e	7a		ply				ply 								; restore the string.
.011a3f	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011a42	80 cb		bra $011a0f			bra		_FCNextPass
.011a44					_FCExit:
.011a44	60		rts				rts
.011a45					COLLECTScanVariable:
.011a45	da		phx				phx 								; save XY
.011a46	5a		phy				phy
.011a47					_CSVLoop:
.011a47	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011a4a	f0 0a		beq $011a56			beq 	_CSVExit
.011a4c	a8		tay				tay 								; put new address into Y
.011a4d	18		clc				clc 								; which is four on.
.011a4e	69 04 00	adc #$0004			adc 	#4
.011a51	20 7a 1a	jsr $011a7a			jsr 	COLLECTCheck
.011a54	80 f1		bra $011a47			bra 	_CSVLoop
.011a56					_CSVExit:
.011a56	7a		ply				ply
.011a57	fa		plx				plx
.011a58	60		rts				rts
.011a59					COLLECTScanArray:
.011a59	da		phx				phx 								; save XY
.011a5a	5a		phy				phy
.011a5b					_CSALoop:
.011a5b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011a5e	f0 17		beq $011a77			beq 	_CSAExit
.011a60	a8		tay				tay 								; put new address in Y
.011a61	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011a64	aa		tax				tax
.011a65	e8		inx				inx									; +1 as one more data element.
.011a66	98		tya				tya 								; point A to first element, at +6
.011a67	18		clc				clc
.011a68	69 06 00	adc #$0006			adc 	#6
.011a6b					_CSADoAllStrings:
.011a6b	20 7a 1a	jsr $011a7a			jsr 	COLLECTCheck 				; collect check the first.
.011a6e	1a		inc a				inc 	a 							; advance the pointer.
.011a6f	1a		inc a				inc 	a
.011a70	1a		inc a				inc 	a
.011a71	1a		inc a				inc 	a
.011a72	ca		dex				dex
.011a73	d0 f6		bne $011a6b			bne 	_CSADoAllStrings 			; until all strings are done.
.011a75	80 e4		bra $011a5b			bra 	_CSALoop
.011a77					_CSAExit:
.011a77	7a		ply				ply
.011a78	fa		plx				plx
.011a79	60		rts				rts
.011a7a					COLLECTCheck:
.011a7a	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011a7c	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011a7e	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011a80	90 0a		bcc $011a8c			bcc 	_COCExit
.011a82	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011a84	b0 06		bcs $011a8c			bcs 	_COCExit
.011a86	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011a88	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011a8a	85 14		sta $14				sta 	DSignCount
.011a8c					_COCExit:
.011a8c	a5 0a		lda $0a				lda 	DTemp1+2
.011a8e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011a8f					Command_POKE:
.011a8f	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; address
.011a92	48		pha				pha	 								; save on stack
.011a93	5a		phy				phy
.011a94	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; comma seperator.
.011a97	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; data
.011a9a	fa		plx				plx 								; pull address and store in DTemp1
.011a9b	86 0a		stx $0a				stx 	DTemp1+2
.011a9d	fa		plx				plx
.011a9e	86 08		stx $08				stx 	DTemp1+0
.011aa0	e2 20		sep #$20			sep 	#$20 						; byte mode
.011aa2	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011aa4	c2 20		rep #$20			rep 	#$20 						; word mode
.011aa6	60		rts				rts
.011aa7					Command_DOKE:
.011aa7	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; address
.011aaa	48		pha				pha	 								; save on stack
.011aab	5a		phy				phy
.011aac	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; comma seperator.
.011aaf	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; data
.011ab2	fa		plx				plx 								; pull address and store in DTemp1
.011ab3	86 0a		stx $0a				stx 	DTemp1+2
.011ab5	fa		plx				plx
.011ab6	86 08		stx $08				stx 	DTemp1+0
.011ab8	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011aba	60		rts				rts
.011abb					Command_LOKE:
.011abb	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; address
.011abe	48		pha				pha	 								; save on stack
.011abf	5a		phy				phy
.011ac0	20 9b 05	jsr $01059b			jsr 	ExpectComma 				; comma seperator.
.011ac3	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; data
.011ac6	fa		plx				plx 								; pull address and store in DTemp1
.011ac7	86 0a		stx $0a				stx 	DTemp1+2
.011ac9	fa		plx				plx
.011aca	86 08		stx $08				stx 	DTemp1+0
.011acc	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011ace	98		tya				tya
.011acf	a0 02 00	ldy #$0002			ldy 	#2
.011ad2	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011ad4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011ad5					Function_ASSERT:
.011ad5	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; something that returns an integer.
.011ad8	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011ada	05 08		ora $08				ora 	Dtemp1
.011adc	f0 01		beq $011adf			beq 	_FAssFail
.011ade	60		rts				rts
.011adf					_FAssFail:
.011adf	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011ae2	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011aea	61 69 6c 65 64 00
.011af0					Function_CLS:
.011af0	20 49 1b	jsr $011b49			jsr 	HWClearScreen
.011af3	60		rts				rts
.011af4					Function_REM:
.011af4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011af6	f0 0b		beq $011b03			beq 	_FRemSyntax 				; if 0, syntax error
.011af8	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011afb	b0 06		bcs $011b03			bcs 	_FRemSyntax
.011afd	18		clc				clc 								; add to DCodePtr
.011afe	65 06		adc $06				adc 	DCodePtr
.011b00	85 06		sta $06				sta 	DCodePtr
.011b02	60		rts				rts
.011b03					_FRemSyntax:
.011b03	82 62 ea	brl $010568			brl 	SyntaxError
.011b06					Function_LINK:
.011b06	20 ea 02	jsr $0102ea			jsr 	EvaluateInteger 			; call address same page.
.011b09	85 08		sta $08				sta 	DTemp1 						; target address
.011b0b	84 0a		sty $0a				sty 	DTemp1+2
.011b0d	7b		tdc				tda 								; work out what the actual address is
.011b0e	18		clc				clc
.011b0f	69 08 00	adc #$0008			adc 	#DTemp1
.011b12	8f 47 1b 01	sta $011b47			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011b16	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011b18	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011b1b	48		pha				pha
.011b1c	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011b1f	aa		tax				tax
.011b20	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011b23	a8		tay				tay
.011b24	68		pla				pla
.011b25	22 46 1b 01	jsl $011b46			jsl 	_FLIExecuteIt
.011b29	5a		phy				phy 								; save Y
.011b2a	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011b2c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011b2f	8a		txa				txa
.011b30	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011b33	68		pla				pla
.011b34	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011b37	c8		iny				iny 								; point to their high bytes and clear them
.011b38	c8		iny				iny
.011b39	a9 00 00	lda #$0000			lda 	#0
.011b3c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011b3f	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011b42	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011b45	60		rts				rts
.011b46					_FLIExecuteIt:
.011b46	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011b49					HWClearScreen:
.011b49	48		pha				pha
.011b4a	da		phx				phx
.011b4b	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011b4e	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011b51	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b55	ca		dex				dex
.011b56	10 f6		bpl $011b4e			bpl 	_CS0
.011b58	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011b5b	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b5f	fa		plx				plx
.011b60	68		pla				pla
.011b61	60		rts				rts
.011b62					HWPrintChar:
.011b62	48		pha				pha
.011b63	da		phx				phx
.011b64	5a		phy				phy
.011b65	48		pha				pha 								; cursor position -> X
.011b66	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011b6a	aa		tax				tax
.011b6b	68		pla				pla
.011b6c	c9 ff ff	cmp #$ffff			cmp 	#-1
.011b6f	f0 08		beq $011b79			beq 	_HWPCNoWrite
.011b71	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011b73	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b77	c2 20		rep #$20			rep 	#$20
.011b79					_HWPCNoWrite:
.011b79	e8		inx				inx 								; bump cursor position.
.011b7a	8a		txa				txa
.011b7b	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b7f	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011b82	d0 2b		bne $011baf			bne 	_HWNotEnd
.011b84	38		sec				sec 	 							; back up one line
.011b85	e9 40 00	sbc #$0040			sbc 	#sWidth
.011b88	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b8c	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011b8f					_HWScrollUp:
.011b8f	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011b93	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b97	e8		inx				inx
.011b98	e8		inx				inx
.011b99	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011b9c	d0 f1		bne $011b8f			bne 	_HWScrollUp
.011b9e	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011ba1					_HWBlank:
.011ba1	a9 20 20	lda #$2020			lda 	#$2020
.011ba4	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011ba8	e8		inx				inx
.011ba9	e8		inx				inx
.011baa	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011bad	d0 f2		bne $011ba1			bne 	_HWBlank
.011baf					_HWNotEnd:
.011baf	7a		ply				ply
.011bb0	fa		plx				plx
.011bb1	68		pla				pla
.011bb2	60		rts				rts
.011bb3					HWNewLine:
.011bb3	48		pha				pha
.011bb4	da		phx				phx
.011bb5	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011bb8					HWMoveCursor:
.011bb8	a9 ff ff	lda #$ffff			lda 	#-1
.011bbb	20 62 1b	jsr $011b62			jsr 	HWPrintChar
.011bbe	8a		txa				txa
.011bbf	2f 20 80 0f	and $0f8020			and 	HWCursor
.011bc3	d0 f3		bne $011bb8			bne 	HWMoveCursor
.011bc5	fa		plx				plx
.011bc6	68		pla				pla
.011bc7	60		rts				rts
.011bc8	48		pha		HWTab:	pha
.011bc9	da		phx				phx
.011bca	a2 07 00	ldx #$0007			ldx 	#7
.011bcd	80 e9		bra $011bb8			bra 	HWMoveCursor
.011bcf					HWCheckBreak:
.011bcf	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011bd3	60		rts				rts
.011bd4					HWInkey:
.011bd4	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011bd8	60		rts				rts
.011bd9					HWInputLine:
.011bd9	20 d4 1b	jsr $011bd4			jsr 	HWInkey 					; get a keystroke.
.011bdc	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011be0	f0 f7		beq $011bd9			beq 	HWInputLine
.011be2					_HWILWait:
.011be2	20 d4 1b	jsr $011bd4			jsr 	HWInkey
.011be5	c9 00 00	cmp #$0000			cmp		#0
.011be8	f0 f8		beq $011be2			beq 	_HWILWait
.011bea	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011bee	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011bf1	90 2f		bcc $011c22			bcc 	_HWILControl
.011bf3	20 62 1b	jsr $011b62			jsr 	HWPrintChar 				; print out.
.011bf6	80 e1		bra $011bd9			bra 	HWInputLine 				; loop back.
.011bf8					_HWILBackSpace:
.011bf8	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011bfc	f0 db		beq $011bd9			beq 	HWInputLine
.011bfe	aa		tax				tax
.011bff	ca		dex				dex
.011c00	a9 20 00	lda #$0020			lda 	#" "
.011c03	e2 20		sep #$20			sep 	#$20
.011c05	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011c09	c2 20		rep #$20			rep 	#$20
.011c0b	a2 ff ff	ldx #$ffff			ldx 	#-1
.011c0e					_HWILMove:
.011c0e	8a		txa				txa
.011c0f	18		clc				clc
.011c10	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011c14	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011c17	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011c1b	80 bc		bra $011bd9			bra 	HWInputLine
.011c1d					_HWILClear:
.011c1d	20 49 1b	jsr $011b49			jsr 	HWClearScreen
.011c20	80 b7		bra $011bd9			bra 	HWInputLine
.011c22					_HWILControl:
.011c22	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011c25	f0 d1		beq $011bf8			beq 	_HWILBackSpace
.011c27	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl IJKL move cursor
.011c2a	c9 09 00	cmp #$0009			cmp 	#9
.011c2d	f0 df		beq $011c0e			beq 	_HWILMove
.011c2f	a2 40 00	ldx #$0040			ldx 	#sWidth
.011c32	c9 0b 00	cmp #$000b			cmp 	#11
.011c35	f0 d7		beq $011c0e			beq 	_HWILMove
.011c37	a2 ff ff	ldx #$ffff			ldx 	#-1
.011c3a	c9 0a 00	cmp #$000a			cmp 	#10
.011c3d	f0 cf		beq $011c0e			beq 	_HWILMove
.011c3f	a2 01 00	ldx #$0001			ldx 	#1
.011c42	c9 0c 00	cmp #$000c			cmp 	#12
.011c45	f0 c7		beq $011c0e			beq 	_HWILMove
.011c47	c9 13 00	cmp #$0013			cmp 	#19 						; Ctrl S Clear Screen/Home
.011c4a	f0 d1		beq $011c1d			beq 	_HWILClear
.011c4c	c9 0d 00	cmp #$000d			cmp 	#13
.011c4f	d0 88		bne $011bd9			bne 	HWInputLine
.011c51	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011c55	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011c58	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011c5a	a9 0f 00	lda #$000f			lda 	#$000F
.011c5d	85 0a		sta $0a				sta 	DTemp1+2
.011c5f	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011c62					_HWILCopy:
.011c62	bb		tyx				tyx
.011c63	b7 08		lda [$08],y			lda 	[DTemp1],y
.011c65	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011c69	c8		iny				iny
.011c6a	c8		iny				iny
.011c6b	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011c6e	d0 f2		bne $011c62			bne 	_HWILCopy
.011c70	a9 00 00	lda #$0000			lda 	#0
.011c73	bb		tyx				tyx
.011c74	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011c78	20 b3 1b	jsr $011bb3			jsr 	HWNewLine 					; next line.
.011c7b	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011c7e	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011c81	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011c82					SwitchBasicInstance:
.011c82	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011c84	20 49 1b	jsr $011b49			jsr 	HWClearScreen 						; clear screen
.011c87	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011c8a	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011c8c	86 02		stx $02				stx		DBaseAddress
.011c8e	84 04		sty $04				sty 	DHighAddress
.011c90	ba		tsx				tsx 										; save the current SP.
.011c91	86 3a		stx $3a				stx 	DStack65816
.011c93	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011c94	48		pha				pha 										; then copy it into B.
.011c95	ab		plb				plb
.011c96	ab		plb				plb
.011c97	20 37 19	jsr $011937			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011c9a	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011c9d	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011c9f	f0 05		beq $011ca6			beq 	WarmStart
.011ca1	3a		dec a				dec 	a 									; decrement zero.
.011ca2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ca4	80 18		bra $011cbe			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011ca6					WarmStart:
.011ca6	a2 0c 1d	ldx #$1d0c			ldx 	#BasicPrompt & $FFFF
.011ca9	20 d4 05	jsr $0105d4			jsr 	PrintROMMessage
.011cac					NextCommand:
.011cac	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011cae	9a		txs				txs
.011caf	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011cb1	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011cb4	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011cb6	d0 52		bne $011d0a			bne 	ExitEmulator
.011cb8	20 d9 1b	jsr $011bd9			jsr 	HWInputLine 						; read line to YA.
.011cbb	20 9b 06	jsr $01069b			jsr 	Tokenise 							; tokenise it.
.011cbe					ExecuteTokenBuffer:
.011cbe	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011cc1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011cc3	f0 e7		beq $011cac			beq 	NextCommand 						; nothing.
.011cc5	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011cc8	90 27		bcc $011cf1			bcc 	_ETBCommand
.011cca	c9 00 c0	cmp #$c000			cmp 	#$C000
.011ccd	b0 22		bcs $011cf1			bcs 	_ETBCommand
.011ccf	38		sec				sec
.011cd0	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011cd3	f0 1f		beq $011cf4			beq 	_ETBError
.011cd5	48		pha				pha
.011cd6	20 6d 04	jsr $01046d			jsr 	LineDelete 							; delete the line, if it exists.
.011cd9	20 37 19	jsr $011937			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011cdc	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011cdf	18		clc				clc
.011ce0	65 02		adc $02				adc 	DBaseAddress
.011ce2	a8		tay				tay 										; Y contains the code.
.011ce3	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ce6	f0 c4		beq $011cac			beq 	NextCommand 						; no, next command.
.011ce8	68		pla				pla 										; line number in A, code in Y.
.011ce9	20 a8 04	jsr $0104a8			jsr 	LineInsert 							; insert the line
.011cec	20 37 19	jsr $011937			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011cef	80 bb		bra $011cac			bra 	NextCommand
.011cf1					_ETBCommand:
.011cf1	4c ba 18	jmp $0118ba			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011cf4					_ETBError:
.011cf4	20 2c 05	jsr $01052c			jsr 	ErrorHandler 						; call error routine
>011cf7	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011cff	61 76 65 20 6c 69 6e 65 20 30 00
.011d0a					ExitEmulator:
.011d0a	02 00		cop #$00			cop 	#0
.011d0c					BasicPrompt:
>011d0c	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 9b 06	jsr $01069b			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	e8 44 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 29 times (464 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 64 00 2c 3e 0a 00
>024208	06 42 6f 6d 62 65 72 00 00 00 2e 00 65 00 9a c8
>024218	f3 c8 7b c2 06 22 0f 40 0c 26 02 10 00 40 26 32
>024228	ac c9 88 cb 08 c0 06 22 40 40 26 32 e9 c8 44 c9
>024238	8c c3 06 22 20 40 00 00 08 00 66 00 35 3e 00 00
>024248	10 00 67 00 36 3e 26 32 36 3e 26 32 36 3e 00 00
>024258	0a 00 6e 00 38 3e e8 43 00 00 16 00 6f 00 9a c8
>024268	39 cb 05 c0 06 22 00 40 26 32 38 3e b0 44 00 00
>024278	22 00 78 00 2c ca 77 ca 05 c0 06 22 9a c8 f3 c8
>024288	7b c2 0a 24 ac c9 88 cb 08 c0 26 32 38 3e 14 45
>024298	00 00 08 00 dd 03 2c 3e 00 00 20 00 de 03 2c 3e
>0242a8	18 00 15 44 72 61 77 20 74 68 65 20 67 61 6d 65
>0242b8	20 6f 75 74 6c 69 6e 65 00 00 08 00 df 03 2c 3e
>0242c8	00 00 1a 00 e8 03 44 3c 18 c0 06 22 00 40 2a 38
>0242d8	ac c9 88 cb 08 c0 0b 24 01 40 00 00 30 00 f2 03
>0242e8	a5 ca 98 cb 58 c2 06 22 9a c8 f3 c8 7b c2 0a 24
>0242f8	27 32 e9 c8 44 c9 8c c3 0b 24 01 40 28 32 0c 26
>024308	ac c9 88 cb 08 c0 0a 24 18 c0 00 00 12 00 fc 03
>024318	3c 3e a5 ca 98 cb 58 c2 24 32 cf 40 00 00 12 00
>024328	06 04 6a c1 06 22 11 30 28 32 01 20 07 40 00 00
>024338	0e 00 10 04 43 3c 6a c1 09 22 00 40 00 00 12 00
>024348	1a 04 44 3c 09 c0 06 22 01 40 2a 38 6a c1 00 00
>024358	1e 00 24 04 3c 3e a5 ca 98 cb 58 c2 0b 24 09 c0
>024368	0c 26 ac c9 88 cb 08 c0 24 32 10 40 00 00 0a 00
>024378	2e 04 49 3a 09 c0 00 00 08 00 38 04 48 3a 00 00
>024388	0a 00 4c 04 49 3a 18 c0 00 00 08 00 56 04 39 3e
>024398	00 00 08 00 a6 04 2c 3e 00 00 1c 00 a7 04 2c 3e
>0243a8	14 00 10 55 70 64 61 74 65 20 74 68 65 20 73 63
>0243b8	6f 72 65 00 00 00 08 00 a8 04 2c 3e 00 00 26 00
>0243c8	b0 04 01 e0 06 22 21 30 08 00 05 30 30 30 30 30
>0243d8	0a 24 16 30 9a c8 39 cb 05 c0 28 32 24 32 05 40
>0243e8	28 32 00 00 12 00 ba 04 44 3c 09 c0 06 22 01 40
>0243f8	2a 38 05 40 00 00 26 00 c4 04 3c 3e 9a c8 f3 c8
>024408	7b c2 0a 24 09 c0 24 32 18 30 20 30 01 e0 24 32
>024418	09 c0 24 32 01 40 28 32 28 32 00 00 0a 00 ce 04
>024428	49 3a 09 c0 00 00 08 00 d8 04 39 3e 00 00 08 00
>024438	0b 05 2c 3e 00 00 1a 00 0c 05 2c 3e 12 00 0e 4d
>024448	6f 76 65 20 74 68 65 20 50 6c 61 6e 65 00 00 00
>024458	08 00 0d 05 2c 3e 00 00 24 00 14 05 3c 3e 2c ca
>024468	77 ca 05 c0 24 32 20 40 26 32 3c 3e 2c ca 77 ca
>024478	05 c0 0a 24 01 40 24 32 20 40 00 00 18 00 1e 05
>024488	2c ca 77 ca 05 c0 06 22 2c ca 77 ca 05 c0 0a 24
>024498	01 40 00 00 1a 00 28 05 43 3c 1a 30 2c ca 77 ca
>0244a8	05 c0 28 32 09 22 20 40 47 3a 2f 3e 00 00 24 00
>0244b8	32 05 3c 3e 2c ca 77 ca 05 c0 24 32 d7 40 26 32
>0244c8	3c 3e 2c ca 77 ca 05 c0 0a 24 01 40 24 32 d2 40
>0244d8	00 00 08 00 3c 05 39 3e 00 00 00 00 ee ee ee ee
>0244e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1968 times (31488 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
