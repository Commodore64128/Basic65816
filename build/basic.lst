
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 22 15:08:18 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 0c 1e 01	jmp $011e0c			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	bb 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	01 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	11 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	21 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	65 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	cc 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	31 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	ae 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	90 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	4b 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	4b 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	cc 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	d8 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	55 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	cc 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	dd 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	ef 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	66 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	46 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	22 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	0c 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	8e 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	ae 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	a0 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	d8 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	0c 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	42 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	5c 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	73 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	17 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	d5 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	56 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	ed 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	7f 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	6e 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	48 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	bb 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	bb 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	bb 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	bb 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	bb 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	bb 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	bb 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	bb 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	40 1c					.word Command_REM              & $FFFF ; token $3e2c "rem"
>01005a	59 12					.word Command_Let              & $FFFF ; token $3e2d "let"
>01005c	21 1c					.word Command_ASSERT           & $FFFF ; token $3e2e "assert"
>01005e	6f 1a					.word Command_END              & $FFFF ; token $3e2f "end"
>010060	72 1a					.word Command_RUN              & $FFFF ; token $3e30 "run"
>010062	01 1b					.word Command_STOP             & $FFFF ; token $3e31 "stop"
>010064	fd 1a					.word Command_CLEAR            & $FFFF ; token $3e32 "clear"
>010066	5a 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	3c 1c					.word Command_CLS              & $FFFF ; token $3e34 "cls"
>01006a	0a 16					.word Command_PRINT            & $FFFF ; token $3e35 "print"
>01006c	fd 18					.word Command_GOTO             & $FFFF ; token $3e36 "goto"
>01006e	5c 19					.word Command_GOSUB            & $FFFF ; token $3e37 "gosub"
>010070	78 19					.word Command_RETURN           & $FFFF ; token $3e38 "return"
>010072	ba 18					.word Command_ONGOTO           & $FFFF ; token $3e39 "on"
>010074	bd 16					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	db 1b					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	f3 1b					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	07 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	d2 13					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	57 1c					.word Command_LINK             & $FFFF ; token $3e3f "link"
>010080	ee 1a					.word Command_NEW              & $FFFF ; token $3e40 "new"
>010082	d0 12					.word Command_PROC             & $FFFF ; token $3e41 "proc"
>010084	83 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	9a 1c					.word Command_VDU              & $FFFF ; token $3e43 "vdu"
>010088	aa 19					.word Command_REPEAT           & $FFFF ; token $3c44 "repeat"
>01008a	08 1a					.word Command_WHILE            & $FFFF ; token $3c45 "while"
>01008c	56 16					.word Command_IF               & $FFFF ; token $3c46 "if"
>01008e	92 17					.word Command_FOR              & $FFFF ; token $3c47 "for"
>010090	bb 05					.word IllegalToken             & $FFFF ; token $3c48 "defproc"
>010092	3f 1a					.word Command_WEND             & $FFFF ; token $3a49 "wend"
>010094	c1 19					.word Command_UNTIL            & $FFFF ; token $3a4a "until"
>010096	bb 05					.word IllegalToken             & $FFFF ; token $3a4b "then"
>010098	eb 16					.word Handler_ENDIF            & $FFFF ; token $3a4c "endif"
>01009a	fe 17					.word Command_NEXT             & $FFFF ; token $3a4d "next"
>01009c	47 13					.word Command_ENDPROC          & $FFFF ; token $3a4e "endproc"
.01009e					TokenText:
>01009e	02 26					 .text $02,"&"        ; token $2001
>0100a0	02 7c					 .text $02,"|"        ; token $2002
>0100a2	02 5e					 .text $02,"^"        ; token $2003
>0100a4	12 3c					 .text $12,"<"        ; token $2204
>0100a6	12 3e					 .text $12,">"        ; token $2205
>0100a8	12 3d					 .text $12,"="        ; token $2206
>0100aa	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ad	13 3e 3d				 .text $13,">="       ; token $2208
>0100b0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b3	22 2b					 .text $22,"+"        ; token $240a
>0100b5	22 2d					 .text $22,"-"        ; token $240b
>0100b7	32 2a					 .text $32,"*"        ; token $260c
>0100b9	32 2f					 .text $32,"/"        ; token $260d
>0100bb	32 25					 .text $32,"%"        ; token $260e
>0100bd	33 3e 3e				 .text $33,">>"       ; token $260f
>0100c0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c3	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c8	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cd	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d2	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d7	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100dc	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e2	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e8	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100ed	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f2	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f8	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fe	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010104	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010c	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010114	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01011b	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010121	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010129	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010130	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010137	92 2c					 .text $92,","        ; token $3224
>010139	92 3b					 .text $92,";"        ; token $3225
>01013b	92 3a					 .text $92,":"        ; token $3226
>01013d	92 28					 .text $92,"("        ; token $3227
>01013f	92 29					 .text $92,")"        ; token $3228
>010141	92 27					 .text $92,"'"        ; token $3229
>010143	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010146	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>01014b	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014f	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010153	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>01015a	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015e	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010162	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010167	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016d	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010171	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010175	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>01017b	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010180	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010186	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018d	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010190	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010195	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01019a	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019f	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a4	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a9	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ae	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b2	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b7	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bd	f4 56 44 55				 .text $f4,"VDU"      ; token $3e43
>0101c1	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c44
>0101c8	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c45
>0101ce	e3 49 46				 .text $e3,"IF"       ; token $3c46
>0101d1	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c47
>0101d5	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c48
>0101dd	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a49
>0101e2	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a4a
>0101e8	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4b
>0101ed	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4c
>0101f3	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4d
>0101f8	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4e
>010200	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3e43					vduTokenID                       = $3e43
=$3c44					repeatTokenID                    = $3c44
=$3c45					whileTokenID                     = $3c45
=$3c46					ifTokenID                        = $3c46
=$3c47					forTokenID                       = $3c47
=$3c48					defprocTokenID                   = $3c48
=$3a49					wendTokenID                      = $3a49
=$3a4a					untilTokenID                     = $3a4a
=$3a4b					thenTokenID                      = $3a4b
=$3a4c					endifTokenID                     = $3a4c
=$3a4d					nextTokenID                      = $3a4d
=$3a4e					endprocTokenID                   = $3a4e

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010201					Evaluate:
.010201	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.010204	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010207					EvaluateLevel:
.010207	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.01020a	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01020c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01020e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010211	b0 79		bcs $01028c			bcs 	_ELVariable
.010213	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010216	b0 16		bcs $01022e			bcs 	_ELConstant
.010218	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01021b	90 7f		bcc $01029c			bcc 	_ELStringConstant
.01021d	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010220	90 03		bcc $010225			bcc 	_ELConstantShift
.010222	82 94 00	brl $0102b9			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010225					_ELConstantShift:
.010225	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010228	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01022a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01022c	e6 06		inc $06				inc 	DCodePtr
.01022e					_ELConstant:
.01022e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010230	38		sec				sec  								; shift it in the range 0-32767
.010231	e9 00 40	sbc #$4000			sbc 	#$4000
.010234	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010235	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010237	6a		ror a				ror 	a 							; rotate that into the constant value
.010238	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01023a	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01023c	95 20		sta $20,x			sta 	EXSValueH+0,x
.01023e	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010240	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010242	e6 06		inc $06				inc 	DCodePtr
.010244					_ELGotAtom:
.010244	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010246	a8		tay				tay 								; save in Y
.010247	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01024a	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01024d	d0 35		bne $010284			bne 	_ELExit
.01024f	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010256	98		tya				tya 								; get the keyword token back
.010257	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01025a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01025c	90 26		bcc $010284			bcc 	_ELExit 					; precedence too low, then exit.
.01025e	5a		phy				phy 								; save the binary operator on the stack
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	18		clc				clc 								; try the next level up
.010264	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010267	e8		inx				inx 								; calculate the RHS at the next stack level.
.010268	e8		inx				inx
.010269	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01026c	ca		dex				dex
.01026d	ca		dex				dex
.01026e	7a		ply				ply 								; get operator token back into Y
.01026f					_ELExecuteY:
.01026f	98		tya				tya
.010270	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010273	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010274	9b		txy				txy 								; save X in Y
.010275	aa		tax				tax 								; double keyword ID in X
.010276	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01027a	bb		tyx				tyx 								; restore X.
.01027b	8f 80 02 01	sta $010280			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01027f					_ELCallRoutine:
.01027f	20 7f 02	jsr $01027f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010282	80 c0		bra $010244			bra 	_ELGotAtom 					; go round operator level again.
.010284	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010286	0a		asl a				asl 	a
.010287	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010289	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01028b	60		rts				rts
.01028c					_ELVariable:
.01028c	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.01028e	20 4d 03	jsr $01034d			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010291	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010293	94 20		sty $20,x			sty 	EXSValueH+0,x
.010295	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010297	80 ab		bra $010244			bra 	_ELGotAtom
.010299					_ELSyntax
.010299	82 30 03	brl $0105cc			brl 	SyntaxError
.01029c					_ELStringConstant:
.01029c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01029f	f0 f8		beq $010299			beq 	_ELSyntax
.0102a1	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0102a3	1a		inc a				inc 	a
.0102a4	1a		inc a				inc 	a
.0102a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a9	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102ab	18		clc				clc 								; add to string constant.
.0102ac	65 06		adc $06				adc 	DCodePtr
.0102ae	85 06		sta $06				sta 	DCodePtr
.0102b0	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102b2	09 00 80	ora #$8000			ora 	#$8000
.0102b5	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b7	80 8b		bra $010244			bra 	_ELGotAtom
.0102b9					_ELUnaryKeyword:
.0102b9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102bb	a8		tay				tay 								; put the token in Y.
.0102bc	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102be	e6 06		inc $06				inc 	DCodePtr
.0102c0	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102c3	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c6	f0 a7		beq $01026f			beq 	_ELExecuteY					; go back and execute it
.0102c8	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102cb	d0 11		bne $0102de			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102cd	20 04 03	jsr $010304			jsr 	EvaluateNext 				; evaluate the expression
.0102d0	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102d3					_ELCopy:
.0102d3	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102d5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d7	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102db	82 66 ff	brl $010244			brl 	_ELGotAtom 					; and continue.
.0102de					_ELUnaryOperator:
.0102de	5a		phy				phy 								; save the operator on the stack.
.0102df	e8		inx				inx 								; this is like evaluate next
.0102e0	e8		inx				inx
.0102e1	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102e4	20 07 02	jsr $010207			jsr 	EvaluateLevel
.0102e7	ca		dex				dex 								; unwind the stack.
.0102e8	ca		dex				dex
.0102e9	68		pla				pla 								; restore the unary operator.
.0102ea	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102ed	f0 03		beq $0102f2			beq 	_ELMinus
.0102ef	4c cc 05	jmp $0105cc			jmp 	SyntaxError
.0102f2					_ELMinus:
.0102f2	38		sec				sec 								; do the negation calculation.
.0102f3	a9 00 00	lda #$0000			lda 	#0
.0102f6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102fa	a9 00 00	lda #$0000			lda 	#0
.0102fd	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102ff	95 20		sta $20,x			sta 	EXSValueH+0,x
.010301	82 40 ff	brl $010244			brl 	_ELGotAtom					; and continue.
.010304					EvaluateNext:
.010304	e8		inx				inx
.010305	e8		inx				inx
.010306	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010309	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01030c	ca		dex				dex
.01030d	ca		dex				dex
.01030e	60		rts				rts
.01030f					EvaluateInteger:
.01030f	20 01 02	jsr $010201			jsr 	Evaluate
.010312	b0 01		bcs $010315			bcs 	EIType
.010314	60		rts				rts
.010315					EIType:
.010315	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010318	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010320	78 70 65 63 74 65 64 00
.010328					EvaluateNextInteger:
.010328	20 04 03	jsr $010304			jsr 	EvaluateNext
.01032b	b0 e8		bcs $010315			bcs 	EIType
.01032d	60		rts				rts
.01032e					EvaluateString:
.01032e	20 01 02	jsr $010201			jsr 	Evaluate
.010331	90 01		bcc $010334			bcc 	ESType
.010333	60		rts				rts
.010334					ESType:
.010334	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010337	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01033f	78 70 65 63 74 65 64 00
.010347					EvaluateNextString:
.010347	20 04 03	jsr $010304			jsr 	EvaluateNext
.01034a	90 e8		bcc $010334			bcc 	ESType
.01034c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01034d					VariableAccessExpression:
.01034d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01034f	48		pha				pha
.010350	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find the variables
.010353	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010355	90 31		bcc $010388			bcc 	_VANError 					; not found, so report an error.
.010357	68		pla				pla 								; get and save that first token
.010358	48		pha				pha 								; we use it for typing.
.010359	a8		tay				tay 								; put first token in Y.
.01035a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01035d	f0 07		beq $010366			beq 	_VANNotArray
.01035f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010361	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.010364	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010366					_VANNotArray:
.010366	68		pla				pla 								; get the token back.
.010367	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01036a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01036d	f0 0a		beq $010379			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036f	18		clc				clc 								; returning a number, read high data word
.010370	a0 02 00	ldy #$0002			ldy 	#2
.010373	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010375	a8		tay				tay 								; put A into Y (this is the high byte)
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010378	60		rts				rts
.010379					_VANIsString:
.010379	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.01037c	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.01037e	d0 06		bne $010386			bne 	_VANNotEmptyString
.010380	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.010383	18		clc				clc
.010384	65 02		adc $02				adc 	DBaseAddress
.010386					_VANNotEmptyString:
.010386	38		sec				sec
.010387	60		rts				rts
.010388					_VANError:
.010388	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01038b	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010393	20 75 6e 6b 6e 6f 77 6e 00
.01039c					VariableFind:
.01039c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01039e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a1	90 5c		bcc $0103ff			bcc 	_VFError
.0103a3	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a6	b0 11		bcs $0103b9			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a8	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103ab	3a		dec a				dec 	a 							; now 0-25
.0103ac	0a		asl a				asl 	a 							; x 4 and clear carry
.0103ad	0a		asl a				asl 	a
.0103ae	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b1	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b3	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103b5	e6 06		inc $06				inc 	DCodePtr
.0103b7	38		sec				sec 								; return with carry set.
.0103b8	60		rts				rts
.0103b9					_VFSlowVariable:
.0103b9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103bb	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103be	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103bf	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103c0	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c3	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103c5	85 08		sta $08				sta 	DTemp1
.0103c7	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c9	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103cc	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103cd	65 08		adc $08				adc 	DTemp1
.0103cf	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d3					_VFNext:
.0103d3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103d5	f0 26		beq $0103fd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d9	a8		tay				tay 								; read the address of the name at $0002,y
.0103da	b9 02 00	lda $0002,y			lda 	$0002,y
.0103dd	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103df	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103e2					_VFCompare:
.0103e2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103e4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e6	d0 eb		bne $0103d3			bne 	_VFNext 					; if not, go to the next one.
.0103e8	c8		iny				iny 								; advance token pointer
.0103e9	c8		iny				iny
.0103ea	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103ed	d0 f3		bne $0103e2			bne 	_VFCompare
.0103ef	98		tya				tya 								; this is the length of the word.
.0103f0	18		clc				clc 								; so we add it to the code pointer
.0103f1	65 06		adc $06				adc 	DCodePtr
.0103f3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103f5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f7	18		clc				clc 								; four on is the actual data
.0103f8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103fb	38		sec				sec 								; return with CS indicating success
.0103fc	60		rts				rts
.0103fd					_VFFail:
.0103fd	18		clc				clc
.0103fe	60		rts				rts
.0103ff					_VFError:
.0103ff	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010402	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01040a	76 61 72 69 61 62 6c 65 00
.010413					VariableSubscript:
.010413	48		pha				pha		 							; save variable address on stack.
.010414	20 28 03	jsr $010328			jsr		EvaluateNextInteger 		; get the subscript
.010417	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; skip right bracket.
.01041a	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01041d	d0 10		bne $01042f			bne 	_VANSubscript
.01041f	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010421	f0 02		beq $010425			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010423	b0 0a		bcs $01042f			bcs 	_VANSubscript
.010425					_VANSubOkay:
.010425	0a		asl a				asl 	a 							; double lsword
.010426	0a		asl a				asl 	a 							; and again, also clears carry.
.010427	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010429	68		pla				pla 								; restore DVariablePtr
.01042a	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.01042b	1a		inc a				inc 	a
.01042c	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01042e	60		rts				rts
.01042f					_VANSubscript:
.01042f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010432	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>01043a	79 20 53 75 62 73 63 72 69 70 74 00
.010446					VariableCreateNew:
.010446	48		pha				pha 								; save count.
.010447	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010448	0a		asl a				asl 	a 							; 2 x # items.
.010449	0a		asl a				asl 	a 							; 4 x # items.
.01044a					_VCNotSingle:
.01044a	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01044c	b2 06		lda ($06)			lda 	(DCodePtr) 					; get first token.
.01044e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010451	f0 04		beq $010457			beq 	_VCNotArray
.010453	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010455	e6 08		inc $08				inc 	DTemp1
.010457					_VCNotArray:
.010457	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01045a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01045c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045e	18		clc				clc 								; add 4 for link and name words
.01045f	69 04 00	adc #$0004			adc 	#4
.010462	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010464	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010466	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010468					_VCErase:
.010468	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.01046b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046e	c8		iny				iny
.01046f	c8		iny				iny
.010470	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010472	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010474	d0 f2		bne $010468			bne 	_VCErase
.010476	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010478	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01047a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01047d	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010480	18		clc				clc
.010481	65 02		adc $02				adc 	DBaseAddress
.010483	85 08		sta $08				sta 	DTemp1
.010485	a5 06		lda $06				lda 	DCodePtr 					; get the address of the token.
.010487	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010489	b0 03		bcs $01048e			bcs 	_VCDontClone 				; because the variable being created has its identifier
.01048b	20 ac 04	jsr $0104ac			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.01048e					_VCDontClone:
.01048e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010491	68		pla				pla 								; restore count and store (if nonzero)
.010492	f0 03		beq $010497			beq 	_VCNotArray2
.010494	99 04 00	sta $0004,y			sta 	$0004,y
.010497					_VCNotArray2:
.010497	98		tya				tya 								; update the head link
.010498	92 20		sta ($20)			sta 	(DHashTablePtr)
.01049a	18		clc				clc 								; advance pointer to the data bit.
.01049b	69 04 00	adc #$0004			adc 	#4
.01049e	48		pha				pha 								; save on stack.
.01049f					_VCSkipToken:
.01049f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0104a1	e6 06		inc $06				inc 	DCodePtr
.0104a3	e6 06		inc $06				inc 	DCodePtr
.0104a5	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0104a8	d0 f5		bne $01049f			bne 	_VCSkipToken
.0104aa							l
.0104aa	68		pla				pla 								; restore data address
.0104ab	60		rts				rts 								; and done.
.0104ac					VCCloneIdentifier:
.0104ac	da		phx				phx 								; save XY
.0104ad	5a		phy				phy
.0104ae	aa		tax				tax 								; identifier address in Y.
.0104af	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104b2	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104b4	48		pha				pha
.0104b5					_VCCloneLoop:
.0104b5	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104b8	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ba	48		pha				pha 								; save on stack
.0104bb	1a		inc a				inc 	a 							; space for one token.
.0104bc	1a		inc a				inc 	a
.0104bd	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104bf	7a		ply				ply 								; address of word in Y
.0104c0	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104c3	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104c6	e8		inx				inx 								; advance the token pointer
.0104c7	e8		inx				inx
.0104c8	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104cb	d0 e8		bne $0104b5			bne 	_VCCloneLoop
.0104cd	68		pla				pla 								; restore start address
.0104ce	7a		ply				ply 								; and the others
.0104cf	fa		plx				plx
.0104d0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/editline.asm

.0104d1					LineDelete:
.0104d1	aa		tax				tax 	 							; this is the one we're looking for ....
.0104d2	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104d4	18		clc				clc
.0104d5	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104d8	a8		tay				tay
.0104d9					_LDLoop:
.0104d9	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104dc	f0 2d		beq $01050b			beq 	_LDExit						; exit if zero ; line does not exist
.0104de	8a		txa				txa 								; found a match
.0104df	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104e2	f0 08		beq $0104ec			beq		_LDFound
.0104e4	98		tya				tya 								; follow the link.
.0104e5	18		clc				clc
.0104e6	79 00 00	adc $0000,y			adc 	$0000,y
.0104e9	a8		tay				tay
.0104ea	80 ed		bra $0104d9			bra 	_LDLoop
.0104ec					_LDFound:
.0104ec	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104ee	98		tya				tya 								; follow link to next.
.0104ef	18		clc				clc
.0104f0	79 00 00	adc $0000,y			adc 	$0000,y
.0104f3	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104f5	20 44 1b	jsr $011b44			jsr 	FindCodeEnd 				; find the end of the code.
.0104f8	38		sec				sec
.0104f9	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104fb	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104fc	1a		inc a				inc 	a
.0104fd	aa		tax				tax
.0104fe	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.010501	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.010503	91 08		sta ($08),y			sta 	(DTemp1),y
.010505	c8		iny				iny
.010506	c8		iny				iny
.010507	ca		dex				dex
.010508	ca		dex				dex
.010509	d0 f6		bne $010501			bne 	_LDCopy
.01050b					_LDExit:
.01050b	60		rts				rts
.01050c					LineInsert:
.01050c	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.01050e	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010510	a0 00 00	ldy #$0000			ldy 	#0
.010513					_LIFindLength:
.010513	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010515	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010518	f0 10		beq $01052a			beq 	_LIFindEnd
.01051a	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01051d	90 04		bcc $010523			bcc 	_LIQString
.01051f	c8		iny				iny 								; otherwise just skip it.
.010520	c8		iny				iny
.010521	80 f0		bra $010513			bra 	_LIFindLength
.010523					_LIQString:
.010523	98		tya				tya 								; skip quoted strings
.010524	18		clc				clc
.010525	71 08		adc ($08),y			adc 	(DTemp1),y
.010527	a8		tay				tay
.010528	80 e9		bra $010513			bra 	_LIFindLength
.01052a					_LIFindEnd:
.01052a	98		tya				tya 								; the tokens in the line
.01052b	18		clc				clc
.01052c	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01052f	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010531	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010534	18		clc				clc
.010535	65 02		adc $02				adc 	DBaseAddress
.010537	a8		tay				tay
.010538					_LIFindInsertPoint:
.010538	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01053b	f0 0f		beq $01054c			beq		_LIFoundInsertPoint
.01053d	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010540	c5 0c		cmp $0c				cmp 	DTemp2
.010542	b0 08		bcs $01054c			bcs 	_LIFoundInsertPoint
.010544	98		tya				tya 								; if < go to the next line.
.010545	18		clc				clc
.010546	79 00 00	adc $0000,y			adc 	$0000,y
.010549	a8		tay				tay
.01054a	80 ec		bra $010538			bra 	_LIFindInsertPoint
.01054c					_LIFoundInsertPoint:
.01054c	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01054e	20 44 1b	jsr $011b44			jsr 	FindCodeEnd 				; get the end of the code.
.010551	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010553	18		clc				clc
.010554	65 24		adc $24				adc 	DTemp3
.010556	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010558					_LICopyMove:
.010558	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01055a	92 34		sta ($34)			sta 	(DTemp4+2)
.01055c	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01055e	c5 36		cmp $36				cmp 	DTemp5
.010560	f0 0a		beq $01056c			beq 	_LICopyMoveOver
.010562	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010564	c6 32		dec $32				dec 	DTemp4
.010566	c6 34		dec $34				dec 	DTemp4+2
.010568	c6 34		dec $34				dec 	DTemp4+2
.01056a	80 ec		bra $010558			bra 	_LICopyMove
.01056c					_LICopyMoveOver:
.01056c	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01056e	92 36		sta ($36)			sta 	(DTemp5)
.010570	a0 02 00	ldy #$0002			ldy 	#2
.010573	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010575	91 36		sta ($36),y			sta 	(DTemp5),y
.010577	a0 04 00	ldy #$0004			ldy 	#4
.01057a					_LICopyTokens:
.01057a	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01057c	91 36		sta ($36),y			sta 	(DTemp5),y
.01057e	c8		iny				iny
.01057f	c8		iny				iny
.010580	e6 08		inc $08				inc 	DTemp1
.010582	e6 08		inc $08				inc 	DTemp1
.010584	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010586	c6 24		dec $24				dec 	DTemp3
.010588	a5 24		lda $24				lda 	DTemp3
.01058a	c9 04 00	cmp #$0004			cmp 	#4
.01058d	d0 eb		bne $01057a			bne 	_LICopyTokens
.01058f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010590					ErrorHandler:
.010590	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010592	fa		plx				plx 								; address of error message -1
.010593	e8		inx				inx 								; error message.
.010594	20 49 06	jsr $010649			jsr 	PrintROMMessage 			; print message in ROM
.010597	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010599	f0 15		beq $0105b0			beq 	_EHEndMessage
.01059b	a2 b6 05	ldx #$05b6			ldx 	#_EHAt & $FFFF 				; print " at "
.01059e	20 49 06	jsr $010649			jsr 	PrintROMMessage
.0105a1	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0105a3	a0 00 00	ldy #$0000			ldy 	#0
.0105a6	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105a9	20 c9 10	jsr $0110c9			jsr 	ConvertToString 			; convert and print it.
.0105ac	a8		tay				tay
.0105ad	20 67 06	jsr $010667			jsr 	PrintBASICString
.0105b0					_EHEndMessage:
.0105b0	20 32 1d	jsr $011d32			jsr 	HWNewLine
.0105b3	4c 36 1e	jmp $011e36			jmp 	NextCommand 				; get next command.
>0105b6	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105bb					IllegalToken:
.0105bb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105be	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105c6	54 6f 6b 65 6e 00
.0105cc					SyntaxError:
.0105cc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105cf	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105d7	72 72 6f 72 00
.0105dc					OutOfMemoryError:
.0105dc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105df	4f 75 74 20 6f 66 20 6d				.text 	"Out of memory",$00 								; with this message
>0105e7	65 6d 6f 72 79 00
.0105ed					ExpectToken:
.0105ed	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105ef	d0 05		bne $0105f6			bne 	_CTKError					; error if not
.0105f1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105f3	e6 06		inc $06				inc 	DCodePtr
.0105f5	60		rts				rts
.0105f6					_CTKError:
.0105f6	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105f9	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010601	74 6f 6b 65 6e 00
.010607					ExpectRightBracket:
.010607	48		pha				pha
.010608	a9 28 32	lda #$3228			lda 	#rparenTokenID
.01060b	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.01060e	68		pla				pla
.01060f	60		rts				rts
.010610					ExpectComma:
.010610	48		pha				pha
.010611	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010614	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.010617	68		pla				pla
.010618	60		rts				rts
.010619					CheckBothNumeric:
.010619	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01061b	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01061d	30 01		bmi $010620			bmi 	_CBNFail 					; need to both be zero in bit 15
.01061f	60		rts				rts
.010620					_CBNFail:
.010620	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010623	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01062b	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010639					ResetTypeInteger:
.010639	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01063b	29 ff 7f	and #$7fff			and 	#$7FFF
.01063e	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010640	60		rts				rts
.010641					ResetTypeString:
.010641	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010643	09 00 80	ora #$8000			ora 	#$8000
.010646	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010648	60		rts				rts
.010649					PrintROMMessage:
.010649	48		pha				pha
.01064a	da		phx				phx
.01064b					_PRMLoop:
.01064b	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01064f	29 ff 00	and #$00ff			and 	#$00FF
.010652	f0 10		beq $010664			beq 	_PRMExit
.010654	c9 0d 00	cmp #$000d			cmp 	#13
.010657	d0 05		bne $01065e			bne 	_PRMChar
.010659	20 32 1d	jsr $011d32			jsr 	HWNewLine
.01065c	80 03		bra $010661			bra 	_PRMNext
.01065e					_PRMChar:
.01065e	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar
.010661					_PRMNext:
.010661	e8		inx				inx
.010662	80 e7		bra $01064b			bra 	_PRMLoop
.010664					_PRMExit:
.010664	fa		plx				plx
.010665	68		pla				pla
.010666	60		rts				rts
.010667					PrintBASICString:
.010667	48		pha				pha
.010668	da		phx				phx
.010669	5a		phy				phy
.01066a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01066d	29 ff 00	and #$00ff			and 	#$00FF
.010670	f0 0b		beq $01067d			beq 	_PBSExit 					; null string
.010672	aa		tax				tax
.010673					_PBSLoop:
.010673	c8		iny				iny
.010674	b9 00 00	lda $0000,y			lda 	$0000,y
.010677	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar
.01067a	ca		dex				dex
.01067b	d0 f6		bne $010673			bne 	_PBSLoop
.01067d					_PBSExit:
.01067d	7a		ply				ply
.01067e	fa		plx				plx
.01067f	68		pla				pla
.010680	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringconcrete.asm

.010681					StringResetPermanent:
.010681	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010683	a8		tay				tay
.010684	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.010687	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010689	60		rts				rts
.01068a					StringAssign:
.01068a	da		phx				phx 								; save X
.01068b	aa		tax				tax 								; new string to X.
.01068c	b9 00 00	lda $0000,y			lda 	$0000,y 					; does the string have an address yet.
.01068f	f0 41		beq $0106d2			beq 	_SAAllocate 				; if not , allocate space for it and copy the string.
.010691	5a		phy				phy
.010692	b9 00 00	lda $0000,y			lda 	$0000,y 					; compare calculate saved address - high memory pointer
.010695	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.010697	a8		tay				tay 								; read the max available length of the old string
.010698	88		dey				dey  								; CC still contains first allocation check
.010699	b9 00 00	lda $0000,y			lda 	$0000,y
.01069c	7a		ply				ply 								; restore Y
.01069d	90 33		bcc $0106d2			bcc 	_SAAllocate					; if < high memory pointer, first allocation.
.01069f	29 ff 00	and #$00ff			and 	#$00FF 						; max length of old string
.0106a2	e2 20		sep #$20			sep 	#$20
.0106a4	dd 00 00	cmp $0000,x			cmp 	@w$0000,x 					; compare against length of new string
.0106a7	c2 20		rep #$20			rep 	#$20
.0106a9	b0 5a		bcs $010705			bcs 	_SACopyString 				; just copy it in if old max length >= new
.0106ab	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the address of the string.
.0106ae	3a		dec a				dec 	a 							; if bottom, compare the previous byte address
.0106af	5a		phy				phy 								; which is the max length.
.0106b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106b3	51 02		eor ($02),y			eor 	(DBaseAddress),y
.0106b5	7a		ply				ply
.0106b6	09 00 00	ora #$0000			ora 	#$0000 						; if not, then allocate memory.
.0106b9	d0 17		bne $0106d2			bne 	_SAAllocate
.0106bb	5a		phy				phy
.0106bc	b9 00 00	lda $0000,y			lda 	$0000,y 					; address of old string
.0106bf	a8		tay				tay 								; to Y
.0106c0	88		dey				dey 								; get maximum length.
.0106c1	b9 00 00	lda $0000,y			lda 	$0000,y
.0106c4	29 ff 00	and #$00ff			and 	#$00FF
.0106c7	1a		inc a				inc 	a 							; add 2 (string,max)
.0106c8	1a		inc a				inc 	a
.0106c9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; return memory back
.0106cc	18		clc				clc
.0106cd	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106cf	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106d1	7a		ply				ply
.0106d2					_SAAllocate:
.0106d2	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get the length of the string
.0106d5	29 ff 00	and #$00ff			and 	#$00FF
.0106d8	18		clc				clc
.0106d9	69 08 00	adc #$0008			adc 	#8 							; allocate extra space if needed.
.0106dc	c9 ff 00	cmp #$00ff			cmp 	#255 						; can't be larger than this.
.0106df	90 03		bcc $0106e4			bcc 	_SASizeOkay
.0106e1	a9 ff 00	lda #$00ff			lda 	#255
.0106e4					_SASizeOkay:
.0106e4	5a		phy				phy 								; push [string] on the stack.
.0106e5	48		pha				pha 								; push largest string size on the stack.
.0106e6	1a		inc a				inc 	a  							; one more for the string size byte
.0106e7	1a		inc a				inc 	a 							; one more for the maximum size byte
.0106e8	49 ff ff	eor #$ffff			eor 	#$FFFF 						; subtract from the high memory pointer
.0106eb	38		sec				sec
.0106ec	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106ef	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106f1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106f3	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; out of memory ? - if below the lowmemorypointer
.0106f6	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y
.0106f8	90 29		bcc $010723			bcc 	_SAMemory
.0106fa	a8		tay				tay 								; address of start of space in Y.
.0106fb	68		pla				pla 								; restore largest string size and save it
.0106fc	99 00 00	sta $0000,y			sta 	@w$0000,y 					; doesn't matter it's a word.
.0106ff	c8		iny				iny 								; Y now points to the first byte of the string we'll copy
.010700	98		tya				tya 								; in A now
.010701	7a		ply				ply 								; Y is the address of the variable pointer.
.010702	99 00 00	sta $0000,y			sta 	@w$0000,y 					; make that pointer the first byte
.010705					_SACopyString
.010705	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; get length
.010708	29 ff 00	and #$00ff			and 	#$00FF
.01070b	85 08		sta $08				sta 	DTemp1 						; save it.
.01070d	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; Y now contains the actual address of the string
.010710	a8		tay				tay
.010711					_SACopyStringLoop:
.010711	e2 20		sep #$20			sep 	#$20
.010713	bd 00 00	lda $0000,x			lda 	@w$0000,x
.010716	99 00 00	sta $0000,y			sta 	@w$0000,y
.010719	c2 20		rep #$20			rep 	#$20
.01071b	e8		inx				inx
.01071c	c8		iny				iny
.01071d	c6 08		dec $08				dec 	DTemp1
.01071f	10 f0		bpl $010711			bpl 	_SACopyStringLoop
.010721	fa		plx				plx 								; restore X
.010722	60		rts				rts
.010723					_SAMemory:
.010723	82 b6 fe	brl $0105dc			brl 	OutOfMemoryError

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringtemp.asm

.010726					StringTempAllocate:
.010726	48		pha				pha
.010727	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010729	d0 09		bne $010734			bne 	_STANoReset
.01072b	5a		phy				phy 								; reset the temp string pointer.
.01072c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01072f	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010731	85 16		sta $16				sta 	DTempStringPointer
.010733	7a		ply				ply
.010734					_STANoReset:
.010734	68		pla				pla 								; get length.
.010735	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010738	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01073b	18		clc				clc 								; this adds one, for the length.
.01073c	65 16		adc $16				adc 	DTempStringPointer
.01073e	85 16		sta $16				sta 	DTempStringPointer
.010740	48		pha				pha 								; save start address
.010741	a9 00 00	lda #$0000			lda 	#$0000
.010744	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010746	92 16		sta ($16)			sta		(DTempStringPointer)
.010748	c2 20		rep #$20			rep 	#$20
.01074a	68		pla				pla 								; restore start address
.01074b	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01074d	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01074f	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010751	60		rts				rts
.010752					StringWriteCharacter:
.010752	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010754	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010756	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010758	1a		inc a				inc 	a
.010759	92 18		sta ($18)			sta 	(DStartTempString)
.01075b	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01075d	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01075f	60		rts				rts
.010760					StringCreateCopy:
.010760	a8		tay				tay 								; put pointer to string in Y
.010761	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010764	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010767	f0 17		beq $010780			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010769	da		phx				phx 								; save X and put the character count in X
.01076a	aa		tax				tax
.01076b					_SCCCopy:
.01076b	c8		iny				iny 								; advance and read (first time skips length)
.01076c	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01076e	b9 00 00	lda $0000,y			lda 	$0000,y
.010771	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010773	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010775	1a		inc a				inc 	a
.010776	92 18		sta ($18)			sta 	(DStartTempString)
.010778	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01077a	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01077c	ca		dex				dex 								; do X times
.01077d	d0 ec		bne $01076b			bne 	_SCCCopy
.01077f	fa		plx				plx
.010780					_SCCExit:
.010780	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.010781					Tokenise:
.010781	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010783	84 0a		sty $0a				sty 	DTemp1+2
.010785	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010788	18		clc				clc
.010789	65 02		adc $02				adc 	DBaseAddress
.01078b	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01078d	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.010790	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.010793					_TOKCap:
.010793	c8		iny				iny 								; go to next
.010794	b7 08		lda [$08],y			lda 	[DTemp1],y
.010796	29 ff 00	and #$00ff			and 	#$00FF
.010799	f0 22		beq $0107bd			beq 	_TOKEndCap
.01079b	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.01079e	d0 01		bne $0107a1			bne 	_TOKNotQuote
.0107a0	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107a1					_TOKNotQuote:
.0107a1	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107a4	90 ed		bcc $010793			bcc 	_TOKCap
.0107a6	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107a9	b0 e8		bcs $010793			bcs 	_TOKCap
.0107ab	8a		txa				txa 								; check if in quotes
.0107ac	4a		lsr a				lsr 	a
.0107ad	b0 e4		bcs $010793			bcs 	_TOKCap
.0107af	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107b1	38		sec				sec
.0107b2	e9 20 00	sbc #$0020			sbc 	#32
.0107b5	e2 20		sep #$20			sep 	#$20
.0107b7	97 08		sta [$08],y			sta 	[DTemp1],y
.0107b9	c2 20		rep #$20			rep 	#$20
.0107bb	80 d6		bra $010793			bra 	_TOKCap
.0107bd					_TOKEndCap:
.0107bd	c6 08		dec $08				dec 	DTemp1
.0107bf					_TOKMainNext:
.0107bf	e6 08		inc $08				inc 	DTemp1
.0107c1					_TOKMainLoop:
.0107c1	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107c3	29 ff 00	and #$00ff			and 	#$00FF
.0107c6	c9 20 00	cmp #$0020			cmp 	#32
.0107c9	90 1d		bcc $0107e8			bcc 	_TOKExit 					; 0-31 exit.
.0107cb	f0 f2		beq $0107bf			beq 	_TOKMainNext 				; 32 (space) skip.
.0107cd	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107d0	f0 1d		beq $0107ef			beq 	_TOKString
.0107d2	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107d5	90 1d		bcc $0107f4			bcc 	_TOKPunctuation
.0107d7	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107da	90 42		bcc $01081e			bcc 	_TOKNumber
.0107dc	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107df	90 13		bcc $0107f4			bcc 	_TOKPunctuation
.0107e1	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107e4	90 3d		bcc $010823			bcc 	_TOKIdentifier
.0107e6	80 0c		bra $0107f4			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107e8					_TOKExit:
.0107e8	a9 00 00	lda #$0000			lda 	#$0000
.0107eb	20 28 08	jsr $010828			jsr 	TOKWriteToken
.0107ee	60		rts				rts
.0107ef					_TOKString:
.0107ef	20 c6 08	jsr $0108c6			jsr 	TOKQuotedString
.0107f2	80 cd		bra $0107c1			bra 	_TOKMainLoop
.0107f4					_TOKPunctuation:
.0107f4	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.0107f7	20 2d 09	jsr $01092d			jsr 	TOKKeywordSearch
.0107fa	b0 1d		bcs $010819			bcs 	_TOKFoundPunctuation
.0107fc	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.0107ff	20 2d 09	jsr $01092d			jsr 	TOKKeywordSearch
.010802	b0 15		bcs $010819			bcs 	_TOKFoundPunctuation
.010804	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010807	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01080f	61 72 73 65 20 6c 69 6e 65 00
.010819					_TOKFoundPunctuation:
.010819	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; output the token and go round again.
.01081c	80 a3		bra $0107c1			bra 	_TOKMainLoop
.01081e					_TOKNumber:
.01081e	20 47 08	jsr $010847			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010821	80 9e		bra $0107c1			bra 	_TOKMainLoop
.010823					_TOKIdentifier:
.010823	20 88 09	jsr $010988			jsr 	TOKIdentifier
.010826	80 99		bra $0107c1			bra 	_TOKMainLoop
.010828					TOKWriteToken:
.010828	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01082a	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.01082c	e6 0c		inc $0c				inc 	DTemp2
.01082e	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010830	29 ff 00	and #$00ff			and 	#$00FF
.010833	f0 01		beq $010836			beq 	_TOKWriteOverflow
.010835	60		rts				rts
.010836					_TOKWriteOverflow:
.010836	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010839	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010841	20 6c 6f 6e 67 00
.010847					TOKInteger:
.010847	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010849	64 26		stz $26				stz 	DTemp3+2
.01084b					_TOKINLoop:
.01084b	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01084d	48		pha				pha
.01084e	a5 24		lda $24				lda 	DTemp3
.010850	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010852	26 26		rol $26				rol 	DTemp3+2
.010854	06 24		asl $24				asl 	DTemp3
.010856	26 26		rol $26				rol 	DTemp3+2
.010858	18		clc				clc
.010859	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.01085b	85 24		sta $24				sta 	DTemp3
.01085d	68		pla				pla
.01085e	65 26		adc $26				adc 	DTemp3+2
.010860	85 26		sta $26				sta 	DTemp3+2
.010862	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010864	26 26		rol $26				rol 	DTemp3+2
.010866	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010868	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.01086b	d0 44		bne $0108b1			bne 	_TOKINSize
.01086d	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01086f	29 0f 00	and #$000f			and 	#15
.010872	18		clc				clc
.010873	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010875	85 24		sta $24				sta 	DTemp3
.010877	90 02		bcc $01087b			bcc 	_TOKINNoCarry
.010879	e6 26		inc $26				inc 	DTemp3+2
.01087b					_TOKINNoCarry:
.01087b	e6 08		inc $08				inc 	DTemp1 						; look at next
.01087d	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01087f	29 ff 00	and #$00ff			and 	#$00FF
.010882	c9 30 00	cmp #$0030			cmp 	#"0"
.010885	90 05		bcc $01088c			bcc 	_TOKINGotInteger
.010887	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01088a	90 bf		bcc $01084b			bcc		_TOKINLoop
.01088c					_TOKINGotInteger:
.01088c	a5 24		lda $24				lda 	DTemp3 						; lower word
.01088e	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.010891	18		clc				clc
.010892	69 00 40	adc #$4000			adc 	#$4000
.010895	48		pha				pha 								; save it.
.010896	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.010898	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.01089a	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.01089c	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.01089f	b0 10		bcs $0108b1			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108a1	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108a4	f0 06		beq $0108ac			beq 	_TOKINNoShift 				; don't need constant shift.
.0108a6	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108a9	20 28 08	jsr $010828			jsr 	TOKWriteToken
.0108ac					_TOKINNoShift:
.0108ac	68		pla				pla 								; get lower its token
.0108ad	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; output it
.0108b0	60		rts				rts
.0108b1					_TOKINSize:
.0108b1	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0108b4	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108bc	74 6f 6f 20 6c 61 72 67 65 00
.0108c6					TOKQuotedString:
.0108c6	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108c8	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108ca	85 32		sta $32				sta 	DTemp4
.0108cc	a5 0a		lda $0a				lda 	DTemp1+2
.0108ce	85 34		sta $34				sta 	DTemp4+2
.0108d0					_TOKQFindSize:
.0108d0	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108d2	e6 08		inc $08				inc 	DTemp1
.0108d4	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108d7	f0 3b		beq $010914			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108d9	c9 22 00	cmp #$0022			cmp 	#34
.0108dc	d0 f2		bne $0108d0			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108de	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108e0	38		sec				sec
.0108e1	e5 32		sbc $32				sbc 	DTemp4
.0108e3	3a		dec a				dec 	a 							; one less character for closing quote
.0108e4	85 26		sta $26				sta 	DTemp3+2
.0108e6	18		clc				clc
.0108e7	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108ea	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108ed	20 28 08	jsr $010828			jsr 	TOKWriteToken
.0108f0	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.0108f2	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108f5	c6 0c		dec $0c				dec 	DTemp2
.0108f7	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.0108f9	f0 0f		beq $01090a			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.0108fb					_TOKQWriteString:
.0108fb	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.0108fd	29 ff 00	and #$00ff			and 	#$00FF
.010900	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; effectively a byte-write.
.010903	c6 0c		dec $0c				dec 	DTemp2
.010905	e6 32		inc $32				inc 	DTemp4 						; advance character
.010907	ca		dex				dex 								; do X times
.010908	d0 f1		bne $0108fb			bne 	_TOKQWriteString
.01090a					_TOKQWriteEnd:
.01090a	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01090c	29 01 00	and #$0001			and 	#1
.01090f	f0 02		beq $010913			beq 	_TOKQExit
.010911	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010913					_TOKQExit:
.010913	60		rts				rts
.010914					_TOQImbalance:
.010914	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010917	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01091f	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01092d					TOKKeywordSearch:
.01092d	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01092f	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010932	85 34		sta $34				sta 	DTemp4+2
.010934	a2 00 00	ldx #$0000			ldx 	#0
.010937					_TOKScan:
.010937	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; read the first byte
.01093b	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01093e	f0 46		beq $010986			beq 	_TOKFail 					; if zero then we have failed.
.010940	3a		dec a				dec 	a 							; -1 gives the length.
.010941	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010943	d0 2f		bne $010974			bne 	_TOKNext 					; no, then skip to next token.
.010945	da		phx				phx 								; save X
.010946	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010949					_TOKCompare:
.010949	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01094b	5f 9f 00 01	eor $01009f,x			eor 	TokenText+1,x
.01094f	29 ff 00	and #$00ff			and 	#$00FF
.010952	d0 1f		bne $010973			bne 	_TOKPopNext 				; if different, pop and goto next.
.010954	e8		inx				inx 								; bump X and Y.
.010955	c8		iny				iny
.010956	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010958	d0 ef		bne $010949			bne 	_TOKCompare
.01095a	98		tya				tya 								; add length to the text pointer
.01095b	18		clc				clc
.01095c	65 08		adc $08				adc 	DTemp1
.01095e	85 08		sta $08				sta 	DTemp1
.010960	fa		plx				plx 								; restore X.
.010961	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the type/token bit.
.010965	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010968	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010969	4a		lsr a				lsr		a
.01096a	4a		lsr a				lsr 	a
.01096b	eb		xba				xba
.01096c	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01096e	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010971	38		sec				sec
.010972	60		rts				rts
.010973					_TOKPopNext:
.010973	fa		plx				plx 								; restore X.
.010974					_TOKNext:
.010974	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the token skip again.
.010978	29 0f 00	and #$000f			and 	#$000F
.01097b	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01097d	8a		txa				txa
.01097e	18		clc				clc
.01097f	65 14		adc $14				adc 	DSignCount
.010981	aa		tax				tax
.010982	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010984	80 b1		bra $010937			bra 	_TOKScan
.010986					_TOKFail:
.010986	18		clc				clc
.010987	60		rts				rts
.010988					TOKIdentifier:
.010988	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.01098a	85 24		sta $24				sta 	DTemp3
.01098c					_TOKIFindLength:
.01098c	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01098e	a7 08		lda [$08]			lda 	[DTemp1]
.010990	29 ff 00	and #$00ff			and 	#$00FF
.010993	20 33 0a	jsr $010a33			jsr 	TOKIsIdentifierCharacter
.010996	b0 f4		bcs $01098c			bcs 	_TOKIFindLength
.010998	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.01099a	38		sec				sec
.01099b	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.01099d	85 36		sta $36				sta 	DTemp5
.01099f	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109a1	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109a4	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109a6	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109a8	29 ff 00	and #$00ff			and 	#$00FF
.0109ab	c9 24 00	cmp #$0024			cmp 	#"$"
.0109ae	d0 0b		bne $0109bb			bne 	_TOKINotString
.0109b0	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109b2	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109b4	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109b6	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109b9	85 26		sta $26				sta 	DTemp3+2
.0109bb					_TOKINotString:
.0109bb	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109bd	29 ff 00	and #$00ff			and 	#$00FF
.0109c0	c9 28 00	cmp #$0028			cmp 	#"("
.0109c3	d0 0b		bne $0109d0			bne 	_TOKINotArray
.0109c5	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109c7	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109c9	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109cb	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109ce	85 26		sta $26				sta 	DTemp3+2
.0109d0					_TOKINotArray:
.0109d0	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109d2	85 08		sta $08				sta 	DTemp1
.0109d4	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109d6	20 2d 09	jsr $01092d			jsr 	TOKKeywordSearch
.0109d9	90 04		bcc $0109df			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109db	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109de	60		rts				rts
.0109df					_TOKIIdentifier:
.0109df	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109e1	e6 08		inc $08				inc 	DTemp1
.0109e3	20 1f 0a	jsr $010a1f			jsr		_TOKIToConstant 			; convert to range 0-35
.0109e6	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109e8	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109ea	f0 1d		beq $010a09			beq 	_TOKINoSecond
.0109ec	48		pha				pha 								; save current on stack.
.0109ed	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109ef	e6 08		inc $08				inc 	DTemp1
.0109f1	20 1f 0a	jsr $010a1f			jsr		_TOKIToConstant 			; convert to range 0-35
.0109f4	85 14		sta $14				sta 	DSignCount 					; save it.
.0109f6	0a		asl a				asl 	a 							; x 4
.0109f7	0a		asl a				asl 	a
.0109f8	65 14		adc $14				adc 	DSignCount 					; x 5
.0109fa	0a		asl a				asl 	a 							; x 10
.0109fb	65 14		adc $14				adc 	DSignCount 					; x 11
.0109fd	0a		asl a				asl 	a 							; x 22
.0109fe	0a		asl a				asl 	a 							; x 44
.0109ff	65 14		adc $14				adc 	DSignCount 					; x 45
.010a01	85 14		sta $14				sta 	DSignCount
.010a03	68		pla				pla 								; get old token and add x 45
.010a04	18		clc				clc
.010a05	65 14		adc $14				adc 	DSignCount
.010a07	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a09					_TOKINoSecond:
.010a09	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a0b	f0 03		beq $010a10			beq 	_TOKINotLast				; if yes
.010a0d	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a10					_TOKINotLast:
.010a10	20 28 08	jsr $010828			jsr 	TOKWriteToken 				; output the token
.010a13	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a15	d0 c8		bne $0109df			bne 	_TOKIIdentifier
.010a17					_TOKIOut:
.010a17	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a19	18		clc				clc
.010a1a	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a1c	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a1e	60		rts				rts
.010a1f					_TOKIToConstant:
.010a1f	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a22	c9 41 00	cmp #$0041			cmp 	#65
.010a25	90 04		bcc $010a2b			bcc 	_TOKITInteger
.010a27	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a2a	60		rts				rts
.010a2b					_TOKITInteger:
.010a2b	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a2e	18		clc				clc
.010a2f	69 1b 00	adc #$001b			adc 	#27
.010a32	60		rts				rts
.010a33					TOKIsIdentifierCharacter:
.010a33	c9 30 00	cmp #$0030			cmp 	#"0"
.010a36	90 0f		bcc $010a47			bcc 	_TOKIIFail
.010a38	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a3b	90 0c		bcc $010a49			bcc 	_TOKIIOk
.010a3d	c9 41 00	cmp #$0041			cmp 	#"A"
.010a40	90 05		bcc $010a47			bcc 	_TOKIIFail
.010a42	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a45	90 02		bcc $010a49			bcc 	_TOKIIOk
.010a47					_TOKIIFail:
.010a47	18		clc				clc
.010a48	60		rts				rts
.010a49					_TOKIIOk:
.010a49	38		sec				sec
.010a4a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010a4b					Binary_Add:
.010a4b	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a4d	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a4f	30 12		bmi $010a63		bmi 	_BATypeError
.010a51	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a53	30 3f		bmi $010a94		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a55	18		clc			clc 										; add the results
.010a56	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a58	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a5a	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a5c	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a5e	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a60	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a62	60		rts			rts
.010a63					_BATypeError:
.010a63	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010a66	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a6e	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a7e	65 73 00
.010a81					_BALengthError:
.010a81	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010a84	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a8c	6f 6f 20 6c 6f 6e 67 00
.010a94					_BAConcatenateString:
.010a94	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a96	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a98	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a9a	85 0c		sta $0c			sta 	DTemp2
.010a9c	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a9e	18		clc			clc 										; work out the total length
.010a9f	b2 08		lda ($08)		lda 	(DTemp1)
.010aa1	72 0c		adc ($0c)		adc 	(DTemp2)
.010aa3	b0 14		bcs $010ab9		bcs 	_BAConcatLengthError 				; string is too long.
.010aa5	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010aa7	20 26 07	jsr $010726		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010aaa	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010aac	74 20		stz $20,x		stz 	EXSValueH+0,x
.010aae	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010ab0	20 60 07	jsr $010760		jsr 	StringCreateCopy
.010ab3	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010ab5	20 60 07	jsr $010760		jsr 	StringCreateCopy
.010ab8	60		rts			rts
.010ab9					_BAConcatLengthError:
.010ab9	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010abc	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ac4	6f 6f 20 6c 6f 6e 67 00
.010acc					Binary_Subtract:
.010acc	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010acf	38		sec			sec
.010ad0	b5 00		lda $00,x		lda		EXSValueL+0,x
.010ad2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ad4	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ad6	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ad8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ada	95 20		sta $20,x		sta 	EXSValueH+0,x
.010adc	60		rts			rts
.010add					Binary_ShiftRight:
.010add	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010ae0	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ae2	29 3f 00	and #$003f		and 	#63
.010ae5	f0 07		beq $010aee		beq		_Binary_SRExit
.010ae7					_Binary_SRLoop:
.010ae7	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010ae9	76 00		ror $00,x		ror 	EXSValueL+0,x
.010aeb	3a		dec a			dec 	a
.010aec	d0 f9		bne $010ae7		bne 	_Binary_SRLoop
.010aee					_Binary_SRExit:
.010aee	60		rts			rts
.010aef					Binary_ShiftLeft:
.010aef	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010af2	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010af4	29 3f 00	and #$003f		and 	#63
.010af7	f0 07		beq $010b00		beq		_Binary_SLExit
.010af9					_Binary_SLLoop:
.010af9	16 00		asl $00,x		asl 	EXSValueL+0,x
.010afb	36 20		rol $20,x		rol 	EXSValueH+0,x
.010afd	3a		dec a			dec 	a
.010afe	d0 f9		bne $010af9		bne 	_Binary_SLLoop
.010b00					_Binary_SLExit:
.010b00	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010b01					Binary_And:
.010b01	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010b04	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b06	35 02		and $02,x		and 	EXSValueL+2,x
.010b08	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b0a	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b0c	35 22		and $22,x		and 	EXSValueH+2,x
.010b0e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b10	60		rts			rts
.010b11					Binary_Or:
.010b11	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010b14	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b16	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b18	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b1a	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b1c	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b1e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b20	60		rts			rts
.010b21					Binary_Xor:
.010b21	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010b24	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b26	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b28	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b2a	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b2c	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b2e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b30	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010b31					Binary_Equals:
.010b31	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b34	b0 0e		bcs $010b44		bcs 	_BEString
.010b36	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b38	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b3a	d0 4f		bne $010b8b		bne 	Compare_Fail
.010b3c	b5 20		lda $20,x		lda 	EXSValueH,x
.010b3e	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b40	d0 49		bne $010b8b		bne 	Compare_Fail
.010b42	80 3f		bra $010b83		bra 	Compare_Succeed
.010b44					_BEString:
.010b44	09 00 00	ora #$0000		ora 	#$0000
.010b47	f0 3a		beq $010b83		beq 	Compare_Succeed
.010b49	80 40		bra $010b8b		bra 	Compare_Fail
.010b4b					Binary_NotEquals:
.010b4b	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b4e	b0 0e		bcs $010b5e		bcs 	_BNEString
.010b50	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b52	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b54	d0 2d		bne $010b83		bne 	Compare_Succeed
.010b56	b5 20		lda $20,x		lda 	EXSValueH,x
.010b58	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b5a	d0 27		bne $010b83		bne 	Compare_Succeed
.010b5c	80 2d		bra $010b8b		bra 	Compare_Fail
.010b5e					_BNEString:
.010b5e	09 00 00	ora #$0000		ora 	#$0000
.010b61	d0 20		bne $010b83		bne 	Compare_Succeed
.010b63	80 26		bra $010b8b		bra 	Compare_Fail
.010b65					Binary_Less:
.010b65	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b68	b0 12		bcs $010b7c		bcs 	_BLString
.010b6a	38		sec			sec
.010b6b	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b6d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b6f	b5 20		lda $20,x		lda 	EXSValueH,x
.010b71	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b73	50 03		bvc $010b78		bvc 	*+5
.010b75	49 00 80	eor #$8000		eor 	#$8000
.010b78	30 09		bmi $010b83		bmi 	Compare_Succeed
.010b7a	80 0f		bra $010b8b		bra 	Compare_Fail
.010b7c					_BLString:
.010b7c	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b7f	f0 02		beq $010b83		beq 	Compare_Succeed
.010b81	80 08		bra $010b8b		bra 	Compare_Fail
.010b83					Compare_Succeed:
.010b83	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b86	95 00		sta $00,x		sta 	EXSValueL,x
.010b88	95 20		sta $20,x		sta 	EXSValueH,x
.010b8a	60		rts			rts
.010b8b					Compare_Fail:
.010b8b	74 00		stz $00,x		stz 	EXSValueL,x
.010b8d	74 20		stz $20,x		stz 	EXSValueH,x
.010b8f	60		rts			rts
.010b90					Binary_GreaterEqual:
.010b90	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b93	b0 12		bcs $010ba7		bcs 	_BGEString
.010b95	38		sec			sec
.010b96	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b98	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b9a	b5 20		lda $20,x		lda 	EXSValueH,x
.010b9c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b9e	50 03		bvc $010ba3		bvc 	*+5
.010ba0	49 00 80	eor #$8000		eor 	#$8000
.010ba3	10 de		bpl $010b83		bpl 	Compare_Succeed
.010ba5	80 e4		bra $010b8b		bra 	Compare_Fail
.010ba7					_BGEString:
.010ba7	09 00 00	ora #$0000		ora 	#$0000
.010baa	10 d7		bpl $010b83		bpl 	Compare_Succeed
.010bac	80 dd		bra $010b8b		bra 	Compare_Fail
.010bae					Binary_LessEqual:
.010bae	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bb1	b0 12		bcs $010bc5		bcs 	_BLEString
.010bb3	18		clc			clc 									; numeric <= signed
.010bb4	b5 00		lda $00,x		lda 	EXSValueL,x
.010bb6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bb8	b5 20		lda $20,x		lda 	EXSValueH,x
.010bba	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bbc	50 03		bvc $010bc1		bvc 	*+5
.010bbe	49 00 80	eor #$8000		eor 	#$8000
.010bc1	30 c0		bmi $010b83		bmi 	Compare_Succeed
.010bc3	80 c6		bra $010b8b		bra 	Compare_Fail
.010bc5					_BLEString:
.010bc5	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bc8	d0 b9		bne $010b83		bne 	Compare_Succeed
.010bca	80 bf		bra $010b8b		bra 	Compare_Fail
.010bcc					Binary_Greater:
.010bcc	20 ea 0b	jsr $010bea		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bcf	b0 12		bcs $010be3		bcs 	_BGString
.010bd1	18		clc			clc 									; numeric > signed
.010bd2	b5 00		lda $00,x		lda 	EXSValueL,x
.010bd4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bd6	b5 20		lda $20,x		lda 	EXSValueH,x
.010bd8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bda	50 03		bvc $010bdf		bvc 	*+5
.010bdc	49 00 80	eor #$8000		eor 	#$8000
.010bdf	10 a2		bpl $010b83		bpl 	Compare_Succeed
.010be1	80 a8		bra $010b8b		bra 	Compare_Fail
.010be3					_BGString:
.010be3	c9 01 00	cmp #$0001		cmp 	#$0001
.010be6	f0 9b		beq $010b83		beq 	Compare_Succeed
.010be8	80 a1		bra $010b8b		bra 	Compare_Fail
.010bea					CompareTypeCheck:
.010bea	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010bec	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010bee	30 06		bmi $010bf6		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010bf0	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010bf2	30 1c		bmi $010c10		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010bf4	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010bf5	60		rts			rts
.010bf6					_CTCFail:
.010bf6	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010bf9	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c01	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c10					_CTCStringCompare:
.010c10	20 39 06	jsr $010639		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c13	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c15	85 08		sta $08			sta 	DTemp1
.010c17	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c19	85 0c		sta $0c			sta 	DTemp2
.010c1b	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c1e	a8		tay			tay
.010c1f	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c21	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c23	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c25	90 02		bcc $010c29		bcc 	_CTCSmallest
.010c27	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c29					_CTCSmallest:
.010c29	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c2b					_CTCCompare:
.010c2b	c8		iny			iny 									; look at next character (done first, first char is size)
.010c2c	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c2e	30 16		bmi $010c46		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c30	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c32	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c34	f0 f5		beq $010c2b		beq 	_CTCCompare 					; if zero, try the next character.
.010c36	b0 07		bcs $010c3f		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c38					_CTCLess:
.010c38	c2 20		rep #$20		rep 	#$20
.010c3a	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c3d	80 14		bra $010c53		bra 	_CTCExit
.010c3f					_CTCGreater:
.010c3f	c2 20		rep #$20		rep 	#$20
.010c41	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c44	80 0d		bra $010c53		bra 	_CTCExit
.010c46					_CTCEqualSoFar:
.010c46	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c48	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c4a	90 ec		bcc $010c38		bcc 	_CTCLess
.010c4c	d0 f1		bne $010c3f		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c4e	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c50	a9 00 00	lda #$0000		lda 	#$0000
.010c53					_CTCExit:
.010c53	38		sec			sec 									; return with CS indicating string comparison.
.010c54	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010c55					Binary_Divide:
.010c55	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010c58	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c5a	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c5c	d0 14		bne $010c72		bne 	_BinaryDivide_Ok
.010c5e	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010c61	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c69	20 62 79 20 7a 65 72 6f 00
.010c72					_BinaryDivide_Ok:
.010c72	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c74	64 0a		stz $0a			stz 	DTemp1+2
.010c76	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c78	5a		phy			phy 										; save Y (bit counter)
.010c79	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c7b	10 07		bpl $010c84		bpl 	_BinaryDivide_RightDone
.010c7d	e8		inx			inx
.010c7e	e8		inx			inx
.010c7f	20 ba 0c	jsr $010cba		jsr 	Binary_DivNegate
.010c82	ca		dex			dex
.010c83	ca		dex			dex
.010c84					_BinaryDivide_RightDone:
.010c84	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c86	10 03		bpl $010c8b		bpl 	_BinaryDivide_LeftDone
.010c88	20 ba 0c	jsr $010cba		jsr 	Binary_DivNegate
.010c8b					_BinaryDivide_LeftDone:
.010c8b	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c8e					_BinaryDivide_Loop:
.010c8e	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c90	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c92	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c94	26 0a		rol $0a			rol 	DTemp1+2
.010c96	38		sec			sec											; calculate A-M
.010c97	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c99	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c9b	85 0c		sta $0c			sta 	DTemp2
.010c9d	a5 0a		lda $0a			lda 	DTemp1+2
.010c9f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ca1	90 08		bcc $010cab		bcc 	_Binary_NoSubract 					; if A < M skip this
.010ca3	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010ca5	a5 0c		lda $0c			lda 	DTemp2
.010ca7	85 08		sta $08			sta 	DTemp1+0
.010ca9	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cab					_Binary_NoSubract:
.010cab	88		dey			dey 										; do it 32 times.
.010cac	d0 e0		bne $010c8e		bne 	_BinaryDivide_Loop
.010cae					_BinaryDivide_Exit:
.010cae	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cb0	29 01 00	and #$0001		and 	#1
.010cb3	f0 03		beq $010cb8		beq 	_BinaryDivide_Exit2
.010cb5	20 ba 0c	jsr $010cba		jsr 	Binary_DivNegate
.010cb8					_BinaryDivide_Exit2:
.010cb8	7a		ply			ply 										; restore Y
.010cb9	60		rts			rts
.010cba					Binary_DivNegate:
.010cba	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cbc	38		sec			sec 										; negate the value at stack X.
.010cbd	a9 00 00	lda #$0000		lda 	#$0000
.010cc0	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cc2	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cc4	a9 00 00	lda #$0000		lda 	#$0000
.010cc7	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cc9	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ccb	60		rts			rts
.010ccc					Binary_Modulus:
.010ccc	20 55 0c	jsr $010c55		jsr 	Binary_Divide 						; do the divide
.010ccf	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cd1	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cd3	a5 0a		lda $0a			lda 	DTemp1+2
.010cd5	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cd7	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010cd8					Binary_Multiply:
.010cd8	20 19 06	jsr $010619		jsr 	CheckBothNumeric 					; check both values are numeric
.010cdb	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cdd	85 08		sta $08			sta 	DTemp1
.010cdf	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010ce1	85 0a		sta $0a			sta		DTemp1+2
.010ce3	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010ce5	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ce7					_BinaryMultiply_Loop:
.010ce7	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010ce9	05 0a		ora $0a			ora 	DTemp1+2
.010ceb	f0 1e		beq $010d0b		beq 	_BinaryMultiply_Exit
.010ced	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010cef	29 01 00	and #$0001		and 	#1
.010cf2	f0 0d		beq $010d01		beq 	_BinaryMultiply_NoAdd
.010cf4	18		clc			clc 										; add multiplicand to result.
.010cf5	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010cf7	75 02		adc $02,x		adc 	EXSValueL+2,x
.010cf9	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cfb	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cfd	75 22		adc $22,x		adc 	EXSValueH+2,x
.010cff	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d01					_BinaryMultiply_NoAdd:
.010d01	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d03	66 08		ror $08			ror 	DTemp1
.010d05	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d07	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d09	80 dc		bra $010ce7		bra 	_BinaryMultiply_Loop 				; go round again.
.010d0b					_BinaryMultiply_Exit:
.010d0b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010d0c					Function_Len:
.010d0c	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010d0f	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d12	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010d15	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d17	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d1a	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d1d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d1f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d21	60		rts				rts
.010d22					Function_Abs:
.010d22	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010d25	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d28	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010d2b	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d2d	30 07		bmi $010d36			bmi 	_FAbsNegative 				; negate it if negative
.010d2f	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d31	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d33	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d35	60		rts				rts
.010d36					_FAbsNegative:
.010d36	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d37	a9 00 00	lda #$0000			lda 	#0
.010d3a	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d3c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d3e	a9 00 00	lda #$0000			lda 	#0
.010d41	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d43	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d45	60		rts				rts
.010d46					Function_Sgn:
.010d46	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns integer
.010d49	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get an integer
.010d4c	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010d4f	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d51	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d53	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d55	30 07		bmi $010d5e			bmi 	_FSgnNegative 				; set to -1 if signed
.010d57	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d59	f0 02		beq $010d5d			beq 	_FSgnExit
.010d5b	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d5d					_FSgnExit:
.010d5d	60		rts				rts
.010d5e					_FSgnNegative:
.010d5e	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d61	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d63	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d65	60		rts				rts
.010d66					Function_Random:
.010d66	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010d69	20 39 06	jsr $010639			jsr 	ResetTypeInteger
.010d6c	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d6e	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d70	d0 0a		bne $010d7c			bne 	_Rnd_NotZero
.010d72	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d75	85 10		sta $10				sta 	DRandom
.010d77	a9 ea 00	lda #$00ea			lda 	#$EA
.010d7a	85 12		sta $12				sta 	DRandom+2
.010d7c					_Rnd_NotZero:
.010d7c	20 87 0d	jsr $010d87			jsr 	_Rnd_Process 				; call randomiser twice
.010d7f	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d81	20 87 0d	jsr $010d87			jsr 	_Rnd_Process
.010d84	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d86	60		rts				rts
.010d87					_Rnd_Process:
.010d87	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d89	26 12		rol $12				rol 	DRandom+2
.010d8b	90 0e		bcc $010d9b			bcc 	_Rnd_Exit
.010d8d	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d8f	49 54 d4	eor #$d454			eor 	#$D454
.010d92	85 10		sta $10				sta 	DRandom
.010d94	a5 12		lda $12				lda 	DRandom+2
.010d96	49 d5 55	eor #$55d5			eor 	#$55D5
.010d99	85 12		sta $12				sta 	DRandom+2
.010d9b					_Rnd_Exit:
.010d9b	a5 10		lda $10				lda 	DRandom
.010d9d	45 12		eor $12				eor 	DRandom+2
.010d9f	60		rts				rts
.010da0					Function_Chr:
.010da0	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string
.010da3	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer
.010da6	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010da9	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dac	d0 12		bne $010dc0			bne 	_FCHBad
.010dae	48		pha				pha  								; save char # on stack
.010daf	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010db2	20 26 07	jsr $010726			jsr 	StringTempAllocate
.010db5	68		pla				pla 								; restore character number
.010db6	20 52 07	jsr $010752			jsr 	StringWriteCharacter 		; write it out.
.010db9	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dbb	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dbd	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dbf	60		rts				rts
.010dc0					_FCHBad:
.010dc0	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010dc3	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010dcb	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010dd8					Function_Asc:
.010dd8	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010ddb	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get string
.010dde	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010de1	a8		tay				tay 								; string address in Y
.010de2	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010de5	29 ff 00	and #$00ff			and 	#$00FF
.010de8	f0 0b		beq $010df5			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010dea	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010ded	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010df0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010df2	74 20		stz $20,x			stz 	EXSValueH+0,x
.010df4	60		rts				rts
.010df5					_FASBad:
.010df5	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010df8	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e00	65 20 66 6f 72 20 61 73 63 28 29 00
.010e0c					Function_SPC:
.010e0c	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string
.010e0f	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e12	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010e15	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e18	d0 17		bne $010e31			bne 	_FSPBad
.010e1a	48		pha				pha 								; save length
.010e1b	20 26 07	jsr $010726			jsr 	StringTempAllocate 			; allocate character space
.010e1e	7a		ply				ply 								; get count in Y
.010e1f	f0 09		beq $010e2a			beq 	_FSPExit 					; if zero, just empty string
.010e21					_FSPCopy:
.010e21	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e24	20 52 07	jsr $010752			jsr 	StringWriteCharacter 		; write it out.
.010e27	88		dey				dey
.010e28	d0 f7		bne $010e21			bne 	_FSPCopy	 				; do it Y times
.010e2a					_FSPExit:
.010e2a	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e2c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e2e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e30	60		rts				rts
.010e31					_FSPBad:
.010e31	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010e34	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e3c	65 20 66 6f 72 20 73 70 63 28 29 00
.010e48					Function_Inkey:
.010e48	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010e4b	20 39 06	jsr $010639			jsr 	ResetTypeInteger
.010e4e	20 53 1d	jsr $011d53			jsr 	HWInkey 					; read current key
.010e51	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e53	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e55	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010e56					Function_LEFT:
.010e56	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.010e59	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e5c	48		pha				pha 								; save string on stack.
.010e5d	20 10 06	jsr $010610			jsr 	ExpectComma 				; get count
.010e60	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e63	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e66	d0 6d		bne $010ed5			bne 	FNStringParameter
.010e68	85 08		sta $08				sta 	DTemp1 						; save count.
.010e6a	20 07 06	jsr $010607			jsr 	ExpectRightBracket
.010e6d	7a		ply				ply 								; Y points to string.
.010e6e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e71	29 ff 00	and #$00ff			and 	#$00FF
.010e74	f0 52		beq $010ec8			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e76	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e78	f0 55		beq $010ecf			beq 	FNStringY 					; return string in Y if current len = required len.
.010e7a	90 53		bcc $010ecf			bcc 	FNStringY 					; if current < required return whole thing.
.010e7c	c8		iny				iny 								; take from here - start of string
.010e7d	80 33		bra $010eb2			bra 	FNDTemp1Characters
.010e7f					Function_RIGHT:
.010e7f	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.010e82	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e85	48		pha				pha 								; save string on stack.
.010e86	20 10 06	jsr $010610			jsr 	ExpectComma 				; get count
.010e89	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e8c	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e8f	d0 44		bne $010ed5			bne 	FNStringParameter
.010e91	85 08		sta $08				sta 	DTemp1 						; save count.
.010e93	20 07 06	jsr $010607			jsr 	ExpectRightBracket
.010e96	7a		ply				ply 								; Y points to string.
.010e97	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e9a	29 ff 00	and #$00ff			and 	#$00FF
.010e9d	f0 29		beq $010ec8			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e9f	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ea1	f0 2c		beq $010ecf			beq 	FNStringY 					; return string in Y if current len = required len.
.010ea3	90 2a		bcc $010ecf			bcc 	FNStringY 					; if current < required return whole thing.
.010ea5	38		sec				sec 								; current-required is the number to skip
.010ea6	e5 08		sbc $08				sbc 	DTemp1
.010ea8	85 0a		sta $0a				sta 	DTemp1+2
.010eaa	98		tya				tya
.010eab	18		clc				clc
.010eac	65 0a		adc $0a				adc 	DTemp1+2
.010eae	a8		tay				tay
.010eaf	c8		iny				iny 								; +1 for the count.
.010eb0	80 00		bra $010eb2			bra 	FNDTemp1Characters
.010eb2					FNDTemp1Characters:
.010eb2	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010eb4	f0 12		beq $010ec8			beq 	FNStringEmpty 				; if zero, return empty string.
.010eb6	20 26 07	jsr $010726			jsr 	StringTempAllocate
.010eb9	48		pha				pha 								; save the address
.010eba					_FND1Loop:
.010eba	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ebd	20 52 07	jsr $010752			jsr 	StringWriteCharacter
.010ec0	c8		iny				iny
.010ec1	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ec3	d0 f5		bne $010eba			bne 	_FND1Loop
.010ec5	7a		ply				ply 								; string address in Y
.010ec6	80 07		bra $010ecf			bra 	FNStringY
.010ec8					FNStringEmpty:
.010ec8	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ecb	20 26 07	jsr $010726			jsr 	StringTempAllocate 			; put address of it in Y
.010ece	a8		tay				tay
.010ecf					FNStringY:
.010ecf	98		tya				tya
.010ed0	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ed2	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ed4	60		rts				rts
.010ed5					FNStringParameter:
.010ed5	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010ed8	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010ee0	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010eed					Function_MID:
.010eed	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.010ef0	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ef3	48		pha				pha 								; save string on stack.
.010ef4	20 10 06	jsr $010610			jsr 	ExpectComma 				; get offset (n)
.010ef7	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010efa	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010efd	d0 d6		bne $010ed5			bne 	FNStringParameter
.010eff	c9 00 00	cmp #$0000			cmp 	#0
.010f02	f0 d1		beq $010ed5			beq 	FNStringParameter 			; or zero
.010f04	48		pha				pha 								; save start position on stack.
.010f05	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f08	85 08		sta $08				sta 	DTemp1
.010f0a	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f0c	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f0f	d0 0e		bne $010f1f			bne 	_FMINoThird
.010f11	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f13	e6 06		inc $06				inc 	DCodePtr
.010f15	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f18	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f1b	d0 b8		bne $010ed5			bne 	FNStringParameter
.010f1d	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f1f					_FMINoThird:
.010f1f	20 07 06	jsr $010607			jsr 	ExpectRightBracket
.010f22	68		pla				pla 								; get offset position
.010f23	85 0c		sta $0c				sta 	DTemp2
.010f25	7a		ply				ply 								; get address of string in Y
.010f26	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f29	29 ff 00	and #$00ff			and 	#$00FF
.010f2c	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f2e	90 98		bcc $010ec8			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f30	38		sec				sec 								; calculate number of characters left after
.010f31	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f33	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f34	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f36	b0 02		bcs $010f3a			bcs 	_FMISufficient
.010f38	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f3a					_FMISufficient:
.010f3a	98		tya				tya 								; get address
.010f3b	18		clc				clc
.010f3c	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f3e	a8		tay				tay 								; put in Y
.010f3f	82 70 ff	brl $010eb2			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010f42					Function_Peek:
.010f42	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010f45	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f48	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010f4b	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f4d	84 0a		sty $0a				sty 	DTemp1+2
.010f4f	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f52	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f54	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f57	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f59	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f5b	60		rts				rts
.010f5c					Function_Deek:
.010f5c	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010f5f	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f62	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010f65	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f67	84 0a		sty $0a				sty 	DTemp1+2
.010f69	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f6c	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f6e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f70	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f72	60		rts				rts
.010f73					Function_Leek:
.010f73	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010f76	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f79	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check )
.010f7c	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f7e	84 0a		sty $0a				sty 	DTemp1+2
.010f80	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f83	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f85	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f87	c8		iny				iny
.010f88	c8		iny				iny
.010f89	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f8b	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f8d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010f8e					Function_VAL:
.010f8e	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns an integer
.010f91	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f94	48		pha				pha 								; put string address on stack.
.010f95	20 a5 0f	jsr $010fa5			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f98	7a		ply				ply 								; get string address back
.010f99	da		phx				phx 								; save X on stack
.010f9a	aa		tax				tax 								; base in X
.010f9b	98		tya				tya 								; address in A
.010f9c	20 df 0f	jsr $010fdf			jsr 	StringToInteger
.010f9f	fa		plx				plx 								; restore X
.010fa0	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fa2	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fa4	60		rts				rts
.010fa5					VALGetBase:
.010fa5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fa7	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010faa	f0 07		beq $010fb3			beq 	_VGBAlternate
.010fac	20 07 06	jsr $010607			jsr 	ExpectRightBracket			; expect ), and return 10.
.010faf	a9 0a 00	lda #$000a			lda 	#10
.010fb2	60		rts				rts
.010fb3					_VGBAlternate:
.010fb3	20 10 06	jsr $010610			jsr 	ExpectComma 				; skip comma.
.010fb6	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get base
.010fb9	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fbc	d0 0e		bne $010fcc			bne 	_VGBBadBase
.010fbe	c9 02 00	cmp #$0002			cmp 	#2
.010fc1	90 09		bcc $010fcc			bcc 	_VGBBadBase
.010fc3	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fc6	b0 04		bcs $010fcc			bcs 	_VGBBadBase
.010fc8	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fcb	60		rts				rts
.010fcc					_VGBBadBase:
.010fcc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010fcf	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fd7	65 72 20 42 61 73 65 00
.010fdf					StringToInteger:
.010fdf	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fe1	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010fe3	29 ff 00	and #$00ff			and 	#$00FF
.010fe6	85 26		sta $26				sta 	DTemp3+2
.010fe8	f0 6e		beq $011058			beq 	_STIError 					; if length zero it's bad.
.010fea	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010fec	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010fee	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010ff0	64 0a		stz $0a				stz 	DTemp1+2
.010ff2	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010ff4	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010ff7	48		pha				pha 								; push on stack
.010ff8	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010ffb	d0 06		bne $011003			bne 	_STILoop
.010ffd	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010fff	c6 26		dec $26				dec 	DTemp3+2					; dec count
.011001	f0 55		beq $011058			beq 	_STIError 					; if only - then error.
.011003					_STILoop:
.011003	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.011005	20 77 10	jsr $011077			jsr 	MultiplyTemp1ByA
.011008	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.01100a	29 ff 00	and #$00ff			and 	#$00FF
.01100d	20 68 10	jsr $011068			jsr 	ConvertUpperCase	 		; make U/C
.011010	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.011013	90 43		bcc $011058			bcc 	_STIError
.011015	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011018	90 0e		bcc $011028			bcc 	_STIOkay1
.01101a	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01101d	90 39		bcc $011058			bcc 	_STIError
.01101f	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.011022	b0 34		bcs $011058			bcs 	_STIError
.011024	18		clc				clc 								; shift to correct range.
.011025	69 09 00	adc #$0009			adc 	#9
.011028					_STIOkay1:
.011028	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.01102b	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01102d	b0 29		bcs $011058			bcs 	_STIError
.01102f	18		clc				clc 								; add A to DTemp1
.011030	65 08		adc $08				adc 	DTemp1
.011032	85 08		sta $08				sta 	DTemp1
.011034	90 02		bcc $011038			bcc 	_STINoCarry
.011036	e6 0a		inc $0a				inc 	DTemp1+2
.011038					_STINoCarry:
.011038	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.01103a	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.01103c	d0 c5		bne $011003			bne 	_STILoop 					; loop back.
.01103e	68		pla				pla 								; get optional minus bac
.01103f	c9 2d 00	cmp #$002d			cmp 	#"-"
.011042	d0 0f		bne $011053			bne 	_STINotNegative 			; handle the negative character
.011044	38		sec				sec 								; negate DTemp1
.011045	a9 00 00	lda #$0000			lda 	#0
.011048	e5 08		sbc $08				sbc 	DTemp1
.01104a	85 08		sta $08				sta 	DTemp1
.01104c	a9 00 00	lda #$0000			lda 	#0
.01104f	e5 0a		sbc $0a				sbc 	DTemp1+2
.011051	85 0a		sta $0a				sta 	DTemp1+2
.011053					_STINotNegative:
.011053	a5 08		lda $08				lda 	DTemp1 						; get the result
.011055	a4 0a		ldy $0a				ldy 	DTemp1+2
.011057	60		rts				rts
.011058					_STIError:
.011058	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01105b	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>011063	74 61 6e 74 00
.011068					ConvertUpperCase:
.011068	c9 61 00	cmp #$0061			cmp 	#'a'
.01106b	90 09		bcc $011076			bcc 	_CUCExit
.01106d	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.011070	b0 04		bcs $011076			bcs 	_CUCExit
.011072	38		sec				sec
.011073	e9 20 00	sbc #$0020			sbc 	#32
.011076					_CUCExit:
.011076	60		rts				rts
.011077					MultiplyTemp1ByA:
.011077					_MTGeneral:
.011077	da		phx				phx
.011078	aa		tax				tax 								; multiplier in X
.011079	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.01107b	85 0c		sta $0c				sta 	DTemp2
.01107d	a5 0a		lda $0a				lda 	DTemp1+2
.01107f	85 0e		sta $0e				sta 	DTemp2+2
.011081	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.011083	64 0a		stz $0a				stz 	DTemp1+2
.011085	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011088					_MTLoop:
.011088	8a		txa				txa 								; shift X right into C
.011089	4a		lsr a				lsr 	a
.01108a	aa		tax				tax
.01108b	90 10		bcc $01109d			bcc 	_MTNoAdd
.01108d	18		clc				clc
.01108e	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.011090	65 0c		adc $0c				adc 	DTemp2
.011092	85 08		sta $08				sta 	DTemp1
.011094	a5 0a		lda $0a				lda 	DTemp1+2
.011096	65 0e		adc $0e				adc 	DTemp2+2
.011098	85 0a		sta $0a				sta 	DTemp1+2
.01109a	90 01		bcc $01109d			bcc 	_MTNoAdd
.01109c	c8		iny				iny
.01109d					_MTNoAdd:
.01109d	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01109f	26 0e		rol $0e				rol 	DTemp2+2
.0110a1	90 01		bcc $0110a4			bcc 	_MTNoOverflow
.0110a3	c8		iny				iny
.0110a4					_MTNoOverflow:
.0110a4	8a		txa				txa 								; until multiplier is zero.
.0110a5	d0 e1		bne $011088			bne 	_MTLoop
.0110a7	98		tya				tya
.0110a8	18		clc				clc
.0110a9	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110ac	fa		plx				plx 								; restore X
.0110ad	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.0110ae					Function_Str:
.0110ae	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.0110b1	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110b4	48		pha				pha 								; save YA on the stack
.0110b5	5a		phy				phy
.0110b6	20 a5 0f	jsr $010fa5			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110b9	85 14		sta $14				sta 	DSignCount
.0110bb	7a		ply				ply 								; YA is the number
.0110bc	68		pla				pla
.0110bd	da		phx				phx
.0110be	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110c0	20 c9 10	jsr $0110c9			jsr 	ConvertToString 			; convert it to a string.
.0110c3	fa		plx				plx 								; restore X
.0110c4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110c6	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110c8	60		rts				rts
.0110c9					ConvertToString:
.0110c9	48		pha				pha
.0110ca	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110cd	20 26 07	jsr $010726			jsr 	StringTempAllocate 			; allocate space for return string.
.0110d0	68		pla				pla
.0110d1					ConvertToStringAlreadyAllocated:
.0110d1	da		phx				phx 								; save X (base)
.0110d2	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110d4	84 26		sty $26				sty 	DTemp3+2
.0110d6	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110d8	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110da	10 15		bpl $0110f1			bpl 	_CTSNotNegative
.0110dc	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110df	20 5b 11	jsr $01115b			jsr 	CTSOutputA
.0110e2	38		sec				sec 								; negate DTemp3 which is the number
.0110e3	a9 00 00	lda #$0000			lda 	#0
.0110e6	e5 24		sbc $24				sbc 	DTemp3
.0110e8	85 24		sta $24				sta 	DTemp3
.0110ea	a9 00 00	lda #$0000			lda 	#0
.0110ed	e5 26		sbc $26				sbc 	DTemp3+2
.0110ef	85 26		sta $26				sta 	DTemp3+2
.0110f1					_CTSNotNegative:
.0110f1	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.0110f4	48		pha				pha
.0110f5	a9 00 00	lda #$0000			lda 	#0
.0110f8	48		pha				pha
.0110f9	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.0110fb	85 08		sta $08				sta 	DTemp1
.0110fd	64 0a		stz $0a				stz 	DTemp1+2
.0110ff					_CTSMultiplySubtractor:
.0110ff	38		sec				sec 								; check number vs subtractor
.011100	a5 24		lda $24				lda 	DTemp3
.011102	e5 08		sbc $08				sbc 	DTemp1
.011104	a5 26		lda $26				lda 	DTemp3+2
.011106	e5 0a		sbc $0a				sbc 	DTemp1+2
.011108	90 0f		bcc $011119			bcc		_CTSScaledUp 				; if >= then scaled up.
.01110a	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.01110c	48		pha				pha
.01110d	a5 0a		lda $0a				lda 	DTemp1+2
.01110f	48		pha				pha
.011110	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011112	20 77 10	jsr $011077			jsr 	MultiplyTemp1ByA
.011115	b0 02		bcs $011119			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011117	80 e6		bra $0110ff			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011119					_CTSScaledUp:
.011119	7a		ply				ply 								; YA contains the previous divider.
.01111a	68		pla				pla
.01111b	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01111e	d0 05		bne $011125			bne 	_CTSHasDigit
.011120	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011123	f0 20		beq $011145			beq 	_CTSExit
.011125					_CTSHasDigit:
.011125	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011127	84 0e		sty $0e				sty 	DTemp2+2
.011129	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.01112c					_CTSSubLoop:
.01112c	38		sec				sec 								; subtract subtractor from number
.01112d	a5 24		lda $24				lda 	DTemp3
.01112f	e5 0c		sbc $0c				sbc 	DTemp2
.011131	a8		tay				tay 								; intermediate in Y
.011132	a5 26		lda $26				lda 	DTemp3+2
.011134	e5 0e		sbc $0e				sbc 	DTemp2+2
.011136	90 07		bcc $01113f			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011138	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01113a	84 24		sty $24				sty 	DTemp3
.01113c	e8		inx				inx 								; one more subtraction
.01113d	80 ed		bra $01112c			bra 	_CTSSubLoop 				; try it again.
.01113f					_CTSFinishedSubtracting:
.01113f	8a		txa				txa 								; convert to ASCII.
.011140	20 4e 11	jsr $01114e			jsr 	CTSOutputHexDigit 			; write that out.
.011143	80 d4		bra $011119			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011145					_CTSExit:
.011145	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011147	20 4e 11	jsr $01114e			jsr 	CTSOutputHexDigit
.01114a	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.01114c	fa		plx				plx 								; restore X.
.01114d	60		rts				rts
.01114e					CTSOutputHexDigit:
.01114e	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.011151	90 04		bcc $011157			bcc 	_CTSNotLetter
.011153	18		clc				clc
.011154	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011157					_CTSNotLetter:
.011157	18		clc				clc
.011158	69 30 00	adc #$0030			adc 	#48
.01115b					CTSOutputA:
.01115b	5a		phy				phy 								; save Y, set Y to current pointer
.01115c	a4 1a		ldy $1a				ldy 	DCurrentTempString
.01115e	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.011161	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011163	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011165	1a		inc a				inc 	a
.011166	92 18		sta ($18)			sta 	(DStartTempString)
.011168	c2 20		rep #$20			rep 	#$20
.01116a	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.01116c	7a		ply				ply 								; restore Y and exit.
.01116d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.01116e					Function_INSTR:
.01116e	20 39 06	jsr $010639			jsr 	ResetTypeInteger 			; returns a integer
.011171	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.011174	48		pha				pha 								; save string to search
.011175	20 10 06	jsr $010610			jsr 	ExpectComma
.011178	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; string to search for
.01117b	20 07 06	jsr $010607			jsr 	ExpectRightBracket
.01117e	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011180	68		pla				pla
.011181	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011183	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011185	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011187	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011189	38		sec				sec
.01118a	b2 0c		lda ($0c)			lda 	(DTemp2)
.01118c	f2 08		sbc ($08)			sbc		(DTemp1)
.01118e	c2 20		rep #$20			rep 	#$20
.011190	90 2c		bcc $0111be			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011192	29 ff 00	and #$00ff			and 	#$00FF
.011195	1a		inc a				inc 	a
.011196	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.011198	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.01119a	29 ff 00	and #$00ff			and 	#$00FF
.01119d	f0 22		beq $0111c1			beq 	_FINSError
.01119f					_FINSLoop:
.01119f	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111a1	1a		inc a				inc 	a
.0111a2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111a4	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111a6	29 ff 00	and #$00ff			and 	#$00FF
.0111a9	a8		tay				tay									; start comparing at index 1.
.0111aa					_FINSCompare:
.0111aa	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111ac	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111ae	29 ff 00	and #$00ff			and 	#$00FF
.0111b1	d0 05		bne $0111b8			bne 	_FINSNext
.0111b3	88		dey				dey
.0111b4	d0 f4		bne $0111aa			bne 	_FINSCompare
.0111b6	80 08		bra $0111c0			bra 	_FINSExit
.0111b8					_FINSNext:
.0111b8	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111ba	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111bc	d0 e1		bne $01119f			bne 	_FINSLoop
.0111be					_FINSFail:
.0111be	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111c0					_FINSExit:
.0111c0	60		rts				rts
.0111c1					_FINSError:
.0111c1	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0111c4	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111cc	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.0111d5					Function_UPPER:
.0111d5	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.0111d8	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.0111db	48		pha				pha
.0111dc	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; close call.
.0111df	20 26 07	jsr $010726			jsr		StringTempAllocate 			; allocate memory for it
.0111e2	68		pla				pla
.0111e3	20 60 07	jsr $010760			jsr 	StringCreateCopy 			; create a copy of it.
.0111e6	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111e8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111ea	a8		tay				tay 								; address in Y
.0111eb	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111ed	da		phx				phx 								; save X
.0111ee	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111f0	29 ff 00	and #$00ff			and 	#$00FF
.0111f3	f0 20		beq $011215			beq 	_FUPExit
.0111f5	aa		tax				tax 								; put in X
.0111f6					_FUPLoop:
.0111f6	c8		iny				iny 								; increment and load character
.0111f7	b9 00 00	lda $0000,y			lda 	$0000,y
.0111fa	29 ff 00	and #$00ff			and 	#$00FF
.0111fd	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011200	90 10		bcc $011212			bcc 	_FUPNoChange
.011202	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011205	b0 0b		bcs $011212			bcs 	_FUPNoChange
.011207	38		sec				sec 								; shift case
.011208	e9 20 00	sbc #$0020			sbc 	#32
.01120b	e2 20		sep #$20			sep 	#$20 						; write back
.01120d	99 00 00	sta $0000,y			sta 	$0000,y
.011210	c2 20		rep #$20			rep 	#$20
.011212					_FUPNoChange:
.011212	ca		dex				dex 								; do X times
.011213	d0 e1		bne $0111f6			bne 	_FUPLoop
.011215					_FUPExit:
.011215	fa		plx				plx 								; restore X
.011216	60		rts				rts
.011217					Function_LOWER:
.011217	20 41 06	jsr $010641			jsr 	ResetTypeString 			; returns a string.
.01121a	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.01121d	48		pha				pha
.01121e	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; close call.
.011221	20 26 07	jsr $010726			jsr		StringTempAllocate 			; allocate memory for it
.011224	68		pla				pla
.011225	20 60 07	jsr $010760			jsr 	StringCreateCopy 			; create a copy of it.
.011228	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01122a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01122c	a8		tay				tay 								; address in Y
.01122d	74 20		stz $20,x			stz 	EXSValueH+0,x
.01122f	da		phx				phx 								; save X
.011230	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011232	29 ff 00	and #$00ff			and 	#$00FF
.011235	f0 20		beq $011257			beq 	_FLOExit
.011237	aa		tax				tax 								; put in X
.011238					_FLOLoop:
.011238	c8		iny				iny 								; increment and load character
.011239	b9 00 00	lda $0000,y			lda 	$0000,y
.01123c	29 ff 00	and #$00ff			and 	#$00FF
.01123f	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011242	90 10		bcc $011254			bcc 	_FLONoChange
.011244	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011247	b0 0b		bcs $011254			bcs 	_FLONoChange
.011249	18		clc				clc 								; shift case
.01124a	69 20 00	adc #$0020			adc 	#32
.01124d	e2 20		sep #$20			sep 	#$20 						; write back
.01124f	99 00 00	sta $0000,y			sta 	$0000,y
.011252	c2 20		rep #$20			rep 	#$20
.011254					_FLONoChange:
.011254	ca		dex				dex 								; do X times
.011255	d0 e1		bne $011238			bne 	_FLOLoop
.011257					_FLOExit:
.011257	fa		plx				plx 								; restore X
.011258	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.011259					Command_Let:
.011259	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01125b	48		pha				pha  								; save on stack for later.
.01125c	20 9c 03	jsr $01039c			jsr 	VariableFind 				; find the variable
.01125f	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.011261	b0 0f		bcs $011272			bcs 	_FLetFound 					; skip if found.
.011263	68		pla				pla 								; get and push the first token again.
.011264	48		pha				pha
.011265	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011268	d0 53		bne $0112bd			bne 	_FLError					; arrays, so this causes an error.
.01126a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.01126d	20 46 04	jsr $010446			jsr 	VariableCreateNew 			; create it.
.011270	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011272					_FLetFound:
.011272	68		pla				pla 								; get and save the first token.
.011273	48		pha				pha
.011274	a8		tay				tay 								; put it in Y
.011275	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011278	f0 07		beq $011281			beq 	_FLetNotArray
.01127a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.01127c	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.01127f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011281					_FLetNotArray:
.011281	7a		ply				ply 								; get the first token into Y
.011282	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011284	48		pha				pha
.011285	5a		phy				phy 								; save the first token on the stack.
.011286	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011289	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01128b	d0 23		bne $0112b0			bne 	_FLetMissingEquals
.01128d	e6 06		inc $06				inc 	DCodePtr
.01128f	e6 06		inc $06				inc 	DCodePtr
.011291	68		pla				pla 								; restore the first token.
.011292	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011295	d0 0f		bne $0112a6			bne 	_FLetString 				; skip if string.
.011297	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get an integer
.01129a	7a		ply				ply 								; get address in Y
.01129b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.01129d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112a0	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112a2	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112a5	60		rts				rts
.0112a6					_FLetString:
.0112a6	20 2e 03	jsr $01032e			jsr 	EvaluateString 				; get a string.
.0112a9	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112ab	7a		ply				ply 								; get address we are overwriting.
.0112ac	20 8a 06	jsr $01068a			jsr 	StringAssign 				; assign the string in memory.
.0112af	60		rts				rts
.0112b0					_FLetMissingEquals:
.0112b0	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0112b3	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112bb	3d 00
.0112bd					_FLError:
.0112bd	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0112c0	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112c8	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/procedure.asm

.0112d0					Command_PROC:
.0112d0	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112d3	18		clc				clc
.0112d4	65 02		adc $02				adc 	DBaseAddress
.0112d6	aa		tax				tax 								; X is used to track it
.0112d7					_FPROLoop:
.0112d7	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112da	f0 56		beq $011332			beq 	_FPROUnknown
.0112dc	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112df	c9 48 3c	cmp #$3c48			cmp 	#defprocTokenID
.0112e2	f0 08		beq $0112ec			beq 	_FPROFoundDefProc
.0112e4					_FPRONext:
.0112e4	8a		txa				txa 								; follow the link.
.0112e5	18		clc				clc
.0112e6	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112e9	aa		tax				tax
.0112ea	80 eb		bra $0112d7			bra 	_FPROLoop
.0112ec					_FPROFoundDefProc:
.0112ec	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.0112ef	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112f1	d0 f1		bne $0112e4			bne 	_FPRONext
.0112f3	8a		txa				txa 								; DTemp1 points to the token.
.0112f4	18		clc				clc
.0112f5	69 06 00	adc #$0006			adc 	#6
.0112f8	85 08		sta $08				sta 	DTemp1
.0112fa	a0 00 00	ldy #$0000			ldy 	#0
.0112fd					_FPROCompare:
.0112fd	b1 08		lda ($08),y			lda 	(DTemp1),y
.0112ff	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.011301	d0 e1		bne $0112e4			bne 	_FPRONext 					; fails, different
.011303	c8		iny				iny
.011304	c8		iny				iny
.011305	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011308	d0 f3		bne $0112fd			bne 	_FPROCompare
.01130a	98		tya				tya 								; this is the offset to the next element
.01130b	18		clc				clc
.01130c	65 08		adc $08				adc 	DTemp1
.01130e	48		pha				pha 								; push the next command on the stack
.01130f	da		phx				phx 								; push the record address on the stack.
.011310	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011312	98		tya				tya 								; work out the return address
.011313	18		clc				clc
.011314	65 06		adc $06				adc 	DCodePtr
.011316	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011318	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01131a	95 04		sta $04,x			sta 	$04,x
.01131c	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.01131f	95 06		sta $06,x			sta 	$06,x
.011321	8a		txa				txa 								; advance stack by 6.
.011322	18		clc				clc
.011323	69 06 00	adc #$0006			adc 	#6
.011326	85 2a		sta $2a				sta 	DStack
.011328	7a		ply				ply 								; line record address
.011329	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.01132c	85 22		sta $22				sta 	DLineNumber
.01132e	68		pla				pla 								; next command
.01132f	85 06		sta $06				sta 	DCodePtr
.011331	60		rts				rts
.011332					_FPROUnknown:
.011332	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011335	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>01133d	70 72 6f 63 65 64 75 72 65 00
.011347					Command_ENDPROC:
.011347	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.011349	b5 00		lda $00,x			lda 	$00,x
.01134b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.01134e	b0 2e		bcs $01137e			bcs 	_FENPUnstack
.011350	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011353	d0 11		bne $011366			bne 	_FENPFail
.011355	8a		txa				txa 								; unpick stack.
.011356	38		sec				sec
.011357	e9 06 00	sbc #$0006			sbc 	#6
.01135a	85 2a		sta $2a				sta 	DStack
.01135c	aa		tax				tax
.01135d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01135f	85 06		sta $06				sta 	DCodePtr
.011361	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011363	85 22		sta $22				sta 	DLineNumber
.011365	60		rts				rts
.011366					_FENPFail:
.011366	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011369	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011371	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.01137e					_FENPUnstack:
.01137e	20 d1 13	jsr $0113d1			jsr 	LocalRestore 				; restore off the stack.
.011381	80 c4		bra $011347			bra 	Command_ENDPROC

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/local.asm

.011383					Command_LOCAL:
.011383	20 ad 13	jsr $0113ad			jsr 	LocalProcessVariable 		; make one variable 'local'
.011386	90 0e		bcc $011396			bcc 	_CLOFail
.011388	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.01138a	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.01138d	d0 06		bne $011395			bne 	_CLOExit
.01138f	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.011391	e6 06		inc $06				inc 	DCodePtr
.011393	80 ee		bra $011383			bra 	Command_Local
.011395					_CLOExit:
.011395	60		rts				rts
.011396					_CLOFail:
.011396	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011399	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113a1	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113ad					LocalProcessVariable:
.0113ad	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113af	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113b2	90 08		bcc $0113bc			bcc 	_LPVFail
.0113b4	29 00 10	and #$1000			and 	#IDArrayMask
.0113b7	d0 03		bne $0113bc			bne 	_LPVFail
.0113b9	ea		nop				nop
.0113ba	ea		nop				nop
.0113bb	ea		nop				nop
.0113bc					_LPVFail:
.0113bc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0113bf	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>0113c7	6c 20 43 6f 6d 6d 61 6e 64 00
.0113d1					LocalRestore:
.0113d1	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.0113d2					Command_List:
.0113d2	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.0113d5	20 26 07	jsr $010726		jsr 	StringTempAllocate
.0113d8	85 30		sta $30			sta 	DListBuffer						; save buffer.
.0113da	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.0113dc	64 2e		stz $2e			stz 	DIndent2
.0113de	64 32		stz $32			stz 	DTemp4+0 						; low number
.0113e0	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113e3	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0113e5	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0113e7	f0 3b		beq $011424		beq 	_CLIList
.0113e9	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113ec	f0 36		beq $011424		beq 	_CLIList
.0113ee	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.0113f1	f0 13		beq $011406		beq 	_CLIComma
.0113f3	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; yes, first number
.0113f6	c0 00 00	cpy #$0000		cpy 	#0
.0113f9	d0 21		bne $01141c		bne 	_CLIError
.0113fb	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0113fd	85 34		sta $34			sta 	DTemp4+2
.0113ff	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011401	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011404	d0 1e		bne $011424		bne 	_CLIList
.011406					_CLIComma:
.011406	20 10 06	jsr $010610		jsr 	ExpectComma 					; skip comma
.011409	b2 06		lda ($06)		lda 	(DCodePtr)
.01140b	f0 12		beq $01141f		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.01140d	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011410	f0 0d		beq $01141f		beq 	_CLIToEnd
.011412	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; get end line.
.011415	85 34		sta $34			sta 	DTemp4+2
.011417	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.01141a	f0 08		beq $011424		beq 	_CLIList
.01141c					_CLIError:
.01141c	82 ad f1	brl $0105cc		brl 	SyntaxError
.01141f					_CLIToEnd:
.01141f	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011422	85 34		sta $34			sta 	DTemp4+2
.011424					_CLIList:
.011424	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011427	18		clc			clc
.011428	65 02		adc $02			adc 	DBaseAddress
.01142a	a8		tay			tay 									; put in Y
.01142b					_CLINextLine:
.01142b	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.01142e	f0 29		beq $011459		beq 	_CLIExit
.011430	20 c1 15	jsr $0115c1		jsr 	ScanIndent  					; scan for formatting.
.011433	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011436	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011438	90 14		bcc $01144e		bcc 	_CLIFollowLink
.01143a	c5 34		cmp $34			cmp 	DTemp4+2
.01143c	f0 02		beq $011440		beq 	_CLIShowLine
.01143e	b0 0e		bcs $01144e		bcs 	_CLIFollowLink
.011440					_CLIShowLine:
.011440	a5 30		lda $30			lda 	DListBuffer
.011442	20 5c 14	jsr $01145c		jsr 	Detokenise 						; detokenise it
.011445	5a		phy			phy
.011446	a8		tay			tay 									; print buffer out
.011447	20 67 06	jsr $010667		jsr 	PrintBasicString
.01144a	20 32 1d	jsr $011d32		jsr 	HWNewLine
.01144d	7a		ply			ply 									; get address
.01144e					_CLIFollowLink:
.01144e	98		tya			tya 									; follow link
.01144f	18		clc			clc
.011450	79 00 00	adc $0000,y		adc 	$0000,y
.011453	a8		tay			tay
.011454	20 4e 1d	jsr $011d4e		jsr 	HWCheckBreak 					; break key pressed.
.011457	f0 d2		beq $01142b		beq 	_CLINextLine
.011459					_CLIExit:
.011459	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01145b	60		rts			rts
.01145c					Detokenise:
.01145c	48		pha			pha
.01145d	da		phx			phx
.01145e	5a		phy			phy
.01145f	85 18		sta $18			sta 	DStartTempString 				; set the temp Command pointers to this buffer
.011461	1a		inc a			inc 	a
.011462	85 1a		sta $1a			sta 	DCurrentTempString
.011464	64 1c		stz $1c			stz		DConstantShift
.011466	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011469	92 18		sta ($18)		sta 	(DStartTempString)
.01146b	5a		phy			phy 									; save Y
.01146c	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01146f	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011472	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011475	20 d1 10	jsr $0110d1		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011478	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01147a	c5 2e		cmp $2e			cmp 	DIndent2
.01147c	90 02		bcc $011480		bcc 	_DTKSmaller
.01147e	a5 2e		lda $2e			lda 	DIndent2
.011480					_DTKSmaller:
.011480	0a		asl a			asl 	a
.011481	69 06 00	adc #$0006		adc 	#6
.011484	85 08		sta $08			sta 	DTemp1
.011486					_DTKPadLineNo:
.011486	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011489	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.01148c	b2 18		lda ($18)		lda 	(DStartTempString)
.01148e	29 ff 00	and #$00ff		and 	#$00FF
.011491	c5 08		cmp $08			cmp 	DTemp1
.011493	d0 f1		bne $011486		bne 	_DTKPadLineNo
.011495	68		pla			pla 									; get pointer
.011496	18		clc			clc 									; point to start of line
.011497	69 04 00	adc #$0004		adc 	#4
.01149a	a8		tay			tay 									; put back in Y.
.01149b					_DTKMainLoop:
.01149b	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01149e	d0 04		bne $0114a4		bne 	_DTKNotZero 					; if zero, return.
.0114a0	7a		ply			ply
.0114a1	fa		plx			plx
.0114a2	68		pla			pla
.0114a3	60		rts			rts
.0114a4					_DTKNotZero:
.0114a4	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.0114a7	b0 1c		bcs $0114c5		bcs 	_DTKNotString
.0114a9	5a		phy			phy										; save token address on stack.
.0114aa	c8		iny			iny 									; skip first token
.0114ab	c8		iny			iny
.0114ac	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0114af	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.0114b2	98		tya			tya 									; copy the string out.
.0114b3	20 60 07	jsr $010760		jsr 	StringCreateCopy
.0114b6	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0114b9	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.0114bc	68		pla			pla 									; get token, which is its own offset
.0114bd	a8		tay			tay
.0114be	18		clc			clc
.0114bf	79 00 00	adc $0000,y		adc 	$0000,y
.0114c2	a8		tay			tay
.0114c3	80 d6		bra $01149b		bra 	_DTKMainLoop
.0114c5					_DTKNotString:
.0114c5	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0114c8	b0 09		bcs $0114d3		bcs 	_DTKNotShift
.0114ca	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0114cd	85 1c		sta $1c			sta 	DConstantShift
.0114cf	c8		iny			iny 									; skip token.
.0114d0	c8		iny			iny
.0114d1	80 c8		bra $01149b		bra 	_DTKMainLoop
.0114d3					_DTKNotShift:
.0114d3	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.0114d6	b0 07		bcs $0114df		bcs 	_DTKNotKeyword
.0114d8	c8		iny			iny 									; skip over token
.0114d9	c8		iny			iny
.0114da	20 59 15	jsr $011559		jsr 	_DTKDecodeKeyword 				; decode it.
.0114dd	80 bc		bra $01149b		bra 	_DTKMainLoop
.0114df					_DTKNotKeyword:
.0114df	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0114e2	b0 18		bcs $0114fc		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0114e4	5a		phy			phy 									; save pointer
.0114e5	38		sec			sec  									; shift it in the range 0-32767
.0114e6	e9 00 40	sbc #$4000		sbc 	#$4000
.0114e9	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0114ea	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0114ec	6a		ror a			ror 	a 								; rotate that into the constant value
.0114ed	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0114ef	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0114f2	20 d1 10	jsr $0110d1		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114f5	64 1c		stz $1c			stz 	DConstantShift
.0114f7	7a		ply			ply 									; restore pointer
.0114f8	c8		iny			iny 									; skip token.
.0114f9	c8		iny			iny
.0114fa	80 9f		bra $01149b		bra 	_DTKMainLoop
.0114fc					_DTKIdentifier:
.0114fc	48		pha			pha 									; save token for typing at end
.0114fd					_DTKILoop:
.0114fd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011500	20 29 15	jsr $011529		jsr 	_DTKIDecodeToken 				; decode it.
.011503	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011506	c8		iny			iny 									; skip it
.011507	c8		iny			iny
.011508	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01150b	d0 f0		bne $0114fd		bne 	_DTKILoop
.01150d	68		pla			pla 									; add $( as required.
.01150e	48		pha			pha 									; comes from the first token.
.01150f	29 00 20	and #$2000		and 	#IDTypeMask
.011512	f0 06		beq $01151a		beq 	_DTKINotString
.011514	a9 24 00	lda #$0024		lda 	#"$"
.011517	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.01151a					_DTKINotString:
.01151a	68		pla			pla
.01151b	29 00 10	and #$1000		and 	#IDArrayMask
.01151e	f0 06		beq $011526		beq 	_DTKINotArray
.011520	a9 28 00	lda #$0028		lda 	#"("
.011523	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.011526					_DTKINotArray:
.011526	82 72 ff	brl $01149b		brl 	_DTKMainLoop
.011529					_DTKIDecodeToken:
.011529	5a		phy			phy
.01152a	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01152d	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011530					_DTKIDivide:
.011530	38		sec			sec
.011531	e9 2d 00	sbc #$002d		sbc 	#45
.011534	c8		iny			iny
.011535	b0 f9		bcs $011530		bcs 	_DTKIDivide
.011537	69 2d 00	adc #$002d		adc 	#45
.01153a	20 43 15	jsr $011543		jsr 	_DTKIOutA 						; output low.
.01153d	98		tya			tya
.01153e	20 43 15	jsr $011543		jsr 	_DTKIOutA 						; output high
.011541	7a		ply			ply
.011542	60		rts			rts
.011543					_DTKIOutA:
.011543	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011546	f0 10		beq $011558		beq 	_DTKIOutExit
.011548	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01154b	90 04		bcc $011551		bcc 	_DTKIOutAlpha
.01154d	38		sec			sec  									; adjust for 0-9
.01154e	e9 4b 00	sbc #$004b		sbc 	#$4B
.011551					_DTKIOutAlpha:
.011551	18		clc			clc										; adjust for A-Z
.011552	69 60 00	adc #$0060		adc 	#96
.011555	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.011558					_DTKIOutExit:
.011558	60		rts			rts
.011559					_DTKDecodeKeyword:
.011559	48		pha			pha
.01155a	da		phx			phx
.01155b	5a		phy			phy
.01155c	a8		tay			tay 									; save token ID in Y
.01155d	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011560	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011563	48		pha			pha 									; save this flag on a stack
.011564	5a		phy			phy 									; save the token ID
.011565	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011568	d0 19		bne $011583		bne 	_DTKNotSpecial1
.01156a	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01156c	88		dey			dey
.01156d	b9 00 00	lda $0000,y		lda 	$0000,y
.011570	29 ff 00	and #$00ff		and 	#$00FF
.011573	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011576	f0 0b		beq $011583		beq 	_DTKNotSpecial1
.011578	c9 3a 00	cmp #$003a		cmp 	#":"
.01157b	f0 06		beq $011583		beq 	_DTKNotSpecial1
.01157d	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011580	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.011583					_DTKNotSpecial1:
.011583	68		pla			pla
.011584	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011587	a8		tay			tay 									; into Y.
.011588	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01158b					_DTKDWorkThrough:
.01158b	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01158c	f0 0f		beq $01159d		beq 	_DTKDFound
.01158e	86 08		stx $08			stx 	DTemp1
.011590	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; read the type/skip byte.
.011594	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011597	18		clc			clc
.011598	65 08		adc $08			adc 	DTemp1
.01159a	aa		tax			tax
.01159b	80 ee		bra $01158b		bra 	_DTKDWorkThrough
.01159d					_DTKDFound:
.01159d	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; get skip
.0115a1	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0115a4	3a		dec a			dec 	a
.0115a5	a8		tay			tay 									; put in Y
.0115a6					_DTKOut:
.0115a6	bf 9f 00 01	lda $01009f,x		lda 	TokenText+1,x 					; output it.
.0115aa	29 ff 00	and #$00ff		and 	#$00FF
.0115ad					_DTKNotLC:
.0115ad	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.0115b0	e8		inx			inx
.0115b1	88		dey			dey
.0115b2	d0 f2		bne $0115a6		bne 	_DTKOut
.0115b4	68		pla			pla 									; trailing space.
.0115b5	d0 06		bne $0115bd		bne 	_DTKNotSpecial2
.0115b7	a9 20 00	lda #$0020		lda 	#" "
.0115ba	20 52 07	jsr $010752		jsr 	StringWriteCharacter
.0115bd					_DTKNotSpecial2:
.0115bd	7a		ply			ply
.0115be	fa		plx			plx
.0115bf	68		pla			pla
.0115c0	60		rts			rts
.0115c1					ScanIndent:
.0115c1	48		pha			pha
.0115c2	5a		phy			phy
.0115c3	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0115c5	85 2e		sta $2e			sta 	DIndent2
.0115c7	98		tya			tya
.0115c8	18		clc			clc 									; point to code.
.0115c9	69 04 00	adc #$0004		adc 	#4
.0115cc	a8		tay			tay
.0115cd					_SILoop:
.0115cd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0115d0	f0 35		beq $011607		beq 	_SIExit
.0115d2	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.0115d5	b0 08		bcs $0115df		bcs 	_SICheckKeyword
.0115d7	98		tya			tya 									; skip string.
.0115d8	18		clc			clc
.0115d9	79 00 00	adc $0000,y		adc 	$0000,y
.0115dc	a8		tay			tay
.0115dd	80 ee		bra $0115cd		bra 	_SILoop
.0115df					_SICheckKeyword:
.0115df	29 00 e0	and #$e000		and 	#$E000
.0115e2	c9 00 20	cmp #$2000		cmp 	#$2000
.0115e5	f0 04		beq $0115eb		beq 	_SIFoundKeyword
.0115e7					_SIAdvance:
.0115e7	c8		iny			iny 									; if not, loop round.
.0115e8	c8		iny			iny
.0115e9	80 e2		bra $0115cd		bra 	_SILoop
.0115eb					_SIFoundKeyword:
.0115eb	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0115ee	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0115f1	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0115f4	f0 0d		beq $011603		beq 	_SIKeyPlus
.0115f6	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0115f9	d0 ec		bne $0115e7		bne 	_SIAdvance
.0115fb	c6 2c		dec $2c			dec 	DIndent
.0115fd	10 e8		bpl $0115e7		bpl 	_SIAdvance
.0115ff	64 2c		stz $2c			stz 	DIndent
.011601	80 e4		bra $0115e7		bra 	_SIAdvance
.011603					_SIKeyPlus:
.011603	e6 2c		inc $2c			inc 	DIndent
.011605	80 e0		bra $0115e7		bra 	_SIAdvance
.011607					_SIExit:
.011607	7a		ply			ply
.011608	68		pla			pla
.011609	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.01160a					Command_PRINT:
.01160a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01160c	f0 33		beq $011641			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01160e	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.011611	f0 2e		beq $011641			beq 	_FPRExitCR
.011613	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011616	f0 23		beq $01163b			beq 	_FPRSkipLoop
.011618	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.01161b	f0 1b		beq $011638			beq 	_FPRNewLine
.01161d	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.011620	f0 11		beq $011633			beq 	_FPRTab
.011622					_FPRExpression:
.011622	20 01 02	jsr $010201			jsr 	Evaluate 					; evaluate a string or integer.
.011625	b0 06		bcs $01162d			bcs 	_FPRHaveString
.011627	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01162a	20 c9 10	jsr $0110c9			jsr 	ConvertToString
.01162d					_FPRHaveString:
.01162d	a8		tay				tay 								; print the basic String.
.01162e	20 67 06	jsr $010667			jsr 	PrintBASICString
.011631	80 d7		bra $01160a			bra 	Command_Print 				; and go round again.
.011633					_FPRTab:
.011633	20 47 1d	jsr $011d47			jsr 	HWTab
.011636	80 03		bra $01163b			bra 	_FPRSkipLoop
.011638					_FPRNewLine:
.011638	20 32 1d	jsr $011d32			jsr 	HWNewLine
.01163b					_FPRSkipLoop:
.01163b	e6 06		inc $06				inc 	DCodePtr
.01163d	e6 06		inc $06				inc 	DCodePtr
.01163f	80 c9		bra $01160a			bra 	Command_Print
.011641					_FPRExitCR:
.011641	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011643	88		dey				dey
.011644	88		dey				dey
.011645	b9 00 00	lda $0000,y			lda 	$0000,y
.011648	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01164b	f0 08		beq $011655			beq 	_FPRExit
.01164d	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.011650	f0 03		beq $011655			beq 	_FPRExit
.011652	20 32 1d	jsr $011d32			jsr 	HWNewLine 					; print a new line.
.011655					_FPRExit:
.011655	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011656					Command_IF:
.011656	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; check success.
.011659	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01165b	05 08		ora $08				ora 	DTemp1
.01165d	a8		tay				tay 								; success flag in Y.
.01165e	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011660	c9 4b 3a	cmp #$3a4b			cmp 	#thenTokenID
.011663	d0 32		bne $011697			bne 	_FIFExtended 				; if so, go to the extended IF.
.011665	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011667	e6 06		inc $06				inc 	DCodePtr
.011669	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01166c	f0 0f		beq $01167d			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01166e	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011670	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011673	90 21		bcc $011696			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011675	c9 00 c0	cmp #$c000			cmp 	#$C000
.011678	b0 1c		bcs $011696			bcs 	_FIFContinue
.01167a	4c fd 18	jmp $0118fd			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01167d					_FIFEndOfLine:
.01167d	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.01167f	f0 15		beq $011696			beq 	_FIFContinue 				; if done so, continue.
.011681	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011684	90 06		bcc $01168c			bcc 	_FIFStringConstant
.011686	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011688	e6 06		inc $06				inc 	DCodePtr
.01168a	80 f1		bra $01167d			bra 	_FIFEndOfLine
.01168c					_FIFStringConstant:
.01168c	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01168f	18		clc				clc
.011690	65 06		adc $06				adc 	DCodePtr
.011692	85 06		sta $06				sta 	DCodePtr
.011694	80 e7		bra $01167d			bra 	_FIFEndOfLine
.011696					_FIFContinue:
.011696	60		rts				rts
.011697					_FIFExtended:
.011697	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011699	e6 2a		inc $2a				inc 	DStack
.01169b	a9 46 3c	lda #$3c46			lda 	#ifTokenID
.01169e	a6 2a		ldx $2a				ldx 	DStack
.0116a0	95 00		sta $00,x			sta 	$00,x
.0116a2	98		tya				tya 								; see if the test was passed.
.0116a3	f0 01		beq $0116a6			beq 	_FIXSkip 					; if zero then it has failed.
.0116a5	60		rts				rts 								; test passed, so continue executing
.0116a6					_FIXSkip:
.0116a6	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0116a9	a2 4c 3a	ldx #$3a4c			ldx 	#endifTokenID 				; at the same level.
.0116ac	20 0c 17	jsr $01170c			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0116af	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0116b1	e6 06		inc $06				inc 	DCodePtr
.0116b3	c9 4c 3a	cmp #$3a4c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0116b6	d0 04		bne $0116bc			bne 	_FIXNoThrow
.0116b8	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116ba	c6 2a		dec $2a				dec 	DStack
.0116bc					_FIXNoThrow:
.0116bc	60		rts				rts
.0116bd					Handler_ELSE:
.0116bd	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116bf	b5 00		lda $00,x			lda 	$00,x
.0116c1	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.0116c4	d0 12		bne $0116d8			bne 	_HEBadStructure
.0116c6	a9 4c 3a	lda #$3a4c			lda 	#endifTokenID 				; only searching one token.
.0116c9	a2 00 00	ldx #$0000			ldx 	#$0000
.0116cc	20 0c 17	jsr $01170c			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0116cf	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0116d1	e6 06		inc $06				inc 	DCodePtr
.0116d3	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116d5	c6 2a		dec $2a				dec 	DStack
.0116d7	60		rts				rts
.0116d8					_HEBadStructure:
.0116d8	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0116db	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116e3	68 6f 75 74 20 49 66 00
.0116eb					Handler_ENDIF:
.0116eb	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116ed	b5 00		lda $00,x			lda 	$00,x
.0116ef	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.0116f2	d0 05		bne $0116f9			bne 	_HEIBadStructure
.0116f4	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116f6	c6 2a		dec $2a				dec 	DStack
.0116f8	60		rts				rts
.0116f9					_HEIBadStructure:
.0116f9	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0116fc	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011704	68 6f 75 74 20 49 66 00
.01170c					ScanForwardLevel:
.01170c	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01170e	86 0a		stx $0a				stx 	DTemp1+2
.011710	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011712	85 0c		sta $0c				sta 	DTemp2
.011714	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011717					_SFLLoop:
.011717	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01171a	d0 0d		bne $011729			bne 	_SFLNoCheck 				; we're in a substructure.
.01171c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01171e	f0 09		beq $011729			beq 	_SFLNoCheck 				; don't check zero
.011720	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011722	f0 04		beq $011728			beq 	_SFLFound
.011724	c5 0a		cmp $0a				cmp 	DTemp1+2
.011726	d0 01		bne $011729			bne 	_SFLNoCheck
.011728					_SFLFound:
.011728	60		rts				rts
.011729					_SFLNoCheck:
.011729	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01172b	f0 4f		beq $01177c			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01172d	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011730	90 40		bcc $011772			bcc 	_SFLSkipString 				; then handle that.
.011732	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011734	e6 06		inc $06				inc 	DCodePtr
.011736	a8		tay				tay 								; put token in Y temporarily.
.011737	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01173a	c9 00 20	cmp #$2000			cmp 	#$2000
.01173d	d0 d8		bne $011717			bne 	_SFLLoop
.01173f	98		tya				tya 								; get the token back.
.011740	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011743	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011746	f0 cf		beq $011717			beq 	_SFLLoop
.011748	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01174b	90 ca		bcc $011717			bcc 	_SFLLoop
.01174d	e8		inx				inx 								; increment the level.
.01174e	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011751	f0 c4		beq $011717			beq 	_SFLLoop
.011753	ca		dex				dex 								; decrement the level
.011754	ca		dex				dex 								; one overdoes the previous inx.
.011755	10 c0		bpl $011717			bpl 	_SFLLoop 					; if gone -ve then error.
.011757					_SFLError:
.011757	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011759	85 22		sta $22				sta 	DLineNumber
.01175b	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01175e	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011766	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011772					_SFLSkipString:
.011772	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011775	18		clc				clc
.011776	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011778	85 06		sta $06				sta 	DCodePtr
.01177a	80 9b		bra $011717			bra 	_SFLLoop 					; go round again.
.01177c					_SFLNextLine:
.01177c	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.01177e	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011781	f0 d4		beq $011757			beq 	_SFLError 					; if zero, then there's no more code to search.
.011783	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011786	85 22		sta $22				sta 	DLineNumber
.011788	18		clc				clc
.011789	a5 06		lda $06				lda 	DCodePtr
.01178b	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01178e	85 06		sta $06				sta 	DCodePtr
.011790	80 85		bra $011717			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.011792					Command_FOR:
.011792	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011794	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011797	d0 51		bne $0117ea			bne		_CFOBad
.011799	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find variable
.01179c	b0 06		bcs $0117a4			bcs 	_CFOExists
.01179e	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0117a1	20 46 04	jsr $010446			jsr 	VariableCreateNew			; create it and skip token.
.0117a4					_CFOExists:
.0117a4	48		pha				pha 								; push variable address on stack
.0117a5	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0117a8	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.0117ab	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the start value
.0117ae	bb		tyx				tyx 								; put high value in X
.0117af	7a		ply				ply 								; address of for variable in Y
.0117b0	99 00 00	sta $0000,y			sta 	$0000,y
.0117b3	8a		txa				txa
.0117b4	99 02 00	sta $0002,y			sta 	$0002,y
.0117b7	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.0117ba	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.0117bd	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0117bf	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0117c1	95 02		sta $02,x			sta 	$02,x
.0117c3	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117c5	95 04		sta $04,x			sta 	$04,x
.0117c7	98		tya				tya 								; save variable address at +6
.0117c8	95 06		sta $06,x			sta 	$06,x
.0117ca	a9 47 3c	lda #$3c47			lda 	#forTokenID 				; save for token at +8
.0117cd	95 08		sta $08,x			sta 	$08,x
.0117cf	8a		txa				txa 								; add 8 to stack position
.0117d0	18		clc				clc
.0117d1	69 08 00	adc #$0008			adc 	#8
.0117d4	85 2a		sta $2a				sta 	DStack
.0117d6	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0117d9	b2 06		lda ($06)			lda 	(DCodePtr)
.0117db	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.0117de	d0 09		bne $0117e9			bne 	_CFONoStep
.0117e0	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.0117e3	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.0117e6	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; and whatever the step is.
.0117e9					_CFONoStep:
.0117e9	60		rts				rts
.0117ea					_CFOBad:
.0117ea	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0117ed	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0117f5	76 61 72 69 61 62 6c 65 00
.0117fe					Command_NEXT:
.0117fe	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011800	b5 00		lda $00,x			lda 	$00,x
.011802	c9 47 3c	cmp #$3c47			cmp 	#forTokenID 				; if not FOR then error
.011805	f0 14		beq $01181b			beq 	_CNXOk
.011807	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01180a	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011812	68 6f 75 74 20 46 6f 72 00
.01181b					_CNXOk:
.01181b	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01181d	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011820	90 22		bcc $011844			bcc 	_CNXNoVariable
.011822	20 9c 03	jsr $01039c			jsr 	VariableFind 				; get address of variable.
.011825	90 08		bcc $01182f			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011827	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011829	ca		dex				dex
.01182a	ca		dex				dex
.01182b	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01182d	f0 15		beq $011844			beq 	_CNXNoVariable 				; then continue
.01182f					_CNXNextVar:
.01182f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011832	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01183a	20 76 61 72 69 61 62 6c 65 00
.011844					_CNXNoVariable:
.011844	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011846	48		pha				pha
.011847	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011849	38		sec				sec
.01184a	e9 08 00	sbc #$0008			sbc 	#8
.01184d	85 2a		sta $2a				sta 	DStack
.01184f	aa		tax				tax 								; X points to the stack.
.011850	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011852	85 06		sta $06				sta 	DCodePtr
.011854	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the target constant
.011857	5a		phy				phy 								; save the target on the stack
.011858	48		pha				pha
.011859	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01185c	85 08		sta $08				sta 	DTemp1
.01185e	64 0a		stz $0a				stz 	DTemp1+2
.011860	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011862	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.011865	d0 0b		bne $011872			bne 	_CNXNoStep
.011867	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011869	e6 06		inc $06				inc 	DCodePtr
.01186b	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; work out the step.
.01186e	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011870	84 0a		sty $0a				sty 	DTemp1+2
.011872					_CNXNoStep:
.011872	68		pla				pla 								; save the Target in DTemp2
.011873	85 0c		sta $0c				sta 	DTemp2
.011875	68		pla				pla
.011876	85 0e		sta $0e				sta 	DTemp2+2
.011878	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.01187a	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01187c	a8		tay				tay
.01187d	18		clc				clc
.01187e	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011881	65 08		adc $08				adc 	DTemp1
.011883	99 00 00	sta $0000,y			sta 	$0000,y
.011886	b9 02 00	lda $0002,y			lda 	$0002,y
.011889	65 0a		adc $0a				adc 	DTemp1+2
.01188b	99 02 00	sta $0002,y			sta 	$0002,y
.01188e	38		sec				sec
.01188f	a5 0c		lda $0c				lda 	DTemp2
.011891	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011894	85 0c		sta $0c				sta 	DTemp2
.011896	a5 0e		lda $0e				lda 	DTemp2+2
.011898	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01189b	85 0e		sta $0e				sta 	DTemp2+2
.01189d	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01189f	f0 0a		beq $0118ab			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0118a1	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0118a3	45 0a		eor $0a				eor 	DTemp1+2
.0118a5	10 04		bpl $0118ab			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0118a7	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0118a8	85 06		sta $06				sta 	DCodePtr
.0118aa	60		rts				rts
.0118ab					_CNXLoopAgain:
.0118ab	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0118ac	18		clc				clc
.0118ad	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0118af	aa		tax				tax
.0118b0	69 08 00	adc #$0008			adc 	#8
.0118b3	85 2a		sta $2a				sta 	DStack
.0118b5	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0118b7	85 22		sta $22				sta 	DLineNumber
.0118b9	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.0118ba					Command_ONGOTO:
.0118ba	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; on what GOTO :)
.0118bd	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0118c0	d0 25		bne $0118e7			bne 	_FOGoFail
.0118c2	c9 00 00	cmp #$0000			cmp 	#0
.0118c5	f0 20		beq $0118e7			beq 	_FOGoFail 					; we start with index = 1
.0118c7	48		pha				pha 								; save count on stack
.0118c8	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.0118cb	20 ed 05	jsr $0105ed			jsr 	ExpectToken
.0118ce	fa		plx				plx 								; put count in X.
.0118cf					_FOGoLoop:
.0118cf	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0118d1	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118d4	90 73		bcc $011949			bcc 	FGOFail 					; if not, then we have an error.
.0118d6	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118d9	b0 6e		bcs $011949			bcs 	FGOFail
.0118db	ca		dex				dex 								; subtract one, if done, call GOTO code
.0118dc	f0 1f		beq $0118fd			beq 	Command_GOTO
.0118de	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0118e0	e6 06		inc $06				inc 	DCodePtr
.0118e2	20 10 06	jsr $010610			jsr 	ExpectComma 				; expect a comma
.0118e5	80 e8		bra $0118cf			bra 	_FOGoLoop 					; and loop round.
.0118e7					_FOGoFail:
.0118e7	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0118ea	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0118f2	47 6f 74 6f 20 76 61 6c 75 65 00
.0118fd					Command_GOTO:
.0118fd	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0118ff	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011902	90 45		bcc $011949			bcc 	FGOFail 					; we don't do calculate line numbers.
.011904	c9 00 c0	cmp #$c000			cmp 	#$C000
.011907	b0 40		bcs $011949			bcs 	FGOFail
.011909	38		sec				sec 								; convert to 0-32767
.01190a	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01190d	aa		tax				tax
.01190e	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011911	18		clc				clc
.011912	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011914	a8		tay				tay
.011915					_FGOSearch:
.011915	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011918	f0 18		beq $011932			beq 	_FGOUnknown
.01191a	8a		txa				txa 								; does it match line number ?
.01191b	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01191e	f0 08		beq $011928			beq 	_FGOFound 					; yes, then found.
.011920	98		tya				tya 								; no follow the link
.011921	18		clc				clc
.011922	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011925	a8		tay				tay
.011926	80 ed		bra $011915			bra 	_FGOSearch 					; and keep looking
.011928					_FGOFound:
.011928	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01192a	98		tya				tya 								; Y + 4 is the code pointer.
.01192b	18		clc				clc 								; (skipping link and line #)
.01192c	69 04 00	adc #$0004			adc 	#4
.01192f	85 06		sta $06				sta 	DCodePtr
.011931	60		rts				rts									; and continue
.011932					_FGOUnknown:
.011932	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011935	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01193d	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011949					FGOFail:
.011949	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01194c	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011954	20 4e 75 6d 62 65 72 00
.01195c					Command_GOSUB:
.01195c	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01195e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011960	18		clc				clc
.011961	69 02 00	adc #$0002			adc 	#2
.011964	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011966	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011968	95 04		sta $04,x			sta 	$04,x
.01196a	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.01196d	95 06		sta $06,x			sta 	$06,x
.01196f	8a		txa				txa 								; advance stack by 6.
.011970	18		clc				clc
.011971	69 06 00	adc #$0006			adc 	#6
.011974	85 2a		sta $2a				sta 	DStack
.011976	80 85		bra $0118fd			bra 	Command_GOTO 				; and do a GOTO.
.011978					Command_RETURN:
.011978	a6 2a		ldx $2a				ldx 	DStack
.01197a	b5 00		lda $00,x			lda 	$00,x
.01197c	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.01197f	d0 11		bne $011992			bne 	_FRetFail
.011981	8a		txa				txa 								; unpick stack.
.011982	38		sec				sec
.011983	e9 06 00	sbc #$0006			sbc 	#6
.011986	85 2a		sta $2a				sta 	DStack
.011988	aa		tax				tax
.011989	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01198b	85 06		sta $06				sta 	DCodePtr
.01198d	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01198f	85 22		sta $22				sta 	DLineNumber
.011991	60		rts				rts
.011992					_FRetFail:
.011992	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011995	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01199d	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0119aa					Command_REPEAT:
.0119aa	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119ac	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0119ae	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119b0	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119b2	95 04		sta $04,x			sta 	$04,x
.0119b4	a9 44 3c	lda #$3c44			lda 	#repeatTokenID 				; save repeat token at +6
.0119b7	95 06		sta $06,x			sta 	$06,x
.0119b9	8a		txa				txa 								; advance stack by 6.
.0119ba	18		clc				clc
.0119bb	69 06 00	adc #$0006			adc 	#6
.0119be	85 2a		sta $2a				sta 	DStack
.0119c0	60		rts				rts
.0119c1					Command_UNTIL:
.0119c1	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0119c3	b5 00		lda $00,x			lda 	$00,x
.0119c5	c9 44 3c	cmp #$3c44			cmp 	#repeatTokenID
.0119c8	d0 26		bne $0119f0			bne 	_FUNFail
.0119ca	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; .... until what.
.0119cd	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.0119d0	d0 15		bne $0119e7			bne 	_FUNExit
.0119d2	c9 00 00	cmp #$0000			cmp 	#0
.0119d5	d0 10		bne $0119e7			bne 	_FUNExit
.0119d7	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0119d9	38		sec				sec
.0119da	e9 06 00	sbc #$0006			sbc 	#6
.0119dd	aa		tax				tax
.0119de	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119e0	85 06		sta $06				sta 	DCodePtr
.0119e2	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119e4	85 22		sta $22				sta 	DLineNumber
.0119e6	60		rts				rts
.0119e7					_FUNExit:
.0119e7	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0119e9	38		sec				sec
.0119ea	e9 06 00	sbc #$0006			sbc 	#6
.0119ed	85 2a		sta $2a				sta 	DStack
.0119ef	60		rts				rts
.0119f0					_FUNFail:
.0119f0	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0119f3	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0119fb	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011a08					Command_WHILE:
.011a08	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a0a	48		pha				pha 								; save on stack
.011a0b	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; while what.
.011a0e	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a11	d0 14		bne $011a27			bne 	_FWHExecute
.011a13	c9 00 00	cmp #$0000			cmp 	#0
.011a16	d0 0f		bne $011a27			bne 	_FWHExecute
.011a18	68		pla				pla 								; throw away current instruction
.011a19	a9 49 3a	lda #$3a49			lda 	#wendTokenID 				; skip to WEND
.011a1c	a2 00 00	ldx #$0000			ldx 	#0
.011a1f	20 0c 17	jsr $01170c			jsr 	ScanForwardLevel 			; scan forward checking structures
.011a22	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011a24	e6 06		inc $06				inc 	DCodePtr
.011a26	60		rts				rts
.011a27					_FWHExecute:
.011a27	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a29	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011a2a	3a		dec a				dec 	a
.011a2b	3a		dec a				dec 	a
.011a2c	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a2e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a30	95 04		sta $04,x			sta 	$04,x
.011a32	a9 45 3c	lda #$3c45			lda 	#whileTokenID 				; save while token at +6
.011a35	95 06		sta $06,x			sta 	$06,x
.011a37	8a		txa				txa 								; advance stack by 6.
.011a38	18		clc				clc
.011a39	69 06 00	adc #$0006			adc 	#6
.011a3c	85 2a		sta $2a				sta 	DStack
.011a3e	60		rts				rts
.011a3f					Command_WEND:
.011a3f	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011a41	b5 00		lda $00,x			lda 	$00,x
.011a43	c9 45 3c	cmp #$3c45			cmp 	#whileTokenID
.011a46	d0 11		bne $011a59			bne 	_FWEFail
.011a48	8a		txa				txa 								; unpick stack and always loop back.
.011a49	38		sec				sec 								; we do the check at the top.
.011a4a	e9 06 00	sbc #$0006			sbc 	#6
.011a4d	85 2a		sta $2a				sta 	DStack
.011a4f	aa		tax				tax
.011a50	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a52	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011a54	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a56	85 22		sta $22				sta 	DLineNumber
.011a58	60		rts				rts
.011a59					_FWEFail:
.011a59	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011a5c	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011a64	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011a6f					Command_END:
.011a6f	4c 30 1e	jmp $011e30			jmp 	WarmStart
.011a72					Command_RUN:
.011a72	20 fd 1a	jsr $011afd			jsr 	Command_CLEAR 				; clear all variables.
.011a75	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011a77	18		clc				clc
.011a78	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011a7b	80 0c		bra $011a89			bra 	FRun_NextLineNumber
.011a7d					RUNExecuteTokenBuffer:
.011a7d	64 22		stz $22				stz 	DLineNumber					; zero line number
.011a7f	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011a82	18		clc				clc
.011a83	65 02		adc $02				adc 	DBaseAddress
.011a85	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011a87	80 12		bra $011a9b			bra 	FRun_NextInstruction
.011a89					FRun_NextLineNumber:
.011a89	a8		tay				tay 								; put in Y
.011a8a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011a8d	f0 e0		beq $011a6f			beq 	Command_END 				; if zero, off the end of the program, so END the program
.011a8f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011a92	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011a94	98		tya				tya 								; get address back
.011a95	18		clc				clc 								; skip over the link/line number
.011a96	69 04 00	adc #$0004			adc 	#4
.011a99	85 06		sta $06				sta 	DCodePtr
.011a9b					FRun_NextInstruction:
.011a9b	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011a9d	20 4e 1d	jsr $011d4e			jsr 	HWCheckBreak 				; break key pressed.
.011aa0	d0 40		bne $011ae2			bne 	_FRun_Break
.011aa2	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011aa4	f0 32		beq $011ad8			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011aa6	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011aa9	f0 18		beq $011ac3			beq 	_FRun_Colon
.011aab	a8		tay				tay 								; save in Y
.011aac	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011aaf	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011ab2	d0 15		bne $011ac9			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011ab4	98		tya				tya 								; get token back
.011ab5	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011ab8	0a		asl a				asl 	a 							; double it into X
.011ab9	aa		tax				tax
.011aba	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011abc	e6 06		inc $06				inc 	DCodePtr
.011abe	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011ac1	80 d8		bra $011a9b			bra 	FRun_NextInstruction 		; do the following instruction.
.011ac3					_FRun_Colon:
.011ac3	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011ac5	e6 06		inc $06				inc 	DCodePtr
.011ac7	80 d2		bra $011a9b			bra 	FRun_NextInstruction 		; do the following instruction.
.011ac9					_FRun_TryLET:
.011ac9	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011acb	c9 00 c0	cmp #$c000			cmp 	#$C000
.011ace	90 05		bcc $011ad5			bcc		_FRunSyntax 				; no, must be syntax.
.011ad0	20 59 12	jsr $011259			jsr 	Command_LET 				; try as a LET.
.011ad3	80 c6		bra $011a9b			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011ad5					_FRunSyntax:
.011ad5	82 f4 ea	brl $0105cc			brl 	SyntaxError
.011ad8					_FRun_EndInstruction:
.011ad8	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011ada	f0 0f		beq $011aeb			beq 	_FRun_WarmStart
.011adc	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011ade	1a		inc a				inc 	a 							; go to link for next line
.011adf	1a		inc a				inc 	a
.011ae0	80 a7		bra $011a89			bra 	FRun_NextLineNumber
.011ae2					_FRun_Break:
.011ae2	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011ae5	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011aeb					_FRun_WarmStart:
.011aeb	82 42 03	brl $011e30			brl 	WarmStart
.011aee					Command_NEW:
.011aee	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011af1	18		clc				clc
.011af2	65 02		adc $02				adc 	DBaseAddress
.011af4	a8		tay				tay
.011af5	a9 00 00	lda #$0000			lda 	#$0000
.011af8	99 00 00	sta $0000,y			sta 	$0000,y
.011afb	80 00		bra $011afd			bra 	Command_Clear
.011afd					Command_CLEAR:
.011afd	20 09 1b	jsr $011b09			jsr 	ClearVariablesPointersAndStacks
.011b00	60		rts				rts
.011b01					Command_STOP:
.011b01	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011b04	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b09					ClearVariablesPointersAndStacks:
.011b09	a9 80 00	lda #$0080			lda 	#BASStack
.011b0c	85 2a		sta $2a				sta 	DStack
.011b0e	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b10	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011b13	a9 00 00	lda #$0000			lda 	#$0000
.011b16	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b18	20 44 1b	jsr $011b44			jsr 	FindCodeEnd 				; find where the program ends.
.011b1b	a8		tay				tay 								; Y points to it.
.011b1c	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011b1f	99 02 00	sta $0002,y			sta 	$0002,y
.011b22	99 04 00	sta $0004,y			sta 	$0004,y
.011b25	98		tya				tya 								; start of working memory up
.011b26	18		clc				clc
.011b27	69 06 00	adc #$0006			adc 	#6
.011b2a	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011b2d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b2f	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b32					_FCLoop:
.011b32	a9 00 00	lda #$0000			lda 	#$0000
.011b35	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b37	c8		iny				iny
.011b38	c8		iny				iny
.011b39	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011b3c	d0 f4		bne $011b32			bne 	_FCLoop
.011b3e	64 16		stz $16				stz 	DTempStringPointer
.011b40	20 81 06	jsr $010681			jsr 	StringResetPermanent
.011b43	60		rts				rts
.011b44					FindCodeEnd:
.011b44	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011b47	18		clc				clc
.011b48	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011b4a	a8		tay				tay
.011b4b					_FCELoop:
.011b4b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011b4e	f0 08		beq $011b58			beq 	_FCEExit
.011b50	98		tya				tya 								; add offset
.011b51	18		clc				clc
.011b52	79 00 00	adc $0000,y			adc 	$0000,y
.011b55	a8		tay				tay
.011b56	80 f3		bra $011b4b			bra 	_FCELoop
.011b58					_FCEExit:
.011b58	98		tya				tya 								; return in A
.011b59	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011b5a					Function_Dim:
.011b5a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011b5c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011b5f	f0 48		beq $011ba9			beq		_FDIMNotArray 				; no, error.
.011b61	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find it.
.011b64	b0 4e		bcs $011bb4			bcs 	_FDIMExists 				; if it does, that's an error.
.011b66	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011b68	48		pha				pha
.011b69	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011b6b	48		pha				pha
.011b6c					_FDIMSkip:
.011b6c	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token, so we can evaluate the array size.
.011b6e	e6 06		inc $06				inc 	DCodePtr
.011b70	e6 06		inc $06				inc 	DCodePtr
.011b72	29 00 08	and #$0800			and 	#IDContMask
.011b75	d0 f5		bne $011b6c			bne 	_FDIMSkip
.011b77	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; evaluate the size
.011b7a	20 07 06	jsr $010607			jsr 	ExpectRightBracket 			; check the ) following.
.011b7d	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011b80	d0 48		bne $011bca			bne 	_FDIMSize
.011b82	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011b85	f0 43		beq $011bca			beq 	_FDIMSize
.011b87	7a		ply				ply 								; restore HashTablePtr for the array variable.
.011b88	84 20		sty $20				sty 	DHashTablePtr
.011b8a	7a		ply				ply 								; restore DCodePtr to point to the identifier.
.011b8b	84 06		sty $06				sty 	DCodePtr
.011b8d	20 46 04	jsr $010446			jsr 	VariableCreateNew 			; create the variable.
.011b90					_FDIMFindRight:
.011b90	b2 06		lda ($06)			lda 	(DCodePtr)
.011b92	e6 06		inc $06				inc 	DCodePtr
.011b94	e6 06		inc $06				inc 	DCodePtr
.011b96	c9 28 32	cmp #$3228			cmp 	#rParenTokenID
.011b99	d0 f5		bne $011b90			bne 	_FDIMFindRight
.011b9b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011b9d	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011ba0	d0 06		bne $011ba8			bne 	_FDIMExit
.011ba2	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011ba4	e6 06		inc $06				inc 	DCodePtr
.011ba6	80 b2		bra $011b5a			bra 	Function_DIM 				; and do another
.011ba8					_FDIMExit:
.011ba8	60		rts				rts
.011ba9					_FDIMNotArray:
.011ba9	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011bac	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011bb4					_FDIMExists:
.011bb4	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011bb7	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011bbf	65 64 69 6d 65 6e 73 69 6f 6e 00
.011bca					_FDIMSize:
.011bca	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011bcd	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011bd5	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011bdb					Command_POKE:
.011bdb	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011bde	48		pha				pha	 								; save on stack
.011bdf	5a		phy				phy
.011be0	20 10 06	jsr $010610			jsr 	ExpectComma 				; comma seperator.
.011be3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011be6	fa		plx				plx 								; pull address and store in DTemp1
.011be7	86 0a		stx $0a				stx 	DTemp1+2
.011be9	fa		plx				plx
.011bea	86 08		stx $08				stx 	DTemp1+0
.011bec	e2 20		sep #$20			sep 	#$20 						; byte mode
.011bee	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011bf0	c2 20		rep #$20			rep 	#$20 						; word mode
.011bf2	60		rts				rts
.011bf3					Command_DOKE:
.011bf3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011bf6	48		pha				pha	 								; save on stack
.011bf7	5a		phy				phy
.011bf8	20 10 06	jsr $010610			jsr 	ExpectComma 				; comma seperator.
.011bfb	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011bfe	fa		plx				plx 								; pull address and store in DTemp1
.011bff	86 0a		stx $0a				stx 	DTemp1+2
.011c01	fa		plx				plx
.011c02	86 08		stx $08				stx 	DTemp1+0
.011c04	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c06	60		rts				rts
.011c07					Command_LOKE:
.011c07	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c0a	48		pha				pha	 								; save on stack
.011c0b	5a		phy				phy
.011c0c	20 10 06	jsr $010610			jsr 	ExpectComma 				; comma seperator.
.011c0f	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c12	fa		plx				plx 								; pull address and store in DTemp1
.011c13	86 0a		stx $0a				stx 	DTemp1+2
.011c15	fa		plx				plx
.011c16	86 08		stx $08				stx 	DTemp1+0
.011c18	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c1a	98		tya				tya
.011c1b	a0 02 00	ldy #$0002			ldy 	#2
.011c1e	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c20	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.011c21					Command_ASSERT:
.011c21	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; something that returns an integer.
.011c24	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011c26	05 08		ora $08				ora 	Dtemp1
.011c28	f0 01		beq $011c2b			beq 	_FAssFail
.011c2a	60		rts				rts
.011c2b					_FAssFail:
.011c2b	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011c2e	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011c36	61 69 6c 65 64 00
.011c3c					Command_CLS:
.011c3c	20 c8 1c	jsr $011cc8			jsr 	HWClearScreen
.011c3f	60		rts				rts
.011c40					Command_REM:
.011c40	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c42	f0 0f		beq $011c53			beq 	_FRemExit 					; no comment present
.011c44	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011c47	f0 0a		beq $011c53			beq 	_FRemExit 					; no comment present
.011c49	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011c4c	b0 06		bcs $011c54			bcs 	_FRemSyntax
.011c4e	18		clc				clc 								; add to DCodePtr
.011c4f	65 06		adc $06				adc 	DCodePtr
.011c51	85 06		sta $06				sta 	DCodePtr
.011c53					_FRemExit:
.011c53	60		rts				rts
.011c54					_FRemSyntax:
.011c54	82 75 e9	brl $0105cc			brl 	SyntaxError
.011c57					Command_LINK:
.011c57	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; call address same page.
.011c5a	85 08		sta $08				sta 	DTemp1 						; target address
.011c5c	84 0a		sty $0a				sty 	DTemp1+2
.011c5e	7b		tdc				tda 								; work out what the actual address is
.011c5f	18		clc				clc
.011c60	69 08 00	adc #$0008			adc 	#DTemp1
.011c63	8f 98 1c 01	sta $011c98			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011c67	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011c69	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011c6c	48		pha				pha
.011c6d	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011c70	aa		tax				tax
.011c71	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011c74	a8		tay				tay
.011c75	68		pla				pla
.011c76	22 97 1c 01	jsl $011c97			jsl 	_FLIExecuteIt
.011c7a	5a		phy				phy 								; save Y
.011c7b	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011c7d	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c80	8a		txa				txa
.011c81	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011c84	68		pla				pla
.011c85	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011c88	c8		iny				iny 								; point to their high bytes and clear them
.011c89	c8		iny				iny
.011c8a	a9 00 00	lda #$0000			lda 	#0
.011c8d	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c90	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011c93	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011c96	60		rts				rts
.011c97					_FLIExecuteIt:
.011c97	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.
.011c9a					Command_VDU:
.011c9a	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get integer to YA.
.011c9d	a8		tay				tay 								; put into Y
.011c9e	29 ff 00	and #$00ff			and 	#$00FF 						; mask out LSB
.011ca1	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar 				; print the LSB.
.011ca4	b2 06		lda ($06)			lda 	(DCodePtr)
.011ca6	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if , goto next
.011ca9	f0 0e		beq $011cb9			beq 	_CVDUNext
.011cab	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; if ; print MSB and goto next
.011cae	f0 01		beq $011cb1			beq 	_CVDUHighByte
.011cb0					_CVDUExit:
.011cb0	60		rts				rts
.011cb1					_CVDUHighByte:
.011cb1	98		tya				tya 								; get back.
.011cb2	eb		xba				xba 								; byte swap
.011cb3	29 ff 00	and #$00ff			and 	#$00FF 						; mask and print
.011cb6	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar
.011cb9					_CVDUNext:
.011cb9	e6 06		inc $06				inc 	DCodePtr 					; skip , ;
.011cbb	e6 06		inc $06				inc 	DCodePtr
.011cbd	b2 06		lda ($06)			lda 	(DCodePtr)					; continue ?
.011cbf	f0 ef		beq $011cb0			beq		_CVDUExit
.011cc1	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cc4	f0 ea		beq $011cb0			beq 	_CVDUExit
.011cc6	80 d2		bra $011c9a			bra 	Command_VDU

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011cc8					HWClearScreen:
.011cc8	48		pha				pha
.011cc9	da		phx				phx
.011cca	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011ccd	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011cd0	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cd4	ca		dex				dex
.011cd5	10 f6		bpl $011ccd			bpl 	_CS0
.011cd7	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011cda	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011cde	fa		plx				plx
.011cdf	68		pla				pla
.011ce0	60		rts				rts
.011ce1					HWPrintChar:
.011ce1	48		pha				pha
.011ce2	da		phx				phx
.011ce3	5a		phy				phy
.011ce4	48		pha				pha 								; cursor position -> X
.011ce5	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011ce9	aa		tax				tax
.011cea	68		pla				pla
.011ceb	c9 ff ff	cmp #$ffff			cmp 	#-1
.011cee	f0 08		beq $011cf8			beq 	_HWPCNoWrite
.011cf0	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011cf2	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cf6	c2 20		rep #$20			rep 	#$20
.011cf8					_HWPCNoWrite:
.011cf8	e8		inx				inx 								; bump cursor position.
.011cf9	8a		txa				txa
.011cfa	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011cfe	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d01	d0 2b		bne $011d2e			bne 	_HWNotEnd
.011d03	38		sec				sec 	 							; back up one line
.011d04	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d07	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d0b	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d0e					_HWScrollUp:
.011d0e	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d12	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d16	e8		inx				inx
.011d17	e8		inx				inx
.011d18	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d1b	d0 f1		bne $011d0e			bne 	_HWScrollUp
.011d1d	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d20					_HWBlank:
.011d20	a9 20 20	lda #$2020			lda 	#$2020
.011d23	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d27	e8		inx				inx
.011d28	e8		inx				inx
.011d29	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d2c	d0 f2		bne $011d20			bne 	_HWBlank
.011d2e					_HWNotEnd:
.011d2e	7a		ply				ply
.011d2f	fa		plx				plx
.011d30	68		pla				pla
.011d31	60		rts				rts
.011d32					HWNewLine:
.011d32	48		pha				pha
.011d33	da		phx				phx
.011d34	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d37					HWMoveCursor:
.011d37	a9 ff ff	lda #$ffff			lda 	#-1
.011d3a	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar
.011d3d	8a		txa				txa
.011d3e	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d42	d0 f3		bne $011d37			bne 	HWMoveCursor
.011d44	fa		plx				plx
.011d45	68		pla				pla
.011d46	60		rts				rts
.011d47	48		pha		HWTab:	pha
.011d48	da		phx				phx
.011d49	a2 07 00	ldx #$0007			ldx 	#7
.011d4c	80 e9		bra $011d37			bra 	HWMoveCursor
.011d4e					HWCheckBreak:
.011d4e	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011d52	60		rts				rts
.011d53					HWInkey:
.011d53	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011d57	60		rts				rts
.011d58					HWInputLine:
.011d58	20 53 1d	jsr $011d53			jsr 	HWInkey 					; get a keystroke.
.011d5b	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011d5f	f0 f7		beq $011d58			beq 	HWInputLine
.011d61					_HWILWait:
.011d61	20 53 1d	jsr $011d53			jsr 	HWInkey
.011d64	c9 00 00	cmp #$0000			cmp		#0
.011d67	f0 f8		beq $011d61			beq 	_HWILWait
.011d69	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d6d	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d70	90 2f		bcc $011da1			bcc 	_HWILControl
.011d72	20 e1 1c	jsr $011ce1			jsr 	HWPrintChar 				; print out.
.011d75	80 e1		bra $011d58			bra 	HWInputLine 				; loop back.
.011d77					_HWILBackSpace:
.011d77	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d7b	f0 db		beq $011d58			beq 	HWInputLine
.011d7d	aa		tax				tax
.011d7e	ca		dex				dex
.011d7f	a9 20 00	lda #$0020			lda 	#" "
.011d82	e2 20		sep #$20			sep 	#$20
.011d84	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d88	c2 20		rep #$20			rep 	#$20
.011d8a	a2 ff ff	ldx #$ffff			ldx 	#-1
.011d8d					_HWILMove:
.011d8d	8a		txa				txa
.011d8e	18		clc				clc
.011d8f	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011d93	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011d96	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d9a	80 bc		bra $011d58			bra 	HWInputLine
.011d9c					_HWILClear:
.011d9c	20 c8 1c	jsr $011cc8			jsr 	HWClearScreen
.011d9f	80 b7		bra $011d58			bra 	HWInputLine
.011da1					_HWILControl:
.011da1	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011da4	f0 60		beq $011e06			beq 	_HWILTab
.011da6	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011da9	f0 cc		beq $011d77			beq 	_HWILBackSpace
.011dab	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011dae	c9 17 00	cmp #$0017			cmp 	#23
.011db1	f0 da		beq $011d8d			beq 	_HWILMove
.011db3	a2 40 00	ldx #$0040			ldx 	#sWidth
.011db6	c9 13 00	cmp #$0013			cmp 	#19
.011db9	f0 d2		beq $011d8d			beq 	_HWILMove
.011dbb	a2 ff ff	ldx #$ffff			ldx 	#-1
.011dbe	c9 01 00	cmp #$0001			cmp 	#1
.011dc1	f0 ca		beq $011d8d			beq 	_HWILMove
.011dc3	a2 01 00	ldx #$0001			ldx 	#1
.011dc6	c9 04 00	cmp #$0004			cmp 	#4
.011dc9	f0 c2		beq $011d8d			beq 	_HWILMove
.011dcb	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011dce	f0 cc		beq $011d9c			beq 	_HWILClear
.011dd0	c9 0d 00	cmp #$000d			cmp 	#13
.011dd3	d0 83		bne $011d58			bne 	HWInputLine
.011dd5	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011dd9	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011ddc	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011dde	a9 0f 00	lda #$000f			lda 	#$000F
.011de1	85 0a		sta $0a				sta 	DTemp1+2
.011de3	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011de6					_HWILCopy:
.011de6	bb		tyx				tyx
.011de7	b7 08		lda [$08],y			lda 	[DTemp1],y
.011de9	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011ded	c8		iny				iny
.011dee	c8		iny				iny
.011def	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011df2	d0 f2		bne $011de6			bne 	_HWILCopy
.011df4	a9 00 00	lda #$0000			lda 	#0
.011df7	bb		tyx				tyx
.011df8	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011dfc	20 32 1d	jsr $011d32			jsr 	HWNewLine 					; next line.
.011dff	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e02	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e05	60		rts				rts
.011e06					_HWILTab:
.011e06	20 47 1d	jsr $011d47			jsr 	HWTab
.011e09	82 4c ff	brl $011d58			brl 	HWInputLine

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e0c					SwitchBasicInstance:
.011e0c	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e0e	20 c8 1c	jsr $011cc8			jsr 	HWClearScreen 						; clear screen
.011e11	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e14	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e16	86 02		stx $02				stx		DBaseAddress
.011e18	84 04		sty $04				sty 	DHighAddress
.011e1a	ba		tsx				tsx 										; save the current SP.
.011e1b	86 3a		stx $3a				stx 	DStack65816
.011e1d	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e1e	48		pha				pha 										; then copy it into B.
.011e1f	ab		plb				plb
.011e20	ab		plb				plb
.011e21	20 09 1b	jsr $011b09			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e24	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e27	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e29	f0 05		beq $011e30			beq 	WarmStart
.011e2b	3a		dec a				dec 	a 									; decrement zero.
.011e2c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e2e	80 18		bra $011e48			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e30					WarmStart:
.011e30	a2 96 1e	ldx #$1e96			ldx 	#BasicPrompt & $FFFF
.011e33	20 49 06	jsr $010649			jsr 	PrintROMMessage
.011e36					NextCommand:
.011e36	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e38	9a		txs				txs
.011e39	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e3b	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e3e	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e40	d0 52		bne $011e94			bne 	ExitEmulator
.011e42	20 58 1d	jsr $011d58			jsr 	HWInputLine 						; read line to YA.
.011e45	20 81 07	jsr $010781			jsr 	Tokenise 							; tokenise it.
.011e48					ExecuteTokenBuffer:
.011e48	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e4b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e4d	f0 e7		beq $011e36			beq 	NextCommand 						; nothing.
.011e4f	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011e52	90 27		bcc $011e7b			bcc 	_ETBCommand
.011e54	c9 00 c0	cmp #$c000			cmp 	#$C000
.011e57	b0 22		bcs $011e7b			bcs 	_ETBCommand
.011e59	38		sec				sec
.011e5a	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011e5d	f0 1f		beq $011e7e			beq 	_ETBError
.011e5f	48		pha				pha
.011e60	20 d1 04	jsr $0104d1			jsr 	LineDelete 							; delete the line, if it exists.
.011e63	20 09 1b	jsr $011b09			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e66	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011e69	18		clc				clc
.011e6a	65 02		adc $02				adc 	DBaseAddress
.011e6c	a8		tay				tay 										; Y contains the code.
.011e6d	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e70	f0 c4		beq $011e36			beq 	NextCommand 						; no, next command.
.011e72	68		pla				pla 										; line number in A, code in Y.
.011e73	20 0c 05	jsr $01050c			jsr 	LineInsert 							; insert the line
.011e76	20 09 1b	jsr $011b09			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e79	80 bb		bra $011e36			bra 	NextCommand
.011e7b					_ETBCommand:
.011e7b	4c 7d 1a	jmp $011a7d			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011e7e					_ETBError:
.011e7e	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011e81	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011e89	61 76 65 20 6c 69 6e 65 20 30 00
.011e94					ExitEmulator:
.011e94	02 00		cop #$00			cop 	#0
.011e96					BasicPrompt:
>011e96	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 81 07	jsr $010781			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	82 42 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 18 00 64 00 01 e0 06 22
>024208	04 00 00 00 26 32 02 e0 06 22 04 00 00 00 00 00
>024218	12 00 6e 00 47 3c 09 c0 06 22 01 40 2a 38 0e 40
>024228	00 00 22 00 78 00 01 e0 06 22 01 e0 0a 24 17 30
>024238	27 32 11 30 28 32 01 20 0f 40 28 32 0a 24 41 40
>024248	28 32 00 00 12 00 7d 00 02 e0 06 22 02 e0 0a 24
>024258	04 00 01 2e 00 00 0a 00 82 00 4d 3a 09 c0 00 00
>024268	0a 00 8c 00 35 3e 01 e0 00 00 0a 00 96 00 35 3e
>024278	02 e0 00 00 00 00 ee ee ee ee 00 00 00 00 00 00
>024288	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2006 times (32096 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
