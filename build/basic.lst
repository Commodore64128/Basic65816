
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 14 20:20:08 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 62 13 01	jmp $011362			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	5c 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	4a 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	5a 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	6a 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	ae 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	15 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	7a 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	f7 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	d9 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	94 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	94 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	15 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	21 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	9e 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	15 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	26 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	38 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	af 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	8f 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	6b 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	55 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	dd 09					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	fd 0a					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	e9 08					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	21 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	55 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	91 09					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	ab 09					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	c2 09					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	fd 0b					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	bb 0b					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	5c 04					.word IllegalToken             & $FFFF ; token $321f ","
>010040	5c 04					.word IllegalToken             & $FFFF ; token $3220 ";"
>010042	5c 04					.word IllegalToken             & $FFFF ; token $3221 ":"
>010044	5c 04					.word IllegalToken             & $FFFF ; token $3222 "("
>010046	5c 04					.word IllegalToken             & $FFFF ; token $3223 ")"
>010048	5c 04					.word IllegalToken             & $FFFF ; token $3224 "'"
>01004a	5c 04					.word IllegalToken             & $FFFF ; token $3225 "to"
>01004c	5c 04					.word IllegalToken             & $FFFF ; token $3226 "step"
>01004e	50 13					.word Function_REM             & $FFFF ; token $3e27 "rem"
>010050	3f 0c					.word Function_Let             & $FFFF ; token $3e28 "let"
>010052	31 13					.word Function_ASSERT          & $FFFF ; token $3e29 "assert"
>010054	2e 11					.word Function_END             & $FFFF ; token $3e2a "end"
>010056	30 11					.word Function_RUN             & $FFFF ; token $3e2b "run"
>010058	8d 11					.word Function_STOP            & $FFFF ; token $3e2c "stop"
>01005a	89 11					.word Function_CLEAR           & $FFFF ; token $3e2d "clear"
>01005c	e8 11					.word Function_Dim             & $FFFF ; token $3e2e "dim"
>01005e	5c 12					.word Function_COLLECT         & $FFFF ; token $3e2f "collect"
>010060	4c 13					.word Function_CLS             & $FFFF ; token $3e30 "cls"
>010062	ba 0c					.word Function_PRINT           & $FFFF ; token $3e31 "print"
>010064	bc 0f					.word Function_GOTO            & $FFFF ; token $3e32 "goto"
>010066	1b 10					.word Function_GOSUB           & $FFFF ; token $3e33 "gosub"
>010068	37 10					.word Function_RETURN          & $FFFF ; token $3e34 "return"
>01006a	79 0f					.word Function_ONGOTO          & $FFFF ; token $3e35 "on"
>01006c	6d 0d					.word Handler_ELSE             & $FFFF ; token $3e36 "else"
>01006e	eb 12					.word Command_POKE             & $FFFF ; token $3e37 "poke"
>010070	03 13					.word Command_DOKE             & $FFFF ; token $3e38 "doke"
>010072	17 13					.word Command_LOKE             & $FFFF ; token $3e39 "loke"
>010074	69 10					.word Function_REPEAT          & $FFFF ; token $3c3a "repeat"
>010076	c7 10					.word Function_WHILE           & $FFFF ; token $3c3b "while"
>010078	06 0d					.word Function_IF              & $FFFF ; token $3c3c "if"
>01007a	42 0e					.word Command_FOR              & $FFFF ; token $3c3d "for"
>01007c	fe 10					.word Function_WEND            & $FFFF ; token $3a3e "wend"
>01007e	80 10					.word Function_UNTIL           & $FFFF ; token $3a3f "until"
>010080	5c 04					.word IllegalToken             & $FFFF ; token $3a40 "then"
>010082	9b 0d					.word Handler_ENDIF            & $FFFF ; token $3a41 "endif"
>010084	bd 0e					.word Command_NEXT             & $FFFF ; token $3a42 "next"
.010086					TokenText:
>010086	02 26					 .text $02,"&"        ; token $2001
>010088	02 7c					 .text $02,"|"        ; token $2002
>01008a	02 5e					 .text $02,"^"        ; token $2003
>01008c	12 3c					 .text $12,"<"        ; token $2204
>01008e	12 3e					 .text $12,">"        ; token $2205
>010090	12 3d					 .text $12,"="        ; token $2206
>010092	13 3c 3d				 .text $13,"<="       ; token $2207
>010095	13 3e 3d				 .text $13,">="       ; token $2208
>010098	13 3c 3e				 .text $13,"<>"       ; token $2209
>01009b	22 2b					 .text $22,"+"        ; token $240a
>01009d	22 2d					 .text $22,"-"        ; token $240b
>01009f	32 2a					 .text $32,"*"        ; token $260c
>0100a1	32 2f					 .text $32,"/"        ; token $260d
>0100a3	32 25					 .text $32,"%"        ; token $260e
>0100a5	33 3e 3e				 .text $33,">>"       ; token $260f
>0100a8	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100ab	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100b0	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100b5	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100ba	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100bf	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100c4	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100ca	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100d0	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100d5	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100da	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100e0	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100e6	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100ec	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>0100f4	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>0100fc	92 2c					 .text $92,","        ; token $321f
>0100fe	92 3b					 .text $92,";"        ; token $3220
>010100	92 3a					 .text $92,":"        ; token $3221
>010102	92 28					 .text $92,"("        ; token $3222
>010104	92 29					 .text $92,")"        ; token $3223
>010106	92 27					 .text $92,"'"        ; token $3224
>010108	93 74 6f				 .text $93,"to"       ; token $3225
>01010b	95 73 74 65 70				 .text $95,"step"     ; token $3226
>010110	f4 72 65 6d				 .text $f4,"rem"      ; token $3e27
>010114	f4 6c 65 74				 .text $f4,"let"      ; token $3e28
>010118	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e29
>01011f	f4 65 6e 64				 .text $f4,"end"      ; token $3e2a
>010123	f4 72 75 6e				 .text $f4,"run"      ; token $3e2b
>010127	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2c
>01012c	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e2d
>010132	f4 64 69 6d				 .text $f4,"dim"      ; token $3e2e
>010136	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e2f
>01013e	f4 63 6c 73				 .text $f4,"cls"      ; token $3e30
>010142	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e31
>010148	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e32
>01014d	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e33
>010153	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e34
>01015a	f3 6f 6e				 .text $f3,"on"       ; token $3e35
>01015d	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e36
>010162	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e37
>010167	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e38
>01016c	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e39
>010171	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c3a
>010178	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c3b
>01017e	e3 69 66				 .text $e3,"if"       ; token $3c3c
>010181	e4 66 6f 72				 .text $e4,"for"      ; token $3c3d
>010185	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a3e
>01018a	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a3f
>010190	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a40
>010195	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a41
>01019b	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a42
>0101a0	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$321f					commaTokenID                     = $321f
=$3220					semicolonTokenID                 = $3220
=$3221					colonTokenID                     = $3221
=$3222					lparenTokenID                    = $3222
=$3223					rparenTokenID                    = $3223
=$3224					squoteTokenID                    = $3224
=$3225					toTokenID                        = $3225
=$3226					stepTokenID                      = $3226
=$3e27					remTokenID                       = $3e27
=$3e28					letTokenID                       = $3e28
=$3e29					assertTokenID                    = $3e29
=$3e2a					endTokenID                       = $3e2a
=$3e2b					runTokenID                       = $3e2b
=$3e2c					stopTokenID                      = $3e2c
=$3e2d					clearTokenID                     = $3e2d
=$3e2e					dimTokenID                       = $3e2e
=$3e2f					collectTokenID                   = $3e2f
=$3e30					clsTokenID                       = $3e30
=$3e31					printTokenID                     = $3e31
=$3e32					gotoTokenID                      = $3e32
=$3e33					gosubTokenID                     = $3e33
=$3e34					returnTokenID                    = $3e34
=$3e35					onTokenID                        = $3e35
=$3e36					elseTokenID                      = $3e36
=$3e37					pokeTokenID                      = $3e37
=$3e38					dokeTokenID                      = $3e38
=$3e39					lokeTokenID                      = $3e39
=$3c3a					repeatTokenID                    = $3c3a
=$3c3b					whileTokenID                     = $3c3b
=$3c3c					ifTokenID                        = $3c3c
=$3c3d					forTokenID                       = $3c3d
=$3a3e					wendTokenID                      = $3a3e
=$3a3f					untilTokenID                     = $3a3f
=$3a40					thenTokenID                      = $3a40
=$3a41					endifTokenID                     = $3a41
=$3a42					nextTokenID                      = $3a42

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101a1					Evaluate:
.0101a1	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0101a4	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101a7					EvaluateLevel:
.0101a7	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101aa	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101ac	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101ae	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101b1	b0 79		bcs $01022c			bcs 	_ELVariable
.0101b3	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101b6	b0 16		bcs $0101ce			bcs 	_ELConstant
.0101b8	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101bb	90 7f		bcc $01023c			bcc 	_ELStringConstant
.0101bd	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101c0	90 03		bcc $0101c5			bcc 	_ELConstantShift
.0101c2	82 94 00	brl $010259			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101c5					_ELConstantShift:
.0101c5	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101c8	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101ca	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101cc	e6 06		inc $06				inc 	DCodePtr
.0101ce					_ELConstant:
.0101ce	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101d0	38		sec				sec  								; shift it in the range 0-32767
.0101d1	e9 00 40	sbc #$4000			sbc 	#$4000
.0101d4	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101d5	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101d7	6a		ror a				ror 	a 							; rotate that into the constant value
.0101d8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101da	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101dc	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101de	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101e0	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101e2	e6 06		inc $06				inc 	DCodePtr
.0101e4					_ELGotAtom:
.0101e4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0101e6	a8		tay				tay 								; save in Y
.0101e7	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0101ea	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0101ed	d0 35		bne $010224			bne 	_ELExit
.0101ef	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0101f1	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101f4	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0101f6	98		tya				tya 								; get the keyword token back
.0101f7	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101fa	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.0101fc	90 26		bcc $010224			bcc 	_ELExit 					; precedence too low, then exit.
.0101fe	5a		phy				phy 								; save the binary operator on the stack
.0101ff	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010201	e6 06		inc $06				inc 	DCodePtr
.010203	18		clc				clc 								; try the next level up
.010204	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010207	e8		inx				inx 								; calculate the RHS at the next stack level.
.010208	e8		inx				inx
.010209	20 a7 01	jsr $0101a7			jsr 	EvaluateLevel
.01020c	ca		dex				dex
.01020d	ca		dex				dex
.01020e	7a		ply				ply 								; get operator token back into Y
.01020f					_ELExecuteY:
.01020f	98		tya				tya
.010210	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010213	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010214	9b		txy				txy 								; save X in Y
.010215	aa		tax				tax 								; double keyword ID in X
.010216	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01021a	bb		tyx				tyx 								; restore X.
.01021b	8f 20 02 01	sta $010220			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01021f					_ELCallRoutine:
.01021f	20 1f 02	jsr $01021f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010222	80 c0		bra $0101e4			bra 	_ELGotAtom 					; go round operator level again.
.010224	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010226	0a		asl a				asl 	a
.010227	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010229	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01022b	60		rts				rts
.01022c					_ELVariable:
.01022c	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.01022e	20 ed 02	jsr $0102ed			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010231	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010233	94 10		sty $10,x			sty 	EXSValueH+0,x
.010235	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010237	80 ab		bra $0101e4			bra 	_ELGotAtom
.010239					_ELSyntax
.010239	82 31 02	brl $01046d			brl 	SyntaxError
.01023c					_ELStringConstant:
.01023c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01023f	f0 f8		beq $010239			beq 	_ELSyntax
.010241	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010243	1a		inc a				inc 	a
.010244	1a		inc a				inc 	a
.010245	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010247	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010249	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01024b	18		clc				clc 								; add to string constant.
.01024c	65 06		adc $06				adc 	DCodePtr
.01024e	85 06		sta $06				sta 	DCodePtr
.010250	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010252	09 00 80	ora #$8000			ora 	#$8000
.010255	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010257	80 8b		bra $0101e4			bra 	_ELGotAtom
.010259					_ELUnaryKeyword:
.010259	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01025b	a8		tay				tay 								; put the token in Y.
.01025c	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01025e	e6 06		inc $06				inc 	DCodePtr
.010260	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010263	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010266	f0 a7		beq $01020f			beq 	_ELExecuteY					; go back and execute it
.010268	c0 22 32	cpy #$3222			cpy 	#lparenTokenID 				; is it an open bracket ?
.01026b	d0 11		bne $01027e			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01026d	20 a4 02	jsr $0102a4			jsr 	EvaluateNext 				; evaluate the expression
.010270	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; consume the right bracket.
.010273					_ELCopy:
.010273	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010275	95 00		sta $00,x			sta 	EXSValueL+0,x
.010277	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010279	95 10		sta $10,x			sta 	EXSValueH+0,x
.01027b	82 66 ff	brl $0101e4			brl 	_ELGotAtom 					; and continue.
.01027e					_ELUnaryOperator:
.01027e	5a		phy				phy 								; save the operator on the stack.
.01027f	e8		inx				inx 								; this is like evaluate next
.010280	e8		inx				inx
.010281	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010284	20 a7 01	jsr $0101a7			jsr 	EvaluateLevel
.010287	ca		dex				dex 								; unwind the stack.
.010288	ca		dex				dex
.010289	68		pla				pla 								; restore the unary operator.
.01028a	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01028d	f0 03		beq $010292			beq 	_ELMinus
.01028f	4c 6d 04	jmp $01046d			jmp 	SyntaxError
.010292					_ELMinus:
.010292	38		sec				sec 								; do the negation calculation.
.010293	a9 00 00	lda #$0000			lda 	#0
.010296	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010298	95 00		sta $00,x			sta 	EXSValueL+0,x
.01029a	a9 00 00	lda #$0000			lda 	#0
.01029d	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01029f	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102a1	82 40 ff	brl $0101e4			brl 	_ELGotAtom					; and continue.
.0102a4					EvaluateNext:
.0102a4	e8		inx				inx
.0102a5	e8		inx				inx
.0102a6	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102a9	20 a7 01	jsr $0101a7			jsr 	EvaluateLevel
.0102ac	ca		dex				dex
.0102ad	ca		dex				dex
.0102ae	60		rts				rts
.0102af					EvaluateInteger:
.0102af	20 a1 01	jsr $0101a1			jsr 	Evaluate
.0102b2	b0 01		bcs $0102b5			bcs 	EIType
.0102b4	60		rts				rts
.0102b5					EIType:
.0102b5	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0102b8	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102c0	78 70 65 63 74 65 64 00
.0102c8					EvaluateNextInteger:
.0102c8	20 a4 02	jsr $0102a4			jsr 	EvaluateNext
.0102cb	b0 e8		bcs $0102b5			bcs 	EIType
.0102cd	60		rts				rts
.0102ce					EvaluateString:
.0102ce	20 a1 01	jsr $0101a1			jsr 	Evaluate
.0102d1	90 01		bcc $0102d4			bcc 	ESType
.0102d3	60		rts				rts
.0102d4					ESType:
.0102d4	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0102d7	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102df	78 70 65 63 74 65 64 00
.0102e7					EvaluateNextString:
.0102e7	20 a4 02	jsr $0102a4			jsr 	EvaluateNext
.0102ea	90 e8		bcc $0102d4			bcc 	ESType
.0102ec	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0102ed					VariableAccessExpression:
.0102ed	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0102ef	48		pha				pha
.0102f0	20 2e 03	jsr $01032e			jsr 	VariableFind 				; try to find the variables
.0102f3	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0102f5	90 23		bcc $01031a			bcc 	_VANError 					; not found, so report an error.
.0102f7	68		pla				pla 								; get and save that first token
.0102f8	48		pha				pha 								; we use it for typing.
.0102f9	a8		tay				tay 								; put first token in Y.
.0102fa	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102fd	f0 07		beq $010306			beq 	_VANNotArray
.0102ff	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010301	20 a5 03	jsr $0103a5			jsr 	VariableSubscript			; index calculation
.010304	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010306					_VANNotArray:
.010306	68		pla				pla 								; get the token back.
.010307	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01030a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01030d	38		sec				sec 								; set up return string.
.01030e	f0 06		beq $010316			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010310	18		clc				clc 								; returning a number, read high data word
.010311	a0 02 00	ldy #$0002			ldy 	#2
.010314	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010316					_VANLoadLower:
.010316	a8		tay				tay 								; put A into Y (this is the high byte)
.010317	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010319	60		rts				rts
.01031a					_VANError:
.01031a	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01031d	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010325	20 75 6e 6b 6e 6f 77 6e 00
.01032e					VariableFind:
.01032e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010330	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010333	90 5c		bcc $010391			bcc 	_VFError
.010335	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010338	b0 11		bcs $01034b			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01033a	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01033d	3a		dec a				dec 	a 							; now 0-25
.01033e	0a		asl a				asl 	a 							; x 4 and clear carry
.01033f	0a		asl a				asl 	a
.010340	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010343	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010345	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010347	e6 06		inc $06				inc 	DCodePtr
.010349	38		sec				sec 								; return with carry set.
.01034a	60		rts				rts
.01034b					_VFSlowVariable:
.01034b	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01034d	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010350	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010351	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010352	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010355	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010357	85 08		sta $08				sta 	DTemp1
.010359	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01035b	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01035e	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01035f	65 08		adc $08				adc 	DTemp1
.010361	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010363	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010365					_VFNext:
.010365	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010367	f0 26		beq $01038f			beq 	_VFFail 					; if zero, then it's the end of the list.
.010369	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01036b	a8		tay				tay 								; read the address of the name at $0002,y
.01036c	b9 02 00	lda $0002,y			lda 	$0002,y
.01036f	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010371	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010374					_VFCompare:
.010374	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010376	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010378	d0 eb		bne $010365			bne 	_VFNext 					; if not, go to the next one.
.01037a	c8		iny				iny 								; advance token pointer
.01037b	c8		iny				iny
.01037c	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.01037f	d0 f3		bne $010374			bne 	_VFCompare
.010381	98		tya				tya 								; this is the length of the word.
.010382	18		clc				clc 								; so we add it to the code pointer
.010383	65 06		adc $06				adc 	DCodePtr
.010385	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010387	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010389	18		clc				clc 								; four on is the actual data
.01038a	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.01038d	38		sec				sec 								; return with CS indicating success
.01038e	60		rts				rts
.01038f					_VFFail:
.01038f	18		clc				clc
.010390	60		rts				rts
.010391					_VFError:
.010391	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010394	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01039c	76 61 72 69 61 62 6c 65 00
.0103a5					VariableSubscript:
.0103a5	48		pha				pha		 							; save variable address on stack.
.0103a6	20 c8 02	jsr $0102c8			jsr		EvaluateNextInteger 		; get the subscript
.0103a9	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; skip right bracket.
.0103ac	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103af	d0 10		bne $0103c1			bne 	_VANSubscript
.0103b1	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103b3	f0 02		beq $0103b7			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103b5	b0 0a		bcs $0103c1			bcs 	_VANSubscript
.0103b7					_VANSubOkay:
.0103b7	0a		asl a				asl 	a 							; double lsword
.0103b8	0a		asl a				asl 	a 							; and again, also clears carry.
.0103b9	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103bb	68		pla				pla 								; restore DVariablePtr
.0103bc	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103bd	1a		inc a				inc 	a
.0103be	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103c0	60		rts				rts
.0103c1					_VANSubscript:
.0103c1	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0103c4	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103cc	79 20 53 75 62 73 63 72 69 70 74 00
.0103d8					VariableCreate:
.0103d8	48		pha				pha 								; save count.
.0103d9	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103dc	29 00 20	and #$2000			and 	#IDTypeMask
.0103df	f0 06		beq $0103e7			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103e1	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103e4	18		clc				clc 								; which is guaranteed by have a 0 length.
.0103e5	65 02		adc $02				adc 	DBaseAddress
.0103e7					_VCIsInteger:
.0103e7	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.0103e9	68		pla				pla 								; restore count
.0103ea	48		pha				pha
.0103eb	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.0103ec	0a		asl a				asl 	a 							; 2 x # items.
.0103ed	0a		asl a				asl 	a 							; 4 x # items.
.0103ee					_VCNotSingle:
.0103ee	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0103f0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0103f3	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.0103f6	f0 04		beq $0103fc			beq 	_VCNotArray
.0103f8	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.0103fa	e6 08		inc $08				inc 	DTemp1
.0103fc					_VCNotArray:
.0103fc	5a		phy				phy 								; save address of first token on stack.
.0103fd	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010400	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010402	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010404	18		clc				clc 								; add 4 for link and name words
.010405	69 04 00	adc #$0004			adc 	#4
.010408	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01040a	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01040c	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01040e					_VCErase:
.01040e	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010410	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010413	c8		iny				iny
.010414	c8		iny				iny
.010415	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010417	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010419	d0 f3		bne $01040e			bne 	_VCErase
.01041b	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01041d	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01041f	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010422	68		pla				pla 								; restore the token address
.010423	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010426	68		pla				pla 								; restore count and store.
.010427	99 04 00	sta $0004,y			sta 	$0004,y
.01042a	98		tya				tya 								; update the head link
.01042b	92 20		sta ($20)			sta 	(DHashTablePtr)
.01042d	18		clc				clc 								; advance pointer to the data bit.
.01042e	69 04 00	adc #$0004			adc 	#4
.010431	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010432					ErrorHandler:
.010432	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010434	fa		plx				plx 								; address of error message -1
.010435	e8		inx				inx 								; error message.
.010436	20 d9 04	jsr $0104d9			jsr 	PrintROMMessage 			; print message in ROM
.010439	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01043b	f0 15		beq $010452			beq 	_EHEndMessage
.01043d	a2 57 04	ldx #$0457			ldx 	#_EHAt & $FFFF 				; print " at "
.010440	20 d9 04	jsr $0104d9			jsr 	PrintROMMessage
.010443	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010445	a0 00 00	ldy #$0000			ldy 	#0
.010448	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01044b	20 18 0b	jsr $010b18			jsr 	ConvertToString 			; convert and print it.
.01044e	a8		tay				tay
.01044f	20 ed 04	jsr $0104ed			jsr 	PrintBASICString
.010452					_EHEndMessage:
.010452	20 b4 13	jsr $0113b4			jsr 	HWNewLine
.010455	80 fe		bra $010455	_EH1:	bra 	_EH1
>010457	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01045c					IllegalToken:
.01045c	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01045f	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010467	54 6f 6b 65 6e 00
.01046d					SyntaxError:
.01046d	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010470	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010478	72 72 6f 72 00
.01047d					ExpectToken:
.01047d	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01047f	d0 05		bne $010486			bne 	_CTKError					; error if not
.010481	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010483	e6 06		inc $06				inc 	DCodePtr
.010485	60		rts				rts
.010486					_CTKError:
.010486	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010489	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010491	74 6f 6b 65 6e 00
.010497					ExpectRightBracket:
.010497	48		pha				pha
.010498	a9 23 32	lda #$3223			lda 	#rparenTokenID
.01049b	20 7d 04	jsr $01047d			jsr 	ExpectToken
.01049e	68		pla				pla
.01049f	60		rts				rts
.0104a0					ExpectComma:
.0104a0	48		pha				pha
.0104a1	a9 1f 32	lda #$321f			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104a4	20 7d 04	jsr $01047d			jsr 	ExpectToken
.0104a7	68		pla				pla
.0104a8	60		rts				rts
.0104a9					CheckBothNumeric:
.0104a9	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104ab	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0104ad	30 01		bmi $0104b0			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104af	60		rts				rts
.0104b0					_CBNFail:
.0104b0	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0104b3	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104bb	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104c9					ResetTypeInteger:
.0104c9	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104cb	29 ff 7f	and #$7fff			and 	#$7FFF
.0104ce	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104d0	60		rts				rts
.0104d1					ResetTypeString:
.0104d1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104d3	09 00 80	ora #$8000			ora 	#$8000
.0104d6	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104d8	60		rts				rts
.0104d9					PrintROMMessage:
.0104d9	48		pha				pha
.0104da	da		phx				phx
.0104db					_PRMLoop:
.0104db	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104df	29 ff 00	and #$00ff			and 	#$00FF
.0104e2	f0 06		beq $0104ea			beq 	_PRMExit
.0104e4	20 92 13	jsr $011392			jsr 	HWPrintChar
.0104e7	e8		inx				inx
.0104e8	80 f1		bra $0104db			bra 	_PRMLoop
.0104ea					_PRMExit:
.0104ea	fa		plx				plx
.0104eb	68		pla				pla
.0104ec	60		rts				rts
.0104ed					PrintBASICString:
.0104ed	48		pha				pha
.0104ee	da		phx				phx
.0104ef	5a		phy				phy
.0104f0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0104f3	29 ff 00	and #$00ff			and 	#$00FF
.0104f6	f0 0b		beq $010503			beq 	_PBSExit 					; null string
.0104f8	aa		tax				tax
.0104f9					_PBSLoop:
.0104f9	c8		iny				iny
.0104fa	b9 00 00	lda $0000,y			lda 	$0000,y
.0104fd	20 92 13	jsr $011392			jsr 	HWPrintChar
.010500	ca		dex				dex
.010501	d0 f6		bne $0104f9			bne 	_PBSLoop
.010503					_PBSExit:
.010503	7a		ply				ply
.010504	fa		plx				plx
.010505	68		pla				pla
.010506	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.010507					StringTempAllocate:
.010507	48		pha				pha
.010508	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01050a	d0 09		bne $010515			bne 	_STANoReset
.01050c	5a		phy				phy 								; reset the temp string pointer.
.01050d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010510	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010512	85 16		sta $16				sta 	DTempStringPointer
.010514	7a		ply				ply
.010515					_STANoReset:
.010515	68		pla				pla 								; get length.
.010516	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010519	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01051c	18		clc				clc 								; this adds one, for the length.
.01051d	65 16		adc $16				adc 	DTempStringPointer
.01051f	85 16		sta $16				sta 	DTempStringPointer
.010521	48		pha				pha 								; save start address
.010522	a9 00 00	lda #$0000			lda 	#$0000
.010525	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010527	92 16		sta ($16)			sta		(DTempStringPointer)
.010529	c2 20		rep #$20			rep 	#$20
.01052b	68		pla				pla 								; restore start address
.01052c	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01052e	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010530	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010532	60		rts				rts
.010533					StringWriteCharacter:
.010533	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010535	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010537	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010539	1a		inc a				inc 	a
.01053a	92 18		sta ($18)			sta 	(DStartTempString)
.01053c	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01053e	60		rts				rts
.01053f					StringCreateCopy:
.01053f	a8		tay				tay 								; put pointer to string in Y
.010540	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010543	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010546	f0 17		beq $01055f			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010548	da		phx				phx 								; save X and put the character count in X
.010549	aa		tax				tax
.01054a					_SCCCopy:
.01054a	c8		iny				iny 								; advance and read (first time skips length)
.01054b	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01054d	b9 00 00	lda $0000,y			lda 	$0000,y
.010550	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010552	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010554	1a		inc a				inc 	a
.010555	92 18		sta ($18)			sta 	(DStartTempString)
.010557	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010559	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01055b	ca		dex				dex 								; do X times
.01055c	d0 ec		bne $01054a			bne 	_SCCCopy
.01055e	fa		plx				plx
.01055f					_SCCExit:
.01055f	60		rts				rts
.010560					StringMakeConcrete:
.010560	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010563	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010565	90 0f		bcc $010576			bcc 	_SMCExit
.010567	85 08		sta $08				sta 	DTemp1 						; source
.010569	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01056b	29 ff 00	and #$00ff			and 	#$00FF
.01056e	d0 07		bne $010577			bne 	_SMCNonZero 				; if not "" skip.
.010570	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010573	18		clc				clc 								; this reference is used for all empty strings.
.010574	65 02		adc $02				adc 	DBaseAddress
.010576					_SMCExit:
.010576	60		rts				rts
.010577					_SMCNonZero:
.010577	48		pha				pha 								; save on stack.
.010578	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.01057b	18		clc				clc
.01057c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01057f	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010581	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010583	85 0c		sta $0c				sta 	DTemp2 						; target
.010585	7a		ply				ply 								; get length copy from here until Y goes -ve
.010586	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010588					_SMCLoop:
.010588	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.01058a	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01058c	88		dey				dey 								; Y+1 times.
.01058d	10 f9		bpl $010588			bpl 	_SMCLoop
.01058f	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010591	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010593	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010594					Binary_Add:
.010594	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010596	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010598	30 12		bmi $0105ac		bmi 	_BATypeError
.01059a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01059c	30 3f		bmi $0105dd		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01059e	18		clc			clc 										; add the results
.01059f	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a1	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105a3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105a5	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105a7	75 12		adc $12,x		adc 	EXSValueH+2,x
.0105a9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ab	60		rts			rts
.0105ac					_BATypeError:
.0105ac	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0105af	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105b7	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105c7	65 73 00
.0105ca					_BALengthError:
.0105ca	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0105cd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105d5	6f 6f 20 6c 6f 6e 67 00
.0105dd					_BAConcatenateString:
.0105dd	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105df	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0105e1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105e3	85 0c		sta $0c			sta 	DTemp2
.0105e5	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0105e7	18		clc			clc 										; work out the total length
.0105e8	b2 08		lda ($08)		lda 	(DTemp1)
.0105ea	72 0c		adc ($0c)		adc 	(DTemp2)
.0105ec	b0 14		bcs $010602		bcs 	_BAConcatLengthError 				; string is too long.
.0105ee	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0105f0	20 07 05	jsr $010507		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0105f3	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0105f5	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105f7	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0105f9	20 3f 05	jsr $01053f		jsr 	StringCreateCopy
.0105fc	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0105fe	20 3f 05	jsr $01053f		jsr 	StringCreateCopy
.010601	60		rts			rts
.010602					_BAConcatLengthError:
.010602	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010605	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01060d	6f 6f 20 6c 6f 6e 67 00
.010615					Binary_Subtract:
.010615	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.010618	38		sec			sec
.010619	b5 00		lda $00,x		lda		EXSValueL+0,x
.01061b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01061d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01061f	b5 10		lda $10,x		lda		EXSValueH+0,x
.010621	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010623	95 10		sta $10,x		sta 	EXSValueH+0,x
.010625	60		rts			rts
.010626					Binary_ShiftRight:
.010626	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.010629	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01062b	29 3f 00	and #$003f		and 	#63
.01062e	f0 07		beq $010637		beq		_Binary_SRExit
.010630					_Binary_SRLoop:
.010630	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010632	76 00		ror $00,x		ror 	EXSValueL+0,x
.010634	3a		dec a			dec 	a
.010635	d0 f9		bne $010630		bne 	_Binary_SRLoop
.010637					_Binary_SRExit:
.010637	60		rts			rts
.010638					Binary_ShiftLeft:
.010638	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.01063b	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01063d	29 3f 00	and #$003f		and 	#63
.010640	f0 07		beq $010649		beq		_Binary_SLExit
.010642					_Binary_SLLoop:
.010642	16 00		asl $00,x		asl 	EXSValueL+0,x
.010644	36 10		rol $10,x		rol 	EXSValueH+0,x
.010646	3a		dec a			dec 	a
.010647	d0 f9		bne $010642		bne 	_Binary_SLLoop
.010649					_Binary_SLExit:
.010649	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.01064a					Binary_And:
.01064a	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.01064d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01064f	35 02		and $02,x		and 	EXSValueL+2,x
.010651	95 00		sta $00,x		sta 	EXSValueL+0,x
.010653	b5 10		lda $10,x		lda		EXSValueH+0,x
.010655	35 12		and $12,x		and 	EXSValueH+2,x
.010657	95 10		sta $10,x		sta 	EXSValueH+0,x
.010659	60		rts			rts
.01065a					Binary_Or:
.01065a	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.01065d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01065f	15 02		ora $02,x		ora 	EXSValueL+2,x
.010661	95 00		sta $00,x		sta 	EXSValueL+0,x
.010663	b5 10		lda $10,x		lda		EXSValueH+0,x
.010665	15 12		ora $12,x		ora 	EXSValueH+2,x
.010667	95 10		sta $10,x		sta 	EXSValueH+0,x
.010669	60		rts			rts
.01066a					Binary_Xor:
.01066a	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.01066d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01066f	55 02		eor $02,x		eor 	EXSValueL+2,x
.010671	95 00		sta $00,x		sta 	EXSValueL+0,x
.010673	b5 10		lda $10,x		lda		EXSValueH+0,x
.010675	55 12		eor $12,x		eor 	EXSValueH+2,x
.010677	95 10		sta $10,x		sta 	EXSValueH+0,x
.010679	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.01067a					Binary_Equals:
.01067a	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01067d	b0 0e		bcs $01068d		bcs 	_BEString
.01067f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010681	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010683	d0 4f		bne $0106d4		bne 	Compare_Fail
.010685	b5 10		lda $10,x		lda 	EXSValueH,x
.010687	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010689	d0 49		bne $0106d4		bne 	Compare_Fail
.01068b	80 3f		bra $0106cc		bra 	Compare_Succeed
.01068d					_BEString:
.01068d	09 00 00	ora #$0000		ora 	#$0000
.010690	f0 3a		beq $0106cc		beq 	Compare_Succeed
.010692	80 40		bra $0106d4		bra 	Compare_Fail
.010694					Binary_NotEquals:
.010694	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010697	b0 0e		bcs $0106a7		bcs 	_BNEString
.010699	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01069b	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01069d	d0 2d		bne $0106cc		bne 	Compare_Succeed
.01069f	b5 10		lda $10,x		lda 	EXSValueH,x
.0106a1	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106a3	d0 27		bne $0106cc		bne 	Compare_Succeed
.0106a5	80 2d		bra $0106d4		bra 	Compare_Fail
.0106a7					_BNEString:
.0106a7	09 00 00	ora #$0000		ora 	#$0000
.0106aa	d0 20		bne $0106cc		bne 	Compare_Succeed
.0106ac	80 26		bra $0106d4		bra 	Compare_Fail
.0106ae					Binary_Less:
.0106ae	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106b1	b0 12		bcs $0106c5		bcs 	_BLString
.0106b3	38		sec			sec
.0106b4	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106b6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106b8	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ba	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106bc	50 03		bvc $0106c1		bvc 	*+5
.0106be	49 00 80	eor #$8000		eor 	#$8000
.0106c1	30 09		bmi $0106cc		bmi 	Compare_Succeed
.0106c3	80 0f		bra $0106d4		bra 	Compare_Fail
.0106c5					_BLString:
.0106c5	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106c8	f0 02		beq $0106cc		beq 	Compare_Succeed
.0106ca	80 08		bra $0106d4		bra 	Compare_Fail
.0106cc					Compare_Succeed:
.0106cc	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106cf	95 00		sta $00,x		sta 	EXSValueL,x
.0106d1	95 10		sta $10,x		sta 	EXSValueH,x
.0106d3	60		rts			rts
.0106d4					Compare_Fail:
.0106d4	74 00		stz $00,x		stz 	EXSValueL,x
.0106d6	74 10		stz $10,x		stz 	EXSValueH,x
.0106d8	60		rts			rts
.0106d9					Binary_GreaterEqual:
.0106d9	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106dc	b0 12		bcs $0106f0		bcs 	_BGEString
.0106de	38		sec			sec
.0106df	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106e1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106e3	b5 10		lda $10,x		lda 	EXSValueH,x
.0106e5	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106e7	50 03		bvc $0106ec		bvc 	*+5
.0106e9	49 00 80	eor #$8000		eor 	#$8000
.0106ec	10 de		bpl $0106cc		bpl 	Compare_Succeed
.0106ee	80 e4		bra $0106d4		bra 	Compare_Fail
.0106f0					_BGEString:
.0106f0	09 00 00	ora #$0000		ora 	#$0000
.0106f3	10 d7		bpl $0106cc		bpl 	Compare_Succeed
.0106f5	80 dd		bra $0106d4		bra 	Compare_Fail
.0106f7					Binary_LessEqual:
.0106f7	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106fa	b0 12		bcs $01070e		bcs 	_BLEString
.0106fc	18		clc			clc 									; numeric <= signed
.0106fd	b5 00		lda $00,x		lda 	EXSValueL,x
.0106ff	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010701	b5 10		lda $10,x		lda 	EXSValueH,x
.010703	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010705	50 03		bvc $01070a		bvc 	*+5
.010707	49 00 80	eor #$8000		eor 	#$8000
.01070a	30 c0		bmi $0106cc		bmi 	Compare_Succeed
.01070c	80 c6		bra $0106d4		bra 	Compare_Fail
.01070e					_BLEString:
.01070e	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010711	d0 b9		bne $0106cc		bne 	Compare_Succeed
.010713	80 bf		bra $0106d4		bra 	Compare_Fail
.010715					Binary_Greater:
.010715	20 33 07	jsr $010733		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010718	b0 12		bcs $01072c		bcs 	_BGString
.01071a	18		clc			clc 									; numeric > signed
.01071b	b5 00		lda $00,x		lda 	EXSValueL,x
.01071d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01071f	b5 10		lda $10,x		lda 	EXSValueH,x
.010721	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010723	50 03		bvc $010728		bvc 	*+5
.010725	49 00 80	eor #$8000		eor 	#$8000
.010728	10 a2		bpl $0106cc		bpl 	Compare_Succeed
.01072a	80 a8		bra $0106d4		bra 	Compare_Fail
.01072c					_BGString:
.01072c	c9 01 00	cmp #$0001		cmp 	#$0001
.01072f	f0 9b		beq $0106cc		beq 	Compare_Succeed
.010731	80 a1		bra $0106d4		bra 	Compare_Fail
.010733					CompareTypeCheck:
.010733	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010735	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010737	30 06		bmi $01073f		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010739	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01073b	30 1c		bmi $010759		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01073d	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01073e	60		rts			rts
.01073f					_CTCFail:
.01073f	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010742	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01074a	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010759					_CTCStringCompare:
.010759	20 c9 04	jsr $0104c9		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01075c	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01075e	85 08		sta $08			sta 	DTemp1
.010760	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010762	85 0c		sta $0c			sta 	DTemp2
.010764	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010767	a8		tay			tay
.010768	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01076a	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01076c	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01076e	90 02		bcc $010772		bcc 	_CTCSmallest
.010770	b2 0c		lda ($0c)		lda 	(DTemp2)
.010772					_CTCSmallest:
.010772	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010774					_CTCCompare:
.010774	c8		iny			iny 									; look at next character (done first, first char is size)
.010775	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010777	30 16		bmi $01078f		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010779	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01077b	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01077d	f0 f5		beq $010774		beq 	_CTCCompare 					; if zero, try the next character.
.01077f	b0 07		bcs $010788		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010781					_CTCLess:
.010781	c2 20		rep #$20		rep 	#$20
.010783	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010786	80 14		bra $01079c		bra 	_CTCExit
.010788					_CTCGreater:
.010788	c2 20		rep #$20		rep 	#$20
.01078a	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01078d	80 0d		bra $01079c		bra 	_CTCExit
.01078f					_CTCEqualSoFar:
.01078f	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010791	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010793	90 ec		bcc $010781		bcc 	_CTCLess
.010795	d0 f1		bne $010788		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010797	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010799	a9 00 00	lda #$0000		lda 	#$0000
.01079c					_CTCExit:
.01079c	38		sec			sec 									; return with CS indicating string comparison.
.01079d	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.01079e					Binary_Divide:
.01079e	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.0107a1	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107a3	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0107a5	d0 14		bne $0107bb		bne 	_BinaryDivide_Ok
.0107a7	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0107aa	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107b2	20 62 79 20 7a 65 72 6f 00
.0107bb					_BinaryDivide_Ok:
.0107bb	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107bd	64 0a		stz $0a			stz 	DTemp1+2
.0107bf	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107c1	5a		phy			phy 										; save Y (bit counter)
.0107c2	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107c4	10 07		bpl $0107cd		bpl 	_BinaryDivide_RightDone
.0107c6	e8		inx			inx
.0107c7	e8		inx			inx
.0107c8	20 03 08	jsr $010803		jsr 	Binary_DivNegate
.0107cb	ca		dex			dex
.0107cc	ca		dex			dex
.0107cd					_BinaryDivide_RightDone:
.0107cd	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107cf	10 03		bpl $0107d4		bpl 	_BinaryDivide_LeftDone
.0107d1	20 03 08	jsr $010803		jsr 	Binary_DivNegate
.0107d4					_BinaryDivide_LeftDone:
.0107d4	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0107d7					_BinaryDivide_Loop:
.0107d7	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107d9	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107db	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107dd	26 0a		rol $0a			rol 	DTemp1+2
.0107df	38		sec			sec											; calculate A-M
.0107e0	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107e2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0107e4	85 0c		sta $0c			sta 	DTemp2
.0107e6	a5 0a		lda $0a			lda 	DTemp1+2
.0107e8	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0107ea	90 08		bcc $0107f4		bcc 	_Binary_NoSubract 					; if A < M skip this
.0107ec	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0107ee	a5 0c		lda $0c			lda 	DTemp2
.0107f0	85 08		sta $08			sta 	DTemp1+0
.0107f2	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0107f4					_Binary_NoSubract:
.0107f4	88		dey			dey 										; do it 32 times.
.0107f5	d0 e0		bne $0107d7		bne 	_BinaryDivide_Loop
.0107f7					_BinaryDivide_Exit:
.0107f7	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0107f9	29 01 00	and #$0001		and 	#1
.0107fc	f0 03		beq $010801		beq 	_BinaryDivide_Exit2
.0107fe	20 03 08	jsr $010803		jsr 	Binary_DivNegate
.010801					_BinaryDivide_Exit2:
.010801	7a		ply			ply 										; restore Y
.010802	60		rts			rts
.010803					Binary_DivNegate:
.010803	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010805	38		sec			sec 										; negate the value at stack X.
.010806	a9 00 00	lda #$0000		lda 	#$0000
.010809	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01080b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01080d	a9 00 00	lda #$0000		lda 	#$0000
.010810	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010812	95 10		sta $10,x		sta 	EXSValueH+0,x
.010814	60		rts			rts
.010815					Binary_Modulus:
.010815	20 9e 07	jsr $01079e		jsr 	Binary_Divide 						; do the divide
.010818	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01081a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01081c	a5 0a		lda $0a			lda 	DTemp1+2
.01081e	95 10		sta $10,x		sta 	EXSValueH+0,x
.010820	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010821					Binary_Multiply:
.010821	20 a9 04	jsr $0104a9		jsr 	CheckBothNumeric 					; check both values are numeric
.010824	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010826	85 08		sta $08			sta 	DTemp1
.010828	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01082a	85 0a		sta $0a			sta		DTemp1+2
.01082c	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01082e	74 10		stz $10,x		stz 	EXSValueH+0,x
.010830					_BinaryMultiply_Loop:
.010830	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010832	05 0a		ora $0a			ora 	DTemp1+2
.010834	f0 1e		beq $010854		beq 	_BinaryMultiply_Exit
.010836	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010838	29 01 00	and #$0001		and 	#1
.01083b	f0 0d		beq $01084a		beq 	_BinaryMultiply_NoAdd
.01083d	18		clc			clc 										; add multiplicand to result.
.01083e	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010840	75 02		adc $02,x		adc 	EXSValueL+2,x
.010842	95 00		sta $00,x		sta 	EXSValueL+0,x
.010844	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010846	75 12		adc $12,x		adc 	EXSValueH+2,x
.010848	95 10		sta $10,x		sta 	EXSValueH+0,x
.01084a					_BinaryMultiply_NoAdd:
.01084a	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01084c	66 08		ror $08			ror 	DTemp1
.01084e	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010850	36 12		rol $12,x		rol 	EXSValueH+2,x
.010852	80 dc		bra $010830		bra 	_BinaryMultiply_Loop 				; go round again.
.010854					_BinaryMultiply_Exit:
.010854	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010855					Function_Len:
.010855	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.010858	20 e7 02	jsr $0102e7			jsr 	EvaluateNextString 			; get the value you are absoluting
.01085b	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.01085e	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010860	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010863	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010866	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010868	74 10		stz $10,x			stz 	EXSValueH+0,x
.01086a	60		rts				rts
.01086b					Function_Abs:
.01086b	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.01086e	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010871	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.010874	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010876	30 07		bmi $01087f			bmi 	_FAbsNegative 				; negate it if negative
.010878	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01087a	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01087c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01087e	60		rts				rts
.01087f					_FAbsNegative:
.01087f	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010880	a9 00 00	lda #$0000			lda 	#0
.010883	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010885	95 00		sta $00,x			sta 	EXSValueL+0,x
.010887	a9 00 00	lda #$0000			lda 	#0
.01088a	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01088c	95 10		sta $10,x			sta 	EXSValueH+0,x
.01088e	60		rts				rts
.01088f					Function_Sgn:
.01088f	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns integer
.010892	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get an integer
.010895	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.010898	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01089a	74 10		stz $10,x			stz 	EXSValueH+0,x
.01089c	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.01089e	30 07		bmi $0108a7			bmi 	_FSgnNegative 				; set to -1 if signed
.0108a0	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108a2	f0 02		beq $0108a6			beq 	_FSgnExit
.0108a4	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108a6					_FSgnExit:
.0108a6	60		rts				rts
.0108a7					_FSgnNegative:
.0108a7	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108aa	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ac	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108ae	60		rts				rts
.0108af					Function_Random:
.0108af	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.0108b2	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger
.0108b5	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108b7	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108b9	d0 0a		bne $0108c5			bne 	_Rnd_NotZero
.0108bb	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108be	85 10		sta $10				sta 	DRandom
.0108c0	a9 ea 00	lda #$00ea			lda 	#$EA
.0108c3	85 12		sta $12				sta 	DRandom+2
.0108c5					_Rnd_NotZero:
.0108c5	20 d0 08	jsr $0108d0			jsr 	_Rnd_Process 				; call randomiser twice
.0108c8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108ca	20 d0 08	jsr $0108d0			jsr 	_Rnd_Process
.0108cd	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108cf	60		rts				rts
.0108d0					_Rnd_Process:
.0108d0	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108d2	26 12		rol $12				rol 	DRandom+2
.0108d4	90 0e		bcc $0108e4			bcc 	_Rnd_Exit
.0108d6	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108d8	49 54 d4	eor #$d454			eor 	#$D454
.0108db	85 10		sta $10				sta 	DRandom
.0108dd	a5 12		lda $12				lda 	DRandom+2
.0108df	49 d5 55	eor #$55d5			eor 	#$55D5
.0108e2	85 12		sta $12				sta 	DRandom+2
.0108e4					_Rnd_Exit:
.0108e4	a5 10		lda $10				lda 	DRandom
.0108e6	45 12		eor $12				eor 	DRandom+2
.0108e8	60		rts				rts
.0108e9					Function_Chr:
.0108e9	20 d1 04	jsr $0104d1			jsr 	ResetTypeString 			; returns a string
.0108ec	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get integer
.0108ef	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.0108f2	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.0108f5	d0 12		bne $010909			bne 	_FCHBad
.0108f7	48		pha				pha  								; save char # on stack
.0108f8	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.0108fb	20 07 05	jsr $010507			jsr 	StringTempAllocate
.0108fe	68		pla				pla 								; restore character number
.0108ff	20 33 05	jsr $010533			jsr 	StringWriteCharacter 		; write it out.
.010902	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010904	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010906	74 10		stz $10,x			stz 	EXSValueH+0,x
.010908	60		rts				rts
.010909					_FCHBad:
.010909	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01090c	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010914	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010921					Function_Asc:
.010921	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.010924	20 e7 02	jsr $0102e7			jsr 	EvaluateNextString 			; get string
.010927	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.01092a	a8		tay				tay 								; string address in Y
.01092b	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.01092e	29 ff 00	and #$00ff			and 	#$00FF
.010931	f0 0b		beq $01093e			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010933	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010936	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010939	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01093b	74 10		stz $10,x			stz 	EXSValueH+0,x
.01093d	60		rts				rts
.01093e					_FASBad:
.01093e	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010941	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010949	65 20 66 6f 72 20 61 73 63 28 29 00
.010955					Function_SPC:
.010955	20 d1 04	jsr $0104d1			jsr 	ResetTypeString 			; returns a string
.010958	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.01095b	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.01095e	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010961	d0 17		bne $01097a			bne 	_FSPBad
.010963	48		pha				pha 								; save length
.010964	20 07 05	jsr $010507			jsr 	StringTempAllocate 			; allocate character space
.010967	7a		ply				ply 								; get count in Y
.010968	f0 09		beq $010973			beq 	_FSPExit 					; if zero, just empty string
.01096a					_FSPCopy:
.01096a	a9 20 00	lda #$0020			lda 	#" "						; space character
.01096d	20 33 05	jsr $010533			jsr 	StringWriteCharacter 		; write it out.
.010970	88		dey				dey
.010971	d0 f7		bne $01096a			bne 	_FSPCopy	 				; do it Y times
.010973					_FSPExit:
.010973	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010975	95 00		sta $00,x			sta 	EXSValueL+0,x
.010977	74 10		stz $10,x			stz 	EXSValueH+0,x
.010979	60		rts				rts
.01097a					_FSPBad:
.01097a	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01097d	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010985	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010991					Function_Peek:
.010991	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.010994	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010997	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.01099a	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.01099c	84 0a		sty $0a				sty 	DTemp1+2
.01099e	a0 00 00	ldy #$0000			ldy 	#0							; read data
.0109a1	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109a3	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.0109a6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.0109a8	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109aa	60		rts				rts
.0109ab					Function_Deek:
.0109ab	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.0109ae	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0109b1	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.0109b4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.0109b6	84 0a		sty $0a				sty 	DTemp1+2
.0109b8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.0109bb	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109bd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.0109bf	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109c1	60		rts				rts
.0109c2					Function_Leek:
.0109c2	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.0109c5	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0109c8	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check )
.0109cb	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.0109cd	84 0a		sty $0a				sty 	DTemp1+2
.0109cf	a0 00 00	ldy #$0000			ldy 	#0							; read data
.0109d2	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109d4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.0109d6	c8		iny				iny
.0109d7	c8		iny				iny
.0109d8	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109da	95 10		sta $10,x			sta 	EXSValueH+0,x
.0109dc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0109dd					Function_VAL:
.0109dd	20 c9 04	jsr $0104c9			jsr 	ResetTypeInteger 			; returns an integer
.0109e0	20 e7 02	jsr $0102e7			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109e3	48		pha				pha 								; put string address on stack.
.0109e4	20 f4 09	jsr $0109f4			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109e7	7a		ply				ply 								; get string address back
.0109e8	da		phx				phx 								; save X on stack
.0109e9	aa		tax				tax 								; base in X
.0109ea	98		tya				tya 								; address in A
.0109eb	20 2e 0a	jsr $010a2e			jsr 	StringToInteger
.0109ee	fa		plx				plx 								; restore X
.0109ef	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109f1	94 10		sty $10,x			sty 	EXSValueH+0,x
.0109f3	60		rts				rts
.0109f4					VALGetBase:
.0109f4	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0109f6	c9 1f 32	cmp #$321f			cmp 	#commaTokenID 				; if comma, go to get base code.
.0109f9	f0 07		beq $010a02			beq 	_VGBAlternate
.0109fb	20 97 04	jsr $010497			jsr 	ExpectRightBracket			; expect ), and return 10.
.0109fe	a9 0a 00	lda #$000a			lda 	#10
.010a01	60		rts				rts
.010a02					_VGBAlternate:
.010a02	20 a0 04	jsr $0104a0			jsr 	ExpectComma 				; skip comma.
.010a05	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get base
.010a08	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010a0b	d0 0e		bne $010a1b			bne 	_VGBBadBase
.010a0d	c9 02 00	cmp #$0002			cmp 	#2
.010a10	90 09		bcc $010a1b			bcc 	_VGBBadBase
.010a12	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010a15	b0 04		bcs $010a1b			bcs 	_VGBBadBase
.010a17	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; get right bracket and return.
.010a1a	60		rts				rts
.010a1b					_VGBBadBase:
.010a1b	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010a1e	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010a26	65 72 20 42 61 73 65 00
.010a2e					StringToInteger:
.010a2e	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010a30	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010a32	29 ff 00	and #$00ff			and 	#$00FF
.010a35	85 26		sta $26				sta 	DTemp3+2
.010a37	f0 6e		beq $010aa7			beq 	_STIError 					; if length zero it's bad.
.010a39	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010a3b	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010a3d	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010a3f	64 0a		stz $0a				stz 	DTemp1+2
.010a41	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010a43	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010a46	48		pha				pha 								; push on stack
.010a47	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010a4a	d0 06		bne $010a52			bne 	_STILoop
.010a4c	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010a4e	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010a50	f0 55		beq $010aa7			beq 	_STIError 					; if only - then error.
.010a52					_STILoop:
.010a52	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010a54	20 c6 0a	jsr $010ac6			jsr 	MultiplyTemp1ByA
.010a57	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010a59	29 ff 00	and #$00ff			and 	#$00FF
.010a5c	20 b7 0a	jsr $010ab7			jsr 	ConvertUpperCase	 		; make U/C
.010a5f	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010a62	90 43		bcc $010aa7			bcc 	_STIError
.010a64	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010a67	90 0e		bcc $010a77			bcc 	_STIOkay1
.010a69	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010a6c	90 39		bcc $010aa7			bcc 	_STIError
.010a6e	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010a71	b0 34		bcs $010aa7			bcs 	_STIError
.010a73	18		clc				clc 								; shift to correct range.
.010a74	69 09 00	adc #$0009			adc 	#9
.010a77					_STIOkay1:
.010a77	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010a7a	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010a7c	b0 29		bcs $010aa7			bcs 	_STIError
.010a7e	18		clc				clc 								; add A to DTemp1
.010a7f	65 08		adc $08				adc 	DTemp1
.010a81	85 08		sta $08				sta 	DTemp1
.010a83	90 02		bcc $010a87			bcc 	_STINoCarry
.010a85	e6 0a		inc $0a				inc 	DTemp1+2
.010a87					_STINoCarry:
.010a87	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010a89	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010a8b	d0 c5		bne $010a52			bne 	_STILoop 					; loop back.
.010a8d	68		pla				pla 								; get optional minus bac
.010a8e	c9 2d 00	cmp #$002d			cmp 	#"-"
.010a91	d0 0f		bne $010aa2			bne 	_STINotNegative 			; handle the negative character
.010a93	38		sec				sec 								; negate DTemp1
.010a94	a9 00 00	lda #$0000			lda 	#0
.010a97	e5 08		sbc $08				sbc 	DTemp1
.010a99	85 08		sta $08				sta 	DTemp1
.010a9b	a9 00 00	lda #$0000			lda 	#0
.010a9e	e5 0a		sbc $0a				sbc 	DTemp1+2
.010aa0	85 0a		sta $0a				sta 	DTemp1+2
.010aa2					_STINotNegative:
.010aa2	a5 08		lda $08				lda 	DTemp1 						; get the result
.010aa4	a4 0a		ldy $0a				ldy 	DTemp1+2
.010aa6	60		rts				rts
.010aa7					_STIError:
.010aa7	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010aaa	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010ab2	74 61 6e 74 00
.010ab7					ConvertUpperCase:
.010ab7	c9 61 00	cmp #$0061			cmp 	#'a'
.010aba	90 09		bcc $010ac5			bcc 	_CUCExit
.010abc	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010abf	b0 04		bcs $010ac5			bcs 	_CUCExit
.010ac1	38		sec				sec
.010ac2	e9 20 00	sbc #$0020			sbc 	#32
.010ac5					_CUCExit:
.010ac5	60		rts				rts
.010ac6					MultiplyTemp1ByA:
.010ac6					_MTGeneral:
.010ac6	da		phx				phx
.010ac7	aa		tax				tax 								; multiplier in X
.010ac8	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010aca	85 0c		sta $0c				sta 	DTemp2
.010acc	a5 0a		lda $0a				lda 	DTemp1+2
.010ace	85 0e		sta $0e				sta 	DTemp2+2
.010ad0	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010ad2	64 0a		stz $0a				stz 	DTemp1+2
.010ad4	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010ad7					_MTLoop:
.010ad7	8a		txa				txa 								; shift X right into C
.010ad8	4a		lsr a				lsr 	a
.010ad9	aa		tax				tax
.010ada	90 10		bcc $010aec			bcc 	_MTNoAdd
.010adc	18		clc				clc
.010add	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010adf	65 0c		adc $0c				adc 	DTemp2
.010ae1	85 08		sta $08				sta 	DTemp1
.010ae3	a5 0a		lda $0a				lda 	DTemp1+2
.010ae5	65 0e		adc $0e				adc 	DTemp2+2
.010ae7	85 0a		sta $0a				sta 	DTemp1+2
.010ae9	90 01		bcc $010aec			bcc 	_MTNoAdd
.010aeb	c8		iny				iny
.010aec					_MTNoAdd:
.010aec	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010aee	26 0e		rol $0e				rol 	DTemp2+2
.010af0	90 01		bcc $010af3			bcc 	_MTNoOverflow
.010af2	c8		iny				iny
.010af3					_MTNoOverflow:
.010af3	8a		txa				txa 								; until multiplier is zero.
.010af4	d0 e1		bne $010ad7			bne 	_MTLoop
.010af6	98		tya				tya
.010af7	18		clc				clc
.010af8	69 ff ff	adc #$ffff			adc 	#$FFFF
.010afb	fa		plx				plx 								; restore X
.010afc	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010afd					Function_Str:
.010afd	20 d1 04	jsr $0104d1			jsr 	ResetTypeString 			; returns a string.
.010b00	20 c8 02	jsr $0102c8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010b03	48		pha				pha 								; save YA on the stack
.010b04	5a		phy				phy
.010b05	20 f4 09	jsr $0109f4			jsr 	VALGetBase 					; process , base (shared with STR$())
.010b08	85 14		sta $14				sta 	DSignCount
.010b0a	7a		ply				ply 								; YA is the number
.010b0b	68		pla				pla
.010b0c	da		phx				phx
.010b0d	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010b0f	20 18 0b	jsr $010b18			jsr 	ConvertToString 			; convert it to a string.
.010b12	fa		plx				plx 								; restore X
.010b13	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010b15	74 10		stz $10,x			stz 	EXSValueH+0,x
.010b17	60		rts				rts
.010b18					ConvertToString:
.010b18	da		phx				phx 								; save X (base)
.010b19	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010b1b	84 26		sty $26				sty 	DTemp3+2
.010b1d	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010b1f	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010b22	20 07 05	jsr $010507			jsr 	StringTempAllocate 			; allocate space for return string.
.010b25	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010b27	10 15		bpl $010b3e			bpl 	_CTSNotNegative
.010b29	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010b2c	20 a8 0b	jsr $010ba8			jsr 	CTSOutputA
.010b2f	38		sec				sec 								; negate DTemp3 which is the number
.010b30	a9 00 00	lda #$0000			lda 	#0
.010b33	e5 24		sbc $24				sbc 	DTemp3
.010b35	85 24		sta $24				sta 	DTemp3
.010b37	a9 00 00	lda #$0000			lda 	#0
.010b3a	e5 26		sbc $26				sbc 	DTemp3+2
.010b3c	85 26		sta $26				sta 	DTemp3+2
.010b3e					_CTSNotNegative:
.010b3e	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010b41	48		pha				pha
.010b42	a9 00 00	lda #$0000			lda 	#0
.010b45	48		pha				pha
.010b46	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010b48	85 08		sta $08				sta 	DTemp1
.010b4a	64 0a		stz $0a				stz 	DTemp1+2
.010b4c					_CTSMultiplySubtractor:
.010b4c	38		sec				sec 								; check number vs subtractor
.010b4d	a5 24		lda $24				lda 	DTemp3
.010b4f	e5 08		sbc $08				sbc 	DTemp1
.010b51	a5 26		lda $26				lda 	DTemp3+2
.010b53	e5 0a		sbc $0a				sbc 	DTemp1+2
.010b55	90 0f		bcc $010b66			bcc		_CTSScaledUp 				; if >= then scaled up.
.010b57	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010b59	48		pha				pha
.010b5a	a5 0a		lda $0a				lda 	DTemp1+2
.010b5c	48		pha				pha
.010b5d	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010b5f	20 c6 0a	jsr $010ac6			jsr 	MultiplyTemp1ByA
.010b62	b0 02		bcs $010b66			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010b64	80 e6		bra $010b4c			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010b66					_CTSScaledUp:
.010b66	7a		ply				ply 								; YA contains the previous divider.
.010b67	68		pla				pla
.010b68	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010b6b	d0 05		bne $010b72			bne 	_CTSHasDigit
.010b6d	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010b70	f0 20		beq $010b92			beq 	_CTSExit
.010b72					_CTSHasDigit:
.010b72	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010b74	84 0e		sty $0e				sty 	DTemp2+2
.010b76	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010b79					_CTSSubLoop:
.010b79	38		sec				sec 								; subtract subtractor from number
.010b7a	a5 24		lda $24				lda 	DTemp3
.010b7c	e5 0c		sbc $0c				sbc 	DTemp2
.010b7e	a8		tay				tay 								; intermediate in Y
.010b7f	a5 26		lda $26				lda 	DTemp3+2
.010b81	e5 0e		sbc $0e				sbc 	DTemp2+2
.010b83	90 07		bcc $010b8c			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010b85	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010b87	84 24		sty $24				sty 	DTemp3
.010b89	e8		inx				inx 								; one more subtraction
.010b8a	80 ed		bra $010b79			bra 	_CTSSubLoop 				; try it again.
.010b8c					_CTSFinishedSubtracting:
.010b8c	8a		txa				txa 								; convert to ASCII.
.010b8d	20 9b 0b	jsr $010b9b			jsr 	CTSOutputHexDigit 			; write that out.
.010b90	80 d4		bra $010b66			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010b92					_CTSExit:
.010b92	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010b94	20 9b 0b	jsr $010b9b			jsr 	CTSOutputHexDigit
.010b97	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010b99	fa		plx				plx 								; restore X.
.010b9a	60		rts				rts
.010b9b					CTSOutputHexDigit:
.010b9b	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010b9e	90 04		bcc $010ba4			bcc 	_CTSNotLetter
.010ba0	18		clc				clc
.010ba1	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010ba4					_CTSNotLetter:
.010ba4	18		clc				clc
.010ba5	69 30 00	adc #$0030			adc 	#48
.010ba8					CTSOutputA:
.010ba8	5a		phy				phy 								; save Y, set Y to current pointer
.010ba9	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010bab	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010bae	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010bb0	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010bb2	1a		inc a				inc 	a
.010bb3	92 18		sta ($18)			sta 	(DStartTempString)
.010bb5	c2 20		rep #$20			rep 	#$20
.010bb7	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010bb9	7a		ply				ply 								; restore Y and exit.
.010bba	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.010bbb					Function_UPPER:
.010bbb	20 d1 04	jsr $0104d1			jsr 	ResetTypeString 			; returns a string.
.010bbe	20 e7 02	jsr $0102e7			jsr 	EvaluateNextString 			; evaluate a string.
.010bc1	48		pha				pha
.010bc2	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; close call.
.010bc5	20 07 05	jsr $010507			jsr		StringTempAllocate 			; allocate memory for it
.010bc8	68		pla				pla
.010bc9	20 3f 05	jsr $01053f			jsr 	StringCreateCopy 			; create a copy of it.
.010bcc	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010bce	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bd0	a8		tay				tay 								; address in Y
.010bd1	74 10		stz $10,x			stz 	EXSValueH+0,x
.010bd3	da		phx				phx 								; save X
.010bd4	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010bd6	29 ff 00	and #$00ff			and 	#$00FF
.010bd9	f0 20		beq $010bfb			beq 	_FUPExit
.010bdb	aa		tax				tax 								; put in X
.010bdc					_FUPLoop:
.010bdc	c8		iny				iny 								; increment and load character
.010bdd	b9 00 00	lda $0000,y			lda 	$0000,y
.010be0	29 ff 00	and #$00ff			and 	#$00FF
.010be3	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010be6	90 10		bcc $010bf8			bcc 	_FUPNoChange
.010be8	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010beb	b0 0b		bcs $010bf8			bcs 	_FUPNoChange
.010bed	38		sec				sec 								; shift case
.010bee	e9 20 00	sbc #$0020			sbc 	#32
.010bf1	e2 20		sep #$20			sep 	#$20 						; write back
.010bf3	99 00 00	sta $0000,y			sta 	$0000,y
.010bf6	c2 20		rep #$20			rep 	#$20
.010bf8					_FUPNoChange:
.010bf8	ca		dex				dex 								; do X times
.010bf9	d0 e1		bne $010bdc			bne 	_FUPLoop
.010bfb					_FUPExit:
.010bfb	fa		plx				plx 								; restore X
.010bfc	60		rts				rts
.010bfd					Function_LOWER:
.010bfd	20 d1 04	jsr $0104d1			jsr 	ResetTypeString 			; returns a string.
.010c00	20 e7 02	jsr $0102e7			jsr 	EvaluateNextString 			; evaluate a string.
.010c03	48		pha				pha
.010c04	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; close call.
.010c07	20 07 05	jsr $010507			jsr		StringTempAllocate 			; allocate memory for it
.010c0a	68		pla				pla
.010c0b	20 3f 05	jsr $01053f			jsr 	StringCreateCopy 			; create a copy of it.
.010c0e	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010c10	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c12	a8		tay				tay 								; address in Y
.010c13	74 10		stz $10,x			stz 	EXSValueH+0,x
.010c15	da		phx				phx 								; save X
.010c16	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010c18	29 ff 00	and #$00ff			and 	#$00FF
.010c1b	f0 20		beq $010c3d			beq 	_FLOExit
.010c1d	aa		tax				tax 								; put in X
.010c1e					_FLOLoop:
.010c1e	c8		iny				iny 								; increment and load character
.010c1f	b9 00 00	lda $0000,y			lda 	$0000,y
.010c22	29 ff 00	and #$00ff			and 	#$00FF
.010c25	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010c28	90 10		bcc $010c3a			bcc 	_FLONoChange
.010c2a	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010c2d	b0 0b		bcs $010c3a			bcs 	_FLONoChange
.010c2f	18		clc				clc 								; shift case
.010c30	69 20 00	adc #$0020			adc 	#32
.010c33	e2 20		sep #$20			sep 	#$20 						; write back
.010c35	99 00 00	sta $0000,y			sta 	$0000,y
.010c38	c2 20		rep #$20			rep 	#$20
.010c3a					_FLONoChange:
.010c3a	ca		dex				dex 								; do X times
.010c3b	d0 e1		bne $010c1e			bne 	_FLOLoop
.010c3d					_FLOExit:
.010c3d	fa		plx				plx 								; restore X
.010c3e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010c3f					Function_Let:
.010c3f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010c41	48		pha				pha  								; save on stack for later.
.010c42	20 2e 03	jsr $01032e			jsr 	VariableFind 				; find the variable
.010c45	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010c47	b0 1c		bcs $010c65			bcs 	_FLetFound 					; skip if found.
.010c49	68		pla				pla 								; get and push the first token again.
.010c4a	48		pha				pha
.010c4b	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010c4e	d0 57		bne $010ca7			bne 	_FLError					; arrays, so this causes an error.
.010c50	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010c52	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010c55	20 d8 03	jsr $0103d8			jsr 	VariableCreate 				; create it.
.010c58	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010c5a					_FLSkipToken:
.010c5a	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010c5c	e6 06		inc $06				inc 	DCodePtr
.010c5e	e6 06		inc $06				inc 	DCodePtr
.010c60	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010c63	d0 f5		bne $010c5a			bne 	_FLSkipToken
.010c65					_FLetFound:
.010c65	68		pla				pla 								; get and save the first token.
.010c66	48		pha				pha
.010c67	a8		tay				tay 								; put it in Y
.010c68	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010c6b	f0 07		beq $010c74			beq 	_FLetNotArray
.010c6d	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010c6f	20 a5 03	jsr $0103a5			jsr 	VariableSubscript			; index calculation
.010c72	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010c74					_FLetNotArray:
.010c74	7a		ply				ply 								; get the first token into Y
.010c75	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010c77	48		pha				pha
.010c78	5a		phy				phy 								; save the first token on the stack.
.010c79	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010c7c	20 7d 04	jsr $01047d			jsr 	ExpectToken
.010c7f	68		pla				pla 								; restore the first token.
.010c80	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010c83	d0 0f		bne $010c94			bne 	_FLetString 				; skip if string.
.010c85	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; get an integer
.010c88	7a		ply				ply 								; get address in Y
.010c89	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010c8b	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010c8e	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010c90	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010c93	60		rts				rts
.010c94					_FLetString:
.010c94	20 ce 02	jsr $0102ce			jsr 	EvaluateString 				; get a string.
.010c97	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010c99	20 60 05	jsr $010560			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010c9c	7a		ply				ply 								; get address
.010c9d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010ca0	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010ca3	99 02 00	sta $0002,y			sta 	$0002,y
.010ca6	60		rts				rts
.010ca7					_FLError:
.010ca7	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010caa	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010cb2	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010cba					Function_PRINT:
.010cba	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010cbc	f0 33		beq $010cf1			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010cbe	c9 21 32	cmp #$3221			cmp 	#colonTokenID 				; likewise if a colon.
.010cc1	f0 2e		beq $010cf1			beq 	_FPRExitCR
.010cc3	c9 20 32	cmp #$3220			cmp 	#semicolonTokenID 			; semicolon, skip it
.010cc6	f0 23		beq $010ceb			beq 	_FPRSkipLoop
.010cc8	c9 24 32	cmp #$3224			cmp 	#squoteTokenID 				; single quote is CR
.010ccb	f0 1b		beq $010ce8			beq 	_FPRNewLine
.010ccd	c9 1f 32	cmp #$321f			cmp 	#commaTokenID 				; , is tab.
.010cd0	f0 11		beq $010ce3			beq 	_FPRTab
.010cd2					_FPRExpression:
.010cd2	20 a1 01	jsr $0101a1			jsr 	Evaluate 					; evaluate a string or integer.
.010cd5	b0 06		bcs $010cdd			bcs 	_FPRHaveString
.010cd7	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010cda	20 18 0b	jsr $010b18			jsr 	ConvertToString
.010cdd					_FPRHaveString:
.010cdd	a8		tay				tay 								; print the basic String.
.010cde	20 ed 04	jsr $0104ed			jsr 	PrintBASICString
.010ce1	80 d7		bra $010cba			bra 	Function_Print 				; and go round again.
.010ce3					_FPRTab:
.010ce3	20 c7 13	jsr $0113c7			jsr 	HWTab
.010ce6	80 03		bra $010ceb			bra 	_FPRSkipLoop
.010ce8					_FPRNewLine:
.010ce8	20 b4 13	jsr $0113b4			jsr 	HWNewLine
.010ceb					_FPRSkipLoop:
.010ceb	e6 06		inc $06				inc 	DCodePtr
.010ced	e6 06		inc $06				inc 	DCodePtr
.010cef	80 c9		bra $010cba			bra 	Function_Print
.010cf1					_FPRExitCR:
.010cf1	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010cf3	88		dey				dey
.010cf4	88		dey				dey
.010cf5	b9 00 00	lda $0000,y			lda 	$0000,y
.010cf8	c9 1f 32	cmp #$321f			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.010cfb	f0 08		beq $010d05			beq 	_FPRExit
.010cfd	c9 20 32	cmp #$3220			cmp 	#semicolonTokenID
.010d00	f0 03		beq $010d05			beq 	_FPRExit
.010d02	20 b4 13	jsr $0113b4			jsr 	HWNewLine 					; print a new line.
.010d05					_FPRExit:
.010d05	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.010d06					Function_IF:
.010d06	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; check success.
.010d09	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010d0b	05 08		ora $08				ora 	DTemp1
.010d0d	a8		tay				tay 								; success flag in Y.
.010d0e	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010d10	c9 40 3a	cmp #$3a40			cmp 	#thenTokenID
.010d13	d0 32		bne $010d47			bne 	_FIFExtended 				; if so, go to the extended IF.
.010d15	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010d17	e6 06		inc $06				inc 	DCodePtr
.010d19	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010d1c	f0 0f		beq $010d2d			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010d1e	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010d20	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010d23	90 21		bcc $010d46			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010d25	c9 00 c0	cmp #$c000			cmp 	#$C000
.010d28	b0 1c		bcs $010d46			bcs 	_FIFContinue
.010d2a	4c bc 0f	jmp $010fbc			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010d2d					_FIFEndOfLine:
.010d2d	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010d2f	f0 15		beq $010d46			beq 	_FIFContinue 				; if done so, continue.
.010d31	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010d34	90 06		bcc $010d3c			bcc 	_FIFStringConstant
.010d36	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010d38	e6 06		inc $06				inc 	DCodePtr
.010d3a	80 f1		bra $010d2d			bra 	_FIFEndOfLine
.010d3c					_FIFStringConstant:
.010d3c	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010d3f	18		clc				clc
.010d40	65 06		adc $06				adc 	DCodePtr
.010d42	85 06		sta $06				sta 	DCodePtr
.010d44	80 e7		bra $010d2d			bra 	_FIFEndOfLine
.010d46					_FIFContinue:
.010d46	60		rts				rts
.010d47					_FIFExtended:
.010d47	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010d49	e6 2a		inc $2a				inc 	DStack
.010d4b	a9 3c 3c	lda #$3c3c			lda 	#ifTokenID
.010d4e	a6 2a		ldx $2a				ldx 	DStack
.010d50	95 00		sta $00,x			sta 	$00,x
.010d52	98		tya				tya 								; see if the test was passed.
.010d53	f0 01		beq $010d56			beq 	_FIXSkip 					; if zero then it has failed.
.010d55	60		rts				rts 								; test passed, so continue executing
.010d56					_FIXSkip:
.010d56	a9 36 3e	lda #$3e36			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010d59	a2 41 3a	ldx #$3a41			ldx 	#endifTokenID 				; at the same level.
.010d5c	20 bc 0d	jsr $010dbc			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010d5f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010d61	e6 06		inc $06				inc 	DCodePtr
.010d63	c9 41 3a	cmp #$3a41			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010d66	d0 04		bne $010d6c			bne 	_FIXNoThrow
.010d68	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010d6a	c6 2a		dec $2a				dec 	DStack
.010d6c					_FIXNoThrow:
.010d6c	60		rts				rts
.010d6d					Handler_ELSE:
.010d6d	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010d6f	b5 00		lda $00,x			lda 	$00,x
.010d71	c9 3c 3c	cmp #$3c3c			cmp 	#ifTokenID
.010d74	d0 12		bne $010d88			bne 	_HEBadStructure
.010d76	a9 41 3a	lda #$3a41			lda 	#endifTokenID 				; only searching one token.
.010d79	a2 00 00	ldx #$0000			ldx 	#$0000
.010d7c	20 bc 0d	jsr $010dbc			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010d7f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010d81	e6 06		inc $06				inc 	DCodePtr
.010d83	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010d85	c6 2a		dec $2a				dec 	DStack
.010d87	60		rts				rts
.010d88					_HEBadStructure:
.010d88	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010d8b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010d93	68 6f 75 74 20 49 66 00
.010d9b					Handler_ENDIF:
.010d9b	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010d9d	b5 00		lda $00,x			lda 	$00,x
.010d9f	c9 3c 3c	cmp #$3c3c			cmp 	#ifTokenID
.010da2	d0 05		bne $010da9			bne 	_HEIBadStructure
.010da4	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010da6	c6 2a		dec $2a				dec 	DStack
.010da8	60		rts				rts
.010da9					_HEIBadStructure:
.010da9	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010dac	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010db4	68 6f 75 74 20 49 66 00
.010dbc					ScanForwardLevel:
.010dbc	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010dbe	86 0a		stx $0a				stx 	DTemp1+2
.010dc0	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010dc2	85 0c		sta $0c				sta 	DTemp2
.010dc4	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010dc7					_SFLLoop:
.010dc7	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010dca	d0 0d		bne $010dd9			bne 	_SFLNoCheck 				; we're in a substructure.
.010dcc	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010dce	f0 09		beq $010dd9			beq 	_SFLNoCheck 				; don't check zero
.010dd0	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010dd2	f0 04		beq $010dd8			beq 	_SFLFound
.010dd4	c5 0a		cmp $0a				cmp 	DTemp1+2
.010dd6	d0 01		bne $010dd9			bne 	_SFLNoCheck
.010dd8					_SFLFound:
.010dd8	60		rts				rts
.010dd9					_SFLNoCheck:
.010dd9	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010ddb	f0 4f		beq $010e2c			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010ddd	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010de0	90 40		bcc $010e22			bcc 	_SFLSkipString 				; then handle that.
.010de2	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010de4	e6 06		inc $06				inc 	DCodePtr
.010de6	a8		tay				tay 								; put token in Y temporarily.
.010de7	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010dea	c9 00 20	cmp #$2000			cmp 	#$2000
.010ded	d0 d8		bne $010dc7			bne 	_SFLLoop
.010def	98		tya				tya 								; get the token back.
.010df0	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010df3	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010df6	f0 cf		beq $010dc7			beq 	_SFLLoop
.010df8	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010dfb	90 ca		bcc $010dc7			bcc 	_SFLLoop
.010dfd	e8		inx				inx 								; increment the level.
.010dfe	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010e01	f0 c4		beq $010dc7			beq 	_SFLLoop
.010e03	ca		dex				dex 								; decrement the level
.010e04	ca		dex				dex 								; one overdoes the previous inx.
.010e05	10 c0		bpl $010dc7			bpl 	_SFLLoop 					; if gone -ve then error.
.010e07					_SFLError:
.010e07	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010e09	85 22		sta $22				sta 	DLineNumber
.010e0b	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010e0e	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010e16	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010e22					_SFLSkipString:
.010e22	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010e25	18		clc				clc
.010e26	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010e28	85 06		sta $06				sta 	DCodePtr
.010e2a	80 9b		bra $010dc7			bra 	_SFLLoop 					; go round again.
.010e2c					_SFLNextLine:
.010e2c	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010e2e	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010e31	f0 d4		beq $010e07			beq 	_SFLError 					; if zero, then there's no more code to search.
.010e33	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010e36	85 22		sta $22				sta 	DLineNumber
.010e38	18		clc				clc
.010e39	a5 06		lda $06				lda 	DCodePtr
.010e3b	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010e3e	85 06		sta $06				sta 	DCodePtr
.010e40	80 85		bra $010dc7			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.010e42					Command_FOR:
.010e42	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.010e44	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.010e47	d0 60		bne $010ea9			bne		_CFOBad
.010e49	20 2e 03	jsr $01032e			jsr 	VariableFind 				; try to find variable
.010e4c	b0 15		bcs $010e63			bcs 	_CFOExists
.010e4e	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010e50	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010e53	20 d8 03	jsr $0103d8			jsr 	VariableCreate 				; create it.
.010e56	48		pha				pha 								; save on stack
.010e57					_CFOSkipToken:
.010e57	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010e59	e6 06		inc $06				inc 	DCodePtr
.010e5b	e6 06		inc $06				inc 	DCodePtr
.010e5d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010e60	d0 f5		bne $010e57			bne 	_CFOSkipToken
.010e62	68		pla				pla 								; restore address
.010e63					_CFOExists:
.010e63	48		pha				pha 								; push variable address on stack
.010e64	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.010e67	20 7d 04	jsr $01047d			jsr 	ExpectToken
.010e6a	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; this is the start value
.010e6d	bb		tyx				tyx 								; put high value in X
.010e6e	7a		ply				ply 								; address in Y
.010e6f	99 00 00	sta $0000,y			sta 	$0000,y
.010e72	8a		txa				txa
.010e73	99 02 00	sta $0002,y			sta 	$0002,y
.010e76	a9 25 32	lda #$3225			lda 	#toTokenID 					; expect the TO
.010e79	20 7d 04	jsr $01047d			jsr 	ExpectToken
.010e7c	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.010e7e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.010e80	95 02		sta $02,x			sta 	$02,x
.010e82	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e84	95 04		sta $04,x			sta 	$04,x
.010e86	98		tya				tya 								; save variable address at +6
.010e87	95 06		sta $06,x			sta 	$06,x
.010e89	a9 3d 3c	lda #$3c3d			lda 	#forTokenID 				; save for token at +8
.010e8c	95 08		sta $08,x			sta 	$08,x
.010e8e	8a		txa				txa 								; add 8 to stack position
.010e8f	18		clc				clc
.010e90	69 08 00	adc #$0008			adc 	#8
.010e93	85 2a		sta $2a				sta 	DStack
.010e95	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.010e98	b2 06		lda ($06)			lda 	(DCodePtr)
.010e9a	c9 26 32	cmp #$3226			cmp 	#stepTokenID 				; if STEP x is present.
.010e9d	d0 09		bne $010ea8			bne 	_CFONoStep
.010e9f	a9 26 32	lda #$3226			lda 	#stepTokenID 				; skip STEP
.010ea2	20 7d 04	jsr $01047d			jsr 	ExpectToken
.010ea5	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; and whatever the step is.
.010ea8					_CFONoStep:
.010ea8	60		rts				rts
.010ea9					_CFOBad:
.010ea9	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010eac	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>010eb4	76 61 72 69 61 62 6c 65 00
.010ebd					Command_NEXT:
.010ebd	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.010ebf	b5 00		lda $00,x			lda 	$00,x
.010ec1	c9 3d 3c	cmp #$3c3d			cmp 	#forTokenID 				; if not FOR then error
.010ec4	f0 14		beq $010eda			beq 	_CNXOk
.010ec6	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010ec9	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>010ed1	68 6f 75 74 20 46 6f 72 00
.010eda					_CNXOk:
.010eda	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.010edc	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.010edf	90 22		bcc $010f03			bcc 	_CNXNoVariable
.010ee1	20 2e 03	jsr $01032e			jsr 	VariableFind 				; get address of variable.
.010ee4	90 08		bcc $010eee			bcc 	_CNXNextVar 				; not found variable, it's an error.
.010ee6	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.010ee8	ca		dex				dex
.010ee9	ca		dex				dex
.010eea	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.010eec	f0 15		beq $010f03			beq 	_CNXNoVariable 				; then continue
.010eee					_CNXNextVar:
.010eee	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010ef1	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>010ef9	20 76 61 72 69 61 62 6c 65 00
.010f03					_CNXNoVariable:
.010f03	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.010f05	48		pha				pha
.010f06	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.010f08	38		sec				sec
.010f09	e9 08 00	sbc #$0008			sbc 	#8
.010f0c	85 2a		sta $2a				sta 	DStack
.010f0e	aa		tax				tax 								; X points to the stack.
.010f0f	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.010f11	85 06		sta $06				sta 	DCodePtr
.010f13	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; this is the target constant
.010f16	5a		phy				phy 								; save the target on the stack
.010f17	48		pha				pha
.010f18	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.010f1b	85 08		sta $08				sta 	DTemp1
.010f1d	64 0a		stz $0a				stz 	DTemp1+2
.010f1f	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.010f21	c9 26 32	cmp #$3226			cmp 	#stepTokenID
.010f24	d0 0b		bne $010f31			bne 	_CNXNoStep
.010f26	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.010f28	e6 06		inc $06				inc 	DCodePtr
.010f2a	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; work out the step.
.010f2d	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.010f2f	84 0a		sty $0a				sty 	DTemp1+2
.010f31					_CNXNoStep:
.010f31	68		pla				pla 								; save the Target in DTemp2
.010f32	85 0c		sta $0c				sta 	DTemp2
.010f34	68		pla				pla
.010f35	85 0e		sta $0e				sta 	DTemp2+2
.010f37	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.010f39	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.010f3b	a8		tay				tay
.010f3c	18		clc				clc
.010f3d	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.010f40	65 08		adc $08				adc 	DTemp1
.010f42	99 00 00	sta $0000,y			sta 	$0000,y
.010f45	b9 02 00	lda $0002,y			lda 	$0002,y
.010f48	65 0a		adc $0a				adc 	DTemp1+2
.010f4a	99 02 00	sta $0002,y			sta 	$0002,y
.010f4d	38		sec				sec
.010f4e	a5 0c		lda $0c				lda 	DTemp2
.010f50	f9 00 00	sbc $0000,y			sbc 	$0000,y
.010f53	85 0c		sta $0c				sta 	DTemp2
.010f55	a5 0e		lda $0e				lda 	DTemp2+2
.010f57	f9 02 00	sbc $0002,y			sbc 	$0002,y
.010f5a	85 0e		sta $0e				sta 	DTemp2+2
.010f5c	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.010f5e	f0 0a		beq $010f6a			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.010f60	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.010f62	45 0a		eor $0a				eor 	DTemp1+2
.010f64	10 04		bpl $010f6a			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.010f66	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.010f67	85 06		sta $06				sta 	DCodePtr
.010f69	60		rts				rts
.010f6a					_CNXLoopAgain:
.010f6a	68		pla				pla 								; throw the original DCodePtr as we're going back.
.010f6b	18		clc				clc
.010f6c	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.010f6e	aa		tax				tax
.010f6f	69 08 00	adc #$0008			adc 	#8
.010f72	85 2a		sta $2a				sta 	DStack
.010f74	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.010f76	85 22		sta $22				sta 	DLineNumber
.010f78	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010f79					Function_ONGOTO:
.010f79	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; on what GOTO :)
.010f7c	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.010f7f	d0 25		bne $010fa6			bne 	_FOGoFail
.010f81	c9 00 00	cmp #$0000			cmp 	#0
.010f84	f0 20		beq $010fa6			beq 	_FOGoFail 					; we start with index = 1
.010f86	48		pha				pha 								; save count on stack
.010f87	a9 32 3e	lda #$3e32			lda 	#gotoTokenID 				; expect GOTO
.010f8a	20 7d 04	jsr $01047d			jsr 	ExpectToken
.010f8d	fa		plx				plx 								; put count in X.
.010f8e					_FOGoLoop:
.010f8e	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010f90	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010f93	90 73		bcc $011008			bcc 	FGOFail 					; if not, then we have an error.
.010f95	c9 00 c0	cmp #$c000			cmp 	#$C000
.010f98	b0 6e		bcs $011008			bcs 	FGOFail
.010f9a	ca		dex				dex 								; subtract one, if done, call GOTO code
.010f9b	f0 1f		beq $010fbc			beq 	Function_GOTO
.010f9d	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.010f9f	e6 06		inc $06				inc 	DCodePtr
.010fa1	20 a0 04	jsr $0104a0			jsr 	ExpectComma 				; expect a comma
.010fa4	80 e8		bra $010f8e			bra 	_FOGoLoop 					; and loop round.
.010fa6					_FOGoFail:
.010fa6	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010fa9	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010fb1	47 6f 74 6f 20 76 61 6c 75 65 00
.010fbc					Function_GOTO:
.010fbc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010fbe	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010fc1	90 45		bcc $011008			bcc 	FGOFail 					; we don't do calculate line numbers.
.010fc3	c9 00 c0	cmp #$c000			cmp 	#$C000
.010fc6	b0 40		bcs $011008			bcs 	FGOFail
.010fc8	38		sec				sec 								; convert to 0-32767
.010fc9	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010fcc	aa		tax				tax
.010fcd	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.010fd0	18		clc				clc
.010fd1	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.010fd3	a8		tay				tay
.010fd4					_FGOSearch:
.010fd4	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.010fd7	f0 18		beq $010ff1			beq 	_FGOUnknown
.010fd9	8a		txa				txa 								; does it match line number ?
.010fda	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010fdd	f0 08		beq $010fe7			beq 	_FGOFound 					; yes, then found.
.010fdf	98		tya				tya 								; no follow the link
.010fe0	18		clc				clc
.010fe1	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.010fe4	a8		tay				tay
.010fe5	80 ed		bra $010fd4			bra 	_FGOSearch 					; and keep looking
.010fe7					_FGOFound:
.010fe7	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010fe9	98		tya				tya 								; Y + 4 is the code pointer.
.010fea	18		clc				clc 								; (skipping link and line #)
.010feb	69 04 00	adc #$0004			adc 	#4
.010fee	85 06		sta $06				sta 	DCodePtr
.010ff0	60		rts				rts									; and continue
.010ff1					_FGOUnknown:
.010ff1	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>010ff4	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010ffc	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011008					FGOFail:
.011008	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01100b	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011013	20 4e 75 6d 62 65 72 00
.01101b					Function_GOSUB:
.01101b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01101d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01101f	18		clc				clc
.011020	69 02 00	adc #$0002			adc 	#2
.011023	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011025	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011027	95 04		sta $04,x			sta 	$04,x
.011029	a9 33 3e	lda #$3e33			lda 	#gosubTokenID 				; save gosub token at +6
.01102c	95 06		sta $06,x			sta 	$06,x
.01102e	8a		txa				txa 								; advance stack by 6.
.01102f	18		clc				clc
.011030	69 06 00	adc #$0006			adc 	#6
.011033	85 2a		sta $2a				sta 	DStack
.011035	80 85		bra $010fbc			bra 	Function_GOTO 				; and do a GOTO.
.011037					Function_RETURN:
.011037	a6 2a		ldx $2a				ldx 	DStack
.011039	b5 00		lda $00,x			lda 	$00,x
.01103b	c9 33 3e	cmp #$3e33			cmp 	#gosubTokenID 				; check top token.
.01103e	d0 11		bne $011051			bne 	_FRetFail
.011040	8a		txa				txa 								; unpick stack.
.011041	38		sec				sec
.011042	e9 06 00	sbc #$0006			sbc 	#6
.011045	85 2a		sta $2a				sta 	DStack
.011047	aa		tax				tax
.011048	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01104a	85 06		sta $06				sta 	DCodePtr
.01104c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01104e	85 22		sta $22				sta 	DLineNumber
.011050	60		rts				rts
.011051					_FRetFail:
.011051	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>011054	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01105c	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011069					Function_REPEAT:
.011069	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01106b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01106d	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01106f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011071	95 04		sta $04,x			sta 	$04,x
.011073	a9 3a 3c	lda #$3c3a			lda 	#repeatTokenID 				; save repeat token at +6
.011076	95 06		sta $06,x			sta 	$06,x
.011078	8a		txa				txa 								; advance stack by 6.
.011079	18		clc				clc
.01107a	69 06 00	adc #$0006			adc 	#6
.01107d	85 2a		sta $2a				sta 	DStack
.01107f	60		rts				rts
.011080					Function_UNTIL:
.011080	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011082	b5 00		lda $00,x			lda 	$00,x
.011084	c9 3a 3c	cmp #$3c3a			cmp 	#repeatTokenID
.011087	d0 26		bne $0110af			bne 	_FUNFail
.011089	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; .... until what.
.01108c	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01108f	d0 15		bne $0110a6			bne 	_FUNExit
.011091	c9 00 00	cmp #$0000			cmp 	#0
.011094	d0 10		bne $0110a6			bne 	_FUNExit
.011096	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011098	38		sec				sec
.011099	e9 06 00	sbc #$0006			sbc 	#6
.01109c	aa		tax				tax
.01109d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01109f	85 06		sta $06				sta 	DCodePtr
.0110a1	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0110a3	85 22		sta $22				sta 	DLineNumber
.0110a5	60		rts				rts
.0110a6					_FUNExit:
.0110a6	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0110a8	38		sec				sec
.0110a9	e9 06 00	sbc #$0006			sbc 	#6
.0110ac	85 2a		sta $2a				sta 	DStack
.0110ae	60		rts				rts
.0110af					_FUNFail:
.0110af	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>0110b2	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0110ba	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.0110c7					Function_WHILE:
.0110c7	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0110c9	48		pha				pha 								; save on stack
.0110ca	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; while what.
.0110cd	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0110d0	d0 14		bne $0110e6			bne 	_FWHExecute
.0110d2	c9 00 00	cmp #$0000			cmp 	#0
.0110d5	d0 0f		bne $0110e6			bne 	_FWHExecute
.0110d7	68		pla				pla 								; throw away current instruction
.0110d8	a9 3e 3a	lda #$3a3e			lda 	#wendTokenID 				; skip to WEND
.0110db	a2 00 00	ldx #$0000			ldx 	#0
.0110de	20 bc 0d	jsr $010dbc			jsr 	ScanForwardLevel 			; scan forward checking structures
.0110e1	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0110e3	e6 06		inc $06				inc 	DCodePtr
.0110e5	60		rts				rts
.0110e6					_FWHExecute:
.0110e6	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0110e8	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0110e9	3a		dec a				dec 	a
.0110ea	3a		dec a				dec 	a
.0110eb	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0110ed	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0110ef	95 04		sta $04,x			sta 	$04,x
.0110f1	a9 3b 3c	lda #$3c3b			lda 	#whileTokenID 				; save while token at +6
.0110f4	95 06		sta $06,x			sta 	$06,x
.0110f6	8a		txa				txa 								; advance stack by 6.
.0110f7	18		clc				clc
.0110f8	69 06 00	adc #$0006			adc 	#6
.0110fb	85 2a		sta $2a				sta 	DStack
.0110fd	60		rts				rts
.0110fe					Function_WEND:
.0110fe	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011100	b5 00		lda $00,x			lda 	$00,x
.011102	c9 3b 3c	cmp #$3c3b			cmp 	#whileTokenID
.011105	d0 11		bne $011118			bne 	_FWEFail
.011107	8a		txa				txa 								; unpick stack and always loop back.
.011108	38		sec				sec 								; we do the check at the top.
.011109	e9 06 00	sbc #$0006			sbc 	#6
.01110c	85 2a		sta $2a				sta 	DStack
.01110e	aa		tax				tax
.01110f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011111	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011113	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011115	85 22		sta $22				sta 	DLineNumber
.011117	60		rts				rts
.011118					_FWEFail:
.011118	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01111b	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011123	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.01112e					Function_END:
.01112e	02 00		cop #$00			cop 	#0
.011130					Function_RUN:
.011130	20 89 11	jsr $011189			jsr 	Function_CLEAR 				; clear all variables.
.011133	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011135	18		clc				clc
.011136	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.011139					_FRun_NextLineNumber:
.011139	a8		tay				tay 								; put in Y
.01113a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01113d	f0 ef		beq $01112e			beq 	Function_END 				; if zero, off the end of the program, so END the program
.01113f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011142	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011144	98		tya				tya 								; get address back
.011145	18		clc				clc 								; skip over the link/line number
.011146	69 04 00	adc #$0004			adc 	#4
.011149	85 06		sta $06				sta 	DCodePtr
.01114b					_FRun_NextInstruction:
.01114b	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.01114d	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.01114f	f0 32		beq $011183			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011151	c9 21 32	cmp #$3221			cmp 	#colonTokenID 				; colon then skip
.011154	f0 18		beq $01116e			beq 	_FRun_Colon
.011156	a8		tay				tay 								; save in Y
.011157	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01115a	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.01115d	d0 15		bne $011174			bne 	_FRun_TryLET 				; if not, try LET as a default.
.01115f	98		tya				tya 								; get token back
.011160	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011163	0a		asl a				asl 	a 							; double it into X
.011164	aa		tax				tax
.011165	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011167	e6 06		inc $06				inc 	DCodePtr
.011169	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01116c	80 dd		bra $01114b			bra 	_FRun_NextInstruction 		; do the following instruction.
.01116e					_FRun_Colon:
.01116e	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011170	e6 06		inc $06				inc 	DCodePtr
.011172	80 d7		bra $01114b			bra 	_FRun_NextInstruction 		; do the following instruction.
.011174					_FRun_TryLET:
.011174	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011176	c9 00 c0	cmp #$c000			cmp 	#$C000
.011179	90 05		bcc $011180			bcc		_FRunSyntax 				; no, must be syntax.
.01117b	20 3f 0c	jsr $010c3f			jsr 	Function_LET 				; try as a LET.
.01117e	80 cb		bra $01114b			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011180					_FRunSyntax:
.011180	82 ea f2	brl $01046d			brl 	SyntaxError
.011183					_FRun_EndInstruction:
.011183	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011185	1a		inc a				inc 	a 							; go to link for next line
.011186	1a		inc a				inc 	a
.011187	80 b0		bra $011139			bra 	_FRun_NextLineNumber
.011189					Function_CLEAR:
.011189	20 95 11	jsr $011195			jsr 	ClearVariablesPointersAndStacks
.01118c	60		rts				rts
.01118d					Function_STOP:
.01118d	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>011190	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011195					ClearVariablesPointersAndStacks:
.011195	a9 80 00	lda #$0080			lda 	#BASStack
.011198	85 2a		sta $2a				sta 	DStack
.01119a	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.01119c	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.01119f	a9 00 00	lda #$0000			lda 	#$0000
.0111a2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0111a4	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0111a6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0111a9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0111ab	20 d2 11	jsr $0111d2			jsr 	FindCodeEnd 				; find where the program ends.
.0111ae	a8		tay				tay 								; Y points to it.
.0111af	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.0111b2	99 02 00	sta $0002,y			sta 	$0002,y
.0111b5	99 04 00	sta $0004,y			sta 	$0004,y
.0111b8	98		tya				tya 								; start of working memory up
.0111b9	18		clc				clc
.0111ba	69 06 00	adc #$0006			adc 	#6
.0111bd	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0111c0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0111c2	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0111c5					_FCLoop:
.0111c5	a9 00 00	lda #$0000			lda 	#$0000
.0111c8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0111ca	c8		iny				iny
.0111cb	c8		iny				iny
.0111cc	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0111cf	d0 f4		bne $0111c5			bne 	_FCLoop
.0111d1	60		rts				rts
.0111d2					FindCodeEnd:
.0111d2	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.0111d5	18		clc				clc
.0111d6	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0111d8	a8		tay				tay
.0111d9					_FCELoop:
.0111d9	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0111dc	f0 08		beq $0111e6			beq 	_FCEExit
.0111de	98		tya				tya 								; add offset
.0111df	18		clc				clc
.0111e0	79 00 00	adc $0000,y			adc 	$0000,y
.0111e3	a8		tay				tay
.0111e4	80 f3		bra $0111d9			bra 	_FCELoop
.0111e6					_FCEExit:
.0111e6	98		tya				tya 								; return in A
.0111e7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0111e8					Function_Dim:
.0111e8	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0111ea	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0111ed	f0 3b		beq $01122a			beq		_FDIMNotArray 				; no, error.
.0111ef	20 2e 03	jsr $01032e			jsr 	VariableFind 				; try to find it.
.0111f2	b0 41		bcs $011235			bcs 	_FDIMExists 				; if it does, that's an error.
.0111f4	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0111f6	48		pha				pha
.0111f7	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0111f9	48		pha				pha
.0111fa					_FDIMSkip:
.0111fa	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0111fc	e6 06		inc $06				inc 	DCodePtr
.0111fe	e6 06		inc $06				inc 	DCodePtr
.011200	29 00 08	and #$0800			and 	#IDContMask
.011203	d0 f5		bne $0111fa			bne 	_FDIMSkip
.011205	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; evaluate the size
.011208	20 97 04	jsr $010497			jsr 	ExpectRightBracket 			; check the ) following.
.01120b	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.01120e	d0 3b		bne $01124b			bne 	_FDIMSize
.011210	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011213	f0 36		beq $01124b			beq 	_FDIMSize
.011215	7a		ply				ply 								; restore HashTablePtr
.011216	84 20		sty $20				sty 	DHashTablePtr
.011218	7a		ply				ply 								; so now A is the high index, Y points to the token
.011219	20 d8 03	jsr $0103d8			jsr 	VariableCreate 				; create the variable.
.01121c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.01121e	c9 1f 32	cmp #$321f			cmp 	#commaTokenID 				; if not a comma, exit
.011221	d0 06		bne $011229			bne 	_FDIMExit
.011223	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011225	e6 06		inc $06				inc 	DCodePtr
.011227	80 bf		bra $0111e8			bra 	Function_DIM 				; and do another
.011229					_FDIMExit:
.011229	60		rts				rts
.01122a					_FDIMNotArray:
.01122a	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01122d	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011235					_FDIMExists:
.011235	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>011238	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011240	65 64 69 6d 65 6e 73 69 6f 6e 00
.01124b					_FDIMSize:
.01124b	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01124e	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011256	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.01125c					Function_COLLECT:
.01125c	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.01125e	85 0c		sta $0c				sta 	DTemp2
.011260	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011263	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011265	85 0e		sta $0e				sta 	DTemp2+2
.011267	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011269	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01126b					_FCNextPass:
.01126b	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.01126d	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.01126f	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011271	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011274	18		clc				clc
.011275	65 02		adc $02				adc 	DBaseAddress
.011277	a8		tay				tay 								; put in Y
.011278	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01127b					_FCO1:
.01127b	20 a1 12	jsr $0112a1			jsr  	COLLECTScanVariable 		; scan that one.
.01127e	c8		iny				iny 	 							; go to next pointer
.01127f	c8		iny				iny
.011280	ca		dex				dex
.011281	d0 f8		bne $01127b			bne 	_FCO1 						; until done all 16.
.011283	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011286					_FCO2:
.011286	20 b5 12	jsr $0112b5			jsr  	COLLECTScanArray 			; scan that one.
.011289	c8		iny				iny 	 							; go to next pointer
.01128a	c8		iny				iny
.01128b	ca		dex				dex
.01128c	d0 f8		bne $011286			bne 	_FCO2 						; until done all 16.
.01128e	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011290	f0 0e		beq $0112a0			beq		_FCExit 					; if finished then exit.
.011292	48		pha				pha 								; save the target address
.011293	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011295	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011297	20 60 05	jsr $010560			jsr 	StringMakeConcrete 			; make the string concrete.
.01129a	7a		ply				ply 								; restore the string.
.01129b	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.01129e	80 cb		bra $01126b			bra		_FCNextPass
.0112a0					_FCExit:
.0112a0	60		rts				rts
.0112a1					COLLECTScanVariable:
.0112a1	da		phx				phx 								; save XY
.0112a2	5a		phy				phy
.0112a3					_CSVLoop:
.0112a3	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0112a6	f0 0a		beq $0112b2			beq 	_CSVExit
.0112a8	a8		tay				tay 								; put new address into Y
.0112a9	18		clc				clc 								; which is four on.
.0112aa	69 04 00	adc #$0004			adc 	#4
.0112ad	20 d6 12	jsr $0112d6			jsr 	COLLECTCheck
.0112b0	80 f1		bra $0112a3			bra 	_CSVLoop
.0112b2					_CSVExit:
.0112b2	7a		ply				ply
.0112b3	fa		plx				plx
.0112b4	60		rts				rts
.0112b5					COLLECTScanArray:
.0112b5	da		phx				phx 								; save XY
.0112b6	5a		phy				phy
.0112b7					_CSALoop:
.0112b7	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0112ba	f0 17		beq $0112d3			beq 	_CSAExit
.0112bc	a8		tay				tay 								; put new address in Y
.0112bd	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.0112c0	aa		tax				tax
.0112c1	e8		inx				inx									; +1 as one more data element.
.0112c2	98		tya				tya 								; point A to first element, at +6
.0112c3	18		clc				clc
.0112c4	69 06 00	adc #$0006			adc 	#6
.0112c7					_CSADoAllStrings:
.0112c7	20 d6 12	jsr $0112d6			jsr 	COLLECTCheck 				; collect check the first.
.0112ca	1a		inc a				inc 	a 							; advance the pointer.
.0112cb	1a		inc a				inc 	a
.0112cc	1a		inc a				inc 	a
.0112cd	1a		inc a				inc 	a
.0112ce	ca		dex				dex
.0112cf	d0 f6		bne $0112c7			bne 	_CSADoAllStrings 			; until all strings are done.
.0112d1	80 e4		bra $0112b7			bra 	_CSALoop
.0112d3					_CSAExit:
.0112d3	7a		ply				ply
.0112d4	fa		plx				plx
.0112d5	60		rts				rts
.0112d6					COLLECTCheck:
.0112d6	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.0112d8	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.0112da	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.0112dc	90 0a		bcc $0112e8			bcc 	_COCExit
.0112de	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.0112e0	b0 06		bcs $0112e8			bcs 	_COCExit
.0112e2	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0112e4	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0112e6	85 14		sta $14				sta 	DSignCount
.0112e8					_COCExit:
.0112e8	a5 0a		lda $0a				lda 	DTemp1+2
.0112ea	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.0112eb					Command_POKE:
.0112eb	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; address
.0112ee	48		pha				pha	 								; save on stack
.0112ef	5a		phy				phy
.0112f0	20 a0 04	jsr $0104a0			jsr 	ExpectComma 				; comma seperator.
.0112f3	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; data
.0112f6	fa		plx				plx 								; pull address and store in DTemp1
.0112f7	86 0a		stx $0a				stx 	DTemp1+2
.0112f9	fa		plx				plx
.0112fa	86 08		stx $08				stx 	DTemp1+0
.0112fc	e2 20		sep #$20			sep 	#$20 						; byte mode
.0112fe	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011300	c2 20		rep #$20			rep 	#$20 						; word mode
.011302	60		rts				rts
.011303					Command_DOKE:
.011303	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; address
.011306	48		pha				pha	 								; save on stack
.011307	5a		phy				phy
.011308	20 a0 04	jsr $0104a0			jsr 	ExpectComma 				; comma seperator.
.01130b	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; data
.01130e	fa		plx				plx 								; pull address and store in DTemp1
.01130f	86 0a		stx $0a				stx 	DTemp1+2
.011311	fa		plx				plx
.011312	86 08		stx $08				stx 	DTemp1+0
.011314	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011316	60		rts				rts
.011317					Command_LOKE:
.011317	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; address
.01131a	48		pha				pha	 								; save on stack
.01131b	5a		phy				phy
.01131c	20 a0 04	jsr $0104a0			jsr 	ExpectComma 				; comma seperator.
.01131f	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; data
.011322	fa		plx				plx 								; pull address and store in DTemp1
.011323	86 0a		stx $0a				stx 	DTemp1+2
.011325	fa		plx				plx
.011326	86 08		stx $08				stx 	DTemp1+0
.011328	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.01132a	98		tya				tya
.01132b	a0 02 00	ldy #$0002			ldy 	#2
.01132e	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011330	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011331					Function_ASSERT:
.011331	20 af 02	jsr $0102af			jsr 	EvaluateInteger 			; something that returns an integer.
.011334	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011336	05 08		ora $08				ora 	Dtemp1
.011338	f0 01		beq $01133b			beq 	_FAssFail
.01133a	60		rts				rts
.01133b					_FAssFail:
.01133b	20 32 04	jsr $010432			jsr 	ErrorHandler 						; call error routine
>01133e	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011346	61 69 6c 65 64 00
.01134c					Function_CLS:
.01134c	20 77 13	jsr $011377			jsr 	HWClearScreen
.01134f	60		rts				rts
.011350					Function_REM:
.011350	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011352	f0 0b		beq $01135f			beq 	_FRemSyntax 				; if 0, syntax error
.011354	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011357	b0 06		bcs $01135f			bcs 	_FRemSyntax
.011359	18		clc				clc 								; add to DCodePtr
.01135a	65 06		adc $06				adc 	DCodePtr
.01135c	85 06		sta $06				sta 	DCodePtr
.01135e	60		rts				rts
.01135f					_FRemSyntax:
.01135f	82 0b f1	brl $01046d			brl 	SyntaxError

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011362					SwitchBasicInstance:
.011362	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011364	20 77 13	jsr $011377			jsr 	HWClearScreen 						; clear screen
.011367	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01136a	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01136c	86 02		stx $02				stx		DBaseAddress
.01136e	84 04		sty $04				sty 	DHighAddress
.011370	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011371	48		pha				pha 										; then copy it into B.
.011372	ab		plb				plb
.011373	ab		plb				plb
.011374	4c 30 11	jmp $011130			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011377					HWClearScreen:
.011377	48		pha				pha
.011378	da		phx				phx
.011379	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01137c	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01137f	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011383	ca		dex				dex
.011384	10 f6		bpl $01137c			bpl 	_CS0
.011386	64 28		stz $28				stz 	DCursor
.011388	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.01138b	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01138f	fa		plx				plx
.011390	68		pla				pla
.011391	60		rts				rts
.011392					HWPrintChar:
.011392	48		pha				pha
.011393	da		phx				phx
.011394	a6 28		ldx $28				ldx 	DCursor
.011396	e2 20		sep #$20			sep 	#$20
.011398	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01139c	c2 20		rep #$20			rep 	#$20
.01139e	e8		inx				inx
.01139f	8a		txa				txa
.0113a0	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.0113a3	85 28		sta $28				sta 	DCursor
.0113a5	aa		tax				tax
.0113a6	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.0113a9	e2 20		sep #$20			sep 	#$20
.0113ab	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0113af	c2 20		rep #$20			rep 	#$20
.0113b1	fa		plx				plx
.0113b2	68		pla				pla
.0113b3	60		rts				rts
.0113b4					HWNewLine:
.0113b4	48		pha				pha
.0113b5	da		phx				phx
.0113b6	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.0113b9					HWMoveCursor:
.0113b9	a9 20 00	lda #$0020			lda 	#32
.0113bc	20 92 13	jsr $011392			jsr 	HWPrintChar
.0113bf	8a		txa				txa
.0113c0	25 28		and $28				and 	DCursor
.0113c2	d0 f5		bne $0113b9			bne 	HWMoveCursor
.0113c4	fa		plx				plx
.0113c5	68		pla				pla
.0113c6	60		rts				rts
.0113c7	48		pha		HWTab:	pha
.0113c8	da		phx				phx
.0113c9	a2 07 00	ldx #$0007			ldx 	#7
.0113cc	80 eb		bra $0113b9			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	28 42 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1e 00 0a 00 27 3e 16 00
>024108	13 50 4f 4b 45 20 4c 4f 4b 45 20 44 4f 4b 45 20
>024118	74 65 73 74 00 00 20 00 0f 00 01 e0 06 22 0a 00
>024128	06 48 65 6c 6c 6f 20 00 0a 24 0a 00 07 20 57 6f
>024138	72 6c 64 21 00 00 26 00 11 00 31 3e 06 00 02 3e
>024148	3e 00 20 32 1e 30 01 e0 23 32 0a 24 06 00 03 2e
>024158	2e 2e 0a 24 1d 30 01 e0 23 32 00 00 1c 00 14 00
>024168	b5 c8 2e c3 06 22 02 40 0c 26 02 10 00 40 0a 24
>024178	04 40 0c 26 00 50 00 00 0a 00 1e 00 33 3e 82 40
>024188	00 00 08 00 3c 00 31 3e 00 00 16 00 46 00 39 3e
>024198	b5 c8 2e c3 0a 24 02 40 1f 32 0b 24 2a 40 00 00
>0241a8	0a 00 50 00 33 3e 82 40 00 00 08 00 5a 00 2c 3e
>0241b8	00 00 16 00 64 00 27 3e 0e 00 0b 44 69 73 70 6c
>0241c8	61 79 20 52 41 4d 00 00 12 00 82 00 3d 3c 41 c4
>0241d8	06 22 00 40 25 32 08 40 00 00 2e 00 8c 00 31 3e
>0241e8	16 30 41 c4 0a 24 b5 c8 2e c3 1f 32 10 40 23 32
>0241f8	1f 32 16 30 1a 30 41 c4 0a 24 b5 c8 2e c3 23 32
>024208	1f 32 10 40 23 32 00 00 0a 00 96 00 42 3a 41 c4
>024218	00 00 08 00 a0 00 34 3e 00 00 00 00 ee ee ee ee
>024228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2012 times (32192 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
