
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Mon Jun 10 17:45:51 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 53 08 01	jmp $010853		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	43 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	d0 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	e0 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	f0 04					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	34 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	9b 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	00 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	7d 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	5f 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	1a 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	1a 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	9b 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	a7 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	24 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	9b 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ac 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	be 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	35 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	15 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	f1 06					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	db 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	43 03					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	43 03					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	43 03					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	43 03					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	43 03					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	87 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	6c 07					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	fc 07					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	fe 07					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	43 03					.word IllegalToken             & $FFFF ; token $3c1e "while"
>01003e	43 03					.word IllegalToken             & $FFFF ; token $3a1f "wend"
.010040					TokenText:
>010040	02 26					 .text $02,"&"        ; token $2001
>010042	02 7c					 .text $02,"|"        ; token $2002
>010044	02 5e					 .text $02,"^"        ; token $2003
>010046	12 3c					 .text $12,"<"        ; token $2204
>010048	12 3e					 .text $12,">"        ; token $2205
>01004a	12 3d					 .text $12,"="        ; token $2206
>01004c	13 3c 3d				 .text $13,"<="       ; token $2207
>01004f	13 3e 3d				 .text $13,">="       ; token $2208
>010052	13 3c 3e				 .text $13,"<>"       ; token $2209
>010055	22 2b					 .text $22,"+"        ; token $240a
>010057	22 2d					 .text $22,"-"        ; token $240b
>010059	32 2a					 .text $32,"*"        ; token $260c
>01005b	32 2f					 .text $32,"/"        ; token $260d
>01005d	32 25					 .text $32,"%"        ; token $260e
>01005f	33 3e 3e				 .text $33,">>"       ; token $260f
>010062	33 3c 3c				 .text $33,"<<"       ; token $2610
>010065	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006b	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010070	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010075	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007a	92 2c					 .text $92,","        ; token $3215
>01007c	92 3b					 .text $92,";"        ; token $3216
>01007e	92 3a					 .text $92,":"        ; token $3217
>010080	92 28					 .text $92,"("        ; token $3218
>010082	92 29					 .text $92,")"        ; token $3219
>010084	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>010088	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>01008f	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010093	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>010097	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c1e
>01009d	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a1f
>0100a2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3c1e					whileTokenID                     = $3c1e
=$3a1f					wendTokenID                      = $3a1f

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100a3					Evaluate:
.0100a3	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100a6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100a9					EvaluateLevel:
.0100a9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ac	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100ae	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100b0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100b3	b0 79		bcs $01012e			bcs 	_ELVariable
.0100b5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100b8	b0 16		bcs $0100d0			bcs 	_ELConstant
.0100ba	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100bd	90 7f		bcc $01013e			bcc 	_ELStringConstant
.0100bf	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100c2	90 03		bcc $0100c7			bcc 	_ELConstantShift
.0100c4	82 94 00	brl $01015b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100c7					_ELConstantShift:
.0100c7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100ca	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100cc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ce	e6 06		inc $06				inc 	DCodePtr
.0100d0					_ELConstant:
.0100d0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100d2	38		sec				sec  								; shift it in the range 0-32767
.0100d3	e9 00 40	sbc #$4000			sbc 	#$4000
.0100d6	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100d7	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100d9	6a		ror a				ror 	a 							; rotate that into the constant value
.0100da	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100dc	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100de	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100e0	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100e2	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100e4	e6 06		inc $06				inc 	DCodePtr
.0100e6					_ELGotAtom:
.0100e6	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100e8	a8		tay				tay 								; save in Y
.0100e9	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100ec	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100ef	d0 35		bne $010126			bne 	_ELExit
.0100f1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0100f3	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0100f6	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0100f8	98		tya				tya 								; get the keyword token back
.0100f9	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0100fc	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0100fe	90 26		bcc $010126			bcc 	_ELExit 					; precedence too low, then exit.
.010100	5a		phy				phy 								; save the binary operator on the stack
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010103	e6 06		inc $06				inc 	DCodePtr
.010105	18		clc				clc 								; try the next level up
.010106	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010109	e8		inx				inx 								; calculate the RHS at the next stack level.
.01010a	e8		inx				inx
.01010b	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.01010e	ca		dex				dex
.01010f	ca		dex				dex
.010110	7a		ply				ply 								; get operator token back into Y
.010111					_ELExecuteY:
.010111	98		tya				tya
.010112	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010115	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010116	9b		txy				txy 								; save X in Y
.010117	aa		tax				tax 								; double keyword ID in X
.010118	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01011c	bb		tyx				tyx 								; restore X.
.01011d	8f 22 01 01	sta $010122			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010121					_ELCallRoutine:
.010121	20 21 01	jsr $010121			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010124	80 c0		bra $0100e6			bra 	_ELGotAtom 					; go round operator level again.
.010126	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010128	0a		asl a				asl 	a
.010129	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01012b	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01012d	60		rts				rts
.01012e					_ELVariable:
.01012e	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010130	20 ef 01	jsr $0101ef			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010133	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010135	94 10		sty $10,x			sty 	EXSValueH+0,x
.010137	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010139	80 ab		bra $0100e6			bra 	_ELGotAtom
.01013b					_ELSyntax
.01013b	82 16 02	brl $010354			brl 	SyntaxError
.01013e					_ELStringConstant:
.01013e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010141	f0 f8		beq $01013b			beq 	_ELSyntax
.010143	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010145	1a		inc a				inc 	a
.010146	1a		inc a				inc 	a
.010147	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010149	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01014b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01014d	18		clc				clc 								; add to string constant.
.01014e	65 06		adc $06				adc 	DCodePtr
.010150	85 06		sta $06				sta 	DCodePtr
.010152	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010154	09 00 80	ora #$8000			ora 	#$8000
.010157	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010159	80 8b		bra $0100e6			bra 	_ELGotAtom
.01015b					_ELUnaryKeyword:
.01015b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01015d	a8		tay				tay 								; put the token in Y.
.01015e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010160	e6 06		inc $06				inc 	DCodePtr
.010162	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010165	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010168	f0 a7		beq $010111			beq 	_ELExecuteY					; go back and execute it
.01016a	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01016d	d0 11		bne $010180			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01016f	20 a6 01	jsr $0101a6			jsr 	EvaluateNext 				; evaluate the expression
.010172	20 7e 03	jsr $01037e			jsr 	ExpectRightBracket 			; consume the right bracket.
.010175					_ELCopy:
.010175	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010177	95 00		sta $00,x			sta 	EXSValueL+0,x
.010179	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01017b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01017d	82 66 ff	brl $0100e6			brl 	_ELGotAtom 					; and continue.
.010180					_ELUnaryOperator:
.010180	5a		phy				phy 								; save the operator on the stack.
.010181	e8		inx				inx 								; this is like evaluate next
.010182	e8		inx				inx
.010183	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010186	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.010189	ca		dex				dex 								; unwind the stack.
.01018a	ca		dex				dex
.01018b	68		pla				pla 								; restore the unary operator.
.01018c	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01018f	f0 03		beq $010194			beq 	_ELMinus
.010191	4c 54 03	jmp $010354			jmp 	SyntaxError
.010194					_ELMinus:
.010194	38		sec				sec 								; do the negation calculation.
.010195	a9 00 00	lda #$0000			lda 	#0
.010198	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01019a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01019c	a9 00 00	lda #$0000			lda 	#0
.01019f	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101a1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101a3	82 40 ff	brl $0100e6			brl 	_ELGotAtom					; and continue.
.0101a6					EvaluateNext:
.0101a6	e8		inx				inx
.0101a7	e8		inx				inx
.0101a8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101ab	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.0101ae	ca		dex				dex
.0101af	ca		dex				dex
.0101b0	60		rts				rts
.0101b1					EvaluateInteger:
.0101b1	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101b4	b0 01		bcs $0101b7			bcs 	EIType
.0101b6	60		rts				rts
.0101b7					EIType:
.0101b7	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>0101ba	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101c2	78 70 65 63 74 65 64 00
.0101ca					EvaluateNextInteger:
.0101ca	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101cd	b0 e8		bcs $0101b7			bcs 	EIType
.0101cf	60		rts				rts
.0101d0					EvaluateString:
.0101d0	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101d3	90 01		bcc $0101d6			bcc 	ESType
.0101d5	60		rts				rts
.0101d6					ESType:
.0101d6	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>0101d9	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextString:
.0101e9	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101ec	90 e8		bcc $0101d6			bcc 	ESType
.0101ee	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101ef					VariableAccessExpression:
.0101ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101f1	48		pha				pha
.0101f2	20 30 02	jsr $010230			jsr 	VariableFind 				; try to find the variables
.0101f5	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0101f7	90 23		bcc $01021c			bcc 	_VANError
.0101f9	68		pla				pla 								; get and save that first token
.0101fa	48		pha				pha
.0101fb	a8		tay				tay 								; put first token in Y.
.0101fc	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0101ff	f0 07		beq $010208			beq 	_VANNotArray
.010201	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010203	20 a7 02	jsr $0102a7			jsr 	VariableSubscript			; index calculation
.010206	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010208					_VANNotArray:
.010208	68		pla				pla 								; get the token back.
.010209	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01020c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01020f	38		sec				sec 								; set up return string.
.010210	f0 06		beq $010218			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010212	18		clc				clc 								; returning a number, read high data word
.010213	a0 02 00	ldy #$0002			ldy 	#2
.010216	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010218					_VANLoadLower:
.010218	a8		tay				tay 								; put A into Y (this is the high byte)
.010219	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01021b	60		rts				rts
.01021c					_VANError:
.01021c	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>01021f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010227	20 75 6e 6b 6e 6f 77 6e 00
.010230					VariableFind:
.010230	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010232	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010235	90 5c		bcc $010293			bcc 	_VFError
.010237	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01023a	b0 11		bcs $01024d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01023c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01023f	3a		dec a				dec 	a 							; now 0-25
.010240	0a		asl a				asl 	a 							; x 4 and clear carry
.010241	0a		asl a				asl 	a
.010242	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010245	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010247	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010249	e6 06		inc $06				inc 	DCodePtr
.01024b	38		sec				sec 								; return with carry set.
.01024c	60		rts				rts
.01024d					_VFSlowVariable:
.01024d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01024f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010252	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010253	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010254	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010257	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010259	85 08		sta $08				sta 	DTemp1
.01025b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01025d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010260	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010261	65 08		adc $08				adc 	DTemp1
.010263	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010265	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010267					_VFNext:
.010267	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010269	f0 26		beq $010291			beq 	_VFFail 					; if zero, then it's the end of the list.
.01026b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01026d	a8		tay				tay 								; read the address of the name at $0002,y
.01026e	b9 02 00	lda $0002,y			lda 	$0002,y
.010271	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010273	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010276					_VFCompare:
.010276	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010278	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01027a	d0 eb		bne $010267			bne 	_VFNext 					; if not, go to the next one.
.01027c	c8		iny				iny 								; advance token pointer
.01027d	c8		iny				iny
.01027e	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010281	d0 f3		bne $010276			bne 	_VFCompare
.010283	98		tya				tya 								; this is the length of the word.
.010284	18		clc				clc 								; so we add it to the code pointer
.010285	65 06		adc $06				adc 	DCodePtr
.010287	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010289	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.01028b	18		clc				clc 								; four on is the actual data
.01028c	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.01028f	38		sec				sec 								; return with CS indicating success
.010290	60		rts				rts
.010291					_VFFail:
.010291	18		clc				clc
.010292	60		rts				rts
.010293					_VFError:
.010293	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010296	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01029e	76 61 72 69 61 62 6c 65 00
.0102a7					VariableSubscript:
.0102a7	5a		phy				phy 								; save token on stack
.0102a8	48		pha				pha		 							; save variable address on stack.
.0102a9	20 ca 01	jsr $0101ca			jsr		EvaluateNextInteger 		; get the subscript
.0102ac	20 7e 03	jsr $01037e			jsr 	ExpectRightBracket 			; skip right bracket.
.0102af	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102b2	d0 1d		bne $0102d1			bne 	_VANSubscript
.0102b4	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102b6	f0 02		beq $0102ba			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102b8	b0 17		bcs $0102d1			bcs 	_VANSubscript
.0102ba					_VANSubOkay:
.0102ba	0a		asl a				asl 	a 							; double lsword
.0102bb	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102bd	68		pla				pla 								; restore DVariablePtr
.0102be	85 1e		sta $1e				sta 	DVariablePtr
.0102c0	68		pla				pla 								; get and save that first token
.0102c1	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102c4	d0 02		bne $0102c8			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102c6	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102c8					_VANNotString
.0102c8	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102ca	18		clc				clc 								; add 2 to get it past the high subscript
.0102cb	69 02 00	adc #$0002			adc 	#2
.0102ce	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102d0	60		rts				rts
.0102d1					_VANSubscript:
.0102d1	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>0102d4	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102dc	79 20 53 75 62 73 63 72 69 70 74 00
.0102e8					VariableCreate:
.0102e8	48		pha				pha 								; save count.
.0102e9	0a		asl a				asl 	a 							; 2 x # items.
.0102ea	d0 03		bne $0102ef			bne 	_VCNotSingle 				; if this is zero, then it is a single variable
.0102ec	a9 02 00	lda #$0002			lda 	#2 							; so we want 2 (1 items x 2)
.0102ef					_VCNotSingle:
.0102ef	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0102f1	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0102f4	48		pha				pha 								; save on stack
.0102f5	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.0102f8	d0 02		bne $0102fc			bne 	_VCString
.0102fa	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.0102fc					_VCString:
.0102fc	68		pla				pla 								; restore first token.
.0102fd	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010300	f0 04		beq $010306			beq 	_VCNotArray
.010302	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010304	e6 08		inc $08				inc 	DTemp1
.010306					_VCNotArray:
.010306	5a		phy				phy 								; save address of token on stack.
.010307	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01030a	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.01030c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01030e	18		clc				clc 								; add 4 for link and name.
.01030f	69 04 00	adc #$0004			adc 	#4
.010312	65 08		adc $08				adc 	DTemp1 						; add memory required
.010314	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010316	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010318					_VCErase:
.010318	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word
.01031b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01031e	c8		iny				iny
.01031f	c8		iny				iny
.010320	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010322	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010324	d0 f2		bne $010318			bne 	_VCErase
.010326	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010328	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01032a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01032d	68		pla				pla 								; restore the token address
.01032e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010331	68		pla				pla 								; restore count and store.
.010332	99 04 00	sta $0004,y			sta 	$0004,y
.010335					_VCNotArray2:
.010335	98		tya				tya 								; update the head link
.010336	92 20		sta ($20)			sta 	(DHashTablePtr)
.010338	18		clc				clc 								; advance pointer to the data bit.
.010339	69 04 00	adc #$0004			adc 	#4
.01033c	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01033d					ErrorHandler:
.01033d	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01033f	fa		plx				plx 								; address of error message -1
.010340	ea		nop				nop
.010341	80 fe		bra $010341	_EH1:	bra 	_EH1
.010343					IllegalToken:
.010343	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010346	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01034e	54 6f 6b 65 6e 00
.010354					SyntaxError:
.010354	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010357	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01035f	72 72 6f 72 00
.010364					ExpectToken:
.010364	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010366	d0 05		bne $01036d			bne 	_CTKError					; error if not
.010368	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01036a	e6 06		inc $06				inc 	DCodePtr
.01036c	60		rts				rts
.01036d					_CTKError:
.01036d	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010370	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010378	74 6f 6b 65 6e 00
.01037e					ExpectRightBracket:
.01037e	48		pha				pha
.01037f	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010382	20 64 03	jsr $010364			jsr 	ExpectToken
.010385	68		pla				pla
.010386	60		rts				rts
.010387					ExpectComma:
.010387	48		pha				pha
.010388	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01038b	20 64 03	jsr $010364			jsr 	ExpectToken
.01038e	68		pla				pla
.01038f	60		rts				rts
.010390					CheckBothNumeric:
.010390	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010392	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010394	30 01		bmi $010397			bmi 	_CBNFail 					; need to both be zero in bit 15
.010396	60		rts				rts
.010397					_CBNFail:
.010397	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>01039a	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103a2	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103b0					ResetTypeInteger:
.0103b0	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103b2	29 ff 7f	and #$7fff			and 	#$7FFF
.0103b5	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103b7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.0103b8					StringTempAllocate:
.0103b8	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103bb	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103be	18		clc				clc 								; this adds one, for the length.
.0103bf	65 16		adc $16				adc 	DTempStringPointer
.0103c1	85 16		sta $16				sta 	DTempStringPointer
.0103c3	48		pha				pha
.0103c4	a9 00 00	lda #$0000			lda 	#$0000
.0103c7	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103c9	92 16		sta ($16)			sta		(DTempStringPointer)
.0103cb	c2 20		rep #$20			rep 	#$20
.0103cd	68		pla				pla
.0103ce	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103d0	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103d2	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0103d4	60		rts				rts
.0103d5					StringCreateCopy:
.0103d5	a8		tay				tay 								; put pointer to string in Y
.0103d6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0103d9	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0103dc	f0 17		beq $0103f5			beq 	_SCCExit 					; do nothing if length zero.
.0103de	da		phx				phx 								; save X and put the character count in X
.0103df	aa		tax				tax
.0103e0	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0103e2					_SCCCopy:
.0103e2	c8		iny				iny 								; advance and read (first time skips length)
.0103e3	b9 00 00	lda $0000,y			lda 	$0000,y
.0103e6	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0103e8	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0103ea	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0103ec	1a		inc a				inc 	a
.0103ed	92 18		sta ($18)			sta 	(DStartTempString)
.0103ef	ca		dex				dex 								; do X times
.0103f0	d0 f0		bne $0103e2			bne 	_SCCCopy
.0103f2	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0103f4	fa		plx				plx
.0103f5					_SCCExit:
.0103f5	60		rts				rts
.0103f6					StringMakeConcrete:
.0103f6	85 08		sta $08				sta 	DTemp1 						; source
.0103f8	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0103fa	29 ff 00	and #$00ff			and 	#$00FF
.0103fd	48		pha				pha 								; save on stack.
.0103fe	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010401	18		clc				clc
.010402	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010405	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010407	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010409	85 0c		sta $0c				sta 	DTemp2 						; target
.01040b	7a		ply				ply 								; get length copy from here until Y goes -ve
.01040c	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01040e					_SMCLoop:
.01040e	b1 08		lda ($08),y			lda 	(DTemp1),y
.010410	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010412	88		dey				dey
.010413	10 f9		bpl $01040e			bpl 	_SMCLoop
.010415	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010417	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010419	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.01041a					Binary_Add:
.01041a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01041c	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01041e	30 12		bmi $010432		bmi 	_BATypeError
.010420	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010422	30 3f		bmi $010463		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010424	18		clc			clc
.010425	b5 00		lda $00,x		lda		EXSValueL+0,x
.010427	75 02		adc $02,x		adc 	EXSValueL+2,x
.010429	95 00		sta $00,x		sta 	EXSValueL+0,x
.01042b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01042d	75 12		adc $12,x		adc 	EXSValueH+2,x
.01042f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010431	60		rts			rts
.010432					_BATypeError:
.010432	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010435	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01043d	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01044d	65 73 00
.010450					_BALengthError:
.010450	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010453	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01045b	6f 6f 20 6c 6f 6e 67 00
.010463					_BAConcatenateString:
.010463	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010465	85 08		sta $08			sta 	DTemp1
.010467	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010469	85 0c		sta $0c			sta 	DTemp2
.01046b	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01046d	18		clc			clc 										; work out the total length
.01046e	b2 08		lda ($08)		lda 	(DTemp1)
.010470	72 0c		adc ($0c)		adc 	(DTemp2)
.010472	b0 14		bcs $010488		bcs 	_BAConcatLengthError 				; string is too long.
.010474	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010476	20 b8 03	jsr $0103b8		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010479	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01047b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01047d	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01047f	20 d5 03	jsr $0103d5		jsr 	StringCreateCopy
.010482	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010484	20 d5 03	jsr $0103d5		jsr 	StringCreateCopy
.010487	60		rts			rts
.010488					_BAConcatLengthError:
.010488	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>01048b	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010493	6f 6f 20 6c 6f 6e 67 00
.01049b					Binary_Subtract:
.01049b	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.01049e	38		sec			sec
.01049f	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104a1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104a3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104a5	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104a7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104a9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ab	60		rts			rts
.0104ac					Binary_ShiftRight:
.0104ac	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0104af	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104b1	29 3f 00	and #$003f		and 	#63
.0104b4	f0 07		beq $0104bd		beq		_Binary_SRExit
.0104b6					_Binary_SRLoop:
.0104b6	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104b8	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104ba	3a		dec a			dec 	a
.0104bb	d0 f9		bne $0104b6		bne 	_Binary_SRLoop
.0104bd					_Binary_SRExit:
.0104bd	60		rts			rts
.0104be					Binary_ShiftLeft:
.0104be	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0104c1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104c3	29 3f 00	and #$003f		and 	#63
.0104c6	f0 07		beq $0104cf		beq		_Binary_SLExit
.0104c8					_Binary_SLLoop:
.0104c8	16 00		asl $00,x		asl 	EXSValueL+0,x
.0104ca	36 10		rol $10,x		rol 	EXSValueH+0,x
.0104cc	3a		dec a			dec 	a
.0104cd	d0 f9		bne $0104c8		bne 	_Binary_SLLoop
.0104cf					_Binary_SLExit:
.0104cf	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.0104d0					Binary_And:
.0104d0	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0104d3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104d5	35 02		and $02,x		and 	EXSValueL+2,x
.0104d7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104d9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104db	35 12		and $12,x		and 	EXSValueH+2,x
.0104dd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104df	60		rts			rts
.0104e0					Binary_Or:
.0104e0	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0104e3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104e5	15 02		ora $02,x		ora 	EXSValueL+2,x
.0104e7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104eb	15 12		ora $12,x		ora 	EXSValueH+2,x
.0104ed	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ef	60		rts			rts
.0104f0					Binary_Xor:
.0104f0	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0104f3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104f5	55 02		eor $02,x		eor 	EXSValueL+2,x
.0104f7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104f9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104fb	55 12		eor $12,x		eor 	EXSValueH+2,x
.0104fd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ff	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010500					Binary_Equals:
.010500	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010503	b0 0e		bcs $010513		bcs 	_BEString
.010505	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010507	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010509	d0 4f		bne $01055a		bne 	Compare_Fail
.01050b	b5 10		lda $10,x		lda 	EXSValueH,x
.01050d	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01050f	d0 49		bne $01055a		bne 	Compare_Fail
.010511	80 3f		bra $010552		bra 	Compare_Succeed
.010513					_BEString:
.010513	09 00 00	ora #$0000		ora 	#$0000
.010516	f0 3a		beq $010552		beq 	Compare_Succeed
.010518	80 40		bra $01055a		bra 	Compare_Fail
.01051a					Binary_NotEquals:
.01051a	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01051d	b0 0e		bcs $01052d		bcs 	_BNEString
.01051f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010521	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010523	d0 2d		bne $010552		bne 	Compare_Succeed
.010525	b5 10		lda $10,x		lda 	EXSValueH,x
.010527	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010529	d0 27		bne $010552		bne 	Compare_Succeed
.01052b	80 2d		bra $01055a		bra 	Compare_Fail
.01052d					_BNEString:
.01052d	09 00 00	ora #$0000		ora 	#$0000
.010530	d0 20		bne $010552		bne 	Compare_Succeed
.010532	80 26		bra $01055a		bra 	Compare_Fail
.010534					Binary_Less:
.010534	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010537	b0 12		bcs $01054b		bcs 	_BLString
.010539	38		sec			sec
.01053a	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01053c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01053e	b5 10		lda $10,x		lda 	EXSValueH,x
.010540	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010542	50 03		bvc $010547		bvc 	*+5
.010544	49 00 80	eor #$8000		eor 	#$8000
.010547	30 09		bmi $010552		bmi 	Compare_Succeed
.010549	80 0f		bra $01055a		bra 	Compare_Fail
.01054b					_BLString:
.01054b	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01054e	f0 02		beq $010552		beq 	Compare_Succeed
.010550	80 08		bra $01055a		bra 	Compare_Fail
.010552					Compare_Succeed:
.010552	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010555	95 00		sta $00,x		sta 	EXSValueL,x
.010557	95 10		sta $10,x		sta 	EXSValueH,x
.010559	60		rts			rts
.01055a					Compare_Fail:
.01055a	74 00		stz $00,x		stz 	EXSValueL,x
.01055c	74 10		stz $10,x		stz 	EXSValueH,x
.01055e	60		rts			rts
.01055f					Binary_GreaterEqual:
.01055f	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010562	b0 12		bcs $010576		bcs 	_BGEString
.010564	38		sec			sec
.010565	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010567	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010569	b5 10		lda $10,x		lda 	EXSValueH,x
.01056b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01056d	50 03		bvc $010572		bvc 	*+5
.01056f	49 00 80	eor #$8000		eor 	#$8000
.010572	10 de		bpl $010552		bpl 	Compare_Succeed
.010574	80 e4		bra $01055a		bra 	Compare_Fail
.010576					_BGEString:
.010576	09 00 00	ora #$0000		ora 	#$0000
.010579	10 d7		bpl $010552		bpl 	Compare_Succeed
.01057b	80 dd		bra $01055a		bra 	Compare_Fail
.01057d					Binary_LessEqual:
.01057d	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010580	b0 12		bcs $010594		bcs 	_BLEString
.010582	18		clc			clc 									; numeric <= signed
.010583	b5 00		lda $00,x		lda 	EXSValueL,x
.010585	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010587	b5 10		lda $10,x		lda 	EXSValueH,x
.010589	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01058b	50 03		bvc $010590		bvc 	*+5
.01058d	49 00 80	eor #$8000		eor 	#$8000
.010590	30 c0		bmi $010552		bmi 	Compare_Succeed
.010592	80 c6		bra $01055a		bra 	Compare_Fail
.010594					_BLEString:
.010594	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010597	d0 b9		bne $010552		bne 	Compare_Succeed
.010599	80 bf		bra $01055a		bra 	Compare_Fail
.01059b					Binary_Greater:
.01059b	20 b9 05	jsr $0105b9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01059e	b0 12		bcs $0105b2		bcs 	_BGString
.0105a0	18		clc			clc 									; numeric > signed
.0105a1	b5 00		lda $00,x		lda 	EXSValueL,x
.0105a3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a5	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a9	50 03		bvc $0105ae		bvc 	*+5
.0105ab	49 00 80	eor #$8000		eor 	#$8000
.0105ae	10 a2		bpl $010552		bpl 	Compare_Succeed
.0105b0	80 a8		bra $01055a		bra 	Compare_Fail
.0105b2					_BGString:
.0105b2	c9 01 00	cmp #$0001		cmp 	#$0001
.0105b5	f0 9b		beq $010552		beq 	Compare_Succeed
.0105b7	80 a1		bra $01055a		bra 	Compare_Fail
.0105b9					CompareTypeCheck:
.0105b9	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105bb	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105bd	30 06		bmi $0105c5		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105bf	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105c1	30 1c		bmi $0105df		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105c3	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0105c4	60		rts			rts
.0105c5					_CTCFail:
.0105c5	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>0105c8	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0105d0	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0105df					_CTCStringCompare:
.0105df	20 b0 03	jsr $0103b0		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0105e2	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0105e4	85 08		sta $08			sta 	DTemp1
.0105e6	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0105e8	85 0c		sta $0c			sta 	DTemp2
.0105ea	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0105ed	a8		tay			tay
.0105ee	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0105f0	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0105f2	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0105f4	90 02		bcc $0105f8		bcc 	_CTCSmallest
.0105f6	b2 0c		lda ($0c)		lda 	(DTemp2)
.0105f8					_CTCSmallest:
.0105f8	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0105fa					_CTCCompare:
.0105fa	c8		iny			iny 									; look at next character (done first, first char is size)
.0105fb	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0105fd	30 16		bmi $010615		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0105ff	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010601	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010603	f0 f5		beq $0105fa		beq 	_CTCCompare 					; if zero, try the next character.
.010605	b0 07		bcs $01060e		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010607					_CTCLess:
.010607	c2 20		rep #$20		rep 	#$20
.010609	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01060c	80 14		bra $010622		bra 	_CTCExit
.01060e					_CTCGreater:
.01060e	c2 20		rep #$20		rep 	#$20
.010610	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010613	80 0d		bra $010622		bra 	_CTCExit
.010615					_CTCEqualSoFar:
.010615	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010617	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010619	90 ec		bcc $010607		bcc 	_CTCLess
.01061b	d0 f1		bne $01060e		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01061d	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01061f	a9 00 00	lda #$0000		lda 	#$0000
.010622					_CTCExit:
.010622	38		sec			sec 									; return with CS indicating string comparison.
.010623	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010624					Binary_Divide:
.010624	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.010627	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010629	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01062b	d0 14		bne $010641		bne 	_BinaryDivide_Ok
.01062d	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010630	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010638	20 62 79 20 7a 65 72 6f 00
.010641					_BinaryDivide_Ok:
.010641	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010643	64 0a		stz $0a			stz 	DTemp1+2
.010645	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010647	5a		phy			phy 										; save Y (bit counter)
.010648	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01064a	10 07		bpl $010653		bpl 	_BinaryDivide_RightDone
.01064c	e8		inx			inx
.01064d	e8		inx			inx
.01064e	20 89 06	jsr $010689		jsr 	Binary_DivNegate
.010651	ca		dex			dex
.010652	ca		dex			dex
.010653					_BinaryDivide_RightDone:
.010653	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010655	10 03		bpl $01065a		bpl 	_BinaryDivide_LeftDone
.010657	20 89 06	jsr $010689		jsr 	Binary_DivNegate
.01065a					_BinaryDivide_LeftDone:
.01065a	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01065d					_BinaryDivide_Loop:
.01065d	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01065f	36 10		rol $10,x		rol 	EXSValueH+0,x
.010661	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010663	26 0a		rol $0a			rol 	DTemp1+2
.010665	38		sec			sec											; calculate A-M
.010666	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010668	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01066a	85 0c		sta $0c			sta 	DTemp2
.01066c	a5 0a		lda $0a			lda 	DTemp1+2
.01066e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010670	90 08		bcc $01067a		bcc 	_Binary_NoSubract 					; if A < M skip this
.010672	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010674	a5 0c		lda $0c			lda 	DTemp2
.010676	85 08		sta $08			sta 	DTemp1+0
.010678	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01067a					_Binary_NoSubract:
.01067a	88		dey			dey 										; do it 32 times.
.01067b	d0 e0		bne $01065d		bne 	_BinaryDivide_Loop
.01067d					_BinaryDivide_Exit:
.01067d	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01067f	29 01 00	and #$0001		and 	#1
.010682	f0 03		beq $010687		beq 	_BinaryDivide_Exit2
.010684	20 89 06	jsr $010689		jsr 	Binary_DivNegate
.010687					_BinaryDivide_Exit2:
.010687	7a		ply			ply 										; restore Y
.010688	60		rts			rts
.010689					Binary_DivNegate:
.010689	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01068b	38		sec			sec 										; negate the value at stack X.
.01068c	a9 00 00	lda #$0000		lda 	#$0000
.01068f	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010691	95 00		sta $00,x		sta 	EXSValueL+0,x
.010693	a9 00 00	lda #$0000		lda 	#$0000
.010696	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010698	95 10		sta $10,x		sta 	EXSValueH+0,x
.01069a	60		rts			rts
.01069b					Binary_Modulus:
.01069b	20 24 06	jsr $010624		jsr 	Binary_Divide 						; do the divide
.01069e	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106a0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106a2	a5 0a		lda $0a			lda 	DTemp1+2
.0106a4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106a6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0106a7					Binary_Multiply:
.0106a7	20 90 03	jsr $010390		jsr 	CheckBothNumeric 					; check both values are numeric
.0106aa	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106ac	85 08		sta $08			sta 	DTemp1
.0106ae	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106b0	85 0a		sta $0a			sta		DTemp1+2
.0106b2	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106b4	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106b6					_BinaryMultiply_Loop:
.0106b6	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106b8	05 0a		ora $0a			ora 	DTemp1+2
.0106ba	f0 1e		beq $0106da		beq 	_BinaryMultiply_Exit
.0106bc	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106be	29 01 00	and #$0001		and 	#1
.0106c1	f0 0d		beq $0106d0		beq 	_BinaryMultiply_NoAdd
.0106c3	18		clc			clc 										; add multiplicand to result.
.0106c4	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0106c6	75 02		adc $02,x		adc 	EXSValueL+2,x
.0106c8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106ca	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106cc	75 12		adc $12,x		adc 	EXSValueH+2,x
.0106ce	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106d0					_BinaryMultiply_NoAdd:
.0106d0	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0106d2	66 08		ror $08			ror 	DTemp1
.0106d4	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0106d6	36 12		rol $12,x		rol 	EXSValueH+2,x
.0106d8	80 dc		bra $0106b6		bra 	_BinaryMultiply_Loop 				; go round again.
.0106da					_BinaryMultiply_Exit:
.0106da	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0106db					Function_Len:
.0106db	20 b0 03	jsr $0103b0			jsr 	ResetTypeInteger 			; returns an integer
.0106de	20 e9 01	jsr $0101e9			jsr 	EvaluateNextString 			; get the value you are absoluting
.0106e1	20 7e 03	jsr $01037e			jsr 	ExpectRightBracket 			; check )
.0106e4	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0106e6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0106e9	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0106ec	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0106ee	74 10		stz $10,x			stz 	EXSValueH+0,x
.0106f0	60		rts				rts
.0106f1					Function_Abs:
.0106f1	20 b0 03	jsr $0103b0			jsr 	ResetTypeInteger 			; returns an integer
.0106f4	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0106f7	20 7e 03	jsr $01037e			jsr 	ExpectRightBracket 			; check )
.0106fa	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0106fc	30 07		bmi $010705			bmi 	_FAbsNegative 				; negate it if negative
.0106fe	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010700	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010702	95 00		sta $00,x			sta 	EXSValueL+0,x
.010704	60		rts				rts
.010705					_FAbsNegative:
.010705	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010706	a9 00 00	lda #$0000			lda 	#0
.010709	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01070b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01070d	a9 00 00	lda #$0000			lda 	#0
.010710	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010712	95 10		sta $10,x			sta 	EXSValueH+0,x
.010714	60		rts				rts
.010715					Function_Sgn:
.010715	20 b0 03	jsr $0103b0			jsr 	ResetTypeInteger 			; returns integer
.010718	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get an integer
.01071b	20 7e 03	jsr $01037e			jsr 	ExpectRightBracket 			; check )
.01071e	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010720	74 10		stz $10,x			stz 	EXSValueH+0,x
.010722	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010724	30 07		bmi $01072d			bmi 	_FSgnNegative 				; set to -1 if signed
.010726	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010728	f0 02		beq $01072c			beq 	_FSgnExit
.01072a	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01072c					_FSgnExit:
.01072c	60		rts				rts
.01072d					_FSgnNegative:
.01072d	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010730	95 00		sta $00,x			sta 	EXSValueL+0,x
.010732	95 10		sta $10,x			sta 	EXSValueH+0,x
.010734	60		rts				rts
.010735					Function_Random:
.010735	20 b0 03	jsr $0103b0			jsr 	ResetTypeInteger
.010738	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01073a	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.01073c	d0 0a		bne $010748			bne 	_Rnd_NotZero
.01073e	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010741	85 10		sta $10				sta 	DRandom
.010743	a9 ea 00	lda #$00ea			lda 	#$EA
.010746	85 12		sta $12				sta 	DRandom+2
.010748					_Rnd_NotZero:
.010748	20 53 07	jsr $010753			jsr 	_Rnd_Process 				; call randomiser twice
.01074b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01074d	20 53 07	jsr $010753			jsr 	_Rnd_Process
.010750	95 00		sta $00,x			sta 	EXSValueL+0,x
.010752	60		rts				rts
.010753					_Rnd_Process:
.010753	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010755	26 12		rol $12				rol 	DRandom+2
.010757	90 0e		bcc $010767			bcc 	_Rnd_Exit
.010759	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01075b	49 54 d4	eor #$d454			eor 	#$D454
.01075e	85 10		sta $10				sta 	DRandom
.010760	a5 12		lda $12				lda 	DRandom+2
.010762	49 d5 55	eor #$55d5			eor 	#$55D5
.010765	85 12		sta $12				sta 	DRandom+2
.010767					_Rnd_Exit:
.010767	a5 10		lda $10				lda 	DRandom
.010769	45 12		eor $12				eor 	DRandom+2
.01076b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.01076c					Function_ASSERT:
.01076c	20 b1 01	jsr $0101b1			jsr 	EvaluateInteger 			; something that returns an integer.
.01076f	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010771	05 08		ora $08				ora 	Dtemp1
.010773	f0 01		beq $010776			beq 	_FAssFail
.010775	60		rts				rts
.010776					_FAssFail:
.010776	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>010779	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010781	61 69 6c 65 64 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010787					Function_Let:
.010787	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010789	48		pha				pha
.01078a	20 30 02	jsr $010230			jsr 	VariableFind 				; find the variable
.01078d	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01078f	b0 1c		bcs $0107ad			bcs 	_FLetFound 					; skip if found.
.010791	68		pla				pla 								; get and push the first token again.
.010792	48		pha				pha
.010793	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010796	d0 51		bne $0107e9			bne 	_FLError					; arrays, so this causes an error.
.010798	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01079a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01079d	20 e8 02	jsr $0102e8			jsr 	VariableCreate 				; create it.
.0107a0	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0107a2					_FLSkipToken:
.0107a2	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0107a4	e6 06		inc $06				inc 	DCodePtr
.0107a6	e6 06		inc $06				inc 	DCodePtr
.0107a8	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0107ab	d0 f5		bne $0107a2			bne 	_FLSkipToken
.0107ad					_FLetFound:
.0107ad	68		pla				pla 								; get and save the first token.
.0107ae	48		pha				pha
.0107af	a8		tay				tay 								; put it in Y
.0107b0	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0107b3	f0 07		beq $0107bc			beq 	_FLetNotArray
.0107b5	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0107b7	20 a7 02	jsr $0102a7			jsr 	VariableSubscript			; index calculation
.0107ba	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0107bc					_FLetNotArray:
.0107bc	7a		ply				ply 								; get the first token into Y
.0107bd	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0107bf	48		pha				pha
.0107c0	5a		phy				phy 								; save the first token on the stack.
.0107c1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0107c4	20 64 03	jsr $010364			jsr 	ExpectToken
.0107c7	68		pla				pla 								; restore the first token.
.0107c8	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0107cb	d0 0f		bne $0107dc			bne 	_FLetString 				; skip if string.
.0107cd	20 b1 01	jsr $0101b1			jsr 	EvaluateInteger 			; get an integer
.0107d0	7a		ply				ply 								; get address in Y
.0107d1	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0107d3	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107d6	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.0107d8	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0107db	60		rts				rts
.0107dc					_FLetString:
.0107dc	20 d0 01	jsr $0101d0			jsr 	EvaluateString 				; get a string.
.0107df	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0107e1	20 f6 03	jsr $0103f6			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0107e4	7a		ply				ply 								; get address
.0107e5	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107e8	60		rts				rts
.0107e9					_FLError:
.0107e9	20 3d 03	jsr $01033d			jsr 	ErrorHandler 						; call error routine
>0107ec	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0107f4	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0107fc					Function_END:
.0107fc	02 00		cop #$00			cop 	#0
.0107fe					Function_RUN:
.0107fe	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010800	18		clc				clc
.010801	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010804					_FRun_NextLineNumber:
.010804	a8		tay				tay 								; put in Y
.010805	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010808	f0 f2		beq $0107fc			beq 	Function_END 				; if zero, off the end of the program
.01080a	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01080d	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01080f	98		tya				tya 								; get address back
.010810	18		clc				clc 								; skip over the link/line number
.010811	69 04 00	adc #$0004			adc 	#4
.010814	85 06		sta $06				sta 	DCodePtr
.010816					_FRun_NextInstruction:
.010816	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010819	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01081b	38		sec				sec
.01081c	e9 00 01	sbc #$0100			sbc 	#256
.01081f	85 16		sta $16				sta 	DTempStringPointer
.010821	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010823	f0 28		beq $01084d			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010825	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.010828	f0 18		beq $010842			beq 	_FRun_Colon
.01082a	a8		tay				tay 								; save in Y
.01082b	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.01082e	c9 00 20	cmp #$2000			cmp 	#$2000
.010831	d0 15		bne $010848			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010833	98		tya				tya 								; get token back
.010834	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010837	0a		asl a				asl 	a 							; double it into X
.010838	aa		tax				tax
.010839	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01083b	e6 06		inc $06				inc 	DCodePtr
.01083d	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010840	80 d4		bra $010816			bra 	_FRun_NextInstruction 		; do the following instruction.
.010842					_FRun_Colon:
.010842	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010844	e6 06		inc $06				inc 	DCodePtr
.010846	80 ce		bra $010816			bra 	_FRun_NextInstruction 		; do the following instruction.
.010848					_FRun_TryLET:
.010848	20 87 07	jsr $010787			jsr 	Function_LET 				; try as a LET.
.01084b	80 c9		bra $010816			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.01084d					_FRun_EndInstruction:
.01084d	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01084f	1a		inc a				inc 	a 							; go to link for next line
.010850	1a		inc a				inc 	a
.010851	80 b1		bra $010804			bra 	_FRun_NextLineNumber

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010853					SwitchBasicInstance:
.010853	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010855	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010858	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01085a	86 02		stx $02				stx		DBaseAddress
.01085c	84 04		sty $04				sty 	DHighAddress
.01085e	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01085f	48		pha				pha 										; then copy it into B.
.010860	ab		plb				plb
.010861	ab		plb				plb
.010862	4c fe 07	jmp $0107fe			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	60 9d 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0e 00 01 00 1a 3e dc c5
>024108	06 22 96 aa 00 00 14 00 02 00 06 cd 5e cd 0b c0
>024118	06 22 0b 24 02 10 ba ab 00 00 10 00 03 00 a5 c5
>024128	06 22 0b 24 02 10 77 9d 00 00 12 00 04 00 1a 3e
>024138	dc cd 4a c0 06 22 02 10 3d ba 00 00 0e 00 05 00
>024148	4d c5 06 22 04 10 f6 4c 00 00 12 00 06 00 1a 3e
>024158	59 ce 13 c4 06 22 02 10 bf 89 00 00 12 00 07 00
>024168	fc cc 0a c0 06 22 0b 24 02 10 26 62 00 00 14 00
>024178	08 00 1a 3e 6d ce 63 c0 06 22 0b 24 05 10 76 5d
>024188	00 00 10 00 09 00 d6 cc 1a c0 06 22 02 10 f5 64
>024198	00 00 16 00 0a 00 1a 3e a7 cd ec ca 24 c0 06 22
>0241a8	0b 24 05 10 42 73 00 00 14 00 0b 00 1a 3e 31 cd
>0241b8	0e c6 06 22 0b 24 05 10 21 68 00 00 12 00 0c 00
>0241c8	1a 3e 5f cd fc c0 06 22 0b 24 8a 40 00 00 12 00
>0241d8	0d 00 1a 3e c2 cc 12 c0 06 22 01 10 62 4d 00 00
>0241e8	14 00 0e 00 1a 3e 6b ce 13 c0 06 22 0b 24 03 10
>0241f8	9d a3 00 00 0e 00 0f 00 db c5 06 22 05 10 35 62
>024208	00 00 12 00 10 00 1a 3e 07 c0 06 22 0b 24 05 10
>024218	48 6c 00 00 12 00 11 00 7c cd e5 c1 06 22 0b 24
>024228	05 10 4e b9 00 00 0e 00 12 00 08 c0 06 22 04 10
>024238	d9 59 00 00 0e 00 13 00 03 c0 06 22 0b 24 9e b5
>024248	00 00 10 00 14 00 ee cc 93 c4 06 22 05 10 31 46
>024258	00 00 0e 00 15 00 1a 3e 16 c0 06 22 a0 40 00 00
>024268	14 00 16 00 1a 3e de cd 0d c0 06 22 0b 24 02 10
>024278	e5 99 00 00 0e 00 17 00 00 c5 06 22 04 10 0b 43
>024288	00 00 12 00 18 00 1a 3e 81 c5 06 22 0b 24 04 10
>024298	58 69 00 00 12 00 19 00 1a 3e e1 cd 90 ca 1b c0
>0242a8	06 22 30 87 00 00 0e 00 1a 00 13 c0 06 22 01 10
>0242b8	11 8b 00 00 0e 00 1b 00 17 c0 06 22 0b 24 32 40
>0242c8	00 00 12 00 1c 00 1a 3e 12 c0 06 22 0b 24 03 10
>0242d8	93 ad 00 00 14 00 1d 00 b3 cd 12 ce 22 c0 06 22
>0242e8	0b 24 02 10 a3 7c 00 00 12 00 1e 00 1a 3e 4e cd
>0242f8	23 c0 06 22 0b 24 88 40 00 00 0e 00 1f 00 b5 cd
>024308	4c c1 06 22 8f 40 00 00 14 00 20 00 1a 3e 67 ce
>024318	77 c8 1c c0 06 22 0b 24 64 5d 00 00 10 00 21 00
>024328	f0 cc 0a c0 06 22 03 10 ca a9 00 00 12 00 22 00
>024338	1a 3e ab c5 06 22 0b 24 03 10 1d 44 00 00 10 00
>024348	23 00 1a 3e 57 ce 9c c1 06 22 1b 40 00 00 16 00
>024358	24 00 1a 3e 2d ce 09 ce 02 c0 06 22 0b 24 03 10
>024368	94 8f 00 00 10 00 25 00 1a 3e d4 cd 09 c0 06 22
>024378	ac 40 00 00 0e 00 26 00 c7 cc 16 c0 06 22 a8 40
>024388	00 00 14 00 27 00 1a 3e a4 cd 07 c0 06 22 0b 24
>024398	05 10 3d a1 00 00 10 00 28 00 05 ce 8f c5 06 22
>0243a8	03 10 03 4d 00 00 14 00 29 00 1a 3e b8 cd ec c8
>0243b8	0b c0 06 22 03 10 dc a3 00 00 12 00 2a 00 1a 3e
>0243c8	f4 cc 57 c5 06 22 0b 24 bf 40 00 00 14 00 2b 00
>0243d8	1a 3e 60 cd 5f ce 09 c0 06 22 04 10 c2 b6 00 00
>0243e8	12 00 2c 00 3e ce 0a c0 06 22 0b 24 01 10 9f 54
>0243f8	00 00 10 00 2d 00 cc c4 06 22 0b 24 04 10 57 a6
>024408	00 00 14 00 2e 00 8b cd e5 ca 22 c0 06 22 0b 24
>024418	03 10 cb 57 00 00 10 00 2f 00 3b ce 87 c3 06 22
>024428	01 10 ae bf 00 00 0c 00 30 00 0d c0 06 22 4a 73
>024438	00 00 0e 00 31 00 1a 3e 60 c5 06 22 1e 40 00 00
>024448	10 00 32 00 c0 cc 0f c0 06 22 01 10 0b 48 00 00
>024458	12 00 33 00 0f ce b6 c3 06 22 0b 24 05 10 a8 ba
>024468	00 00 12 00 34 00 1a 3e 19 c0 06 22 0b 24 03 10
>024478	60 a8 00 00 10 00 35 00 1a 3e 83 c5 06 22 02 10
>024488	c2 64 00 00 10 00 36 00 1a 3e f9 cc d1 c4 06 22
>024498	49 4c 00 00 12 00 37 00 1a 3e f4 cc 9d c1 06 22
>0244a8	03 10 a7 9f 00 00 0e 00 38 00 b4 cd d9 c5 06 22
>0244b8	60 4b 00 00 0c 00 39 00 0a c0 06 22 7d 40 00 00
>0244c8	10 00 3a 00 e6 cd 09 c0 06 22 05 10 96 52 00 00
>0244d8	10 00 3b 00 87 cd d5 c0 06 22 04 10 1e 7e 00 00
>0244e8	10 00 3c 00 1a 3e f5 c4 06 22 0b 24 45 8b 00 00
>0244f8	10 00 3d 00 1a 3e 1a c0 06 22 03 10 cc 6b 00 00
>024508	0e 00 3e 00 69 c6 06 22 02 10 cd 57 00 00 14 00
>024518	3f 00 aa cd fb cb 0f c0 06 22 0b 24 02 10 e0 5d
>024528	00 00 12 00 40 00 1a 3e ff cd 05 c0 06 22 04 10
>024538	47 79 00 00 0e 00 41 00 6c c6 06 22 05 10 21 6c
>024548	00 00 12 00 42 00 31 ce 15 c0 06 22 0b 24 05 10
>024558	85 8e 00 00 10 00 43 00 0e ce 31 c6 06 22 05 10
>024568	75 85 00 00 14 00 44 00 1a 3e 27 cd 1c c0 06 22
>024578	0b 24 03 10 0a 8e 00 00 12 00 45 00 1a 3e 00 c6
>024588	06 22 0b 24 04 10 88 ba 00 00 14 00 46 00 1a 3e
>024598	fe cd 63 c6 06 22 0b 24 04 10 ca be 00 00 10 00
>0245a8	47 00 1a 3e 18 c0 06 22 03 10 49 44 00 00 12 00
>0245b8	48 00 1a 3e 28 ce 23 c0 06 22 0b 24 9a 40 00 00
>0245c8	10 00 49 00 1a 3e 8d cd 01 c0 06 22 21 40 00 00
>0245d8	10 00 4a 00 1a 3e d7 c4 06 22 06 10 37 48 00 00
>0245e8	12 00 4b 00 1a 3e 04 cd 02 c0 06 22 03 10 7c 98
>0245f8	00 00 10 00 4c 00 d6 cc 12 c0 06 22 0b 24 94 40
>024608	00 00 12 00 4d 00 1a 3e c5 cc 06 c0 06 22 04 10
>024618	2e 83 00 00 16 00 4e 00 1a 3e f3 cc 77 ce 17 c0
>024628	06 22 0b 24 04 10 df 83 00 00 10 00 4f 00 b3 cd
>024638	a7 c3 06 22 05 10 a3 b2 00 00 14 00 50 00 1a 3e
>024648	04 cd 1a c0 06 22 0b 24 04 10 9b 5f 00 00 10 00
>024658	51 00 1a 3e 02 c0 06 22 04 10 8c 85 00 00 12 00
>024668	52 00 03 ce a2 cd 1f c0 06 22 04 10 10 b4 00 00
>024678	0e 00 53 00 5b c5 06 22 01 10 ea 4b 00 00 0e 00
>024688	54 00 04 c0 06 22 03 10 e3 b4 00 00 0e 00 55 00
>024698	1a 3e 10 c0 06 22 b4 a2 00 00 12 00 56 00 1a 3e
>0246a8	09 ce f1 c3 06 22 0b 24 48 40 00 00 10 00 57 00
>0246b8	34 ce 23 c0 06 22 0b 24 20 40 00 00 10 00 58 00
>0246c8	1a 3e fc c5 06 22 0b 24 44 40 00 00 10 00 59 00
>0246d8	ff cc 02 c0 06 22 01 10 32 8d 00 00 12 00 5a 00
>0246e8	1a 3e c8 cc 88 c5 06 22 03 10 be 7a 00 00 14 00
>0246f8	5b 00 1a 3e d6 cc f1 cd 06 c0 06 22 03 10 7a 69
>024708	00 00 10 00 5c 00 09 c0 06 22 0b 24 01 10 4f 48
>024718	00 00 0e 00 5d 00 06 c0 06 22 0b 24 54 7d 00 00
>024728	12 00 5e 00 1a 3e 11 ce 0d c0 06 22 02 10 fa 45
>024738	00 00 14 00 5f 00 1a 3e cd cc 06 c0 06 22 0b 24
>024748	05 10 ee 4c 00 00 10 00 60 00 1a 3e 14 c0 06 22
>024758	02 10 e2 52 00 00 14 00 61 00 1a 3e 12 ce c4 c4
>024768	06 22 0b 24 01 10 31 6a 00 00 10 00 62 00 d3 cd
>024778	82 c1 06 22 03 10 24 83 00 00 0c 00 63 00 24 c5
>024788	06 22 17 92 00 00 10 00 64 00 d1 cd 49 c1 06 22
>024798	0b 24 17 40 00 00 0e 00 65 00 12 c6 06 22 03 10
>0247a8	1d 5a 00 00 10 00 66 00 40 ce 36 cd 01 c0 06 22
>0247b8	bb bf 00 00 12 00 67 00 82 cd a8 c9 1e c0 06 22
>0247c8	0b 24 07 40 00 00 16 00 68 00 1a 3e 31 cd 20 c9
>0247d8	04 c0 06 22 0b 24 05 10 98 64 00 00 0e 00 69 00
>0247e8	6e c6 06 22 02 10 d3 a6 00 00 12 00 6a 00 1a 3e
>0247f8	fd cc 7a c1 06 22 01 10 76 b9 00 00 14 00 6b 00
>024808	1a 3e 29 cd fd cb 15 c0 06 22 0b 24 11 40 00 00
>024818	10 00 6c 00 d4 c4 06 22 0b 24 03 10 ad 53 00 00
>024828	14 00 6d 00 1a 3e 83 cd a5 c0 06 22 0b 24 01 10
>024838	a0 5d 00 00 0e 00 6e 00 c7 c4 06 22 0b 24 97 40
>024848	00 00 14 00 6f 00 1a 3e 5f cd 56 ce 0f c0 06 22
>024858	01 10 87 77 00 00 10 00 70 00 1a 3e 05 c0 06 22
>024868	02 10 1a 99 00 00 0e 00 71 00 20 c5 06 22 0b 24
>024878	97 40 00 00 12 00 72 00 d8 cd 7e cc 11 c0 06 22
>024888	04 10 02 78 00 00 10 00 73 00 a3 cd 1d c3 06 22
>024898	02 10 dd 50 00 00 10 00 74 00 1a 3e cf c5 06 22
>0248a8	04 10 54 7c 00 00 12 00 75 00 1a 3e 79 c5 06 22
>0248b8	0b 24 05 10 1b 61 00 00 10 00 76 00 1a 3e 05 cd
>0248c8	15 c0 06 22 89 40 00 00 14 00 77 00 1a 3e 34 ce
>0248d8	d7 cd 19 c0 06 22 01 10 c1 6d 00 00 12 00 78 00
>0248e8	1a 3e 31 ce 1f c0 06 22 0b 24 21 41 00 00 16 00
>0248f8	79 00 1a 3e 09 ce ce c9 1d c0 06 22 0b 24 01 10
>024908	0f 7a 00 00 0e 00 7a 00 1a 3e 22 c5 06 22 6a 40
>024918	00 00 10 00 7b 00 e4 c5 06 22 0b 24 02 10 fc b9
>024928	00 00 12 00 7c 00 7b cd 0b c2 06 22 0b 24 04 10
>024938	16 94 00 00 12 00 7d 00 87 cd 9f c8 03 c0 06 22
>024948	0b 24 b6 40 00 00 12 00 7e 00 4e cd 1b c0 06 22
>024958	0b 24 01 10 21 63 00 00 12 00 7f 00 1a 3e 2b cd
>024968	e9 ca 09 c0 06 22 be 40 00 00 12 00 80 00 1a 3e
>024978	a4 c5 06 22 0b 24 04 10 7e 93 00 00 10 00 81 00
>024988	1a 3e 0c c0 06 22 01 10 58 96 00 00 0e 00 82 00
>024998	86 c5 06 22 04 10 c3 b3 00 00 12 00 83 00 1a 3e
>0249a8	68 ce e0 c3 06 22 03 10 b9 4e 00 00 0e 00 84 00
>0249b8	15 c0 06 22 03 10 60 5a 00 00 16 00 85 00 1a 3e
>0249c8	04 cd 9d c9 1e c0 06 22 0b 24 02 10 21 5a 00 00
>0249d8	10 00 86 00 1a 3e b6 cd 12 c0 06 22 37 40 00 00
>0249e8	10 00 87 00 af cd 16 c4 06 22 04 10 18 60 00 00
>0249f8	12 00 88 00 83 cd 1d c0 06 22 0b 24 03 10 dc a0
>024a08	00 00 10 00 89 00 1a 3e 40 ce 1d c5 06 22 6d b2
>024a18	00 00 12 00 8a 00 28 cd c5 c9 20 c0 06 22 0b 24
>024a28	96 a9 00 00 14 00 8b 00 7c cd a3 c9 02 c0 06 22
>024a38	0b 24 05 10 c0 7c 00 00 10 00 8c 00 1a 3e 28 ce
>024a48	1c c0 06 22 13 b1 00 00 0e 00 8d 00 c9 c4 06 22
>024a58	0b 24 57 40 00 00 0c 00 8e 00 75 c5 06 22 16 40
>024a68	00 00 12 00 8f 00 35 ce 06 c0 06 22 0b 24 02 10
>024a78	77 bf 00 00 14 00 90 00 1a 3e 10 ce 17 c0 06 22
>024a88	0b 24 01 10 6f 51 00 00 12 00 91 00 05 cd fa c4
>024a98	06 22 0b 24 05 10 1b bd 00 00 0e 00 92 00 85 c5
>024aa8	06 22 05 10 d7 aa 00 00 10 00 93 00 0f c6 06 22
>024ab8	0b 24 05 10 36 4c 00 00 0e 00 94 00 e1 cd 18 c0
>024ac8	06 22 85 40 00 00 10 00 95 00 1a 3e a5 cd a7 c2
>024ad8	06 22 68 40 00 00 0e 00 96 00 f6 cc 05 c0 06 22
>024ae8	2b 40 00 00 10 00 97 00 5c cd 1c cd 08 c0 06 22
>024af8	98 8e 00 00 14 00 98 00 1a 3e f8 cc 68 ce 01 c0
>024b08	06 22 04 10 e4 6e 00 00 16 00 99 00 1a 3e dc cd
>024b18	55 c9 0b c0 06 22 0b 24 05 10 d4 b9 00 00 16 00
>024b28	9a 00 1a 3e 4d cd 3f ce 07 c0 06 22 0b 24 05 10
>024b38	08 71 00 00 10 00 9b 00 1a 3e 31 c5 06 22 02 10
>024b48	b3 4d 00 00 10 00 9c 00 33 ce 10 c0 06 22 0b 24
>024b58	c3 40 00 00 10 00 9d 00 1a 3e 41 ce ff c2 06 22
>024b68	85 40 00 00 10 00 9e 00 02 c6 06 22 0b 24 02 10
>024b78	46 5b 00 00 10 00 9f 00 1a 3e 0e c0 06 22 05 10
>024b88	f7 5a 00 00 10 00 a0 00 33 ce d1 c3 06 22 02 10
>024b98	ee 72 00 00 0e 00 a1 00 b3 cd 46 c6 06 22 a2 40
>024ba8	00 00 0c 00 a2 00 01 c5 06 22 17 a4 00 00 12 00
>024bb8	a3 00 e1 cd 7f ca 18 c0 06 22 0b 24 65 40 00 00
>024bc8	10 00 a4 00 66 ce 10 c0 06 22 0b 24 76 40 00 00
>024bd8	10 00 a5 00 1a 3e f9 cc 47 c6 06 22 ef 61 00 00
>024be8	16 00 a6 00 1a 3e 5a ce 57 c9 06 c0 06 22 0b 24
>024bf8	02 10 77 55 00 00 12 00 a7 00 d0 cc 0d c0 06 22
>024c08	0b 24 02 10 83 7c 00 00 12 00 a8 00 1a 3e 88 cd
>024c18	1a c0 06 22 05 10 72 ad 00 00 10 00 a9 00 87 cd
>024c28	0a c0 06 22 04 10 46 b3 00 00 12 00 aa 00 1a 3e
>024c38	e3 cd 0a c0 06 22 06 10 ef 4c 00 00 16 00 ab 00
>024c48	1a 3e 53 cd fb cc 0b c0 06 22 0b 24 01 10 de 84
>024c58	00 00 0e 00 ac 00 fd cd 39 c2 06 22 0a 81 00 00
>024c68	0e 00 ad 00 32 ce 02 c3 06 22 7f 40 00 00 14 00
>024c78	ae 00 1a 3e ca cc c8 c9 02 c0 06 22 02 10 76 41
>024c88	00 00 0e 00 af 00 fb cc 15 c0 06 22 31 40 00 00
>024c98	0e 00 b0 00 aa c5 06 22 01 10 dc b0 00 00 12 00
>024ca8	b1 00 00 ce 69 cb 17 c0 06 22 0b 24 c7 40 00 00
>024cb8	10 00 b2 00 e5 cd a5 c0 06 22 04 10 c1 87 00 00
>024cc8	16 00 b3 00 1a 3e 58 cd 16 ce 11 c0 06 22 0b 24
>024cd8	04 10 f7 76 00 00 14 00 b4 00 1a 3e af cd 5e c5
>024ce8	06 22 0b 24 02 10 93 99 00 00 10 00 b5 00 29 ce
>024cf8	15 c0 06 22 0b 24 71 78 00 00 12 00 b6 00 1a 3e
>024d08	ce c4 06 22 0b 24 01 10 52 b7 00 00 0e 00 b7 00
>024d18	04 ce c0 c5 06 22 66 40 00 00 10 00 b8 00 cf cd
>024d28	f5 c0 06 22 01 10 4e 5c 00 00 10 00 b9 00 24 cd
>024d38	02 c0 06 22 0b 24 21 40 00 00 12 00 ba 00 1a 3e
>024d48	0b ce 02 c0 06 22 03 10 b6 53 00 00 12 00 bb 00
>024d58	1a 3e f5 cc de c5 06 22 01 10 2d 41 00 00 12 00
>024d68	bc 00 1a 3e 61 ce 81 c9 08 c0 06 22 9f 40 00 00
>024d78	16 00 bd 00 1a 3e 3c ce 34 c8 16 c0 06 22 0b 24
>024d88	01 10 34 aa 00 00 16 00 be 00 1a 3e d8 cd a8 cb
>024d98	0c c0 06 22 0b 24 03 10 74 b6 00 00 12 00 bf 00
>024da8	1a 3e c4 cc 1b c5 06 22 05 10 62 42 00 00 12 00
>024db8	c0 00 10 ce 0b c0 06 22 0b 24 01 10 90 a9 00 00
>024dc8	14 00 c1 00 1a 3e 32 cd 20 c0 06 22 0b 24 04 10
>024dd8	b5 41 00 00 12 00 c2 00 1a 3e 5c c6 06 22 0b 24
>024de8	04 10 44 57 00 00 12 00 c3 00 d4 cd 1d c0 06 22
>024df8	0b 24 05 10 41 6a 00 00 12 00 c4 00 1a 3e 4d cd
>024e08	e5 c3 06 22 02 10 0f 91 00 00 10 00 c5 00 03 ce
>024e18	ea c3 06 22 0b 24 3c 40 00 00 12 00 c6 00 81 cd
>024e28	89 c9 09 c0 06 22 0b 24 3c 7a 00 00 12 00 c7 00
>024e38	08 ce 18 c0 06 22 0b 24 04 10 7a 8b 00 00 16 00
>024e48	c8 00 1a 3e d7 cc 50 c9 12 c0 06 22 0b 24 01 10
>024e58	ad 42 00 00 10 00 c9 00 0b c6 06 22 0b 24 02 10
>024e68	23 ae 00 00 12 00 ca 00 d2 cd e5 c8 10 c0 06 22
>024e78	03 10 97 9e 00 00 14 00 cb 00 8b cd e5 ca 08 c0
>024e88	06 22 0b 24 03 10 e9 84 00 00 12 00 cc 00 5b cd
>024e98	7d cc 08 c0 06 22 02 10 6a a6 00 00 10 00 cd 00
>024ea8	fb cc 06 c0 06 22 02 10 d6 49 00 00 0e 00 ce 00
>024eb8	b1 c5 06 22 03 10 4c 5a 00 00 10 00 cf 00 3a ce
>024ec8	16 c0 06 22 0b 24 45 40 00 00 12 00 d0 00 1a 3e
>024ed8	1e c5 06 22 0b 24 02 10 c4 7b 00 00 12 00 d1 00
>024ee8	1a 3e 3e ce 24 c0 06 22 03 10 9c 60 00 00 14 00
>024ef8	d2 00 37 ce 81 c9 18 c0 06 22 0b 24 02 10 dc 80
>024f08	00 00 10 00 d3 00 5a ce 02 c0 06 22 03 10 8a a8
>024f18	00 00 14 00 d4 00 65 ce f1 cb 09 c0 06 22 0b 24
>024f28	01 10 1c 51 00 00 10 00 d5 00 11 c6 06 22 0b 24
>024f38	02 10 b5 54 00 00 0e 00 d6 00 b5 cd cd c4 06 22
>024f48	c0 40 00 00 0e 00 d7 00 ca c4 06 22 0b 24 75 40
>024f58	00 00 10 00 d8 00 3d ce b2 c9 14 c0 06 22 25 40
>024f68	00 00 12 00 d9 00 1a 3e 1a cd 20 c0 06 22 0b 24
>024f78	b1 bc 00 00 10 00 da 00 1a 3e ce cc 10 c0 06 22
>024f88	93 40 00 00 10 00 db 00 37 ce 1a c0 06 22 0b 24
>024f98	41 40 00 00 12 00 dc 00 1a 3e 2d cd 88 ca 07 c0
>024fa8	06 22 2d 40 00 00 14 00 dd 00 1a 3e fe cd 53 c5
>024fb8	06 22 0b 24 02 10 88 4e 00 00 10 00 de 00 1a 3e
>024fc8	fc cc 49 c5 06 22 72 40 00 00 10 00 df 00 e1 cd
>024fd8	13 c4 06 22 04 10 c8 4f 00 00 0e 00 e0 00 f0 cc
>024fe8	0d c0 06 22 bb 40 00 00 0e 00 e1 00 01 c6 06 22
>024ff8	0b 24 b9 ba 00 00 0c 00 e2 00 05 c5 06 22 a4 40
>025008	00 00 14 00 e3 00 1a 3e 00 cd a8 c9 12 c0 06 22
>025018	0b 24 9a 40 00 00 12 00 e4 00 75 cd da cd 13 c0
>025028	06 22 0b 24 a1 bd 00 00 10 00 e5 00 0f ce 02 c0
>025038	06 22 05 10 9a 66 00 00 12 00 e6 00 1a 3e 4f cd
>025048	05 c0 06 22 04 10 ee 4f 00 00 0e 00 e7 00 ab cd
>025058	04 c0 06 22 7c 40 00 00 12 00 e8 00 1a 3e f7 cc
>025068	aa c0 06 22 03 10 33 a5 00 00 14 00 e9 00 1a 3e
>025078	61 ce b3 ca 0e c0 06 22 05 10 20 83 00 00 14 00
>025088	ea 00 1a 3e b6 cd a4 cd 12 c0 06 22 0b 24 42 40
>025098	00 00 10 00 eb 00 b0 cd 13 c4 06 22 04 10 8b 43
>0250a8	00 00 0c 00 ec 00 25 c5 06 22 69 40 00 00 10 00
>0250b8	ed 00 47 cd c4 c2 06 22 01 10 70 5a 00 00 0e 00
>0250c8	ee 00 01 cd 0b c0 06 22 ac 71 00 00 0e 00 ef 00
>0250d8	32 ce 1a c1 06 22 64 40 00 00 10 00 f0 00 26 cd
>0250e8	e4 cb 13 c0 06 22 06 40 00 00 10 00 f1 00 c8 cc
>0250f8	02 c0 06 22 0b 24 42 40 00 00 10 00 f2 00 1a 3e
>025108	1b c5 06 22 06 10 3e 49 00 00 12 00 f3 00 7c cd
>025118	0d c0 06 22 0b 24 05 10 3d 7f 00 00 14 00 f4 00
>025128	00 cd 59 ca 1d c0 06 22 0b 24 02 10 1f a5 00 00
>025138	14 00 f5 00 1a 3e 2c ce 41 cc 16 c0 06 22 03 10
>025148	57 59 00 00 12 00 f6 00 1a 3e a9 cd 1c c0 06 22
>025158	05 10 ed 43 00 00 0e 00 f7 00 21 c5 06 22 0b 24
>025168	27 40 00 00 12 00 f8 00 1a 3e 0d ce 09 c0 06 22
>025178	04 10 10 69 00 00 10 00 f9 00 35 c6 06 22 0b 24
>025188	01 10 1c 74 00 00 0e 00 fa 00 04 cd 10 c0 06 22
>025198	10 9e 00 00 14 00 fb 00 37 ce e0 cc 20 c0 06 22
>0251a8	0b 24 03 10 82 b6 00 00 10 00 fc 00 1a 3e b8 c5
>0251b8	06 22 04 10 2a 85 00 00 14 00 fd 00 b0 cd e8 cb
>0251c8	19 c0 06 22 0b 24 04 10 e1 9b 00 00 0e 00 fe 00
>0251d8	ae c5 06 22 03 10 1c 6c 00 00 14 00 ff 00 1a 3e
>0251e8	04 ce 00 c4 06 22 0b 24 04 10 51 5f 00 00 0e 00
>0251f8	00 01 5c cd 14 c0 06 22 2a 40 00 00 12 00 01 01
>025208	1a 3e fb c4 06 22 0b 24 03 10 29 bc 00 00 12 00
>025218	02 01 1a 3e 1b cd 0e c0 06 22 0b 24 31 40 00 00
>025228	0e 00 03 01 7d c5 06 22 04 10 eb ae 00 00 0e 00
>025238	04 01 23 c5 06 22 0b 24 a6 91 00 00 0e 00 05 01
>025248	ae cd 04 c3 06 22 31 40 00 00 12 00 06 01 5b cd
>025258	76 ce 15 c0 06 22 04 10 c9 7d 00 00 0e 00 07 01
>025268	56 cd 0c c0 06 22 27 40 00 00 12 00 08 01 28 cd
>025278	a1 c4 06 22 0b 24 02 10 e6 70 00 00 10 00 09 01
>025288	1a 3e f3 cc 01 c5 06 22 4e 40 00 00 10 00 0a 01
>025298	1a 3e 33 ce 10 c4 06 22 2a 40 00 00 0e 00 0b 01
>0252a8	2c c6 06 22 04 10 54 ae 00 00 10 00 0c 01 d2 cd
>0252b8	11 c0 06 22 02 10 30 ac 00 00 0e 00 0d 01 e1 c5
>0252c8	06 22 05 10 a5 8b 00 00 0e 00 0e 01 1a 3e 39 c6
>0252d8	06 22 21 40 00 00 10 00 0f 01 1a 3e fd c5 06 22
>0252e8	06 10 43 42 00 00 10 00 10 01 d8 cc f3 c0 06 22
>0252f8	0b 24 aa 40 00 00 10 00 11 01 1a 3e 30 ce 11 c0
>025308	06 22 b9 63 00 00 0e 00 12 01 63 ce 1e c0 06 22
>025318	ba 40 00 00 10 00 13 01 1a 3e f2 cc 04 c0 06 22
>025328	64 68 00 00 10 00 14 01 1a 3e 30 ce 1e c0 06 22
>025338	b1 40 00 00 0e 00 15 01 b9 cd 18 c0 06 22 8c 40
>025348	00 00 14 00 16 01 1a 3e 1a cd 4d cc 0d c0 06 22
>025358	01 10 5e 40 00 00 16 00 17 01 1a 3e 87 cd a7 cd
>025368	16 c0 06 22 0b 24 01 10 9e 4d 00 00 14 00 18 01
>025378	1a 3e b5 cd 14 c0 06 22 0b 24 03 10 ce a9 00 00
>025388	0e 00 19 01 55 cd 15 c0 06 22 04 40 00 00 0e 00
>025398	1a 01 a3 c5 06 22 0b 24 10 40 00 00 12 00 1b 01
>0253a8	1a 3e ab cd 08 c0 06 22 02 10 87 69 00 00 14 00
>0253b8	1c 01 1a 3e a5 cd e0 c1 06 22 0b 24 06 10 6c 4c
>0253c8	00 00 12 00 1d 01 1a 3e fd cc 39 cb 0b c0 06 22
>0253d8	6e 78 00 00 14 00 1e 01 1a 3e 8c cd 72 c0 06 22
>0253e8	0b 24 05 10 b5 81 00 00 16 00 1f 01 1a 3e 58 cd
>0253f8	3e cc 15 c0 06 22 0b 24 02 10 eb 6c 00 00 0e 00
>025408	20 01 1a 3e f8 c4 06 22 c2 96 00 00 14 00 21 01
>025418	1a 3e ae cd e5 c8 1e c0 06 22 0b 24 22 b3 00 00
>025428	12 00 22 01 7a cd 0f c0 06 22 0b 24 01 10 d0 94
>025438	00 00 16 00 23 01 1a 3e fe cc 9b c9 22 c0 06 22
>025448	0b 24 01 10 ca 80 00 00 12 00 24 01 1a 3e 4e c5
>025458	06 22 0b 24 03 10 38 76 00 00 12 00 25 01 2c cd
>025468	c7 c9 0d c0 06 22 03 10 bb 49 00 00 14 00 26 01
>025478	1a 3e 5c ce 83 c1 06 22 0b 24 01 10 18 a2 00 00
>025488	16 00 27 01 1a 3e d5 cd a1 c9 09 c0 06 22 0b 24
>025498	01 10 35 b9 00 00 12 00 28 01 1a 3e ff c5 06 22
>0254a8	0b 24 03 10 bc bb 00 00 10 00 29 01 dd cd 4e c5
>0254b8	06 22 01 10 3e 85 00 00 12 00 2a 01 1a 3e 20 cd
>0254c8	a7 cb 10 c0 06 22 24 40 00 00 12 00 2b 01 d4 cd
>0254d8	35 ca 09 c0 06 22 03 10 bf 7a 00 00 10 00 2c 01
>0254e8	04 c6 06 22 0b 24 03 10 8b 57 00 00 0e 00 2d 01
>0254f8	3d e6 06 22 04 00 00 00 00 00 12 00 2e 01 1a 3e
>025508	4d ed 0c e0 06 22 04 00 01 45 00 00 18 00 2f 01
>025518	df ed 95 e2 06 22 0c 00 09 58 4a 4d 56 42 59 20
>025528	20 5a 00 00 16 00 30 01 fe e5 06 22 0c 00 09 56
>025538	4b 4c 4e 20 44 20 4a 49 00 00 14 00 31 01 62 ee
>025548	4c e2 06 22 08 00 04 53 48 45 50 00 00 00 12 00
>025558	32 01 1a 3e 33 ee 32 e2 06 22 04 00 01 58 00 00
>025568	1a 00 33 01 79 ed 02 e0 06 22 0e 00 0b 54 56 4b
>025578	45 42 20 20 54 41 45 46 00 00 12 00 34 01 1a 3e
>025588	ed ec 19 e0 06 22 04 00 00 00 00 00 1c 00 35 01
>025598	1a 3e f9 ec 99 eb 09 e0 06 22 0c 00 09 4d 4a 50
>0255a8	46 49 57 56 52 50 00 00 10 00 36 01 1a 3e d3 e5
>0255b8	06 22 04 00 00 00 00 00 16 00 37 01 1a 3e c5 ec
>0255c8	b8 e0 06 22 08 00 05 59 4a 20 4f 51 00 00 1a 00
>0255d8	38 01 1a 3e 0a ee 15 e0 06 22 0c 00 09 47 42 58
>0255e8	47 52 42 46 5a 45 00 00 12 00 39 01 1a 3e e5 ed
>0255f8	09 e2 06 22 04 00 01 4b 00 00 1c 00 3a 01 1a 3e
>025608	88 ed d6 ea 0f e0 06 22 0c 00 08 4a 20 48 48 49
>025618	50 57 47 00 00 00 10 00 3b 01 31 ed 20 e0 06 22
>025628	04 00 01 45 00 00 12 00 3c 01 0c e6 06 22 08 00
>025638	05 59 56 20 49 49 00 00 16 00 3d 01 02 e0 06 22
>025648	0c 00 09 56 56 42 49 4e 54 4f 49 53 00 00 1a 00
>025658	3e 01 1a 3e b0 ed 33 ee 05 e0 06 22 0a 00 07 55
>025668	4f 4a 4b 46 20 44 00 00 10 00 3f 01 4d e5 06 22
>025678	06 00 02 56 42 00 00 00 10 00 40 01 1a 3e 14 e0
>025688	06 22 04 00 00 00 00 00 16 00 41 01 1a 3e 3a ee
>025698	8a e8 17 e0 06 22 06 00 02 54 5a 00 00 00 10 00
>0256a8	42 01 01 e0 06 22 06 00 02 56 4f 00 00 00 18 00
>0256b8	43 01 1a 3e 04 e0 06 22 0c 00 08 4b 4e 4c 20 51
>0256c8	20 48 47 00 00 00 1c 00 44 01 1a 3e c1 ec f8 e9
>0256d8	10 e0 06 22 0c 00 09 47 59 20 49 20 5a 45 47 43
>0256e8	00 00 18 00 45 01 1a 3e 0f e0 06 22 0c 00 08 5a
>0256f8	4a 20 20 4a 48 42 55 00 00 00 10 00 46 01 f3 ec
>025708	76 e5 06 22 04 00 00 00 00 00 12 00 47 01 1a 3e
>025718	ee ec 72 e0 06 22 04 00 00 00 00 00 12 00 48 01
>025728	1a 3e 02 ee 21 e4 06 22 04 00 00 00 00 00 18 00
>025738	49 01 1a 3e ce e5 06 22 0c 00 09 5a 4c 4d 53 55
>025748	50 48 43 4c 00 00 1a 00 4a 01 1a 3e 35 ee 07 e0
>025758	06 22 0c 00 08 4e 55 55 20 56 50 47 59 00 00 00
>025768	12 00 4b 01 5b e5 06 22 08 00 04 42 56 5a 5a 00
>025778	00 00 10 00 4c 01 1a 3e 18 e0 06 22 04 00 01 47
>025788	00 00 12 00 4d 01 1a 3e 12 e0 06 22 06 00 03 58
>025798	20 5a 00 00 16 00 4e 01 56 e6 06 22 0c 00 08 59
>0257a8	20 53 45 53 20 4b 52 00 00 00 10 00 4f 01 10 ee
>0257b8	5b e1 06 22 04 00 01 53 00 00 14 00 50 01 1a 3e
>0257c8	09 e0 06 22 08 00 04 45 44 48 4d 00 00 00 12 00
>0257d8	51 01 0d e0 06 22 08 00 04 49 4b 20 49 00 00 00
>0257e8	14 00 52 01 1a 3e 1e ed 26 e9 1a e0 06 22 04 00
>0257f8	01 45 00 00 1a 00 53 01 21 ed 07 e0 06 22 0e 00
>025808	0a 56 46 46 44 49 4e 4b 49 54 58 00 00 00 14 00
>025818	54 01 1a 3e 25 ed 05 e0 06 22 06 00 03 51 4d 43
>025828	00 00 10 00 55 01 1a 3e 13 e0 06 22 04 00 00 00
>025838	00 00 1a 00 56 01 1a 3e a5 ed b9 e2 06 22 0c 00
>025848	09 4d 4a 20 59 58 46 20 56 59 00 00 12 00 57 01
>025858	1a 3e da ed 20 e0 06 22 04 00 01 5a 00 00 10 00
>025868	58 01 ca e4 06 22 06 00 03 4f 55 4e 00 00 18 00
>025878	59 01 1a 3e 2b e5 06 22 0c 00 08 55 47 56 41 47
>025888	51 48 42 00 00 00 18 00 5a 01 1a 3e fc ec 12 e0
>025898	06 22 0a 00 07 4f 42 51 46 45 52 46 00 00 1c 00
>0258a8	5b 01 1a 3e d9 ed 02 e0 06 22 0e 00 0a 58 5a 43
>0258b8	42 52 4b 4a 56 4f 58 00 00 00 16 00 5c 01 1a 3e
>0258c8	1a e0 06 22 0a 00 06 54 4d 20 46 52 46 00 00 00
>0258d8	1a 00 5d 01 1a 3e d7 ec 2e e0 06 22 0c 00 08 5a
>0258e8	58 43 42 41 46 42 50 00 00 00 16 00 5e 01 1a 3e
>0258f8	5a ed 8e e3 06 22 08 00 05 53 59 57 49 47 00 00
>025908	14 00 5f 01 1a 3e fd ed 5b ea 1a e0 06 22 04 00
>025918	01 43 00 00 0e 00 60 01 d3 e4 06 22 04 00 01 56
>025928	00 00 18 00 61 01 05 e0 06 22 0e 00 0a 47 4e 4e
>025938	4d 4a 4e 20 20 42 51 00 00 00 10 00 62 01 aa ed
>025948	c9 e1 06 22 04 00 00 00 00 00 1a 00 63 01 03 ee
>025958	14 e0 06 22 0e 00 0b 55 46 57 58 20 20 49 54 50
>025968	51 4d 00 00 16 00 64 01 53 ed 58 e4 06 22 0a 00
>025978	06 50 57 42 4e 55 45 00 00 00 12 00 65 01 29 ee
>025988	9b e9 04 e0 06 22 04 00 00 00 00 00 16 00 66 01
>025998	06 e5 06 22 0c 00 08 52 4b 43 20 50 20 4d 4f 00
>0259a8	00 00 1a 00 67 01 1a 3e d7 ed d8 e9 16 e0 06 22
>0259b8	0a 00 07 49 52 20 47 4c 58 47 00 00 1a 00 68 01
>0259c8	1a 3e 4c ed 11 e0 06 22 0c 00 08 42 20 4b 55 41
>0259d8	47 51 45 00 00 00 1a 00 69 01 1a 3e fd ed 1c e0
>0259e8	06 22 0c 00 09 56 4f 47 55 4d 4e 50 56 59 00 00
>0259f8	14 00 6a 01 7e e5 06 22 0a 00 07 43 52 20 20 46
>025a08	4e 59 00 00 12 00 6b 01 1a 3e 38 e6 06 22 06 00
>025a18	02 51 57 00 00 00 1a 00 6c 01 f7 ec 58 ea 10 e0
>025a28	06 22 0c 00 08 59 4d 4e 4c 5a 51 57 4d 00 00 00
>025a38	18 00 6d 01 21 ed 1e ed 09 e0 06 22 0a 00 06 53
>025a48	57 4c 55 44 44 00 00 00 14 00 6e 01 1a 3e cd ec
>025a58	21 e0 06 22 06 00 03 49 45 47 00 00 1a 00 6f 01
>025a68	6c ee 45 e3 06 22 0e 00 0a 42 58 20 59 20 59 52
>025a78	20 50 4a 00 00 00 10 00 70 01 1a 3e ac e5 06 22
>025a88	04 00 00 00 00 00 10 00 71 01 dd ed 1f e0 06 22
>025a98	04 00 01 57 00 00 14 00 72 01 48 ed 7b ea 19 e0
>025aa8	06 22 06 00 03 44 51 44 00 00 18 00 73 01 1a 3e
>025ab8	10 e0 06 22 0c 00 09 5a 4e 55 20 57 20 20 4e 4e
>025ac8	00 00 1a 00 74 01 35 ee 50 e2 06 22 0e 00 0a 52
>025ad8	5a 5a 4f 53 46 44 57 20 45 00 00 00 1a 00 75 01
>025ae8	1a 3e 25 ed 07 e0 06 22 0c 00 08 41 4b 48 45 4e
>025af8	45 20 51 00 00 00 10 00 76 01 1a 3e 0a e0 06 22
>025b08	04 00 01 48 00 00 12 00 77 01 1a 3e a8 e5 06 22
>025b18	06 00 03 57 44 5a 00 00 1a 00 78 01 1a 3e 30 ee
>025b28	06 e0 06 22 0c 00 08 4d 20 55 44 4c 55 4a 4c 00
>025b38	00 00 16 00 79 01 1a 3e 6c ee c1 ec 1b e0 06 22
>025b48	06 00 02 54 57 00 00 00 1a 00 7a 01 1a 3e 74 ed
>025b58	8c ed 17 e0 06 22 0a 00 07 41 43 45 59 47 20 42
>025b68	00 00 12 00 7b 01 1a 3e 17 e0 06 22 06 00 02 51
>025b78	46 00 00 00 16 00 7c 01 00 ed 15 e0 06 22 0a 00
>025b88	07 47 4e 53 20 4c 4a 56 00 00 14 00 7d 01 59 ed
>025b98	d5 e1 06 22 08 00 05 42 58 41 49 52 00 00 1a 00
>025ba8	7e 01 1a 3e 5a ee f6 e0 06 22 0c 00 09 53 55 20
>025bb8	20 4f 4e 48 4f 59 00 00 0e 00 7f 01 08 e0 06 22
>025bc8	04 00 01 42 00 00 10 00 80 01 d1 e5 06 22 06 00
>025bd8	03 42 56 57 00 00 10 00 81 01 3a e6 06 22 06 00
>025be8	02 42 52 00 00 00 18 00 82 01 30 ee e2 e1 06 22
>025bf8	0c 00 08 54 20 56 45 20 4f 53 54 00 00 00 10 00
>025c08	83 01 1a 3e 55 e6 06 22 04 00 00 00 00 00 1a 00
>025c18	84 01 1a 3e 64 e6 06 22 0e 00 0b 59 55 4f 4c 49
>025c28	59 4d 5a 4e 50 44 00 00 1a 00 85 01 1a 3e 50 ed
>025c38	e0 e1 06 22 0c 00 09 46 58 20 43 42 20 58 57 4c
>025c48	00 00 12 00 86 01 1a 3e 1f e5 06 22 06 00 03 49
>025c58	56 4e 00 00 1a 00 87 01 1a 3e 1d ed 1e e0 06 22
>025c68	0c 00 08 41 44 20 54 58 47 51 50 00 00 00 1a 00
>025c78	88 01 1a 3e f6 ec 17 e0 06 22 0c 00 08 51 20 20
>025c88	45 20 54 20 5a 00 00 00 16 00 89 01 1a 3e 0f ee
>025c98	9e ec 1d e0 06 22 06 00 03 4a 20 51 00 00 12 00
>025ca8	8a 01 ca ec 35 e3 06 22 06 00 02 49 47 00 00 00
>025cb8	16 00 8b 01 1a 3e 4b ed 42 eb 13 e0 06 22 06 00
>025cc8	02 49 4a 00 00 00 12 00 8c 01 e2 ed 05 e0 06 22
>025cd8	06 00 02 4e 50 00 00 00 16 00 8d 01 1a 3e 11 e0
>025ce8	06 22 0a 00 07 41 51 20 56 57 55 4c 00 00 14 00
>025cf8	8e 01 1a 3e ff ec 21 e0 06 22 06 00 03 4a 55 47
>025d08	00 00 10 00 8f 01 b6 ed 82 e4 06 22 04 00 01 5a
>025d18	00 00 16 00 90 01 1a 3e f6 e4 06 22 0a 00 06 47
>025d28	20 20 42 49 42 00 00 00 1a 00 91 01 1a 3e fd ec
>025d38	19 e0 06 22 0c 00 09 41 20 55 50 46 43 48 20 5a
>025d48	00 00 18 00 92 01 1a 3e 36 e6 06 22 0c 00 08 5a
>025d58	53 4b 5a 57 20 5a 56 00 00 00 1a 00 93 01 03 ee
>025d68	33 e8 07 e0 06 22 0c 00 09 42 20 44 41 4c 4f 44
>025d78	20 4e 00 00 1c 00 94 01 1a 3e e2 ed bc e8 0e e0
>025d88	06 22 0c 00 08 47 59 5a 20 20 59 45 4a 00 00 00
>025d98	18 00 95 01 1a 3e d4 e4 06 22 0c 00 09 46 4f 20
>025da8	45 49 51 58 20 53 00 00 16 00 96 01 c6 ec 09 e0
>025db8	06 22 0a 00 06 48 4b 56 43 45 59 00 00 00 12 00
>025dc8	97 01 1a 3e 6e ee 13 e0 06 22 04 00 01 4d 00 00
>025dd8	1c 00 98 01 1a 3e 27 ed a1 eb 02 e0 06 22 0c 00
>025de8	09 55 4e 54 51 5a 53 4f 45 5a 00 00 1a 00 99 01
>025df8	62 ee 09 e3 06 22 0e 00 0b 44 45 47 4d 41 48 46
>025e08	53 57 4c 51 00 00 1a 00 9a 01 1a 3e 3b ee 6a ec
>025e18	0c e0 06 22 0a 00 06 4c 54 46 44 20 56 00 00 00
>025e28	14 00 9b 01 1a 3e 57 ed 54 ed 0c e0 06 22 04 00
>025e38	01 56 00 00 12 00 9c 01 1a 3e 1c e5 06 22 06 00
>025e48	03 48 47 4b 00 00 12 00 9d 01 1a 3e 8d e5 06 22
>025e58	06 00 03 49 56 54 00 00 12 00 9e 01 19 e0 06 22
>025e68	08 00 04 42 41 57 53 00 00 00 16 00 9f 01 1a 3e
>025e78	2d ed 74 e1 06 22 08 00 05 45 43 55 5a 45 00 00
>025e88	18 00 a0 01 5f e5 06 22 0e 00 0a 50 20 51 48 54
>025e98	20 20 58 41 4d 00 00 00 1a 00 a1 01 f0 ec f6 e8
>025ea8	21 e0 06 22 0c 00 09 58 51 56 4b 41 20 51 56 55
>025eb8	00 00 14 00 a2 01 ed ec 1f e0 06 22 08 00 04 43
>025ec8	20 49 4b 00 00 00 1c 00 a3 01 1a 3e ff ed a7 e2
>025ed8	06 22 0e 00 0a 4d 50 49 20 4a 48 41 42 4a 44 00
>025ee8	00 00 1a 00 a4 01 1a 3e 54 e5 06 22 0e 00 0a 52
>025ef8	20 4b 57 4e 4d 42 49 45 49 00 00 00 10 00 a5 01
>025f08	56 ee 0b e0 06 22 04 00 01 46 00 00 1a 00 a6 01
>025f18	1a 3e b2 e5 06 22 0e 00 0a 4d 4e 4a 48 20 20 45
>025f28	20 47 59 00 00 00 10 00 a7 01 1a 3e 03 e6 06 22
>025f38	04 00 00 00 00 00 18 00 a8 01 83 ed 1d e0 06 22
>025f48	0c 00 08 4d 20 59 47 20 57 58 56 00 00 00 14 00
>025f58	a9 01 f9 ec 21 e0 06 22 08 00 04 52 59 51 43 00
>025f68	00 00 12 00 aa 01 1a 3e d0 ed 4c e4 06 22 04 00
>025f78	00 00 00 00 12 00 ab 01 2a ed 00 eb 17 e0 06 22
>025f88	04 00 00 00 00 00 14 00 ac 01 1a 3e 83 ed 18 e0
>025f98	06 22 06 00 02 56 55 00 00 00 14 00 ad 01 cd e4
>025fa8	06 22 0a 00 07 46 56 4b 46 20 20 48 00 00 18 00
>025fb8	ae 01 1c ed 21 e0 06 22 0c 00 09 51 41 5a 45 51
>025fc8	57 43 58 4f 00 00 14 00 af 01 60 ed 4f e5 06 22
>025fd8	08 00 05 46 47 55 20 44 00 00 12 00 b0 01 ce e4
>025fe8	06 22 08 00 05 53 57 20 4f 4d 00 00 1a 00 b1 01
>025ff8	1a 3e 0c e0 06 22 0e 00 0b 57 53 20 54 47 49 49
>026008	4b 53 20 51 00 00 18 00 b2 01 39 ee 14 e0 06 22
>026018	0c 00 09 4a 55 44 4a 20 4e 41 47 57 00 00 10 00
>026028	b3 01 00 ee fd e3 06 22 04 00 00 00 00 00 1a 00
>026038	b4 01 1a 3e 0b e0 06 22 0e 00 0a 4a 49 54 59 59
>026048	54 52 20 57 4d 00 00 00 18 00 b5 01 1a 3e 02 ee
>026058	06 e0 06 22 0a 00 06 51 4f 56 42 20 53 00 00 00
>026068	18 00 b6 01 1a 3e d5 ed 0e e0 06 22 0a 00 06 59
>026078	20 4a 20 20 51 00 00 00 14 00 b7 01 03 e0 06 22
>026088	0a 00 07 49 20 44 44 52 4b 56 00 00 12 00 b8 01
>026098	67 ee 81 e2 06 22 06 00 03 56 53 45 00 00 1c 00
>0260a8	b9 01 1a 3e 8d ed c7 e3 06 22 0e 00 0b 4c 20 50
>0260b8	58 4e 43 53 43 41 4d 57 00 00 10 00 ba 01 65 ee
>0260c8	65 e3 06 22 04 00 01 47 00 00 14 00 bb 01 1a 3e
>0260d8	d6 ed 11 e0 06 22 06 00 02 49 46 00 00 00 10 00
>0260e8	bc 01 d3 ec 11 e0 06 22 04 00 00 00 00 00 14 00
>0260f8	bd 01 1a 3e e5 e5 06 22 08 00 05 4a 44 4b 56 56
>026108	00 00 16 00 be 01 5e e6 06 22 0c 00 08 4c 42 49
>026118	51 59 20 56 54 00 00 00 18 00 bf 01 1a 3e 09 ee
>026128	16 e0 06 22 0a 00 07 48 20 4a 4d 20 4d 41 00 00
>026138	10 00 c0 01 1a 3e 09 e6 06 22 04 00 01 52 00 00
>026148	10 00 c1 01 2a ee f7 e0 06 22 04 00 01 51 00 00
>026158	18 00 c2 01 3b e6 06 22 0e 00 0a 4c 56 20 48 5a
>026168	4b 44 51 20 48 00 00 00 18 00 c3 01 a2 ed 1e e3
>026178	06 22 0c 00 08 46 57 43 48 45 43 56 4c 00 00 00
>026188	16 00 c4 01 0e e0 06 22 0c 00 08 4f 55 56 20 47
>026198	46 59 45 00 00 00 14 00 c5 01 fc ed 12 e0 06 22
>0261a8	08 00 05 50 20 58 42 44 00 00 1c 00 c6 01 1a 3e
>0261b8	fd ec c9 eb 16 e0 06 22 0c 00 08 47 44 43 5a 5a
>0261c8	50 46 48 00 00 00 14 00 c7 01 51 e5 06 22 0a 00
>0261d8	07 4b 44 4f 4e 53 57 50 00 00 16 00 c8 01 1e e5
>0261e8	06 22 0c 00 08 57 20 4e 20 41 49 48 50 00 00 00
>0261f8	16 00 c9 01 b6 e5 06 22 0c 00 09 41 20 4b 20 4f
>026208	48 51 47 58 00 00 16 00 ca 01 fd ec 0f e0 06 22
>026218	0a 00 06 41 58 4c 4a 51 58 00 00 00 16 00 cb 01
>026228	7e ed 8b ed 24 e0 06 22 08 00 04 53 20 20 4b 00
>026238	00 00 12 00 cc 01 d7 ed 88 e0 06 22 06 00 02 4f
>026248	47 00 00 00 1e 00 cd 01 1a 3e 33 ed 3e ec 08 e0
>026258	06 22 0e 00 0a 4b 51 47 20 48 45 52 44 20 4a 00
>026268	00 00 18 00 ce 01 f0 ec 39 e4 06 22 0c 00 09 4e
>026278	20 58 55 20 20 58 51 41 00 00 12 00 cf 01 c5 ec
>026288	63 e2 06 22 06 00 03 41 55 51 00 00 1a 00 d0 01
>026298	1a 3e e1 ed 07 e5 06 22 0c 00 09 52 20 4c 54 4c
>0262a8	41 41 20 45 00 00 1a 00 d1 01 58 ee c1 ea 03 e0
>0262b8	06 22 0c 00 09 48 4d 4a 20 20 55 20 54 4e 00 00
>0262c8	18 00 d2 01 d6 ec de e9 05 e0 06 22 0a 00 07 54
>0262d8	57 41 20 55 57 5a 00 00 12 00 d3 01 1a 3e 69 ee
>0262e8	10 e0 06 22 04 00 01 4d 00 00 12 00 d4 01 1d ed
>0262f8	20 e0 06 22 06 00 02 54 51 00 00 00 16 00 d5 01
>026308	05 ee 20 e0 06 22 0a 00 07 4f 53 5a 55 20 20 45
>026318	00 00 16 00 d6 01 66 ee 13 e0 06 22 0a 00 07 43
>026328	54 20 4f 20 4b 46 00 00 18 00 d7 01 80 ed 1a e0
>026338	06 22 0c 00 08 48 57 42 58 41 46 57 51 00 00 00
>026348	14 00 d8 01 1a 3e 56 e5 06 22 08 00 05 58 5a 4c
>026358	20 56 00 00 1c 00 d9 01 1a 3e a3 ed e6 eb 19 e0
>026368	06 22 0c 00 09 4e 53 4a 5a 59 4a 4f 20 51 00 00
>026378	1a 00 da 01 5b ed 56 e4 06 22 0e 00 0b 54 56 20
>026388	20 50 4d 20 41 4c 52 54 00 00 1e 00 db 01 1a 3e
>026398	5d ee 59 ea 17 e0 06 22 0e 00 0b 55 56 20 50 56
>0263a8	4d 50 51 20 45 53 00 00 14 00 dc 01 61 ee 18 e0
>0263b8	06 22 08 00 04 46 57 4b 52 00 00 00 12 00 dd 01
>0263c8	1a 3e 5e ed 2f e0 06 22 04 00 01 4b 00 00 10 00
>0263d8	de 01 1a 3e 5a e5 06 22 04 00 01 49 00 00 14 00
>0263e8	df 01 1a 3e 0d ee 58 e4 06 22 06 00 03 44 52 4c
>0263f8	00 00 12 00 e0 01 fc ed d1 e3 06 22 06 00 03 4d
>026408	46 56 00 00 14 00 e1 01 60 ee 62 eb 11 e0 06 22
>026418	06 00 02 42 54 00 00 00 18 00 e2 01 55 ed 6b e3
>026428	06 22 0c 00 08 51 44 45 20 55 20 48 52 00 00 00
>026438	14 00 e3 01 1a 3e 06 e0 06 22 08 00 05 54 57 20
>026448	46 56 00 00 14 00 e4 01 1a 3e 4e ed 19 e0 06 22
>026458	06 00 03 4e 20 45 00 00 16 00 e5 01 1a 3e d8 ec
>026468	24 e0 06 22 08 00 05 4b 53 20 20 51 00 00 12 00
>026478	e6 01 2c ee 19 e0 06 22 06 00 03 44 46 53 00 00
>026488	18 00 e7 01 1a 3e 59 e6 06 22 0c 00 09 57 20 4a
>026498	48 20 45 43 4f 49 00 00 14 00 e8 01 1a 3e 31 e6
>0264a8	06 22 08 00 05 46 53 56 49 4d 00 00 18 00 e9 01
>0264b8	1a 3e a4 ed ea ed 09 e0 06 22 08 00 04 59 46 54
>0264c8	56 00 00 00 12 00 ea 01 e1 ed 83 e4 06 22 06 00
>0264d8	03 4e 58 5a 00 00 1a 00 eb 01 1a 3e c5 ec 07 ed
>0264e8	1a e0 06 22 0a 00 07 44 46 51 20 59 4c 4b 00 00
>0264f8	14 00 ec 01 1a 3e ac ed 06 e0 06 22 06 00 03 50
>026508	53 49 00 00 16 00 ed 01 61 e6 06 22 0c 00 09 56
>026518	50 41 43 44 4d 55 41 54 00 00 18 00 ee 01 8b ed
>026528	69 eb 15 e0 06 22 0a 00 07 46 20 47 52 44 4e 57
>026538	00 00 1a 00 ef 01 31 ee 7a e9 0a e0 06 22 0c 00
>026548	08 42 4f 20 50 54 44 4e 4e 00 00 00 12 00 f0 01
>026558	1a 3e b6 ed 10 e0 06 22 04 00 01 51 00 00 10 00
>026568	f1 01 1a 3e 6d e6 06 22 04 00 01 50 00 00 16 00
>026578	f2 01 30 ed ac e2 06 22 0a 00 06 57 41 4d 4e 57
>026588	46 00 00 00 18 00 f3 01 07 ee 7f e9 02 e0 06 22
>026598	0a 00 07 45 42 4d 20 58 53 42 00 00 12 00 f4 01
>0265a8	1a 3e 8d ed 48 e1 06 22 04 00 01 47 00 00 12 00
>0265b8	f5 01 b4 ed f7 eb 19 e0 06 22 04 00 01 4b 00 00
>0265c8	12 00 f6 01 d3 ed 86 e4 06 22 06 00 02 50 55 00
>0265d8	00 00 1a 00 f7 01 1a 3e a3 ed 11 e0 06 22 0c 00
>0265e8	08 4a 42 49 50 52 46 4d 52 00 00 00 10 00 f8 01
>0265f8	a2 ed 8a e3 06 22 04 00 00 00 00 00 18 00 f9 01
>026608	1a 3e 24 ed 10 e0 06 22 0a 00 07 4e 20 59 4e 20
>026618	53 58 00 00 16 00 fa 01 1a 3e 09 ee 02 e0 06 22
>026628	08 00 05 54 53 20 20 4d 00 00 12 00 fb 01 87 ed
>026638	3d e0 06 22 06 00 03 59 55 50 00 00 10 00 fc 01
>026648	31 ee 14 e0 06 22 04 00 00 00 00 00 10 00 fd 01
>026658	2a e5 06 22 06 00 03 46 41 4b 00 00 18 00 fe 01
>026668	1a 3e 53 e5 06 22 0c 00 09 59 4a 51 57 42 20 50
>026678	4e 52 00 00 12 00 ff 01 80 e5 06 22 08 00 05 41
>026688	42 20 20 57 00 00 16 00 00 02 01 ed 1d e5 06 22
>026698	0a 00 06 58 49 45 4c 59 46 00 00 00 10 00 01 02
>0266a8	1a 3e 57 e5 06 22 04 00 00 00 00 00 12 00 02 02
>0266b8	1a 3e d6 ec 18 e0 06 22 04 00 00 00 00 00 1c 00
>0266c8	03 02 1a 3e ce ec 1b e0 06 22 0e 00 0b 56 54 4e
>0266d8	4c 43 50 53 45 45 4a 57 00 00 16 00 04 02 07 e0
>0266e8	06 22 0c 00 08 45 4f 5a 43 51 59 20 44 00 00 00
>0266f8	16 00 05 02 0b e6 06 22 0c 00 09 44 20 41 50 4b
>026708	20 56 20 4c 00 00 10 00 06 02 f5 ec 0d e0 06 22
>026718	04 00 01 49 00 00 14 00 07 02 de ed 1f ec 18 e0
>026728	06 22 06 00 03 55 20 53 00 00 14 00 08 02 f2 ec
>026738	c3 e3 06 22 08 00 04 45 59 50 4a 00 00 00 10 00
>026748	09 02 1a 3e 58 e6 06 22 04 00 01 54 00 00 12 00
>026758	0a 02 cf ec 0d e0 06 22 06 00 03 4c 4e 4d 00 00
>026768	18 00 0b 02 01 ee a0 e0 06 22 0c 00 08 55 47 20
>026778	47 45 58 43 4a 00 00 00 1c 00 0c 02 1a 3e e2 ed
>026788	08 e0 06 22 0e 00 0a 43 46 57 50 4e 55 50 20 44
>026798	49 00 00 00 0e 00 0d 02 e3 e5 06 22 04 00 00 00
>0267a8	00 00 10 00 0e 02 27 ed 03 e0 06 22 04 00 01 52
>0267b8	00 00 16 00 0f 02 1a 3e 6d ee 0f e0 06 22 08 00
>0267c8	04 44 52 46 4b 00 00 00 14 00 10 02 1a 3e 63 ee
>0267d8	1e e0 06 22 06 00 03 4c 51 53 00 00 18 00 11 02
>0267e8	7d ed 1f ea 0b e0 06 22 0a 00 06 41 50 49 20 45
>0267f8	44 00 00 00 12 00 12 02 31 ed ff ed 0e e0 06 22
>026808	04 00 01 4a 00 00 10 00 13 02 7f e5 06 22 06 00
>026818	03 48 43 49 00 00 1a 00 14 02 60 ee 4a e3 06 22
>026828	0e 00 0a 5a 4e 54 42 47 47 46 4b 59 4a 00 00 00
>026838	12 00 15 02 1a 3e b0 ed 09 e0 06 22 04 00 00 00
>026848	00 00 1a 00 16 02 e5 ed 33 e8 14 e0 06 22 0c 00
>026858	09 58 20 50 20 4a 20 20 55 4e 00 00 16 00 17 02
>026868	89 e5 06 22 0c 00 09 45 41 4b 4f 59 52 59 53 53
>026878	00 00 16 00 18 02 67 ee 24 e4 06 22 0a 00 06 50
>026888	45 56 58 50 57 00 00 00 14 00 19 02 4b e5 06 22
>026898	0a 00 07 42 20 58 53 20 58 49 00 00 16 00 1a 02
>0268a8	5c ed 0f e5 06 22 0a 00 07 42 51 56 52 20 43 42
>0268b8	00 00 16 00 1b 02 1a 3e 30 ed 0a e2 06 22 08 00
>0268c8	04 57 4d 20 51 00 00 00 16 00 1c 02 88 ed 5a ec
>0268d8	0a e0 06 22 08 00 05 42 59 4a 46 4b 00 00 12 00
>0268e8	1d 02 1a 3e 1c ed 13 e0 06 22 04 00 01 44 00 00
>0268f8	1a 00 1e 02 fc ed 61 e3 06 22 0e 00 0a 49 45 52
>026908	20 53 45 4a 20 44 41 00 00 00 14 00 1f 02 1a 3e
>026918	d3 ec 37 ed 13 e0 06 22 04 00 00 00 00 00 16 00
>026928	20 02 dc ed 39 ea 22 e0 06 22 08 00 05 46 43 55
>026938	20 4c 00 00 18 00 21 02 1a 3e aa e5 06 22 0c 00
>026948	09 48 48 20 4d 20 46 4d 20 5a 00 00 14 00 22 02
>026958	ee ec 24 e0 06 22 08 00 04 47 53 41 4a 00 00 00
>026968	16 00 23 02 1a 3e e0 ed 30 e0 06 22 08 00 04 53
>026978	51 55 47 00 00 00 1a 00 24 02 1a 3e 30 ee f9 e1
>026988	06 22 0c 00 09 59 58 20 48 48 46 46 59 52 00 00
>026998	18 00 25 02 1a 3e 55 ee dd e4 06 22 0a 00 06 4e
>0269a8	43 45 50 49 52 00 00 00 1a 00 26 02 03 ee 41 eb
>0269b8	12 e0 06 22 0c 00 09 4d 4f 4d 43 43 4e 20 20 53
>0269c8	00 00 12 00 27 02 e2 e5 06 22 08 00 05 46 59 20
>0269d8	53 4a 00 00 18 00 28 02 1a 3e 49 ed 1c e0 06 22
>0269e8	0a 00 07 52 57 45 44 20 48 58 00 00 14 00 29 02
>0269f8	1a 3e 22 ed 0d e0 06 22 06 00 03 44 48 4c 00 00
>026a08	1a 00 2a 02 7d ed a7 e9 13 e0 06 22 0c 00 09 4c
>026a18	58 47 52 48 20 20 20 43 00 00 12 00 2b 02 11 ee
>026a28	b7 e1 06 22 06 00 03 54 20 46 00 00 12 00 2c 02
>026a38	1a 3e 6e e6 06 22 06 00 02 45 46 00 00 00 12 00
>026a48	2d 02 1a 3e af e5 06 22 06 00 03 55 43 50 00 00
>026a58	18 00 2e 02 1a 3e 79 e5 06 22 0c 00 08 54 51 41
>026a68	46 59 20 58 52 00 00 00 14 00 2f 02 1a 3e 6b ee
>026a78	2c e4 06 22 06 00 03 5a 43 49 00 00 10 00 30 02
>026a88	1a ed 05 e0 06 22 04 00 00 00 00 00 14 00 31 02
>026a98	1a 3e 1a ed 24 e0 06 22 06 00 02 57 46 00 00 00
>026aa8	1a 00 32 02 30 ee d2 e9 13 e0 06 22 0c 00 08 46
>026ab8	55 4b 20 4c 20 49 59 00 00 00 18 00 33 02 5d e5
>026ac8	06 22 0e 00 0a 49 20 46 48 4b 20 57 49 4d 56 00
>026ad8	00 00 14 00 34 02 1a 3e 3e ee 22 e0 06 22 06 00
>026ae8	02 55 59 00 00 00 14 00 35 02 75 ed 69 e3 06 22
>026af8	08 00 04 5a 50 50 48 00 00 00 12 00 36 02 d4 ed
>026b08	78 e6 06 22 06 00 03 54 47 59 00 00 1c 00 37 02
>026b18	1a 3e ff ec 20 e0 06 22 0e 00 0b 54 20 59 50 4e
>026b28	50 56 4d 54 44 56 00 00 10 00 38 02 1a 3e 59 e5
>026b38	06 22 04 00 00 00 00 00 18 00 39 02 1a 3e ef ec
>026b48	5a e5 06 22 0a 00 07 44 4e 20 20 20 43 58 00 00
>026b58	14 00 3a 02 3c ee e9 eb 1e e0 06 22 06 00 03 4c
>026b68	44 56 00 00 1a 00 3b 02 1a 3e 22 ed a1 e0 06 22
>026b78	0c 00 09 41 20 46 20 4a 43 4d 47 4f 00 00 16 00
>026b88	3c 02 8b ed 72 e0 06 22 0a 00 06 45 20 20 20 57
>026b98	45 00 00 00 1a 00 3d 02 1a 3e 50 e5 06 22 0e 00
>026ba8	0b 4e 20 42 51 20 4f 5a 4a 4f 20 57 00 00 12 00
>026bb8	3e 02 1a 3e 5e ee 07 e0 06 22 04 00 01 51 00 00
>026bc8	14 00 3f 02 0c ee 04 e0 06 22 08 00 05 44 57 51
>026bd8	4f 44 00 00 14 00 40 02 1a 3e 12 ee 1a e0 06 22
>026be8	06 00 03 44 49 47 00 00 18 00 41 02 f1 e4 06 22
>026bf8	0e 00 0a 54 44 47 4f 4b 57 20 4b 55 47 00 00 00
>026c08	16 00 42 02 1a 3e 30 ed 04 e0 06 22 08 00 04 41
>026c18	59 42 58 00 00 00 16 00 43 02 1a 3e d1 ed ca ec
>026c28	1c e0 06 22 06 00 03 4f 41 43 00 00 1e 00 44 02
>026c38	1a 3e 4a ed d8 ea 20 e0 06 22 0e 00 0b 52 44 46
>026c48	49 20 53 47 50 5a 4a 4f 00 00 10 00 45 02 b9 ed
>026c58	19 e0 06 22 04 00 01 47 00 00 1a 00 46 02 1a 3e
>026c68	37 ee 0b e0 06 22 0c 00 09 45 50 45 54 49 42 42
>026c78	48 52 00 00 10 00 47 02 1a 3e cf e4 06 22 04 00
>026c88	00 00 00 00 1a 00 48 02 29 ee 12 e0 06 22 0e 00
>026c98	0a 57 4b 5a 50 4d 20 56 43 4e 43 00 00 00 10 00
>026ca8	49 02 22 ed 88 e4 06 22 04 00 00 00 00 00 14 00
>026cb8	4a 02 1a 3e 0e ee 24 e9 0c e0 06 22 04 00 00 00
>026cc8	00 00 1c 00 4b 02 1a 3e 89 ed 1a e9 06 e0 06 22
>026cd8	0c 00 09 58 20 20 4b 54 20 56 5a 58 00 00 16 00
>026ce8	4c 02 a7 ed cb e0 06 22 0a 00 06 4a 52 45 47 45
>026cf8	4b 00 00 00 18 00 4d 02 25 ed 3a e2 06 22 0c 00
>026d08	08 58 42 45 57 52 20 20 41 00 00 00 12 00 4e 02
>026d18	1a 3e b6 ed 12 e0 06 22 04 00 01 46 00 00 14 00
>026d28	4f 02 0e ee 13 e0 06 22 08 00 05 43 4f 46 44 43
>026d38	00 00 12 00 50 02 f6 ec 05 e0 06 22 06 00 02 45
>026d48	46 00 00 00 16 00 51 02 f9 e4 06 22 0c 00 09 44
>026d58	4a 43 5a 55 20 4b 43 50 00 00 14 00 52 02 1a 3e
>026d68	0e e6 06 22 08 00 04 45 48 43 51 00 00 00 16 00
>026d78	53 02 af ed 07 e0 06 22 0a 00 07 45 20 20 20 54
>026d88	4b 55 00 00 16 00 54 02 1a 3e 58 e5 06 22 0a 00
>026d98	06 50 53 56 4d 51 52 00 00 00 16 00 55 02 1a 3e
>026da8	e0 e5 06 22 0a 00 06 54 4b 20 4f 4c 5a 00 00 00
>026db8	12 00 56 02 78 e5 06 22 08 00 04 44 4e 4c 51 00
>026dc8	00 00 1e 00 57 02 1a 3e 12 ee 13 e9 15 e0 06 22
>026dd8	0e 00 0a 5a 55 45 48 48 4c 4d 20 52 53 00 00 00
>026de8	18 00 58 02 1a 3e 03 ee 04 e0 06 22 0a 00 06 42
>026df8	44 45 41 46 4b 00 00 00 0e 00 59 02 1b 3e dc c5
>026e08	06 22 96 aa 00 00 16 00 5a 02 1b 3e 06 cd 5e cd
>026e18	0b c0 06 22 0b 24 02 10 ba ab 00 00 12 00 5b 02
>026e28	1b 3e a5 c5 06 22 0b 24 02 10 77 9d 00 00 12 00
>026e38	5c 02 1b 3e dc cd 4a c0 06 22 02 10 3d ba 00 00
>026e48	10 00 5d 02 1b 3e 4d c5 06 22 04 10 f6 4c 00 00
>026e58	12 00 5e 02 1b 3e 59 ce 13 c4 06 22 02 10 bf 89
>026e68	00 00 14 00 5f 02 1b 3e fc cc 0a c0 06 22 0b 24
>026e78	02 10 26 62 00 00 14 00 60 02 1b 3e 6d ce 63 c0
>026e88	06 22 0b 24 05 10 76 5d 00 00 12 00 61 02 1b 3e
>026e98	d6 cc 1a c0 06 22 02 10 f5 64 00 00 16 00 62 02
>026ea8	1b 3e a7 cd ec ca 24 c0 06 22 0b 24 05 10 42 73
>026eb8	00 00 14 00 63 02 1b 3e 31 cd 0e c6 06 22 0b 24
>026ec8	05 10 21 68 00 00 12 00 64 02 1b 3e 5f cd fc c0
>026ed8	06 22 0b 24 8a 40 00 00 12 00 65 02 1b 3e c2 cc
>026ee8	12 c0 06 22 01 10 62 4d 00 00 14 00 66 02 1b 3e
>026ef8	6b ce 13 c0 06 22 0b 24 03 10 9d a3 00 00 10 00
>026f08	67 02 1b 3e db c5 06 22 05 10 35 62 00 00 12 00
>026f18	68 02 1b 3e 07 c0 06 22 0b 24 05 10 48 6c 00 00
>026f28	14 00 69 02 1b 3e 7c cd e5 c1 06 22 0b 24 05 10
>026f38	4e b9 00 00 10 00 6a 02 1b 3e 08 c0 06 22 04 10
>026f48	d9 59 00 00 10 00 6b 02 1b 3e 03 c0 06 22 0b 24
>026f58	9e b5 00 00 12 00 6c 02 1b 3e ee cc 93 c4 06 22
>026f68	05 10 31 46 00 00 0e 00 6d 02 1b 3e 16 c0 06 22
>026f78	a0 40 00 00 14 00 6e 02 1b 3e de cd 0d c0 06 22
>026f88	0b 24 02 10 e5 99 00 00 10 00 6f 02 1b 3e 00 c5
>026f98	06 22 04 10 0b 43 00 00 12 00 70 02 1b 3e 81 c5
>026fa8	06 22 0b 24 04 10 58 69 00 00 12 00 71 02 1b 3e
>026fb8	e1 cd 90 ca 1b c0 06 22 30 87 00 00 10 00 72 02
>026fc8	1b 3e 13 c0 06 22 01 10 11 8b 00 00 10 00 73 02
>026fd8	1b 3e 17 c0 06 22 0b 24 32 40 00 00 12 00 74 02
>026fe8	1b 3e 12 c0 06 22 0b 24 03 10 93 ad 00 00 16 00
>026ff8	75 02 1b 3e b3 cd 12 ce 22 c0 06 22 0b 24 02 10
>027008	a3 7c 00 00 12 00 76 02 1b 3e 4e cd 23 c0 06 22
>027018	0b 24 88 40 00 00 10 00 77 02 1b 3e b5 cd 4c c1
>027028	06 22 8f 40 00 00 14 00 78 02 1b 3e 67 ce 77 c8
>027038	1c c0 06 22 0b 24 64 5d 00 00 12 00 79 02 1b 3e
>027048	f0 cc 0a c0 06 22 03 10 ca a9 00 00 12 00 7a 02
>027058	1b 3e ab c5 06 22 0b 24 03 10 1d 44 00 00 10 00
>027068	7b 02 1b 3e 57 ce 9c c1 06 22 1b 40 00 00 16 00
>027078	7c 02 1b 3e 2d ce 09 ce 02 c0 06 22 0b 24 03 10
>027088	94 8f 00 00 10 00 7d 02 1b 3e d4 cd 09 c0 06 22
>027098	ac 40 00 00 10 00 7e 02 1b 3e c7 cc 16 c0 06 22
>0270a8	a8 40 00 00 14 00 7f 02 1b 3e a4 cd 07 c0 06 22
>0270b8	0b 24 05 10 3d a1 00 00 12 00 80 02 1b 3e 05 ce
>0270c8	8f c5 06 22 03 10 03 4d 00 00 14 00 81 02 1b 3e
>0270d8	b8 cd ec c8 0b c0 06 22 03 10 dc a3 00 00 12 00
>0270e8	82 02 1b 3e f4 cc 57 c5 06 22 0b 24 bf 40 00 00
>0270f8	14 00 83 02 1b 3e 60 cd 5f ce 09 c0 06 22 04 10
>027108	c2 b6 00 00 14 00 84 02 1b 3e 3e ce 0a c0 06 22
>027118	0b 24 01 10 9f 54 00 00 12 00 85 02 1b 3e cc c4
>027128	06 22 0b 24 04 10 57 a6 00 00 16 00 86 02 1b 3e
>027138	8b cd e5 ca 22 c0 06 22 0b 24 03 10 cb 57 00 00
>027148	12 00 87 02 1b 3e 3b ce 87 c3 06 22 01 10 ae bf
>027158	00 00 0e 00 88 02 1b 3e 0d c0 06 22 4a 73 00 00
>027168	0e 00 89 02 1b 3e 60 c5 06 22 1e 40 00 00 12 00
>027178	8a 02 1b 3e c0 cc 0f c0 06 22 01 10 0b 48 00 00
>027188	14 00 8b 02 1b 3e 0f ce b6 c3 06 22 0b 24 05 10
>027198	a8 ba 00 00 12 00 8c 02 1b 3e 19 c0 06 22 0b 24
>0271a8	03 10 60 a8 00 00 10 00 8d 02 1b 3e 83 c5 06 22
>0271b8	02 10 c2 64 00 00 10 00 8e 02 1b 3e f9 cc d1 c4
>0271c8	06 22 49 4c 00 00 12 00 8f 02 1b 3e f4 cc 9d c1
>0271d8	06 22 03 10 a7 9f 00 00 10 00 90 02 1b 3e b4 cd
>0271e8	d9 c5 06 22 60 4b 00 00 0e 00 91 02 1b 3e 0a c0
>0271f8	06 22 7d 40 00 00 12 00 92 02 1b 3e e6 cd 09 c0
>027208	06 22 05 10 96 52 00 00 12 00 93 02 1b 3e 87 cd
>027218	d5 c0 06 22 04 10 1e 7e 00 00 10 00 94 02 1b 3e
>027228	f5 c4 06 22 0b 24 45 8b 00 00 10 00 95 02 1b 3e
>027238	1a c0 06 22 03 10 cc 6b 00 00 10 00 96 02 1b 3e
>027248	69 c6 06 22 02 10 cd 57 00 00 16 00 97 02 1b 3e
>027258	aa cd fb cb 0f c0 06 22 0b 24 02 10 e0 5d 00 00
>027268	12 00 98 02 1b 3e ff cd 05 c0 06 22 04 10 47 79
>027278	00 00 10 00 99 02 1b 3e 6c c6 06 22 05 10 21 6c
>027288	00 00 14 00 9a 02 1b 3e 31 ce 15 c0 06 22 0b 24
>027298	05 10 85 8e 00 00 12 00 9b 02 1b 3e 0e ce 31 c6
>0272a8	06 22 05 10 75 85 00 00 14 00 9c 02 1b 3e 27 cd
>0272b8	1c c0 06 22 0b 24 03 10 0a 8e 00 00 12 00 9d 02
>0272c8	1b 3e 00 c6 06 22 0b 24 04 10 88 ba 00 00 14 00
>0272d8	9e 02 1b 3e fe cd 63 c6 06 22 0b 24 04 10 ca be
>0272e8	00 00 10 00 9f 02 1b 3e 18 c0 06 22 03 10 49 44
>0272f8	00 00 12 00 a0 02 1b 3e 28 ce 23 c0 06 22 0b 24
>027308	9a 40 00 00 10 00 a1 02 1b 3e 8d cd 01 c0 06 22
>027318	21 40 00 00 10 00 a2 02 1b 3e d7 c4 06 22 06 10
>027328	37 48 00 00 12 00 a3 02 1b 3e 04 cd 02 c0 06 22
>027338	03 10 7c 98 00 00 12 00 a4 02 1b 3e d6 cc 12 c0
>027348	06 22 0b 24 94 40 00 00 12 00 a5 02 1b 3e c5 cc
>027358	06 c0 06 22 04 10 2e 83 00 00 16 00 a6 02 1b 3e
>027368	f3 cc 77 ce 17 c0 06 22 0b 24 04 10 df 83 00 00
>027378	12 00 a7 02 1b 3e b3 cd a7 c3 06 22 05 10 a3 b2
>027388	00 00 14 00 a8 02 1b 3e 04 cd 1a c0 06 22 0b 24
>027398	04 10 9b 5f 00 00 10 00 a9 02 1b 3e 02 c0 06 22
>0273a8	04 10 8c 85 00 00 14 00 aa 02 1b 3e 03 ce a2 cd
>0273b8	1f c0 06 22 04 10 10 b4 00 00 10 00 ab 02 1b 3e
>0273c8	5b c5 06 22 01 10 ea 4b 00 00 10 00 ac 02 1b 3e
>0273d8	04 c0 06 22 03 10 e3 b4 00 00 0e 00 ad 02 1b 3e
>0273e8	10 c0 06 22 b4 a2 00 00 12 00 ae 02 1b 3e 09 ce
>0273f8	f1 c3 06 22 0b 24 48 40 00 00 12 00 af 02 1b 3e
>027408	34 ce 23 c0 06 22 0b 24 20 40 00 00 10 00 b0 02
>027418	1b 3e fc c5 06 22 0b 24 44 40 00 00 12 00 b1 02
>027428	1b 3e ff cc 02 c0 06 22 01 10 32 8d 00 00 12 00
>027438	b2 02 1b 3e c8 cc 88 c5 06 22 03 10 be 7a 00 00
>027448	14 00 b3 02 1b 3e d6 cc f1 cd 06 c0 06 22 03 10
>027458	7a 69 00 00 12 00 b4 02 1b 3e 09 c0 06 22 0b 24
>027468	01 10 4f 48 00 00 10 00 b5 02 1b 3e 06 c0 06 22
>027478	0b 24 54 7d 00 00 12 00 b6 02 1b 3e 11 ce 0d c0
>027488	06 22 02 10 fa 45 00 00 14 00 b7 02 1b 3e cd cc
>027498	06 c0 06 22 0b 24 05 10 ee 4c 00 00 10 00 b8 02
>0274a8	1b 3e 14 c0 06 22 02 10 e2 52 00 00 14 00 b9 02
>0274b8	1b 3e 12 ce c4 c4 06 22 0b 24 01 10 31 6a 00 00
>0274c8	12 00 ba 02 1b 3e d3 cd 82 c1 06 22 03 10 24 83
>0274d8	00 00 0e 00 bb 02 1b 3e 24 c5 06 22 17 92 00 00
>0274e8	12 00 bc 02 1b 3e d1 cd 49 c1 06 22 0b 24 17 40
>0274f8	00 00 10 00 bd 02 1b 3e 12 c6 06 22 03 10 1d 5a
>027508	00 00 12 00 be 02 1b 3e 40 ce 36 cd 01 c0 06 22
>027518	bb bf 00 00 14 00 bf 02 1b 3e 82 cd a8 c9 1e c0
>027528	06 22 0b 24 07 40 00 00 16 00 c0 02 1b 3e 31 cd
>027538	20 c9 04 c0 06 22 0b 24 05 10 98 64 00 00 10 00
>027548	c1 02 1b 3e 6e c6 06 22 02 10 d3 a6 00 00 12 00
>027558	c2 02 1b 3e fd cc 7a c1 06 22 01 10 76 b9 00 00
>027568	14 00 c3 02 1b 3e 29 cd fd cb 15 c0 06 22 0b 24
>027578	11 40 00 00 12 00 c4 02 1b 3e d4 c4 06 22 0b 24
>027588	03 10 ad 53 00 00 14 00 c5 02 1b 3e 83 cd a5 c0
>027598	06 22 0b 24 01 10 a0 5d 00 00 10 00 c6 02 1b 3e
>0275a8	c7 c4 06 22 0b 24 97 40 00 00 14 00 c7 02 1b 3e
>0275b8	5f cd 56 ce 0f c0 06 22 01 10 87 77 00 00 10 00
>0275c8	c8 02 1b 3e 05 c0 06 22 02 10 1a 99 00 00 10 00
>0275d8	c9 02 1b 3e 20 c5 06 22 0b 24 97 40 00 00 14 00
>0275e8	ca 02 1b 3e d8 cd 7e cc 11 c0 06 22 04 10 02 78
>0275f8	00 00 12 00 cb 02 1b 3e a3 cd 1d c3 06 22 02 10
>027608	dd 50 00 00 10 00 cc 02 1b 3e cf c5 06 22 04 10
>027618	54 7c 00 00 12 00 cd 02 1b 3e 79 c5 06 22 0b 24
>027628	05 10 1b 61 00 00 10 00 ce 02 1b 3e 05 cd 15 c0
>027638	06 22 89 40 00 00 14 00 cf 02 1b 3e 34 ce d7 cd
>027648	19 c0 06 22 01 10 c1 6d 00 00 12 00 d0 02 1b 3e
>027658	31 ce 1f c0 06 22 0b 24 21 41 00 00 16 00 d1 02
>027668	1b 3e 09 ce ce c9 1d c0 06 22 0b 24 01 10 0f 7a
>027678	00 00 0e 00 d2 02 1b 3e 22 c5 06 22 6a 40 00 00
>027688	12 00 d3 02 1b 3e e4 c5 06 22 0b 24 02 10 fc b9
>027698	00 00 14 00 d4 02 1b 3e 7b cd 0b c2 06 22 0b 24
>0276a8	04 10 16 94 00 00 14 00 d5 02 1b 3e 87 cd 9f c8
>0276b8	03 c0 06 22 0b 24 b6 40 00 00 14 00 d6 02 1b 3e
>0276c8	4e cd 1b c0 06 22 0b 24 01 10 21 63 00 00 12 00
>0276d8	d7 02 1b 3e 2b cd e9 ca 09 c0 06 22 be 40 00 00
>0276e8	12 00 d8 02 1b 3e a4 c5 06 22 0b 24 04 10 7e 93
>0276f8	00 00 10 00 d9 02 1b 3e 0c c0 06 22 01 10 58 96
>027708	00 00 10 00 da 02 1b 3e 86 c5 06 22 04 10 c3 b3
>027718	00 00 12 00 db 02 1b 3e 68 ce e0 c3 06 22 03 10
>027728	b9 4e 00 00 10 00 dc 02 1b 3e 15 c0 06 22 03 10
>027738	60 5a 00 00 16 00 dd 02 1b 3e 04 cd 9d c9 1e c0
>027748	06 22 0b 24 02 10 21 5a 00 00 10 00 de 02 1b 3e
>027758	b6 cd 12 c0 06 22 37 40 00 00 12 00 df 02 1b 3e
>027768	af cd 16 c4 06 22 04 10 18 60 00 00 14 00 e0 02
>027778	1b 3e 83 cd 1d c0 06 22 0b 24 03 10 dc a0 00 00
>027788	10 00 e1 02 1b 3e 40 ce 1d c5 06 22 6d b2 00 00
>027798	14 00 e2 02 1b 3e 28 cd c5 c9 20 c0 06 22 0b 24
>0277a8	96 a9 00 00 16 00 e3 02 1b 3e 7c cd a3 c9 02 c0
>0277b8	06 22 0b 24 05 10 c0 7c 00 00 10 00 e4 02 1b 3e
>0277c8	28 ce 1c c0 06 22 13 b1 00 00 10 00 e5 02 1b 3e
>0277d8	c9 c4 06 22 0b 24 57 40 00 00 0e 00 e6 02 1b 3e
>0277e8	75 c5 06 22 16 40 00 00 14 00 e7 02 1b 3e 35 ce
>0277f8	06 c0 06 22 0b 24 02 10 77 bf 00 00 14 00 e8 02
>027808	1b 3e 10 ce 17 c0 06 22 0b 24 01 10 6f 51 00 00
>027818	14 00 e9 02 1b 3e 05 cd fa c4 06 22 0b 24 05 10
>027828	1b bd 00 00 10 00 ea 02 1b 3e 85 c5 06 22 05 10
>027838	d7 aa 00 00 12 00 eb 02 1b 3e 0f c6 06 22 0b 24
>027848	05 10 36 4c 00 00 10 00 ec 02 1b 3e e1 cd 18 c0
>027858	06 22 85 40 00 00 10 00 ed 02 1b 3e a5 cd a7 c2
>027868	06 22 68 40 00 00 10 00 ee 02 1b 3e f6 cc 05 c0
>027878	06 22 2b 40 00 00 12 00 ef 02 1b 3e 5c cd 1c cd
>027888	08 c0 06 22 98 8e 00 00 14 00 f0 02 1b 3e f8 cc
>027898	68 ce 01 c0 06 22 04 10 e4 6e 00 00 16 00 f1 02
>0278a8	1b 3e dc cd 55 c9 0b c0 06 22 0b 24 05 10 d4 b9
>0278b8	00 00 16 00 f2 02 1b 3e 4d cd 3f ce 07 c0 06 22
>0278c8	0b 24 05 10 08 71 00 00 10 00 f3 02 1b 3e 31 c5
>0278d8	06 22 02 10 b3 4d 00 00 12 00 f4 02 1b 3e 33 ce
>0278e8	10 c0 06 22 0b 24 c3 40 00 00 10 00 f5 02 1b 3e
>0278f8	41 ce ff c2 06 22 85 40 00 00 12 00 f6 02 1b 3e
>027908	02 c6 06 22 0b 24 02 10 46 5b 00 00 10 00 f7 02
>027918	1b 3e 0e c0 06 22 05 10 f7 5a 00 00 12 00 f8 02
>027928	1b 3e 33 ce d1 c3 06 22 02 10 ee 72 00 00 10 00
>027938	f9 02 1b 3e b3 cd 46 c6 06 22 a2 40 00 00 0e 00
>027948	fa 02 1b 3e 01 c5 06 22 17 a4 00 00 14 00 fb 02
>027958	1b 3e e1 cd 7f ca 18 c0 06 22 0b 24 65 40 00 00
>027968	12 00 fc 02 1b 3e 66 ce 10 c0 06 22 0b 24 76 40
>027978	00 00 10 00 fd 02 1b 3e f9 cc 47 c6 06 22 ef 61
>027988	00 00 16 00 fe 02 1b 3e 5a ce 57 c9 06 c0 06 22
>027998	0b 24 02 10 77 55 00 00 14 00 ff 02 1b 3e d0 cc
>0279a8	0d c0 06 22 0b 24 02 10 83 7c 00 00 12 00 00 03
>0279b8	1b 3e 88 cd 1a c0 06 22 05 10 72 ad 00 00 12 00
>0279c8	01 03 1b 3e 87 cd 0a c0 06 22 04 10 46 b3 00 00
>0279d8	12 00 02 03 1b 3e e3 cd 0a c0 06 22 06 10 ef 4c
>0279e8	00 00 16 00 03 03 1b 3e 53 cd fb cc 0b c0 06 22
>0279f8	0b 24 01 10 de 84 00 00 10 00 04 03 1b 3e fd cd
>027a08	39 c2 06 22 0a 81 00 00 10 00 05 03 1b 3e 32 ce
>027a18	02 c3 06 22 7f 40 00 00 14 00 06 03 1b 3e ca cc
>027a28	c8 c9 02 c0 06 22 02 10 76 41 00 00 10 00 07 03
>027a38	1b 3e fb cc 15 c0 06 22 31 40 00 00 10 00 08 03
>027a48	1b 3e aa c5 06 22 01 10 dc b0 00 00 14 00 09 03
>027a58	1b 3e 00 ce 69 cb 17 c0 06 22 0b 24 c7 40 00 00
>027a68	12 00 0a 03 1b 3e e5 cd a5 c0 06 22 04 10 c1 87
>027a78	00 00 16 00 0b 03 1b 3e 58 cd 16 ce 11 c0 06 22
>027a88	0b 24 04 10 f7 76 00 00 14 00 0c 03 1b 3e af cd
>027a98	5e c5 06 22 0b 24 02 10 93 99 00 00 12 00 0d 03
>027aa8	1b 3e 29 ce 15 c0 06 22 0b 24 71 78 00 00 12 00
>027ab8	0e 03 1b 3e ce c4 06 22 0b 24 01 10 52 b7 00 00
>027ac8	10 00 0f 03 1b 3e 04 ce c0 c5 06 22 66 40 00 00
>027ad8	12 00 10 03 1b 3e cf cd f5 c0 06 22 01 10 4e 5c
>027ae8	00 00 12 00 11 03 1b 3e 24 cd 02 c0 06 22 0b 24
>027af8	21 40 00 00 12 00 12 03 1b 3e 0b ce 02 c0 06 22
>027b08	03 10 b6 53 00 00 12 00 13 03 1b 3e f5 cc de c5
>027b18	06 22 01 10 2d 41 00 00 12 00 14 03 1b 3e 61 ce
>027b28	81 c9 08 c0 06 22 9f 40 00 00 16 00 15 03 1b 3e
>027b38	3c ce 34 c8 16 c0 06 22 0b 24 01 10 34 aa 00 00
>027b48	16 00 16 03 1b 3e d8 cd a8 cb 0c c0 06 22 0b 24
>027b58	03 10 74 b6 00 00 12 00 17 03 1b 3e c4 cc 1b c5
>027b68	06 22 05 10 62 42 00 00 14 00 18 03 1b 3e 10 ce
>027b78	0b c0 06 22 0b 24 01 10 90 a9 00 00 14 00 19 03
>027b88	1b 3e 32 cd 20 c0 06 22 0b 24 04 10 b5 41 00 00
>027b98	12 00 1a 03 1b 3e 5c c6 06 22 0b 24 04 10 44 57
>027ba8	00 00 14 00 1b 03 1b 3e d4 cd 1d c0 06 22 0b 24
>027bb8	05 10 41 6a 00 00 12 00 1c 03 1b 3e 4d cd e5 c3
>027bc8	06 22 02 10 0f 91 00 00 12 00 1d 03 1b 3e 03 ce
>027bd8	ea c3 06 22 0b 24 3c 40 00 00 14 00 1e 03 1b 3e
>027be8	81 cd 89 c9 09 c0 06 22 0b 24 3c 7a 00 00 14 00
>027bf8	1f 03 1b 3e 08 ce 18 c0 06 22 0b 24 04 10 7a 8b
>027c08	00 00 16 00 20 03 1b 3e d7 cc 50 c9 12 c0 06 22
>027c18	0b 24 01 10 ad 42 00 00 12 00 21 03 1b 3e 0b c6
>027c28	06 22 0b 24 02 10 23 ae 00 00 14 00 22 03 1b 3e
>027c38	d2 cd e5 c8 10 c0 06 22 03 10 97 9e 00 00 16 00
>027c48	23 03 1b 3e 8b cd e5 ca 08 c0 06 22 0b 24 03 10
>027c58	e9 84 00 00 14 00 24 03 1b 3e 5b cd 7d cc 08 c0
>027c68	06 22 02 10 6a a6 00 00 12 00 25 03 1b 3e fb cc
>027c78	06 c0 06 22 02 10 d6 49 00 00 10 00 26 03 1b 3e
>027c88	b1 c5 06 22 03 10 4c 5a 00 00 12 00 27 03 1b 3e
>027c98	3a ce 16 c0 06 22 0b 24 45 40 00 00 12 00 28 03
>027ca8	1b 3e 1e c5 06 22 0b 24 02 10 c4 7b 00 00 12 00
>027cb8	29 03 1b 3e 3e ce 24 c0 06 22 03 10 9c 60 00 00
>027cc8	16 00 2a 03 1b 3e 37 ce 81 c9 18 c0 06 22 0b 24
>027cd8	02 10 dc 80 00 00 12 00 2b 03 1b 3e 5a ce 02 c0
>027ce8	06 22 03 10 8a a8 00 00 16 00 2c 03 1b 3e 65 ce
>027cf8	f1 cb 09 c0 06 22 0b 24 01 10 1c 51 00 00 12 00
>027d08	2d 03 1b 3e 11 c6 06 22 0b 24 02 10 b5 54 00 00
>027d18	10 00 2e 03 1b 3e b5 cd cd c4 06 22 c0 40 00 00
>027d28	10 00 2f 03 1b 3e ca c4 06 22 0b 24 75 40 00 00
>027d38	12 00 30 03 1b 3e 3d ce b2 c9 14 c0 06 22 25 40
>027d48	00 00 12 00 31 03 1b 3e 1a cd 20 c0 06 22 0b 24
>027d58	b1 bc 00 00 10 00 32 03 1b 3e ce cc 10 c0 06 22
>027d68	93 40 00 00 12 00 33 03 1b 3e 37 ce 1a c0 06 22
>027d78	0b 24 41 40 00 00 12 00 34 03 1b 3e 2d cd 88 ca
>027d88	07 c0 06 22 2d 40 00 00 14 00 35 03 1b 3e fe cd
>027d98	53 c5 06 22 0b 24 02 10 88 4e 00 00 10 00 36 03
>027da8	1b 3e fc cc 49 c5 06 22 72 40 00 00 12 00 37 03
>027db8	1b 3e e1 cd 13 c4 06 22 04 10 c8 4f 00 00 10 00
>027dc8	38 03 1b 3e f0 cc 0d c0 06 22 bb 40 00 00 10 00
>027dd8	39 03 1b 3e 01 c6 06 22 0b 24 b9 ba 00 00 0e 00
>027de8	3a 03 1b 3e 05 c5 06 22 a4 40 00 00 14 00 3b 03
>027df8	1b 3e 00 cd a8 c9 12 c0 06 22 0b 24 9a 40 00 00
>027e08	14 00 3c 03 1b 3e 75 cd da cd 13 c0 06 22 0b 24
>027e18	a1 bd 00 00 12 00 3d 03 1b 3e 0f ce 02 c0 06 22
>027e28	05 10 9a 66 00 00 12 00 3e 03 1b 3e 4f cd 05 c0
>027e38	06 22 04 10 ee 4f 00 00 10 00 3f 03 1b 3e ab cd
>027e48	04 c0 06 22 7c 40 00 00 12 00 40 03 1b 3e f7 cc
>027e58	aa c0 06 22 03 10 33 a5 00 00 14 00 41 03 1b 3e
>027e68	61 ce b3 ca 0e c0 06 22 05 10 20 83 00 00 14 00
>027e78	42 03 1b 3e b6 cd a4 cd 12 c0 06 22 0b 24 42 40
>027e88	00 00 12 00 43 03 1b 3e b0 cd 13 c4 06 22 04 10
>027e98	8b 43 00 00 0e 00 44 03 1b 3e 25 c5 06 22 69 40
>027ea8	00 00 12 00 45 03 1b 3e 47 cd c4 c2 06 22 01 10
>027eb8	70 5a 00 00 10 00 46 03 1b 3e 01 cd 0b c0 06 22
>027ec8	ac 71 00 00 10 00 47 03 1b 3e 32 ce 1a c1 06 22
>027ed8	64 40 00 00 12 00 48 03 1b 3e 26 cd e4 cb 13 c0
>027ee8	06 22 06 40 00 00 12 00 49 03 1b 3e c8 cc 02 c0
>027ef8	06 22 0b 24 42 40 00 00 10 00 4a 03 1b 3e 1b c5
>027f08	06 22 06 10 3e 49 00 00 14 00 4b 03 1b 3e 7c cd
>027f18	0d c0 06 22 0b 24 05 10 3d 7f 00 00 16 00 4c 03
>027f28	1b 3e 00 cd 59 ca 1d c0 06 22 0b 24 02 10 1f a5
>027f38	00 00 14 00 4d 03 1b 3e 2c ce 41 cc 16 c0 06 22
>027f48	03 10 57 59 00 00 12 00 4e 03 1b 3e a9 cd 1c c0
>027f58	06 22 05 10 ed 43 00 00 10 00 4f 03 1b 3e 21 c5
>027f68	06 22 0b 24 27 40 00 00 12 00 50 03 1b 3e 0d ce
>027f78	09 c0 06 22 04 10 10 69 00 00 12 00 51 03 1b 3e
>027f88	35 c6 06 22 0b 24 01 10 1c 74 00 00 10 00 52 03
>027f98	1b 3e 04 cd 10 c0 06 22 10 9e 00 00 16 00 53 03
>027fa8	1b 3e 37 ce e0 cc 20 c0 06 22 0b 24 03 10 82 b6
>027fb8	00 00 10 00 54 03 1b 3e b8 c5 06 22 04 10 2a 85
>027fc8	00 00 16 00 55 03 1b 3e b0 cd e8 cb 19 c0 06 22
>027fd8	0b 24 04 10 e1 9b 00 00 10 00 56 03 1b 3e ae c5
>027fe8	06 22 03 10 1c 6c 00 00 14 00 57 03 1b 3e 04 ce
>027ff8	00 c4 06 22 0b 24 04 10 51 5f 00 00 10 00 58 03
>028008	1b 3e 5c cd 14 c0 06 22 2a 40 00 00 12 00 59 03
>028018	1b 3e fb c4 06 22 0b 24 03 10 29 bc 00 00 12 00
>028028	5a 03 1b 3e 1b cd 0e c0 06 22 0b 24 31 40 00 00
>028038	10 00 5b 03 1b 3e 7d c5 06 22 04 10 eb ae 00 00
>028048	10 00 5c 03 1b 3e 23 c5 06 22 0b 24 a6 91 00 00
>028058	10 00 5d 03 1b 3e ae cd 04 c3 06 22 31 40 00 00
>028068	14 00 5e 03 1b 3e 5b cd 76 ce 15 c0 06 22 04 10
>028078	c9 7d 00 00 10 00 5f 03 1b 3e 56 cd 0c c0 06 22
>028088	27 40 00 00 14 00 60 03 1b 3e 28 cd a1 c4 06 22
>028098	0b 24 02 10 e6 70 00 00 10 00 61 03 1b 3e f3 cc
>0280a8	01 c5 06 22 4e 40 00 00 10 00 62 03 1b 3e 33 ce
>0280b8	10 c4 06 22 2a 40 00 00 10 00 63 03 1b 3e 2c c6
>0280c8	06 22 04 10 54 ae 00 00 12 00 64 03 1b 3e d2 cd
>0280d8	11 c0 06 22 02 10 30 ac 00 00 10 00 65 03 1b 3e
>0280e8	e1 c5 06 22 05 10 a5 8b 00 00 0e 00 66 03 1b 3e
>0280f8	39 c6 06 22 21 40 00 00 10 00 67 03 1b 3e fd c5
>028108	06 22 06 10 43 42 00 00 12 00 68 03 1b 3e d8 cc
>028118	f3 c0 06 22 0b 24 aa 40 00 00 10 00 69 03 1b 3e
>028128	30 ce 11 c0 06 22 b9 63 00 00 10 00 6a 03 1b 3e
>028138	63 ce 1e c0 06 22 ba 40 00 00 10 00 6b 03 1b 3e
>028148	f2 cc 04 c0 06 22 64 68 00 00 10 00 6c 03 1b 3e
>028158	30 ce 1e c0 06 22 b1 40 00 00 10 00 6d 03 1b 3e
>028168	b9 cd 18 c0 06 22 8c 40 00 00 14 00 6e 03 1b 3e
>028178	1a cd 4d cc 0d c0 06 22 01 10 5e 40 00 00 16 00
>028188	6f 03 1b 3e 87 cd a7 cd 16 c0 06 22 0b 24 01 10
>028198	9e 4d 00 00 14 00 70 03 1b 3e b5 cd 14 c0 06 22
>0281a8	0b 24 03 10 ce a9 00 00 10 00 71 03 1b 3e 55 cd
>0281b8	15 c0 06 22 04 40 00 00 10 00 72 03 1b 3e a3 c5
>0281c8	06 22 0b 24 10 40 00 00 12 00 73 03 1b 3e ab cd
>0281d8	08 c0 06 22 02 10 87 69 00 00 14 00 74 03 1b 3e
>0281e8	a5 cd e0 c1 06 22 0b 24 06 10 6c 4c 00 00 12 00
>0281f8	75 03 1b 3e fd cc 39 cb 0b c0 06 22 6e 78 00 00
>028208	14 00 76 03 1b 3e 8c cd 72 c0 06 22 0b 24 05 10
>028218	b5 81 00 00 16 00 77 03 1b 3e 58 cd 3e cc 15 c0
>028228	06 22 0b 24 02 10 eb 6c 00 00 0e 00 78 03 1b 3e
>028238	f8 c4 06 22 c2 96 00 00 14 00 79 03 1b 3e ae cd
>028248	e5 c8 1e c0 06 22 0b 24 22 b3 00 00 14 00 7a 03
>028258	1b 3e 7a cd 0f c0 06 22 0b 24 01 10 d0 94 00 00
>028268	16 00 7b 03 1b 3e fe cc 9b c9 22 c0 06 22 0b 24
>028278	01 10 ca 80 00 00 12 00 7c 03 1b 3e 4e c5 06 22
>028288	0b 24 03 10 38 76 00 00 14 00 7d 03 1b 3e 2c cd
>028298	c7 c9 0d c0 06 22 03 10 bb 49 00 00 14 00 7e 03
>0282a8	1b 3e 5c ce 83 c1 06 22 0b 24 01 10 18 a2 00 00
>0282b8	16 00 7f 03 1b 3e d5 cd a1 c9 09 c0 06 22 0b 24
>0282c8	01 10 35 b9 00 00 12 00 80 03 1b 3e ff c5 06 22
>0282d8	0b 24 03 10 bc bb 00 00 12 00 81 03 1b 3e dd cd
>0282e8	4e c5 06 22 01 10 3e 85 00 00 12 00 82 03 1b 3e
>0282f8	20 cd a7 cb 10 c0 06 22 24 40 00 00 14 00 83 03
>028308	1b 3e d4 cd 35 ca 09 c0 06 22 03 10 bf 7a 00 00
>028318	12 00 84 03 1b 3e 04 c6 06 22 0b 24 03 10 8b 57
>028328	00 00 10 00 85 03 1b 3e 3d e6 06 22 04 00 00 00
>028338	00 00 12 00 86 03 1b 3e 4d ed 0c e0 06 22 04 00
>028348	01 45 00 00 1a 00 87 03 1b 3e df ed 95 e2 06 22
>028358	0c 00 09 58 4a 4d 56 42 59 20 20 5a 00 00 18 00
>028368	88 03 1b 3e fe e5 06 22 0c 00 09 56 4b 4c 4e 20
>028378	44 20 4a 49 00 00 16 00 89 03 1b 3e 62 ee 4c e2
>028388	06 22 08 00 04 53 48 45 50 00 00 00 12 00 8a 03
>028398	1b 3e 33 ee 32 e2 06 22 04 00 01 58 00 00 1c 00
>0283a8	8b 03 1b 3e 79 ed 02 e0 06 22 0e 00 0b 54 56 4b
>0283b8	45 42 20 20 54 41 45 46 00 00 12 00 8c 03 1b 3e
>0283c8	ed ec 19 e0 06 22 04 00 00 00 00 00 1c 00 8d 03
>0283d8	1b 3e f9 ec 99 eb 09 e0 06 22 0c 00 09 4d 4a 50
>0283e8	46 49 57 56 52 50 00 00 10 00 8e 03 1b 3e d3 e5
>0283f8	06 22 04 00 00 00 00 00 16 00 8f 03 1b 3e c5 ec
>028408	b8 e0 06 22 08 00 05 59 4a 20 4f 51 00 00 1a 00
>028418	90 03 1b 3e 0a ee 15 e0 06 22 0c 00 09 47 42 58
>028428	47 52 42 46 5a 45 00 00 12 00 91 03 1b 3e e5 ed
>028438	09 e2 06 22 04 00 01 4b 00 00 1c 00 92 03 1b 3e
>028448	88 ed d6 ea 0f e0 06 22 0c 00 08 4a 20 48 48 49
>028458	50 57 47 00 00 00 12 00 93 03 1b 3e 31 ed 20 e0
>028468	06 22 04 00 01 45 00 00 14 00 94 03 1b 3e 0c e6
>028478	06 22 08 00 05 59 56 20 49 49 00 00 18 00 95 03
>028488	1b 3e 02 e0 06 22 0c 00 09 56 56 42 49 4e 54 4f
>028498	49 53 00 00 1a 00 96 03 1b 3e b0 ed 33 ee 05 e0
>0284a8	06 22 0a 00 07 55 4f 4a 4b 46 20 44 00 00 12 00
>0284b8	97 03 1b 3e 4d e5 06 22 06 00 02 56 42 00 00 00
>0284c8	10 00 98 03 1b 3e 14 e0 06 22 04 00 00 00 00 00
>0284d8	16 00 99 03 1b 3e 3a ee 8a e8 17 e0 06 22 06 00
>0284e8	02 54 5a 00 00 00 12 00 9a 03 1b 3e 01 e0 06 22
>0284f8	06 00 02 56 4f 00 00 00 18 00 9b 03 1b 3e 04 e0
>028508	06 22 0c 00 08 4b 4e 4c 20 51 20 48 47 00 00 00
>028518	1c 00 9c 03 1b 3e c1 ec f8 e9 10 e0 06 22 0c 00
>028528	09 47 59 20 49 20 5a 45 47 43 00 00 18 00 9d 03
>028538	1b 3e 0f e0 06 22 0c 00 08 5a 4a 20 20 4a 48 42
>028548	55 00 00 00 12 00 9e 03 1b 3e f3 ec 76 e5 06 22
>028558	04 00 00 00 00 00 12 00 9f 03 1b 3e ee ec 72 e0
>028568	06 22 04 00 00 00 00 00 12 00 a0 03 1b 3e 02 ee
>028578	21 e4 06 22 04 00 00 00 00 00 18 00 a1 03 1b 3e
>028588	ce e5 06 22 0c 00 09 5a 4c 4d 53 55 50 48 43 4c
>028598	00 00 1a 00 a2 03 1b 3e 35 ee 07 e0 06 22 0c 00
>0285a8	08 4e 55 55 20 56 50 47 59 00 00 00 14 00 a3 03
>0285b8	1b 3e 5b e5 06 22 08 00 04 42 56 5a 5a 00 00 00
>0285c8	10 00 a4 03 1b 3e 18 e0 06 22 04 00 01 47 00 00
>0285d8	12 00 a5 03 1b 3e 12 e0 06 22 06 00 03 58 20 5a
>0285e8	00 00 18 00 a6 03 1b 3e 56 e6 06 22 0c 00 08 59
>0285f8	20 53 45 53 20 4b 52 00 00 00 12 00 a7 03 1b 3e
>028608	10 ee 5b e1 06 22 04 00 01 53 00 00 14 00 a8 03
>028618	1b 3e 09 e0 06 22 08 00 04 45 44 48 4d 00 00 00
>028628	14 00 a9 03 1b 3e 0d e0 06 22 08 00 04 49 4b 20
>028638	49 00 00 00 14 00 aa 03 1b 3e 1e ed 26 e9 1a e0
>028648	06 22 04 00 01 45 00 00 1c 00 ab 03 1b 3e 21 ed
>028658	07 e0 06 22 0e 00 0a 56 46 46 44 49 4e 4b 49 54
>028668	58 00 00 00 14 00 ac 03 1b 3e 25 ed 05 e0 06 22
>028678	06 00 03 51 4d 43 00 00 10 00 ad 03 1b 3e 13 e0
>028688	06 22 04 00 00 00 00 00 1a 00 ae 03 1b 3e a5 ed
>028698	b9 e2 06 22 0c 00 09 4d 4a 20 59 58 46 20 56 59
>0286a8	00 00 12 00 af 03 1b 3e da ed 20 e0 06 22 04 00
>0286b8	01 5a 00 00 12 00 b0 03 1b 3e ca e4 06 22 06 00
>0286c8	03 4f 55 4e 00 00 18 00 b1 03 1b 3e 2b e5 06 22
>0286d8	0c 00 08 55 47 56 41 47 51 48 42 00 00 00 18 00
>0286e8	b2 03 1b 3e fc ec 12 e0 06 22 0a 00 07 4f 42 51
>0286f8	46 45 52 46 00 00 1c 00 b3 03 1b 3e d9 ed 02 e0
>028708	06 22 0e 00 0a 58 5a 43 42 52 4b 4a 56 4f 58 00
>028718	00 00 16 00 b4 03 1b 3e 1a e0 06 22 0a 00 06 54
>028728	4d 20 46 52 46 00 00 00 1a 00 b5 03 1b 3e d7 ec
>028738	2e e0 06 22 0c 00 08 5a 58 43 42 41 46 42 50 00
>028748	00 00 16 00 b6 03 1b 3e 5a ed 8e e3 06 22 08 00
>028758	05 53 59 57 49 47 00 00 14 00 b7 03 1b 3e fd ed
>028768	5b ea 1a e0 06 22 04 00 01 43 00 00 10 00 b8 03
>028778	1b 3e d3 e4 06 22 04 00 01 56 00 00 1a 00 b9 03
>028788	1b 3e 05 e0 06 22 0e 00 0a 47 4e 4e 4d 4a 4e 20
>028798	20 42 51 00 00 00 12 00 ba 03 1b 3e aa ed c9 e1
>0287a8	06 22 04 00 00 00 00 00 1c 00 bb 03 1b 3e 03 ee
>0287b8	14 e0 06 22 0e 00 0b 55 46 57 58 20 20 49 54 50
>0287c8	51 4d 00 00 18 00 bc 03 1b 3e 53 ed 58 e4 06 22
>0287d8	0a 00 06 50 57 42 4e 55 45 00 00 00 14 00 bd 03
>0287e8	1b 3e 29 ee 9b e9 04 e0 06 22 04 00 00 00 00 00
>0287f8	18 00 be 03 1b 3e 06 e5 06 22 0c 00 08 52 4b 43
>028808	20 50 20 4d 4f 00 00 00 1a 00 bf 03 1b 3e d7 ed
>028818	d8 e9 16 e0 06 22 0a 00 07 49 52 20 47 4c 58 47
>028828	00 00 1a 00 c0 03 1b 3e 4c ed 11 e0 06 22 0c 00
>028838	08 42 20 4b 55 41 47 51 45 00 00 00 1a 00 c1 03
>028848	1b 3e fd ed 1c e0 06 22 0c 00 09 56 4f 47 55 4d
>028858	4e 50 56 59 00 00 16 00 c2 03 1b 3e 7e e5 06 22
>028868	0a 00 07 43 52 20 20 46 4e 59 00 00 12 00 c3 03
>028878	1b 3e 38 e6 06 22 06 00 02 51 57 00 00 00 1c 00
>028888	c4 03 1b 3e f7 ec 58 ea 10 e0 06 22 0c 00 08 59
>028898	4d 4e 4c 5a 51 57 4d 00 00 00 1a 00 c5 03 1b 3e
>0288a8	21 ed 1e ed 09 e0 06 22 0a 00 06 53 57 4c 55 44
>0288b8	44 00 00 00 14 00 c6 03 1b 3e cd ec 21 e0 06 22
>0288c8	06 00 03 49 45 47 00 00 1c 00 c7 03 1b 3e 6c ee
>0288d8	45 e3 06 22 0e 00 0a 42 58 20 59 20 59 52 20 50
>0288e8	4a 00 00 00 10 00 c8 03 1b 3e ac e5 06 22 04 00
>0288f8	00 00 00 00 12 00 c9 03 1b 3e dd ed 1f e0 06 22
>028908	04 00 01 57 00 00 16 00 ca 03 1b 3e 48 ed 7b ea
>028918	19 e0 06 22 06 00 03 44 51 44 00 00 18 00 cb 03
>028928	1b 3e 10 e0 06 22 0c 00 09 5a 4e 55 20 57 20 20
>028938	4e 4e 00 00 1c 00 cc 03 1b 3e 35 ee 50 e2 06 22
>028948	0e 00 0a 52 5a 5a 4f 53 46 44 57 20 45 00 00 00
>028958	1a 00 cd 03 1b 3e 25 ed 07 e0 06 22 0c 00 08 41
>028968	4b 48 45 4e 45 20 51 00 00 00 10 00 ce 03 1b 3e
>028978	0a e0 06 22 04 00 01 48 00 00 12 00 cf 03 1b 3e
>028988	a8 e5 06 22 06 00 03 57 44 5a 00 00 1a 00 d0 03
>028998	1b 3e 30 ee 06 e0 06 22 0c 00 08 4d 20 55 44 4c
>0289a8	55 4a 4c 00 00 00 16 00 d1 03 1b 3e 6c ee c1 ec
>0289b8	1b e0 06 22 06 00 02 54 57 00 00 00 1a 00 d2 03
>0289c8	1b 3e 74 ed 8c ed 17 e0 06 22 0a 00 07 41 43 45
>0289d8	59 47 20 42 00 00 12 00 d3 03 1b 3e 17 e0 06 22
>0289e8	06 00 02 51 46 00 00 00 18 00 d4 03 1b 3e 00 ed
>0289f8	15 e0 06 22 0a 00 07 47 4e 53 20 4c 4a 56 00 00
>028a08	16 00 d5 03 1b 3e 59 ed d5 e1 06 22 08 00 05 42
>028a18	58 41 49 52 00 00 1a 00 d6 03 1b 3e 5a ee f6 e0
>028a28	06 22 0c 00 09 53 55 20 20 4f 4e 48 4f 59 00 00
>028a38	10 00 d7 03 1b 3e 08 e0 06 22 04 00 01 42 00 00
>028a48	12 00 d8 03 1b 3e d1 e5 06 22 06 00 03 42 56 57
>028a58	00 00 12 00 d9 03 1b 3e 3a e6 06 22 06 00 02 42
>028a68	52 00 00 00 1a 00 da 03 1b 3e 30 ee e2 e1 06 22
>028a78	0c 00 08 54 20 56 45 20 4f 53 54 00 00 00 10 00
>028a88	db 03 1b 3e 55 e6 06 22 04 00 00 00 00 00 1a 00
>028a98	dc 03 1b 3e 64 e6 06 22 0e 00 0b 59 55 4f 4c 49
>028aa8	59 4d 5a 4e 50 44 00 00 1a 00 dd 03 1b 3e 50 ed
>028ab8	e0 e1 06 22 0c 00 09 46 58 20 43 42 20 58 57 4c
>028ac8	00 00 12 00 de 03 1b 3e 1f e5 06 22 06 00 03 49
>028ad8	56 4e 00 00 1a 00 df 03 1b 3e 1d ed 1e e0 06 22
>028ae8	0c 00 08 41 44 20 54 58 47 51 50 00 00 00 1a 00
>028af8	e0 03 1b 3e f6 ec 17 e0 06 22 0c 00 08 51 20 20
>028b08	45 20 54 20 5a 00 00 00 16 00 e1 03 1b 3e 0f ee
>028b18	9e ec 1d e0 06 22 06 00 03 4a 20 51 00 00 14 00
>028b28	e2 03 1b 3e ca ec 35 e3 06 22 06 00 02 49 47 00
>028b38	00 00 16 00 e3 03 1b 3e 4b ed 42 eb 13 e0 06 22
>028b48	06 00 02 49 4a 00 00 00 14 00 e4 03 1b 3e e2 ed
>028b58	05 e0 06 22 06 00 02 4e 50 00 00 00 16 00 e5 03
>028b68	1b 3e 11 e0 06 22 0a 00 07 41 51 20 56 57 55 4c
>028b78	00 00 14 00 e6 03 1b 3e ff ec 21 e0 06 22 06 00
>028b88	03 4a 55 47 00 00 12 00 e7 03 1b 3e b6 ed 82 e4
>028b98	06 22 04 00 01 5a 00 00 16 00 e8 03 1b 3e f6 e4
>028ba8	06 22 0a 00 06 47 20 20 42 49 42 00 00 00 1a 00
>028bb8	e9 03 1b 3e fd ec 19 e0 06 22 0c 00 09 41 20 55
>028bc8	50 46 43 48 20 5a 00 00 18 00 ea 03 1b 3e 36 e6
>028bd8	06 22 0c 00 08 5a 53 4b 5a 57 20 5a 56 00 00 00
>028be8	1c 00 eb 03 1b 3e 03 ee 33 e8 07 e0 06 22 0c 00
>028bf8	09 42 20 44 41 4c 4f 44 20 4e 00 00 1c 00 ec 03
>028c08	1b 3e e2 ed bc e8 0e e0 06 22 0c 00 08 47 59 5a
>028c18	20 20 59 45 4a 00 00 00 18 00 ed 03 1b 3e d4 e4
>028c28	06 22 0c 00 09 46 4f 20 45 49 51 58 20 53 00 00
>028c38	18 00 ee 03 1b 3e c6 ec 09 e0 06 22 0a 00 06 48
>028c48	4b 56 43 45 59 00 00 00 12 00 ef 03 1b 3e 6e ee
>028c58	13 e0 06 22 04 00 01 4d 00 00 1c 00 f0 03 1b 3e
>028c68	27 ed a1 eb 02 e0 06 22 0c 00 09 55 4e 54 51 5a
>028c78	53 4f 45 5a 00 00 1c 00 f1 03 1b 3e 62 ee 09 e3
>028c88	06 22 0e 00 0b 44 45 47 4d 41 48 46 53 57 4c 51
>028c98	00 00 1a 00 f2 03 1b 3e 3b ee 6a ec 0c e0 06 22
>028ca8	0a 00 06 4c 54 46 44 20 56 00 00 00 14 00 f3 03
>028cb8	1b 3e 57 ed 54 ed 0c e0 06 22 04 00 01 56 00 00
>028cc8	12 00 f4 03 1b 3e 1c e5 06 22 06 00 03 48 47 4b
>028cd8	00 00 12 00 f5 03 1b 3e 8d e5 06 22 06 00 03 49
>028ce8	56 54 00 00 14 00 f6 03 1b 3e 19 e0 06 22 08 00
>028cf8	04 42 41 57 53 00 00 00 16 00 f7 03 1b 3e 2d ed
>028d08	74 e1 06 22 08 00 05 45 43 55 5a 45 00 00 1a 00
>028d18	f8 03 1b 3e 5f e5 06 22 0e 00 0a 50 20 51 48 54
>028d28	20 20 58 41 4d 00 00 00 1c 00 f9 03 1b 3e f0 ec
>028d38	f6 e8 21 e0 06 22 0c 00 09 58 51 56 4b 41 20 51
>028d48	56 55 00 00 16 00 fa 03 1b 3e ed ec 1f e0 06 22
>028d58	08 00 04 43 20 49 4b 00 00 00 1c 00 fb 03 1b 3e
>028d68	ff ed a7 e2 06 22 0e 00 0a 4d 50 49 20 4a 48 41
>028d78	42 4a 44 00 00 00 1a 00 fc 03 1b 3e 54 e5 06 22
>028d88	0e 00 0a 52 20 4b 57 4e 4d 42 49 45 49 00 00 00
>028d98	12 00 fd 03 1b 3e 56 ee 0b e0 06 22 04 00 01 46
>028da8	00 00 1a 00 fe 03 1b 3e b2 e5 06 22 0e 00 0a 4d
>028db8	4e 4a 48 20 20 45 20 47 59 00 00 00 10 00 ff 03
>028dc8	1b 3e 03 e6 06 22 04 00 00 00 00 00 1a 00 00 04
>028dd8	1b 3e 83 ed 1d e0 06 22 0c 00 08 4d 20 59 47 20
>028de8	57 58 56 00 00 00 16 00 01 04 1b 3e f9 ec 21 e0
>028df8	06 22 08 00 04 52 59 51 43 00 00 00 12 00 02 04
>028e08	1b 3e d0 ed 4c e4 06 22 04 00 00 00 00 00 14 00
>028e18	03 04 1b 3e 2a ed 00 eb 17 e0 06 22 04 00 00 00
>028e28	00 00 14 00 04 04 1b 3e 83 ed 18 e0 06 22 06 00
>028e38	02 56 55 00 00 00 16 00 05 04 1b 3e cd e4 06 22
>028e48	0a 00 07 46 56 4b 46 20 20 48 00 00 1a 00 06 04
>028e58	1b 3e 1c ed 21 e0 06 22 0c 00 09 51 41 5a 45 51
>028e68	57 43 58 4f 00 00 16 00 07 04 1b 3e 60 ed 4f e5
>028e78	06 22 08 00 05 46 47 55 20 44 00 00 14 00 08 04
>028e88	1b 3e ce e4 06 22 08 00 05 53 57 20 4f 4d 00 00
>028e98	1a 00 09 04 1b 3e 0c e0 06 22 0e 00 0b 57 53 20
>028ea8	54 47 49 49 4b 53 20 51 00 00 1a 00 0a 04 1b 3e
>028eb8	39 ee 14 e0 06 22 0c 00 09 4a 55 44 4a 20 4e 41
>028ec8	47 57 00 00 12 00 0b 04 1b 3e 00 ee fd e3 06 22
>028ed8	04 00 00 00 00 00 1a 00 0c 04 1b 3e 0b e0 06 22
>028ee8	0e 00 0a 4a 49 54 59 59 54 52 20 57 4d 00 00 00
>028ef8	18 00 0d 04 1b 3e 02 ee 06 e0 06 22 0a 00 06 51
>028f08	4f 56 42 20 53 00 00 00 18 00 0e 04 1b 3e d5 ed
>028f18	0e e0 06 22 0a 00 06 59 20 4a 20 20 51 00 00 00
>028f28	16 00 0f 04 1b 3e 03 e0 06 22 0a 00 07 49 20 44
>028f38	44 52 4b 56 00 00 14 00 10 04 1b 3e 67 ee 81 e2
>028f48	06 22 06 00 03 56 53 45 00 00 1c 00 11 04 1b 3e
>028f58	8d ed c7 e3 06 22 0e 00 0b 4c 20 50 58 4e 43 53
>028f68	43 41 4d 57 00 00 12 00 12 04 1b 3e 65 ee 65 e3
>028f78	06 22 04 00 01 47 00 00 14 00 13 04 1b 3e d6 ed
>028f88	11 e0 06 22 06 00 02 49 46 00 00 00 12 00 14 04
>028f98	1b 3e d3 ec 11 e0 06 22 04 00 00 00 00 00 14 00
>028fa8	15 04 1b 3e e5 e5 06 22 08 00 05 4a 44 4b 56 56
>028fb8	00 00 18 00 16 04 1b 3e 5e e6 06 22 0c 00 08 4c
>028fc8	42 49 51 59 20 56 54 00 00 00 18 00 17 04 1b 3e
>028fd8	09 ee 16 e0 06 22 0a 00 07 48 20 4a 4d 20 4d 41
>028fe8	00 00 10 00 18 04 1b 3e 09 e6 06 22 04 00 01 52
>028ff8	00 00 12 00 19 04 1b 3e 2a ee f7 e0 06 22 04 00
>029008	01 51 00 00 1a 00 1a 04 1b 3e 3b e6 06 22 0e 00
>029018	0a 4c 56 20 48 5a 4b 44 51 20 48 00 00 00 1a 00
>029028	1b 04 1b 3e a2 ed 1e e3 06 22 0c 00 08 46 57 43
>029038	48 45 43 56 4c 00 00 00 18 00 1c 04 1b 3e 0e e0
>029048	06 22 0c 00 08 4f 55 56 20 47 46 59 45 00 00 00
>029058	16 00 1d 04 1b 3e fc ed 12 e0 06 22 08 00 05 50
>029068	20 58 42 44 00 00 1c 00 1e 04 1b 3e fd ec c9 eb
>029078	16 e0 06 22 0c 00 08 47 44 43 5a 5a 50 46 48 00
>029088	00 00 16 00 1f 04 1b 3e 51 e5 06 22 0a 00 07 4b
>029098	44 4f 4e 53 57 50 00 00 18 00 20 04 1b 3e 1e e5
>0290a8	06 22 0c 00 08 57 20 4e 20 41 49 48 50 00 00 00
>0290b8	18 00 21 04 1b 3e b6 e5 06 22 0c 00 09 41 20 4b
>0290c8	20 4f 48 51 47 58 00 00 18 00 22 04 1b 3e fd ec
>0290d8	0f e0 06 22 0a 00 06 41 58 4c 4a 51 58 00 00 00
>0290e8	18 00 23 04 1b 3e 7e ed 8b ed 24 e0 06 22 08 00
>0290f8	04 53 20 20 4b 00 00 00 14 00 24 04 1b 3e d7 ed
>029108	88 e0 06 22 06 00 02 4f 47 00 00 00 1e 00 25 04
>029118	1b 3e 33 ed 3e ec 08 e0 06 22 0e 00 0a 4b 51 47
>029128	20 48 45 52 44 20 4a 00 00 00 1a 00 26 04 1b 3e
>029138	f0 ec 39 e4 06 22 0c 00 09 4e 20 58 55 20 20 58
>029148	51 41 00 00 14 00 27 04 1b 3e c5 ec 63 e2 06 22
>029158	06 00 03 41 55 51 00 00 1a 00 28 04 1b 3e e1 ed
>029168	07 e5 06 22 0c 00 09 52 20 4c 54 4c 41 41 20 45
>029178	00 00 1c 00 29 04 1b 3e 58 ee c1 ea 03 e0 06 22
>029188	0c 00 09 48 4d 4a 20 20 55 20 54 4e 00 00 1a 00
>029198	2a 04 1b 3e d6 ec de e9 05 e0 06 22 0a 00 07 54
>0291a8	57 41 20 55 57 5a 00 00 12 00 2b 04 1b 3e 69 ee
>0291b8	10 e0 06 22 04 00 01 4d 00 00 14 00 2c 04 1b 3e
>0291c8	1d ed 20 e0 06 22 06 00 02 54 51 00 00 00 18 00
>0291d8	2d 04 1b 3e 05 ee 20 e0 06 22 0a 00 07 4f 53 5a
>0291e8	55 20 20 45 00 00 18 00 2e 04 1b 3e 66 ee 13 e0
>0291f8	06 22 0a 00 07 43 54 20 4f 20 4b 46 00 00 1a 00
>029208	2f 04 1b 3e 80 ed 1a e0 06 22 0c 00 08 48 57 42
>029218	58 41 46 57 51 00 00 00 14 00 30 04 1b 3e 56 e5
>029228	06 22 08 00 05 58 5a 4c 20 56 00 00 1c 00 31 04
>029238	1b 3e a3 ed e6 eb 19 e0 06 22 0c 00 09 4e 53 4a
>029248	5a 59 4a 4f 20 51 00 00 1c 00 32 04 1b 3e 5b ed
>029258	56 e4 06 22 0e 00 0b 54 56 20 20 50 4d 20 41 4c
>029268	52 54 00 00 1e 00 33 04 1b 3e 5d ee 59 ea 17 e0
>029278	06 22 0e 00 0b 55 56 20 50 56 4d 50 51 20 45 53
>029288	00 00 16 00 34 04 1b 3e 61 ee 18 e0 06 22 08 00
>029298	04 46 57 4b 52 00 00 00 12 00 35 04 1b 3e 5e ed
>0292a8	2f e0 06 22 04 00 01 4b 00 00 10 00 36 04 1b 3e
>0292b8	5a e5 06 22 04 00 01 49 00 00 14 00 37 04 1b 3e
>0292c8	0d ee 58 e4 06 22 06 00 03 44 52 4c 00 00 14 00
>0292d8	38 04 1b 3e fc ed d1 e3 06 22 06 00 03 4d 46 56
>0292e8	00 00 16 00 39 04 1b 3e 60 ee 62 eb 11 e0 06 22
>0292f8	06 00 02 42 54 00 00 00 1a 00 3a 04 1b 3e 55 ed
>029308	6b e3 06 22 0c 00 08 51 44 45 20 55 20 48 52 00
>029318	00 00 14 00 3b 04 1b 3e 06 e0 06 22 08 00 05 54
>029328	57 20 46 56 00 00 14 00 3c 04 1b 3e 4e ed 19 e0
>029338	06 22 06 00 03 4e 20 45 00 00 16 00 3d 04 1b 3e
>029348	d8 ec 24 e0 06 22 08 00 05 4b 53 20 20 51 00 00
>029358	14 00 3e 04 1b 3e 2c ee 19 e0 06 22 06 00 03 44
>029368	46 53 00 00 18 00 3f 04 1b 3e 59 e6 06 22 0c 00
>029378	09 57 20 4a 48 20 45 43 4f 49 00 00 14 00 40 04
>029388	1b 3e 31 e6 06 22 08 00 05 46 53 56 49 4d 00 00
>029398	18 00 41 04 1b 3e a4 ed ea ed 09 e0 06 22 08 00
>0293a8	04 59 46 54 56 00 00 00 14 00 42 04 1b 3e e1 ed
>0293b8	83 e4 06 22 06 00 03 4e 58 5a 00 00 1a 00 43 04
>0293c8	1b 3e c5 ec 07 ed 1a e0 06 22 0a 00 07 44 46 51
>0293d8	20 59 4c 4b 00 00 14 00 44 04 1b 3e ac ed 06 e0
>0293e8	06 22 06 00 03 50 53 49 00 00 18 00 45 04 1b 3e
>0293f8	61 e6 06 22 0c 00 09 56 50 41 43 44 4d 55 41 54
>029408	00 00 1a 00 46 04 1b 3e 8b ed 69 eb 15 e0 06 22
>029418	0a 00 07 46 20 47 52 44 4e 57 00 00 1c 00 47 04
>029428	1b 3e 31 ee 7a e9 0a e0 06 22 0c 00 08 42 4f 20
>029438	50 54 44 4e 4e 00 00 00 12 00 48 04 1b 3e b6 ed
>029448	10 e0 06 22 04 00 01 51 00 00 10 00 49 04 1b 3e
>029458	6d e6 06 22 04 00 01 50 00 00 18 00 4a 04 1b 3e
>029468	30 ed ac e2 06 22 0a 00 06 57 41 4d 4e 57 46 00
>029478	00 00 1a 00 4b 04 1b 3e 07 ee 7f e9 02 e0 06 22
>029488	0a 00 07 45 42 4d 20 58 53 42 00 00 12 00 4c 04
>029498	1b 3e 8d ed 48 e1 06 22 04 00 01 47 00 00 14 00
>0294a8	4d 04 1b 3e b4 ed f7 eb 19 e0 06 22 04 00 01 4b
>0294b8	00 00 14 00 4e 04 1b 3e d3 ed 86 e4 06 22 06 00
>0294c8	02 50 55 00 00 00 1a 00 4f 04 1b 3e a3 ed 11 e0
>0294d8	06 22 0c 00 08 4a 42 49 50 52 46 4d 52 00 00 00
>0294e8	12 00 50 04 1b 3e a2 ed 8a e3 06 22 04 00 00 00
>0294f8	00 00 18 00 51 04 1b 3e 24 ed 10 e0 06 22 0a 00
>029508	07 4e 20 59 4e 20 53 58 00 00 16 00 52 04 1b 3e
>029518	09 ee 02 e0 06 22 08 00 05 54 53 20 20 4d 00 00
>029528	14 00 53 04 1b 3e 87 ed 3d e0 06 22 06 00 03 59
>029538	55 50 00 00 12 00 54 04 1b 3e 31 ee 14 e0 06 22
>029548	04 00 00 00 00 00 12 00 55 04 1b 3e 2a e5 06 22
>029558	06 00 03 46 41 4b 00 00 18 00 56 04 1b 3e 53 e5
>029568	06 22 0c 00 09 59 4a 51 57 42 20 50 4e 52 00 00
>029578	14 00 57 04 1b 3e 80 e5 06 22 08 00 05 41 42 20
>029588	20 57 00 00 18 00 58 04 1b 3e 01 ed 1d e5 06 22
>029598	0a 00 06 58 49 45 4c 59 46 00 00 00 10 00 59 04
>0295a8	1b 3e 57 e5 06 22 04 00 00 00 00 00 12 00 5a 04
>0295b8	1b 3e d6 ec 18 e0 06 22 04 00 00 00 00 00 1c 00
>0295c8	5b 04 1b 3e ce ec 1b e0 06 22 0e 00 0b 56 54 4e
>0295d8	4c 43 50 53 45 45 4a 57 00 00 18 00 5c 04 1b 3e
>0295e8	07 e0 06 22 0c 00 08 45 4f 5a 43 51 59 20 44 00
>0295f8	00 00 18 00 5d 04 1b 3e 0b e6 06 22 0c 00 09 44
>029608	20 41 50 4b 20 56 20 4c 00 00 12 00 5e 04 1b 3e
>029618	f5 ec 0d e0 06 22 04 00 01 49 00 00 16 00 5f 04
>029628	1b 3e de ed 1f ec 18 e0 06 22 06 00 03 55 20 53
>029638	00 00 16 00 60 04 1b 3e f2 ec c3 e3 06 22 08 00
>029648	04 45 59 50 4a 00 00 00 10 00 61 04 1b 3e 58 e6
>029658	06 22 04 00 01 54 00 00 14 00 62 04 1b 3e cf ec
>029668	0d e0 06 22 06 00 03 4c 4e 4d 00 00 1a 00 63 04
>029678	1b 3e 01 ee a0 e0 06 22 0c 00 08 55 47 20 47 45
>029688	58 43 4a 00 00 00 1c 00 64 04 1b 3e e2 ed 08 e0
>029698	06 22 0e 00 0a 43 46 57 50 4e 55 50 20 44 49 00
>0296a8	00 00 10 00 65 04 1b 3e e3 e5 06 22 04 00 00 00
>0296b8	00 00 12 00 66 04 1b 3e 27 ed 03 e0 06 22 04 00
>0296c8	01 52 00 00 16 00 67 04 1b 3e 6d ee 0f e0 06 22
>0296d8	08 00 04 44 52 46 4b 00 00 00 14 00 68 04 1b 3e
>0296e8	63 ee 1e e0 06 22 06 00 03 4c 51 53 00 00 1a 00
>0296f8	69 04 1b 3e 7d ed 1f ea 0b e0 06 22 0a 00 06 41
>029708	50 49 20 45 44 00 00 00 14 00 6a 04 1b 3e 31 ed
>029718	ff ed 0e e0 06 22 04 00 01 4a 00 00 12 00 6b 04
>029728	1b 3e 7f e5 06 22 06 00 03 48 43 49 00 00 1c 00
>029738	6c 04 1b 3e 60 ee 4a e3 06 22 0e 00 0a 5a 4e 54
>029748	42 47 47 46 4b 59 4a 00 00 00 12 00 6d 04 1b 3e
>029758	b0 ed 09 e0 06 22 04 00 00 00 00 00 1c 00 6e 04
>029768	1b 3e e5 ed 33 e8 14 e0 06 22 0c 00 09 58 20 50
>029778	20 4a 20 20 55 4e 00 00 18 00 6f 04 1b 3e 89 e5
>029788	06 22 0c 00 09 45 41 4b 4f 59 52 59 53 53 00 00
>029798	18 00 70 04 1b 3e 67 ee 24 e4 06 22 0a 00 06 50
>0297a8	45 56 58 50 57 00 00 00 16 00 71 04 1b 3e 4b e5
>0297b8	06 22 0a 00 07 42 20 58 53 20 58 49 00 00 18 00
>0297c8	72 04 1b 3e 5c ed 0f e5 06 22 0a 00 07 42 51 56
>0297d8	52 20 43 42 00 00 16 00 73 04 1b 3e 30 ed 0a e2
>0297e8	06 22 08 00 04 57 4d 20 51 00 00 00 18 00 74 04
>0297f8	1b 3e 88 ed 5a ec 0a e0 06 22 08 00 05 42 59 4a
>029808	46 4b 00 00 12 00 75 04 1b 3e 1c ed 13 e0 06 22
>029818	04 00 01 44 00 00 1c 00 76 04 1b 3e fc ed 61 e3
>029828	06 22 0e 00 0a 49 45 52 20 53 45 4a 20 44 41 00
>029838	00 00 14 00 77 04 1b 3e d3 ec 37 ed 13 e0 06 22
>029848	04 00 00 00 00 00 18 00 78 04 1b 3e dc ed 39 ea
>029858	22 e0 06 22 08 00 05 46 43 55 20 4c 00 00 18 00
>029868	79 04 1b 3e aa e5 06 22 0c 00 09 48 48 20 4d 20
>029878	46 4d 20 5a 00 00 16 00 7a 04 1b 3e ee ec 24 e0
>029888	06 22 08 00 04 47 53 41 4a 00 00 00 16 00 7b 04
>029898	1b 3e e0 ed 30 e0 06 22 08 00 04 53 51 55 47 00
>0298a8	00 00 1a 00 7c 04 1b 3e 30 ee f9 e1 06 22 0c 00
>0298b8	09 59 58 20 48 48 46 46 59 52 00 00 18 00 7d 04
>0298c8	1b 3e 55 ee dd e4 06 22 0a 00 06 4e 43 45 50 49
>0298d8	52 00 00 00 1c 00 7e 04 1b 3e 03 ee 41 eb 12 e0
>0298e8	06 22 0c 00 09 4d 4f 4d 43 43 4e 20 20 53 00 00
>0298f8	14 00 7f 04 1b 3e e2 e5 06 22 08 00 05 46 59 20
>029908	53 4a 00 00 18 00 80 04 1b 3e 49 ed 1c e0 06 22
>029918	0a 00 07 52 57 45 44 20 48 58 00 00 14 00 81 04
>029928	1b 3e 22 ed 0d e0 06 22 06 00 03 44 48 4c 00 00
>029938	1c 00 82 04 1b 3e 7d ed a7 e9 13 e0 06 22 0c 00
>029948	09 4c 58 47 52 48 20 20 20 43 00 00 14 00 83 04
>029958	1b 3e 11 ee b7 e1 06 22 06 00 03 54 20 46 00 00
>029968	12 00 84 04 1b 3e 6e e6 06 22 06 00 02 45 46 00
>029978	00 00 12 00 85 04 1b 3e af e5 06 22 06 00 03 55
>029988	43 50 00 00 18 00 86 04 1b 3e 79 e5 06 22 0c 00
>029998	08 54 51 41 46 59 20 58 52 00 00 00 14 00 87 04
>0299a8	1b 3e 6b ee 2c e4 06 22 06 00 03 5a 43 49 00 00
>0299b8	12 00 88 04 1b 3e 1a ed 05 e0 06 22 04 00 00 00
>0299c8	00 00 14 00 89 04 1b 3e 1a ed 24 e0 06 22 06 00
>0299d8	02 57 46 00 00 00 1c 00 8a 04 1b 3e 30 ee d2 e9
>0299e8	13 e0 06 22 0c 00 08 46 55 4b 20 4c 20 49 59 00
>0299f8	00 00 1a 00 8b 04 1b 3e 5d e5 06 22 0e 00 0a 49
>029a08	20 46 48 4b 20 57 49 4d 56 00 00 00 14 00 8c 04
>029a18	1b 3e 3e ee 22 e0 06 22 06 00 02 55 59 00 00 00
>029a28	16 00 8d 04 1b 3e 75 ed 69 e3 06 22 08 00 04 5a
>029a38	50 50 48 00 00 00 14 00 8e 04 1b 3e d4 ed 78 e6
>029a48	06 22 06 00 03 54 47 59 00 00 1c 00 8f 04 1b 3e
>029a58	ff ec 20 e0 06 22 0e 00 0b 54 20 59 50 4e 50 56
>029a68	4d 54 44 56 00 00 10 00 90 04 1b 3e 59 e5 06 22
>029a78	04 00 00 00 00 00 18 00 91 04 1b 3e ef ec 5a e5
>029a88	06 22 0a 00 07 44 4e 20 20 20 43 58 00 00 16 00
>029a98	92 04 1b 3e 3c ee e9 eb 1e e0 06 22 06 00 03 4c
>029aa8	44 56 00 00 1a 00 93 04 1b 3e 22 ed a1 e0 06 22
>029ab8	0c 00 09 41 20 46 20 4a 43 4d 47 4f 00 00 18 00
>029ac8	94 04 1b 3e 8b ed 72 e0 06 22 0a 00 06 45 20 20
>029ad8	20 57 45 00 00 00 1a 00 95 04 1b 3e 50 e5 06 22
>029ae8	0e 00 0b 4e 20 42 51 20 4f 5a 4a 4f 20 57 00 00
>029af8	12 00 96 04 1b 3e 5e ee 07 e0 06 22 04 00 01 51
>029b08	00 00 16 00 97 04 1b 3e 0c ee 04 e0 06 22 08 00
>029b18	05 44 57 51 4f 44 00 00 14 00 98 04 1b 3e 12 ee
>029b28	1a e0 06 22 06 00 03 44 49 47 00 00 1a 00 99 04
>029b38	1b 3e f1 e4 06 22 0e 00 0a 54 44 47 4f 4b 57 20
>029b48	4b 55 47 00 00 00 16 00 9a 04 1b 3e 30 ed 04 e0
>029b58	06 22 08 00 04 41 59 42 58 00 00 00 16 00 9b 04
>029b68	1b 3e d1 ed ca ec 1c e0 06 22 06 00 03 4f 41 43
>029b78	00 00 1e 00 9c 04 1b 3e 4a ed d8 ea 20 e0 06 22
>029b88	0e 00 0b 52 44 46 49 20 53 47 50 5a 4a 4f 00 00
>029b98	12 00 9d 04 1b 3e b9 ed 19 e0 06 22 04 00 01 47
>029ba8	00 00 1a 00 9e 04 1b 3e 37 ee 0b e0 06 22 0c 00
>029bb8	09 45 50 45 54 49 42 42 48 52 00 00 10 00 9f 04
>029bc8	1b 3e cf e4 06 22 04 00 00 00 00 00 1c 00 a0 04
>029bd8	1b 3e 29 ee 12 e0 06 22 0e 00 0a 57 4b 5a 50 4d
>029be8	20 56 43 4e 43 00 00 00 12 00 a1 04 1b 3e 22 ed
>029bf8	88 e4 06 22 04 00 00 00 00 00 14 00 a2 04 1b 3e
>029c08	0e ee 24 e9 0c e0 06 22 04 00 00 00 00 00 1c 00
>029c18	a3 04 1b 3e 89 ed 1a e9 06 e0 06 22 0c 00 09 58
>029c28	20 20 4b 54 20 56 5a 58 00 00 18 00 a4 04 1b 3e
>029c38	a7 ed cb e0 06 22 0a 00 06 4a 52 45 47 45 4b 00
>029c48	00 00 1a 00 a5 04 1b 3e 25 ed 3a e2 06 22 0c 00
>029c58	08 58 42 45 57 52 20 20 41 00 00 00 12 00 a6 04
>029c68	1b 3e b6 ed 12 e0 06 22 04 00 01 46 00 00 16 00
>029c78	a7 04 1b 3e 0e ee 13 e0 06 22 08 00 05 43 4f 46
>029c88	44 43 00 00 14 00 a8 04 1b 3e f6 ec 05 e0 06 22
>029c98	06 00 02 45 46 00 00 00 18 00 a9 04 1b 3e f9 e4
>029ca8	06 22 0c 00 09 44 4a 43 5a 55 20 4b 43 50 00 00
>029cb8	14 00 aa 04 1b 3e 0e e6 06 22 08 00 04 45 48 43
>029cc8	51 00 00 00 18 00 ab 04 1b 3e af ed 07 e0 06 22
>029cd8	0a 00 07 45 20 20 20 54 4b 55 00 00 16 00 ac 04
>029ce8	1b 3e 58 e5 06 22 0a 00 06 50 53 56 4d 51 52 00
>029cf8	00 00 16 00 ad 04 1b 3e e0 e5 06 22 0a 00 06 54
>029d08	4b 20 4f 4c 5a 00 00 00 14 00 ae 04 1b 3e 78 e5
>029d18	06 22 08 00 04 44 4e 4c 51 00 00 00 1e 00 af 04
>029d28	1b 3e 12 ee 13 e9 15 e0 06 22 0e 00 0a 5a 55 45
>029d38	48 48 4c 4d 20 52 53 00 00 00 18 00 b0 04 1b 3e
>029d48	03 ee 04 e0 06 22 0a 00 06 42 44 45 41 46 4b 00
>029d58	00 00 00 00 ee ee ee ee 00 00 00 00 00 00 00 00
>029d68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 552 times (8832 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
