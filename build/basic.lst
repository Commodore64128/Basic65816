
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 19 17:14:42 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 35 1e 01	jmp $011e35			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	b4 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	78 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	88 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	98 0a					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	dc 0a					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	43 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a8 0a					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	25 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	07 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c2 0a					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c2 09					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	43 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4f 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	cc 0b					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	43 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	54 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	66 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	dd 0c					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	bd 0c					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	99 0c					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	83 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	05 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	25 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	17 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	4f 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	83 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	b9 0e					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	d3 0e					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	ea 0e					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	8e 11					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	4c 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	cd 0d					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	64 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	f6 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	e5 10					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	bf 0d					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	b4 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	b4 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	b4 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	b4 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	b4 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	b4 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	b4 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	b4 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	97 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	d0 11					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	78 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	40 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	43 1a					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	d2 1a					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	ce 1a					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	2f 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	a3 1b					.word Function_COLLECT         & $FFFF ; token $3e34 "collect"
>01006a	93 1c					.word Function_CLS             & $FFFF ; token $3e35 "cls"
>01006c	cc 15					.word Function_PRINT           & $FFFF ; token $3e36 "print"
>01006e	ce 18					.word Function_GOTO            & $FFFF ; token $3e37 "goto"
>010070	2d 19					.word Function_GOSUB           & $FFFF ; token $3e38 "gosub"
>010072	49 19					.word Function_RETURN          & $FFFF ; token $3e39 "return"
>010074	8b 18					.word Function_ONGOTO          & $FFFF ; token $3e3a "on"
>010076	7f 16					.word Handler_ELSE             & $FFFF ; token $3e3b "else"
>010078	32 1c					.word Command_POKE             & $FFFF ; token $3e3c "poke"
>01007a	4a 1c					.word Command_DOKE             & $FFFF ; token $3e3d "doke"
>01007c	5e 1c					.word Command_LOKE             & $FFFF ; token $3e3e "loke"
>01007e	94 13					.word Command_List             & $FFFF ; token $3e3f "list"
>010080	ae 1c					.word Function_LINK            & $FFFF ; token $3e40 "link"
>010082	bf 1a					.word Function_NEW             & $FFFF ; token $3e41 "new"
>010084	5d 12					.word Function_PROC            & $FFFF ; token $3e42 "proc"
>010086	23 13					.word Command_LOCAL            & $FFFF ; token $3e43 "local"
>010088	7b 19					.word Function_REPEAT          & $FFFF ; token $3c44 "repeat"
>01008a	d9 19					.word Function_WHILE           & $FFFF ; token $3c45 "while"
>01008c	18 16					.word Function_IF              & $FFFF ; token $3c46 "if"
>01008e	54 17					.word Command_FOR              & $FFFF ; token $3c47 "for"
>010090	b4 05					.word IllegalToken             & $FFFF ; token $3c48 "defproc"
>010092	10 1a					.word Function_WEND            & $FFFF ; token $3a49 "wend"
>010094	92 19					.word Function_UNTIL           & $FFFF ; token $3a4a "until"
>010096	b4 05					.word IllegalToken             & $FFFF ; token $3a4b "then"
>010098	ad 16					.word Handler_ENDIF            & $FFFF ; token $3a4c "endif"
>01009a	cf 17					.word Command_NEXT             & $FFFF ; token $3a4d "next"
>01009c	d4 12					.word Function_ENDPROC         & $FFFF ; token $3a4e "endproc"
.01009e					TokenText:
>01009e	02 26					 .text $02,"&"        ; token $2001
>0100a0	02 7c					 .text $02,"|"        ; token $2002
>0100a2	02 5e					 .text $02,"^"        ; token $2003
>0100a4	12 3c					 .text $12,"<"        ; token $2204
>0100a6	12 3e					 .text $12,">"        ; token $2205
>0100a8	12 3d					 .text $12,"="        ; token $2206
>0100aa	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ad	13 3e 3d				 .text $13,">="       ; token $2208
>0100b0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b3	22 2b					 .text $22,"+"        ; token $240a
>0100b5	22 2d					 .text $22,"-"        ; token $240b
>0100b7	32 2a					 .text $32,"*"        ; token $260c
>0100b9	32 2f					 .text $32,"/"        ; token $260d
>0100bb	32 25					 .text $32,"%"        ; token $260e
>0100bd	33 3e 3e				 .text $33,">>"       ; token $260f
>0100c0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c3	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c8	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cd	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d2	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d7	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100dc	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e2	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e8	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100ed	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f2	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f8	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fe	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010104	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010c	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010114	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01011b	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010121	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010129	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010130	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010137	92 2c					 .text $92,","        ; token $3224
>010139	92 3b					 .text $92,";"        ; token $3225
>01013b	92 3a					 .text $92,":"        ; token $3226
>01013d	92 28					 .text $92,"("        ; token $3227
>01013f	92 29					 .text $92,")"        ; token $3228
>010141	92 27					 .text $92,"'"        ; token $3229
>010143	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010146	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>01014b	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014f	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010153	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>01015a	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015e	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010162	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010167	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016d	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010171	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e34
>010179	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e35
>01017d	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e36
>010183	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e37
>010188	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e38
>01018e	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e39
>010195	f3 4f 4e				 .text $f3,"ON"       ; token $3e3a
>010198	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3b
>01019d	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3c
>0101a2	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3d
>0101a7	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3e
>0101ac	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3f
>0101b1	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e40
>0101b6	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e41
>0101ba	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e42
>0101bf	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e43
>0101c5	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c44
>0101cc	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c45
>0101d2	e3 49 46				 .text $e3,"IF"       ; token $3c46
>0101d5	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c47
>0101d9	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c48
>0101e1	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a49
>0101e6	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a4a
>0101ec	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4b
>0101f1	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4c
>0101f7	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4d
>0101fc	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4e
>010204	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					collectTokenID                   = $3e34
=$3e35					clsTokenID                       = $3e35
=$3e36					printTokenID                     = $3e36
=$3e37					gotoTokenID                      = $3e37
=$3e38					gosubTokenID                     = $3e38
=$3e39					returnTokenID                    = $3e39
=$3e3a					onTokenID                        = $3e3a
=$3e3b					elseTokenID                      = $3e3b
=$3e3c					pokeTokenID                      = $3e3c
=$3e3d					dokeTokenID                      = $3e3d
=$3e3e					lokeTokenID                      = $3e3e
=$3e3f					listTokenID                      = $3e3f
=$3e40					linkTokenID                      = $3e40
=$3e41					newTokenID                       = $3e41
=$3e42					procTokenID                      = $3e42
=$3e43					localTokenID                     = $3e43
=$3c44					repeatTokenID                    = $3c44
=$3c45					whileTokenID                     = $3c45
=$3c46					ifTokenID                        = $3c46
=$3c47					forTokenID                       = $3c47
=$3c48					defprocTokenID                   = $3c48
=$3a49					wendTokenID                      = $3a49
=$3a4a					untilTokenID                     = $3a4a
=$3a4b					thenTokenID                      = $3a4b
=$3a4c					endifTokenID                     = $3a4c
=$3a4d					nextTokenID                      = $3a4d
=$3a4e					endprocTokenID                   = $3a4e

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010205					Evaluate:
.010205	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.010208	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.01020b					EvaluateLevel:
.01020b	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.01020e	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010210	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010212	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010215	b0 79		bcs $010290			bcs 	_ELVariable
.010217	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01021a	b0 16		bcs $010232			bcs 	_ELConstant
.01021c	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01021f	90 7f		bcc $0102a0			bcc 	_ELStringConstant
.010221	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010224	90 03		bcc $010229			bcc 	_ELConstantShift
.010226	82 94 00	brl $0102bd			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010229					_ELConstantShift:
.010229	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.01022c	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01022e	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010230	e6 06		inc $06				inc 	DCodePtr
.010232					_ELConstant:
.010232	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010234	38		sec				sec  								; shift it in the range 0-32767
.010235	e9 00 40	sbc #$4000			sbc 	#$4000
.010238	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010239	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.01023b	6a		ror a				ror 	a 							; rotate that into the constant value
.01023c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01023e	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010240	95 20		sta $20,x			sta 	EXSValueH+0,x
.010242	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010244	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010246	e6 06		inc $06				inc 	DCodePtr
.010248					_ELGotAtom:
.010248	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.01024a	a8		tay				tay 								; save in Y
.01024b	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01024e	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010251	d0 35		bne $010288			bne 	_ELExit
.010253	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010255	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010258	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.01025a	98		tya				tya 								; get the keyword token back
.01025b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01025e	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010260	90 26		bcc $010288			bcc 	_ELExit 					; precedence too low, then exit.
.010262	5a		phy				phy 								; save the binary operator on the stack
.010263	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010265	e6 06		inc $06				inc 	DCodePtr
.010267	18		clc				clc 								; try the next level up
.010268	69 00 02	adc #$0200			adc 	#1 << TokenShift
.01026b	e8		inx				inx 								; calculate the RHS at the next stack level.
.01026c	e8		inx				inx
.01026d	20 0b 02	jsr $01020b			jsr 	EvaluateLevel
.010270	ca		dex				dex
.010271	ca		dex				dex
.010272	7a		ply				ply 								; get operator token back into Y
.010273					_ELExecuteY:
.010273	98		tya				tya
.010274	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010277	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010278	9b		txy				txy 								; save X in Y
.010279	aa		tax				tax 								; double keyword ID in X
.01027a	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01027e	bb		tyx				tyx 								; restore X.
.01027f	8f 84 02 01	sta $010284			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010283					_ELCallRoutine:
.010283	20 83 02	jsr $010283			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010286	80 c0		bra $010248			bra 	_ELGotAtom 					; go round operator level again.
.010288	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.01028a	0a		asl a				asl 	a
.01028b	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01028d	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01028f	60		rts				rts
.010290					_ELVariable:
.010290	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010292	20 51 03	jsr $010351			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010295	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010297	94 20		sty $20,x			sty 	EXSValueH+0,x
.010299	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.01029b	80 ab		bra $010248			bra 	_ELGotAtom
.01029d					_ELSyntax
.01029d	82 25 03	brl $0105c5			brl 	SyntaxError
.0102a0					_ELStringConstant:
.0102a0	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.0102a3	f0 f8		beq $01029d			beq 	_ELSyntax
.0102a5	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0102a7	1a		inc a				inc 	a
.0102a8	1a		inc a				inc 	a
.0102a9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102ab	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102ad	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102af	18		clc				clc 								; add to string constant.
.0102b0	65 06		adc $06				adc 	DCodePtr
.0102b2	85 06		sta $06				sta 	DCodePtr
.0102b4	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102b6	09 00 80	ora #$8000			ora 	#$8000
.0102b9	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102bb	80 8b		bra $010248			bra 	_ELGotAtom
.0102bd					_ELUnaryKeyword:
.0102bd	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102bf	a8		tay				tay 								; put the token in Y.
.0102c0	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102c2	e6 06		inc $06				inc 	DCodePtr
.0102c4	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102c7	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102ca	f0 a7		beq $010273			beq 	_ELExecuteY					; go back and execute it
.0102cc	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102cf	d0 11		bne $0102e2			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102d1	20 08 03	jsr $010308			jsr 	EvaluateNext 				; evaluate the expression
.0102d4	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102d7					_ELCopy:
.0102d7	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102d9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102db	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102dd	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102df	82 66 ff	brl $010248			brl 	_ELGotAtom 					; and continue.
.0102e2					_ELUnaryOperator:
.0102e2	5a		phy				phy 								; save the operator on the stack.
.0102e3	e8		inx				inx 								; this is like evaluate next
.0102e4	e8		inx				inx
.0102e5	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102e8	20 0b 02	jsr $01020b			jsr 	EvaluateLevel
.0102eb	ca		dex				dex 								; unwind the stack.
.0102ec	ca		dex				dex
.0102ed	68		pla				pla 								; restore the unary operator.
.0102ee	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102f1	f0 03		beq $0102f6			beq 	_ELMinus
.0102f3	4c c5 05	jmp $0105c5			jmp 	SyntaxError
.0102f6					_ELMinus:
.0102f6	38		sec				sec 								; do the negation calculation.
.0102f7	a9 00 00	lda #$0000			lda 	#0
.0102fa	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102fc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102fe	a9 00 00	lda #$0000			lda 	#0
.010301	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010303	95 20		sta $20,x			sta 	EXSValueH+0,x
.010305	82 40 ff	brl $010248			brl 	_ELGotAtom					; and continue.
.010308					EvaluateNext:
.010308	e8		inx				inx
.010309	e8		inx				inx
.01030a	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.01030d	20 0b 02	jsr $01020b			jsr 	EvaluateLevel
.010310	ca		dex				dex
.010311	ca		dex				dex
.010312	60		rts				rts
.010313					EvaluateInteger:
.010313	20 05 02	jsr $010205			jsr 	Evaluate
.010316	b0 01		bcs $010319			bcs 	EIType
.010318	60		rts				rts
.010319					EIType:
.010319	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01031c	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010324	78 70 65 63 74 65 64 00
.01032c					EvaluateNextInteger:
.01032c	20 08 03	jsr $010308			jsr 	EvaluateNext
.01032f	b0 e8		bcs $010319			bcs 	EIType
.010331	60		rts				rts
.010332					EvaluateString:
.010332	20 05 02	jsr $010205			jsr 	Evaluate
.010335	90 01		bcc $010338			bcc 	ESType
.010337	60		rts				rts
.010338					ESType:
.010338	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01033b	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010343	78 70 65 63 74 65 64 00
.01034b					EvaluateNextString:
.01034b	20 08 03	jsr $010308			jsr 	EvaluateNext
.01034e	90 e8		bcc $010338			bcc 	ESType
.010350	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010351					VariableAccessExpression:
.010351	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010353	48		pha				pha
.010354	20 92 03	jsr $010392			jsr 	VariableFind 				; try to find the variables
.010357	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010359	90 23		bcc $01037e			bcc 	_VANError 					; not found, so report an error.
.01035b	68		pla				pla 								; get and save that first token
.01035c	48		pha				pha 								; we use it for typing.
.01035d	a8		tay				tay 								; put first token in Y.
.01035e	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010361	f0 07		beq $01036a			beq 	_VANNotArray
.010363	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010365	20 09 04	jsr $010409			jsr 	VariableSubscript			; index calculation
.010368	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01036a					_VANNotArray:
.01036a	68		pla				pla 								; get the token back.
.01036b	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01036e	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010371	38		sec				sec 								; set up return string.
.010372	f0 06		beq $01037a			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010374	18		clc				clc 								; returning a number, read high data word
.010375	a0 02 00	ldy #$0002			ldy 	#2
.010378	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01037a					_VANLoadLower:
.01037a	a8		tay				tay 								; put A into Y (this is the high byte)
.01037b	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01037d	60		rts				rts
.01037e					_VANError:
.01037e	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010381	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010389	20 75 6e 6b 6e 6f 77 6e 00
.010392					VariableFind:
.010392	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010394	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010397	90 5c		bcc $0103f5			bcc 	_VFError
.010399	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01039c	b0 11		bcs $0103af			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01039e	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103a1	3a		dec a				dec 	a 							; now 0-25
.0103a2	0a		asl a				asl 	a 							; x 4 and clear carry
.0103a3	0a		asl a				asl 	a
.0103a4	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103a7	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103a9	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103ab	e6 06		inc $06				inc 	DCodePtr
.0103ad	38		sec				sec 								; return with carry set.
.0103ae	60		rts				rts
.0103af					_VFSlowVariable:
.0103af	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103b1	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103b4	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103b5	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103b6	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103b9	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103bb	85 08		sta $08				sta 	DTemp1
.0103bd	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103bf	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103c2	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103c3	65 08		adc $08				adc 	DTemp1
.0103c5	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103c7	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103c9					_VFNext:
.0103c9	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103cb	f0 26		beq $0103f3			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103cd	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103cf	a8		tay				tay 								; read the address of the name at $0002,y
.0103d0	b9 02 00	lda $0002,y			lda 	$0002,y
.0103d3	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103d5	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103d8					_VFCompare:
.0103d8	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103da	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103dc	d0 eb		bne $0103c9			bne 	_VFNext 					; if not, go to the next one.
.0103de	c8		iny				iny 								; advance token pointer
.0103df	c8		iny				iny
.0103e0	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103e3	d0 f3		bne $0103d8			bne 	_VFCompare
.0103e5	98		tya				tya 								; this is the length of the word.
.0103e6	18		clc				clc 								; so we add it to the code pointer
.0103e7	65 06		adc $06				adc 	DCodePtr
.0103e9	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103eb	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103ed	18		clc				clc 								; four on is the actual data
.0103ee	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103f1	38		sec				sec 								; return with CS indicating success
.0103f2	60		rts				rts
.0103f3					_VFFail:
.0103f3	18		clc				clc
.0103f4	60		rts				rts
.0103f5					_VFError:
.0103f5	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0103f8	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010400	76 61 72 69 61 62 6c 65 00
.010409					VariableSubscript:
.010409	48		pha				pha		 							; save variable address on stack.
.01040a	20 2c 03	jsr $01032c			jsr		EvaluateNextInteger 		; get the subscript
.01040d	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; skip right bracket.
.010410	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010413	d0 10		bne $010425			bne 	_VANSubscript
.010415	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010417	f0 02		beq $01041b			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010419	b0 0a		bcs $010425			bcs 	_VANSubscript
.01041b					_VANSubOkay:
.01041b	0a		asl a				asl 	a 							; double lsword
.01041c	0a		asl a				asl 	a 							; and again, also clears carry.
.01041d	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.01041f	68		pla				pla 								; restore DVariablePtr
.010420	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010421	1a		inc a				inc 	a
.010422	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010424	60		rts				rts
.010425					_VANSubscript:
.010425	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010428	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010430	79 20 53 75 62 73 63 72 69 70 74 00
.01043c					VariableCreate:
.01043c	48		pha				pha 								; save count.
.01043d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010440	29 00 20	and #$2000			and 	#IDTypeMask
.010443	f0 06		beq $01044b			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010445	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010448	18		clc				clc 								; which is guaranteed by have a 0 length.
.010449	65 02		adc $02				adc 	DBaseAddress
.01044b					_VCIsInteger:
.01044b	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01044d	68		pla				pla 								; restore count
.01044e	48		pha				pha
.01044f	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010450	0a		asl a				asl 	a 							; 2 x # items.
.010451	0a		asl a				asl 	a 							; 4 x # items.
.010452					_VCNotSingle:
.010452	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010454	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010457	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01045a	f0 04		beq $010460			beq 	_VCNotArray
.01045c	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01045e	e6 08		inc $08				inc 	DTemp1
.010460					_VCNotArray:
.010460	5a		phy				phy 								; save address of first token on stack.
.010461	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010464	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010466	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010468	18		clc				clc 								; add 4 for link and name words
.010469	69 04 00	adc #$0004			adc 	#4
.01046c	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01046e	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010470	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010472					_VCErase:
.010472	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010474	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010477	c8		iny				iny
.010478	c8		iny				iny
.010479	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01047b	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01047d	d0 f3		bne $010472			bne 	_VCErase
.01047f	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010481	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010483	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010486	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010489	18		clc				clc
.01048a	65 02		adc $02				adc 	DBaseAddress
.01048c	85 08		sta $08				sta 	DTemp1
.01048e	68		pla				pla 								; restore the token address
.01048f	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010491	b0 03		bcs $010496			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010493	20 a5 04	jsr $0104a5			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010496					_VCDontClone:
.010496	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010499	68		pla				pla 								; restore count and store.
.01049a	99 04 00	sta $0004,y			sta 	$0004,y
.01049d	98		tya				tya 								; update the head link
.01049e	92 20		sta ($20)			sta 	(DHashTablePtr)
.0104a0	18		clc				clc 								; advance pointer to the data bit.
.0104a1	69 04 00	adc #$0004			adc 	#4
.0104a4	60		rts				rts 								; and done.
.0104a5					VCCloneIdentifier:
.0104a5	da		phx				phx 								; save XY
.0104a6	5a		phy				phy
.0104a7	aa		tax				tax 								; identifier address in Y.
.0104a8	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104ab	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ad	48		pha				pha
.0104ae					_VCCloneLoop:
.0104ae	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104b1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104b3	48		pha				pha 								; save on stack
.0104b4	1a		inc a				inc 	a 							; space for one token.
.0104b5	1a		inc a				inc 	a
.0104b6	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b8	7a		ply				ply 								; address of word in Y
.0104b9	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104bc	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104bf	e8		inx				inx 								; advance the token pointer
.0104c0	e8		inx				inx
.0104c1	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104c4	d0 e8		bne $0104ae			bne 	_VCCloneLoop
.0104c6	68		pla				pla 								; restore start address
.0104c7	7a		ply				ply 								; and the others
.0104c8	fa		plx				plx
.0104c9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104ca					LineDelete:
.0104ca	aa		tax				tax 	 							; this is the one we're looking for ....
.0104cb	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104cd	18		clc				clc
.0104ce	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104d1	a8		tay				tay
.0104d2					_LDLoop:
.0104d2	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104d5	f0 2d		beq $010504			beq 	_LDExit						; exit if zero ; line does not exist
.0104d7	8a		txa				txa 								; found a match
.0104d8	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104db	f0 08		beq $0104e5			beq		_LDFound
.0104dd	98		tya				tya 								; follow the link.
.0104de	18		clc				clc
.0104df	79 00 00	adc $0000,y			adc 	$0000,y
.0104e2	a8		tay				tay
.0104e3	80 ed		bra $0104d2			bra 	_LDLoop
.0104e5					_LDFound:
.0104e5	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104e7	98		tya				tya 								; follow link to next.
.0104e8	18		clc				clc
.0104e9	79 00 00	adc $0000,y			adc 	$0000,y
.0104ec	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104ee	20 19 1b	jsr $011b19			jsr 	FindCodeEnd 				; find the end of the code.
.0104f1	38		sec				sec
.0104f2	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104f4	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104f5	1a		inc a				inc 	a
.0104f6	aa		tax				tax
.0104f7	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104fa	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104fc	91 08		sta ($08),y			sta 	(DTemp1),y
.0104fe	c8		iny				iny
.0104ff	c8		iny				iny
.010500	ca		dex				dex
.010501	ca		dex				dex
.010502	d0 f6		bne $0104fa			bne 	_LDCopy
.010504					_LDExit:
.010504	60		rts				rts
.010505					LineInsert:
.010505	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.010507	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010509	a0 00 00	ldy #$0000			ldy 	#0
.01050c					_LIFindLength:
.01050c	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.01050e	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010511	f0 10		beq $010523			beq 	_LIFindEnd
.010513	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.010516	90 04		bcc $01051c			bcc 	_LIQString
.010518	c8		iny				iny 								; otherwise just skip it.
.010519	c8		iny				iny
.01051a	80 f0		bra $01050c			bra 	_LIFindLength
.01051c					_LIQString:
.01051c	98		tya				tya 								; skip quoted strings
.01051d	18		clc				clc
.01051e	71 08		adc ($08),y			adc 	(DTemp1),y
.010520	a8		tay				tay
.010521	80 e9		bra $01050c			bra 	_LIFindLength
.010523					_LIFindEnd:
.010523	98		tya				tya 								; the tokens in the line
.010524	18		clc				clc
.010525	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010528	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.01052a	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.01052d	18		clc				clc
.01052e	65 02		adc $02				adc 	DBaseAddress
.010530	a8		tay				tay
.010531					_LIFindInsertPoint:
.010531	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010534	f0 0f		beq $010545			beq		_LIFoundInsertPoint
.010536	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010539	c5 0c		cmp $0c				cmp 	DTemp2
.01053b	b0 08		bcs $010545			bcs 	_LIFoundInsertPoint
.01053d	98		tya				tya 								; if < go to the next line.
.01053e	18		clc				clc
.01053f	79 00 00	adc $0000,y			adc 	$0000,y
.010542	a8		tay				tay
.010543	80 ec		bra $010531			bra 	_LIFindInsertPoint
.010545					_LIFoundInsertPoint:
.010545	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.010547	20 19 1b	jsr $011b19			jsr 	FindCodeEnd 				; get the end of the code.
.01054a	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.01054c	18		clc				clc
.01054d	65 24		adc $24				adc 	DTemp3
.01054f	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010551					_LICopyMove:
.010551	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010553	92 34		sta ($34)			sta 	(DTemp4+2)
.010555	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.010557	c5 36		cmp $36				cmp 	DTemp5
.010559	f0 0a		beq $010565			beq 	_LICopyMoveOver
.01055b	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.01055d	c6 32		dec $32				dec 	DTemp4
.01055f	c6 34		dec $34				dec 	DTemp4+2
.010561	c6 34		dec $34				dec 	DTemp4+2
.010563	80 ec		bra $010551			bra 	_LICopyMove
.010565					_LICopyMoveOver:
.010565	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010567	92 36		sta ($36)			sta 	(DTemp5)
.010569	a0 02 00	ldy #$0002			ldy 	#2
.01056c	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.01056e	91 36		sta ($36),y			sta 	(DTemp5),y
.010570	a0 04 00	ldy #$0004			ldy 	#4
.010573					_LICopyTokens:
.010573	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010575	91 36		sta ($36),y			sta 	(DTemp5),y
.010577	c8		iny				iny
.010578	c8		iny				iny
.010579	e6 08		inc $08				inc 	DTemp1
.01057b	e6 08		inc $08				inc 	DTemp1
.01057d	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.01057f	c6 24		dec $24				dec 	DTemp3
.010581	a5 24		lda $24				lda 	DTemp3
.010583	c9 04 00	cmp #$0004			cmp 	#4
.010586	d0 eb		bne $010573			bne 	_LICopyTokens
.010588	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.010589					ErrorHandler:
.010589	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01058b	fa		plx				plx 								; address of error message -1
.01058c	e8		inx				inx 								; error message.
.01058d	20 31 06	jsr $010631			jsr 	PrintROMMessage 			; print message in ROM
.010590	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010592	f0 15		beq $0105a9			beq 	_EHEndMessage
.010594	a2 af 05	ldx #$05af			ldx 	#_EHAt & $FFFF 				; print " at "
.010597	20 31 06	jsr $010631			jsr 	PrintROMMessage
.01059a	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01059c	a0 00 00	ldy #$0000			ldy 	#0
.01059f	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105a2	20 40 10	jsr $011040			jsr 	ConvertToString 			; convert and print it.
.0105a5	a8		tay				tay
.0105a6	20 4f 06	jsr $01064f			jsr 	PrintBASICString
.0105a9					_EHEndMessage:
.0105a9	20 5b 1d	jsr $011d5b			jsr 	HWNewLine
.0105ac	4c 5f 1e	jmp $011e5f			jmp 	NextCommand 				; get next command.
>0105af	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105b4					IllegalToken:
.0105b4	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0105b7	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105bf	54 6f 6b 65 6e 00
.0105c5					SyntaxError:
.0105c5	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0105c8	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105d0	72 72 6f 72 00
.0105d5					ExpectToken:
.0105d5	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105d7	d0 05		bne $0105de			bne 	_CTKError					; error if not
.0105d9	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105db	e6 06		inc $06				inc 	DCodePtr
.0105dd	60		rts				rts
.0105de					_CTKError:
.0105de	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0105e1	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105e9	74 6f 6b 65 6e 00
.0105ef					ExpectRightBracket:
.0105ef	48		pha				pha
.0105f0	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105f3	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.0105f6	68		pla				pla
.0105f7	60		rts				rts
.0105f8					ExpectComma:
.0105f8	48		pha				pha
.0105f9	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105fc	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.0105ff	68		pla				pla
.010600	60		rts				rts
.010601					CheckBothNumeric:
.010601	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010603	15 42		ora $42,x			ora 	EXSPrecType+2,x
.010605	30 01		bmi $010608			bmi 	_CBNFail 					; need to both be zero in bit 15
.010607	60		rts				rts
.010608					_CBNFail:
.010608	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01060b	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010613	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010621					ResetTypeInteger:
.010621	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010623	29 ff 7f	and #$7fff			and 	#$7FFF
.010626	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010628	60		rts				rts
.010629					ResetTypeString:
.010629	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01062b	09 00 80	ora #$8000			ora 	#$8000
.01062e	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010630	60		rts				rts
.010631					PrintROMMessage:
.010631	48		pha				pha
.010632	da		phx				phx
.010633					_PRMLoop:
.010633	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010637	29 ff 00	and #$00ff			and 	#$00FF
.01063a	f0 10		beq $01064c			beq 	_PRMExit
.01063c	c9 0d 00	cmp #$000d			cmp 	#13
.01063f	d0 05		bne $010646			bne 	_PRMChar
.010641	20 5b 1d	jsr $011d5b			jsr 	HWNewLine
.010644	80 03		bra $010649			bra 	_PRMNext
.010646					_PRMChar:
.010646	20 0a 1d	jsr $011d0a			jsr 	HWPrintChar
.010649					_PRMNext:
.010649	e8		inx				inx
.01064a	80 e7		bra $010633			bra 	_PRMLoop
.01064c					_PRMExit:
.01064c	fa		plx				plx
.01064d	68		pla				pla
.01064e	60		rts				rts
.01064f					PrintBASICString:
.01064f	48		pha				pha
.010650	da		phx				phx
.010651	5a		phy				phy
.010652	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010655	29 ff 00	and #$00ff			and 	#$00FF
.010658	f0 0b		beq $010665			beq 	_PBSExit 					; null string
.01065a	aa		tax				tax
.01065b					_PBSLoop:
.01065b	c8		iny				iny
.01065c	b9 00 00	lda $0000,y			lda 	$0000,y
.01065f	20 0a 1d	jsr $011d0a			jsr 	HWPrintChar
.010662	ca		dex				dex
.010663	d0 f6		bne $01065b			bne 	_PBSLoop
.010665					_PBSExit:
.010665	7a		ply				ply
.010666	fa		plx				plx
.010667	68		pla				pla
.010668	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringutils.asm

.010669					StringTempAllocate:
.010669	48		pha				pha
.01066a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01066c	d0 09		bne $010677			bne 	_STANoReset
.01066e	5a		phy				phy 								; reset the temp string pointer.
.01066f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010672	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010674	85 16		sta $16				sta 	DTempStringPointer
.010676	7a		ply				ply
.010677					_STANoReset:
.010677	68		pla				pla 								; get length.
.010678	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01067b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01067e	18		clc				clc 								; this adds one, for the length.
.01067f	65 16		adc $16				adc 	DTempStringPointer
.010681	85 16		sta $16				sta 	DTempStringPointer
.010683	48		pha				pha 								; save start address
.010684	a9 00 00	lda #$0000			lda 	#$0000
.010687	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010689	92 16		sta ($16)			sta		(DTempStringPointer)
.01068b	c2 20		rep #$20			rep 	#$20
.01068d	68		pla				pla 								; restore start address
.01068e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010690	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010692	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010694	60		rts				rts
.010695					StringWriteCharacter:
.010695	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010697	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010699	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01069b	1a		inc a				inc 	a
.01069c	92 18		sta ($18)			sta 	(DStartTempString)
.01069e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.0106a0	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.0106a2	60		rts				rts
.0106a3					StringCreateCopy:
.0106a3	a8		tay				tay 								; put pointer to string in Y
.0106a4	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0106a7	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0106aa	f0 17		beq $0106c3			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.0106ac	da		phx				phx 								; save X and put the character count in X
.0106ad	aa		tax				tax
.0106ae					_SCCCopy:
.0106ae	c8		iny				iny 								; advance and read (first time skips length)
.0106af	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0106b1	b9 00 00	lda $0000,y			lda 	$0000,y
.0106b4	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0106b6	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0106b8	1a		inc a				inc 	a
.0106b9	92 18		sta ($18)			sta 	(DStartTempString)
.0106bb	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0106bd	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0106bf	ca		dex				dex 								; do X times
.0106c0	d0 ec		bne $0106ae			bne 	_SCCCopy
.0106c2	fa		plx				plx
.0106c3					_SCCExit:
.0106c3	60		rts				rts
.0106c4					StringMakeConcrete:
.0106c4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0106c7	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0106c9	90 0f		bcc $0106da			bcc 	_SMCExit
.0106cb	85 08		sta $08				sta 	DTemp1 						; source
.0106cd	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0106cf	29 ff 00	and #$00ff			and 	#$00FF
.0106d2	d0 07		bne $0106db			bne 	_SMCNonZero 				; if not "" skip.
.0106d4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0106d7	18		clc				clc 								; this reference is used for all empty strings.
.0106d8	65 02		adc $02				adc 	DBaseAddress
.0106da					_SMCExit:
.0106da	60		rts				rts
.0106db					_SMCNonZero:
.0106db	48		pha				pha 								; save on stack.
.0106dc	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0106df	18		clc				clc
.0106e0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0106e3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106e5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106e7	85 0c		sta $0c				sta 	DTemp2 						; target
.0106e9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0106ea	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0106ec					_SMCLoop:
.0106ec	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0106ee	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0106f0	88		dey				dey 								; Y+1 times.
.0106f1	10 f9		bpl $0106ec			bpl 	_SMCLoop
.0106f3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0106f5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0106f7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.0106f8					Tokenise:
.0106f8	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0106fa	84 0a		sty $0a				sty 	DTemp1+2
.0106fc	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0106ff	18		clc				clc
.010700	65 02		adc $02				adc 	DBaseAddress
.010702	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.010704	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.010707	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.01070a					_TOKCap:
.01070a	c8		iny				iny 								; go to next
.01070b	b7 08		lda [$08],y			lda 	[DTemp1],y
.01070d	29 ff 00	and #$00ff			and 	#$00FF
.010710	f0 22		beq $010734			beq 	_TOKEndCap
.010712	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.010715	d0 01		bne $010718			bne 	_TOKNotQuote
.010717	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.010718					_TOKNotQuote:
.010718	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.01071b	90 ed		bcc $01070a			bcc 	_TOKCap
.01071d	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010720	b0 e8		bcs $01070a			bcs 	_TOKCap
.010722	8a		txa				txa 								; check if in quotes
.010723	4a		lsr a				lsr 	a
.010724	b0 e4		bcs $01070a			bcs 	_TOKCap
.010726	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.010728	38		sec				sec
.010729	e9 20 00	sbc #$0020			sbc 	#32
.01072c	e2 20		sep #$20			sep 	#$20
.01072e	97 08		sta [$08],y			sta 	[DTemp1],y
.010730	c2 20		rep #$20			rep 	#$20
.010732	80 d6		bra $01070a			bra 	_TOKCap
.010734					_TOKEndCap:
.010734	c6 08		dec $08				dec 	DTemp1
.010736					_TOKMainNext:
.010736	e6 08		inc $08				inc 	DTemp1
.010738					_TOKMainLoop:
.010738	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.01073a	29 ff 00	and #$00ff			and 	#$00FF
.01073d	c9 20 00	cmp #$0020			cmp 	#32
.010740	90 1d		bcc $01075f			bcc 	_TOKExit 					; 0-31 exit.
.010742	f0 f2		beq $010736			beq 	_TOKMainNext 				; 32 (space) skip.
.010744	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010747	f0 1d		beq $010766			beq 	_TOKString
.010749	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.01074c	90 1d		bcc $01076b			bcc 	_TOKPunctuation
.01074e	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.010751	90 42		bcc $010795			bcc 	_TOKNumber
.010753	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010756	90 13		bcc $01076b			bcc 	_TOKPunctuation
.010758	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.01075b	90 3d		bcc $01079a			bcc 	_TOKIdentifier
.01075d	80 0c		bra $01076b			bra 	_TOKPunctuation 			; 91-   punctuation.
.01075f					_TOKExit:
.01075f	a9 00 00	lda #$0000			lda 	#$0000
.010762	20 9f 07	jsr $01079f			jsr 	TOKWriteToken
.010765	60		rts				rts
.010766					_TOKString:
.010766	20 3d 08	jsr $01083d			jsr 	TOKQuotedString
.010769	80 cd		bra $010738			bra 	_TOKMainLoop
.01076b					_TOKPunctuation:
.01076b	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01076e	20 a4 08	jsr $0108a4			jsr 	TOKKeywordSearch
.010771	b0 1d		bcs $010790			bcs 	_TOKFoundPunctuation
.010773	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010776	20 a4 08	jsr $0108a4			jsr 	TOKKeywordSearch
.010779	b0 15		bcs $010790			bcs 	_TOKFoundPunctuation
.01077b	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01077e	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010786	61 72 73 65 20 6c 69 6e 65 00
.010790					_TOKFoundPunctuation:
.010790	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; output the token and go round again.
.010793	80 a3		bra $010738			bra 	_TOKMainLoop
.010795					_TOKNumber:
.010795	20 be 07	jsr $0107be			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010798	80 9e		bra $010738			bra 	_TOKMainLoop
.01079a					_TOKIdentifier:
.01079a	20 ff 08	jsr $0108ff			jsr 	TOKIdentifier
.01079d	80 99		bra $010738			bra 	_TOKMainLoop
.01079f					TOKWriteToken:
.01079f	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.0107a1	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.0107a3	e6 0c		inc $0c				inc 	DTemp2
.0107a5	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.0107a7	29 ff 00	and #$00ff			and 	#$00FF
.0107aa	f0 01		beq $0107ad			beq 	_TOKWriteOverflow
.0107ac	60		rts				rts
.0107ad					_TOKWriteOverflow:
.0107ad	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0107b0	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>0107b8	20 6c 6f 6e 67 00
.0107be					TOKInteger:
.0107be	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.0107c0	64 26		stz $26				stz 	DTemp3+2
.0107c2					_TOKINLoop:
.0107c2	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.0107c4	48		pha				pha
.0107c5	a5 24		lda $24				lda 	DTemp3
.0107c7	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.0107c9	26 26		rol $26				rol 	DTemp3+2
.0107cb	06 24		asl $24				asl 	DTemp3
.0107cd	26 26		rol $26				rol 	DTemp3+2
.0107cf	18		clc				clc
.0107d0	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0107d2	85 24		sta $24				sta 	DTemp3
.0107d4	68		pla				pla
.0107d5	65 26		adc $26				adc 	DTemp3+2
.0107d7	85 26		sta $26				sta 	DTemp3+2
.0107d9	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0107db	26 26		rol $26				rol 	DTemp3+2
.0107dd	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0107df	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0107e2	d0 44		bne $010828			bne 	_TOKINSize
.0107e4	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0107e6	29 0f 00	and #$000f			and 	#15
.0107e9	18		clc				clc
.0107ea	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0107ec	85 24		sta $24				sta 	DTemp3
.0107ee	90 02		bcc $0107f2			bcc 	_TOKINNoCarry
.0107f0	e6 26		inc $26				inc 	DTemp3+2
.0107f2					_TOKINNoCarry:
.0107f2	e6 08		inc $08				inc 	DTemp1 						; look at next
.0107f4	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0107f6	29 ff 00	and #$00ff			and 	#$00FF
.0107f9	c9 30 00	cmp #$0030			cmp 	#"0"
.0107fc	90 05		bcc $010803			bcc 	_TOKINGotInteger
.0107fe	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010801	90 bf		bcc $0107c2			bcc		_TOKINLoop
.010803					_TOKINGotInteger:
.010803	a5 24		lda $24				lda 	DTemp3 						; lower word
.010805	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.010808	18		clc				clc
.010809	69 00 40	adc #$4000			adc 	#$4000
.01080c	48		pha				pha 								; save it.
.01080d	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.01080f	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.010811	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.010813	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.010816	b0 10		bcs $010828			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.010818	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.01081b	f0 06		beq $010823			beq 	_TOKINNoShift 				; don't need constant shift.
.01081d	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.010820	20 9f 07	jsr $01079f			jsr 	TOKWriteToken
.010823					_TOKINNoShift:
.010823	68		pla				pla 								; get lower its token
.010824	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; output it
.010827	60		rts				rts
.010828					_TOKINSize:
.010828	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01082b	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>010833	74 6f 6f 20 6c 61 72 67 65 00
.01083d					TOKQuotedString:
.01083d	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.01083f	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.010841	85 32		sta $32				sta 	DTemp4
.010843	a5 0a		lda $0a				lda 	DTemp1+2
.010845	85 34		sta $34				sta 	DTemp4+2
.010847					_TOKQFindSize:
.010847	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010849	e6 08		inc $08				inc 	DTemp1
.01084b	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.01084e	f0 3b		beq $01088b			beq 	_TOQImbalance 				; end of line, and no quote found.
.010850	c9 22 00	cmp #$0022			cmp 	#34
.010853	d0 f2		bne $010847			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010855	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010857	38		sec				sec
.010858	e5 32		sbc $32				sbc 	DTemp4
.01085a	3a		dec a				dec 	a 							; one less character for closing quote
.01085b	85 26		sta $26				sta 	DTemp3+2
.01085d	18		clc				clc
.01085e	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010861	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010864	20 9f 07	jsr $01079f			jsr 	TOKWriteToken
.010867	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010869	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; effectively a byte-write.
.01086c	c6 0c		dec $0c				dec 	DTemp2
.01086e	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010870	f0 0f		beq $010881			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010872					_TOKQWriteString:
.010872	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010874	29 ff 00	and #$00ff			and 	#$00FF
.010877	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; effectively a byte-write.
.01087a	c6 0c		dec $0c				dec 	DTemp2
.01087c	e6 32		inc $32				inc 	DTemp4 						; advance character
.01087e	ca		dex				dex 								; do X times
.01087f	d0 f1		bne $010872			bne 	_TOKQWriteString
.010881					_TOKQWriteEnd:
.010881	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010883	29 01 00	and #$0001			and 	#1
.010886	f0 02		beq $01088a			beq 	_TOKQExit
.010888	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01088a					_TOKQExit:
.01088a	60		rts				rts
.01088b					_TOQImbalance:
.01088b	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01088e	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010896	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.0108a4					TOKKeywordSearch:
.0108a4	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.0108a6	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.0108a9	85 34		sta $34				sta 	DTemp4+2
.0108ab	a2 00 00	ldx #$0000			ldx 	#0
.0108ae					_TOKScan:
.0108ae	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; read the first byte
.0108b2	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.0108b5	f0 46		beq $0108fd			beq 	_TOKFail 					; if zero then we have failed.
.0108b7	3a		dec a				dec 	a 							; -1 gives the length.
.0108b8	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.0108ba	d0 2f		bne $0108eb			bne 	_TOKNext 					; no, then skip to next token.
.0108bc	da		phx				phx 								; save X
.0108bd	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.0108c0					_TOKCompare:
.0108c0	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.0108c2	5f 9f 00 01	eor $01009f,x			eor 	TokenText+1,x
.0108c6	29 ff 00	and #$00ff			and 	#$00FF
.0108c9	d0 1f		bne $0108ea			bne 	_TOKPopNext 				; if different, pop and goto next.
.0108cb	e8		inx				inx 								; bump X and Y.
.0108cc	c8		iny				iny
.0108cd	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.0108cf	d0 ef		bne $0108c0			bne 	_TOKCompare
.0108d1	98		tya				tya 								; add length to the text pointer
.0108d2	18		clc				clc
.0108d3	65 08		adc $08				adc 	DTemp1
.0108d5	85 08		sta $08				sta 	DTemp1
.0108d7	fa		plx				plx 								; restore X.
.0108d8	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the type/token bit.
.0108dc	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0108df	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0108e0	4a		lsr a				lsr		a
.0108e1	4a		lsr a				lsr 	a
.0108e2	eb		xba				xba
.0108e3	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0108e5	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0108e8	38		sec				sec
.0108e9	60		rts				rts
.0108ea					_TOKPopNext:
.0108ea	fa		plx				plx 								; restore X.
.0108eb					_TOKNext:
.0108eb	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the token skip again.
.0108ef	29 0f 00	and #$000f			and 	#$000F
.0108f2	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0108f4	8a		txa				txa
.0108f5	18		clc				clc
.0108f6	65 14		adc $14				adc 	DSignCount
.0108f8	aa		tax				tax
.0108f9	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0108fb	80 b1		bra $0108ae			bra 	_TOKScan
.0108fd					_TOKFail:
.0108fd	18		clc				clc
.0108fe	60		rts				rts
.0108ff					TOKIdentifier:
.0108ff	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010901	85 24		sta $24				sta 	DTemp3
.010903					_TOKIFindLength:
.010903	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.010905	a7 08		lda [$08]			lda 	[DTemp1]
.010907	29 ff 00	and #$00ff			and 	#$00FF
.01090a	20 aa 09	jsr $0109aa			jsr 	TOKIsIdentifierCharacter
.01090d	b0 f4		bcs $010903			bcs 	_TOKIFindLength
.01090f	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.010911	38		sec				sec
.010912	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.010914	85 36		sta $36				sta 	DTemp5
.010916	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.010918	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.01091b	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.01091d	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.01091f	29 ff 00	and #$00ff			and 	#$00FF
.010922	c9 24 00	cmp #$0024			cmp 	#"$"
.010925	d0 0b		bne $010932			bne 	_TOKINotString
.010927	e6 08		inc $08				inc 	DTemp1 						; skip $
.010929	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.01092b	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01092d	09 00 20	ora #$2000			ora 	#IDTypeMask
.010930	85 26		sta $26				sta 	DTemp3+2
.010932					_TOKINotString:
.010932	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010934	29 ff 00	and #$00ff			and 	#$00FF
.010937	c9 28 00	cmp #$0028			cmp 	#"("
.01093a	d0 0b		bne $010947			bne 	_TOKINotArray
.01093c	e6 08		inc $08				inc 	DTemp1 						; skip (
.01093e	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010940	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.010942	09 00 10	ora #$1000			ora 	#IDArrayMask
.010945	85 26		sta $26				sta 	DTemp3+2
.010947					_TOKINotArray:
.010947	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010949	85 08		sta $08				sta 	DTemp1
.01094b	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.01094d	20 a4 08	jsr $0108a4			jsr 	TOKKeywordSearch
.010950	90 04		bcc $010956			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010952	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; if CS write token and exit.
.010955	60		rts				rts
.010956					_TOKIIdentifier:
.010956	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010958	e6 08		inc $08				inc 	DTemp1
.01095a	20 96 09	jsr $010996			jsr		_TOKIToConstant 			; convert to range 0-35
.01095d	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.01095f	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010961	f0 1d		beq $010980			beq 	_TOKINoSecond
.010963	48		pha				pha 								; save current on stack.
.010964	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010966	e6 08		inc $08				inc 	DTemp1
.010968	20 96 09	jsr $010996			jsr		_TOKIToConstant 			; convert to range 0-35
.01096b	85 14		sta $14				sta 	DSignCount 					; save it.
.01096d	0a		asl a				asl 	a 							; x 4
.01096e	0a		asl a				asl 	a
.01096f	65 14		adc $14				adc 	DSignCount 					; x 5
.010971	0a		asl a				asl 	a 							; x 10
.010972	65 14		adc $14				adc 	DSignCount 					; x 11
.010974	0a		asl a				asl 	a 							; x 22
.010975	0a		asl a				asl 	a 							; x 44
.010976	65 14		adc $14				adc 	DSignCount 					; x 45
.010978	85 14		sta $14				sta 	DSignCount
.01097a	68		pla				pla 								; get old token and add x 45
.01097b	18		clc				clc
.01097c	65 14		adc $14				adc 	DSignCount
.01097e	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010980					_TOKINoSecond:
.010980	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010982	f0 03		beq $010987			beq 	_TOKINotLast				; if yes
.010984	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010987					_TOKINotLast:
.010987	20 9f 07	jsr $01079f			jsr 	TOKWriteToken 				; output the token
.01098a	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.01098c	d0 c8		bne $010956			bne 	_TOKIIdentifier
.01098e					_TOKIOut:
.01098e	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010990	18		clc				clc
.010991	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010993	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010995	60		rts				rts
.010996					_TOKIToConstant:
.010996	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010999	c9 41 00	cmp #$0041			cmp 	#65
.01099c	90 04		bcc $0109a2			bcc 	_TOKITInteger
.01099e	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.0109a1	60		rts				rts
.0109a2					_TOKITInteger:
.0109a2	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.0109a5	18		clc				clc
.0109a6	69 1b 00	adc #$001b			adc 	#27
.0109a9	60		rts				rts
.0109aa					TOKIsIdentifierCharacter:
.0109aa	c9 30 00	cmp #$0030			cmp 	#"0"
.0109ad	90 0f		bcc $0109be			bcc 	_TOKIIFail
.0109af	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0109b2	90 0c		bcc $0109c0			bcc 	_TOKIIOk
.0109b4	c9 41 00	cmp #$0041			cmp 	#"A"
.0109b7	90 05		bcc $0109be			bcc 	_TOKIIFail
.0109b9	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0109bc	90 02		bcc $0109c0			bcc 	_TOKIIOk
.0109be					_TOKIIFail:
.0109be	18		clc				clc
.0109bf	60		rts				rts
.0109c0					_TOKIIOk:
.0109c0	38		sec				sec
.0109c1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0109c2					Binary_Add:
.0109c2	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0109c4	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0109c6	30 12		bmi $0109da		bmi 	_BATypeError
.0109c8	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0109ca	30 3f		bmi $010a0b		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0109cc	18		clc			clc 										; add the results
.0109cd	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109cf	75 02		adc $02,x		adc 	EXSValueL+2,x
.0109d1	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109d3	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109d5	75 22		adc $22,x		adc 	EXSValueH+2,x
.0109d7	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109d9	60		rts			rts
.0109da					_BATypeError:
.0109da	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0109dd	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0109e5	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0109f5	65 73 00
.0109f8					_BALengthError:
.0109f8	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0109fb	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a03	6f 6f 20 6c 6f 6e 67 00
.010a0b					_BAConcatenateString:
.010a0b	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a0d	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a0f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a11	85 0c		sta $0c			sta 	DTemp2
.010a13	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a15	18		clc			clc 										; work out the total length
.010a16	b2 08		lda ($08)		lda 	(DTemp1)
.010a18	72 0c		adc ($0c)		adc 	(DTemp2)
.010a1a	b0 14		bcs $010a30		bcs 	_BAConcatLengthError 				; string is too long.
.010a1c	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010a1e	20 69 06	jsr $010669		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010a21	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010a23	74 20		stz $20,x		stz 	EXSValueH+0,x
.010a25	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010a27	20 a3 06	jsr $0106a3		jsr 	StringCreateCopy
.010a2a	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010a2c	20 a3 06	jsr $0106a3		jsr 	StringCreateCopy
.010a2f	60		rts			rts
.010a30					_BAConcatLengthError:
.010a30	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010a33	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a3b	6f 6f 20 6c 6f 6e 67 00
.010a43					Binary_Subtract:
.010a43	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a46	38		sec			sec
.010a47	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a49	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a4b	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a4d	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a4f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a51	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a53	60		rts			rts
.010a54					Binary_ShiftRight:
.010a54	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a57	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a59	29 3f 00	and #$003f		and 	#63
.010a5c	f0 07		beq $010a65		beq		_Binary_SRExit
.010a5e					_Binary_SRLoop:
.010a5e	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010a60	76 00		ror $00,x		ror 	EXSValueL+0,x
.010a62	3a		dec a			dec 	a
.010a63	d0 f9		bne $010a5e		bne 	_Binary_SRLoop
.010a65					_Binary_SRExit:
.010a65	60		rts			rts
.010a66					Binary_ShiftLeft:
.010a66	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a69	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a6b	29 3f 00	and #$003f		and 	#63
.010a6e	f0 07		beq $010a77		beq		_Binary_SLExit
.010a70					_Binary_SLLoop:
.010a70	16 00		asl $00,x		asl 	EXSValueL+0,x
.010a72	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a74	3a		dec a			dec 	a
.010a75	d0 f9		bne $010a70		bne 	_Binary_SLLoop
.010a77					_Binary_SLExit:
.010a77	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010a78					Binary_And:
.010a78	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a7b	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a7d	35 02		and $02,x		and 	EXSValueL+2,x
.010a7f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a81	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a83	35 22		and $22,x		and 	EXSValueH+2,x
.010a85	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a87	60		rts			rts
.010a88					Binary_Or:
.010a88	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a8b	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a8d	15 02		ora $02,x		ora 	EXSValueL+2,x
.010a8f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a91	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a93	15 22		ora $22,x		ora 	EXSValueH+2,x
.010a95	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a97	60		rts			rts
.010a98					Binary_Xor:
.010a98	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010a9b	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a9d	55 02		eor $02,x		eor 	EXSValueL+2,x
.010a9f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010aa1	b5 20		lda $20,x		lda		EXSValueH+0,x
.010aa3	55 22		eor $22,x		eor 	EXSValueH+2,x
.010aa5	95 20		sta $20,x		sta 	EXSValueH+0,x
.010aa7	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010aa8					Binary_Equals:
.010aa8	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010aab	b0 0e		bcs $010abb		bcs 	_BEString
.010aad	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010aaf	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010ab1	d0 4f		bne $010b02		bne 	Compare_Fail
.010ab3	b5 20		lda $20,x		lda 	EXSValueH,x
.010ab5	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010ab7	d0 49		bne $010b02		bne 	Compare_Fail
.010ab9	80 3f		bra $010afa		bra 	Compare_Succeed
.010abb					_BEString:
.010abb	09 00 00	ora #$0000		ora 	#$0000
.010abe	f0 3a		beq $010afa		beq 	Compare_Succeed
.010ac0	80 40		bra $010b02		bra 	Compare_Fail
.010ac2					Binary_NotEquals:
.010ac2	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ac5	b0 0e		bcs $010ad5		bcs 	_BNEString
.010ac7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010ac9	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010acb	d0 2d		bne $010afa		bne 	Compare_Succeed
.010acd	b5 20		lda $20,x		lda 	EXSValueH,x
.010acf	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010ad1	d0 27		bne $010afa		bne 	Compare_Succeed
.010ad3	80 2d		bra $010b02		bra 	Compare_Fail
.010ad5					_BNEString:
.010ad5	09 00 00	ora #$0000		ora 	#$0000
.010ad8	d0 20		bne $010afa		bne 	Compare_Succeed
.010ada	80 26		bra $010b02		bra 	Compare_Fail
.010adc					Binary_Less:
.010adc	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010adf	b0 12		bcs $010af3		bcs 	_BLString
.010ae1	38		sec			sec
.010ae2	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010ae4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae6	b5 20		lda $20,x		lda 	EXSValueH,x
.010ae8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010aea	50 03		bvc $010aef		bvc 	*+5
.010aec	49 00 80	eor #$8000		eor 	#$8000
.010aef	30 09		bmi $010afa		bmi 	Compare_Succeed
.010af1	80 0f		bra $010b02		bra 	Compare_Fail
.010af3					_BLString:
.010af3	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010af6	f0 02		beq $010afa		beq 	Compare_Succeed
.010af8	80 08		bra $010b02		bra 	Compare_Fail
.010afa					Compare_Succeed:
.010afa	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010afd	95 00		sta $00,x		sta 	EXSValueL,x
.010aff	95 20		sta $20,x		sta 	EXSValueH,x
.010b01	60		rts			rts
.010b02					Compare_Fail:
.010b02	74 00		stz $00,x		stz 	EXSValueL,x
.010b04	74 20		stz $20,x		stz 	EXSValueH,x
.010b06	60		rts			rts
.010b07					Binary_GreaterEqual:
.010b07	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b0a	b0 12		bcs $010b1e		bcs 	_BGEString
.010b0c	38		sec			sec
.010b0d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b0f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b11	b5 20		lda $20,x		lda 	EXSValueH,x
.010b13	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b15	50 03		bvc $010b1a		bvc 	*+5
.010b17	49 00 80	eor #$8000		eor 	#$8000
.010b1a	10 de		bpl $010afa		bpl 	Compare_Succeed
.010b1c	80 e4		bra $010b02		bra 	Compare_Fail
.010b1e					_BGEString:
.010b1e	09 00 00	ora #$0000		ora 	#$0000
.010b21	10 d7		bpl $010afa		bpl 	Compare_Succeed
.010b23	80 dd		bra $010b02		bra 	Compare_Fail
.010b25					Binary_LessEqual:
.010b25	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b28	b0 12		bcs $010b3c		bcs 	_BLEString
.010b2a	18		clc			clc 									; numeric <= signed
.010b2b	b5 00		lda $00,x		lda 	EXSValueL,x
.010b2d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b2f	b5 20		lda $20,x		lda 	EXSValueH,x
.010b31	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b33	50 03		bvc $010b38		bvc 	*+5
.010b35	49 00 80	eor #$8000		eor 	#$8000
.010b38	30 c0		bmi $010afa		bmi 	Compare_Succeed
.010b3a	80 c6		bra $010b02		bra 	Compare_Fail
.010b3c					_BLEString:
.010b3c	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010b3f	d0 b9		bne $010afa		bne 	Compare_Succeed
.010b41	80 bf		bra $010b02		bra 	Compare_Fail
.010b43					Binary_Greater:
.010b43	20 61 0b	jsr $010b61		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b46	b0 12		bcs $010b5a		bcs 	_BGString
.010b48	18		clc			clc 									; numeric > signed
.010b49	b5 00		lda $00,x		lda 	EXSValueL,x
.010b4b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b4d	b5 20		lda $20,x		lda 	EXSValueH,x
.010b4f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b51	50 03		bvc $010b56		bvc 	*+5
.010b53	49 00 80	eor #$8000		eor 	#$8000
.010b56	10 a2		bpl $010afa		bpl 	Compare_Succeed
.010b58	80 a8		bra $010b02		bra 	Compare_Fail
.010b5a					_BGString:
.010b5a	c9 01 00	cmp #$0001		cmp 	#$0001
.010b5d	f0 9b		beq $010afa		beq 	Compare_Succeed
.010b5f	80 a1		bra $010b02		bra 	Compare_Fail
.010b61					CompareTypeCheck:
.010b61	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010b63	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010b65	30 06		bmi $010b6d		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010b67	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010b69	30 1c		bmi $010b87		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010b6b	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010b6c	60		rts			rts
.010b6d					_CTCFail:
.010b6d	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010b70	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010b78	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010b87					_CTCStringCompare:
.010b87	20 21 06	jsr $010621		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010b8a	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010b8c	85 08		sta $08			sta 	DTemp1
.010b8e	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010b90	85 0c		sta $0c			sta 	DTemp2
.010b92	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010b95	a8		tay			tay
.010b96	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010b98	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010b9a	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b9c	90 02		bcc $010ba0		bcc 	_CTCSmallest
.010b9e	b2 0c		lda ($0c)		lda 	(DTemp2)
.010ba0					_CTCSmallest:
.010ba0	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010ba2					_CTCCompare:
.010ba2	c8		iny			iny 									; look at next character (done first, first char is size)
.010ba3	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010ba5	30 16		bmi $010bbd		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010ba7	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010ba9	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010bab	f0 f5		beq $010ba2		beq 	_CTCCompare 					; if zero, try the next character.
.010bad	b0 07		bcs $010bb6		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010baf					_CTCLess:
.010baf	c2 20		rep #$20		rep 	#$20
.010bb1	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010bb4	80 14		bra $010bca		bra 	_CTCExit
.010bb6					_CTCGreater:
.010bb6	c2 20		rep #$20		rep 	#$20
.010bb8	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010bbb	80 0d		bra $010bca		bra 	_CTCExit
.010bbd					_CTCEqualSoFar:
.010bbd	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010bbf	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010bc1	90 ec		bcc $010baf		bcc 	_CTCLess
.010bc3	d0 f1		bne $010bb6		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010bc5	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010bc7	a9 00 00	lda #$0000		lda 	#$0000
.010bca					_CTCExit:
.010bca	38		sec			sec 									; return with CS indicating string comparison.
.010bcb	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010bcc					Binary_Divide:
.010bcc	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010bcf	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010bd1	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010bd3	d0 14		bne $010be9		bne 	_BinaryDivide_Ok
.010bd5	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010bd8	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010be0	20 62 79 20 7a 65 72 6f 00
.010be9					_BinaryDivide_Ok:
.010be9	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010beb	64 0a		stz $0a			stz 	DTemp1+2
.010bed	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010bef	5a		phy			phy 										; save Y (bit counter)
.010bf0	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010bf2	10 07		bpl $010bfb		bpl 	_BinaryDivide_RightDone
.010bf4	e8		inx			inx
.010bf5	e8		inx			inx
.010bf6	20 31 0c	jsr $010c31		jsr 	Binary_DivNegate
.010bf9	ca		dex			dex
.010bfa	ca		dex			dex
.010bfb					_BinaryDivide_RightDone:
.010bfb	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010bfd	10 03		bpl $010c02		bpl 	_BinaryDivide_LeftDone
.010bff	20 31 0c	jsr $010c31		jsr 	Binary_DivNegate
.010c02					_BinaryDivide_LeftDone:
.010c02	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c05					_BinaryDivide_Loop:
.010c05	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c07	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c09	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c0b	26 0a		rol $0a			rol 	DTemp1+2
.010c0d	38		sec			sec											; calculate A-M
.010c0e	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c10	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c12	85 0c		sta $0c			sta 	DTemp2
.010c14	a5 0a		lda $0a			lda 	DTemp1+2
.010c16	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c18	90 08		bcc $010c22		bcc 	_Binary_NoSubract 					; if A < M skip this
.010c1a	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010c1c	a5 0c		lda $0c			lda 	DTemp2
.010c1e	85 08		sta $08			sta 	DTemp1+0
.010c20	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010c22					_Binary_NoSubract:
.010c22	88		dey			dey 										; do it 32 times.
.010c23	d0 e0		bne $010c05		bne 	_BinaryDivide_Loop
.010c25					_BinaryDivide_Exit:
.010c25	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010c27	29 01 00	and #$0001		and 	#1
.010c2a	f0 03		beq $010c2f		beq 	_BinaryDivide_Exit2
.010c2c	20 31 0c	jsr $010c31		jsr 	Binary_DivNegate
.010c2f					_BinaryDivide_Exit2:
.010c2f	7a		ply			ply 										; restore Y
.010c30	60		rts			rts
.010c31					Binary_DivNegate:
.010c31	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010c33	38		sec			sec 										; negate the value at stack X.
.010c34	a9 00 00	lda #$0000		lda 	#$0000
.010c37	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010c39	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c3b	a9 00 00	lda #$0000		lda 	#$0000
.010c3e	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010c40	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c42	60		rts			rts
.010c43					Binary_Modulus:
.010c43	20 cc 0b	jsr $010bcc		jsr 	Binary_Divide 						; do the divide
.010c46	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010c48	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c4a	a5 0a		lda $0a			lda 	DTemp1+2
.010c4c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c4e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010c4f					Binary_Multiply:
.010c4f	20 01 06	jsr $010601		jsr 	CheckBothNumeric 					; check both values are numeric
.010c52	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010c54	85 08		sta $08			sta 	DTemp1
.010c56	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c58	85 0a		sta $0a			sta		DTemp1+2
.010c5a	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010c5c	74 20		stz $20,x		stz 	EXSValueH+0,x
.010c5e					_BinaryMultiply_Loop:
.010c5e	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010c60	05 0a		ora $0a			ora 	DTemp1+2
.010c62	f0 1e		beq $010c82		beq 	_BinaryMultiply_Exit
.010c64	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010c66	29 01 00	and #$0001		and 	#1
.010c69	f0 0d		beq $010c78		beq 	_BinaryMultiply_NoAdd
.010c6b	18		clc			clc 										; add multiplicand to result.
.010c6c	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010c6e	75 02		adc $02,x		adc 	EXSValueL+2,x
.010c70	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c72	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c74	75 22		adc $22,x		adc 	EXSValueH+2,x
.010c76	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c78					_BinaryMultiply_NoAdd:
.010c78	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010c7a	66 08		ror $08			ror 	DTemp1
.010c7c	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010c7e	36 22		rol $22,x		rol 	EXSValueH+2,x
.010c80	80 dc		bra $010c5e		bra 	_BinaryMultiply_Loop 				; go round again.
.010c82					_BinaryMultiply_Exit:
.010c82	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010c83					Function_Len:
.010c83	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010c86	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c89	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010c8c	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010c8e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010c91	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010c94	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010c96	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c98	60		rts				rts
.010c99					Function_Abs:
.010c99	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010c9c	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c9f	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010ca2	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010ca4	30 07		bmi $010cad			bmi 	_FAbsNegative 				; negate it if negative
.010ca6	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010ca8	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010caa	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cac	60		rts				rts
.010cad					_FAbsNegative:
.010cad	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010cae	a9 00 00	lda #$0000			lda 	#0
.010cb1	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010cb3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cb5	a9 00 00	lda #$0000			lda 	#0
.010cb8	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010cba	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cbc	60		rts				rts
.010cbd					Function_Sgn:
.010cbd	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns integer
.010cc0	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get an integer
.010cc3	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010cc6	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010cc8	74 20		stz $20,x			stz 	EXSValueH+0,x
.010cca	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010ccc	30 07		bmi $010cd5			bmi 	_FSgnNegative 				; set to -1 if signed
.010cce	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010cd0	f0 02		beq $010cd4			beq 	_FSgnExit
.010cd2	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010cd4					_FSgnExit:
.010cd4	60		rts				rts
.010cd5					_FSgnNegative:
.010cd5	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010cd8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cda	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cdc	60		rts				rts
.010cdd					Function_Random:
.010cdd	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010ce0	20 21 06	jsr $010621			jsr 	ResetTypeInteger
.010ce3	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010ce5	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010ce7	d0 0a		bne $010cf3			bne 	_Rnd_NotZero
.010ce9	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010cec	85 10		sta $10				sta 	DRandom
.010cee	a9 ea 00	lda #$00ea			lda 	#$EA
.010cf1	85 12		sta $12				sta 	DRandom+2
.010cf3					_Rnd_NotZero:
.010cf3	20 fe 0c	jsr $010cfe			jsr 	_Rnd_Process 				; call randomiser twice
.010cf6	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cf8	20 fe 0c	jsr $010cfe			jsr 	_Rnd_Process
.010cfb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cfd	60		rts				rts
.010cfe					_Rnd_Process:
.010cfe	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d00	26 12		rol $12				rol 	DRandom+2
.010d02	90 0e		bcc $010d12			bcc 	_Rnd_Exit
.010d04	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d06	49 54 d4	eor #$d454			eor 	#$D454
.010d09	85 10		sta $10				sta 	DRandom
.010d0b	a5 12		lda $12				lda 	DRandom+2
.010d0d	49 d5 55	eor #$55d5			eor 	#$55D5
.010d10	85 12		sta $12				sta 	DRandom+2
.010d12					_Rnd_Exit:
.010d12	a5 10		lda $10				lda 	DRandom
.010d14	45 12		eor $12				eor 	DRandom+2
.010d16	60		rts				rts
.010d17					Function_Chr:
.010d17	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string
.010d1a	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get integer
.010d1d	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010d20	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d23	d0 12		bne $010d37			bne 	_FCHBad
.010d25	48		pha				pha  								; save char # on stack
.010d26	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010d29	20 69 06	jsr $010669			jsr 	StringTempAllocate
.010d2c	68		pla				pla 								; restore character number
.010d2d	20 95 06	jsr $010695			jsr 	StringWriteCharacter 		; write it out.
.010d30	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010d32	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d34	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d36	60		rts				rts
.010d37					_FCHBad:
.010d37	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010d3a	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010d42	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010d4f					Function_Asc:
.010d4f	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010d52	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get string
.010d55	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010d58	a8		tay				tay 								; string address in Y
.010d59	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010d5c	29 ff 00	and #$00ff			and 	#$00FF
.010d5f	f0 0b		beq $010d6c			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010d61	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010d64	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010d67	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d69	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d6b	60		rts				rts
.010d6c					_FASBad:
.010d6c	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010d6f	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010d77	65 20 66 6f 72 20 61 73 63 28 29 00
.010d83					Function_SPC:
.010d83	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string
.010d86	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010d89	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010d8c	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d8f	d0 17		bne $010da8			bne 	_FSPBad
.010d91	48		pha				pha 								; save length
.010d92	20 69 06	jsr $010669			jsr 	StringTempAllocate 			; allocate character space
.010d95	7a		ply				ply 								; get count in Y
.010d96	f0 09		beq $010da1			beq 	_FSPExit 					; if zero, just empty string
.010d98					_FSPCopy:
.010d98	a9 20 00	lda #$0020			lda 	#" "						; space character
.010d9b	20 95 06	jsr $010695			jsr 	StringWriteCharacter 		; write it out.
.010d9e	88		dey				dey
.010d9f	d0 f7		bne $010d98			bne 	_FSPCopy	 				; do it Y times
.010da1					_FSPExit:
.010da1	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010da3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010da5	74 20		stz $20,x			stz 	EXSValueH+0,x
.010da7	60		rts				rts
.010da8					_FSPBad:
.010da8	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010dab	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010db3	65 20 66 6f 72 20 73 70 63 28 29 00
.010dbf					Function_Inkey:
.010dbf	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010dc2	20 21 06	jsr $010621			jsr 	ResetTypeInteger
.010dc5	20 7c 1d	jsr $011d7c			jsr 	HWInkey 					; read current key
.010dc8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010dca	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dcc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010dcd					Function_LEFT:
.010dcd	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.010dd0	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dd3	48		pha				pha 								; save string on stack.
.010dd4	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; get count
.010dd7	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger
.010dda	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ddd	d0 6d		bne $010e4c			bne 	FNStringParameter
.010ddf	85 08		sta $08				sta 	DTemp1 						; save count.
.010de1	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket
.010de4	7a		ply				ply 								; Y points to string.
.010de5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010de8	29 ff 00	and #$00ff			and 	#$00FF
.010deb	f0 52		beq $010e3f			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ded	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010def	f0 55		beq $010e46			beq 	FNStringY 					; return string in Y if current len = required len.
.010df1	90 53		bcc $010e46			bcc 	FNStringY 					; if current < required return whole thing.
.010df3	c8		iny				iny 								; take from here - start of string
.010df4	80 33		bra $010e29			bra 	FNDTemp1Characters
.010df6					Function_RIGHT:
.010df6	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.010df9	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dfc	48		pha				pha 								; save string on stack.
.010dfd	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; get count
.010e00	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger
.010e03	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e06	d0 44		bne $010e4c			bne 	FNStringParameter
.010e08	85 08		sta $08				sta 	DTemp1 						; save count.
.010e0a	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket
.010e0d	7a		ply				ply 								; Y points to string.
.010e0e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e11	29 ff 00	and #$00ff			and 	#$00FF
.010e14	f0 29		beq $010e3f			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e16	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e18	f0 2c		beq $010e46			beq 	FNStringY 					; return string in Y if current len = required len.
.010e1a	90 2a		bcc $010e46			bcc 	FNStringY 					; if current < required return whole thing.
.010e1c	38		sec				sec 								; current-required is the number to skip
.010e1d	e5 08		sbc $08				sbc 	DTemp1
.010e1f	85 0a		sta $0a				sta 	DTemp1+2
.010e21	98		tya				tya
.010e22	18		clc				clc
.010e23	65 0a		adc $0a				adc 	DTemp1+2
.010e25	a8		tay				tay
.010e26	c8		iny				iny 								; +1 for the count.
.010e27	80 00		bra $010e29			bra 	FNDTemp1Characters
.010e29					FNDTemp1Characters:
.010e29	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010e2b	f0 12		beq $010e3f			beq 	FNStringEmpty 				; if zero, return empty string.
.010e2d	20 69 06	jsr $010669			jsr 	StringTempAllocate
.010e30	48		pha				pha 								; save the address
.010e31					_FND1Loop:
.010e31	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010e34	20 95 06	jsr $010695			jsr 	StringWriteCharacter
.010e37	c8		iny				iny
.010e38	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010e3a	d0 f5		bne $010e31			bne 	_FND1Loop
.010e3c	7a		ply				ply 								; string address in Y
.010e3d	80 07		bra $010e46			bra 	FNStringY
.010e3f					FNStringEmpty:
.010e3f	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010e42	20 69 06	jsr $010669			jsr 	StringTempAllocate 			; put address of it in Y
.010e45	a8		tay				tay
.010e46					FNStringY:
.010e46	98		tya				tya
.010e47	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e49	74 22		stz $22,x			stz 	EXSValueH+2,x
.010e4b	60		rts				rts
.010e4c					FNStringParameter:
.010e4c	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010e4f	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010e57	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010e64					Function_MID:
.010e64	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.010e67	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e6a	48		pha				pha 								; save string on stack.
.010e6b	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; get offset (n)
.010e6e	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger
.010e71	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e74	d0 d6		bne $010e4c			bne 	FNStringParameter
.010e76	c9 00 00	cmp #$0000			cmp 	#0
.010e79	f0 d1		beq $010e4c			beq 	FNStringParameter 			; or zero
.010e7b	48		pha				pha 								; save start position on stack.
.010e7c	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010e7f	85 08		sta $08				sta 	DTemp1
.010e81	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010e83	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010e86	d0 0e		bne $010e96			bne 	_FMINoThird
.010e88	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010e8a	e6 06		inc $06				inc 	DCodePtr
.010e8c	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010e8f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e92	d0 b8		bne $010e4c			bne 	FNStringParameter
.010e94	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010e96					_FMINoThird:
.010e96	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket
.010e99	68		pla				pla 								; get offset position
.010e9a	85 0c		sta $0c				sta 	DTemp2
.010e9c	7a		ply				ply 								; get address of string in Y
.010e9d	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010ea0	29 ff 00	and #$00ff			and 	#$00FF
.010ea3	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010ea5	90 98		bcc $010e3f			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010ea7	38		sec				sec 								; calculate number of characters left after
.010ea8	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010eaa	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010eab	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010ead	b0 02		bcs $010eb1			bcs 	_FMISufficient
.010eaf	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010eb1					_FMISufficient:
.010eb1	98		tya				tya 								; get address
.010eb2	18		clc				clc
.010eb3	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010eb5	a8		tay				tay 								; put in Y
.010eb6	82 70 ff	brl $010e29			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010eb9					Function_Peek:
.010eb9	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010ebc	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ebf	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010ec2	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ec4	84 0a		sty $0a				sty 	DTemp1+2
.010ec6	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ec9	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ecb	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010ece	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ed0	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ed2	60		rts				rts
.010ed3					Function_Deek:
.010ed3	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010ed6	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ed9	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010edc	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ede	84 0a		sty $0a				sty 	DTemp1+2
.010ee0	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ee3	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ee5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ee7	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ee9	60		rts				rts
.010eea					Function_Leek:
.010eea	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010eed	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ef0	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check )
.010ef3	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ef5	84 0a		sty $0a				sty 	DTemp1+2
.010ef7	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010efa	b7 08		lda [$08],y			lda 	[DTemp1],y
.010efc	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010efe	c8		iny				iny
.010eff	c8		iny				iny
.010f00	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f02	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f04	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010f05					Function_VAL:
.010f05	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns an integer
.010f08	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f0b	48		pha				pha 								; put string address on stack.
.010f0c	20 1c 0f	jsr $010f1c			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f0f	7a		ply				ply 								; get string address back
.010f10	da		phx				phx 								; save X on stack
.010f11	aa		tax				tax 								; base in X
.010f12	98		tya				tya 								; address in A
.010f13	20 56 0f	jsr $010f56			jsr 	StringToInteger
.010f16	fa		plx				plx 								; restore X
.010f17	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f19	94 20		sty $20,x			sty 	EXSValueH+0,x
.010f1b	60		rts				rts
.010f1c					VALGetBase:
.010f1c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010f1e	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010f21	f0 07		beq $010f2a			beq 	_VGBAlternate
.010f23	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket			; expect ), and return 10.
.010f26	a9 0a 00	lda #$000a			lda 	#10
.010f29	60		rts				rts
.010f2a					_VGBAlternate:
.010f2a	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; skip comma.
.010f2d	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get base
.010f30	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010f33	d0 0e		bne $010f43			bne 	_VGBBadBase
.010f35	c9 02 00	cmp #$0002			cmp 	#2
.010f38	90 09		bcc $010f43			bcc 	_VGBBadBase
.010f3a	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010f3d	b0 04		bcs $010f43			bcs 	_VGBBadBase
.010f3f	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; get right bracket and return.
.010f42	60		rts				rts
.010f43					_VGBBadBase:
.010f43	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010f46	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010f4e	65 72 20 42 61 73 65 00
.010f56					StringToInteger:
.010f56	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010f58	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010f5a	29 ff 00	and #$00ff			and 	#$00FF
.010f5d	85 26		sta $26				sta 	DTemp3+2
.010f5f	f0 6e		beq $010fcf			beq 	_STIError 					; if length zero it's bad.
.010f61	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010f63	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010f65	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010f67	64 0a		stz $0a				stz 	DTemp1+2
.010f69	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010f6b	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010f6e	48		pha				pha 								; push on stack
.010f6f	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010f72	d0 06		bne $010f7a			bne 	_STILoop
.010f74	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010f76	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010f78	f0 55		beq $010fcf			beq 	_STIError 					; if only - then error.
.010f7a					_STILoop:
.010f7a	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010f7c	20 ee 0f	jsr $010fee			jsr 	MultiplyTemp1ByA
.010f7f	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010f81	29 ff 00	and #$00ff			and 	#$00FF
.010f84	20 df 0f	jsr $010fdf			jsr 	ConvertUpperCase	 		; make U/C
.010f87	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010f8a	90 43		bcc $010fcf			bcc 	_STIError
.010f8c	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010f8f	90 0e		bcc $010f9f			bcc 	_STIOkay1
.010f91	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010f94	90 39		bcc $010fcf			bcc 	_STIError
.010f96	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010f99	b0 34		bcs $010fcf			bcs 	_STIError
.010f9b	18		clc				clc 								; shift to correct range.
.010f9c	69 09 00	adc #$0009			adc 	#9
.010f9f					_STIOkay1:
.010f9f	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010fa2	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010fa4	b0 29		bcs $010fcf			bcs 	_STIError
.010fa6	18		clc				clc 								; add A to DTemp1
.010fa7	65 08		adc $08				adc 	DTemp1
.010fa9	85 08		sta $08				sta 	DTemp1
.010fab	90 02		bcc $010faf			bcc 	_STINoCarry
.010fad	e6 0a		inc $0a				inc 	DTemp1+2
.010faf					_STINoCarry:
.010faf	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010fb1	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010fb3	d0 c5		bne $010f7a			bne 	_STILoop 					; loop back.
.010fb5	68		pla				pla 								; get optional minus bac
.010fb6	c9 2d 00	cmp #$002d			cmp 	#"-"
.010fb9	d0 0f		bne $010fca			bne 	_STINotNegative 			; handle the negative character
.010fbb	38		sec				sec 								; negate DTemp1
.010fbc	a9 00 00	lda #$0000			lda 	#0
.010fbf	e5 08		sbc $08				sbc 	DTemp1
.010fc1	85 08		sta $08				sta 	DTemp1
.010fc3	a9 00 00	lda #$0000			lda 	#0
.010fc6	e5 0a		sbc $0a				sbc 	DTemp1+2
.010fc8	85 0a		sta $0a				sta 	DTemp1+2
.010fca					_STINotNegative:
.010fca	a5 08		lda $08				lda 	DTemp1 						; get the result
.010fcc	a4 0a		ldy $0a				ldy 	DTemp1+2
.010fce	60		rts				rts
.010fcf					_STIError:
.010fcf	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>010fd2	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010fda	74 61 6e 74 00
.010fdf					ConvertUpperCase:
.010fdf	c9 61 00	cmp #$0061			cmp 	#'a'
.010fe2	90 09		bcc $010fed			bcc 	_CUCExit
.010fe4	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010fe7	b0 04		bcs $010fed			bcs 	_CUCExit
.010fe9	38		sec				sec
.010fea	e9 20 00	sbc #$0020			sbc 	#32
.010fed					_CUCExit:
.010fed	60		rts				rts
.010fee					MultiplyTemp1ByA:
.010fee					_MTGeneral:
.010fee	da		phx				phx
.010fef	aa		tax				tax 								; multiplier in X
.010ff0	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010ff2	85 0c		sta $0c				sta 	DTemp2
.010ff4	a5 0a		lda $0a				lda 	DTemp1+2
.010ff6	85 0e		sta $0e				sta 	DTemp2+2
.010ff8	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010ffa	64 0a		stz $0a				stz 	DTemp1+2
.010ffc	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010fff					_MTLoop:
.010fff	8a		txa				txa 								; shift X right into C
.011000	4a		lsr a				lsr 	a
.011001	aa		tax				tax
.011002	90 10		bcc $011014			bcc 	_MTNoAdd
.011004	18		clc				clc
.011005	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.011007	65 0c		adc $0c				adc 	DTemp2
.011009	85 08		sta $08				sta 	DTemp1
.01100b	a5 0a		lda $0a				lda 	DTemp1+2
.01100d	65 0e		adc $0e				adc 	DTemp2+2
.01100f	85 0a		sta $0a				sta 	DTemp1+2
.011011	90 01		bcc $011014			bcc 	_MTNoAdd
.011013	c8		iny				iny
.011014					_MTNoAdd:
.011014	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.011016	26 0e		rol $0e				rol 	DTemp2+2
.011018	90 01		bcc $01101b			bcc 	_MTNoOverflow
.01101a	c8		iny				iny
.01101b					_MTNoOverflow:
.01101b	8a		txa				txa 								; until multiplier is zero.
.01101c	d0 e1		bne $010fff			bne 	_MTLoop
.01101e	98		tya				tya
.01101f	18		clc				clc
.011020	69 ff ff	adc #$ffff			adc 	#$FFFF
.011023	fa		plx				plx 								; restore X
.011024	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.011025					Function_Str:
.011025	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.011028	20 2c 03	jsr $01032c			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01102b	48		pha				pha 								; save YA on the stack
.01102c	5a		phy				phy
.01102d	20 1c 0f	jsr $010f1c			jsr 	VALGetBase 					; process , base (shared with STR$())
.011030	85 14		sta $14				sta 	DSignCount
.011032	7a		ply				ply 								; YA is the number
.011033	68		pla				pla
.011034	da		phx				phx
.011035	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.011037	20 40 10	jsr $011040			jsr 	ConvertToString 			; convert it to a string.
.01103a	fa		plx				plx 								; restore X
.01103b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01103d	74 20		stz $20,x			stz 	EXSValueH+0,x
.01103f	60		rts				rts
.011040					ConvertToString:
.011040	48		pha				pha
.011041	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.011044	20 69 06	jsr $010669			jsr 	StringTempAllocate 			; allocate space for return string.
.011047	68		pla				pla
.011048					ConvertToStringAlreadyAllocated:
.011048	da		phx				phx 								; save X (base)
.011049	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.01104b	84 26		sty $26				sty 	DTemp3+2
.01104d	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.01104f	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.011051	10 15		bpl $011068			bpl 	_CTSNotNegative
.011053	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.011056	20 d2 10	jsr $0110d2			jsr 	CTSOutputA
.011059	38		sec				sec 								; negate DTemp3 which is the number
.01105a	a9 00 00	lda #$0000			lda 	#0
.01105d	e5 24		sbc $24				sbc 	DTemp3
.01105f	85 24		sta $24				sta 	DTemp3
.011061	a9 00 00	lda #$0000			lda 	#0
.011064	e5 26		sbc $26				sbc 	DTemp3+2
.011066	85 26		sta $26				sta 	DTemp3+2
.011068					_CTSNotNegative:
.011068	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.01106b	48		pha				pha
.01106c	a9 00 00	lda #$0000			lda 	#0
.01106f	48		pha				pha
.011070	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011072	85 08		sta $08				sta 	DTemp1
.011074	64 0a		stz $0a				stz 	DTemp1+2
.011076					_CTSMultiplySubtractor:
.011076	38		sec				sec 								; check number vs subtractor
.011077	a5 24		lda $24				lda 	DTemp3
.011079	e5 08		sbc $08				sbc 	DTemp1
.01107b	a5 26		lda $26				lda 	DTemp3+2
.01107d	e5 0a		sbc $0a				sbc 	DTemp1+2
.01107f	90 0f		bcc $011090			bcc		_CTSScaledUp 				; if >= then scaled up.
.011081	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011083	48		pha				pha
.011084	a5 0a		lda $0a				lda 	DTemp1+2
.011086	48		pha				pha
.011087	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011089	20 ee 0f	jsr $010fee			jsr 	MultiplyTemp1ByA
.01108c	b0 02		bcs $011090			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01108e	80 e6		bra $011076			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011090					_CTSScaledUp:
.011090	7a		ply				ply 								; YA contains the previous divider.
.011091	68		pla				pla
.011092	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011095	d0 05		bne $01109c			bne 	_CTSHasDigit
.011097	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01109a	f0 20		beq $0110bc			beq 	_CTSExit
.01109c					_CTSHasDigit:
.01109c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01109e	84 0e		sty $0e				sty 	DTemp2+2
.0110a0	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0110a3					_CTSSubLoop:
.0110a3	38		sec				sec 								; subtract subtractor from number
.0110a4	a5 24		lda $24				lda 	DTemp3
.0110a6	e5 0c		sbc $0c				sbc 	DTemp2
.0110a8	a8		tay				tay 								; intermediate in Y
.0110a9	a5 26		lda $26				lda 	DTemp3+2
.0110ab	e5 0e		sbc $0e				sbc 	DTemp2+2
.0110ad	90 07		bcc $0110b6			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.0110af	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.0110b1	84 24		sty $24				sty 	DTemp3
.0110b3	e8		inx				inx 								; one more subtraction
.0110b4	80 ed		bra $0110a3			bra 	_CTSSubLoop 				; try it again.
.0110b6					_CTSFinishedSubtracting:
.0110b6	8a		txa				txa 								; convert to ASCII.
.0110b7	20 c5 10	jsr $0110c5			jsr 	CTSOutputHexDigit 			; write that out.
.0110ba	80 d4		bra $011090			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.0110bc					_CTSExit:
.0110bc	a5 24		lda $24				lda 	DTemp3 						; output last digit
.0110be	20 c5 10	jsr $0110c5			jsr 	CTSOutputHexDigit
.0110c1	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.0110c3	fa		plx				plx 								; restore X.
.0110c4	60		rts				rts
.0110c5					CTSOutputHexDigit:
.0110c5	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.0110c8	90 04		bcc $0110ce			bcc 	_CTSNotLetter
.0110ca	18		clc				clc
.0110cb	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.0110ce					_CTSNotLetter:
.0110ce	18		clc				clc
.0110cf	69 30 00	adc #$0030			adc 	#48
.0110d2					CTSOutputA:
.0110d2	5a		phy				phy 								; save Y, set Y to current pointer
.0110d3	a4 1a		ldy $1a				ldy 	DCurrentTempString
.0110d5	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.0110d8	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.0110da	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.0110dc	1a		inc a				inc 	a
.0110dd	92 18		sta ($18)			sta 	(DStartTempString)
.0110df	c2 20		rep #$20			rep 	#$20
.0110e1	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.0110e3	7a		ply				ply 								; restore Y and exit.
.0110e4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.0110e5					Function_INSTR:
.0110e5	20 21 06	jsr $010621			jsr 	ResetTypeInteger 			; returns a integer
.0110e8	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; evaluate a string.
.0110eb	48		pha				pha 								; save string to search
.0110ec	20 f8 05	jsr $0105f8			jsr 	ExpectComma
.0110ef	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; string to search for
.0110f2	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket
.0110f5	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.0110f7	68		pla				pla
.0110f8	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.0110fa	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0110fc	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0110fe	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011100	38		sec				sec
.011101	b2 0c		lda ($0c)			lda 	(DTemp2)
.011103	f2 08		sbc ($08)			sbc		(DTemp1)
.011105	c2 20		rep #$20			rep 	#$20
.011107	90 2c		bcc $011135			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011109	29 ff 00	and #$00ff			and 	#$00FF
.01110c	1a		inc a				inc 	a
.01110d	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.01110f	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.011111	29 ff 00	and #$00ff			and 	#$00FF
.011114	f0 22		beq $011138			beq 	_FINSError
.011116					_FINSLoop:
.011116	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.011118	1a		inc a				inc 	a
.011119	95 00		sta $00,x			sta 	EXSValueL+0,x
.01111b	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.01111d	29 ff 00	and #$00ff			and 	#$00FF
.011120	a8		tay				tay									; start comparing at index 1.
.011121					_FINSCompare:
.011121	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.011123	51 0c		eor ($0c),y			eor 	(DTemp2),y
.011125	29 ff 00	and #$00ff			and 	#$00FF
.011128	d0 05		bne $01112f			bne 	_FINSNext
.01112a	88		dey				dey
.01112b	d0 f4		bne $011121			bne 	_FINSCompare
.01112d	80 08		bra $011137			bra 	_FINSExit
.01112f					_FINSNext:
.01112f	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.011131	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.011133	d0 e1		bne $011116			bne 	_FINSLoop
.011135					_FINSFail:
.011135	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.011137					_FINSExit:
.011137	60		rts				rts
.011138					_FINSError:
.011138	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01113b	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>011143	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.01114c					Function_UPPER:
.01114c	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.01114f	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; evaluate a string.
.011152	48		pha				pha
.011153	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; close call.
.011156	20 69 06	jsr $010669			jsr		StringTempAllocate 			; allocate memory for it
.011159	68		pla				pla
.01115a	20 a3 06	jsr $0106a3			jsr 	StringCreateCopy 			; create a copy of it.
.01115d	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01115f	95 00		sta $00,x			sta 	EXSValueL+0,x
.011161	a8		tay				tay 								; address in Y
.011162	74 20		stz $20,x			stz 	EXSValueH+0,x
.011164	da		phx				phx 								; save X
.011165	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011167	29 ff 00	and #$00ff			and 	#$00FF
.01116a	f0 20		beq $01118c			beq 	_FUPExit
.01116c	aa		tax				tax 								; put in X
.01116d					_FUPLoop:
.01116d	c8		iny				iny 								; increment and load character
.01116e	b9 00 00	lda $0000,y			lda 	$0000,y
.011171	29 ff 00	and #$00ff			and 	#$00FF
.011174	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011177	90 10		bcc $011189			bcc 	_FUPNoChange
.011179	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01117c	b0 0b		bcs $011189			bcs 	_FUPNoChange
.01117e	38		sec				sec 								; shift case
.01117f	e9 20 00	sbc #$0020			sbc 	#32
.011182	e2 20		sep #$20			sep 	#$20 						; write back
.011184	99 00 00	sta $0000,y			sta 	$0000,y
.011187	c2 20		rep #$20			rep 	#$20
.011189					_FUPNoChange:
.011189	ca		dex				dex 								; do X times
.01118a	d0 e1		bne $01116d			bne 	_FUPLoop
.01118c					_FUPExit:
.01118c	fa		plx				plx 								; restore X
.01118d	60		rts				rts
.01118e					Function_LOWER:
.01118e	20 29 06	jsr $010629			jsr 	ResetTypeString 			; returns a string.
.011191	20 4b 03	jsr $01034b			jsr 	EvaluateNextString 			; evaluate a string.
.011194	48		pha				pha
.011195	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; close call.
.011198	20 69 06	jsr $010669			jsr		StringTempAllocate 			; allocate memory for it
.01119b	68		pla				pla
.01119c	20 a3 06	jsr $0106a3			jsr 	StringCreateCopy 			; create a copy of it.
.01119f	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111a1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111a3	a8		tay				tay 								; address in Y
.0111a4	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111a6	da		phx				phx 								; save X
.0111a7	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111a9	29 ff 00	and #$00ff			and 	#$00FF
.0111ac	f0 20		beq $0111ce			beq 	_FLOExit
.0111ae	aa		tax				tax 								; put in X
.0111af					_FLOLoop:
.0111af	c8		iny				iny 								; increment and load character
.0111b0	b9 00 00	lda $0000,y			lda 	$0000,y
.0111b3	29 ff 00	and #$00ff			and 	#$00FF
.0111b6	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.0111b9	90 10		bcc $0111cb			bcc 	_FLONoChange
.0111bb	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0111be	b0 0b		bcs $0111cb			bcs 	_FLONoChange
.0111c0	18		clc				clc 								; shift case
.0111c1	69 20 00	adc #$0020			adc 	#32
.0111c4	e2 20		sep #$20			sep 	#$20 						; write back
.0111c6	99 00 00	sta $0000,y			sta 	$0000,y
.0111c9	c2 20		rep #$20			rep 	#$20
.0111cb					_FLONoChange:
.0111cb	ca		dex				dex 								; do X times
.0111cc	d0 e1		bne $0111af			bne 	_FLOLoop
.0111ce					_FLOExit:
.0111ce	fa		plx				plx 								; restore X
.0111cf	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0111d0					Function_Let:
.0111d0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0111d2	48		pha				pha  								; save on stack for later.
.0111d3	20 92 03	jsr $010392			jsr 	VariableFind 				; find the variable
.0111d6	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0111d8	b0 1c		bcs $0111f6			bcs 	_FLetFound 					; skip if found.
.0111da	68		pla				pla 								; get and push the first token again.
.0111db	48		pha				pha
.0111dc	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0111df	d0 69		bne $01124a			bne 	_FLError					; arrays, so this causes an error.
.0111e1	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111e3	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0111e6	20 3c 04	jsr $01043c			jsr 	VariableCreate 				; create it.
.0111e9	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0111eb					_FLSkipToken:
.0111eb	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0111ed	e6 06		inc $06				inc 	DCodePtr
.0111ef	e6 06		inc $06				inc 	DCodePtr
.0111f1	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0111f4	d0 f5		bne $0111eb			bne 	_FLSkipToken
.0111f6					_FLetFound:
.0111f6	68		pla				pla 								; get and save the first token.
.0111f7	48		pha				pha
.0111f8	a8		tay				tay 								; put it in Y
.0111f9	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0111fc	f0 07		beq $011205			beq 	_FLetNotArray
.0111fe	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011200	20 09 04	jsr $010409			jsr 	VariableSubscript			; index calculation
.011203	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011205					_FLetNotArray:
.011205	7a		ply				ply 								; get the first token into Y
.011206	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011208	48		pha				pha
.011209	5a		phy				phy 								; save the first token on the stack.
.01120a	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.01120d	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01120f	d0 2c		bne $01123d			bne 	_FLetMissingEquals
.011211	e6 06		inc $06				inc 	DCodePtr
.011213	e6 06		inc $06				inc 	DCodePtr
.011215	68		pla				pla 								; restore the first token.
.011216	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011219	d0 0f		bne $01122a			bne 	_FLetString 				; skip if string.
.01121b	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; get an integer
.01121e	7a		ply				ply 								; get address in Y
.01121f	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.011221	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011224	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.011226	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.011229	60		rts				rts
.01122a					_FLetString:
.01122a	20 32 03	jsr $010332			jsr 	EvaluateString 				; get a string.
.01122d	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01122f	20 c4 06	jsr $0106c4			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.011232	7a		ply				ply 								; get address
.011233	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011236	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.011239	99 02 00	sta $0002,y			sta 	$0002,y
.01123c	60		rts				rts
.01123d					_FLetMissingEquals:
.01123d	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011240	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>011248	3d 00
.01124a					_FLError:
.01124a	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01124d	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011255	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.01125d					Function_PROC:
.01125d	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.011260	18		clc				clc
.011261	65 02		adc $02				adc 	DBaseAddress
.011263	aa		tax				tax 								; X is used to track it
.011264					_FPROLoop:
.011264	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.011267	f0 56		beq $0112bf			beq 	_FPROUnknown
.011269	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.01126c	c9 48 3c	cmp #$3c48			cmp 	#defprocTokenID
.01126f	f0 08		beq $011279			beq 	_FPROFoundDefProc
.011271					_FPRONext:
.011271	8a		txa				txa 								; follow the link.
.011272	18		clc				clc
.011273	7d 00 00	adc $0000,x			adc 	@w$0000,x
.011276	aa		tax				tax
.011277	80 eb		bra $011264			bra 	_FPROLoop
.011279					_FPROFoundDefProc:
.011279	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.01127c	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01127e	d0 f1		bne $011271			bne 	_FPRONext
.011280	8a		txa				txa 								; DTemp1 points to the token.
.011281	18		clc				clc
.011282	69 06 00	adc #$0006			adc 	#6
.011285	85 08		sta $08				sta 	DTemp1
.011287	a0 00 00	ldy #$0000			ldy 	#0
.01128a					_FPROCompare:
.01128a	b1 08		lda ($08),y			lda 	(DTemp1),y
.01128c	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01128e	d0 e1		bne $011271			bne 	_FPRONext 					; fails, different
.011290	c8		iny				iny
.011291	c8		iny				iny
.011292	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011295	d0 f3		bne $01128a			bne 	_FPROCompare
.011297	98		tya				tya 								; this is the offset to the next element
.011298	18		clc				clc
.011299	65 08		adc $08				adc 	DTemp1
.01129b	48		pha				pha 								; push the next command on the stack
.01129c	da		phx				phx 								; push the record address on the stack.
.01129d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01129f	98		tya				tya 								; work out the return address
.0112a0	18		clc				clc
.0112a1	65 06		adc $06				adc 	DCodePtr
.0112a3	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0112a5	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0112a7	95 04		sta $04,x			sta 	$04,x
.0112a9	a9 42 3e	lda #$3e42			lda 	#procTokenID 				; save proc token at +6
.0112ac	95 06		sta $06,x			sta 	$06,x
.0112ae	8a		txa				txa 								; advance stack by 6.
.0112af	18		clc				clc
.0112b0	69 06 00	adc #$0006			adc 	#6
.0112b3	85 2a		sta $2a				sta 	DStack
.0112b5	7a		ply				ply 								; line record address
.0112b6	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.0112b9	85 22		sta $22				sta 	DLineNumber
.0112bb	68		pla				pla 								; next command
.0112bc	85 06		sta $06				sta 	DCodePtr
.0112be	60		rts				rts
.0112bf					_FPROUnknown:
.0112bf	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0112c2	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>0112ca	70 72 6f 63 65 64 75 72 65 00
.0112d4					Function_ENDPROC:
.0112d4	a6 2a		ldx $2a				ldx 	DStack
.0112d6	b5 00		lda $00,x			lda 	$00,x
.0112d8	c9 00 c0	cmp #$c000			cmp 	#$C000 						; is it a local/parameter ?
.0112db	b0 2e		bcs $01130b			bcs 	_FENPPopLocal
.0112dd	c9 42 3e	cmp #$3e42			cmp 	#procTokenID 				; check top token.
.0112e0	d0 11		bne $0112f3			bne 	_FENPFail
.0112e2	8a		txa				txa 								; unpick stack.
.0112e3	38		sec				sec
.0112e4	e9 06 00	sbc #$0006			sbc 	#6
.0112e7	85 2a		sta $2a				sta 	DStack
.0112e9	aa		tax				tax
.0112ea	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0112ec	85 06		sta $06				sta 	DCodePtr
.0112ee	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0112f0	85 22		sta $22				sta 	DLineNumber
.0112f2	60		rts				rts
.0112f3					_FENPFail:
.0112f3	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0112f6	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>0112fe	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.01130b					_FENPPopLocal:
.01130b	a5 2a		lda $2a				lda 	DStack 						; wind stack down.
.01130d	38		sec				sec
.01130e	e9 08 00	sbc #$0008			sbc 	#8
.011311	85 2a		sta $2a				sta 	DStack
.011313	aa		tax				tax
.011314	b5 02		lda $02,x			lda 	$02,x 						; get address
.011316	a8		tay				tay
.011317	b5 04		lda $04,x			lda 	$04,x 						; copy data
.011319	99 00 00	sta $0000,y			sta 	$0000,y
.01131c	b5 06		lda $06,x			lda 	$06,x
.01131e	99 02 00	sta $0002,y			sta 	$0002,y
.011321	80 b1		bra $0112d4			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.011323					Command_LOCAL:
.011323	20 4d 13	jsr $01134d			jsr 	LocalProcessVariable 		; make one variable 'local'
.011326	90 0e		bcc $011336			bcc 	_CLOFail
.011328	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.01132a	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.01132d	d0 06		bne $011335			bne 	_CLOExit
.01132f	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.011331	e6 06		inc $06				inc 	DCodePtr
.011333	80 ee		bra $011323			bra 	Command_Local
.011335					_CLOExit:
.011335	60		rts				rts
.011336					_CLOFail:
.011336	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011339	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>011341	6c 20 53 74 61 74 65 6d 65 6e 74 00
.01134d					LocalProcessVariable:
.01134d	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.01134f	c9 00 c0	cmp #$c000			cmp 	#$C000
.011352	90 3e		bcc $011392			bcc 	_LPVFail
.011354	29 00 10	and #$1000			and 	#IDArrayMask
.011357	d0 39		bne $011392			bne 	_LPVFail
.011359	b2 06		lda ($06)			lda 	(DCodePtr)
.01135b	29 00 e0	and #$e000			and 	#$E000
.01135e	48		pha				pha
.01135f	20 92 03	jsr $010392			jsr 	VariableFind 				; try to find the variable
.011362	b0 13		bcs $011377			bcs 	_LPVFound 					; if found, A points to the data.
.011364	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011366	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.011369	20 3c 04	jsr $01043c			jsr 	VariableCreate 				; create it.
.01136c					_LPVSkipToken:
.01136c	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01136e	e6 06		inc $06				inc 	DCodePtr
.011370	e6 06		inc $06				inc 	DCodePtr
.011372	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011375	d0 f5		bne $01136c			bne 	_LPVSkipToken
.011377					_LPVFound:
.011377	a8		tay				tay 								; data pointer in Y
.011378	a6 2a		ldx $2a				ldx 	DStack
.01137a	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.01137c	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.01137f	95 04		sta $04,x			sta 	$04,x
.011381	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.011384	95 06		sta $06,x			sta 	$06,x
.011386	68		pla				pla 								; get the type header
.011387	95 08		sta $08,x			sta 	$08,x 						; update the BASIC stack.
.011389	8a		txa				txa
.01138a	18		clc				clc
.01138b	69 08 00	adc #$0008			adc 	#8
.01138e	85 2a		sta $2a				sta 	DStack
.011390	38		sec				sec
.011391	60		rts				rts
.011392					_LPVFail:
.011392	18		clc				clc
.011393	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.011394					Command_List:
.011394	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011397	20 69 06	jsr $010669		jsr 	StringTempAllocate
.01139a	85 30		sta $30			sta 	DListBuffer						; save buffer.
.01139c	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01139e	64 2e		stz $2e			stz 	DIndent2
.0113a0	64 32		stz $32			stz 	DTemp4+0 						; low number
.0113a2	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113a5	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0113a7	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0113a9	f0 3b		beq $0113e6		beq 	_CLIList
.0113ab	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113ae	f0 36		beq $0113e6		beq 	_CLIList
.0113b0	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.0113b3	f0 13		beq $0113c8		beq 	_CLIComma
.0113b5	20 2c 03	jsr $01032c		jsr 	EvaluateNextInteger 			; yes, first number
.0113b8	c0 00 00	cpy #$0000		cpy 	#0
.0113bb	d0 21		bne $0113de		bne 	_CLIError
.0113bd	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0113bf	85 34		sta $34			sta 	DTemp4+2
.0113c1	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.0113c3	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.0113c6	d0 1e		bne $0113e6		bne 	_CLIList
.0113c8					_CLIComma:
.0113c8	20 f8 05	jsr $0105f8		jsr 	ExpectComma 					; skip comma
.0113cb	b2 06		lda ($06)		lda 	(DCodePtr)
.0113cd	f0 12		beq $0113e1		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.0113cf	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113d2	f0 0d		beq $0113e1		beq 	_CLIToEnd
.0113d4	20 2c 03	jsr $01032c		jsr 	EvaluateNextInteger 			; get end line.
.0113d7	85 34		sta $34			sta 	DTemp4+2
.0113d9	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0113dc	f0 08		beq $0113e6		beq 	_CLIList
.0113de					_CLIError:
.0113de	82 e4 f1	brl $0105c5		brl 	SyntaxError
.0113e1					_CLIToEnd:
.0113e1	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113e4	85 34		sta $34			sta 	DTemp4+2
.0113e6					_CLIList:
.0113e6	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0113e9	18		clc			clc
.0113ea	65 02		adc $02			adc 	DBaseAddress
.0113ec	a8		tay			tay 									; put in Y
.0113ed					_CLINextLine:
.0113ed	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0113f0	f0 29		beq $01141b		beq 	_CLIExit
.0113f2	20 83 15	jsr $011583		jsr 	ScanIndent  					; scan for formatting.
.0113f5	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0113f8	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0113fa	90 14		bcc $011410		bcc 	_CLIFollowLink
.0113fc	c5 34		cmp $34			cmp 	DTemp4+2
.0113fe	f0 02		beq $011402		beq 	_CLIShowLine
.011400	b0 0e		bcs $011410		bcs 	_CLIFollowLink
.011402					_CLIShowLine:
.011402	a5 30		lda $30			lda 	DListBuffer
.011404	20 1e 14	jsr $01141e		jsr 	Detokenise 						; detokenise it
.011407	5a		phy			phy
.011408	a8		tay			tay 									; print buffer out
.011409	20 4f 06	jsr $01064f		jsr 	PrintBasicString
.01140c	20 5b 1d	jsr $011d5b		jsr 	HWNewLine
.01140f	7a		ply			ply 									; get address
.011410					_CLIFollowLink:
.011410	98		tya			tya 									; follow link
.011411	18		clc			clc
.011412	79 00 00	adc $0000,y		adc 	$0000,y
.011415	a8		tay			tay
.011416	20 77 1d	jsr $011d77		jsr 	HWCheckBreak 					; break key pressed.
.011419	f0 d2		beq $0113ed		beq 	_CLINextLine
.01141b					_CLIExit:
.01141b	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01141d	60		rts			rts
.01141e					Detokenise:
.01141e	48		pha			pha
.01141f	da		phx			phx
.011420	5a		phy			phy
.011421	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011423	1a		inc a			inc 	a
.011424	85 1a		sta $1a			sta 	DCurrentTempString
.011426	64 1c		stz $1c			stz		DConstantShift
.011428	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.01142b	92 18		sta ($18)		sta 	(DStartTempString)
.01142d	5a		phy			phy 									; save Y
.01142e	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.011431	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011434	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011437	20 48 10	jsr $011048		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01143a	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01143c	c5 2e		cmp $2e			cmp 	DIndent2
.01143e	90 02		bcc $011442		bcc 	_DTKSmaller
.011440	a5 2e		lda $2e			lda 	DIndent2
.011442					_DTKSmaller:
.011442	0a		asl a			asl 	a
.011443	69 06 00	adc #$0006		adc 	#6
.011446	85 08		sta $08			sta 	DTemp1
.011448					_DTKPadLineNo:
.011448	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.01144b	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.01144e	b2 18		lda ($18)		lda 	(DStartTempString)
.011450	29 ff 00	and #$00ff		and 	#$00FF
.011453	c5 08		cmp $08			cmp 	DTemp1
.011455	d0 f1		bne $011448		bne 	_DTKPadLineNo
.011457	68		pla			pla 									; get pointer
.011458	18		clc			clc 									; point to start of line
.011459	69 04 00	adc #$0004		adc 	#4
.01145c	a8		tay			tay 									; put back in Y.
.01145d					_DTKMainLoop:
.01145d	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011460	d0 04		bne $011466		bne 	_DTKNotZero 					; if zero, return.
.011462	7a		ply			ply
.011463	fa		plx			plx
.011464	68		pla			pla
.011465	60		rts			rts
.011466					_DTKNotZero:
.011466	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011469	b0 1c		bcs $011487		bcs 	_DTKNotString
.01146b	5a		phy			phy										; save token address on stack.
.01146c	c8		iny			iny 									; skip first token
.01146d	c8		iny			iny
.01146e	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.011471	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.011474	98		tya			tya 									; copy the string out.
.011475	20 a3 06	jsr $0106a3		jsr 	StringCreateCopy
.011478	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.01147b	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.01147e	68		pla			pla 									; get token, which is its own offset
.01147f	a8		tay			tay
.011480	18		clc			clc
.011481	79 00 00	adc $0000,y		adc 	$0000,y
.011484	a8		tay			tay
.011485	80 d6		bra $01145d		bra 	_DTKMainLoop
.011487					_DTKNotString:
.011487	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.01148a	b0 09		bcs $011495		bcs 	_DTKNotShift
.01148c	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01148f	85 1c		sta $1c			sta 	DConstantShift
.011491	c8		iny			iny 									; skip token.
.011492	c8		iny			iny
.011493	80 c8		bra $01145d		bra 	_DTKMainLoop
.011495					_DTKNotShift:
.011495	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011498	b0 07		bcs $0114a1		bcs 	_DTKNotKeyword
.01149a	c8		iny			iny 									; skip over token
.01149b	c8		iny			iny
.01149c	20 1b 15	jsr $01151b		jsr 	_DTKDecodeKeyword 				; decode it.
.01149f	80 bc		bra $01145d		bra 	_DTKMainLoop
.0114a1					_DTKNotKeyword:
.0114a1	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0114a4	b0 18		bcs $0114be		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0114a6	5a		phy			phy 									; save pointer
.0114a7	38		sec			sec  									; shift it in the range 0-32767
.0114a8	e9 00 40	sbc #$4000		sbc 	#$4000
.0114ab	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0114ac	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0114ae	6a		ror a			ror 	a 								; rotate that into the constant value
.0114af	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0114b1	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0114b4	20 48 10	jsr $011048		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114b7	64 1c		stz $1c			stz 	DConstantShift
.0114b9	7a		ply			ply 									; restore pointer
.0114ba	c8		iny			iny 									; skip token.
.0114bb	c8		iny			iny
.0114bc	80 9f		bra $01145d		bra 	_DTKMainLoop
.0114be					_DTKIdentifier:
.0114be	48		pha			pha 									; save token for typing at end
.0114bf					_DTKILoop:
.0114bf	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0114c2	20 eb 14	jsr $0114eb		jsr 	_DTKIDecodeToken 				; decode it.
.0114c5	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0114c8	c8		iny			iny 									; skip it
.0114c9	c8		iny			iny
.0114ca	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0114cd	d0 f0		bne $0114bf		bne 	_DTKILoop
.0114cf	68		pla			pla 									; add $( as required.
.0114d0	48		pha			pha 									; comes from the first token.
.0114d1	29 00 20	and #$2000		and 	#IDTypeMask
.0114d4	f0 06		beq $0114dc		beq 	_DTKINotString
.0114d6	a9 24 00	lda #$0024		lda 	#"$"
.0114d9	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.0114dc					_DTKINotString:
.0114dc	68		pla			pla
.0114dd	29 00 10	and #$1000		and 	#IDArrayMask
.0114e0	f0 06		beq $0114e8		beq 	_DTKINotArray
.0114e2	a9 28 00	lda #$0028		lda 	#"("
.0114e5	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.0114e8					_DTKINotArray:
.0114e8	82 72 ff	brl $01145d		brl 	_DTKMainLoop
.0114eb					_DTKIDecodeToken:
.0114eb	5a		phy			phy
.0114ec	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0114ef	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0114f2					_DTKIDivide:
.0114f2	38		sec			sec
.0114f3	e9 2d 00	sbc #$002d		sbc 	#45
.0114f6	c8		iny			iny
.0114f7	b0 f9		bcs $0114f2		bcs 	_DTKIDivide
.0114f9	69 2d 00	adc #$002d		adc 	#45
.0114fc	20 05 15	jsr $011505		jsr 	_DTKIOutA 						; output low.
.0114ff	98		tya			tya
.011500	20 05 15	jsr $011505		jsr 	_DTKIOutA 						; output high
.011503	7a		ply			ply
.011504	60		rts			rts
.011505					_DTKIOutA:
.011505	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011508	f0 10		beq $01151a		beq 	_DTKIOutExit
.01150a	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01150d	90 04		bcc $011513		bcc 	_DTKIOutAlpha
.01150f	38		sec			sec  									; adjust for 0-9
.011510	e9 4b 00	sbc #$004b		sbc 	#$4B
.011513					_DTKIOutAlpha:
.011513	18		clc			clc										; adjust for A-Z
.011514	69 60 00	adc #$0060		adc 	#96
.011517	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.01151a					_DTKIOutExit:
.01151a	60		rts			rts
.01151b					_DTKDecodeKeyword:
.01151b	48		pha			pha
.01151c	da		phx			phx
.01151d	5a		phy			phy
.01151e	a8		tay			tay 									; save token ID in Y
.01151f	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011522	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011525	48		pha			pha 									; save this flag on a stack
.011526	5a		phy			phy 									; save the token ID
.011527	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.01152a	d0 19		bne $011545		bne 	_DTKNotSpecial1
.01152c	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01152e	88		dey			dey
.01152f	b9 00 00	lda $0000,y		lda 	$0000,y
.011532	29 ff 00	and #$00ff		and 	#$00FF
.011535	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011538	f0 0b		beq $011545		beq 	_DTKNotSpecial1
.01153a	c9 3a 00	cmp #$003a		cmp 	#":"
.01153d	f0 06		beq $011545		beq 	_DTKNotSpecial1
.01153f	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011542	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.011545					_DTKNotSpecial1:
.011545	68		pla			pla
.011546	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011549	a8		tay			tay 									; into Y.
.01154a	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01154d					_DTKDWorkThrough:
.01154d	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01154e	f0 0f		beq $01155f		beq 	_DTKDFound
.011550	86 08		stx $08			stx 	DTemp1
.011552	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; read the type/skip byte.
.011556	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011559	18		clc			clc
.01155a	65 08		adc $08			adc 	DTemp1
.01155c	aa		tax			tax
.01155d	80 ee		bra $01154d		bra 	_DTKDWorkThrough
.01155f					_DTKDFound:
.01155f	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; get skip
.011563	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011566	3a		dec a			dec 	a
.011567	a8		tay			tay 									; put in Y
.011568					_DTKOut:
.011568	bf 9f 00 01	lda $01009f,x		lda 	TokenText+1,x 					; output it.
.01156c	29 ff 00	and #$00ff		and 	#$00FF
.01156f					_DTKNotLC:
.01156f	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.011572	e8		inx			inx
.011573	88		dey			dey
.011574	d0 f2		bne $011568		bne 	_DTKOut
.011576	68		pla			pla 									; trailing space.
.011577	d0 06		bne $01157f		bne 	_DTKNotSpecial2
.011579	a9 20 00	lda #$0020		lda 	#" "
.01157c	20 95 06	jsr $010695		jsr 	StringWriteCharacter
.01157f					_DTKNotSpecial2:
.01157f	7a		ply			ply
.011580	fa		plx			plx
.011581	68		pla			pla
.011582	60		rts			rts
.011583					ScanIndent:
.011583	48		pha			pha
.011584	5a		phy			phy
.011585	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011587	85 2e		sta $2e			sta 	DIndent2
.011589	98		tya			tya
.01158a	18		clc			clc 									; point to code.
.01158b	69 04 00	adc #$0004		adc 	#4
.01158e	a8		tay			tay
.01158f					_SILoop:
.01158f	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011592	f0 35		beq $0115c9		beq 	_SIExit
.011594	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011597	b0 08		bcs $0115a1		bcs 	_SICheckKeyword
.011599	98		tya			tya 									; skip string.
.01159a	18		clc			clc
.01159b	79 00 00	adc $0000,y		adc 	$0000,y
.01159e	a8		tay			tay
.01159f	80 ee		bra $01158f		bra 	_SILoop
.0115a1					_SICheckKeyword:
.0115a1	29 00 e0	and #$e000		and 	#$E000
.0115a4	c9 00 20	cmp #$2000		cmp 	#$2000
.0115a7	f0 04		beq $0115ad		beq 	_SIFoundKeyword
.0115a9					_SIAdvance:
.0115a9	c8		iny			iny 									; if not, loop round.
.0115aa	c8		iny			iny
.0115ab	80 e2		bra $01158f		bra 	_SILoop
.0115ad					_SIFoundKeyword:
.0115ad	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0115b0	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0115b3	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0115b6	f0 0d		beq $0115c5		beq 	_SIKeyPlus
.0115b8	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0115bb	d0 ec		bne $0115a9		bne 	_SIAdvance
.0115bd	c6 2c		dec $2c			dec 	DIndent
.0115bf	10 e8		bpl $0115a9		bpl 	_SIAdvance
.0115c1	64 2c		stz $2c			stz 	DIndent
.0115c3	80 e4		bra $0115a9		bra 	_SIAdvance
.0115c5					_SIKeyPlus:
.0115c5	e6 2c		inc $2c			inc 	DIndent
.0115c7	80 e0		bra $0115a9		bra 	_SIAdvance
.0115c9					_SIExit:
.0115c9	7a		ply			ply
.0115ca	68		pla			pla
.0115cb	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.0115cc					Function_PRINT:
.0115cc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0115ce	f0 33		beq $011603			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0115d0	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.0115d3	f0 2e		beq $011603			beq 	_FPRExitCR
.0115d5	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.0115d8	f0 23		beq $0115fd			beq 	_FPRSkipLoop
.0115da	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.0115dd	f0 1b		beq $0115fa			beq 	_FPRNewLine
.0115df	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0115e2	f0 11		beq $0115f5			beq 	_FPRTab
.0115e4					_FPRExpression:
.0115e4	20 05 02	jsr $010205			jsr 	Evaluate 					; evaluate a string or integer.
.0115e7	b0 06		bcs $0115ef			bcs 	_FPRHaveString
.0115e9	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0115ec	20 40 10	jsr $011040			jsr 	ConvertToString
.0115ef					_FPRHaveString:
.0115ef	a8		tay				tay 								; print the basic String.
.0115f0	20 4f 06	jsr $01064f			jsr 	PrintBASICString
.0115f3	80 d7		bra $0115cc			bra 	Function_Print 				; and go round again.
.0115f5					_FPRTab:
.0115f5	20 70 1d	jsr $011d70			jsr 	HWTab
.0115f8	80 03		bra $0115fd			bra 	_FPRSkipLoop
.0115fa					_FPRNewLine:
.0115fa	20 5b 1d	jsr $011d5b			jsr 	HWNewLine
.0115fd					_FPRSkipLoop:
.0115fd	e6 06		inc $06				inc 	DCodePtr
.0115ff	e6 06		inc $06				inc 	DCodePtr
.011601	80 c9		bra $0115cc			bra 	Function_Print
.011603					_FPRExitCR:
.011603	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011605	88		dey				dey
.011606	88		dey				dey
.011607	b9 00 00	lda $0000,y			lda 	$0000,y
.01160a	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01160d	f0 08		beq $011617			beq 	_FPRExit
.01160f	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.011612	f0 03		beq $011617			beq 	_FPRExit
.011614	20 5b 1d	jsr $011d5b			jsr 	HWNewLine 					; print a new line.
.011617					_FPRExit:
.011617	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011618					Function_IF:
.011618	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; check success.
.01161b	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01161d	05 08		ora $08				ora 	DTemp1
.01161f	a8		tay				tay 								; success flag in Y.
.011620	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011622	c9 4b 3a	cmp #$3a4b			cmp 	#thenTokenID
.011625	d0 32		bne $011659			bne 	_FIFExtended 				; if so, go to the extended IF.
.011627	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011629	e6 06		inc $06				inc 	DCodePtr
.01162b	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01162e	f0 0f		beq $01163f			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011630	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011632	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011635	90 21		bcc $011658			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011637	c9 00 c0	cmp #$c000			cmp 	#$C000
.01163a	b0 1c		bcs $011658			bcs 	_FIFContinue
.01163c	4c ce 18	jmp $0118ce			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01163f					_FIFEndOfLine:
.01163f	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011641	f0 15		beq $011658			beq 	_FIFContinue 				; if done so, continue.
.011643	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011646	90 06		bcc $01164e			bcc 	_FIFStringConstant
.011648	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.01164a	e6 06		inc $06				inc 	DCodePtr
.01164c	80 f1		bra $01163f			bra 	_FIFEndOfLine
.01164e					_FIFStringConstant:
.01164e	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011651	18		clc				clc
.011652	65 06		adc $06				adc 	DCodePtr
.011654	85 06		sta $06				sta 	DCodePtr
.011656	80 e7		bra $01163f			bra 	_FIFEndOfLine
.011658					_FIFContinue:
.011658	60		rts				rts
.011659					_FIFExtended:
.011659	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.01165b	e6 2a		inc $2a				inc 	DStack
.01165d	a9 46 3c	lda #$3c46			lda 	#ifTokenID
.011660	a6 2a		ldx $2a				ldx 	DStack
.011662	95 00		sta $00,x			sta 	$00,x
.011664	98		tya				tya 								; see if the test was passed.
.011665	f0 01		beq $011668			beq 	_FIXSkip 					; if zero then it has failed.
.011667	60		rts				rts 								; test passed, so continue executing
.011668					_FIXSkip:
.011668	a9 3b 3e	lda #$3e3b			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.01166b	a2 4c 3a	ldx #$3a4c			ldx 	#endifTokenID 				; at the same level.
.01166e	20 ce 16	jsr $0116ce			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.011671	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011673	e6 06		inc $06				inc 	DCodePtr
.011675	c9 4c 3a	cmp #$3a4c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011678	d0 04		bne $01167e			bne 	_FIXNoThrow
.01167a	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01167c	c6 2a		dec $2a				dec 	DStack
.01167e					_FIXNoThrow:
.01167e	60		rts				rts
.01167f					Handler_ELSE:
.01167f	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011681	b5 00		lda $00,x			lda 	$00,x
.011683	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.011686	d0 12		bne $01169a			bne 	_HEBadStructure
.011688	a9 4c 3a	lda #$3a4c			lda 	#endifTokenID 				; only searching one token.
.01168b	a2 00 00	ldx #$0000			ldx 	#$0000
.01168e	20 ce 16	jsr $0116ce			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011691	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011693	e6 06		inc $06				inc 	DCodePtr
.011695	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011697	c6 2a		dec $2a				dec 	DStack
.011699	60		rts				rts
.01169a					_HEBadStructure:
.01169a	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01169d	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116a5	68 6f 75 74 20 49 66 00
.0116ad					Handler_ENDIF:
.0116ad	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116af	b5 00		lda $00,x			lda 	$00,x
.0116b1	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.0116b4	d0 05		bne $0116bb			bne 	_HEIBadStructure
.0116b6	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116b8	c6 2a		dec $2a				dec 	DStack
.0116ba	60		rts				rts
.0116bb					_HEIBadStructure:
.0116bb	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0116be	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116c6	68 6f 75 74 20 49 66 00
.0116ce					ScanForwardLevel:
.0116ce	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0116d0	86 0a		stx $0a				stx 	DTemp1+2
.0116d2	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.0116d4	85 0c		sta $0c				sta 	DTemp2
.0116d6	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0116d9					_SFLLoop:
.0116d9	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0116dc	d0 0d		bne $0116eb			bne 	_SFLNoCheck 				; we're in a substructure.
.0116de	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0116e0	f0 09		beq $0116eb			beq 	_SFLNoCheck 				; don't check zero
.0116e2	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0116e4	f0 04		beq $0116ea			beq 	_SFLFound
.0116e6	c5 0a		cmp $0a				cmp 	DTemp1+2
.0116e8	d0 01		bne $0116eb			bne 	_SFLNoCheck
.0116ea					_SFLFound:
.0116ea	60		rts				rts
.0116eb					_SFLNoCheck:
.0116eb	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0116ed	f0 4f		beq $01173e			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0116ef	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0116f2	90 40		bcc $011734			bcc 	_SFLSkipString 				; then handle that.
.0116f4	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0116f6	e6 06		inc $06				inc 	DCodePtr
.0116f8	a8		tay				tay 								; put token in Y temporarily.
.0116f9	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0116fc	c9 00 20	cmp #$2000			cmp 	#$2000
.0116ff	d0 d8		bne $0116d9			bne 	_SFLLoop
.011701	98		tya				tya 								; get the token back.
.011702	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011705	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011708	f0 cf		beq $0116d9			beq 	_SFLLoop
.01170a	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01170d	90 ca		bcc $0116d9			bcc 	_SFLLoop
.01170f	e8		inx				inx 								; increment the level.
.011710	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011713	f0 c4		beq $0116d9			beq 	_SFLLoop
.011715	ca		dex				dex 								; decrement the level
.011716	ca		dex				dex 								; one overdoes the previous inx.
.011717	10 c0		bpl $0116d9			bpl 	_SFLLoop 					; if gone -ve then error.
.011719					_SFLError:
.011719	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.01171b	85 22		sta $22				sta 	DLineNumber
.01171d	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011720	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011728	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011734					_SFLSkipString:
.011734	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011737	18		clc				clc
.011738	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.01173a	85 06		sta $06				sta 	DCodePtr
.01173c	80 9b		bra $0116d9			bra 	_SFLLoop 					; go round again.
.01173e					_SFLNextLine:
.01173e	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011740	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011743	f0 d4		beq $011719			beq 	_SFLError 					; if zero, then there's no more code to search.
.011745	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011748	85 22		sta $22				sta 	DLineNumber
.01174a	18		clc				clc
.01174b	a5 06		lda $06				lda 	DCodePtr
.01174d	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011750	85 06		sta $06				sta 	DCodePtr
.011752	80 85		bra $0116d9			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.011754					Command_FOR:
.011754	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011756	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011759	d0 60		bne $0117bb			bne		_CFOBad
.01175b	20 92 03	jsr $010392			jsr 	VariableFind 				; try to find variable
.01175e	b0 15		bcs $011775			bcs 	_CFOExists
.011760	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011762	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011765	20 3c 04	jsr $01043c			jsr 	VariableCreate 				; create it.
.011768	48		pha				pha 								; save on stack
.011769					_CFOSkipToken:
.011769	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01176b	e6 06		inc $06				inc 	DCodePtr
.01176d	e6 06		inc $06				inc 	DCodePtr
.01176f	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011772	d0 f5		bne $011769			bne 	_CFOSkipToken
.011774	68		pla				pla 								; restore address
.011775					_CFOExists:
.011775	48		pha				pha 								; push variable address on stack
.011776	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011779	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.01177c	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; this is the start value
.01177f	bb		tyx				tyx 								; put high value in X
.011780	7a		ply				ply 								; address in Y
.011781	99 00 00	sta $0000,y			sta 	$0000,y
.011784	8a		txa				txa
.011785	99 02 00	sta $0002,y			sta 	$0002,y
.011788	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.01178b	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.01178e	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011790	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011792	95 02		sta $02,x			sta 	$02,x
.011794	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011796	95 04		sta $04,x			sta 	$04,x
.011798	98		tya				tya 								; save variable address at +6
.011799	95 06		sta $06,x			sta 	$06,x
.01179b	a9 47 3c	lda #$3c47			lda 	#forTokenID 				; save for token at +8
.01179e	95 08		sta $08,x			sta 	$08,x
.0117a0	8a		txa				txa 								; add 8 to stack position
.0117a1	18		clc				clc
.0117a2	69 08 00	adc #$0008			adc 	#8
.0117a5	85 2a		sta $2a				sta 	DStack
.0117a7	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0117aa	b2 06		lda ($06)			lda 	(DCodePtr)
.0117ac	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.0117af	d0 09		bne $0117ba			bne 	_CFONoStep
.0117b1	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.0117b4	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.0117b7	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; and whatever the step is.
.0117ba					_CFONoStep:
.0117ba	60		rts				rts
.0117bb					_CFOBad:
.0117bb	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0117be	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0117c6	76 61 72 69 61 62 6c 65 00
.0117cf					Command_NEXT:
.0117cf	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.0117d1	b5 00		lda $00,x			lda 	$00,x
.0117d3	c9 47 3c	cmp #$3c47			cmp 	#forTokenID 				; if not FOR then error
.0117d6	f0 14		beq $0117ec			beq 	_CNXOk
.0117d8	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0117db	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0117e3	68 6f 75 74 20 46 6f 72 00
.0117ec					_CNXOk:
.0117ec	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0117ee	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0117f1	90 22		bcc $011815			bcc 	_CNXNoVariable
.0117f3	20 92 03	jsr $010392			jsr 	VariableFind 				; get address of variable.
.0117f6	90 08		bcc $011800			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0117f8	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0117fa	ca		dex				dex
.0117fb	ca		dex				dex
.0117fc	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0117fe	f0 15		beq $011815			beq 	_CNXNoVariable 				; then continue
.011800					_CNXNextVar:
.011800	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011803	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01180b	20 76 61 72 69 61 62 6c 65 00
.011815					_CNXNoVariable:
.011815	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011817	48		pha				pha
.011818	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.01181a	38		sec				sec
.01181b	e9 08 00	sbc #$0008			sbc 	#8
.01181e	85 2a		sta $2a				sta 	DStack
.011820	aa		tax				tax 								; X points to the stack.
.011821	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011823	85 06		sta $06				sta 	DCodePtr
.011825	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; this is the target constant
.011828	5a		phy				phy 								; save the target on the stack
.011829	48		pha				pha
.01182a	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01182d	85 08		sta $08				sta 	DTemp1
.01182f	64 0a		stz $0a				stz 	DTemp1+2
.011831	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011833	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.011836	d0 0b		bne $011843			bne 	_CNXNoStep
.011838	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.01183a	e6 06		inc $06				inc 	DCodePtr
.01183c	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; work out the step.
.01183f	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011841	84 0a		sty $0a				sty 	DTemp1+2
.011843					_CNXNoStep:
.011843	68		pla				pla 								; save the Target in DTemp2
.011844	85 0c		sta $0c				sta 	DTemp2
.011846	68		pla				pla
.011847	85 0e		sta $0e				sta 	DTemp2+2
.011849	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.01184b	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01184d	a8		tay				tay
.01184e	18		clc				clc
.01184f	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011852	65 08		adc $08				adc 	DTemp1
.011854	99 00 00	sta $0000,y			sta 	$0000,y
.011857	b9 02 00	lda $0002,y			lda 	$0002,y
.01185a	65 0a		adc $0a				adc 	DTemp1+2
.01185c	99 02 00	sta $0002,y			sta 	$0002,y
.01185f	38		sec				sec
.011860	a5 0c		lda $0c				lda 	DTemp2
.011862	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011865	85 0c		sta $0c				sta 	DTemp2
.011867	a5 0e		lda $0e				lda 	DTemp2+2
.011869	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01186c	85 0e		sta $0e				sta 	DTemp2+2
.01186e	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011870	f0 0a		beq $01187c			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011872	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011874	45 0a		eor $0a				eor 	DTemp1+2
.011876	10 04		bpl $01187c			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011878	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011879	85 06		sta $06				sta 	DCodePtr
.01187b	60		rts				rts
.01187c					_CNXLoopAgain:
.01187c	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01187d	18		clc				clc
.01187e	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011880	aa		tax				tax
.011881	69 08 00	adc #$0008			adc 	#8
.011884	85 2a		sta $2a				sta 	DStack
.011886	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011888	85 22		sta $22				sta 	DLineNumber
.01188a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.01188b					Function_ONGOTO:
.01188b	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; on what GOTO :)
.01188e	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011891	d0 25		bne $0118b8			bne 	_FOGoFail
.011893	c9 00 00	cmp #$0000			cmp 	#0
.011896	f0 20		beq $0118b8			beq 	_FOGoFail 					; we start with index = 1
.011898	48		pha				pha 								; save count on stack
.011899	a9 37 3e	lda #$3e37			lda 	#gotoTokenID 				; expect GOTO
.01189c	20 d5 05	jsr $0105d5			jsr 	ExpectToken
.01189f	fa		plx				plx 								; put count in X.
.0118a0					_FOGoLoop:
.0118a0	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0118a2	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118a5	90 73		bcc $01191a			bcc 	FGOFail 					; if not, then we have an error.
.0118a7	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118aa	b0 6e		bcs $01191a			bcs 	FGOFail
.0118ac	ca		dex				dex 								; subtract one, if done, call GOTO code
.0118ad	f0 1f		beq $0118ce			beq 	Function_GOTO
.0118af	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0118b1	e6 06		inc $06				inc 	DCodePtr
.0118b3	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; expect a comma
.0118b6	80 e8		bra $0118a0			bra 	_FOGoLoop 					; and loop round.
.0118b8					_FOGoFail:
.0118b8	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0118bb	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0118c3	47 6f 74 6f 20 76 61 6c 75 65 00
.0118ce					Function_GOTO:
.0118ce	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0118d0	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118d3	90 45		bcc $01191a			bcc 	FGOFail 					; we don't do calculate line numbers.
.0118d5	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118d8	b0 40		bcs $01191a			bcs 	FGOFail
.0118da	38		sec				sec 								; convert to 0-32767
.0118db	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0118de	aa		tax				tax
.0118df	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0118e2	18		clc				clc
.0118e3	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0118e5	a8		tay				tay
.0118e6					_FGOSearch:
.0118e6	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0118e9	f0 18		beq $011903			beq 	_FGOUnknown
.0118eb	8a		txa				txa 								; does it match line number ?
.0118ec	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0118ef	f0 08		beq $0118f9			beq 	_FGOFound 					; yes, then found.
.0118f1	98		tya				tya 								; no follow the link
.0118f2	18		clc				clc
.0118f3	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0118f6	a8		tay				tay
.0118f7	80 ed		bra $0118e6			bra 	_FGOSearch 					; and keep looking
.0118f9					_FGOFound:
.0118f9	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0118fb	98		tya				tya 								; Y + 4 is the code pointer.
.0118fc	18		clc				clc 								; (skipping link and line #)
.0118fd	69 04 00	adc #$0004			adc 	#4
.011900	85 06		sta $06				sta 	DCodePtr
.011902	60		rts				rts									; and continue
.011903					_FGOUnknown:
.011903	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011906	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01190e	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.01191a					FGOFail:
.01191a	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>01191d	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011925	20 4e 75 6d 62 65 72 00
.01192d					Function_GOSUB:
.01192d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01192f	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011931	18		clc				clc
.011932	69 02 00	adc #$0002			adc 	#2
.011935	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011937	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011939	95 04		sta $04,x			sta 	$04,x
.01193b	a9 38 3e	lda #$3e38			lda 	#gosubTokenID 				; save gosub token at +6
.01193e	95 06		sta $06,x			sta 	$06,x
.011940	8a		txa				txa 								; advance stack by 6.
.011941	18		clc				clc
.011942	69 06 00	adc #$0006			adc 	#6
.011945	85 2a		sta $2a				sta 	DStack
.011947	80 85		bra $0118ce			bra 	Function_GOTO 				; and do a GOTO.
.011949					Function_RETURN:
.011949	a6 2a		ldx $2a				ldx 	DStack
.01194b	b5 00		lda $00,x			lda 	$00,x
.01194d	c9 38 3e	cmp #$3e38			cmp 	#gosubTokenID 				; check top token.
.011950	d0 11		bne $011963			bne 	_FRetFail
.011952	8a		txa				txa 								; unpick stack.
.011953	38		sec				sec
.011954	e9 06 00	sbc #$0006			sbc 	#6
.011957	85 2a		sta $2a				sta 	DStack
.011959	aa		tax				tax
.01195a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01195c	85 06		sta $06				sta 	DCodePtr
.01195e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011960	85 22		sta $22				sta 	DLineNumber
.011962	60		rts				rts
.011963					_FRetFail:
.011963	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011966	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01196e	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.01197b					Function_REPEAT:
.01197b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01197d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01197f	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011981	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011983	95 04		sta $04,x			sta 	$04,x
.011985	a9 44 3c	lda #$3c44			lda 	#repeatTokenID 				; save repeat token at +6
.011988	95 06		sta $06,x			sta 	$06,x
.01198a	8a		txa				txa 								; advance stack by 6.
.01198b	18		clc				clc
.01198c	69 06 00	adc #$0006			adc 	#6
.01198f	85 2a		sta $2a				sta 	DStack
.011991	60		rts				rts
.011992					Function_UNTIL:
.011992	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011994	b5 00		lda $00,x			lda 	$00,x
.011996	c9 44 3c	cmp #$3c44			cmp 	#repeatTokenID
.011999	d0 26		bne $0119c1			bne 	_FUNFail
.01199b	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; .... until what.
.01199e	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.0119a1	d0 15		bne $0119b8			bne 	_FUNExit
.0119a3	c9 00 00	cmp #$0000			cmp 	#0
.0119a6	d0 10		bne $0119b8			bne 	_FUNExit
.0119a8	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0119aa	38		sec				sec
.0119ab	e9 06 00	sbc #$0006			sbc 	#6
.0119ae	aa		tax				tax
.0119af	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119b1	85 06		sta $06				sta 	DCodePtr
.0119b3	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119b5	85 22		sta $22				sta 	DLineNumber
.0119b7	60		rts				rts
.0119b8					_FUNExit:
.0119b8	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0119ba	38		sec				sec
.0119bb	e9 06 00	sbc #$0006			sbc 	#6
.0119be	85 2a		sta $2a				sta 	DStack
.0119c0	60		rts				rts
.0119c1					_FUNFail:
.0119c1	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>0119c4	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0119cc	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.0119d9					Function_WHILE:
.0119d9	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0119db	48		pha				pha 								; save on stack
.0119dc	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; while what.
.0119df	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0119e2	d0 14		bne $0119f8			bne 	_FWHExecute
.0119e4	c9 00 00	cmp #$0000			cmp 	#0
.0119e7	d0 0f		bne $0119f8			bne 	_FWHExecute
.0119e9	68		pla				pla 								; throw away current instruction
.0119ea	a9 49 3a	lda #$3a49			lda 	#wendTokenID 				; skip to WEND
.0119ed	a2 00 00	ldx #$0000			ldx 	#0
.0119f0	20 ce 16	jsr $0116ce			jsr 	ScanForwardLevel 			; scan forward checking structures
.0119f3	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0119f5	e6 06		inc $06				inc 	DCodePtr
.0119f7	60		rts				rts
.0119f8					_FWHExecute:
.0119f8	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119fa	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0119fb	3a		dec a				dec 	a
.0119fc	3a		dec a				dec 	a
.0119fd	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119ff	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a01	95 04		sta $04,x			sta 	$04,x
.011a03	a9 45 3c	lda #$3c45			lda 	#whileTokenID 				; save while token at +6
.011a06	95 06		sta $06,x			sta 	$06,x
.011a08	8a		txa				txa 								; advance stack by 6.
.011a09	18		clc				clc
.011a0a	69 06 00	adc #$0006			adc 	#6
.011a0d	85 2a		sta $2a				sta 	DStack
.011a0f	60		rts				rts
.011a10					Function_WEND:
.011a10	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011a12	b5 00		lda $00,x			lda 	$00,x
.011a14	c9 45 3c	cmp #$3c45			cmp 	#whileTokenID
.011a17	d0 11		bne $011a2a			bne 	_FWEFail
.011a19	8a		txa				txa 								; unpick stack and always loop back.
.011a1a	38		sec				sec 								; we do the check at the top.
.011a1b	e9 06 00	sbc #$0006			sbc 	#6
.011a1e	85 2a		sta $2a				sta 	DStack
.011a20	aa		tax				tax
.011a21	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a23	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011a25	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a27	85 22		sta $22				sta 	DLineNumber
.011a29	60		rts				rts
.011a2a					_FWEFail:
.011a2a	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011a2d	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011a35	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011a40					Function_END:
.011a40	4c 59 1e	jmp $011e59			jmp 	WarmStart
.011a43					Function_RUN:
.011a43	20 ce 1a	jsr $011ace			jsr 	Function_CLEAR 				; clear all variables.
.011a46	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011a48	18		clc				clc
.011a49	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011a4c	80 0c		bra $011a5a			bra 	FRun_NextLineNumber
.011a4e					RUNExecuteTokenBuffer:
.011a4e	64 22		stz $22				stz 	DLineNumber					; zero line number
.011a50	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011a53	18		clc				clc
.011a54	65 02		adc $02				adc 	DBaseAddress
.011a56	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011a58	80 12		bra $011a6c			bra 	FRun_NextInstruction
.011a5a					FRun_NextLineNumber:
.011a5a	a8		tay				tay 								; put in Y
.011a5b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011a5e	f0 e0		beq $011a40			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011a60	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011a63	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011a65	98		tya				tya 								; get address back
.011a66	18		clc				clc 								; skip over the link/line number
.011a67	69 04 00	adc #$0004			adc 	#4
.011a6a	85 06		sta $06				sta 	DCodePtr
.011a6c					FRun_NextInstruction:
.011a6c	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011a6e	20 77 1d	jsr $011d77			jsr 	HWCheckBreak 				; break key pressed.
.011a71	d0 40		bne $011ab3			bne 	_FRun_Break
.011a73	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011a75	f0 32		beq $011aa9			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011a77	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011a7a	f0 18		beq $011a94			beq 	_FRun_Colon
.011a7c	a8		tay				tay 								; save in Y
.011a7d	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011a80	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011a83	d0 15		bne $011a9a			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011a85	98		tya				tya 								; get token back
.011a86	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011a89	0a		asl a				asl 	a 							; double it into X
.011a8a	aa		tax				tax
.011a8b	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011a8d	e6 06		inc $06				inc 	DCodePtr
.011a8f	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011a92	80 d8		bra $011a6c			bra 	FRun_NextInstruction 		; do the following instruction.
.011a94					_FRun_Colon:
.011a94	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011a96	e6 06		inc $06				inc 	DCodePtr
.011a98	80 d2		bra $011a6c			bra 	FRun_NextInstruction 		; do the following instruction.
.011a9a					_FRun_TryLET:
.011a9a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011a9c	c9 00 c0	cmp #$c000			cmp 	#$C000
.011a9f	90 05		bcc $011aa6			bcc		_FRunSyntax 				; no, must be syntax.
.011aa1	20 d0 11	jsr $0111d0			jsr 	Function_LET 				; try as a LET.
.011aa4	80 c6		bra $011a6c			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011aa6					_FRunSyntax:
.011aa6	82 1c eb	brl $0105c5			brl 	SyntaxError
.011aa9					_FRun_EndInstruction:
.011aa9	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011aab	f0 0f		beq $011abc			beq 	_FRun_WarmStart
.011aad	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011aaf	1a		inc a				inc 	a 							; go to link for next line
.011ab0	1a		inc a				inc 	a
.011ab1	80 a7		bra $011a5a			bra 	FRun_NextLineNumber
.011ab3					_FRun_Break:
.011ab3	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011ab6	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011abc					_FRun_WarmStart:
.011abc	82 9a 03	brl $011e59			brl 	WarmStart
.011abf					Function_NEW:
.011abf	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011ac2	18		clc				clc
.011ac3	65 02		adc $02				adc 	DBaseAddress
.011ac5	a8		tay				tay
.011ac6	a9 00 00	lda #$0000			lda 	#$0000
.011ac9	99 00 00	sta $0000,y			sta 	$0000,y
.011acc	80 00		bra $011ace			bra 	Function_Clear
.011ace					Function_CLEAR:
.011ace	20 da 1a	jsr $011ada			jsr 	ClearVariablesPointersAndStacks
.011ad1	60		rts				rts
.011ad2					Function_STOP:
.011ad2	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011ad5	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011ada					ClearVariablesPointersAndStacks:
.011ada	a9 80 00	lda #$0080			lda 	#BASStack
.011add	85 2a		sta $2a				sta 	DStack
.011adf	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011ae1	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011ae4	a9 00 00	lda #$0000			lda 	#$0000
.011ae7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ae9	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011aeb	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011aee	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011af0	20 19 1b	jsr $011b19			jsr 	FindCodeEnd 				; find where the program ends.
.011af3	a8		tay				tay 								; Y points to it.
.011af4	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011af7	99 02 00	sta $0002,y			sta 	$0002,y
.011afa	99 04 00	sta $0004,y			sta 	$0004,y
.011afd	98		tya				tya 								; start of working memory up
.011afe	18		clc				clc
.011aff	69 06 00	adc #$0006			adc 	#6
.011b02	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011b05	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b07	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b0a					_FCLoop:
.011b0a	a9 00 00	lda #$0000			lda 	#$0000
.011b0d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b0f	c8		iny				iny
.011b10	c8		iny				iny
.011b11	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011b14	d0 f4		bne $011b0a			bne 	_FCLoop
.011b16	64 16		stz $16				stz 	DTempStringPointer
.011b18	60		rts				rts
.011b19					FindCodeEnd:
.011b19	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011b1c	18		clc				clc
.011b1d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011b1f	a8		tay				tay
.011b20					_FCELoop:
.011b20	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011b23	f0 08		beq $011b2d			beq 	_FCEExit
.011b25	98		tya				tya 								; add offset
.011b26	18		clc				clc
.011b27	79 00 00	adc $0000,y			adc 	$0000,y
.011b2a	a8		tay				tay
.011b2b	80 f3		bra $011b20			bra 	_FCELoop
.011b2d					_FCEExit:
.011b2d	98		tya				tya 								; return in A
.011b2e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011b2f					Function_Dim:
.011b2f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011b31	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011b34	f0 3b		beq $011b71			beq		_FDIMNotArray 				; no, error.
.011b36	20 92 03	jsr $010392			jsr 	VariableFind 				; try to find it.
.011b39	b0 41		bcs $011b7c			bcs 	_FDIMExists 				; if it does, that's an error.
.011b3b	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011b3d	48		pha				pha
.011b3e	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011b40	48		pha				pha
.011b41					_FDIMSkip:
.011b41	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011b43	e6 06		inc $06				inc 	DCodePtr
.011b45	e6 06		inc $06				inc 	DCodePtr
.011b47	29 00 08	and #$0800			and 	#IDContMask
.011b4a	d0 f5		bne $011b41			bne 	_FDIMSkip
.011b4c	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; evaluate the size
.011b4f	20 ef 05	jsr $0105ef			jsr 	ExpectRightBracket 			; check the ) following.
.011b52	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011b55	d0 3b		bne $011b92			bne 	_FDIMSize
.011b57	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011b5a	f0 36		beq $011b92			beq 	_FDIMSize
.011b5c	7a		ply				ply 								; restore HashTablePtr
.011b5d	84 20		sty $20				sty 	DHashTablePtr
.011b5f	7a		ply				ply 								; so now A is the high index, Y points to the token
.011b60	20 3c 04	jsr $01043c			jsr 	VariableCreate 				; create the variable.
.011b63	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011b65	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011b68	d0 06		bne $011b70			bne 	_FDIMExit
.011b6a	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011b6c	e6 06		inc $06				inc 	DCodePtr
.011b6e	80 bf		bra $011b2f			bra 	Function_DIM 				; and do another
.011b70					_FDIMExit:
.011b70	60		rts				rts
.011b71					_FDIMNotArray:
.011b71	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011b74	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011b7c					_FDIMExists:
.011b7c	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011b7f	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011b87	65 64 69 6d 65 6e 73 69 6f 6e 00
.011b92					_FDIMSize:
.011b92	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011b95	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011b9d	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.011ba3					Function_COLLECT:
.011ba3	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011ba5	85 0c		sta $0c				sta 	DTemp2
.011ba7	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011baa	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011bac	85 0e		sta $0e				sta 	DTemp2+2
.011bae	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011bb0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bb2					_FCNextPass:
.011bb2	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011bb4	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011bb6	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011bb8	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011bbb	18		clc				clc
.011bbc	65 02		adc $02				adc 	DBaseAddress
.011bbe	a8		tay				tay 								; put in Y
.011bbf	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011bc2					_FCO1:
.011bc2	20 e8 1b	jsr $011be8			jsr  	COLLECTScanVariable 		; scan that one.
.011bc5	c8		iny				iny 	 							; go to next pointer
.011bc6	c8		iny				iny
.011bc7	ca		dex				dex
.011bc8	d0 f8		bne $011bc2			bne 	_FCO1 						; until done all 16.
.011bca	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011bcd					_FCO2:
.011bcd	20 fc 1b	jsr $011bfc			jsr  	COLLECTScanArray 			; scan that one.
.011bd0	c8		iny				iny 	 							; go to next pointer
.011bd1	c8		iny				iny
.011bd2	ca		dex				dex
.011bd3	d0 f8		bne $011bcd			bne 	_FCO2 						; until done all 16.
.011bd5	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011bd7	f0 0e		beq $011be7			beq		_FCExit 					; if finished then exit.
.011bd9	48		pha				pha 								; save the target address
.011bda	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011bdc	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011bde	20 c4 06	jsr $0106c4			jsr 	StringMakeConcrete 			; make the string concrete.
.011be1	7a		ply				ply 								; restore the string.
.011be2	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011be5	80 cb		bra $011bb2			bra		_FCNextPass
.011be7					_FCExit:
.011be7	60		rts				rts
.011be8					COLLECTScanVariable:
.011be8	da		phx				phx 								; save XY
.011be9	5a		phy				phy
.011bea					_CSVLoop:
.011bea	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011bed	f0 0a		beq $011bf9			beq 	_CSVExit
.011bef	a8		tay				tay 								; put new address into Y
.011bf0	18		clc				clc 								; which is four on.
.011bf1	69 04 00	adc #$0004			adc 	#4
.011bf4	20 1d 1c	jsr $011c1d			jsr 	COLLECTCheck
.011bf7	80 f1		bra $011bea			bra 	_CSVLoop
.011bf9					_CSVExit:
.011bf9	7a		ply				ply
.011bfa	fa		plx				plx
.011bfb	60		rts				rts
.011bfc					COLLECTScanArray:
.011bfc	da		phx				phx 								; save XY
.011bfd	5a		phy				phy
.011bfe					_CSALoop:
.011bfe	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011c01	f0 17		beq $011c1a			beq 	_CSAExit
.011c03	a8		tay				tay 								; put new address in Y
.011c04	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011c07	aa		tax				tax
.011c08	e8		inx				inx									; +1 as one more data element.
.011c09	98		tya				tya 								; point A to first element, at +6
.011c0a	18		clc				clc
.011c0b	69 06 00	adc #$0006			adc 	#6
.011c0e					_CSADoAllStrings:
.011c0e	20 1d 1c	jsr $011c1d			jsr 	COLLECTCheck 				; collect check the first.
.011c11	1a		inc a				inc 	a 							; advance the pointer.
.011c12	1a		inc a				inc 	a
.011c13	1a		inc a				inc 	a
.011c14	1a		inc a				inc 	a
.011c15	ca		dex				dex
.011c16	d0 f6		bne $011c0e			bne 	_CSADoAllStrings 			; until all strings are done.
.011c18	80 e4		bra $011bfe			bra 	_CSALoop
.011c1a					_CSAExit:
.011c1a	7a		ply				ply
.011c1b	fa		plx				plx
.011c1c	60		rts				rts
.011c1d					COLLECTCheck:
.011c1d	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011c1f	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011c21	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011c23	90 0a		bcc $011c2f			bcc 	_COCExit
.011c25	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011c27	b0 06		bcs $011c2f			bcs 	_COCExit
.011c29	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011c2b	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011c2d	85 14		sta $14				sta 	DSignCount
.011c2f					_COCExit:
.011c2f	a5 0a		lda $0a				lda 	DTemp1+2
.011c31	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c32					Command_POKE:
.011c32	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; address
.011c35	48		pha				pha	 								; save on stack
.011c36	5a		phy				phy
.011c37	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; comma seperator.
.011c3a	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; data
.011c3d	fa		plx				plx 								; pull address and store in DTemp1
.011c3e	86 0a		stx $0a				stx 	DTemp1+2
.011c40	fa		plx				plx
.011c41	86 08		stx $08				stx 	DTemp1+0
.011c43	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c45	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c47	c2 20		rep #$20			rep 	#$20 						; word mode
.011c49	60		rts				rts
.011c4a					Command_DOKE:
.011c4a	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; address
.011c4d	48		pha				pha	 								; save on stack
.011c4e	5a		phy				phy
.011c4f	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; comma seperator.
.011c52	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; data
.011c55	fa		plx				plx 								; pull address and store in DTemp1
.011c56	86 0a		stx $0a				stx 	DTemp1+2
.011c58	fa		plx				plx
.011c59	86 08		stx $08				stx 	DTemp1+0
.011c5b	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c5d	60		rts				rts
.011c5e					Command_LOKE:
.011c5e	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; address
.011c61	48		pha				pha	 								; save on stack
.011c62	5a		phy				phy
.011c63	20 f8 05	jsr $0105f8			jsr 	ExpectComma 				; comma seperator.
.011c66	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; data
.011c69	fa		plx				plx 								; pull address and store in DTemp1
.011c6a	86 0a		stx $0a				stx 	DTemp1+2
.011c6c	fa		plx				plx
.011c6d	86 08		stx $08				stx 	DTemp1+0
.011c6f	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c71	98		tya				tya
.011c72	a0 02 00	ldy #$0002			ldy 	#2
.011c75	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c77	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011c78					Function_ASSERT:
.011c78	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; something that returns an integer.
.011c7b	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011c7d	05 08		ora $08				ora 	Dtemp1
.011c7f	f0 01		beq $011c82			beq 	_FAssFail
.011c81	60		rts				rts
.011c82					_FAssFail:
.011c82	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011c85	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011c8d	61 69 6c 65 64 00
.011c93					Function_CLS:
.011c93	20 f1 1c	jsr $011cf1			jsr 	HWClearScreen
.011c96	60		rts				rts
.011c97					Function_REM:
.011c97	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c99	f0 0f		beq $011caa			beq 	_FRemExit 					; no comment present
.011c9b	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011c9e	f0 0a		beq $011caa			beq 	_FRemExit 					; no comment present
.011ca0	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011ca3	b0 06		bcs $011cab			bcs 	_FRemSyntax
.011ca5	18		clc				clc 								; add to DCodePtr
.011ca6	65 06		adc $06				adc 	DCodePtr
.011ca8	85 06		sta $06				sta 	DCodePtr
.011caa					_FRemExit:
.011caa	60		rts				rts
.011cab					_FRemSyntax:
.011cab	82 17 e9	brl $0105c5			brl 	SyntaxError
.011cae					Function_LINK:
.011cae	20 13 03	jsr $010313			jsr 	EvaluateInteger 			; call address same page.
.011cb1	85 08		sta $08				sta 	DTemp1 						; target address
.011cb3	84 0a		sty $0a				sty 	DTemp1+2
.011cb5	7b		tdc				tda 								; work out what the actual address is
.011cb6	18		clc				clc
.011cb7	69 08 00	adc #$0008			adc 	#DTemp1
.011cba	8f ef 1c 01	sta $011cef			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011cbe	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011cc0	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011cc3	48		pha				pha
.011cc4	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011cc7	aa		tax				tax
.011cc8	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011ccb	a8		tay				tay
.011ccc	68		pla				pla
.011ccd	22 ee 1c 01	jsl $011cee			jsl 	_FLIExecuteIt
.011cd1	5a		phy				phy 								; save Y
.011cd2	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cd4	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011cd7	8a		txa				txa
.011cd8	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011cdb	68		pla				pla
.011cdc	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011cdf	c8		iny				iny 								; point to their high bytes and clear them
.011ce0	c8		iny				iny
.011ce1	a9 00 00	lda #$0000			lda 	#0
.011ce4	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011ce7	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011cea	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011ced	60		rts				rts
.011cee					_FLIExecuteIt:
.011cee	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011cf1					HWClearScreen:
.011cf1	48		pha				pha
.011cf2	da		phx				phx
.011cf3	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011cf6	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011cf9	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cfd	ca		dex				dex
.011cfe	10 f6		bpl $011cf6			bpl 	_CS0
.011d00	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d03	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d07	fa		plx				plx
.011d08	68		pla				pla
.011d09	60		rts				rts
.011d0a					HWPrintChar:
.011d0a	48		pha				pha
.011d0b	da		phx				phx
.011d0c	5a		phy				phy
.011d0d	48		pha				pha 								; cursor position -> X
.011d0e	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d12	aa		tax				tax
.011d13	68		pla				pla
.011d14	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d17	f0 08		beq $011d21			beq 	_HWPCNoWrite
.011d19	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d1b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d1f	c2 20		rep #$20			rep 	#$20
.011d21					_HWPCNoWrite:
.011d21	e8		inx				inx 								; bump cursor position.
.011d22	8a		txa				txa
.011d23	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d27	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d2a	d0 2b		bne $011d57			bne 	_HWNotEnd
.011d2c	38		sec				sec 	 							; back up one line
.011d2d	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d30	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d34	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d37					_HWScrollUp:
.011d37	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d3b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d3f	e8		inx				inx
.011d40	e8		inx				inx
.011d41	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d44	d0 f1		bne $011d37			bne 	_HWScrollUp
.011d46	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d49					_HWBlank:
.011d49	a9 20 20	lda #$2020			lda 	#$2020
.011d4c	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d50	e8		inx				inx
.011d51	e8		inx				inx
.011d52	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d55	d0 f2		bne $011d49			bne 	_HWBlank
.011d57					_HWNotEnd:
.011d57	7a		ply				ply
.011d58	fa		plx				plx
.011d59	68		pla				pla
.011d5a	60		rts				rts
.011d5b					HWNewLine:
.011d5b	48		pha				pha
.011d5c	da		phx				phx
.011d5d	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d60					HWMoveCursor:
.011d60	a9 ff ff	lda #$ffff			lda 	#-1
.011d63	20 0a 1d	jsr $011d0a			jsr 	HWPrintChar
.011d66	8a		txa				txa
.011d67	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d6b	d0 f3		bne $011d60			bne 	HWMoveCursor
.011d6d	fa		plx				plx
.011d6e	68		pla				pla
.011d6f	60		rts				rts
.011d70	48		pha		HWTab:	pha
.011d71	da		phx				phx
.011d72	a2 07 00	ldx #$0007			ldx 	#7
.011d75	80 e9		bra $011d60			bra 	HWMoveCursor
.011d77					HWCheckBreak:
.011d77	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011d7b	60		rts				rts
.011d7c					HWInkey:
.011d7c	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011d80	60		rts				rts
.011d81					HWInputLine:
.011d81	20 7c 1d	jsr $011d7c			jsr 	HWInkey 					; get a keystroke.
.011d84	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011d88	f0 f7		beq $011d81			beq 	HWInputLine
.011d8a					_HWILWait:
.011d8a	20 7c 1d	jsr $011d7c			jsr 	HWInkey
.011d8d	c9 00 00	cmp #$0000			cmp		#0
.011d90	f0 f8		beq $011d8a			beq 	_HWILWait
.011d92	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d96	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d99	90 2f		bcc $011dca			bcc 	_HWILControl
.011d9b	20 0a 1d	jsr $011d0a			jsr 	HWPrintChar 				; print out.
.011d9e	80 e1		bra $011d81			bra 	HWInputLine 				; loop back.
.011da0					_HWILBackSpace:
.011da0	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011da4	f0 db		beq $011d81			beq 	HWInputLine
.011da6	aa		tax				tax
.011da7	ca		dex				dex
.011da8	a9 20 00	lda #$0020			lda 	#" "
.011dab	e2 20		sep #$20			sep 	#$20
.011dad	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011db1	c2 20		rep #$20			rep 	#$20
.011db3	a2 ff ff	ldx #$ffff			ldx 	#-1
.011db6					_HWILMove:
.011db6	8a		txa				txa
.011db7	18		clc				clc
.011db8	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011dbc	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011dbf	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011dc3	80 bc		bra $011d81			bra 	HWInputLine
.011dc5					_HWILClear:
.011dc5	20 f1 1c	jsr $011cf1			jsr 	HWClearScreen
.011dc8	80 b7		bra $011d81			bra 	HWInputLine
.011dca					_HWILControl:
.011dca	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011dcd	f0 60		beq $011e2f			beq 	_HWILTab
.011dcf	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011dd2	f0 cc		beq $011da0			beq 	_HWILBackSpace
.011dd4	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011dd7	c9 17 00	cmp #$0017			cmp 	#23
.011dda	f0 da		beq $011db6			beq 	_HWILMove
.011ddc	a2 40 00	ldx #$0040			ldx 	#sWidth
.011ddf	c9 13 00	cmp #$0013			cmp 	#19
.011de2	f0 d2		beq $011db6			beq 	_HWILMove
.011de4	a2 ff ff	ldx #$ffff			ldx 	#-1
.011de7	c9 01 00	cmp #$0001			cmp 	#1
.011dea	f0 ca		beq $011db6			beq 	_HWILMove
.011dec	a2 01 00	ldx #$0001			ldx 	#1
.011def	c9 04 00	cmp #$0004			cmp 	#4
.011df2	f0 c2		beq $011db6			beq 	_HWILMove
.011df4	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011df7	f0 cc		beq $011dc5			beq 	_HWILClear
.011df9	c9 0d 00	cmp #$000d			cmp 	#13
.011dfc	d0 83		bne $011d81			bne 	HWInputLine
.011dfe	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e02	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e05	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e07	a9 0f 00	lda #$000f			lda 	#$000F
.011e0a	85 0a		sta $0a				sta 	DTemp1+2
.011e0c	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e0f					_HWILCopy:
.011e0f	bb		tyx				tyx
.011e10	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e12	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e16	c8		iny				iny
.011e17	c8		iny				iny
.011e18	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e1b	d0 f2		bne $011e0f			bne 	_HWILCopy
.011e1d	a9 00 00	lda #$0000			lda 	#0
.011e20	bb		tyx				tyx
.011e21	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e25	20 5b 1d	jsr $011d5b			jsr 	HWNewLine 					; next line.
.011e28	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e2b	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e2e	60		rts				rts
.011e2f					_HWILTab:
.011e2f	20 70 1d	jsr $011d70			jsr 	HWTab
.011e32	82 4c ff	brl $011d81			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e35					SwitchBasicInstance:
.011e35	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e37	20 f1 1c	jsr $011cf1			jsr 	HWClearScreen 						; clear screen
.011e3a	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e3d	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e3f	86 02		stx $02				stx		DBaseAddress
.011e41	84 04		sty $04				sty 	DHighAddress
.011e43	ba		tsx				tsx 										; save the current SP.
.011e44	86 3a		stx $3a				stx 	DStack65816
.011e46	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e47	48		pha				pha 										; then copy it into B.
.011e48	ab		plb				plb
.011e49	ab		plb				plb
.011e4a	20 da 1a	jsr $011ada			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e4d	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e50	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e52	f0 05		beq $011e59			beq 	WarmStart
.011e54	3a		dec a				dec 	a 									; decrement zero.
.011e55	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e57	80 18		bra $011e71			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e59					WarmStart:
.011e59	a2 bf 1e	ldx #$1ebf			ldx 	#BasicPrompt & $FFFF
.011e5c	20 31 06	jsr $010631			jsr 	PrintROMMessage
.011e5f					NextCommand:
.011e5f	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e61	9a		txs				txs
.011e62	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e64	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e67	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e69	d0 52		bne $011ebd			bne 	ExitEmulator
.011e6b	20 81 1d	jsr $011d81			jsr 	HWInputLine 						; read line to YA.
.011e6e	20 f8 06	jsr $0106f8			jsr 	Tokenise 							; tokenise it.
.011e71					ExecuteTokenBuffer:
.011e71	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e74	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e76	f0 e7		beq $011e5f			beq 	NextCommand 						; nothing.
.011e78	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011e7b	90 27		bcc $011ea4			bcc 	_ETBCommand
.011e7d	c9 00 c0	cmp #$c000			cmp 	#$C000
.011e80	b0 22		bcs $011ea4			bcs 	_ETBCommand
.011e82	38		sec				sec
.011e83	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011e86	f0 1f		beq $011ea7			beq 	_ETBError
.011e88	48		pha				pha
.011e89	20 ca 04	jsr $0104ca			jsr 	LineDelete 							; delete the line, if it exists.
.011e8c	20 da 1a	jsr $011ada			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e8f	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011e92	18		clc				clc
.011e93	65 02		adc $02				adc 	DBaseAddress
.011e95	a8		tay				tay 										; Y contains the code.
.011e96	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e99	f0 c4		beq $011e5f			beq 	NextCommand 						; no, next command.
.011e9b	68		pla				pla 										; line number in A, code in Y.
.011e9c	20 05 05	jsr $010505			jsr 	LineInsert 							; insert the line
.011e9f	20 da 1a	jsr $011ada			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ea2	80 bb		bra $011e5f			bra 	NextCommand
.011ea4					_ETBCommand:
.011ea4	4c 4e 1a	jmp $011a4e			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011ea7					_ETBError:
.011ea7	20 89 05	jsr $010589			jsr 	ErrorHandler 						; call error routine
>011eaa	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011eb2	61 76 65 20 6c 69 6e 65 20 30 00
.011ebd					ExitEmulator:
.011ebd	02 00		cop #$00			cop 	#0
.011ebf					BasicPrompt:
>011ebf	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 f8 06	jsr $0106f8			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	1e 44 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 64 00 2c 3e 0a 00
>024208	06 42 6f 6d 62 65 72 00 00 00 22 00 69 00 01 e0
>024218	06 22 08 00 05 4f 75 74 65 72 26 32 04 c5 06 22
>024228	2a 40 26 32 1a c0 06 22 2c 40 00 00 2a 00 6b 00
>024238	36 3e 16 00 12 53 68 6f 75 6c 64 20 62 65 20 6f
>024248	75 74 65 72 20 3a 20 00 25 32 01 e0 24 32 04 c5
>024258	24 32 1a c0 00 00 1c 00 6e 00 42 3e 97 cb 2b cb
>024268	14 c0 26 32 36 3e 0a 00 07 57 6f 72 6b 65 64 21
>024278	00 00 2a 00 70 00 36 3e 16 00 12 53 68 6f 75 6c
>024288	64 20 62 65 20 6f 75 74 65 72 20 3a 20 00 25 32
>024298	01 e0 24 32 04 c5 24 32 1a c0 00 00 1c 00 72 00
>0242a8	42 3e 97 cb 2b cb 14 c0 26 32 36 3e 0a 00 07 57
>0242b8	6f 72 6b 65 64 21 00 00 2a 00 74 00 36 3e 16 00
>0242c8	12 53 68 6f 75 6c 64 20 62 65 20 6f 75 74 65 72
>0242d8	20 3a 20 00 25 32 01 e0 24 32 04 c5 24 32 1a c0
>0242e8	00 00 08 00 78 00 2f 3e 00 00 0e 00 e8 03 48 3c
>0242f8	97 cb 2b cb 14 c0 00 00 12 00 e9 03 43 3e 01 e0
>024308	24 32 04 c5 24 32 1a c0 00 00 14 00 ea 03 36 3e
>024318	0c 00 08 49 6e 20 73 74 61 72 74 00 00 00 24 00
>024328	ec 03 01 e0 06 22 08 00 05 49 6e 6e 65 72 26 32
>024338	04 c5 06 22 63 40 26 32 1a c0 06 22 0b 24 01 40
>024348	00 00 2a 00 ed 03 36 3e 16 00 13 09 53 68 6f 75
>024358	6c 64 20 62 65 20 69 6e 6e 65 72 20 3a 20 25 32
>024368	01 e0 24 32 04 c5 24 32 1a c0 00 00 12 00 f0 03
>024378	42 3e c4 cb 4b ca 89 cb ab ca 04 c0 00 00 2a 00
>024388	f1 03 36 3e 16 00 13 09 53 68 6f 75 6c 64 20 62
>024398	65 20 69 6e 6e 65 72 20 3a 20 25 32 01 e0 24 32
>0243a8	04 c5 24 32 1a c0 00 00 08 00 10 04 4e 3a 00 00
>0243b8	12 00 4c 04 48 3c c4 cb 4b ca 89 cb ab ca 04 c0
>0243c8	00 00 20 00 51 04 43 3e 01 e0 26 32 01 e0 06 22
>0243d8	10 00 0c 72 65 61 6c 6c 79 20 69 6e 6e 65 72 00
>0243e8	00 00 26 00 56 04 36 3e 12 00 0f 20 20 20 09 09
>0243f8	73 75 62 20 6d 65 74 68 6f 64 24 32 01 e0 24 32
>024408	04 c5 24 32 1a c0 00 00 08 00 60 04 4e 3a 00 00
>024418	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>024428	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1980 times (31680 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
