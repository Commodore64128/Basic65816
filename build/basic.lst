
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 14 12:51:15 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 64 11 01	jmp $011164			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	33 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	12 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	22 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	32 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	76 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	dd 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	42 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	bf 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	a1 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	5c 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	5c 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	dd 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e9 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	66 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	dd 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ee 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	00 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	77 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	57 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	33 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	1d 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a5 09					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	c5 0a					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b1 08					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e9 08					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	1d 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	59 09					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	73 09					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	8a 09					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	33 04					.word IllegalToken             & $FFFF ; token $321d ","
>01003c	33 04					.word IllegalToken             & $FFFF ; token $321e ";"
>01003e	33 04					.word IllegalToken             & $FFFF ; token $321f ":"
>010040	33 04					.word IllegalToken             & $FFFF ; token $3220 "("
>010042	33 04					.word IllegalToken             & $FFFF ; token $3221 ")"
>010044	33 04					.word IllegalToken             & $FFFF ; token $3222 "'"
>010046	33 04					.word IllegalToken             & $FFFF ; token $3223 "to"
>010048	33 04					.word IllegalToken             & $FFFF ; token $3224 "step"
>01004a	51 11					.word Function_REM             & $FFFF ; token $3e25 "rem"
>01004c	83 0b					.word Function_Let             & $FFFF ; token $3e26 "let"
>01004e	32 11					.word Function_ASSERT          & $FFFF ; token $3e27 "assert"
>010050	75 0f					.word Function_END             & $FFFF ; token $3e28 "end"
>010052	77 0f					.word Function_RUN             & $FFFF ; token $3e29 "run"
>010054	d3 0f					.word Function_STOP            & $FFFF ; token $3e2a "stop"
>010056	cf 0f					.word Function_CLEAR           & $FFFF ; token $3e2b "clear"
>010058	2e 10					.word Function_Dim             & $FFFF ; token $3e2c "dim"
>01005a	a2 10					.word Function_COLLECT         & $FFFF ; token $3e2d "collect"
>01005c	4d 11					.word Function_CLS             & $FFFF ; token $3e2e "cls"
>01005e	fe 0b					.word Function_PRINT           & $FFFF ; token $3e2f "print"
>010060	03 0e					.word Function_GOTO            & $FFFF ; token $3e30 "goto"
>010062	62 0e					.word Function_GOSUB           & $FFFF ; token $3e31 "gosub"
>010064	7e 0e					.word Function_RETURN          & $FFFF ; token $3e32 "return"
>010066	c0 0d					.word Function_ONGOTO          & $FFFF ; token $3e33 "on"
>010068	b1 0c					.word Handler_ELSE             & $FFFF ; token $3e34 "else"
>01006a	b0 0e					.word Function_REPEAT          & $FFFF ; token $3c35 "repeat"
>01006c	0e 0f					.word Function_WHILE           & $FFFF ; token $3c36 "while"
>01006e	4a 0c					.word Function_IF              & $FFFF ; token $3c37 "if"
>010070	86 0d					.word Command_FOR              & $FFFF ; token $3c38 "for"
>010072	45 0f					.word Function_WEND            & $FFFF ; token $3a39 "wend"
>010074	c7 0e					.word Function_UNTIL           & $FFFF ; token $3a3a "until"
>010076	33 04					.word IllegalToken             & $FFFF ; token $3a3b "then"
>010078	df 0c					.word Handler_ENDIF            & $FFFF ; token $3a3c "endif"
>01007a	33 04					.word IllegalToken             & $FFFF ; token $3a3d "next"
.01007c					TokenText:
>01007c	02 26					 .text $02,"&"        ; token $2001
>01007e	02 7c					 .text $02,"|"        ; token $2002
>010080	02 5e					 .text $02,"^"        ; token $2003
>010082	12 3c					 .text $12,"<"        ; token $2204
>010084	12 3e					 .text $12,">"        ; token $2205
>010086	12 3d					 .text $12,"="        ; token $2206
>010088	13 3c 3d				 .text $13,"<="       ; token $2207
>01008b	13 3e 3d				 .text $13,">="       ; token $2208
>01008e	13 3c 3e				 .text $13,"<>"       ; token $2209
>010091	22 2b					 .text $22,"+"        ; token $240a
>010093	22 2d					 .text $22,"-"        ; token $240b
>010095	32 2a					 .text $32,"*"        ; token $260c
>010097	32 2f					 .text $32,"/"        ; token $260d
>010099	32 25					 .text $32,"%"        ; token $260e
>01009b	33 3e 3e				 .text $33,">>"       ; token $260f
>01009e	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100a1	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100a6	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100ab	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100b0	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100b5	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ba	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100c0	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100c6	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100cb	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100d0	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100d6	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100dc	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100e2	92 2c					 .text $92,","        ; token $321d
>0100e4	92 3b					 .text $92,";"        ; token $321e
>0100e6	92 3a					 .text $92,":"        ; token $321f
>0100e8	92 28					 .text $92,"("        ; token $3220
>0100ea	92 29					 .text $92,")"        ; token $3221
>0100ec	92 27					 .text $92,"'"        ; token $3222
>0100ee	93 74 6f				 .text $93,"to"       ; token $3223
>0100f1	95 73 74 65 70				 .text $95,"step"     ; token $3224
>0100f6	f4 72 65 6d				 .text $f4,"rem"      ; token $3e25
>0100fa	f4 6c 65 74				 .text $f4,"let"      ; token $3e26
>0100fe	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e27
>010105	f4 65 6e 64				 .text $f4,"end"      ; token $3e28
>010109	f4 72 75 6e				 .text $f4,"run"      ; token $3e29
>01010d	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2a
>010112	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e2b
>010118	f4 64 69 6d				 .text $f4,"dim"      ; token $3e2c
>01011c	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e2d
>010124	f4 63 6c 73				 .text $f4,"cls"      ; token $3e2e
>010128	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e2f
>01012e	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e30
>010133	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e31
>010139	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e32
>010140	f3 6f 6e				 .text $f3,"on"       ; token $3e33
>010143	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e34
>010148	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c35
>01014f	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c36
>010155	e3 69 66				 .text $e3,"if"       ; token $3c37
>010158	e4 66 6f 72				 .text $e4,"for"      ; token $3c38
>01015c	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a39
>010161	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a3a
>010167	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a3b
>01016c	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a3c
>010172	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a3d
>010177	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$321d					commaTokenID                     = $321d
=$321e					semicolonTokenID                 = $321e
=$321f					colonTokenID                     = $321f
=$3220					lparenTokenID                    = $3220
=$3221					rparenTokenID                    = $3221
=$3222					squoteTokenID                    = $3222
=$3223					toTokenID                        = $3223
=$3224					stepTokenID                      = $3224
=$3e25					remTokenID                       = $3e25
=$3e26					letTokenID                       = $3e26
=$3e27					assertTokenID                    = $3e27
=$3e28					endTokenID                       = $3e28
=$3e29					runTokenID                       = $3e29
=$3e2a					stopTokenID                      = $3e2a
=$3e2b					clearTokenID                     = $3e2b
=$3e2c					dimTokenID                       = $3e2c
=$3e2d					collectTokenID                   = $3e2d
=$3e2e					clsTokenID                       = $3e2e
=$3e2f					printTokenID                     = $3e2f
=$3e30					gotoTokenID                      = $3e30
=$3e31					gosubTokenID                     = $3e31
=$3e32					returnTokenID                    = $3e32
=$3e33					onTokenID                        = $3e33
=$3e34					elseTokenID                      = $3e34
=$3c35					repeatTokenID                    = $3c35
=$3c36					whileTokenID                     = $3c36
=$3c37					ifTokenID                        = $3c37
=$3c38					forTokenID                       = $3c38
=$3a39					wendTokenID                      = $3a39
=$3a3a					untilTokenID                     = $3a3a
=$3a3b					thenTokenID                      = $3a3b
=$3a3c					endifTokenID                     = $3a3c
=$3a3d					nextTokenID                      = $3a3d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010178					Evaluate:
.010178	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.01017b	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.01017e					EvaluateLevel:
.01017e	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010181	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010183	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010185	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010188	b0 79		bcs $010203			bcs 	_ELVariable
.01018a	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01018d	b0 16		bcs $0101a5			bcs 	_ELConstant
.01018f	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010192	90 7f		bcc $010213			bcc 	_ELStringConstant
.010194	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010197	90 03		bcc $01019c			bcc 	_ELConstantShift
.010199	82 94 00	brl $010230			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01019c					_ELConstantShift:
.01019c	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.01019f	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101a3	e6 06		inc $06				inc 	DCodePtr
.0101a5					_ELConstant:
.0101a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101a7	38		sec				sec  								; shift it in the range 0-32767
.0101a8	e9 00 40	sbc #$4000			sbc 	#$4000
.0101ab	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101ac	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101ae	6a		ror a				ror 	a 							; rotate that into the constant value
.0101af	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101b1	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101b3	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101b5	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101b7	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101b9	e6 06		inc $06				inc 	DCodePtr
.0101bb					_ELGotAtom:
.0101bb	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0101bd	a8		tay				tay 								; save in Y
.0101be	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0101c1	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0101c4	d0 35		bne $0101fb			bne 	_ELExit
.0101c6	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0101c8	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101cb	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0101cd	98		tya				tya 								; get the keyword token back
.0101ce	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101d1	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0101d3	90 26		bcc $0101fb			bcc 	_ELExit 					; precedence too low, then exit.
.0101d5	5a		phy				phy 								; save the binary operator on the stack
.0101d6	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0101d8	e6 06		inc $06				inc 	DCodePtr
.0101da	18		clc				clc 								; try the next level up
.0101db	69 00 02	adc #$0200			adc 	#1 << TokenShift
.0101de	e8		inx				inx 								; calculate the RHS at the next stack level.
.0101df	e8		inx				inx
.0101e0	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.0101e3	ca		dex				dex
.0101e4	ca		dex				dex
.0101e5	7a		ply				ply 								; get operator token back into Y
.0101e6					_ELExecuteY:
.0101e6	98		tya				tya
.0101e7	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101ea	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.0101eb	9b		txy				txy 								; save X in Y
.0101ec	aa		tax				tax 								; double keyword ID in X
.0101ed	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.0101f1	bb		tyx				tyx 								; restore X.
.0101f2	8f f7 01 01	sta $0101f7			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.0101f6					_ELCallRoutine:
.0101f6	20 f6 01	jsr $0101f6			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.0101f9	80 c0		bra $0101bb			bra 	_ELGotAtom 					; go round operator level again.
.0101fb	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.0101fd	0a		asl a				asl 	a
.0101fe	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010200	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010202	60		rts				rts
.010203					_ELVariable:
.010203	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010205	20 c4 02	jsr $0102c4			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010208	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01020a	94 10		sty $10,x			sty 	EXSValueH+0,x
.01020c	76 20		ror $20,x			ror 	EXSPrecType+0,x
.01020e	80 ab		bra $0101bb			bra 	_ELGotAtom
.010210					_ELSyntax
.010210	82 31 02	brl $010444			brl 	SyntaxError
.010213					_ELStringConstant:
.010213	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010216	f0 f8		beq $010210			beq 	_ELSyntax
.010218	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01021a	1a		inc a				inc 	a
.01021b	1a		inc a				inc 	a
.01021c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.01021e	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010220	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010222	18		clc				clc 								; add to string constant.
.010223	65 06		adc $06				adc 	DCodePtr
.010225	85 06		sta $06				sta 	DCodePtr
.010227	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010229	09 00 80	ora #$8000			ora 	#$8000
.01022c	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01022e	80 8b		bra $0101bb			bra 	_ELGotAtom
.010230					_ELUnaryKeyword:
.010230	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010232	a8		tay				tay 								; put the token in Y.
.010233	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010235	e6 06		inc $06				inc 	DCodePtr
.010237	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01023a	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.01023d	f0 a7		beq $0101e6			beq 	_ELExecuteY					; go back and execute it
.01023f	c0 20 32	cpy #$3220			cpy 	#lparenTokenID 				; is it an open bracket ?
.010242	d0 11		bne $010255			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010244	20 7b 02	jsr $01027b			jsr 	EvaluateNext 				; evaluate the expression
.010247	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; consume the right bracket.
.01024a					_ELCopy:
.01024a	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01024c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01024e	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010250	95 10		sta $10,x			sta 	EXSValueH+0,x
.010252	82 66 ff	brl $0101bb			brl 	_ELGotAtom 					; and continue.
.010255					_ELUnaryOperator:
.010255	5a		phy				phy 								; save the operator on the stack.
.010256	e8		inx				inx 								; this is like evaluate next
.010257	e8		inx				inx
.010258	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01025b	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.01025e	ca		dex				dex 								; unwind the stack.
.01025f	ca		dex				dex
.010260	68		pla				pla 								; restore the unary operator.
.010261	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010264	f0 03		beq $010269			beq 	_ELMinus
.010266	4c 44 04	jmp $010444			jmp 	SyntaxError
.010269					_ELMinus:
.010269	38		sec				sec 								; do the negation calculation.
.01026a	a9 00 00	lda #$0000			lda 	#0
.01026d	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01026f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010271	a9 00 00	lda #$0000			lda 	#0
.010274	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010276	95 10		sta $10,x			sta 	EXSValueH+0,x
.010278	82 40 ff	brl $0101bb			brl 	_ELGotAtom					; and continue.
.01027b					EvaluateNext:
.01027b	e8		inx				inx
.01027c	e8		inx				inx
.01027d	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010280	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.010283	ca		dex				dex
.010284	ca		dex				dex
.010285	60		rts				rts
.010286					EvaluateInteger:
.010286	20 78 01	jsr $010178			jsr 	Evaluate
.010289	b0 01		bcs $01028c			bcs 	EIType
.01028b	60		rts				rts
.01028c					EIType:
.01028c	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01028f	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010297	78 70 65 63 74 65 64 00
.01029f					EvaluateNextInteger:
.01029f	20 7b 02	jsr $01027b			jsr 	EvaluateNext
.0102a2	b0 e8		bcs $01028c			bcs 	EIType
.0102a4	60		rts				rts
.0102a5					EvaluateString:
.0102a5	20 78 01	jsr $010178			jsr 	Evaluate
.0102a8	90 01		bcc $0102ab			bcc 	ESType
.0102aa	60		rts				rts
.0102ab					ESType:
.0102ab	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0102ae	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102b6	78 70 65 63 74 65 64 00
.0102be					EvaluateNextString:
.0102be	20 7b 02	jsr $01027b			jsr 	EvaluateNext
.0102c1	90 e8		bcc $0102ab			bcc 	ESType
.0102c3	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0102c4					VariableAccessExpression:
.0102c4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0102c6	48		pha				pha
.0102c7	20 05 03	jsr $010305			jsr 	VariableFind 				; try to find the variables
.0102ca	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0102cc	90 23		bcc $0102f1			bcc 	_VANError
.0102ce	68		pla				pla 								; get and save that first token
.0102cf	48		pha				pha
.0102d0	a8		tay				tay 								; put first token in Y.
.0102d1	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102d4	f0 07		beq $0102dd			beq 	_VANNotArray
.0102d6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.0102d8	20 7c 03	jsr $01037c			jsr 	VariableSubscript			; index calculation
.0102db	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0102dd					_VANNotArray:
.0102dd	68		pla				pla 								; get the token back.
.0102de	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.0102e1	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.0102e4	38		sec				sec 								; set up return string.
.0102e5	f0 06		beq $0102ed			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.0102e7	18		clc				clc 								; returning a number, read high data word
.0102e8	a0 02 00	ldy #$0002			ldy 	#2
.0102eb	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.0102ed					_VANLoadLower:
.0102ed	a8		tay				tay 								; put A into Y (this is the high byte)
.0102ee	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.0102f0	60		rts				rts
.0102f1					_VANError:
.0102f1	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0102f4	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>0102fc	20 75 6e 6b 6e 6f 77 6e 00
.010305					VariableFind:
.010305	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010307	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01030a	90 5c		bcc $010368			bcc 	_VFError
.01030c	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01030f	b0 11		bcs $010322			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010311	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010314	3a		dec a				dec 	a 							; now 0-25
.010315	0a		asl a				asl 	a 							; x 4 and clear carry
.010316	0a		asl a				asl 	a
.010317	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01031a	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01031c	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.01031e	e6 06		inc $06				inc 	DCodePtr
.010320	38		sec				sec 								; return with carry set.
.010321	60		rts				rts
.010322					_VFSlowVariable:
.010322	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010324	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010327	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010328	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010329	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.01032c	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.01032e	85 08		sta $08				sta 	DTemp1
.010330	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010332	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010335	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010336	65 08		adc $08				adc 	DTemp1
.010338	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01033a	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01033c					_VFNext:
.01033c	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.01033e	f0 26		beq $010366			beq 	_VFFail 					; if zero, then it's the end of the list.
.010340	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010342	a8		tay				tay 								; read the address of the name at $0002,y
.010343	b9 02 00	lda $0002,y			lda 	$0002,y
.010346	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010348	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01034b					_VFCompare:
.01034b	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.01034d	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01034f	d0 eb		bne $01033c			bne 	_VFNext 					; if not, go to the next one.
.010351	c8		iny				iny 								; advance token pointer
.010352	c8		iny				iny
.010353	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010356	d0 f3		bne $01034b			bne 	_VFCompare
.010358	98		tya				tya 								; this is the length of the word.
.010359	18		clc				clc 								; so we add it to the code pointer
.01035a	65 06		adc $06				adc 	DCodePtr
.01035c	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.01035e	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010360	18		clc				clc 								; four on is the actual data
.010361	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010364	38		sec				sec 								; return with CS indicating success
.010365	60		rts				rts
.010366					_VFFail:
.010366	18		clc				clc
.010367	60		rts				rts
.010368					_VFError:
.010368	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01036b	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010373	76 61 72 69 61 62 6c 65 00
.01037c					VariableSubscript:
.01037c	48		pha				pha		 							; save variable address on stack.
.01037d	20 9f 02	jsr $01029f			jsr		EvaluateNextInteger 		; get the subscript
.010380	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; skip right bracket.
.010383	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010386	d0 10		bne $010398			bne 	_VANSubscript
.010388	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01038a	f0 02		beq $01038e			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01038c	b0 0a		bcs $010398			bcs 	_VANSubscript
.01038e					_VANSubOkay:
.01038e	0a		asl a				asl 	a 							; double lsword
.01038f	0a		asl a				asl 	a 							; and again, also clears carry.
.010390	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010392	68		pla				pla 								; restore DVariablePtr
.010393	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010394	1a		inc a				inc 	a
.010395	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010397	60		rts				rts
.010398					_VANSubscript:
.010398	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01039b	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103a3	79 20 53 75 62 73 63 72 69 70 74 00
.0103af					VariableCreate:
.0103af	48		pha				pha 								; save count.
.0103b0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103b3	29 00 20	and #$2000			and 	#IDTypeMask
.0103b6	f0 06		beq $0103be			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103b8	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103bb	18		clc				clc
.0103bc	65 02		adc $02				adc 	DBaseAddress
.0103be					_VCIsInteger:
.0103be	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.0103c0	68		pla				pla 								; restore count
.0103c1	48		pha				pha
.0103c2	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.0103c3	0a		asl a				asl 	a 							; 2 x # items.
.0103c4	0a		asl a				asl 	a 							; 4 x # items.
.0103c5					_VCNotSingle:
.0103c5	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0103c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0103ca	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.0103cd	f0 04		beq $0103d3			beq 	_VCNotArray
.0103cf	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.0103d1	e6 08		inc $08				inc 	DTemp1
.0103d3					_VCNotArray:
.0103d3	5a		phy				phy 								; save address of token on stack.
.0103d4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0103d7	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.0103d9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103db	18		clc				clc 								; add 4 for link and name.
.0103dc	69 04 00	adc #$0004			adc 	#4
.0103df	65 08		adc $08				adc 	DTemp1 						; add memory required
.0103e1	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.0103e3	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.0103e5					_VCErase:
.0103e5	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103e7	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103ea	c8		iny				iny
.0103eb	c8		iny				iny
.0103ec	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.0103ee	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.0103f0	d0 f3		bne $0103e5			bne 	_VCErase
.0103f2	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.0103f4	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.0103f6	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.0103f9	68		pla				pla 								; restore the token address
.0103fa	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0103fd	68		pla				pla 								; restore count and store.
.0103fe	99 04 00	sta $0004,y			sta 	$0004,y
.010401					_VCNotArray2:
.010401	98		tya				tya 								; update the head link
.010402	92 20		sta ($20)			sta 	(DHashTablePtr)
.010404	18		clc				clc 								; advance pointer to the data bit.
.010405	69 04 00	adc #$0004			adc 	#4
.010408	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010409					ErrorHandler:
.010409	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01040b	fa		plx				plx 								; address of error message -1
.01040c	e8		inx				inx 								; error message.
.01040d	20 b0 04	jsr $0104b0			jsr 	PrintROMMessage 			; print message in ROM
.010410	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010412	f0 15		beq $010429			beq 	_EHEndMessage
.010414	a2 2e 04	ldx #$042e			ldx 	#_EHAt & $FFFF 				; print " at "
.010417	20 b0 04	jsr $0104b0			jsr 	PrintROMMessage
.01041a	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01041c	a0 00 00	ldy #$0000			ldy 	#0
.01041f	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010422	20 e0 0a	jsr $010ae0			jsr 	ConvertToString 			; convert and print it.
.010425	a8		tay				tay
.010426	20 c4 04	jsr $0104c4			jsr 	PrintBASICString
.010429					_EHEndMessage:
.010429	20 b6 11	jsr $0111b6			jsr 	HWNewLine
.01042c	80 fe		bra $01042c	_EH1:	bra 	_EH1
>01042e	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010433					IllegalToken:
.010433	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010436	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01043e	54 6f 6b 65 6e 00
.010444					SyntaxError:
.010444	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010447	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01044f	72 72 6f 72 00
.010454					ExpectToken:
.010454	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010456	d0 05		bne $01045d			bne 	_CTKError					; error if not
.010458	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01045a	e6 06		inc $06				inc 	DCodePtr
.01045c	60		rts				rts
.01045d					_CTKError:
.01045d	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010460	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010468	74 6f 6b 65 6e 00
.01046e					ExpectRightBracket:
.01046e	48		pha				pha
.01046f	a9 21 32	lda #$3221			lda 	#rparenTokenID
.010472	20 54 04	jsr $010454			jsr 	ExpectToken
.010475	68		pla				pla
.010476	60		rts				rts
.010477					ExpectComma:
.010477	48		pha				pha
.010478	a9 1d 32	lda #$321d			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01047b	20 54 04	jsr $010454			jsr 	ExpectToken
.01047e	68		pla				pla
.01047f	60		rts				rts
.010480					CheckBothNumeric:
.010480	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010482	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010484	30 01		bmi $010487			bmi 	_CBNFail 					; need to both be zero in bit 15
.010486	60		rts				rts
.010487					_CBNFail:
.010487	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01048a	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010492	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104a0					ResetTypeInteger:
.0104a0	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104a2	29 ff 7f	and #$7fff			and 	#$7FFF
.0104a5	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104a7	60		rts				rts
.0104a8					ResetTypeString:
.0104a8	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104aa	09 00 80	ora #$8000			ora 	#$8000
.0104ad	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104af	60		rts				rts
.0104b0					PrintROMMessage:
.0104b0	48		pha				pha
.0104b1	da		phx				phx
.0104b2					_PRMLoop:
.0104b2	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104b6	29 ff 00	and #$00ff			and 	#$00FF
.0104b9	f0 06		beq $0104c1			beq 	_PRMExit
.0104bb	20 94 11	jsr $011194			jsr 	HWPrintChar
.0104be	e8		inx				inx
.0104bf	80 f1		bra $0104b2			bra 	_PRMLoop
.0104c1					_PRMExit:
.0104c1	fa		plx				plx
.0104c2	68		pla				pla
.0104c3	60		rts				rts
.0104c4					PrintBASICString:
.0104c4	48		pha				pha
.0104c5	da		phx				phx
.0104c6	5a		phy				phy
.0104c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0104ca	29 ff 00	and #$00ff			and 	#$00FF
.0104cd	f0 0b		beq $0104da			beq 	_PBSExit 					; null string
.0104cf	aa		tax				tax
.0104d0					_PBSLoop:
.0104d0	c8		iny				iny
.0104d1	b9 00 00	lda $0000,y			lda 	$0000,y
.0104d4	20 94 11	jsr $011194			jsr 	HWPrintChar
.0104d7	ca		dex				dex
.0104d8	d0 f6		bne $0104d0			bne 	_PBSLoop
.0104da					_PBSExit:
.0104da	7a		ply				ply
.0104db	fa		plx				plx
.0104dc	68		pla				pla
.0104dd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0104de					StringTempAllocate:
.0104de	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0104e1	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0104e4	18		clc				clc 								; this adds one, for the length.
.0104e5	65 16		adc $16				adc 	DTempStringPointer
.0104e7	85 16		sta $16				sta 	DTempStringPointer
.0104e9	48		pha				pha
.0104ea	a9 00 00	lda #$0000			lda 	#$0000
.0104ed	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0104ef	92 16		sta ($16)			sta		(DTempStringPointer)
.0104f1	c2 20		rep #$20			rep 	#$20
.0104f3	68		pla				pla
.0104f4	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0104f6	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0104f8	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0104fa	60		rts				rts
.0104fb					StringWriteCharacter:
.0104fb	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.0104fd	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.0104ff	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010501	1a		inc a				inc 	a
.010502	92 18		sta ($18)			sta 	(DStartTempString)
.010504	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010506	60		rts				rts
.010507					StringCreateCopy:
.010507	a8		tay				tay 								; put pointer to string in Y
.010508	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01050b	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01050e	f0 17		beq $010527			beq 	_SCCExit 					; do nothing if length zero.
.010510	da		phx				phx 								; save X and put the character count in X
.010511	aa		tax				tax
.010512					_SCCCopy:
.010512	c8		iny				iny 								; advance and read (first time skips length)
.010513	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010515	b9 00 00	lda $0000,y			lda 	$0000,y
.010518	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01051a	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01051c	1a		inc a				inc 	a
.01051d	92 18		sta ($18)			sta 	(DStartTempString)
.01051f	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010521	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010523	ca		dex				dex 								; do X times
.010524	d0 ec		bne $010512			bne 	_SCCCopy
.010526	fa		plx				plx
.010527					_SCCExit:
.010527	60		rts				rts
.010528					StringMakeConcrete:
.010528	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01052b	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01052d	90 0f		bcc $01053e			bcc 	_SMCExit
.01052f	85 08		sta $08				sta 	DTemp1 						; source
.010531	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010533	29 ff 00	and #$00ff			and 	#$00FF
.010536	d0 07		bne $01053f			bne 	_SMCNonZero 				; if not "" skip.
.010538	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01053b	18		clc				clc
.01053c	65 02		adc $02				adc 	DBaseAddress
.01053e					_SMCExit:
.01053e	60		rts				rts
.01053f					_SMCNonZero:
.01053f	48		pha				pha 								; save on stack.
.010540	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010543	18		clc				clc
.010544	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010547	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010549	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01054b	85 0c		sta $0c				sta 	DTemp2 						; target
.01054d	7a		ply				ply 								; get length copy from here until Y goes -ve
.01054e	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010550					_SMCLoop:
.010550	b1 08		lda ($08),y			lda 	(DTemp1),y
.010552	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010554	88		dey				dey
.010555	10 f9		bpl $010550			bpl 	_SMCLoop
.010557	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010559	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01055b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01055c					Binary_Add:
.01055c	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01055e	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010560	30 12		bmi $010574		bmi 	_BATypeError
.010562	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010564	30 3f		bmi $0105a5		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010566	18		clc			clc
.010567	b5 00		lda $00,x		lda		EXSValueL+0,x
.010569	75 02		adc $02,x		adc 	EXSValueL+2,x
.01056b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01056d	b5 10		lda $10,x		lda		EXSValueH+0,x
.01056f	75 12		adc $12,x		adc 	EXSValueH+2,x
.010571	95 10		sta $10,x		sta 	EXSValueH+0,x
.010573	60		rts			rts
.010574					_BATypeError:
.010574	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010577	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01057f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01058f	65 73 00
.010592					_BALengthError:
.010592	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010595	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01059d	6f 6f 20 6c 6f 6e 67 00
.0105a5					_BAConcatenateString:
.0105a5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105a7	85 08		sta $08			sta 	DTemp1
.0105a9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105ab	85 0c		sta $0c			sta 	DTemp2
.0105ad	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0105af	18		clc			clc 										; work out the total length
.0105b0	b2 08		lda ($08)		lda 	(DTemp1)
.0105b2	72 0c		adc ($0c)		adc 	(DTemp2)
.0105b4	b0 14		bcs $0105ca		bcs 	_BAConcatLengthError 				; string is too long.
.0105b6	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0105b8	20 de 04	jsr $0104de		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0105bb	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0105bd	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105bf	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0105c1	20 07 05	jsr $010507		jsr 	StringCreateCopy
.0105c4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0105c6	20 07 05	jsr $010507		jsr 	StringCreateCopy
.0105c9	60		rts			rts
.0105ca					_BAConcatLengthError:
.0105ca	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0105cd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105d5	6f 6f 20 6c 6f 6e 67 00
.0105dd					Binary_Subtract:
.0105dd	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e0	38		sec			sec
.0105e1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105e5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105e7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105e9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105eb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ed	60		rts			rts
.0105ee					Binary_ShiftRight:
.0105ee	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0105f1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105f3	29 3f 00	and #$003f		and 	#63
.0105f6	f0 07		beq $0105ff		beq		_Binary_SRExit
.0105f8					_Binary_SRLoop:
.0105f8	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0105fa	76 00		ror $00,x		ror 	EXSValueL+0,x
.0105fc	3a		dec a			dec 	a
.0105fd	d0 f9		bne $0105f8		bne 	_Binary_SRLoop
.0105ff					_Binary_SRExit:
.0105ff	60		rts			rts
.010600					Binary_ShiftLeft:
.010600	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010603	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010605	29 3f 00	and #$003f		and 	#63
.010608	f0 07		beq $010611		beq		_Binary_SLExit
.01060a					_Binary_SLLoop:
.01060a	16 00		asl $00,x		asl 	EXSValueL+0,x
.01060c	36 10		rol $10,x		rol 	EXSValueH+0,x
.01060e	3a		dec a			dec 	a
.01060f	d0 f9		bne $01060a		bne 	_Binary_SLLoop
.010611					_Binary_SLExit:
.010611	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010612					Binary_And:
.010612	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010615	b5 00		lda $00,x		lda		EXSValueL+0,x
.010617	35 02		and $02,x		and 	EXSValueL+2,x
.010619	95 00		sta $00,x		sta 	EXSValueL+0,x
.01061b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01061d	35 12		and $12,x		and 	EXSValueH+2,x
.01061f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010621	60		rts			rts
.010622					Binary_Or:
.010622	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010625	b5 00		lda $00,x		lda		EXSValueL+0,x
.010627	15 02		ora $02,x		ora 	EXSValueL+2,x
.010629	95 00		sta $00,x		sta 	EXSValueL+0,x
.01062b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01062d	15 12		ora $12,x		ora 	EXSValueH+2,x
.01062f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010631	60		rts			rts
.010632					Binary_Xor:
.010632	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010635	b5 00		lda $00,x		lda		EXSValueL+0,x
.010637	55 02		eor $02,x		eor 	EXSValueL+2,x
.010639	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01063d	55 12		eor $12,x		eor 	EXSValueH+2,x
.01063f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010641	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010642					Binary_Equals:
.010642	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010645	b0 0e		bcs $010655		bcs 	_BEString
.010647	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010649	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01064b	d0 4f		bne $01069c		bne 	Compare_Fail
.01064d	b5 10		lda $10,x		lda 	EXSValueH,x
.01064f	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010651	d0 49		bne $01069c		bne 	Compare_Fail
.010653	80 3f		bra $010694		bra 	Compare_Succeed
.010655					_BEString:
.010655	09 00 00	ora #$0000		ora 	#$0000
.010658	f0 3a		beq $010694		beq 	Compare_Succeed
.01065a	80 40		bra $01069c		bra 	Compare_Fail
.01065c					Binary_NotEquals:
.01065c	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01065f	b0 0e		bcs $01066f		bcs 	_BNEString
.010661	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010663	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010665	d0 2d		bne $010694		bne 	Compare_Succeed
.010667	b5 10		lda $10,x		lda 	EXSValueH,x
.010669	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01066b	d0 27		bne $010694		bne 	Compare_Succeed
.01066d	80 2d		bra $01069c		bra 	Compare_Fail
.01066f					_BNEString:
.01066f	09 00 00	ora #$0000		ora 	#$0000
.010672	d0 20		bne $010694		bne 	Compare_Succeed
.010674	80 26		bra $01069c		bra 	Compare_Fail
.010676					Binary_Less:
.010676	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010679	b0 12		bcs $01068d		bcs 	_BLString
.01067b	38		sec			sec
.01067c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01067e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010680	b5 10		lda $10,x		lda 	EXSValueH,x
.010682	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010684	50 03		bvc $010689		bvc 	*+5
.010686	49 00 80	eor #$8000		eor 	#$8000
.010689	30 09		bmi $010694		bmi 	Compare_Succeed
.01068b	80 0f		bra $01069c		bra 	Compare_Fail
.01068d					_BLString:
.01068d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010690	f0 02		beq $010694		beq 	Compare_Succeed
.010692	80 08		bra $01069c		bra 	Compare_Fail
.010694					Compare_Succeed:
.010694	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010697	95 00		sta $00,x		sta 	EXSValueL,x
.010699	95 10		sta $10,x		sta 	EXSValueH,x
.01069b	60		rts			rts
.01069c					Compare_Fail:
.01069c	74 00		stz $00,x		stz 	EXSValueL,x
.01069e	74 10		stz $10,x		stz 	EXSValueH,x
.0106a0	60		rts			rts
.0106a1					Binary_GreaterEqual:
.0106a1	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106a4	b0 12		bcs $0106b8		bcs 	_BGEString
.0106a6	38		sec			sec
.0106a7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106a9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ab	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ad	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106af	50 03		bvc $0106b4		bvc 	*+5
.0106b1	49 00 80	eor #$8000		eor 	#$8000
.0106b4	10 de		bpl $010694		bpl 	Compare_Succeed
.0106b6	80 e4		bra $01069c		bra 	Compare_Fail
.0106b8					_BGEString:
.0106b8	09 00 00	ora #$0000		ora 	#$0000
.0106bb	10 d7		bpl $010694		bpl 	Compare_Succeed
.0106bd	80 dd		bra $01069c		bra 	Compare_Fail
.0106bf					Binary_LessEqual:
.0106bf	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106c2	b0 12		bcs $0106d6		bcs 	_BLEString
.0106c4	18		clc			clc 									; numeric <= signed
.0106c5	b5 00		lda $00,x		lda 	EXSValueL,x
.0106c7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106c9	b5 10		lda $10,x		lda 	EXSValueH,x
.0106cb	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106cd	50 03		bvc $0106d2		bvc 	*+5
.0106cf	49 00 80	eor #$8000		eor 	#$8000
.0106d2	30 c0		bmi $010694		bmi 	Compare_Succeed
.0106d4	80 c6		bra $01069c		bra 	Compare_Fail
.0106d6					_BLEString:
.0106d6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0106d9	d0 b9		bne $010694		bne 	Compare_Succeed
.0106db	80 bf		bra $01069c		bra 	Compare_Fail
.0106dd					Binary_Greater:
.0106dd	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106e0	b0 12		bcs $0106f4		bcs 	_BGString
.0106e2	18		clc			clc 									; numeric > signed
.0106e3	b5 00		lda $00,x		lda 	EXSValueL,x
.0106e5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106e7	b5 10		lda $10,x		lda 	EXSValueH,x
.0106e9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106eb	50 03		bvc $0106f0		bvc 	*+5
.0106ed	49 00 80	eor #$8000		eor 	#$8000
.0106f0	10 a2		bpl $010694		bpl 	Compare_Succeed
.0106f2	80 a8		bra $01069c		bra 	Compare_Fail
.0106f4					_BGString:
.0106f4	c9 01 00	cmp #$0001		cmp 	#$0001
.0106f7	f0 9b		beq $010694		beq 	Compare_Succeed
.0106f9	80 a1		bra $01069c		bra 	Compare_Fail
.0106fb					CompareTypeCheck:
.0106fb	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0106fd	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0106ff	30 06		bmi $010707		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010701	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010703	30 1c		bmi $010721		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010705	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010706	60		rts			rts
.010707					_CTCFail:
.010707	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01070a	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010712	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010721					_CTCStringCompare:
.010721	20 a0 04	jsr $0104a0		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010724	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010726	85 08		sta $08			sta 	DTemp1
.010728	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01072a	85 0c		sta $0c			sta 	DTemp2
.01072c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01072f	a8		tay			tay
.010730	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010732	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010734	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010736	90 02		bcc $01073a		bcc 	_CTCSmallest
.010738	b2 0c		lda ($0c)		lda 	(DTemp2)
.01073a					_CTCSmallest:
.01073a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01073c					_CTCCompare:
.01073c	c8		iny			iny 									; look at next character (done first, first char is size)
.01073d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01073f	30 16		bmi $010757		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010741	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010743	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010745	f0 f5		beq $01073c		beq 	_CTCCompare 					; if zero, try the next character.
.010747	b0 07		bcs $010750		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010749					_CTCLess:
.010749	c2 20		rep #$20		rep 	#$20
.01074b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01074e	80 14		bra $010764		bra 	_CTCExit
.010750					_CTCGreater:
.010750	c2 20		rep #$20		rep 	#$20
.010752	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010755	80 0d		bra $010764		bra 	_CTCExit
.010757					_CTCEqualSoFar:
.010757	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010759	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01075b	90 ec		bcc $010749		bcc 	_CTCLess
.01075d	d0 f1		bne $010750		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01075f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010761	a9 00 00	lda #$0000		lda 	#$0000
.010764					_CTCExit:
.010764	38		sec			sec 									; return with CS indicating string comparison.
.010765	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010766					Binary_Divide:
.010766	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010769	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01076b	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01076d	d0 14		bne $010783		bne 	_BinaryDivide_Ok
.01076f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010772	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01077a	20 62 79 20 7a 65 72 6f 00
.010783					_BinaryDivide_Ok:
.010783	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010785	64 0a		stz $0a			stz 	DTemp1+2
.010787	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010789	5a		phy			phy 										; save Y (bit counter)
.01078a	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01078c	10 07		bpl $010795		bpl 	_BinaryDivide_RightDone
.01078e	e8		inx			inx
.01078f	e8		inx			inx
.010790	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.010793	ca		dex			dex
.010794	ca		dex			dex
.010795					_BinaryDivide_RightDone:
.010795	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010797	10 03		bpl $01079c		bpl 	_BinaryDivide_LeftDone
.010799	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.01079c					_BinaryDivide_LeftDone:
.01079c	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01079f					_BinaryDivide_Loop:
.01079f	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107a1	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107a3	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107a5	26 0a		rol $0a			rol 	DTemp1+2
.0107a7	38		sec			sec											; calculate A-M
.0107a8	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107aa	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0107ac	85 0c		sta $0c			sta 	DTemp2
.0107ae	a5 0a		lda $0a			lda 	DTemp1+2
.0107b0	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0107b2	90 08		bcc $0107bc		bcc 	_Binary_NoSubract 					; if A < M skip this
.0107b4	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0107b6	a5 0c		lda $0c			lda 	DTemp2
.0107b8	85 08		sta $08			sta 	DTemp1+0
.0107ba	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0107bc					_Binary_NoSubract:
.0107bc	88		dey			dey 										; do it 32 times.
.0107bd	d0 e0		bne $01079f		bne 	_BinaryDivide_Loop
.0107bf					_BinaryDivide_Exit:
.0107bf	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0107c1	29 01 00	and #$0001		and 	#1
.0107c4	f0 03		beq $0107c9		beq 	_BinaryDivide_Exit2
.0107c6	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.0107c9					_BinaryDivide_Exit2:
.0107c9	7a		ply			ply 										; restore Y
.0107ca	60		rts			rts
.0107cb					Binary_DivNegate:
.0107cb	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0107cd	38		sec			sec 										; negate the value at stack X.
.0107ce	a9 00 00	lda #$0000		lda 	#$0000
.0107d1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0107d3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107d5	a9 00 00	lda #$0000		lda 	#$0000
.0107d8	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0107da	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107dc	60		rts			rts
.0107dd					Binary_Modulus:
.0107dd	20 66 07	jsr $010766		jsr 	Binary_Divide 						; do the divide
.0107e0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0107e2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107e4	a5 0a		lda $0a			lda 	DTemp1+2
.0107e6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107e8	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0107e9					Binary_Multiply:
.0107e9	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0107ec	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0107ee	85 08		sta $08			sta 	DTemp1
.0107f0	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107f2	85 0a		sta $0a			sta		DTemp1+2
.0107f4	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0107f6	74 10		stz $10,x		stz 	EXSValueH+0,x
.0107f8					_BinaryMultiply_Loop:
.0107f8	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0107fa	05 0a		ora $0a			ora 	DTemp1+2
.0107fc	f0 1e		beq $01081c		beq 	_BinaryMultiply_Exit
.0107fe	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010800	29 01 00	and #$0001		and 	#1
.010803	f0 0d		beq $010812		beq 	_BinaryMultiply_NoAdd
.010805	18		clc			clc 										; add multiplicand to result.
.010806	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010808	75 02		adc $02,x		adc 	EXSValueL+2,x
.01080a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01080c	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01080e	75 12		adc $12,x		adc 	EXSValueH+2,x
.010810	95 10		sta $10,x		sta 	EXSValueH+0,x
.010812					_BinaryMultiply_NoAdd:
.010812	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010814	66 08		ror $08			ror 	DTemp1
.010816	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010818	36 12		rol $12,x		rol 	EXSValueH+2,x
.01081a	80 dc		bra $0107f8		bra 	_BinaryMultiply_Loop 				; go round again.
.01081c					_BinaryMultiply_Exit:
.01081c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.01081d					Function_Len:
.01081d	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010820	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get the value you are absoluting
.010823	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010826	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010828	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01082b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01082e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010830	74 10		stz $10,x			stz 	EXSValueH+0,x
.010832	60		rts				rts
.010833					Function_Abs:
.010833	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010836	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010839	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01083c	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01083e	30 07		bmi $010847			bmi 	_FAbsNegative 				; negate it if negative
.010840	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010842	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010844	95 00		sta $00,x			sta 	EXSValueL+0,x
.010846	60		rts				rts
.010847					_FAbsNegative:
.010847	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010848	a9 00 00	lda #$0000			lda 	#0
.01084b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01084d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01084f	a9 00 00	lda #$0000			lda 	#0
.010852	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010854	95 10		sta $10,x			sta 	EXSValueH+0,x
.010856	60		rts				rts
.010857					Function_Sgn:
.010857	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns integer
.01085a	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get an integer
.01085d	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010860	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010862	74 10		stz $10,x			stz 	EXSValueH+0,x
.010864	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010866	30 07		bmi $01086f			bmi 	_FSgnNegative 				; set to -1 if signed
.010868	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01086a	f0 02		beq $01086e			beq 	_FSgnExit
.01086c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01086e					_FSgnExit:
.01086e	60		rts				rts
.01086f					_FSgnNegative:
.01086f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010872	95 00		sta $00,x			sta 	EXSValueL+0,x
.010874	95 10		sta $10,x			sta 	EXSValueH+0,x
.010876	60		rts				rts
.010877					Function_Random:
.010877	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01087a	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger
.01087d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01087f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010881	d0 0a		bne $01088d			bne 	_Rnd_NotZero
.010883	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010886	85 10		sta $10				sta 	DRandom
.010888	a9 ea 00	lda #$00ea			lda 	#$EA
.01088b	85 12		sta $12				sta 	DRandom+2
.01088d					_Rnd_NotZero:
.01088d	20 98 08	jsr $010898			jsr 	_Rnd_Process 				; call randomiser twice
.010890	95 10		sta $10,x			sta 	EXSValueH+0,x
.010892	20 98 08	jsr $010898			jsr 	_Rnd_Process
.010895	95 00		sta $00,x			sta 	EXSValueL+0,x
.010897	60		rts				rts
.010898					_Rnd_Process:
.010898	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01089a	26 12		rol $12				rol 	DRandom+2
.01089c	90 0e		bcc $0108ac			bcc 	_Rnd_Exit
.01089e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108a0	49 54 d4	eor #$d454			eor 	#$D454
.0108a3	85 10		sta $10				sta 	DRandom
.0108a5	a5 12		lda $12				lda 	DRandom+2
.0108a7	49 d5 55	eor #$55d5			eor 	#$55D5
.0108aa	85 12		sta $12				sta 	DRandom+2
.0108ac					_Rnd_Exit:
.0108ac	a5 10		lda $10				lda 	DRandom
.0108ae	45 12		eor $12				eor 	DRandom+2
.0108b0	60		rts				rts
.0108b1					Function_Chr:
.0108b1	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string
.0108b4	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get integer
.0108b7	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.0108ba	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.0108bd	d0 12		bne $0108d1			bne 	_FCHBad
.0108bf	48		pha				pha
.0108c0	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character
.0108c3	20 de 04	jsr $0104de			jsr 	StringTempAllocate
.0108c6	68		pla				pla
.0108c7	20 fb 04	jsr $0104fb			jsr 	StringWriteCharacter 		; write it out.
.0108ca	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0108cc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ce	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108d0	60		rts				rts
.0108d1					_FCHBad:
.0108d1	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0108d4	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>0108dc	65 20 66 6f 72 20 63 68 72 24 28 29 00
.0108e9					Function_Asc:
.0108e9	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.0108ec	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get string
.0108ef	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.0108f2	a8		tay				tay 								; string address in Y
.0108f3	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.0108f6	29 ff 00	and #$00ff			and 	#$00FF
.0108f9	f0 0b		beq $010906			beq 	_FASBad
.0108fb	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.0108fe	29 ff 00	and #$00ff			and 	#$00FF
.010901	95 00		sta $00,x			sta 	EXSValueL+0,x
.010903	74 10		stz $10,x			stz 	EXSValueH+0,x
.010905	60		rts				rts
.010906					_FASBad:
.010906	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010909	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010911	65 20 66 6f 72 20 61 73 63 28 29 00
.01091d					Function_SPC:
.01091d	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string
.010920	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get integer
.010923	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010926	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010929	d0 17		bne $010942			bne 	_FSPBad
.01092b	48		pha				pha
.01092c	20 de 04	jsr $0104de			jsr 	StringTempAllocate 			; allocate character space
.01092f	7a		ply				ply 								; get count in Y
.010930	f0 09		beq $01093b			beq 	_FSPExit 					; if zero, just empty string
.010932					_FSPCopy:
.010932	a9 20 00	lda #$0020			lda 	#" "						; space character
.010935	20 fb 04	jsr $0104fb			jsr 	StringWriteCharacter 		; write it out.
.010938	88		dey				dey
.010939	d0 f7		bne $010932			bne 	_FSPCopy
.01093b					_FSPExit:
.01093b	a5 18		lda $18				lda 	DStartTempString 			; return that address
.01093d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01093f	74 10		stz $10,x			stz 	EXSValueH+0,x
.010941	60		rts				rts
.010942					_FSPBad:
.010942	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010945	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>01094d	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010959					Function_Peek:
.010959	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.01095c	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01095f	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010962	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010964	84 0a		sty $0a				sty 	DTemp1+2
.010966	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010969	b7 08		lda [$08],y			lda 	[DTemp1],y
.01096b	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.01096e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010970	74 10		stz $10,x			stz 	EXSValueH+0,x
.010972	60		rts				rts
.010973					Function_Deek:
.010973	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010976	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010979	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01097c	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.01097e	84 0a		sty $0a				sty 	DTemp1+2
.010980	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010983	b7 08		lda [$08],y			lda 	[DTemp1],y
.010985	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010987	74 10		stz $10,x			stz 	EXSValueH+0,x
.010989	60		rts				rts
.01098a					Function_Leek:
.01098a	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.01098d	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010990	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010993	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010995	84 0a		sty $0a				sty 	DTemp1+2
.010997	a0 00 00	ldy #$0000			ldy 	#0							; read data
.01099a	b7 08		lda [$08],y			lda 	[DTemp1],y
.01099c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.01099e	c8		iny				iny
.01099f	c8		iny				iny
.0109a0	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109a2	95 10		sta $10,x			sta 	EXSValueH+0,x
.0109a4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0109a5					Function_VAL:
.0109a5	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.0109a8	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109ab	48		pha				pha 								; put string address on stack.
.0109ac	20 bc 09	jsr $0109bc			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109af	7a		ply				ply 								; get string address back
.0109b0	da		phx				phx 								; save X on stack
.0109b1	aa		tax				tax 								; base in X
.0109b2	98		tya				tya 								; address in A
.0109b3	20 f6 09	jsr $0109f6			jsr 	StringToInteger
.0109b6	fa		plx				plx 								; restore X
.0109b7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109b9	94 10		sty $10,x			sty 	EXSValueH+0,x
.0109bb	60		rts				rts
.0109bc					VALGetBase:
.0109bc	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0109be	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if comma, go to get base code.
.0109c1	f0 07		beq $0109ca			beq 	_VGBAlternate
.0109c3	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket			; expect ), and return 10.
.0109c6	a9 0a 00	lda #$000a			lda 	#10
.0109c9	60		rts				rts
.0109ca					_VGBAlternate:
.0109ca	20 77 04	jsr $010477			jsr 	ExpectComma 				; skip comma.
.0109cd	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get base
.0109d0	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0109d3	d0 0e		bne $0109e3			bne 	_VGBBadBase
.0109d5	c9 02 00	cmp #$0002			cmp 	#2
.0109d8	90 09		bcc $0109e3			bcc 	_VGBBadBase
.0109da	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0109dd	b0 04		bcs $0109e3			bcs 	_VGBBadBase
.0109df	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; get right bracket and return.
.0109e2	60		rts				rts
.0109e3					_VGBBadBase:
.0109e3	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0109e6	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0109ee	65 72 20 42 61 73 65 00
.0109f6					StringToInteger:
.0109f6	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.0109f8	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.0109fa	29 ff 00	and #$00ff			and 	#$00FF
.0109fd	85 26		sta $26				sta 	DTemp3+2
.0109ff	f0 6e		beq $010a6f			beq 	_STIError 					; if length zero it's bad.
.010a01	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010a03	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010a05	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010a07	64 0a		stz $0a				stz 	DTemp1+2
.010a09	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010a0b	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010a0e	48		pha				pha 								; push on stack
.010a0f	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010a12	d0 06		bne $010a1a			bne 	_STILoop
.010a14	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010a16	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010a18	f0 55		beq $010a6f			beq 	_STIError 					; if only - then error.
.010a1a					_STILoop:
.010a1a	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010a1c	20 8e 0a	jsr $010a8e			jsr 	MultiplyTemp1ByA
.010a1f	b2 24		lda ($24)			lda 	(DTemp3)
.010a21	29 ff 00	and #$00ff			and 	#$00FF
.010a24	20 7f 0a	jsr $010a7f			jsr 	ConvertUpperCase
.010a27	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.010a2a	90 43		bcc $010a6f			bcc 	_STIError
.010a2c	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010a2f	90 0e		bcc $010a3f			bcc 	_STIOkay1
.010a31	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010a34	90 39		bcc $010a6f			bcc 	_STIError
.010a36	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010a39	b0 34		bcs $010a6f			bcs 	_STIError
.010a3b	18		clc				clc 								; shift to correct range.
.010a3c	69 09 00	adc #$0009			adc 	#9
.010a3f					_STIOkay1:
.010a3f	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010a42	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010a44	b0 29		bcs $010a6f			bcs 	_STIError
.010a46	18		clc				clc 								; add A to DTemp1
.010a47	65 08		adc $08				adc 	DTemp1
.010a49	85 08		sta $08				sta 	DTemp1
.010a4b	90 02		bcc $010a4f			bcc 	_STINoCarry
.010a4d	e6 0a		inc $0a				inc 	DTemp1+2
.010a4f					_STINoCarry:
.010a4f	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010a51	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010a53	d0 c5		bne $010a1a			bne 	_STILoop 					; loop back.
.010a55	68		pla				pla 								; get optional minus bac
.010a56	c9 2d 00	cmp #$002d			cmp 	#"-"
.010a59	d0 0f		bne $010a6a			bne 	_STINotNegative 			; handle the negative character
.010a5b	38		sec				sec 								; negate DTemp1
.010a5c	a9 00 00	lda #$0000			lda 	#0
.010a5f	e5 08		sbc $08				sbc 	DTemp1
.010a61	85 08		sta $08				sta 	DTemp1
.010a63	a9 00 00	lda #$0000			lda 	#0
.010a66	e5 0a		sbc $0a				sbc 	DTemp1+2
.010a68	85 0a		sta $0a				sta 	DTemp1+2
.010a6a					_STINotNegative:
.010a6a	a5 08		lda $08				lda 	DTemp1 						; get the result
.010a6c	a4 0a		ldy $0a				ldy 	DTemp1+2
.010a6e	60		rts				rts
.010a6f					_STIError:
.010a6f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010a72	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010a7a	74 61 6e 74 00
.010a7f					ConvertUpperCase:
.010a7f	c9 61 00	cmp #$0061			cmp 	#'a'
.010a82	90 09		bcc $010a8d			bcc 	_CUCExit
.010a84	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010a87	b0 04		bcs $010a8d			bcs 	_CUCExit
.010a89	38		sec				sec
.010a8a	e9 20 00	sbc #$0020			sbc 	#32
.010a8d					_CUCExit:
.010a8d	60		rts				rts
.010a8e					MultiplyTemp1ByA:
.010a8e					_MTGeneral:
.010a8e	da		phx				phx
.010a8f	aa		tax				tax 								; multiplier in X
.010a90	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010a92	85 0c		sta $0c				sta 	DTemp2
.010a94	a5 0a		lda $0a				lda 	DTemp1+2
.010a96	85 0e		sta $0e				sta 	DTemp2+2
.010a98	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010a9a	64 0a		stz $0a				stz 	DTemp1+2
.010a9c	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010a9f					_MTLoop:
.010a9f	8a		txa				txa 								; shift X right into C
.010aa0	4a		lsr a				lsr 	a
.010aa1	aa		tax				tax
.010aa2	90 10		bcc $010ab4			bcc 	_MTNoAdd
.010aa4	18		clc				clc
.010aa5	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010aa7	65 0c		adc $0c				adc 	DTemp2
.010aa9	85 08		sta $08				sta 	DTemp1
.010aab	a5 0a		lda $0a				lda 	DTemp1+2
.010aad	65 0e		adc $0e				adc 	DTemp2+2
.010aaf	85 0a		sta $0a				sta 	DTemp1+2
.010ab1	90 01		bcc $010ab4			bcc 	_MTNoAdd
.010ab3	c8		iny				iny
.010ab4					_MTNoAdd:
.010ab4	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ab6	26 0e		rol $0e				rol 	DTemp2+2
.010ab8	90 01		bcc $010abb			bcc 	_MTNoOverflow
.010aba	c8		iny				iny
.010abb					_MTNoOverflow:
.010abb	8a		txa				txa 								; until multiplier is zero.
.010abc	d0 e1		bne $010a9f			bne 	_MTLoop
.010abe	98		tya				tya
.010abf	18		clc				clc
.010ac0	69 ff ff	adc #$ffff			adc 	#$FFFF
.010ac3	fa		plx				plx 								; restore X
.010ac4	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010ac5					Function_Str:
.010ac5	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string.
.010ac8	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010acb	48		pha				pha 								; save YA on the stack
.010acc	5a		phy				phy
.010acd	20 bc 09	jsr $0109bc			jsr 	VALGetBase 					; process , base (shared with STR$())
.010ad0	85 14		sta $14				sta 	DSignCount
.010ad2	7a		ply				ply 								; YA is the number
.010ad3	68		pla				pla
.010ad4	da		phx				phx
.010ad5	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010ad7	20 e0 0a	jsr $010ae0			jsr 	ConvertToString 			; convert it to a string.
.010ada	fa		plx				plx 								; restore X
.010adb	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010add	74 10		stz $10,x			stz 	EXSValueH+0,x
.010adf	60		rts				rts
.010ae0					ConvertToString:
.010ae0	da		phx				phx 								; save X
.010ae1	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010ae3	84 26		sty $26				sty 	DTemp3+2
.010ae5	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010ae7	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.010aea	20 de 04	jsr $0104de			jsr 	StringTempAllocate 			; allocate space for return string.
.010aed	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010aef	10 15		bpl $010b06			bpl 	_CTSNotNegative
.010af1	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.010af4	20 70 0b	jsr $010b70			jsr 	CTSOutputA
.010af7	38		sec				sec 								; negate DTemp3
.010af8	a9 00 00	lda #$0000			lda 	#0
.010afb	e5 24		sbc $24				sbc 	DTemp3
.010afd	85 24		sta $24				sta 	DTemp3
.010aff	a9 00 00	lda #$0000			lda 	#0
.010b02	e5 26		sbc $26				sbc 	DTemp3+2
.010b04	85 26		sta $26				sta 	DTemp3+2
.010b06					_CTSNotNegative:
.010b06	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.010b09	48		pha				pha
.010b0a	a9 00 00	lda #$0000			lda 	#0
.010b0d	48		pha				pha
.010b0e	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.010b10	85 08		sta $08				sta 	DTemp1
.010b12	64 0a		stz $0a				stz 	DTemp1+2
.010b14					_CTSMultiplySubtractor:
.010b14	38		sec				sec
.010b15	a5 24		lda $24				lda 	DTemp3
.010b17	e5 08		sbc $08				sbc 	DTemp1
.010b19	a5 26		lda $26				lda 	DTemp3+2
.010b1b	e5 0a		sbc $0a				sbc 	DTemp1+2
.010b1d	90 0f		bcc $010b2e			bcc		_CTSScaledUp 				; if >= then scaled up.
.010b1f	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010b21	48		pha				pha
.010b22	a5 0a		lda $0a				lda 	DTemp1+2
.010b24	48		pha				pha
.010b25	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010b27	20 8e 0a	jsr $010a8e			jsr 	MultiplyTemp1ByA
.010b2a	b0 02		bcs $010b2e			bcs 	_CTSScaledUp
.010b2c	80 e6		bra $010b14			bra 	_CTSMultiplySubtractor
.010b2e					_CTSScaledUp:
.010b2e	7a		ply				ply 								; YA contains the previous divider.
.010b2f	68		pla				pla
.010b30	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010b33	d0 05		bne $010b3a			bne 	_CTSHasDigit
.010b35	c9 01 00	cmp #$0001			cmp 	#1 							;
.010b38	f0 20		beq $010b5a			beq 	_CTSExit
.010b3a					_CTSHasDigit:
.010b3a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010b3c	84 0e		sty $0e				sty 	DTemp2+2
.010b3e	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010b41					_CTSSubLoop:
.010b41	38		sec				sec 								; subtract subtractor from number
.010b42	a5 24		lda $24				lda 	DTemp3
.010b44	e5 0c		sbc $0c				sbc 	DTemp2
.010b46	a8		tay				tay 								; intermediate in Y
.010b47	a5 26		lda $26				lda 	DTemp3+2
.010b49	e5 0e		sbc $0e				sbc 	DTemp2+2
.010b4b	90 07		bcc $010b54			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010b4d	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010b4f	84 24		sty $24				sty 	DTemp3
.010b51	e8		inx				inx 								; one more subtraction
.010b52	80 ed		bra $010b41			bra 	_CTSSubLoop 				; try it again.
.010b54					_CTSFinishedSubtracting:
.010b54	8a		txa				txa 								; convert to ASCII.
.010b55	20 63 0b	jsr $010b63			jsr 	CTSOutputHexDigit 			; write that out.
.010b58	80 d4		bra $010b2e			bra 	_CTSScaledUp
.010b5a					_CTSExit:
.010b5a	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010b5c	20 63 0b	jsr $010b63			jsr 	CTSOutputHexDigit
.010b5f	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010b61	fa		plx				plx 								; restore X.
.010b62	60		rts				rts
.010b63					CTSOutputHexDigit:
.010b63	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010b66	90 04		bcc $010b6c			bcc 	_CTSNotLetter
.010b68	18		clc				clc
.010b69	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010b6c					_CTSNotLetter:
.010b6c	18		clc				clc
.010b6d	69 30 00	adc #$0030			adc 	#48
.010b70					CTSOutputA:
.010b70	5a		phy				phy 								; save Y, set Y to current pointer
.010b71	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010b73	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010b76	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010b78	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010b7a	1a		inc a				inc 	a
.010b7b	92 18		sta ($18)			sta 	(DStartTempString)
.010b7d	c2 20		rep #$20			rep 	#$20
.010b7f	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010b81	7a		ply				ply 								; restore Y and exit.
.010b82	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010b83					Function_Let:
.010b83	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010b85	48		pha				pha
.010b86	20 05 03	jsr $010305			jsr 	VariableFind 				; find the variable
.010b89	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010b8b	b0 1c		bcs $010ba9			bcs 	_FLetFound 					; skip if found.
.010b8d	68		pla				pla 								; get and push the first token again.
.010b8e	48		pha				pha
.010b8f	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010b92	d0 57		bne $010beb			bne 	_FLError					; arrays, so this causes an error.
.010b94	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010b96	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010b99	20 af 03	jsr $0103af			jsr 	VariableCreate 				; create it.
.010b9c	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010b9e					_FLSkipToken:
.010b9e	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010ba0	e6 06		inc $06				inc 	DCodePtr
.010ba2	e6 06		inc $06				inc 	DCodePtr
.010ba4	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010ba7	d0 f5		bne $010b9e			bne 	_FLSkipToken
.010ba9					_FLetFound:
.010ba9	68		pla				pla 								; get and save the first token.
.010baa	48		pha				pha
.010bab	a8		tay				tay 								; put it in Y
.010bac	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010baf	f0 07		beq $010bb8			beq 	_FLetNotArray
.010bb1	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010bb3	20 7c 03	jsr $01037c			jsr 	VariableSubscript			; index calculation
.010bb6	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010bb8					_FLetNotArray:
.010bb8	7a		ply				ply 								; get the first token into Y
.010bb9	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010bbb	48		pha				pha
.010bbc	5a		phy				phy 								; save the first token on the stack.
.010bbd	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010bc0	20 54 04	jsr $010454			jsr 	ExpectToken
.010bc3	68		pla				pla 								; restore the first token.
.010bc4	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010bc7	d0 0f		bne $010bd8			bne 	_FLetString 				; skip if string.
.010bc9	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; get an integer
.010bcc	7a		ply				ply 								; get address in Y
.010bcd	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010bcf	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010bd2	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010bd4	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010bd7	60		rts				rts
.010bd8					_FLetString:
.010bd8	20 a5 02	jsr $0102a5			jsr 	EvaluateString 				; get a string.
.010bdb	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010bdd	20 28 05	jsr $010528			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010be0	7a		ply				ply 								; get address
.010be1	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010be4	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010be7	99 02 00	sta $0002,y			sta 	$0002,y
.010bea	60		rts				rts
.010beb					_FLError:
.010beb	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010bee	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010bf6	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010bfe					Function_PRINT:
.010bfe	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010c00	f0 33		beq $010c35			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010c02	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; likewise if a colon.
.010c05	f0 2e		beq $010c35			beq 	_FPRExitCR
.010c07	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID 			; semicolon, skip it
.010c0a	f0 23		beq $010c2f			beq 	_FPRSkipLoop
.010c0c	c9 22 32	cmp #$3222			cmp 	#squoteTokenID 				; single quote is CR
.010c0f	f0 1b		beq $010c2c			beq 	_FPRNewLine
.010c11	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; , is tab.
.010c14	f0 11		beq $010c27			beq 	_FPRTab
.010c16					_FPRExpression:
.010c16	20 78 01	jsr $010178			jsr 	Evaluate 					; evaluate a string or integer.
.010c19	b0 06		bcs $010c21			bcs 	_FPRHaveString
.010c1b	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010c1e	20 e0 0a	jsr $010ae0			jsr 	ConvertToString
.010c21					_FPRHaveString:
.010c21	a8		tay				tay 								; print the basic String.
.010c22	20 c4 04	jsr $0104c4			jsr 	PrintBASICString
.010c25	80 d7		bra $010bfe			bra 	Function_Print 				; and go round again.
.010c27					_FPRTab:
.010c27	20 c9 11	jsr $0111c9			jsr 	HWTab
.010c2a	80 03		bra $010c2f			bra 	_FPRSkipLoop
.010c2c					_FPRNewLine:
.010c2c	20 b6 11	jsr $0111b6			jsr 	HWNewLine
.010c2f					_FPRSkipLoop:
.010c2f	e6 06		inc $06				inc 	DCodePtr
.010c31	e6 06		inc $06				inc 	DCodePtr
.010c33	80 c9		bra $010bfe			bra 	Function_Print
.010c35					_FPRExitCR:
.010c35	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010c37	88		dey				dey
.010c38	88		dey				dey
.010c39	b9 00 00	lda $0000,y			lda 	$0000,y
.010c3c	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010c3f	f0 08		beq $010c49			beq 	_FPRExit
.010c41	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID
.010c44	f0 03		beq $010c49			beq 	_FPRExit
.010c46	20 b6 11	jsr $0111b6			jsr 	HWNewLine 					; print a new line.
.010c49					_FPRExit:
.010c49	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.010c4a					Function_IF:
.010c4a	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; check success.
.010c4d	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010c4f	05 08		ora $08				ora 	DTemp1
.010c51	a8		tay				tay 								; success flag in Y.
.010c52	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010c54	c9 3b 3a	cmp #$3a3b			cmp 	#thenTokenID
.010c57	d0 32		bne $010c8b			bne 	_FIFExtended 				; if so, go to the extended IF.
.010c59	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010c5b	e6 06		inc $06				inc 	DCodePtr
.010c5d	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010c60	f0 0f		beq $010c71			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010c62	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010c64	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010c67	90 21		bcc $010c8a			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010c69	c9 00 c0	cmp #$c000			cmp 	#$C000
.010c6c	b0 1c		bcs $010c8a			bcs 	_FIFContinue
.010c6e	4c 03 0e	jmp $010e03			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010c71					_FIFEndOfLine:
.010c71	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010c73	f0 15		beq $010c8a			beq 	_FIFContinue 				; if done so, continue.
.010c75	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010c78	90 06		bcc $010c80			bcc 	_FIFStringConstant
.010c7a	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010c7c	e6 06		inc $06				inc 	DCodePtr
.010c7e	80 f1		bra $010c71			bra 	_FIFEndOfLine
.010c80					_FIFStringConstant:
.010c80	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010c83	18		clc				clc
.010c84	65 06		adc $06				adc 	DCodePtr
.010c86	85 06		sta $06				sta 	DCodePtr
.010c88	80 e7		bra $010c71			bra 	_FIFEndOfLine
.010c8a					_FIFContinue:
.010c8a	60		rts				rts
.010c8b					_FIFExtended:
.010c8b	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010c8d	e6 2a		inc $2a				inc 	DStack
.010c8f	a9 37 3c	lda #$3c37			lda 	#ifTokenID
.010c92	a6 2a		ldx $2a				ldx 	DStack
.010c94	95 00		sta $00,x			sta 	$00,x
.010c96	98		tya				tya 								; see if the test was passed.
.010c97	f0 01		beq $010c9a			beq 	_FIXSkip 					; if zero then it has failed.
.010c99	60		rts				rts 								; test passed, so continue executing
.010c9a					_FIXSkip:
.010c9a	a9 34 3e	lda #$3e34			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010c9d	a2 3c 3a	ldx #$3a3c			ldx 	#endifTokenID 				; at the same level.
.010ca0	20 00 0d	jsr $010d00			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010ca3	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010ca5	e6 06		inc $06				inc 	DCodePtr
.010ca7	c9 3c 3a	cmp #$3a3c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010caa	d0 04		bne $010cb0			bne 	_FIXNoThrow
.010cac	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010cae	c6 2a		dec $2a				dec 	DStack
.010cb0					_FIXNoThrow:
.010cb0	60		rts				rts
.010cb1					Handler_ELSE:
.010cb1	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010cb3	b5 00		lda $00,x			lda 	$00,x
.010cb5	c9 37 3c	cmp #$3c37			cmp 	#ifTokenID
.010cb8	d0 12		bne $010ccc			bne 	_HEBadStructure
.010cba	a9 3c 3a	lda #$3a3c			lda 	#endifTokenID 				; only searching one token.
.010cbd	a2 00 00	ldx #$0000			ldx 	#$0000
.010cc0	20 00 0d	jsr $010d00			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010cc3	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010cc5	e6 06		inc $06				inc 	DCodePtr
.010cc7	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010cc9	c6 2a		dec $2a				dec 	DStack
.010ccb	60		rts				rts
.010ccc					_HEBadStructure:
.010ccc	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010ccf	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010cd7	68 6f 75 74 20 49 66 00
.010cdf					Handler_ENDIF:
.010cdf	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010ce1	b5 00		lda $00,x			lda 	$00,x
.010ce3	c9 37 3c	cmp #$3c37			cmp 	#ifTokenID
.010ce6	d0 05		bne $010ced			bne 	_HEIBadStructure
.010ce8	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010cea	c6 2a		dec $2a				dec 	DStack
.010cec	60		rts				rts
.010ced					_HEIBadStructure:
.010ced	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010cf0	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010cf8	68 6f 75 74 20 49 66 00
.010d00					ScanForwardLevel:
.010d00	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010d02	86 0a		stx $0a				stx 	DTemp1+2
.010d04	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010d06	85 0c		sta $0c				sta 	DTemp2
.010d08	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010d0b					_SFLLoop:
.010d0b	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010d0e	d0 0d		bne $010d1d			bne 	_SFLNoCheck
.010d10	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010d12	f0 09		beq $010d1d			beq 	_SFLNoCheck 				; don't check zero
.010d14	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010d16	f0 04		beq $010d1c			beq 	_SFLFound
.010d18	c5 0a		cmp $0a				cmp 	DTemp1+2
.010d1a	d0 01		bne $010d1d			bne 	_SFLNoCheck
.010d1c					_SFLFound:
.010d1c	60		rts				rts
.010d1d					_SFLNoCheck:
.010d1d	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010d1f	f0 4f		beq $010d70			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010d21	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010d24	90 40		bcc $010d66			bcc 	_SFLSkipString 				; then handle that.
.010d26	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010d28	e6 06		inc $06				inc 	DCodePtr
.010d2a	a8		tay				tay 								; put token in Y temporarily.
.010d2b	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010d2e	c9 00 20	cmp #$2000			cmp 	#$2000
.010d31	d0 d8		bne $010d0b			bne 	_SFLLoop
.010d33	98		tya				tya 								; get the token back.
.010d34	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010d37	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010d3a	f0 cf		beq $010d0b			beq 	_SFLLoop
.010d3c	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010d3f	90 ca		bcc $010d0b			bcc 	_SFLLoop
.010d41	e8		inx				inx 								; increment the level.
.010d42	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010d45	f0 c4		beq $010d0b			beq 	_SFLLoop
.010d47	ca		dex				dex 								; decrement the level
.010d48	ca		dex				dex 								; one overdoes the previous inx.
.010d49	10 c0		bpl $010d0b			bpl 	_SFLLoop 					; if gone -ve then error.
.010d4b					_SFLError:
.010d4b	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010d4d	85 22		sta $22				sta 	DLineNumber
.010d4f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010d52	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010d5a	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010d66					_SFLSkipString:
.010d66	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010d69	18		clc				clc
.010d6a	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010d6c	85 06		sta $06				sta 	DCodePtr
.010d6e	80 9b		bra $010d0b			bra 	_SFLLoop 					; go round again.
.010d70					_SFLNextLine:
.010d70	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010d72	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010d75	f0 d4		beq $010d4b			beq 	_SFLError 					; if zero, then there's no more code to search.
.010d77	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010d7a	85 22		sta $22				sta 	DLineNumber
.010d7c	18		clc				clc
.010d7d	a5 06		lda $06				lda 	DCodePtr
.010d7f	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010d82	85 06		sta $06				sta 	DCodePtr
.010d84	80 85		bra $010d0b			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.010d86					Command_FOR:
.010d86	ea		nop				nop
.010d87	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.010d89	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.010d8c	d0 1e		bne $010dac			bne		_CFOBad
.010d8e	20 05 03	jsr $010305			jsr 	VariableFind 				; try to find variable
.010d91	b0 08		bcs $010d9b			bcs 	_CFOExists
.010d93	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010d95	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010d98	20 af 03	jsr $0103af			jsr 	VariableCreate 				; create it.
.010d9b					_CFOExists:
.010d9b	48		pha				pha 								; push variable address on stack
.010d9c	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.010d9f	20 54 04	jsr $010454			jsr 	ExpectToken
.010da2	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; this is the start value
.010da5	bb		tyx				tyx 								; put high value in X
.010da6	7a		ply				ply 								; address in Y
.010da7	99 00 00	sta $0000,y			sta 	$0000,y
.010daa	96 02		stx $02,y			stx 	$0002,y
.010dac					_CFOBad:
.010dac	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010daf	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>010db7	76 61 72 69 61 62 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010dc0					Function_ONGOTO:
.010dc0	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; on what GOTO :)
.010dc3	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010dc6	d0 25		bne $010ded			bne 	_FOGoFail
.010dc8	c9 00 00	cmp #$0000			cmp 	#0
.010dcb	f0 20		beq $010ded			beq 	_FOGoFail 					; we start with index = 1
.010dcd	48		pha				pha 								; save count.
.010dce	a9 30 3e	lda #$3e30			lda 	#gotoTokenID 				; expect GOTO
.010dd1	20 54 04	jsr $010454			jsr 	ExpectToken
.010dd4	fa		plx				plx 								; put count in X.
.010dd5					_FOGoLoop:
.010dd5	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010dd7	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010dda	90 73		bcc $010e4f			bcc 	FGOFail
.010ddc	c9 00 c0	cmp #$c000			cmp 	#$C000
.010ddf	b0 6e		bcs $010e4f			bcs 	FGOFail
.010de1	ca		dex				dex 								; subtract one, if done, call GOTO code
.010de2	f0 1f		beq $010e03			beq 	Function_GOTO
.010de4	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010de6	e6 06		inc $06				inc 	DCodePtr
.010de8	20 77 04	jsr $010477			jsr 	ExpectComma 				; expect a comma
.010deb	80 e8		bra $010dd5			bra 	_FOGoLoop 					; and loop round.
.010ded					_FOGoFail:
.010ded	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010df0	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010df8	47 6f 74 6f 20 76 61 6c 75 65 00
.010e03					Function_GOTO:
.010e03	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010e05	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010e08	90 45		bcc $010e4f			bcc 	FGOFail
.010e0a	c9 00 c0	cmp #$c000			cmp 	#$C000
.010e0d	b0 40		bcs $010e4f			bcs 	FGOFail
.010e0f	38		sec				sec 								; convert to 0-32767
.010e10	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010e13	aa		tax				tax
.010e14	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010e17	18		clc				clc
.010e18	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010e1a	a8		tay				tay
.010e1b					_FGOSearch:
.010e1b	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010e1e	f0 18		beq $010e38			beq 	_FGOUnknown
.010e20	8a		txa				txa 								; does it match line number.
.010e21	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010e24	f0 08		beq $010e2e			beq 	_FGOFound 					; yes, then found.
.010e26	98		tya				tya 								; no follow the link
.010e27	18		clc				clc
.010e28	79 00 00	adc $0000,y			adc 	$0000,y
.010e2b	a8		tay				tay
.010e2c	80 ed		bra $010e1b			bra 	_FGOSearch
.010e2e					_FGOFound:
.010e2e	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010e30	98		tya				tya 								; Y + 4 is the code pointer.
.010e31	18		clc				clc
.010e32	69 04 00	adc #$0004			adc 	#4
.010e35	85 06		sta $06				sta 	DCodePtr
.010e37	60		rts				rts									; and continue
.010e38					_FGOUnknown:
.010e38	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e3b	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010e43	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010e4f					FGOFail:
.010e4f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e52	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010e5a	20 4e 75 6d 62 65 72 00
.010e62					Function_GOSUB:
.010e62	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010e64	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010e66	18		clc				clc
.010e67	69 02 00	adc #$0002			adc 	#2
.010e6a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010e6c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e6e	95 04		sta $04,x			sta 	$04,x
.010e70	a9 31 3e	lda #$3e31			lda 	#gosubTokenID 				; save gosub token at +6
.010e73	95 06		sta $06,x			sta 	$06,x
.010e75	8a		txa				txa 								; advance stack by 6.
.010e76	18		clc				clc
.010e77	69 06 00	adc #$0006			adc 	#6
.010e7a	85 2a		sta $2a				sta 	DStack
.010e7c	80 85		bra $010e03			bra 	Function_GOTO 				; and do a GOTO.
.010e7e					Function_RETURN:
.010e7e	a6 2a		ldx $2a				ldx 	DStack
.010e80	b5 00		lda $00,x			lda 	$00,x
.010e82	c9 31 3e	cmp #$3e31			cmp 	#gosubTokenID 				; check top token.
.010e85	d0 11		bne $010e98			bne 	_FRetFail
.010e87	8a		txa				txa 								; unpick stack.
.010e88	38		sec				sec
.010e89	e9 06 00	sbc #$0006			sbc 	#6
.010e8c	85 2a		sta $2a				sta 	DStack
.010e8e	aa		tax				tax
.010e8f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010e91	85 06		sta $06				sta 	DCodePtr
.010e93	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010e95	85 22		sta $22				sta 	DLineNumber
.010e97	60		rts				rts
.010e98					_FRetFail:
.010e98	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e9b	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010ea3	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.010eb0					Function_REPEAT:
.010eb0	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010eb2	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010eb4	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010eb6	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010eb8	95 04		sta $04,x			sta 	$04,x
.010eba	a9 35 3c	lda #$3c35			lda 	#repeatTokenID 				; save repeat token at +6
.010ebd	95 06		sta $06,x			sta 	$06,x
.010ebf	8a		txa				txa 								; advance stack by 6.
.010ec0	18		clc				clc
.010ec1	69 06 00	adc #$0006			adc 	#6
.010ec4	85 2a		sta $2a				sta 	DStack
.010ec6	60		rts				rts
.010ec7					Function_UNTIL:
.010ec7	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010ec9	b5 00		lda $00,x			lda 	$00,x
.010ecb	c9 35 3c	cmp #$3c35			cmp 	#repeatTokenID
.010ece	d0 26		bne $010ef6			bne 	_FUNFail
.010ed0	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; .... until what.
.010ed3	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010ed6	d0 15		bne $010eed			bne 	_FUNExit
.010ed8	c9 00 00	cmp #$0000			cmp 	#0
.010edb	d0 10		bne $010eed			bne 	_FUNExit
.010edd	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010edf	38		sec				sec
.010ee0	e9 06 00	sbc #$0006			sbc 	#6
.010ee3	aa		tax				tax
.010ee4	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010ee6	85 06		sta $06				sta 	DCodePtr
.010ee8	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010eea	85 22		sta $22				sta 	DLineNumber
.010eec	60		rts				rts
.010eed					_FUNExit:
.010eed	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010eef	38		sec				sec
.010ef0	e9 06 00	sbc #$0006			sbc 	#6
.010ef3	85 2a		sta $2a				sta 	DStack
.010ef5	60		rts				rts
.010ef6					_FUNFail:
.010ef6	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010ef9	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010f01	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.010f0e					Function_WHILE:
.010f0e	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.010f10	48		pha				pha 								; save on stack
.010f11	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; .... until what.
.010f14	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.010f17	d0 14		bne $010f2d			bne 	_FWHExecute
.010f19	c9 00 00	cmp #$0000			cmp 	#0
.010f1c	d0 0f		bne $010f2d			bne 	_FWHExecute
.010f1e	68		pla				pla 								; throw away current instruction
.010f1f	a9 39 3a	lda #$3a39			lda 	#wendTokenID 				; skip to WEND
.010f22	a2 00 00	ldx #$0000			ldx 	#0
.010f25	20 00 0d	jsr $010d00			jsr 	ScanForwardLevel
.010f28	e6 06		inc $06				inc 	DCodePtr 					; and skip over that
.010f2a	e6 06		inc $06				inc 	DCodePtr
.010f2c	60		rts				rts
.010f2d					_FWHExecute:
.010f2d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010f2f	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.010f30	3a		dec a				dec 	a
.010f31	3a		dec a				dec 	a
.010f32	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010f34	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010f36	95 04		sta $04,x			sta 	$04,x
.010f38	a9 36 3c	lda #$3c36			lda 	#whileTokenID 				; save while token at +6
.010f3b	95 06		sta $06,x			sta 	$06,x
.010f3d	8a		txa				txa 								; advance stack by 6.
.010f3e	18		clc				clc
.010f3f	69 06 00	adc #$0006			adc 	#6
.010f42	85 2a		sta $2a				sta 	DStack
.010f44	60		rts				rts
.010f45					Function_WEND:
.010f45	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.010f47	b5 00		lda $00,x			lda 	$00,x
.010f49	c9 36 3c	cmp #$3c36			cmp 	#whileTokenID
.010f4c	d0 11		bne $010f5f			bne 	_FWEFail
.010f4e	8a		txa				txa 								; unpick stack and always loop back.
.010f4f	38		sec				sec
.010f50	e9 06 00	sbc #$0006			sbc 	#6
.010f53	85 2a		sta $2a				sta 	DStack
.010f55	aa		tax				tax
.010f56	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010f58	85 06		sta $06				sta 	DCodePtr
.010f5a	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010f5c	85 22		sta $22				sta 	DLineNumber
.010f5e	60		rts				rts
.010f5f					_FWEFail:
.010f5f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010f62	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>010f6a	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010f75					Function_END:
.010f75	02 00		cop #$00			cop 	#0
.010f77					Function_RUN:
.010f77	20 cf 0f	jsr $010fcf			jsr 	Function_CLEAR 				; clear all variables.
.010f7a	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010f7c	18		clc				clc
.010f7d	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010f80					_FRun_NextLineNumber:
.010f80	a8		tay				tay 								; put in Y
.010f81	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010f84	f0 ef		beq $010f75			beq 	Function_END 				; if zero, off the end of the program
.010f86	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010f89	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010f8b	98		tya				tya 								; get address back
.010f8c	18		clc				clc 								; skip over the link/line number
.010f8d	69 04 00	adc #$0004			adc 	#4
.010f90	85 06		sta $06				sta 	DCodePtr
.010f92					_FRun_NextInstruction:
.010f92	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010f95	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010f97	38		sec				sec
.010f98	e9 00 01	sbc #$0100			sbc 	#256
.010f9b	85 16		sta $16				sta 	DTempStringPointer
.010f9d	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010f9f	f0 28		beq $010fc9			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010fa1	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; colon then skip
.010fa4	f0 18		beq $010fbe			beq 	_FRun_Colon
.010fa6	a8		tay				tay 								; save in Y
.010fa7	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010faa	c9 00 20	cmp #$2000			cmp 	#$2000
.010fad	d0 15		bne $010fc4			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010faf	98		tya				tya 								; get token back
.010fb0	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010fb3	0a		asl a				asl 	a 							; double it into X
.010fb4	aa		tax				tax
.010fb5	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010fb7	e6 06		inc $06				inc 	DCodePtr
.010fb9	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010fbc	80 d4		bra $010f92			bra 	_FRun_NextInstruction 		; do the following instruction.
.010fbe					_FRun_Colon:
.010fbe	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010fc0	e6 06		inc $06				inc 	DCodePtr
.010fc2	80 ce		bra $010f92			bra 	_FRun_NextInstruction 		; do the following instruction.
.010fc4					_FRun_TryLET:
.010fc4	20 83 0b	jsr $010b83			jsr 	Function_LET 				; try as a LET.
.010fc7	80 c9		bra $010f92			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010fc9					_FRun_EndInstruction:
.010fc9	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010fcb	1a		inc a				inc 	a 							; go to link for next line
.010fcc	1a		inc a				inc 	a
.010fcd	80 b1		bra $010f80			bra 	_FRun_NextLineNumber
.010fcf					Function_CLEAR:
.010fcf	20 db 0f	jsr $010fdb			jsr 	ClearVariablesPointersAndStacks
.010fd2	60		rts				rts
.010fd3					Function_STOP:
.010fd3	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010fd6	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010fdb					ClearVariablesPointersAndStacks:
.010fdb	a9 80 00	lda #$0080			lda 	#BASStack
.010fde	85 2a		sta $2a				sta 	DStack
.010fe0	64 80		stz $80				stz 	BASStack
.010fe2	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010fe5	a9 00 00	lda #$0000			lda 	#$0000
.010fe8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010fea	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010fec	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010fef	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ff1	20 18 10	jsr $011018			jsr 	FindCodeEnd 				; find where the program ends.
.010ff4	a8		tay				tay 								; Y points to it.
.010ff5	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010ff8	99 02 00	sta $0002,y			sta 	$0002,y
.010ffb	99 04 00	sta $0004,y			sta 	$0004,y
.010ffe	98		tya				tya 								; start of working memory up
.010fff	18		clc				clc
.011000	69 06 00	adc #$0006			adc 	#6
.011003	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011006	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011008	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01100b					_FCLoop:
.01100b	a9 00 00	lda #$0000			lda 	#$0000
.01100e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011010	c8		iny				iny
.011011	c8		iny				iny
.011012	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011015	d0 f4		bne $01100b			bne 	_FCLoop
.011017	60		rts				rts
.011018					FindCodeEnd:
.011018	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01101b	18		clc				clc
.01101c	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01101e	a8		tay				tay
.01101f					_FCELoop:
.01101f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011022	f0 08		beq $01102c			beq 	_FCEExit
.011024	98		tya				tya 								; add offset
.011025	18		clc				clc
.011026	79 00 00	adc $0000,y			adc 	$0000,y
.011029	a8		tay				tay
.01102a	80 f3		bra $01101f			bra 	_FCELoop
.01102c					_FCEExit:
.01102c	98		tya				tya 								; return in A
.01102d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.01102e					Function_Dim:
.01102e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011030	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011033	f0 3b		beq $011070			beq		_FDIMNotArray 				; no, error.
.011035	20 05 03	jsr $010305			jsr 	VariableFind 				; try to find it.
.011038	b0 41		bcs $01107b			bcs 	_FDIMExists 				; if it does, that's an error.
.01103a	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01103c	48		pha				pha
.01103d	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.01103f	48		pha				pha
.011040					_FDIMSkip:
.011040	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011042	e6 06		inc $06				inc 	DCodePtr
.011044	e6 06		inc $06				inc 	DCodePtr
.011046	29 00 08	and #$0800			and 	#IDContMask
.011049	d0 f5		bne $011040			bne 	_FDIMSkip
.01104b	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; evaluate the size
.01104e	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check the ) following.
.011051	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011054	d0 3b		bne $011091			bne 	_FDIMSize
.011056	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011059	f0 36		beq $011091			beq 	_FDIMSize
.01105b	7a		ply				ply 								; restore HashTablePtr
.01105c	84 20		sty $20				sty 	DHashTablePtr
.01105e	7a		ply				ply 								; so now A is the high index, Y points to the token
.01105f	20 af 03	jsr $0103af			jsr 	VariableCreate 				; create the variable.
.011062	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011064	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if not a comma, exit
.011067	d0 06		bne $01106f			bne 	_FDIMExit
.011069	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01106b	e6 06		inc $06				inc 	DCodePtr
.01106d	80 bf		bra $01102e			bra 	Function_DIM 				; and do another
.01106f					_FDIMExit:
.01106f	60		rts				rts
.011070					_FDIMNotArray:
.011070	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>011073	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01107b					_FDIMExists:
.01107b	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01107e	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011086	65 64 69 6d 65 6e 73 69 6f 6e 00
.011091					_FDIMSize:
.011091	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>011094	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01109c	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.0110a2					Function_COLLECT:
.0110a2	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0110a4	85 0c		sta $0c				sta 	DTemp2
.0110a6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0110a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0110ab	85 0e		sta $0e				sta 	DTemp2+2
.0110ad	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0110af	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0110b1					_FCNextPass:
.0110b1	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0110b3	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0110b5	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0110b7	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0110ba	18		clc				clc
.0110bb	65 02		adc $02				adc 	DBaseAddress
.0110bd	a8		tay				tay 								; put in Y
.0110be	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0110c1					_FCO1:
.0110c1	20 e7 10	jsr $0110e7			jsr  	COLLECTScanVariable 		; scan that one.
.0110c4	c8		iny				iny 	 							; go to next pointer
.0110c5	c8		iny				iny
.0110c6	ca		dex				dex
.0110c7	d0 f8		bne $0110c1			bne 	_FCO1 						; until done all 16.
.0110c9	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0110cc					_FCO2:
.0110cc	20 fb 10	jsr $0110fb			jsr  	COLLECTScanArray 			; scan that one.
.0110cf	c8		iny				iny 	 							; go to next pointer
.0110d0	c8		iny				iny
.0110d1	ca		dex				dex
.0110d2	d0 f8		bne $0110cc			bne 	_FCO2 						; until done all 16.
.0110d4	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0110d6	f0 0e		beq $0110e6			beq		_FCExit 					; if finished then exit.
.0110d8	48		pha				pha 								; save the target address
.0110d9	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0110db	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0110dd	20 28 05	jsr $010528			jsr 	StringMakeConcrete 			; make the string concrete.
.0110e0	7a		ply				ply 								; restore the string.
.0110e1	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.0110e4	80 cb		bra $0110b1			bra		_FCNextPass
.0110e6					_FCExit:
.0110e6	60		rts				rts
.0110e7					COLLECTScanVariable:
.0110e7	da		phx				phx 								; save XY
.0110e8	5a		phy				phy
.0110e9					_CSVLoop:
.0110e9	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0110ec	f0 0a		beq $0110f8			beq 	_CSVExit
.0110ee	a8		tay				tay 								; put new address into Y
.0110ef	18		clc				clc 								; which is four on.
.0110f0	69 04 00	adc #$0004			adc 	#4
.0110f3	20 1c 11	jsr $01111c			jsr 	COLLECTCheck
.0110f6	80 f1		bra $0110e9			bra 	_CSVLoop
.0110f8					_CSVExit:
.0110f8	7a		ply				ply
.0110f9	fa		plx				plx
.0110fa	60		rts				rts
.0110fb					COLLECTScanArray:
.0110fb	da		phx				phx 								; save XY
.0110fc	5a		phy				phy
.0110fd					_CSALoop:
.0110fd	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011100	f0 17		beq $011119			beq 	_CSAExit
.011102	a8		tay				tay 								; put new address in Y
.011103	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011106	aa		tax				tax
.011107	e8		inx				inx									; +1 as one more data element.
.011108	98		tya				tya 								; point A to first element, at +6
.011109	18		clc				clc
.01110a	69 06 00	adc #$0006			adc 	#6
.01110d					_CSADoAllStrings:
.01110d	20 1c 11	jsr $01111c			jsr 	COLLECTCheck 				; collect check the first.
.011110	1a		inc a				inc 	a 							; advance the pointer.
.011111	1a		inc a				inc 	a
.011112	1a		inc a				inc 	a
.011113	1a		inc a				inc 	a
.011114	ca		dex				dex
.011115	d0 f6		bne $01110d			bne 	_CSADoAllStrings 			; until all strings are done.
.011117	80 e4		bra $0110fd			bra 	_CSALoop
.011119					_CSAExit:
.011119	7a		ply				ply
.01111a	fa		plx				plx
.01111b	60		rts				rts
.01111c					COLLECTCheck:
.01111c	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.01111e	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011120	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011122	90 0a		bcc $01112e			bcc 	_COCExit
.011124	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011126	b0 06		bcs $01112e			bcs 	_COCExit
.011128	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01112a	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01112c	85 14		sta $14				sta 	DSignCount
.01112e					_COCExit:
.01112e	a5 0a		lda $0a				lda 	DTemp1+2
.011130	60		rts				rts
.011131	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011132					Function_ASSERT:
.011132	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; something that returns an integer.
.011135	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011137	05 08		ora $08				ora 	Dtemp1
.011139	f0 01		beq $01113c			beq 	_FAssFail
.01113b	60		rts				rts
.01113c					_FAssFail:
.01113c	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01113f	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011147	61 69 6c 65 64 00
.01114d					Function_CLS:
.01114d	20 79 11	jsr $011179			jsr 	HWClearScreen
.011150	60		rts				rts
.011151					Function_REM:
.011151	ea		nop				nop
.011152	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011154	f0 0b		beq $011161			beq 	_FRemSyntax 				; if 0, syntax error
.011156	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011159	b0 06		bcs $011161			bcs 	_FRemSyntax
.01115b	18		clc				clc 								; add to DCodePtr
.01115c	65 06		adc $06				adc 	DCodePtr
.01115e	85 06		sta $06				sta 	DCodePtr
.011160	60		rts				rts
.011161					_FRemSyntax:
.011161	82 e0 f2	brl $010444			brl 	SyntaxError

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011164					SwitchBasicInstance:
.011164	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011166	20 79 11	jsr $011179			jsr 	HWClearScreen 						; clear screen
.011169	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01116c	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01116e	86 02		stx $02				stx		DBaseAddress
.011170	84 04		sty $04				sty 	DHighAddress
.011172	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011173	48		pha				pha 										; then copy it into B.
.011174	ab		plb				plb
.011175	ab		plb				plb
.011176	4c 77 0f	jmp $010f77			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.011179					HWClearScreen:
.011179	48		pha				pha
.01117a	da		phx				phx
.01117b	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01117e	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011181	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011185	ca		dex				dex
.011186	10 f6		bpl $01117e			bpl 	_CS0
.011188	64 28		stz $28				stz 	DCursor
.01118a	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.01118d	8f 00 00 0f	sta $0f0000			sta 	$F0000
.011191	fa		plx				plx
.011192	68		pla				pla
.011193	60		rts				rts
.011194					HWPrintChar:
.011194	48		pha				pha
.011195	da		phx				phx
.011196	a6 28		ldx $28				ldx 	DCursor
.011198	e2 20		sep #$20			sep 	#$20
.01119a	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01119e	c2 20		rep #$20			rep 	#$20
.0111a0	e8		inx				inx
.0111a1	8a		txa				txa
.0111a2	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.0111a5	85 28		sta $28				sta 	DCursor
.0111a7	aa		tax				tax
.0111a8	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.0111ab	e2 20		sep #$20			sep 	#$20
.0111ad	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0111b1	c2 20		rep #$20			rep 	#$20
.0111b3	fa		plx				plx
.0111b4	68		pla				pla
.0111b5	60		rts				rts
.0111b6					HWNewLine:
.0111b6	48		pha				pha
.0111b7	da		phx				phx
.0111b8	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.0111bb					HWMoveCursor:
.0111bb	a9 20 00	lda #$0020			lda 	#32
.0111be	20 94 11	jsr $011194			jsr 	HWPrintChar
.0111c1	8a		txa				txa
.0111c2	25 28		and $28				and 	DCursor
.0111c4	d0 f5		bne $0111bb			bne 	HWMoveCursor
.0111c6	fa		plx				plx
.0111c7	68		pla				pla
.0111c8	60		rts				rts
.0111c9	48		pha		HWTab:	pha
.0111ca	da		phx				phx
.0111cb	a2 07 00	ldx #$0007			ldx 	#7
.0111ce	80 eb		bra $0111bb			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	28 65 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0e 00 01 00 2c 3e 09 d0
>024108	06 40 21 32 00 00 10 00 02 00 2c 3e 4d dd 13 d0
>024118	06 40 21 32 00 00 12 00 03 00 2c 3e 6b de 87 d9
>024128	10 d0 04 40 21 32 00 00 0e 00 04 00 2c 3e 11 d0
>024138	05 40 21 32 00 00 10 00 05 00 2c 3e f2 dc 21 d3
>024148	05 40 21 32 00 00 12 00 06 00 2c 3e d3 dd b6 da
>024158	10 d0 05 40 21 32 00 00 0e 00 07 00 2c 3e 18 d0
>024168	06 40 21 32 00 00 10 00 08 00 2c 3e 02 de 0f d0
>024178	06 40 21 32 00 00 0e 00 09 00 2c 3e 04 d0 05 40
>024188	21 32 00 00 0e 00 0a 00 2c 3e 20 d5 06 40 21 32
>024198	00 00 10 00 0b 00 2c 3e b6 fd a1 f3 04 40 21 32
>0241a8	00 00 10 00 0c 00 2c 3e 04 fe 02 f0 05 40 21 32
>0241b8	00 00 0e 00 0d 00 2c 3e 6d f6 05 40 21 32 00 00
>0241c8	0e 00 0e 00 2c 3e ee f4 05 40 21 32 00 00 0e 00
>0241d8	0f 00 2c 3e 0c f6 04 40 21 32 00 00 12 00 10 00
>0241e8	2c 3e d4 fd 3d fc 11 f0 03 40 21 32 00 00 0e 00
>0241f8	11 00 2c 3e 7a f5 05 40 21 32 00 00 0e 00 12 00
>024208	2c 3e 62 f6 03 40 21 32 00 00 10 00 13 00 2c 3e
>024218	fd fd 1b f0 02 40 21 32 00 00 10 00 14 00 2c 3e
>024228	28 fe 2f f1 04 40 21 32 00 00 12 00 15 00 75 cd
>024238	03 c0 06 22 0b 24 05 10 50 70 00 00 0e 00 16 00
>024248	01 c0 06 22 04 10 fe 58 00 00 10 00 17 00 d3 cc
>024258	5b c3 06 22 0b 24 bf 40 00 00 0e 00 18 00 15 c0
>024268	06 22 01 10 56 a7 00 00 10 00 19 00 26 3e fb c5
>024278	06 22 0b 24 ec 97 00 00 12 00 1a 00 26 3e 40 ce
>024288	19 c0 06 22 02 10 a3 a1 00 00 12 00 1b 00 54 cd
>024298	2e cc 15 c0 06 22 03 10 95 a6 00 00 10 00 1c 00
>0242a8	26 3e 2f ce 08 c0 06 22 00 af 00 00 12 00 1d 00
>0242b8	26 3e cd cc 0d c0 06 22 04 10 6e 73 00 00 14 00
>0242c8	1e 00 26 3e e2 cd 63 ce 16 c0 06 22 0b 24 26 40
>0242d8	00 00 0e 00 1f 00 26 3e dd c5 06 22 79 b7 00 00
>0242e8	0e 00 20 00 d8 cc 10 c0 06 22 3a 40 00 00 14 00
>0242f8	21 00 26 3e 2d ce 08 c0 06 22 0b 24 03 10 a9 b4
>024308	00 00 10 00 22 00 7f cd e3 c5 06 22 04 10 8b 80
>024318	00 00 14 00 23 00 88 cd 09 ce 20 c0 06 22 0b 24
>024328	01 10 e4 84 00 00 14 00 24 00 26 3e 07 ce 05 c0
>024338	06 22 0b 24 02 10 c8 9f 00 00 14 00 25 00 26 3e
>024348	ac cd e6 c8 15 c0 06 22 0b 24 56 6f 00 00 14 00
>024358	26 00 20 cd 83 cd 20 c0 06 22 0b 24 03 10 9a a2
>024368	00 00 12 00 27 00 26 3e 5c ce 21 c0 06 22 02 10
>024378	48 6b 00 00 12 00 28 00 26 3e 08 ce 74 c3 06 22
>024388	05 10 46 a6 00 00 0c 00 29 00 36 c6 06 22 0d 40
>024398	00 00 0e 00 2a 00 b3 c5 06 22 01 10 c0 93 00 00
>0243a8	14 00 2b 00 26 3e e4 cd 64 c5 06 22 0b 24 02 10
>0243b8	e9 7f 00 00 10 00 2c 00 26 3e 76 c5 06 22 01 10
>0243c8	c6 bd 00 00 16 00 2d 00 26 3e ff cc 25 cd 23 c0
>0243d8	06 22 0b 24 05 10 db 44 00 00 12 00 2e 00 0f ce
>0243e8	4f ca 02 c0 06 22 0b 24 50 40 00 00 10 00 2f 00
>0243f8	26 3e d1 c4 06 22 0b 24 b6 40 00 00 12 00 30 00
>024408	26 3e ff cd 48 c0 06 22 05 10 bb 5a 00 00 12 00
>024418	31 00 68 ce 6b ca 06 c0 06 22 02 10 de 5e 00 00
>024428	10 00 32 00 4e cd d3 c5 06 22 02 10 69 7b 00 00
>024438	0e 00 33 00 5c c5 06 22 02 10 42 75 00 00 14 00
>024448	34 00 26 3e f6 cc 0d c2 06 22 0b 24 04 10 d3 77
>024458	00 00 10 00 35 00 26 3e 47 cd 22 c2 06 22 91 ae
>024468	00 00 10 00 36 00 65 ce 11 c0 06 22 0b 24 02 40
>024478	00 00 0e 00 37 00 14 c6 06 22 05 10 23 89 00 00
>024488	10 00 38 00 26 3e 03 c0 06 22 02 10 57 b2 00 00
>024498	12 00 39 00 14 ce 89 c9 19 c0 06 22 0b 24 33 40
>0244a8	00 00 0e 00 3a 00 26 3e 08 c0 06 22 70 44 00 00
>0244b8	10 00 3b 00 26 3e f9 cc 01 c0 06 22 3a 8a 00 00
>0244c8	12 00 3c 00 ed cc 75 c0 06 22 0b 24 04 10 04 9b
>0244d8	00 00 0e 00 3d 00 13 c0 06 22 02 10 e5 60 00 00
>0244e8	10 00 3e 00 b1 cd e2 c1 06 22 0b 24 ed 5d 00 00
>0244f8	10 00 3f 00 39 ce 3b cd 14 c0 06 22 52 ae 00 00
>024508	0e 00 40 00 07 c0 06 22 04 10 8c bd 00 00 0e 00
>024518	41 00 26 3e 19 c0 06 22 aa 40 00 00 0c 00 42 00
>024528	e5 c5 06 22 bb 98 00 00 10 00 43 00 26 3e 74 c5
>024538	06 22 0b 24 ba 40 00 00 14 00 44 00 26 3e fd cc
>024548	00 cb 08 c0 06 22 0b 24 a1 40 00 00 12 00 45 00
>024558	26 3e 1a c0 06 22 0b 24 03 10 6f 79 00 00 0c 00
>024568	46 00 17 c0 06 22 b7 40 00 00 10 00 47 00 26 3e
>024578	0f c0 06 22 01 10 ef 6b 00 00 14 00 48 00 26 3e
>024588	b7 cd 06 c0 06 22 0b 24 02 10 e8 50 00 00 14 00
>024598	49 00 26 3e 7c cd 53 c1 06 22 0b 24 05 10 94 a1
>0245a8	00 00 14 00 4a 00 26 3e d7 cd ae c9 0a c0 06 22
>0245b8	02 10 61 62 00 00 0e 00 4b 00 38 ce 0b c0 06 22
>0245c8	75 40 00 00 12 00 4c 00 26 3e 05 ce be c8 20 c0
>0245d8	06 22 60 40 00 00 0e 00 4d 00 6a c6 06 22 05 10
>0245e8	fc 59 00 00 0c 00 4e 00 83 c5 06 22 13 40 00 00
>0245f8	0e 00 4f 00 26 3e cf c5 06 22 b1 40 00 00 10 00
>024608	50 00 26 3e 83 cd 07 c0 06 22 1f 40 00 00 10 00
>024618	51 00 a8 ed 5f e3 06 22 04 00 00 00 00 00 18 00
>024628	52 00 26 3e c2 ec d6 e1 06 22 0a 00 06 4e 4b 20
>024638	56 45 47 00 00 00 14 00 53 00 b8 e5 06 22 0a 00
>024648	07 5a 47 58 20 20 46 45 00 00 16 00 54 00 23 ed
>024658	64 e2 06 22 0a 00 07 53 42 53 5a 50 42 4f 00 00
>024668	10 00 55 00 26 3e 15 e0 06 22 04 00 01 4f 00 00
>024678	14 00 56 00 0a e0 06 22 0a 00 07 57 50 20 51 4b
>024688	5a 58 00 00 1a 00 57 00 26 3e ab ed f1 e0 06 22
>024698	0c 00 08 54 4f 52 44 20 52 44 4b 00 00 00 12 00
>0246a8	58 00 26 3e df e5 06 22 06 00 02 46 43 00 00 00
>0246b8	1c 00 59 00 26 3e 06 ee 26 ea 03 e0 06 22 0c 00
>0246c8	09 46 52 4b 52 50 41 50 20 48 00 00 18 00 5a 00
>0246d8	f3 ec 26 e4 06 22 0c 00 09 43 4b 4d 53 42 44 56
>0246e8	52 47 00 00 16 00 5b 00 26 3e 14 ee 69 e3 06 22
>0246f8	08 00 05 45 20 54 50 53 00 00 18 00 5c 00 26 3e
>024708	1e ed e5 ea 06 e0 06 22 08 00 04 58 57 56 49 00
>024718	00 00 18 00 5d 00 26 3e 47 e5 06 22 0c 00 08 47
>024728	58 46 4a 49 4f 20 4d 00 00 00 16 00 5e 00 26 3e
>024738	f5 e4 06 22 0a 00 07 59 4b 20 4e 55 20 54 00 00
>024748	16 00 5f 00 14 e0 06 22 0c 00 09 4b 4c 5a 5a 4d
>024758	49 20 20 4c 00 00 12 00 60 00 26 3e 01 e0 06 22
>024768	06 00 03 56 20 51 00 00 10 00 61 00 26 3e 02 e0
>024778	06 22 04 00 00 00 00 00 16 00 62 00 e3 e5 06 22
>024788	0c 00 09 59 20 20 20 20 42 56 55 46 00 00 18 00
>024798	63 00 26 3e 59 e5 06 22 0c 00 09 46 20 46 43 20
>0247a8	20 20 59 4f 00 00 10 00 64 00 26 3e f9 e4 06 22
>0247b8	04 00 01 52 00 00 14 00 65 00 26 3e 06 e0 06 22
>0247c8	08 00 05 55 4b 4f 47 5a 00 00 12 00 66 00 3c e6
>0247d8	06 22 08 00 05 4e 4b 20 5a 59 00 00 14 00 67 00
>0247e8	26 3e 16 e0 06 22 08 00 04 46 49 50 57 00 00 00
>0247f8	10 00 68 00 26 3e a5 e5 06 22 04 00 00 00 00 00
>024808	16 00 69 00 aa ed e3 e8 12 e0 06 22 08 00 04 43
>024818	4e 4e 47 00 00 00 12 00 6a 00 26 3e b7 ed 08 e0
>024828	06 22 04 00 00 00 00 00 12 00 6b 00 26 3e 03 e0
>024838	06 22 06 00 02 41 50 00 00 00 10 00 6c 00 ab ed
>024848	0c e0 06 22 04 00 01 42 00 00 16 00 6d 00 0c e0
>024858	06 22 0c 00 09 42 48 4d 20 49 49 20 46 41 00 00
>024868	10 00 6e 00 26 3e 1f e5 06 22 04 00 01 4f 00 00
>024878	14 00 6f 00 26 3e f3 ec 1c e0 06 22 06 00 03 59
>024888	20 49 00 00 10 00 70 00 4c ed 17 e0 06 22 04 00
>024898	01 4a 00 00 14 00 71 00 56 ed 1d e0 06 22 08 00
>0248a8	05 42 48 4e 57 41 00 00 14 00 72 00 26 3e d7 ed
>0248b8	88 e0 06 22 06 00 02 45 56 00 00 00 16 00 73 00
>0248c8	79 e5 06 22 0c 00 09 54 59 58 54 42 57 20 45 51
>0248d8	00 00 10 00 74 00 85 ed fe e2 06 22 04 00 01 5a
>0248e8	00 00 12 00 75 00 10 e0 06 22 08 00 04 4a 53 4e
>0248f8	45 00 00 00 14 00 76 00 26 3e 80 e5 06 22 08 00
>024908	05 41 20 4b 51 47 00 00 18 00 77 00 b2 ed 23 e0
>024918	06 22 0c 00 09 46 5a 51 49 56 59 56 4a 4d 00 00
>024928	14 00 78 00 26 3e 29 ee 01 e0 06 22 06 00 03 45
>024938	55 59 00 00 16 00 79 00 26 3e 08 e0 06 22 0a 00
>024948	07 48 5a 4c 4f 20 49 57 00 00 14 00 7a 00 26 3e
>024958	5b e6 06 22 08 00 05 5a 20 59 20 44 00 00 1a 00
>024968	7b 00 26 3e 2f ed 59 ee 0e e0 06 22 0a 00 06 46
>024978	20 45 4d 20 58 00 00 00 12 00 7c 00 26 3e 13 e0
>024988	06 22 06 00 03 57 4f 4a 00 00 14 00 7d 00 b9 ed
>024998	1b e3 06 22 08 00 05 52 59 5a 5a 55 00 00 1c 00
>0249a8	7e 00 26 3e c5 ec 10 e0 06 22 0e 00 0a 48 20 42
>0249b8	4e 43 42 41 59 50 44 00 00 00 16 00 7f 00 08 ee
>0249c8	15 e3 06 22 0a 00 06 44 51 4e 20 51 50 00 00 00
>0249d8	10 00 80 00 8b ed 5f e5 06 22 04 00 01 49 00 00
>0249e8	16 00 81 00 26 3e c8 ec 69 e4 06 22 08 00 04 43
>0249f8	50 50 51 00 00 00 1c 00 82 00 26 3e 53 ed 13 e0
>024a08	06 22 0e 00 0b 49 59 20 41 20 20 47 20 46 20 51
>024a18	00 00 18 00 83 00 fd ec 81 e5 06 22 0c 00 09 5a
>024a28	47 48 20 4b 50 20 56 52 00 00 14 00 84 00 26 3e
>024a38	2e ee b8 e0 06 22 06 00 02 45 51 00 00 00 16 00
>024a48	85 00 26 3e 58 e6 06 22 0a 00 06 4e 20 56 55 48
>024a58	59 00 00 00 1c 00 86 00 26 3e a4 ed 03 e2 06 22
>024a68	0e 00 0a 49 41 4d 20 55 4a 41 51 51 4c 00 00 00
>024a78	14 00 87 00 36 e6 06 22 0a 00 06 43 51 48 44 57
>024a88	4c 00 00 00 12 00 88 00 07 ee 82 e5 06 22 06 00
>024a98	02 57 59 00 00 00 12 00 89 00 26 3e 0b e0 06 22
>024aa8	06 00 03 49 43 57 00 00 18 00 8a 00 26 3e 0a ee
>024ab8	a0 e0 06 22 0a 00 07 4c 46 44 53 20 54 54 00 00
>024ac8	14 00 8b 00 26 3e d4 ec 19 e0 06 22 06 00 02 52
>024ad8	4c 00 00 00 12 00 8c 00 a8 ed 03 e0 06 22 06 00
>024ae8	02 4f 4b 00 00 00 6e 00 8d 00 09 d0 00 40 21 32
>024af8	06 22 0b 24 79 40 1f 32 09 d0 01 40 21 32 06 22
>024b08	0b 24 04 10 ef 89 1f 32 09 d0 02 40 21 32 06 22
>024b18	03 10 db b6 1f 32 09 d0 03 40 21 32 06 22 0b 24
>024b28	01 10 55 48 1f 32 09 d0 04 40 21 32 06 22 0b 24
>024b38	c5 58 1f 32 09 d0 05 40 21 32 06 22 0b 24 06 10
>024b48	8b 45 1f 32 09 d0 06 40 21 32 06 22 0b 24 04 10
>024b58	f2 51 00 00 7a 00 8e 00 4d dd 13 d0 00 40 21 32
>024b68	06 22 01 10 6d 64 1f 32 4d dd 13 d0 01 40 21 32
>024b78	06 22 0b 24 01 10 61 73 1f 32 4d dd 13 d0 02 40
>024b88	21 32 06 22 02 10 31 5c 1f 32 4d dd 13 d0 03 40
>024b98	21 32 06 22 0b 24 04 10 d2 5c 1f 32 4d dd 13 d0
>024ba8	04 40 21 32 06 22 a5 40 1f 32 4d dd 13 d0 05 40
>024bb8	21 32 06 22 0b 24 04 10 0a a5 1f 32 4d dd 13 d0
>024bc8	06 40 21 32 06 22 0b 24 01 10 a5 71 00 00 5e 00
>024bd8	8f 00 6b de 87 d9 10 d0 00 40 21 32 06 22 0b 24
>024be8	05 10 dd 46 1f 32 6b de 87 d9 10 d0 01 40 21 32
>024bf8	06 22 af 40 1f 32 6b de 87 d9 10 d0 02 40 21 32
>024c08	06 22 0b 24 91 90 1f 32 6b de 87 d9 10 d0 03 40
>024c18	21 32 06 22 02 10 1c 7f 1f 32 6b de 87 d9 10 d0
>024c28	04 40 21 32 06 22 04 10 6c 4d 00 00 58 00 90 00
>024c38	11 d0 00 40 21 32 06 22 0b 24 26 76 1f 32 11 d0
>024c48	01 40 21 32 06 22 0b 24 01 10 ea 4b 1f 32 11 d0
>024c58	02 40 21 32 06 22 c3 40 1f 32 11 d0 03 40 21 32
>024c68	06 22 02 10 e5 96 1f 32 11 d0 04 40 21 32 06 22
>024c78	0b 24 05 40 1f 32 11 d0 05 40 21 32 06 22 05 10
>024c88	f0 bb 00 00 68 00 91 00 f2 dc 21 d3 00 40 21 32
>024c98	06 22 05 10 41 61 1f 32 f2 dc 21 d3 01 40 21 32
>024ca8	06 22 04 10 03 77 1f 32 f2 dc 21 d3 02 40 21 32
>024cb8	06 22 0b 24 01 10 6f 66 1f 32 f2 dc 21 d3 03 40
>024cc8	21 32 06 22 02 10 20 5b 1f 32 f2 dc 21 d3 04 40
>024cd8	21 32 06 22 0b 24 02 10 2a 76 1f 32 f2 dc 21 d3
>024ce8	05 40 21 32 06 22 0b 24 9f 40 00 00 76 00 92 00
>024cf8	d3 dd b6 da 10 d0 00 40 21 32 06 22 0b 24 64 40
>024d08	1f 32 d3 dd b6 da 10 d0 01 40 21 32 06 22 0b 24
>024d18	01 10 53 60 1f 32 d3 dd b6 da 10 d0 02 40 21 32
>024d28	06 22 0b 24 01 10 08 87 1f 32 d3 dd b6 da 10 d0
>024d38	03 40 21 32 06 22 02 10 2a 71 1f 32 d3 dd b6 da
>024d48	10 d0 04 40 21 32 06 22 03 10 fd ad 1f 32 d3 dd
>024d58	b6 da 10 d0 05 40 21 32 06 22 0b 24 04 10 bf a5
>024d68	00 00 68 00 93 00 18 d0 00 40 21 32 06 22 0b 24
>024d78	05 10 bd 6e 1f 32 18 d0 01 40 21 32 06 22 03 10
>024d88	27 82 1f 32 18 d0 02 40 21 32 06 22 b0 40 1f 32
>024d98	18 d0 03 40 21 32 06 22 0b 24 05 10 14 7f 1f 32
>024da8	18 d0 04 40 21 32 06 22 02 10 b5 9b 1f 32 18 d0
>024db8	05 40 21 32 06 22 0b 24 94 40 1f 32 18 d0 06 40
>024dc8	21 32 06 22 03 10 52 41 00 00 7a 00 94 00 02 de
>024dd8	0f d0 00 40 21 32 06 22 01 10 8a ae 1f 32 02 de
>024de8	0f d0 01 40 21 32 06 22 0b 24 05 bf 1f 32 02 de
>024df8	0f d0 02 40 21 32 06 22 0b 24 04 10 ab 4f 1f 32
>024e08	02 de 0f d0 03 40 21 32 06 22 02 10 d7 77 1f 32
>024e18	02 de 0f d0 04 40 21 32 06 22 0b 24 03 10 38 8c
>024e28	1f 32 02 de 0f d0 05 40 21 32 06 22 02 10 aa 61
>024e38	1f 32 02 de 0f d0 06 40 21 32 06 22 0b 24 02 10
>024e48	43 5c 00 00 5e 00 95 00 04 d0 00 40 21 32 06 22
>024e58	0b 24 4a 87 1f 32 04 d0 01 40 21 32 06 22 0b 24
>024e68	05 10 a7 77 1f 32 04 d0 02 40 21 32 06 22 0b 24
>024e78	11 79 1f 32 04 d0 03 40 21 32 06 22 0b 24 01 10
>024e88	d3 b8 1f 32 04 d0 04 40 21 32 06 22 0b 24 04 10
>024e98	0d bb 1f 32 04 d0 05 40 21 32 06 22 02 10 d3 48
>024ea8	00 00 62 00 96 00 20 d5 00 40 21 32 06 22 03 10
>024eb8	bb b5 1f 32 20 d5 01 40 21 32 06 22 04 40 1f 32
>024ec8	20 d5 02 40 21 32 06 22 0b 24 33 93 1f 32 20 d5
>024ed8	03 40 21 32 06 22 03 10 ea 4b 1f 32 20 d5 04 40
>024ee8	21 32 06 22 03 10 31 9a 1f 32 20 d5 05 40 21 32
>024ef8	06 22 9b 5b 1f 32 20 d5 06 40 21 32 06 22 04 10
>024f08	8c 47 00 00 6e 00 97 00 b6 fd a1 f3 00 40 21 32
>024f18	06 22 06 00 03 57 4f 5a 1f 32 b6 fd a1 f3 01 40
>024f28	21 32 06 22 08 00 05 49 4b 20 44 53 1f 32 b6 fd
>024f38	a1 f3 02 40 21 32 06 22 0a 00 07 4a 45 48 41 52
>024f48	53 4e 1f 32 b6 fd a1 f3 03 40 21 32 06 22 0a 00
>024f58	06 56 42 52 45 52 4e 00 1f 32 b6 fd a1 f3 04 40
>024f68	21 32 06 22 0c 00 08 55 20 53 59 4c 4d 4d 4f 00
>024f78	00 00 7c 00 98 00 04 fe 02 f0 00 40 21 32 06 22
>024f88	0a 00 06 48 42 55 4d 45 55 00 1f 32 04 fe 02 f0
>024f98	01 40 21 32 06 22 0c 00 09 42 52 41 44 50 4d 4d
>024fa8	58 4d 1f 32 04 fe 02 f0 02 40 21 32 06 22 04 00
>024fb8	01 42 1f 32 04 fe 02 f0 03 40 21 32 06 22 08 00
>024fc8	05 4f 53 5a 53 42 1f 32 04 fe 02 f0 04 40 21 32
>024fd8	06 22 04 00 01 51 1f 32 04 fe 02 f0 05 40 21 32
>024fe8	06 22 0a 00 06 47 5a 4e 57 20 48 00 00 00 7a 00
>024ff8	99 00 6d f6 00 40 21 32 06 22 0c 00 08 54 20 4b
>025008	47 48 20 56 55 00 1f 32 6d f6 01 40 21 32 06 22
>025018	08 00 04 4e 5a 59 51 00 1f 32 6d f6 02 40 21 32
>025028	06 22 0a 00 06 48 20 45 5a 57 5a 00 1f 32 6d f6
>025038	03 40 21 32 06 22 08 00 05 4e 4a 42 49 59 1f 32
>025048	6d f6 04 40 21 32 06 22 08 00 04 51 53 42 4b 00
>025058	1f 32 6d f6 05 40 21 32 06 22 0c 00 08 4d 49 20
>025068	45 44 20 4c 4a 00 00 00 68 00 9a 00 ee f4 00 40
>025078	21 32 06 22 04 00 00 00 1f 32 ee f4 01 40 21 32
>025088	06 22 0c 00 09 42 56 54 20 51 47 59 4d 54 1f 32
>025098	ee f4 02 40 21 32 06 22 06 00 02 51 49 00 1f 32
>0250a8	ee f4 03 40 21 32 06 22 06 00 03 41 5a 4d 1f 32
>0250b8	ee f4 04 40 21 32 06 22 04 00 01 47 1f 32 ee f4
>0250c8	05 40 21 32 06 22 08 00 04 55 43 54 52 00 00 00
>0250d8	58 00 9b 00 0c f6 00 40 21 32 06 22 06 00 02 43
>0250e8	4a 00 1f 32 0c f6 01 40 21 32 06 22 04 00 00 00
>0250f8	1f 32 0c f6 02 40 21 32 06 22 06 00 02 44 53 00
>025108	1f 32 0c f6 03 40 21 32 06 22 0e 00 0b 51 20 49
>025118	4b 45 5a 4f 47 55 59 59 1f 32 0c f6 04 40 21 32
>025128	06 22 04 00 00 00 00 00 64 00 9c 00 d4 fd 3d fc
>025138	11 f0 00 40 21 32 06 22 06 00 03 43 55 4d 1f 32
>025148	d4 fd 3d fc 11 f0 01 40 21 32 06 22 0a 00 07 58
>025158	4e 43 46 59 43 50 1f 32 d4 fd 3d fc 11 f0 02 40
>025168	21 32 06 22 0a 00 06 4b 55 44 5a 56 49 00 1f 32
>025178	d4 fd 3d fc 11 f0 03 40 21 32 06 22 0e 00 0a 43
>025188	57 43 43 4d 52 43 58 49 51 00 00 00 7e 00 9d 00
>025198	7a f5 00 40 21 32 06 22 0e 00 0a 43 54 56 5a 54
>0251a8	20 57 4f 20 48 00 1f 32 7a f5 01 40 21 32 06 22
>0251b8	0a 00 06 4d 48 59 4d 49 56 00 1f 32 7a f5 02 40
>0251c8	21 32 06 22 0c 00 08 54 4c 4f 55 4f 52 51 48 00
>0251d8	1f 32 7a f5 03 40 21 32 06 22 04 00 01 54 1f 32
>0251e8	7a f5 04 40 21 32 06 22 0a 00 06 55 4b 54 48 55
>0251f8	48 00 1f 32 7a f5 05 40 21 32 06 22 0c 00 08 48
>025208	4c 44 4c 20 42 42 47 00 00 00 4e 00 9e 00 62 f6
>025218	00 40 21 32 06 22 04 00 00 00 1f 32 62 f6 01 40
>025228	21 32 06 22 0c 00 08 58 4d 54 49 41 41 56 4f 00
>025238	1f 32 62 f6 02 40 21 32 06 22 04 00 01 5a 1f 32
>025248	62 f6 03 40 21 32 06 22 0e 00 0a 57 41 50 51 50
>025258	4f 20 4d 55 45 00 00 00 42 00 9f 00 fd fd 1b f0
>025268	00 40 21 32 06 22 0a 00 06 46 50 48 20 4c 45 00
>025278	1f 32 fd fd 1b f0 01 40 21 32 06 22 06 00 03 4e
>025288	46 4b 1f 32 fd fd 1b f0 02 40 21 32 06 22 0a 00
>025298	07 51 20 52 58 48 52 50 00 00 62 00 a0 00 28 fe
>0252a8	2f f1 00 40 21 32 06 22 08 00 04 45 53 4d 55 00
>0252b8	1f 32 28 fe 2f f1 01 40 21 32 06 22 08 00 05 46
>0252c8	53 20 20 56 1f 32 28 fe 2f f1 02 40 21 32 06 22
>0252d8	04 00 00 00 1f 32 28 fe 2f f1 03 40 21 32 06 22
>0252e8	0a 00 06 5a 59 20 4c 47 4b 00 1f 32 28 fe 2f f1
>0252f8	04 40 21 32 06 22 04 00 00 00 00 00 14 00 a1 00
>025308	27 3e 75 cd 03 c0 06 22 0b 24 05 10 50 70 00 00
>025318	10 00 a2 00 27 3e 01 c0 06 22 04 10 fe 58 00 00
>025328	12 00 a3 00 27 3e d3 cc 5b c3 06 22 0b 24 bf 40
>025338	00 00 10 00 a4 00 27 3e 15 c0 06 22 01 10 56 a7
>025348	00 00 10 00 a5 00 27 3e fb c5 06 22 0b 24 ec 97
>025358	00 00 12 00 a6 00 27 3e 40 ce 19 c0 06 22 02 10
>025368	a3 a1 00 00 14 00 a7 00 27 3e 54 cd 2e cc 15 c0
>025378	06 22 03 10 95 a6 00 00 10 00 a8 00 27 3e 2f ce
>025388	08 c0 06 22 00 af 00 00 12 00 a9 00 27 3e cd cc
>025398	0d c0 06 22 04 10 6e 73 00 00 14 00 aa 00 27 3e
>0253a8	e2 cd 63 ce 16 c0 06 22 0b 24 26 40 00 00 0e 00
>0253b8	ab 00 27 3e dd c5 06 22 79 b7 00 00 10 00 ac 00
>0253c8	27 3e d8 cc 10 c0 06 22 3a 40 00 00 14 00 ad 00
>0253d8	27 3e 2d ce 08 c0 06 22 0b 24 03 10 a9 b4 00 00
>0253e8	12 00 ae 00 27 3e 7f cd e3 c5 06 22 04 10 8b 80
>0253f8	00 00 16 00 af 00 27 3e 88 cd 09 ce 20 c0 06 22
>025408	0b 24 01 10 e4 84 00 00 14 00 b0 00 27 3e 07 ce
>025418	05 c0 06 22 0b 24 02 10 c8 9f 00 00 14 00 b1 00
>025428	27 3e ac cd e6 c8 15 c0 06 22 0b 24 56 6f 00 00
>025438	16 00 b2 00 27 3e 20 cd 83 cd 20 c0 06 22 0b 24
>025448	03 10 9a a2 00 00 12 00 b3 00 27 3e 5c ce 21 c0
>025458	06 22 02 10 48 6b 00 00 12 00 b4 00 27 3e 08 ce
>025468	74 c3 06 22 05 10 46 a6 00 00 0e 00 b5 00 27 3e
>025478	36 c6 06 22 0d 40 00 00 10 00 b6 00 27 3e b3 c5
>025488	06 22 01 10 c0 93 00 00 14 00 b7 00 27 3e e4 cd
>025498	64 c5 06 22 0b 24 02 10 e9 7f 00 00 10 00 b8 00
>0254a8	27 3e 76 c5 06 22 01 10 c6 bd 00 00 16 00 b9 00
>0254b8	27 3e ff cc 25 cd 23 c0 06 22 0b 24 05 10 db 44
>0254c8	00 00 14 00 ba 00 27 3e 0f ce 4f ca 02 c0 06 22
>0254d8	0b 24 50 40 00 00 10 00 bb 00 27 3e d1 c4 06 22
>0254e8	0b 24 b6 40 00 00 12 00 bc 00 27 3e ff cd 48 c0
>0254f8	06 22 05 10 bb 5a 00 00 14 00 bd 00 27 3e 68 ce
>025508	6b ca 06 c0 06 22 02 10 de 5e 00 00 12 00 be 00
>025518	27 3e 4e cd d3 c5 06 22 02 10 69 7b 00 00 10 00
>025528	bf 00 27 3e 5c c5 06 22 02 10 42 75 00 00 14 00
>025538	c0 00 27 3e f6 cc 0d c2 06 22 0b 24 04 10 d3 77
>025548	00 00 10 00 c1 00 27 3e 47 cd 22 c2 06 22 91 ae
>025558	00 00 12 00 c2 00 27 3e 65 ce 11 c0 06 22 0b 24
>025568	02 40 00 00 10 00 c3 00 27 3e 14 c6 06 22 05 10
>025578	23 89 00 00 10 00 c4 00 27 3e 03 c0 06 22 02 10
>025588	57 b2 00 00 14 00 c5 00 27 3e 14 ce 89 c9 19 c0
>025598	06 22 0b 24 33 40 00 00 0e 00 c6 00 27 3e 08 c0
>0255a8	06 22 70 44 00 00 10 00 c7 00 27 3e f9 cc 01 c0
>0255b8	06 22 3a 8a 00 00 14 00 c8 00 27 3e ed cc 75 c0
>0255c8	06 22 0b 24 04 10 04 9b 00 00 10 00 c9 00 27 3e
>0255d8	13 c0 06 22 02 10 e5 60 00 00 12 00 ca 00 27 3e
>0255e8	b1 cd e2 c1 06 22 0b 24 ed 5d 00 00 12 00 cb 00
>0255f8	27 3e 39 ce 3b cd 14 c0 06 22 52 ae 00 00 10 00
>025608	cc 00 27 3e 07 c0 06 22 04 10 8c bd 00 00 0e 00
>025618	cd 00 27 3e 19 c0 06 22 aa 40 00 00 0e 00 ce 00
>025628	27 3e e5 c5 06 22 bb 98 00 00 10 00 cf 00 27 3e
>025638	74 c5 06 22 0b 24 ba 40 00 00 14 00 d0 00 27 3e
>025648	fd cc 00 cb 08 c0 06 22 0b 24 a1 40 00 00 12 00
>025658	d1 00 27 3e 1a c0 06 22 0b 24 03 10 6f 79 00 00
>025668	0e 00 d2 00 27 3e 17 c0 06 22 b7 40 00 00 10 00
>025678	d3 00 27 3e 0f c0 06 22 01 10 ef 6b 00 00 14 00
>025688	d4 00 27 3e b7 cd 06 c0 06 22 0b 24 02 10 e8 50
>025698	00 00 14 00 d5 00 27 3e 7c cd 53 c1 06 22 0b 24
>0256a8	05 10 94 a1 00 00 14 00 d6 00 27 3e d7 cd ae c9
>0256b8	0a c0 06 22 02 10 61 62 00 00 10 00 d7 00 27 3e
>0256c8	38 ce 0b c0 06 22 75 40 00 00 12 00 d8 00 27 3e
>0256d8	05 ce be c8 20 c0 06 22 60 40 00 00 10 00 d9 00
>0256e8	27 3e 6a c6 06 22 05 10 fc 59 00 00 0e 00 da 00
>0256f8	27 3e 83 c5 06 22 13 40 00 00 0e 00 db 00 27 3e
>025708	cf c5 06 22 b1 40 00 00 10 00 dc 00 27 3e 83 cd
>025718	07 c0 06 22 1f 40 00 00 12 00 dd 00 27 3e a8 ed
>025728	5f e3 06 22 04 00 00 00 00 00 18 00 de 00 27 3e
>025738	c2 ec d6 e1 06 22 0a 00 06 4e 4b 20 56 45 47 00
>025748	00 00 16 00 df 00 27 3e b8 e5 06 22 0a 00 07 5a
>025758	47 58 20 20 46 45 00 00 18 00 e0 00 27 3e 23 ed
>025768	64 e2 06 22 0a 00 07 53 42 53 5a 50 42 4f 00 00
>025778	10 00 e1 00 27 3e 15 e0 06 22 04 00 01 4f 00 00
>025788	16 00 e2 00 27 3e 0a e0 06 22 0a 00 07 57 50 20
>025798	51 4b 5a 58 00 00 1a 00 e3 00 27 3e ab ed f1 e0
>0257a8	06 22 0c 00 08 54 4f 52 44 20 52 44 4b 00 00 00
>0257b8	12 00 e4 00 27 3e df e5 06 22 06 00 02 46 43 00
>0257c8	00 00 1c 00 e5 00 27 3e 06 ee 26 ea 03 e0 06 22
>0257d8	0c 00 09 46 52 4b 52 50 41 50 20 48 00 00 1a 00
>0257e8	e6 00 27 3e f3 ec 26 e4 06 22 0c 00 09 43 4b 4d
>0257f8	53 42 44 56 52 47 00 00 16 00 e7 00 27 3e 14 ee
>025808	69 e3 06 22 08 00 05 45 20 54 50 53 00 00 18 00
>025818	e8 00 27 3e 1e ed e5 ea 06 e0 06 22 08 00 04 58
>025828	57 56 49 00 00 00 18 00 e9 00 27 3e 47 e5 06 22
>025838	0c 00 08 47 58 46 4a 49 4f 20 4d 00 00 00 16 00
>025848	ea 00 27 3e f5 e4 06 22 0a 00 07 59 4b 20 4e 55
>025858	20 54 00 00 18 00 eb 00 27 3e 14 e0 06 22 0c 00
>025868	09 4b 4c 5a 5a 4d 49 20 20 4c 00 00 12 00 ec 00
>025878	27 3e 01 e0 06 22 06 00 03 56 20 51 00 00 10 00
>025888	ed 00 27 3e 02 e0 06 22 04 00 00 00 00 00 18 00
>025898	ee 00 27 3e e3 e5 06 22 0c 00 09 59 20 20 20 20
>0258a8	42 56 55 46 00 00 18 00 ef 00 27 3e 59 e5 06 22
>0258b8	0c 00 09 46 20 46 43 20 20 20 59 4f 00 00 10 00
>0258c8	f0 00 27 3e f9 e4 06 22 04 00 01 52 00 00 14 00
>0258d8	f1 00 27 3e 06 e0 06 22 08 00 05 55 4b 4f 47 5a
>0258e8	00 00 14 00 f2 00 27 3e 3c e6 06 22 08 00 05 4e
>0258f8	4b 20 5a 59 00 00 14 00 f3 00 27 3e 16 e0 06 22
>025908	08 00 04 46 49 50 57 00 00 00 10 00 f4 00 27 3e
>025918	a5 e5 06 22 04 00 00 00 00 00 18 00 f5 00 27 3e
>025928	aa ed e3 e8 12 e0 06 22 08 00 04 43 4e 4e 47 00
>025938	00 00 12 00 f6 00 27 3e b7 ed 08 e0 06 22 04 00
>025948	00 00 00 00 12 00 f7 00 27 3e 03 e0 06 22 06 00
>025958	02 41 50 00 00 00 12 00 f8 00 27 3e ab ed 0c e0
>025968	06 22 04 00 01 42 00 00 18 00 f9 00 27 3e 0c e0
>025978	06 22 0c 00 09 42 48 4d 20 49 49 20 46 41 00 00
>025988	10 00 fa 00 27 3e 1f e5 06 22 04 00 01 4f 00 00
>025998	14 00 fb 00 27 3e f3 ec 1c e0 06 22 06 00 03 59
>0259a8	20 49 00 00 12 00 fc 00 27 3e 4c ed 17 e0 06 22
>0259b8	04 00 01 4a 00 00 16 00 fd 00 27 3e 56 ed 1d e0
>0259c8	06 22 08 00 05 42 48 4e 57 41 00 00 14 00 fe 00
>0259d8	27 3e d7 ed 88 e0 06 22 06 00 02 45 56 00 00 00
>0259e8	18 00 ff 00 27 3e 79 e5 06 22 0c 00 09 54 59 58
>0259f8	54 42 57 20 45 51 00 00 12 00 00 01 27 3e 85 ed
>025a08	fe e2 06 22 04 00 01 5a 00 00 14 00 01 01 27 3e
>025a18	10 e0 06 22 08 00 04 4a 53 4e 45 00 00 00 14 00
>025a28	02 01 27 3e 80 e5 06 22 08 00 05 41 20 4b 51 47
>025a38	00 00 1a 00 03 01 27 3e b2 ed 23 e0 06 22 0c 00
>025a48	09 46 5a 51 49 56 59 56 4a 4d 00 00 14 00 04 01
>025a58	27 3e 29 ee 01 e0 06 22 06 00 03 45 55 59 00 00
>025a68	16 00 05 01 27 3e 08 e0 06 22 0a 00 07 48 5a 4c
>025a78	4f 20 49 57 00 00 14 00 06 01 27 3e 5b e6 06 22
>025a88	08 00 05 5a 20 59 20 44 00 00 1a 00 07 01 27 3e
>025a98	2f ed 59 ee 0e e0 06 22 0a 00 06 46 20 45 4d 20
>025aa8	58 00 00 00 12 00 08 01 27 3e 13 e0 06 22 06 00
>025ab8	03 57 4f 4a 00 00 16 00 09 01 27 3e b9 ed 1b e3
>025ac8	06 22 08 00 05 52 59 5a 5a 55 00 00 1c 00 0a 01
>025ad8	27 3e c5 ec 10 e0 06 22 0e 00 0a 48 20 42 4e 43
>025ae8	42 41 59 50 44 00 00 00 18 00 0b 01 27 3e 08 ee
>025af8	15 e3 06 22 0a 00 06 44 51 4e 20 51 50 00 00 00
>025b08	12 00 0c 01 27 3e 8b ed 5f e5 06 22 04 00 01 49
>025b18	00 00 16 00 0d 01 27 3e c8 ec 69 e4 06 22 08 00
>025b28	04 43 50 50 51 00 00 00 1c 00 0e 01 27 3e 53 ed
>025b38	13 e0 06 22 0e 00 0b 49 59 20 41 20 20 47 20 46
>025b48	20 51 00 00 1a 00 0f 01 27 3e fd ec 81 e5 06 22
>025b58	0c 00 09 5a 47 48 20 4b 50 20 56 52 00 00 14 00
>025b68	10 01 27 3e 2e ee b8 e0 06 22 06 00 02 45 51 00
>025b78	00 00 16 00 11 01 27 3e 58 e6 06 22 0a 00 06 4e
>025b88	20 56 55 48 59 00 00 00 1c 00 12 01 27 3e a4 ed
>025b98	03 e2 06 22 0e 00 0a 49 41 4d 20 55 4a 41 51 51
>025ba8	4c 00 00 00 16 00 13 01 27 3e 36 e6 06 22 0a 00
>025bb8	06 43 51 48 44 57 4c 00 00 00 14 00 14 01 27 3e
>025bc8	07 ee 82 e5 06 22 06 00 02 57 59 00 00 00 12 00
>025bd8	15 01 27 3e 0b e0 06 22 06 00 03 49 43 57 00 00
>025be8	18 00 16 01 27 3e 0a ee a0 e0 06 22 0a 00 07 4c
>025bf8	46 44 53 20 54 54 00 00 14 00 17 01 27 3e d4 ec
>025c08	19 e0 06 22 06 00 02 52 4c 00 00 00 14 00 18 01
>025c18	27 3e a8 ed 03 e0 06 22 06 00 02 4f 4b 00 00 00
>025c28	7c 00 19 01 27 3e 09 d0 00 40 21 32 06 22 0b 24
>025c38	79 40 1f 32 27 3e 09 d0 01 40 21 32 06 22 0b 24
>025c48	04 10 ef 89 1f 32 27 3e 09 d0 02 40 21 32 06 22
>025c58	03 10 db b6 1f 32 27 3e 09 d0 03 40 21 32 06 22
>025c68	0b 24 01 10 55 48 1f 32 27 3e 09 d0 04 40 21 32
>025c78	06 22 0b 24 c5 58 1f 32 27 3e 09 d0 05 40 21 32
>025c88	06 22 0b 24 06 10 8b 45 1f 32 27 3e 09 d0 06 40
>025c98	21 32 06 22 0b 24 04 10 f2 51 00 00 88 00 1a 01
>025ca8	27 3e 4d dd 13 d0 00 40 21 32 06 22 01 10 6d 64
>025cb8	1f 32 27 3e 4d dd 13 d0 01 40 21 32 06 22 0b 24
>025cc8	01 10 61 73 1f 32 27 3e 4d dd 13 d0 02 40 21 32
>025cd8	06 22 02 10 31 5c 1f 32 27 3e 4d dd 13 d0 03 40
>025ce8	21 32 06 22 0b 24 04 10 d2 5c 1f 32 27 3e 4d dd
>025cf8	13 d0 04 40 21 32 06 22 a5 40 1f 32 27 3e 4d dd
>025d08	13 d0 05 40 21 32 06 22 0b 24 04 10 0a a5 1f 32
>025d18	27 3e 4d dd 13 d0 06 40 21 32 06 22 0b 24 01 10
>025d28	a5 71 00 00 68 00 1b 01 27 3e 6b de 87 d9 10 d0
>025d38	00 40 21 32 06 22 0b 24 05 10 dd 46 1f 32 27 3e
>025d48	6b de 87 d9 10 d0 01 40 21 32 06 22 af 40 1f 32
>025d58	27 3e 6b de 87 d9 10 d0 02 40 21 32 06 22 0b 24
>025d68	91 90 1f 32 27 3e 6b de 87 d9 10 d0 03 40 21 32
>025d78	06 22 02 10 1c 7f 1f 32 27 3e 6b de 87 d9 10 d0
>025d88	04 40 21 32 06 22 04 10 6c 4d 00 00 64 00 1c 01
>025d98	27 3e 11 d0 00 40 21 32 06 22 0b 24 26 76 1f 32
>025da8	27 3e 11 d0 01 40 21 32 06 22 0b 24 01 10 ea 4b
>025db8	1f 32 27 3e 11 d0 02 40 21 32 06 22 c3 40 1f 32
>025dc8	27 3e 11 d0 03 40 21 32 06 22 02 10 e5 96 1f 32
>025dd8	27 3e 11 d0 04 40 21 32 06 22 0b 24 05 40 1f 32
>025de8	27 3e 11 d0 05 40 21 32 06 22 05 10 f0 bb 00 00
>025df8	74 00 1d 01 27 3e f2 dc 21 d3 00 40 21 32 06 22
>025e08	05 10 41 61 1f 32 27 3e f2 dc 21 d3 01 40 21 32
>025e18	06 22 04 10 03 77 1f 32 27 3e f2 dc 21 d3 02 40
>025e28	21 32 06 22 0b 24 01 10 6f 66 1f 32 27 3e f2 dc
>025e38	21 d3 03 40 21 32 06 22 02 10 20 5b 1f 32 27 3e
>025e48	f2 dc 21 d3 04 40 21 32 06 22 0b 24 02 10 2a 76
>025e58	1f 32 27 3e f2 dc 21 d3 05 40 21 32 06 22 0b 24
>025e68	9f 40 00 00 82 00 1e 01 27 3e d3 dd b6 da 10 d0
>025e78	00 40 21 32 06 22 0b 24 64 40 1f 32 27 3e d3 dd
>025e88	b6 da 10 d0 01 40 21 32 06 22 0b 24 01 10 53 60
>025e98	1f 32 27 3e d3 dd b6 da 10 d0 02 40 21 32 06 22
>025ea8	0b 24 01 10 08 87 1f 32 27 3e d3 dd b6 da 10 d0
>025eb8	03 40 21 32 06 22 02 10 2a 71 1f 32 27 3e d3 dd
>025ec8	b6 da 10 d0 04 40 21 32 06 22 03 10 fd ad 1f 32
>025ed8	27 3e d3 dd b6 da 10 d0 05 40 21 32 06 22 0b 24
>025ee8	04 10 bf a5 00 00 76 00 1f 01 27 3e 18 d0 00 40
>025ef8	21 32 06 22 0b 24 05 10 bd 6e 1f 32 27 3e 18 d0
>025f08	01 40 21 32 06 22 03 10 27 82 1f 32 27 3e 18 d0
>025f18	02 40 21 32 06 22 b0 40 1f 32 27 3e 18 d0 03 40
>025f28	21 32 06 22 0b 24 05 10 14 7f 1f 32 27 3e 18 d0
>025f38	04 40 21 32 06 22 02 10 b5 9b 1f 32 27 3e 18 d0
>025f48	05 40 21 32 06 22 0b 24 94 40 1f 32 27 3e 18 d0
>025f58	06 40 21 32 06 22 03 10 52 41 00 00 88 00 20 01
>025f68	27 3e 02 de 0f d0 00 40 21 32 06 22 01 10 8a ae
>025f78	1f 32 27 3e 02 de 0f d0 01 40 21 32 06 22 0b 24
>025f88	05 bf 1f 32 27 3e 02 de 0f d0 02 40 21 32 06 22
>025f98	0b 24 04 10 ab 4f 1f 32 27 3e 02 de 0f d0 03 40
>025fa8	21 32 06 22 02 10 d7 77 1f 32 27 3e 02 de 0f d0
>025fb8	04 40 21 32 06 22 0b 24 03 10 38 8c 1f 32 27 3e
>025fc8	02 de 0f d0 05 40 21 32 06 22 02 10 aa 61 1f 32
>025fd8	27 3e 02 de 0f d0 06 40 21 32 06 22 0b 24 02 10
>025fe8	43 5c 00 00 6a 00 21 01 27 3e 04 d0 00 40 21 32
>025ff8	06 22 0b 24 4a 87 1f 32 27 3e 04 d0 01 40 21 32
>026008	06 22 0b 24 05 10 a7 77 1f 32 27 3e 04 d0 02 40
>026018	21 32 06 22 0b 24 11 79 1f 32 27 3e 04 d0 03 40
>026028	21 32 06 22 0b 24 01 10 d3 b8 1f 32 27 3e 04 d0
>026038	04 40 21 32 06 22 0b 24 04 10 0d bb 1f 32 27 3e
>026048	04 d0 05 40 21 32 06 22 02 10 d3 48 00 00 70 00
>026058	22 01 27 3e 20 d5 00 40 21 32 06 22 03 10 bb b5
>026068	1f 32 27 3e 20 d5 01 40 21 32 06 22 04 40 1f 32
>026078	27 3e 20 d5 02 40 21 32 06 22 0b 24 33 93 1f 32
>026088	27 3e 20 d5 03 40 21 32 06 22 03 10 ea 4b 1f 32
>026098	27 3e 20 d5 04 40 21 32 06 22 03 10 31 9a 1f 32
>0260a8	27 3e 20 d5 05 40 21 32 06 22 9b 5b 1f 32 27 3e
>0260b8	20 d5 06 40 21 32 06 22 04 10 8c 47 00 00 78 00
>0260c8	23 01 27 3e b6 fd a1 f3 00 40 21 32 06 22 06 00
>0260d8	03 57 4f 5a 1f 32 27 3e b6 fd a1 f3 01 40 21 32
>0260e8	06 22 08 00 05 49 4b 20 44 53 1f 32 27 3e b6 fd
>0260f8	a1 f3 02 40 21 32 06 22 0a 00 07 4a 45 48 41 52
>026108	53 4e 1f 32 27 3e b6 fd a1 f3 03 40 21 32 06 22
>026118	0a 00 06 56 42 52 45 52 4e 00 1f 32 27 3e b6 fd
>026128	a1 f3 04 40 21 32 06 22 0c 00 08 55 20 53 59 4c
>026138	4d 4d 4f 00 00 00 88 00 24 01 27 3e 04 fe 02 f0
>026148	00 40 21 32 06 22 0a 00 06 48 42 55 4d 45 55 00
>026158	1f 32 27 3e 04 fe 02 f0 01 40 21 32 06 22 0c 00
>026168	09 42 52 41 44 50 4d 4d 58 4d 1f 32 27 3e 04 fe
>026178	02 f0 02 40 21 32 06 22 04 00 01 42 1f 32 27 3e
>026188	04 fe 02 f0 03 40 21 32 06 22 08 00 05 4f 53 5a
>026198	53 42 1f 32 27 3e 04 fe 02 f0 04 40 21 32 06 22
>0261a8	04 00 01 51 1f 32 27 3e 04 fe 02 f0 05 40 21 32
>0261b8	06 22 0a 00 06 47 5a 4e 57 20 48 00 00 00 86 00
>0261c8	25 01 27 3e 6d f6 00 40 21 32 06 22 0c 00 08 54
>0261d8	20 4b 47 48 20 56 55 00 1f 32 27 3e 6d f6 01 40
>0261e8	21 32 06 22 08 00 04 4e 5a 59 51 00 1f 32 27 3e
>0261f8	6d f6 02 40 21 32 06 22 0a 00 06 48 20 45 5a 57
>026208	5a 00 1f 32 27 3e 6d f6 03 40 21 32 06 22 08 00
>026218	05 4e 4a 42 49 59 1f 32 27 3e 6d f6 04 40 21 32
>026228	06 22 08 00 04 51 53 42 4b 00 1f 32 27 3e 6d f6
>026238	05 40 21 32 06 22 0c 00 08 4d 49 20 45 44 20 4c
>026248	4a 00 00 00 74 00 26 01 27 3e ee f4 00 40 21 32
>026258	06 22 04 00 00 00 1f 32 27 3e ee f4 01 40 21 32
>026268	06 22 0c 00 09 42 56 54 20 51 47 59 4d 54 1f 32
>026278	27 3e ee f4 02 40 21 32 06 22 06 00 02 51 49 00
>026288	1f 32 27 3e ee f4 03 40 21 32 06 22 06 00 03 41
>026298	5a 4d 1f 32 27 3e ee f4 04 40 21 32 06 22 04 00
>0262a8	01 47 1f 32 27 3e ee f4 05 40 21 32 06 22 08 00
>0262b8	04 55 43 54 52 00 00 00 62 00 27 01 27 3e 0c f6
>0262c8	00 40 21 32 06 22 06 00 02 43 4a 00 1f 32 27 3e
>0262d8	0c f6 01 40 21 32 06 22 04 00 00 00 1f 32 27 3e
>0262e8	0c f6 02 40 21 32 06 22 06 00 02 44 53 00 1f 32
>0262f8	27 3e 0c f6 03 40 21 32 06 22 0e 00 0b 51 20 49
>026308	4b 45 5a 4f 47 55 59 59 1f 32 27 3e 0c f6 04 40
>026318	21 32 06 22 04 00 00 00 00 00 6c 00 28 01 27 3e
>026328	d4 fd 3d fc 11 f0 00 40 21 32 06 22 06 00 03 43
>026338	55 4d 1f 32 27 3e d4 fd 3d fc 11 f0 01 40 21 32
>026348	06 22 0a 00 07 58 4e 43 46 59 43 50 1f 32 27 3e
>026358	d4 fd 3d fc 11 f0 02 40 21 32 06 22 0a 00 06 4b
>026368	55 44 5a 56 49 00 1f 32 27 3e d4 fd 3d fc 11 f0
>026378	03 40 21 32 06 22 0e 00 0a 43 57 43 43 4d 52 43
>026388	58 49 51 00 00 00 8a 00 29 01 27 3e 7a f5 00 40
>026398	21 32 06 22 0e 00 0a 43 54 56 5a 54 20 57 4f 20
>0263a8	48 00 1f 32 27 3e 7a f5 01 40 21 32 06 22 0a 00
>0263b8	06 4d 48 59 4d 49 56 00 1f 32 27 3e 7a f5 02 40
>0263c8	21 32 06 22 0c 00 08 54 4c 4f 55 4f 52 51 48 00
>0263d8	1f 32 27 3e 7a f5 03 40 21 32 06 22 04 00 01 54
>0263e8	1f 32 27 3e 7a f5 04 40 21 32 06 22 0a 00 06 55
>0263f8	4b 54 48 55 48 00 1f 32 27 3e 7a f5 05 40 21 32
>026408	06 22 0c 00 08 48 4c 44 4c 20 42 42 47 00 00 00
>026418	56 00 2a 01 27 3e 62 f6 00 40 21 32 06 22 04 00
>026428	00 00 1f 32 27 3e 62 f6 01 40 21 32 06 22 0c 00
>026438	08 58 4d 54 49 41 41 56 4f 00 1f 32 27 3e 62 f6
>026448	02 40 21 32 06 22 04 00 01 5a 1f 32 27 3e 62 f6
>026458	03 40 21 32 06 22 0e 00 0a 57 41 50 51 50 4f 20
>026468	4d 55 45 00 00 00 48 00 2b 01 27 3e fd fd 1b f0
>026478	00 40 21 32 06 22 0a 00 06 46 50 48 20 4c 45 00
>026488	1f 32 27 3e fd fd 1b f0 01 40 21 32 06 22 06 00
>026498	03 4e 46 4b 1f 32 27 3e fd fd 1b f0 02 40 21 32
>0264a8	06 22 0a 00 07 51 20 52 58 48 52 50 00 00 6c 00
>0264b8	2c 01 27 3e 28 fe 2f f1 00 40 21 32 06 22 08 00
>0264c8	04 45 53 4d 55 00 1f 32 27 3e 28 fe 2f f1 01 40
>0264d8	21 32 06 22 08 00 05 46 53 20 20 56 1f 32 27 3e
>0264e8	28 fe 2f f1 02 40 21 32 06 22 04 00 00 00 1f 32
>0264f8	27 3e 28 fe 2f f1 03 40 21 32 06 22 0a 00 06 5a
>026508	59 20 4c 47 4b 00 1f 32 27 3e 28 fe 2f f1 04 40
>026518	21 32 06 22 04 00 00 00 00 00 00 00 ee ee ee ee
>026528	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1452 times (23232 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
