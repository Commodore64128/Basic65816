
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 12 09:24:14 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 0b 0c 01	jmp $010c0b			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	7d 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	22 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	32 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	42 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	86 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	ed 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	52 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	cf 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	b1 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	6c 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	6c 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	ed 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	f9 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	76 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	ed 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	fe 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	10 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	87 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	67 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	43 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	2d 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	be 07					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	13 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	7d 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	7d 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	7d 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	7d 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	7d 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	cf 09					.word Function_Let             & $FFFF ; token $3e1c "let"
>01003a	ec 0b					.word Function_ASSERT          & $FFFF ; token $3e1d "assert"
>01003c	44 0a					.word Function_END             & $FFFF ; token $3e1e "end"
>01003e	46 0a					.word Function_RUN             & $FFFF ; token $3e1f "run"
>010040	9e 0a					.word Function_CLEAR           & $FFFF ; token $3e20 "clear"
>010042	ea 0a					.word Function_Dim             & $FFFF ; token $3e21 "dim"
>010044	5e 0b					.word Function_COLLECT         & $FFFF ; token $3e22 "collect"
>010046	07 0c					.word Function_CLS             & $FFFF ; token $3e23 "cls"
>010048	7d 03					.word IllegalToken             & $FFFF ; token $3c24 "while"
>01004a	7d 03					.word IllegalToken             & $FFFF ; token $3a25 "wend"
.01004c					TokenText:
>01004c	02 26					 .text $02,"&"        ; token $2001
>01004e	02 7c					 .text $02,"|"        ; token $2002
>010050	02 5e					 .text $02,"^"        ; token $2003
>010052	12 3c					 .text $12,"<"        ; token $2204
>010054	12 3e					 .text $12,">"        ; token $2205
>010056	12 3d					 .text $12,"="        ; token $2206
>010058	13 3c 3d				 .text $13,"<="       ; token $2207
>01005b	13 3e 3d				 .text $13,">="       ; token $2208
>01005e	13 3c 3e				 .text $13,"<>"       ; token $2209
>010061	22 2b					 .text $22,"+"        ; token $240a
>010063	22 2d					 .text $22,"-"        ; token $240b
>010065	32 2a					 .text $32,"*"        ; token $260c
>010067	32 2f					 .text $32,"/"        ; token $260d
>010069	32 25					 .text $32,"%"        ; token $260e
>01006b	33 3e 3e				 .text $33,">>"       ; token $260f
>01006e	33 3c 3c				 .text $33,"<<"       ; token $2610
>010071	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010077	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01007c	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010081	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010086	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>01008b	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>010091	92 2c					 .text $92,","        ; token $3217
>010093	92 3b					 .text $92,";"        ; token $3218
>010095	92 3a					 .text $92,":"        ; token $3219
>010097	92 28					 .text $92,"("        ; token $321a
>010099	92 29					 .text $92,")"        ; token $321b
>01009b	f4 6c 65 74				 .text $f4,"let"      ; token $3e1c
>01009f	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1d
>0100a6	f4 65 6e 64				 .text $f4,"end"      ; token $3e1e
>0100aa	f4 72 75 6e				 .text $f4,"run"      ; token $3e1f
>0100ae	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e20
>0100b4	f4 64 69 6d				 .text $f4,"dim"      ; token $3e21
>0100b8	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e22
>0100c0	f4 63 6c 73				 .text $f4,"cls"      ; token $3e23
>0100c4	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c24
>0100ca	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a25
>0100cf	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$3e1c					letTokenID                       = $3e1c
=$3e1d					assertTokenID                    = $3e1d
=$3e1e					endTokenID                       = $3e1e
=$3e1f					runTokenID                       = $3e1f
=$3e20					clearTokenID                     = $3e20
=$3e21					dimTokenID                       = $3e21
=$3e22					collectTokenID                   = $3e22
=$3e23					clsTokenID                       = $3e23
=$3c24					whileTokenID                     = $3c24
=$3a25					wendTokenID                      = $3a25

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100d0					Evaluate:
.0100d0	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100d3	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100d6					EvaluateLevel:
.0100d6	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100d9	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100db	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100dd	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100e0	b0 79		bcs $01015b			bcs 	_ELVariable
.0100e2	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100e5	b0 16		bcs $0100fd			bcs 	_ELConstant
.0100e7	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100ea	90 7f		bcc $01016b			bcc 	_ELStringConstant
.0100ec	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100ef	90 03		bcc $0100f4			bcc 	_ELConstantShift
.0100f1	82 94 00	brl $010188			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100f4					_ELConstantShift:
.0100f4	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100f7	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100f9	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100fb	e6 06		inc $06				inc 	DCodePtr
.0100fd					_ELConstant:
.0100fd	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100ff	38		sec				sec  								; shift it in the range 0-32767
.010100	e9 00 40	sbc #$4000			sbc 	#$4000
.010103	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010104	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010106	6a		ror a				ror 	a 							; rotate that into the constant value
.010107	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010109	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01010b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01010d	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01010f	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010111	e6 06		inc $06				inc 	DCodePtr
.010113					_ELGotAtom:
.010113	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010115	a8		tay				tay 								; save in Y
.010116	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010119	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01011c	d0 35		bne $010153			bne 	_ELExit
.01011e	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010120	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010123	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010125	98		tya				tya 								; get the keyword token back
.010126	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010129	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01012b	90 26		bcc $010153			bcc 	_ELExit 					; precedence too low, then exit.
.01012d	5a		phy				phy 								; save the binary operator on the stack
.01012e	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010130	e6 06		inc $06				inc 	DCodePtr
.010132	18		clc				clc 								; try the next level up
.010133	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010136	e8		inx				inx 								; calculate the RHS at the next stack level.
.010137	e8		inx				inx
.010138	20 d6 00	jsr $0100d6			jsr 	EvaluateLevel
.01013b	ca		dex				dex
.01013c	ca		dex				dex
.01013d	7a		ply				ply 								; get operator token back into Y
.01013e					_ELExecuteY:
.01013e	98		tya				tya
.01013f	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010142	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010143	9b		txy				txy 								; save X in Y
.010144	aa		tax				tax 								; double keyword ID in X
.010145	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010149	bb		tyx				tyx 								; restore X.
.01014a	8f 4f 01 01	sta $01014f			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01014e					_ELCallRoutine:
.01014e	20 4e 01	jsr $01014e			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010151	80 c0		bra $010113			bra 	_ELGotAtom 					; go round operator level again.
.010153	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010155	0a		asl a				asl 	a
.010156	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010158	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01015a	60		rts				rts
.01015b					_ELVariable:
.01015b	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01015d	20 1c 02	jsr $01021c			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010160	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010162	94 10		sty $10,x			sty 	EXSValueH+0,x
.010164	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010166	80 ab		bra $010113			bra 	_ELGotAtom
.010168					_ELSyntax
.010168	82 23 02	brl $01038e			brl 	SyntaxError
.01016b					_ELStringConstant:
.01016b	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01016e	f0 f8		beq $010168			beq 	_ELSyntax
.010170	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010172	1a		inc a				inc 	a
.010173	1a		inc a				inc 	a
.010174	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010176	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010178	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01017a	18		clc				clc 								; add to string constant.
.01017b	65 06		adc $06				adc 	DCodePtr
.01017d	85 06		sta $06				sta 	DCodePtr
.01017f	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010181	09 00 80	ora #$8000			ora 	#$8000
.010184	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010186	80 8b		bra $010113			bra 	_ELGotAtom
.010188					_ELUnaryKeyword:
.010188	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01018a	a8		tay				tay 								; put the token in Y.
.01018b	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01018d	e6 06		inc $06				inc 	DCodePtr
.01018f	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010192	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010195	f0 a7		beq $01013e			beq 	_ELExecuteY					; go back and execute it
.010197	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.01019a	d0 11		bne $0101ad			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01019c	20 d3 01	jsr $0101d3			jsr 	EvaluateNext 				; evaluate the expression
.01019f	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101a2					_ELCopy:
.0101a2	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101a4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101a6	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101a8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101aa	82 66 ff	brl $010113			brl 	_ELGotAtom 					; and continue.
.0101ad					_ELUnaryOperator:
.0101ad	5a		phy				phy 								; save the operator on the stack.
.0101ae	e8		inx				inx 								; this is like evaluate next
.0101af	e8		inx				inx
.0101b0	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101b3	20 d6 00	jsr $0100d6			jsr 	EvaluateLevel
.0101b6	ca		dex				dex 								; unwind the stack.
.0101b7	ca		dex				dex
.0101b8	68		pla				pla 								; restore the unary operator.
.0101b9	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101bc	f0 03		beq $0101c1			beq 	_ELMinus
.0101be	4c 8e 03	jmp $01038e			jmp 	SyntaxError
.0101c1					_ELMinus:
.0101c1	38		sec				sec 								; do the negation calculation.
.0101c2	a9 00 00	lda #$0000			lda 	#0
.0101c5	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101c7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101c9	a9 00 00	lda #$0000			lda 	#0
.0101cc	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101ce	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101d0	82 40 ff	brl $010113			brl 	_ELGotAtom					; and continue.
.0101d3					EvaluateNext:
.0101d3	e8		inx				inx
.0101d4	e8		inx				inx
.0101d5	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101d8	20 d6 00	jsr $0100d6			jsr 	EvaluateLevel
.0101db	ca		dex				dex
.0101dc	ca		dex				dex
.0101dd	60		rts				rts
.0101de					EvaluateInteger:
.0101de	20 d0 00	jsr $0100d0			jsr 	Evaluate
.0101e1	b0 01		bcs $0101e4			bcs 	EIType
.0101e3	60		rts				rts
.0101e4					EIType:
.0101e4	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0101e7	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101ef	78 70 65 63 74 65 64 00
.0101f7					EvaluateNextInteger:
.0101f7	20 d3 01	jsr $0101d3			jsr 	EvaluateNext
.0101fa	b0 e8		bcs $0101e4			bcs 	EIType
.0101fc	60		rts				rts
.0101fd					EvaluateString:
.0101fd	20 d0 00	jsr $0100d0			jsr 	Evaluate
.010200	90 01		bcc $010203			bcc 	ESType
.010202	60		rts				rts
.010203					ESType:
.010203	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010206	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01020e	78 70 65 63 74 65 64 00
.010216					EvaluateNextString:
.010216	20 d3 01	jsr $0101d3			jsr 	EvaluateNext
.010219	90 e8		bcc $010203			bcc 	ESType
.01021b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01021c					VariableAccessExpression:
.01021c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01021e	48		pha				pha
.01021f	20 5d 02	jsr $01025d			jsr 	VariableFind 				; try to find the variables
.010222	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010224	90 23		bcc $010249			bcc 	_VANError
.010226	68		pla				pla 								; get and save that first token
.010227	48		pha				pha
.010228	a8		tay				tay 								; put first token in Y.
.010229	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01022c	f0 07		beq $010235			beq 	_VANNotArray
.01022e	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010230	20 d4 02	jsr $0102d4			jsr 	VariableSubscript			; index calculation
.010233	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010235					_VANNotArray:
.010235	68		pla				pla 								; get the token back.
.010236	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010239	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01023c	38		sec				sec 								; set up return string.
.01023d	f0 06		beq $010245			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01023f	18		clc				clc 								; returning a number, read high data word
.010240	a0 02 00	ldy #$0002			ldy 	#2
.010243	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010245					_VANLoadLower:
.010245	a8		tay				tay 								; put A into Y (this is the high byte)
.010246	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010248	60		rts				rts
.010249					_VANError:
.010249	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>01024c	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010254	20 75 6e 6b 6e 6f 77 6e 00
.01025d					VariableFind:
.01025d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01025f	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010262	90 5c		bcc $0102c0			bcc 	_VFError
.010264	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010267	b0 11		bcs $01027a			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010269	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01026c	3a		dec a				dec 	a 							; now 0-25
.01026d	0a		asl a				asl 	a 							; x 4 and clear carry
.01026e	0a		asl a				asl 	a
.01026f	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010272	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010274	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010276	e6 06		inc $06				inc 	DCodePtr
.010278	38		sec				sec 								; return with carry set.
.010279	60		rts				rts
.01027a					_VFSlowVariable:
.01027a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01027c	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.01027f	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010280	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010281	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010284	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010286	85 08		sta $08				sta 	DTemp1
.010288	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01028a	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01028d	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01028e	65 08		adc $08				adc 	DTemp1
.010290	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010292	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010294					_VFNext:
.010294	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010296	f0 26		beq $0102be			beq 	_VFFail 					; if zero, then it's the end of the list.
.010298	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01029a	a8		tay				tay 								; read the address of the name at $0002,y
.01029b	b9 02 00	lda $0002,y			lda 	$0002,y
.01029e	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102a0	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102a3					_VFCompare:
.0102a3	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102a5	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102a7	d0 eb		bne $010294			bne 	_VFNext 					; if not, go to the next one.
.0102a9	c8		iny				iny 								; advance token pointer
.0102aa	c8		iny				iny
.0102ab	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102ae	d0 f3		bne $0102a3			bne 	_VFCompare
.0102b0	98		tya				tya 								; this is the length of the word.
.0102b1	18		clc				clc 								; so we add it to the code pointer
.0102b2	65 06		adc $06				adc 	DCodePtr
.0102b4	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102b6	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102b8	18		clc				clc 								; four on is the actual data
.0102b9	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102bc	38		sec				sec 								; return with CS indicating success
.0102bd	60		rts				rts
.0102be					_VFFail:
.0102be	18		clc				clc
.0102bf	60		rts				rts
.0102c0					_VFError:
.0102c0	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0102c3	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102cb	76 61 72 69 61 62 6c 65 00
.0102d4					VariableSubscript:
.0102d4	5a		phy				phy 								; save token on stack
.0102d5	48		pha				pha		 							; save variable address on stack.
.0102d6	20 f7 01	jsr $0101f7			jsr		EvaluateNextInteger 		; get the subscript
.0102d9	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; skip right bracket.
.0102dc	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102df	d0 1d		bne $0102fe			bne 	_VANSubscript
.0102e1	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102e3	f0 02		beq $0102e7			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102e5	b0 17		bcs $0102fe			bcs 	_VANSubscript
.0102e7					_VANSubOkay:
.0102e7	0a		asl a				asl 	a 							; double lsword
.0102e8	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102ea	68		pla				pla 								; restore DVariablePtr
.0102eb	85 1e		sta $1e				sta 	DVariablePtr
.0102ed	68		pla				pla 								; get and save that first token
.0102ee	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102f1	d0 02		bne $0102f5			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102f3	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102f5					_VANNotString
.0102f5	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102f7	18		clc				clc 								; add 2 to get it past the high subscript
.0102f8	69 02 00	adc #$0002			adc 	#2
.0102fb	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102fd	60		rts				rts
.0102fe					_VANSubscript:
.0102fe	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010301	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010309	79 20 53 75 62 73 63 72 69 70 74 00
.010315					VariableCreate:
.010315	48		pha				pha 								; save count.
.010316	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010319	29 00 20	and #$2000			and 	#IDTypeMask
.01031c	f0 06		beq $010324			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01031e	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010321	18		clc				clc
.010322	65 02		adc $02				adc 	DBaseAddress
.010324					_VCIsInteger:
.010324	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010326	68		pla				pla 								; restore count
.010327	48		pha				pha
.010328	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010329	0a		asl a				asl 	a 							; 2 x # items.
.01032a					_VCNotSingle:
.01032a	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01032c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01032f	48		pha				pha 								; save on stack
.010330	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010333	d0 02		bne $010337			bne 	_VCString
.010335	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010337					_VCString:
.010337	68		pla				pla 								; restore first token.
.010338	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01033b	f0 04		beq $010341			beq 	_VCNotArray
.01033d	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01033f	e6 08		inc $08				inc 	DTemp1
.010341					_VCNotArray:
.010341	5a		phy				phy 								; save address of token on stack.
.010342	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010345	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010347	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010349	18		clc				clc 								; add 4 for link and name.
.01034a	69 04 00	adc #$0004			adc 	#4
.01034d	65 08		adc $08				adc 	DTemp1 						; add memory required
.01034f	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010351	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010353					_VCErase:
.010353	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010355	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010358	c8		iny				iny
.010359	c8		iny				iny
.01035a	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01035c	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.01035e	d0 f3		bne $010353			bne 	_VCErase
.010360	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010362	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010364	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010367	68		pla				pla 								; restore the token address
.010368	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01036b	68		pla				pla 								; restore count and store.
.01036c	99 04 00	sta $0004,y			sta 	$0004,y
.01036f					_VCNotArray2:
.01036f	98		tya				tya 								; update the head link
.010370	92 20		sta ($20)			sta 	(DHashTablePtr)
.010372	18		clc				clc 								; advance pointer to the data bit.
.010373	69 04 00	adc #$0004			adc 	#4
.010376	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010377					ErrorHandler:
.010377	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010379	fa		plx				plx 								; address of error message -1
.01037a	ea		nop				nop
.01037b	80 fe		bra $01037b	_EH1:	bra 	_EH1
.01037d					IllegalToken:
.01037d	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010380	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010388	54 6f 6b 65 6e 00
.01038e					SyntaxError:
.01038e	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010391	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010399	72 72 6f 72 00
.01039e					ExpectToken:
.01039e	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103a0	d0 05		bne $0103a7			bne 	_CTKError					; error if not
.0103a2	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103a4	e6 06		inc $06				inc 	DCodePtr
.0103a6	60		rts				rts
.0103a7					_CTKError:
.0103a7	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0103aa	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103b2	74 6f 6b 65 6e 00
.0103b8					ExpectRightBracket:
.0103b8	48		pha				pha
.0103b9	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.0103bc	20 9e 03	jsr $01039e			jsr 	ExpectToken
.0103bf	68		pla				pla
.0103c0	60		rts				rts
.0103c1					ExpectComma:
.0103c1	48		pha				pha
.0103c2	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103c5	20 9e 03	jsr $01039e			jsr 	ExpectToken
.0103c8	68		pla				pla
.0103c9	60		rts				rts
.0103ca					CheckBothNumeric:
.0103ca	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103cc	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103ce	30 01		bmi $0103d1			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103d0	60		rts				rts
.0103d1					_CBNFail:
.0103d1	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0103d4	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103dc	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103ea					ResetTypeInteger:
.0103ea	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103ec	29 ff 7f	and #$7fff			and 	#$7FFF
.0103ef	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103f1	60		rts				rts
.0103f2					ResetTypeString:
.0103f2	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103f4	09 00 80	ora #$8000			ora 	#$8000
.0103f7	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103f9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103fa					StringTempAllocate:
.0103fa	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103fd	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010400	18		clc				clc 								; this adds one, for the length.
.010401	65 16		adc $16				adc 	DTempStringPointer
.010403	85 16		sta $16				sta 	DTempStringPointer
.010405	48		pha				pha
.010406	a9 00 00	lda #$0000			lda 	#$0000
.010409	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01040b	92 16		sta ($16)			sta		(DTempStringPointer)
.01040d	c2 20		rep #$20			rep 	#$20
.01040f	68		pla				pla
.010410	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010412	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010414	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010416	60		rts				rts
.010417					StringCreateCopy:
.010417	a8		tay				tay 								; put pointer to string in Y
.010418	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01041b	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01041e	f0 17		beq $010437			beq 	_SCCExit 					; do nothing if length zero.
.010420	da		phx				phx 								; save X and put the character count in X
.010421	aa		tax				tax
.010422					_SCCCopy:
.010422	c8		iny				iny 								; advance and read (first time skips length)
.010423	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010425	b9 00 00	lda $0000,y			lda 	$0000,y
.010428	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01042a	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01042c	1a		inc a				inc 	a
.01042d	92 18		sta ($18)			sta 	(DStartTempString)
.01042f	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010431	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010433	ca		dex				dex 								; do X times
.010434	d0 ec		bne $010422			bne 	_SCCCopy
.010436	fa		plx				plx
.010437					_SCCExit:
.010437	60		rts				rts
.010438					StringMakeConcrete:
.010438	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01043b	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01043d	90 0f		bcc $01044e			bcc 	_SMCExit
.01043f	85 08		sta $08				sta 	DTemp1 						; source
.010441	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010443	29 ff 00	and #$00ff			and 	#$00FF
.010446	d0 07		bne $01044f			bne 	_SMCNonZero 				; if not "" skip.
.010448	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01044b	18		clc				clc
.01044c	65 02		adc $02				adc 	DBaseAddress
.01044e					_SMCExit:
.01044e	60		rts				rts
.01044f					_SMCNonZero:
.01044f	48		pha				pha 								; save on stack.
.010450	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010453	18		clc				clc
.010454	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010457	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010459	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01045b	85 0c		sta $0c				sta 	DTemp2 						; target
.01045d	7a		ply				ply 								; get length copy from here until Y goes -ve
.01045e	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010460					_SMCLoop:
.010460	b1 08		lda ($08),y			lda 	(DTemp1),y
.010462	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010464	88		dey				dey
.010465	10 f9		bpl $010460			bpl 	_SMCLoop
.010467	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010469	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01046b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01046c					Binary_Add:
.01046c	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01046e	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010470	30 12		bmi $010484		bmi 	_BATypeError
.010472	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010474	30 3f		bmi $0104b5		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010476	18		clc			clc
.010477	b5 00		lda $00,x		lda		EXSValueL+0,x
.010479	75 02		adc $02,x		adc 	EXSValueL+2,x
.01047b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01047d	b5 10		lda $10,x		lda		EXSValueH+0,x
.01047f	75 12		adc $12,x		adc 	EXSValueH+2,x
.010481	95 10		sta $10,x		sta 	EXSValueH+0,x
.010483	60		rts			rts
.010484					_BATypeError:
.010484	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010487	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01048f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01049f	65 73 00
.0104a2					_BALengthError:
.0104a2	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0104a5	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104ad	6f 6f 20 6c 6f 6e 67 00
.0104b5					_BAConcatenateString:
.0104b5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0104b7	85 08		sta $08			sta 	DTemp1
.0104b9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104bb	85 0c		sta $0c			sta 	DTemp2
.0104bd	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0104bf	18		clc			clc 										; work out the total length
.0104c0	b2 08		lda ($08)		lda 	(DTemp1)
.0104c2	72 0c		adc ($0c)		adc 	(DTemp2)
.0104c4	b0 14		bcs $0104da		bcs 	_BAConcatLengthError 				; string is too long.
.0104c6	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0104c8	20 fa 03	jsr $0103fa		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0104cb	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0104cd	74 10		stz $10,x		stz 	EXSValueH+0,x
.0104cf	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0104d1	20 17 04	jsr $010417		jsr 	StringCreateCopy
.0104d4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0104d6	20 17 04	jsr $010417		jsr 	StringCreateCopy
.0104d9	60		rts			rts
.0104da					_BAConcatLengthError:
.0104da	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0104dd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104e5	6f 6f 20 6c 6f 6e 67 00
.0104ed					Binary_Subtract:
.0104ed	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.0104f0	38		sec			sec
.0104f1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104f3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104f5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104f7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104f9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104fb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104fd	60		rts			rts
.0104fe					Binary_ShiftRight:
.0104fe	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010501	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010503	29 3f 00	and #$003f		and 	#63
.010506	f0 07		beq $01050f		beq		_Binary_SRExit
.010508					_Binary_SRLoop:
.010508	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01050a	76 00		ror $00,x		ror 	EXSValueL+0,x
.01050c	3a		dec a			dec 	a
.01050d	d0 f9		bne $010508		bne 	_Binary_SRLoop
.01050f					_Binary_SRExit:
.01050f	60		rts			rts
.010510					Binary_ShiftLeft:
.010510	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010513	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010515	29 3f 00	and #$003f		and 	#63
.010518	f0 07		beq $010521		beq		_Binary_SLExit
.01051a					_Binary_SLLoop:
.01051a	16 00		asl $00,x		asl 	EXSValueL+0,x
.01051c	36 10		rol $10,x		rol 	EXSValueH+0,x
.01051e	3a		dec a			dec 	a
.01051f	d0 f9		bne $01051a		bne 	_Binary_SLLoop
.010521					_Binary_SLExit:
.010521	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010522					Binary_And:
.010522	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010525	b5 00		lda $00,x		lda		EXSValueL+0,x
.010527	35 02		and $02,x		and 	EXSValueL+2,x
.010529	95 00		sta $00,x		sta 	EXSValueL+0,x
.01052b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01052d	35 12		and $12,x		and 	EXSValueH+2,x
.01052f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010531	60		rts			rts
.010532					Binary_Or:
.010532	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010535	b5 00		lda $00,x		lda		EXSValueL+0,x
.010537	15 02		ora $02,x		ora 	EXSValueL+2,x
.010539	95 00		sta $00,x		sta 	EXSValueL+0,x
.01053b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01053d	15 12		ora $12,x		ora 	EXSValueH+2,x
.01053f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010541	60		rts			rts
.010542					Binary_Xor:
.010542	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010545	b5 00		lda $00,x		lda		EXSValueL+0,x
.010547	55 02		eor $02,x		eor 	EXSValueL+2,x
.010549	95 00		sta $00,x		sta 	EXSValueL+0,x
.01054b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01054d	55 12		eor $12,x		eor 	EXSValueH+2,x
.01054f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010551	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010552					Binary_Equals:
.010552	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010555	b0 0e		bcs $010565		bcs 	_BEString
.010557	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010559	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01055b	d0 4f		bne $0105ac		bne 	Compare_Fail
.01055d	b5 10		lda $10,x		lda 	EXSValueH,x
.01055f	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010561	d0 49		bne $0105ac		bne 	Compare_Fail
.010563	80 3f		bra $0105a4		bra 	Compare_Succeed
.010565					_BEString:
.010565	09 00 00	ora #$0000		ora 	#$0000
.010568	f0 3a		beq $0105a4		beq 	Compare_Succeed
.01056a	80 40		bra $0105ac		bra 	Compare_Fail
.01056c					Binary_NotEquals:
.01056c	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01056f	b0 0e		bcs $01057f		bcs 	_BNEString
.010571	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010573	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010575	d0 2d		bne $0105a4		bne 	Compare_Succeed
.010577	b5 10		lda $10,x		lda 	EXSValueH,x
.010579	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01057b	d0 27		bne $0105a4		bne 	Compare_Succeed
.01057d	80 2d		bra $0105ac		bra 	Compare_Fail
.01057f					_BNEString:
.01057f	09 00 00	ora #$0000		ora 	#$0000
.010582	d0 20		bne $0105a4		bne 	Compare_Succeed
.010584	80 26		bra $0105ac		bra 	Compare_Fail
.010586					Binary_Less:
.010586	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010589	b0 12		bcs $01059d		bcs 	_BLString
.01058b	38		sec			sec
.01058c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01058e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010590	b5 10		lda $10,x		lda 	EXSValueH,x
.010592	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010594	50 03		bvc $010599		bvc 	*+5
.010596	49 00 80	eor #$8000		eor 	#$8000
.010599	30 09		bmi $0105a4		bmi 	Compare_Succeed
.01059b	80 0f		bra $0105ac		bra 	Compare_Fail
.01059d					_BLString:
.01059d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0105a0	f0 02		beq $0105a4		beq 	Compare_Succeed
.0105a2	80 08		bra $0105ac		bra 	Compare_Fail
.0105a4					Compare_Succeed:
.0105a4	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0105a7	95 00		sta $00,x		sta 	EXSValueL,x
.0105a9	95 10		sta $10,x		sta 	EXSValueH,x
.0105ab	60		rts			rts
.0105ac					Compare_Fail:
.0105ac	74 00		stz $00,x		stz 	EXSValueL,x
.0105ae	74 10		stz $10,x		stz 	EXSValueH,x
.0105b0	60		rts			rts
.0105b1					Binary_GreaterEqual:
.0105b1	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105b4	b0 12		bcs $0105c8		bcs 	_BGEString
.0105b6	38		sec			sec
.0105b7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0105b9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105bb	b5 10		lda $10,x		lda 	EXSValueH,x
.0105bd	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105bf	50 03		bvc $0105c4		bvc 	*+5
.0105c1	49 00 80	eor #$8000		eor 	#$8000
.0105c4	10 de		bpl $0105a4		bpl 	Compare_Succeed
.0105c6	80 e4		bra $0105ac		bra 	Compare_Fail
.0105c8					_BGEString:
.0105c8	09 00 00	ora #$0000		ora 	#$0000
.0105cb	10 d7		bpl $0105a4		bpl 	Compare_Succeed
.0105cd	80 dd		bra $0105ac		bra 	Compare_Fail
.0105cf					Binary_LessEqual:
.0105cf	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d2	b0 12		bcs $0105e6		bcs 	_BLEString
.0105d4	18		clc			clc 									; numeric <= signed
.0105d5	b5 00		lda $00,x		lda 	EXSValueL,x
.0105d7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105d9	b5 10		lda $10,x		lda 	EXSValueH,x
.0105db	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105dd	50 03		bvc $0105e2		bvc 	*+5
.0105df	49 00 80	eor #$8000		eor 	#$8000
.0105e2	30 c0		bmi $0105a4		bmi 	Compare_Succeed
.0105e4	80 c6		bra $0105ac		bra 	Compare_Fail
.0105e6					_BLEString:
.0105e6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105e9	d0 b9		bne $0105a4		bne 	Compare_Succeed
.0105eb	80 bf		bra $0105ac		bra 	Compare_Fail
.0105ed					Binary_Greater:
.0105ed	20 0b 06	jsr $01060b		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105f0	b0 12		bcs $010604		bcs 	_BGString
.0105f2	18		clc			clc 									; numeric > signed
.0105f3	b5 00		lda $00,x		lda 	EXSValueL,x
.0105f5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105f7	b5 10		lda $10,x		lda 	EXSValueH,x
.0105f9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105fb	50 03		bvc $010600		bvc 	*+5
.0105fd	49 00 80	eor #$8000		eor 	#$8000
.010600	10 a2		bpl $0105a4		bpl 	Compare_Succeed
.010602	80 a8		bra $0105ac		bra 	Compare_Fail
.010604					_BGString:
.010604	c9 01 00	cmp #$0001		cmp 	#$0001
.010607	f0 9b		beq $0105a4		beq 	Compare_Succeed
.010609	80 a1		bra $0105ac		bra 	Compare_Fail
.01060b					CompareTypeCheck:
.01060b	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.01060d	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01060f	30 06		bmi $010617		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010611	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010613	30 1c		bmi $010631		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010615	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010616	60		rts			rts
.010617					_CTCFail:
.010617	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>01061a	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010622	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010631					_CTCStringCompare:
.010631	20 ea 03	jsr $0103ea		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010634	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010636	85 08		sta $08			sta 	DTemp1
.010638	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01063a	85 0c		sta $0c			sta 	DTemp2
.01063c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01063f	a8		tay			tay
.010640	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010642	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010644	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010646	90 02		bcc $01064a		bcc 	_CTCSmallest
.010648	b2 0c		lda ($0c)		lda 	(DTemp2)
.01064a					_CTCSmallest:
.01064a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01064c					_CTCCompare:
.01064c	c8		iny			iny 									; look at next character (done first, first char is size)
.01064d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01064f	30 16		bmi $010667		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010651	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010653	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010655	f0 f5		beq $01064c		beq 	_CTCCompare 					; if zero, try the next character.
.010657	b0 07		bcs $010660		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010659					_CTCLess:
.010659	c2 20		rep #$20		rep 	#$20
.01065b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01065e	80 14		bra $010674		bra 	_CTCExit
.010660					_CTCGreater:
.010660	c2 20		rep #$20		rep 	#$20
.010662	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010665	80 0d		bra $010674		bra 	_CTCExit
.010667					_CTCEqualSoFar:
.010667	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010669	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01066b	90 ec		bcc $010659		bcc 	_CTCLess
.01066d	d0 f1		bne $010660		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01066f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010671	a9 00 00	lda #$0000		lda 	#$0000
.010674					_CTCExit:
.010674	38		sec			sec 									; return with CS indicating string comparison.
.010675	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010676					Binary_Divide:
.010676	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.010679	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01067b	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01067d	d0 14		bne $010693		bne 	_BinaryDivide_Ok
.01067f	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010682	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01068a	20 62 79 20 7a 65 72 6f 00
.010693					_BinaryDivide_Ok:
.010693	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010695	64 0a		stz $0a			stz 	DTemp1+2
.010697	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010699	5a		phy			phy 										; save Y (bit counter)
.01069a	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01069c	10 07		bpl $0106a5		bpl 	_BinaryDivide_RightDone
.01069e	e8		inx			inx
.01069f	e8		inx			inx
.0106a0	20 db 06	jsr $0106db		jsr 	Binary_DivNegate
.0106a3	ca		dex			dex
.0106a4	ca		dex			dex
.0106a5					_BinaryDivide_RightDone:
.0106a5	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0106a7	10 03		bpl $0106ac		bpl 	_BinaryDivide_LeftDone
.0106a9	20 db 06	jsr $0106db		jsr 	Binary_DivNegate
.0106ac					_BinaryDivide_LeftDone:
.0106ac	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0106af					_BinaryDivide_Loop:
.0106af	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0106b1	36 10		rol $10,x		rol 	EXSValueH+0,x
.0106b3	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0106b5	26 0a		rol $0a			rol 	DTemp1+2
.0106b7	38		sec			sec											; calculate A-M
.0106b8	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0106ba	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106bc	85 0c		sta $0c			sta 	DTemp2
.0106be	a5 0a		lda $0a			lda 	DTemp1+2
.0106c0	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106c2	90 08		bcc $0106cc		bcc 	_Binary_NoSubract 					; if A < M skip this
.0106c4	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0106c6	a5 0c		lda $0c			lda 	DTemp2
.0106c8	85 08		sta $08			sta 	DTemp1+0
.0106ca	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0106cc					_Binary_NoSubract:
.0106cc	88		dey			dey 										; do it 32 times.
.0106cd	d0 e0		bne $0106af		bne 	_BinaryDivide_Loop
.0106cf					_BinaryDivide_Exit:
.0106cf	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0106d1	29 01 00	and #$0001		and 	#1
.0106d4	f0 03		beq $0106d9		beq 	_BinaryDivide_Exit2
.0106d6	20 db 06	jsr $0106db		jsr 	Binary_DivNegate
.0106d9					_BinaryDivide_Exit2:
.0106d9	7a		ply			ply 										; restore Y
.0106da	60		rts			rts
.0106db					Binary_DivNegate:
.0106db	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106dd	38		sec			sec 										; negate the value at stack X.
.0106de	a9 00 00	lda #$0000		lda 	#$0000
.0106e1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106e3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106e5	a9 00 00	lda #$0000		lda 	#$0000
.0106e8	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106ea	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106ec	60		rts			rts
.0106ed					Binary_Modulus:
.0106ed	20 76 06	jsr $010676		jsr 	Binary_Divide 						; do the divide
.0106f0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106f2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106f4	a5 0a		lda $0a			lda 	DTemp1+2
.0106f6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106f8	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106f9					Binary_Multiply:
.0106f9	20 ca 03	jsr $0103ca		jsr 	CheckBothNumeric 					; check both values are numeric
.0106fc	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106fe	85 08		sta $08			sta 	DTemp1
.010700	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010702	85 0a		sta $0a			sta		DTemp1+2
.010704	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010706	74 10		stz $10,x		stz 	EXSValueH+0,x
.010708					_BinaryMultiply_Loop:
.010708	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01070a	05 0a		ora $0a			ora 	DTemp1+2
.01070c	f0 1e		beq $01072c		beq 	_BinaryMultiply_Exit
.01070e	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010710	29 01 00	and #$0001		and 	#1
.010713	f0 0d		beq $010722		beq 	_BinaryMultiply_NoAdd
.010715	18		clc			clc 										; add multiplicand to result.
.010716	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010718	75 02		adc $02,x		adc 	EXSValueL+2,x
.01071a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01071c	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01071e	75 12		adc $12,x		adc 	EXSValueH+2,x
.010720	95 10		sta $10,x		sta 	EXSValueH+0,x
.010722					_BinaryMultiply_NoAdd:
.010722	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010724	66 08		ror $08			ror 	DTemp1
.010726	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010728	36 12		rol $12,x		rol 	EXSValueH+2,x
.01072a	80 dc		bra $010708		bra 	_BinaryMultiply_Loop 				; go round again.
.01072c					_BinaryMultiply_Exit:
.01072c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.01072d					Function_Len:
.01072d	20 ea 03	jsr $0103ea			jsr 	ResetTypeInteger 			; returns an integer
.010730	20 16 02	jsr $010216			jsr 	EvaluateNextString 			; get the value you are absoluting
.010733	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; check )
.010736	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010738	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01073b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01073e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010740	74 10		stz $10,x			stz 	EXSValueH+0,x
.010742	60		rts				rts
.010743					Function_Abs:
.010743	20 ea 03	jsr $0103ea			jsr 	ResetTypeInteger 			; returns an integer
.010746	20 f7 01	jsr $0101f7			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010749	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; check )
.01074c	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01074e	30 07		bmi $010757			bmi 	_FAbsNegative 				; negate it if negative
.010750	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010752	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010754	95 00		sta $00,x			sta 	EXSValueL+0,x
.010756	60		rts				rts
.010757					_FAbsNegative:
.010757	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010758	a9 00 00	lda #$0000			lda 	#0
.01075b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01075d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01075f	a9 00 00	lda #$0000			lda 	#0
.010762	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010764	95 10		sta $10,x			sta 	EXSValueH+0,x
.010766	60		rts				rts
.010767					Function_Sgn:
.010767	20 ea 03	jsr $0103ea			jsr 	ResetTypeInteger 			; returns integer
.01076a	20 f7 01	jsr $0101f7			jsr 	EvaluateNextInteger 		; get an integer
.01076d	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; check )
.010770	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010772	74 10		stz $10,x			stz 	EXSValueH+0,x
.010774	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010776	30 07		bmi $01077f			bmi 	_FSgnNegative 				; set to -1 if signed
.010778	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01077a	f0 02		beq $01077e			beq 	_FSgnExit
.01077c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01077e					_FSgnExit:
.01077e	60		rts				rts
.01077f					_FSgnNegative:
.01077f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010782	95 00		sta $00,x			sta 	EXSValueL+0,x
.010784	95 10		sta $10,x			sta 	EXSValueH+0,x
.010786	60		rts				rts
.010787					Function_Random:
.010787	20 ea 03	jsr $0103ea			jsr 	ResetTypeInteger
.01078a	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01078c	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.01078e	d0 0a		bne $01079a			bne 	_Rnd_NotZero
.010790	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010793	85 10		sta $10				sta 	DRandom
.010795	a9 ea 00	lda #$00ea			lda 	#$EA
.010798	85 12		sta $12				sta 	DRandom+2
.01079a					_Rnd_NotZero:
.01079a	20 a5 07	jsr $0107a5			jsr 	_Rnd_Process 				; call randomiser twice
.01079d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01079f	20 a5 07	jsr $0107a5			jsr 	_Rnd_Process
.0107a2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107a4	60		rts				rts
.0107a5					_Rnd_Process:
.0107a5	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0107a7	26 12		rol $12				rol 	DRandom+2
.0107a9	90 0e		bcc $0107b9			bcc 	_Rnd_Exit
.0107ab	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0107ad	49 54 d4	eor #$d454			eor 	#$D454
.0107b0	85 10		sta $10				sta 	DRandom
.0107b2	a5 12		lda $12				lda 	DRandom+2
.0107b4	49 d5 55	eor #$55d5			eor 	#$55D5
.0107b7	85 12		sta $12				sta 	DRandom+2
.0107b9					_Rnd_Exit:
.0107b9	a5 10		lda $10				lda 	DRandom
.0107bb	45 12		eor $12				eor 	DRandom+2
.0107bd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0107be					Function_VAL:
.0107be	20 ea 03	jsr $0103ea			jsr 	ResetTypeInteger 			; returns an integer
.0107c1	20 16 02	jsr $010216			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107c4	48		pha				pha 								; put string address on stack.
.0107c5	20 d5 07	jsr $0107d5			jsr 	VALGetBase 					; process , base (shared with STR$())
.0107c8	7a		ply				ply 								; get string address back
.0107c9	da		phx				phx 								; save X on stack
.0107ca	aa		tax				tax 								; base in X
.0107cb	98		tya				tya 								; address in A
.0107cc	20 0f 08	jsr $01080f			jsr 	StringToInteger
.0107cf	fa		plx				plx 								; restore X
.0107d0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107d2	94 10		sty $10,x			sty 	EXSValueH+0,x
.0107d4	60		rts				rts
.0107d5					VALGetBase:
.0107d5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0107d7	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.0107da	f0 07		beq $0107e3			beq 	_VGBAlternate
.0107dc	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket			; expect ), and return 10.
.0107df	a9 0a 00	lda #$000a			lda 	#10
.0107e2	60		rts				rts
.0107e3					_VGBAlternate:
.0107e3	20 c1 03	jsr $0103c1			jsr 	ExpectComma 				; skip comma.
.0107e6	20 f7 01	jsr $0101f7			jsr 	EvaluateNextInteger 		; get base
.0107e9	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0107ec	d0 0e		bne $0107fc			bne 	_VGBBadBase
.0107ee	c9 02 00	cmp #$0002			cmp 	#2
.0107f1	90 09		bcc $0107fc			bcc 	_VGBBadBase
.0107f3	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0107f6	b0 04		bcs $0107fc			bcs 	_VGBBadBase
.0107f8	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; get right bracket and return.
.0107fb	60		rts				rts
.0107fc					_VGBBadBase:
.0107fc	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>0107ff	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010807	65 72 20 42 61 73 65 00
.01080f					StringToInteger:
.01080f	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010811	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010813	29 ff 00	and #$00ff			and 	#$00FF
.010816	85 26		sta $26				sta 	DTemp3+2
.010818	f0 6e		beq $010888			beq 	_STIError 					; if length zero it's bad.
.01081a	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.01081c	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.01081e	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010820	64 0a		stz $0a				stz 	DTemp1+2
.010822	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010824	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010827	48		pha				pha 								; push on stack
.010828	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.01082b	d0 06		bne $010833			bne 	_STILoop
.01082d	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01082f	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010831	f0 55		beq $010888			beq 	_STIError 					; if only - then error.
.010833					_STILoop:
.010833	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010835	20 a7 08	jsr $0108a7			jsr 	MultiplyTemp1ByA
.010838	b2 24		lda ($24)			lda 	(DTemp3)
.01083a	29 ff 00	and #$00ff			and 	#$00FF
.01083d	20 98 08	jsr $010898			jsr 	ConvertUpperCase
.010840	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.010843	90 43		bcc $010888			bcc 	_STIError
.010845	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010848	90 0e		bcc $010858			bcc 	_STIOkay1
.01084a	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01084d	90 39		bcc $010888			bcc 	_STIError
.01084f	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010852	b0 34		bcs $010888			bcs 	_STIError
.010854	18		clc				clc 								; shift to correct range.
.010855	69 09 00	adc #$0009			adc 	#9
.010858					_STIOkay1:
.010858	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.01085b	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01085d	b0 29		bcs $010888			bcs 	_STIError
.01085f	18		clc				clc 								; add A to DTemp1
.010860	65 08		adc $08				adc 	DTemp1
.010862	85 08		sta $08				sta 	DTemp1
.010864	90 02		bcc $010868			bcc 	_STINoCarry
.010866	e6 0a		inc $0a				inc 	DTemp1+2
.010868					_STINoCarry:
.010868	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.01086a	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.01086c	d0 c5		bne $010833			bne 	_STILoop 					; loop back.
.01086e	68		pla				pla 								; get optional minus bac
.01086f	c9 2d 00	cmp #$002d			cmp 	#"-"
.010872	d0 0f		bne $010883			bne 	_STINotNegative 			; handle the negative character
.010874	38		sec				sec 								; negate DTemp1
.010875	a9 00 00	lda #$0000			lda 	#0
.010878	e5 08		sbc $08				sbc 	DTemp1
.01087a	85 08		sta $08				sta 	DTemp1
.01087c	a9 00 00	lda #$0000			lda 	#0
.01087f	e5 0a		sbc $0a				sbc 	DTemp1+2
.010881	85 0a		sta $0a				sta 	DTemp1+2
.010883					_STINotNegative:
.010883	a5 08		lda $08				lda 	DTemp1 						; get the result
.010885	a4 0a		ldy $0a				ldy 	DTemp1+2
.010887	60		rts				rts
.010888					_STIError:
.010888	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>01088b	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010893	74 61 6e 74 00
.010898					ConvertUpperCase:
.010898	c9 61 00	cmp #$0061			cmp 	#'a'
.01089b	90 09		bcc $0108a6			bcc 	_CUCExit
.01089d	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.0108a0	b0 04		bcs $0108a6			bcs 	_CUCExit
.0108a2	38		sec				sec
.0108a3	e9 20 00	sbc #$0020			sbc 	#32
.0108a6					_CUCExit:
.0108a6	60		rts				rts
.0108a7					MultiplyTemp1ByA:
.0108a7	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.0108aa	f0 56		beq $010902			beq 	_MT1_16
.0108ac	c9 0a 00	cmp #$000a			cmp 	#10
.0108af	f0 33		beq $0108e4			beq 	_MT1_10
.0108b1	c9 08 00	cmp #$0008			cmp 	#8
.0108b4	f0 50		beq $010906			beq 	_MT1_8
.0108b6	c9 02 00	cmp #$0002			cmp 	#2
.0108b9	f0 53		beq $01090e			beq 	_MT1_2
.0108bb					_MTGeneral:
.0108bb	da		phx				phx
.0108bc	aa		tax				tax 								; multiplier in X
.0108bd	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0108bf	85 0c		sta $0c				sta 	DTemp2
.0108c1	a5 0a		lda $0a				lda 	DTemp1+2
.0108c3	85 0e		sta $0e				sta 	DTemp2+2
.0108c5	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.0108c7	64 0a		stz $0a				stz 	DTemp1+2
.0108c9					_MTLoop:
.0108c9	8a		txa				txa 								; shift X right into C
.0108ca	4a		lsr a				lsr 	a
.0108cb	aa		tax				tax
.0108cc	90 0d		bcc $0108db			bcc 	_MTNoAdd
.0108ce	18		clc				clc
.0108cf	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0108d1	65 0c		adc $0c				adc 	DTemp2
.0108d3	85 08		sta $08				sta 	DTemp1
.0108d5	a5 0a		lda $0a				lda 	DTemp1+2
.0108d7	65 0e		adc $0e				adc 	DTemp2+2
.0108d9	85 0a		sta $0a				sta 	DTemp1+2
.0108db					_MTNoAdd:
.0108db	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0108dd	26 0e		rol $0e				rol 	DTemp2+2
.0108df	8a		txa				txa 								; until multiplier is zero.
.0108e0	d0 e7		bne $0108c9			bne 	_MTLoop
.0108e2					_MTGExit:
.0108e2	fa		plx				plx 								; restore X
.0108e3	60		rts				rts 								; and exit
.0108e4					_MT1_10:
.0108e4	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.0108e6	48		pha				pha
.0108e7	a5 08		lda $08				lda 	DTemp1
.0108e9	48		pha				pha
.0108ea	06 08		asl $08				asl 	DTemp1						; x 4
.0108ec	26 0a		rol $0a				rol 	DTemp1+2
.0108ee	06 08		asl $08				asl 	DTemp1
.0108f0	26 0a		rol $0a				rol 	DTemp1+2
.0108f2	68		pla				pla 								; add saved value, x 5
.0108f3	18		clc				clc
.0108f4	65 08		adc $08				adc 	DTemp1
.0108f6	85 08		sta $08				sta 	DTemp1
.0108f8	68		pla				pla
.0108f9	65 0a		adc $0a				adc 	DTemp1+2
.0108fb	85 0a		sta $0a				sta 	DTemp1+2
.0108fd	06 08		asl $08				asl 	DTemp1
.0108ff	26 0a		rol $0a				rol 	DTemp1+2
.010901	60		rts				rts
.010902					_MT1_16:
.010902	06 08		asl $08				asl 	DTemp1
.010904	26 0a		rol $0a				rol 	DTemp1+2
.010906					_MT1_8:
.010906	06 08		asl $08				asl 	DTemp1
.010908	26 0a		rol $0a				rol 	DTemp1+2
.01090a					_MT1_4:
.01090a	06 08		asl $08				asl 	DTemp1
.01090c	26 0a		rol $0a				rol 	DTemp1+2
.01090e					_MT1_2
.01090e	06 08		asl $08				asl 	DTemp1
.010910	26 0a		rol $0a				rol 	DTemp1+2
.010912	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010913					Function_Str:
.010913	20 f2 03	jsr $0103f2			jsr 	ResetTypeString 			; returns a string.
.010916	20 f7 01	jsr $0101f7			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010919	48		pha				pha 								; save YA on the stack
.01091a	5a		phy				phy
.01091b	20 d5 07	jsr $0107d5			jsr 	VALGetBase 					; process , base (shared with STR$())
.01091e	85 14		sta $14				sta 	DSignCount
.010920	7a		ply				ply 								; YA is the number
.010921	68		pla				pla
.010922	da		phx				phx
.010923	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010925	20 2e 09	jsr $01092e			jsr 	ConvertToString 			; convert it to a string.
.010928	fa		plx				plx 								; restore X
.010929	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01092b	74 10		stz $10,x			stz 	EXSValueH+0,x
.01092d	60		rts				rts
.01092e					ConvertToString:
.01092e	da		phx				phx 								; save X
.01092f	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010931	84 26		sty $26				sty 	DTemp3+2
.010933	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010935	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.010938	20 fa 03	jsr $0103fa			jsr 	StringTempAllocate 			; allocate space for return string.
.01093b	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.01093d	10 15		bpl $010954			bpl 	_CTSNotNegative
.01093f	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.010942	20 bc 09	jsr $0109bc			jsr 	CTSOutputA
.010945	38		sec				sec 								; negate DTemp3
.010946	a9 00 00	lda #$0000			lda 	#0
.010949	e5 24		sbc $24				sbc 	DTemp3
.01094b	85 24		sta $24				sta 	DTemp3
.01094d	a9 00 00	lda #$0000			lda 	#0
.010950	e5 26		sbc $26				sbc 	DTemp3+2
.010952	85 26		sta $26				sta 	DTemp3+2
.010954					_CTSNotNegative:
.010954	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.010957	48		pha				pha
.010958	a9 00 00	lda #$0000			lda 	#0
.01095b	48		pha				pha
.01095c	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.01095e	85 08		sta $08				sta 	DTemp1
.010960	64 0a		stz $0a				stz 	DTemp1+2
.010962					_CTSMultiplySubtractor:
.010962	38		sec				sec
.010963	a5 24		lda $24				lda 	DTemp3
.010965	e5 08		sbc $08				sbc 	DTemp1
.010967	a5 26		lda $26				lda 	DTemp3+2
.010969	e5 0a		sbc $0a				sbc 	DTemp1+2
.01096b	90 0d		bcc $01097a			bcc		_CTSScaledUp 				; if >= then scaled up.
.01096d	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.01096f	48		pha				pha
.010970	a5 0a		lda $0a				lda 	DTemp1+2
.010972	48		pha				pha
.010973	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010975	20 a7 08	jsr $0108a7			jsr 	MultiplyTemp1ByA
.010978	80 e8		bra $010962			bra 	_CTSMultiplySubtractor
.01097a					_CTSScaledUp:
.01097a	7a		ply				ply 								; YA contains the previous divider.
.01097b	68		pla				pla
.01097c	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01097f	d0 05		bne $010986			bne 	_CTSHasDigit
.010981	c9 01 00	cmp #$0001			cmp 	#1 							;
.010984	f0 20		beq $0109a6			beq 	_CTSExit
.010986					_CTSHasDigit:
.010986	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010988	84 0e		sty $0e				sty 	DTemp2+2
.01098a	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.01098d					_CTSSubLoop:
.01098d	38		sec				sec 								; subtract subtractor from number
.01098e	a5 24		lda $24				lda 	DTemp3
.010990	e5 0c		sbc $0c				sbc 	DTemp2
.010992	a8		tay				tay 								; intermediate in Y
.010993	a5 26		lda $26				lda 	DTemp3+2
.010995	e5 0e		sbc $0e				sbc 	DTemp2+2
.010997	90 07		bcc $0109a0			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010999	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01099b	84 24		sty $24				sty 	DTemp3
.01099d	e8		inx				inx 								; one more subtraction
.01099e	80 ed		bra $01098d			bra 	_CTSSubLoop 				; try it again.
.0109a0					_CTSFinishedSubtracting:
.0109a0	8a		txa				txa 								; convert to ASCII.
.0109a1	20 af 09	jsr $0109af			jsr 	CTSOutputHexDigit 			; write that out.
.0109a4	80 d4		bra $01097a			bra 	_CTSScaledUp
.0109a6					_CTSExit:
.0109a6	a5 24		lda $24				lda 	DTemp3 						; output last digit
.0109a8	20 af 09	jsr $0109af			jsr 	CTSOutputHexDigit
.0109ab	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.0109ad	fa		plx				plx 								; restore X.
.0109ae	60		rts				rts
.0109af					CTSOutputHexDigit:
.0109af	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.0109b2	90 04		bcc $0109b8			bcc 	_CTSNotLetter
.0109b4	18		clc				clc
.0109b5	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.0109b8					_CTSNotLetter:
.0109b8	18		clc				clc
.0109b9	69 30 00	adc #$0030			adc 	#48
.0109bc					CTSOutputA:
.0109bc	5a		phy				phy 								; save Y, set Y to current pointer
.0109bd	a4 1a		ldy $1a				ldy 	DCurrentTempString
.0109bf	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.0109c2	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.0109c4	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.0109c6	1a		inc a				inc 	a
.0109c7	92 18		sta ($18)			sta 	(DStartTempString)
.0109c9	c2 20		rep #$20			rep 	#$20
.0109cb	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.0109cd	7a		ply				ply 								; restore Y and exit.
.0109ce	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0109cf					Function_Let:
.0109cf	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0109d1	48		pha				pha
.0109d2	20 5d 02	jsr $01025d			jsr 	VariableFind 				; find the variable
.0109d5	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0109d7	b0 1c		bcs $0109f5			bcs 	_FLetFound 					; skip if found.
.0109d9	68		pla				pla 								; get and push the first token again.
.0109da	48		pha				pha
.0109db	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.0109de	d0 51		bne $010a31			bne 	_FLError					; arrays, so this causes an error.
.0109e0	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0109e2	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0109e5	20 15 03	jsr $010315			jsr 	VariableCreate 				; create it.
.0109e8	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0109ea					_FLSkipToken:
.0109ea	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0109ec	e6 06		inc $06				inc 	DCodePtr
.0109ee	e6 06		inc $06				inc 	DCodePtr
.0109f0	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0109f3	d0 f5		bne $0109ea			bne 	_FLSkipToken
.0109f5					_FLetFound:
.0109f5	68		pla				pla 								; get and save the first token.
.0109f6	48		pha				pha
.0109f7	a8		tay				tay 								; put it in Y
.0109f8	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0109fb	f0 07		beq $010a04			beq 	_FLetNotArray
.0109fd	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0109ff	20 d4 02	jsr $0102d4			jsr 	VariableSubscript			; index calculation
.010a02	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a04					_FLetNotArray:
.010a04	7a		ply				ply 								; get the first token into Y
.010a05	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a07	48		pha				pha
.010a08	5a		phy				phy 								; save the first token on the stack.
.010a09	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a0c	20 9e 03	jsr $01039e			jsr 	ExpectToken
.010a0f	68		pla				pla 								; restore the first token.
.010a10	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a13	d0 0f		bne $010a24			bne 	_FLetString 				; skip if string.
.010a15	20 de 01	jsr $0101de			jsr 	EvaluateInteger 			; get an integer
.010a18	7a		ply				ply 								; get address in Y
.010a19	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a1b	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a1e	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a20	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a23	60		rts				rts
.010a24					_FLetString:
.010a24	20 fd 01	jsr $0101fd			jsr 	EvaluateString 				; get a string.
.010a27	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a29	20 38 04	jsr $010438			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010a2c	7a		ply				ply 								; get address
.010a2d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a30	60		rts				rts
.010a31					_FLError:
.010a31	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010a34	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010a3c	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010a44					Function_END:
.010a44	02 00		cop #$00			cop 	#0
.010a46					Function_RUN:
.010a46	20 9e 0a	jsr $010a9e			jsr 	Function_CLEAR 				; clear all variables.
.010a49	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010a4b	18		clc				clc
.010a4c	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010a4f					_FRun_NextLineNumber:
.010a4f	a8		tay				tay 								; put in Y
.010a50	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010a53	f0 ef		beq $010a44			beq 	Function_END 				; if zero, off the end of the program
.010a55	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010a58	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010a5a	98		tya				tya 								; get address back
.010a5b	18		clc				clc 								; skip over the link/line number
.010a5c	69 04 00	adc #$0004			adc 	#4
.010a5f	85 06		sta $06				sta 	DCodePtr
.010a61					_FRun_NextInstruction:
.010a61	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010a64	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010a66	38		sec				sec
.010a67	e9 00 01	sbc #$0100			sbc 	#256
.010a6a	85 16		sta $16				sta 	DTempStringPointer
.010a6c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010a6e	f0 28		beq $010a98			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010a70	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010a73	f0 18		beq $010a8d			beq 	_FRun_Colon
.010a75	a8		tay				tay 								; save in Y
.010a76	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010a79	c9 00 20	cmp #$2000			cmp 	#$2000
.010a7c	d0 15		bne $010a93			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010a7e	98		tya				tya 								; get token back
.010a7f	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010a82	0a		asl a				asl 	a 							; double it into X
.010a83	aa		tax				tax
.010a84	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010a86	e6 06		inc $06				inc 	DCodePtr
.010a88	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010a8b	80 d4		bra $010a61			bra 	_FRun_NextInstruction 		; do the following instruction.
.010a8d					_FRun_Colon:
.010a8d	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010a8f	e6 06		inc $06				inc 	DCodePtr
.010a91	80 ce		bra $010a61			bra 	_FRun_NextInstruction 		; do the following instruction.
.010a93					_FRun_TryLET:
.010a93	20 cf 09	jsr $0109cf			jsr 	Function_LET 				; try as a LET.
.010a96	80 c9		bra $010a61			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010a98					_FRun_EndInstruction:
.010a98	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010a9a	1a		inc a				inc 	a 							; go to link for next line
.010a9b	1a		inc a				inc 	a
.010a9c	80 b1		bra $010a4f			bra 	_FRun_NextLineNumber
.010a9e					Function_CLEAR:
.010a9e	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.010aa1	a9 00 00	lda #$0000			lda 	#$0000
.010aa4	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010aa6	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010aa8	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010aab	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010aad	20 d4 0a	jsr $010ad4			jsr 	FindCodeEnd 				; find where the program ends.
.010ab0	a8		tay				tay 								; Y points to it.
.010ab1	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010ab4	99 02 00	sta $0002,y			sta 	$0002,y
.010ab7	99 04 00	sta $0004,y			sta 	$0004,y
.010aba	98		tya				tya 								; start of working memory up
.010abb	18		clc				clc
.010abc	69 06 00	adc #$0006			adc 	#6
.010abf	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010ac2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ac4	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010ac7					_FCLoop:
.010ac7	a9 00 00	lda #$0000			lda 	#$0000
.010aca	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010acc	c8		iny				iny
.010acd	c8		iny				iny
.010ace	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010ad1	d0 f4		bne $010ac7			bne 	_FCLoop
.010ad3	60		rts				rts
.010ad4					FindCodeEnd:
.010ad4	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010ad7	18		clc				clc
.010ad8	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010ada	a8		tay				tay
.010adb					_FCELoop:
.010adb	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010ade	f0 08		beq $010ae8			beq 	_FCEExit
.010ae0	98		tya				tya 								; add offset
.010ae1	18		clc				clc
.010ae2	79 00 00	adc $0000,y			adc 	$0000,y
.010ae5	a8		tay				tay
.010ae6	80 f3		bra $010adb			bra 	_FCELoop
.010ae8					_FCEExit:
.010ae8	98		tya				tya 								; return in A
.010ae9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010aea					Function_Dim:
.010aea	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010aec	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010aef	f0 3b		beq $010b2c			beq		_FDIMNotArray 				; no, error.
.010af1	20 5d 02	jsr $01025d			jsr 	VariableFind 				; try to find it.
.010af4	b0 41		bcs $010b37			bcs 	_FDIMExists 				; if it does, that's an error.
.010af6	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010af8	48		pha				pha
.010af9	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010afb	48		pha				pha
.010afc					_FDIMSkip:
.010afc	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010afe	e6 06		inc $06				inc 	DCodePtr
.010b00	e6 06		inc $06				inc 	DCodePtr
.010b02	29 00 08	and #$0800			and 	#IDContMask
.010b05	d0 f5		bne $010afc			bne 	_FDIMSkip
.010b07	20 de 01	jsr $0101de			jsr 	EvaluateInteger 			; evaluate the size
.010b0a	20 b8 03	jsr $0103b8			jsr 	ExpectRightBracket 			; check the ) following.
.010b0d	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010b10	d0 3b		bne $010b4d			bne 	_FDIMSize
.010b12	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010b15	f0 36		beq $010b4d			beq 	_FDIMSize
.010b17	7a		ply				ply 								; restore HashTablePtr
.010b18	84 20		sty $20				sty 	DHashTablePtr
.010b1a	7a		ply				ply 								; so now A is the high index, Y points to the token
.010b1b	20 15 03	jsr $010315			jsr 	VariableCreate 				; create the variable.
.010b1e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010b20	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010b23	d0 06		bne $010b2b			bne 	_FDIMExit
.010b25	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010b27	e6 06		inc $06				inc 	DCodePtr
.010b29	80 bf		bra $010aea			bra 	Function_DIM 				; and do another
.010b2b					_FDIMExit:
.010b2b	60		rts				rts
.010b2c					_FDIMNotArray:
.010b2c	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010b2f	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010b37					_FDIMExists:
.010b37	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010b3a	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010b42	65 64 69 6d 65 6e 73 69 6f 6e 00
.010b4d					_FDIMSize:
.010b4d	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010b50	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010b58	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010b5e					Function_COLLECT:
.010b5e	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010b60	85 0c		sta $0c				sta 	DTemp2
.010b62	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010b65	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010b67	85 0e		sta $0e				sta 	DTemp2+2
.010b69	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010b6b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010b6d					_FCNextPass:
.010b6d	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010b6f	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010b71	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010b73	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010b76	18		clc				clc
.010b77	65 02		adc $02				adc 	DBaseAddress
.010b79	a8		tay				tay 								; put in Y
.010b7a	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010b7d					_FCO1:
.010b7d	20 a3 0b	jsr $010ba3			jsr  	COLLECTScanVariable 		; scan that one.
.010b80	c8		iny				iny 	 							; go to next pointer
.010b81	c8		iny				iny
.010b82	ca		dex				dex
.010b83	d0 f8		bne $010b7d			bne 	_FCO1 						; until done all 16.
.010b85	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010b88					_FCO2:
.010b88	20 b7 0b	jsr $010bb7			jsr  	COLLECTScanArray 			; scan that one.
.010b8b	c8		iny				iny 	 							; go to next pointer
.010b8c	c8		iny				iny
.010b8d	ca		dex				dex
.010b8e	d0 f8		bne $010b88			bne 	_FCO2 						; until done all 16.
.010b90	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010b92	f0 0e		beq $010ba2			beq		_FCExit 					; if finished then exit.
.010b94	48		pha				pha 								; save the target address
.010b95	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010b97	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010b99	20 38 04	jsr $010438			jsr 	StringMakeConcrete 			; make the string concrete.
.010b9c	7a		ply				ply 								; restore the string.
.010b9d	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010ba0	80 cb		bra $010b6d			bra		_FCNextPass
.010ba2					_FCExit:
.010ba2	60		rts				rts
.010ba3					COLLECTScanVariable:
.010ba3	da		phx				phx 								; save XY
.010ba4	5a		phy				phy
.010ba5					_CSVLoop:
.010ba5	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010ba8	f0 0a		beq $010bb4			beq 	_CSVExit
.010baa	a8		tay				tay 								; put new address into Y
.010bab	18		clc				clc 								; which is four on.
.010bac	69 04 00	adc #$0004			adc 	#4
.010baf	20 d6 0b	jsr $010bd6			jsr 	COLLECTCheck
.010bb2	80 f1		bra $010ba5			bra 	_CSVLoop
.010bb4					_CSVExit:
.010bb4	7a		ply				ply
.010bb5	fa		plx				plx
.010bb6	60		rts				rts
.010bb7					COLLECTScanArray:
.010bb7	da		phx				phx 								; save XY
.010bb8	5a		phy				phy
.010bb9					_CSALoop:
.010bb9	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010bbc	f0 15		beq $010bd3			beq 	_CSAExit
.010bbe	a8		tay				tay 								; put new address in Y
.010bbf	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010bc2	aa		tax				tax
.010bc3	e8		inx				inx									; +1 as one more data element.
.010bc4	98		tya				tya 								; point A to first element, at +6
.010bc5	18		clc				clc
.010bc6	69 06 00	adc #$0006			adc 	#6
.010bc9					_CSADoAllStrings:
.010bc9	20 d6 0b	jsr $010bd6			jsr 	COLLECTCheck 				; collect check the first.
.010bcc	1a		inc a				inc 	a 							; advance the pointer.
.010bcd	1a		inc a				inc 	a
.010bce	ca		dex				dex
.010bcf	d0 f8		bne $010bc9			bne 	_CSADoAllStrings 			; until all strings are done.
.010bd1	80 e6		bra $010bb9			bra 	_CSALoop
.010bd3					_CSAExit:
.010bd3	7a		ply				ply
.010bd4	fa		plx				plx
.010bd5	60		rts				rts
.010bd6					COLLECTCheck:
.010bd6	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010bd8	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010bda	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010bdc	90 0a		bcc $010be8			bcc 	_COCExit
.010bde	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010be0	b0 06		bcs $010be8			bcs 	_COCExit
.010be2	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010be4	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010be6	85 14		sta $14				sta 	DSignCount
.010be8					_COCExit:
.010be8	a5 0a		lda $0a				lda 	DTemp1+2
.010bea	60		rts				rts
.010beb	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010bec					Function_ASSERT:
.010bec	20 de 01	jsr $0101de			jsr 	EvaluateInteger 			; something that returns an integer.
.010bef	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010bf1	05 08		ora $08				ora 	Dtemp1
.010bf3	f0 01		beq $010bf6			beq 	_FAssFail
.010bf5	60		rts				rts
.010bf6					_FAssFail:
.010bf6	20 77 03	jsr $010377			jsr 	ErrorHandler 						; call error routine
>010bf9	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010c01	61 69 6c 65 64 00
.010c07					Function_CLS:
.010c07	20 20 0c	jsr $010c20			jsr 	HWClearScreen
.010c0a	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010c0b					SwitchBasicInstance:
.010c0b	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010c0d	20 20 0c	jsr $010c20			jsr 	HWClearScreen 						; clear screen
.010c10	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010c13	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010c15	86 02		stx $02				stx		DBaseAddress
.010c17	84 04		sty $04				sty 	DHighAddress
.010c19	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010c1a	48		pha				pha 										; then copy it into B.
.010c1b	ab		plb				plb
.010c1c	ab		plb				plb
.010c1d	4c 46 0a	jmp $010a46			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
.010c20					HWClearScreen:
.010c20	48		pha				pha
.010c21	da		phx				phx
.010c22	a2 fe 01	ldx #$01fe			ldx 	#510
.010c25	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010c28	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010c2c	ca		dex				dex
.010c2d	10 f6		bpl $010c25			bpl 	_CS0
.010c2f	64 28		stz $28				stz 	DCursor
.010c31	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010c34	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010c38	fa		plx				plx
.010c39	68		pla				pla
.010c3a	60		rts				rts
.010c3b					HWPrintChar:
.010c3b	48		pha				pha
.010c3c	da		phx				phx
.010c3d	a6 28		ldx $28				ldx 	DCursor
.010c3f	e2 20		sep #$20			sep 	#$20
.010c41	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010c45	c2 20		rep #$20			rep 	#$20
.010c47	e8		inx				inx
.010c48	8a		txa				txa
.010c49	29 ff 01	and #$01ff			and 	#(32*16-1)
.010c4c	85 28		sta $28				sta 	DCursor
.010c4e	aa		tax				tax
.010c4f	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010c52	e2 20		sep #$20			sep 	#$20
.010c54	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010c58	c2 20		rep #$20			rep 	#$20
.010c5a	fa		plx				plx
.010c5b	68		pla				pla
.010c5c	60		rts				rts
.010c5d					HWNewLine:
.010c5d	48		pha				pha
.010c5e					_HWNLLoop:
.010c5e	a9 20 00	lda #$0020			lda 	#32
.010c61	20 3b 0c	jsr $010c3b			jsr 	HWPrintChar
.010c64	a5 28		lda $28				lda 	DCursor
.010c66	29 1f 00	and #$001f			and 	#31
.010c69	d0 f3		bne $010c5e			bne 	_HWNLLoop
.010c6b	68		pla				pla
.010c6c	60		rts				rts

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	1a 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 14 00 01 00 23 3e 19 32
>024108	18 c0 06 22 01 40 0d 26 00 40 00 00 00 00 ee ee
>024118	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2028 times (32448 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
