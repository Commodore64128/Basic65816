
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 11 20:07:49 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 3c 0b 01	jmp $010b3c		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	6f 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	0c 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	1c 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	2c 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	70 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d7 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	3c 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	b9 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	9b 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	56 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	56 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d7 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e3 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	60 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d7 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	e8 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	fa 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	71 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	51 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	2d 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	17 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a8 07					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	6f 03					.word IllegalToken             & $FFFF ; token $3216 ","
>01002e	6f 03					.word IllegalToken             & $FFFF ; token $3217 ";"
>010030	6f 03					.word IllegalToken             & $FFFF ; token $3218 ":"
>010032	6f 03					.word IllegalToken             & $FFFF ; token $3219 "("
>010034	6f 03					.word IllegalToken             & $FFFF ; token $321a ")"
>010036	04 09					.word Function_Let             & $FFFF ; token $3e1b "let"
>010038	21 0b					.word Function_ASSERT          & $FFFF ; token $3e1c "assert"
>01003a	79 09					.word Function_END             & $FFFF ; token $3e1d "end"
>01003c	7b 09					.word Function_RUN             & $FFFF ; token $3e1e "run"
>01003e	d3 09					.word Function_CLEAR           & $FFFF ; token $3e1f "clear"
>010040	1f 0a					.word Function_Dim             & $FFFF ; token $3e20 "dim"
>010042	93 0a					.word Function_COLLECT         & $FFFF ; token $3e21 "collect"
>010044	6f 03					.word IllegalToken             & $FFFF ; token $3c22 "while"
>010046	6f 03					.word IllegalToken             & $FFFF ; token $3a23 "wend"
.010048					TokenText:
>010048	02 26					 .text $02,"&"        ; token $2001
>01004a	02 7c					 .text $02,"|"        ; token $2002
>01004c	02 5e					 .text $02,"^"        ; token $2003
>01004e	12 3c					 .text $12,"<"        ; token $2204
>010050	12 3e					 .text $12,">"        ; token $2205
>010052	12 3d					 .text $12,"="        ; token $2206
>010054	13 3c 3d				 .text $13,"<="       ; token $2207
>010057	13 3e 3d				 .text $13,">="       ; token $2208
>01005a	13 3c 3e				 .text $13,"<>"       ; token $2209
>01005d	22 2b					 .text $22,"+"        ; token $240a
>01005f	22 2d					 .text $22,"-"        ; token $240b
>010061	32 2a					 .text $32,"*"        ; token $260c
>010063	32 2f					 .text $32,"/"        ; token $260d
>010065	32 25					 .text $32,"%"        ; token $260e
>010067	33 3e 3e				 .text $33,">>"       ; token $260f
>01006a	33 3c 3c				 .text $33,"<<"       ; token $2610
>01006d	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010073	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010078	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01007d	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010082	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010087	92 2c					 .text $92,","        ; token $3216
>010089	92 3b					 .text $92,";"        ; token $3217
>01008b	92 3a					 .text $92,":"        ; token $3218
>01008d	92 28					 .text $92,"("        ; token $3219
>01008f	92 29					 .text $92,")"        ; token $321a
>010091	f4 6c 65 74				 .text $f4,"let"      ; token $3e1b
>010095	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1c
>01009c	f4 65 6e 64				 .text $f4,"end"      ; token $3e1d
>0100a0	f4 72 75 6e				 .text $f4,"run"      ; token $3e1e
>0100a4	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1f
>0100aa	f4 64 69 6d				 .text $f4,"dim"      ; token $3e20
>0100ae	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e21
>0100b6	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c22
>0100bc	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a23
>0100c1	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3216					commaTokenID                     = $3216
=$3217					semicolonTokenID                 = $3217
=$3218					colonTokenID                     = $3218
=$3219					lparenTokenID                    = $3219
=$321a					rparenTokenID                    = $321a
=$3e1b					letTokenID                       = $3e1b
=$3e1c					assertTokenID                    = $3e1c
=$3e1d					endTokenID                       = $3e1d
=$3e1e					runTokenID                       = $3e1e
=$3e1f					clearTokenID                     = $3e1f
=$3e20					dimTokenID                       = $3e20
=$3e21					collectTokenID                   = $3e21
=$3c22					whileTokenID                     = $3c22
=$3a23					wendTokenID                      = $3a23

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100c2					Evaluate:
.0100c2	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100c5	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100c8					EvaluateLevel:
.0100c8	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100cb	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100cd	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100cf	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100d2	b0 79		bcs $01014d			bcs 	_ELVariable
.0100d4	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100d7	b0 16		bcs $0100ef			bcs 	_ELConstant
.0100d9	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100dc	90 7f		bcc $01015d			bcc 	_ELStringConstant
.0100de	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100e1	90 03		bcc $0100e6			bcc 	_ELConstantShift
.0100e3	82 94 00	brl $01017a			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100e6					_ELConstantShift:
.0100e6	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100e9	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100eb	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ed	e6 06		inc $06				inc 	DCodePtr
.0100ef					_ELConstant:
.0100ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100f1	38		sec				sec  								; shift it in the range 0-32767
.0100f2	e9 00 40	sbc #$4000			sbc 	#$4000
.0100f5	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100f6	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100f8	6a		ror a				ror 	a 							; rotate that into the constant value
.0100f9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100fb	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100fd	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100ff	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010103	e6 06		inc $06				inc 	DCodePtr
.010105					_ELGotAtom:
.010105	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010107	a8		tay				tay 								; save in Y
.010108	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01010b	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01010e	d0 35		bne $010145			bne 	_ELExit
.010110	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010112	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010115	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010117	98		tya				tya 								; get the keyword token back
.010118	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01011b	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01011d	90 26		bcc $010145			bcc 	_ELExit 					; precedence too low, then exit.
.01011f	5a		phy				phy 								; save the binary operator on the stack
.010120	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010122	e6 06		inc $06				inc 	DCodePtr
.010124	18		clc				clc 								; try the next level up
.010125	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010128	e8		inx				inx 								; calculate the RHS at the next stack level.
.010129	e8		inx				inx
.01012a	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.01012d	ca		dex				dex
.01012e	ca		dex				dex
.01012f	7a		ply				ply 								; get operator token back into Y
.010130					_ELExecuteY:
.010130	98		tya				tya
.010131	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010134	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010135	9b		txy				txy 								; save X in Y
.010136	aa		tax				tax 								; double keyword ID in X
.010137	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01013b	bb		tyx				tyx 								; restore X.
.01013c	8f 41 01 01	sta $010141			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010140					_ELCallRoutine:
.010140	20 40 01	jsr $010140			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010143	80 c0		bra $010105			bra 	_ELGotAtom 					; go round operator level again.
.010145	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010147	0a		asl a				asl 	a
.010148	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01014a	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01014c	60		rts				rts
.01014d					_ELVariable:
.01014d	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01014f	20 0e 02	jsr $01020e			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010152	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010154	94 10		sty $10,x			sty 	EXSValueH+0,x
.010156	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010158	80 ab		bra $010105			bra 	_ELGotAtom
.01015a					_ELSyntax
.01015a	82 23 02	brl $010380			brl 	SyntaxError
.01015d					_ELStringConstant:
.01015d	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010160	f0 f8		beq $01015a			beq 	_ELSyntax
.010162	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010164	1a		inc a				inc 	a
.010165	1a		inc a				inc 	a
.010166	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010168	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01016a	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01016c	18		clc				clc 								; add to string constant.
.01016d	65 06		adc $06				adc 	DCodePtr
.01016f	85 06		sta $06				sta 	DCodePtr
.010171	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010173	09 00 80	ora #$8000			ora 	#$8000
.010176	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010178	80 8b		bra $010105			bra 	_ELGotAtom
.01017a					_ELUnaryKeyword:
.01017a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01017c	a8		tay				tay 								; put the token in Y.
.01017d	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01017f	e6 06		inc $06				inc 	DCodePtr
.010181	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010184	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010187	f0 a7		beq $010130			beq 	_ELExecuteY					; go back and execute it
.010189	c0 19 32	cpy #$3219			cpy 	#lparenTokenID 				; is it an open bracket ?
.01018c	d0 11		bne $01019f			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01018e	20 c5 01	jsr $0101c5			jsr 	EvaluateNext 				; evaluate the expression
.010191	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; consume the right bracket.
.010194					_ELCopy:
.010194	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010196	95 00		sta $00,x			sta 	EXSValueL+0,x
.010198	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01019a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01019c	82 66 ff	brl $010105			brl 	_ELGotAtom 					; and continue.
.01019f					_ELUnaryOperator:
.01019f	5a		phy				phy 								; save the operator on the stack.
.0101a0	e8		inx				inx 								; this is like evaluate next
.0101a1	e8		inx				inx
.0101a2	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101a5	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.0101a8	ca		dex				dex 								; unwind the stack.
.0101a9	ca		dex				dex
.0101aa	68		pla				pla 								; restore the unary operator.
.0101ab	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101ae	f0 03		beq $0101b3			beq 	_ELMinus
.0101b0	4c 80 03	jmp $010380			jmp 	SyntaxError
.0101b3					_ELMinus:
.0101b3	38		sec				sec 								; do the negation calculation.
.0101b4	a9 00 00	lda #$0000			lda 	#0
.0101b7	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101b9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101bb	a9 00 00	lda #$0000			lda 	#0
.0101be	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101c0	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101c2	82 40 ff	brl $010105			brl 	_ELGotAtom					; and continue.
.0101c5					EvaluateNext:
.0101c5	e8		inx				inx
.0101c6	e8		inx				inx
.0101c7	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101ca	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.0101cd	ca		dex				dex
.0101ce	ca		dex				dex
.0101cf	60		rts				rts
.0101d0					EvaluateInteger:
.0101d0	20 c2 00	jsr $0100c2			jsr 	Evaluate
.0101d3	b0 01		bcs $0101d6			bcs 	EIType
.0101d5	60		rts				rts
.0101d6					EIType:
.0101d6	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0101d9	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextInteger:
.0101e9	20 c5 01	jsr $0101c5			jsr 	EvaluateNext
.0101ec	b0 e8		bcs $0101d6			bcs 	EIType
.0101ee	60		rts				rts
.0101ef					EvaluateString:
.0101ef	20 c2 00	jsr $0100c2			jsr 	Evaluate
.0101f2	90 01		bcc $0101f5			bcc 	ESType
.0101f4	60		rts				rts
.0101f5					ESType:
.0101f5	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0101f8	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010200	78 70 65 63 74 65 64 00
.010208					EvaluateNextString:
.010208	20 c5 01	jsr $0101c5			jsr 	EvaluateNext
.01020b	90 e8		bcc $0101f5			bcc 	ESType
.01020d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01020e					VariableAccessExpression:
.01020e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010210	48		pha				pha
.010211	20 4f 02	jsr $01024f			jsr 	VariableFind 				; try to find the variables
.010214	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010216	90 23		bcc $01023b			bcc 	_VANError
.010218	68		pla				pla 								; get and save that first token
.010219	48		pha				pha
.01021a	a8		tay				tay 								; put first token in Y.
.01021b	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01021e	f0 07		beq $010227			beq 	_VANNotArray
.010220	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010222	20 c6 02	jsr $0102c6			jsr 	VariableSubscript			; index calculation
.010225	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010227					_VANNotArray:
.010227	68		pla				pla 								; get the token back.
.010228	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01022b	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01022e	38		sec				sec 								; set up return string.
.01022f	f0 06		beq $010237			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010231	18		clc				clc 								; returning a number, read high data word
.010232	a0 02 00	ldy #$0002			ldy 	#2
.010235	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010237					_VANLoadLower:
.010237	a8		tay				tay 								; put A into Y (this is the high byte)
.010238	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01023a	60		rts				rts
.01023b					_VANError:
.01023b	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01023e	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010246	20 75 6e 6b 6e 6f 77 6e 00
.01024f					VariableFind:
.01024f	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010251	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010254	90 5c		bcc $0102b2			bcc 	_VFError
.010256	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010259	b0 11		bcs $01026c			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01025b	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01025e	3a		dec a				dec 	a 							; now 0-25
.01025f	0a		asl a				asl 	a 							; x 4 and clear carry
.010260	0a		asl a				asl 	a
.010261	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010264	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010266	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010268	e6 06		inc $06				inc 	DCodePtr
.01026a	38		sec				sec 								; return with carry set.
.01026b	60		rts				rts
.01026c					_VFSlowVariable:
.01026c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01026e	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010271	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010272	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010273	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010276	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010278	85 08		sta $08				sta 	DTemp1
.01027a	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01027c	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01027f	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010280	65 08		adc $08				adc 	DTemp1
.010282	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010284	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010286					_VFNext:
.010286	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010288	f0 26		beq $0102b0			beq 	_VFFail 					; if zero, then it's the end of the list.
.01028a	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01028c	a8		tay				tay 								; read the address of the name at $0002,y
.01028d	b9 02 00	lda $0002,y			lda 	$0002,y
.010290	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010292	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010295					_VFCompare:
.010295	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010297	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010299	d0 eb		bne $010286			bne 	_VFNext 					; if not, go to the next one.
.01029b	c8		iny				iny 								; advance token pointer
.01029c	c8		iny				iny
.01029d	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102a0	d0 f3		bne $010295			bne 	_VFCompare
.0102a2	98		tya				tya 								; this is the length of the word.
.0102a3	18		clc				clc 								; so we add it to the code pointer
.0102a4	65 06		adc $06				adc 	DCodePtr
.0102a6	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102a8	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102aa	18		clc				clc 								; four on is the actual data
.0102ab	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102ae	38		sec				sec 								; return with CS indicating success
.0102af	60		rts				rts
.0102b0					_VFFail:
.0102b0	18		clc				clc
.0102b1	60		rts				rts
.0102b2					_VFError:
.0102b2	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0102b5	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102bd	76 61 72 69 61 62 6c 65 00
.0102c6					VariableSubscript:
.0102c6	5a		phy				phy 								; save token on stack
.0102c7	48		pha				pha		 							; save variable address on stack.
.0102c8	20 e9 01	jsr $0101e9			jsr		EvaluateNextInteger 		; get the subscript
.0102cb	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; skip right bracket.
.0102ce	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102d1	d0 1d		bne $0102f0			bne 	_VANSubscript
.0102d3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102d5	f0 02		beq $0102d9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102d7	b0 17		bcs $0102f0			bcs 	_VANSubscript
.0102d9					_VANSubOkay:
.0102d9	0a		asl a				asl 	a 							; double lsword
.0102da	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102dc	68		pla				pla 								; restore DVariablePtr
.0102dd	85 1e		sta $1e				sta 	DVariablePtr
.0102df	68		pla				pla 								; get and save that first token
.0102e0	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102e3	d0 02		bne $0102e7			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102e5	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102e7					_VANNotString
.0102e7	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102e9	18		clc				clc 								; add 2 to get it past the high subscript
.0102ea	69 02 00	adc #$0002			adc 	#2
.0102ed	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102ef	60		rts				rts
.0102f0					_VANSubscript:
.0102f0	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0102f3	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102fb	79 20 53 75 62 73 63 72 69 70 74 00
.010307					VariableCreate:
.010307	48		pha				pha 								; save count.
.010308	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01030b	29 00 20	and #$2000			and 	#IDTypeMask
.01030e	f0 06		beq $010316			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010310	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010313	18		clc				clc
.010314	65 02		adc $02				adc 	DBaseAddress
.010316					_VCIsInteger:
.010316	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010318	68		pla				pla 								; restore count
.010319	48		pha				pha
.01031a	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01031b	0a		asl a				asl 	a 							; 2 x # items.
.01031c					_VCNotSingle:
.01031c	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01031e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010321	48		pha				pha 								; save on stack
.010322	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010325	d0 02		bne $010329			bne 	_VCString
.010327	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010329					_VCString:
.010329	68		pla				pla 								; restore first token.
.01032a	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01032d	f0 04		beq $010333			beq 	_VCNotArray
.01032f	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010331	e6 08		inc $08				inc 	DTemp1
.010333					_VCNotArray:
.010333	5a		phy				phy 								; save address of token on stack.
.010334	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010337	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010339	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01033b	18		clc				clc 								; add 4 for link and name.
.01033c	69 04 00	adc #$0004			adc 	#4
.01033f	65 08		adc $08				adc 	DTemp1 						; add memory required
.010341	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010343	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010345					_VCErase:
.010345	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010347	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01034a	c8		iny				iny
.01034b	c8		iny				iny
.01034c	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01034e	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010350	d0 f3		bne $010345			bne 	_VCErase
.010352	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010354	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010356	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010359	68		pla				pla 								; restore the token address
.01035a	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01035d	68		pla				pla 								; restore count and store.
.01035e	99 04 00	sta $0004,y			sta 	$0004,y
.010361					_VCNotArray2:
.010361	98		tya				tya 								; update the head link
.010362	92 20		sta ($20)			sta 	(DHashTablePtr)
.010364	18		clc				clc 								; advance pointer to the data bit.
.010365	69 04 00	adc #$0004			adc 	#4
.010368	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010369					ErrorHandler:
.010369	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01036b	fa		plx				plx 								; address of error message -1
.01036c	ea		nop				nop
.01036d	80 fe		bra $01036d	_EH1:	bra 	_EH1
.01036f					IllegalToken:
.01036f	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010372	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01037a	54 6f 6b 65 6e 00
.010380					SyntaxError:
.010380	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010383	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01038b	72 72 6f 72 00
.010390					ExpectToken:
.010390	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010392	d0 05		bne $010399			bne 	_CTKError					; error if not
.010394	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010396	e6 06		inc $06				inc 	DCodePtr
.010398	60		rts				rts
.010399					_CTKError:
.010399	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01039c	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103a4	74 6f 6b 65 6e 00
.0103aa					ExpectRightBracket:
.0103aa	48		pha				pha
.0103ab	a9 1a 32	lda #$321a			lda 	#rparenTokenID
.0103ae	20 90 03	jsr $010390			jsr 	ExpectToken
.0103b1	68		pla				pla
.0103b2	60		rts				rts
.0103b3					ExpectComma:
.0103b3	48		pha				pha
.0103b4	a9 16 32	lda #$3216			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103b7	20 90 03	jsr $010390			jsr 	ExpectToken
.0103ba	68		pla				pla
.0103bb	60		rts				rts
.0103bc					CheckBothNumeric:
.0103bc	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103be	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103c0	30 01		bmi $0103c3			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103c2	60		rts				rts
.0103c3					_CBNFail:
.0103c3	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0103c6	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103ce	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103dc					ResetTypeInteger:
.0103dc	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103de	29 ff 7f	and #$7fff			and 	#$7FFF
.0103e1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103e3	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103e4					StringTempAllocate:
.0103e4	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103e7	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103ea	18		clc				clc 								; this adds one, for the length.
.0103eb	65 16		adc $16				adc 	DTempStringPointer
.0103ed	85 16		sta $16				sta 	DTempStringPointer
.0103ef	48		pha				pha
.0103f0	a9 00 00	lda #$0000			lda 	#$0000
.0103f3	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103f5	92 16		sta ($16)			sta		(DTempStringPointer)
.0103f7	c2 20		rep #$20			rep 	#$20
.0103f9	68		pla				pla
.0103fa	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103fc	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103fe	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010400	60		rts				rts
.010401					StringCreateCopy:
.010401	a8		tay				tay 								; put pointer to string in Y
.010402	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010405	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010408	f0 17		beq $010421			beq 	_SCCExit 					; do nothing if length zero.
.01040a	da		phx				phx 								; save X and put the character count in X
.01040b	aa		tax				tax
.01040c					_SCCCopy:
.01040c	c8		iny				iny 								; advance and read (first time skips length)
.01040d	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01040f	b9 00 00	lda $0000,y			lda 	$0000,y
.010412	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010414	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010416	1a		inc a				inc 	a
.010417	92 18		sta ($18)			sta 	(DStartTempString)
.010419	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01041b	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01041d	ca		dex				dex 								; do X times
.01041e	d0 ec		bne $01040c			bne 	_SCCCopy
.010420	fa		plx				plx
.010421					_SCCExit:
.010421	60		rts				rts
.010422					StringMakeConcrete:
.010422	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010425	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010427	90 0f		bcc $010438			bcc 	_SMCExit
.010429	85 08		sta $08				sta 	DTemp1 						; source
.01042b	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01042d	29 ff 00	and #$00ff			and 	#$00FF
.010430	d0 07		bne $010439			bne 	_SMCNonZero 				; if not "" skip.
.010432	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010435	18		clc				clc
.010436	65 02		adc $02				adc 	DBaseAddress
.010438					_SMCExit:
.010438	60		rts				rts
.010439					_SMCNonZero:
.010439	48		pha				pha 								; save on stack.
.01043a	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.01043d	18		clc				clc
.01043e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010441	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010443	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010445	85 0c		sta $0c				sta 	DTemp2 						; target
.010447	7a		ply				ply 								; get length copy from here until Y goes -ve
.010448	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01044a					_SMCLoop:
.01044a	b1 08		lda ($08),y			lda 	(DTemp1),y
.01044c	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01044e	88		dey				dey
.01044f	10 f9		bpl $01044a			bpl 	_SMCLoop
.010451	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010453	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010455	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010456					Binary_Add:
.010456	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010458	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01045a	30 12		bmi $01046e		bmi 	_BATypeError
.01045c	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01045e	30 3f		bmi $01049f		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010460	18		clc			clc
.010461	b5 00		lda $00,x		lda		EXSValueL+0,x
.010463	75 02		adc $02,x		adc 	EXSValueL+2,x
.010465	95 00		sta $00,x		sta 	EXSValueL+0,x
.010467	b5 10		lda $10,x		lda		EXSValueH+0,x
.010469	75 12		adc $12,x		adc 	EXSValueH+2,x
.01046b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01046d	60		rts			rts
.01046e					_BATypeError:
.01046e	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010471	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010479	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010489	65 73 00
.01048c					_BALengthError:
.01048c	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01048f	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010497	6f 6f 20 6c 6f 6e 67 00
.01049f					_BAConcatenateString:
.01049f	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0104a1	85 08		sta $08			sta 	DTemp1
.0104a3	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104a5	85 0c		sta $0c			sta 	DTemp2
.0104a7	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0104a9	18		clc			clc 										; work out the total length
.0104aa	b2 08		lda ($08)		lda 	(DTemp1)
.0104ac	72 0c		adc ($0c)		adc 	(DTemp2)
.0104ae	b0 14		bcs $0104c4		bcs 	_BAConcatLengthError 				; string is too long.
.0104b0	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0104b2	20 e4 03	jsr $0103e4		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0104b5	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0104b7	74 10		stz $10,x		stz 	EXSValueH+0,x
.0104b9	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0104bb	20 01 04	jsr $010401		jsr 	StringCreateCopy
.0104be	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0104c0	20 01 04	jsr $010401		jsr 	StringCreateCopy
.0104c3	60		rts			rts
.0104c4					_BAConcatLengthError:
.0104c4	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0104c7	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104cf	6f 6f 20 6c 6f 6e 67 00
.0104d7					Binary_Subtract:
.0104d7	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104da	38		sec			sec
.0104db	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104dd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104df	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e1	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104e7	60		rts			rts
.0104e8					Binary_ShiftRight:
.0104e8	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104eb	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104ed	29 3f 00	and #$003f		and 	#63
.0104f0	f0 07		beq $0104f9		beq		_Binary_SRExit
.0104f2					_Binary_SRLoop:
.0104f2	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104f4	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104f6	3a		dec a			dec 	a
.0104f7	d0 f9		bne $0104f2		bne 	_Binary_SRLoop
.0104f9					_Binary_SRExit:
.0104f9	60		rts			rts
.0104fa					Binary_ShiftLeft:
.0104fa	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104fd	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104ff	29 3f 00	and #$003f		and 	#63
.010502	f0 07		beq $01050b		beq		_Binary_SLExit
.010504					_Binary_SLLoop:
.010504	16 00		asl $00,x		asl 	EXSValueL+0,x
.010506	36 10		rol $10,x		rol 	EXSValueH+0,x
.010508	3a		dec a			dec 	a
.010509	d0 f9		bne $010504		bne 	_Binary_SLLoop
.01050b					_Binary_SLExit:
.01050b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.01050c					Binary_And:
.01050c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01050f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010511	35 02		and $02,x		and 	EXSValueL+2,x
.010513	95 00		sta $00,x		sta 	EXSValueL+0,x
.010515	b5 10		lda $10,x		lda		EXSValueH+0,x
.010517	35 12		and $12,x		and 	EXSValueH+2,x
.010519	95 10		sta $10,x		sta 	EXSValueH+0,x
.01051b	60		rts			rts
.01051c					Binary_Or:
.01051c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01051f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010521	15 02		ora $02,x		ora 	EXSValueL+2,x
.010523	95 00		sta $00,x		sta 	EXSValueL+0,x
.010525	b5 10		lda $10,x		lda		EXSValueH+0,x
.010527	15 12		ora $12,x		ora 	EXSValueH+2,x
.010529	95 10		sta $10,x		sta 	EXSValueH+0,x
.01052b	60		rts			rts
.01052c					Binary_Xor:
.01052c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01052f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010531	55 02		eor $02,x		eor 	EXSValueL+2,x
.010533	95 00		sta $00,x		sta 	EXSValueL+0,x
.010535	b5 10		lda $10,x		lda		EXSValueH+0,x
.010537	55 12		eor $12,x		eor 	EXSValueH+2,x
.010539	95 10		sta $10,x		sta 	EXSValueH+0,x
.01053b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.01053c					Binary_Equals:
.01053c	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01053f	b0 0e		bcs $01054f		bcs 	_BEString
.010541	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010543	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010545	d0 4f		bne $010596		bne 	Compare_Fail
.010547	b5 10		lda $10,x		lda 	EXSValueH,x
.010549	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01054b	d0 49		bne $010596		bne 	Compare_Fail
.01054d	80 3f		bra $01058e		bra 	Compare_Succeed
.01054f					_BEString:
.01054f	09 00 00	ora #$0000		ora 	#$0000
.010552	f0 3a		beq $01058e		beq 	Compare_Succeed
.010554	80 40		bra $010596		bra 	Compare_Fail
.010556					Binary_NotEquals:
.010556	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010559	b0 0e		bcs $010569		bcs 	_BNEString
.01055b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01055d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01055f	d0 2d		bne $01058e		bne 	Compare_Succeed
.010561	b5 10		lda $10,x		lda 	EXSValueH,x
.010563	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010565	d0 27		bne $01058e		bne 	Compare_Succeed
.010567	80 2d		bra $010596		bra 	Compare_Fail
.010569					_BNEString:
.010569	09 00 00	ora #$0000		ora 	#$0000
.01056c	d0 20		bne $01058e		bne 	Compare_Succeed
.01056e	80 26		bra $010596		bra 	Compare_Fail
.010570					Binary_Less:
.010570	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010573	b0 12		bcs $010587		bcs 	_BLString
.010575	38		sec			sec
.010576	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010578	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01057a	b5 10		lda $10,x		lda 	EXSValueH,x
.01057c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01057e	50 03		bvc $010583		bvc 	*+5
.010580	49 00 80	eor #$8000		eor 	#$8000
.010583	30 09		bmi $01058e		bmi 	Compare_Succeed
.010585	80 0f		bra $010596		bra 	Compare_Fail
.010587					_BLString:
.010587	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01058a	f0 02		beq $01058e		beq 	Compare_Succeed
.01058c	80 08		bra $010596		bra 	Compare_Fail
.01058e					Compare_Succeed:
.01058e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010591	95 00		sta $00,x		sta 	EXSValueL,x
.010593	95 10		sta $10,x		sta 	EXSValueH,x
.010595	60		rts			rts
.010596					Compare_Fail:
.010596	74 00		stz $00,x		stz 	EXSValueL,x
.010598	74 10		stz $10,x		stz 	EXSValueH,x
.01059a	60		rts			rts
.01059b					Binary_GreaterEqual:
.01059b	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01059e	b0 12		bcs $0105b2		bcs 	_BGEString
.0105a0	38		sec			sec
.0105a1	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0105a3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a5	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a9	50 03		bvc $0105ae		bvc 	*+5
.0105ab	49 00 80	eor #$8000		eor 	#$8000
.0105ae	10 de		bpl $01058e		bpl 	Compare_Succeed
.0105b0	80 e4		bra $010596		bra 	Compare_Fail
.0105b2					_BGEString:
.0105b2	09 00 00	ora #$0000		ora 	#$0000
.0105b5	10 d7		bpl $01058e		bpl 	Compare_Succeed
.0105b7	80 dd		bra $010596		bra 	Compare_Fail
.0105b9					Binary_LessEqual:
.0105b9	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105bc	b0 12		bcs $0105d0		bcs 	_BLEString
.0105be	18		clc			clc 									; numeric <= signed
.0105bf	b5 00		lda $00,x		lda 	EXSValueL,x
.0105c1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105c3	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c5	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105c7	50 03		bvc $0105cc		bvc 	*+5
.0105c9	49 00 80	eor #$8000		eor 	#$8000
.0105cc	30 c0		bmi $01058e		bmi 	Compare_Succeed
.0105ce	80 c6		bra $010596		bra 	Compare_Fail
.0105d0					_BLEString:
.0105d0	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105d3	d0 b9		bne $01058e		bne 	Compare_Succeed
.0105d5	80 bf		bra $010596		bra 	Compare_Fail
.0105d7					Binary_Greater:
.0105d7	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105da	b0 12		bcs $0105ee		bcs 	_BGString
.0105dc	18		clc			clc 									; numeric > signed
.0105dd	b5 00		lda $00,x		lda 	EXSValueL,x
.0105df	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105e1	b5 10		lda $10,x		lda 	EXSValueH,x
.0105e3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105e5	50 03		bvc $0105ea		bvc 	*+5
.0105e7	49 00 80	eor #$8000		eor 	#$8000
.0105ea	10 a2		bpl $01058e		bpl 	Compare_Succeed
.0105ec	80 a8		bra $010596		bra 	Compare_Fail
.0105ee					_BGString:
.0105ee	c9 01 00	cmp #$0001		cmp 	#$0001
.0105f1	f0 9b		beq $01058e		beq 	Compare_Succeed
.0105f3	80 a1		bra $010596		bra 	Compare_Fail
.0105f5					CompareTypeCheck:
.0105f5	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105f7	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105f9	30 06		bmi $010601		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105fb	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105fd	30 1c		bmi $01061b		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105ff	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010600	60		rts			rts
.010601					_CTCFail:
.010601	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010604	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01060c	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01061b					_CTCStringCompare:
.01061b	20 dc 03	jsr $0103dc		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01061e	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010620	85 08		sta $08			sta 	DTemp1
.010622	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010624	85 0c		sta $0c			sta 	DTemp2
.010626	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010629	a8		tay			tay
.01062a	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01062c	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01062e	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010630	90 02		bcc $010634		bcc 	_CTCSmallest
.010632	b2 0c		lda ($0c)		lda 	(DTemp2)
.010634					_CTCSmallest:
.010634	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010636					_CTCCompare:
.010636	c8		iny			iny 									; look at next character (done first, first char is size)
.010637	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010639	30 16		bmi $010651		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01063b	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01063d	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01063f	f0 f5		beq $010636		beq 	_CTCCompare 					; if zero, try the next character.
.010641	b0 07		bcs $01064a		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010643					_CTCLess:
.010643	c2 20		rep #$20		rep 	#$20
.010645	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010648	80 14		bra $01065e		bra 	_CTCExit
.01064a					_CTCGreater:
.01064a	c2 20		rep #$20		rep 	#$20
.01064c	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01064f	80 0d		bra $01065e		bra 	_CTCExit
.010651					_CTCEqualSoFar:
.010651	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010653	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010655	90 ec		bcc $010643		bcc 	_CTCLess
.010657	d0 f1		bne $01064a		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010659	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01065b	a9 00 00	lda #$0000		lda 	#$0000
.01065e					_CTCExit:
.01065e	38		sec			sec 									; return with CS indicating string comparison.
.01065f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010660					Binary_Divide:
.010660	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.010663	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010665	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010667	d0 14		bne $01067d		bne 	_BinaryDivide_Ok
.010669	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01066c	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010674	20 62 79 20 7a 65 72 6f 00
.01067d					_BinaryDivide_Ok:
.01067d	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.01067f	64 0a		stz $0a			stz 	DTemp1+2
.010681	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010683	5a		phy			phy 										; save Y (bit counter)
.010684	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010686	10 07		bpl $01068f		bpl 	_BinaryDivide_RightDone
.010688	e8		inx			inx
.010689	e8		inx			inx
.01068a	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.01068d	ca		dex			dex
.01068e	ca		dex			dex
.01068f					_BinaryDivide_RightDone:
.01068f	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010691	10 03		bpl $010696		bpl 	_BinaryDivide_LeftDone
.010693	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.010696					_BinaryDivide_LeftDone:
.010696	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010699					_BinaryDivide_Loop:
.010699	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01069b	36 10		rol $10,x		rol 	EXSValueH+0,x
.01069d	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01069f	26 0a		rol $0a			rol 	DTemp1+2
.0106a1	38		sec			sec											; calculate A-M
.0106a2	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0106a4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106a6	85 0c		sta $0c			sta 	DTemp2
.0106a8	a5 0a		lda $0a			lda 	DTemp1+2
.0106aa	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106ac	90 08		bcc $0106b6		bcc 	_Binary_NoSubract 					; if A < M skip this
.0106ae	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0106b0	a5 0c		lda $0c			lda 	DTemp2
.0106b2	85 08		sta $08			sta 	DTemp1+0
.0106b4	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0106b6					_Binary_NoSubract:
.0106b6	88		dey			dey 										; do it 32 times.
.0106b7	d0 e0		bne $010699		bne 	_BinaryDivide_Loop
.0106b9					_BinaryDivide_Exit:
.0106b9	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0106bb	29 01 00	and #$0001		and 	#1
.0106be	f0 03		beq $0106c3		beq 	_BinaryDivide_Exit2
.0106c0	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.0106c3					_BinaryDivide_Exit2:
.0106c3	7a		ply			ply 										; restore Y
.0106c4	60		rts			rts
.0106c5					Binary_DivNegate:
.0106c5	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106c7	38		sec			sec 										; negate the value at stack X.
.0106c8	a9 00 00	lda #$0000		lda 	#$0000
.0106cb	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106cd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106cf	a9 00 00	lda #$0000		lda 	#$0000
.0106d2	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106d4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106d6	60		rts			rts
.0106d7					Binary_Modulus:
.0106d7	20 60 06	jsr $010660		jsr 	Binary_Divide 						; do the divide
.0106da	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106dc	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106de	a5 0a		lda $0a			lda 	DTemp1+2
.0106e0	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106e2	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106e3					Binary_Multiply:
.0106e3	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0106e6	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106e8	85 08		sta $08			sta 	DTemp1
.0106ea	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106ec	85 0a		sta $0a			sta		DTemp1+2
.0106ee	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106f0	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106f2					_BinaryMultiply_Loop:
.0106f2	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106f4	05 0a		ora $0a			ora 	DTemp1+2
.0106f6	f0 1e		beq $010716		beq 	_BinaryMultiply_Exit
.0106f8	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106fa	29 01 00	and #$0001		and 	#1
.0106fd	f0 0d		beq $01070c		beq 	_BinaryMultiply_NoAdd
.0106ff	18		clc			clc 										; add multiplicand to result.
.010700	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010702	75 02		adc $02,x		adc 	EXSValueL+2,x
.010704	95 00		sta $00,x		sta 	EXSValueL+0,x
.010706	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010708	75 12		adc $12,x		adc 	EXSValueH+2,x
.01070a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01070c					_BinaryMultiply_NoAdd:
.01070c	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01070e	66 08		ror $08			ror 	DTemp1
.010710	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010712	36 12		rol $12,x		rol 	EXSValueH+2,x
.010714	80 dc		bra $0106f2		bra 	_BinaryMultiply_Loop 				; go round again.
.010716					_BinaryMultiply_Exit:
.010716	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010717					Function_Len:
.010717	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.01071a	20 08 02	jsr $010208			jsr 	EvaluateNextString 			; get the value you are absoluting
.01071d	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.010720	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010722	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010725	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010728	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01072a	74 10		stz $10,x			stz 	EXSValueH+0,x
.01072c	60		rts				rts
.01072d					Function_Abs:
.01072d	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.010730	20 e9 01	jsr $0101e9			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010733	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.010736	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010738	30 07		bmi $010741			bmi 	_FAbsNegative 				; negate it if negative
.01073a	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01073c	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01073e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010740	60		rts				rts
.010741					_FAbsNegative:
.010741	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010742	a9 00 00	lda #$0000			lda 	#0
.010745	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010747	95 00		sta $00,x			sta 	EXSValueL+0,x
.010749	a9 00 00	lda #$0000			lda 	#0
.01074c	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01074e	95 10		sta $10,x			sta 	EXSValueH+0,x
.010750	60		rts				rts
.010751					Function_Sgn:
.010751	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns integer
.010754	20 e9 01	jsr $0101e9			jsr 	EvaluateNextInteger 		; get an integer
.010757	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.01075a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01075c	74 10		stz $10,x			stz 	EXSValueH+0,x
.01075e	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010760	30 07		bmi $010769			bmi 	_FSgnNegative 				; set to -1 if signed
.010762	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010764	f0 02		beq $010768			beq 	_FSgnExit
.010766	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010768					_FSgnExit:
.010768	60		rts				rts
.010769					_FSgnNegative:
.010769	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01076c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01076e	95 10		sta $10,x			sta 	EXSValueH+0,x
.010770	60		rts				rts
.010771					Function_Random:
.010771	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger
.010774	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010776	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010778	d0 0a		bne $010784			bne 	_Rnd_NotZero
.01077a	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01077d	85 10		sta $10				sta 	DRandom
.01077f	a9 ea 00	lda #$00ea			lda 	#$EA
.010782	85 12		sta $12				sta 	DRandom+2
.010784					_Rnd_NotZero:
.010784	20 8f 07	jsr $01078f			jsr 	_Rnd_Process 				; call randomiser twice
.010787	95 10		sta $10,x			sta 	EXSValueH+0,x
.010789	20 8f 07	jsr $01078f			jsr 	_Rnd_Process
.01078c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01078e	60		rts				rts
.01078f					_Rnd_Process:
.01078f	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010791	26 12		rol $12				rol 	DRandom+2
.010793	90 0e		bcc $0107a3			bcc 	_Rnd_Exit
.010795	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010797	49 54 d4	eor #$d454			eor 	#$D454
.01079a	85 10		sta $10				sta 	DRandom
.01079c	a5 12		lda $12				lda 	DRandom+2
.01079e	49 d5 55	eor #$55d5			eor 	#$55D5
.0107a1	85 12		sta $12				sta 	DRandom+2
.0107a3					_Rnd_Exit:
.0107a3	a5 10		lda $10				lda 	DRandom
.0107a5	45 12		eor $12				eor 	DRandom+2
.0107a7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0107a8					Function_VAL:
.0107a8	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.0107ab	20 08 02	jsr $010208			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107ae	48		pha				pha 								; put string address on stack.
.0107af	20 bf 07	jsr $0107bf			jsr 	VALGetBase 					; process , base (shared with STR$())
.0107b2	7a		ply				ply 								; get string address back
.0107b3	da		phx				phx 								; save X on stack
.0107b4	aa		tax				tax 								; base in X
.0107b5	98		tya				tya 								; address in A
.0107b6	20 f9 07	jsr $0107f9			jsr 	StringToInteger
.0107b9	fa		plx				plx 								; restore X
.0107ba	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107bc	94 10		sty $10,x			sty 	EXSValueH+0,x
.0107be	60		rts				rts
.0107bf					VALGetBase:
.0107bf	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0107c1	c9 16 32	cmp #$3216			cmp 	#commaTokenID 				; if comma, go to get base code.
.0107c4	f0 07		beq $0107cd			beq 	_VGBAlternate
.0107c6	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket			; expect ), and return 10.
.0107c9	a9 0a 00	lda #$000a			lda 	#10
.0107cc	60		rts				rts
.0107cd					_VGBAlternate:
.0107cd	20 b3 03	jsr $0103b3			jsr 	ExpectComma 				; skip comma.
.0107d0	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; get base
.0107d3	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0107d6	d0 0e		bne $0107e6			bne 	_VGBBadBase
.0107d8	c9 02 00	cmp #$0002			cmp 	#2
.0107db	90 09		bcc $0107e6			bcc 	_VGBBadBase
.0107dd	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0107e0	b0 04		bcs $0107e6			bcs 	_VGBBadBase
.0107e2	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; get right bracket and return.
.0107e5	60		rts				rts
.0107e6					_VGBBadBase:
.0107e6	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0107e9	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0107f1	65 72 20 42 61 73 65 00
.0107f9					StringToInteger:
.0107f9	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.0107fb	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.0107fd	64 09		stz $09				stz 	DTemp1+1
.0107ff	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010801	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010803	29 ff 00	and #$00ff			and 	#$00FF
.010806	85 26		sta $26				sta 	DTemp3+2
.010808	f0 68		beq $010872			beq 	_STIError 					; if length zero it's bad.
.01080a	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.01080c	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01080e	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010811	48		pha				pha 								; push on stack
.010812	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010815	d0 06		bne $01081d			bne 	_STILoop
.010817	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010819	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01081b	f0 55		beq $010872			beq 	_STIError 					; if only - then error.
.01081d					_STILoop:
.01081d	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01081f	20 91 08	jsr $010891			jsr 	MultiplyTemp1ByA
.010822	b2 24		lda ($24)			lda 	(DTemp3)
.010824	29 ff 00	and #$00ff			and 	#$00FF
.010827	20 82 08	jsr $010882			jsr 	ConvertUpperCase
.01082a	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.01082d	90 43		bcc $010872			bcc 	_STIError
.01082f	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010832	90 0e		bcc $010842			bcc 	_STIOkay1
.010834	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010837	90 39		bcc $010872			bcc 	_STIError
.010839	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01083c	b0 34		bcs $010872			bcs 	_STIError
.01083e	18		clc				clc 								; shift to correct range.
.01083f	69 09 00	adc #$0009			adc 	#9
.010842					_STIOkay1:
.010842	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010845	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010847	b0 29		bcs $010872			bcs 	_STIError
.010849	18		clc				clc 								; add A to DTemp1
.01084a	65 08		adc $08				adc 	DTemp1
.01084c	85 08		sta $08				sta 	DTemp1
.01084e	90 02		bcc $010852			bcc 	_STINoCarry
.010850	e6 0a		inc $0a				inc 	DTemp1+2
.010852					_STINoCarry:
.010852	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010854	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010856	d0 c5		bne $01081d			bne 	_STILoop 					; loop back.
.010858	68		pla				pla 								; get optional minus bac
.010859	c9 2d 00	cmp #$002d			cmp 	#"-"
.01085c	d0 0f		bne $01086d			bne 	_STINotNegative 			; handle the negative character
.01085e	38		sec				sec 								; negate DTemp1
.01085f	a9 00 00	lda #$0000			lda 	#0
.010862	e5 08		sbc $08				sbc 	DTemp1
.010864	85 08		sta $08				sta 	DTemp1
.010866	a9 00 00	lda #$0000			lda 	#0
.010869	e5 0a		sbc $0a				sbc 	DTemp1+2
.01086b	85 0a		sta $0a				sta 	DTemp1+2
.01086d					_STINotNegative:
.01086d	a5 08		lda $08				lda 	DTemp1 						; get the result
.01086f	a4 0a		ldy $0a				ldy 	DTemp1+2
.010871	60		rts				rts
.010872					_STIError:
.010872	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010875	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01087d	74 61 6e 74 00
.010882					ConvertUpperCase:
.010882	c9 61 00	cmp #$0061			cmp 	#'a'
.010885	90 09		bcc $010890			bcc 	_CUCExit
.010887	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01088a	b0 04		bcs $010890			bcs 	_CUCExit
.01088c	38		sec				sec
.01088d	e9 20 00	sbc #$0020			sbc 	#32
.010890					_CUCExit:
.010890	60		rts				rts
.010891					MultiplyTemp1ByA:
.010891	80 19		bra $0108ac			bra 	_MTGeneral
.010893	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010896	f0 5b		beq $0108f3			beq 	_MT1_16
.010898	c9 0a 00	cmp #$000a			cmp 	#10
.01089b	f0 38		beq $0108d5			beq 	_MT1_10
.01089d	c9 08 00	cmp #$0008			cmp 	#8
.0108a0	f0 55		beq $0108f7			beq 	_MT1_8
.0108a2	c9 04 00	cmp #$0004			cmp 	#4
.0108a5	f0 54		beq $0108fb			beq 	_MT1_4
.0108a7	c9 02 00	cmp #$0002			cmp 	#2
.0108aa	f0 53		beq $0108ff			beq 	_MT1_2
.0108ac					_MTGeneral:
.0108ac	da		phx				phx
.0108ad	aa		tax				tax 								; multiplier in X
.0108ae	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0108b0	85 0c		sta $0c				sta 	DTemp2
.0108b2	a5 0a		lda $0a				lda 	DTemp1+2
.0108b4	85 0e		sta $0e				sta 	DTemp2+2
.0108b6	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.0108b8	64 0a		stz $0a				stz 	DTemp1+2
.0108ba					_MTLoop:
.0108ba	8a		txa				txa 								; shift X right into C
.0108bb	4a		lsr a				lsr 	a
.0108bc	aa		tax				tax
.0108bd	90 0d		bcc $0108cc			bcc 	_MTNoAdd
.0108bf	18		clc				clc
.0108c0	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0108c2	65 0c		adc $0c				adc 	DTemp2
.0108c4	85 08		sta $08				sta 	DTemp1
.0108c6	a5 0a		lda $0a				lda 	DTemp1+2
.0108c8	65 0e		adc $0e				adc 	DTemp2+2
.0108ca	85 0a		sta $0a				sta 	DTemp1+2
.0108cc					_MTNoAdd:
.0108cc	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0108ce	26 0e		rol $0e				rol 	DTemp2+2
.0108d0	8a		txa				txa 								; until multiplier is zero.
.0108d1	d0 e7		bne $0108ba			bne 	_MTLoop
.0108d3					_MTGExit:
.0108d3	fa		plx				plx 								; restore X
.0108d4	60		rts				rts 								; and exit
.0108d5					_MT1_10:
.0108d5	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.0108d7	48		pha				pha
.0108d8	a5 08		lda $08				lda 	DTemp1
.0108da	48		pha				pha
.0108db	06 08		asl $08				asl 	DTemp1						; x 4
.0108dd	26 0a		rol $0a				rol 	DTemp1+2
.0108df	06 08		asl $08				asl 	DTemp1
.0108e1	26 0a		rol $0a				rol 	DTemp1+2
.0108e3	68		pla				pla 								; add saved value, x 5
.0108e4	18		clc				clc
.0108e5	65 08		adc $08				adc 	DTemp1
.0108e7	85 08		sta $08				sta 	DTemp1
.0108e9	68		pla				pla
.0108ea	65 08		adc $08				adc 	DTemp1
.0108ec	85 08		sta $08				sta 	DTemp1
.0108ee	06 08		asl $08				asl 	DTemp1
.0108f0	26 0a		rol $0a				rol 	DTemp1+2
.0108f2	60		rts				rts
.0108f3					_MT1_16:
.0108f3	06 08		asl $08				asl 	DTemp1
.0108f5	26 0a		rol $0a				rol 	DTemp1+2
.0108f7					_MT1_8:
.0108f7	06 08		asl $08				asl 	DTemp1
.0108f9	26 0a		rol $0a				rol 	DTemp1+2
.0108fb					_MT1_4:
.0108fb	06 08		asl $08				asl 	DTemp1
.0108fd	26 0a		rol $0a				rol 	DTemp1+2
.0108ff					_MT1_2
.0108ff	06 08		asl $08				asl 	DTemp1
.010901	26 0a		rol $0a				rol 	DTemp1+2
.010903	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010904					Function_Let:
.010904	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010906	48		pha				pha
.010907	20 4f 02	jsr $01024f			jsr 	VariableFind 				; find the variable
.01090a	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01090c	b0 1c		bcs $01092a			bcs 	_FLetFound 					; skip if found.
.01090e	68		pla				pla 								; get and push the first token again.
.01090f	48		pha				pha
.010910	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010913	d0 51		bne $010966			bne 	_FLError					; arrays, so this causes an error.
.010915	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010917	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01091a	20 07 03	jsr $010307			jsr 	VariableCreate 				; create it.
.01091d	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01091f					_FLSkipToken:
.01091f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010921	e6 06		inc $06				inc 	DCodePtr
.010923	e6 06		inc $06				inc 	DCodePtr
.010925	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010928	d0 f5		bne $01091f			bne 	_FLSkipToken
.01092a					_FLetFound:
.01092a	68		pla				pla 								; get and save the first token.
.01092b	48		pha				pha
.01092c	a8		tay				tay 								; put it in Y
.01092d	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010930	f0 07		beq $010939			beq 	_FLetNotArray
.010932	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010934	20 c6 02	jsr $0102c6			jsr 	VariableSubscript			; index calculation
.010937	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010939					_FLetNotArray:
.010939	7a		ply				ply 								; get the first token into Y
.01093a	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01093c	48		pha				pha
.01093d	5a		phy				phy 								; save the first token on the stack.
.01093e	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010941	20 90 03	jsr $010390			jsr 	ExpectToken
.010944	68		pla				pla 								; restore the first token.
.010945	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010948	d0 0f		bne $010959			bne 	_FLetString 				; skip if string.
.01094a	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; get an integer
.01094d	7a		ply				ply 								; get address in Y
.01094e	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010950	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010953	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010955	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010958	60		rts				rts
.010959					_FLetString:
.010959	20 ef 01	jsr $0101ef			jsr 	EvaluateString 				; get a string.
.01095c	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01095e	20 22 04	jsr $010422			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010961	7a		ply				ply 								; get address
.010962	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010965	60		rts				rts
.010966					_FLError:
.010966	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010969	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010971	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010979					Function_END:
.010979	02 00		cop #$00			cop 	#0
.01097b					Function_RUN:
.01097b	20 d3 09	jsr $0109d3			jsr 	Function_CLEAR 				; clear all variables.
.01097e	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010980	18		clc				clc
.010981	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010984					_FRun_NextLineNumber:
.010984	a8		tay				tay 								; put in Y
.010985	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010988	f0 ef		beq $010979			beq 	Function_END 				; if zero, off the end of the program
.01098a	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01098d	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01098f	98		tya				tya 								; get address back
.010990	18		clc				clc 								; skip over the link/line number
.010991	69 04 00	adc #$0004			adc 	#4
.010994	85 06		sta $06				sta 	DCodePtr
.010996					_FRun_NextInstruction:
.010996	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010999	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01099b	38		sec				sec
.01099c	e9 00 01	sbc #$0100			sbc 	#256
.01099f	85 16		sta $16				sta 	DTempStringPointer
.0109a1	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0109a3	f0 28		beq $0109cd			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0109a5	c9 18 32	cmp #$3218			cmp 	#colonTokenID 				; colon then skip
.0109a8	f0 18		beq $0109c2			beq 	_FRun_Colon
.0109aa	a8		tay				tay 								; save in Y
.0109ab	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.0109ae	c9 00 20	cmp #$2000			cmp 	#$2000
.0109b1	d0 15		bne $0109c8			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0109b3	98		tya				tya 								; get token back
.0109b4	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0109b7	0a		asl a				asl 	a 							; double it into X
.0109b8	aa		tax				tax
.0109b9	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0109bb	e6 06		inc $06				inc 	DCodePtr
.0109bd	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0109c0	80 d4		bra $010996			bra 	_FRun_NextInstruction 		; do the following instruction.
.0109c2					_FRun_Colon:
.0109c2	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0109c4	e6 06		inc $06				inc 	DCodePtr
.0109c6	80 ce		bra $010996			bra 	_FRun_NextInstruction 		; do the following instruction.
.0109c8					_FRun_TryLET:
.0109c8	20 04 09	jsr $010904			jsr 	Function_LET 				; try as a LET.
.0109cb	80 c9		bra $010996			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0109cd					_FRun_EndInstruction:
.0109cd	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.0109cf	1a		inc a				inc 	a 							; go to link for next line
.0109d0	1a		inc a				inc 	a
.0109d1	80 b1		bra $010984			bra 	_FRun_NextLineNumber
.0109d3					Function_CLEAR:
.0109d3	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.0109d6	a9 00 00	lda #$0000			lda 	#$0000
.0109d9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109db	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0109dd	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0109e0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109e2	20 09 0a	jsr $010a09			jsr 	FindCodeEnd 				; find where the program ends.
.0109e5	a8		tay				tay 								; Y points to it.
.0109e6	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.0109e9	99 02 00	sta $0002,y			sta 	$0002,y
.0109ec	99 04 00	sta $0004,y			sta 	$0004,y
.0109ef	98		tya				tya 								; start of working memory up
.0109f0	18		clc				clc
.0109f1	69 06 00	adc #$0006			adc 	#6
.0109f4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0109f7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109f9	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0109fc					_FCLoop:
.0109fc	a9 00 00	lda #$0000			lda 	#$0000
.0109ff	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010a01	c8		iny				iny
.010a02	c8		iny				iny
.010a03	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010a06	d0 f4		bne $0109fc			bne 	_FCLoop
.010a08	60		rts				rts
.010a09					FindCodeEnd:
.010a09	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010a0c	18		clc				clc
.010a0d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010a0f	a8		tay				tay
.010a10					_FCELoop:
.010a10	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010a13	f0 08		beq $010a1d			beq 	_FCEExit
.010a15	98		tya				tya 								; add offset
.010a16	18		clc				clc
.010a17	79 00 00	adc $0000,y			adc 	$0000,y
.010a1a	a8		tay				tay
.010a1b	80 f3		bra $010a10			bra 	_FCELoop
.010a1d					_FCEExit:
.010a1d	98		tya				tya 								; return in A
.010a1e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010a1f					Function_Dim:
.010a1f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a21	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010a24	f0 3b		beq $010a61			beq		_FDIMNotArray 				; no, error.
.010a26	20 4f 02	jsr $01024f			jsr 	VariableFind 				; try to find it.
.010a29	b0 41		bcs $010a6c			bcs 	_FDIMExists 				; if it does, that's an error.
.010a2b	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010a2d	48		pha				pha
.010a2e	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010a30	48		pha				pha
.010a31					_FDIMSkip:
.010a31	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010a33	e6 06		inc $06				inc 	DCodePtr
.010a35	e6 06		inc $06				inc 	DCodePtr
.010a37	29 00 08	and #$0800			and 	#IDContMask
.010a3a	d0 f5		bne $010a31			bne 	_FDIMSkip
.010a3c	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; evaluate the size
.010a3f	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check the ) following.
.010a42	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010a45	d0 3b		bne $010a82			bne 	_FDIMSize
.010a47	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010a4a	f0 36		beq $010a82			beq 	_FDIMSize
.010a4c	7a		ply				ply 								; restore HashTablePtr
.010a4d	84 20		sty $20				sty 	DHashTablePtr
.010a4f	7a		ply				ply 								; so now A is the high index, Y points to the token
.010a50	20 07 03	jsr $010307			jsr 	VariableCreate 				; create the variable.
.010a53	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010a55	c9 16 32	cmp #$3216			cmp 	#commaTokenID 				; if not a comma, exit
.010a58	d0 06		bne $010a60			bne 	_FDIMExit
.010a5a	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010a5c	e6 06		inc $06				inc 	DCodePtr
.010a5e	80 bf		bra $010a1f			bra 	Function_DIM 				; and do another
.010a60					_FDIMExit:
.010a60	60		rts				rts
.010a61					_FDIMNotArray:
.010a61	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a64	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010a6c					_FDIMExists:
.010a6c	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a6f	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010a77	65 64 69 6d 65 6e 73 69 6f 6e 00
.010a82					_FDIMSize:
.010a82	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a85	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010a8d	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010a93					Function_COLLECT:
.010a93	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010a95	85 0c		sta $0c				sta 	DTemp2
.010a97	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010a9a	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010a9c	85 0e		sta $0e				sta 	DTemp2+2
.010a9e	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010aa0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010aa2					_FCNextPass:
.010aa2	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010aa4	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010aa6	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010aa8	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010aab	18		clc				clc
.010aac	65 02		adc $02				adc 	DBaseAddress
.010aae	a8		tay				tay 								; put in Y
.010aaf	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010ab2					_FCO1:
.010ab2	20 d8 0a	jsr $010ad8			jsr  	COLLECTScanVariable 		; scan that one.
.010ab5	c8		iny				iny 	 							; go to next pointer
.010ab6	c8		iny				iny
.010ab7	ca		dex				dex
.010ab8	d0 f8		bne $010ab2			bne 	_FCO1 						; until done all 16.
.010aba	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010abd					_FCO2:
.010abd	20 ec 0a	jsr $010aec			jsr  	COLLECTScanArray 			; scan that one.
.010ac0	c8		iny				iny 	 							; go to next pointer
.010ac1	c8		iny				iny
.010ac2	ca		dex				dex
.010ac3	d0 f8		bne $010abd			bne 	_FCO2 						; until done all 16.
.010ac5	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010ac7	f0 0e		beq $010ad7			beq		_FCExit 					; if finished then exit.
.010ac9	48		pha				pha 								; save the target address
.010aca	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010acc	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010ace	20 22 04	jsr $010422			jsr 	StringMakeConcrete 			; make the string concrete.
.010ad1	7a		ply				ply 								; restore the string.
.010ad2	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010ad5	80 cb		bra $010aa2			bra		_FCNextPass
.010ad7					_FCExit:
.010ad7	60		rts				rts
.010ad8					COLLECTScanVariable:
.010ad8	da		phx				phx 								; save XY
.010ad9	5a		phy				phy
.010ada					_CSVLoop:
.010ada	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010add	f0 0a		beq $010ae9			beq 	_CSVExit
.010adf	a8		tay				tay 								; put new address into Y
.010ae0	18		clc				clc 								; which is four on.
.010ae1	69 04 00	adc #$0004			adc 	#4
.010ae4	20 0b 0b	jsr $010b0b			jsr 	COLLECTCheck
.010ae7	80 f1		bra $010ada			bra 	_CSVLoop
.010ae9					_CSVExit:
.010ae9	7a		ply				ply
.010aea	fa		plx				plx
.010aeb	60		rts				rts
.010aec					COLLECTScanArray:
.010aec	da		phx				phx 								; save XY
.010aed	5a		phy				phy
.010aee					_CSALoop:
.010aee	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010af1	f0 15		beq $010b08			beq 	_CSAExit
.010af3	a8		tay				tay 								; put new address in Y
.010af4	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010af7	aa		tax				tax
.010af8	e8		inx				inx									; +1 as one more data element.
.010af9	98		tya				tya 								; point A to first element, at +6
.010afa	18		clc				clc
.010afb	69 06 00	adc #$0006			adc 	#6
.010afe					_CSADoAllStrings:
.010afe	20 0b 0b	jsr $010b0b			jsr 	COLLECTCheck 				; collect check the first.
.010b01	1a		inc a				inc 	a 							; advance the pointer.
.010b02	1a		inc a				inc 	a
.010b03	ca		dex				dex
.010b04	d0 f8		bne $010afe			bne 	_CSADoAllStrings 			; until all strings are done.
.010b06	80 e6		bra $010aee			bra 	_CSALoop
.010b08					_CSAExit:
.010b08	7a		ply				ply
.010b09	fa		plx				plx
.010b0a	60		rts				rts
.010b0b					COLLECTCheck:
.010b0b	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010b0d	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010b0f	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010b11	90 0a		bcc $010b1d			bcc 	_COCExit
.010b13	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010b15	b0 06		bcs $010b1d			bcs 	_COCExit
.010b17	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010b19	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010b1b	85 14		sta $14				sta 	DSignCount
.010b1d					_COCExit:
.010b1d	a5 0a		lda $0a				lda 	DTemp1+2
.010b1f	60		rts				rts
.010b20	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010b21					Function_ASSERT:
.010b21	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; something that returns an integer.
.010b24	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010b26	05 08		ora $08				ora 	Dtemp1
.010b28	f0 01		beq $010b2b			beq 	_FAssFail
.010b2a	60		rts				rts
.010b2b					_FAssFail:
.010b2b	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010b2e	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010b36	61 69 6c 65 64 00

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010b3c					SwitchBasicInstance:
.010b3c	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010b3e	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010b41	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010b43	86 02		stx $02				stx		DBaseAddress
.010b45	84 04		sty $04				sty 	DHighAddress
.010b47	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010b48	48		pha				pha 										; then copy it into B.
.010b49	ab		plb				plb
.010b4a	ab		plb				plb
.010b4b	4c 7b 09	jmp $01097b			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	22 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1c 00 0a 00 01 c0 06 22
>024108	15 30 0a 00 06 2d 31 30 30 30 61 00 16 32 10 40
>024118	1a 32 00 00 00 00 ee ee ee ee 00 00 00 00 00 00
>024128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2028 times (32448 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
