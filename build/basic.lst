
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 15 10:22:36 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c f7 15 01	jmp $0115f7			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	7e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	6e 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	7e 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	8e 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	d2 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	39 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	9e 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	1b 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	fd 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	b8 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	b8 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	39 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	45 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	c2 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	39 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	4a 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	5c 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	d3 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	b3 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	8f 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	79 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	ed 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	0d 0c					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	0d 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	45 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	79 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	a1 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	bb 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	d2 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	0f 0d					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	cd 0c					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	b5 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	4c 0a					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	de 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	7e 04					.word IllegalToken             & $FFFF ; token $3222 ","
>010046	7e 04					.word IllegalToken             & $FFFF ; token $3223 ";"
>010048	7e 04					.word IllegalToken             & $FFFF ; token $3224 ":"
>01004a	7e 04					.word IllegalToken             & $FFFF ; token $3225 "("
>01004c	7e 04					.word IllegalToken             & $FFFF ; token $3226 ")"
>01004e	7e 04					.word IllegalToken             & $FFFF ; token $3227 "'"
>010050	7e 04					.word IllegalToken             & $FFFF ; token $3828 "to"
>010052	7e 04					.word IllegalToken             & $FFFF ; token $3829 "step"
>010054	e5 15					.word Function_REM             & $FFFF ; token $3e2a "rem"
>010056	51 0d					.word Function_Let             & $FFFF ; token $3e2b "let"
>010058	c6 15					.word Function_ASSERT          & $FFFF ; token $3e2c "assert"
>01005a	c3 13					.word Function_END             & $FFFF ; token $3e2d "end"
>01005c	c5 13					.word Function_RUN             & $FFFF ; token $3e2e "run"
>01005e	22 14					.word Function_STOP            & $FFFF ; token $3e2f "stop"
>010060	1e 14					.word Function_CLEAR           & $FFFF ; token $3e30 "clear"
>010062	7d 14					.word Function_Dim             & $FFFF ; token $3e31 "dim"
>010064	f1 14					.word Function_COLLECT         & $FFFF ; token $3e32 "collect"
>010066	e1 15					.word Function_CLS             & $FFFF ; token $3e33 "cls"
>010068	4f 0f					.word Function_PRINT           & $FFFF ; token $3e34 "print"
>01006a	51 12					.word Function_GOTO            & $FFFF ; token $3e35 "goto"
>01006c	b0 12					.word Function_GOSUB           & $FFFF ; token $3e36 "gosub"
>01006e	cc 12					.word Function_RETURN          & $FFFF ; token $3e37 "return"
>010070	0e 12					.word Function_ONGOTO          & $FFFF ; token $3e38 "on"
>010072	02 10					.word Handler_ELSE             & $FFFF ; token $3e39 "else"
>010074	80 15					.word Command_POKE             & $FFFF ; token $3e3a "poke"
>010076	98 15					.word Command_DOKE             & $FFFF ; token $3e3b "doke"
>010078	ac 15					.word Command_LOKE             & $FFFF ; token $3e3c "loke"
>01007a	cc 0d					.word Command_List             & $FFFF ; token $3e3d "list"
>01007c	fe 12					.word Function_REPEAT          & $FFFF ; token $3c3e "repeat"
>01007e	5c 13					.word Function_WHILE           & $FFFF ; token $3c3f "while"
>010080	9b 0f					.word Function_IF              & $FFFF ; token $3c40 "if"
>010082	d7 10					.word Command_FOR              & $FFFF ; token $3c41 "for"
>010084	93 13					.word Function_WEND            & $FFFF ; token $3a42 "wend"
>010086	15 13					.word Function_UNTIL           & $FFFF ; token $3a43 "until"
>010088	7e 04					.word IllegalToken             & $FFFF ; token $3a44 "then"
>01008a	30 10					.word Handler_ENDIF            & $FFFF ; token $3a45 "endif"
>01008c	52 11					.word Command_NEXT             & $FFFF ; token $3a46 "next"
.01008e					TokenText:
>01008e	02 26					 .text $02,"&"        ; token $2001
>010090	02 7c					 .text $02,"|"        ; token $2002
>010092	02 5e					 .text $02,"^"        ; token $2003
>010094	12 3c					 .text $12,"<"        ; token $2204
>010096	12 3e					 .text $12,">"        ; token $2205
>010098	12 3d					 .text $12,"="        ; token $2206
>01009a	13 3c 3d				 .text $13,"<="       ; token $2207
>01009d	13 3e 3d				 .text $13,">="       ; token $2208
>0100a0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a3	22 2b					 .text $22,"+"        ; token $240a
>0100a5	22 2d					 .text $22,"-"        ; token $240b
>0100a7	32 2a					 .text $32,"*"        ; token $260c
>0100a9	32 2f					 .text $32,"/"        ; token $260d
>0100ab	32 25					 .text $32,"%"        ; token $260e
>0100ad	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b3	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100b8	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100bd	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c2	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100c7	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100cc	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d2	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100d8	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100dd	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e2	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100e8	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100ee	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f4	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>0100fc	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010104	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>01010b	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>010111	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>010119	92 2c					 .text $92,","        ; token $3222
>01011b	92 3b					 .text $92,";"        ; token $3223
>01011d	92 3a					 .text $92,":"        ; token $3224
>01011f	92 28					 .text $92,"("        ; token $3225
>010121	92 29					 .text $92,")"        ; token $3226
>010123	92 27					 .text $92,"'"        ; token $3227
>010125	c3 74 6f				 .text $c3,"to"       ; token $3828
>010128	c5 73 74 65 70				 .text $c5,"step"     ; token $3829
>01012d	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2a
>010131	f4 6c 65 74				 .text $f4,"let"      ; token $3e2b
>010135	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2c
>01013c	f4 65 6e 64				 .text $f4,"end"      ; token $3e2d
>010140	f4 72 75 6e				 .text $f4,"run"      ; token $3e2e
>010144	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2f
>010149	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e30
>01014f	f4 64 69 6d				 .text $f4,"dim"      ; token $3e31
>010153	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e32
>01015b	f4 63 6c 73				 .text $f4,"cls"      ; token $3e33
>01015f	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e34
>010165	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e35
>01016a	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e36
>010170	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e37
>010177	f3 6f 6e				 .text $f3,"on"       ; token $3e38
>01017a	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e39
>01017f	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3a
>010184	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3b
>010189	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3c
>01018e	f5 6c 69 73 74				 .text $f5,"list"     ; token $3e3d
>010193	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c3e
>01019a	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c3f
>0101a0	e3 69 66				 .text $e3,"if"       ; token $3c40
>0101a3	e4 66 6f 72				 .text $e4,"for"      ; token $3c41
>0101a7	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a42
>0101ac	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a43
>0101b2	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a44
>0101b7	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a45
>0101bd	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a46
>0101c2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3222					commaTokenID                     = $3222
=$3223					semicolonTokenID                 = $3223
=$3224					colonTokenID                     = $3224
=$3225					lparenTokenID                    = $3225
=$3226					rparenTokenID                    = $3226
=$3227					squoteTokenID                    = $3227
=$3828					toTokenID                        = $3828
=$3829					stepTokenID                      = $3829
=$3e2a					remTokenID                       = $3e2a
=$3e2b					letTokenID                       = $3e2b
=$3e2c					assertTokenID                    = $3e2c
=$3e2d					endTokenID                       = $3e2d
=$3e2e					runTokenID                       = $3e2e
=$3e2f					stopTokenID                      = $3e2f
=$3e30					clearTokenID                     = $3e30
=$3e31					dimTokenID                       = $3e31
=$3e32					collectTokenID                   = $3e32
=$3e33					clsTokenID                       = $3e33
=$3e34					printTokenID                     = $3e34
=$3e35					gotoTokenID                      = $3e35
=$3e36					gosubTokenID                     = $3e36
=$3e37					returnTokenID                    = $3e37
=$3e38					onTokenID                        = $3e38
=$3e39					elseTokenID                      = $3e39
=$3e3a					pokeTokenID                      = $3e3a
=$3e3b					dokeTokenID                      = $3e3b
=$3e3c					lokeTokenID                      = $3e3c
=$3e3d					listTokenID                      = $3e3d
=$3c3e					repeatTokenID                    = $3c3e
=$3c3f					whileTokenID                     = $3c3f
=$3c40					ifTokenID                        = $3c40
=$3c41					forTokenID                       = $3c41
=$3a42					wendTokenID                      = $3a42
=$3a43					untilTokenID                     = $3a43
=$3a44					thenTokenID                      = $3a44
=$3a45					endifTokenID                     = $3a45
=$3a46					nextTokenID                      = $3a46

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101c3					Evaluate:
.0101c3	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0101c6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101c9					EvaluateLevel:
.0101c9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101cc	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101ce	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101d0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101d3	b0 79		bcs $01024e			bcs 	_ELVariable
.0101d5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101d8	b0 16		bcs $0101f0			bcs 	_ELConstant
.0101da	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101dd	90 7f		bcc $01025e			bcc 	_ELStringConstant
.0101df	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101e2	90 03		bcc $0101e7			bcc 	_ELConstantShift
.0101e4	82 94 00	brl $01027b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101e7					_ELConstantShift:
.0101e7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101ea	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101ec	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101ee	e6 06		inc $06				inc 	DCodePtr
.0101f0					_ELConstant:
.0101f0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101f2	38		sec				sec  								; shift it in the range 0-32767
.0101f3	e9 00 40	sbc #$4000			sbc 	#$4000
.0101f6	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101f7	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101f9	6a		ror a				ror 	a 							; rotate that into the constant value
.0101fa	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101fc	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101fe	95 10		sta $10,x			sta 	EXSValueH+0,x
.010200	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010202	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010204	e6 06		inc $06				inc 	DCodePtr
.010206					_ELGotAtom:
.010206	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010208	a8		tay				tay 								; save in Y
.010209	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01020c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01020f	d0 35		bne $010246			bne 	_ELExit
.010211	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010213	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010216	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010218	98		tya				tya 								; get the keyword token back
.010219	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01021c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01021e	90 26		bcc $010246			bcc 	_ELExit 					; precedence too low, then exit.
.010220	5a		phy				phy 								; save the binary operator on the stack
.010221	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010223	e6 06		inc $06				inc 	DCodePtr
.010225	18		clc				clc 								; try the next level up
.010226	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010229	e8		inx				inx 								; calculate the RHS at the next stack level.
.01022a	e8		inx				inx
.01022b	20 c9 01	jsr $0101c9			jsr 	EvaluateLevel
.01022e	ca		dex				dex
.01022f	ca		dex				dex
.010230	7a		ply				ply 								; get operator token back into Y
.010231					_ELExecuteY:
.010231	98		tya				tya
.010232	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010235	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010236	9b		txy				txy 								; save X in Y
.010237	aa		tax				tax 								; double keyword ID in X
.010238	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01023c	bb		tyx				tyx 								; restore X.
.01023d	8f 42 02 01	sta $010242			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010241					_ELCallRoutine:
.010241	20 41 02	jsr $010241			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010244	80 c0		bra $010206			bra 	_ELGotAtom 					; go round operator level again.
.010246	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010248	0a		asl a				asl 	a
.010249	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01024b	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01024d	60		rts				rts
.01024e					_ELVariable:
.01024e	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.010250	20 0f 03	jsr $01030f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010253	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010255	94 10		sty $10,x			sty 	EXSValueH+0,x
.010257	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010259	80 ab		bra $010206			bra 	_ELGotAtom
.01025b					_ELSyntax
.01025b	82 31 02	brl $01048f			brl 	SyntaxError
.01025e					_ELStringConstant:
.01025e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010261	f0 f8		beq $01025b			beq 	_ELSyntax
.010263	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010265	1a		inc a				inc 	a
.010266	1a		inc a				inc 	a
.010267	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010269	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01026b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01026d	18		clc				clc 								; add to string constant.
.01026e	65 06		adc $06				adc 	DCodePtr
.010270	85 06		sta $06				sta 	DCodePtr
.010272	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010274	09 00 80	ora #$8000			ora 	#$8000
.010277	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010279	80 8b		bra $010206			bra 	_ELGotAtom
.01027b					_ELUnaryKeyword:
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01027d	a8		tay				tay 								; put the token in Y.
.01027e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010280	e6 06		inc $06				inc 	DCodePtr
.010282	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010285	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010288	f0 a7		beq $010231			beq 	_ELExecuteY					; go back and execute it
.01028a	c0 25 32	cpy #$3225			cpy 	#lparenTokenID 				; is it an open bracket ?
.01028d	d0 11		bne $0102a0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01028f	20 c6 02	jsr $0102c6			jsr 	EvaluateNext 				; evaluate the expression
.010292	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; consume the right bracket.
.010295					_ELCopy:
.010295	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010297	95 00		sta $00,x			sta 	EXSValueL+0,x
.010299	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01029b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01029d	82 66 ff	brl $010206			brl 	_ELGotAtom 					; and continue.
.0102a0					_ELUnaryOperator:
.0102a0	5a		phy				phy 								; save the operator on the stack.
.0102a1	e8		inx				inx 								; this is like evaluate next
.0102a2	e8		inx				inx
.0102a3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102a6	20 c9 01	jsr $0101c9			jsr 	EvaluateLevel
.0102a9	ca		dex				dex 								; unwind the stack.
.0102aa	ca		dex				dex
.0102ab	68		pla				pla 								; restore the unary operator.
.0102ac	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102af	f0 03		beq $0102b4			beq 	_ELMinus
.0102b1	4c 8f 04	jmp $01048f			jmp 	SyntaxError
.0102b4					_ELMinus:
.0102b4	38		sec				sec 								; do the negation calculation.
.0102b5	a9 00 00	lda #$0000			lda 	#0
.0102b8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ba	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102bc	a9 00 00	lda #$0000			lda 	#0
.0102bf	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102c1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102c3	82 40 ff	brl $010206			brl 	_ELGotAtom					; and continue.
.0102c6					EvaluateNext:
.0102c6	e8		inx				inx
.0102c7	e8		inx				inx
.0102c8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102cb	20 c9 01	jsr $0101c9			jsr 	EvaluateLevel
.0102ce	ca		dex				dex
.0102cf	ca		dex				dex
.0102d0	60		rts				rts
.0102d1					EvaluateInteger:
.0102d1	20 c3 01	jsr $0101c3			jsr 	Evaluate
.0102d4	b0 01		bcs $0102d7			bcs 	EIType
.0102d6	60		rts				rts
.0102d7					EIType:
.0102d7	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0102da	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102e2	78 70 65 63 74 65 64 00
.0102ea					EvaluateNextInteger:
.0102ea	20 c6 02	jsr $0102c6			jsr 	EvaluateNext
.0102ed	b0 e8		bcs $0102d7			bcs 	EIType
.0102ef	60		rts				rts
.0102f0					EvaluateString:
.0102f0	20 c3 01	jsr $0101c3			jsr 	Evaluate
.0102f3	90 01		bcc $0102f6			bcc 	ESType
.0102f5	60		rts				rts
.0102f6					ESType:
.0102f6	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0102f9	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010301	78 70 65 63 74 65 64 00
.010309					EvaluateNextString:
.010309	20 c6 02	jsr $0102c6			jsr 	EvaluateNext
.01030c	90 e8		bcc $0102f6			bcc 	ESType
.01030e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01030f					VariableAccessExpression:
.01030f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010311	48		pha				pha
.010312	20 50 03	jsr $010350			jsr 	VariableFind 				; try to find the variables
.010315	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010317	90 23		bcc $01033c			bcc 	_VANError 					; not found, so report an error.
.010319	68		pla				pla 								; get and save that first token
.01031a	48		pha				pha 								; we use it for typing.
.01031b	a8		tay				tay 								; put first token in Y.
.01031c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01031f	f0 07		beq $010328			beq 	_VANNotArray
.010321	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010323	20 c7 03	jsr $0103c7			jsr 	VariableSubscript			; index calculation
.010326	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010328					_VANNotArray:
.010328	68		pla				pla 								; get the token back.
.010329	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01032c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01032f	38		sec				sec 								; set up return string.
.010330	f0 06		beq $010338			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010332	18		clc				clc 								; returning a number, read high data word
.010333	a0 02 00	ldy #$0002			ldy 	#2
.010336	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010338					_VANLoadLower:
.010338	a8		tay				tay 								; put A into Y (this is the high byte)
.010339	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01033b	60		rts				rts
.01033c					_VANError:
.01033c	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>01033f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010347	20 75 6e 6b 6e 6f 77 6e 00
.010350					VariableFind:
.010350	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010352	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010355	90 5c		bcc $0103b3			bcc 	_VFError
.010357	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01035a	b0 11		bcs $01036d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01035c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01035f	3a		dec a				dec 	a 							; now 0-25
.010360	0a		asl a				asl 	a 							; x 4 and clear carry
.010361	0a		asl a				asl 	a
.010362	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010365	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010367	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010369	e6 06		inc $06				inc 	DCodePtr
.01036b	38		sec				sec 								; return with carry set.
.01036c	60		rts				rts
.01036d					_VFSlowVariable:
.01036d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01036f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010372	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010373	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010374	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010377	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010379	85 08		sta $08				sta 	DTemp1
.01037b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01037d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010380	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010381	65 08		adc $08				adc 	DTemp1
.010383	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010385	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010387					_VFNext:
.010387	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010389	f0 26		beq $0103b1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01038b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01038d	a8		tay				tay 								; read the address of the name at $0002,y
.01038e	b9 02 00	lda $0002,y			lda 	$0002,y
.010391	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010393	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010396					_VFCompare:
.010396	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010398	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01039a	d0 eb		bne $010387			bne 	_VFNext 					; if not, go to the next one.
.01039c	c8		iny				iny 								; advance token pointer
.01039d	c8		iny				iny
.01039e	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103a1	d0 f3		bne $010396			bne 	_VFCompare
.0103a3	98		tya				tya 								; this is the length of the word.
.0103a4	18		clc				clc 								; so we add it to the code pointer
.0103a5	65 06		adc $06				adc 	DCodePtr
.0103a7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103a9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103ab	18		clc				clc 								; four on is the actual data
.0103ac	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103af	38		sec				sec 								; return with CS indicating success
.0103b0	60		rts				rts
.0103b1					_VFFail:
.0103b1	18		clc				clc
.0103b2	60		rts				rts
.0103b3					_VFError:
.0103b3	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0103b6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103be	76 61 72 69 61 62 6c 65 00
.0103c7					VariableSubscript:
.0103c7	48		pha				pha		 							; save variable address on stack.
.0103c8	20 ea 02	jsr $0102ea			jsr		EvaluateNextInteger 		; get the subscript
.0103cb	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103ce	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103d1	d0 10		bne $0103e3			bne 	_VANSubscript
.0103d3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103d5	f0 02		beq $0103d9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103d7	b0 0a		bcs $0103e3			bcs 	_VANSubscript
.0103d9					_VANSubOkay:
.0103d9	0a		asl a				asl 	a 							; double lsword
.0103da	0a		asl a				asl 	a 							; and again, also clears carry.
.0103db	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103dd	68		pla				pla 								; restore DVariablePtr
.0103de	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103df	1a		inc a				inc 	a
.0103e0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103e2	60		rts				rts
.0103e3					_VANSubscript:
.0103e3	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0103e6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103ee	79 20 53 75 62 73 63 72 69 70 74 00
.0103fa					VariableCreate:
.0103fa	48		pha				pha 								; save count.
.0103fb	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103fe	29 00 20	and #$2000			and 	#IDTypeMask
.010401	f0 06		beq $010409			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010403	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010406	18		clc				clc 								; which is guaranteed by have a 0 length.
.010407	65 02		adc $02				adc 	DBaseAddress
.010409					_VCIsInteger:
.010409	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01040b	68		pla				pla 								; restore count
.01040c	48		pha				pha
.01040d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01040e	0a		asl a				asl 	a 							; 2 x # items.
.01040f	0a		asl a				asl 	a 							; 4 x # items.
.010410					_VCNotSingle:
.010410	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010412	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010415	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010418	f0 04		beq $01041e			beq 	_VCNotArray
.01041a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01041c	e6 08		inc $08				inc 	DTemp1
.01041e					_VCNotArray:
.01041e	5a		phy				phy 								; save address of first token on stack.
.01041f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010422	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010424	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010426	18		clc				clc 								; add 4 for link and name words
.010427	69 04 00	adc #$0004			adc 	#4
.01042a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01042c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01042e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010430					_VCErase:
.010430	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010432	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010435	c8		iny				iny
.010436	c8		iny				iny
.010437	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010439	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01043b	d0 f3		bne $010430			bne 	_VCErase
.01043d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01043f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010441	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010444	68		pla				pla 								; restore the token address
.010445	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010448	68		pla				pla 								; restore count and store.
.010449	99 04 00	sta $0004,y			sta 	$0004,y
.01044c	98		tya				tya 								; update the head link
.01044d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01044f	18		clc				clc 								; advance pointer to the data bit.
.010450	69 04 00	adc #$0004			adc 	#4
.010453	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010454					ErrorHandler:
.010454	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010456	fa		plx				plx 								; address of error message -1
.010457	e8		inx				inx 								; error message.
.010458	20 fb 04	jsr $0104fb			jsr 	PrintROMMessage 			; print message in ROM
.01045b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01045d	f0 15		beq $010474			beq 	_EHEndMessage
.01045f	a2 79 04	ldx #$0479			ldx 	#_EHAt & $FFFF 				; print " at "
.010462	20 fb 04	jsr $0104fb			jsr 	PrintROMMessage
.010465	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010467	a0 00 00	ldy #$0000			ldy 	#0
.01046a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01046d	20 28 0c	jsr $010c28			jsr 	ConvertToString 			; convert and print it.
.010470	a8		tay				tay
.010471	20 0f 05	jsr $01050f			jsr 	PrintBASICString
.010474					_EHEndMessage:
.010474	20 49 16	jsr $011649			jsr 	HWNewLine
.010477	80 fe		bra $010477	_EH1:	bra 	_EH1
>010479	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01047e					IllegalToken:
.01047e	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010481	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010489	54 6f 6b 65 6e 00
.01048f					SyntaxError:
.01048f	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010492	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01049a	72 72 6f 72 00
.01049f					ExpectToken:
.01049f	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104a1	d0 05		bne $0104a8			bne 	_CTKError					; error if not
.0104a3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104a5	e6 06		inc $06				inc 	DCodePtr
.0104a7	60		rts				rts
.0104a8					_CTKError:
.0104a8	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0104ab	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104b3	74 6f 6b 65 6e 00
.0104b9					ExpectRightBracket:
.0104b9	48		pha				pha
.0104ba	a9 26 32	lda #$3226			lda 	#rparenTokenID
.0104bd	20 9f 04	jsr $01049f			jsr 	ExpectToken
.0104c0	68		pla				pla
.0104c1	60		rts				rts
.0104c2					ExpectComma:
.0104c2	48		pha				pha
.0104c3	a9 22 32	lda #$3222			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104c6	20 9f 04	jsr $01049f			jsr 	ExpectToken
.0104c9	68		pla				pla
.0104ca	60		rts				rts
.0104cb					CheckBothNumeric:
.0104cb	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104cd	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0104cf	30 01		bmi $0104d2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104d1	60		rts				rts
.0104d2					_CBNFail:
.0104d2	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0104d5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104dd	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104eb					ResetTypeInteger:
.0104eb	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104ed	29 ff 7f	and #$7fff			and 	#$7FFF
.0104f0	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104f2	60		rts				rts
.0104f3					ResetTypeString:
.0104f3	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104f5	09 00 80	ora #$8000			ora 	#$8000
.0104f8	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104fa	60		rts				rts
.0104fb					PrintROMMessage:
.0104fb	48		pha				pha
.0104fc	da		phx				phx
.0104fd					_PRMLoop:
.0104fd	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010501	29 ff 00	and #$00ff			and 	#$00FF
.010504	f0 06		beq $01050c			beq 	_PRMExit
.010506	20 27 16	jsr $011627			jsr 	HWPrintChar
.010509	e8		inx				inx
.01050a	80 f1		bra $0104fd			bra 	_PRMLoop
.01050c					_PRMExit:
.01050c	fa		plx				plx
.01050d	68		pla				pla
.01050e	60		rts				rts
.01050f					PrintBASICString:
.01050f	48		pha				pha
.010510	da		phx				phx
.010511	5a		phy				phy
.010512	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010515	29 ff 00	and #$00ff			and 	#$00FF
.010518	f0 0b		beq $010525			beq 	_PBSExit 					; null string
.01051a	aa		tax				tax
.01051b					_PBSLoop:
.01051b	c8		iny				iny
.01051c	b9 00 00	lda $0000,y			lda 	$0000,y
.01051f	20 27 16	jsr $011627			jsr 	HWPrintChar
.010522	ca		dex				dex
.010523	d0 f6		bne $01051b			bne 	_PBSLoop
.010525					_PBSExit:
.010525	7a		ply				ply
.010526	fa		plx				plx
.010527	68		pla				pla
.010528	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010529					StringTempAllocate:
.010529	48		pha				pha
.01052a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01052c	d0 09		bne $010537			bne 	_STANoReset
.01052e	5a		phy				phy 								; reset the temp string pointer.
.01052f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010532	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010534	85 16		sta $16				sta 	DTempStringPointer
.010536	7a		ply				ply
.010537					_STANoReset:
.010537	68		pla				pla 								; get length.
.010538	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01053b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01053e	18		clc				clc 								; this adds one, for the length.
.01053f	65 16		adc $16				adc 	DTempStringPointer
.010541	85 16		sta $16				sta 	DTempStringPointer
.010543	48		pha				pha 								; save start address
.010544	a9 00 00	lda #$0000			lda 	#$0000
.010547	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010549	92 16		sta ($16)			sta		(DTempStringPointer)
.01054b	c2 20		rep #$20			rep 	#$20
.01054d	68		pla				pla 								; restore start address
.01054e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010550	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010552	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010554	60		rts				rts
.010555					StringWriteCharacter:
.010555	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010557	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010559	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01055b	1a		inc a				inc 	a
.01055c	92 18		sta ($18)			sta 	(DStartTempString)
.01055e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010560	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010562	60		rts				rts
.010563					StringCreateCopy:
.010563	a8		tay				tay 								; put pointer to string in Y
.010564	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010567	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01056a	f0 17		beq $010583			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01056c	da		phx				phx 								; save X and put the character count in X
.01056d	aa		tax				tax
.01056e					_SCCCopy:
.01056e	c8		iny				iny 								; advance and read (first time skips length)
.01056f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010571	b9 00 00	lda $0000,y			lda 	$0000,y
.010574	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010576	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010578	1a		inc a				inc 	a
.010579	92 18		sta ($18)			sta 	(DStartTempString)
.01057b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01057d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01057f	ca		dex				dex 								; do X times
.010580	d0 ec		bne $01056e			bne 	_SCCCopy
.010582	fa		plx				plx
.010583					_SCCExit:
.010583	60		rts				rts
.010584					StringMakeConcrete:
.010584	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010587	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010589	90 0f		bcc $01059a			bcc 	_SMCExit
.01058b	85 08		sta $08				sta 	DTemp1 						; source
.01058d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01058f	29 ff 00	and #$00ff			and 	#$00FF
.010592	d0 07		bne $01059b			bne 	_SMCNonZero 				; if not "" skip.
.010594	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010597	18		clc				clc 								; this reference is used for all empty strings.
.010598	65 02		adc $02				adc 	DBaseAddress
.01059a					_SMCExit:
.01059a	60		rts				rts
.01059b					_SMCNonZero:
.01059b	48		pha				pha 								; save on stack.
.01059c	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.01059f	18		clc				clc
.0105a0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105a3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105a5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105a7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105a9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105aa	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105ac					_SMCLoop:
.0105ac	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105ae	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105b0	88		dey				dey 								; Y+1 times.
.0105b1	10 f9		bpl $0105ac			bpl 	_SMCLoop
.0105b3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105b5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105b7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105b8					Binary_Add:
.0105b8	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0105ba	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105bc	30 12		bmi $0105d0		bmi 	_BATypeError
.0105be	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105c0	30 3f		bmi $010601		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105c2	18		clc			clc 										; add the results
.0105c3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105c5	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105c7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105cb	75 12		adc $12,x		adc 	EXSValueH+2,x
.0105cd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105cf	60		rts			rts
.0105d0					_BATypeError:
.0105d0	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0105d3	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105db	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105eb	65 73 00
.0105ee					_BALengthError:
.0105ee	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0105f1	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105f9	6f 6f 20 6c 6f 6e 67 00
.010601					_BAConcatenateString:
.010601	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010603	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010605	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010607	85 0c		sta $0c			sta 	DTemp2
.010609	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01060b	18		clc			clc 										; work out the total length
.01060c	b2 08		lda ($08)		lda 	(DTemp1)
.01060e	72 0c		adc ($0c)		adc 	(DTemp2)
.010610	b0 14		bcs $010626		bcs 	_BAConcatLengthError 				; string is too long.
.010612	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010614	20 29 05	jsr $010529		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010617	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010619	74 10		stz $10,x		stz 	EXSValueH+0,x
.01061b	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01061d	20 63 05	jsr $010563		jsr 	StringCreateCopy
.010620	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010622	20 63 05	jsr $010563		jsr 	StringCreateCopy
.010625	60		rts			rts
.010626					_BAConcatLengthError:
.010626	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010629	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010631	6f 6f 20 6c 6f 6e 67 00
.010639					Binary_Subtract:
.010639	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.01063c	38		sec			sec
.01063d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01063f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010641	95 00		sta $00,x		sta 	EXSValueL+0,x
.010643	b5 10		lda $10,x		lda		EXSValueH+0,x
.010645	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010647	95 10		sta $10,x		sta 	EXSValueH+0,x
.010649	60		rts			rts
.01064a					Binary_ShiftRight:
.01064a	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.01064d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01064f	29 3f 00	and #$003f		and 	#63
.010652	f0 07		beq $01065b		beq		_Binary_SRExit
.010654					_Binary_SRLoop:
.010654	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010656	76 00		ror $00,x		ror 	EXSValueL+0,x
.010658	3a		dec a			dec 	a
.010659	d0 f9		bne $010654		bne 	_Binary_SRLoop
.01065b					_Binary_SRExit:
.01065b	60		rts			rts
.01065c					Binary_ShiftLeft:
.01065c	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.01065f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010661	29 3f 00	and #$003f		and 	#63
.010664	f0 07		beq $01066d		beq		_Binary_SLExit
.010666					_Binary_SLLoop:
.010666	16 00		asl $00,x		asl 	EXSValueL+0,x
.010668	36 10		rol $10,x		rol 	EXSValueH+0,x
.01066a	3a		dec a			dec 	a
.01066b	d0 f9		bne $010666		bne 	_Binary_SLLoop
.01066d					_Binary_SLExit:
.01066d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01066e					Binary_And:
.01066e	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.010671	b5 00		lda $00,x		lda		EXSValueL+0,x
.010673	35 02		and $02,x		and 	EXSValueL+2,x
.010675	95 00		sta $00,x		sta 	EXSValueL+0,x
.010677	b5 10		lda $10,x		lda		EXSValueH+0,x
.010679	35 12		and $12,x		and 	EXSValueH+2,x
.01067b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01067d	60		rts			rts
.01067e					Binary_Or:
.01067e	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.010681	b5 00		lda $00,x		lda		EXSValueL+0,x
.010683	15 02		ora $02,x		ora 	EXSValueL+2,x
.010685	95 00		sta $00,x		sta 	EXSValueL+0,x
.010687	b5 10		lda $10,x		lda		EXSValueH+0,x
.010689	15 12		ora $12,x		ora 	EXSValueH+2,x
.01068b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01068d	60		rts			rts
.01068e					Binary_Xor:
.01068e	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.010691	b5 00		lda $00,x		lda		EXSValueL+0,x
.010693	55 02		eor $02,x		eor 	EXSValueL+2,x
.010695	95 00		sta $00,x		sta 	EXSValueL+0,x
.010697	b5 10		lda $10,x		lda		EXSValueH+0,x
.010699	55 12		eor $12,x		eor 	EXSValueH+2,x
.01069b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01069d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.01069e					Binary_Equals:
.01069e	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106a1	b0 0e		bcs $0106b1		bcs 	_BEString
.0106a3	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106a5	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106a7	d0 4f		bne $0106f8		bne 	Compare_Fail
.0106a9	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ab	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106ad	d0 49		bne $0106f8		bne 	Compare_Fail
.0106af	80 3f		bra $0106f0		bra 	Compare_Succeed
.0106b1					_BEString:
.0106b1	09 00 00	ora #$0000		ora 	#$0000
.0106b4	f0 3a		beq $0106f0		beq 	Compare_Succeed
.0106b6	80 40		bra $0106f8		bra 	Compare_Fail
.0106b8					Binary_NotEquals:
.0106b8	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106bb	b0 0e		bcs $0106cb		bcs 	_BNEString
.0106bd	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106bf	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106c1	d0 2d		bne $0106f0		bne 	Compare_Succeed
.0106c3	b5 10		lda $10,x		lda 	EXSValueH,x
.0106c5	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106c7	d0 27		bne $0106f0		bne 	Compare_Succeed
.0106c9	80 2d		bra $0106f8		bra 	Compare_Fail
.0106cb					_BNEString:
.0106cb	09 00 00	ora #$0000		ora 	#$0000
.0106ce	d0 20		bne $0106f0		bne 	Compare_Succeed
.0106d0	80 26		bra $0106f8		bra 	Compare_Fail
.0106d2					Binary_Less:
.0106d2	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106d5	b0 12		bcs $0106e9		bcs 	_BLString
.0106d7	38		sec			sec
.0106d8	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106da	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106dc	b5 10		lda $10,x		lda 	EXSValueH,x
.0106de	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106e0	50 03		bvc $0106e5		bvc 	*+5
.0106e2	49 00 80	eor #$8000		eor 	#$8000
.0106e5	30 09		bmi $0106f0		bmi 	Compare_Succeed
.0106e7	80 0f		bra $0106f8		bra 	Compare_Fail
.0106e9					_BLString:
.0106e9	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106ec	f0 02		beq $0106f0		beq 	Compare_Succeed
.0106ee	80 08		bra $0106f8		bra 	Compare_Fail
.0106f0					Compare_Succeed:
.0106f0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106f3	95 00		sta $00,x		sta 	EXSValueL,x
.0106f5	95 10		sta $10,x		sta 	EXSValueH,x
.0106f7	60		rts			rts
.0106f8					Compare_Fail:
.0106f8	74 00		stz $00,x		stz 	EXSValueL,x
.0106fa	74 10		stz $10,x		stz 	EXSValueH,x
.0106fc	60		rts			rts
.0106fd					Binary_GreaterEqual:
.0106fd	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010700	b0 12		bcs $010714		bcs 	_BGEString
.010702	38		sec			sec
.010703	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010705	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010707	b5 10		lda $10,x		lda 	EXSValueH,x
.010709	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01070b	50 03		bvc $010710		bvc 	*+5
.01070d	49 00 80	eor #$8000		eor 	#$8000
.010710	10 de		bpl $0106f0		bpl 	Compare_Succeed
.010712	80 e4		bra $0106f8		bra 	Compare_Fail
.010714					_BGEString:
.010714	09 00 00	ora #$0000		ora 	#$0000
.010717	10 d7		bpl $0106f0		bpl 	Compare_Succeed
.010719	80 dd		bra $0106f8		bra 	Compare_Fail
.01071b					Binary_LessEqual:
.01071b	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01071e	b0 12		bcs $010732		bcs 	_BLEString
.010720	18		clc			clc 									; numeric <= signed
.010721	b5 00		lda $00,x		lda 	EXSValueL,x
.010723	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010725	b5 10		lda $10,x		lda 	EXSValueH,x
.010727	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010729	50 03		bvc $01072e		bvc 	*+5
.01072b	49 00 80	eor #$8000		eor 	#$8000
.01072e	30 c0		bmi $0106f0		bmi 	Compare_Succeed
.010730	80 c6		bra $0106f8		bra 	Compare_Fail
.010732					_BLEString:
.010732	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010735	d0 b9		bne $0106f0		bne 	Compare_Succeed
.010737	80 bf		bra $0106f8		bra 	Compare_Fail
.010739					Binary_Greater:
.010739	20 57 07	jsr $010757		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01073c	b0 12		bcs $010750		bcs 	_BGString
.01073e	18		clc			clc 									; numeric > signed
.01073f	b5 00		lda $00,x		lda 	EXSValueL,x
.010741	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010743	b5 10		lda $10,x		lda 	EXSValueH,x
.010745	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010747	50 03		bvc $01074c		bvc 	*+5
.010749	49 00 80	eor #$8000		eor 	#$8000
.01074c	10 a2		bpl $0106f0		bpl 	Compare_Succeed
.01074e	80 a8		bra $0106f8		bra 	Compare_Fail
.010750					_BGString:
.010750	c9 01 00	cmp #$0001		cmp 	#$0001
.010753	f0 9b		beq $0106f0		beq 	Compare_Succeed
.010755	80 a1		bra $0106f8		bra 	Compare_Fail
.010757					CompareTypeCheck:
.010757	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010759	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01075b	30 06		bmi $010763		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01075d	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01075f	30 1c		bmi $01077d		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010761	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010762	60		rts			rts
.010763					_CTCFail:
.010763	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010766	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01076e	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01077d					_CTCStringCompare:
.01077d	20 eb 04	jsr $0104eb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010780	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010782	85 08		sta $08			sta 	DTemp1
.010784	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010786	85 0c		sta $0c			sta 	DTemp2
.010788	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01078b	a8		tay			tay
.01078c	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01078e	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010790	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010792	90 02		bcc $010796		bcc 	_CTCSmallest
.010794	b2 0c		lda ($0c)		lda 	(DTemp2)
.010796					_CTCSmallest:
.010796	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010798					_CTCCompare:
.010798	c8		iny			iny 									; look at next character (done first, first char is size)
.010799	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01079b	30 16		bmi $0107b3		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01079d	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01079f	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0107a1	f0 f5		beq $010798		beq 	_CTCCompare 					; if zero, try the next character.
.0107a3	b0 07		bcs $0107ac		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0107a5					_CTCLess:
.0107a5	c2 20		rep #$20		rep 	#$20
.0107a7	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107aa	80 14		bra $0107c0		bra 	_CTCExit
.0107ac					_CTCGreater:
.0107ac	c2 20		rep #$20		rep 	#$20
.0107ae	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107b1	80 0d		bra $0107c0		bra 	_CTCExit
.0107b3					_CTCEqualSoFar:
.0107b3	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107b5	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107b7	90 ec		bcc $0107a5		bcc 	_CTCLess
.0107b9	d0 f1		bne $0107ac		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107bb	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107bd	a9 00 00	lda #$0000		lda 	#$0000
.0107c0					_CTCExit:
.0107c0	38		sec			sec 									; return with CS indicating string comparison.
.0107c1	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107c2					Binary_Divide:
.0107c2	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.0107c5	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107c7	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0107c9	d0 14		bne $0107df		bne 	_BinaryDivide_Ok
.0107cb	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0107ce	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107d6	20 62 79 20 7a 65 72 6f 00
.0107df					_BinaryDivide_Ok:
.0107df	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107e1	64 0a		stz $0a			stz 	DTemp1+2
.0107e3	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107e5	5a		phy			phy 										; save Y (bit counter)
.0107e6	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107e8	10 07		bpl $0107f1		bpl 	_BinaryDivide_RightDone
.0107ea	e8		inx			inx
.0107eb	e8		inx			inx
.0107ec	20 27 08	jsr $010827		jsr 	Binary_DivNegate
.0107ef	ca		dex			dex
.0107f0	ca		dex			dex
.0107f1					_BinaryDivide_RightDone:
.0107f1	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107f3	10 03		bpl $0107f8		bpl 	_BinaryDivide_LeftDone
.0107f5	20 27 08	jsr $010827		jsr 	Binary_DivNegate
.0107f8					_BinaryDivide_LeftDone:
.0107f8	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0107fb					_BinaryDivide_Loop:
.0107fb	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107fd	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107ff	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010801	26 0a		rol $0a			rol 	DTemp1+2
.010803	38		sec			sec											; calculate A-M
.010804	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010806	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010808	85 0c		sta $0c			sta 	DTemp2
.01080a	a5 0a		lda $0a			lda 	DTemp1+2
.01080c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01080e	90 08		bcc $010818		bcc 	_Binary_NoSubract 					; if A < M skip this
.010810	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010812	a5 0c		lda $0c			lda 	DTemp2
.010814	85 08		sta $08			sta 	DTemp1+0
.010816	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010818					_Binary_NoSubract:
.010818	88		dey			dey 										; do it 32 times.
.010819	d0 e0		bne $0107fb		bne 	_BinaryDivide_Loop
.01081b					_BinaryDivide_Exit:
.01081b	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01081d	29 01 00	and #$0001		and 	#1
.010820	f0 03		beq $010825		beq 	_BinaryDivide_Exit2
.010822	20 27 08	jsr $010827		jsr 	Binary_DivNegate
.010825					_BinaryDivide_Exit2:
.010825	7a		ply			ply 										; restore Y
.010826	60		rts			rts
.010827					Binary_DivNegate:
.010827	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010829	38		sec			sec 										; negate the value at stack X.
.01082a	a9 00 00	lda #$0000		lda 	#$0000
.01082d	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01082f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010831	a9 00 00	lda #$0000		lda 	#$0000
.010834	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010836	95 10		sta $10,x		sta 	EXSValueH+0,x
.010838	60		rts			rts
.010839					Binary_Modulus:
.010839	20 c2 07	jsr $0107c2		jsr 	Binary_Divide 						; do the divide
.01083c	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01083e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010840	a5 0a		lda $0a			lda 	DTemp1+2
.010842	95 10		sta $10,x		sta 	EXSValueH+0,x
.010844	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010845					Binary_Multiply:
.010845	20 cb 04	jsr $0104cb		jsr 	CheckBothNumeric 					; check both values are numeric
.010848	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01084a	85 08		sta $08			sta 	DTemp1
.01084c	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01084e	85 0a		sta $0a			sta		DTemp1+2
.010850	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010852	74 10		stz $10,x		stz 	EXSValueH+0,x
.010854					_BinaryMultiply_Loop:
.010854	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010856	05 0a		ora $0a			ora 	DTemp1+2
.010858	f0 1e		beq $010878		beq 	_BinaryMultiply_Exit
.01085a	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01085c	29 01 00	and #$0001		and 	#1
.01085f	f0 0d		beq $01086e		beq 	_BinaryMultiply_NoAdd
.010861	18		clc			clc 										; add multiplicand to result.
.010862	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010864	75 02		adc $02,x		adc 	EXSValueL+2,x
.010866	95 00		sta $00,x		sta 	EXSValueL+0,x
.010868	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01086a	75 12		adc $12,x		adc 	EXSValueH+2,x
.01086c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01086e					_BinaryMultiply_NoAdd:
.01086e	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010870	66 08		ror $08			ror 	DTemp1
.010872	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010874	36 12		rol $12,x		rol 	EXSValueH+2,x
.010876	80 dc		bra $010854		bra 	_BinaryMultiply_Loop 				; go round again.
.010878					_BinaryMultiply_Exit:
.010878	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010879					Function_Len:
.010879	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.01087c	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get the value you are absoluting
.01087f	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010882	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010884	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010887	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01088a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01088c	74 10		stz $10,x			stz 	EXSValueH+0,x
.01088e	60		rts				rts
.01088f					Function_Abs:
.01088f	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010892	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010895	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010898	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01089a	30 07		bmi $0108a3			bmi 	_FAbsNegative 				; negate it if negative
.01089c	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01089e	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0108a0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108a2	60		rts				rts
.0108a3					_FAbsNegative:
.0108a3	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0108a4	a9 00 00	lda #$0000			lda 	#0
.0108a7	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ab	a9 00 00	lda #$0000			lda 	#0
.0108ae	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0108b0	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108b2	60		rts				rts
.0108b3					Function_Sgn:
.0108b3	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns integer
.0108b6	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get an integer
.0108b9	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.0108bc	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108be	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108c0	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108c2	30 07		bmi $0108cb			bmi 	_FSgnNegative 				; set to -1 if signed
.0108c4	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108c6	f0 02		beq $0108ca			beq 	_FSgnExit
.0108c8	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108ca					_FSgnExit:
.0108ca	60		rts				rts
.0108cb					_FSgnNegative:
.0108cb	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108ce	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108d0	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108d2	60		rts				rts
.0108d3					Function_Random:
.0108d3	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.0108d6	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger
.0108d9	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108db	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108dd	d0 0a		bne $0108e9			bne 	_Rnd_NotZero
.0108df	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108e2	85 10		sta $10				sta 	DRandom
.0108e4	a9 ea 00	lda #$00ea			lda 	#$EA
.0108e7	85 12		sta $12				sta 	DRandom+2
.0108e9					_Rnd_NotZero:
.0108e9	20 f4 08	jsr $0108f4			jsr 	_Rnd_Process 				; call randomiser twice
.0108ec	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108ee	20 f4 08	jsr $0108f4			jsr 	_Rnd_Process
.0108f1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108f3	60		rts				rts
.0108f4					_Rnd_Process:
.0108f4	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108f6	26 12		rol $12				rol 	DRandom+2
.0108f8	90 0e		bcc $010908			bcc 	_Rnd_Exit
.0108fa	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108fc	49 54 d4	eor #$d454			eor 	#$D454
.0108ff	85 10		sta $10				sta 	DRandom
.010901	a5 12		lda $12				lda 	DRandom+2
.010903	49 d5 55	eor #$55d5			eor 	#$55D5
.010906	85 12		sta $12				sta 	DRandom+2
.010908					_Rnd_Exit:
.010908	a5 10		lda $10				lda 	DRandom
.01090a	45 12		eor $12				eor 	DRandom+2
.01090c	60		rts				rts
.01090d					Function_Chr:
.01090d	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string
.010910	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get integer
.010913	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010916	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010919	d0 12		bne $01092d			bne 	_FCHBad
.01091b	48		pha				pha  								; save char # on stack
.01091c	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.01091f	20 29 05	jsr $010529			jsr 	StringTempAllocate
.010922	68		pla				pla 								; restore character number
.010923	20 55 05	jsr $010555			jsr 	StringWriteCharacter 		; write it out.
.010926	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010928	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01092a	74 10		stz $10,x			stz 	EXSValueH+0,x
.01092c	60		rts				rts
.01092d					_FCHBad:
.01092d	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010930	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010938	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010945					Function_Asc:
.010945	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010948	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get string
.01094b	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.01094e	a8		tay				tay 								; string address in Y
.01094f	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010952	29 ff 00	and #$00ff			and 	#$00FF
.010955	f0 0b		beq $010962			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010957	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.01095a	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.01095d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01095f	74 10		stz $10,x			stz 	EXSValueH+0,x
.010961	60		rts				rts
.010962					_FASBad:
.010962	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010965	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>01096d	65 20 66 6f 72 20 61 73 63 28 29 00
.010979					Function_SPC:
.010979	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string
.01097c	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.01097f	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010982	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010985	d0 17		bne $01099e			bne 	_FSPBad
.010987	48		pha				pha 								; save length
.010988	20 29 05	jsr $010529			jsr 	StringTempAllocate 			; allocate character space
.01098b	7a		ply				ply 								; get count in Y
.01098c	f0 09		beq $010997			beq 	_FSPExit 					; if zero, just empty string
.01098e					_FSPCopy:
.01098e	a9 20 00	lda #$0020			lda 	#" "						; space character
.010991	20 55 05	jsr $010555			jsr 	StringWriteCharacter 		; write it out.
.010994	88		dey				dey
.010995	d0 f7		bne $01098e			bne 	_FSPCopy	 				; do it Y times
.010997					_FSPExit:
.010997	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010999	95 00		sta $00,x			sta 	EXSValueL+0,x
.01099b	74 10		stz $10,x			stz 	EXSValueH+0,x
.01099d	60		rts				rts
.01099e					_FSPBad:
.01099e	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0109a1	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109a9	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109b5					Function_LEFT:
.0109b5	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.0109b8	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109bb	48		pha				pha 								; save string on stack.
.0109bc	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; get count
.0109bf	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger
.0109c2	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109c5	d0 6d		bne $010a34			bne 	FNStringParameter
.0109c7	85 08		sta $08				sta 	DTemp1 						; save count.
.0109c9	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket
.0109cc	7a		ply				ply 								; Y points to string.
.0109cd	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109d0	29 ff 00	and #$00ff			and 	#$00FF
.0109d3	f0 52		beq $010a27			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109d5	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109d7	f0 55		beq $010a2e			beq 	FNStringY 					; return string in Y if current len = required len.
.0109d9	90 53		bcc $010a2e			bcc 	FNStringY 					; if current < required return whole thing.
.0109db	c8		iny				iny 								; take from here - start of string
.0109dc	80 33		bra $010a11			bra 	FNDTemp1Characters
.0109de					Function_RIGHT:
.0109de	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.0109e1	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109e4	48		pha				pha 								; save string on stack.
.0109e5	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; get count
.0109e8	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger
.0109eb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109ee	d0 44		bne $010a34			bne 	FNStringParameter
.0109f0	85 08		sta $08				sta 	DTemp1 						; save count.
.0109f2	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket
.0109f5	7a		ply				ply 								; Y points to string.
.0109f6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109f9	29 ff 00	and #$00ff			and 	#$00FF
.0109fc	f0 29		beq $010a27			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109fe	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010a00	f0 2c		beq $010a2e			beq 	FNStringY 					; return string in Y if current len = required len.
.010a02	90 2a		bcc $010a2e			bcc 	FNStringY 					; if current < required return whole thing.
.010a04	38		sec				sec 								; current-required is the number to skip
.010a05	e5 08		sbc $08				sbc 	DTemp1
.010a07	85 0a		sta $0a				sta 	DTemp1+2
.010a09	98		tya				tya
.010a0a	18		clc				clc
.010a0b	65 0a		adc $0a				adc 	DTemp1+2
.010a0d	a8		tay				tay
.010a0e	c8		iny				iny 								; +1 for the count.
.010a0f	80 00		bra $010a11			bra 	FNDTemp1Characters
.010a11					FNDTemp1Characters:
.010a11	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a13	f0 12		beq $010a27			beq 	FNStringEmpty 				; if zero, return empty string.
.010a15	20 29 05	jsr $010529			jsr 	StringTempAllocate
.010a18	48		pha				pha 								; save the address
.010a19					_FND1Loop:
.010a19	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a1c	20 55 05	jsr $010555			jsr 	StringWriteCharacter
.010a1f	c8		iny				iny
.010a20	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a22	d0 f5		bne $010a19			bne 	_FND1Loop
.010a24	7a		ply				ply 								; string address in Y
.010a25	80 07		bra $010a2e			bra 	FNStringY
.010a27					FNStringEmpty:
.010a27	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a2a	20 29 05	jsr $010529			jsr 	StringTempAllocate 			; put address of it in Y
.010a2d	a8		tay				tay
.010a2e					FNStringY:
.010a2e	98		tya				tya
.010a2f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a31	74 12		stz $12,x			stz 	EXSValueH+2,x
.010a33	60		rts				rts
.010a34					FNStringParameter:
.010a34	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010a37	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a3f	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010a4c					Function_MID:
.010a4c	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.010a4f	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a52	48		pha				pha 								; save string on stack.
.010a53	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; get offset (n)
.010a56	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger
.010a59	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a5c	d0 d6		bne $010a34			bne 	FNStringParameter
.010a5e	c9 00 00	cmp #$0000			cmp 	#0
.010a61	f0 d1		beq $010a34			beq 	FNStringParameter 			; or zero
.010a63	48		pha				pha 								; save start position on stack.
.010a64	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010a67	85 08		sta $08				sta 	DTemp1
.010a69	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010a6b	c9 22 32	cmp #$3222			cmp 	#commaTokenID
.010a6e	d0 0e		bne $010a7e			bne 	_FMINoThird
.010a70	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010a72	e6 06		inc $06				inc 	DCodePtr
.010a74	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010a77	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a7a	d0 b8		bne $010a34			bne 	FNStringParameter
.010a7c	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010a7e					_FMINoThird:
.010a7e	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket
.010a81	68		pla				pla 								; get offset position
.010a82	85 0c		sta $0c				sta 	DTemp2
.010a84	7a		ply				ply 								; get address of string in Y
.010a85	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010a88	29 ff 00	and #$00ff			and 	#$00FF
.010a8b	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010a8d	90 98		bcc $010a27			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010a8f	38		sec				sec 								; calculate number of characters left after
.010a90	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010a92	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010a93	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010a95	b0 02		bcs $010a99			bcs 	_FMISufficient
.010a97	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010a99					_FMISufficient:
.010a99	98		tya				tya 								; get address
.010a9a	18		clc				clc
.010a9b	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010a9d	a8		tay				tay 								; put in Y
.010a9e	82 70 ff	brl $010a11			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010aa1					Function_Peek:
.010aa1	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010aa4	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010aa7	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010aaa	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010aac	84 0a		sty $0a				sty 	DTemp1+2
.010aae	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ab1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ab3	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010ab6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ab8	74 10		stz $10,x			stz 	EXSValueH+0,x
.010aba	60		rts				rts
.010abb					Function_Deek:
.010abb	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010abe	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ac1	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010ac4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ac6	84 0a		sty $0a				sty 	DTemp1+2
.010ac8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010acb	b7 08		lda [$08],y			lda 	[DTemp1],y
.010acd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010acf	74 10		stz $10,x			stz 	EXSValueH+0,x
.010ad1	60		rts				rts
.010ad2					Function_Leek:
.010ad2	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010ad5	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ad8	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check )
.010adb	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010add	84 0a		sty $0a				sty 	DTemp1+2
.010adf	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ae2	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ae4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ae6	c8		iny				iny
.010ae7	c8		iny				iny
.010ae8	b7 08		lda [$08],y			lda 	[DTemp1],y
.010aea	95 10		sta $10,x			sta 	EXSValueH+0,x
.010aec	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010aed					Function_VAL:
.010aed	20 eb 04	jsr $0104eb			jsr 	ResetTypeInteger 			; returns an integer
.010af0	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; get the value you are absoluting
.010af3	48		pha				pha 								; put string address on stack.
.010af4	20 04 0b	jsr $010b04			jsr 	VALGetBase 					; process , base (shared with STR$())
.010af7	7a		ply				ply 								; get string address back
.010af8	da		phx				phx 								; save X on stack
.010af9	aa		tax				tax 								; base in X
.010afa	98		tya				tya 								; address in A
.010afb	20 3e 0b	jsr $010b3e			jsr 	StringToInteger
.010afe	fa		plx				plx 								; restore X
.010aff	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b01	94 10		sty $10,x			sty 	EXSValueH+0,x
.010b03	60		rts				rts
.010b04					VALGetBase:
.010b04	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010b06	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if comma, go to get base code.
.010b09	f0 07		beq $010b12			beq 	_VGBAlternate
.010b0b	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010b0e	a9 0a 00	lda #$000a			lda 	#10
.010b11	60		rts				rts
.010b12					_VGBAlternate:
.010b12	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; skip comma.
.010b15	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get base
.010b18	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010b1b	d0 0e		bne $010b2b			bne 	_VGBBadBase
.010b1d	c9 02 00	cmp #$0002			cmp 	#2
.010b20	90 09		bcc $010b2b			bcc 	_VGBBadBase
.010b22	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010b25	b0 04		bcs $010b2b			bcs 	_VGBBadBase
.010b27	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010b2a	60		rts				rts
.010b2b					_VGBBadBase:
.010b2b	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010b2e	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010b36	65 72 20 42 61 73 65 00
.010b3e					StringToInteger:
.010b3e	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010b40	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010b42	29 ff 00	and #$00ff			and 	#$00FF
.010b45	85 26		sta $26				sta 	DTemp3+2
.010b47	f0 6e		beq $010bb7			beq 	_STIError 					; if length zero it's bad.
.010b49	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010b4b	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010b4d	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010b4f	64 0a		stz $0a				stz 	DTemp1+2
.010b51	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010b53	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010b56	48		pha				pha 								; push on stack
.010b57	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010b5a	d0 06		bne $010b62			bne 	_STILoop
.010b5c	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b5e	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b60	f0 55		beq $010bb7			beq 	_STIError 					; if only - then error.
.010b62					_STILoop:
.010b62	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b64	20 d6 0b	jsr $010bd6			jsr 	MultiplyTemp1ByA
.010b67	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b69	29 ff 00	and #$00ff			and 	#$00FF
.010b6c	20 c7 0b	jsr $010bc7			jsr 	ConvertUpperCase	 		; make U/C
.010b6f	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b72	90 43		bcc $010bb7			bcc 	_STIError
.010b74	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b77	90 0e		bcc $010b87			bcc 	_STIOkay1
.010b79	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b7c	90 39		bcc $010bb7			bcc 	_STIError
.010b7e	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b81	b0 34		bcs $010bb7			bcs 	_STIError
.010b83	18		clc				clc 								; shift to correct range.
.010b84	69 09 00	adc #$0009			adc 	#9
.010b87					_STIOkay1:
.010b87	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b8a	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b8c	b0 29		bcs $010bb7			bcs 	_STIError
.010b8e	18		clc				clc 								; add A to DTemp1
.010b8f	65 08		adc $08				adc 	DTemp1
.010b91	85 08		sta $08				sta 	DTemp1
.010b93	90 02		bcc $010b97			bcc 	_STINoCarry
.010b95	e6 0a		inc $0a				inc 	DTemp1+2
.010b97					_STINoCarry:
.010b97	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010b99	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010b9b	d0 c5		bne $010b62			bne 	_STILoop 					; loop back.
.010b9d	68		pla				pla 								; get optional minus bac
.010b9e	c9 2d 00	cmp #$002d			cmp 	#"-"
.010ba1	d0 0f		bne $010bb2			bne 	_STINotNegative 			; handle the negative character
.010ba3	38		sec				sec 								; negate DTemp1
.010ba4	a9 00 00	lda #$0000			lda 	#0
.010ba7	e5 08		sbc $08				sbc 	DTemp1
.010ba9	85 08		sta $08				sta 	DTemp1
.010bab	a9 00 00	lda #$0000			lda 	#0
.010bae	e5 0a		sbc $0a				sbc 	DTemp1+2
.010bb0	85 0a		sta $0a				sta 	DTemp1+2
.010bb2					_STINotNegative:
.010bb2	a5 08		lda $08				lda 	DTemp1 						; get the result
.010bb4	a4 0a		ldy $0a				ldy 	DTemp1+2
.010bb6	60		rts				rts
.010bb7					_STIError:
.010bb7	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010bba	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010bc2	74 61 6e 74 00
.010bc7					ConvertUpperCase:
.010bc7	c9 61 00	cmp #$0061			cmp 	#'a'
.010bca	90 09		bcc $010bd5			bcc 	_CUCExit
.010bcc	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010bcf	b0 04		bcs $010bd5			bcs 	_CUCExit
.010bd1	38		sec				sec
.010bd2	e9 20 00	sbc #$0020			sbc 	#32
.010bd5					_CUCExit:
.010bd5	60		rts				rts
.010bd6					MultiplyTemp1ByA:
.010bd6					_MTGeneral:
.010bd6	da		phx				phx
.010bd7	aa		tax				tax 								; multiplier in X
.010bd8	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010bda	85 0c		sta $0c				sta 	DTemp2
.010bdc	a5 0a		lda $0a				lda 	DTemp1+2
.010bde	85 0e		sta $0e				sta 	DTemp2+2
.010be0	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010be2	64 0a		stz $0a				stz 	DTemp1+2
.010be4	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010be7					_MTLoop:
.010be7	8a		txa				txa 								; shift X right into C
.010be8	4a		lsr a				lsr 	a
.010be9	aa		tax				tax
.010bea	90 10		bcc $010bfc			bcc 	_MTNoAdd
.010bec	18		clc				clc
.010bed	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010bef	65 0c		adc $0c				adc 	DTemp2
.010bf1	85 08		sta $08				sta 	DTemp1
.010bf3	a5 0a		lda $0a				lda 	DTemp1+2
.010bf5	65 0e		adc $0e				adc 	DTemp2+2
.010bf7	85 0a		sta $0a				sta 	DTemp1+2
.010bf9	90 01		bcc $010bfc			bcc 	_MTNoAdd
.010bfb	c8		iny				iny
.010bfc					_MTNoAdd:
.010bfc	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010bfe	26 0e		rol $0e				rol 	DTemp2+2
.010c00	90 01		bcc $010c03			bcc 	_MTNoOverflow
.010c02	c8		iny				iny
.010c03					_MTNoOverflow:
.010c03	8a		txa				txa 								; until multiplier is zero.
.010c04	d0 e1		bne $010be7			bne 	_MTLoop
.010c06	98		tya				tya
.010c07	18		clc				clc
.010c08	69 ff ff	adc #$ffff			adc 	#$FFFF
.010c0b	fa		plx				plx 								; restore X
.010c0c	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010c0d					Function_Str:
.010c0d	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.010c10	20 ea 02	jsr $0102ea			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c13	48		pha				pha 								; save YA on the stack
.010c14	5a		phy				phy
.010c15	20 04 0b	jsr $010b04			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c18	85 14		sta $14				sta 	DSignCount
.010c1a	7a		ply				ply 								; YA is the number
.010c1b	68		pla				pla
.010c1c	da		phx				phx
.010c1d	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010c1f	20 28 0c	jsr $010c28			jsr 	ConvertToString 			; convert it to a string.
.010c22	fa		plx				plx 								; restore X
.010c23	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010c25	74 10		stz $10,x			stz 	EXSValueH+0,x
.010c27	60		rts				rts
.010c28					ConvertToString:
.010c28	48		pha				pha
.010c29	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010c2c	20 29 05	jsr $010529			jsr 	StringTempAllocate 			; allocate space for return string.
.010c2f	68		pla				pla
.010c30					ConvertToStringAlreadyAllocated:
.010c30	da		phx				phx 								; save X (base)
.010c31	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010c33	84 26		sty $26				sty 	DTemp3+2
.010c35	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010c37	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010c39	10 15		bpl $010c50			bpl 	_CTSNotNegative
.010c3b	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010c3e	20 ba 0c	jsr $010cba			jsr 	CTSOutputA
.010c41	38		sec				sec 								; negate DTemp3 which is the number
.010c42	a9 00 00	lda #$0000			lda 	#0
.010c45	e5 24		sbc $24				sbc 	DTemp3
.010c47	85 24		sta $24				sta 	DTemp3
.010c49	a9 00 00	lda #$0000			lda 	#0
.010c4c	e5 26		sbc $26				sbc 	DTemp3+2
.010c4e	85 26		sta $26				sta 	DTemp3+2
.010c50					_CTSNotNegative:
.010c50	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010c53	48		pha				pha
.010c54	a9 00 00	lda #$0000			lda 	#0
.010c57	48		pha				pha
.010c58	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010c5a	85 08		sta $08				sta 	DTemp1
.010c5c	64 0a		stz $0a				stz 	DTemp1+2
.010c5e					_CTSMultiplySubtractor:
.010c5e	38		sec				sec 								; check number vs subtractor
.010c5f	a5 24		lda $24				lda 	DTemp3
.010c61	e5 08		sbc $08				sbc 	DTemp1
.010c63	a5 26		lda $26				lda 	DTemp3+2
.010c65	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c67	90 0f		bcc $010c78			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c69	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c6b	48		pha				pha
.010c6c	a5 0a		lda $0a				lda 	DTemp1+2
.010c6e	48		pha				pha
.010c6f	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c71	20 d6 0b	jsr $010bd6			jsr 	MultiplyTemp1ByA
.010c74	b0 02		bcs $010c78			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c76	80 e6		bra $010c5e			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c78					_CTSScaledUp:
.010c78	7a		ply				ply 								; YA contains the previous divider.
.010c79	68		pla				pla
.010c7a	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c7d	d0 05		bne $010c84			bne 	_CTSHasDigit
.010c7f	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c82	f0 20		beq $010ca4			beq 	_CTSExit
.010c84					_CTSHasDigit:
.010c84	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c86	84 0e		sty $0e				sty 	DTemp2+2
.010c88	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c8b					_CTSSubLoop:
.010c8b	38		sec				sec 								; subtract subtractor from number
.010c8c	a5 24		lda $24				lda 	DTemp3
.010c8e	e5 0c		sbc $0c				sbc 	DTemp2
.010c90	a8		tay				tay 								; intermediate in Y
.010c91	a5 26		lda $26				lda 	DTemp3+2
.010c93	e5 0e		sbc $0e				sbc 	DTemp2+2
.010c95	90 07		bcc $010c9e			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010c97	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010c99	84 24		sty $24				sty 	DTemp3
.010c9b	e8		inx				inx 								; one more subtraction
.010c9c	80 ed		bra $010c8b			bra 	_CTSSubLoop 				; try it again.
.010c9e					_CTSFinishedSubtracting:
.010c9e	8a		txa				txa 								; convert to ASCII.
.010c9f	20 ad 0c	jsr $010cad			jsr 	CTSOutputHexDigit 			; write that out.
.010ca2	80 d4		bra $010c78			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010ca4					_CTSExit:
.010ca4	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010ca6	20 ad 0c	jsr $010cad			jsr 	CTSOutputHexDigit
.010ca9	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010cab	fa		plx				plx 								; restore X.
.010cac	60		rts				rts
.010cad					CTSOutputHexDigit:
.010cad	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010cb0	90 04		bcc $010cb6			bcc 	_CTSNotLetter
.010cb2	18		clc				clc
.010cb3	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010cb6					_CTSNotLetter:
.010cb6	18		clc				clc
.010cb7	69 30 00	adc #$0030			adc 	#48
.010cba					CTSOutputA:
.010cba	5a		phy				phy 								; save Y, set Y to current pointer
.010cbb	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010cbd	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010cc0	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010cc2	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010cc4	1a		inc a				inc 	a
.010cc5	92 18		sta ($18)			sta 	(DStartTempString)
.010cc7	c2 20		rep #$20			rep 	#$20
.010cc9	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010ccb	7a		ply				ply 								; restore Y and exit.
.010ccc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010ccd					Function_UPPER:
.010ccd	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.010cd0	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; evaluate a string.
.010cd3	48		pha				pha
.010cd4	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; close call.
.010cd7	20 29 05	jsr $010529			jsr		StringTempAllocate 			; allocate memory for it
.010cda	68		pla				pla
.010cdb	20 63 05	jsr $010563			jsr 	StringCreateCopy 			; create a copy of it.
.010cde	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010ce0	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ce2	a8		tay				tay 								; address in Y
.010ce3	74 10		stz $10,x			stz 	EXSValueH+0,x
.010ce5	da		phx				phx 								; save X
.010ce6	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010ce8	29 ff 00	and #$00ff			and 	#$00FF
.010ceb	f0 20		beq $010d0d			beq 	_FUPExit
.010ced	aa		tax				tax 								; put in X
.010cee					_FUPLoop:
.010cee	c8		iny				iny 								; increment and load character
.010cef	b9 00 00	lda $0000,y			lda 	$0000,y
.010cf2	29 ff 00	and #$00ff			and 	#$00FF
.010cf5	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010cf8	90 10		bcc $010d0a			bcc 	_FUPNoChange
.010cfa	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010cfd	b0 0b		bcs $010d0a			bcs 	_FUPNoChange
.010cff	38		sec				sec 								; shift case
.010d00	e9 20 00	sbc #$0020			sbc 	#32
.010d03	e2 20		sep #$20			sep 	#$20 						; write back
.010d05	99 00 00	sta $0000,y			sta 	$0000,y
.010d08	c2 20		rep #$20			rep 	#$20
.010d0a					_FUPNoChange:
.010d0a	ca		dex				dex 								; do X times
.010d0b	d0 e1		bne $010cee			bne 	_FUPLoop
.010d0d					_FUPExit:
.010d0d	fa		plx				plx 								; restore X
.010d0e	60		rts				rts
.010d0f					Function_LOWER:
.010d0f	20 f3 04	jsr $0104f3			jsr 	ResetTypeString 			; returns a string.
.010d12	20 09 03	jsr $010309			jsr 	EvaluateNextString 			; evaluate a string.
.010d15	48		pha				pha
.010d16	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; close call.
.010d19	20 29 05	jsr $010529			jsr		StringTempAllocate 			; allocate memory for it
.010d1c	68		pla				pla
.010d1d	20 63 05	jsr $010563			jsr 	StringCreateCopy 			; create a copy of it.
.010d20	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d22	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d24	a8		tay				tay 								; address in Y
.010d25	74 10		stz $10,x			stz 	EXSValueH+0,x
.010d27	da		phx				phx 								; save X
.010d28	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d2a	29 ff 00	and #$00ff			and 	#$00FF
.010d2d	f0 20		beq $010d4f			beq 	_FLOExit
.010d2f	aa		tax				tax 								; put in X
.010d30					_FLOLoop:
.010d30	c8		iny				iny 								; increment and load character
.010d31	b9 00 00	lda $0000,y			lda 	$0000,y
.010d34	29 ff 00	and #$00ff			and 	#$00FF
.010d37	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010d3a	90 10		bcc $010d4c			bcc 	_FLONoChange
.010d3c	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010d3f	b0 0b		bcs $010d4c			bcs 	_FLONoChange
.010d41	18		clc				clc 								; shift case
.010d42	69 20 00	adc #$0020			adc 	#32
.010d45	e2 20		sep #$20			sep 	#$20 						; write back
.010d47	99 00 00	sta $0000,y			sta 	$0000,y
.010d4a	c2 20		rep #$20			rep 	#$20
.010d4c					_FLONoChange:
.010d4c	ca		dex				dex 								; do X times
.010d4d	d0 e1		bne $010d30			bne 	_FLOLoop
.010d4f					_FLOExit:
.010d4f	fa		plx				plx 								; restore X
.010d50	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010d51					Function_Let:
.010d51	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010d53	48		pha				pha  								; save on stack for later.
.010d54	20 50 03	jsr $010350			jsr 	VariableFind 				; find the variable
.010d57	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010d59	b0 1c		bcs $010d77			bcs 	_FLetFound 					; skip if found.
.010d5b	68		pla				pla 								; get and push the first token again.
.010d5c	48		pha				pha
.010d5d	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010d60	d0 57		bne $010db9			bne 	_FLError					; arrays, so this causes an error.
.010d62	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010d64	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010d67	20 fa 03	jsr $0103fa			jsr 	VariableCreate 				; create it.
.010d6a	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010d6c					_FLSkipToken:
.010d6c	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010d6e	e6 06		inc $06				inc 	DCodePtr
.010d70	e6 06		inc $06				inc 	DCodePtr
.010d72	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010d75	d0 f5		bne $010d6c			bne 	_FLSkipToken
.010d77					_FLetFound:
.010d77	68		pla				pla 								; get and save the first token.
.010d78	48		pha				pha
.010d79	a8		tay				tay 								; put it in Y
.010d7a	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010d7d	f0 07		beq $010d86			beq 	_FLetNotArray
.010d7f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010d81	20 c7 03	jsr $0103c7			jsr 	VariableSubscript			; index calculation
.010d84	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010d86					_FLetNotArray:
.010d86	7a		ply				ply 								; get the first token into Y
.010d87	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010d89	48		pha				pha
.010d8a	5a		phy				phy 								; save the first token on the stack.
.010d8b	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010d8e	20 9f 04	jsr $01049f			jsr 	ExpectToken
.010d91	68		pla				pla 								; restore the first token.
.010d92	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010d95	d0 0f		bne $010da6			bne 	_FLetString 				; skip if string.
.010d97	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; get an integer
.010d9a	7a		ply				ply 								; get address in Y
.010d9b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010d9d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010da0	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010da2	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010da5	60		rts				rts
.010da6					_FLetString:
.010da6	20 f0 02	jsr $0102f0			jsr 	EvaluateString 				; get a string.
.010da9	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010dab	20 84 05	jsr $010584			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010dae	7a		ply				ply 								; get address
.010daf	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010db2	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010db5	99 02 00	sta $0002,y			sta 	$0002,y
.010db8	60		rts				rts
.010db9					_FLError:
.010db9	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>010dbc	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010dc4	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.010dcc					Command_List:
.010dcc	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.010dcf	20 29 05	jsr $010529		jsr 	StringTempAllocate
.010dd2	48		pha			pha 									; save buffer on stack.
.010dd3	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.010dd6	18		clc			clc
.010dd7	65 02		adc $02			adc 	DBaseAddress
.010dd9	a8		tay			tay 									; put in Y
.010dda	68		pla			pla 									; A is buffer
.010ddb					_CLINextLine:
.010ddb	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.010dde	f0 16		beq $010df6		beq 	_CLIExit
.010de0	20 f7 0d	jsr $010df7		jsr 	Detokenise 						; detokenise it
.010de3	48		pha			pha 									; save A (buffer) Y (program)
.010de4	5a		phy			phy
.010de5	a8		tay			tay 									; print buffer out
.010de6	20 0f 05	jsr $01050f		jsr 	PrintBasicString
.010de9	20 49 16	jsr $011649		jsr 	HWNewLine
.010dec	7a		ply			ply 									; get buffer.
.010ded	98		tya			tya 									; follow link
.010dee	18		clc			clc
.010def	79 00 00	adc $0000,y		adc 	$0000,y
.010df2	a8		tay			tay
.010df3	68		pla			pla 									; restore buffer
.010df4	80 e5		bra $010ddb		bra 	_CLINextLine
.010df6					_CLIExit:
.010df6	60		rts			rts
.010df7					Detokenise:
.010df7	48		pha			pha
.010df8	da		phx			phx
.010df9	5a		phy			phy
.010dfa	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.010dfc	1a		inc a			inc 	a
.010dfd	85 1a		sta $1a			sta 	DCurrentTempString
.010dff	64 1c		stz $1c			stz		DConstantShift
.010e01	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.010e04	92 18		sta ($18)		sta 	(DStartTempString)
.010e06	5a		phy			phy 									; save Y
.010e07	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.010e0a	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.010e0d	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.010e10	20 30 0c	jsr $010c30		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010e13					_DTKPadLineNo:
.010e13	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6 characters.
.010e16	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010e19	b2 18		lda ($18)		lda 	(DStartTempString)
.010e1b	29 ff 00	and #$00ff		and 	#$00FF
.010e1e	c9 06 00	cmp #$0006		cmp 	#6
.010e21	d0 f0		bne $010e13		bne 	_DTKPadLineNo
.010e23	68		pla			pla 									; get pointer
.010e24	18		clc			clc 									; point to start of line
.010e25	69 04 00	adc #$0004		adc 	#4
.010e28	a8		tay			tay 									; put back in Y.
.010e29					_DTKMainLoop:
.010e29	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.010e2c	d0 04		bne $010e32		bne 	_DTKNotZero 					; if zero, return.
.010e2e	7a		ply			ply
.010e2f	fa		plx			plx
.010e30	68		pla			pla
.010e31	60		rts			rts
.010e32					_DTKNotZero:
.010e32	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.010e35	b0 1c		bcs $010e53		bcs 	_DTKNotString
.010e37	5a		phy			phy										; save token address on stack.
.010e38	c8		iny			iny 									; skip first token
.010e39	c8		iny			iny
.010e3a	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.010e3d	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010e40	98		tya			tya 									; copy the string out.
.010e41	20 63 05	jsr $010563		jsr 	StringCreateCopy
.010e44	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.010e47	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010e4a	68		pla			pla 									; get token, which is its own offset
.010e4b	a8		tay			tay
.010e4c	18		clc			clc
.010e4d	79 00 00	adc $0000,y		adc 	$0000,y
.010e50	a8		tay			tay
.010e51	80 d6		bra $010e29		bra 	_DTKMainLoop
.010e53					_DTKNotString:
.010e53	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.010e56	b0 09		bcs $010e61		bcs 	_DTKNotShift
.010e58	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.010e5b	85 1c		sta $1c			sta 	DConstantShift
.010e5d	c8		iny			iny 									; skip token.
.010e5e	c8		iny			iny
.010e5f	80 c8		bra $010e29		bra 	_DTKMainLoop
.010e61					_DTKNotShift:
.010e61	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.010e64	b0 07		bcs $010e6d		bcs 	_DTKNotKeyword
.010e66	c8		iny			iny 									; skip over token
.010e67	c8		iny			iny
.010e68	20 e7 0e	jsr $010ee7		jsr 	_DTKDecodeKeyword 				; decode it.
.010e6b	80 bc		bra $010e29		bra 	_DTKMainLoop
.010e6d					_DTKNotKeyword:
.010e6d	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.010e70	b0 18		bcs $010e8a		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.010e72	5a		phy			phy 									; save pointer
.010e73	38		sec			sec  									; shift it in the range 0-32767
.010e74	e9 00 40	sbc #$4000		sbc 	#$4000
.010e77	0a		asl a			asl 	a 								; shift it left, losing bit 15
.010e78	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.010e7a	6a		ror a			ror 	a 								; rotate that into the constant value
.010e7b	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.010e7d	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.010e80	20 30 0c	jsr $010c30		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010e83	64 1c		stz $1c			stz 	DConstantShift
.010e85	7a		ply			ply 									; restore pointer
.010e86	c8		iny			iny 									; skip token.
.010e87	c8		iny			iny
.010e88	80 9f		bra $010e29		bra 	_DTKMainLoop
.010e8a					_DTKIdentifier:
.010e8a	48		pha			pha 									; save token for typing at end
.010e8b					_DTKILoop:
.010e8b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.010e8e	20 b7 0e	jsr $010eb7		jsr 	_DTKIDecodeToken 				; decode it.
.010e91	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.010e94	c8		iny			iny 									; skip it
.010e95	c8		iny			iny
.010e96	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.010e99	d0 f0		bne $010e8b		bne 	_DTKILoop
.010e9b	68		pla			pla 									; add $( as required.
.010e9c	48		pha			pha 									; comes from the first token.
.010e9d	29 00 20	and #$2000		and 	#IDTypeMask
.010ea0	f0 06		beq $010ea8		beq 	_DTKINotString
.010ea2	a9 24 00	lda #$0024		lda 	#"$"
.010ea5	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010ea8					_DTKINotString:
.010ea8	68		pla			pla
.010ea9	29 00 10	and #$1000		and 	#IDArrayMask
.010eac	f0 06		beq $010eb4		beq 	_DTKINotArray
.010eae	a9 28 00	lda #$0028		lda 	#"("
.010eb1	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010eb4					_DTKINotArray:
.010eb4	82 72 ff	brl $010e29		brl 	_DTKMainLoop
.010eb7					_DTKIDecodeToken:
.010eb7	5a		phy			phy
.010eb8	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.010ebb	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.010ebe					_DTKIDivide:
.010ebe	38		sec			sec
.010ebf	e9 2d 00	sbc #$002d		sbc 	#45
.010ec2	c8		iny			iny
.010ec3	b0 f9		bcs $010ebe		bcs 	_DTKIDivide
.010ec5	69 2d 00	adc #$002d		adc 	#45
.010ec8	20 d1 0e	jsr $010ed1		jsr 	_DTKIOutA 						; output low.
.010ecb	98		tya			tya
.010ecc	20 d1 0e	jsr $010ed1		jsr 	_DTKIOutA 						; output high
.010ecf	7a		ply			ply
.010ed0	60		rts			rts
.010ed1					_DTKIOutA:
.010ed1	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.010ed4	f0 10		beq $010ee6		beq 	_DTKIOutExit
.010ed6	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.010ed9	90 04		bcc $010edf		bcc 	_DTKIOutAlpha
.010edb	38		sec			sec  									; adjust for 0-9
.010edc	e9 4b 00	sbc #$004b		sbc 	#$4B
.010edf					_DTKIOutAlpha:
.010edf	18		clc			clc										; adjust for A-Z
.010ee0	69 60 00	adc #$0060		adc 	#96
.010ee3	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010ee6					_DTKIOutExit:
.010ee6	60		rts			rts
.010ee7					_DTKDecodeKeyword:
.010ee7	48		pha			pha
.010ee8	da		phx			phx
.010ee9	5a		phy			phy
.010eea	a8		tay			tay 									; save token ID in Y
.010eeb	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.010eee	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.010ef1	48		pha			pha 									; save this flag on a stack
.010ef2	5a		phy			phy 									; save the token ID
.010ef3	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.010ef6	d0 19		bne $010f11		bne 	_DTKNotSpecial1
.010ef8	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.010efa	88		dey			dey
.010efb	b9 00 00	lda $0000,y		lda 	$0000,y
.010efe	29 ff 00	and #$00ff		and 	#$00FF
.010f01	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.010f04	f0 0b		beq $010f11		beq 	_DTKNotSpecial1
.010f06	c9 3a 00	cmp #$003a		cmp 	#":"
.010f09	f0 06		beq $010f11		beq 	_DTKNotSpecial1
.010f0b	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.010f0e	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010f11					_DTKNotSpecial1:
.010f11	68		pla			pla
.010f12	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.010f15	a8		tay			tay 									; into Y.
.010f16	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.010f19					_DTKDWorkThrough:
.010f19	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.010f1a	f0 0f		beq $010f2b		beq 	_DTKDFound
.010f1c	86 08		stx $08			stx 	DTemp1
.010f1e	bf 8e 00 01	lda $01008e,x		lda 	TokenText,x 					; read the type/skip byte.
.010f22	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.010f25	18		clc			clc
.010f26	65 08		adc $08			adc 	DTemp1
.010f28	aa		tax			tax
.010f29	80 ee		bra $010f19		bra 	_DTKDWorkThrough
.010f2b					_DTKDFound:
.010f2b	bf 8e 00 01	lda $01008e,x		lda 	TokenText,x 					; get skip
.010f2f	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.010f32	3a		dec a			dec 	a
.010f33	a8		tay			tay 									; put in Y
.010f34					_DTKOut:
.010f34	bf 8f 00 01	lda $01008f,x		lda 	TokenText+1,x 					; output it.
.010f38	29 ff 00	and #$00ff		and 	#$00FF
.010f3b	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010f3e	e8		inx			inx
.010f3f	88		dey			dey
.010f40	d0 f2		bne $010f34		bne 	_DTKOut
.010f42	68		pla			pla 									; trailing space.
.010f43	d0 06		bne $010f4b		bne 	_DTKNotSpecial2
.010f45	a9 20 00	lda #$0020		lda 	#" "
.010f48	20 55 05	jsr $010555		jsr 	StringWriteCharacter
.010f4b					_DTKNotSpecial2:
.010f4b	7a		ply			ply
.010f4c	fa		plx			plx
.010f4d	68		pla			pla
.010f4e	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010f4f					Function_PRINT:
.010f4f	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010f51	f0 33		beq $010f86			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010f53	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; likewise if a colon.
.010f56	f0 2e		beq $010f86			beq 	_FPRExitCR
.010f58	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID 			; semicolon, skip it
.010f5b	f0 23		beq $010f80			beq 	_FPRSkipLoop
.010f5d	c9 27 32	cmp #$3227			cmp 	#squoteTokenID 				; single quote is CR
.010f60	f0 1b		beq $010f7d			beq 	_FPRNewLine
.010f62	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; , is tab.
.010f65	f0 11		beq $010f78			beq 	_FPRTab
.010f67					_FPRExpression:
.010f67	20 c3 01	jsr $0101c3			jsr 	Evaluate 					; evaluate a string or integer.
.010f6a	b0 06		bcs $010f72			bcs 	_FPRHaveString
.010f6c	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010f6f	20 28 0c	jsr $010c28			jsr 	ConvertToString
.010f72					_FPRHaveString:
.010f72	a8		tay				tay 								; print the basic String.
.010f73	20 0f 05	jsr $01050f			jsr 	PrintBASICString
.010f76	80 d7		bra $010f4f			bra 	Function_Print 				; and go round again.
.010f78					_FPRTab:
.010f78	20 5c 16	jsr $01165c			jsr 	HWTab
.010f7b	80 03		bra $010f80			bra 	_FPRSkipLoop
.010f7d					_FPRNewLine:
.010f7d	20 49 16	jsr $011649			jsr 	HWNewLine
.010f80					_FPRSkipLoop:
.010f80	e6 06		inc $06				inc 	DCodePtr
.010f82	e6 06		inc $06				inc 	DCodePtr
.010f84	80 c9		bra $010f4f			bra 	Function_Print
.010f86					_FPRExitCR:
.010f86	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010f88	88		dey				dey
.010f89	88		dey				dey
.010f8a	b9 00 00	lda $0000,y			lda 	$0000,y
.010f8d	c9 22 32	cmp #$3222			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.010f90	f0 08		beq $010f9a			beq 	_FPRExit
.010f92	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID
.010f95	f0 03		beq $010f9a			beq 	_FPRExit
.010f97	20 49 16	jsr $011649			jsr 	HWNewLine 					; print a new line.
.010f9a					_FPRExit:
.010f9a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.010f9b					Function_IF:
.010f9b	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; check success.
.010f9e	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010fa0	05 08		ora $08				ora 	DTemp1
.010fa2	a8		tay				tay 								; success flag in Y.
.010fa3	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010fa5	c9 44 3a	cmp #$3a44			cmp 	#thenTokenID
.010fa8	d0 32		bne $010fdc			bne 	_FIFExtended 				; if so, go to the extended IF.
.010faa	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010fac	e6 06		inc $06				inc 	DCodePtr
.010fae	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010fb1	f0 0f		beq $010fc2			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010fb3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010fb5	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010fb8	90 21		bcc $010fdb			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010fba	c9 00 c0	cmp #$c000			cmp 	#$C000
.010fbd	b0 1c		bcs $010fdb			bcs 	_FIFContinue
.010fbf	4c 51 12	jmp $011251			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010fc2					_FIFEndOfLine:
.010fc2	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010fc4	f0 15		beq $010fdb			beq 	_FIFContinue 				; if done so, continue.
.010fc6	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010fc9	90 06		bcc $010fd1			bcc 	_FIFStringConstant
.010fcb	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010fcd	e6 06		inc $06				inc 	DCodePtr
.010fcf	80 f1		bra $010fc2			bra 	_FIFEndOfLine
.010fd1					_FIFStringConstant:
.010fd1	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010fd4	18		clc				clc
.010fd5	65 06		adc $06				adc 	DCodePtr
.010fd7	85 06		sta $06				sta 	DCodePtr
.010fd9	80 e7		bra $010fc2			bra 	_FIFEndOfLine
.010fdb					_FIFContinue:
.010fdb	60		rts				rts
.010fdc					_FIFExtended:
.010fdc	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010fde	e6 2a		inc $2a				inc 	DStack
.010fe0	a9 40 3c	lda #$3c40			lda 	#ifTokenID
.010fe3	a6 2a		ldx $2a				ldx 	DStack
.010fe5	95 00		sta $00,x			sta 	$00,x
.010fe7	98		tya				tya 								; see if the test was passed.
.010fe8	f0 01		beq $010feb			beq 	_FIXSkip 					; if zero then it has failed.
.010fea	60		rts				rts 								; test passed, so continue executing
.010feb					_FIXSkip:
.010feb	a9 39 3e	lda #$3e39			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010fee	a2 45 3a	ldx #$3a45			ldx 	#endifTokenID 				; at the same level.
.010ff1	20 51 10	jsr $011051			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010ff4	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010ff6	e6 06		inc $06				inc 	DCodePtr
.010ff8	c9 45 3a	cmp #$3a45			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010ffb	d0 04		bne $011001			bne 	_FIXNoThrow
.010ffd	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010fff	c6 2a		dec $2a				dec 	DStack
.011001					_FIXNoThrow:
.011001	60		rts				rts
.011002					Handler_ELSE:
.011002	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011004	b5 00		lda $00,x			lda 	$00,x
.011006	c9 40 3c	cmp #$3c40			cmp 	#ifTokenID
.011009	d0 12		bne $01101d			bne 	_HEBadStructure
.01100b	a9 45 3a	lda #$3a45			lda 	#endifTokenID 				; only searching one token.
.01100e	a2 00 00	ldx #$0000			ldx 	#$0000
.011011	20 51 10	jsr $011051			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011014	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011016	e6 06		inc $06				inc 	DCodePtr
.011018	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01101a	c6 2a		dec $2a				dec 	DStack
.01101c	60		rts				rts
.01101d					_HEBadStructure:
.01101d	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011020	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011028	68 6f 75 74 20 49 66 00
.011030					Handler_ENDIF:
.011030	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011032	b5 00		lda $00,x			lda 	$00,x
.011034	c9 40 3c	cmp #$3c40			cmp 	#ifTokenID
.011037	d0 05		bne $01103e			bne 	_HEIBadStructure
.011039	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01103b	c6 2a		dec $2a				dec 	DStack
.01103d	60		rts				rts
.01103e					_HEIBadStructure:
.01103e	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011041	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011049	68 6f 75 74 20 49 66 00
.011051					ScanForwardLevel:
.011051	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011053	86 0a		stx $0a				stx 	DTemp1+2
.011055	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011057	85 0c		sta $0c				sta 	DTemp2
.011059	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.01105c					_SFLLoop:
.01105c	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01105f	d0 0d		bne $01106e			bne 	_SFLNoCheck 				; we're in a substructure.
.011061	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011063	f0 09		beq $01106e			beq 	_SFLNoCheck 				; don't check zero
.011065	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011067	f0 04		beq $01106d			beq 	_SFLFound
.011069	c5 0a		cmp $0a				cmp 	DTemp1+2
.01106b	d0 01		bne $01106e			bne 	_SFLNoCheck
.01106d					_SFLFound:
.01106d	60		rts				rts
.01106e					_SFLNoCheck:
.01106e	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011070	f0 4f		beq $0110c1			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011072	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011075	90 40		bcc $0110b7			bcc 	_SFLSkipString 				; then handle that.
.011077	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011079	e6 06		inc $06				inc 	DCodePtr
.01107b	a8		tay				tay 								; put token in Y temporarily.
.01107c	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01107f	c9 00 20	cmp #$2000			cmp 	#$2000
.011082	d0 d8		bne $01105c			bne 	_SFLLoop
.011084	98		tya				tya 								; get the token back.
.011085	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011088	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.01108b	f0 cf		beq $01105c			beq 	_SFLLoop
.01108d	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011090	90 ca		bcc $01105c			bcc 	_SFLLoop
.011092	e8		inx				inx 								; increment the level.
.011093	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011096	f0 c4		beq $01105c			beq 	_SFLLoop
.011098	ca		dex				dex 								; decrement the level
.011099	ca		dex				dex 								; one overdoes the previous inx.
.01109a	10 c0		bpl $01105c			bpl 	_SFLLoop 					; if gone -ve then error.
.01109c					_SFLError:
.01109c	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.01109e	85 22		sta $22				sta 	DLineNumber
.0110a0	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0110a3	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0110ab	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0110b7					_SFLSkipString:
.0110b7	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0110ba	18		clc				clc
.0110bb	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0110bd	85 06		sta $06				sta 	DCodePtr
.0110bf	80 9b		bra $01105c			bra 	_SFLLoop 					; go round again.
.0110c1					_SFLNextLine:
.0110c1	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0110c3	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0110c6	f0 d4		beq $01109c			beq 	_SFLError 					; if zero, then there's no more code to search.
.0110c8	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0110cb	85 22		sta $22				sta 	DLineNumber
.0110cd	18		clc				clc
.0110ce	a5 06		lda $06				lda 	DCodePtr
.0110d0	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0110d3	85 06		sta $06				sta 	DCodePtr
.0110d5	80 85		bra $01105c			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0110d7					Command_FOR:
.0110d7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0110d9	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0110dc	d0 60		bne $01113e			bne		_CFOBad
.0110de	20 50 03	jsr $010350			jsr 	VariableFind 				; try to find variable
.0110e1	b0 15		bcs $0110f8			bcs 	_CFOExists
.0110e3	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0110e5	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0110e8	20 fa 03	jsr $0103fa			jsr 	VariableCreate 				; create it.
.0110eb	48		pha				pha 								; save on stack
.0110ec					_CFOSkipToken:
.0110ec	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0110ee	e6 06		inc $06				inc 	DCodePtr
.0110f0	e6 06		inc $06				inc 	DCodePtr
.0110f2	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0110f5	d0 f5		bne $0110ec			bne 	_CFOSkipToken
.0110f7	68		pla				pla 								; restore address
.0110f8					_CFOExists:
.0110f8	48		pha				pha 								; push variable address on stack
.0110f9	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0110fc	20 9f 04	jsr $01049f			jsr 	ExpectToken
.0110ff	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; this is the start value
.011102	bb		tyx				tyx 								; put high value in X
.011103	7a		ply				ply 								; address in Y
.011104	99 00 00	sta $0000,y			sta 	$0000,y
.011107	8a		txa				txa
.011108	99 02 00	sta $0002,y			sta 	$0002,y
.01110b	a9 28 38	lda #$3828			lda 	#toTokenID 					; expect the TO
.01110e	20 9f 04	jsr $01049f			jsr 	ExpectToken
.011111	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011113	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011115	95 02		sta $02,x			sta 	$02,x
.011117	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011119	95 04		sta $04,x			sta 	$04,x
.01111b	98		tya				tya 								; save variable address at +6
.01111c	95 06		sta $06,x			sta 	$06,x
.01111e	a9 41 3c	lda #$3c41			lda 	#forTokenID 				; save for token at +8
.011121	95 08		sta $08,x			sta 	$08,x
.011123	8a		txa				txa 								; add 8 to stack position
.011124	18		clc				clc
.011125	69 08 00	adc #$0008			adc 	#8
.011128	85 2a		sta $2a				sta 	DStack
.01112a	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.01112d	b2 06		lda ($06)			lda 	(DCodePtr)
.01112f	c9 29 38	cmp #$3829			cmp 	#stepTokenID 				; if STEP x is present.
.011132	d0 09		bne $01113d			bne 	_CFONoStep
.011134	a9 29 38	lda #$3829			lda 	#stepTokenID 				; skip STEP
.011137	20 9f 04	jsr $01049f			jsr 	ExpectToken
.01113a	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; and whatever the step is.
.01113d					_CFONoStep:
.01113d	60		rts				rts
.01113e					_CFOBad:
.01113e	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011141	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011149	76 61 72 69 61 62 6c 65 00
.011152					Command_NEXT:
.011152	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011154	b5 00		lda $00,x			lda 	$00,x
.011156	c9 41 3c	cmp #$3c41			cmp 	#forTokenID 				; if not FOR then error
.011159	f0 14		beq $01116f			beq 	_CNXOk
.01115b	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>01115e	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011166	68 6f 75 74 20 46 6f 72 00
.01116f					_CNXOk:
.01116f	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011171	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011174	90 22		bcc $011198			bcc 	_CNXNoVariable
.011176	20 50 03	jsr $010350			jsr 	VariableFind 				; get address of variable.
.011179	90 08		bcc $011183			bcc 	_CNXNextVar 				; not found variable, it's an error.
.01117b	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.01117d	ca		dex				dex
.01117e	ca		dex				dex
.01117f	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.011181	f0 15		beq $011198			beq 	_CNXNoVariable 				; then continue
.011183					_CNXNextVar:
.011183	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011186	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01118e	20 76 61 72 69 61 62 6c 65 00
.011198					_CNXNoVariable:
.011198	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.01119a	48		pha				pha
.01119b	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.01119d	38		sec				sec
.01119e	e9 08 00	sbc #$0008			sbc 	#8
.0111a1	85 2a		sta $2a				sta 	DStack
.0111a3	aa		tax				tax 								; X points to the stack.
.0111a4	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0111a6	85 06		sta $06				sta 	DCodePtr
.0111a8	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; this is the target constant
.0111ab	5a		phy				phy 								; save the target on the stack
.0111ac	48		pha				pha
.0111ad	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0111b0	85 08		sta $08				sta 	DTemp1
.0111b2	64 0a		stz $0a				stz 	DTemp1+2
.0111b4	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0111b6	c9 29 38	cmp #$3829			cmp 	#stepTokenID
.0111b9	d0 0b		bne $0111c6			bne 	_CNXNoStep
.0111bb	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0111bd	e6 06		inc $06				inc 	DCodePtr
.0111bf	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; work out the step.
.0111c2	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0111c4	84 0a		sty $0a				sty 	DTemp1+2
.0111c6					_CNXNoStep:
.0111c6	68		pla				pla 								; save the Target in DTemp2
.0111c7	85 0c		sta $0c				sta 	DTemp2
.0111c9	68		pla				pla
.0111ca	85 0e		sta $0e				sta 	DTemp2+2
.0111cc	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0111ce	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0111d0	a8		tay				tay
.0111d1	18		clc				clc
.0111d2	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0111d5	65 08		adc $08				adc 	DTemp1
.0111d7	99 00 00	sta $0000,y			sta 	$0000,y
.0111da	b9 02 00	lda $0002,y			lda 	$0002,y
.0111dd	65 0a		adc $0a				adc 	DTemp1+2
.0111df	99 02 00	sta $0002,y			sta 	$0002,y
.0111e2	38		sec				sec
.0111e3	a5 0c		lda $0c				lda 	DTemp2
.0111e5	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0111e8	85 0c		sta $0c				sta 	DTemp2
.0111ea	a5 0e		lda $0e				lda 	DTemp2+2
.0111ec	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0111ef	85 0e		sta $0e				sta 	DTemp2+2
.0111f1	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0111f3	f0 0a		beq $0111ff			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0111f5	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0111f7	45 0a		eor $0a				eor 	DTemp1+2
.0111f9	10 04		bpl $0111ff			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0111fb	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0111fc	85 06		sta $06				sta 	DCodePtr
.0111fe	60		rts				rts
.0111ff					_CNXLoopAgain:
.0111ff	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011200	18		clc				clc
.011201	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011203	aa		tax				tax
.011204	69 08 00	adc #$0008			adc 	#8
.011207	85 2a		sta $2a				sta 	DStack
.011209	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.01120b	85 22		sta $22				sta 	DLineNumber
.01120d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.01120e					Function_ONGOTO:
.01120e	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; on what GOTO :)
.011211	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011214	d0 25		bne $01123b			bne 	_FOGoFail
.011216	c9 00 00	cmp #$0000			cmp 	#0
.011219	f0 20		beq $01123b			beq 	_FOGoFail 					; we start with index = 1
.01121b	48		pha				pha 								; save count on stack
.01121c	a9 35 3e	lda #$3e35			lda 	#gotoTokenID 				; expect GOTO
.01121f	20 9f 04	jsr $01049f			jsr 	ExpectToken
.011222	fa		plx				plx 								; put count in X.
.011223					_FOGoLoop:
.011223	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011225	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011228	90 73		bcc $01129d			bcc 	FGOFail 					; if not, then we have an error.
.01122a	c9 00 c0	cmp #$c000			cmp 	#$C000
.01122d	b0 6e		bcs $01129d			bcs 	FGOFail
.01122f	ca		dex				dex 								; subtract one, if done, call GOTO code
.011230	f0 1f		beq $011251			beq 	Function_GOTO
.011232	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011234	e6 06		inc $06				inc 	DCodePtr
.011236	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; expect a comma
.011239	80 e8		bra $011223			bra 	_FOGoLoop 					; and loop round.
.01123b					_FOGoFail:
.01123b	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>01123e	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011246	47 6f 74 6f 20 76 61 6c 75 65 00
.011251					Function_GOTO:
.011251	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011253	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011256	90 45		bcc $01129d			bcc 	FGOFail 					; we don't do calculate line numbers.
.011258	c9 00 c0	cmp #$c000			cmp 	#$C000
.01125b	b0 40		bcs $01129d			bcs 	FGOFail
.01125d	38		sec				sec 								; convert to 0-32767
.01125e	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011261	aa		tax				tax
.011262	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.011265	18		clc				clc
.011266	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011268	a8		tay				tay
.011269					_FGOSearch:
.011269	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01126c	f0 18		beq $011286			beq 	_FGOUnknown
.01126e	8a		txa				txa 								; does it match line number ?
.01126f	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011272	f0 08		beq $01127c			beq 	_FGOFound 					; yes, then found.
.011274	98		tya				tya 								; no follow the link
.011275	18		clc				clc
.011276	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011279	a8		tay				tay
.01127a	80 ed		bra $011269			bra 	_FGOSearch 					; and keep looking
.01127c					_FGOFound:
.01127c	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01127e	98		tya				tya 								; Y + 4 is the code pointer.
.01127f	18		clc				clc 								; (skipping link and line #)
.011280	69 04 00	adc #$0004			adc 	#4
.011283	85 06		sta $06				sta 	DCodePtr
.011285	60		rts				rts									; and continue
.011286					_FGOUnknown:
.011286	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011289	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011291	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.01129d					FGOFail:
.01129d	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0112a0	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0112a8	20 4e 75 6d 62 65 72 00
.0112b0					Function_GOSUB:
.0112b0	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0112b2	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0112b4	18		clc				clc
.0112b5	69 02 00	adc #$0002			adc 	#2
.0112b8	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0112ba	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0112bc	95 04		sta $04,x			sta 	$04,x
.0112be	a9 36 3e	lda #$3e36			lda 	#gosubTokenID 				; save gosub token at +6
.0112c1	95 06		sta $06,x			sta 	$06,x
.0112c3	8a		txa				txa 								; advance stack by 6.
.0112c4	18		clc				clc
.0112c5	69 06 00	adc #$0006			adc 	#6
.0112c8	85 2a		sta $2a				sta 	DStack
.0112ca	80 85		bra $011251			bra 	Function_GOTO 				; and do a GOTO.
.0112cc					Function_RETURN:
.0112cc	a6 2a		ldx $2a				ldx 	DStack
.0112ce	b5 00		lda $00,x			lda 	$00,x
.0112d0	c9 36 3e	cmp #$3e36			cmp 	#gosubTokenID 				; check top token.
.0112d3	d0 11		bne $0112e6			bne 	_FRetFail
.0112d5	8a		txa				txa 								; unpick stack.
.0112d6	38		sec				sec
.0112d7	e9 06 00	sbc #$0006			sbc 	#6
.0112da	85 2a		sta $2a				sta 	DStack
.0112dc	aa		tax				tax
.0112dd	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0112df	85 06		sta $06				sta 	DCodePtr
.0112e1	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0112e3	85 22		sta $22				sta 	DLineNumber
.0112e5	60		rts				rts
.0112e6					_FRetFail:
.0112e6	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0112e9	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0112f1	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0112fe					Function_REPEAT:
.0112fe	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011300	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011302	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011304	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011306	95 04		sta $04,x			sta 	$04,x
.011308	a9 3e 3c	lda #$3c3e			lda 	#repeatTokenID 				; save repeat token at +6
.01130b	95 06		sta $06,x			sta 	$06,x
.01130d	8a		txa				txa 								; advance stack by 6.
.01130e	18		clc				clc
.01130f	69 06 00	adc #$0006			adc 	#6
.011312	85 2a		sta $2a				sta 	DStack
.011314	60		rts				rts
.011315					Function_UNTIL:
.011315	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011317	b5 00		lda $00,x			lda 	$00,x
.011319	c9 3e 3c	cmp #$3c3e			cmp 	#repeatTokenID
.01131c	d0 26		bne $011344			bne 	_FUNFail
.01131e	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; .... until what.
.011321	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011324	d0 15		bne $01133b			bne 	_FUNExit
.011326	c9 00 00	cmp #$0000			cmp 	#0
.011329	d0 10		bne $01133b			bne 	_FUNExit
.01132b	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.01132d	38		sec				sec
.01132e	e9 06 00	sbc #$0006			sbc 	#6
.011331	aa		tax				tax
.011332	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011334	85 06		sta $06				sta 	DCodePtr
.011336	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011338	85 22		sta $22				sta 	DLineNumber
.01133a	60		rts				rts
.01133b					_FUNExit:
.01133b	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.01133d	38		sec				sec
.01133e	e9 06 00	sbc #$0006			sbc 	#6
.011341	85 2a		sta $2a				sta 	DStack
.011343	60		rts				rts
.011344					_FUNFail:
.011344	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011347	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>01134f	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.01135c					Function_WHILE:
.01135c	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.01135e	48		pha				pha 								; save on stack
.01135f	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; while what.
.011362	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011365	d0 14		bne $01137b			bne 	_FWHExecute
.011367	c9 00 00	cmp #$0000			cmp 	#0
.01136a	d0 0f		bne $01137b			bne 	_FWHExecute
.01136c	68		pla				pla 								; throw away current instruction
.01136d	a9 42 3a	lda #$3a42			lda 	#wendTokenID 				; skip to WEND
.011370	a2 00 00	ldx #$0000			ldx 	#0
.011373	20 51 10	jsr $011051			jsr 	ScanForwardLevel 			; scan forward checking structures
.011376	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011378	e6 06		inc $06				inc 	DCodePtr
.01137a	60		rts				rts
.01137b					_FWHExecute:
.01137b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01137d	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.01137e	3a		dec a				dec 	a
.01137f	3a		dec a				dec 	a
.011380	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011382	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011384	95 04		sta $04,x			sta 	$04,x
.011386	a9 3f 3c	lda #$3c3f			lda 	#whileTokenID 				; save while token at +6
.011389	95 06		sta $06,x			sta 	$06,x
.01138b	8a		txa				txa 								; advance stack by 6.
.01138c	18		clc				clc
.01138d	69 06 00	adc #$0006			adc 	#6
.011390	85 2a		sta $2a				sta 	DStack
.011392	60		rts				rts
.011393					Function_WEND:
.011393	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011395	b5 00		lda $00,x			lda 	$00,x
.011397	c9 3f 3c	cmp #$3c3f			cmp 	#whileTokenID
.01139a	d0 11		bne $0113ad			bne 	_FWEFail
.01139c	8a		txa				txa 								; unpick stack and always loop back.
.01139d	38		sec				sec 								; we do the check at the top.
.01139e	e9 06 00	sbc #$0006			sbc 	#6
.0113a1	85 2a		sta $2a				sta 	DStack
.0113a3	aa		tax				tax
.0113a4	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0113a6	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0113a8	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0113aa	85 22		sta $22				sta 	DLineNumber
.0113ac	60		rts				rts
.0113ad					_FWEFail:
.0113ad	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0113b0	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0113b8	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0113c3					Function_END:
.0113c3	02 00		cop #$00			cop 	#0
.0113c5					Function_RUN:
.0113c5	20 1e 14	jsr $01141e			jsr 	Function_CLEAR 				; clear all variables.
.0113c8	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0113ca	18		clc				clc
.0113cb	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0113ce					_FRun_NextLineNumber:
.0113ce	a8		tay				tay 								; put in Y
.0113cf	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0113d2	f0 ef		beq $0113c3			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0113d4	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0113d7	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0113d9	98		tya				tya 								; get address back
.0113da	18		clc				clc 								; skip over the link/line number
.0113db	69 04 00	adc #$0004			adc 	#4
.0113de	85 06		sta $06				sta 	DCodePtr
.0113e0					_FRun_NextInstruction:
.0113e0	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0113e2	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0113e4	f0 32		beq $011418			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0113e6	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; colon then skip
.0113e9	f0 18		beq $011403			beq 	_FRun_Colon
.0113eb	a8		tay				tay 								; save in Y
.0113ec	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0113ef	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0113f2	d0 15		bne $011409			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0113f4	98		tya				tya 								; get token back
.0113f5	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0113f8	0a		asl a				asl 	a 							; double it into X
.0113f9	aa		tax				tax
.0113fa	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0113fc	e6 06		inc $06				inc 	DCodePtr
.0113fe	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011401	80 dd		bra $0113e0			bra 	_FRun_NextInstruction 		; do the following instruction.
.011403					_FRun_Colon:
.011403	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011405	e6 06		inc $06				inc 	DCodePtr
.011407	80 d7		bra $0113e0			bra 	_FRun_NextInstruction 		; do the following instruction.
.011409					_FRun_TryLET:
.011409	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.01140b	c9 00 c0	cmp #$c000			cmp 	#$C000
.01140e	90 05		bcc $011415			bcc		_FRunSyntax 				; no, must be syntax.
.011410	20 51 0d	jsr $010d51			jsr 	Function_LET 				; try as a LET.
.011413	80 cb		bra $0113e0			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011415					_FRunSyntax:
.011415	82 77 f0	brl $01048f			brl 	SyntaxError
.011418					_FRun_EndInstruction:
.011418	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01141a	1a		inc a				inc 	a 							; go to link for next line
.01141b	1a		inc a				inc 	a
.01141c	80 b0		bra $0113ce			bra 	_FRun_NextLineNumber
.01141e					Function_CLEAR:
.01141e	20 2a 14	jsr $01142a			jsr 	ClearVariablesPointersAndStacks
.011421	60		rts				rts
.011422					Function_STOP:
.011422	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>011425	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01142a					ClearVariablesPointersAndStacks:
.01142a	a9 80 00	lda #$0080			lda 	#BASStack
.01142d	85 2a		sta $2a				sta 	DStack
.01142f	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011431	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011434	a9 00 00	lda #$0000			lda 	#$0000
.011437	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011439	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01143b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01143e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011440	20 67 14	jsr $011467			jsr 	FindCodeEnd 				; find where the program ends.
.011443	a8		tay				tay 								; Y points to it.
.011444	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011447	99 02 00	sta $0002,y			sta 	$0002,y
.01144a	99 04 00	sta $0004,y			sta 	$0004,y
.01144d	98		tya				tya 								; start of working memory up
.01144e	18		clc				clc
.01144f	69 06 00	adc #$0006			adc 	#6
.011452	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011455	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011457	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01145a					_FCLoop:
.01145a	a9 00 00	lda #$0000			lda 	#$0000
.01145d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01145f	c8		iny				iny
.011460	c8		iny				iny
.011461	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011464	d0 f4		bne $01145a			bne 	_FCLoop
.011466	60		rts				rts
.011467					FindCodeEnd:
.011467	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01146a	18		clc				clc
.01146b	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01146d	a8		tay				tay
.01146e					_FCELoop:
.01146e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011471	f0 08		beq $01147b			beq 	_FCEExit
.011473	98		tya				tya 								; add offset
.011474	18		clc				clc
.011475	79 00 00	adc $0000,y			adc 	$0000,y
.011478	a8		tay				tay
.011479	80 f3		bra $01146e			bra 	_FCELoop
.01147b					_FCEExit:
.01147b	98		tya				tya 								; return in A
.01147c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.01147d					Function_Dim:
.01147d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01147f	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011482	f0 3b		beq $0114bf			beq		_FDIMNotArray 				; no, error.
.011484	20 50 03	jsr $010350			jsr 	VariableFind 				; try to find it.
.011487	b0 41		bcs $0114ca			bcs 	_FDIMExists 				; if it does, that's an error.
.011489	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01148b	48		pha				pha
.01148c	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.01148e	48		pha				pha
.01148f					_FDIMSkip:
.01148f	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011491	e6 06		inc $06				inc 	DCodePtr
.011493	e6 06		inc $06				inc 	DCodePtr
.011495	29 00 08	and #$0800			and 	#IDContMask
.011498	d0 f5		bne $01148f			bne 	_FDIMSkip
.01149a	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; evaluate the size
.01149d	20 b9 04	jsr $0104b9			jsr 	ExpectRightBracket 			; check the ) following.
.0114a0	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0114a3	d0 3b		bne $0114e0			bne 	_FDIMSize
.0114a5	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0114a8	f0 36		beq $0114e0			beq 	_FDIMSize
.0114aa	7a		ply				ply 								; restore HashTablePtr
.0114ab	84 20		sty $20				sty 	DHashTablePtr
.0114ad	7a		ply				ply 								; so now A is the high index, Y points to the token
.0114ae	20 fa 03	jsr $0103fa			jsr 	VariableCreate 				; create the variable.
.0114b1	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0114b3	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if not a comma, exit
.0114b6	d0 06		bne $0114be			bne 	_FDIMExit
.0114b8	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0114ba	e6 06		inc $06				inc 	DCodePtr
.0114bc	80 bf		bra $01147d			bra 	Function_DIM 				; and do another
.0114be					_FDIMExit:
.0114be	60		rts				rts
.0114bf					_FDIMNotArray:
.0114bf	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0114c2	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0114ca					_FDIMExists:
.0114ca	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0114cd	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0114d5	65 64 69 6d 65 6e 73 69 6f 6e 00
.0114e0					_FDIMSize:
.0114e0	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0114e3	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0114eb	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.0114f1					Function_COLLECT:
.0114f1	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0114f3	85 0c		sta $0c				sta 	DTemp2
.0114f5	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0114f8	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0114fa	85 0e		sta $0e				sta 	DTemp2+2
.0114fc	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0114fe	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011500					_FCNextPass:
.011500	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011502	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011504	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011506	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011509	18		clc				clc
.01150a	65 02		adc $02				adc 	DBaseAddress
.01150c	a8		tay				tay 								; put in Y
.01150d	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011510					_FCO1:
.011510	20 36 15	jsr $011536			jsr  	COLLECTScanVariable 		; scan that one.
.011513	c8		iny				iny 	 							; go to next pointer
.011514	c8		iny				iny
.011515	ca		dex				dex
.011516	d0 f8		bne $011510			bne 	_FCO1 						; until done all 16.
.011518	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01151b					_FCO2:
.01151b	20 4a 15	jsr $01154a			jsr  	COLLECTScanArray 			; scan that one.
.01151e	c8		iny				iny 	 							; go to next pointer
.01151f	c8		iny				iny
.011520	ca		dex				dex
.011521	d0 f8		bne $01151b			bne 	_FCO2 						; until done all 16.
.011523	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011525	f0 0e		beq $011535			beq		_FCExit 					; if finished then exit.
.011527	48		pha				pha 								; save the target address
.011528	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01152a	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01152c	20 84 05	jsr $010584			jsr 	StringMakeConcrete 			; make the string concrete.
.01152f	7a		ply				ply 								; restore the string.
.011530	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011533	80 cb		bra $011500			bra		_FCNextPass
.011535					_FCExit:
.011535	60		rts				rts
.011536					COLLECTScanVariable:
.011536	da		phx				phx 								; save XY
.011537	5a		phy				phy
.011538					_CSVLoop:
.011538	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01153b	f0 0a		beq $011547			beq 	_CSVExit
.01153d	a8		tay				tay 								; put new address into Y
.01153e	18		clc				clc 								; which is four on.
.01153f	69 04 00	adc #$0004			adc 	#4
.011542	20 6b 15	jsr $01156b			jsr 	COLLECTCheck
.011545	80 f1		bra $011538			bra 	_CSVLoop
.011547					_CSVExit:
.011547	7a		ply				ply
.011548	fa		plx				plx
.011549	60		rts				rts
.01154a					COLLECTScanArray:
.01154a	da		phx				phx 								; save XY
.01154b	5a		phy				phy
.01154c					_CSALoop:
.01154c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01154f	f0 17		beq $011568			beq 	_CSAExit
.011551	a8		tay				tay 								; put new address in Y
.011552	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011555	aa		tax				tax
.011556	e8		inx				inx									; +1 as one more data element.
.011557	98		tya				tya 								; point A to first element, at +6
.011558	18		clc				clc
.011559	69 06 00	adc #$0006			adc 	#6
.01155c					_CSADoAllStrings:
.01155c	20 6b 15	jsr $01156b			jsr 	COLLECTCheck 				; collect check the first.
.01155f	1a		inc a				inc 	a 							; advance the pointer.
.011560	1a		inc a				inc 	a
.011561	1a		inc a				inc 	a
.011562	1a		inc a				inc 	a
.011563	ca		dex				dex
.011564	d0 f6		bne $01155c			bne 	_CSADoAllStrings 			; until all strings are done.
.011566	80 e4		bra $01154c			bra 	_CSALoop
.011568					_CSAExit:
.011568	7a		ply				ply
.011569	fa		plx				plx
.01156a	60		rts				rts
.01156b					COLLECTCheck:
.01156b	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.01156d	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.01156f	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011571	90 0a		bcc $01157d			bcc 	_COCExit
.011573	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011575	b0 06		bcs $01157d			bcs 	_COCExit
.011577	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011579	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01157b	85 14		sta $14				sta 	DSignCount
.01157d					_COCExit:
.01157d	a5 0a		lda $0a				lda 	DTemp1+2
.01157f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011580					Command_POKE:
.011580	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; address
.011583	48		pha				pha	 								; save on stack
.011584	5a		phy				phy
.011585	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; comma seperator.
.011588	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; data
.01158b	fa		plx				plx 								; pull address and store in DTemp1
.01158c	86 0a		stx $0a				stx 	DTemp1+2
.01158e	fa		plx				plx
.01158f	86 08		stx $08				stx 	DTemp1+0
.011591	e2 20		sep #$20			sep 	#$20 						; byte mode
.011593	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011595	c2 20		rep #$20			rep 	#$20 						; word mode
.011597	60		rts				rts
.011598					Command_DOKE:
.011598	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; address
.01159b	48		pha				pha	 								; save on stack
.01159c	5a		phy				phy
.01159d	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; comma seperator.
.0115a0	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; data
.0115a3	fa		plx				plx 								; pull address and store in DTemp1
.0115a4	86 0a		stx $0a				stx 	DTemp1+2
.0115a6	fa		plx				plx
.0115a7	86 08		stx $08				stx 	DTemp1+0
.0115a9	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0115ab	60		rts				rts
.0115ac					Command_LOKE:
.0115ac	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; address
.0115af	48		pha				pha	 								; save on stack
.0115b0	5a		phy				phy
.0115b1	20 c2 04	jsr $0104c2			jsr 	ExpectComma 				; comma seperator.
.0115b4	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; data
.0115b7	fa		plx				plx 								; pull address and store in DTemp1
.0115b8	86 0a		stx $0a				stx 	DTemp1+2
.0115ba	fa		plx				plx
.0115bb	86 08		stx $08				stx 	DTemp1+0
.0115bd	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0115bf	98		tya				tya
.0115c0	a0 02 00	ldy #$0002			ldy 	#2
.0115c3	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0115c5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0115c6					Function_ASSERT:
.0115c6	20 d1 02	jsr $0102d1			jsr 	EvaluateInteger 			; something that returns an integer.
.0115c9	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0115cb	05 08		ora $08				ora 	Dtemp1
.0115cd	f0 01		beq $0115d0			beq 	_FAssFail
.0115cf	60		rts				rts
.0115d0					_FAssFail:
.0115d0	20 54 04	jsr $010454			jsr 	ErrorHandler 						; call error routine
>0115d3	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0115db	61 69 6c 65 64 00
.0115e1					Function_CLS:
.0115e1	20 0c 16	jsr $01160c			jsr 	HWClearScreen
.0115e4	60		rts				rts
.0115e5					Function_REM:
.0115e5	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0115e7	f0 0b		beq $0115f4			beq 	_FRemSyntax 				; if 0, syntax error
.0115e9	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0115ec	b0 06		bcs $0115f4			bcs 	_FRemSyntax
.0115ee	18		clc				clc 								; add to DCodePtr
.0115ef	65 06		adc $06				adc 	DCodePtr
.0115f1	85 06		sta $06				sta 	DCodePtr
.0115f3	60		rts				rts
.0115f4					_FRemSyntax:
.0115f4	82 98 ee	brl $01048f			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0115f7					SwitchBasicInstance:
.0115f7	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0115f9	20 0c 16	jsr $01160c			jsr 	HWClearScreen 						; clear screen
.0115fc	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0115ff	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011601	86 02		stx $02				stx		DBaseAddress
.011603	84 04		sty $04				sty 	DHighAddress
.011605	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011606	48		pha				pha 										; then copy it into B.
.011607	ab		plb				plb
.011608	ab		plb				plb
.011609	4c c5 13	jmp $0113c5			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.01160c					HWClearScreen:
.01160c	48		pha				pha
.01160d	da		phx				phx
.01160e	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011611	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011614	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011618	ca		dex				dex
.011619	10 f6		bpl $011611			bpl 	_CS0
.01161b	64 28		stz $28				stz 	DCursor
.01161d	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011620	8f 00 00 0f	sta $0f0000			sta 	$F0000
.011624	fa		plx				plx
.011625	68		pla				pla
.011626	60		rts				rts
.011627					HWPrintChar:
.011627	48		pha				pha
.011628	da		phx				phx
.011629	a6 28		ldx $28				ldx 	DCursor
.01162b	e2 20		sep #$20			sep 	#$20
.01162d	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011631	c2 20		rep #$20			rep 	#$20
.011633	e8		inx				inx
.011634	8a		txa				txa
.011635	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011638	85 28		sta $28				sta 	DCursor
.01163a	aa		tax				tax
.01163b	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.01163e	e2 20		sep #$20			sep 	#$20
.011640	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011644	c2 20		rep #$20			rep 	#$20
.011646	fa		plx				plx
.011647	68		pla				pla
.011648	60		rts				rts
.011649					HWNewLine:
.011649	48		pha				pha
.01164a	da		phx				phx
.01164b	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01164e					HWMoveCursor:
.01164e	a9 20 00	lda #$0020			lda 	#32
.011651	20 27 16	jsr $011627			jsr 	HWPrintChar
.011654	8a		txa				txa
.011655	25 28		and $28				and 	DCursor
.011657	d0 f5		bne $01164e			bne 	HWMoveCursor
.011659	fa		plx				plx
.01165a	68		pla				pla
.01165b	60		rts				rts
.01165c	48		pha		HWTab:	pha
.01165d	da		phx				phx
.01165e	a2 07 00	ldx #$0007			ldx 	#7
.011661	80 eb		bra $01164e			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	d0 42 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0a 00 02 00 35 3e 04 40
>024108	00 00 4e 00 03 00 41 3c 41 c4 06 22 00 40 28 38
>024118	08 40 24 32 34 3e 06 00 03 52 41 4d 23 32 16 30
>024128	41 c4 0a 24 b5 c8 2e c3 22 32 10 40 26 32 22 32
>024138	16 30 1a 30 41 c4 0a 24 b5 c8 2e c3 26 32 22 32
>024148	10 40 26 32 24 32 46 3a 41 c4 24 32 2d 3e 00 00
>024158	08 00 04 00 3d 3e 00 00 06 00 05 00 00 00 1e 00
>024168	0a 00 2a 3e 16 00 13 50 4f 4b 45 20 4c 4f 4b 45
>024178	20 44 4f 4b 45 20 74 65 73 74 00 00 20 00 0f 00
>024188	01 e0 06 22 0a 00 06 48 65 6c 6c 6f 2e 00 0a 24
>024198	0a 00 07 2e 57 6f 72 6c 64 21 00 00 26 00 11 00
>0241a8	34 3e 06 00 02 3e 3e 00 23 32 1e 30 01 e0 26 32
>0241b8	0a 24 06 00 03 2e 2e 2e 0a 24 1d 30 01 e0 26 32
>0241c8	00 00 06 00 12 00 00 00 28 00 28 00 34 3e 0a 00
>0241d8	06 32 20 20 36 20 5b 00 0a 24 20 30 01 e0 22 32
>0241e8	02 40 22 32 07 40 26 32 0a 24 04 00 01 5d 00 00
>0241f8	06 00 29 00 00 00 08 00 64 00 2f 3e 00 00 06 00
>024208	65 00 00 00 1c 00 7d 00 b5 c8 2e c3 06 22 02 40
>024218	0c 26 02 10 00 40 0a 24 04 40 0c 26 00 50 00 00
>024228	0a 00 82 00 36 3e 82 40 00 00 08 00 a0 00 34 3e
>024238	00 00 16 00 aa 00 3c 3e b5 c8 2e c3 0a 24 02 40
>024248	22 32 0b 24 2a 40 00 00 0a 00 b4 00 36 3e e6 40
>024258	00 00 08 00 be 00 2f 3e 00 00 16 00 c8 00 2a 3e
>024268	0e 00 0b 44 69 73 70 6c 61 79 20 52 41 4d 00 00
>024278	12 00 e6 00 41 3c 41 c4 06 22 00 40 28 38 08 40
>024288	00 00 2e 00 f0 00 34 3e 16 30 41 c4 0a 24 b5 c8
>024298	2e c3 22 32 10 40 26 32 22 32 16 30 1a 30 41 c4
>0242a8	0a 24 b5 c8 2e c3 26 32 22 32 10 40 26 32 00 00
>0242b8	0a 00 fa 00 46 3a 41 c4 00 00 08 00 04 01 37 3e
>0242c8	00 00 00 00 ee ee ee ee 00 00 00 00 00 00 00 00
>0242d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2001 times (32016 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
