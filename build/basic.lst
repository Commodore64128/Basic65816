
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 19 18:22:05 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c a0 1d 01	jmp $011da0			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	aa 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	76 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	86 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	96 0a					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	da 0a					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	41 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a6 0a					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	23 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	05 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c0 0a					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c0 09					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	41 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4d 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	ca 0b					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	41 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	52 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	64 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	db 0c					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	bb 0c					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	97 0c					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	81 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	03 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	23 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	15 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	4d 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	81 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	b7 0e					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	d1 0e					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	e8 0e					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	8c 11					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	4a 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	cb 0d					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	62 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	f4 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	e3 10					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	bd 0d					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	aa 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	aa 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	aa 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	aa 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	aa 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	aa 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	aa 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	aa 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	02 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	ce 11					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	e3 1b					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	3e 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	41 1a					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	d0 1a					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	cc 1a					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	29 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	fe 1b					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	ca 15					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	cc 18					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	2b 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	47 19					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	89 18					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	7d 16					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	9d 1b					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	b5 1b					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	c9 1b					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	92 13					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	19 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	bd 1a					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	5b 12					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	21 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	79 19					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	d7 19					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	16 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	52 17					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	aa 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	0e 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	90 19					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	aa 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	ab 16					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	cd 17					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	d2 12					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 25 03	brl $0105bb			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c bb 05	jmp $0105bb			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 23		bcc $010374			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	38		sec				sec 								; set up return string.
.010368	f0 06		beq $010370			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036a	18		clc				clc 								; returning a number, read high data word
.01036b	a0 02 00	ldy #$0002			ldy 	#2
.01036e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010370					_VANLoadLower:
.010370	a8		tay				tay 								; put A into Y (this is the high byte)
.010371	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010373	60		rts				rts
.010374					_VANError:
.010374	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010377	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01037f	20 75 6e 6b 6e 6f 77 6e 00
.010388					VariableFind:
.010388	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01038a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01038d	90 5c		bcc $0103eb			bcc 	_VFError
.01038f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010392	b0 11		bcs $0103a5			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010394	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010397	3a		dec a				dec 	a 							; now 0-25
.010398	0a		asl a				asl 	a 							; x 4 and clear carry
.010399	0a		asl a				asl 	a
.01039a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01039d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.01039f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103a1	e6 06		inc $06				inc 	DCodePtr
.0103a3	38		sec				sec 								; return with carry set.
.0103a4	60		rts				rts
.0103a5					_VFSlowVariable:
.0103a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103a7	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103aa	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103ab	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103ac	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103af	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103b1	85 08		sta $08				sta 	DTemp1
.0103b3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103b5	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103b8	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103b9	65 08		adc $08				adc 	DTemp1
.0103bb	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103bd	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103bf					_VFNext:
.0103bf	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103c1	f0 26		beq $0103e9			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103c3	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103c5	a8		tay				tay 								; read the address of the name at $0002,y
.0103c6	b9 02 00	lda $0002,y			lda 	$0002,y
.0103c9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103cb	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103ce					_VFCompare:
.0103ce	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103d0	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103d2	d0 eb		bne $0103bf			bne 	_VFNext 					; if not, go to the next one.
.0103d4	c8		iny				iny 								; advance token pointer
.0103d5	c8		iny				iny
.0103d6	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103d9	d0 f3		bne $0103ce			bne 	_VFCompare
.0103db	98		tya				tya 								; this is the length of the word.
.0103dc	18		clc				clc 								; so we add it to the code pointer
.0103dd	65 06		adc $06				adc 	DCodePtr
.0103df	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103e1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103e3	18		clc				clc 								; four on is the actual data
.0103e4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103e7	38		sec				sec 								; return with CS indicating success
.0103e8	60		rts				rts
.0103e9					_VFFail:
.0103e9	18		clc				clc
.0103ea	60		rts				rts
.0103eb					_VFError:
.0103eb	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0103ee	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103f6	76 61 72 69 61 62 6c 65 00
.0103ff					VariableSubscript:
.0103ff	48		pha				pha		 							; save variable address on stack.
.010400	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.010403	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; skip right bracket.
.010406	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010409	d0 10		bne $01041b			bne 	_VANSubscript
.01040b	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01040d	f0 02		beq $010411			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01040f	b0 0a		bcs $01041b			bcs 	_VANSubscript
.010411					_VANSubOkay:
.010411	0a		asl a				asl 	a 							; double lsword
.010412	0a		asl a				asl 	a 							; and again, also clears carry.
.010413	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010415	68		pla				pla 								; restore DVariablePtr
.010416	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010417	1a		inc a				inc 	a
.010418	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01041a	60		rts				rts
.01041b					_VANSubscript:
.01041b	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01041e	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010426	79 20 53 75 62 73 63 72 69 70 74 00
.010432					VariableCreate:
.010432	48		pha				pha 								; save count.
.010433	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010436	29 00 20	and #$2000			and 	#IDTypeMask
.010439	f0 06		beq $010441			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01043b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01043e	18		clc				clc 								; which is guaranteed by have a 0 length.
.01043f	65 02		adc $02				adc 	DBaseAddress
.010441					_VCIsInteger:
.010441	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010443	68		pla				pla 								; restore count
.010444	48		pha				pha
.010445	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010446	0a		asl a				asl 	a 							; 2 x # items.
.010447	0a		asl a				asl 	a 							; 4 x # items.
.010448					_VCNotSingle:
.010448	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01044a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01044d	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010450	f0 04		beq $010456			beq 	_VCNotArray
.010452	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010454	e6 08		inc $08				inc 	DTemp1
.010456					_VCNotArray:
.010456	5a		phy				phy 								; save address of first token on stack.
.010457	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01045a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01045c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045e	18		clc				clc 								; add 4 for link and name words
.01045f	69 04 00	adc #$0004			adc 	#4
.010462	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010464	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010466	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010468					_VCErase:
.010468	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01046a	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046d	c8		iny				iny
.01046e	c8		iny				iny
.01046f	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010471	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010473	d0 f3		bne $010468			bne 	_VCErase
.010475	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010477	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010479	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01047c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.01047f	18		clc				clc
.010480	65 02		adc $02				adc 	DBaseAddress
.010482	85 08		sta $08				sta 	DTemp1
.010484	68		pla				pla 								; restore the token address
.010485	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010487	b0 03		bcs $01048c			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010489	20 9b 04	jsr $01049b			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.01048c					_VCDontClone:
.01048c	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01048f	68		pla				pla 								; restore count and store.
.010490	99 04 00	sta $0004,y			sta 	$0004,y
.010493	98		tya				tya 								; update the head link
.010494	92 20		sta ($20)			sta 	(DHashTablePtr)
.010496	18		clc				clc 								; advance pointer to the data bit.
.010497	69 04 00	adc #$0004			adc 	#4
.01049a	60		rts				rts 								; and done.
.01049b					VCCloneIdentifier:
.01049b	da		phx				phx 								; save XY
.01049c	5a		phy				phy
.01049d	aa		tax				tax 								; identifier address in Y.
.01049e	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a3	48		pha				pha
.0104a4					_VCCloneLoop:
.0104a4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a7	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a9	48		pha				pha 								; save on stack
.0104aa	1a		inc a				inc 	a 							; space for one token.
.0104ab	1a		inc a				inc 	a
.0104ac	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104ae	7a		ply				ply 								; address of word in Y
.0104af	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b2	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b5	e8		inx				inx 								; advance the token pointer
.0104b6	e8		inx				inx
.0104b7	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104ba	d0 e8		bne $0104a4			bne 	_VCCloneLoop
.0104bc	68		pla				pla 								; restore start address
.0104bd	7a		ply				ply 								; and the others
.0104be	fa		plx				plx
.0104bf	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104c0					LineDelete:
.0104c0	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c1	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c3	18		clc				clc
.0104c4	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c7	a8		tay				tay
.0104c8					_LDLoop:
.0104c8	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104cb	f0 2d		beq $0104fa			beq 	_LDExit						; exit if zero ; line does not exist
.0104cd	8a		txa				txa 								; found a match
.0104ce	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d1	f0 08		beq $0104db			beq		_LDFound
.0104d3	98		tya				tya 								; follow the link.
.0104d4	18		clc				clc
.0104d5	79 00 00	adc $0000,y			adc 	$0000,y
.0104d8	a8		tay				tay
.0104d9	80 ed		bra $0104c8			bra 	_LDLoop
.0104db					_LDFound:
.0104db	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104dd	98		tya				tya 								; follow link to next.
.0104de	18		clc				clc
.0104df	79 00 00	adc $0000,y			adc 	$0000,y
.0104e2	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e4	20 13 1b	jsr $011b13			jsr 	FindCodeEnd 				; find the end of the code.
.0104e7	38		sec				sec
.0104e8	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104ea	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104eb	1a		inc a				inc 	a
.0104ec	aa		tax				tax
.0104ed	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104f0	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f2	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f4	c8		iny				iny
.0104f5	c8		iny				iny
.0104f6	ca		dex				dex
.0104f7	ca		dex				dex
.0104f8	d0 f6		bne $0104f0			bne 	_LDCopy
.0104fa					_LDExit:
.0104fa	60		rts				rts
.0104fb					LineInsert:
.0104fb	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104fd	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.0104ff	a0 00 00	ldy #$0000			ldy 	#0
.010502					_LIFindLength:
.010502	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010504	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010507	f0 10		beq $010519			beq 	_LIFindEnd
.010509	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050c	90 04		bcc $010512			bcc 	_LIQString
.01050e	c8		iny				iny 								; otherwise just skip it.
.01050f	c8		iny				iny
.010510	80 f0		bra $010502			bra 	_LIFindLength
.010512					_LIQString:
.010512	98		tya				tya 								; skip quoted strings
.010513	18		clc				clc
.010514	71 08		adc ($08),y			adc 	(DTemp1),y
.010516	a8		tay				tay
.010517	80 e9		bra $010502			bra 	_LIFindLength
.010519					_LIFindEnd:
.010519	98		tya				tya 								; the tokens in the line
.01051a	18		clc				clc
.01051b	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01051e	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010520	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010523	18		clc				clc
.010524	65 02		adc $02				adc 	DBaseAddress
.010526	a8		tay				tay
.010527					_LIFindInsertPoint:
.010527	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01052a	f0 0f		beq $01053b			beq		_LIFoundInsertPoint
.01052c	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.01052f	c5 0c		cmp $0c				cmp 	DTemp2
.010531	b0 08		bcs $01053b			bcs 	_LIFoundInsertPoint
.010533	98		tya				tya 								; if < go to the next line.
.010534	18		clc				clc
.010535	79 00 00	adc $0000,y			adc 	$0000,y
.010538	a8		tay				tay
.010539	80 ec		bra $010527			bra 	_LIFindInsertPoint
.01053b					_LIFoundInsertPoint:
.01053b	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053d	20 13 1b	jsr $011b13			jsr 	FindCodeEnd 				; get the end of the code.
.010540	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010542	18		clc				clc
.010543	65 24		adc $24				adc 	DTemp3
.010545	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010547					_LICopyMove:
.010547	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010549	92 34		sta ($34)			sta 	(DTemp4+2)
.01054b	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054d	c5 36		cmp $36				cmp 	DTemp5
.01054f	f0 0a		beq $01055b			beq 	_LICopyMoveOver
.010551	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010553	c6 32		dec $32				dec 	DTemp4
.010555	c6 34		dec $34				dec 	DTemp4+2
.010557	c6 34		dec $34				dec 	DTemp4+2
.010559	80 ec		bra $010547			bra 	_LICopyMove
.01055b					_LICopyMoveOver:
.01055b	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055d	92 36		sta ($36)			sta 	(DTemp5)
.01055f	a0 02 00	ldy #$0002			ldy 	#2
.010562	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010564	91 36		sta ($36),y			sta 	(DTemp5),y
.010566	a0 04 00	ldy #$0004			ldy 	#4
.010569					_LICopyTokens:
.010569	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056b	91 36		sta ($36),y			sta 	(DTemp5),y
.01056d	c8		iny				iny
.01056e	c8		iny				iny
.01056f	e6 08		inc $08				inc 	DTemp1
.010571	e6 08		inc $08				inc 	DTemp1
.010573	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010575	c6 24		dec $24				dec 	DTemp3
.010577	a5 24		lda $24				lda 	DTemp3
.010579	c9 04 00	cmp #$0004			cmp 	#4
.01057c	d0 eb		bne $010569			bne 	_LICopyTokens
.01057e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01057f					ErrorHandler:
.01057f	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010581	fa		plx				plx 								; address of error message -1
.010582	e8		inx				inx 								; error message.
.010583	20 27 06	jsr $010627			jsr 	PrintROMMessage 			; print message in ROM
.010586	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010588	f0 15		beq $01059f			beq 	_EHEndMessage
.01058a	a2 a5 05	ldx #$05a5			ldx 	#_EHAt & $FFFF 				; print " at "
.01058d	20 27 06	jsr $010627			jsr 	PrintROMMessage
.010590	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010592	a0 00 00	ldy #$0000			ldy 	#0
.010595	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010598	20 3e 10	jsr $01103e			jsr 	ConvertToString 			; convert and print it.
.01059b	a8		tay				tay
.01059c	20 45 06	jsr $010645			jsr 	PrintBASICString
.01059f					_EHEndMessage:
.01059f	20 c6 1c	jsr $011cc6			jsr 	HWNewLine
.0105a2	4c ca 1d	jmp $011dca			jmp 	NextCommand 				; get next command.
>0105a5	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105aa					IllegalToken:
.0105aa	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0105ad	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b5	54 6f 6b 65 6e 00
.0105bb					SyntaxError:
.0105bb	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0105be	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c6	72 72 6f 72 00
.0105cb					ExpectToken:
.0105cb	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105cd	d0 05		bne $0105d4			bne 	_CTKError					; error if not
.0105cf	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105d1	e6 06		inc $06				inc 	DCodePtr
.0105d3	60		rts				rts
.0105d4					_CTKError:
.0105d4	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0105d7	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105df	74 6f 6b 65 6e 00
.0105e5					ExpectRightBracket:
.0105e5	48		pha				pha
.0105e6	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105e9	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.0105ec	68		pla				pla
.0105ed	60		rts				rts
.0105ee					ExpectComma:
.0105ee	48		pha				pha
.0105ef	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105f2	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.0105f5	68		pla				pla
.0105f6	60		rts				rts
.0105f7					CheckBothNumeric:
.0105f7	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105f9	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105fb	30 01		bmi $0105fe			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105fd	60		rts				rts
.0105fe					_CBNFail:
.0105fe	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010601	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010609	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010617					ResetTypeInteger:
.010617	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010619	29 ff 7f	and #$7fff			and 	#$7FFF
.01061c	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01061e	60		rts				rts
.01061f					ResetTypeString:
.01061f	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010621	09 00 80	ora #$8000			ora 	#$8000
.010624	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010626	60		rts				rts
.010627					PrintROMMessage:
.010627	48		pha				pha
.010628	da		phx				phx
.010629					_PRMLoop:
.010629	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01062d	29 ff 00	and #$00ff			and 	#$00FF
.010630	f0 10		beq $010642			beq 	_PRMExit
.010632	c9 0d 00	cmp #$000d			cmp 	#13
.010635	d0 05		bne $01063c			bne 	_PRMChar
.010637	20 c6 1c	jsr $011cc6			jsr 	HWNewLine
.01063a	80 03		bra $01063f			bra 	_PRMNext
.01063c					_PRMChar:
.01063c	20 75 1c	jsr $011c75			jsr 	HWPrintChar
.01063f					_PRMNext:
.01063f	e8		inx				inx
.010640	80 e7		bra $010629			bra 	_PRMLoop
.010642					_PRMExit:
.010642	fa		plx				plx
.010643	68		pla				pla
.010644	60		rts				rts
.010645					PrintBASICString:
.010645	48		pha				pha
.010646	da		phx				phx
.010647	5a		phy				phy
.010648	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01064b	29 ff 00	and #$00ff			and 	#$00FF
.01064e	f0 0b		beq $01065b			beq 	_PBSExit 					; null string
.010650	aa		tax				tax
.010651					_PBSLoop:
.010651	c8		iny				iny
.010652	b9 00 00	lda $0000,y			lda 	$0000,y
.010655	20 75 1c	jsr $011c75			jsr 	HWPrintChar
.010658	ca		dex				dex
.010659	d0 f6		bne $010651			bne 	_PBSLoop
.01065b					_PBSExit:
.01065b	7a		ply				ply
.01065c	fa		plx				plx
.01065d	68		pla				pla
.01065e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.01065f					StringResetPermanent:
.01065f	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010661	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010664	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010666	60		rts				rts
.010667					StringAssignPermanent:
.010667	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01066a	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01066c	90 0f		bcc $01067d			bcc 	_SMCExit
.01066e	85 08		sta $08				sta 	DTemp1 						; source
.010670	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010672	29 ff 00	and #$00ff			and 	#$00FF
.010675	d0 07		bne $01067e			bne 	_SMCNonZero 				; if not "" skip.
.010677	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01067a	18		clc				clc 								; this reference is used for all empty strings.
.01067b	65 02		adc $02				adc 	DBaseAddress
.01067d					_SMCExit:
.01067d	60		rts				rts
.01067e					_SMCNonZero:
.01067e	48		pha				pha 								; save on stack.
.01067f	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010682	18		clc				clc
.010683	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010686	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010688	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01068a	85 0c		sta $0c				sta 	DTemp2 						; target
.01068c	7a		ply				ply 								; get length copy from here until Y goes -ve
.01068d	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01068f					_SMCLoop:
.01068f	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.010691	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010693	88		dey				dey 								; Y+1 times.
.010694	10 f9		bpl $01068f			bpl 	_SMCLoop
.010696	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010698	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01069a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.01069b					StringTempAllocate:
.01069b	48		pha				pha
.01069c	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01069e	d0 09		bne $0106a9			bne 	_STANoReset
.0106a0	5a		phy				phy 								; reset the temp string pointer.
.0106a1	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0106a4	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106a6	85 16		sta $16				sta 	DTempStringPointer
.0106a8	7a		ply				ply
.0106a9					_STANoReset:
.0106a9	68		pla				pla 								; get length.
.0106aa	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0106ad	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0106b0	18		clc				clc 								; this adds one, for the length.
.0106b1	65 16		adc $16				adc 	DTempStringPointer
.0106b3	85 16		sta $16				sta 	DTempStringPointer
.0106b5	48		pha				pha 								; save start address
.0106b6	a9 00 00	lda #$0000			lda 	#$0000
.0106b9	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0106bb	92 16		sta ($16)			sta		(DTempStringPointer)
.0106bd	c2 20		rep #$20			rep 	#$20
.0106bf	68		pla				pla 								; restore start address
.0106c0	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.0106c2	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0106c4	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0106c6	60		rts				rts
.0106c7					StringWriteCharacter:
.0106c7	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.0106c9	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.0106cb	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.0106cd	1a		inc a				inc 	a
.0106ce	92 18		sta ($18)			sta 	(DStartTempString)
.0106d0	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.0106d2	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.0106d4	60		rts				rts
.0106d5					StringCreateCopy:
.0106d5	a8		tay				tay 								; put pointer to string in Y
.0106d6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0106d9	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0106dc	f0 17		beq $0106f5			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.0106de	da		phx				phx 								; save X and put the character count in X
.0106df	aa		tax				tax
.0106e0					_SCCCopy:
.0106e0	c8		iny				iny 								; advance and read (first time skips length)
.0106e1	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0106e3	b9 00 00	lda $0000,y			lda 	$0000,y
.0106e6	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0106e8	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0106ea	1a		inc a				inc 	a
.0106eb	92 18		sta ($18)			sta 	(DStartTempString)
.0106ed	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0106ef	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0106f1	ca		dex				dex 								; do X times
.0106f2	d0 ec		bne $0106e0			bne 	_SCCCopy
.0106f4	fa		plx				plx
.0106f5					_SCCExit:
.0106f5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.0106f6					Tokenise:
.0106f6	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0106f8	84 0a		sty $0a				sty 	DTemp1+2
.0106fa	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0106fd	18		clc				clc
.0106fe	65 02		adc $02				adc 	DBaseAddress
.010700	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.010702	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.010705	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.010708					_TOKCap:
.010708	c8		iny				iny 								; go to next
.010709	b7 08		lda [$08],y			lda 	[DTemp1],y
.01070b	29 ff 00	and #$00ff			and 	#$00FF
.01070e	f0 22		beq $010732			beq 	_TOKEndCap
.010710	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.010713	d0 01		bne $010716			bne 	_TOKNotQuote
.010715	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.010716					_TOKNotQuote:
.010716	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.010719	90 ed		bcc $010708			bcc 	_TOKCap
.01071b	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01071e	b0 e8		bcs $010708			bcs 	_TOKCap
.010720	8a		txa				txa 								; check if in quotes
.010721	4a		lsr a				lsr 	a
.010722	b0 e4		bcs $010708			bcs 	_TOKCap
.010724	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.010726	38		sec				sec
.010727	e9 20 00	sbc #$0020			sbc 	#32
.01072a	e2 20		sep #$20			sep 	#$20
.01072c	97 08		sta [$08],y			sta 	[DTemp1],y
.01072e	c2 20		rep #$20			rep 	#$20
.010730	80 d6		bra $010708			bra 	_TOKCap
.010732					_TOKEndCap:
.010732	c6 08		dec $08				dec 	DTemp1
.010734					_TOKMainNext:
.010734	e6 08		inc $08				inc 	DTemp1
.010736					_TOKMainLoop:
.010736	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010738	29 ff 00	and #$00ff			and 	#$00FF
.01073b	c9 20 00	cmp #$0020			cmp 	#32
.01073e	90 1d		bcc $01075d			bcc 	_TOKExit 					; 0-31 exit.
.010740	f0 f2		beq $010734			beq 	_TOKMainNext 				; 32 (space) skip.
.010742	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010745	f0 1d		beq $010764			beq 	_TOKString
.010747	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.01074a	90 1d		bcc $010769			bcc 	_TOKPunctuation
.01074c	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.01074f	90 42		bcc $010793			bcc 	_TOKNumber
.010751	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010754	90 13		bcc $010769			bcc 	_TOKPunctuation
.010756	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010759	90 3d		bcc $010798			bcc 	_TOKIdentifier
.01075b	80 0c		bra $010769			bra 	_TOKPunctuation 			; 91-   punctuation.
.01075d					_TOKExit:
.01075d	a9 00 00	lda #$0000			lda 	#$0000
.010760	20 9d 07	jsr $01079d			jsr 	TOKWriteToken
.010763	60		rts				rts
.010764					_TOKString:
.010764	20 3b 08	jsr $01083b			jsr 	TOKQuotedString
.010767	80 cd		bra $010736			bra 	_TOKMainLoop
.010769					_TOKPunctuation:
.010769	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01076c	20 a2 08	jsr $0108a2			jsr 	TOKKeywordSearch
.01076f	b0 1d		bcs $01078e			bcs 	_TOKFoundPunctuation
.010771	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010774	20 a2 08	jsr $0108a2			jsr 	TOKKeywordSearch
.010777	b0 15		bcs $01078e			bcs 	_TOKFoundPunctuation
.010779	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01077c	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010784	61 72 73 65 20 6c 69 6e 65 00
.01078e					_TOKFoundPunctuation:
.01078e	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; output the token and go round again.
.010791	80 a3		bra $010736			bra 	_TOKMainLoop
.010793					_TOKNumber:
.010793	20 bc 07	jsr $0107bc			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010796	80 9e		bra $010736			bra 	_TOKMainLoop
.010798					_TOKIdentifier:
.010798	20 fd 08	jsr $0108fd			jsr 	TOKIdentifier
.01079b	80 99		bra $010736			bra 	_TOKMainLoop
.01079d					TOKWriteToken:
.01079d	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01079f	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.0107a1	e6 0c		inc $0c				inc 	DTemp2
.0107a3	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.0107a5	29 ff 00	and #$00ff			and 	#$00FF
.0107a8	f0 01		beq $0107ab			beq 	_TOKWriteOverflow
.0107aa	60		rts				rts
.0107ab					_TOKWriteOverflow:
.0107ab	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0107ae	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>0107b6	20 6c 6f 6e 67 00
.0107bc					TOKInteger:
.0107bc	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.0107be	64 26		stz $26				stz 	DTemp3+2
.0107c0					_TOKINLoop:
.0107c0	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.0107c2	48		pha				pha
.0107c3	a5 24		lda $24				lda 	DTemp3
.0107c5	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.0107c7	26 26		rol $26				rol 	DTemp3+2
.0107c9	06 24		asl $24				asl 	DTemp3
.0107cb	26 26		rol $26				rol 	DTemp3+2
.0107cd	18		clc				clc
.0107ce	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0107d0	85 24		sta $24				sta 	DTemp3
.0107d2	68		pla				pla
.0107d3	65 26		adc $26				adc 	DTemp3+2
.0107d5	85 26		sta $26				sta 	DTemp3+2
.0107d7	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0107d9	26 26		rol $26				rol 	DTemp3+2
.0107db	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0107dd	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0107e0	d0 44		bne $010826			bne 	_TOKINSize
.0107e2	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0107e4	29 0f 00	and #$000f			and 	#15
.0107e7	18		clc				clc
.0107e8	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0107ea	85 24		sta $24				sta 	DTemp3
.0107ec	90 02		bcc $0107f0			bcc 	_TOKINNoCarry
.0107ee	e6 26		inc $26				inc 	DTemp3+2
.0107f0					_TOKINNoCarry:
.0107f0	e6 08		inc $08				inc 	DTemp1 						; look at next
.0107f2	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0107f4	29 ff 00	and #$00ff			and 	#$00FF
.0107f7	c9 30 00	cmp #$0030			cmp 	#"0"
.0107fa	90 05		bcc $010801			bcc 	_TOKINGotInteger
.0107fc	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0107ff	90 bf		bcc $0107c0			bcc		_TOKINLoop
.010801					_TOKINGotInteger:
.010801	a5 24		lda $24				lda 	DTemp3 						; lower word
.010803	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.010806	18		clc				clc
.010807	69 00 40	adc #$4000			adc 	#$4000
.01080a	48		pha				pha 								; save it.
.01080b	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.01080d	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.01080f	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.010811	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.010814	b0 10		bcs $010826			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.010816	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.010819	f0 06		beq $010821			beq 	_TOKINNoShift 				; don't need constant shift.
.01081b	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.01081e	20 9d 07	jsr $01079d			jsr 	TOKWriteToken
.010821					_TOKINNoShift:
.010821	68		pla				pla 								; get lower its token
.010822	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; output it
.010825	60		rts				rts
.010826					_TOKINSize:
.010826	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010829	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>010831	74 6f 6f 20 6c 61 72 67 65 00
.01083b					TOKQuotedString:
.01083b	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.01083d	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.01083f	85 32		sta $32				sta 	DTemp4
.010841	a5 0a		lda $0a				lda 	DTemp1+2
.010843	85 34		sta $34				sta 	DTemp4+2
.010845					_TOKQFindSize:
.010845	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010847	e6 08		inc $08				inc 	DTemp1
.010849	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.01084c	f0 3b		beq $010889			beq 	_TOQImbalance 				; end of line, and no quote found.
.01084e	c9 22 00	cmp #$0022			cmp 	#34
.010851	d0 f2		bne $010845			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010853	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010855	38		sec				sec
.010856	e5 32		sbc $32				sbc 	DTemp4
.010858	3a		dec a				dec 	a 							; one less character for closing quote
.010859	85 26		sta $26				sta 	DTemp3+2
.01085b	18		clc				clc
.01085c	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.01085f	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010862	20 9d 07	jsr $01079d			jsr 	TOKWriteToken
.010865	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010867	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; effectively a byte-write.
.01086a	c6 0c		dec $0c				dec 	DTemp2
.01086c	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.01086e	f0 0f		beq $01087f			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010870					_TOKQWriteString:
.010870	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010872	29 ff 00	and #$00ff			and 	#$00FF
.010875	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; effectively a byte-write.
.010878	c6 0c		dec $0c				dec 	DTemp2
.01087a	e6 32		inc $32				inc 	DTemp4 						; advance character
.01087c	ca		dex				dex 								; do X times
.01087d	d0 f1		bne $010870			bne 	_TOKQWriteString
.01087f					_TOKQWriteEnd:
.01087f	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010881	29 01 00	and #$0001			and 	#1
.010884	f0 02		beq $010888			beq 	_TOKQExit
.010886	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010888					_TOKQExit:
.010888	60		rts				rts
.010889					_TOQImbalance:
.010889	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01088c	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010894	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.0108a2					TOKKeywordSearch:
.0108a2	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.0108a4	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.0108a7	85 34		sta $34				sta 	DTemp4+2
.0108a9	a2 00 00	ldx #$0000			ldx 	#0
.0108ac					_TOKScan:
.0108ac	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.0108b0	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.0108b3	f0 46		beq $0108fb			beq 	_TOKFail 					; if zero then we have failed.
.0108b5	3a		dec a				dec 	a 							; -1 gives the length.
.0108b6	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.0108b8	d0 2f		bne $0108e9			bne 	_TOKNext 					; no, then skip to next token.
.0108ba	da		phx				phx 								; save X
.0108bb	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.0108be					_TOKCompare:
.0108be	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.0108c0	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.0108c4	29 ff 00	and #$00ff			and 	#$00FF
.0108c7	d0 1f		bne $0108e8			bne 	_TOKPopNext 				; if different, pop and goto next.
.0108c9	e8		inx				inx 								; bump X and Y.
.0108ca	c8		iny				iny
.0108cb	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.0108cd	d0 ef		bne $0108be			bne 	_TOKCompare
.0108cf	98		tya				tya 								; add length to the text pointer
.0108d0	18		clc				clc
.0108d1	65 08		adc $08				adc 	DTemp1
.0108d3	85 08		sta $08				sta 	DTemp1
.0108d5	fa		plx				plx 								; restore X.
.0108d6	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.0108da	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0108dd	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0108de	4a		lsr a				lsr		a
.0108df	4a		lsr a				lsr 	a
.0108e0	eb		xba				xba
.0108e1	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0108e3	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0108e6	38		sec				sec
.0108e7	60		rts				rts
.0108e8					_TOKPopNext:
.0108e8	fa		plx				plx 								; restore X.
.0108e9					_TOKNext:
.0108e9	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.0108ed	29 0f 00	and #$000f			and 	#$000F
.0108f0	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0108f2	8a		txa				txa
.0108f3	18		clc				clc
.0108f4	65 14		adc $14				adc 	DSignCount
.0108f6	aa		tax				tax
.0108f7	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0108f9	80 b1		bra $0108ac			bra 	_TOKScan
.0108fb					_TOKFail:
.0108fb	18		clc				clc
.0108fc	60		rts				rts
.0108fd					TOKIdentifier:
.0108fd	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0108ff	85 24		sta $24				sta 	DTemp3
.010901					_TOKIFindLength:
.010901	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.010903	a7 08		lda [$08]			lda 	[DTemp1]
.010905	29 ff 00	and #$00ff			and 	#$00FF
.010908	20 a8 09	jsr $0109a8			jsr 	TOKIsIdentifierCharacter
.01090b	b0 f4		bcs $010901			bcs 	_TOKIFindLength
.01090d	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.01090f	38		sec				sec
.010910	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.010912	85 36		sta $36				sta 	DTemp5
.010914	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.010916	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.010919	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.01091b	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.01091d	29 ff 00	and #$00ff			and 	#$00FF
.010920	c9 24 00	cmp #$0024			cmp 	#"$"
.010923	d0 0b		bne $010930			bne 	_TOKINotString
.010925	e6 08		inc $08				inc 	DTemp1 						; skip $
.010927	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010929	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01092b	09 00 20	ora #$2000			ora 	#IDTypeMask
.01092e	85 26		sta $26				sta 	DTemp3+2
.010930					_TOKINotString:
.010930	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010932	29 ff 00	and #$00ff			and 	#$00FF
.010935	c9 28 00	cmp #$0028			cmp 	#"("
.010938	d0 0b		bne $010945			bne 	_TOKINotArray
.01093a	e6 08		inc $08				inc 	DTemp1 						; skip (
.01093c	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.01093e	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.010940	09 00 10	ora #$1000			ora 	#IDArrayMask
.010943	85 26		sta $26				sta 	DTemp3+2
.010945					_TOKINotArray:
.010945	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010947	85 08		sta $08				sta 	DTemp1
.010949	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.01094b	20 a2 08	jsr $0108a2			jsr 	TOKKeywordSearch
.01094e	90 04		bcc $010954			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010950	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; if CS write token and exit.
.010953	60		rts				rts
.010954					_TOKIIdentifier:
.010954	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010956	e6 08		inc $08				inc 	DTemp1
.010958	20 94 09	jsr $010994			jsr		_TOKIToConstant 			; convert to range 0-35
.01095b	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.01095d	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.01095f	f0 1d		beq $01097e			beq 	_TOKINoSecond
.010961	48		pha				pha 								; save current on stack.
.010962	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010964	e6 08		inc $08				inc 	DTemp1
.010966	20 94 09	jsr $010994			jsr		_TOKIToConstant 			; convert to range 0-35
.010969	85 14		sta $14				sta 	DSignCount 					; save it.
.01096b	0a		asl a				asl 	a 							; x 4
.01096c	0a		asl a				asl 	a
.01096d	65 14		adc $14				adc 	DSignCount 					; x 5
.01096f	0a		asl a				asl 	a 							; x 10
.010970	65 14		adc $14				adc 	DSignCount 					; x 11
.010972	0a		asl a				asl 	a 							; x 22
.010973	0a		asl a				asl 	a 							; x 44
.010974	65 14		adc $14				adc 	DSignCount 					; x 45
.010976	85 14		sta $14				sta 	DSignCount
.010978	68		pla				pla 								; get old token and add x 45
.010979	18		clc				clc
.01097a	65 14		adc $14				adc 	DSignCount
.01097c	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.01097e					_TOKINoSecond:
.01097e	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010980	f0 03		beq $010985			beq 	_TOKINotLast				; if yes
.010982	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010985					_TOKINotLast:
.010985	20 9d 07	jsr $01079d			jsr 	TOKWriteToken 				; output the token
.010988	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.01098a	d0 c8		bne $010954			bne 	_TOKIIdentifier
.01098c					_TOKIOut:
.01098c	a5 24		lda $24				lda 	DTemp3 						; get original start position
.01098e	18		clc				clc
.01098f	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010991	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010993	60		rts				rts
.010994					_TOKIToConstant:
.010994	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010997	c9 41 00	cmp #$0041			cmp 	#65
.01099a	90 04		bcc $0109a0			bcc 	_TOKITInteger
.01099c	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.01099f	60		rts				rts
.0109a0					_TOKITInteger:
.0109a0	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.0109a3	18		clc				clc
.0109a4	69 1b 00	adc #$001b			adc 	#27
.0109a7	60		rts				rts
.0109a8					TOKIsIdentifierCharacter:
.0109a8	c9 30 00	cmp #$0030			cmp 	#"0"
.0109ab	90 0f		bcc $0109bc			bcc 	_TOKIIFail
.0109ad	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0109b0	90 0c		bcc $0109be			bcc 	_TOKIIOk
.0109b2	c9 41 00	cmp #$0041			cmp 	#"A"
.0109b5	90 05		bcc $0109bc			bcc 	_TOKIIFail
.0109b7	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0109ba	90 02		bcc $0109be			bcc 	_TOKIIOk
.0109bc					_TOKIIFail:
.0109bc	18		clc				clc
.0109bd	60		rts				rts
.0109be					_TOKIIOk:
.0109be	38		sec				sec
.0109bf	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0109c0					Binary_Add:
.0109c0	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0109c2	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0109c4	30 12		bmi $0109d8		bmi 	_BATypeError
.0109c6	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0109c8	30 3f		bmi $010a09		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0109ca	18		clc			clc 										; add the results
.0109cb	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109cd	75 02		adc $02,x		adc 	EXSValueL+2,x
.0109cf	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109d1	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109d3	75 22		adc $22,x		adc 	EXSValueH+2,x
.0109d5	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109d7	60		rts			rts
.0109d8					_BATypeError:
.0109d8	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0109db	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0109e3	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0109f3	65 73 00
.0109f6					_BALengthError:
.0109f6	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0109f9	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a01	6f 6f 20 6c 6f 6e 67 00
.010a09					_BAConcatenateString:
.010a09	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a0b	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a0d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a0f	85 0c		sta $0c			sta 	DTemp2
.010a11	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a13	18		clc			clc 										; work out the total length
.010a14	b2 08		lda ($08)		lda 	(DTemp1)
.010a16	72 0c		adc ($0c)		adc 	(DTemp2)
.010a18	b0 14		bcs $010a2e		bcs 	_BAConcatLengthError 				; string is too long.
.010a1a	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010a1c	20 9b 06	jsr $01069b		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010a1f	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010a21	74 20		stz $20,x		stz 	EXSValueH+0,x
.010a23	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010a25	20 d5 06	jsr $0106d5		jsr 	StringCreateCopy
.010a28	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010a2a	20 d5 06	jsr $0106d5		jsr 	StringCreateCopy
.010a2d	60		rts			rts
.010a2e					_BAConcatLengthError:
.010a2e	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010a31	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a39	6f 6f 20 6c 6f 6e 67 00
.010a41					Binary_Subtract:
.010a41	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a44	38		sec			sec
.010a45	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a47	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a49	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a4b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a4d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a4f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a51	60		rts			rts
.010a52					Binary_ShiftRight:
.010a52	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a55	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a57	29 3f 00	and #$003f		and 	#63
.010a5a	f0 07		beq $010a63		beq		_Binary_SRExit
.010a5c					_Binary_SRLoop:
.010a5c	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010a5e	76 00		ror $00,x		ror 	EXSValueL+0,x
.010a60	3a		dec a			dec 	a
.010a61	d0 f9		bne $010a5c		bne 	_Binary_SRLoop
.010a63					_Binary_SRExit:
.010a63	60		rts			rts
.010a64					Binary_ShiftLeft:
.010a64	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a67	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a69	29 3f 00	and #$003f		and 	#63
.010a6c	f0 07		beq $010a75		beq		_Binary_SLExit
.010a6e					_Binary_SLLoop:
.010a6e	16 00		asl $00,x		asl 	EXSValueL+0,x
.010a70	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a72	3a		dec a			dec 	a
.010a73	d0 f9		bne $010a6e		bne 	_Binary_SLLoop
.010a75					_Binary_SLExit:
.010a75	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010a76					Binary_And:
.010a76	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a79	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a7b	35 02		and $02,x		and 	EXSValueL+2,x
.010a7d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a7f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a81	35 22		and $22,x		and 	EXSValueH+2,x
.010a83	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a85	60		rts			rts
.010a86					Binary_Or:
.010a86	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a89	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a8b	15 02		ora $02,x		ora 	EXSValueL+2,x
.010a8d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a8f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a91	15 22		ora $22,x		ora 	EXSValueH+2,x
.010a93	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a95	60		rts			rts
.010a96					Binary_Xor:
.010a96	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010a99	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a9b	55 02		eor $02,x		eor 	EXSValueL+2,x
.010a9d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a9f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010aa1	55 22		eor $22,x		eor 	EXSValueH+2,x
.010aa3	95 20		sta $20,x		sta 	EXSValueH+0,x
.010aa5	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010aa6					Binary_Equals:
.010aa6	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010aa9	b0 0e		bcs $010ab9		bcs 	_BEString
.010aab	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010aad	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010aaf	d0 4f		bne $010b00		bne 	Compare_Fail
.010ab1	b5 20		lda $20,x		lda 	EXSValueH,x
.010ab3	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010ab5	d0 49		bne $010b00		bne 	Compare_Fail
.010ab7	80 3f		bra $010af8		bra 	Compare_Succeed
.010ab9					_BEString:
.010ab9	09 00 00	ora #$0000		ora 	#$0000
.010abc	f0 3a		beq $010af8		beq 	Compare_Succeed
.010abe	80 40		bra $010b00		bra 	Compare_Fail
.010ac0					Binary_NotEquals:
.010ac0	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ac3	b0 0e		bcs $010ad3		bcs 	_BNEString
.010ac5	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010ac7	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010ac9	d0 2d		bne $010af8		bne 	Compare_Succeed
.010acb	b5 20		lda $20,x		lda 	EXSValueH,x
.010acd	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010acf	d0 27		bne $010af8		bne 	Compare_Succeed
.010ad1	80 2d		bra $010b00		bra 	Compare_Fail
.010ad3					_BNEString:
.010ad3	09 00 00	ora #$0000		ora 	#$0000
.010ad6	d0 20		bne $010af8		bne 	Compare_Succeed
.010ad8	80 26		bra $010b00		bra 	Compare_Fail
.010ada					Binary_Less:
.010ada	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010add	b0 12		bcs $010af1		bcs 	_BLString
.010adf	38		sec			sec
.010ae0	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010ae2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae4	b5 20		lda $20,x		lda 	EXSValueH,x
.010ae6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ae8	50 03		bvc $010aed		bvc 	*+5
.010aea	49 00 80	eor #$8000		eor 	#$8000
.010aed	30 09		bmi $010af8		bmi 	Compare_Succeed
.010aef	80 0f		bra $010b00		bra 	Compare_Fail
.010af1					_BLString:
.010af1	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010af4	f0 02		beq $010af8		beq 	Compare_Succeed
.010af6	80 08		bra $010b00		bra 	Compare_Fail
.010af8					Compare_Succeed:
.010af8	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010afb	95 00		sta $00,x		sta 	EXSValueL,x
.010afd	95 20		sta $20,x		sta 	EXSValueH,x
.010aff	60		rts			rts
.010b00					Compare_Fail:
.010b00	74 00		stz $00,x		stz 	EXSValueL,x
.010b02	74 20		stz $20,x		stz 	EXSValueH,x
.010b04	60		rts			rts
.010b05					Binary_GreaterEqual:
.010b05	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b08	b0 12		bcs $010b1c		bcs 	_BGEString
.010b0a	38		sec			sec
.010b0b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b0d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b0f	b5 20		lda $20,x		lda 	EXSValueH,x
.010b11	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b13	50 03		bvc $010b18		bvc 	*+5
.010b15	49 00 80	eor #$8000		eor 	#$8000
.010b18	10 de		bpl $010af8		bpl 	Compare_Succeed
.010b1a	80 e4		bra $010b00		bra 	Compare_Fail
.010b1c					_BGEString:
.010b1c	09 00 00	ora #$0000		ora 	#$0000
.010b1f	10 d7		bpl $010af8		bpl 	Compare_Succeed
.010b21	80 dd		bra $010b00		bra 	Compare_Fail
.010b23					Binary_LessEqual:
.010b23	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b26	b0 12		bcs $010b3a		bcs 	_BLEString
.010b28	18		clc			clc 									; numeric <= signed
.010b29	b5 00		lda $00,x		lda 	EXSValueL,x
.010b2b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b2d	b5 20		lda $20,x		lda 	EXSValueH,x
.010b2f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b31	50 03		bvc $010b36		bvc 	*+5
.010b33	49 00 80	eor #$8000		eor 	#$8000
.010b36	30 c0		bmi $010af8		bmi 	Compare_Succeed
.010b38	80 c6		bra $010b00		bra 	Compare_Fail
.010b3a					_BLEString:
.010b3a	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010b3d	d0 b9		bne $010af8		bne 	Compare_Succeed
.010b3f	80 bf		bra $010b00		bra 	Compare_Fail
.010b41					Binary_Greater:
.010b41	20 5f 0b	jsr $010b5f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b44	b0 12		bcs $010b58		bcs 	_BGString
.010b46	18		clc			clc 									; numeric > signed
.010b47	b5 00		lda $00,x		lda 	EXSValueL,x
.010b49	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b4b	b5 20		lda $20,x		lda 	EXSValueH,x
.010b4d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b4f	50 03		bvc $010b54		bvc 	*+5
.010b51	49 00 80	eor #$8000		eor 	#$8000
.010b54	10 a2		bpl $010af8		bpl 	Compare_Succeed
.010b56	80 a8		bra $010b00		bra 	Compare_Fail
.010b58					_BGString:
.010b58	c9 01 00	cmp #$0001		cmp 	#$0001
.010b5b	f0 9b		beq $010af8		beq 	Compare_Succeed
.010b5d	80 a1		bra $010b00		bra 	Compare_Fail
.010b5f					CompareTypeCheck:
.010b5f	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010b61	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010b63	30 06		bmi $010b6b		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010b65	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010b67	30 1c		bmi $010b85		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010b69	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010b6a	60		rts			rts
.010b6b					_CTCFail:
.010b6b	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010b6e	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010b76	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010b85					_CTCStringCompare:
.010b85	20 17 06	jsr $010617		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010b88	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010b8a	85 08		sta $08			sta 	DTemp1
.010b8c	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010b8e	85 0c		sta $0c			sta 	DTemp2
.010b90	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010b93	a8		tay			tay
.010b94	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010b96	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010b98	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b9a	90 02		bcc $010b9e		bcc 	_CTCSmallest
.010b9c	b2 0c		lda ($0c)		lda 	(DTemp2)
.010b9e					_CTCSmallest:
.010b9e	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010ba0					_CTCCompare:
.010ba0	c8		iny			iny 									; look at next character (done first, first char is size)
.010ba1	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010ba3	30 16		bmi $010bbb		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010ba5	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010ba7	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010ba9	f0 f5		beq $010ba0		beq 	_CTCCompare 					; if zero, try the next character.
.010bab	b0 07		bcs $010bb4		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010bad					_CTCLess:
.010bad	c2 20		rep #$20		rep 	#$20
.010baf	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010bb2	80 14		bra $010bc8		bra 	_CTCExit
.010bb4					_CTCGreater:
.010bb4	c2 20		rep #$20		rep 	#$20
.010bb6	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010bb9	80 0d		bra $010bc8		bra 	_CTCExit
.010bbb					_CTCEqualSoFar:
.010bbb	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010bbd	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010bbf	90 ec		bcc $010bad		bcc 	_CTCLess
.010bc1	d0 f1		bne $010bb4		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010bc3	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010bc5	a9 00 00	lda #$0000		lda 	#$0000
.010bc8					_CTCExit:
.010bc8	38		sec			sec 									; return with CS indicating string comparison.
.010bc9	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010bca					Binary_Divide:
.010bca	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010bcd	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010bcf	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010bd1	d0 14		bne $010be7		bne 	_BinaryDivide_Ok
.010bd3	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010bd6	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010bde	20 62 79 20 7a 65 72 6f 00
.010be7					_BinaryDivide_Ok:
.010be7	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010be9	64 0a		stz $0a			stz 	DTemp1+2
.010beb	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010bed	5a		phy			phy 										; save Y (bit counter)
.010bee	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010bf0	10 07		bpl $010bf9		bpl 	_BinaryDivide_RightDone
.010bf2	e8		inx			inx
.010bf3	e8		inx			inx
.010bf4	20 2f 0c	jsr $010c2f		jsr 	Binary_DivNegate
.010bf7	ca		dex			dex
.010bf8	ca		dex			dex
.010bf9					_BinaryDivide_RightDone:
.010bf9	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010bfb	10 03		bpl $010c00		bpl 	_BinaryDivide_LeftDone
.010bfd	20 2f 0c	jsr $010c2f		jsr 	Binary_DivNegate
.010c00					_BinaryDivide_LeftDone:
.010c00	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c03					_BinaryDivide_Loop:
.010c03	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c05	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c07	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c09	26 0a		rol $0a			rol 	DTemp1+2
.010c0b	38		sec			sec											; calculate A-M
.010c0c	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c0e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c10	85 0c		sta $0c			sta 	DTemp2
.010c12	a5 0a		lda $0a			lda 	DTemp1+2
.010c14	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c16	90 08		bcc $010c20		bcc 	_Binary_NoSubract 					; if A < M skip this
.010c18	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010c1a	a5 0c		lda $0c			lda 	DTemp2
.010c1c	85 08		sta $08			sta 	DTemp1+0
.010c1e	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010c20					_Binary_NoSubract:
.010c20	88		dey			dey 										; do it 32 times.
.010c21	d0 e0		bne $010c03		bne 	_BinaryDivide_Loop
.010c23					_BinaryDivide_Exit:
.010c23	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010c25	29 01 00	and #$0001		and 	#1
.010c28	f0 03		beq $010c2d		beq 	_BinaryDivide_Exit2
.010c2a	20 2f 0c	jsr $010c2f		jsr 	Binary_DivNegate
.010c2d					_BinaryDivide_Exit2:
.010c2d	7a		ply			ply 										; restore Y
.010c2e	60		rts			rts
.010c2f					Binary_DivNegate:
.010c2f	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010c31	38		sec			sec 										; negate the value at stack X.
.010c32	a9 00 00	lda #$0000		lda 	#$0000
.010c35	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010c37	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c39	a9 00 00	lda #$0000		lda 	#$0000
.010c3c	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010c3e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c40	60		rts			rts
.010c41					Binary_Modulus:
.010c41	20 ca 0b	jsr $010bca		jsr 	Binary_Divide 						; do the divide
.010c44	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010c46	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c48	a5 0a		lda $0a			lda 	DTemp1+2
.010c4a	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c4c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010c4d					Binary_Multiply:
.010c4d	20 f7 05	jsr $0105f7		jsr 	CheckBothNumeric 					; check both values are numeric
.010c50	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010c52	85 08		sta $08			sta 	DTemp1
.010c54	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c56	85 0a		sta $0a			sta		DTemp1+2
.010c58	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010c5a	74 20		stz $20,x		stz 	EXSValueH+0,x
.010c5c					_BinaryMultiply_Loop:
.010c5c	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010c5e	05 0a		ora $0a			ora 	DTemp1+2
.010c60	f0 1e		beq $010c80		beq 	_BinaryMultiply_Exit
.010c62	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010c64	29 01 00	and #$0001		and 	#1
.010c67	f0 0d		beq $010c76		beq 	_BinaryMultiply_NoAdd
.010c69	18		clc			clc 										; add multiplicand to result.
.010c6a	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010c6c	75 02		adc $02,x		adc 	EXSValueL+2,x
.010c6e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c70	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c72	75 22		adc $22,x		adc 	EXSValueH+2,x
.010c74	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c76					_BinaryMultiply_NoAdd:
.010c76	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010c78	66 08		ror $08			ror 	DTemp1
.010c7a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010c7c	36 22		rol $22,x		rol 	EXSValueH+2,x
.010c7e	80 dc		bra $010c5c		bra 	_BinaryMultiply_Loop 				; go round again.
.010c80					_BinaryMultiply_Exit:
.010c80	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010c81					Function_Len:
.010c81	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010c84	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c87	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010c8a	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010c8c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010c8f	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010c92	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010c94	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c96	60		rts				rts
.010c97					Function_Abs:
.010c97	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010c9a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c9d	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010ca0	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010ca2	30 07		bmi $010cab			bmi 	_FAbsNegative 				; negate it if negative
.010ca4	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010ca6	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010ca8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010caa	60		rts				rts
.010cab					_FAbsNegative:
.010cab	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010cac	a9 00 00	lda #$0000			lda 	#0
.010caf	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010cb1	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cb3	a9 00 00	lda #$0000			lda 	#0
.010cb6	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010cb8	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cba	60		rts				rts
.010cbb					Function_Sgn:
.010cbb	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns integer
.010cbe	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010cc1	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010cc4	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010cc6	74 20		stz $20,x			stz 	EXSValueH+0,x
.010cc8	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010cca	30 07		bmi $010cd3			bmi 	_FSgnNegative 				; set to -1 if signed
.010ccc	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010cce	f0 02		beq $010cd2			beq 	_FSgnExit
.010cd0	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010cd2					_FSgnExit:
.010cd2	60		rts				rts
.010cd3					_FSgnNegative:
.010cd3	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010cd6	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cd8	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cda	60		rts				rts
.010cdb					Function_Random:
.010cdb	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010cde	20 17 06	jsr $010617			jsr 	ResetTypeInteger
.010ce1	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010ce3	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010ce5	d0 0a		bne $010cf1			bne 	_Rnd_NotZero
.010ce7	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010cea	85 10		sta $10				sta 	DRandom
.010cec	a9 ea 00	lda #$00ea			lda 	#$EA
.010cef	85 12		sta $12				sta 	DRandom+2
.010cf1					_Rnd_NotZero:
.010cf1	20 fc 0c	jsr $010cfc			jsr 	_Rnd_Process 				; call randomiser twice
.010cf4	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cf6	20 fc 0c	jsr $010cfc			jsr 	_Rnd_Process
.010cf9	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cfb	60		rts				rts
.010cfc					_Rnd_Process:
.010cfc	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010cfe	26 12		rol $12				rol 	DRandom+2
.010d00	90 0e		bcc $010d10			bcc 	_Rnd_Exit
.010d02	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d04	49 54 d4	eor #$d454			eor 	#$D454
.010d07	85 10		sta $10				sta 	DRandom
.010d09	a5 12		lda $12				lda 	DRandom+2
.010d0b	49 d5 55	eor #$55d5			eor 	#$55D5
.010d0e	85 12		sta $12				sta 	DRandom+2
.010d10					_Rnd_Exit:
.010d10	a5 10		lda $10				lda 	DRandom
.010d12	45 12		eor $12				eor 	DRandom+2
.010d14	60		rts				rts
.010d15					Function_Chr:
.010d15	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string
.010d18	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010d1b	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010d1e	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d21	d0 12		bne $010d35			bne 	_FCHBad
.010d23	48		pha				pha  								; save char # on stack
.010d24	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010d27	20 9b 06	jsr $01069b			jsr 	StringTempAllocate
.010d2a	68		pla				pla 								; restore character number
.010d2b	20 c7 06	jsr $0106c7			jsr 	StringWriteCharacter 		; write it out.
.010d2e	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010d30	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d32	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d34	60		rts				rts
.010d35					_FCHBad:
.010d35	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010d38	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010d40	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010d4d					Function_Asc:
.010d4d	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010d50	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010d53	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010d56	a8		tay				tay 								; string address in Y
.010d57	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010d5a	29 ff 00	and #$00ff			and 	#$00FF
.010d5d	f0 0b		beq $010d6a			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010d5f	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010d62	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010d65	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d67	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d69	60		rts				rts
.010d6a					_FASBad:
.010d6a	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010d6d	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010d75	65 20 66 6f 72 20 61 73 63 28 29 00
.010d81					Function_SPC:
.010d81	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string
.010d84	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010d87	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010d8a	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d8d	d0 17		bne $010da6			bne 	_FSPBad
.010d8f	48		pha				pha 								; save length
.010d90	20 9b 06	jsr $01069b			jsr 	StringTempAllocate 			; allocate character space
.010d93	7a		ply				ply 								; get count in Y
.010d94	f0 09		beq $010d9f			beq 	_FSPExit 					; if zero, just empty string
.010d96					_FSPCopy:
.010d96	a9 20 00	lda #$0020			lda 	#" "						; space character
.010d99	20 c7 06	jsr $0106c7			jsr 	StringWriteCharacter 		; write it out.
.010d9c	88		dey				dey
.010d9d	d0 f7		bne $010d96			bne 	_FSPCopy	 				; do it Y times
.010d9f					_FSPExit:
.010d9f	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010da1	95 00		sta $00,x			sta 	EXSValueL+0,x
.010da3	74 20		stz $20,x			stz 	EXSValueH+0,x
.010da5	60		rts				rts
.010da6					_FSPBad:
.010da6	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010da9	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010db1	65 20 66 6f 72 20 73 70 63 28 29 00
.010dbd					Function_Inkey:
.010dbd	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010dc0	20 17 06	jsr $010617			jsr 	ResetTypeInteger
.010dc3	20 e7 1c	jsr $011ce7			jsr 	HWInkey 					; read current key
.010dc6	95 00		sta $00,x			sta 	EXSValueL+0,x
.010dc8	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dca	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010dcb					Function_LEFT:
.010dcb	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.010dce	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dd1	48		pha				pha 								; save string on stack.
.010dd2	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; get count
.010dd5	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010dd8	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ddb	d0 6d		bne $010e4a			bne 	FNStringParameter
.010ddd	85 08		sta $08				sta 	DTemp1 						; save count.
.010ddf	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket
.010de2	7a		ply				ply 								; Y points to string.
.010de3	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010de6	29 ff 00	and #$00ff			and 	#$00FF
.010de9	f0 52		beq $010e3d			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010deb	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ded	f0 55		beq $010e44			beq 	FNStringY 					; return string in Y if current len = required len.
.010def	90 53		bcc $010e44			bcc 	FNStringY 					; if current < required return whole thing.
.010df1	c8		iny				iny 								; take from here - start of string
.010df2	80 33		bra $010e27			bra 	FNDTemp1Characters
.010df4					Function_RIGHT:
.010df4	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.010df7	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dfa	48		pha				pha 								; save string on stack.
.010dfb	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; get count
.010dfe	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e01	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e04	d0 44		bne $010e4a			bne 	FNStringParameter
.010e06	85 08		sta $08				sta 	DTemp1 						; save count.
.010e08	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket
.010e0b	7a		ply				ply 								; Y points to string.
.010e0c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e0f	29 ff 00	and #$00ff			and 	#$00FF
.010e12	f0 29		beq $010e3d			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e14	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e16	f0 2c		beq $010e44			beq 	FNStringY 					; return string in Y if current len = required len.
.010e18	90 2a		bcc $010e44			bcc 	FNStringY 					; if current < required return whole thing.
.010e1a	38		sec				sec 								; current-required is the number to skip
.010e1b	e5 08		sbc $08				sbc 	DTemp1
.010e1d	85 0a		sta $0a				sta 	DTemp1+2
.010e1f	98		tya				tya
.010e20	18		clc				clc
.010e21	65 0a		adc $0a				adc 	DTemp1+2
.010e23	a8		tay				tay
.010e24	c8		iny				iny 								; +1 for the count.
.010e25	80 00		bra $010e27			bra 	FNDTemp1Characters
.010e27					FNDTemp1Characters:
.010e27	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010e29	f0 12		beq $010e3d			beq 	FNStringEmpty 				; if zero, return empty string.
.010e2b	20 9b 06	jsr $01069b			jsr 	StringTempAllocate
.010e2e	48		pha				pha 								; save the address
.010e2f					_FND1Loop:
.010e2f	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010e32	20 c7 06	jsr $0106c7			jsr 	StringWriteCharacter
.010e35	c8		iny				iny
.010e36	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010e38	d0 f5		bne $010e2f			bne 	_FND1Loop
.010e3a	7a		ply				ply 								; string address in Y
.010e3b	80 07		bra $010e44			bra 	FNStringY
.010e3d					FNStringEmpty:
.010e3d	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010e40	20 9b 06	jsr $01069b			jsr 	StringTempAllocate 			; put address of it in Y
.010e43	a8		tay				tay
.010e44					FNStringY:
.010e44	98		tya				tya
.010e45	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e47	74 22		stz $22,x			stz 	EXSValueH+2,x
.010e49	60		rts				rts
.010e4a					FNStringParameter:
.010e4a	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010e4d	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010e55	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010e62					Function_MID:
.010e62	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.010e65	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e68	48		pha				pha 								; save string on stack.
.010e69	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; get offset (n)
.010e6c	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e6f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e72	d0 d6		bne $010e4a			bne 	FNStringParameter
.010e74	c9 00 00	cmp #$0000			cmp 	#0
.010e77	f0 d1		beq $010e4a			beq 	FNStringParameter 			; or zero
.010e79	48		pha				pha 								; save start position on stack.
.010e7a	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010e7d	85 08		sta $08				sta 	DTemp1
.010e7f	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010e81	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010e84	d0 0e		bne $010e94			bne 	_FMINoThird
.010e86	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010e88	e6 06		inc $06				inc 	DCodePtr
.010e8a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010e8d	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e90	d0 b8		bne $010e4a			bne 	FNStringParameter
.010e92	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010e94					_FMINoThird:
.010e94	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket
.010e97	68		pla				pla 								; get offset position
.010e98	85 0c		sta $0c				sta 	DTemp2
.010e9a	7a		ply				ply 								; get address of string in Y
.010e9b	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010e9e	29 ff 00	and #$00ff			and 	#$00FF
.010ea1	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010ea3	90 98		bcc $010e3d			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010ea5	38		sec				sec 								; calculate number of characters left after
.010ea6	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010ea8	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010ea9	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010eab	b0 02		bcs $010eaf			bcs 	_FMISufficient
.010ead	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010eaf					_FMISufficient:
.010eaf	98		tya				tya 								; get address
.010eb0	18		clc				clc
.010eb1	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010eb3	a8		tay				tay 								; put in Y
.010eb4	82 70 ff	brl $010e27			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010eb7					Function_Peek:
.010eb7	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010eba	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ebd	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010ec0	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ec2	84 0a		sty $0a				sty 	DTemp1+2
.010ec4	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ec7	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ec9	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010ecc	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ece	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ed0	60		rts				rts
.010ed1					Function_Deek:
.010ed1	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010ed4	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ed7	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010eda	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010edc	84 0a		sty $0a				sty 	DTemp1+2
.010ede	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ee1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ee3	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ee5	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ee7	60		rts				rts
.010ee8					Function_Leek:
.010ee8	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010eeb	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010eee	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check )
.010ef1	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ef3	84 0a		sty $0a				sty 	DTemp1+2
.010ef5	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ef8	b7 08		lda [$08],y			lda 	[DTemp1],y
.010efa	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010efc	c8		iny				iny
.010efd	c8		iny				iny
.010efe	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f00	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f02	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010f03					Function_VAL:
.010f03	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns an integer
.010f06	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f09	48		pha				pha 								; put string address on stack.
.010f0a	20 1a 0f	jsr $010f1a			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f0d	7a		ply				ply 								; get string address back
.010f0e	da		phx				phx 								; save X on stack
.010f0f	aa		tax				tax 								; base in X
.010f10	98		tya				tya 								; address in A
.010f11	20 54 0f	jsr $010f54			jsr 	StringToInteger
.010f14	fa		plx				plx 								; restore X
.010f15	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f17	94 20		sty $20,x			sty 	EXSValueH+0,x
.010f19	60		rts				rts
.010f1a					VALGetBase:
.010f1a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010f1c	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010f1f	f0 07		beq $010f28			beq 	_VGBAlternate
.010f21	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket			; expect ), and return 10.
.010f24	a9 0a 00	lda #$000a			lda 	#10
.010f27	60		rts				rts
.010f28					_VGBAlternate:
.010f28	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; skip comma.
.010f2b	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010f2e	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010f31	d0 0e		bne $010f41			bne 	_VGBBadBase
.010f33	c9 02 00	cmp #$0002			cmp 	#2
.010f36	90 09		bcc $010f41			bcc 	_VGBBadBase
.010f38	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010f3b	b0 04		bcs $010f41			bcs 	_VGBBadBase
.010f3d	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; get right bracket and return.
.010f40	60		rts				rts
.010f41					_VGBBadBase:
.010f41	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010f44	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010f4c	65 72 20 42 61 73 65 00
.010f54					StringToInteger:
.010f54	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010f56	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010f58	29 ff 00	and #$00ff			and 	#$00FF
.010f5b	85 26		sta $26				sta 	DTemp3+2
.010f5d	f0 6e		beq $010fcd			beq 	_STIError 					; if length zero it's bad.
.010f5f	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010f61	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010f63	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010f65	64 0a		stz $0a				stz 	DTemp1+2
.010f67	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010f69	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010f6c	48		pha				pha 								; push on stack
.010f6d	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010f70	d0 06		bne $010f78			bne 	_STILoop
.010f72	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010f74	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010f76	f0 55		beq $010fcd			beq 	_STIError 					; if only - then error.
.010f78					_STILoop:
.010f78	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010f7a	20 ec 0f	jsr $010fec			jsr 	MultiplyTemp1ByA
.010f7d	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010f7f	29 ff 00	and #$00ff			and 	#$00FF
.010f82	20 dd 0f	jsr $010fdd			jsr 	ConvertUpperCase	 		; make U/C
.010f85	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010f88	90 43		bcc $010fcd			bcc 	_STIError
.010f8a	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010f8d	90 0e		bcc $010f9d			bcc 	_STIOkay1
.010f8f	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010f92	90 39		bcc $010fcd			bcc 	_STIError
.010f94	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010f97	b0 34		bcs $010fcd			bcs 	_STIError
.010f99	18		clc				clc 								; shift to correct range.
.010f9a	69 09 00	adc #$0009			adc 	#9
.010f9d					_STIOkay1:
.010f9d	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010fa0	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010fa2	b0 29		bcs $010fcd			bcs 	_STIError
.010fa4	18		clc				clc 								; add A to DTemp1
.010fa5	65 08		adc $08				adc 	DTemp1
.010fa7	85 08		sta $08				sta 	DTemp1
.010fa9	90 02		bcc $010fad			bcc 	_STINoCarry
.010fab	e6 0a		inc $0a				inc 	DTemp1+2
.010fad					_STINoCarry:
.010fad	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010faf	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010fb1	d0 c5		bne $010f78			bne 	_STILoop 					; loop back.
.010fb3	68		pla				pla 								; get optional minus bac
.010fb4	c9 2d 00	cmp #$002d			cmp 	#"-"
.010fb7	d0 0f		bne $010fc8			bne 	_STINotNegative 			; handle the negative character
.010fb9	38		sec				sec 								; negate DTemp1
.010fba	a9 00 00	lda #$0000			lda 	#0
.010fbd	e5 08		sbc $08				sbc 	DTemp1
.010fbf	85 08		sta $08				sta 	DTemp1
.010fc1	a9 00 00	lda #$0000			lda 	#0
.010fc4	e5 0a		sbc $0a				sbc 	DTemp1+2
.010fc6	85 0a		sta $0a				sta 	DTemp1+2
.010fc8					_STINotNegative:
.010fc8	a5 08		lda $08				lda 	DTemp1 						; get the result
.010fca	a4 0a		ldy $0a				ldy 	DTemp1+2
.010fcc	60		rts				rts
.010fcd					_STIError:
.010fcd	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>010fd0	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010fd8	74 61 6e 74 00
.010fdd					ConvertUpperCase:
.010fdd	c9 61 00	cmp #$0061			cmp 	#'a'
.010fe0	90 09		bcc $010feb			bcc 	_CUCExit
.010fe2	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010fe5	b0 04		bcs $010feb			bcs 	_CUCExit
.010fe7	38		sec				sec
.010fe8	e9 20 00	sbc #$0020			sbc 	#32
.010feb					_CUCExit:
.010feb	60		rts				rts
.010fec					MultiplyTemp1ByA:
.010fec					_MTGeneral:
.010fec	da		phx				phx
.010fed	aa		tax				tax 								; multiplier in X
.010fee	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010ff0	85 0c		sta $0c				sta 	DTemp2
.010ff2	a5 0a		lda $0a				lda 	DTemp1+2
.010ff4	85 0e		sta $0e				sta 	DTemp2+2
.010ff6	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010ff8	64 0a		stz $0a				stz 	DTemp1+2
.010ffa	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010ffd					_MTLoop:
.010ffd	8a		txa				txa 								; shift X right into C
.010ffe	4a		lsr a				lsr 	a
.010fff	aa		tax				tax
.011000	90 10		bcc $011012			bcc 	_MTNoAdd
.011002	18		clc				clc
.011003	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.011005	65 0c		adc $0c				adc 	DTemp2
.011007	85 08		sta $08				sta 	DTemp1
.011009	a5 0a		lda $0a				lda 	DTemp1+2
.01100b	65 0e		adc $0e				adc 	DTemp2+2
.01100d	85 0a		sta $0a				sta 	DTemp1+2
.01100f	90 01		bcc $011012			bcc 	_MTNoAdd
.011011	c8		iny				iny
.011012					_MTNoAdd:
.011012	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.011014	26 0e		rol $0e				rol 	DTemp2+2
.011016	90 01		bcc $011019			bcc 	_MTNoOverflow
.011018	c8		iny				iny
.011019					_MTNoOverflow:
.011019	8a		txa				txa 								; until multiplier is zero.
.01101a	d0 e1		bne $010ffd			bne 	_MTLoop
.01101c	98		tya				tya
.01101d	18		clc				clc
.01101e	69 ff ff	adc #$ffff			adc 	#$FFFF
.011021	fa		plx				plx 								; restore X
.011022	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.011023					Function_Str:
.011023	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.011026	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.011029	48		pha				pha 								; save YA on the stack
.01102a	5a		phy				phy
.01102b	20 1a 0f	jsr $010f1a			jsr 	VALGetBase 					; process , base (shared with STR$())
.01102e	85 14		sta $14				sta 	DSignCount
.011030	7a		ply				ply 								; YA is the number
.011031	68		pla				pla
.011032	da		phx				phx
.011033	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.011035	20 3e 10	jsr $01103e			jsr 	ConvertToString 			; convert it to a string.
.011038	fa		plx				plx 								; restore X
.011039	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01103b	74 20		stz $20,x			stz 	EXSValueH+0,x
.01103d	60		rts				rts
.01103e					ConvertToString:
.01103e	48		pha				pha
.01103f	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.011042	20 9b 06	jsr $01069b			jsr 	StringTempAllocate 			; allocate space for return string.
.011045	68		pla				pla
.011046					ConvertToStringAlreadyAllocated:
.011046	da		phx				phx 								; save X (base)
.011047	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.011049	84 26		sty $26				sty 	DTemp3+2
.01104b	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.01104d	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.01104f	10 15		bpl $011066			bpl 	_CTSNotNegative
.011051	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.011054	20 d0 10	jsr $0110d0			jsr 	CTSOutputA
.011057	38		sec				sec 								; negate DTemp3 which is the number
.011058	a9 00 00	lda #$0000			lda 	#0
.01105b	e5 24		sbc $24				sbc 	DTemp3
.01105d	85 24		sta $24				sta 	DTemp3
.01105f	a9 00 00	lda #$0000			lda 	#0
.011062	e5 26		sbc $26				sbc 	DTemp3+2
.011064	85 26		sta $26				sta 	DTemp3+2
.011066					_CTSNotNegative:
.011066	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.011069	48		pha				pha
.01106a	a9 00 00	lda #$0000			lda 	#0
.01106d	48		pha				pha
.01106e	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011070	85 08		sta $08				sta 	DTemp1
.011072	64 0a		stz $0a				stz 	DTemp1+2
.011074					_CTSMultiplySubtractor:
.011074	38		sec				sec 								; check number vs subtractor
.011075	a5 24		lda $24				lda 	DTemp3
.011077	e5 08		sbc $08				sbc 	DTemp1
.011079	a5 26		lda $26				lda 	DTemp3+2
.01107b	e5 0a		sbc $0a				sbc 	DTemp1+2
.01107d	90 0f		bcc $01108e			bcc		_CTSScaledUp 				; if >= then scaled up.
.01107f	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011081	48		pha				pha
.011082	a5 0a		lda $0a				lda 	DTemp1+2
.011084	48		pha				pha
.011085	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011087	20 ec 0f	jsr $010fec			jsr 	MultiplyTemp1ByA
.01108a	b0 02		bcs $01108e			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01108c	80 e6		bra $011074			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.01108e					_CTSScaledUp:
.01108e	7a		ply				ply 								; YA contains the previous divider.
.01108f	68		pla				pla
.011090	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011093	d0 05		bne $01109a			bne 	_CTSHasDigit
.011095	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011098	f0 20		beq $0110ba			beq 	_CTSExit
.01109a					_CTSHasDigit:
.01109a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01109c	84 0e		sty $0e				sty 	DTemp2+2
.01109e	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0110a1					_CTSSubLoop:
.0110a1	38		sec				sec 								; subtract subtractor from number
.0110a2	a5 24		lda $24				lda 	DTemp3
.0110a4	e5 0c		sbc $0c				sbc 	DTemp2
.0110a6	a8		tay				tay 								; intermediate in Y
.0110a7	a5 26		lda $26				lda 	DTemp3+2
.0110a9	e5 0e		sbc $0e				sbc 	DTemp2+2
.0110ab	90 07		bcc $0110b4			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.0110ad	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.0110af	84 24		sty $24				sty 	DTemp3
.0110b1	e8		inx				inx 								; one more subtraction
.0110b2	80 ed		bra $0110a1			bra 	_CTSSubLoop 				; try it again.
.0110b4					_CTSFinishedSubtracting:
.0110b4	8a		txa				txa 								; convert to ASCII.
.0110b5	20 c3 10	jsr $0110c3			jsr 	CTSOutputHexDigit 			; write that out.
.0110b8	80 d4		bra $01108e			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.0110ba					_CTSExit:
.0110ba	a5 24		lda $24				lda 	DTemp3 						; output last digit
.0110bc	20 c3 10	jsr $0110c3			jsr 	CTSOutputHexDigit
.0110bf	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.0110c1	fa		plx				plx 								; restore X.
.0110c2	60		rts				rts
.0110c3					CTSOutputHexDigit:
.0110c3	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.0110c6	90 04		bcc $0110cc			bcc 	_CTSNotLetter
.0110c8	18		clc				clc
.0110c9	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.0110cc					_CTSNotLetter:
.0110cc	18		clc				clc
.0110cd	69 30 00	adc #$0030			adc 	#48
.0110d0					CTSOutputA:
.0110d0	5a		phy				phy 								; save Y, set Y to current pointer
.0110d1	a4 1a		ldy $1a				ldy 	DCurrentTempString
.0110d3	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.0110d6	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.0110d8	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.0110da	1a		inc a				inc 	a
.0110db	92 18		sta ($18)			sta 	(DStartTempString)
.0110dd	c2 20		rep #$20			rep 	#$20
.0110df	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.0110e1	7a		ply				ply 								; restore Y and exit.
.0110e2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.0110e3					Function_INSTR:
.0110e3	20 17 06	jsr $010617			jsr 	ResetTypeInteger 			; returns a integer
.0110e6	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0110e9	48		pha				pha 								; save string to search
.0110ea	20 ee 05	jsr $0105ee			jsr 	ExpectComma
.0110ed	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.0110f0	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket
.0110f3	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.0110f5	68		pla				pla
.0110f6	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.0110f8	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0110fa	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0110fc	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0110fe	38		sec				sec
.0110ff	b2 0c		lda ($0c)			lda 	(DTemp2)
.011101	f2 08		sbc ($08)			sbc		(DTemp1)
.011103	c2 20		rep #$20			rep 	#$20
.011105	90 2c		bcc $011133			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011107	29 ff 00	and #$00ff			and 	#$00FF
.01110a	1a		inc a				inc 	a
.01110b	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.01110d	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.01110f	29 ff 00	and #$00ff			and 	#$00FF
.011112	f0 22		beq $011136			beq 	_FINSError
.011114					_FINSLoop:
.011114	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.011116	1a		inc a				inc 	a
.011117	95 00		sta $00,x			sta 	EXSValueL+0,x
.011119	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.01111b	29 ff 00	and #$00ff			and 	#$00FF
.01111e	a8		tay				tay									; start comparing at index 1.
.01111f					_FINSCompare:
.01111f	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.011121	51 0c		eor ($0c),y			eor 	(DTemp2),y
.011123	29 ff 00	and #$00ff			and 	#$00FF
.011126	d0 05		bne $01112d			bne 	_FINSNext
.011128	88		dey				dey
.011129	d0 f4		bne $01111f			bne 	_FINSCompare
.01112b	80 08		bra $011135			bra 	_FINSExit
.01112d					_FINSNext:
.01112d	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.01112f	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.011131	d0 e1		bne $011114			bne 	_FINSLoop
.011133					_FINSFail:
.011133	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.011135					_FINSExit:
.011135	60		rts				rts
.011136					_FINSError:
.011136	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011139	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>011141	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.01114a					Function_UPPER:
.01114a	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.01114d	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011150	48		pha				pha
.011151	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; close call.
.011154	20 9b 06	jsr $01069b			jsr		StringTempAllocate 			; allocate memory for it
.011157	68		pla				pla
.011158	20 d5 06	jsr $0106d5			jsr 	StringCreateCopy 			; create a copy of it.
.01115b	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01115d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01115f	a8		tay				tay 								; address in Y
.011160	74 20		stz $20,x			stz 	EXSValueH+0,x
.011162	da		phx				phx 								; save X
.011163	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011165	29 ff 00	and #$00ff			and 	#$00FF
.011168	f0 20		beq $01118a			beq 	_FUPExit
.01116a	aa		tax				tax 								; put in X
.01116b					_FUPLoop:
.01116b	c8		iny				iny 								; increment and load character
.01116c	b9 00 00	lda $0000,y			lda 	$0000,y
.01116f	29 ff 00	and #$00ff			and 	#$00FF
.011172	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011175	90 10		bcc $011187			bcc 	_FUPNoChange
.011177	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01117a	b0 0b		bcs $011187			bcs 	_FUPNoChange
.01117c	38		sec				sec 								; shift case
.01117d	e9 20 00	sbc #$0020			sbc 	#32
.011180	e2 20		sep #$20			sep 	#$20 						; write back
.011182	99 00 00	sta $0000,y			sta 	$0000,y
.011185	c2 20		rep #$20			rep 	#$20
.011187					_FUPNoChange:
.011187	ca		dex				dex 								; do X times
.011188	d0 e1		bne $01116b			bne 	_FUPLoop
.01118a					_FUPExit:
.01118a	fa		plx				plx 								; restore X
.01118b	60		rts				rts
.01118c					Function_LOWER:
.01118c	20 1f 06	jsr $01061f			jsr 	ResetTypeString 			; returns a string.
.01118f	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011192	48		pha				pha
.011193	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; close call.
.011196	20 9b 06	jsr $01069b			jsr		StringTempAllocate 			; allocate memory for it
.011199	68		pla				pla
.01119a	20 d5 06	jsr $0106d5			jsr 	StringCreateCopy 			; create a copy of it.
.01119d	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01119f	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111a1	a8		tay				tay 								; address in Y
.0111a2	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111a4	da		phx				phx 								; save X
.0111a5	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111a7	29 ff 00	and #$00ff			and 	#$00FF
.0111aa	f0 20		beq $0111cc			beq 	_FLOExit
.0111ac	aa		tax				tax 								; put in X
.0111ad					_FLOLoop:
.0111ad	c8		iny				iny 								; increment and load character
.0111ae	b9 00 00	lda $0000,y			lda 	$0000,y
.0111b1	29 ff 00	and #$00ff			and 	#$00FF
.0111b4	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.0111b7	90 10		bcc $0111c9			bcc 	_FLONoChange
.0111b9	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0111bc	b0 0b		bcs $0111c9			bcs 	_FLONoChange
.0111be	18		clc				clc 								; shift case
.0111bf	69 20 00	adc #$0020			adc 	#32
.0111c2	e2 20		sep #$20			sep 	#$20 						; write back
.0111c4	99 00 00	sta $0000,y			sta 	$0000,y
.0111c7	c2 20		rep #$20			rep 	#$20
.0111c9					_FLONoChange:
.0111c9	ca		dex				dex 								; do X times
.0111ca	d0 e1		bne $0111ad			bne 	_FLOLoop
.0111cc					_FLOExit:
.0111cc	fa		plx				plx 								; restore X
.0111cd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0111ce					Function_Let:
.0111ce	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0111d0	48		pha				pha  								; save on stack for later.
.0111d1	20 88 03	jsr $010388			jsr 	VariableFind 				; find the variable
.0111d4	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0111d6	b0 1c		bcs $0111f4			bcs 	_FLetFound 					; skip if found.
.0111d8	68		pla				pla 								; get and push the first token again.
.0111d9	48		pha				pha
.0111da	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0111dd	d0 69		bne $011248			bne 	_FLError					; arrays, so this causes an error.
.0111df	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111e1	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0111e4	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.0111e7	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0111e9					_FLSkipToken:
.0111e9	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0111eb	e6 06		inc $06				inc 	DCodePtr
.0111ed	e6 06		inc $06				inc 	DCodePtr
.0111ef	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0111f2	d0 f5		bne $0111e9			bne 	_FLSkipToken
.0111f4					_FLetFound:
.0111f4	68		pla				pla 								; get and save the first token.
.0111f5	48		pha				pha
.0111f6	a8		tay				tay 								; put it in Y
.0111f7	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0111fa	f0 07		beq $011203			beq 	_FLetNotArray
.0111fc	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0111fe	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.011201	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011203					_FLetNotArray:
.011203	7a		ply				ply 								; get the first token into Y
.011204	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011206	48		pha				pha
.011207	5a		phy				phy 								; save the first token on the stack.
.011208	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.01120b	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01120d	d0 2c		bne $01123b			bne 	_FLetMissingEquals
.01120f	e6 06		inc $06				inc 	DCodePtr
.011211	e6 06		inc $06				inc 	DCodePtr
.011213	68		pla				pla 								; restore the first token.
.011214	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011217	d0 0f		bne $011228			bne 	_FLetString 				; skip if string.
.011219	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.01121c	7a		ply				ply 								; get address in Y
.01121d	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.01121f	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011222	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.011224	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.011227	60		rts				rts
.011228					_FLetString:
.011228	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.01122b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01122d	20 67 06	jsr $010667			jsr 	StringAssignPermanent 		; make the string permanent.
.011230	7a		ply				ply 								; get address
.011231	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011234	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.011237	99 02 00	sta $0002,y			sta 	$0002,y
.01123a	60		rts				rts
.01123b					_FLetMissingEquals:
.01123b	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01123e	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>011246	3d 00
.011248					_FLError:
.011248	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01124b	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011253	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.01125b					Function_PROC:
.01125b	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.01125e	18		clc				clc
.01125f	65 02		adc $02				adc 	DBaseAddress
.011261	aa		tax				tax 								; X is used to track it
.011262					_FPROLoop:
.011262	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.011265	f0 56		beq $0112bd			beq 	_FPROUnknown
.011267	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.01126a	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.01126d	f0 08		beq $011277			beq 	_FPROFoundDefProc
.01126f					_FPRONext:
.01126f	8a		txa				txa 								; follow the link.
.011270	18		clc				clc
.011271	7d 00 00	adc $0000,x			adc 	@w$0000,x
.011274	aa		tax				tax
.011275	80 eb		bra $011262			bra 	_FPROLoop
.011277					_FPROFoundDefProc:
.011277	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.01127a	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01127c	d0 f1		bne $01126f			bne 	_FPRONext
.01127e	8a		txa				txa 								; DTemp1 points to the token.
.01127f	18		clc				clc
.011280	69 06 00	adc #$0006			adc 	#6
.011283	85 08		sta $08				sta 	DTemp1
.011285	a0 00 00	ldy #$0000			ldy 	#0
.011288					_FPROCompare:
.011288	b1 08		lda ($08),y			lda 	(DTemp1),y
.01128a	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01128c	d0 e1		bne $01126f			bne 	_FPRONext 					; fails, different
.01128e	c8		iny				iny
.01128f	c8		iny				iny
.011290	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011293	d0 f3		bne $011288			bne 	_FPROCompare
.011295	98		tya				tya 								; this is the offset to the next element
.011296	18		clc				clc
.011297	65 08		adc $08				adc 	DTemp1
.011299	48		pha				pha 								; push the next command on the stack
.01129a	da		phx				phx 								; push the record address on the stack.
.01129b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01129d	98		tya				tya 								; work out the return address
.01129e	18		clc				clc
.01129f	65 06		adc $06				adc 	DCodePtr
.0112a1	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0112a3	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0112a5	95 04		sta $04,x			sta 	$04,x
.0112a7	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.0112aa	95 06		sta $06,x			sta 	$06,x
.0112ac	8a		txa				txa 								; advance stack by 6.
.0112ad	18		clc				clc
.0112ae	69 06 00	adc #$0006			adc 	#6
.0112b1	85 2a		sta $2a				sta 	DStack
.0112b3	7a		ply				ply 								; line record address
.0112b4	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.0112b7	85 22		sta $22				sta 	DLineNumber
.0112b9	68		pla				pla 								; next command
.0112ba	85 06		sta $06				sta 	DCodePtr
.0112bc	60		rts				rts
.0112bd					_FPROUnknown:
.0112bd	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0112c0	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>0112c8	70 72 6f 63 65 64 75 72 65 00
.0112d2					Function_ENDPROC:
.0112d2	a6 2a		ldx $2a				ldx 	DStack
.0112d4	b5 00		lda $00,x			lda 	$00,x
.0112d6	c9 00 c0	cmp #$c000			cmp 	#$C000 						; is it a local/parameter ?
.0112d9	b0 2e		bcs $011309			bcs 	_FENPPopLocal
.0112db	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.0112de	d0 11		bne $0112f1			bne 	_FENPFail
.0112e0	8a		txa				txa 								; unpick stack.
.0112e1	38		sec				sec
.0112e2	e9 06 00	sbc #$0006			sbc 	#6
.0112e5	85 2a		sta $2a				sta 	DStack
.0112e7	aa		tax				tax
.0112e8	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0112ea	85 06		sta $06				sta 	DCodePtr
.0112ec	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0112ee	85 22		sta $22				sta 	DLineNumber
.0112f0	60		rts				rts
.0112f1					_FENPFail:
.0112f1	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0112f4	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>0112fc	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.011309					_FENPPopLocal:
.011309	a5 2a		lda $2a				lda 	DStack 						; wind stack down.
.01130b	38		sec				sec
.01130c	e9 08 00	sbc #$0008			sbc 	#8
.01130f	85 2a		sta $2a				sta 	DStack
.011311	aa		tax				tax
.011312	b5 02		lda $02,x			lda 	$02,x 						; get address
.011314	a8		tay				tay
.011315	b5 04		lda $04,x			lda 	$04,x 						; copy data
.011317	99 00 00	sta $0000,y			sta 	$0000,y
.01131a	b5 06		lda $06,x			lda 	$06,x
.01131c	99 02 00	sta $0002,y			sta 	$0002,y
.01131f	80 b1		bra $0112d2			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.011321					Command_LOCAL:
.011321	20 4b 13	jsr $01134b			jsr 	LocalProcessVariable 		; make one variable 'local'
.011324	90 0e		bcc $011334			bcc 	_CLOFail
.011326	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.011328	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.01132b	d0 06		bne $011333			bne 	_CLOExit
.01132d	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.01132f	e6 06		inc $06				inc 	DCodePtr
.011331	80 ee		bra $011321			bra 	Command_Local
.011333					_CLOExit:
.011333	60		rts				rts
.011334					_CLOFail:
.011334	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011337	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>01133f	6c 20 53 74 61 74 65 6d 65 6e 74 00
.01134b					LocalProcessVariable:
.01134b	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.01134d	c9 00 c0	cmp #$c000			cmp 	#$C000
.011350	90 3e		bcc $011390			bcc 	_LPVFail
.011352	29 00 10	and #$1000			and 	#IDArrayMask
.011355	d0 39		bne $011390			bne 	_LPVFail
.011357	b2 06		lda ($06)			lda 	(DCodePtr)
.011359	29 00 e0	and #$e000			and 	#$E000
.01135c	48		pha				pha
.01135d	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variable
.011360	b0 13		bcs $011375			bcs 	_LPVFound 					; if found, A points to the data.
.011362	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011364	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.011367	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.01136a					_LPVSkipToken:
.01136a	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01136c	e6 06		inc $06				inc 	DCodePtr
.01136e	e6 06		inc $06				inc 	DCodePtr
.011370	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011373	d0 f5		bne $01136a			bne 	_LPVSkipToken
.011375					_LPVFound:
.011375	a8		tay				tay 								; data pointer in Y
.011376	a6 2a		ldx $2a				ldx 	DStack
.011378	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.01137a	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.01137d	95 04		sta $04,x			sta 	$04,x
.01137f	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.011382	95 06		sta $06,x			sta 	$06,x
.011384	68		pla				pla 								; get the type header
.011385	95 08		sta $08,x			sta 	$08,x 						; update the BASIC stack.
.011387	8a		txa				txa
.011388	18		clc				clc
.011389	69 08 00	adc #$0008			adc 	#8
.01138c	85 2a		sta $2a				sta 	DStack
.01138e	38		sec				sec
.01138f	60		rts				rts
.011390					_LPVFail:
.011390	18		clc				clc
.011391	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.011392					Command_List:
.011392	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011395	20 9b 06	jsr $01069b		jsr 	StringTempAllocate
.011398	85 30		sta $30			sta 	DListBuffer						; save buffer.
.01139a	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01139c	64 2e		stz $2e			stz 	DIndent2
.01139e	64 32		stz $32			stz 	DTemp4+0 						; low number
.0113a0	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113a3	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0113a5	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0113a7	f0 3b		beq $0113e4		beq 	_CLIList
.0113a9	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113ac	f0 36		beq $0113e4		beq 	_CLIList
.0113ae	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.0113b1	f0 13		beq $0113c6		beq 	_CLIComma
.0113b3	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.0113b6	c0 00 00	cpy #$0000		cpy 	#0
.0113b9	d0 21		bne $0113dc		bne 	_CLIError
.0113bb	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0113bd	85 34		sta $34			sta 	DTemp4+2
.0113bf	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.0113c1	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.0113c4	d0 1e		bne $0113e4		bne 	_CLIList
.0113c6					_CLIComma:
.0113c6	20 ee 05	jsr $0105ee		jsr 	ExpectComma 					; skip comma
.0113c9	b2 06		lda ($06)		lda 	(DCodePtr)
.0113cb	f0 12		beq $0113df		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.0113cd	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0113d0	f0 0d		beq $0113df		beq 	_CLIToEnd
.0113d2	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.0113d5	85 34		sta $34			sta 	DTemp4+2
.0113d7	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0113da	f0 08		beq $0113e4		beq 	_CLIList
.0113dc					_CLIError:
.0113dc	82 dc f1	brl $0105bb		brl 	SyntaxError
.0113df					_CLIToEnd:
.0113df	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0113e2	85 34		sta $34			sta 	DTemp4+2
.0113e4					_CLIList:
.0113e4	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0113e7	18		clc			clc
.0113e8	65 02		adc $02			adc 	DBaseAddress
.0113ea	a8		tay			tay 									; put in Y
.0113eb					_CLINextLine:
.0113eb	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0113ee	f0 29		beq $011419		beq 	_CLIExit
.0113f0	20 81 15	jsr $011581		jsr 	ScanIndent  					; scan for formatting.
.0113f3	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0113f6	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0113f8	90 14		bcc $01140e		bcc 	_CLIFollowLink
.0113fa	c5 34		cmp $34			cmp 	DTemp4+2
.0113fc	f0 02		beq $011400		beq 	_CLIShowLine
.0113fe	b0 0e		bcs $01140e		bcs 	_CLIFollowLink
.011400					_CLIShowLine:
.011400	a5 30		lda $30			lda 	DListBuffer
.011402	20 1c 14	jsr $01141c		jsr 	Detokenise 						; detokenise it
.011405	5a		phy			phy
.011406	a8		tay			tay 									; print buffer out
.011407	20 45 06	jsr $010645		jsr 	PrintBasicString
.01140a	20 c6 1c	jsr $011cc6		jsr 	HWNewLine
.01140d	7a		ply			ply 									; get address
.01140e					_CLIFollowLink:
.01140e	98		tya			tya 									; follow link
.01140f	18		clc			clc
.011410	79 00 00	adc $0000,y		adc 	$0000,y
.011413	a8		tay			tay
.011414	20 e2 1c	jsr $011ce2		jsr 	HWCheckBreak 					; break key pressed.
.011417	f0 d2		beq $0113eb		beq 	_CLINextLine
.011419					_CLIExit:
.011419	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01141b	60		rts			rts
.01141c					Detokenise:
.01141c	48		pha			pha
.01141d	da		phx			phx
.01141e	5a		phy			phy
.01141f	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011421	1a		inc a			inc 	a
.011422	85 1a		sta $1a			sta 	DCurrentTempString
.011424	64 1c		stz $1c			stz		DConstantShift
.011426	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011429	92 18		sta ($18)		sta 	(DStartTempString)
.01142b	5a		phy			phy 									; save Y
.01142c	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01142f	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011432	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011435	20 46 10	jsr $011046		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011438	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01143a	c5 2e		cmp $2e			cmp 	DIndent2
.01143c	90 02		bcc $011440		bcc 	_DTKSmaller
.01143e	a5 2e		lda $2e			lda 	DIndent2
.011440					_DTKSmaller:
.011440	0a		asl a			asl 	a
.011441	69 06 00	adc #$0006		adc 	#6
.011444	85 08		sta $08			sta 	DTemp1
.011446					_DTKPadLineNo:
.011446	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011449	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.01144c	b2 18		lda ($18)		lda 	(DStartTempString)
.01144e	29 ff 00	and #$00ff		and 	#$00FF
.011451	c5 08		cmp $08			cmp 	DTemp1
.011453	d0 f1		bne $011446		bne 	_DTKPadLineNo
.011455	68		pla			pla 									; get pointer
.011456	18		clc			clc 									; point to start of line
.011457	69 04 00	adc #$0004		adc 	#4
.01145a	a8		tay			tay 									; put back in Y.
.01145b					_DTKMainLoop:
.01145b	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01145e	d0 04		bne $011464		bne 	_DTKNotZero 					; if zero, return.
.011460	7a		ply			ply
.011461	fa		plx			plx
.011462	68		pla			pla
.011463	60		rts			rts
.011464					_DTKNotZero:
.011464	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011467	b0 1c		bcs $011485		bcs 	_DTKNotString
.011469	5a		phy			phy										; save token address on stack.
.01146a	c8		iny			iny 									; skip first token
.01146b	c8		iny			iny
.01146c	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01146f	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.011472	98		tya			tya 									; copy the string out.
.011473	20 d5 06	jsr $0106d5		jsr 	StringCreateCopy
.011476	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011479	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.01147c	68		pla			pla 									; get token, which is its own offset
.01147d	a8		tay			tay
.01147e	18		clc			clc
.01147f	79 00 00	adc $0000,y		adc 	$0000,y
.011482	a8		tay			tay
.011483	80 d6		bra $01145b		bra 	_DTKMainLoop
.011485					_DTKNotString:
.011485	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011488	b0 09		bcs $011493		bcs 	_DTKNotShift
.01148a	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01148d	85 1c		sta $1c			sta 	DConstantShift
.01148f	c8		iny			iny 									; skip token.
.011490	c8		iny			iny
.011491	80 c8		bra $01145b		bra 	_DTKMainLoop
.011493					_DTKNotShift:
.011493	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011496	b0 07		bcs $01149f		bcs 	_DTKNotKeyword
.011498	c8		iny			iny 									; skip over token
.011499	c8		iny			iny
.01149a	20 19 15	jsr $011519		jsr 	_DTKDecodeKeyword 				; decode it.
.01149d	80 bc		bra $01145b		bra 	_DTKMainLoop
.01149f					_DTKNotKeyword:
.01149f	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0114a2	b0 18		bcs $0114bc		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0114a4	5a		phy			phy 									; save pointer
.0114a5	38		sec			sec  									; shift it in the range 0-32767
.0114a6	e9 00 40	sbc #$4000		sbc 	#$4000
.0114a9	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0114aa	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0114ac	6a		ror a			ror 	a 								; rotate that into the constant value
.0114ad	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0114af	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0114b2	20 46 10	jsr $011046		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114b5	64 1c		stz $1c			stz 	DConstantShift
.0114b7	7a		ply			ply 									; restore pointer
.0114b8	c8		iny			iny 									; skip token.
.0114b9	c8		iny			iny
.0114ba	80 9f		bra $01145b		bra 	_DTKMainLoop
.0114bc					_DTKIdentifier:
.0114bc	48		pha			pha 									; save token for typing at end
.0114bd					_DTKILoop:
.0114bd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0114c0	20 e9 14	jsr $0114e9		jsr 	_DTKIDecodeToken 				; decode it.
.0114c3	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0114c6	c8		iny			iny 									; skip it
.0114c7	c8		iny			iny
.0114c8	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0114cb	d0 f0		bne $0114bd		bne 	_DTKILoop
.0114cd	68		pla			pla 									; add $( as required.
.0114ce	48		pha			pha 									; comes from the first token.
.0114cf	29 00 20	and #$2000		and 	#IDTypeMask
.0114d2	f0 06		beq $0114da		beq 	_DTKINotString
.0114d4	a9 24 00	lda #$0024		lda 	#"$"
.0114d7	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.0114da					_DTKINotString:
.0114da	68		pla			pla
.0114db	29 00 10	and #$1000		and 	#IDArrayMask
.0114de	f0 06		beq $0114e6		beq 	_DTKINotArray
.0114e0	a9 28 00	lda #$0028		lda 	#"("
.0114e3	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.0114e6					_DTKINotArray:
.0114e6	82 72 ff	brl $01145b		brl 	_DTKMainLoop
.0114e9					_DTKIDecodeToken:
.0114e9	5a		phy			phy
.0114ea	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0114ed	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0114f0					_DTKIDivide:
.0114f0	38		sec			sec
.0114f1	e9 2d 00	sbc #$002d		sbc 	#45
.0114f4	c8		iny			iny
.0114f5	b0 f9		bcs $0114f0		bcs 	_DTKIDivide
.0114f7	69 2d 00	adc #$002d		adc 	#45
.0114fa	20 03 15	jsr $011503		jsr 	_DTKIOutA 						; output low.
.0114fd	98		tya			tya
.0114fe	20 03 15	jsr $011503		jsr 	_DTKIOutA 						; output high
.011501	7a		ply			ply
.011502	60		rts			rts
.011503					_DTKIOutA:
.011503	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011506	f0 10		beq $011518		beq 	_DTKIOutExit
.011508	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01150b	90 04		bcc $011511		bcc 	_DTKIOutAlpha
.01150d	38		sec			sec  									; adjust for 0-9
.01150e	e9 4b 00	sbc #$004b		sbc 	#$4B
.011511					_DTKIOutAlpha:
.011511	18		clc			clc										; adjust for A-Z
.011512	69 60 00	adc #$0060		adc 	#96
.011515	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.011518					_DTKIOutExit:
.011518	60		rts			rts
.011519					_DTKDecodeKeyword:
.011519	48		pha			pha
.01151a	da		phx			phx
.01151b	5a		phy			phy
.01151c	a8		tay			tay 									; save token ID in Y
.01151d	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011520	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011523	48		pha			pha 									; save this flag on a stack
.011524	5a		phy			phy 									; save the token ID
.011525	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011528	d0 19		bne $011543		bne 	_DTKNotSpecial1
.01152a	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01152c	88		dey			dey
.01152d	b9 00 00	lda $0000,y		lda 	$0000,y
.011530	29 ff 00	and #$00ff		and 	#$00FF
.011533	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011536	f0 0b		beq $011543		beq 	_DTKNotSpecial1
.011538	c9 3a 00	cmp #$003a		cmp 	#":"
.01153b	f0 06		beq $011543		beq 	_DTKNotSpecial1
.01153d	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011540	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.011543					_DTKNotSpecial1:
.011543	68		pla			pla
.011544	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011547	a8		tay			tay 									; into Y.
.011548	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01154b					_DTKDWorkThrough:
.01154b	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01154c	f0 0f		beq $01155d		beq 	_DTKDFound
.01154e	86 08		stx $08			stx 	DTemp1
.011550	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.011554	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011557	18		clc			clc
.011558	65 08		adc $08			adc 	DTemp1
.01155a	aa		tax			tax
.01155b	80 ee		bra $01154b		bra 	_DTKDWorkThrough
.01155d					_DTKDFound:
.01155d	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.011561	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011564	3a		dec a			dec 	a
.011565	a8		tay			tay 									; put in Y
.011566					_DTKOut:
.011566	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.01156a	29 ff 00	and #$00ff		and 	#$00FF
.01156d					_DTKNotLC:
.01156d	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.011570	e8		inx			inx
.011571	88		dey			dey
.011572	d0 f2		bne $011566		bne 	_DTKOut
.011574	68		pla			pla 									; trailing space.
.011575	d0 06		bne $01157d		bne 	_DTKNotSpecial2
.011577	a9 20 00	lda #$0020		lda 	#" "
.01157a	20 c7 06	jsr $0106c7		jsr 	StringWriteCharacter
.01157d					_DTKNotSpecial2:
.01157d	7a		ply			ply
.01157e	fa		plx			plx
.01157f	68		pla			pla
.011580	60		rts			rts
.011581					ScanIndent:
.011581	48		pha			pha
.011582	5a		phy			phy
.011583	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011585	85 2e		sta $2e			sta 	DIndent2
.011587	98		tya			tya
.011588	18		clc			clc 									; point to code.
.011589	69 04 00	adc #$0004		adc 	#4
.01158c	a8		tay			tay
.01158d					_SILoop:
.01158d	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011590	f0 35		beq $0115c7		beq 	_SIExit
.011592	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011595	b0 08		bcs $01159f		bcs 	_SICheckKeyword
.011597	98		tya			tya 									; skip string.
.011598	18		clc			clc
.011599	79 00 00	adc $0000,y		adc 	$0000,y
.01159c	a8		tay			tay
.01159d	80 ee		bra $01158d		bra 	_SILoop
.01159f					_SICheckKeyword:
.01159f	29 00 e0	and #$e000		and 	#$E000
.0115a2	c9 00 20	cmp #$2000		cmp 	#$2000
.0115a5	f0 04		beq $0115ab		beq 	_SIFoundKeyword
.0115a7					_SIAdvance:
.0115a7	c8		iny			iny 									; if not, loop round.
.0115a8	c8		iny			iny
.0115a9	80 e2		bra $01158d		bra 	_SILoop
.0115ab					_SIFoundKeyword:
.0115ab	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0115ae	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0115b1	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0115b4	f0 0d		beq $0115c3		beq 	_SIKeyPlus
.0115b6	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0115b9	d0 ec		bne $0115a7		bne 	_SIAdvance
.0115bb	c6 2c		dec $2c			dec 	DIndent
.0115bd	10 e8		bpl $0115a7		bpl 	_SIAdvance
.0115bf	64 2c		stz $2c			stz 	DIndent
.0115c1	80 e4		bra $0115a7		bra 	_SIAdvance
.0115c3					_SIKeyPlus:
.0115c3	e6 2c		inc $2c			inc 	DIndent
.0115c5	80 e0		bra $0115a7		bra 	_SIAdvance
.0115c7					_SIExit:
.0115c7	7a		ply			ply
.0115c8	68		pla			pla
.0115c9	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.0115ca					Function_PRINT:
.0115ca	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0115cc	f0 33		beq $011601			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0115ce	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.0115d1	f0 2e		beq $011601			beq 	_FPRExitCR
.0115d3	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.0115d6	f0 23		beq $0115fb			beq 	_FPRSkipLoop
.0115d8	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.0115db	f0 1b		beq $0115f8			beq 	_FPRNewLine
.0115dd	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0115e0	f0 11		beq $0115f3			beq 	_FPRTab
.0115e2					_FPRExpression:
.0115e2	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.0115e5	b0 06		bcs $0115ed			bcs 	_FPRHaveString
.0115e7	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0115ea	20 3e 10	jsr $01103e			jsr 	ConvertToString
.0115ed					_FPRHaveString:
.0115ed	a8		tay				tay 								; print the basic String.
.0115ee	20 45 06	jsr $010645			jsr 	PrintBASICString
.0115f1	80 d7		bra $0115ca			bra 	Function_Print 				; and go round again.
.0115f3					_FPRTab:
.0115f3	20 db 1c	jsr $011cdb			jsr 	HWTab
.0115f6	80 03		bra $0115fb			bra 	_FPRSkipLoop
.0115f8					_FPRNewLine:
.0115f8	20 c6 1c	jsr $011cc6			jsr 	HWNewLine
.0115fb					_FPRSkipLoop:
.0115fb	e6 06		inc $06				inc 	DCodePtr
.0115fd	e6 06		inc $06				inc 	DCodePtr
.0115ff	80 c9		bra $0115ca			bra 	Function_Print
.011601					_FPRExitCR:
.011601	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011603	88		dey				dey
.011604	88		dey				dey
.011605	b9 00 00	lda $0000,y			lda 	$0000,y
.011608	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01160b	f0 08		beq $011615			beq 	_FPRExit
.01160d	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.011610	f0 03		beq $011615			beq 	_FPRExit
.011612	20 c6 1c	jsr $011cc6			jsr 	HWNewLine 					; print a new line.
.011615					_FPRExit:
.011615	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011616					Function_IF:
.011616	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.011619	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01161b	05 08		ora $08				ora 	DTemp1
.01161d	a8		tay				tay 								; success flag in Y.
.01161e	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011620	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.011623	d0 32		bne $011657			bne 	_FIFExtended 				; if so, go to the extended IF.
.011625	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011627	e6 06		inc $06				inc 	DCodePtr
.011629	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01162c	f0 0f		beq $01163d			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01162e	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011630	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011633	90 21		bcc $011656			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011635	c9 00 c0	cmp #$c000			cmp 	#$C000
.011638	b0 1c		bcs $011656			bcs 	_FIFContinue
.01163a	4c cc 18	jmp $0118cc			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01163d					_FIFEndOfLine:
.01163d	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.01163f	f0 15		beq $011656			beq 	_FIFContinue 				; if done so, continue.
.011641	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011644	90 06		bcc $01164c			bcc 	_FIFStringConstant
.011646	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011648	e6 06		inc $06				inc 	DCodePtr
.01164a	80 f1		bra $01163d			bra 	_FIFEndOfLine
.01164c					_FIFStringConstant:
.01164c	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01164f	18		clc				clc
.011650	65 06		adc $06				adc 	DCodePtr
.011652	85 06		sta $06				sta 	DCodePtr
.011654	80 e7		bra $01163d			bra 	_FIFEndOfLine
.011656					_FIFContinue:
.011656	60		rts				rts
.011657					_FIFExtended:
.011657	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011659	e6 2a		inc $2a				inc 	DStack
.01165b	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.01165e	a6 2a		ldx $2a				ldx 	DStack
.011660	95 00		sta $00,x			sta 	$00,x
.011662	98		tya				tya 								; see if the test was passed.
.011663	f0 01		beq $011666			beq 	_FIXSkip 					; if zero then it has failed.
.011665	60		rts				rts 								; test passed, so continue executing
.011666					_FIXSkip:
.011666	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011669	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.01166c	20 cc 16	jsr $0116cc			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01166f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011671	e6 06		inc $06				inc 	DCodePtr
.011673	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011676	d0 04		bne $01167c			bne 	_FIXNoThrow
.011678	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01167a	c6 2a		dec $2a				dec 	DStack
.01167c					_FIXNoThrow:
.01167c	60		rts				rts
.01167d					Handler_ELSE:
.01167d	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01167f	b5 00		lda $00,x			lda 	$00,x
.011681	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.011684	d0 12		bne $011698			bne 	_HEBadStructure
.011686	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011689	a2 00 00	ldx #$0000			ldx 	#$0000
.01168c	20 cc 16	jsr $0116cc			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01168f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011691	e6 06		inc $06				inc 	DCodePtr
.011693	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011695	c6 2a		dec $2a				dec 	DStack
.011697	60		rts				rts
.011698					_HEBadStructure:
.011698	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01169b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116a3	68 6f 75 74 20 49 66 00
.0116ab					Handler_ENDIF:
.0116ab	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116ad	b5 00		lda $00,x			lda 	$00,x
.0116af	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.0116b2	d0 05		bne $0116b9			bne 	_HEIBadStructure
.0116b4	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116b6	c6 2a		dec $2a				dec 	DStack
.0116b8	60		rts				rts
.0116b9					_HEIBadStructure:
.0116b9	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0116bc	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0116c4	68 6f 75 74 20 49 66 00
.0116cc					ScanForwardLevel:
.0116cc	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0116ce	86 0a		stx $0a				stx 	DTemp1+2
.0116d0	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.0116d2	85 0c		sta $0c				sta 	DTemp2
.0116d4	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0116d7					_SFLLoop:
.0116d7	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0116da	d0 0d		bne $0116e9			bne 	_SFLNoCheck 				; we're in a substructure.
.0116dc	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0116de	f0 09		beq $0116e9			beq 	_SFLNoCheck 				; don't check zero
.0116e0	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0116e2	f0 04		beq $0116e8			beq 	_SFLFound
.0116e4	c5 0a		cmp $0a				cmp 	DTemp1+2
.0116e6	d0 01		bne $0116e9			bne 	_SFLNoCheck
.0116e8					_SFLFound:
.0116e8	60		rts				rts
.0116e9					_SFLNoCheck:
.0116e9	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0116eb	f0 4f		beq $01173c			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0116ed	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0116f0	90 40		bcc $011732			bcc 	_SFLSkipString 				; then handle that.
.0116f2	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0116f4	e6 06		inc $06				inc 	DCodePtr
.0116f6	a8		tay				tay 								; put token in Y temporarily.
.0116f7	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0116fa	c9 00 20	cmp #$2000			cmp 	#$2000
.0116fd	d0 d8		bne $0116d7			bne 	_SFLLoop
.0116ff	98		tya				tya 								; get the token back.
.011700	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011703	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011706	f0 cf		beq $0116d7			beq 	_SFLLoop
.011708	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01170b	90 ca		bcc $0116d7			bcc 	_SFLLoop
.01170d	e8		inx				inx 								; increment the level.
.01170e	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011711	f0 c4		beq $0116d7			beq 	_SFLLoop
.011713	ca		dex				dex 								; decrement the level
.011714	ca		dex				dex 								; one overdoes the previous inx.
.011715	10 c0		bpl $0116d7			bpl 	_SFLLoop 					; if gone -ve then error.
.011717					_SFLError:
.011717	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011719	85 22		sta $22				sta 	DLineNumber
.01171b	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01171e	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011726	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011732					_SFLSkipString:
.011732	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011735	18		clc				clc
.011736	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011738	85 06		sta $06				sta 	DCodePtr
.01173a	80 9b		bra $0116d7			bra 	_SFLLoop 					; go round again.
.01173c					_SFLNextLine:
.01173c	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.01173e	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011741	f0 d4		beq $011717			beq 	_SFLError 					; if zero, then there's no more code to search.
.011743	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011746	85 22		sta $22				sta 	DLineNumber
.011748	18		clc				clc
.011749	a5 06		lda $06				lda 	DCodePtr
.01174b	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01174e	85 06		sta $06				sta 	DCodePtr
.011750	80 85		bra $0116d7			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.011752					Command_FOR:
.011752	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011754	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011757	d0 60		bne $0117b9			bne		_CFOBad
.011759	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find variable
.01175c	b0 15		bcs $011773			bcs 	_CFOExists
.01175e	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011760	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011763	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.011766	48		pha				pha 								; save on stack
.011767					_CFOSkipToken:
.011767	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011769	e6 06		inc $06				inc 	DCodePtr
.01176b	e6 06		inc $06				inc 	DCodePtr
.01176d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011770	d0 f5		bne $011767			bne 	_CFOSkipToken
.011772	68		pla				pla 								; restore address
.011773					_CFOExists:
.011773	48		pha				pha 								; push variable address on stack
.011774	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011777	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.01177a	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.01177d	bb		tyx				tyx 								; put high value in X
.01177e	7a		ply				ply 								; address in Y
.01177f	99 00 00	sta $0000,y			sta 	$0000,y
.011782	8a		txa				txa
.011783	99 02 00	sta $0002,y			sta 	$0002,y
.011786	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011789	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.01178c	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01178e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011790	95 02		sta $02,x			sta 	$02,x
.011792	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011794	95 04		sta $04,x			sta 	$04,x
.011796	98		tya				tya 								; save variable address at +6
.011797	95 06		sta $06,x			sta 	$06,x
.011799	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.01179c	95 08		sta $08,x			sta 	$08,x
.01179e	8a		txa				txa 								; add 8 to stack position
.01179f	18		clc				clc
.0117a0	69 08 00	adc #$0008			adc 	#8
.0117a3	85 2a		sta $2a				sta 	DStack
.0117a5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0117a8	b2 06		lda ($06)			lda 	(DCodePtr)
.0117aa	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.0117ad	d0 09		bne $0117b8			bne 	_CFONoStep
.0117af	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.0117b2	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.0117b5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.0117b8					_CFONoStep:
.0117b8	60		rts				rts
.0117b9					_CFOBad:
.0117b9	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0117bc	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0117c4	76 61 72 69 61 62 6c 65 00
.0117cd					Command_NEXT:
.0117cd	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.0117cf	b5 00		lda $00,x			lda 	$00,x
.0117d1	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.0117d4	f0 14		beq $0117ea			beq 	_CNXOk
.0117d6	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0117d9	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0117e1	68 6f 75 74 20 46 6f 72 00
.0117ea					_CNXOk:
.0117ea	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0117ec	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0117ef	90 22		bcc $011813			bcc 	_CNXNoVariable
.0117f1	20 88 03	jsr $010388			jsr 	VariableFind 				; get address of variable.
.0117f4	90 08		bcc $0117fe			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0117f6	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0117f8	ca		dex				dex
.0117f9	ca		dex				dex
.0117fa	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0117fc	f0 15		beq $011813			beq 	_CNXNoVariable 				; then continue
.0117fe					_CNXNextVar:
.0117fe	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011801	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011809	20 76 61 72 69 61 62 6c 65 00
.011813					_CNXNoVariable:
.011813	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011815	48		pha				pha
.011816	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011818	38		sec				sec
.011819	e9 08 00	sbc #$0008			sbc 	#8
.01181c	85 2a		sta $2a				sta 	DStack
.01181e	aa		tax				tax 								; X points to the stack.
.01181f	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011821	85 06		sta $06				sta 	DCodePtr
.011823	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.011826	5a		phy				phy 								; save the target on the stack
.011827	48		pha				pha
.011828	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01182b	85 08		sta $08				sta 	DTemp1
.01182d	64 0a		stz $0a				stz 	DTemp1+2
.01182f	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011831	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.011834	d0 0b		bne $011841			bne 	_CNXNoStep
.011836	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011838	e6 06		inc $06				inc 	DCodePtr
.01183a	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.01183d	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.01183f	84 0a		sty $0a				sty 	DTemp1+2
.011841					_CNXNoStep:
.011841	68		pla				pla 								; save the Target in DTemp2
.011842	85 0c		sta $0c				sta 	DTemp2
.011844	68		pla				pla
.011845	85 0e		sta $0e				sta 	DTemp2+2
.011847	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011849	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01184b	a8		tay				tay
.01184c	18		clc				clc
.01184d	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011850	65 08		adc $08				adc 	DTemp1
.011852	99 00 00	sta $0000,y			sta 	$0000,y
.011855	b9 02 00	lda $0002,y			lda 	$0002,y
.011858	65 0a		adc $0a				adc 	DTemp1+2
.01185a	99 02 00	sta $0002,y			sta 	$0002,y
.01185d	38		sec				sec
.01185e	a5 0c		lda $0c				lda 	DTemp2
.011860	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011863	85 0c		sta $0c				sta 	DTemp2
.011865	a5 0e		lda $0e				lda 	DTemp2+2
.011867	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01186a	85 0e		sta $0e				sta 	DTemp2+2
.01186c	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01186e	f0 0a		beq $01187a			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011870	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011872	45 0a		eor $0a				eor 	DTemp1+2
.011874	10 04		bpl $01187a			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011876	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011877	85 06		sta $06				sta 	DCodePtr
.011879	60		rts				rts
.01187a					_CNXLoopAgain:
.01187a	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01187b	18		clc				clc
.01187c	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01187e	aa		tax				tax
.01187f	69 08 00	adc #$0008			adc 	#8
.011882	85 2a		sta $2a				sta 	DStack
.011884	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011886	85 22		sta $22				sta 	DLineNumber
.011888	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011889					Function_ONGOTO:
.011889	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.01188c	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01188f	d0 25		bne $0118b6			bne 	_FOGoFail
.011891	c9 00 00	cmp #$0000			cmp 	#0
.011894	f0 20		beq $0118b6			beq 	_FOGoFail 					; we start with index = 1
.011896	48		pha				pha 								; save count on stack
.011897	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.01189a	20 cb 05	jsr $0105cb			jsr 	ExpectToken
.01189d	fa		plx				plx 								; put count in X.
.01189e					_FOGoLoop:
.01189e	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0118a0	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118a3	90 73		bcc $011918			bcc 	FGOFail 					; if not, then we have an error.
.0118a5	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118a8	b0 6e		bcs $011918			bcs 	FGOFail
.0118aa	ca		dex				dex 								; subtract one, if done, call GOTO code
.0118ab	f0 1f		beq $0118cc			beq 	Function_GOTO
.0118ad	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0118af	e6 06		inc $06				inc 	DCodePtr
.0118b1	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; expect a comma
.0118b4	80 e8		bra $01189e			bra 	_FOGoLoop 					; and loop round.
.0118b6					_FOGoFail:
.0118b6	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0118b9	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0118c1	47 6f 74 6f 20 76 61 6c 75 65 00
.0118cc					Function_GOTO:
.0118cc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0118ce	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0118d1	90 45		bcc $011918			bcc 	FGOFail 					; we don't do calculate line numbers.
.0118d3	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118d6	b0 40		bcs $011918			bcs 	FGOFail
.0118d8	38		sec				sec 								; convert to 0-32767
.0118d9	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0118dc	aa		tax				tax
.0118dd	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0118e0	18		clc				clc
.0118e1	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0118e3	a8		tay				tay
.0118e4					_FGOSearch:
.0118e4	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0118e7	f0 18		beq $011901			beq 	_FGOUnknown
.0118e9	8a		txa				txa 								; does it match line number ?
.0118ea	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0118ed	f0 08		beq $0118f7			beq 	_FGOFound 					; yes, then found.
.0118ef	98		tya				tya 								; no follow the link
.0118f0	18		clc				clc
.0118f1	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0118f4	a8		tay				tay
.0118f5	80 ed		bra $0118e4			bra 	_FGOSearch 					; and keep looking
.0118f7					_FGOFound:
.0118f7	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0118f9	98		tya				tya 								; Y + 4 is the code pointer.
.0118fa	18		clc				clc 								; (skipping link and line #)
.0118fb	69 04 00	adc #$0004			adc 	#4
.0118fe	85 06		sta $06				sta 	DCodePtr
.011900	60		rts				rts									; and continue
.011901					_FGOUnknown:
.011901	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011904	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01190c	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011918					FGOFail:
.011918	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>01191b	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011923	20 4e 75 6d 62 65 72 00
.01192b					Function_GOSUB:
.01192b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01192d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01192f	18		clc				clc
.011930	69 02 00	adc #$0002			adc 	#2
.011933	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011935	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011937	95 04		sta $04,x			sta 	$04,x
.011939	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.01193c	95 06		sta $06,x			sta 	$06,x
.01193e	8a		txa				txa 								; advance stack by 6.
.01193f	18		clc				clc
.011940	69 06 00	adc #$0006			adc 	#6
.011943	85 2a		sta $2a				sta 	DStack
.011945	80 85		bra $0118cc			bra 	Function_GOTO 				; and do a GOTO.
.011947					Function_RETURN:
.011947	a6 2a		ldx $2a				ldx 	DStack
.011949	b5 00		lda $00,x			lda 	$00,x
.01194b	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.01194e	d0 11		bne $011961			bne 	_FRetFail
.011950	8a		txa				txa 								; unpick stack.
.011951	38		sec				sec
.011952	e9 06 00	sbc #$0006			sbc 	#6
.011955	85 2a		sta $2a				sta 	DStack
.011957	aa		tax				tax
.011958	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01195a	85 06		sta $06				sta 	DCodePtr
.01195c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01195e	85 22		sta $22				sta 	DLineNumber
.011960	60		rts				rts
.011961					_FRetFail:
.011961	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011964	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01196c	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011979					Function_REPEAT:
.011979	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01197b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01197d	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01197f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011981	95 04		sta $04,x			sta 	$04,x
.011983	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011986	95 06		sta $06,x			sta 	$06,x
.011988	8a		txa				txa 								; advance stack by 6.
.011989	18		clc				clc
.01198a	69 06 00	adc #$0006			adc 	#6
.01198d	85 2a		sta $2a				sta 	DStack
.01198f	60		rts				rts
.011990					Function_UNTIL:
.011990	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011992	b5 00		lda $00,x			lda 	$00,x
.011994	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011997	d0 26		bne $0119bf			bne 	_FUNFail
.011999	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.01199c	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01199f	d0 15		bne $0119b6			bne 	_FUNExit
.0119a1	c9 00 00	cmp #$0000			cmp 	#0
.0119a4	d0 10		bne $0119b6			bne 	_FUNExit
.0119a6	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0119a8	38		sec				sec
.0119a9	e9 06 00	sbc #$0006			sbc 	#6
.0119ac	aa		tax				tax
.0119ad	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119af	85 06		sta $06				sta 	DCodePtr
.0119b1	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119b3	85 22		sta $22				sta 	DLineNumber
.0119b5	60		rts				rts
.0119b6					_FUNExit:
.0119b6	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0119b8	38		sec				sec
.0119b9	e9 06 00	sbc #$0006			sbc 	#6
.0119bc	85 2a		sta $2a				sta 	DStack
.0119be	60		rts				rts
.0119bf					_FUNFail:
.0119bf	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>0119c2	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0119ca	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.0119d7					Function_WHILE:
.0119d7	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0119d9	48		pha				pha 								; save on stack
.0119da	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.0119dd	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0119e0	d0 14		bne $0119f6			bne 	_FWHExecute
.0119e2	c9 00 00	cmp #$0000			cmp 	#0
.0119e5	d0 0f		bne $0119f6			bne 	_FWHExecute
.0119e7	68		pla				pla 								; throw away current instruction
.0119e8	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.0119eb	a2 00 00	ldx #$0000			ldx 	#0
.0119ee	20 cc 16	jsr $0116cc			jsr 	ScanForwardLevel 			; scan forward checking structures
.0119f1	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0119f3	e6 06		inc $06				inc 	DCodePtr
.0119f5	60		rts				rts
.0119f6					_FWHExecute:
.0119f6	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119f8	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0119f9	3a		dec a				dec 	a
.0119fa	3a		dec a				dec 	a
.0119fb	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119fd	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119ff	95 04		sta $04,x			sta 	$04,x
.011a01	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011a04	95 06		sta $06,x			sta 	$06,x
.011a06	8a		txa				txa 								; advance stack by 6.
.011a07	18		clc				clc
.011a08	69 06 00	adc #$0006			adc 	#6
.011a0b	85 2a		sta $2a				sta 	DStack
.011a0d	60		rts				rts
.011a0e					Function_WEND:
.011a0e	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011a10	b5 00		lda $00,x			lda 	$00,x
.011a12	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011a15	d0 11		bne $011a28			bne 	_FWEFail
.011a17	8a		txa				txa 								; unpick stack and always loop back.
.011a18	38		sec				sec 								; we do the check at the top.
.011a19	e9 06 00	sbc #$0006			sbc 	#6
.011a1c	85 2a		sta $2a				sta 	DStack
.011a1e	aa		tax				tax
.011a1f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a21	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011a23	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a25	85 22		sta $22				sta 	DLineNumber
.011a27	60		rts				rts
.011a28					_FWEFail:
.011a28	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011a2b	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011a33	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011a3e					Function_END:
.011a3e	4c c4 1d	jmp $011dc4			jmp 	WarmStart
.011a41					Function_RUN:
.011a41	20 cc 1a	jsr $011acc			jsr 	Function_CLEAR 				; clear all variables.
.011a44	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011a46	18		clc				clc
.011a47	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011a4a	80 0c		bra $011a58			bra 	FRun_NextLineNumber
.011a4c					RUNExecuteTokenBuffer:
.011a4c	64 22		stz $22				stz 	DLineNumber					; zero line number
.011a4e	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011a51	18		clc				clc
.011a52	65 02		adc $02				adc 	DBaseAddress
.011a54	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011a56	80 12		bra $011a6a			bra 	FRun_NextInstruction
.011a58					FRun_NextLineNumber:
.011a58	a8		tay				tay 								; put in Y
.011a59	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011a5c	f0 e0		beq $011a3e			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011a5e	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011a61	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011a63	98		tya				tya 								; get address back
.011a64	18		clc				clc 								; skip over the link/line number
.011a65	69 04 00	adc #$0004			adc 	#4
.011a68	85 06		sta $06				sta 	DCodePtr
.011a6a					FRun_NextInstruction:
.011a6a	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011a6c	20 e2 1c	jsr $011ce2			jsr 	HWCheckBreak 				; break key pressed.
.011a6f	d0 40		bne $011ab1			bne 	_FRun_Break
.011a71	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011a73	f0 32		beq $011aa7			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011a75	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011a78	f0 18		beq $011a92			beq 	_FRun_Colon
.011a7a	a8		tay				tay 								; save in Y
.011a7b	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011a7e	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011a81	d0 15		bne $011a98			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011a83	98		tya				tya 								; get token back
.011a84	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011a87	0a		asl a				asl 	a 							; double it into X
.011a88	aa		tax				tax
.011a89	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011a8b	e6 06		inc $06				inc 	DCodePtr
.011a8d	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011a90	80 d8		bra $011a6a			bra 	FRun_NextInstruction 		; do the following instruction.
.011a92					_FRun_Colon:
.011a92	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011a94	e6 06		inc $06				inc 	DCodePtr
.011a96	80 d2		bra $011a6a			bra 	FRun_NextInstruction 		; do the following instruction.
.011a98					_FRun_TryLET:
.011a98	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011a9a	c9 00 c0	cmp #$c000			cmp 	#$C000
.011a9d	90 05		bcc $011aa4			bcc		_FRunSyntax 				; no, must be syntax.
.011a9f	20 ce 11	jsr $0111ce			jsr 	Function_LET 				; try as a LET.
.011aa2	80 c6		bra $011a6a			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011aa4					_FRunSyntax:
.011aa4	82 14 eb	brl $0105bb			brl 	SyntaxError
.011aa7					_FRun_EndInstruction:
.011aa7	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011aa9	f0 0f		beq $011aba			beq 	_FRun_WarmStart
.011aab	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011aad	1a		inc a				inc 	a 							; go to link for next line
.011aae	1a		inc a				inc 	a
.011aaf	80 a7		bra $011a58			bra 	FRun_NextLineNumber
.011ab1					_FRun_Break:
.011ab1	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011ab4	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011aba					_FRun_WarmStart:
.011aba	82 07 03	brl $011dc4			brl 	WarmStart
.011abd					Function_NEW:
.011abd	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011ac0	18		clc				clc
.011ac1	65 02		adc $02				adc 	DBaseAddress
.011ac3	a8		tay				tay
.011ac4	a9 00 00	lda #$0000			lda 	#$0000
.011ac7	99 00 00	sta $0000,y			sta 	$0000,y
.011aca	80 00		bra $011acc			bra 	Function_Clear
.011acc					Function_CLEAR:
.011acc	20 d8 1a	jsr $011ad8			jsr 	ClearVariablesPointersAndStacks
.011acf	60		rts				rts
.011ad0					Function_STOP:
.011ad0	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011ad3	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011ad8					ClearVariablesPointersAndStacks:
.011ad8	a9 80 00	lda #$0080			lda 	#BASStack
.011adb	85 2a		sta $2a				sta 	DStack
.011add	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011adf	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011ae2	a9 00 00	lda #$0000			lda 	#$0000
.011ae5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ae7	20 13 1b	jsr $011b13			jsr 	FindCodeEnd 				; find where the program ends.
.011aea	a8		tay				tay 								; Y points to it.
.011aeb	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011aee	99 02 00	sta $0002,y			sta 	$0002,y
.011af1	99 04 00	sta $0004,y			sta 	$0004,y
.011af4	98		tya				tya 								; start of working memory up
.011af5	18		clc				clc
.011af6	69 06 00	adc #$0006			adc 	#6
.011af9	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011afc	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011afe	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b01					_FCLoop:
.011b01	a9 00 00	lda #$0000			lda 	#$0000
.011b04	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b06	c8		iny				iny
.011b07	c8		iny				iny
.011b08	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011b0b	d0 f4		bne $011b01			bne 	_FCLoop
.011b0d	64 16		stz $16				stz 	DTempStringPointer
.011b0f	20 5f 06	jsr $01065f			jsr 	StringResetPermanent
.011b12	60		rts				rts
.011b13					FindCodeEnd:
.011b13	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011b16	18		clc				clc
.011b17	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011b19	a8		tay				tay
.011b1a					_FCELoop:
.011b1a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011b1d	f0 08		beq $011b27			beq 	_FCEExit
.011b1f	98		tya				tya 								; add offset
.011b20	18		clc				clc
.011b21	79 00 00	adc $0000,y			adc 	$0000,y
.011b24	a8		tay				tay
.011b25	80 f3		bra $011b1a			bra 	_FCELoop
.011b27					_FCEExit:
.011b27	98		tya				tya 								; return in A
.011b28	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011b29					Function_Dim:
.011b29	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011b2b	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011b2e	f0 3b		beq $011b6b			beq		_FDIMNotArray 				; no, error.
.011b30	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find it.
.011b33	b0 41		bcs $011b76			bcs 	_FDIMExists 				; if it does, that's an error.
.011b35	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011b37	48		pha				pha
.011b38	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011b3a	48		pha				pha
.011b3b					_FDIMSkip:
.011b3b	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011b3d	e6 06		inc $06				inc 	DCodePtr
.011b3f	e6 06		inc $06				inc 	DCodePtr
.011b41	29 00 08	and #$0800			and 	#IDContMask
.011b44	d0 f5		bne $011b3b			bne 	_FDIMSkip
.011b46	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011b49	20 e5 05	jsr $0105e5			jsr 	ExpectRightBracket 			; check the ) following.
.011b4c	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011b4f	d0 3b		bne $011b8c			bne 	_FDIMSize
.011b51	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011b54	f0 36		beq $011b8c			beq 	_FDIMSize
.011b56	7a		ply				ply 								; restore HashTablePtr
.011b57	84 20		sty $20				sty 	DHashTablePtr
.011b59	7a		ply				ply 								; so now A is the high index, Y points to the token
.011b5a	20 32 04	jsr $010432			jsr 	VariableCreate 				; create the variable.
.011b5d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011b5f	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011b62	d0 06		bne $011b6a			bne 	_FDIMExit
.011b64	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011b66	e6 06		inc $06				inc 	DCodePtr
.011b68	80 bf		bra $011b29			bra 	Function_DIM 				; and do another
.011b6a					_FDIMExit:
.011b6a	60		rts				rts
.011b6b					_FDIMNotArray:
.011b6b	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011b6e	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011b76					_FDIMExists:
.011b76	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011b79	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011b81	65 64 69 6d 65 6e 73 69 6f 6e 00
.011b8c					_FDIMSize:
.011b8c	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011b8f	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011b97	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011b9d					Command_POKE:
.011b9d	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011ba0	48		pha				pha	 								; save on stack
.011ba1	5a		phy				phy
.011ba2	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; comma seperator.
.011ba5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011ba8	fa		plx				plx 								; pull address and store in DTemp1
.011ba9	86 0a		stx $0a				stx 	DTemp1+2
.011bab	fa		plx				plx
.011bac	86 08		stx $08				stx 	DTemp1+0
.011bae	e2 20		sep #$20			sep 	#$20 						; byte mode
.011bb0	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011bb2	c2 20		rep #$20			rep 	#$20 						; word mode
.011bb4	60		rts				rts
.011bb5					Command_DOKE:
.011bb5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011bb8	48		pha				pha	 								; save on stack
.011bb9	5a		phy				phy
.011bba	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; comma seperator.
.011bbd	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011bc0	fa		plx				plx 								; pull address and store in DTemp1
.011bc1	86 0a		stx $0a				stx 	DTemp1+2
.011bc3	fa		plx				plx
.011bc4	86 08		stx $08				stx 	DTemp1+0
.011bc6	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011bc8	60		rts				rts
.011bc9					Command_LOKE:
.011bc9	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011bcc	48		pha				pha	 								; save on stack
.011bcd	5a		phy				phy
.011bce	20 ee 05	jsr $0105ee			jsr 	ExpectComma 				; comma seperator.
.011bd1	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011bd4	fa		plx				plx 								; pull address and store in DTemp1
.011bd5	86 0a		stx $0a				stx 	DTemp1+2
.011bd7	fa		plx				plx
.011bd8	86 08		stx $08				stx 	DTemp1+0
.011bda	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011bdc	98		tya				tya
.011bdd	a0 02 00	ldy #$0002			ldy 	#2
.011be0	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011be2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011be3					Function_ASSERT:
.011be3	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011be6	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011be8	05 08		ora $08				ora 	Dtemp1
.011bea	f0 01		beq $011bed			beq 	_FAssFail
.011bec	60		rts				rts
.011bed					_FAssFail:
.011bed	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011bf0	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011bf8	61 69 6c 65 64 00
.011bfe					Function_CLS:
.011bfe	20 5c 1c	jsr $011c5c			jsr 	HWClearScreen
.011c01	60		rts				rts
.011c02					Function_REM:
.011c02	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c04	f0 0f		beq $011c15			beq 	_FRemExit 					; no comment present
.011c06	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011c09	f0 0a		beq $011c15			beq 	_FRemExit 					; no comment present
.011c0b	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011c0e	b0 06		bcs $011c16			bcs 	_FRemSyntax
.011c10	18		clc				clc 								; add to DCodePtr
.011c11	65 06		adc $06				adc 	DCodePtr
.011c13	85 06		sta $06				sta 	DCodePtr
.011c15					_FRemExit:
.011c15	60		rts				rts
.011c16					_FRemSyntax:
.011c16	82 a2 e9	brl $0105bb			brl 	SyntaxError
.011c19					Function_LINK:
.011c19	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011c1c	85 08		sta $08				sta 	DTemp1 						; target address
.011c1e	84 0a		sty $0a				sty 	DTemp1+2
.011c20	7b		tdc				tda 								; work out what the actual address is
.011c21	18		clc				clc
.011c22	69 08 00	adc #$0008			adc 	#DTemp1
.011c25	8f 5a 1c 01	sta $011c5a			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011c29	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011c2b	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011c2e	48		pha				pha
.011c2f	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011c32	aa		tax				tax
.011c33	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011c36	a8		tay				tay
.011c37	68		pla				pla
.011c38	22 59 1c 01	jsl $011c59			jsl 	_FLIExecuteIt
.011c3c	5a		phy				phy 								; save Y
.011c3d	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011c3f	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c42	8a		txa				txa
.011c43	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011c46	68		pla				pla
.011c47	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011c4a	c8		iny				iny 								; point to their high bytes and clear them
.011c4b	c8		iny				iny
.011c4c	a9 00 00	lda #$0000			lda 	#0
.011c4f	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011c52	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011c55	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011c58	60		rts				rts
.011c59					_FLIExecuteIt:
.011c59	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011c5c					HWClearScreen:
.011c5c	48		pha				pha
.011c5d	da		phx				phx
.011c5e	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011c61	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011c64	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011c68	ca		dex				dex
.011c69	10 f6		bpl $011c61			bpl 	_CS0
.011c6b	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011c6e	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011c72	fa		plx				plx
.011c73	68		pla				pla
.011c74	60		rts				rts
.011c75					HWPrintChar:
.011c75	48		pha				pha
.011c76	da		phx				phx
.011c77	5a		phy				phy
.011c78	48		pha				pha 								; cursor position -> X
.011c79	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011c7d	aa		tax				tax
.011c7e	68		pla				pla
.011c7f	c9 ff ff	cmp #$ffff			cmp 	#-1
.011c82	f0 08		beq $011c8c			beq 	_HWPCNoWrite
.011c84	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011c86	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011c8a	c2 20		rep #$20			rep 	#$20
.011c8c					_HWPCNoWrite:
.011c8c	e8		inx				inx 								; bump cursor position.
.011c8d	8a		txa				txa
.011c8e	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011c92	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011c95	d0 2b		bne $011cc2			bne 	_HWNotEnd
.011c97	38		sec				sec 	 							; back up one line
.011c98	e9 40 00	sbc #$0040			sbc 	#sWidth
.011c9b	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011c9f	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011ca2					_HWScrollUp:
.011ca2	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011ca6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011caa	e8		inx				inx
.011cab	e8		inx				inx
.011cac	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011caf	d0 f1		bne $011ca2			bne 	_HWScrollUp
.011cb1	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011cb4					_HWBlank:
.011cb4	a9 20 20	lda #$2020			lda 	#$2020
.011cb7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cbb	e8		inx				inx
.011cbc	e8		inx				inx
.011cbd	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011cc0	d0 f2		bne $011cb4			bne 	_HWBlank
.011cc2					_HWNotEnd:
.011cc2	7a		ply				ply
.011cc3	fa		plx				plx
.011cc4	68		pla				pla
.011cc5	60		rts				rts
.011cc6					HWNewLine:
.011cc6	48		pha				pha
.011cc7	da		phx				phx
.011cc8	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011ccb					HWMoveCursor:
.011ccb	a9 ff ff	lda #$ffff			lda 	#-1
.011cce	20 75 1c	jsr $011c75			jsr 	HWPrintChar
.011cd1	8a		txa				txa
.011cd2	2f 20 80 0f	and $0f8020			and 	HWCursor
.011cd6	d0 f3		bne $011ccb			bne 	HWMoveCursor
.011cd8	fa		plx				plx
.011cd9	68		pla				pla
.011cda	60		rts				rts
.011cdb	48		pha		HWTab:	pha
.011cdc	da		phx				phx
.011cdd	a2 07 00	ldx #$0007			ldx 	#7
.011ce0	80 e9		bra $011ccb			bra 	HWMoveCursor
.011ce2					HWCheckBreak:
.011ce2	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011ce6	60		rts				rts
.011ce7					HWInkey:
.011ce7	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011ceb	60		rts				rts
.011cec					HWInputLine:
.011cec	20 e7 1c	jsr $011ce7			jsr 	HWInkey 					; get a keystroke.
.011cef	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011cf3	f0 f7		beq $011cec			beq 	HWInputLine
.011cf5					_HWILWait:
.011cf5	20 e7 1c	jsr $011ce7			jsr 	HWInkey
.011cf8	c9 00 00	cmp #$0000			cmp		#0
.011cfb	f0 f8		beq $011cf5			beq 	_HWILWait
.011cfd	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d01	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d04	90 2f		bcc $011d35			bcc 	_HWILControl
.011d06	20 75 1c	jsr $011c75			jsr 	HWPrintChar 				; print out.
.011d09	80 e1		bra $011cec			bra 	HWInputLine 				; loop back.
.011d0b					_HWILBackSpace:
.011d0b	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d0f	f0 db		beq $011cec			beq 	HWInputLine
.011d11	aa		tax				tax
.011d12	ca		dex				dex
.011d13	a9 20 00	lda #$0020			lda 	#" "
.011d16	e2 20		sep #$20			sep 	#$20
.011d18	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d1c	c2 20		rep #$20			rep 	#$20
.011d1e	a2 ff ff	ldx #$ffff			ldx 	#-1
.011d21					_HWILMove:
.011d21	8a		txa				txa
.011d22	18		clc				clc
.011d23	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011d27	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011d2a	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d2e	80 bc		bra $011cec			bra 	HWInputLine
.011d30					_HWILClear:
.011d30	20 5c 1c	jsr $011c5c			jsr 	HWClearScreen
.011d33	80 b7		bra $011cec			bra 	HWInputLine
.011d35					_HWILControl:
.011d35	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011d38	f0 60		beq $011d9a			beq 	_HWILTab
.011d3a	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011d3d	f0 cc		beq $011d0b			beq 	_HWILBackSpace
.011d3f	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011d42	c9 17 00	cmp #$0017			cmp 	#23
.011d45	f0 da		beq $011d21			beq 	_HWILMove
.011d47	a2 40 00	ldx #$0040			ldx 	#sWidth
.011d4a	c9 13 00	cmp #$0013			cmp 	#19
.011d4d	f0 d2		beq $011d21			beq 	_HWILMove
.011d4f	a2 ff ff	ldx #$ffff			ldx 	#-1
.011d52	c9 01 00	cmp #$0001			cmp 	#1
.011d55	f0 ca		beq $011d21			beq 	_HWILMove
.011d57	a2 01 00	ldx #$0001			ldx 	#1
.011d5a	c9 04 00	cmp #$0004			cmp 	#4
.011d5d	f0 c2		beq $011d21			beq 	_HWILMove
.011d5f	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011d62	f0 cc		beq $011d30			beq 	_HWILClear
.011d64	c9 0d 00	cmp #$000d			cmp 	#13
.011d67	d0 83		bne $011cec			bne 	HWInputLine
.011d69	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011d6d	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011d70	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011d72	a9 0f 00	lda #$000f			lda 	#$000F
.011d75	85 0a		sta $0a				sta 	DTemp1+2
.011d77	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011d7a					_HWILCopy:
.011d7a	bb		tyx				tyx
.011d7b	b7 08		lda [$08],y			lda 	[DTemp1],y
.011d7d	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011d81	c8		iny				iny
.011d82	c8		iny				iny
.011d83	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011d86	d0 f2		bne $011d7a			bne 	_HWILCopy
.011d88	a9 00 00	lda #$0000			lda 	#0
.011d8b	bb		tyx				tyx
.011d8c	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011d90	20 c6 1c	jsr $011cc6			jsr 	HWNewLine 					; next line.
.011d93	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011d96	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011d99	60		rts				rts
.011d9a					_HWILTab:
.011d9a	20 db 1c	jsr $011cdb			jsr 	HWTab
.011d9d	82 4c ff	brl $011cec			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011da0					SwitchBasicInstance:
.011da0	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011da2	20 5c 1c	jsr $011c5c			jsr 	HWClearScreen 						; clear screen
.011da5	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011da8	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011daa	86 02		stx $02				stx		DBaseAddress
.011dac	84 04		sty $04				sty 	DHighAddress
.011dae	ba		tsx				tsx 										; save the current SP.
.011daf	86 3a		stx $3a				stx 	DStack65816
.011db1	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011db2	48		pha				pha 										; then copy it into B.
.011db3	ab		plb				plb
.011db4	ab		plb				plb
.011db5	20 d8 1a	jsr $011ad8			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011db8	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011dbb	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011dbd	f0 05		beq $011dc4			beq 	WarmStart
.011dbf	3a		dec a				dec 	a 									; decrement zero.
.011dc0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011dc2	80 18		bra $011ddc			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011dc4					WarmStart:
.011dc4	a2 2a 1e	ldx #$1e2a			ldx 	#BasicPrompt & $FFFF
.011dc7	20 27 06	jsr $010627			jsr 	PrintROMMessage
.011dca					NextCommand:
.011dca	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011dcc	9a		txs				txs
.011dcd	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011dcf	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011dd2	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011dd4	d0 52		bne $011e28			bne 	ExitEmulator
.011dd6	20 ec 1c	jsr $011cec			jsr 	HWInputLine 						; read line to YA.
.011dd9	20 f6 06	jsr $0106f6			jsr 	Tokenise 							; tokenise it.
.011ddc					ExecuteTokenBuffer:
.011ddc	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011ddf	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011de1	f0 e7		beq $011dca			beq 	NextCommand 						; nothing.
.011de3	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011de6	90 27		bcc $011e0f			bcc 	_ETBCommand
.011de8	c9 00 c0	cmp #$c000			cmp 	#$C000
.011deb	b0 22		bcs $011e0f			bcs 	_ETBCommand
.011ded	38		sec				sec
.011dee	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011df1	f0 1f		beq $011e12			beq 	_ETBError
.011df3	48		pha				pha
.011df4	20 c0 04	jsr $0104c0			jsr 	LineDelete 							; delete the line, if it exists.
.011df7	20 d8 1a	jsr $011ad8			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011dfa	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011dfd	18		clc				clc
.011dfe	65 02		adc $02				adc 	DBaseAddress
.011e00	a8		tay				tay 										; Y contains the code.
.011e01	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e04	f0 c4		beq $011dca			beq 	NextCommand 						; no, next command.
.011e06	68		pla				pla 										; line number in A, code in Y.
.011e07	20 fb 04	jsr $0104fb			jsr 	LineInsert 							; insert the line
.011e0a	20 d8 1a	jsr $011ad8			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e0d	80 bb		bra $011dca			bra 	NextCommand
.011e0f					_ETBCommand:
.011e0f	4c 4c 1a	jmp $011a4c			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011e12					_ETBError:
.011e12	20 7f 05	jsr $01057f			jsr 	ErrorHandler 						; call error routine
>011e15	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011e1d	61 76 65 20 6c 69 6e 65 20 30 00
.011e28					ExitEmulator:
.011e28	02 00		cop #$00			cop 	#0
.011e2a					BasicPrompt:
>011e2a	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 f6 06	jsr $0106f6			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	f4 b3 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 10 00 01 00 33 3e 22 dd
>024208	71 d4 02 40 28 32 00 00 10 00 02 00 33 3e c4 dc
>024218	03 d0 05 40 28 32 00 00 10 00 03 00 33 3e c4 dc
>024228	7d d1 05 40 28 32 00 00 10 00 04 00 33 3e 34 de
>024238	2c d6 04 40 28 32 00 00 10 00 05 00 33 3e e1 dd
>024248	d8 d1 02 40 28 32 00 00 12 00 06 00 33 3e 2d dd
>024258	a7 db 17 d0 05 40 28 32 00 00 12 00 07 00 33 3e
>024268	12 de 09 db 0d d0 05 40 28 32 00 00 10 00 08 00
>024278	33 3e d0 dc b7 d3 04 40 28 32 00 00 10 00 09 00
>024288	33 3e c1 dc 1b d0 04 40 28 32 00 00 10 00 0a 00
>024298	33 3e 5c dd f4 d3 02 40 28 32 00 00 10 00 0b 00
>0242a8	2d 3e 31 c6 06 22 0b 24 3c 40 00 00 12 00 0c 00
>0242b8	2d 3e 1a cd 0a c0 06 22 0b 24 0f 40 00 00 12 00
>0242c8	0d 00 2d 3e 0f c0 06 22 0b 24 01 10 8a 9c 00 00
>0242d8	14 00 0e 00 2d 3e 2f ce 8c cd 16 c0 06 22 02 10
>0242e8	ca 76 00 00 10 00 0f 00 41 ce df c5 06 22 04 10
>0242f8	5f 8c 00 00 10 00 10 00 ce cc 96 c2 06 22 0b 24
>024308	0e bb 00 00 12 00 11 00 2d 3e 27 cd 05 c0 06 22
>024318	01 10 fb 41 00 00 0e 00 12 00 d1 cd 24 c0 06 22
>024328	86 40 00 00 10 00 13 00 2d 3e 07 c0 06 22 03 10
>024338	d6 9b 00 00 14 00 14 00 2d 3e 2f ce 66 cc 1b c0
>024348	06 22 0b 24 32 6a 00 00 10 00 15 00 09 ce 14 c0
>024358	06 22 02 10 07 62 00 00 0e 00 16 00 08 c0 06 22
>024368	01 10 eb a0 00 00 0e 00 17 00 a6 cd 14 c0 06 22
>024378	93 40 00 00 12 00 18 00 d0 cd ce c5 06 22 0b 24
>024388	02 10 33 a1 00 00 14 00 19 00 2d 3e 33 cd 7e c9
>024398	1e c0 06 22 02 10 83 a7 00 00 10 00 1a 00 3e c6
>0243a8	06 22 0b 24 01 10 a2 5c 00 00 10 00 1b 00 8a cd
>0243b8	ba c0 06 22 0b 24 f9 4b 00 00 10 00 1c 00 12 c0
>0243c8	06 22 0b 24 04 10 41 70 00 00 10 00 1d 00 2d 3e
>0243d8	2b ce 1d c0 06 22 db 4d 00 00 12 00 1e 00 7d cd
>0243e8	f7 c8 0f c0 06 22 01 10 03 8b 00 00 10 00 1f 00
>0243f8	2d 3e fc c4 06 22 03 10 a6 ac 00 00 12 00 20 00
>024408	f9 cc 08 c0 06 22 0b 24 05 10 d2 8b 00 00 10 00
>024418	21 00 80 cd 0a c0 06 22 01 10 74 8a 00 00 12 00
>024428	22 00 2d 3e e0 c5 06 22 0b 24 01 10 65 bb 00 00
>024438	10 00 23 00 64 ce 16 c0 06 22 01 10 fc 4c 00 00
>024448	10 00 24 00 1a c0 06 22 0b 24 02 10 0e 47 00 00
>024458	12 00 25 00 2d 3e fb cc 09 c0 06 22 04 10 df ab
>024468	00 00 10 00 26 00 2d 3e 13 c6 06 22 01 10 e2 b4
>024478	00 00 10 00 27 00 8d cd 09 c2 06 22 0b 24 03 85
>024488	00 00 10 00 28 00 02 cd 67 c2 06 22 0b 24 50 40
>024498	00 00 12 00 29 00 67 ce 3e ce 0e c0 06 22 0b 24
>0244a8	be 40 00 00 10 00 2a 00 2d 3e 83 cd 71 c6 06 22
>0244b8	c3 40 00 00 10 00 2b 00 2d 3e 76 c5 06 22 02 10
>0244c8	f6 69 00 00 0e 00 2c 00 61 ce 02 c0 06 22 a7 a8
>0244d8	00 00 12 00 2d 00 2d 3e 22 c5 06 22 0b 24 01 10
>0244e8	78 b0 00 00 0c 00 2e 00 d7 c5 06 22 83 7d 00 00
>0244f8	12 00 2f 00 2d 3e 01 c0 06 22 0b 24 02 10 cb a5
>024508	00 00 12 00 30 00 a5 cd 51 c0 06 22 0b 24 01 10
>024518	49 77 00 00 0e 00 31 00 f7 c4 06 22 0b 24 38 b1
>024528	00 00 10 00 32 00 b8 cd 21 c0 06 22 01 10 b0 4d
>024538	00 00 12 00 33 00 2d 3e d4 cc 1c c0 06 22 03 10
>024548	c4 6f 00 00 0c 00 34 00 0b c6 06 22 28 40 00 00
>024558	14 00 35 00 2d 3e 47 cd 90 ca 18 c0 06 22 04 10
>024568	5d 7c 00 00 10 00 36 00 2d 3e ee cc 09 c0 06 22
>024578	8e 40 00 00 10 00 37 00 2d 3e 16 c0 06 22 05 10
>024588	27 84 00 00 0c 00 38 00 14 c0 06 22 6f 8e 00 00
>024598	10 00 39 00 86 c5 06 22 0b 24 05 10 8a 47 00 00
>0245a8	14 00 3a 00 5f cd 80 cc 0c c0 06 22 0b 24 03 10
>0245b8	24 97 00 00 12 00 3b 00 2d 3e d4 cc 20 c9 1f c0
>0245c8	06 22 08 40 00 00 0e 00 3c 00 e5 c5 06 22 04 10
>0245d8	ba a6 00 00 14 00 3d 00 5d ce 10 cd 0b c0 06 22
>0245e8	0b 24 05 10 d4 54 00 00 10 00 3e 00 2d 3e 15 c0
>0245f8	06 22 0b 24 b4 40 00 00 12 00 3f 00 1a cd 61 cb
>024608	22 c0 06 22 03 10 a3 ae 00 00 0e 00 40 00 d4 cc
>024618	2a c4 06 22 a8 40 00 00 10 00 41 00 2d 3e 24 cd
>024628	03 c0 06 22 76 40 00 00 12 00 42 00 2d 3e d7 cc
>024638	f4 c0 06 22 05 10 e6 7a 00 00 10 00 43 00 c2 cc
>024648	69 c5 06 22 0b 24 38 5c 00 00 10 00 44 00 23 c5
>024658	06 22 0b 24 05 10 11 5d 00 00 12 00 45 00 2d 3e
>024668	5a cd 25 c1 06 22 0b 24 63 52 00 00 14 00 46 00
>024678	2d 3e 0c ce fc cc 10 c0 06 22 0b 24 2d 40 00 00
>024688	36 00 47 00 22 dd 71 d4 00 40 28 32 06 22 0b 24
>024698	03 10 b0 a2 26 32 22 dd 71 d4 01 40 28 32 06 22
>0246a8	82 a4 26 32 22 dd 71 d4 02 40 28 32 06 22 0b 24
>0246b8	02 10 74 99 00 00 66 00 48 00 c4 dc 03 d0 00 40
>0246c8	28 32 06 22 0b 24 04 10 dd 8f 26 32 c4 dc 03 d0
>0246d8	01 40 28 32 06 22 05 10 f2 a9 26 32 c4 dc 03 d0
>0246e8	02 40 28 32 06 22 0b 24 69 40 26 32 c4 dc 03 d0
>0246f8	03 40 28 32 06 22 0b 24 77 40 26 32 c4 dc 03 d0
>024708	04 40 28 32 06 22 05 10 39 6e 26 32 c4 dc 03 d0
>024718	05 40 28 32 06 22 0b 24 bf 40 00 00 64 00 49 00
>024728	c4 dc 7d d1 00 40 28 32 06 22 03 10 03 92 26 32
>024738	c4 dc 7d d1 01 40 28 32 06 22 0b 24 03 10 5d be
>024748	26 32 c4 dc 7d d1 02 40 28 32 06 22 0b 24 01 10
>024758	a8 8f 26 32 c4 dc 7d d1 03 40 28 32 06 22 b4 40
>024768	26 32 c4 dc 7d d1 04 40 28 32 06 22 38 86 26 32
>024778	c4 dc 7d d1 05 40 28 32 06 22 04 10 a7 a4 00 00
>024788	54 00 4a 00 34 de 2c d6 00 40 28 32 06 22 0b 24
>024798	fa b4 26 32 34 de 2c d6 01 40 28 32 06 22 01 10
>0247a8	7a 60 26 32 34 de 2c d6 02 40 28 32 06 22 05 10
>0247b8	02 91 26 32 34 de 2c d6 03 40 28 32 06 22 03 10
>0247c8	99 48 26 32 34 de 2c d6 04 40 28 32 06 22 05 10
>0247d8	b8 7d 00 00 3a 00 4b 00 e1 dd d8 d1 00 40 28 32
>0247e8	06 22 0b 24 05 10 98 75 26 32 e1 dd d8 d1 01 40
>0247f8	28 32 06 22 0b 24 04 10 7c 79 26 32 e1 dd d8 d1
>024808	02 40 28 32 06 22 0b 24 04 10 d9 43 00 00 70 00
>024818	4c 00 2d dd a7 db 17 d0 00 40 28 32 06 22 03 10
>024828	be 81 26 32 2d dd a7 db 17 d0 01 40 28 32 06 22
>024838	60 40 26 32 2d dd a7 db 17 d0 02 40 28 32 06 22
>024848	0b 24 05 10 87 71 26 32 2d dd a7 db 17 d0 03 40
>024858	28 32 06 22 02 10 3b bc 26 32 2d dd a7 db 17 d0
>024868	04 40 28 32 06 22 01 10 58 5d 26 32 2d dd a7 db
>024878	17 d0 05 40 28 32 06 22 0b 24 c4 55 00 00 76 00
>024888	4d 00 12 de 09 db 0d d0 00 40 28 32 06 22 03 10
>024898	4f 59 26 32 12 de 09 db 0d d0 01 40 28 32 06 22
>0248a8	0b 24 03 10 0a 9f 26 32 12 de 09 db 0d d0 02 40
>0248b8	28 32 06 22 0b 24 4f 40 26 32 12 de 09 db 0d d0
>0248c8	03 40 28 32 06 22 0b 24 03 10 e0 98 26 32 12 de
>0248d8	09 db 0d d0 04 40 28 32 06 22 0b 24 02 10 8a 7f
>0248e8	26 32 12 de 09 db 0d d0 05 40 28 32 06 22 0b 24
>0248f8	d7 9e 00 00 56 00 4e 00 d0 dc b7 d3 00 40 28 32
>024908	06 22 02 10 34 b0 26 32 d0 dc b7 d3 01 40 28 32
>024918	06 22 0b 24 f3 a1 26 32 d0 dc b7 d3 02 40 28 32
>024928	06 22 0b 24 03 10 7a 73 26 32 d0 dc b7 d3 03 40
>024938	28 32 06 22 05 10 29 45 26 32 d0 dc b7 d3 04 40
>024948	28 32 06 22 02 10 14 85 00 00 54 00 4f 00 c1 dc
>024958	1b d0 00 40 28 32 06 22 06 10 51 43 26 32 c1 dc
>024968	1b d0 01 40 28 32 06 22 b5 40 26 32 c1 dc 1b d0
>024978	02 40 28 32 06 22 05 10 79 62 26 32 c1 dc 1b d0
>024988	03 40 28 32 06 22 0b 24 4e 40 26 32 c1 dc 1b d0
>024998	04 40 28 32 06 22 0b 24 04 10 da aa 00 00 34 00
>0249a8	50 00 5c dd f4 d3 00 40 28 32 06 22 0b 24 42 40
>0249b8	26 32 5c dd f4 d3 01 40 28 32 06 22 01 10 72 44
>0249c8	26 32 5c dd f4 d3 02 40 28 32 06 22 0b 24 8c 7e
>0249d8	00 00 1a 00 51 00 2e 3e 27 32 f7 c4 0c 26 0b 24
>0249e8	b4 40 28 32 06 22 9f 10 60 5b 00 00 16 00 52 00
>0249f8	2e 3e 27 32 28 40 0c 26 a8 40 28 32 06 22 40 5a
>024a08	00 00 22 00 53 00 2e 3e 27 32 2f ce 66 cc 1b c0
>024a18	0d 26 c4 dc 7d d1 03 40 28 32 28 32 06 22 0b 24
>024a28	3c 40 00 00 20 00 54 00 2e 3e 27 32 0c ce fc cc
>024a38	10 c0 03 20 03 10 a6 ac 28 32 06 22 0b 24 03 10
>024a48	8b ac 00 00 1a 00 55 00 2e 3e 27 32 31 c6 0a 24
>024a58	0b 24 3c 40 28 32 06 22 0b 24 78 40 00 00 1c 00
>024a68	56 00 2e 3e 27 32 31 c6 0c 26 01 10 e2 b4 28 32
>024a78	06 22 0b 24 72 10 f8 a4 00 00 20 00 57 00 2e 3e
>024a88	27 32 22 dd 71 d4 02 40 28 32 02 20 0b 24 be 40
>024a98	28 32 06 22 0b 24 32 40 00 00 1a 00 58 00 2e 3e
>024aa8	27 32 0b 24 be 40 0c 26 0b 24 3c 40 28 32 06 22
>024ab8	88 6c 00 00 1c 00 59 00 2e 3e 27 32 1a cd 0a c0
>024ac8	02 20 01 10 b0 4d 28 32 06 22 0b 24 0f 40 00 00
>024ad8	18 00 5a 00 2e 3e 27 32 28 40 0b 24 0b 24 63 52
>024ae8	28 32 06 22 8b 52 00 00 1c 00 5b 00 2e 3e 27 32
>024af8	0b 24 b4 40 02 20 a5 cd 51 c0 28 32 06 22 0b 24
>024b08	01 40 00 00 22 00 5c 00 2e 3e 27 32 5d ce 10 cd
>024b18	0b c0 03 20 d4 cc 20 c9 1f c0 28 32 06 22 0b 24
>024b28	05 10 dc 54 00 00 1c 00 5d 00 2e 3e 27 32 0b 24
>024b38	32 6a 02 20 0b 24 32 6a 28 32 06 22 0b 24 32 6a
>024b48	00 00 1e 00 5e 00 2e 3e 27 32 0b 24 50 40 0b 24
>024b58	03 10 c4 6f 28 32 06 22 0b 24 03 10 14 70 00 00
>024b68	18 00 5f 00 2e 3e 27 32 1a cd 0a c0 0d 26 12 c0
>024b78	28 32 06 22 00 40 00 00 22 00 60 00 2e 3e 27 32
>024b88	03 10 c4 6f 03 20 c4 dc 03 d0 02 40 28 32 28 32
>024b98	06 22 0b 24 03 10 ad 6f 00 00 1a 00 61 00 2e 3e
>024ba8	27 32 16 c0 01 20 0b 24 b4 40 28 32 06 22 05 10
>024bb8	04 84 00 00 1a 00 62 00 2e 3e 27 32 04 10 5f 8c
>024bc8	0b 24 c3 40 28 32 06 22 04 10 9c 8b 00 00 1c 00
>024bd8	63 00 2e 3e 27 32 0b 24 4e 40 0c 26 76 c5 28 32
>024be8	06 22 0b 24 b5 10 f4 88 00 00 1a 00 64 00 2e 3e
>024bf8	27 32 c3 40 02 20 01 10 03 8b 28 32 06 22 01 10
>024c08	c3 8b 00 00 1c 00 65 00 2e 3e 27 32 12 c0 01 20
>024c18	0b 24 50 40 28 32 06 22 0b 24 04 10 50 70 00 00
>024c28	1a 00 66 00 2e 3e 27 32 1a cd 0a c0 0b 24 23 c5
>024c38	28 32 06 22 05 10 02 5d 00 00 1c 00 67 00 2e 3e
>024c48	27 32 0b 24 2d 40 01 20 0b 24 0f 40 28 32 06 22
>024c58	0b 24 2f 40 00 00 1c 00 68 00 2e 3e 27 32 24 cd
>024c68	03 c0 03 20 02 10 07 62 28 32 06 22 02 10 71 62
>024c78	00 00 22 00 69 00 2e 3e 27 32 0c ce fc cc 10 c0
>024c88	0d 26 12 de 09 db 0d d0 02 40 28 32 28 32 06 22
>024c98	00 40 00 00 1c 00 6a 00 2e 3e 27 32 1a cd 0a c0
>024ca8	0a 24 b8 cd 21 c0 28 32 06 22 01 10 a1 4d 00 00
>024cb8	1e 00 6b 00 2e 3e 27 32 0b 24 3c 40 0d 26 22 dd
>024cc8	71 d4 00 40 28 32 28 32 06 22 00 40 00 00 22 00
>024cd8	6c 00 2e 3e 27 32 12 de 09 db 0d d0 01 40 28 32
>024ce8	0c 26 86 40 28 32 06 22 0b 24 f5 11 3c 7f 00 00
>024cf8	1c 00 6d 00 2e 3e 27 32 0b 24 f9 4b 0c 26 0b 24
>024d08	2d 40 28 32 06 22 04 10 c5 5a 00 00 20 00 6e 00
>024d18	2e 3e 27 32 0b 24 01 10 a2 5c 0b 24 0b 24 f9 4b
>024d28	28 32 06 22 0b 24 01 10 a9 50 00 00 16 00 6f 00
>024d38	2e 3e 27 32 a8 40 01 20 28 40 28 32 06 22 28 40
>024d48	00 00 1c 00 70 00 2e 3e 27 32 d4 cc 20 c9 1f c0
>024d58	0b 24 1a cd 0a c0 28 32 06 22 17 40 00 00 1c 00
>024d68	71 00 2e 3e 27 32 0b 24 be 40 02 20 04 10 5f 8c
>024d78	28 32 06 22 0b 24 a1 40 00 00 1a 00 72 00 2e 3e
>024d88	27 32 02 cd 67 c2 0b 24 5a cd 25 c1 28 32 06 22
>024d98	13 52 00 00 1c 00 73 00 2e 3e 27 32 8d cd 09 c2
>024da8	02 20 1a cd 0a c0 28 32 06 22 0b 24 03 40 00 00
>024db8	1c 00 74 00 2e 3e 27 32 0b 24 0f 40 02 20 0b 24
>024dc8	03 85 28 32 06 22 0b 24 03 40 00 00 1a 00 75 00
>024dd8	2e 3e 27 32 76 40 01 20 0b 24 02 10 33 a1 28 32
>024de8	06 22 44 40 00 00 1e 00 76 00 2e 3e 27 32 7d cd
>024df8	f7 c8 0f c0 02 20 0b 24 b4 40 28 32 06 22 0b 24
>024e08	b1 40 00 00 1a 00 77 00 2e 3e 27 32 0b 24 50 40
>024e18	0c 26 12 c0 28 32 06 22 5e 11 50 54 00 00 1a 00
>024e28	78 00 2e 3e 27 32 a6 cd 14 c0 0d 26 80 cd 0a c0
>024e38	28 32 06 22 00 40 00 00 1a 00 79 00 2e 3e 27 32
>024e48	93 40 02 20 ce cc 96 c2 28 32 06 22 0b 24 0d bb
>024e58	00 00 1c 00 7a 00 2e 3e 27 32 03 10 d6 9b 02 20
>024e68	1a cd 0a c0 28 32 06 22 0b 24 09 40 00 00 1c 00
>024e78	7b 00 2e 3e 27 32 ee cc 09 c0 0a 24 80 cd 0a c0
>024e88	28 32 06 22 01 10 02 8b 00 00 1a 00 7c 00 2e 3e
>024e98	27 32 0b 24 32 6a 02 20 8e 40 28 32 06 22 0b 24
>024ea8	32 6a 00 00 1e 00 7d 00 2e 3e 27 32 c1 dc 1b d0
>024eb8	01 40 28 32 0d 26 04 10 5d 7c 28 32 06 22 00 40
>024ec8	00 00 1c 00 7e 00 2e 3e 27 32 0b 24 50 40 01 20
>024ed8	fb cc 09 c0 28 32 06 22 04 10 90 ab 00 00 1e 00
>024ee8	7f 00 2e 3e 27 32 67 ce 3e ce 0e c0 0a 24 fb cc
>024ef8	09 c0 28 32 06 22 04 10 21 ab 00 00 18 00 80 00
>024f08	2e 3e 27 32 ee cc 09 c0 0d 26 6f 8e 28 32 06 22
>024f18	00 40 00 00 1e 00 81 00 2e 3e 27 32 0b 24 04 10
>024f28	7c 79 01 20 31 c6 28 32 06 22 0b 24 04 10 7c 79
>024f38	00 00 1e 00 82 00 2e 3e 27 32 0b 24 01 10 65 bb
>024f48	0c 26 08 40 28 32 06 22 0b 24 0f 10 28 9b 00 00
>024f58	1e 00 83 00 2e 3e 27 32 0b 24 f9 4b 0a 24 d4 cc
>024f68	20 c9 1f c0 28 32 06 22 0b 24 f1 4b 00 00 1e 00
>024f78	84 00 2e 3e 27 32 c4 dc 03 d0 05 40 28 32 03 20
>024f88	0b c6 28 32 06 22 0b 24 97 40 00 00 1c 00 85 00
>024f98	2e 3e 27 32 2b ce 1d c0 0d 26 0b 24 50 40 28 32
>024fa8	06 22 0b 24 2c 40 00 00 18 00 86 00 2e 3e 27 32
>024fb8	76 40 02 20 08 c0 28 32 06 22 01 10 ff a0 00 00
>024fc8	20 00 87 00 2e 3e 27 32 0b 24 02 10 cb a5 01 20
>024fd8	0b 24 50 40 28 32 06 22 0b 24 02 10 d0 a5 00 00
>024fe8	1a 00 88 00 2e 3e 27 32 0b 24 3c 40 0b 24 23 c5
>024ff8	28 32 06 22 05 10 d5 5c 00 00 22 00 89 00 2e 3e
>025008	27 32 01 10 fb 41 0c 26 5c dd f4 d3 00 40 28 32
>025018	28 32 06 22 0b 24 43 10 b6 42 00 00 18 00 8a 00
>025028	2e 3e 27 32 d1 cd 24 c0 03 20 a7 a8 28 32 06 22
>025038	21 a8 00 00 1c 00 8b 00 2e 3e 27 32 04 10 5d 7c
>025048	01 20 02 cd 67 c2 28 32 06 22 04 10 10 7c 00 00
>025058	18 00 8c 00 2e 3e 27 32 3e c6 01 20 ee cc 09 c0
>025068	28 32 06 22 0e 40 00 00 1e 00 8d 00 2e 3e 27 32
>025078	1a cd 0a c0 02 20 33 cd 7e c9 1e c0 28 32 06 22
>025088	0b 24 0d 40 00 00 1a 00 8e 00 2e 3e 27 32 15 c0
>025098	0c 26 16 c0 28 32 06 22 0b 24 e3 13 6c ab 00 00
>0250a8	1c 00 8f 00 2e 3e 27 32 15 c0 0c 26 d4 cc 20 c9
>0250b8	1f c0 28 32 06 22 0b 24 a0 45 00 00 1a 00 90 00
>0250c8	2e 3e 27 32 e5 c5 02 20 ee cc 09 c0 28 32 06 22
>0250d8	04 10 be a6 00 00 1e 00 91 00 2e 3e 27 32 31 c6
>0250e8	0a 24 34 de 2c d6 03 40 28 32 28 32 06 22 03 10
>0250f8	5d 48 00 00 1a 00 92 00 2e 3e 27 32 d4 cc 2a c4
>025108	01 20 01 10 eb a0 28 32 06 22 a8 40 00 00 1c 00
>025118	93 00 2e 3e 27 32 0b 24 01 10 a8 8f 03 20 15 c0
>025128	28 32 06 22 01 10 14 8f 00 00 1c 00 94 00 2e 3e
>025138	27 32 0b 24 3c 40 01 20 05 10 27 84 28 32 06 22
>025148	05 10 04 84 00 00 1c 00 95 00 2e 3e 27 32 a5 cd
>025158	51 c0 0c 26 a8 40 28 32 06 22 0b 24 f0 10 e8 87
>025168	00 00 22 00 96 00 2e 3e 27 32 67 ce 3e ce 0e c0
>025178	01 20 0b 24 01 10 78 b0 28 32 06 22 0b 24 01 10
>025188	00 b1 00 00 1a 00 97 00 2e 3e 27 32 61 ce 02 c0
>025198	02 20 83 cd 71 c6 28 32 06 22 e7 a8 00 00 16 00
>0251a8	98 00 2e 3e 27 32 31 c6 0a 24 a7 a8 28 32 06 22
>0251b8	6b a8 00 00 1c 00 99 00 2e 3e 27 32 0b 24 03 10
>0251c8	7a 73 01 20 d4 cc 2a c4 28 32 06 22 80 40 00 00
>0251d8	20 00 9a 00 2e 3e 27 32 83 cd 71 c6 0b 24 47 cd
>0251e8	90 ca 18 c0 28 32 06 22 0b 24 04 10 9a 7b 00 00
>0251f8	20 00 9b 00 2e 3e 27 32 0b 24 05 10 11 5d 0b 24
>025208	0b 24 0f 40 28 32 06 22 0b 24 05 10 02 5d 00 00
>025218	1a 00 9c 00 2e 3e 27 32 db 4d 0c 26 2b ce 1d c0
>025228	28 32 06 22 7f 11 59 b9 00 00 1e 00 9d 00 2e 3e
>025238	27 32 02 cd 67 c2 0b 24 03 10 be 81 28 32 06 22
>025248	0b 24 03 10 0e 82 00 00 18 00 9e 00 2e 3e 27 32
>025258	8e 40 0b 24 23 c5 28 32 06 22 05 10 9f 5d 00 00
>025268	1c 00 9f 00 2e 3e 27 32 0b 24 42 40 0a 24 0b 24
>025278	fa b4 28 32 06 22 0b 24 3c b5 00 00 1e 00 a0 00
>025288	2e 3e 27 32 86 40 0a 24 0b 24 02 10 0e 47 28 32
>025298	06 22 0b 24 02 10 88 46 00 00 22 00 a1 00 2e 3e
>0252a8	27 32 34 de 2c d6 03 40 28 32 0c 26 02 cd 67 c2
>0252b8	28 32 06 22 0b 24 f5 10 d0 6f 00 00 1c 00 a2 00
>0252c8	2e 3e 27 32 5a cd 25 c1 02 20 0b 24 42 40 28 32
>0252d8	06 22 0b 24 41 40 00 00 1e 00 a3 00 2e 3e 27 32
>0252e8	a7 a8 03 20 c4 dc 03 d0 02 40 28 32 28 32 06 22
>0252f8	0b 24 d0 a8 00 00 1c 00 a4 00 2e 3e 27 32 1a cd
>025308	0a c0 0b 24 a6 cd 14 c0 28 32 06 22 0b 24 a2 40
>025318	00 00 18 00 a5 00 2e 3e 27 32 28 40 01 20 41 ce
>025328	df c5 28 32 06 22 08 40 00 00 1a 00 a6 00 2e 3e
>025338	27 32 01 10 7a 60 03 20 08 40 28 32 06 22 01 10
>025348	72 60 00 00 1e 00 a7 00 2e 3e 27 32 0b 24 05 10
>025358	11 5d 03 20 0b 24 b4 40 28 32 06 22 05 10 a3 5d
>025368	00 00 18 00 a8 00 2e 3e 27 32 0b 24 3c 40 0d 26
>025378	a7 a8 28 32 06 22 00 40 00 00 1a 00 a9 00 2e 3e
>025388	27 32 03 10 a6 ac 0d 26 31 c6 28 32 06 22 0b 24
>025398	35 48 00 00 1e 00 aa 00 2e 3e 27 32 5c dd f4 d3
>0253a8	00 40 28 32 0c 26 0b 24 0f 40 28 32 06 22 de 43
>0253b8	00 00 1e 00 ab 00 2e 3e 27 32 83 cd 71 c6 0c 26
>0253c8	1a cd 61 cb 22 c0 28 32 06 22 f1 12 29 86 00 00
>0253d8	1e 00 ac 00 2e 3e 27 32 0b 24 05 10 d2 8b 0b 24
>0253e8	a8 40 28 32 06 22 0b 24 05 10 7a 8c 00 00 18 00
>0253f8	ad 00 2e 3e 27 32 c3 40 01 20 01 10 fc 4c 28 32
>025408	06 22 c0 40 00 00 20 00 ae 00 2e 3e 27 32 5f cd
>025418	80 cc 0c c0 0a 24 ee cc 09 c0 28 32 06 22 0b 24
>025428	03 10 96 96 00 00 1c 00 af 00 2e 3e 27 32 0f c0
>025438	03 20 ee cc 09 c0 28 32 06 22 0b 24 01 10 08 9c
>025448	00 00 1e 00 b0 00 2e 3e 27 32 0b 24 3c 40 03 20
>025458	b8 cd 21 c0 28 32 06 22 0b 24 01 10 8c 4d 00 00
>025468	1e 00 b1 00 2e 3e 27 32 f9 cc 08 c0 02 20 d1 cd
>025478	24 c0 28 32 06 22 0b 24 05 10 52 8b 00 00 1a 00
>025488	b2 00 2e 3e 27 32 0b 24 b4 40 0a 24 08 40 28 32
>025498	06 22 0b 24 ac 40 00 00 1e 00 b3 00 2e 3e 27 32
>0254a8	a8 40 0c 26 0b 24 05 10 98 75 28 32 06 22 0b 24
>0254b8	8e 13 c0 6b 00 00 20 00 b4 00 2e 3e 27 32 d0 cd
>0254c8	ce c5 02 20 d4 cc 20 c9 1f c0 28 32 06 22 0b 24
>0254d8	02 10 33 a1 00 00 18 00 b5 00 2e 3e 27 32 05 10
>0254e8	e6 7a 0d 26 0b c6 28 32 06 22 78 51 00 00 1e 00
>0254f8	b6 00 2e 3e 27 32 02 10 83 a7 0a 24 d4 cc 20 c9
>025508	1f c0 28 32 06 22 02 10 8b a7 00 00 1a 00 b7 00
>025518	2e 3e 27 32 15 c0 03 20 83 cd 71 c6 28 32 06 22
>025528	0b 24 71 40 00 00 22 00 b8 00 2e 3e 27 32 0b 24
>025538	04 10 41 70 02 20 c4 dc 03 d0 03 40 28 32 28 32
>025548	06 22 0b 24 41 40 00 00 22 00 b9 00 2e 3e 27 32
>025558	c4 dc 7d d1 03 40 28 32 02 20 2f ce 8c cd 16 c0
>025568	28 32 06 22 02 10 fe 76 00 00 1e 00 ba 00 2e 3e
>025578	27 32 0b c6 02 20 0b 24 01 10 65 bb 28 32 06 22
>025588	0b 24 01 10 45 bb 00 00 1a 00 bb 00 2e 3e 27 32
>025598	03 10 a6 ac 02 20 c3 40 28 32 06 22 03 10 e7 ac
>0255a8	00 00 1a 00 bc 00 2e 3e 27 32 76 40 02 20 04 10
>0255b8	df ab 28 32 06 22 04 10 ff ab 00 00 1e 00 bd 00
>0255c8	2e 3e 27 32 0b 24 02 10 8a 7f 0b 24 28 40 28 32
>0255d8	06 22 0b 24 02 10 b2 7f 00 00 1a 00 be 00 2e 3e
>0255e8	27 32 13 c6 0b 24 d4 cc 2a c4 28 32 06 22 01 10
>0255f8	3a b4 00 00 1a 00 bf 00 2e 3e 27 32 c2 cc 69 c5
>025608	02 20 31 c6 28 32 06 22 0b 24 34 40 00 00 1a 00
>025618	c0 00 2e 3e 27 32 0b 24 0e bb 02 20 0b c6 28 32
>025628	06 22 0b 24 06 bb 00 00 20 00 c1 00 2e 3e 27 32
>025638	0b 24 05 10 11 5d 0a 24 a6 cd 14 c0 28 32 06 22
>025648	0b 24 05 10 7e 5c 00 00 22 00 c2 00 2e 3e 27 32
>025658	67 ce 3e ce 0e c0 03 20 22 dd 71 d4 01 40 28 32
>025668	28 32 06 22 0b 24 40 a4 00 00 22 00 c3 00 2e 3e
>025678	27 32 0c ce fc cc 10 c0 0a 24 0b 24 05 10 11 5d
>025688	28 32 06 22 0b 24 05 10 3e 5d 00 00 1e 00 c4 00
>025698	2e 3e 27 32 0c ce fc cc 10 c0 0c 26 0c ce fc cc
>0256a8	10 c0 28 32 06 22 e9 47 00 00 20 00 c5 00 2e 3e
>0256b8	27 32 d0 dc b7 d3 00 40 28 32 0b 24 83 cd 71 c6
>0256c8	28 32 06 22 02 10 71 af 00 00 1e 00 c6 00 2e 3e
>0256d8	27 32 01 10 e2 b4 0d 26 67 ce 3e ce 0e c0 28 32
>0256e8	06 22 0b 24 49 41 00 00 1c 00 c7 00 2e 3e 27 32
>0256f8	0b 24 f9 4b 01 20 0b 24 fa b4 28 32 06 22 0b 24
>025708	fa bf 00 00 18 00 c8 00 2e 3e 27 32 0b 24 b4 40
>025718	0d 26 d7 c5 28 32 06 22 00 40 00 00 1c 00 c9 00
>025728	2e 3e 27 32 0c ce fc cc 10 c0 0d 26 80 cd 0a c0
>025738	28 32 06 22 00 40 00 00 1a 00 ca 00 2e 3e 27 32
>025748	02 cd 67 c2 0c 26 93 40 28 32 06 22 0b 24 f0 6d
>025758	00 00 1c 00 cb 00 2e 3e 27 32 04 10 5d 7c 0d 26
>025768	0b 24 b4 40 28 32 06 22 0b 24 2e 43 00 00 1a 00
>025778	cc 00 2e 3e 27 32 02 10 07 62 03 20 08 40 28 32
>025788	06 22 02 10 0f 62 00 00 18 00 cd 00 2e 3e 27 32
>025798	15 c0 0c 26 86 40 28 32 06 22 0b 24 38 9e 00 00
>0257a8	1e 00 ce 00 2e 3e 27 32 0b 24 50 40 0b 24 02 10
>0257b8	83 a7 28 32 06 22 0b 24 02 10 d3 a7 00 00 1c 00
>0257c8	cf 00 2e 3e 27 32 05 10 e6 7a 02 20 0b 24 4e 40
>0257d8	28 32 06 22 0b 24 0a 40 00 00 1a 00 d0 00 2e 3e
>0257e8	27 32 0b 24 2d 40 0d 26 0b 24 38 b1 28 32 06 22
>0257f8	00 40 00 00 1a 00 d1 00 2e 3e 27 32 31 c6 0b 24
>025808	2f ce 66 cc 1b c0 28 32 06 22 f6 69 00 00 20 00
>025818	d2 00 2e 3e 27 32 c4 dc 03 d0 02 40 28 32 0a 24
>025828	0f c0 28 32 06 22 0b 24 01 10 f3 9c 00 00 18 00
>025838	d3 00 2e 3e 27 32 1a cd 0a c0 0d 26 07 c0 28 32
>025848	06 22 00 40 00 00 20 00 d4 00 2e 3e 27 32 83 cd
>025858	71 c6 03 20 0b 24 01 10 65 bb 28 32 06 22 0b 24
>025868	01 10 a8 bb 00 00 1c 00 d5 00 2e 3e 27 32 0b 24
>025878	01 10 a2 5c 0d 26 08 40 28 32 06 22 0b 24 94 53
>025888	00 00 1e 00 d6 00 2e 3e 27 32 a8 40 0a 24 12 de
>025898	09 db 0d d0 02 40 28 32 28 32 06 22 59 40 00 00
>0258a8	1c 00 d7 00 2e 3e 27 32 02 10 07 62 0c 26 31 c6
>0258b8	28 32 06 22 0b 24 87 10 a4 b9 00 00 16 00 d8 00
>0258c8	2e 3e 27 32 14 c0 03 20 28 40 28 32 06 22 47 8e
>0258d8	00 00 20 00 d9 00 2e 3e 27 32 0b 24 02 10 74 99
>0258e8	0a 24 1a cd 0a c0 28 32 06 22 0b 24 02 10 83 99
>0258f8	00 00 22 00 da 00 2e 3e 27 32 c4 dc 03 d0 02 40
>025908	28 32 03 20 0b 24 05 10 d2 8b 28 32 06 22 05 10
>025918	b9 8b 00 00 1e 00 db 00 2e 3e 27 32 83 cd 71 c6
>025928	02 20 67 ce 3e ce 0e c0 28 32 06 22 0b 24 3d 40
>025938	00 00 1a 00 dc 00 2e 3e 27 32 1a cd 0a c0 0d 26
>025948	04 10 ba a6 28 32 06 22 00 40 00 00 1a 00 dd 00
>025958	2e 3e 27 32 16 c0 0b 24 0b 24 3c 40 28 32 06 22
>025968	05 10 63 84 00 00 18 00 de 00 2e 3e 27 32 02 10
>025978	07 62 01 20 8e 40 28 32 06 22 06 40 00 00 22 00
>025988	df 00 2e 3e 27 32 0b 24 50 40 03 20 d0 dc b7 d3
>025998	00 40 28 32 28 32 06 22 0b 24 02 10 7c b0 00 00
>0259a8	1a 00 e0 00 2e 3e 27 32 0b 24 2d 40 03 20 a8 40
>0259b8	28 32 06 22 0b 24 85 40 00 00 1c 00 e1 00 2e 3e
>0259c8	27 32 0b 24 b4 40 0a 24 0b 24 be 40 28 32 06 22
>0259d8	0b 24 72 41 00 00 1e 00 e2 00 2e 3e 27 32 0b 24
>0259e8	bf 40 0c 26 02 10 07 62 28 32 06 22 0b 24 b0 11
>0259f8	39 a3 00 00 20 00 e3 00 2e 3e 27 32 1a cd 61 cb
>025a08	22 c0 0c 26 1a cd 0a c0 28 32 06 22 0b 24 39 10
>025a18	8d bb 00 00 1c 00 e4 00 2e 3e 27 32 83 cd 71 c6
>025a28	02 20 1a cd 0a c0 28 32 06 22 0b 24 0d 40 00 00
>025a38	1a 00 e5 00 2e 3e 27 32 28 40 0d 26 1a cd 0a c0
>025a48	28 32 06 22 0b 24 02 40 00 00 18 00 e6 00 2e 3e
>025a58	27 32 86 c5 0d 26 08 40 28 32 06 22 0b 24 f1 90
>025a68	00 00 1a 00 e7 00 2e 3e 27 32 d4 cc 2a c4 0d 26
>025a78	04 10 5d 7c 28 32 06 22 00 40 00 00 1e 00 e8 00
>025a88	2e 3e 27 32 0b 24 01 10 a2 5c 0b 24 31 c6 28 32
>025a98	06 22 0b 24 01 10 66 5c 00 00 20 00 e9 00 2e 3e
>025aa8	27 32 c4 dc 03 d0 02 40 28 32 0d 26 0b 24 02 10
>025ab8	33 a1 28 32 06 22 00 40 00 00 1a 00 ea 00 2e 3e
>025ac8	27 32 fb cc 09 c0 0d 26 a6 cd 14 c0 28 32 06 22
>025ad8	37 44 00 00 1c 00 eb 00 2e 3e 27 32 8e 40 0b 24
>025ae8	02 10 83 a7 28 32 06 22 0b 24 02 10 f5 a6 00 00
>025af8	1a 00 ec 00 2e 3e 27 32 fb cc 09 c0 0b 24 86 40
>025b08	28 32 06 22 04 10 59 ab 00 00 1c 00 ed 00 2e 3e
>025b18	27 32 09 ce 14 c0 0a 24 0b 24 be 40 28 32 06 22
>025b28	02 10 49 61 00 00 20 00 ee 00 2e 3e 27 32 0b 24
>025b38	02 10 cb a5 0b 24 0b 24 42 40 28 32 06 22 0b 24
>025b48	02 10 89 a5 00 00 16 00 ef 00 2e 3e 27 32 db 4d
>025b58	01 20 0b c6 28 32 06 22 08 40 00 00 1c 00 f0 00
>025b68	2e 3e 27 32 64 ce 16 c0 0a 24 0b 24 f9 4b 28 32
>025b78	06 22 01 10 03 41 00 00 1c 00 f1 00 2e 3e 27 32
>025b88	01 c0 0c 26 d4 cc 2a c4 28 32 06 22 0b 24 d5 11
>025b98	38 8d 00 00 18 00 f2 00 2e 3e 27 32 15 c0 02 20
>025ba8	01 c0 28 32 06 22 0b 24 83 40 00 00 1e 00 f3 00
>025bb8	2e 3e 27 32 0b 24 50 40 0c 26 04 10 5f 8c 28 32
>025bc8	06 22 0b 24 6f 11 b0 9d 00 00 1c 00 f4 00 2e 3e
>025bd8	27 32 3e c6 03 20 83 cd 71 c6 28 32 06 22 0b 24
>025be8	01 10 63 5c 00 00 1c 00 f5 00 2e 3e 27 32 41 ce
>025bf8	df c5 0b 24 d1 cd 24 c0 28 32 06 22 04 10 d9 8b
>025c08	00 00 1e 00 f6 00 2e 3e 27 32 0b 24 0f 40 02 20
>025c18	47 cd 90 ca 18 c0 28 32 06 22 0b 24 03 40 00 00
>025c28	1a 00 f7 00 2e 3e 27 32 d1 cd 24 c0 01 20 0b 24
>025c38	d7 9e 28 32 06 22 00 40 00 00 1a 00 f8 00 2e 3e
>025c48	27 32 d4 cc 20 c9 1f c0 0d 26 16 c0 28 32 06 22
>025c58	00 40 00 00 20 00 f9 00 2e 3e 27 32 7d cd f7 c8
>025c68	0f c0 02 20 0c ce fc cc 10 c0 28 32 06 22 0b 24
>025c78	2d 40 00 00 18 00 fa 00 2e 3e 27 32 93 40 01 20
>025c88	0b 24 03 85 28 32 06 22 91 40 00 00 1c 00 fb 00
>025c98	2e 3e 27 32 c2 cc 69 c5 0a 24 0b 24 38 5c 28 32
>025ca8	06 22 0b 24 70 78 00 00 1e 00 fc 00 2e 3e 27 32
>025cb8	01 10 74 8a 03 20 0b 24 0f 40 28 32 06 22 0b 24
>025cc8	01 10 7b 8a 00 00 20 00 fd 00 2e 3e 27 32 0b 24
>025cd8	05 10 11 5d 0c 26 d4 cc 2a c4 28 32 06 22 0b 24
>025ce8	6e 13 28 53 00 00 1a 00 fe 00 2e 3e 27 32 02 10
>025cf8	83 a7 01 20 15 c0 28 32 06 22 02 10 00 a7 00 00
>025d08	1c 00 ff 00 2e 3e 27 32 31 c6 0a 24 a5 cd 51 c0
>025d18	28 32 06 22 0b 24 01 10 85 77 00 00 16 00 00 01
>025d28	2e 3e 27 32 b4 40 02 20 83 7d 28 32 06 22 b7 7d
>025d38	00 00 18 00 01 01 2e 3e 27 32 a8 40 01 20 a5 cd
>025d48	51 c0 28 32 06 22 a0 40 00 00 1c 00 02 01 2e 3e
>025d58	27 32 1a cd 0a c0 03 20 0c ce fc cc 10 c0 28 32
>025d68	06 22 22 40 00 00 18 00 03 01 2e 3e 27 32 93 40
>025d78	0a 24 e5 c5 28 32 06 22 04 10 4d a7 00 00 18 00
>025d88	04 01 2e 3e 27 32 28 40 0d 26 02 10 f6 69 28 32
>025d98	06 22 00 40 00 00 1a 00 05 01 2e 3e 27 32 31 c6
>025da8	01 20 03 10 a6 ac 28 32 06 22 03 10 84 ac 00 00
>025db8	20 00 06 01 2e 3e 27 32 0b 24 01 10 49 77 0b 24
>025dc8	a6 cd 14 c0 28 32 06 22 0b 24 01 10 dc 77 00 00
>025dd8	1a 00 07 01 2e 3e 27 32 31 c6 0c 26 16 c0 28 32
>025de8	06 22 0b 24 4b 11 24 b9 00 00 1e 00 08 01 2e 3e
>025df8	27 32 0b 24 3c 40 0b 24 02 10 3b bc 28 32 06 22
>025e08	0b 24 02 10 77 bc 00 00 22 00 09 01 2e 3e 27 32
>025e18	0b 24 b4 40 01 20 22 dd 71 d4 02 40 28 32 28 32
>025e28	06 22 0b 24 02 10 f4 99 00 00 18 00 0a 01 2e 3e
>025e38	27 32 76 c5 0d 26 83 cd 71 c6 28 32 06 22 87 41
>025e48	00 00 1c 00 0b 01 2e 3e 27 32 2b ce 1d c0 0c 26
>025e58	01 10 fc 4c 28 32 06 22 42 1f 94 a7 00 00 20 00
>025e68	0c 01 2e 3e 27 32 0b 24 b4 40 02 20 34 de 2c d6
>025e78	01 40 28 32 28 32 06 22 0b 24 82 40 00 00 1c 00
>025e88	0d 01 2e 3e 27 32 0b 24 63 52 0d 26 2f ce 66 cc
>025e98	1b c0 28 32 06 22 00 40 00 00 22 00 0e 01 2e 3e
>025ea8	27 32 e1 dd d8 d1 02 40 28 32 01 20 0b 24 3c 40
>025eb8	28 32 06 22 0b 24 04 10 fc 43 00 00 1e 00 0f 01
>025ec8	2e 3e 27 32 c3 40 0c 26 0b 24 03 10 24 97 28 32
>025ed8	06 22 0b 24 cd 12 6c a0 00 00 20 00 10 01 2e 3e
>025ee8	27 32 2f ce 66 cc 1b c0 0c 26 67 ce 3e ce 0e c0
>025ef8	28 32 06 22 3e 10 1c 91 00 00 1a 00 11 01 2e 3e
>025f08	27 32 a6 cd 14 c0 0a 24 24 cd 03 c0 28 32 06 22
>025f18	09 41 00 00 1c 00 12 01 2e 3e 27 32 0b 24 b4 40
>025f28	0b 24 67 ce 3e ce 0e c0 28 32 06 22 0a 40 00 00
>025f38	1c 00 13 01 2e 3e 27 32 a8 40 02 20 47 cd 90 ca
>025f48	18 c0 28 32 06 22 04 10 fd 7c 00 00 1a 00 14 01
>025f58	2e 3e 27 32 0b 24 0f 40 0b 24 0b 24 32 6a 28 32
>025f68	06 22 23 6a 00 00 20 00 15 01 2e 3e 27 32 5d ce
>025f78	10 cd 0b c0 01 20 0b 24 3c 40 28 32 06 22 0b 24
>025f88	05 10 fc 54 00 00 1c 00 16 01 2e 3e 27 32 67 ce
>025f98	3e ce 0e c0 0d 26 03 10 d6 9b 28 32 06 22 00 40
>025fa8	00 00 20 00 17 01 2e 3e 27 32 12 c0 01 20 c1 dc
>025fb8	1b d0 03 40 28 32 28 32 06 22 0b 24 04 10 4e 70
>025fc8	00 00 20 00 18 01 2e 3e 27 32 67 ce 3e ce 0e c0
>025fd8	0a 24 0c ce fc cc 10 c0 28 32 06 22 0b 24 eb 40
>025fe8	00 00 1c 00 19 01 2e 3e 27 32 24 cd 03 c0 03 20
>025ff8	86 c5 28 32 06 22 0b 24 05 10 00 48 00 00 18 00
>026008	1a 01 2e 3e 27 32 6f 8e 01 20 d4 cc 2a c4 28 32
>026018	06 22 28 40 00 00 1c 00 1b 01 2e 3e 27 32 64 ce
>026028	16 c0 03 20 24 cd 03 c0 28 32 06 22 01 10 8a 4c
>026038	00 00 1a 00 1c 01 2e 3e 27 32 02 10 f6 69 01 20
>026048	15 c0 28 32 06 22 02 10 44 69 00 00 1c 00 1d 01
>026058	2e 3e 27 32 0b 24 f9 4b 0a 24 d1 cd 24 c0 28 32
>026068	06 22 0b 24 73 4b 00 00 1a 00 1e 01 2e 3e 27 32
>026078	c2 cc 69 c5 0d 26 0b 24 2d 40 28 32 06 22 a0 40
>026088	00 00 26 00 1f 01 2e 3e 27 32 d4 cc 20 c9 1f c0
>026098	02 20 2d dd a7 db 17 d0 02 40 28 32 28 32 06 22
>0260a8	0b 24 05 10 87 71 00 00 18 00 20 01 2e 3e 27 32
>0260b8	86 40 0d 26 0b 24 38 5c 28 32 06 22 00 40 00 00
>0260c8	1c 00 21 01 2e 3e 27 32 41 ce df c5 0d 26 0b 24
>0260d8	be 40 28 32 06 22 0b 24 18 43 00 00 1a 00 22 01
>0260e8	2e 3e 27 32 8e 40 0c 26 05 10 27 84 28 32 06 22
>0260f8	11 13 a2 8d 00 00 22 00 23 01 2e 3e 27 32 d0 dc
>026108	b7 d3 02 40 28 32 03 20 a6 cd 14 c0 28 32 06 22
>026118	0b 24 03 10 eb 73 00 00 1e 00 24 01 2e 3e 27 32
>026128	31 c6 02 20 e1 dd d8 d1 02 40 28 32 28 32 06 22
>026138	0b 24 19 40 00 00 1e 00 25 01 2e 3e 27 32 0b 24
>026148	02 10 74 99 0c 26 08 40 28 32 06 22 0b 24 15 10
>026158	a0 8b 00 00 1c 00 26 01 2e 3e 27 32 15 c0 02 20
>026168	0b 24 04 10 41 70 28 32 06 22 0b 24 01 40 00 00
>026178	1c 00 27 01 2e 3e 27 32 02 10 ca 76 0d 26 0b 24
>026188	2d 40 28 32 06 22 0b 24 e8 46 00 00 1e 00 28 01
>026198	2e 3e 27 32 0b 24 05 10 d4 54 0b 24 a8 40 28 32
>0261a8	06 22 0b 24 05 10 7c 55 00 00 1e 00 29 01 2e 3e
>0261b8	27 32 0b 24 01 10 49 77 0c 26 08 40 28 32 06 22
>0261c8	0b 24 0b 10 48 7a 00 00 1c 00 2a 01 2e 3e 27 32
>0261d8	16 c0 0c 26 0b 24 0f 40 28 32 06 22 0b 24 52 10
>0261e8	49 be 00 00 20 00 2b 01 2e 3e 27 32 0b 24 03 10
>0261f8	b0 a2 02 20 0c ce fc cc 10 c0 28 32 06 22 0b 24
>026208	2d 40 00 00 1c 00 2c 01 2e 3e 27 32 05 10 79 62
>026218	0d 26 0b 24 2d 40 28 32 06 22 0b 24 fd 4e 00 00
>026228	1c 00 2d 01 2e 3e 27 32 0b 24 2d 40 01 20 0b 24
>026238	0e bb 28 32 06 22 0b 24 2e bb 00 00 20 00 2e 01
>026248	2e 3e 27 32 0b 24 05 10 8a 47 01 20 0b 24 42 40
>026258	28 32 06 22 0b 24 05 10 ca 47 00 00 18 00 2f 01
>026268	2e 3e 27 32 0b 24 b4 40 01 20 86 40 28 32 06 22
>026278	04 40 00 00 1e 00 30 01 2e 3e 27 32 0b 24 03 85
>026288	0c 26 2b ce 1d c0 28 32 06 22 0b 24 78 17 91 70
>026298	00 00 1c 00 31 01 2e 3e 27 32 24 cd 03 c0 0d 26
>0262a8	02 cd 67 c2 28 32 06 22 0b 24 01 40 00 00 16 00
>0262b8	32 01 2e 3e 27 32 d7 c5 03 20 60 40 28 32 06 22
>0262c8	e3 7d 00 00 20 00 33 01 2e 3e 27 32 c4 dc 03 d0
>0262d8	03 40 28 32 02 20 0b 24 32 6a 28 32 06 22 0b 24
>0262e8	31 40 00 00 1e 00 34 01 2e 3e 27 32 0b 24 42 40
>0262f8	0a 24 d0 cd ce c5 28 32 06 22 0b 24 02 10 75 a1
>026308	00 00 1c 00 35 01 2e 3e 27 32 0b 24 0f 40 03 20
>026318	d0 cd ce c5 28 32 06 22 02 10 3c a1 00 00 1e 00
>026328	36 01 2e 3e 27 32 0b 24 01 10 65 bb 02 20 0b 24
>026338	3c 40 28 32 06 22 0b 24 21 40 00 00 1c 00 37 01
>026348	2e 3e 27 32 b5 40 0b 24 0b 24 02 10 74 99 28 32
>026358	06 22 02 10 29 9a 00 00 1e 00 38 01 2e 3e 27 32
>026368	0b 24 01 10 65 bb 03 20 60 40 28 32 06 22 0b 24
>026378	01 10 05 bb 00 00 1a 00 39 01 2e 3e 27 32 08 40
>026388	0c 26 01 10 74 8a 28 32 06 22 0c 10 a0 93 00 00
>026398	20 00 3a 01 2e 3e 27 32 24 cd 03 c0 03 20 c1 dc
>0263a8	1b d0 03 40 28 32 28 32 06 22 0b 24 3c 40 00 00
>0263b8	1a 00 3b 01 2e 3e 27 32 01 10 74 8a 0a 24 86 40
>0263c8	28 32 06 22 01 10 fa 8a 00 00 18 00 3c 01 2e 3e
>0263d8	27 32 2b ce 1d c0 0d 26 0b c6 28 32 06 22 58 40
>0263e8	00 00 1a 00 3d 01 2e 3e 27 32 0b 24 b4 40 0b 24
>0263f8	d7 c5 28 32 06 22 0b 24 37 7e 00 00 1c 00 3e 01
>026408	2e 3e 27 32 0b 24 02 10 33 a1 01 20 d4 cc 2a c4
>026418	28 32 06 22 88 40 00 00 1c 00 3f 01 2e 3e 27 32
>026428	01 10 fb 41 0b 24 0b 24 f9 4b 28 32 06 22 01 10
>026438	f4 4d 00 00 1c 00 40 01 2e 3e 27 32 83 cd 71 c6
>026448	01 20 0b 24 04 10 7c 79 28 32 06 22 80 40 00 00
>026458	1e 00 41 01 2e 3e 27 32 0b 24 b4 40 0b 24 5f cd
>026468	80 cc 0c c0 28 32 06 22 03 10 70 96 00 00 20 00
>026478	42 01 2e 3e 27 32 db 4d 0c 26 5c dd f4 d3 00 40
>026488	28 32 28 32 06 22 0b 24 07 10 76 52 00 00 1a 00
>026498	43 01 2e 3e 27 32 86 40 0b 24 07 c0 28 32 06 22
>0264a8	0b 24 03 10 50 9b 00 00 1a 00 44 01 2e 3e 27 32
>0264b8	c3 40 02 20 0b 24 38 b1 28 32 06 22 0b 24 35 b1
>0264c8	00 00 22 00 45 01 2e 3e 27 32 a5 cd 51 c0 02 20
>0264d8	12 de 09 db 0d d0 02 40 28 32 28 32 06 22 0b 24
>0264e8	49 40 00 00 1e 00 46 01 2e 3e 27 32 0b 24 01 10
>0264f8	78 b0 0d 26 d4 cc 2a c4 28 32 06 22 0b 24 6e 41
>026508	00 00 20 00 47 01 2e 3e 27 32 93 40 0b 24 12 de
>026518	09 db 0d d0 03 40 28 32 28 32 06 22 03 10 73 99
>026528	00 00 1a 00 48 01 2e 3e 27 32 8e 40 03 20 03 10
>026538	a6 ac 28 32 06 22 03 10 28 ac 00 00 1a 00 49 01
>026548	2e 3e 27 32 03 10 c4 6f 0c 26 86 40 28 32 06 22
>026558	c4 11 98 40 00 00 1e 00 4a 01 2e 3e 27 32 7d cd
>026568	f7 c8 0f c0 01 20 d4 cc 20 c9 1f c0 28 32 06 22
>026578	00 40 00 00 1a 00 4b 01 2e 3e 27 32 15 c0 01 20
>026588	80 cd 0a c0 28 32 06 22 01 10 44 8a 00 00 1c 00
>026598	4c 01 2e 3e 27 32 d4 cc 1c c0 0a 24 02 cd 67 c2
>0265a8	28 32 06 22 03 10 74 6f 00 00 1a 00 4d 01 2e 3e
>0265b8	27 32 93 40 0d 26 d4 cc 20 c9 1f c0 28 32 06 22
>0265c8	12 40 00 00 1c 00 4e 01 2e 3e 27 32 31 c6 0c 26
>0265d8	5f cd 80 cc 0c c0 28 32 06 22 dc 10 70 ac 00 00
>0265e8	1a 00 4f 01 2e 3e 27 32 0b c6 0c 26 01 10 74 8a
>0265f8	28 32 06 22 3f 10 20 62 00 00 1c 00 50 01 2e 3e
>026608	27 32 0b 24 32 6a 0b 24 24 cd 03 c0 28 32 06 22
>026618	0b 24 a8 6a 00 00 1e 00 51 01 2e 3e 27 32 0b 24
>026628	50 40 01 20 7d cd f7 c8 0f c0 28 32 06 22 01 10
>026638	00 8b 00 00 28 00 52 01 2e 3e 27 32 e1 dd d8 d1
>026648	02 40 28 32 01 20 12 de 09 db 0d d0 02 40 28 32
>026658	28 32 06 22 0b 24 04 10 df 43 00 00 18 00 53 01
>026668	2e 3e 27 32 a8 40 02 20 2b ce 1d c0 28 32 06 22
>026678	fb 4d 00 00 1c 00 54 01 2e 3e 27 32 0b 24 fa b4
>026688	0c 26 0b 24 3c 40 28 32 06 22 36 10 98 aa 00 00
>026698	1c 00 55 01 2e 3e 27 32 01 10 03 8b 0b 24 d4 cc
>0266a8	2a c4 28 32 06 22 01 10 5b 8a 00 00 1c 00 56 01
>0266b8	2e 3e 27 32 d4 cc 2a c4 03 20 0b 24 be 40 28 32
>0266c8	06 22 0b 24 16 40 00 00 1e 00 57 01 2e 3e 27 32
>0266d8	d4 cc 20 c9 1f c0 03 20 0b 24 32 6a 28 32 06 22
>0266e8	0b 24 3a 6a 00 00 1e 00 58 01 2e 3e 27 32 0b 24
>0266f8	0f 40 0b 24 5f cd 80 cc 0c c0 28 32 06 22 03 10
>026708	15 97 00 00 16 00 59 01 2e 3e 27 32 86 40 02 20
>026718	86 40 28 32 06 22 86 40 00 00 1c 00 5a 01 2e 3e
>026728	27 32 01 10 72 44 03 20 2b ce 1d c0 28 32 06 22
>026738	01 10 a9 49 00 00 1c 00 5b 01 2e 3e 27 32 04 10
>026748	5f 8c 0b 24 02 cd 67 c2 28 32 06 22 04 10 af 8c
>026758	00 00 22 00 5c 01 2e 3e 27 32 03 10 a6 ac 03 20
>026768	2d dd a7 db 17 d0 01 40 28 32 28 32 06 22 03 10
>026778	c6 ac 00 00 1e 00 5d 01 2e 3e 27 32 a6 cd 14 c0
>026788	02 20 47 cd 90 ca 18 c0 28 32 06 22 04 10 df 7c
>026798	00 00 1c 00 5e 01 2e 3e 27 32 01 10 03 8b 02 20
>0267a8	d1 cd 24 c0 28 32 06 22 01 10 87 8b 00 00 1e 00
>0267b8	5f 01 2e 3e 27 32 d4 cc 20 c9 1f c0 03 20 27 cd
>0267c8	05 c0 28 32 06 22 01 10 f3 41 00 00 1a 00 60 01
>0267d8	2e 3e 27 32 23 c5 0a 24 28 40 28 32 06 22 0b 24
>0267e8	05 10 e9 5c 00 00 1e 00 61 01 2e 3e 27 32 02 cd
>0267f8	67 c2 0b 24 5f cd 80 cc 0c c0 28 32 06 22 03 10
>026808	d4 96 00 00 1a 00 62 01 2e 3e 27 32 02 10 83 a7
>026818	0b 24 b4 40 28 32 06 22 02 10 cf a6 00 00 1c 00
>026828	63 01 2e 3e 27 32 e5 c5 01 20 67 ce 3e ce 0e c0
>026838	28 32 06 22 04 10 02 a6 00 00 20 00 64 01 2e 3e
>026848	27 32 0b 24 01 10 49 77 01 20 0b 24 50 40 28 32
>026858	06 22 0b 24 01 10 50 77 00 00 1a 00 65 01 2e 3e
>026868	27 32 15 c0 0a 24 41 ce df c5 28 32 06 22 04 10
>026878	ab 8b 00 00 20 00 66 01 2e 3e 27 32 a8 40 0a 24
>026888	c4 dc 7d d1 01 40 28 32 28 32 06 22 0b 24 03 10
>026898	b5 bd 00 00 1a 00 67 01 2e 3e 27 32 31 c6 0c 26
>0268a8	67 ce 3e ce 0e c0 28 32 06 22 88 6c 00 00 20 00
>0268b8	68 01 2e 3e 27 32 d1 cd 24 c0 03 20 5f cd 80 cc
>0268c8	0c c0 28 32 06 22 0b 24 03 10 a6 97 00 00 1c 00
>0268d8	69 01 2e 3e 27 32 1a cd 0a c0 0a 24 86 c5 28 32
>0268e8	06 22 0b 24 05 10 99 47 00 00 1c 00 6a 01 2e 3e
>0268f8	27 32 d4 cc 2a c4 0a 24 b8 cd 21 c0 28 32 06 22
>026908	01 10 58 4e 00 00 1a 00 6b 01 2e 3e 27 32 08 40
>026918	03 20 04 10 df ab 28 32 06 22 04 10 d7 ab 00 00
>026928	1a 00 6c 01 2e 3e 27 32 64 ce 16 c0 0a 24 db 4d
>026938	28 32 06 22 01 10 d7 5a 00 00 1a 00 6d 01 2e 3e
>026948	27 32 76 40 03 20 03 10 c4 6f 28 32 06 22 03 10
>026958	b2 6f 00 00 18 00 6e 01 2e 3e 27 32 31 c6 0d 26
>026968	03 10 c4 6f 28 32 06 22 00 40 00 00 1a 00 6f 01
>026978	2e 3e 27 32 5a cd 25 c1 03 20 db 4d 28 32 06 22
>026988	0b 24 ba 5f 00 00 1e 00 70 01 2e 3e 27 32 0b 24
>026998	05 10 d4 54 0d 26 a6 cd 14 c0 28 32 06 22 0b 24
>0269a8	7e 44 00 00 1a 00 71 01 2e 3e 27 32 08 c0 01 20
>0269b8	0b 24 3c 40 28 32 06 22 01 10 c0 a0 00 00 1c 00
>0269c8	72 01 2e 3e 27 32 0b c6 03 20 7d cd f7 c8 0f c0
>0269d8	28 32 06 22 01 10 2b 8b 00 00 22 00 73 01 2e 3e
>0269e8	27 32 0b 24 01 10 65 bb 0d 26 12 de 09 db 0d d0
>0269f8	02 40 28 32 28 32 06 22 2e 43 00 00 18 00 74 01
>026a08	2e 3e 27 32 6f 8e 0b 24 5a cd 25 c1 28 32 06 22
>026a18	d2 a0 00 00 1a 00 75 01 2e 3e 27 32 08 40 01 20
>026a28	0b 24 05 10 11 5d 28 32 06 22 08 40 00 00 22 00
>026a38	76 01 2e 3e 27 32 d4 cc 20 c9 1f c0 01 20 12 de
>026a48	09 db 0d d0 05 40 28 32 28 32 06 22 08 40 00 00
>026a58	18 00 77 01 2e 3e 27 32 31 c6 0d 26 02 10 f6 69
>026a68	28 32 06 22 00 40 00 00 1e 00 78 01 2e 3e 27 32
>026a78	c3 40 0a 24 0b 24 05 10 11 5d 28 32 06 22 0b 24
>026a88	05 10 4e 5c 00 00 1e 00 79 01 2e 3e 27 32 0c ce
>026a98	fc cc 10 c0 0a 24 0b 24 b4 40 28 32 06 22 0b 24
>026aa8	e1 40 00 00 1a 00 7a 01 2e 3e 27 32 12 c0 02 20
>026ab8	0b 24 0f 40 28 32 06 22 0b 24 01 40 00 00 1a 00
>026ac8	7b 01 2e 3e 27 32 e0 c5 03 20 0b 24 4e 40 28 32
>026ad8	06 22 01 10 29 bb 00 00 18 00 7c 01 2e 3e 27 32
>026ae8	d1 cd 24 c0 02 20 6f 8e 28 32 06 22 ef 8e 00 00
>026af8	20 00 7d 01 2e 3e 27 32 d4 cc 2a c4 0a 24 0b 24
>026b08	01 10 49 77 28 32 06 22 0b 24 01 10 a1 76 00 00
>026b18	18 00 7e 01 2e 3e 27 32 01 10 74 8a 0d 26 86 40
>026b28	28 32 06 22 82 41 00 00 18 00 7f 01 2e 3e 27 32
>026b38	a8 40 0d 26 04 10 5d 7c 28 32 06 22 00 40 00 00
>026b48	1c 00 80 01 2e 3e 27 32 0b 24 50 40 0a 24 b8 cd
>026b58	21 c0 28 32 06 22 01 10 60 4d 00 00 24 00 81 01
>026b68	2e 3e 27 32 0b 24 b4 40 03 20 12 de 09 db 0d d0
>026b78	00 40 28 32 28 32 06 22 0b 24 03 10 fd 59 00 00
>026b88	1a 00 82 01 2e 3e 27 32 8e 40 0c 26 3e c6 28 32
>026b98	06 22 0b 24 ad 10 dc a1 00 00 1c 00 83 01 2e 3e
>026ba8	27 32 03 10 a6 ac 02 20 0b 24 50 40 28 32 06 22
>026bb8	0b 24 4a 40 00 00 1c 00 84 01 2e 3e 27 32 0b c6
>026bc8	0b 24 b8 cd 21 c0 28 32 06 22 0b 24 01 10 88 4d
>026bd8	00 00 1c 00 85 01 2e 3e 27 32 5a cd 25 c1 0d 26
>026be8	67 ce 3e ce 0e c0 28 32 06 22 18 40 00 00 1c 00
>026bf8	86 01 2e 3e 27 32 0b 24 b4 40 0b 24 a5 cd 51 c0
>026c08	28 32 06 22 01 10 95 76 00 00 1c 00 87 01 2e 3e
>026c18	27 32 d4 cc 2a c4 01 20 0c ce fc cc 10 c0 28 32
>026c28	06 22 80 40 00 00 1a 00 88 01 2e 3e 27 32 86 40
>026c38	02 20 04 10 df ab 28 32 06 22 04 10 df ab 00 00
>026c48	1c 00 89 01 2e 3e 27 32 0b 24 3c 40 02 20 fb cc
>026c58	09 c0 28 32 06 22 0b 24 21 40 00 00 1c 00 8a 01
>026c68	2e 3e 27 32 12 c0 0d 26 d4 cc 20 c9 1f c0 28 32
>026c78	06 22 0b 24 08 86 00 00 1c 00 8b 01 2e 3e 27 32
>026c88	02 cd 67 c2 0d 26 47 cd 90 ca 18 c0 28 32 06 22
>026c98	00 40 00 00 16 00 8c 01 2e 3e 27 32 db 4d 03 20
>026ca8	c3 40 28 32 06 22 18 4d 00 00 1c 00 8d 01 2e 3e
>026cb8	27 32 d0 cd ce c5 0c 26 0b 24 be 40 28 32 06 22
>026cc8	0c 12 da 63 00 00 1c 00 8e 01 2e 3e 27 32 0b 24
>026cd8	b4 40 0c 26 16 c0 28 32 06 22 0b 24 e3 13 6c ab
>026ce8	00 00 1c 00 8f 01 2e 3e 27 32 0b 24 f9 4b 0b 24
>026cf8	d1 cd 24 c0 28 32 06 22 0b 24 7f 4c 00 00 1e 00
>026d08	90 01 2e 3e 27 32 2f ce 66 cc 1b c0 0a 24 0b 24
>026d18	77 40 28 32 06 22 0b 24 a9 6a 00 00 1a 00 91 01
>026d28	2e 3e 27 32 8a cd ba c0 02 20 86 40 28 32 06 22
>026d38	0b 24 79 4b 00 00 18 00 92 01 2e 3e 27 32 a7 a8
>026d48	0d 26 2b ce 1d c0 28 32 06 22 07 40 00 00 1c 00
>026d58	93 01 2e 3e 27 32 d4 cc 20 c9 1f c0 0d 26 a5 cd
>026d68	51 c0 28 32 06 22 00 40 00 00 18 00 94 01 2e 3e
>026d78	27 32 c3 40 01 20 41 ce df c5 28 32 06 22 43 40
>026d88	00 00 1a 00 95 01 2e 3e 27 32 83 cd 71 c6 02 20
>026d98	2b ce 1d c0 28 32 06 22 db 4d 00 00 1c 00 96 01
>026da8	2e 3e 27 32 01 10 e2 b4 0a 24 0b 24 b4 40 28 32
>026db8	06 22 01 10 2e b4 00 00 1c 00 97 01 2e 3e 27 32
>026dc8	31 c6 0a 24 d4 cc 20 c9 1f c0 28 32 06 22 0b 24
>026dd8	34 40 00 00 1c 00 98 01 2e 3e 27 32 d4 cc 20 c9
>026de8	1f c0 0d 26 0b 24 3c 40 28 32 06 22 00 40 00 00
>026df8	1c 00 99 01 2e 3e 27 32 5a cd 25 c1 0b 24 0b 24
>026e08	4e 40 28 32 06 22 0b 24 15 52 00 00 1a 00 9a 01
>026e18	2e 3e 27 32 0b 24 42 40 03 20 0b 24 0f 40 28 32
>026e28	06 22 4f 40 00 00 16 00 9b 01 2e 3e 27 32 0b c6
>026e38	0d 26 07 c0 28 32 06 22 00 40 00 00 18 00 9c 01
>026e48	2e 3e 27 32 08 40 0b 24 8a cd ba c0 28 32 06 22
>026e58	01 4c 00 00 18 00 9d 01 2e 3e 27 32 0b 24 b4 40
>026e68	0d 26 6f 8e 28 32 06 22 00 40 00 00 1a 00 9e 01
>026e78	2e 3e 27 32 27 cd 05 c0 03 20 08 40 28 32 06 22
>026e88	01 10 f3 41 00 00 20 00 9f 01 2e 3e 27 32 c4 dc
>026e98	03 d0 05 40 28 32 01 20 03 10 d6 9b 28 32 06 22
>026ea8	03 10 40 9b 00 00 1a 00 a0 01 2e 3e 27 32 16 c0
>026eb8	02 20 d1 cd 24 c0 28 32 06 22 05 10 a7 84 00 00
>026ec8	1a 00 a1 01 2e 3e 27 32 86 c5 02 20 0b 24 4f 40
>026ed8	28 32 06 22 0b 24 09 40 00 00 1c 00 a2 01 2e 3e
>026ee8	27 32 02 cd 67 c2 0a 24 e0 c5 28 32 06 22 0b 24
>026ef8	01 10 b5 bb 00 00 1e 00 a3 01 2e 3e 27 32 5c dd
>026f08	f4 d3 00 40 28 32 0b 24 a8 40 28 32 06 22 0b 24
>026f18	ea 40 00 00 1c 00 a4 01 2e 3e 27 32 1a cd 61 cb
>026f28	22 c0 03 20 93 40 28 32 06 22 03 10 30 ae 00 00
>026f38	1c 00 a5 01 2e 3e 27 32 a8 40 01 20 c4 dc 7d d1
>026f48	00 40 28 32 28 32 06 22 00 40 00 00 1c 00 a6 01
>026f58	2e 3e 27 32 02 10 f6 69 02 20 ee cc 09 c0 28 32
>026f68	06 22 02 10 fe 69 00 00 18 00 a7 01 2e 3e 27 32
>026f78	1a cd 0a c0 0d 26 16 c0 28 32 06 22 00 40 00 00
>026f88	1a 00 a8 01 2e 3e 27 32 01 10 fc 4c 0a 24 93 40
>026f98	28 32 06 22 01 10 8f 4d 00 00 18 00 a9 01 2e 3e
>026fa8	27 32 0b 24 be 40 0d 26 3e c6 28 32 06 22 00 40
>026fb8	00 00 1a 00 aa 01 2e 3e 27 32 61 ce 02 c0 03 20
>026fc8	d4 cc 2a c4 28 32 06 22 0f a8 00 00 18 00 ab 01
>026fd8	2e 3e 27 32 a8 40 0d 26 d4 cc 2a c4 28 32 06 22
>026fe8	01 40 00 00 22 00 ac 01 2e 3e 27 32 0b 24 01 10
>026ff8	8a 9c 0a 24 d4 cc 20 c9 1f c0 28 32 06 22 0b 24
>027008	01 10 82 9c 00 00 16 00 ad 01 2e 3e 27 32 93 40
>027018	01 20 e0 c5 28 32 06 22 93 40 00 00 1c 00 ae 01
>027028	2e 3e 27 32 0b 24 f9 4b 0a 24 0b 24 3c 40 28 32
>027038	06 22 0b 24 35 4c 00 00 1c 00 af 01 2e 3e 27 32
>027048	01 10 03 8b 01 20 1a cd 0a c0 28 32 06 22 01 10
>027058	01 8b 00 00 18 00 b0 01 2e 3e 27 32 28 40 0b 24
>027068	0b 24 fa b4 28 32 06 22 22 b5 00 00 1a 00 b1 01
>027078	2e 3e 27 32 0b 24 63 52 02 20 8e 40 28 32 06 22
>027088	0b 24 61 52 00 00 20 00 b2 01 2e 3e 27 32 24 cd
>027098	03 c0 0a 24 0b 24 03 10 24 97 28 32 06 22 0b 24
>0270a8	03 10 ae 96 00 00 1a 00 b3 01 2e 3e 27 32 1a c0
>0270b8	0d 26 d4 cc 2a c4 28 32 06 22 0b 24 90 41 00 00
>0270c8	1e 00 b4 01 2e 3e 27 32 5f cd 80 cc 0c c0 0d 26
>0270d8	67 ce 3e ce 0e c0 28 32 06 22 7a 42 00 00 1a 00
>0270e8	b5 01 2e 3e 27 32 31 c6 0c 26 0b 24 38 5c 28 32
>0270f8	06 22 0d 10 20 5d 00 00 22 00 b6 01 2e 3e 27 32
>027108	67 ce 3e ce 0e c0 0b 24 7d cd f7 c8 0f c0 28 32
>027118	06 22 0b 24 01 10 c1 8b 00 00 16 00 b7 01 2e 3e
>027128	27 32 86 40 0c 26 86 40 28 32 06 22 24 86 00 00
>027138	1c 00 b8 01 2e 3e 27 32 8a cd ba c0 0b 24 ee cc
>027148	09 c0 28 32 06 22 0b 24 87 4c 00 00 1e 00 b9 01
>027158	2e 3e 27 32 5a cd 25 c1 01 20 2f ce 66 cc 1b c0
>027168	28 32 06 22 0b 24 74 7a 00 00 1c 00 ba 01 2e 3e
>027178	27 32 31 c6 0b 24 0b 24 02 10 33 a1 28 32 06 22
>027188	02 10 f7 a0 00 00 22 00 bb 01 2e 3e 27 32 2d dd
>027198	a7 db 17 d0 01 40 28 32 0c 26 86 c5 28 32 06 22
>0271a8	0b 24 e5 11 c0 93 00 00 1a 00 bc 01 2e 3e 27 32
>0271b8	76 40 0b 24 d4 cc 2a c4 28 32 06 22 0b 24 32 40
>0271c8	00 00 1c 00 bd 01 2e 3e 27 32 0b 24 b4 40 02 20
>0271d8	01 10 b0 4d 28 32 06 22 0b 24 04 40 00 00 1e 00
>0271e8	be 01 2e 3e 27 32 02 cd 67 c2 0b 24 0b 24 02 10
>0271f8	cb a5 28 32 06 22 02 10 7b a5 00 00 1a 00 bf 01
>027208	2e 3e 27 32 c3 40 0a 24 5a cd 25 c1 28 32 06 22
>027218	0b 24 a0 51 00 00 1a 00 c0 01 2e 3e 27 32 24 cd
>027228	03 c0 0b 24 0b 24 69 40 28 32 06 22 df 40 00 00
>027238	1c 00 c1 01 2e 3e 27 32 0b 24 04 10 41 70 01 20
>027248	a6 cd 14 c0 28 32 06 22 93 40 00 00 18 00 c2 01
>027258	2e 3e 27 32 ee cc 09 c0 0d 26 0b c6 28 32 06 22
>027268	03 40 00 00 18 00 c3 01 2e 3e 27 32 86 40 0b 24
>027278	6f 8e 28 32 06 22 0b 24 e9 8d 00 00 1e 00 c4 01
>027288	2e 3e 27 32 0c ce fc cc 10 c0 02 20 d0 cd ce c5
>027298	28 32 06 22 0b 24 21 40 00 00 1e 00 c5 01 2e 3e
>0272a8	27 32 0b 24 01 10 65 bb 02 20 0b 24 3c 40 28 32
>0272b8	06 22 0b 24 21 40 00 00 22 00 c6 01 2e 3e 27 32
>0272c8	2d dd a7 db 17 d0 05 40 28 32 0d 26 0c ce fc cc
>0272d8	10 c0 28 32 06 22 7b 40 00 00 18 00 c7 01 2e 3e
>0272e8	27 32 86 40 0d 26 02 10 07 62 28 32 06 22 00 40
>0272f8	00 00 1e 00 c8 01 2e 3e 27 32 01 10 fc 4c 0c 26
>027308	8a cd ba c0 28 32 06 22 0b 24 2f 1d 1c b5 00 00
>027318	1c 00 c9 01 2e 3e 27 32 12 c0 01 20 0b 24 50 40
>027328	28 32 06 22 0b 24 04 10 50 70 00 00 1a 00 ca 01
>027338	2e 3e 27 32 db 4d 03 20 d4 cc 20 c9 1f c0 28 32
>027348	06 22 d3 4d 00 00 20 00 cb 01 2e 3e 27 32 c4 dc
>027358	03 d0 03 40 28 32 01 20 0b 24 2d 40 28 32 06 22
>027368	0b 24 7f 40 00 00 1c 00 cc 01 2e 3e 27 32 0b 24
>027378	05 10 11 5d 0d 26 c3 40 28 32 06 22 0b 24 6e 43
>027388	00 00 1a 00 cd 01 2e 3e 27 32 05 10 79 62 03 20
>027398	93 40 28 32 06 22 05 10 ea 62 00 00 18 00 ce 01
>0273a8	2e 3e 27 32 0b 24 50 40 0d 26 13 c6 28 32 06 22
>0273b8	00 40 00 00 1c 00 cf 01 2e 3e 27 32 03 10 d6 9b
>0273c8	02 20 0b 24 2d 40 28 32 06 22 0b 24 29 40 00 00
>0273d8	1a 00 d0 01 2e 3e 27 32 b4 40 03 20 0b 24 38 b1
>0273e8	28 32 06 22 0b 24 84 b1 00 00 1e 00 d1 01 2e 3e
>0273f8	27 32 13 c6 0b 24 c1 dc 1b d0 01 40 28 32 28 32
>027408	06 22 01 10 2d b4 00 00 1c 00 d2 01 2e 3e 27 32
>027418	ce cc 96 c2 0d 26 a6 cd 14 c0 28 32 06 22 0b 24
>027428	d6 40 00 00 18 00 d3 01 2e 3e 27 32 d7 c5 01 20
>027438	0b 24 50 40 28 32 06 22 80 7d 00 00 1a 00 d4 01
>027448	2e 3e 27 32 93 40 0c 26 02 10 83 a7 28 32 06 22
>027458	9c 11 39 b0 00 00 1a 00 d5 01 2e 3e 27 32 0f c0
>027468	02 20 0b 24 0f 40 28 32 06 22 0b 24 09 40 00 00
>027478	1e 00 d6 01 2e 3e 27 32 d0 cd ce c5 0a 24 0b 24
>027488	4f 40 28 32 06 22 0b 24 02 10 82 a1 00 00 18 00
>027498	d7 01 2e 3e 27 32 fb cc 09 c0 01 20 86 40 28 32
>0274a8	06 22 86 40 00 00 1c 00 d8 01 2e 3e 27 32 0b 24
>0274b8	50 40 01 20 01 10 fc 4c 28 32 06 22 01 10 b0 4c
>0274c8	00 00 1e 00 d9 01 2e 3e 27 32 22 dd 71 d4 01 40
>0274d8	28 32 0c 26 08 40 28 32 06 22 06 10 10 64 00 00
>0274e8	1c 00 da 01 2e 3e 27 32 05 10 27 84 01 20 0b 24
>0274f8	3c 40 28 32 06 22 05 10 04 84 00 00 1a 00 db 01
>027508	2e 3e 27 32 38 86 0d 26 0b 24 0f 40 28 32 06 22
>027518	0b 24 ae 44 00 00 1c 00 dc 01 2e 3e 27 32 86 40
>027528	0b 24 09 ce 14 c0 28 32 06 22 0b 24 02 10 81 61
>027538	00 00 1a 00 dd 01 2e 3e 27 32 04 10 5d 7c 02 20
>027548	0b c6 28 32 06 22 04 10 7d 7c 00 00 1c 00 de 01
>027558	2e 3e 27 32 04 10 5d 7c 0d 26 0b 24 3c 40 28 32
>027568	06 22 0b 24 8a 49 00 00 1e 00 df 01 2e 3e 27 32
>027578	0b 24 04 10 41 70 0c 26 b5 40 28 32 06 22 0b 24
>027588	18 13 f5 5d 00 00 1c 00 e0 01 2e 3e 27 32 0b 24
>027598	3c 40 0d 26 0b 24 01 10 8a 9c 28 32 06 22 00 40
>0275a8	00 00 18 00 e1 01 2e 3e 27 32 93 40 0d 26 05 10
>0275b8	27 84 28 32 06 22 00 40 00 00 18 00 e2 01 2e 3e
>0275c8	27 32 24 cd 03 c0 0b 24 31 c6 28 32 06 22 b2 40
>0275d8	00 00 1a 00 e3 01 2e 3e 27 32 2f ce 8c cd 16 c0
>0275e8	01 20 28 40 28 32 06 22 08 40 00 00 1c 00 e4 01
>0275f8	2e 3e 27 32 f9 cc 08 c0 03 20 1a cd 0a c0 28 32
>027608	06 22 05 10 df 8b 00 00 1c 00 e5 01 2e 3e 27 32
>027618	f9 cc 08 c0 0a 24 28 40 28 32 06 22 0b 24 05 10
>027628	aa 8b 00 00 1c 00 e6 01 2e 3e 27 32 01 10 eb a0
>027638	01 20 0b 24 42 40 28 32 06 22 01 10 aa a0 00 00
>027648	18 00 e7 01 2e 3e 27 32 12 c0 0d 26 0b c6 28 32
>027658	06 22 0b 24 01 4e 00 00 1e 00 e8 01 2e 3e 27 32
>027668	ee cc 09 c0 0c 26 0b 24 03 85 28 32 06 22 0b 24
>027678	4c 10 aa 87 00 00 1e 00 e9 01 2e 3e 27 32 24 cd
>027688	03 c0 0c 26 8a cd ba c0 28 32 06 22 0b 24 0b 10
>027698	c6 44 00 00 22 00 ea 01 2e 3e 27 32 1a c0 01 20
>0276a8	12 de 09 db 0d d0 02 40 28 32 28 32 06 22 0b 24
>0276b8	02 10 50 47 00 00 18 00 eb 01 2e 3e 27 32 16 c0
>0276c8	01 20 ee cc 09 c0 28 32 06 22 06 40 00 00 1c 00
>0276d8	ec 01 2e 3e 27 32 0b 24 be 40 0a 24 22 c5 28 32
>0276e8	06 22 0b 24 01 10 36 b1 00 00 1c 00 ed 01 2e 3e
>0276f8	27 32 02 cd 67 c2 02 20 24 cd 03 c0 28 32 06 22
>027708	0b 24 0a 40 00 00 1c 00 ee 01 2e 3e 27 32 0b 24
>027718	3c 40 0a 24 80 cd 0a c0 28 32 06 22 01 10 38 8a
>027728	00 00 20 00 ef 01 2e 3e 27 32 0c ce fc cc 10 c0
>027738	0a 24 47 cd 90 ca 18 c0 28 32 06 22 04 10 30 7c
>027748	00 00 1c 00 f0 01 2e 3e 27 32 61 ce 02 c0 03 20
>027758	0b 24 2d 40 28 32 06 22 0b 24 8c a8 00 00 18 00
>027768	f1 01 2e 3e 27 32 d4 cc 2a c4 0b 24 a8 40 28 32
>027778	06 22 00 40 00 00 1a 00 f2 01 2e 3e 27 32 d4 cc
>027788	2a c4 01 20 03 10 be 81 28 32 06 22 a8 40 00 00
>027798	1a 00 f3 01 2e 3e 27 32 0b 24 f9 4b 0a 24 a8 40
>0277a8	28 32 06 22 0b 24 51 4b 00 00 18 00 f4 01 2e 3e
>0277b8	27 32 08 c0 0b 24 c3 40 28 32 06 22 01 10 28 a0
>0277c8	00 00 1c 00 f5 01 2e 3e 27 32 01 10 7a 60 03 20
>0277d8	ee cc 09 c0 28 32 06 22 01 10 f4 60 00 00 1c 00
>0277e8	f6 01 2e 3e 27 32 d1 cd 24 c0 0b 24 2b ce 1d c0
>0277f8	28 32 06 22 0b 24 55 4d 00 00 1a 00 f7 01 2e 3e
>027808	27 32 b4 40 02 20 05 10 b8 7d 28 32 06 22 05 10
>027818	bc 7d 00 00 1e 00 f8 01 2e 3e 27 32 01 10 72 44
>027828	0a 24 0c ce fc cc 10 c0 28 32 06 22 01 10 45 44
>027838	00 00 1c 00 f9 01 2e 3e 27 32 c3 40 02 20 67 ce
>027848	3e ce 0e c0 28 32 06 22 0b 24 3d 40 00 00 1a 00
>027858	fa 01 2e 3e 27 32 ce cc 96 c2 0a 24 28 40 28 32
>027868	06 22 0b 24 e6 ba 00 00 20 00 fb 01 2e 3e 27 32
>027878	c1 dc 1b d0 01 40 28 32 0c 26 1a cd 0a c0 28 32
>027888	06 22 0b 24 9b 4a 00 00 1e 00 fc 01 2e 3e 27 32
>027898	8e 40 0a 24 0b 24 01 10 8a 9c 28 32 06 22 0b 24
>0278a8	01 10 fc 9b 00 00 18 00 fd 01 2e 3e 27 32 c3 40
>0278b8	0b 24 0b 24 63 52 28 32 06 22 26 53 00 00 1e 00
>0278c8	fe 01 2e 3e 27 32 03 10 a3 ae 0d 26 67 ce 3e ce
>0278d8	0e c0 28 32 06 22 0b 24 9a 42 00 00 1c 00 ff 01
>0278e8	2e 3e 27 32 d7 cc f4 c0 02 20 0b 24 42 40 28 32
>0278f8	06 22 0b 24 02 40 00 00 18 00 00 02 2e 3e 27 32
>027908	a8 40 01 20 04 10 5d 7c 28 32 06 22 08 40 00 00
>027918	24 00 01 02 2e 3e 27 32 c4 dc 03 d0 00 40 28 32
>027928	0a 24 d4 cc 20 c9 1f c0 28 32 06 22 0b 24 04 10
>027938	d5 8f 00 00 1c 00 02 02 2e 3e 27 32 02 cd 67 c2
>027948	02 20 ce cc 96 c2 28 32 06 22 0b 24 0e 40 00 00
>027958	1c 00 03 02 2e 3e 27 32 0b 24 50 40 0b 24 2f ce
>027968	66 cc 1b c0 28 32 06 22 e2 69 00 00 1e 00 04 02
>027978	2e 3e 27 32 04 10 df ab 0c 26 0b 24 3c 40 28 32
>027988	06 22 0b 24 22 11 44 88 00 00 1a 00 05 02 2e 3e
>027998	27 32 76 40 0c 26 0b 24 b4 40 28 32 06 22 0b 24
>0279a8	f8 92 00 00 20 00 06 02 2e 3e 27 32 22 dd 71 d4
>0279b8	01 40 28 32 0d 26 0b 24 f9 4b 28 32 06 22 0b 24
>0279c8	08 40 00 00 20 00 07 02 2e 3e 27 32 1a cd 0a c0
>0279d8	03 20 1a cd 61 cb 22 c0 28 32 06 22 0b 24 03 10
>0279e8	ae ae 00 00 1e 00 08 02 2e 3e 27 32 0b 24 0f 40
>0279f8	03 20 d7 cc f4 c0 28 32 06 22 0b 24 05 10 e9 7a
>027a08	00 00 22 00 09 02 2e 3e 27 32 0b 24 01 10 8a 9c
>027a18	0c 26 d4 cc 20 c9 1f c0 28 32 06 22 0b 24 0d 10
>027a28	50 a4 00 00 16 00 0a 02 2e 3e 27 32 d7 c5 0a 24
>027a38	08 40 28 32 06 22 8b 7d 00 00 1c 00 0b 02 2e 3e
>027a48	27 32 0b 24 69 40 01 20 0b 24 0e bb 28 32 06 22
>027a58	0b 24 6e bb 00 00 18 00 0c 02 2e 3e 27 32 2b ce
>027a68	1d c0 03 20 76 40 28 32 06 22 ad 4d 00 00 1e 00
>027a78	0d 02 2e 3e 27 32 0b 24 05 10 8a 47 0c 26 0b 24
>027a88	4f 40 28 32 06 22 8f 11 96 93 00 00 1c 00 0e 02
>027a98	2e 3e 27 32 0b 24 01 10 8a 9c 0d 26 0b 24 0f 40
>027aa8	28 32 06 22 b3 4e 00 00 20 00 0f 02 2e 3e 27 32
>027ab8	d4 cc 2a c4 03 20 5d ce 10 cd 0b c0 28 32 06 22
>027ac8	0b 24 05 10 7c 54 00 00 18 00 10 02 2e 3e 27 32
>027ad8	15 c0 03 20 0f c0 28 32 06 22 01 10 3a 9c 00 00
>027ae8	1e 00 11 02 2e 3e 27 32 80 cd 0a c0 03 20 0b 24
>027af8	2d 40 28 32 06 22 0b 24 01 10 59 8a 00 00 1c 00
>027b08	12 02 2e 3e 27 32 b8 cd 21 c0 01 20 02 cd 67 c2
>027b18	28 32 06 22 01 10 b0 4d 00 00 18 00 13 02 2e 3e
>027b28	27 32 08 40 01 20 04 10 ba a6 28 32 06 22 08 40
>027b38	00 00 1c 00 14 02 2e 3e 27 32 0c ce fc cc 10 c0
>027b48	0c 26 0b 24 0f 40 28 32 06 22 a3 42 00 00 1a 00
>027b58	15 02 2e 3e 27 32 0b 24 0e bb 0d 26 76 40 28 32
>027b68	06 22 0b 24 0a 41 00 00 1a 00 16 02 2e 3e 27 32
>027b78	0b 24 b4 40 0a 24 fc c4 28 32 06 22 03 10 f2 ab
>027b88	00 00 1a 00 17 02 2e 3e 27 32 8e 40 03 20 02 10
>027b98	83 a7 28 32 06 22 02 10 0d a7 00 00 20 00 18 02
>027ba8	2e 3e 27 32 0b 24 04 10 dd 8f 0b 24 d1 cd 24 c0
>027bb8	28 32 06 22 0b 24 04 10 63 90 00 00 1e 00 19 02
>027bc8	2e 3e 27 32 d4 cc 2a c4 0b 24 02 10 83 a7 28 32
>027bd8	06 22 0b 24 02 10 db a6 00 00 1c 00 1a 02 2e 3e
>027be8	27 32 0b 24 c4 55 02 20 0b 24 0f 40 28 32 06 22
>027bf8	0b 24 03 40 00 00 20 00 1b 02 2e 3e 27 32 c4 dc
>027c08	03 d0 03 40 28 32 0b 24 2b ce 1d c0 28 32 06 22
>027c18	0b 24 52 4e 00 00 1a 00 1c 02 2e 3e 27 32 07 c0
>027c28	0b 24 02 cd 67 c2 28 32 06 22 03 10 26 9c 00 00
>027c38	1c 00 1d 02 2e 3e 27 32 04 10 5d 7c 03 20 15 c0
>027c48	28 32 06 22 0b 24 04 10 ef 7c 00 00 20 00 1e 02
>027c58	2e 3e 27 32 ee cc 09 c0 02 20 0b 24 02 10 33 a1
>027c68	28 32 06 22 0b 24 02 10 31 a1 00 00 1e 00 1f 02
>027c78	2e 3e 27 32 47 cd 90 ca 18 c0 0b 24 24 cd 03 c0
>027c88	28 32 06 22 04 10 e7 7b 00 00 1c 00 20 02 2e 3e
>027c98	27 32 02 cd 67 c2 01 20 01 10 72 44 28 32 06 22
>027ca8	01 10 30 44 00 00 1c 00 21 02 2e 3e 27 32 22 c5
>027cb8	0c 26 0c ce fc cc 10 c0 28 32 06 22 54 10 18 85
>027cc8	00 00 1a 00 22 02 2e 3e 27 32 0b 24 0f 40 02 20
>027cd8	83 7d 28 32 06 22 0b 24 0d 40 00 00 1e 00 23 02
>027ce8	2e 3e 27 32 d4 cc 2a c4 0b 24 c4 dc 03 d0 02 40
>027cf8	28 32 28 32 06 22 11 41 00 00 1a 00 24 02 2e 3e
>027d08	27 32 83 cd 71 c6 0d 26 27 cd 05 c0 28 32 06 22
>027d18	00 40 00 00 20 00 25 02 2e 3e 27 32 f9 cc 08 c0
>027d28	0a 24 67 ce 3e ce 0e c0 28 32 06 22 0b 24 05 10
>027d38	90 8c 00 00 1a 00 26 02 2e 3e 27 32 0b 24 50 40
>027d48	0d 26 d1 cd 24 c0 28 32 06 22 00 40 00 00 18 00
>027d58	27 02 2e 3e 27 32 93 40 01 20 0b 24 2d 40 28 32
>027d68	06 22 93 40 00 00 1c 00 28 02 2e 3e 27 32 47 cd
>027d78	90 ca 18 c0 0a 24 86 40 28 32 06 22 04 10 e3 7c
>027d88	00 00 16 00 29 02 2e 3e 27 32 6f 8e 01 20 76 40
>027d98	28 32 06 22 66 40 00 00 1e 00 2a 02 2e 3e 27 32
>027da8	83 cd 71 c6 02 20 33 cd 7e c9 1e c0 28 32 06 22
>027db8	02 10 c3 a7 00 00 18 00 2b 02 2e 3e 27 32 08 40
>027dc8	02 20 31 c6 28 32 06 22 0b 24 34 40 00 00 1c 00
>027dd8	2c 02 2e 3e 27 32 d4 cc 1c c0 01 20 0b 24 be 40
>027de8	28 32 06 22 03 10 40 6f 00 00 1c 00 2d 02 2e 3e
>027df8	27 32 64 ce 16 c0 0d 26 0b 24 b4 40 28 32 06 22
>027e08	0b 24 c8 40 00 00 1a 00 2e 02 2e 3e 27 32 93 40
>027e18	01 20 0b 24 05 10 11 5d 28 32 06 22 83 40 00 00
>027e28	16 00 2f 02 2e 3e 27 32 76 c5 0d 26 0b c6 28 32
>027e38	06 22 72 47 00 00 18 00 30 02 2e 3e 27 32 ee cc
>027e48	09 c0 01 20 93 40 28 32 06 22 82 40 00 00 1e 00
>027e58	31 02 2e 3e 27 32 0b 24 42 40 0c 26 03 10 c4 6f
>027e68	28 32 06 22 0b 24 de 10 88 90 00 00 1a 00 32 02
>027e78	2e 3e 27 32 c3 40 03 20 d4 cc 1c c0 28 32 06 22
>027e88	03 10 07 6f 00 00 18 00 33 02 2e 3e 27 32 8e 40
>027e98	03 20 e5 c5 28 32 06 22 04 10 34 a6 00 00 18 00
>027ea8	34 02 2e 3e 27 32 04 10 ba a6 0d 26 28 40 28 32
>027eb8	06 22 5e 4f 00 00 1c 00 35 02 2e 3e 27 32 0b 24
>027ec8	05 10 d4 54 03 20 31 c6 28 32 06 22 05 10 e8 54
>027ed8	00 00 1a 00 36 02 2e 3e 27 32 fc c4 0b 24 0b 24
>027ee8	be 40 28 32 06 22 03 10 64 ad 00 00 20 00 37 02
>027ef8	2e 3e 27 32 c4 dc 7d d1 02 40 28 32 0c 26 0b 24
>027f08	0f 40 28 32 06 22 18 10 d8 6a 00 00 18 00 38 02
>027f18	2e 3e 27 32 6f 8e 03 20 83 cd 71 c6 28 32 06 22
>027f28	ac 8e 00 00 20 00 39 02 2e 3e 27 32 0b 24 05 10
>027f38	d2 8b 0b 24 ee cc 09 c0 28 32 06 22 0b 24 05 10
>027f48	60 8c 00 00 1c 00 3a 02 2e 3e 27 32 0c ce fc cc
>027f58	10 c0 02 20 c3 40 28 32 06 22 0b 24 2d 40 00 00
>027f68	1e 00 3b 02 2e 3e 27 32 0b 24 03 10 7a 73 0a 24
>027f78	0b c6 28 32 06 22 0b 24 03 10 52 73 00 00 1e 00
>027f88	3c 02 2e 3e 27 32 0c ce fc cc 10 c0 0a 24 01 10
>027f98	72 44 28 32 06 22 01 10 45 44 00 00 18 00 3d 02
>027fa8	2e 3e 27 32 28 40 03 20 d1 cd 24 c0 28 32 06 22
>027fb8	ae 40 00 00 1e 00 3e 02 2e 3e 27 32 01 10 b0 4d
>027fc8	0c 26 0b 24 4e 40 28 32 06 22 0b 24 56 10 a0 6b
>027fd8	00 00 1e 00 3f 02 2e 3e 27 32 a5 cd 51 c0 0b 24
>027fe8	0b 24 2d 40 28 32 06 22 0b 24 01 10 1c 77 00 00
>027ff8	1c 00 40 02 2e 3e 27 32 ce cc 96 c2 0a 24 ee cc
>028008	09 c0 28 32 06 22 0b 24 80 ba 00 00 1c 00 41 02
>028018	2e 3e 27 32 0b 24 50 40 0a 24 01 10 58 5d 28 32
>028028	06 22 01 10 08 5d 00 00 18 00 42 02 2e 3e 27 32
>028038	c3 40 0b 24 23 c5 28 32 06 22 05 10 d4 5d 00 00
>028048	22 00 43 02 2e 3e 27 32 c2 cc 69 c5 0b 24 2d dd
>028058	a7 db 17 d0 05 40 28 32 28 32 06 22 0b 24 74 46
>028068	00 00 1a 00 44 02 2e 3e 27 32 0b 24 0e bb 03 20
>028078	0b 24 50 40 28 32 06 22 42 bb 00 00 1a 00 45 02
>028088	2e 3e 27 32 02 10 f6 69 02 20 28 40 28 32 06 22
>028098	02 10 fe 69 00 00 18 00 46 02 2e 3e 27 32 0b 24
>0280a8	3c 40 0a 24 14 c0 28 32 06 22 33 8e 00 00 1c 00
>0280b8	47 02 2e 3e 27 32 93 40 02 20 1a cd 61 cb 22 c0
>0280c8	28 32 06 22 03 10 b3 ae 00 00 1a 00 48 02 2e 3e
>0280d8	27 32 e0 c5 03 20 0b 24 0f 40 28 32 06 22 01 10
>0280e8	6a bb 00 00 22 00 49 02 2e 3e 27 32 d4 cc 20 c9
>0280f8	1f c0 0a 24 0b 24 02 10 0e 47 28 32 06 22 0b 24
>028108	02 10 06 47 00 00 18 00 4a 02 2e 3e 27 32 82 a4
>028118	03 20 83 cd 71 c6 28 32 06 22 41 a4 00 00 18 00
>028128	4b 02 2e 3e 27 32 05 10 b8 7d 0d 26 8e 40 28 32
>028138	06 22 f1 44 00 00 1e 00 4c 02 2e 3e 27 32 01 10
>028148	03 8b 02 20 67 ce 3e ce 0e c0 28 32 06 22 0b 24
>028158	bd 40 00 00 20 00 4d 02 2e 3e 27 32 5c dd f4 d3
>028168	00 40 28 32 03 20 24 cd 03 c0 28 32 06 22 0b 24
>028178	38 40 00 00 1c 00 4e 02 2e 3e 27 32 8a cd ba c0
>028188	01 20 01 10 fb 41 28 32 06 22 01 10 03 40 00 00
>028198	1a 00 4f 02 2e 3e 27 32 0b 24 69 40 02 20 0f c0
>0281a8	28 32 06 22 0b 24 09 40 00 00 18 00 50 02 2e 3e
>0281b8	27 32 27 cd 05 c0 0b 24 db 4d 28 32 06 22 20 b4
>0281c8	00 00 18 00 51 02 2e 3e 27 32 0b 24 be 40 01 20
>0281d8	a7 a8 28 32 06 22 02 a8 00 00 16 00 52 02 2e 3e
>0281e8	27 32 e5 c5 0d 26 28 40 28 32 06 22 5e 4f 00 00
>0281f8	16 00 53 02 2e 3e 27 32 fc c4 0d 26 8e 40 28 32
>028208	06 22 78 43 00 00 18 00 54 02 2e 3e 27 32 d7 cc
>028218	f4 c0 0d 26 0b c6 28 32 06 22 78 51 00 00 20 00
>028228	55 02 2e 3e 27 32 01 c0 0b 24 c4 dc 7d d1 03 40
>028238	28 32 28 32 06 22 0b 24 02 10 7f a6 00 00 1a 00
>028248	56 02 2e 3e 27 32 5a cd 25 c1 0a 24 c3 40 28 32
>028258	06 22 0b 24 a0 51 00 00 18 00 57 02 2e 3e 27 32
>028268	76 40 0d 26 05 10 e6 7a 28 32 06 22 00 40 00 00
>028278	16 00 58 02 2e 3e 27 32 15 c0 01 20 14 c0 28 32
>028288	06 22 4c 8e 00 00 1e 00 59 02 2e 3e 27 32 0b 24
>028298	3c 40 0c 26 02 10 f6 69 28 32 06 22 0b 24 8b 10
>0282a8	a8 95 00 00 20 00 5a 02 2e 3e 27 32 a8 40 0c 26
>0282b8	e1 dd d8 d1 01 40 28 32 28 32 06 22 0b 24 eb 12
>0282c8	60 79 00 00 1a 00 5b 02 2e 3e 27 32 80 cd 0a c0
>0282d8	0a 24 a8 40 28 32 06 22 01 10 1c 8b 00 00 1e 00
>0282e8	5c 02 2e 3e 27 32 0b 24 2d 40 03 20 02 10 83 a7
>0282f8	28 32 06 22 0b 24 02 10 b0 a7 00 00 1a 00 5d 02
>028308	2e 3e 27 32 b4 40 0c 26 80 cd 0a c0 28 32 06 22
>028318	1c 11 90 99 00 00 1e 00 5e 02 2e 3e 27 32 0b 24
>028328	04 10 41 70 0a 24 28 40 28 32 06 22 0b 24 04 10
>028338	19 70 00 00 1e 00 5f 02 2e 3e 27 32 b5 40 0a 24
>028348	0b 24 02 10 0e 47 28 32 06 22 0b 24 02 10 59 46
>028358	00 00 1e 00 60 02 2e 3e 27 32 0b 24 05 10 8a 47
>028368	03 20 08 40 28 32 06 22 0b 24 05 10 82 47 00 00
>028378	1c 00 61 02 2e 3e 27 32 a6 cd 14 c0 0b 24 76 c5
>028388	28 32 06 22 0b 24 02 10 63 69 00 00 1a 00 62 02
>028398	2e 3e 27 32 fb cc 09 c0 0d 26 d4 cc 2a c4 28 32
>0283a8	06 22 b0 43 00 00 22 00 63 02 2e 3e 27 32 5f cd
>0283b8	80 cc 0c c0 0b 24 67 ce 3e ce 0e c0 28 32 06 22
>0283c8	0b 24 03 10 66 96 00 00 1e 00 64 02 2e 3e 27 32
>0283d8	0b 24 be 40 02 20 0b 24 02 10 0e 47 28 32 06 22
>0283e8	0b 24 0e 40 00 00 1c 00 65 02 2e 3e 27 32 04 10
>0283f8	5f 8c 0a 24 0b 24 4e 40 28 32 06 22 04 10 11 8c
>028408	00 00 1c 00 66 02 2e 3e 27 32 1a c0 02 20 24 cd
>028418	03 c0 28 32 06 22 0b 24 02 10 0a 47 00 00 1e 00
>028428	67 02 2e 3e 27 32 b5 40 0a 24 0b 24 05 10 8a 47
>028438	28 32 06 22 0b 24 05 10 d5 46 00 00 1c 00 68 02
>028448	2e 3e 27 32 05 10 e6 7a 0d 26 0b 24 69 40 28 32
>028458	06 22 0b 24 a7 46 00 00 20 00 69 02 2e 3e 27 32
>028468	ee cc 09 c0 02 20 0b 24 01 10 a8 8f 28 32 06 22
>028478	0b 24 01 10 22 8f 00 00 1c 00 6a 02 2e 3e 27 32
>028488	5a cd 25 c1 0c 26 0b 24 03 85 28 32 06 22 e9 19
>028498	29 a6 00 00 20 00 6b 02 2e 3e 27 32 67 ce 3e ce
>0284a8	0e c0 03 20 01 10 e2 b4 28 32 06 22 0b 24 01 10
>0284b8	60 b4 00 00 1c 00 6c 02 2e 3e 27 32 41 ce df c5
>0284c8	0d 26 1a cd 0a c0 28 32 06 22 0b 24 39 67 00 00
>0284d8	1a 00 6d 02 2e 3e 27 32 16 c0 0c 26 d4 cc 2a c4
>0284e8	28 32 06 22 a1 13 98 79 00 00 22 00 6e 02 2e 3e
>0284f8	27 32 0c ce fc cc 10 c0 01 20 0b 24 02 10 0e 47
>028508	28 32 06 22 0b 24 02 10 2e 47 00 00 1e 00 6f 02
>028518	2e 3e 27 32 c1 dc 1b d0 03 40 28 32 0d 26 03 10
>028528	d6 9b 28 32 06 22 00 40 00 00 1e 00 70 02 2e 3e
>028538	27 32 02 cd 67 c2 0b 24 05 10 02 91 28 32 06 22
>028548	0b 24 05 10 52 91 00 00 22 00 71 02 2e 3e 27 32
>028558	01 10 eb a0 0a 24 12 de 09 db 0d d0 02 40 28 32
>028568	28 32 06 22 01 10 9c a0 00 00 18 00 72 02 2e 3e
>028578	27 32 31 c6 0a 24 76 c5 28 32 06 22 02 10 ba 69
>028588	00 00 1c 00 73 02 2e 3e 27 32 04 10 5f 8c 0b 24
>028598	02 cd 67 c2 28 32 06 22 04 10 af 8c 00 00 1c 00
>0285a8	74 02 2e 3e 27 32 db 4d 0a 24 22 dd 71 d4 01 40
>0285b8	28 32 28 32 06 22 5d b2 00 00 22 00 75 02 2e 3e
>0285c8	27 32 c3 40 0c 26 12 de 09 db 0d d0 03 40 28 32
>0285d8	28 32 06 22 0b 24 d0 12 a0 72 00 00 1c 00 76 02
>0285e8	2e 3e 27 32 d4 cc 2a c4 02 20 04 10 5f 8c 28 32
>0285f8	06 22 04 10 ff 8c 00 00 1a 00 77 02 2e 3e 27 32
>028608	0b 24 2d 40 03 20 0f c0 28 32 06 22 01 10 a5 9c
>028618	00 00 1a 00 78 02 2e 3e 27 32 c3 40 02 20 09 ce
>028628	14 c0 28 32 06 22 02 10 c7 62 00 00 24 00 79 02
>028638	2e 3e 27 32 e1 dd d8 d1 02 40 28 32 0c 26 c4 dc
>028648	03 d0 05 40 28 32 28 32 06 22 01 13 e7 9e 00 00
>028658	1a 00 7a 02 2e 3e 27 32 15 c0 01 20 01 c0 28 32
>028668	06 22 0b 24 02 10 fc a5 00 00 1c 00 7b 02 2e 3e
>028678	27 32 6f 8e 0b 24 c4 dc 03 d0 03 40 28 32 28 32
>028688	06 22 e6 8e 00 00 1a 00 7c 02 2e 3e 27 32 0b 24
>028698	be 40 0a 24 a8 40 28 32 06 22 0b 24 16 40 00 00
>0286a8	1a 00 7d 02 2e 3e 27 32 a8 40 0a 24 0b 24 b4 40
>0286b8	28 32 06 22 0b 24 0c 40 00 00 1a 00 7e 02 2e 3e
>0286c8	27 32 d4 cc 20 c9 1f c0 0d 26 12 c0 28 32 06 22
>0286d8	00 40 00 00 1e 00 7f 02 2e 3e 27 32 0b 24 05 10
>0286e8	d2 8b 0b 24 86 40 28 32 06 22 0b 24 05 10 58 8c
>0286f8	00 00 1e 00 80 02 2e 3e 27 32 0b 24 3c 40 03 20
>028708	02 10 83 a7 28 32 06 22 0b 24 02 10 b9 a7 00 00
>028718	1c 00 81 02 2e 3e 27 32 03 10 a6 ac 01 20 0b 24
>028728	2d 40 28 32 06 22 03 10 82 ac 00 00 1e 00 82 02
>028738	2e 3e 27 32 0b 24 02 10 33 a1 02 20 86 40 28 32
>028748	06 22 0b 24 02 10 31 a1 00 00 1e 00 83 02 2e 3e
>028758	27 32 27 cd 05 c0 0c 26 8a cd ba c0 28 32 06 22
>028768	0b 24 28 1c 23 76 00 00 1c 00 84 02 2e 3e 27 32
>028778	a7 a8 0a 24 c1 dc 1b d0 03 40 28 32 28 32 06 22
>028788	59 a8 00 00 1a 00 85 02 2e 3e 27 32 86 c5 0b 24
>028798	a8 40 28 32 06 22 0b 24 05 10 32 48 00 00 1c 00
>0287a8	86 02 2e 3e 27 32 a6 cd 14 c0 0d 26 5f cd 80 cc
>0287b8	0c c0 28 32 06 22 00 40 00 00 1e 00 87 02 2e 3e
>0287c8	27 32 86 40 0b 24 33 cd 7e c9 1e c0 28 32 06 22
>0287d8	0b 24 02 10 fd a6 00 00 1a 00 88 02 2e 3e 27 32
>0287e8	93 40 03 20 8d cd 09 c2 28 32 06 22 0b 24 92 85
>0287f8	00 00 18 00 89 02 2e 3e 27 32 f7 c4 03 20 0b 24
>028808	50 40 28 32 06 22 78 b1 00 00 1c 00 8a 02 2e 3e
>028818	27 32 03 10 a3 ae 02 20 0b 24 4e 40 28 32 06 22
>028828	0b 24 4d 40 00 00 1e 00 8b 02 2e 3e 27 32 d4 cc
>028838	20 c9 1f c0 0a 24 02 10 34 b0 28 32 06 22 02 10
>028848	3c b0 00 00 20 00 8c 02 2e 3e 27 32 0c ce fc cc
>028858	10 c0 0c 26 80 cd 0a c0 28 32 06 22 0b 24 47 10
>028868	64 56 00 00 1e 00 8d 02 2e 3e 27 32 a6 cd 14 c0
>028878	0b 24 04 10 ba a6 28 32 06 22 0b 24 04 10 27 a6
>028888	00 00 1c 00 8e 02 2e 3e 27 32 15 c0 0c 26 03 10
>028898	a3 ae 28 32 06 22 0b 24 b7 12 9c 8a 00 00 1a 00
>0288a8	8f 02 2e 3e 27 32 1a cd 0a c0 0d 26 01 10 74 8a
>0288b8	28 32 06 22 00 40 00 00 1e 00 90 02 2e 3e 27 32
>0288c8	67 ce 3e ce 0e c0 02 20 0b 24 03 85 28 32 06 22
>0288d8	0b 24 01 40 00 00 1c 00 91 02 2e 3e 27 32 8a cd
>0288e8	ba c0 02 20 d1 cd 24 c0 28 32 06 22 0b 24 79 4b
>0288f8	00 00 1c 00 92 02 2e 3e 27 32 0b 24 32 6a 0b 24
>028908	0b 24 42 40 28 32 06 22 0b 24 f0 69 00 00 1a 00
>028918	93 02 2e 3e 27 32 ee cc 09 c0 0c 26 d1 cd 24 c0
>028928	28 32 06 22 54 8a 00 00 1e 00 94 02 2e 3e 27 32
>028938	0b 24 b4 40 02 20 0b 24 05 10 11 5d 28 32 06 22
>028948	0b 24 11 40 00 00 1a 00 95 02 2e 3e 27 32 d4 cc
>028958	1c c0 02 20 28 40 28 32 06 22 03 10 ec 6f 00 00
>028968	20 00 96 02 2e 3e 27 32 0b 24 3c 40 03 20 d0 dc
>028978	b7 d3 02 40 28 32 28 32 06 22 03 10 42 73 00 00
>028988	1e 00 97 02 2e 3e 27 32 1a cd 0a c0 01 20 67 ce
>028998	3e ce 0e c0 28 32 06 22 0b 24 c0 40 00 00 1a 00
>0289a8	98 02 2e 3e 27 32 f7 c4 0c 26 0b 24 f9 4b 28 32
>0289b8	06 22 97 1a 78 47 00 00 1c 00 99 02 2e 3e 27 32
>0289c8	d4 cc 1c c0 02 20 0b 24 0f 40 28 32 06 22 0b 24
>0289d8	0b 40 00 00 1a 00 9a 02 2e 3e 27 32 01 10 fb 41
>0289e8	03 20 c3 40 28 32 06 22 01 10 38 41 00 00 1c 00
>0289f8	9b 02 2e 3e 27 32 0b 24 04 10 da aa 03 20 31 c6
>028a08	28 32 06 22 04 10 e2 aa 00 00 1c 00 9c 02 2e 3e
>028a18	27 32 03 10 a3 ae 01 20 0b 24 b4 40 28 32 06 22
>028a28	03 10 00 ae 00 00 22 00 9d 02 2e 3e 27 32 c1 dc
>028a38	1b d0 03 40 28 32 03 20 03 10 a6 ac 28 32 06 22
>028a48	0b 24 03 10 ec ac 00 00 24 00 9e 02 2e 3e 27 32
>028a58	2d dd a7 db 17 d0 03 40 28 32 03 20 0b 24 50 40
>028a68	28 32 06 22 0b 24 02 10 75 bc 00 00 1e 00 9f 02
>028a78	2e 3e 27 32 5d ce 10 cd 0b c0 03 20 28 40 28 32
>028a88	06 22 0b 24 05 10 fc 54 00 00 18 00 a0 02 2e 3e
>028a98	27 32 a8 40 01 20 01 10 72 44 28 32 06 22 20 40
>028aa8	00 00 1e 00 a1 02 2e 3e 27 32 0b 24 01 10 a2 5c
>028ab8	0c 26 0b 24 2d 40 28 32 06 22 37 10 7a 48 00 00
>028ac8	18 00 a2 02 2e 3e 27 32 24 cd 03 c0 0d 26 14 c0
>028ad8	28 32 06 22 00 40 00 00 1a 00 a3 02 2e 3e 27 32
>028ae8	0b 24 50 40 02 20 16 c0 28 32 06 22 0b 24 49 40
>028af8	00 00 1c 00 a4 02 2e 3e 27 32 05 10 27 84 0c 26
>028b08	15 c0 28 32 06 22 0b 24 e3 13 6c ab 00 00 1e 00
>028b18	a5 02 2e 3e 27 32 0b 24 32 6a 0c 26 ee cc 09 c0
>028b28	28 32 06 22 0b 24 2e 10 bc a7 00 00 1c 00 a6 02
>028b38	2e 3e 27 32 0b 24 50 40 03 20 d1 cd 24 c0 28 32
>028b48	06 22 0b 24 ca 40 00 00 1c 00 a7 02 2e 3e 27 32
>028b58	d0 cd ce c5 0b 24 15 c0 28 32 06 22 0b 24 02 10
>028b68	7f a0 00 00 1c 00 a8 02 2e 3e 27 32 0b 24 63 52
>028b78	0c 26 0b 24 bf 40 28 32 06 22 1b 10 dd 77 00 00
>028b88	1a 00 a9 02 2e 3e 27 32 41 ce df c5 0a 24 86 40
>028b98	28 32 06 22 04 10 e5 8c 00 00 16 00 aa 02 2e 3e
>028ba8	27 32 b4 40 0b 24 76 40 28 32 06 22 3e 40 00 00
>028bb8	20 00 ab 02 2e 3e 27 32 5f cd 80 cc 0c c0 0c 26
>028bc8	83 cd 71 c6 28 32 06 22 0b 24 cd 12 6c a0 00 00
>028bd8	18 00 ac 02 2e 3e 27 32 0b 24 2d 40 0d 26 3e c6
>028be8	28 32 06 22 00 40 00 00 1e 00 ad 02 2e 3e 27 32
>028bf8	1a cd 0a c0 0c 26 fb cc 09 c0 28 32 06 22 0b 24
>028c08	48 10 11 92 00 00 1c 00 ae 02 2e 3e 27 32 0b 24
>028c18	2d 40 02 20 0b 24 38 5c 28 32 06 22 0b 24 25 40
>028c28	00 00 18 00 af 02 2e 3e 27 32 0f c0 02 20 31 c6
>028c38	28 32 06 22 0b 24 0a 40 00 00 1a 00 b0 02 2e 3e
>028c48	27 32 0b 24 0f 40 0d 26 0b 24 2d 40 28 32 06 22
>028c58	00 40 00 00 18 00 b1 02 2e 3e 27 32 86 40 0a 24
>028c68	e5 c5 28 32 06 22 04 10 40 a7 00 00 1c 00 b2 02
>028c78	2e 3e 27 32 f9 cc 08 c0 03 20 0b 24 b4 40 28 32
>028c88	06 22 05 10 62 8b 00 00 1c 00 b3 02 2e 3e 27 32
>028c98	64 ce 16 c0 02 20 0b 24 4f 40 28 32 06 22 0b 24
>028ca8	03 40 00 00 1c 00 b4 02 2e 3e 27 32 0b c6 0b 24
>028cb8	05 10 e6 7a 28 32 06 22 0b 24 05 10 be 7a 00 00
>028cc8	1a 00 b5 02 2e 3e 27 32 04 10 5f 8c 0b 24 76 40
>028cd8	28 32 06 22 04 10 e9 8b 00 00 1a 00 b6 02 2e 3e
>028ce8	27 32 28 40 0c 26 02 10 07 62 28 32 06 22 5a 10
>028cf8	18 91 00 00 1a 00 b7 02 2e 3e 27 32 0b 24 3c 40
>028d08	0c 26 f7 c4 28 32 06 22 35 10 20 49 00 00 18 00
>028d18	b8 02 2e 3e 27 32 a6 cd 14 c0 03 20 93 40 28 32
>028d28	06 22 00 40 00 00 26 00 b9 02 2e 3e 27 32 5c dd
>028d38	f4 d3 00 40 28 32 02 20 12 de 09 db 0d d0 02 40
>028d48	28 32 28 32 06 22 0b 24 41 40 00 00 20 00 ba 02
>028d58	2e 3e 27 32 5c dd f4 d3 01 40 28 32 0a 24 0b 24
>028d68	3c 40 28 32 06 22 01 10 36 44 00 00 20 00 bb 02
>028d78	2e 3e 27 32 d7 cc f4 c0 0a 24 5c dd f4 d3 00 40
>028d88	28 32 28 32 06 22 05 10 a4 7a 00 00 1c 00 bc 02
>028d98	2e 3e 27 32 c1 dc 1b d0 00 40 28 32 01 20 8e 40
>028da8	28 32 06 22 00 40 00 00 1c 00 bd 02 2e 3e 27 32
>028db8	0b 24 b4 40 03 20 67 ce 3e ce 0e c0 28 32 06 22
>028dc8	0e 40 00 00 1a 00 be 02 2e 3e 27 32 0b 24 2d 40
>028dd8	0d 26 0b 24 0e bb 28 32 06 22 00 40 00 00 1e 00
>028de8	bf 02 2e 3e 27 32 0b 24 01 10 49 77 0d 26 0c ce
>028df8	fc cc 10 c0 28 32 06 22 12 44 00 00 1c 00 c0 02
>028e08	2e 3e 27 32 31 c6 0c 26 27 cd 05 c0 28 32 06 22
>028e18	0b 24 3c 10 d4 b6 00 00 1e 00 c1 02 2e 3e 27 32
>028e28	01 10 03 8b 02 20 67 ce 3e ce 0e c0 28 32 06 22
>028e38	0b 24 bd 40 00 00 1e 00 c2 02 2e 3e 27 32 0c ce
>028e48	fc cc 10 c0 0d 26 2f ce 8c cd 16 c0 28 32 06 22
>028e58	00 40 00 00 1e 00 c3 02 2e 3e 27 32 24 cd 03 c0
>028e68	0b 24 03 10 a3 ae 28 32 06 22 0b 24 03 10 2d ae
>028e78	00 00 1c 00 c4 02 2e 3e 27 32 22 dd 71 d4 01 40
>028e88	28 32 01 20 c3 40 28 32 06 22 82 40 00 00 26 00
>028e98	c5 02 2e 3e 27 32 0b 24 05 10 d4 54 02 20 2d dd
>028ea8	a7 db 17 d0 01 40 28 32 28 32 06 22 0b 24 05 10
>028eb8	94 54 00 00 1a 00 c6 02 2e 3e 27 32 8a cd ba c0
>028ec8	0b 24 28 40 28 32 06 22 0b 24 21 4c 00 00 1e 00
>028ed8	c7 02 2e 3e 27 32 34 de 2c d6 04 40 28 32 0c 26
>028ee8	c3 40 28 32 06 22 2d 14 28 43 00 00 18 00 c8 02
>028ef8	2e 3e 27 32 a8 40 01 20 0b 24 f3 a1 28 32 06 22
>028f08	08 40 00 00 18 00 c9 02 2e 3e 27 32 c3 40 03 20
>028f18	15 c0 28 32 06 22 0b 24 71 40 00 00 1a 00 ca 02
>028f28	2e 3e 27 32 8e 40 02 20 d4 cc 1c c0 28 32 06 22
>028f38	03 10 ce 6f 00 00 1a 00 cb 02 2e 3e 27 32 3e c6
>028f48	0a 24 31 c6 28 32 06 22 0b 24 01 10 de 5c 00 00
>028f58	1e 00 cc 02 2e 3e 27 32 2f ce 66 cc 1b c0 0d 26
>028f68	d4 cc 2a c4 28 32 06 22 0b 24 40 40 00 00 1c 00
>028f78	cd 02 2e 3e 27 32 03 10 c4 6f 01 20 0b 24 50 40
>028f88	28 32 06 22 03 10 80 6f 00 00 1e 00 ce 02 2e 3e
>028f98	27 32 0b 24 01 10 65 bb 03 20 08 40 28 32 06 22
>028fa8	0b 24 01 10 6d bb 00 00 1a 00 cf 02 2e 3e 27 32
>028fb8	01 10 eb a0 03 20 a8 40 28 32 06 22 01 10 43 a0
>028fc8	00 00 1a 00 d0 02 2e 3e 27 32 0b 24 50 40 0c 26
>028fd8	86 40 28 32 06 22 0b 24 e0 69 00 00 20 00 d1 02
>028fe8	2e 3e 27 32 15 c0 01 20 2d dd a7 db 17 d0 03 40
>028ff8	28 32 28 32 06 22 02 10 08 bc 00 00 1c 00 d2 02
>029008	2e 3e 27 32 a8 40 01 20 22 dd 71 d4 02 40 28 32
>029018	28 32 06 22 88 40 00 00 18 00 d3 02 2e 3e 27 32
>029028	31 c6 0c 26 f7 c4 28 32 06 22 35 10 20 49 00 00
>029038	18 00 d4 02 2e 3e 27 32 16 c0 0a 24 86 40 28 32
>029048	06 22 05 10 ad 84 00 00 1c 00 d5 02 2e 3e 27 32
>029058	0b 24 32 6a 0b 24 ee cc 09 c0 28 32 06 22 0b 24
>029068	c0 6a 00 00 20 00 d6 02 2e 3e 27 32 0b 24 f9 4b
>029078	0b 24 2d dd a7 db 17 d0 05 40 28 32 28 32 06 22
>029088	cb 49 00 00 1a 00 d7 02 2e 3e 27 32 15 c0 0a 24
>029098	0b 24 63 52 28 32 06 22 0b 24 17 53 00 00 1a 00
>0290a8	d8 02 2e 3e 27 32 04 10 5f 8c 02 20 c3 40 28 32
>0290b8	06 22 04 10 df 8c 00 00 1e 00 d9 02 2e 3e 27 32
>0290c8	ee cc 09 c0 0b 24 c1 dc 1b d0 03 40 28 32 28 32
>0290d8	06 22 dc 40 00 00 1e 00 da 02 2e 3e 27 32 03 10
>0290e8	a6 ac 03 20 0b 24 2d 40 28 32 06 22 0b 24 03 10
>0290f8	8b ac 00 00 20 00 db 02 2e 3e 27 32 05 10 29 45
>029108	0d 26 c4 dc 03 d0 05 40 28 32 28 32 06 22 0b 24
>029118	60 43 00 00 18 00 dc 02 2e 3e 27 32 15 c0 0c 26
>029128	12 c0 28 32 06 22 13 13 b4 ad 00 00 1e 00 dd 02
>029138	2e 3e 27 32 0b 24 04 10 41 70 02 20 0b 24 be 40
>029148	28 32 06 22 0b 24 01 40 00 00 1a 00 de 02 2e 3e
>029158	27 32 d4 cc 20 c9 1f c0 02 20 93 40 28 32 06 22
>029168	9b 40 00 00 22 00 df 02 2e 3e 27 32 a6 cd 14 c0
>029178	03 20 c4 dc 7d d1 01 40 28 32 28 32 06 22 0b 24
>029188	03 10 d0 be 00 00 1a 00 e0 02 2e 3e 27 32 0b 24
>029198	4e 40 02 20 23 c5 28 32 06 22 0b 24 01 40 00 00
>0291a8	1a 00 e1 02 2e 3e 27 32 86 40 01 20 0b 24 02 10
>0291b8	cb a5 28 32 06 22 04 40 00 00 1c 00 e2 02 2e 3e
>0291c8	27 32 e0 c5 0a 24 0b 24 be 40 28 32 06 22 0b 24
>0291d8	01 10 23 bc 00 00 1e 00 e3 02 2e 3e 27 32 0b 24
>0291e8	01 10 8a 9c 0b 24 86 40 28 32 06 22 0b 24 01 10
>0291f8	10 9d 00 00 1a 00 e4 02 2e 3e 27 32 13 c6 0a 24
>029208	1a cd 0a c0 28 32 06 22 01 10 d3 b4 00 00 1e 00
>029218	e5 02 2e 3e 27 32 0b 24 4f 40 0a 24 d0 cd ce c5
>029228	28 32 06 22 0b 24 02 10 82 a1 00 00 1a 00 e6 02
>029238	2e 3e 27 32 04 10 df ab 02 20 15 c0 28 32 06 22
>029248	0b 24 21 40 00 00 20 00 e7 02 2e 3e 27 32 01 10
>029258	fc 4c 03 20 67 ce 3e ce 0e c0 28 32 06 22 0b 24
>029268	01 10 42 4c 00 00 1e 00 e8 02 2e 3e 27 32 0c ce
>029278	fc cc 10 c0 02 20 ce cc 96 c2 28 32 06 22 0b 24
>029288	0d 40 00 00 1c 00 e9 02 2e 3e 27 32 ee cc 09 c0
>029298	02 20 03 10 d6 9b 28 32 06 22 03 10 de 9b 00 00
>0292a8	1c 00 ea 02 2e 3e 27 32 0b 24 05 10 8a 47 0d 26
>0292b8	0b 24 be 40 28 32 06 22 68 43 00 00 22 00 eb 02
>0292c8	2e 3e 27 32 80 cd 0a c0 0c 26 c4 dc 03 d0 03 40
>0292d8	28 32 28 32 06 22 0b 24 bc 10 ec 5b 00 00 18 00
>0292e8	ec 02 2e 3e 27 32 31 c6 0d 26 03 10 c4 6f 28 32
>0292f8	06 22 00 40 00 00 20 00 ed 02 2e 3e 27 32 31 c6
>029308	0c 26 c4 dc 03 d0 01 40 28 32 28 32 06 22 0b 24
>029318	5d 11 b8 94 00 00 1a 00 ee 02 2e 3e 27 32 0b 24
>029328	2d 40 01 20 16 c0 28 32 06 22 05 10 03 84 00 00
>029338	1c 00 ef 02 2e 3e 27 32 01 10 03 8b 0b 24 0b 24
>029348	0f 40 28 32 06 22 01 10 12 8b 00 00 1e 00 f0 02
>029358	2e 3e 27 32 03 10 a6 ac 0c 26 0b 24 50 40 28 32
>029368	06 22 0b 24 33 11 e0 b3 00 00 20 00 f1 02 2e 3e
>029378	27 32 24 cd 03 c0 02 20 0b 24 05 10 98 75 28 32
>029388	06 22 0b 24 05 10 82 75 00 00 1c 00 f2 02 2e 3e
>029398	27 32 31 c6 03 20 01 10 74 8a 28 32 06 22 0b 24
>0293a8	01 10 50 8a 00 00 1e 00 f3 02 2e 3e 27 32 0b 24
>0293b8	be 40 03 20 41 ce df c5 28 32 06 22 0b 24 04 10
>0293c8	e3 8c 00 00 1c 00 f4 02 2e 3e 27 32 33 cd 7e c9
>0293d8	1e c0 0c 26 8e 40 28 32 06 22 8e 11 aa aa 00 00
>0293e8	20 00 f5 02 2e 3e 27 32 0b 24 02 10 cb a5 0b 24
>0293f8	0b 24 0f 40 28 32 06 22 0b 24 02 10 bc a5 00 00
>029408	18 00 f6 02 2e 3e 27 32 0b c6 0a 24 ee cc 09 c0
>029418	28 32 06 22 b6 40 00 00 1c 00 f7 02 2e 3e 27 32
>029428	1a cd 61 cb 22 c0 0b 24 08 40 28 32 06 22 03 10
>029438	9b ae 00 00 1c 00 f8 02 2e 3e 27 32 0b 24 32 6a
>029448	0c 26 93 40 28 32 06 22 0b 24 30 10 b6 7a 00 00
>029458	18 00 f9 02 2e 3e 27 32 86 40 0b 24 0b 24 8c 7e
>029468	28 32 06 22 12 7f 00 00 1e 00 fa 02 2e 3e 27 32
>029478	0b 24 38 b1 0c 26 d1 cd 24 c0 28 32 06 22 0b 24
>029488	76 10 50 83 00 00 1a 00 fb 02 2e 3e 27 32 0b 24
>029498	0f 40 0d 26 06 10 51 43 28 32 06 22 00 40 00 00
>0294a8	18 00 fc 02 2e 3e 27 32 80 cd 0a c0 01 20 0b c6
>0294b8	28 32 06 22 20 40 00 00 1c 00 fd 02 2e 3e 27 32
>0294c8	0b 24 b4 40 0a 24 0f c0 28 32 06 22 0b 24 01 10
>0294d8	3e 9d 00 00 1a 00 fe 02 2e 3e 27 32 83 cd 71 c6
>0294e8	01 20 03 10 a6 ac 28 32 06 22 82 40 00 00 1a 00
>0294f8	ff 02 2e 3e 27 32 c3 40 03 20 0b 24 63 52 28 32
>029508	06 22 0b 24 a2 52 00 00 16 00 00 03 2e 3e 27 32
>029518	8e 40 01 20 8e 40 28 32 06 22 8e 40 00 00 1a 00
>029528	01 03 2e 3e 27 32 ee cc 09 c0 01 20 0b 24 d7 9e
>029538	28 32 06 22 08 40 00 00 1e 00 02 03 2e 3e 27 32
>029548	02 10 34 b0 0a 24 0c ce fc cc 10 c0 28 32 06 22
>029558	02 10 07 b0 00 00 1a 00 03 03 2e 3e 27 32 76 c5
>029568	03 20 24 cd 03 c0 28 32 06 22 02 10 80 69 00 00
>029578	1a 00 04 03 2e 3e 27 32 c3 40 01 20 5d ce 10 cd
>029588	0b c0 28 32 06 22 00 40 00 00 1c 00 05 03 2e 3e
>029598	27 32 04 10 ba a6 0a 24 ee cc 09 c0 28 32 06 22
>0295a8	04 10 48 a7 00 00 1c 00 06 03 2e 3e 27 32 0b 24
>0295b8	b4 40 0c 26 0b 24 03 85 28 32 06 22 61 10 1c 46
>0295c8	00 00 1c 00 07 03 2e 3e 27 32 24 cd 03 c0 02 20
>0295d8	23 c5 28 32 06 22 0b 24 05 10 01 5d 00 00 1c 00
>0295e8	08 03 2e 3e 27 32 0b 24 b4 40 0a 24 0b 24 69 40
>0295f8	28 32 06 22 0b 24 1d 41 00 00 22 00 09 03 2e 3e
>029608	27 32 5c dd f4 d3 02 40 28 32 0b 24 0c ce fc cc
>029618	10 c0 28 32 06 22 0b 24 5f 7e 00 00 1a 00 0a 03
>029628	2e 3e 27 32 01 10 e2 b4 0d 26 83 cd 71 c6 28 32
>029638	06 22 41 41 00 00 1e 00 0b 03 2e 3e 27 32 02 10
>029648	ca 76 02 20 0c ce fc cc 10 c0 28 32 06 22 0b 24
>029658	25 40 00 00 1a 00 0c 03 2e 3e 27 32 15 c0 01 20
>029668	01 10 b0 4d 28 32 06 22 01 10 00 4d 00 00 1e 00
>029678	0d 03 2e 3e 27 32 d0 cd ce c5 0a 24 d4 cc 2a c4
>029688	28 32 06 22 0b 24 02 10 8b a0 00 00 1c 00 0e 03
>029698	2e 3e 27 32 41 ce df c5 0a 24 02 cd 67 c2 28 32
>0296a8	06 22 04 10 0f 8c 00 00 1e 00 0f 03 2e 3e 27 32
>0296b8	41 ce df c5 02 20 d4 cc 20 c9 1f c0 28 32 06 22
>0296c8	04 10 5f 8c 00 00 1e 00 10 03 2e 3e 27 32 0b 24
>0296d8	b4 40 0c 26 2f ce 66 cc 1b c0 28 32 06 22 3b 10
>0296e8	28 6b 00 00 18 00 11 03 2e 3e 27 32 14 c0 0b 24
>0296f8	0b 24 77 40 28 32 06 22 e6 8e 00 00 1a 00 12 03
>029708	2e 3e 27 32 0b 24 42 40 0c 26 0b 24 be 40 28 32
>029718	06 22 fc 70 00 00 1a 00 13 03 2e 3e 27 32 a8 40
>029728	0d 26 0b 24 01 10 49 77 28 32 06 22 00 40 00 00
>029738	1c 00 14 03 2e 3e 27 32 01 10 fc 4c 0b 24 d1 cd
>029748	24 c0 28 32 06 22 01 10 76 4c 00 00 1a 00 15 03
>029758	2e 3e 27 32 83 cd 71 c6 01 20 b8 cd 21 c0 28 32
>029768	06 22 80 40 00 00 20 00 16 03 2e 3e 27 32 a6 cd
>029778	14 c0 0c 26 0b 24 02 10 33 a1 28 32 06 22 0b 24
>029788	95 11 49 90 00 00 18 00 17 03 2e 3e 27 32 2b ce
>029798	1d c0 01 20 86 40 28 32 06 22 82 40 00 00 1a 00
>0297a8	18 03 2e 3e 27 32 24 cd 03 c0 0b 24 a7 a8 28 32
>0297b8	06 22 0b 24 31 a8 00 00 18 00 19 03 2e 3e 27 32
>0297c8	0b c6 0c 26 83 cd 71 c6 28 32 06 22 78 5e 00 00
>0297d8	1e 00 1a 03 2e 3e 27 32 02 10 14 85 0d 26 c4 dc
>0297e8	7d d1 03 40 28 32 28 32 06 22 ce 41 00 00 20 00
>0297f8	1b 03 2e 3e 27 32 2f ce 8c cd 16 c0 03 20 0b 24
>029808	50 40 28 32 06 22 0b 24 02 10 86 76 00 00 1e 00
>029818	1c 03 2e 3e 27 32 67 ce 3e ce 0e c0 02 20 d0 cd
>029828	ce c5 28 32 06 22 0b 24 31 40 00 00 1a 00 1d 03
>029838	2e 3e 27 32 0b 24 bf 40 0c 26 0b 24 2d 40 28 32
>029848	06 22 93 61 00 00 1a 00 1e 03 2e 3e 27 32 ee cc
>029858	09 c0 03 20 ee cc 09 c0 28 32 06 22 00 40 00 00
>029868	1c 00 1f 03 2e 3e 27 32 d7 cc f4 c0 0a 24 0b 24
>029878	3c 40 28 32 06 22 05 10 aa 7a 00 00 1a 00 20 03
>029888	2e 3e 27 32 ee cc 09 c0 01 20 0b 24 2d 40 28 32
>029898	06 22 82 40 00 00 1a 00 21 03 2e 3e 27 32 8e 40
>0298a8	02 20 86 c5 28 32 06 22 0b 24 05 10 02 47 00 00
>0298b8	18 00 22 03 2e 3e 27 32 31 c6 0b 24 08 40 28 32
>0298c8	06 22 0b 24 44 40 00 00 22 00 23 03 2e 3e 27 32
>0298d8	5c dd f4 d3 00 40 28 32 03 20 0b 24 01 10 a2 5c
>0298e8	28 32 06 22 01 10 e0 5c 00 00 1e 00 24 03 2e 3e
>0298f8	27 32 0b 24 01 10 78 b0 0c 26 60 40 28 32 06 22
>029908	0b 24 b4 10 00 6d 00 00 1a 00 25 03 2e 3e 27 32
>029918	0b c6 01 20 0b 24 04 10 da aa 28 32 06 22 20 40
>029928	00 00 1e 00 26 03 2e 3e 27 32 76 40 0a 24 0b 24
>029938	05 10 d4 54 28 32 06 22 0b 24 05 10 5e 54 00 00
>029948	1a 00 27 03 2e 3e 27 32 0b 24 0f 40 02 20 07 c0
>029958	28 32 06 22 0b 24 09 40 00 00 1e 00 28 03 2e 3e
>029968	27 32 83 7d 0c 26 67 ce 3e ce 0e c0 28 32 06 22
>029978	0b 24 5b 10 3a 67 00 00 1a 00 29 03 2e 3e 27 32
>029988	ee cc 09 c0 03 20 f7 c4 28 32 06 22 0b 24 ba b1
>029998	00 00 18 00 2a 03 2e 3e 27 32 ee cc 09 c0 01 20
>0299a8	08 40 28 32 06 22 08 40 00 00 1a 00 2b 03 2e 3e
>0299b8	27 32 0b c6 0d 26 0b 24 05 10 8a 47 28 32 06 22
>0299c8	00 40 00 00 18 00 2c 03 2e 3e 27 32 0b c6 0d 26
>0299d8	80 cd 0a c0 28 32 06 22 00 40 00 00 1c 00 2d 03
>0299e8	2e 3e 27 32 2f ce 66 cc 1b c0 03 20 0b 24 3c 40
>0299f8	28 32 06 22 0a 6a 00 00 1c 00 2e 03 2e 3e 27 32
>029a08	0b 24 0e bb 0a 24 0b 24 0f 40 28 32 06 22 0b 24
>029a18	1d bb 00 00 1c 00 2f 03 2e 3e 27 32 2b ce 1d c0
>029a28	0d 26 1a cd 0a c0 28 32 06 22 0b 24 ec 40 00 00
>029a38	18 00 30 03 2e 3e 27 32 db 4d 02 20 24 cd 03 c0
>029a48	28 32 06 22 ff 4d 00 00 18 00 31 03 2e 3e 27 32
>029a58	c3 40 03 20 31 c6 28 32 06 22 0b 24 f9 40 00 00
>029a68	1a 00 32 03 2e 3e 27 32 0b 24 f9 4b 03 20 0b 24
>029a78	0f 40 28 32 06 22 f6 4b 00 00 1a 00 33 03 2e 3e
>029a88	27 32 db 4d 02 20 0b 24 63 52 28 32 06 22 0b 24
>029a98	21 52 00 00 1a 00 34 03 2e 3e 27 32 0b 24 f9 4b
>029aa8	02 20 a8 40 28 32 06 22 0b 24 51 4b 00 00 18 00
>029ab8	35 03 2e 3e 27 32 db 4d 0d 26 31 c6 28 32 06 22
>029ac8	0b 24 3b 40 00 00 18 00 36 03 2e 3e 27 32 a6 cd
>029ad8	14 c0 0a 24 0b c6 28 32 06 22 bb 40 00 00 1c 00
>029ae8	37 03 2e 3e 27 32 ee cc 09 c0 0a 24 0b 24 0e bb
>029af8	28 32 06 22 0b 24 80 ba 00 00 1a 00 38 03 2e 3e
>029b08	27 32 09 ce 14 c0 03 20 08 40 28 32 06 22 02 10
>029b18	0f 62 00 00 26 00 39 03 2e 3e 27 32 c4 dc 7d d1
>029b28	03 40 28 32 02 20 2d dd a7 db 17 d0 05 40 28 32
>029b38	28 32 06 22 0b 24 44 55 00 00 1c 00 3a 03 2e 3e
>029b48	27 32 41 ce df c5 0d 26 0b 24 50 40 28 32 06 22
>029b58	0b 24 5a 47 00 00 1c 00 3b 03 2e 3e 27 32 41 ce
>029b68	df c5 0a 24 0b 24 0f 40 28 32 06 22 04 10 50 8c
>029b78	00 00 18 00 3c 03 2e 3e 27 32 a7 a8 0a 24 0b 24
>029b88	be 40 28 32 06 22 e9 a7 00 00 1e 00 3d 03 2e 3e
>029b98	27 32 d0 cd ce c5 0c 26 d1 cd 24 c0 28 32 06 22
>029ba8	0b 24 71 11 b2 a0 00 00 1c 00 3e 03 2e 3e 27 32
>029bb8	16 c0 0c 26 0b 24 50 40 28 32 06 22 0b 24 ba 11
>029bc8	30 8c 00 00 1a 00 3f 03 2e 3e 27 32 31 c6 0a 24
>029bd8	01 c0 28 32 06 22 0b 24 02 10 07 a6 00 00 1c 00
>029be8	40 03 2e 3e 27 32 0b 24 b4 40 01 20 0b 24 50 40
>029bf8	28 32 06 22 0b 24 00 41 00 00 1c 00 41 03 2e 3e
>029c08	27 32 c3 40 0c 26 0b 24 38 5c 28 32 06 22 0b 24
>029c18	2a 10 a8 be 00 00 1c 00 42 03 2e 3e 27 32 0b c6
>029c28	02 20 f9 cc 08 c0 28 32 06 22 0b 24 05 10 d2 8b
>029c38	00 00 1a 00 43 03 2e 3e 27 32 93 40 0a 24 01 10
>029c48	b0 4d 28 32 06 22 01 10 43 4e 00 00 1c 00 44 03
>029c58	2e 3e 27 32 0b 24 03 85 0d 26 0c ce fc cc 10 c0
>029c68	28 32 06 22 88 41 00 00 1c 00 45 03 2e 3e 27 32
>029c78	a8 40 02 20 7d cd f7 c8 0f c0 28 32 06 22 01 10
>029c88	ab 8b 00 00 1c 00 46 03 2e 3e 27 32 0b 24 2d 40
>029c98	01 20 02 10 ca 76 28 32 06 22 02 10 c2 76 00 00
>029ca8	1e 00 47 03 2e 3e 27 32 2f ce 8c cd 16 c0 0d 26
>029cb8	02 cd 67 c2 28 32 06 22 0b 24 e2 43 00 00 1c 00
>029cc8	48 03 2e 3e 27 32 0b c6 02 20 33 cd 7e c9 1e c0
>029cd8	28 32 06 22 02 10 ab a7 00 00 1a 00 49 03 2e 3e
>029ce8	27 32 0b 24 77 40 0c 26 f7 c4 28 32 06 22 69 10
>029cf8	08 61 00 00 1c 00 4a 03 2e 3e 27 32 24 cd 03 c0
>029d08	02 20 01 10 74 8a 28 32 06 22 01 10 76 8a 00 00
>029d18	1e 00 4b 03 2e 3e 27 32 0b 24 02 10 8a 7f 0b 24
>029d28	93 40 28 32 06 22 0b 24 02 10 1d 80 00 00 1a 00
>029d38	4c 03 2e 3e 27 32 a6 cd 14 c0 02 20 83 cd 71 c6
>029d48	28 32 06 22 d3 40 00 00 1c 00 4d 03 2e 3e 27 32
>029d58	05 10 b8 7d 0d 26 0b 24 be 40 28 32 06 22 0b 24
>029d68	b1 43 00 00 20 00 4e 03 2e 3e 27 32 0b 24 04 10
>029d78	da aa 01 20 0b 24 be 40 28 32 06 22 0b 24 04 10
>029d88	fe aa 00 00 1e 00 4f 03 2e 3e 27 32 01 10 e2 b4
>029d98	0b 24 0c ce fc cc 10 c0 28 32 06 22 01 10 0f b5
>029da8	00 00 16 00 50 03 2e 3e 27 32 76 40 0a 24 d7 c5
>029db8	28 32 06 22 f9 7d 00 00 1a 00 51 03 2e 3e 27 32
>029dc8	83 cd 71 c6 02 20 24 cd 03 c0 28 32 06 22 f7 40
>029dd8	00 00 1a 00 52 03 2e 3e 27 32 15 c0 0d 26 2f ce
>029de8	66 cc 1b c0 28 32 06 22 00 40 00 00 1e 00 53 03
>029df8	2e 3e 27 32 0b 24 b4 40 0a 24 7d cd f7 c8 0f c0
>029e08	28 32 06 22 01 10 4f 8a 00 00 1c 00 54 03 2e 3e
>029e18	27 32 03 10 d6 9b 02 20 0b 24 50 40 28 32 06 22
>029e28	0b 24 0a 40 00 00 1e 00 55 03 2e 3e 27 32 0b 24
>029e38	bf 40 03 20 0b 24 03 10 b0 a2 28 32 06 22 03 10
>029e48	11 a2 00 00 18 00 56 03 2e 3e 27 32 6f 8e 0c 26
>029e58	28 40 28 32 06 22 18 10 58 81 00 00 1a 00 57 03
>029e68	2e 3e 27 32 03 10 c4 6f 0d 26 15 c0 28 32 06 22
>029e78	0b 24 66 42 00 00 1e 00 58 03 2e 3e 27 32 34 de
>029e88	2c d6 01 40 28 32 0a 24 76 40 28 32 06 22 01 10
>029e98	f0 60 00 00 1e 00 59 03 2e 3e 27 32 c1 dc 1b d0
>029ea8	01 40 28 32 0d 26 d4 cc 1c c0 28 32 06 22 00 40
>029eb8	00 00 1c 00 5a 03 2e 3e 27 32 0b 24 32 6a 0a 24
>029ec8	2b ce 1d c0 28 32 06 22 0b 24 57 5c 00 00 18 00
>029ed8	5b 03 2e 3e 27 32 28 40 0a 24 15 c0 28 32 06 22
>029ee8	0b 24 8c 40 00 00 1c 00 5c 03 2e 3e 27 32 1a cd
>029ef8	0a c0 0c 26 0b 24 38 b1 28 32 06 22 0d 10 48 62
>029f08	00 00 18 00 5d 03 2e 3e 27 32 04 10 5d 7c 0d 26
>029f18	08 40 28 32 06 22 8b 87 00 00 1e 00 5e 03 2e 3e
>029f28	27 32 2f ce 66 cc 1b c0 01 20 0b 24 77 40 28 32
>029f38	06 22 0b 24 78 6a 00 00 1c 00 5f 03 2e 3e 27 32
>029f48	08 40 0c 26 0b 24 32 6a 28 32 06 22 0b 24 02 10
>029f58	90 91 00 00 1c 00 60 03 2e 3e 27 32 02 cd 67 c2
>029f68	01 20 04 10 a7 a4 28 32 06 22 04 10 a0 a4 00 00
>029f78	1a 00 61 03 2e 3e 27 32 0b 24 b4 40 0a 24 8e 40
>029f88	28 32 06 22 0b 24 26 40 00 00 1e 00 62 03 2e 3e
>029f98	27 32 c1 dc 1b d0 01 40 28 32 0d 26 03 10 c4 6f
>029fa8	28 32 06 22 00 40 00 00 1c 00 63 03 2e 3e 27 32
>029fb8	0b 24 0f 40 0a 24 80 cd 0a c0 28 32 06 22 01 10
>029fc8	65 8a 00 00 1e 00 64 03 2e 3e 27 32 08 40 02 20
>029fd8	0b 24 02 10 0e 47 28 32 06 22 0b 24 02 10 06 47
>029fe8	00 00 1c 00 65 03 2e 3e 27 32 83 cd 71 c6 02 20
>029ff8	02 10 07 62 28 32 06 22 02 10 c7 62 00 00 1c 00
>02a008	66 03 2e 3e 27 32 61 ce 02 c0 02 20 0b 24 f9 4b
>02a018	28 32 06 22 0b 24 59 43 00 00 22 00 67 03 2e 3e
>02a028	27 32 d7 cc f4 c0 0c 26 5c dd f4 d3 00 40 28 32
>02a038	28 32 06 22 0b 24 68 11 4c 6f 00 00 18 00 68 03
>02a048	2e 3e 27 32 0b 24 3c 40 0b 24 f7 c4 28 32 06 22
>02a058	fc b0 00 00 1c 00 69 03 2e 3e 27 32 d4 cc 1c c0
>02a068	02 20 02 cd 67 c2 28 32 06 22 0b 24 0c 40 00 00
>02a078	20 00 6a 03 2e 3e 27 32 0b 24 02 10 0e 47 0a 24
>02a088	d4 cc 2a c4 28 32 06 22 0b 24 02 10 66 46 00 00
>02a098	1a 00 6b 03 2e 3e 27 32 8e 40 01 20 1a cd 61 cb
>02a0a8	22 c0 28 32 06 22 82 40 00 00 1c 00 6c 03 2e 3e
>02a0b8	27 32 04 10 ba a6 0d 26 02 cd 67 c2 28 32 06 22
>02a0c8	0b 24 af 47 00 00 1a 00 6d 03 2e 3e 27 32 28 40
>02a0d8	02 20 05 10 39 6e 28 32 06 22 05 10 39 6e 00 00
>02a0e8	1e 00 6e 03 2e 3e 27 32 f9 cc 08 c0 0b 24 0b 24
>02a0f8	3c 40 28 32 06 22 0b 24 05 10 96 8b 00 00 1a 00
>02a108	6f 03 2e 3e 27 32 14 c0 03 20 0b 24 be 40 28 32
>02a118	06 22 0b 24 d3 8e 00 00 1a 00 70 03 2e 3e 27 32
>02a128	28 40 0c 26 01 10 b0 4d 28 32 06 22 2c 10 80 63
>02a138	00 00 20 00 71 03 2e 3e 27 32 c4 dc 03 d0 05 40
>02a148	28 32 0b 24 13 c6 28 32 06 22 0b 24 01 10 a1 b5
>02a158	00 00 1a 00 72 03 2e 3e 27 32 03 10 d6 9b 0b 24
>02a168	86 40 28 32 06 22 03 10 50 9b 00 00 1a 00 73 03
>02a178	2e 3e 27 32 15 c0 0a 24 01 10 b0 4d 28 32 06 22
>02a188	01 10 fc 4c 00 00 1e 00 74 03 2e 3e 27 32 5c dd
>02a198	f4 d3 00 40 28 32 0d 26 01 10 58 5d 28 32 06 22
>02a1a8	00 40 00 00 18 00 75 03 2e 3e 27 32 93 40 0b 24
>02a1b8	a8 40 28 32 06 22 0b 24 15 40 00 00 18 00 76 03
>02a1c8	2e 3e 27 32 a8 40 0a 24 15 c0 28 32 06 22 0b 24
>02a1d8	0c 40 00 00 1e 00 77 03 2e 3e 27 32 0b 24 b4 40
>02a1e8	0c 26 09 ce 14 c0 28 32 06 22 0b 24 97 11 ec ac
>02a1f8	00 00 1a 00 78 03 2e 3e 27 32 0b 24 2d 40 02 20
>02a208	93 40 28 32 06 22 0b 24 2d 40 00 00 20 00 79 03
>02a218	2e 3e 27 32 d4 cc 20 c9 1f c0 0c 26 0b 24 0e bb
>02a228	28 32 06 22 0b 24 07 10 70 98 00 00 1c 00 7a 03
>02a238	2e 3e 27 32 2f ce 8c cd 16 c0 0c 26 c3 40 28 32
>02a248	06 22 d9 11 de 7b 00 00 1a 00 7b 03 2e 3e 27 32
>02a258	0b 24 77 40 01 20 e5 c5 28 32 06 22 04 10 88 a6
>02a268	00 00 1a 00 7c 03 2e 3e 27 32 83 7d 0a 24 d4 cc
>02a278	20 c9 1f c0 28 32 06 22 8b 7d 00 00 1e 00 7d 03
>02a288	2e 3e 27 32 2f ce 66 cc 1b c0 02 20 5a cd 25 c1
>02a298	28 32 06 22 0b 24 21 42 00 00 1e 00 7e 03 2e 3e
>02a2a8	27 32 2f ce 8c cd 16 c0 0b 24 0b 24 50 40 28 32
>02a2b8	06 22 02 10 1a 77 00 00 1c 00 7f 03 2e 3e 27 32
>02a2c8	5c dd f4 d3 00 40 28 32 0d 26 db 4d 28 32 06 22
>02a2d8	00 40 00 00 1a 00 80 03 2e 3e 27 32 24 cd 03 c0
>02a2e8	0a 24 f7 c4 28 32 06 22 0b 24 c2 b0 00 00 1e 00
>02a2f8	81 03 2e 3e 27 32 67 ce 3e ce 0e c0 01 20 0b 24
>02a308	32 6a 28 32 06 22 0b 24 be 6a 00 00 1a 00 82 03
>02a318	2e 3e 27 32 0b 24 01 10 49 77 01 20 08 40 28 32
>02a328	06 22 00 40 00 00 1e 00 83 03 2e 3e 27 32 2f ce
>02a338	8c cd 16 c0 0b 24 24 cd 03 c0 28 32 06 22 02 10
>02a348	54 76 00 00 1a 00 84 03 2e 3e 27 32 b5 40 0a 24
>02a358	0b 24 f9 4b 28 32 06 22 0b 24 44 4b 00 00 1c 00
>02a368	85 03 2e 3e 27 32 0b 24 42 40 03 20 fc c4 28 32
>02a378	06 22 0b 24 03 10 e8 ac 00 00 18 00 86 03 2e 3e
>02a388	27 32 08 40 0b 24 a8 40 28 32 06 22 0b 24 a0 40
>02a398	00 00 18 00 87 03 2e 3e 27 32 d4 cc 2a c4 01 20
>02a3a8	12 c0 28 32 06 22 a8 40 00 00 1a 00 88 03 2e 3e
>02a3b8	27 32 27 cd 05 c0 0d 26 d4 cc 2a c4 28 32 06 22
>02a3c8	c6 40 00 00 1c 00 89 03 2e 3e 27 32 d1 cd 24 c0
>02a3d8	0c 26 64 ce 16 c0 28 32 06 22 93 10 e8 8b 00 00
>02a3e8	1a 00 8a 03 2e 3e 27 32 08 40 01 20 0b 24 05 10
>02a3f8	11 5d 28 32 06 22 08 40 00 00 1e 00 8b 03 2e 3e
>02a408	27 32 22 dd 71 d4 00 40 28 32 03 20 31 c6 28 32
>02a418	06 22 03 10 94 a2 00 00 1c 00 8c 03 2e 3e 27 32
>02a428	a6 cd 14 c0 0a 24 d4 cc 1c c0 28 32 06 22 03 10
>02a438	57 70 00 00 18 00 8d 03 2e 3e 27 32 0b 24 f9 4b
>02a448	01 20 a7 a8 28 32 06 22 07 a0 00 00 1a 00 8e 03
>02a458	2e 3e 27 32 c3 40 03 20 03 10 d6 9b 28 32 06 22
>02a468	03 10 15 9b 00 00 1c 00 8f 03 2e 3e 27 32 33 cd
>02a478	7e c9 1e c0 02 20 a8 40 28 32 06 22 02 10 ab a7
>02a488	00 00 26 00 90 03 2e 3e 27 32 2d dd a7 db 17 d0
>02a498	00 40 28 32 02 20 c4 dc 03 d0 05 40 28 32 28 32
>02a4a8	06 22 0b 24 01 40 00 00 1c 00 91 03 2e 3e 27 32
>02a4b8	31 c6 0b 24 09 ce 14 c0 28 32 06 22 0b 24 02 10
>02a4c8	43 62 00 00 20 00 92 03 2e 3e 27 32 27 cd 05 c0
>02a4d8	03 20 c4 dc 7d d1 03 40 28 32 28 32 06 22 01 10
>02a4e8	4f 41 00 00 18 00 93 03 2e 3e 27 32 b5 40 01 20
>02a4f8	0b 24 f9 4b 28 32 06 22 05 40 00 00 20 00 94 03
>02a508	2e 3e 27 32 0b 24 01 10 65 bb 0c 26 24 cd 03 c0
>02a518	28 32 06 22 0b 24 e7 10 8e a0 00 00 1c 00 95 03
>02a528	2e 3e 27 32 04 10 ba a6 02 20 ee cc 09 c0 28 32
>02a538	06 22 04 10 be a6 00 00 1a 00 96 03 2e 3e 27 32
>02a548	b8 cd 21 c0 0c 26 0b c6 28 32 06 22 2c 10 80 63
>02a558	00 00 1a 00 97 03 2e 3e 27 32 ce cc 96 c2 03 20
>02a568	0b 24 0f 40 28 32 06 22 03 bb 00 00 1c 00 98 03
>02a578	2e 3e 27 32 83 cd 71 c6 02 20 3e c6 28 32 06 22
>02a588	0b 24 01 10 21 5c 00 00 1c 00 99 03 2e 3e 27 32
>02a598	67 ce 3e ce 0e c0 02 20 e0 c5 28 32 06 22 0b 24
>02a5a8	25 40 00 00 1a 00 9a 03 2e 3e 27 32 31 c6 02 20
>02a5b8	d7 cc f4 c0 28 32 06 22 0b 24 1a 40 00 00 1c 00
>02a5c8	9b 03 2e 3e 27 32 0b 24 2d 40 02 20 02 10 ca 76
>02a5d8	28 32 06 22 0b 24 25 40 00 00 1c 00 9c 03 2e 3e
>02a5e8	27 32 c2 cc 69 c5 0b 24 0b 24 2d 40 28 32 06 22
>02a5f8	0b 24 0b 5c 00 00 20 00 9d 03 2e 3e 27 32 1a cd
>02a608	61 cb 22 c0 03 20 0b 24 50 40 28 32 06 22 0b 24
>02a618	03 10 ed ae 00 00 16 00 9e 03 2e 3e 27 32 8e 40
>02a628	0d 26 8e 40 28 32 06 22 01 40 00 00 1c 00 9f 03
>02a638	2e 3e 27 32 0b 24 be 40 0d 26 0b 24 03 10 24 97
>02a648	28 32 06 22 00 40 00 00 1a 00 a0 03 2e 3e 27 32
>02a658	0b 24 8c 7e 03 20 08 40 28 32 06 22 0b 24 84 7e
>02a668	00 00 20 00 a1 03 2e 3e 27 32 67 ce 3e ce 0e c0
>02a678	0c 26 d4 cc 20 c9 1f c0 28 32 06 22 0b 24 f0 45
>02a688	00 00 1c 00 a2 03 2e 3e 27 32 d4 cc 20 c9 1f c0
>02a698	03 20 76 c5 28 32 06 22 02 10 fe 69 00 00 1a 00
>02a6a8	a3 03 2e 3e 27 32 0b 24 0f 40 0d 26 0b 24 32 6a
>02a6b8	28 32 06 22 00 40 00 00 18 00 a4 03 2e 3e 27 32
>02a6c8	08 40 01 20 0b 24 3c 40 28 32 06 22 00 40 00 00
>02a6d8	1a 00 a5 03 2e 3e 27 32 38 86 0d 26 0b 24 42 40
>02a6e8	28 32 06 22 0b 24 10 41 00 00 24 00 a6 03 2e 3e
>02a6f8	27 32 c4 dc 03 d0 02 40 28 32 0a 24 0b 24 02 10
>02a708	33 a1 28 32 06 22 0b 24 02 10 9c a1 00 00 18 00
>02a718	a7 03 2e 3e 27 32 28 40 01 20 01 10 e2 b4 28 32
>02a728	06 22 20 40 00 00 1c 00 a8 03 2e 3e 27 32 31 c6
>02a738	03 20 0b 24 01 10 49 77 28 32 06 22 01 10 73 77
>02a748	00 00 1e 00 a9 03 2e 3e 27 32 02 cd 67 c2 03 20
>02a758	03 10 a3 ae 28 32 06 22 0b 24 03 10 ed ae 00 00
>02a768	1a 00 aa 03 2e 3e 27 32 31 c6 03 20 d4 cc 2a c4
>02a778	28 32 06 22 0b 24 94 40 00 00 20 00 ab 03 2e 3e
>02a788	27 32 0b 24 02 10 33 a1 0b 24 0b 24 2d 40 28 32
>02a798	06 22 0b 24 02 10 06 a1 00 00 1c 00 ac 03 2e 3e
>02a7a8	27 32 e0 c5 0a 24 0b 24 2d 40 28 32 06 22 0b 24
>02a7b8	01 10 92 bb 00 00 1c 00 ad 03 2e 3e 27 32 d1 cd
>02a7c8	24 c0 0d 26 7d cd f7 c8 0f c0 28 32 06 22 00 40
>02a7d8	00 00 1a 00 ae 03 2e 3e 27 32 12 c0 01 20 d4 cc
>02a7e8	20 c9 1f c0 28 32 06 22 08 40 00 00 1a 00 af 03
>02a7f8	2e 3e 27 32 02 cd 67 c2 0b 24 db 4d 28 32 06 22
>02a808	0b 24 2b 4e 00 00 1e 00 b0 03 2e 3e 27 32 0b 24
>02a818	01 10 a2 5c 0c 26 c3 40 28 32 06 22 0b 24 ee 10
>02a828	66 8f 00 00 20 00 b1 03 2e 3e 27 32 d1 cd 24 c0
>02a838	02 20 0b 24 01 10 8a 9c 28 32 06 22 0b 24 01 10
>02a848	0a 9c 00 00 1e 00 b2 03 2e 3e 27 32 0b 24 0f 40
>02a858	03 20 01 10 e2 b4 28 32 06 22 0b 24 01 10 ed b4
>02a868	00 00 1c 00 b3 03 2e 3e 27 32 a8 40 03 20 d0 cd
>02a878	ce c5 28 32 06 22 0b 24 02 10 9b a1 00 00 1e 00
>02a888	b4 03 2e 3e 27 32 0c ce fc cc 10 c0 02 20 d4 cc
>02a898	2a c4 28 32 06 22 0b 24 05 40 00 00 1e 00 b5 03
>02a8a8	2e 3e 27 32 0b 24 50 40 0c 26 80 cd 0a c0 28 32
>02a8b8	06 22 0b 24 7e 10 40 84 00 00 1e 00 b6 03 2e 3e
>02a8c8	27 32 d0 cd ce c5 0a 24 1a cd 0a c0 28 32 06 22
>02a8d8	0b 24 02 10 42 a1 00 00 18 00 b7 03 2e 3e 27 32
>02a8e8	a7 a8 02 20 31 c6 28 32 06 22 0b 24 19 40 00 00
>02a8f8	1c 00 b8 03 2e 3e 27 32 e5 c5 03 20 1a cd 0a c0
>02a908	28 32 06 22 0b 24 04 10 b5 a6 00 00 1c 00 b9 03
>02a918	2e 3e 27 32 22 c5 02 20 d4 cc 2a c4 28 32 06 22
>02a928	0b 24 01 10 58 b0 00 00 16 00 ba 03 2e 3e 27 32
>02a938	d7 c5 0a 24 a8 40 28 32 06 22 2b 7e 00 00 18 00
>02a948	bb 03 2e 3e 27 32 a8 40 0d 26 ee cc 09 c0 28 32
>02a958	06 22 01 40 00 00 1a 00 bc 03 2e 3e 27 32 2b ce
>02a968	1d c0 01 20 0b 24 50 40 28 32 06 22 90 4d 00 00
>02a978	1a 00 bd 03 2e 3e 27 32 93 40 0b 24 d4 cc 20 c9
>02a988	1f c0 28 32 06 22 8b 40 00 00 1e 00 be 03 2e 3e
>02a998	27 32 24 cd 03 c0 0c 26 ce cc 96 c2 28 32 06 22
>02a9a8	0b 24 71 10 74 78 00 00 20 00 bf 03 2e 3e 27 32
>02a9b8	d4 cc 1c c0 0a 24 c4 dc 03 d0 03 40 28 32 28 32
>02a9c8	06 22 03 10 4d 6f 00 00 1a 00 c0 03 2e 3e 27 32
>02a9d8	03 10 d6 9b 01 20 d4 cc 2a c4 28 32 06 22 80 40
>02a9e8	00 00 20 00 c1 03 2e 3e 27 32 d0 cd ce c5 02 20
>02a9f8	d4 cc 20 c9 1f c0 28 32 06 22 0b 24 02 10 33 a1
>02aa08	00 00 18 00 c2 03 2e 3e 27 32 c2 cc 69 c5 0a 24
>02aa18	83 7d 28 32 06 22 4b 61 00 00 1e 00 c3 03 2e 3e
>02aa28	27 32 02 cd 67 c2 0b 24 01 10 eb a0 28 32 06 22
>02aa38	0b 24 01 10 3b a1 00 00 1a 00 c4 03 2e 3e 27 32
>02aa48	24 cd 03 c0 01 20 1a cd 0a c0 28 32 06 22 70 40
>02aa58	00 00 1a 00 c5 03 2e 3e 27 32 86 c5 0a 24 08 40
>02aa68	28 32 06 22 0b 24 05 10 82 47 00 00 1a 00 c6 03
>02aa78	2e 3e 27 32 24 cd 03 c0 0a 24 f7 c4 28 32 06 22
>02aa88	0b 24 c2 b0 00 00 18 00 c7 03 2e 3e 27 32 0b c6
>02aa98	0d 26 c2 cc 69 c5 28 32 06 22 00 40 00 00 1a 00
>02aaa8	c8 03 2e 3e 27 32 06 10 51 43 0a 24 08 40 28 32
>02aab8	06 22 06 10 59 43 00 00 1a 00 c9 03 2e 3e 27 32
>02aac8	a6 cd 14 c0 0b 24 0b 24 03 85 28 32 06 22 96 85
>02aad8	00 00 20 00 ca 03 2e 3e 27 32 22 dd 71 d4 02 40
>02aae8	28 32 0a 24 08 40 28 32 06 22 0b 24 02 10 6c 99
>02aaf8	00 00 20 00 cb 03 2e 3e 27 32 0c ce fc cc 10 c0
>02ab08	02 20 0b 24 03 10 24 97 28 32 06 22 0b 24 21 40
>02ab18	00 00 1c 00 cc 03 2e 3e 27 32 28 40 0c 26 f9 cc
>02ab28	08 c0 28 32 06 22 0b 24 df 10 d0 98 00 00 1a 00
>02ab38	cd 03 2e 3e 27 32 03 10 d6 9b 0a 24 c3 40 28 32
>02ab48	06 22 03 10 99 9c 00 00 1e 00 ce 03 2e 3e 27 32
>02ab58	0b 24 01 10 78 b0 02 20 76 40 28 32 06 22 0b 24
>02ab68	01 10 02 b0 00 00 1a 00 cf 03 2e 3e 27 32 0b c6
>02ab78	01 20 0b 24 03 10 24 97 28 32 06 22 08 40 00 00
>02ab88	18 00 d0 03 2e 3e 27 32 76 40 01 20 02 10 83 a7
>02ab98	28 32 06 22 02 40 00 00 26 00 d1 03 2e 3e 27 32
>02aba8	67 ce 3e ce 0e c0 01 20 12 de 09 db 0d d0 04 40
>02abb8	28 32 28 32 06 22 0b 24 02 10 be 7f 00 00 1a 00
>02abc8	d2 03 2e 3e 27 32 31 c6 01 20 01 10 74 8a 28 32
>02abd8	06 22 01 10 44 8a 00 00 20 00 d3 03 2e 3e 27 32
>02abe8	5f cd 80 cc 0c c0 0c 26 83 cd 71 c6 28 32 06 22
>02abf8	0b 24 cd 12 6c a0 00 00 16 00 d4 03 2e 3e 27 32
>02ac08	12 c0 0d 26 15 c0 28 32 06 22 1c 43 00 00 10 00
>02ac18	d5 03 2e 3e 31 c6 06 22 0b 24 3c 40 00 00 12 00
>02ac28	d6 03 2e 3e 1a cd 0a c0 06 22 0b 24 0f 40 00 00
>02ac38	12 00 d7 03 2e 3e 0f c0 06 22 0b 24 01 10 8a 9c
>02ac48	00 00 14 00 d8 03 2e 3e 2f ce 8c cd 16 c0 06 22
>02ac58	02 10 ca 76 00 00 12 00 d9 03 2e 3e 41 ce df c5
>02ac68	06 22 04 10 5f 8c 00 00 12 00 da 03 2e 3e ce cc
>02ac78	96 c2 06 22 0b 24 0e bb 00 00 12 00 db 03 2e 3e
>02ac88	27 cd 05 c0 06 22 01 10 fb 41 00 00 10 00 dc 03
>02ac98	2e 3e d1 cd 24 c0 06 22 86 40 00 00 10 00 dd 03
>02aca8	2e 3e 07 c0 06 22 03 10 d6 9b 00 00 14 00 de 03
>02acb8	2e 3e 2f ce 66 cc 1b c0 06 22 0b 24 32 6a 00 00
>02acc8	12 00 df 03 2e 3e 09 ce 14 c0 06 22 02 10 07 62
>02acd8	00 00 10 00 e0 03 2e 3e 08 c0 06 22 01 10 eb a0
>02ace8	00 00 10 00 e1 03 2e 3e a6 cd 14 c0 06 22 93 40
>02acf8	00 00 14 00 e2 03 2e 3e d0 cd ce c5 06 22 0b 24
>02ad08	02 10 33 a1 00 00 14 00 e3 03 2e 3e 33 cd 7e c9
>02ad18	1e c0 06 22 02 10 83 a7 00 00 12 00 e4 03 2e 3e
>02ad28	3e c6 06 22 0b 24 01 10 a2 5c 00 00 12 00 e5 03
>02ad38	2e 3e 8a cd ba c0 06 22 0b 24 f9 4b 00 00 12 00
>02ad48	e6 03 2e 3e 12 c0 06 22 0b 24 04 10 41 70 00 00
>02ad58	10 00 e7 03 2e 3e 2b ce 1d c0 06 22 db 4d 00 00
>02ad68	14 00 e8 03 2e 3e 7d cd f7 c8 0f c0 06 22 01 10
>02ad78	03 8b 00 00 10 00 e9 03 2e 3e fc c4 06 22 03 10
>02ad88	a6 ac 00 00 14 00 ea 03 2e 3e f9 cc 08 c0 06 22
>02ad98	0b 24 05 10 d2 8b 00 00 12 00 eb 03 2e 3e 80 cd
>02ada8	0a c0 06 22 01 10 74 8a 00 00 12 00 ec 03 2e 3e
>02adb8	e0 c5 06 22 0b 24 01 10 65 bb 00 00 12 00 ed 03
>02adc8	2e 3e 64 ce 16 c0 06 22 01 10 fc 4c 00 00 12 00
>02add8	ee 03 2e 3e 1a c0 06 22 0b 24 02 10 0e 47 00 00
>02ade8	12 00 ef 03 2e 3e fb cc 09 c0 06 22 04 10 df ab
>02adf8	00 00 10 00 f0 03 2e 3e 13 c6 06 22 01 10 e2 b4
>02ae08	00 00 12 00 f1 03 2e 3e 8d cd 09 c2 06 22 0b 24
>02ae18	03 85 00 00 12 00 f2 03 2e 3e 02 cd 67 c2 06 22
>02ae28	0b 24 50 40 00 00 14 00 f3 03 2e 3e 67 ce 3e ce
>02ae38	0e c0 06 22 0b 24 be 40 00 00 10 00 f4 03 2e 3e
>02ae48	83 cd 71 c6 06 22 c3 40 00 00 10 00 f5 03 2e 3e
>02ae58	76 c5 06 22 02 10 f6 69 00 00 10 00 f6 03 2e 3e
>02ae68	61 ce 02 c0 06 22 a7 a8 00 00 12 00 f7 03 2e 3e
>02ae78	22 c5 06 22 0b 24 01 10 78 b0 00 00 0e 00 f8 03
>02ae88	2e 3e d7 c5 06 22 83 7d 00 00 12 00 f9 03 2e 3e
>02ae98	01 c0 06 22 0b 24 02 10 cb a5 00 00 14 00 fa 03
>02aea8	2e 3e a5 cd 51 c0 06 22 0b 24 01 10 49 77 00 00
>02aeb8	10 00 fb 03 2e 3e f7 c4 06 22 0b 24 38 b1 00 00
>02aec8	12 00 fc 03 2e 3e b8 cd 21 c0 06 22 01 10 b0 4d
>02aed8	00 00 12 00 fd 03 2e 3e d4 cc 1c c0 06 22 03 10
>02aee8	c4 6f 00 00 0e 00 fe 03 2e 3e 0b c6 06 22 28 40
>02aef8	00 00 14 00 ff 03 2e 3e 47 cd 90 ca 18 c0 06 22
>02af08	04 10 5d 7c 00 00 10 00 00 04 2e 3e ee cc 09 c0
>02af18	06 22 8e 40 00 00 10 00 01 04 2e 3e 16 c0 06 22
>02af28	05 10 27 84 00 00 0e 00 02 04 2e 3e 14 c0 06 22
>02af38	6f 8e 00 00 12 00 03 04 2e 3e 86 c5 06 22 0b 24
>02af48	05 10 8a 47 00 00 16 00 04 04 2e 3e 5f cd 80 cc
>02af58	0c c0 06 22 0b 24 03 10 24 97 00 00 12 00 05 04
>02af68	2e 3e d4 cc 20 c9 1f c0 06 22 08 40 00 00 10 00
>02af78	06 04 2e 3e e5 c5 06 22 04 10 ba a6 00 00 16 00
>02af88	07 04 2e 3e 5d ce 10 cd 0b c0 06 22 0b 24 05 10
>02af98	d4 54 00 00 10 00 08 04 2e 3e 15 c0 06 22 0b 24
>02afa8	b4 40 00 00 14 00 09 04 2e 3e 1a cd 61 cb 22 c0
>02afb8	06 22 03 10 a3 ae 00 00 10 00 0a 04 2e 3e d4 cc
>02afc8	2a c4 06 22 a8 40 00 00 10 00 0b 04 2e 3e 24 cd
>02afd8	03 c0 06 22 76 40 00 00 12 00 0c 04 2e 3e d7 cc
>02afe8	f4 c0 06 22 05 10 e6 7a 00 00 12 00 0d 04 2e 3e
>02aff8	c2 cc 69 c5 06 22 0b 24 38 5c 00 00 12 00 0e 04
>02b008	2e 3e 23 c5 06 22 0b 24 05 10 11 5d 00 00 12 00
>02b018	0f 04 2e 3e 5a cd 25 c1 06 22 0b 24 63 52 00 00
>02b028	14 00 10 04 2e 3e 0c ce fc cc 10 c0 06 22 0b 24
>02b038	2d 40 00 00 3c 00 11 04 2e 3e 22 dd 71 d4 00 40
>02b048	28 32 06 22 0b 24 03 10 b0 a2 26 32 2e 3e 22 dd
>02b058	71 d4 01 40 28 32 06 22 82 a4 26 32 2e 3e 22 dd
>02b068	71 d4 02 40 28 32 06 22 0b 24 02 10 74 99 00 00
>02b078	72 00 12 04 2e 3e c4 dc 03 d0 00 40 28 32 06 22
>02b088	0b 24 04 10 dd 8f 26 32 2e 3e c4 dc 03 d0 01 40
>02b098	28 32 06 22 05 10 f2 a9 26 32 2e 3e c4 dc 03 d0
>02b0a8	02 40 28 32 06 22 0b 24 69 40 26 32 2e 3e c4 dc
>02b0b8	03 d0 03 40 28 32 06 22 0b 24 77 40 26 32 2e 3e
>02b0c8	c4 dc 03 d0 04 40 28 32 06 22 05 10 39 6e 26 32
>02b0d8	2e 3e c4 dc 03 d0 05 40 28 32 06 22 0b 24 bf 40
>02b0e8	00 00 70 00 13 04 2e 3e c4 dc 7d d1 00 40 28 32
>02b0f8	06 22 03 10 03 92 26 32 2e 3e c4 dc 7d d1 01 40
>02b108	28 32 06 22 0b 24 03 10 5d be 26 32 2e 3e c4 dc
>02b118	7d d1 02 40 28 32 06 22 0b 24 01 10 a8 8f 26 32
>02b128	2e 3e c4 dc 7d d1 03 40 28 32 06 22 b4 40 26 32
>02b138	2e 3e c4 dc 7d d1 04 40 28 32 06 22 38 86 26 32
>02b148	2e 3e c4 dc 7d d1 05 40 28 32 06 22 04 10 a7 a4
>02b158	00 00 5e 00 14 04 2e 3e 34 de 2c d6 00 40 28 32
>02b168	06 22 0b 24 fa b4 26 32 2e 3e 34 de 2c d6 01 40
>02b178	28 32 06 22 01 10 7a 60 26 32 2e 3e 34 de 2c d6
>02b188	02 40 28 32 06 22 05 10 02 91 26 32 2e 3e 34 de
>02b198	2c d6 03 40 28 32 06 22 03 10 99 48 26 32 2e 3e
>02b1a8	34 de 2c d6 04 40 28 32 06 22 05 10 b8 7d 00 00
>02b1b8	40 00 15 04 2e 3e e1 dd d8 d1 00 40 28 32 06 22
>02b1c8	0b 24 05 10 98 75 26 32 2e 3e e1 dd d8 d1 01 40
>02b1d8	28 32 06 22 0b 24 04 10 7c 79 26 32 2e 3e e1 dd
>02b1e8	d8 d1 02 40 28 32 06 22 0b 24 04 10 d9 43 00 00
>02b1f8	7c 00 16 04 2e 3e 2d dd a7 db 17 d0 00 40 28 32
>02b208	06 22 03 10 be 81 26 32 2e 3e 2d dd a7 db 17 d0
>02b218	01 40 28 32 06 22 60 40 26 32 2e 3e 2d dd a7 db
>02b228	17 d0 02 40 28 32 06 22 0b 24 05 10 87 71 26 32
>02b238	2e 3e 2d dd a7 db 17 d0 03 40 28 32 06 22 02 10
>02b248	3b bc 26 32 2e 3e 2d dd a7 db 17 d0 04 40 28 32
>02b258	06 22 01 10 58 5d 26 32 2e 3e 2d dd a7 db 17 d0
>02b268	05 40 28 32 06 22 0b 24 c4 55 00 00 82 00 17 04
>02b278	2e 3e 12 de 09 db 0d d0 00 40 28 32 06 22 03 10
>02b288	4f 59 26 32 2e 3e 12 de 09 db 0d d0 01 40 28 32
>02b298	06 22 0b 24 03 10 0a 9f 26 32 2e 3e 12 de 09 db
>02b2a8	0d d0 02 40 28 32 06 22 0b 24 4f 40 26 32 2e 3e
>02b2b8	12 de 09 db 0d d0 03 40 28 32 06 22 0b 24 03 10
>02b2c8	e0 98 26 32 2e 3e 12 de 09 db 0d d0 04 40 28 32
>02b2d8	06 22 0b 24 02 10 8a 7f 26 32 2e 3e 12 de 09 db
>02b2e8	0d d0 05 40 28 32 06 22 0b 24 d7 9e 00 00 60 00
>02b2f8	18 04 2e 3e d0 dc b7 d3 00 40 28 32 06 22 02 10
>02b308	34 b0 26 32 2e 3e d0 dc b7 d3 01 40 28 32 06 22
>02b318	0b 24 f3 a1 26 32 2e 3e d0 dc b7 d3 02 40 28 32
>02b328	06 22 0b 24 03 10 7a 73 26 32 2e 3e d0 dc b7 d3
>02b338	03 40 28 32 06 22 05 10 29 45 26 32 2e 3e d0 dc
>02b348	b7 d3 04 40 28 32 06 22 02 10 14 85 00 00 5e 00
>02b358	19 04 2e 3e c1 dc 1b d0 00 40 28 32 06 22 06 10
>02b368	51 43 26 32 2e 3e c1 dc 1b d0 01 40 28 32 06 22
>02b378	b5 40 26 32 2e 3e c1 dc 1b d0 02 40 28 32 06 22
>02b388	05 10 79 62 26 32 2e 3e c1 dc 1b d0 03 40 28 32
>02b398	06 22 0b 24 4e 40 26 32 2e 3e c1 dc 1b d0 04 40
>02b3a8	28 32 06 22 0b 24 04 10 da aa 00 00 3a 00 1a 04
>02b3b8	2e 3e 5c dd f4 d3 00 40 28 32 06 22 0b 24 42 40
>02b3c8	26 32 2e 3e 5c dd f4 d3 01 40 28 32 06 22 01 10
>02b3d8	72 44 26 32 2e 3e 5c dd f4 d3 02 40 28 32 06 22
>02b3e8	0b 24 8c 7e 00 00 00 00 ee ee ee ee 00 00 00 00
>02b3f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 191 times (3056 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
