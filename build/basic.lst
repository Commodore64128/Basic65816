
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 15 08:00:39 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 6b 14 01	jmp $01146b			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	77 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	67 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	77 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	87 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	cb 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	32 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	97 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	14 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	f6 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	b1 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	b1 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	32 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	3e 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	bb 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	32 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	43 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	55 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	cc 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	ac 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	88 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	72 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	e6 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	06 0c					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	06 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	3e 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	72 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	9a 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	b4 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	cb 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	06 0d					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	c4 0c					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	ae 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	45 0a					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	d7 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	77 04					.word IllegalToken             & $FFFF ; token $3222 ","
>010046	77 04					.word IllegalToken             & $FFFF ; token $3223 ";"
>010048	77 04					.word IllegalToken             & $FFFF ; token $3224 ":"
>01004a	77 04					.word IllegalToken             & $FFFF ; token $3225 "("
>01004c	77 04					.word IllegalToken             & $FFFF ; token $3226 ")"
>01004e	77 04					.word IllegalToken             & $FFFF ; token $3227 "'"
>010050	77 04					.word IllegalToken             & $FFFF ; token $3228 "to"
>010052	77 04					.word IllegalToken             & $FFFF ; token $3229 "step"
>010054	59 14					.word Function_REM             & $FFFF ; token $3e2a "rem"
>010056	48 0d					.word Function_Let             & $FFFF ; token $3e2b "let"
>010058	3a 14					.word Function_ASSERT          & $FFFF ; token $3e2c "assert"
>01005a	37 12					.word Function_END             & $FFFF ; token $3e2d "end"
>01005c	39 12					.word Function_RUN             & $FFFF ; token $3e2e "run"
>01005e	96 12					.word Function_STOP            & $FFFF ; token $3e2f "stop"
>010060	92 12					.word Function_CLEAR           & $FFFF ; token $3e30 "clear"
>010062	f1 12					.word Function_Dim             & $FFFF ; token $3e31 "dim"
>010064	65 13					.word Function_COLLECT         & $FFFF ; token $3e32 "collect"
>010066	55 14					.word Function_CLS             & $FFFF ; token $3e33 "cls"
>010068	c3 0d					.word Function_PRINT           & $FFFF ; token $3e34 "print"
>01006a	c5 10					.word Function_GOTO            & $FFFF ; token $3e35 "goto"
>01006c	24 11					.word Function_GOSUB           & $FFFF ; token $3e36 "gosub"
>01006e	40 11					.word Function_RETURN          & $FFFF ; token $3e37 "return"
>010070	82 10					.word Function_ONGOTO          & $FFFF ; token $3e38 "on"
>010072	76 0e					.word Handler_ELSE             & $FFFF ; token $3e39 "else"
>010074	f4 13					.word Command_POKE             & $FFFF ; token $3e3a "poke"
>010076	0c 14					.word Command_DOKE             & $FFFF ; token $3e3b "doke"
>010078	20 14					.word Command_LOKE             & $FFFF ; token $3e3c "loke"
>01007a	72 11					.word Function_REPEAT          & $FFFF ; token $3c3d "repeat"
>01007c	d0 11					.word Function_WHILE           & $FFFF ; token $3c3e "while"
>01007e	0f 0e					.word Function_IF              & $FFFF ; token $3c3f "if"
>010080	4b 0f					.word Command_FOR              & $FFFF ; token $3c40 "for"
>010082	07 12					.word Function_WEND            & $FFFF ; token $3a41 "wend"
>010084	89 11					.word Function_UNTIL           & $FFFF ; token $3a42 "until"
>010086	77 04					.word IllegalToken             & $FFFF ; token $3a43 "then"
>010088	a4 0e					.word Handler_ENDIF            & $FFFF ; token $3a44 "endif"
>01008a	c6 0f					.word Command_NEXT             & $FFFF ; token $3a45 "next"
.01008c					TokenText:
>01008c	02 26					 .text $02,"&"        ; token $2001
>01008e	02 7c					 .text $02,"|"        ; token $2002
>010090	02 5e					 .text $02,"^"        ; token $2003
>010092	12 3c					 .text $12,"<"        ; token $2204
>010094	12 3e					 .text $12,">"        ; token $2205
>010096	12 3d					 .text $12,"="        ; token $2206
>010098	13 3c 3d				 .text $13,"<="       ; token $2207
>01009b	13 3e 3d				 .text $13,">="       ; token $2208
>01009e	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a1	22 2b					 .text $22,"+"        ; token $240a
>0100a3	22 2d					 .text $22,"-"        ; token $240b
>0100a5	32 2a					 .text $32,"*"        ; token $260c
>0100a7	32 2f					 .text $32,"/"        ; token $260d
>0100a9	32 25					 .text $32,"%"        ; token $260e
>0100ab	33 3e 3e				 .text $33,">>"       ; token $260f
>0100ae	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b1	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100b6	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100bb	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c0	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100c5	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ca	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d0	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100d6	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100db	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e0	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100e6	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100ec	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f2	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>0100fa	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010102	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>010109	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>01010f	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>010117	92 2c					 .text $92,","        ; token $3222
>010119	92 3b					 .text $92,";"        ; token $3223
>01011b	92 3a					 .text $92,":"        ; token $3224
>01011d	92 28					 .text $92,"("        ; token $3225
>01011f	92 29					 .text $92,")"        ; token $3226
>010121	92 27					 .text $92,"'"        ; token $3227
>010123	93 74 6f				 .text $93,"to"       ; token $3228
>010126	95 73 74 65 70				 .text $95,"step"     ; token $3229
>01012b	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2a
>01012f	f4 6c 65 74				 .text $f4,"let"      ; token $3e2b
>010133	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2c
>01013a	f4 65 6e 64				 .text $f4,"end"      ; token $3e2d
>01013e	f4 72 75 6e				 .text $f4,"run"      ; token $3e2e
>010142	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2f
>010147	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e30
>01014d	f4 64 69 6d				 .text $f4,"dim"      ; token $3e31
>010151	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e32
>010159	f4 63 6c 73				 .text $f4,"cls"      ; token $3e33
>01015d	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e34
>010163	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e35
>010168	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e36
>01016e	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e37
>010175	f3 6f 6e				 .text $f3,"on"       ; token $3e38
>010178	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e39
>01017d	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3a
>010182	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3b
>010187	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3c
>01018c	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c3d
>010193	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c3e
>010199	e3 69 66				 .text $e3,"if"       ; token $3c3f
>01019c	e4 66 6f 72				 .text $e4,"for"      ; token $3c40
>0101a0	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a41
>0101a5	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a42
>0101ab	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a43
>0101b0	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a44
>0101b6	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a45
>0101bb	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3222					commaTokenID                     = $3222
=$3223					semicolonTokenID                 = $3223
=$3224					colonTokenID                     = $3224
=$3225					lparenTokenID                    = $3225
=$3226					rparenTokenID                    = $3226
=$3227					squoteTokenID                    = $3227
=$3228					toTokenID                        = $3228
=$3229					stepTokenID                      = $3229
=$3e2a					remTokenID                       = $3e2a
=$3e2b					letTokenID                       = $3e2b
=$3e2c					assertTokenID                    = $3e2c
=$3e2d					endTokenID                       = $3e2d
=$3e2e					runTokenID                       = $3e2e
=$3e2f					stopTokenID                      = $3e2f
=$3e30					clearTokenID                     = $3e30
=$3e31					dimTokenID                       = $3e31
=$3e32					collectTokenID                   = $3e32
=$3e33					clsTokenID                       = $3e33
=$3e34					printTokenID                     = $3e34
=$3e35					gotoTokenID                      = $3e35
=$3e36					gosubTokenID                     = $3e36
=$3e37					returnTokenID                    = $3e37
=$3e38					onTokenID                        = $3e38
=$3e39					elseTokenID                      = $3e39
=$3e3a					pokeTokenID                      = $3e3a
=$3e3b					dokeTokenID                      = $3e3b
=$3e3c					lokeTokenID                      = $3e3c
=$3c3d					repeatTokenID                    = $3c3d
=$3c3e					whileTokenID                     = $3c3e
=$3c3f					ifTokenID                        = $3c3f
=$3c40					forTokenID                       = $3c40
=$3a41					wendTokenID                      = $3a41
=$3a42					untilTokenID                     = $3a42
=$3a43					thenTokenID                      = $3a43
=$3a44					endifTokenID                     = $3a44
=$3a45					nextTokenID                      = $3a45

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101bc					Evaluate:
.0101bc	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0101bf	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101c2					EvaluateLevel:
.0101c2	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101c5	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101c7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101c9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101cc	b0 79		bcs $010247			bcs 	_ELVariable
.0101ce	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101d1	b0 16		bcs $0101e9			bcs 	_ELConstant
.0101d3	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101d6	90 7f		bcc $010257			bcc 	_ELStringConstant
.0101d8	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101db	90 03		bcc $0101e0			bcc 	_ELConstantShift
.0101dd	82 94 00	brl $010274			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101e0					_ELConstantShift:
.0101e0	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101e3	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101e5	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101e7	e6 06		inc $06				inc 	DCodePtr
.0101e9					_ELConstant:
.0101e9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101eb	38		sec				sec  								; shift it in the range 0-32767
.0101ec	e9 00 40	sbc #$4000			sbc 	#$4000
.0101ef	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101f0	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101f2	6a		ror a				ror 	a 							; rotate that into the constant value
.0101f3	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101f5	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101f7	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101f9	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101fb	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101fd	e6 06		inc $06				inc 	DCodePtr
.0101ff					_ELGotAtom:
.0101ff	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010201	a8		tay				tay 								; save in Y
.010202	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010205	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010208	d0 35		bne $01023f			bne 	_ELExit
.01020a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01020c	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01020f	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010211	98		tya				tya 								; get the keyword token back
.010212	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010215	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010217	90 26		bcc $01023f			bcc 	_ELExit 					; precedence too low, then exit.
.010219	5a		phy				phy 								; save the binary operator on the stack
.01021a	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01021c	e6 06		inc $06				inc 	DCodePtr
.01021e	18		clc				clc 								; try the next level up
.01021f	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010222	e8		inx				inx 								; calculate the RHS at the next stack level.
.010223	e8		inx				inx
.010224	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.010227	ca		dex				dex
.010228	ca		dex				dex
.010229	7a		ply				ply 								; get operator token back into Y
.01022a					_ELExecuteY:
.01022a	98		tya				tya
.01022b	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01022e	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01022f	9b		txy				txy 								; save X in Y
.010230	aa		tax				tax 								; double keyword ID in X
.010231	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010235	bb		tyx				tyx 								; restore X.
.010236	8f 3b 02 01	sta $01023b			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01023a					_ELCallRoutine:
.01023a	20 3a 02	jsr $01023a			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01023d	80 c0		bra $0101ff			bra 	_ELGotAtom 					; go round operator level again.
.01023f	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010241	0a		asl a				asl 	a
.010242	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010244	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010246	60		rts				rts
.010247					_ELVariable:
.010247	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.010249	20 08 03	jsr $010308			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01024c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01024e	94 10		sty $10,x			sty 	EXSValueH+0,x
.010250	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010252	80 ab		bra $0101ff			bra 	_ELGotAtom
.010254					_ELSyntax
.010254	82 31 02	brl $010488			brl 	SyntaxError
.010257					_ELStringConstant:
.010257	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01025a	f0 f8		beq $010254			beq 	_ELSyntax
.01025c	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01025e	1a		inc a				inc 	a
.01025f	1a		inc a				inc 	a
.010260	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010262	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010264	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010266	18		clc				clc 								; add to string constant.
.010267	65 06		adc $06				adc 	DCodePtr
.010269	85 06		sta $06				sta 	DCodePtr
.01026b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01026d	09 00 80	ora #$8000			ora 	#$8000
.010270	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010272	80 8b		bra $0101ff			bra 	_ELGotAtom
.010274					_ELUnaryKeyword:
.010274	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010276	a8		tay				tay 								; put the token in Y.
.010277	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010279	e6 06		inc $06				inc 	DCodePtr
.01027b	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01027e	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010281	f0 a7		beq $01022a			beq 	_ELExecuteY					; go back and execute it
.010283	c0 25 32	cpy #$3225			cpy 	#lparenTokenID 				; is it an open bracket ?
.010286	d0 11		bne $010299			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010288	20 bf 02	jsr $0102bf			jsr 	EvaluateNext 				; evaluate the expression
.01028b	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; consume the right bracket.
.01028e					_ELCopy:
.01028e	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010290	95 00		sta $00,x			sta 	EXSValueL+0,x
.010292	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010294	95 10		sta $10,x			sta 	EXSValueH+0,x
.010296	82 66 ff	brl $0101ff			brl 	_ELGotAtom 					; and continue.
.010299					_ELUnaryOperator:
.010299	5a		phy				phy 								; save the operator on the stack.
.01029a	e8		inx				inx 								; this is like evaluate next
.01029b	e8		inx				inx
.01029c	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01029f	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.0102a2	ca		dex				dex 								; unwind the stack.
.0102a3	ca		dex				dex
.0102a4	68		pla				pla 								; restore the unary operator.
.0102a5	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102a8	f0 03		beq $0102ad			beq 	_ELMinus
.0102aa	4c 88 04	jmp $010488			jmp 	SyntaxError
.0102ad					_ELMinus:
.0102ad	38		sec				sec 								; do the negation calculation.
.0102ae	a9 00 00	lda #$0000			lda 	#0
.0102b1	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102b3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102b5	a9 00 00	lda #$0000			lda 	#0
.0102b8	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102ba	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102bc	82 40 ff	brl $0101ff			brl 	_ELGotAtom					; and continue.
.0102bf					EvaluateNext:
.0102bf	e8		inx				inx
.0102c0	e8		inx				inx
.0102c1	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102c4	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.0102c7	ca		dex				dex
.0102c8	ca		dex				dex
.0102c9	60		rts				rts
.0102ca					EvaluateInteger:
.0102ca	20 bc 01	jsr $0101bc			jsr 	Evaluate
.0102cd	b0 01		bcs $0102d0			bcs 	EIType
.0102cf	60		rts				rts
.0102d0					EIType:
.0102d0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0102d3	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102db	78 70 65 63 74 65 64 00
.0102e3					EvaluateNextInteger:
.0102e3	20 bf 02	jsr $0102bf			jsr 	EvaluateNext
.0102e6	b0 e8		bcs $0102d0			bcs 	EIType
.0102e8	60		rts				rts
.0102e9					EvaluateString:
.0102e9	20 bc 01	jsr $0101bc			jsr 	Evaluate
.0102ec	90 01		bcc $0102ef			bcc 	ESType
.0102ee	60		rts				rts
.0102ef					ESType:
.0102ef	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0102f2	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102fa	78 70 65 63 74 65 64 00
.010302					EvaluateNextString:
.010302	20 bf 02	jsr $0102bf			jsr 	EvaluateNext
.010305	90 e8		bcc $0102ef			bcc 	ESType
.010307	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010308					VariableAccessExpression:
.010308	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01030a	48		pha				pha
.01030b	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find the variables
.01030e	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010310	90 23		bcc $010335			bcc 	_VANError 					; not found, so report an error.
.010312	68		pla				pla 								; get and save that first token
.010313	48		pha				pha 								; we use it for typing.
.010314	a8		tay				tay 								; put first token in Y.
.010315	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010318	f0 07		beq $010321			beq 	_VANNotArray
.01031a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01031c	20 c0 03	jsr $0103c0			jsr 	VariableSubscript			; index calculation
.01031f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010321					_VANNotArray:
.010321	68		pla				pla 								; get the token back.
.010322	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010325	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010328	38		sec				sec 								; set up return string.
.010329	f0 06		beq $010331			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01032b	18		clc				clc 								; returning a number, read high data word
.01032c	a0 02 00	ldy #$0002			ldy 	#2
.01032f	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010331					_VANLoadLower:
.010331	a8		tay				tay 								; put A into Y (this is the high byte)
.010332	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010334	60		rts				rts
.010335					_VANError:
.010335	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010338	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010340	20 75 6e 6b 6e 6f 77 6e 00
.010349					VariableFind:
.010349	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01034b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01034e	90 5c		bcc $0103ac			bcc 	_VFError
.010350	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010353	b0 11		bcs $010366			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010355	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010358	3a		dec a				dec 	a 							; now 0-25
.010359	0a		asl a				asl 	a 							; x 4 and clear carry
.01035a	0a		asl a				asl 	a
.01035b	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01035e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010360	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010362	e6 06		inc $06				inc 	DCodePtr
.010364	38		sec				sec 								; return with carry set.
.010365	60		rts				rts
.010366					_VFSlowVariable:
.010366	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010368	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.01036b	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01036c	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01036d	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010370	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010372	85 08		sta $08				sta 	DTemp1
.010374	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010376	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010379	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01037a	65 08		adc $08				adc 	DTemp1
.01037c	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01037e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010380					_VFNext:
.010380	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010382	f0 26		beq $0103aa			beq 	_VFFail 					; if zero, then it's the end of the list.
.010384	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010386	a8		tay				tay 								; read the address of the name at $0002,y
.010387	b9 02 00	lda $0002,y			lda 	$0002,y
.01038a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01038c	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01038f					_VFCompare:
.01038f	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010391	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010393	d0 eb		bne $010380			bne 	_VFNext 					; if not, go to the next one.
.010395	c8		iny				iny 								; advance token pointer
.010396	c8		iny				iny
.010397	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.01039a	d0 f3		bne $01038f			bne 	_VFCompare
.01039c	98		tya				tya 								; this is the length of the word.
.01039d	18		clc				clc 								; so we add it to the code pointer
.01039e	65 06		adc $06				adc 	DCodePtr
.0103a0	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103a2	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103a4	18		clc				clc 								; four on is the actual data
.0103a5	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103a8	38		sec				sec 								; return with CS indicating success
.0103a9	60		rts				rts
.0103aa					_VFFail:
.0103aa	18		clc				clc
.0103ab	60		rts				rts
.0103ac					_VFError:
.0103ac	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0103af	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103b7	76 61 72 69 61 62 6c 65 00
.0103c0					VariableSubscript:
.0103c0	48		pha				pha		 							; save variable address on stack.
.0103c1	20 e3 02	jsr $0102e3			jsr		EvaluateNextInteger 		; get the subscript
.0103c4	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; skip right bracket.
.0103c7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103ca	d0 10		bne $0103dc			bne 	_VANSubscript
.0103cc	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103ce	f0 02		beq $0103d2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103d0	b0 0a		bcs $0103dc			bcs 	_VANSubscript
.0103d2					_VANSubOkay:
.0103d2	0a		asl a				asl 	a 							; double lsword
.0103d3	0a		asl a				asl 	a 							; and again, also clears carry.
.0103d4	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103d6	68		pla				pla 								; restore DVariablePtr
.0103d7	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103d8	1a		inc a				inc 	a
.0103d9	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103db	60		rts				rts
.0103dc					_VANSubscript:
.0103dc	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0103df	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103e7	79 20 53 75 62 73 63 72 69 70 74 00
.0103f3					VariableCreate:
.0103f3	48		pha				pha 								; save count.
.0103f4	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103f7	29 00 20	and #$2000			and 	#IDTypeMask
.0103fa	f0 06		beq $010402			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103fc	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103ff	18		clc				clc 								; which is guaranteed by have a 0 length.
.010400	65 02		adc $02				adc 	DBaseAddress
.010402					_VCIsInteger:
.010402	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010404	68		pla				pla 								; restore count
.010405	48		pha				pha
.010406	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010407	0a		asl a				asl 	a 							; 2 x # items.
.010408	0a		asl a				asl 	a 							; 4 x # items.
.010409					_VCNotSingle:
.010409	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01040e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010411	f0 04		beq $010417			beq 	_VCNotArray
.010413	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010415	e6 08		inc $08				inc 	DTemp1
.010417					_VCNotArray:
.010417	5a		phy				phy 								; save address of first token on stack.
.010418	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01041b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01041d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01041f	18		clc				clc 								; add 4 for link and name words
.010420	69 04 00	adc #$0004			adc 	#4
.010423	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010425	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010427	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010429					_VCErase:
.010429	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01042b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01042e	c8		iny				iny
.01042f	c8		iny				iny
.010430	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010432	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010434	d0 f3		bne $010429			bne 	_VCErase
.010436	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010438	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01043a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01043d	68		pla				pla 								; restore the token address
.01043e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010441	68		pla				pla 								; restore count and store.
.010442	99 04 00	sta $0004,y			sta 	$0004,y
.010445	98		tya				tya 								; update the head link
.010446	92 20		sta ($20)			sta 	(DHashTablePtr)
.010448	18		clc				clc 								; advance pointer to the data bit.
.010449	69 04 00	adc #$0004			adc 	#4
.01044c	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01044d					ErrorHandler:
.01044d	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01044f	fa		plx				plx 								; address of error message -1
.010450	e8		inx				inx 								; error message.
.010451	20 f4 04	jsr $0104f4			jsr 	PrintROMMessage 			; print message in ROM
.010454	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010456	f0 15		beq $01046d			beq 	_EHEndMessage
.010458	a2 72 04	ldx #$0472			ldx 	#_EHAt & $FFFF 				; print " at "
.01045b	20 f4 04	jsr $0104f4			jsr 	PrintROMMessage
.01045e	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010460	a0 00 00	ldy #$0000			ldy 	#0
.010463	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010466	20 21 0c	jsr $010c21			jsr 	ConvertToString 			; convert and print it.
.010469	a8		tay				tay
.01046a	20 08 05	jsr $010508			jsr 	PrintBASICString
.01046d					_EHEndMessage:
.01046d	20 bd 14	jsr $0114bd			jsr 	HWNewLine
.010470	80 fe		bra $010470	_EH1:	bra 	_EH1
>010472	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010477					IllegalToken:
.010477	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01047a	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010482	54 6f 6b 65 6e 00
.010488					SyntaxError:
.010488	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01048b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010493	72 72 6f 72 00
.010498					ExpectToken:
.010498	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01049a	d0 05		bne $0104a1			bne 	_CTKError					; error if not
.01049c	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01049e	e6 06		inc $06				inc 	DCodePtr
.0104a0	60		rts				rts
.0104a1					_CTKError:
.0104a1	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0104a4	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104ac	74 6f 6b 65 6e 00
.0104b2					ExpectRightBracket:
.0104b2	48		pha				pha
.0104b3	a9 26 32	lda #$3226			lda 	#rparenTokenID
.0104b6	20 98 04	jsr $010498			jsr 	ExpectToken
.0104b9	68		pla				pla
.0104ba	60		rts				rts
.0104bb					ExpectComma:
.0104bb	48		pha				pha
.0104bc	a9 22 32	lda #$3222			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104bf	20 98 04	jsr $010498			jsr 	ExpectToken
.0104c2	68		pla				pla
.0104c3	60		rts				rts
.0104c4					CheckBothNumeric:
.0104c4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104c6	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0104c8	30 01		bmi $0104cb			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104ca	60		rts				rts
.0104cb					_CBNFail:
.0104cb	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0104ce	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104d6	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104e4					ResetTypeInteger:
.0104e4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104e6	29 ff 7f	and #$7fff			and 	#$7FFF
.0104e9	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104eb	60		rts				rts
.0104ec					ResetTypeString:
.0104ec	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104ee	09 00 80	ora #$8000			ora 	#$8000
.0104f1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104f3	60		rts				rts
.0104f4					PrintROMMessage:
.0104f4	48		pha				pha
.0104f5	da		phx				phx
.0104f6					_PRMLoop:
.0104f6	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104fa	29 ff 00	and #$00ff			and 	#$00FF
.0104fd	f0 06		beq $010505			beq 	_PRMExit
.0104ff	20 9b 14	jsr $01149b			jsr 	HWPrintChar
.010502	e8		inx				inx
.010503	80 f1		bra $0104f6			bra 	_PRMLoop
.010505					_PRMExit:
.010505	fa		plx				plx
.010506	68		pla				pla
.010507	60		rts				rts
.010508					PrintBASICString:
.010508	48		pha				pha
.010509	da		phx				phx
.01050a	5a		phy				phy
.01050b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01050e	29 ff 00	and #$00ff			and 	#$00FF
.010511	f0 0b		beq $01051e			beq 	_PBSExit 					; null string
.010513	aa		tax				tax
.010514					_PBSLoop:
.010514	c8		iny				iny
.010515	b9 00 00	lda $0000,y			lda 	$0000,y
.010518	20 9b 14	jsr $01149b			jsr 	HWPrintChar
.01051b	ca		dex				dex
.01051c	d0 f6		bne $010514			bne 	_PBSLoop
.01051e					_PBSExit:
.01051e	7a		ply				ply
.01051f	fa		plx				plx
.010520	68		pla				pla
.010521	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010522					StringTempAllocate:
.010522	48		pha				pha
.010523	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010525	d0 09		bne $010530			bne 	_STANoReset
.010527	5a		phy				phy 								; reset the temp string pointer.
.010528	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01052b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01052d	85 16		sta $16				sta 	DTempStringPointer
.01052f	7a		ply				ply
.010530					_STANoReset:
.010530	68		pla				pla 								; get length.
.010531	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010534	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010537	18		clc				clc 								; this adds one, for the length.
.010538	65 16		adc $16				adc 	DTempStringPointer
.01053a	85 16		sta $16				sta 	DTempStringPointer
.01053c	48		pha				pha 								; save start address
.01053d	a9 00 00	lda #$0000			lda 	#$0000
.010540	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010542	92 16		sta ($16)			sta		(DTempStringPointer)
.010544	c2 20		rep #$20			rep 	#$20
.010546	68		pla				pla 								; restore start address
.010547	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010549	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01054b	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01054d	60		rts				rts
.01054e					StringWriteCharacter:
.01054e	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010550	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010552	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010554	1a		inc a				inc 	a
.010555	92 18		sta ($18)			sta 	(DStartTempString)
.010557	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010559	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01055b	60		rts				rts
.01055c					StringCreateCopy:
.01055c	a8		tay				tay 								; put pointer to string in Y
.01055d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010560	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010563	f0 17		beq $01057c			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010565	da		phx				phx 								; save X and put the character count in X
.010566	aa		tax				tax
.010567					_SCCCopy:
.010567	c8		iny				iny 								; advance and read (first time skips length)
.010568	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01056a	b9 00 00	lda $0000,y			lda 	$0000,y
.01056d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01056f	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010571	1a		inc a				inc 	a
.010572	92 18		sta ($18)			sta 	(DStartTempString)
.010574	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010576	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010578	ca		dex				dex 								; do X times
.010579	d0 ec		bne $010567			bne 	_SCCCopy
.01057b	fa		plx				plx
.01057c					_SCCExit:
.01057c	60		rts				rts
.01057d					StringMakeConcrete:
.01057d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010580	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010582	90 0f		bcc $010593			bcc 	_SMCExit
.010584	85 08		sta $08				sta 	DTemp1 						; source
.010586	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010588	29 ff 00	and #$00ff			and 	#$00FF
.01058b	d0 07		bne $010594			bne 	_SMCNonZero 				; if not "" skip.
.01058d	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010590	18		clc				clc 								; this reference is used for all empty strings.
.010591	65 02		adc $02				adc 	DBaseAddress
.010593					_SMCExit:
.010593	60		rts				rts
.010594					_SMCNonZero:
.010594	48		pha				pha 								; save on stack.
.010595	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010598	18		clc				clc
.010599	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01059c	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01059e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105a0	85 0c		sta $0c				sta 	DTemp2 						; target
.0105a2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105a3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105a5					_SMCLoop:
.0105a5	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105a7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105a9	88		dey				dey 								; Y+1 times.
.0105aa	10 f9		bpl $0105a5			bpl 	_SMCLoop
.0105ac	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105ae	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105b0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105b1					Binary_Add:
.0105b1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0105b3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105b5	30 12		bmi $0105c9		bmi 	_BATypeError
.0105b7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105b9	30 3f		bmi $0105fa		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105bb	18		clc			clc 										; add the results
.0105bc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105be	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105c0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105c4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0105c6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105c8	60		rts			rts
.0105c9					_BATypeError:
.0105c9	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0105cc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105d4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105e4	65 73 00
.0105e7					_BALengthError:
.0105e7	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0105ea	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105f2	6f 6f 20 6c 6f 6e 67 00
.0105fa					_BAConcatenateString:
.0105fa	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105fc	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0105fe	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010600	85 0c		sta $0c			sta 	DTemp2
.010602	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010604	18		clc			clc 										; work out the total length
.010605	b2 08		lda ($08)		lda 	(DTemp1)
.010607	72 0c		adc ($0c)		adc 	(DTemp2)
.010609	b0 14		bcs $01061f		bcs 	_BAConcatLengthError 				; string is too long.
.01060b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01060d	20 22 05	jsr $010522		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010610	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010612	74 10		stz $10,x		stz 	EXSValueH+0,x
.010614	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010616	20 5c 05	jsr $01055c		jsr 	StringCreateCopy
.010619	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01061b	20 5c 05	jsr $01055c		jsr 	StringCreateCopy
.01061e	60		rts			rts
.01061f					_BAConcatLengthError:
.01061f	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010622	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01062a	6f 6f 20 6c 6f 6e 67 00
.010632					Binary_Subtract:
.010632	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010635	38		sec			sec
.010636	b5 00		lda $00,x		lda		EXSValueL+0,x
.010638	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01063a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01063e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010640	95 10		sta $10,x		sta 	EXSValueH+0,x
.010642	60		rts			rts
.010643					Binary_ShiftRight:
.010643	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010646	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010648	29 3f 00	and #$003f		and 	#63
.01064b	f0 07		beq $010654		beq		_Binary_SRExit
.01064d					_Binary_SRLoop:
.01064d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01064f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010651	3a		dec a			dec 	a
.010652	d0 f9		bne $01064d		bne 	_Binary_SRLoop
.010654					_Binary_SRExit:
.010654	60		rts			rts
.010655					Binary_ShiftLeft:
.010655	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010658	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01065a	29 3f 00	and #$003f		and 	#63
.01065d	f0 07		beq $010666		beq		_Binary_SLExit
.01065f					_Binary_SLLoop:
.01065f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010661	36 10		rol $10,x		rol 	EXSValueH+0,x
.010663	3a		dec a			dec 	a
.010664	d0 f9		bne $01065f		bne 	_Binary_SLLoop
.010666					_Binary_SLExit:
.010666	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010667					Binary_And:
.010667	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01066a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01066c	35 02		and $02,x		and 	EXSValueL+2,x
.01066e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010670	b5 10		lda $10,x		lda		EXSValueH+0,x
.010672	35 12		and $12,x		and 	EXSValueH+2,x
.010674	95 10		sta $10,x		sta 	EXSValueH+0,x
.010676	60		rts			rts
.010677					Binary_Or:
.010677	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01067a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01067c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01067e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010680	b5 10		lda $10,x		lda		EXSValueH+0,x
.010682	15 12		ora $12,x		ora 	EXSValueH+2,x
.010684	95 10		sta $10,x		sta 	EXSValueH+0,x
.010686	60		rts			rts
.010687					Binary_Xor:
.010687	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01068a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01068c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01068e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010690	b5 10		lda $10,x		lda		EXSValueH+0,x
.010692	55 12		eor $12,x		eor 	EXSValueH+2,x
.010694	95 10		sta $10,x		sta 	EXSValueH+0,x
.010696	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010697					Binary_Equals:
.010697	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01069a	b0 0e		bcs $0106aa		bcs 	_BEString
.01069c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01069e	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106a0	d0 4f		bne $0106f1		bne 	Compare_Fail
.0106a2	b5 10		lda $10,x		lda 	EXSValueH,x
.0106a4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106a6	d0 49		bne $0106f1		bne 	Compare_Fail
.0106a8	80 3f		bra $0106e9		bra 	Compare_Succeed
.0106aa					_BEString:
.0106aa	09 00 00	ora #$0000		ora 	#$0000
.0106ad	f0 3a		beq $0106e9		beq 	Compare_Succeed
.0106af	80 40		bra $0106f1		bra 	Compare_Fail
.0106b1					Binary_NotEquals:
.0106b1	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106b4	b0 0e		bcs $0106c4		bcs 	_BNEString
.0106b6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106b8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106ba	d0 2d		bne $0106e9		bne 	Compare_Succeed
.0106bc	b5 10		lda $10,x		lda 	EXSValueH,x
.0106be	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106c0	d0 27		bne $0106e9		bne 	Compare_Succeed
.0106c2	80 2d		bra $0106f1		bra 	Compare_Fail
.0106c4					_BNEString:
.0106c4	09 00 00	ora #$0000		ora 	#$0000
.0106c7	d0 20		bne $0106e9		bne 	Compare_Succeed
.0106c9	80 26		bra $0106f1		bra 	Compare_Fail
.0106cb					Binary_Less:
.0106cb	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106ce	b0 12		bcs $0106e2		bcs 	_BLString
.0106d0	38		sec			sec
.0106d1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106d3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106d5	b5 10		lda $10,x		lda 	EXSValueH,x
.0106d7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106d9	50 03		bvc $0106de		bvc 	*+5
.0106db	49 00 80	eor #$8000		eor 	#$8000
.0106de	30 09		bmi $0106e9		bmi 	Compare_Succeed
.0106e0	80 0f		bra $0106f1		bra 	Compare_Fail
.0106e2					_BLString:
.0106e2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106e5	f0 02		beq $0106e9		beq 	Compare_Succeed
.0106e7	80 08		bra $0106f1		bra 	Compare_Fail
.0106e9					Compare_Succeed:
.0106e9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106ec	95 00		sta $00,x		sta 	EXSValueL,x
.0106ee	95 10		sta $10,x		sta 	EXSValueH,x
.0106f0	60		rts			rts
.0106f1					Compare_Fail:
.0106f1	74 00		stz $00,x		stz 	EXSValueL,x
.0106f3	74 10		stz $10,x		stz 	EXSValueH,x
.0106f5	60		rts			rts
.0106f6					Binary_GreaterEqual:
.0106f6	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106f9	b0 12		bcs $01070d		bcs 	_BGEString
.0106fb	38		sec			sec
.0106fc	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106fe	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010700	b5 10		lda $10,x		lda 	EXSValueH,x
.010702	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010704	50 03		bvc $010709		bvc 	*+5
.010706	49 00 80	eor #$8000		eor 	#$8000
.010709	10 de		bpl $0106e9		bpl 	Compare_Succeed
.01070b	80 e4		bra $0106f1		bra 	Compare_Fail
.01070d					_BGEString:
.01070d	09 00 00	ora #$0000		ora 	#$0000
.010710	10 d7		bpl $0106e9		bpl 	Compare_Succeed
.010712	80 dd		bra $0106f1		bra 	Compare_Fail
.010714					Binary_LessEqual:
.010714	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010717	b0 12		bcs $01072b		bcs 	_BLEString
.010719	18		clc			clc 									; numeric <= signed
.01071a	b5 00		lda $00,x		lda 	EXSValueL,x
.01071c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01071e	b5 10		lda $10,x		lda 	EXSValueH,x
.010720	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010722	50 03		bvc $010727		bvc 	*+5
.010724	49 00 80	eor #$8000		eor 	#$8000
.010727	30 c0		bmi $0106e9		bmi 	Compare_Succeed
.010729	80 c6		bra $0106f1		bra 	Compare_Fail
.01072b					_BLEString:
.01072b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01072e	d0 b9		bne $0106e9		bne 	Compare_Succeed
.010730	80 bf		bra $0106f1		bra 	Compare_Fail
.010732					Binary_Greater:
.010732	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010735	b0 12		bcs $010749		bcs 	_BGString
.010737	18		clc			clc 									; numeric > signed
.010738	b5 00		lda $00,x		lda 	EXSValueL,x
.01073a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01073c	b5 10		lda $10,x		lda 	EXSValueH,x
.01073e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010740	50 03		bvc $010745		bvc 	*+5
.010742	49 00 80	eor #$8000		eor 	#$8000
.010745	10 a2		bpl $0106e9		bpl 	Compare_Succeed
.010747	80 a8		bra $0106f1		bra 	Compare_Fail
.010749					_BGString:
.010749	c9 01 00	cmp #$0001		cmp 	#$0001
.01074c	f0 9b		beq $0106e9		beq 	Compare_Succeed
.01074e	80 a1		bra $0106f1		bra 	Compare_Fail
.010750					CompareTypeCheck:
.010750	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010752	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010754	30 06		bmi $01075c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010756	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010758	30 1c		bmi $010776		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01075a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01075b	60		rts			rts
.01075c					_CTCFail:
.01075c	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01075f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010767	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010776					_CTCStringCompare:
.010776	20 e4 04	jsr $0104e4		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010779	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01077b	85 08		sta $08			sta 	DTemp1
.01077d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01077f	85 0c		sta $0c			sta 	DTemp2
.010781	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010784	a8		tay			tay
.010785	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010787	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010789	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01078b	90 02		bcc $01078f		bcc 	_CTCSmallest
.01078d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01078f					_CTCSmallest:
.01078f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010791					_CTCCompare:
.010791	c8		iny			iny 									; look at next character (done first, first char is size)
.010792	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010794	30 16		bmi $0107ac		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010796	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010798	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01079a	f0 f5		beq $010791		beq 	_CTCCompare 					; if zero, try the next character.
.01079c	b0 07		bcs $0107a5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01079e					_CTCLess:
.01079e	c2 20		rep #$20		rep 	#$20
.0107a0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107a3	80 14		bra $0107b9		bra 	_CTCExit
.0107a5					_CTCGreater:
.0107a5	c2 20		rep #$20		rep 	#$20
.0107a7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107aa	80 0d		bra $0107b9		bra 	_CTCExit
.0107ac					_CTCEqualSoFar:
.0107ac	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107ae	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107b0	90 ec		bcc $01079e		bcc 	_CTCLess
.0107b2	d0 f1		bne $0107a5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107b4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107b6	a9 00 00	lda #$0000		lda 	#$0000
.0107b9					_CTCExit:
.0107b9	38		sec			sec 									; return with CS indicating string comparison.
.0107ba	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107bb					Binary_Divide:
.0107bb	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.0107be	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107c0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0107c2	d0 14		bne $0107d8		bne 	_BinaryDivide_Ok
.0107c4	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0107c7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107cf	20 62 79 20 7a 65 72 6f 00
.0107d8					_BinaryDivide_Ok:
.0107d8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107da	64 0a		stz $0a			stz 	DTemp1+2
.0107dc	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107de	5a		phy			phy 										; save Y (bit counter)
.0107df	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107e1	10 07		bpl $0107ea		bpl 	_BinaryDivide_RightDone
.0107e3	e8		inx			inx
.0107e4	e8		inx			inx
.0107e5	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.0107e8	ca		dex			dex
.0107e9	ca		dex			dex
.0107ea					_BinaryDivide_RightDone:
.0107ea	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107ec	10 03		bpl $0107f1		bpl 	_BinaryDivide_LeftDone
.0107ee	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.0107f1					_BinaryDivide_LeftDone:
.0107f1	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0107f4					_BinaryDivide_Loop:
.0107f4	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107f6	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107f8	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107fa	26 0a		rol $0a			rol 	DTemp1+2
.0107fc	38		sec			sec											; calculate A-M
.0107fd	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107ff	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010801	85 0c		sta $0c			sta 	DTemp2
.010803	a5 0a		lda $0a			lda 	DTemp1+2
.010805	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010807	90 08		bcc $010811		bcc 	_Binary_NoSubract 					; if A < M skip this
.010809	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01080b	a5 0c		lda $0c			lda 	DTemp2
.01080d	85 08		sta $08			sta 	DTemp1+0
.01080f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010811					_Binary_NoSubract:
.010811	88		dey			dey 										; do it 32 times.
.010812	d0 e0		bne $0107f4		bne 	_BinaryDivide_Loop
.010814					_BinaryDivide_Exit:
.010814	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010816	29 01 00	and #$0001		and 	#1
.010819	f0 03		beq $01081e		beq 	_BinaryDivide_Exit2
.01081b	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.01081e					_BinaryDivide_Exit2:
.01081e	7a		ply			ply 										; restore Y
.01081f	60		rts			rts
.010820					Binary_DivNegate:
.010820	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010822	38		sec			sec 										; negate the value at stack X.
.010823	a9 00 00	lda #$0000		lda 	#$0000
.010826	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010828	95 00		sta $00,x		sta 	EXSValueL+0,x
.01082a	a9 00 00	lda #$0000		lda 	#$0000
.01082d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01082f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010831	60		rts			rts
.010832					Binary_Modulus:
.010832	20 bb 07	jsr $0107bb		jsr 	Binary_Divide 						; do the divide
.010835	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010837	95 00		sta $00,x		sta 	EXSValueL+0,x
.010839	a5 0a		lda $0a			lda 	DTemp1+2
.01083b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01083d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01083e					Binary_Multiply:
.01083e	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010841	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010843	85 08		sta $08			sta 	DTemp1
.010845	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010847	85 0a		sta $0a			sta		DTemp1+2
.010849	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01084b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01084d					_BinaryMultiply_Loop:
.01084d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01084f	05 0a		ora $0a			ora 	DTemp1+2
.010851	f0 1e		beq $010871		beq 	_BinaryMultiply_Exit
.010853	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010855	29 01 00	and #$0001		and 	#1
.010858	f0 0d		beq $010867		beq 	_BinaryMultiply_NoAdd
.01085a	18		clc			clc 										; add multiplicand to result.
.01085b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01085d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01085f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010861	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010863	75 12		adc $12,x		adc 	EXSValueH+2,x
.010865	95 10		sta $10,x		sta 	EXSValueH+0,x
.010867					_BinaryMultiply_NoAdd:
.010867	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010869	66 08		ror $08			ror 	DTemp1
.01086b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01086d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01086f	80 dc		bra $01084d		bra 	_BinaryMultiply_Loop 				; go round again.
.010871					_BinaryMultiply_Exit:
.010871	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010872					Function_Len:
.010872	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010875	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.010878	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01087b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01087d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010880	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010883	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010885	74 10		stz $10,x			stz 	EXSValueH+0,x
.010887	60		rts				rts
.010888					Function_Abs:
.010888	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.01088b	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01088e	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010891	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010893	30 07		bmi $01089c			bmi 	_FAbsNegative 				; negate it if negative
.010895	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010897	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010899	95 00		sta $00,x			sta 	EXSValueL+0,x
.01089b	60		rts				rts
.01089c					_FAbsNegative:
.01089c	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01089d	a9 00 00	lda #$0000			lda 	#0
.0108a0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108a2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108a4	a9 00 00	lda #$0000			lda 	#0
.0108a7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0108a9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108ab	60		rts				rts
.0108ac					Function_Sgn:
.0108ac	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns integer
.0108af	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get an integer
.0108b2	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.0108b5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108b7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108b9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108bb	30 07		bmi $0108c4			bmi 	_FSgnNegative 				; set to -1 if signed
.0108bd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108bf	f0 02		beq $0108c3			beq 	_FSgnExit
.0108c1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108c3					_FSgnExit:
.0108c3	60		rts				rts
.0108c4					_FSgnNegative:
.0108c4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108c7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108c9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108cb	60		rts				rts
.0108cc					Function_Random:
.0108cc	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.0108cf	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger
.0108d2	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108d4	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108d6	d0 0a		bne $0108e2			bne 	_Rnd_NotZero
.0108d8	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108db	85 10		sta $10				sta 	DRandom
.0108dd	a9 ea 00	lda #$00ea			lda 	#$EA
.0108e0	85 12		sta $12				sta 	DRandom+2
.0108e2					_Rnd_NotZero:
.0108e2	20 ed 08	jsr $0108ed			jsr 	_Rnd_Process 				; call randomiser twice
.0108e5	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108e7	20 ed 08	jsr $0108ed			jsr 	_Rnd_Process
.0108ea	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ec	60		rts				rts
.0108ed					_Rnd_Process:
.0108ed	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108ef	26 12		rol $12				rol 	DRandom+2
.0108f1	90 0e		bcc $010901			bcc 	_Rnd_Exit
.0108f3	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108f5	49 54 d4	eor #$d454			eor 	#$D454
.0108f8	85 10		sta $10				sta 	DRandom
.0108fa	a5 12		lda $12				lda 	DRandom+2
.0108fc	49 d5 55	eor #$55d5			eor 	#$55D5
.0108ff	85 12		sta $12				sta 	DRandom+2
.010901					_Rnd_Exit:
.010901	a5 10		lda $10				lda 	DRandom
.010903	45 12		eor $12				eor 	DRandom+2
.010905	60		rts				rts
.010906					Function_Chr:
.010906	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string
.010909	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get integer
.01090c	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01090f	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010912	d0 12		bne $010926			bne 	_FCHBad
.010914	48		pha				pha  								; save char # on stack
.010915	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010918	20 22 05	jsr $010522			jsr 	StringTempAllocate
.01091b	68		pla				pla 								; restore character number
.01091c	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter 		; write it out.
.01091f	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010921	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010923	74 10		stz $10,x			stz 	EXSValueH+0,x
.010925	60		rts				rts
.010926					_FCHBad:
.010926	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010929	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010931	65 20 66 6f 72 20 63 68 72 24 28 29 00
.01093e					Function_Asc:
.01093e	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010941	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get string
.010944	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010947	a8		tay				tay 								; string address in Y
.010948	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.01094b	29 ff 00	and #$00ff			and 	#$00FF
.01094e	f0 0b		beq $01095b			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010950	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010953	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010956	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010958	74 10		stz $10,x			stz 	EXSValueH+0,x
.01095a	60		rts				rts
.01095b					_FASBad:
.01095b	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01095e	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010966	65 20 66 6f 72 20 61 73 63 28 29 00
.010972					Function_SPC:
.010972	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string
.010975	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010978	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01097b	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01097e	d0 17		bne $010997			bne 	_FSPBad
.010980	48		pha				pha 								; save length
.010981	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; allocate character space
.010984	7a		ply				ply 								; get count in Y
.010985	f0 09		beq $010990			beq 	_FSPExit 					; if zero, just empty string
.010987					_FSPCopy:
.010987	a9 20 00	lda #$0020			lda 	#" "						; space character
.01098a	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter 		; write it out.
.01098d	88		dey				dey
.01098e	d0 f7		bne $010987			bne 	_FSPCopy	 				; do it Y times
.010990					_FSPExit:
.010990	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010992	95 00		sta $00,x			sta 	EXSValueL+0,x
.010994	74 10		stz $10,x			stz 	EXSValueH+0,x
.010996	60		rts				rts
.010997					_FSPBad:
.010997	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01099a	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109a2	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109ae					Function_LEFT:
.0109ae	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.0109b1	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109b4	48		pha				pha 								; save string on stack.
.0109b5	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; get count
.0109b8	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger
.0109bb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109be	d0 6d		bne $010a2d			bne 	FNStringParameter
.0109c0	85 08		sta $08				sta 	DTemp1 						; save count.
.0109c2	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket
.0109c5	7a		ply				ply 								; Y points to string.
.0109c6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109c9	29 ff 00	and #$00ff			and 	#$00FF
.0109cc	f0 52		beq $010a20			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109ce	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109d0	f0 55		beq $010a27			beq 	FNStringY 					; return string in Y if current len = required len.
.0109d2	90 53		bcc $010a27			bcc 	FNStringY 					; if current < required return whole thing.
.0109d4	c8		iny				iny 								; take from here - start of string
.0109d5	80 33		bra $010a0a			bra 	FNDTemp1Characters
.0109d7					Function_RIGHT:
.0109d7	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.0109da	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109dd	48		pha				pha 								; save string on stack.
.0109de	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; get count
.0109e1	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger
.0109e4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109e7	d0 44		bne $010a2d			bne 	FNStringParameter
.0109e9	85 08		sta $08				sta 	DTemp1 						; save count.
.0109eb	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket
.0109ee	7a		ply				ply 								; Y points to string.
.0109ef	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109f2	29 ff 00	and #$00ff			and 	#$00FF
.0109f5	f0 29		beq $010a20			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109f7	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109f9	f0 2c		beq $010a27			beq 	FNStringY 					; return string in Y if current len = required len.
.0109fb	90 2a		bcc $010a27			bcc 	FNStringY 					; if current < required return whole thing.
.0109fd	38		sec				sec 								; current-required is the number to skip
.0109fe	e5 08		sbc $08				sbc 	DTemp1
.010a00	85 0a		sta $0a				sta 	DTemp1+2
.010a02	98		tya				tya
.010a03	18		clc				clc
.010a04	65 0a		adc $0a				adc 	DTemp1+2
.010a06	a8		tay				tay
.010a07	c8		iny				iny 								; +1 for the count.
.010a08	80 00		bra $010a0a			bra 	FNDTemp1Characters
.010a0a					FNDTemp1Characters:
.010a0a	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a0c	f0 12		beq $010a20			beq 	FNStringEmpty 				; if zero, return empty string.
.010a0e	20 22 05	jsr $010522			jsr 	StringTempAllocate
.010a11	48		pha				pha 								; save the address
.010a12					_FND1Loop:
.010a12	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a15	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter
.010a18	c8		iny				iny
.010a19	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a1b	d0 f5		bne $010a12			bne 	_FND1Loop
.010a1d	7a		ply				ply 								; string address in Y
.010a1e	80 07		bra $010a27			bra 	FNStringY
.010a20					FNStringEmpty:
.010a20	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a23	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; put address of it in Y
.010a26	a8		tay				tay
.010a27					FNStringY:
.010a27	98		tya				tya
.010a28	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a2a	74 12		stz $12,x			stz 	EXSValueH+2,x
.010a2c	60		rts				rts
.010a2d					FNStringParameter:
.010a2d	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010a30	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a38	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010a45					Function_MID:
.010a45	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010a48	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a4b	48		pha				pha 								; save string on stack.
.010a4c	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; get offset (n)
.010a4f	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger
.010a52	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a55	d0 d6		bne $010a2d			bne 	FNStringParameter
.010a57	c9 00 00	cmp #$0000			cmp 	#0
.010a5a	f0 d1		beq $010a2d			beq 	FNStringParameter 			; or zero
.010a5c	48		pha				pha 								; save start position on stack.
.010a5d	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010a60	85 08		sta $08				sta 	DTemp1
.010a62	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010a64	c9 22 32	cmp #$3222			cmp 	#commaTokenID
.010a67	d0 0e		bne $010a77			bne 	_FMINoThird
.010a69	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010a6b	e6 06		inc $06				inc 	DCodePtr
.010a6d	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010a70	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a73	d0 b8		bne $010a2d			bne 	FNStringParameter
.010a75	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010a77					_FMINoThird:
.010a77	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket
.010a7a	68		pla				pla 								; get offset position
.010a7b	85 0c		sta $0c				sta 	DTemp2
.010a7d	7a		ply				ply 								; get address of string in Y
.010a7e	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010a81	29 ff 00	and #$00ff			and 	#$00FF
.010a84	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010a86	90 98		bcc $010a20			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010a88	38		sec				sec 								; calculate number of characters left after
.010a89	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010a8b	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010a8c	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010a8e	b0 02		bcs $010a92			bcs 	_FMISufficient
.010a90	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010a92					_FMISufficient:
.010a92	98		tya				tya 								; get address
.010a93	18		clc				clc
.010a94	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010a96	a8		tay				tay 								; put in Y
.010a97	82 70 ff	brl $010a0a			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010a9a					Function_Peek:
.010a9a	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010a9d	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010aa0	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010aa3	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010aa5	84 0a		sty $0a				sty 	DTemp1+2
.010aa7	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010aaa	b7 08		lda [$08],y			lda 	[DTemp1],y
.010aac	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010aaf	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ab1	74 10		stz $10,x			stz 	EXSValueH+0,x
.010ab3	60		rts				rts
.010ab4					Function_Deek:
.010ab4	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010ab7	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010aba	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010abd	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010abf	84 0a		sty $0a				sty 	DTemp1+2
.010ac1	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ac4	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ac6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ac8	74 10		stz $10,x			stz 	EXSValueH+0,x
.010aca	60		rts				rts
.010acb					Function_Leek:
.010acb	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010ace	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ad1	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010ad4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ad6	84 0a		sty $0a				sty 	DTemp1+2
.010ad8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010adb	b7 08		lda [$08],y			lda 	[DTemp1],y
.010add	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010adf	c8		iny				iny
.010ae0	c8		iny				iny
.010ae1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ae3	95 10		sta $10,x			sta 	EXSValueH+0,x
.010ae5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010ae6					Function_VAL:
.010ae6	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010ae9	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.010aec	48		pha				pha 								; put string address on stack.
.010aed	20 fd 0a	jsr $010afd			jsr 	VALGetBase 					; process , base (shared with STR$())
.010af0	7a		ply				ply 								; get string address back
.010af1	da		phx				phx 								; save X on stack
.010af2	aa		tax				tax 								; base in X
.010af3	98		tya				tya 								; address in A
.010af4	20 37 0b	jsr $010b37			jsr 	StringToInteger
.010af7	fa		plx				plx 								; restore X
.010af8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010afa	94 10		sty $10,x			sty 	EXSValueH+0,x
.010afc	60		rts				rts
.010afd					VALGetBase:
.010afd	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010aff	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if comma, go to get base code.
.010b02	f0 07		beq $010b0b			beq 	_VGBAlternate
.010b04	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket			; expect ), and return 10.
.010b07	a9 0a 00	lda #$000a			lda 	#10
.010b0a	60		rts				rts
.010b0b					_VGBAlternate:
.010b0b	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; skip comma.
.010b0e	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get base
.010b11	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010b14	d0 0e		bne $010b24			bne 	_VGBBadBase
.010b16	c9 02 00	cmp #$0002			cmp 	#2
.010b19	90 09		bcc $010b24			bcc 	_VGBBadBase
.010b1b	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010b1e	b0 04		bcs $010b24			bcs 	_VGBBadBase
.010b20	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; get right bracket and return.
.010b23	60		rts				rts
.010b24					_VGBBadBase:
.010b24	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010b27	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010b2f	65 72 20 42 61 73 65 00
.010b37					StringToInteger:
.010b37	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010b39	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010b3b	29 ff 00	and #$00ff			and 	#$00FF
.010b3e	85 26		sta $26				sta 	DTemp3+2
.010b40	f0 6e		beq $010bb0			beq 	_STIError 					; if length zero it's bad.
.010b42	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010b44	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010b46	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010b48	64 0a		stz $0a				stz 	DTemp1+2
.010b4a	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010b4c	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010b4f	48		pha				pha 								; push on stack
.010b50	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010b53	d0 06		bne $010b5b			bne 	_STILoop
.010b55	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b57	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b59	f0 55		beq $010bb0			beq 	_STIError 					; if only - then error.
.010b5b					_STILoop:
.010b5b	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b5d	20 cf 0b	jsr $010bcf			jsr 	MultiplyTemp1ByA
.010b60	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b62	29 ff 00	and #$00ff			and 	#$00FF
.010b65	20 c0 0b	jsr $010bc0			jsr 	ConvertUpperCase	 		; make U/C
.010b68	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b6b	90 43		bcc $010bb0			bcc 	_STIError
.010b6d	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b70	90 0e		bcc $010b80			bcc 	_STIOkay1
.010b72	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b75	90 39		bcc $010bb0			bcc 	_STIError
.010b77	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b7a	b0 34		bcs $010bb0			bcs 	_STIError
.010b7c	18		clc				clc 								; shift to correct range.
.010b7d	69 09 00	adc #$0009			adc 	#9
.010b80					_STIOkay1:
.010b80	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b83	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b85	b0 29		bcs $010bb0			bcs 	_STIError
.010b87	18		clc				clc 								; add A to DTemp1
.010b88	65 08		adc $08				adc 	DTemp1
.010b8a	85 08		sta $08				sta 	DTemp1
.010b8c	90 02		bcc $010b90			bcc 	_STINoCarry
.010b8e	e6 0a		inc $0a				inc 	DTemp1+2
.010b90					_STINoCarry:
.010b90	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010b92	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010b94	d0 c5		bne $010b5b			bne 	_STILoop 					; loop back.
.010b96	68		pla				pla 								; get optional minus bac
.010b97	c9 2d 00	cmp #$002d			cmp 	#"-"
.010b9a	d0 0f		bne $010bab			bne 	_STINotNegative 			; handle the negative character
.010b9c	38		sec				sec 								; negate DTemp1
.010b9d	a9 00 00	lda #$0000			lda 	#0
.010ba0	e5 08		sbc $08				sbc 	DTemp1
.010ba2	85 08		sta $08				sta 	DTemp1
.010ba4	a9 00 00	lda #$0000			lda 	#0
.010ba7	e5 0a		sbc $0a				sbc 	DTemp1+2
.010ba9	85 0a		sta $0a				sta 	DTemp1+2
.010bab					_STINotNegative:
.010bab	a5 08		lda $08				lda 	DTemp1 						; get the result
.010bad	a4 0a		ldy $0a				ldy 	DTemp1+2
.010baf	60		rts				rts
.010bb0					_STIError:
.010bb0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010bb3	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010bbb	74 61 6e 74 00
.010bc0					ConvertUpperCase:
.010bc0	c9 61 00	cmp #$0061			cmp 	#'a'
.010bc3	90 09		bcc $010bce			bcc 	_CUCExit
.010bc5	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010bc8	b0 04		bcs $010bce			bcs 	_CUCExit
.010bca	38		sec				sec
.010bcb	e9 20 00	sbc #$0020			sbc 	#32
.010bce					_CUCExit:
.010bce	60		rts				rts
.010bcf					MultiplyTemp1ByA:
.010bcf					_MTGeneral:
.010bcf	da		phx				phx
.010bd0	aa		tax				tax 								; multiplier in X
.010bd1	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010bd3	85 0c		sta $0c				sta 	DTemp2
.010bd5	a5 0a		lda $0a				lda 	DTemp1+2
.010bd7	85 0e		sta $0e				sta 	DTemp2+2
.010bd9	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010bdb	64 0a		stz $0a				stz 	DTemp1+2
.010bdd	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010be0					_MTLoop:
.010be0	8a		txa				txa 								; shift X right into C
.010be1	4a		lsr a				lsr 	a
.010be2	aa		tax				tax
.010be3	90 10		bcc $010bf5			bcc 	_MTNoAdd
.010be5	18		clc				clc
.010be6	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010be8	65 0c		adc $0c				adc 	DTemp2
.010bea	85 08		sta $08				sta 	DTemp1
.010bec	a5 0a		lda $0a				lda 	DTemp1+2
.010bee	65 0e		adc $0e				adc 	DTemp2+2
.010bf0	85 0a		sta $0a				sta 	DTemp1+2
.010bf2	90 01		bcc $010bf5			bcc 	_MTNoAdd
.010bf4	c8		iny				iny
.010bf5					_MTNoAdd:
.010bf5	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010bf7	26 0e		rol $0e				rol 	DTemp2+2
.010bf9	90 01		bcc $010bfc			bcc 	_MTNoOverflow
.010bfb	c8		iny				iny
.010bfc					_MTNoOverflow:
.010bfc	8a		txa				txa 								; until multiplier is zero.
.010bfd	d0 e1		bne $010be0			bne 	_MTLoop
.010bff	98		tya				tya
.010c00	18		clc				clc
.010c01	69 ff ff	adc #$ffff			adc 	#$FFFF
.010c04	fa		plx				plx 								; restore X
.010c05	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010c06					Function_Str:
.010c06	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010c09	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c0c	48		pha				pha 								; save YA on the stack
.010c0d	5a		phy				phy
.010c0e	20 fd 0a	jsr $010afd			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c11	85 14		sta $14				sta 	DSignCount
.010c13	7a		ply				ply 								; YA is the number
.010c14	68		pla				pla
.010c15	da		phx				phx
.010c16	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010c18	20 21 0c	jsr $010c21			jsr 	ConvertToString 			; convert it to a string.
.010c1b	fa		plx				plx 								; restore X
.010c1c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010c1e	74 10		stz $10,x			stz 	EXSValueH+0,x
.010c20	60		rts				rts
.010c21					ConvertToString:
.010c21	da		phx				phx 								; save X (base)
.010c22	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010c24	84 26		sty $26				sty 	DTemp3+2
.010c26	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010c28	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010c2b	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; allocate space for return string.
.010c2e	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010c30	10 15		bpl $010c47			bpl 	_CTSNotNegative
.010c32	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010c35	20 b1 0c	jsr $010cb1			jsr 	CTSOutputA
.010c38	38		sec				sec 								; negate DTemp3 which is the number
.010c39	a9 00 00	lda #$0000			lda 	#0
.010c3c	e5 24		sbc $24				sbc 	DTemp3
.010c3e	85 24		sta $24				sta 	DTemp3
.010c40	a9 00 00	lda #$0000			lda 	#0
.010c43	e5 26		sbc $26				sbc 	DTemp3+2
.010c45	85 26		sta $26				sta 	DTemp3+2
.010c47					_CTSNotNegative:
.010c47	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010c4a	48		pha				pha
.010c4b	a9 00 00	lda #$0000			lda 	#0
.010c4e	48		pha				pha
.010c4f	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010c51	85 08		sta $08				sta 	DTemp1
.010c53	64 0a		stz $0a				stz 	DTemp1+2
.010c55					_CTSMultiplySubtractor:
.010c55	38		sec				sec 								; check number vs subtractor
.010c56	a5 24		lda $24				lda 	DTemp3
.010c58	e5 08		sbc $08				sbc 	DTemp1
.010c5a	a5 26		lda $26				lda 	DTemp3+2
.010c5c	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c5e	90 0f		bcc $010c6f			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c60	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c62	48		pha				pha
.010c63	a5 0a		lda $0a				lda 	DTemp1+2
.010c65	48		pha				pha
.010c66	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c68	20 cf 0b	jsr $010bcf			jsr 	MultiplyTemp1ByA
.010c6b	b0 02		bcs $010c6f			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c6d	80 e6		bra $010c55			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c6f					_CTSScaledUp:
.010c6f	7a		ply				ply 								; YA contains the previous divider.
.010c70	68		pla				pla
.010c71	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c74	d0 05		bne $010c7b			bne 	_CTSHasDigit
.010c76	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c79	f0 20		beq $010c9b			beq 	_CTSExit
.010c7b					_CTSHasDigit:
.010c7b	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c7d	84 0e		sty $0e				sty 	DTemp2+2
.010c7f	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c82					_CTSSubLoop:
.010c82	38		sec				sec 								; subtract subtractor from number
.010c83	a5 24		lda $24				lda 	DTemp3
.010c85	e5 0c		sbc $0c				sbc 	DTemp2
.010c87	a8		tay				tay 								; intermediate in Y
.010c88	a5 26		lda $26				lda 	DTemp3+2
.010c8a	e5 0e		sbc $0e				sbc 	DTemp2+2
.010c8c	90 07		bcc $010c95			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010c8e	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010c90	84 24		sty $24				sty 	DTemp3
.010c92	e8		inx				inx 								; one more subtraction
.010c93	80 ed		bra $010c82			bra 	_CTSSubLoop 				; try it again.
.010c95					_CTSFinishedSubtracting:
.010c95	8a		txa				txa 								; convert to ASCII.
.010c96	20 a4 0c	jsr $010ca4			jsr 	CTSOutputHexDigit 			; write that out.
.010c99	80 d4		bra $010c6f			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010c9b					_CTSExit:
.010c9b	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010c9d	20 a4 0c	jsr $010ca4			jsr 	CTSOutputHexDigit
.010ca0	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010ca2	fa		plx				plx 								; restore X.
.010ca3	60		rts				rts
.010ca4					CTSOutputHexDigit:
.010ca4	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010ca7	90 04		bcc $010cad			bcc 	_CTSNotLetter
.010ca9	18		clc				clc
.010caa	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010cad					_CTSNotLetter:
.010cad	18		clc				clc
.010cae	69 30 00	adc #$0030			adc 	#48
.010cb1					CTSOutputA:
.010cb1	5a		phy				phy 								; save Y, set Y to current pointer
.010cb2	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010cb4	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010cb7	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010cb9	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010cbb	1a		inc a				inc 	a
.010cbc	92 18		sta ($18)			sta 	(DStartTempString)
.010cbe	c2 20		rep #$20			rep 	#$20
.010cc0	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010cc2	7a		ply				ply 								; restore Y and exit.
.010cc3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010cc4					Function_UPPER:
.010cc4	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010cc7	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; evaluate a string.
.010cca	48		pha				pha
.010ccb	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; close call.
.010cce	20 22 05	jsr $010522			jsr		StringTempAllocate 			; allocate memory for it
.010cd1	68		pla				pla
.010cd2	20 5c 05	jsr $01055c			jsr 	StringCreateCopy 			; create a copy of it.
.010cd5	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010cd7	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cd9	a8		tay				tay 								; address in Y
.010cda	74 10		stz $10,x			stz 	EXSValueH+0,x
.010cdc	da		phx				phx 								; save X
.010cdd	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010cdf	29 ff 00	and #$00ff			and 	#$00FF
.010ce2	f0 20		beq $010d04			beq 	_FUPExit
.010ce4	aa		tax				tax 								; put in X
.010ce5					_FUPLoop:
.010ce5	c8		iny				iny 								; increment and load character
.010ce6	b9 00 00	lda $0000,y			lda 	$0000,y
.010ce9	29 ff 00	and #$00ff			and 	#$00FF
.010cec	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010cef	90 10		bcc $010d01			bcc 	_FUPNoChange
.010cf1	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010cf4	b0 0b		bcs $010d01			bcs 	_FUPNoChange
.010cf6	38		sec				sec 								; shift case
.010cf7	e9 20 00	sbc #$0020			sbc 	#32
.010cfa	e2 20		sep #$20			sep 	#$20 						; write back
.010cfc	99 00 00	sta $0000,y			sta 	$0000,y
.010cff	c2 20		rep #$20			rep 	#$20
.010d01					_FUPNoChange:
.010d01	ca		dex				dex 								; do X times
.010d02	d0 e1		bne $010ce5			bne 	_FUPLoop
.010d04					_FUPExit:
.010d04	fa		plx				plx 								; restore X
.010d05	60		rts				rts
.010d06					Function_LOWER:
.010d06	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010d09	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; evaluate a string.
.010d0c	48		pha				pha
.010d0d	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; close call.
.010d10	20 22 05	jsr $010522			jsr		StringTempAllocate 			; allocate memory for it
.010d13	68		pla				pla
.010d14	20 5c 05	jsr $01055c			jsr 	StringCreateCopy 			; create a copy of it.
.010d17	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d19	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d1b	a8		tay				tay 								; address in Y
.010d1c	74 10		stz $10,x			stz 	EXSValueH+0,x
.010d1e	da		phx				phx 								; save X
.010d1f	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d21	29 ff 00	and #$00ff			and 	#$00FF
.010d24	f0 20		beq $010d46			beq 	_FLOExit
.010d26	aa		tax				tax 								; put in X
.010d27					_FLOLoop:
.010d27	c8		iny				iny 								; increment and load character
.010d28	b9 00 00	lda $0000,y			lda 	$0000,y
.010d2b	29 ff 00	and #$00ff			and 	#$00FF
.010d2e	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010d31	90 10		bcc $010d43			bcc 	_FLONoChange
.010d33	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010d36	b0 0b		bcs $010d43			bcs 	_FLONoChange
.010d38	18		clc				clc 								; shift case
.010d39	69 20 00	adc #$0020			adc 	#32
.010d3c	e2 20		sep #$20			sep 	#$20 						; write back
.010d3e	99 00 00	sta $0000,y			sta 	$0000,y
.010d41	c2 20		rep #$20			rep 	#$20
.010d43					_FLONoChange:
.010d43	ca		dex				dex 								; do X times
.010d44	d0 e1		bne $010d27			bne 	_FLOLoop
.010d46					_FLOExit:
.010d46	fa		plx				plx 								; restore X
.010d47	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010d48					Function_Let:
.010d48	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010d4a	48		pha				pha  								; save on stack for later.
.010d4b	20 49 03	jsr $010349			jsr 	VariableFind 				; find the variable
.010d4e	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010d50	b0 1c		bcs $010d6e			bcs 	_FLetFound 					; skip if found.
.010d52	68		pla				pla 								; get and push the first token again.
.010d53	48		pha				pha
.010d54	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010d57	d0 57		bne $010db0			bne 	_FLError					; arrays, so this causes an error.
.010d59	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010d5b	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010d5e	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create it.
.010d61	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010d63					_FLSkipToken:
.010d63	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010d65	e6 06		inc $06				inc 	DCodePtr
.010d67	e6 06		inc $06				inc 	DCodePtr
.010d69	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010d6c	d0 f5		bne $010d63			bne 	_FLSkipToken
.010d6e					_FLetFound:
.010d6e	68		pla				pla 								; get and save the first token.
.010d6f	48		pha				pha
.010d70	a8		tay				tay 								; put it in Y
.010d71	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010d74	f0 07		beq $010d7d			beq 	_FLetNotArray
.010d76	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010d78	20 c0 03	jsr $0103c0			jsr 	VariableSubscript			; index calculation
.010d7b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010d7d					_FLetNotArray:
.010d7d	7a		ply				ply 								; get the first token into Y
.010d7e	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010d80	48		pha				pha
.010d81	5a		phy				phy 								; save the first token on the stack.
.010d82	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010d85	20 98 04	jsr $010498			jsr 	ExpectToken
.010d88	68		pla				pla 								; restore the first token.
.010d89	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010d8c	d0 0f		bne $010d9d			bne 	_FLetString 				; skip if string.
.010d8e	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; get an integer
.010d91	7a		ply				ply 								; get address in Y
.010d92	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010d94	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010d97	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010d99	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010d9c	60		rts				rts
.010d9d					_FLetString:
.010d9d	20 e9 02	jsr $0102e9			jsr 	EvaluateString 				; get a string.
.010da0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010da2	20 7d 05	jsr $01057d			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010da5	7a		ply				ply 								; get address
.010da6	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010da9	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010dac	99 02 00	sta $0002,y			sta 	$0002,y
.010daf	60		rts				rts
.010db0					_FLError:
.010db0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010db3	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010dbb	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010dc3					Function_PRINT:
.010dc3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010dc5	f0 33		beq $010dfa			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010dc7	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; likewise if a colon.
.010dca	f0 2e		beq $010dfa			beq 	_FPRExitCR
.010dcc	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID 			; semicolon, skip it
.010dcf	f0 23		beq $010df4			beq 	_FPRSkipLoop
.010dd1	c9 27 32	cmp #$3227			cmp 	#squoteTokenID 				; single quote is CR
.010dd4	f0 1b		beq $010df1			beq 	_FPRNewLine
.010dd6	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; , is tab.
.010dd9	f0 11		beq $010dec			beq 	_FPRTab
.010ddb					_FPRExpression:
.010ddb	20 bc 01	jsr $0101bc			jsr 	Evaluate 					; evaluate a string or integer.
.010dde	b0 06		bcs $010de6			bcs 	_FPRHaveString
.010de0	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010de3	20 21 0c	jsr $010c21			jsr 	ConvertToString
.010de6					_FPRHaveString:
.010de6	a8		tay				tay 								; print the basic String.
.010de7	20 08 05	jsr $010508			jsr 	PrintBASICString
.010dea	80 d7		bra $010dc3			bra 	Function_Print 				; and go round again.
.010dec					_FPRTab:
.010dec	20 d0 14	jsr $0114d0			jsr 	HWTab
.010def	80 03		bra $010df4			bra 	_FPRSkipLoop
.010df1					_FPRNewLine:
.010df1	20 bd 14	jsr $0114bd			jsr 	HWNewLine
.010df4					_FPRSkipLoop:
.010df4	e6 06		inc $06				inc 	DCodePtr
.010df6	e6 06		inc $06				inc 	DCodePtr
.010df8	80 c9		bra $010dc3			bra 	Function_Print
.010dfa					_FPRExitCR:
.010dfa	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010dfc	88		dey				dey
.010dfd	88		dey				dey
.010dfe	b9 00 00	lda $0000,y			lda 	$0000,y
.010e01	c9 22 32	cmp #$3222			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.010e04	f0 08		beq $010e0e			beq 	_FPRExit
.010e06	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID
.010e09	f0 03		beq $010e0e			beq 	_FPRExit
.010e0b	20 bd 14	jsr $0114bd			jsr 	HWNewLine 					; print a new line.
.010e0e					_FPRExit:
.010e0e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.010e0f					Function_IF:
.010e0f	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; check success.
.010e12	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010e14	05 08		ora $08				ora 	DTemp1
.010e16	a8		tay				tay 								; success flag in Y.
.010e17	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010e19	c9 43 3a	cmp #$3a43			cmp 	#thenTokenID
.010e1c	d0 32		bne $010e50			bne 	_FIFExtended 				; if so, go to the extended IF.
.010e1e	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010e20	e6 06		inc $06				inc 	DCodePtr
.010e22	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010e25	f0 0f		beq $010e36			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010e27	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010e29	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010e2c	90 21		bcc $010e4f			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010e2e	c9 00 c0	cmp #$c000			cmp 	#$C000
.010e31	b0 1c		bcs $010e4f			bcs 	_FIFContinue
.010e33	4c c5 10	jmp $0110c5			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010e36					_FIFEndOfLine:
.010e36	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010e38	f0 15		beq $010e4f			beq 	_FIFContinue 				; if done so, continue.
.010e3a	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010e3d	90 06		bcc $010e45			bcc 	_FIFStringConstant
.010e3f	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010e41	e6 06		inc $06				inc 	DCodePtr
.010e43	80 f1		bra $010e36			bra 	_FIFEndOfLine
.010e45					_FIFStringConstant:
.010e45	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010e48	18		clc				clc
.010e49	65 06		adc $06				adc 	DCodePtr
.010e4b	85 06		sta $06				sta 	DCodePtr
.010e4d	80 e7		bra $010e36			bra 	_FIFEndOfLine
.010e4f					_FIFContinue:
.010e4f	60		rts				rts
.010e50					_FIFExtended:
.010e50	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010e52	e6 2a		inc $2a				inc 	DStack
.010e54	a9 3f 3c	lda #$3c3f			lda 	#ifTokenID
.010e57	a6 2a		ldx $2a				ldx 	DStack
.010e59	95 00		sta $00,x			sta 	$00,x
.010e5b	98		tya				tya 								; see if the test was passed.
.010e5c	f0 01		beq $010e5f			beq 	_FIXSkip 					; if zero then it has failed.
.010e5e	60		rts				rts 								; test passed, so continue executing
.010e5f					_FIXSkip:
.010e5f	a9 39 3e	lda #$3e39			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010e62	a2 44 3a	ldx #$3a44			ldx 	#endifTokenID 				; at the same level.
.010e65	20 c5 0e	jsr $010ec5			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010e68	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010e6a	e6 06		inc $06				inc 	DCodePtr
.010e6c	c9 44 3a	cmp #$3a44			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010e6f	d0 04		bne $010e75			bne 	_FIXNoThrow
.010e71	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010e73	c6 2a		dec $2a				dec 	DStack
.010e75					_FIXNoThrow:
.010e75	60		rts				rts
.010e76					Handler_ELSE:
.010e76	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010e78	b5 00		lda $00,x			lda 	$00,x
.010e7a	c9 3f 3c	cmp #$3c3f			cmp 	#ifTokenID
.010e7d	d0 12		bne $010e91			bne 	_HEBadStructure
.010e7f	a9 44 3a	lda #$3a44			lda 	#endifTokenID 				; only searching one token.
.010e82	a2 00 00	ldx #$0000			ldx 	#$0000
.010e85	20 c5 0e	jsr $010ec5			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010e88	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010e8a	e6 06		inc $06				inc 	DCodePtr
.010e8c	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010e8e	c6 2a		dec $2a				dec 	DStack
.010e90	60		rts				rts
.010e91					_HEBadStructure:
.010e91	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010e94	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010e9c	68 6f 75 74 20 49 66 00
.010ea4					Handler_ENDIF:
.010ea4	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010ea6	b5 00		lda $00,x			lda 	$00,x
.010ea8	c9 3f 3c	cmp #$3c3f			cmp 	#ifTokenID
.010eab	d0 05		bne $010eb2			bne 	_HEIBadStructure
.010ead	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010eaf	c6 2a		dec $2a				dec 	DStack
.010eb1	60		rts				rts
.010eb2					_HEIBadStructure:
.010eb2	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010eb5	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010ebd	68 6f 75 74 20 49 66 00
.010ec5					ScanForwardLevel:
.010ec5	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010ec7	86 0a		stx $0a				stx 	DTemp1+2
.010ec9	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010ecb	85 0c		sta $0c				sta 	DTemp2
.010ecd	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010ed0					_SFLLoop:
.010ed0	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010ed3	d0 0d		bne $010ee2			bne 	_SFLNoCheck 				; we're in a substructure.
.010ed5	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010ed7	f0 09		beq $010ee2			beq 	_SFLNoCheck 				; don't check zero
.010ed9	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010edb	f0 04		beq $010ee1			beq 	_SFLFound
.010edd	c5 0a		cmp $0a				cmp 	DTemp1+2
.010edf	d0 01		bne $010ee2			bne 	_SFLNoCheck
.010ee1					_SFLFound:
.010ee1	60		rts				rts
.010ee2					_SFLNoCheck:
.010ee2	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010ee4	f0 4f		beq $010f35			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010ee6	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010ee9	90 40		bcc $010f2b			bcc 	_SFLSkipString 				; then handle that.
.010eeb	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010eed	e6 06		inc $06				inc 	DCodePtr
.010eef	a8		tay				tay 								; put token in Y temporarily.
.010ef0	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010ef3	c9 00 20	cmp #$2000			cmp 	#$2000
.010ef6	d0 d8		bne $010ed0			bne 	_SFLLoop
.010ef8	98		tya				tya 								; get the token back.
.010ef9	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010efc	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010eff	f0 cf		beq $010ed0			beq 	_SFLLoop
.010f01	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010f04	90 ca		bcc $010ed0			bcc 	_SFLLoop
.010f06	e8		inx				inx 								; increment the level.
.010f07	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010f0a	f0 c4		beq $010ed0			beq 	_SFLLoop
.010f0c	ca		dex				dex 								; decrement the level
.010f0d	ca		dex				dex 								; one overdoes the previous inx.
.010f0e	10 c0		bpl $010ed0			bpl 	_SFLLoop 					; if gone -ve then error.
.010f10					_SFLError:
.010f10	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010f12	85 22		sta $22				sta 	DLineNumber
.010f14	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010f17	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010f1f	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010f2b					_SFLSkipString:
.010f2b	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010f2e	18		clc				clc
.010f2f	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010f31	85 06		sta $06				sta 	DCodePtr
.010f33	80 9b		bra $010ed0			bra 	_SFLLoop 					; go round again.
.010f35					_SFLNextLine:
.010f35	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010f37	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010f3a	f0 d4		beq $010f10			beq 	_SFLError 					; if zero, then there's no more code to search.
.010f3c	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010f3f	85 22		sta $22				sta 	DLineNumber
.010f41	18		clc				clc
.010f42	a5 06		lda $06				lda 	DCodePtr
.010f44	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010f47	85 06		sta $06				sta 	DCodePtr
.010f49	80 85		bra $010ed0			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.010f4b					Command_FOR:
.010f4b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.010f4d	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.010f50	d0 60		bne $010fb2			bne		_CFOBad
.010f52	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find variable
.010f55	b0 15		bcs $010f6c			bcs 	_CFOExists
.010f57	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010f59	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010f5c	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create it.
.010f5f	48		pha				pha 								; save on stack
.010f60					_CFOSkipToken:
.010f60	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010f62	e6 06		inc $06				inc 	DCodePtr
.010f64	e6 06		inc $06				inc 	DCodePtr
.010f66	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010f69	d0 f5		bne $010f60			bne 	_CFOSkipToken
.010f6b	68		pla				pla 								; restore address
.010f6c					_CFOExists:
.010f6c	48		pha				pha 								; push variable address on stack
.010f6d	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.010f70	20 98 04	jsr $010498			jsr 	ExpectToken
.010f73	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; this is the start value
.010f76	bb		tyx				tyx 								; put high value in X
.010f77	7a		ply				ply 								; address in Y
.010f78	99 00 00	sta $0000,y			sta 	$0000,y
.010f7b	8a		txa				txa
.010f7c	99 02 00	sta $0002,y			sta 	$0002,y
.010f7f	a9 28 32	lda #$3228			lda 	#toTokenID 					; expect the TO
.010f82	20 98 04	jsr $010498			jsr 	ExpectToken
.010f85	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.010f87	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.010f89	95 02		sta $02,x			sta 	$02,x
.010f8b	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010f8d	95 04		sta $04,x			sta 	$04,x
.010f8f	98		tya				tya 								; save variable address at +6
.010f90	95 06		sta $06,x			sta 	$06,x
.010f92	a9 40 3c	lda #$3c40			lda 	#forTokenID 				; save for token at +8
.010f95	95 08		sta $08,x			sta 	$08,x
.010f97	8a		txa				txa 								; add 8 to stack position
.010f98	18		clc				clc
.010f99	69 08 00	adc #$0008			adc 	#8
.010f9c	85 2a		sta $2a				sta 	DStack
.010f9e	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.010fa1	b2 06		lda ($06)			lda 	(DCodePtr)
.010fa3	c9 29 32	cmp #$3229			cmp 	#stepTokenID 				; if STEP x is present.
.010fa6	d0 09		bne $010fb1			bne 	_CFONoStep
.010fa8	a9 29 32	lda #$3229			lda 	#stepTokenID 				; skip STEP
.010fab	20 98 04	jsr $010498			jsr 	ExpectToken
.010fae	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; and whatever the step is.
.010fb1					_CFONoStep:
.010fb1	60		rts				rts
.010fb2					_CFOBad:
.010fb2	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010fb5	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>010fbd	76 61 72 69 61 62 6c 65 00
.010fc6					Command_NEXT:
.010fc6	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.010fc8	b5 00		lda $00,x			lda 	$00,x
.010fca	c9 40 3c	cmp #$3c40			cmp 	#forTokenID 				; if not FOR then error
.010fcd	f0 14		beq $010fe3			beq 	_CNXOk
.010fcf	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010fd2	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>010fda	68 6f 75 74 20 46 6f 72 00
.010fe3					_CNXOk:
.010fe3	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.010fe5	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.010fe8	90 22		bcc $01100c			bcc 	_CNXNoVariable
.010fea	20 49 03	jsr $010349			jsr 	VariableFind 				; get address of variable.
.010fed	90 08		bcc $010ff7			bcc 	_CNXNextVar 				; not found variable, it's an error.
.010fef	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.010ff1	ca		dex				dex
.010ff2	ca		dex				dex
.010ff3	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.010ff5	f0 15		beq $01100c			beq 	_CNXNoVariable 				; then continue
.010ff7					_CNXNextVar:
.010ff7	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010ffa	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011002	20 76 61 72 69 61 62 6c 65 00
.01100c					_CNXNoVariable:
.01100c	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.01100e	48		pha				pha
.01100f	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011011	38		sec				sec
.011012	e9 08 00	sbc #$0008			sbc 	#8
.011015	85 2a		sta $2a				sta 	DStack
.011017	aa		tax				tax 								; X points to the stack.
.011018	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01101a	85 06		sta $06				sta 	DCodePtr
.01101c	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; this is the target constant
.01101f	5a		phy				phy 								; save the target on the stack
.011020	48		pha				pha
.011021	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011024	85 08		sta $08				sta 	DTemp1
.011026	64 0a		stz $0a				stz 	DTemp1+2
.011028	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01102a	c9 29 32	cmp #$3229			cmp 	#stepTokenID
.01102d	d0 0b		bne $01103a			bne 	_CNXNoStep
.01102f	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011031	e6 06		inc $06				inc 	DCodePtr
.011033	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; work out the step.
.011036	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011038	84 0a		sty $0a				sty 	DTemp1+2
.01103a					_CNXNoStep:
.01103a	68		pla				pla 								; save the Target in DTemp2
.01103b	85 0c		sta $0c				sta 	DTemp2
.01103d	68		pla				pla
.01103e	85 0e		sta $0e				sta 	DTemp2+2
.011040	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011042	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.011044	a8		tay				tay
.011045	18		clc				clc
.011046	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011049	65 08		adc $08				adc 	DTemp1
.01104b	99 00 00	sta $0000,y			sta 	$0000,y
.01104e	b9 02 00	lda $0002,y			lda 	$0002,y
.011051	65 0a		adc $0a				adc 	DTemp1+2
.011053	99 02 00	sta $0002,y			sta 	$0002,y
.011056	38		sec				sec
.011057	a5 0c		lda $0c				lda 	DTemp2
.011059	f9 00 00	sbc $0000,y			sbc 	$0000,y
.01105c	85 0c		sta $0c				sta 	DTemp2
.01105e	a5 0e		lda $0e				lda 	DTemp2+2
.011060	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011063	85 0e		sta $0e				sta 	DTemp2+2
.011065	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011067	f0 0a		beq $011073			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011069	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01106b	45 0a		eor $0a				eor 	DTemp1+2
.01106d	10 04		bpl $011073			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.01106f	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011070	85 06		sta $06				sta 	DCodePtr
.011072	60		rts				rts
.011073					_CNXLoopAgain:
.011073	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011074	18		clc				clc
.011075	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011077	aa		tax				tax
.011078	69 08 00	adc #$0008			adc 	#8
.01107b	85 2a		sta $2a				sta 	DStack
.01107d	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.01107f	85 22		sta $22				sta 	DLineNumber
.011081	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.011082					Function_ONGOTO:
.011082	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; on what GOTO :)
.011085	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011088	d0 25		bne $0110af			bne 	_FOGoFail
.01108a	c9 00 00	cmp #$0000			cmp 	#0
.01108d	f0 20		beq $0110af			beq 	_FOGoFail 					; we start with index = 1
.01108f	48		pha				pha 								; save count on stack
.011090	a9 35 3e	lda #$3e35			lda 	#gotoTokenID 				; expect GOTO
.011093	20 98 04	jsr $010498			jsr 	ExpectToken
.011096	fa		plx				plx 								; put count in X.
.011097					_FOGoLoop:
.011097	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011099	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01109c	90 73		bcc $011111			bcc 	FGOFail 					; if not, then we have an error.
.01109e	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110a1	b0 6e		bcs $011111			bcs 	FGOFail
.0110a3	ca		dex				dex 								; subtract one, if done, call GOTO code
.0110a4	f0 1f		beq $0110c5			beq 	Function_GOTO
.0110a6	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0110a8	e6 06		inc $06				inc 	DCodePtr
.0110aa	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; expect a comma
.0110ad	80 e8		bra $011097			bra 	_FOGoLoop 					; and loop round.
.0110af					_FOGoFail:
.0110af	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0110b2	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0110ba	47 6f 74 6f 20 76 61 6c 75 65 00
.0110c5					Function_GOTO:
.0110c5	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0110c7	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0110ca	90 45		bcc $011111			bcc 	FGOFail 					; we don't do calculate line numbers.
.0110cc	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110cf	b0 40		bcs $011111			bcs 	FGOFail
.0110d1	38		sec				sec 								; convert to 0-32767
.0110d2	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0110d5	aa		tax				tax
.0110d6	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.0110d9	18		clc				clc
.0110da	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0110dc	a8		tay				tay
.0110dd					_FGOSearch:
.0110dd	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0110e0	f0 18		beq $0110fa			beq 	_FGOUnknown
.0110e2	8a		txa				txa 								; does it match line number ?
.0110e3	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0110e6	f0 08		beq $0110f0			beq 	_FGOFound 					; yes, then found.
.0110e8	98		tya				tya 								; no follow the link
.0110e9	18		clc				clc
.0110ea	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0110ed	a8		tay				tay
.0110ee	80 ed		bra $0110dd			bra 	_FGOSearch 					; and keep looking
.0110f0					_FGOFound:
.0110f0	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0110f2	98		tya				tya 								; Y + 4 is the code pointer.
.0110f3	18		clc				clc 								; (skipping link and line #)
.0110f4	69 04 00	adc #$0004			adc 	#4
.0110f7	85 06		sta $06				sta 	DCodePtr
.0110f9	60		rts				rts									; and continue
.0110fa					_FGOUnknown:
.0110fa	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0110fd	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011105	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011111					FGOFail:
.011111	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011114	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>01111c	20 4e 75 6d 62 65 72 00
.011124					Function_GOSUB:
.011124	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011126	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011128	18		clc				clc
.011129	69 02 00	adc #$0002			adc 	#2
.01112c	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01112e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011130	95 04		sta $04,x			sta 	$04,x
.011132	a9 36 3e	lda #$3e36			lda 	#gosubTokenID 				; save gosub token at +6
.011135	95 06		sta $06,x			sta 	$06,x
.011137	8a		txa				txa 								; advance stack by 6.
.011138	18		clc				clc
.011139	69 06 00	adc #$0006			adc 	#6
.01113c	85 2a		sta $2a				sta 	DStack
.01113e	80 85		bra $0110c5			bra 	Function_GOTO 				; and do a GOTO.
.011140					Function_RETURN:
.011140	a6 2a		ldx $2a				ldx 	DStack
.011142	b5 00		lda $00,x			lda 	$00,x
.011144	c9 36 3e	cmp #$3e36			cmp 	#gosubTokenID 				; check top token.
.011147	d0 11		bne $01115a			bne 	_FRetFail
.011149	8a		txa				txa 								; unpick stack.
.01114a	38		sec				sec
.01114b	e9 06 00	sbc #$0006			sbc 	#6
.01114e	85 2a		sta $2a				sta 	DStack
.011150	aa		tax				tax
.011151	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011153	85 06		sta $06				sta 	DCodePtr
.011155	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011157	85 22		sta $22				sta 	DLineNumber
.011159	60		rts				rts
.01115a					_FRetFail:
.01115a	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01115d	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011165	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011172					Function_REPEAT:
.011172	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011174	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011176	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011178	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01117a	95 04		sta $04,x			sta 	$04,x
.01117c	a9 3d 3c	lda #$3c3d			lda 	#repeatTokenID 				; save repeat token at +6
.01117f	95 06		sta $06,x			sta 	$06,x
.011181	8a		txa				txa 								; advance stack by 6.
.011182	18		clc				clc
.011183	69 06 00	adc #$0006			adc 	#6
.011186	85 2a		sta $2a				sta 	DStack
.011188	60		rts				rts
.011189					Function_UNTIL:
.011189	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.01118b	b5 00		lda $00,x			lda 	$00,x
.01118d	c9 3d 3c	cmp #$3c3d			cmp 	#repeatTokenID
.011190	d0 26		bne $0111b8			bne 	_FUNFail
.011192	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; .... until what.
.011195	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011198	d0 15		bne $0111af			bne 	_FUNExit
.01119a	c9 00 00	cmp #$0000			cmp 	#0
.01119d	d0 10		bne $0111af			bne 	_FUNExit
.01119f	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0111a1	38		sec				sec
.0111a2	e9 06 00	sbc #$0006			sbc 	#6
.0111a5	aa		tax				tax
.0111a6	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0111a8	85 06		sta $06				sta 	DCodePtr
.0111aa	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0111ac	85 22		sta $22				sta 	DLineNumber
.0111ae	60		rts				rts
.0111af					_FUNExit:
.0111af	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0111b1	38		sec				sec
.0111b2	e9 06 00	sbc #$0006			sbc 	#6
.0111b5	85 2a		sta $2a				sta 	DStack
.0111b7	60		rts				rts
.0111b8					_FUNFail:
.0111b8	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0111bb	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0111c3	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.0111d0					Function_WHILE:
.0111d0	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0111d2	48		pha				pha 								; save on stack
.0111d3	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; while what.
.0111d6	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0111d9	d0 14		bne $0111ef			bne 	_FWHExecute
.0111db	c9 00 00	cmp #$0000			cmp 	#0
.0111de	d0 0f		bne $0111ef			bne 	_FWHExecute
.0111e0	68		pla				pla 								; throw away current instruction
.0111e1	a9 41 3a	lda #$3a41			lda 	#wendTokenID 				; skip to WEND
.0111e4	a2 00 00	ldx #$0000			ldx 	#0
.0111e7	20 c5 0e	jsr $010ec5			jsr 	ScanForwardLevel 			; scan forward checking structures
.0111ea	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0111ec	e6 06		inc $06				inc 	DCodePtr
.0111ee	60		rts				rts
.0111ef					_FWHExecute:
.0111ef	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0111f1	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0111f2	3a		dec a				dec 	a
.0111f3	3a		dec a				dec 	a
.0111f4	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0111f6	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0111f8	95 04		sta $04,x			sta 	$04,x
.0111fa	a9 3e 3c	lda #$3c3e			lda 	#whileTokenID 				; save while token at +6
.0111fd	95 06		sta $06,x			sta 	$06,x
.0111ff	8a		txa				txa 								; advance stack by 6.
.011200	18		clc				clc
.011201	69 06 00	adc #$0006			adc 	#6
.011204	85 2a		sta $2a				sta 	DStack
.011206	60		rts				rts
.011207					Function_WEND:
.011207	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011209	b5 00		lda $00,x			lda 	$00,x
.01120b	c9 3e 3c	cmp #$3c3e			cmp 	#whileTokenID
.01120e	d0 11		bne $011221			bne 	_FWEFail
.011210	8a		txa				txa 								; unpick stack and always loop back.
.011211	38		sec				sec 								; we do the check at the top.
.011212	e9 06 00	sbc #$0006			sbc 	#6
.011215	85 2a		sta $2a				sta 	DStack
.011217	aa		tax				tax
.011218	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01121a	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.01121c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01121e	85 22		sta $22				sta 	DLineNumber
.011220	60		rts				rts
.011221					_FWEFail:
.011221	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011224	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>01122c	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011237					Function_END:
.011237	02 00		cop #$00			cop 	#0
.011239					Function_RUN:
.011239	20 92 12	jsr $011292			jsr 	Function_CLEAR 				; clear all variables.
.01123c	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.01123e	18		clc				clc
.01123f	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.011242					_FRun_NextLineNumber:
.011242	a8		tay				tay 								; put in Y
.011243	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011246	f0 ef		beq $011237			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011248	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01124b	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01124d	98		tya				tya 								; get address back
.01124e	18		clc				clc 								; skip over the link/line number
.01124f	69 04 00	adc #$0004			adc 	#4
.011252	85 06		sta $06				sta 	DCodePtr
.011254					_FRun_NextInstruction:
.011254	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011256	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011258	f0 32		beq $01128c			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.01125a	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; colon then skip
.01125d	f0 18		beq $011277			beq 	_FRun_Colon
.01125f	a8		tay				tay 								; save in Y
.011260	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011263	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011266	d0 15		bne $01127d			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011268	98		tya				tya 								; get token back
.011269	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01126c	0a		asl a				asl 	a 							; double it into X
.01126d	aa		tax				tax
.01126e	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011270	e6 06		inc $06				inc 	DCodePtr
.011272	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011275	80 dd		bra $011254			bra 	_FRun_NextInstruction 		; do the following instruction.
.011277					_FRun_Colon:
.011277	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011279	e6 06		inc $06				inc 	DCodePtr
.01127b	80 d7		bra $011254			bra 	_FRun_NextInstruction 		; do the following instruction.
.01127d					_FRun_TryLET:
.01127d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.01127f	c9 00 c0	cmp #$c000			cmp 	#$C000
.011282	90 05		bcc $011289			bcc		_FRunSyntax 				; no, must be syntax.
.011284	20 48 0d	jsr $010d48			jsr 	Function_LET 				; try as a LET.
.011287	80 cb		bra $011254			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011289					_FRunSyntax:
.011289	82 fc f1	brl $010488			brl 	SyntaxError
.01128c					_FRun_EndInstruction:
.01128c	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01128e	1a		inc a				inc 	a 							; go to link for next line
.01128f	1a		inc a				inc 	a
.011290	80 b0		bra $011242			bra 	_FRun_NextLineNumber
.011292					Function_CLEAR:
.011292	20 9e 12	jsr $01129e			jsr 	ClearVariablesPointersAndStacks
.011295	60		rts				rts
.011296					Function_STOP:
.011296	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011299	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01129e					ClearVariablesPointersAndStacks:
.01129e	a9 80 00	lda #$0080			lda 	#BASStack
.0112a1	85 2a		sta $2a				sta 	DStack
.0112a3	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.0112a5	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.0112a8	a9 00 00	lda #$0000			lda 	#$0000
.0112ab	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0112ad	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0112af	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0112b2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0112b4	20 db 12	jsr $0112db			jsr 	FindCodeEnd 				; find where the program ends.
.0112b7	a8		tay				tay 								; Y points to it.
.0112b8	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.0112bb	99 02 00	sta $0002,y			sta 	$0002,y
.0112be	99 04 00	sta $0004,y			sta 	$0004,y
.0112c1	98		tya				tya 								; start of working memory up
.0112c2	18		clc				clc
.0112c3	69 06 00	adc #$0006			adc 	#6
.0112c6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0112c9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0112cb	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0112ce					_FCLoop:
.0112ce	a9 00 00	lda #$0000			lda 	#$0000
.0112d1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0112d3	c8		iny				iny
.0112d4	c8		iny				iny
.0112d5	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0112d8	d0 f4		bne $0112ce			bne 	_FCLoop
.0112da	60		rts				rts
.0112db					FindCodeEnd:
.0112db	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.0112de	18		clc				clc
.0112df	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0112e1	a8		tay				tay
.0112e2					_FCELoop:
.0112e2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0112e5	f0 08		beq $0112ef			beq 	_FCEExit
.0112e7	98		tya				tya 								; add offset
.0112e8	18		clc				clc
.0112e9	79 00 00	adc $0000,y			adc 	$0000,y
.0112ec	a8		tay				tay
.0112ed	80 f3		bra $0112e2			bra 	_FCELoop
.0112ef					_FCEExit:
.0112ef	98		tya				tya 								; return in A
.0112f0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.0112f1					Function_Dim:
.0112f1	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0112f3	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0112f6	f0 3b		beq $011333			beq		_FDIMNotArray 				; no, error.
.0112f8	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find it.
.0112fb	b0 41		bcs $01133e			bcs 	_FDIMExists 				; if it does, that's an error.
.0112fd	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0112ff	48		pha				pha
.011300	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011302	48		pha				pha
.011303					_FDIMSkip:
.011303	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011305	e6 06		inc $06				inc 	DCodePtr
.011307	e6 06		inc $06				inc 	DCodePtr
.011309	29 00 08	and #$0800			and 	#IDContMask
.01130c	d0 f5		bne $011303			bne 	_FDIMSkip
.01130e	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; evaluate the size
.011311	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check the ) following.
.011314	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011317	d0 3b		bne $011354			bne 	_FDIMSize
.011319	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.01131c	f0 36		beq $011354			beq 	_FDIMSize
.01131e	7a		ply				ply 								; restore HashTablePtr
.01131f	84 20		sty $20				sty 	DHashTablePtr
.011321	7a		ply				ply 								; so now A is the high index, Y points to the token
.011322	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create the variable.
.011325	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011327	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if not a comma, exit
.01132a	d0 06		bne $011332			bne 	_FDIMExit
.01132c	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01132e	e6 06		inc $06				inc 	DCodePtr
.011330	80 bf		bra $0112f1			bra 	Function_DIM 				; and do another
.011332					_FDIMExit:
.011332	60		rts				rts
.011333					_FDIMNotArray:
.011333	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011336	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01133e					_FDIMExists:
.01133e	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011341	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011349	65 64 69 6d 65 6e 73 69 6f 6e 00
.011354					_FDIMSize:
.011354	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011357	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01135f	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011365					Function_COLLECT:
.011365	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011367	85 0c		sta $0c				sta 	DTemp2
.011369	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.01136c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.01136e	85 0e		sta $0e				sta 	DTemp2+2
.011370	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011372	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011374					_FCNextPass:
.011374	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011376	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011378	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.01137a	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.01137d	18		clc				clc
.01137e	65 02		adc $02				adc 	DBaseAddress
.011380	a8		tay				tay 								; put in Y
.011381	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011384					_FCO1:
.011384	20 aa 13	jsr $0113aa			jsr  	COLLECTScanVariable 		; scan that one.
.011387	c8		iny				iny 	 							; go to next pointer
.011388	c8		iny				iny
.011389	ca		dex				dex
.01138a	d0 f8		bne $011384			bne 	_FCO1 						; until done all 16.
.01138c	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01138f					_FCO2:
.01138f	20 be 13	jsr $0113be			jsr  	COLLECTScanArray 			; scan that one.
.011392	c8		iny				iny 	 							; go to next pointer
.011393	c8		iny				iny
.011394	ca		dex				dex
.011395	d0 f8		bne $01138f			bne 	_FCO2 						; until done all 16.
.011397	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011399	f0 0e		beq $0113a9			beq		_FCExit 					; if finished then exit.
.01139b	48		pha				pha 								; save the target address
.01139c	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01139e	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0113a0	20 7d 05	jsr $01057d			jsr 	StringMakeConcrete 			; make the string concrete.
.0113a3	7a		ply				ply 								; restore the string.
.0113a4	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.0113a7	80 cb		bra $011374			bra		_FCNextPass
.0113a9					_FCExit:
.0113a9	60		rts				rts
.0113aa					COLLECTScanVariable:
.0113aa	da		phx				phx 								; save XY
.0113ab	5a		phy				phy
.0113ac					_CSVLoop:
.0113ac	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0113af	f0 0a		beq $0113bb			beq 	_CSVExit
.0113b1	a8		tay				tay 								; put new address into Y
.0113b2	18		clc				clc 								; which is four on.
.0113b3	69 04 00	adc #$0004			adc 	#4
.0113b6	20 df 13	jsr $0113df			jsr 	COLLECTCheck
.0113b9	80 f1		bra $0113ac			bra 	_CSVLoop
.0113bb					_CSVExit:
.0113bb	7a		ply				ply
.0113bc	fa		plx				plx
.0113bd	60		rts				rts
.0113be					COLLECTScanArray:
.0113be	da		phx				phx 								; save XY
.0113bf	5a		phy				phy
.0113c0					_CSALoop:
.0113c0	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0113c3	f0 17		beq $0113dc			beq 	_CSAExit
.0113c5	a8		tay				tay 								; put new address in Y
.0113c6	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.0113c9	aa		tax				tax
.0113ca	e8		inx				inx									; +1 as one more data element.
.0113cb	98		tya				tya 								; point A to first element, at +6
.0113cc	18		clc				clc
.0113cd	69 06 00	adc #$0006			adc 	#6
.0113d0					_CSADoAllStrings:
.0113d0	20 df 13	jsr $0113df			jsr 	COLLECTCheck 				; collect check the first.
.0113d3	1a		inc a				inc 	a 							; advance the pointer.
.0113d4	1a		inc a				inc 	a
.0113d5	1a		inc a				inc 	a
.0113d6	1a		inc a				inc 	a
.0113d7	ca		dex				dex
.0113d8	d0 f6		bne $0113d0			bne 	_CSADoAllStrings 			; until all strings are done.
.0113da	80 e4		bra $0113c0			bra 	_CSALoop
.0113dc					_CSAExit:
.0113dc	7a		ply				ply
.0113dd	fa		plx				plx
.0113de	60		rts				rts
.0113df					COLLECTCheck:
.0113df	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.0113e1	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.0113e3	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.0113e5	90 0a		bcc $0113f1			bcc 	_COCExit
.0113e7	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.0113e9	b0 06		bcs $0113f1			bcs 	_COCExit
.0113eb	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0113ed	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0113ef	85 14		sta $14				sta 	DSignCount
.0113f1					_COCExit:
.0113f1	a5 0a		lda $0a				lda 	DTemp1+2
.0113f3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.0113f4					Command_POKE:
.0113f4	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.0113f7	48		pha				pha	 								; save on stack
.0113f8	5a		phy				phy
.0113f9	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.0113fc	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.0113ff	fa		plx				plx 								; pull address and store in DTemp1
.011400	86 0a		stx $0a				stx 	DTemp1+2
.011402	fa		plx				plx
.011403	86 08		stx $08				stx 	DTemp1+0
.011405	e2 20		sep #$20			sep 	#$20 						; byte mode
.011407	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011409	c2 20		rep #$20			rep 	#$20 						; word mode
.01140b	60		rts				rts
.01140c					Command_DOKE:
.01140c	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.01140f	48		pha				pha	 								; save on stack
.011410	5a		phy				phy
.011411	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.011414	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.011417	fa		plx				plx 								; pull address and store in DTemp1
.011418	86 0a		stx $0a				stx 	DTemp1+2
.01141a	fa		plx				plx
.01141b	86 08		stx $08				stx 	DTemp1+0
.01141d	87 08		sta [$08]			sta 	[DTemp1]					; write it
.01141f	60		rts				rts
.011420					Command_LOKE:
.011420	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.011423	48		pha				pha	 								; save on stack
.011424	5a		phy				phy
.011425	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.011428	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.01142b	fa		plx				plx 								; pull address and store in DTemp1
.01142c	86 0a		stx $0a				stx 	DTemp1+2
.01142e	fa		plx				plx
.01142f	86 08		stx $08				stx 	DTemp1+0
.011431	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011433	98		tya				tya
.011434	a0 02 00	ldy #$0002			ldy 	#2
.011437	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011439	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.01143a					Function_ASSERT:
.01143a	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; something that returns an integer.
.01143d	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.01143f	05 08		ora $08				ora 	Dtemp1
.011441	f0 01		beq $011444			beq 	_FAssFail
.011443	60		rts				rts
.011444					_FAssFail:
.011444	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011447	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>01144f	61 69 6c 65 64 00
.011455					Function_CLS:
.011455	20 80 14	jsr $011480			jsr 	HWClearScreen
.011458	60		rts				rts
.011459					Function_REM:
.011459	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01145b	f0 0b		beq $011468			beq 	_FRemSyntax 				; if 0, syntax error
.01145d	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011460	b0 06		bcs $011468			bcs 	_FRemSyntax
.011462	18		clc				clc 								; add to DCodePtr
.011463	65 06		adc $06				adc 	DCodePtr
.011465	85 06		sta $06				sta 	DCodePtr
.011467	60		rts				rts
.011468					_FRemSyntax:
.011468	82 1d f0	brl $010488			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.01146b					SwitchBasicInstance:
.01146b	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.01146d	20 80 14	jsr $011480			jsr 	HWClearScreen 						; clear screen
.011470	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011473	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011475	86 02		stx $02				stx		DBaseAddress
.011477	84 04		sty $04				sty 	DHighAddress
.011479	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01147a	48		pha				pha 										; then copy it into B.
.01147b	ab		plb				plb
.01147c	ab		plb				plb
.01147d	4c 39 12	jmp $011239			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011480					HWClearScreen:
.011480	48		pha				pha
.011481	da		phx				phx
.011482	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011485	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011488	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01148c	ca		dex				dex
.01148d	10 f6		bpl $011485			bpl 	_CS0
.01148f	64 28		stz $28				stz 	DCursor
.011491	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011494	8f 00 00 0f	sta $0f0000			sta 	$F0000
.011498	fa		plx				plx
.011499	68		pla				pla
.01149a	60		rts				rts
.01149b					HWPrintChar:
.01149b	48		pha				pha
.01149c	da		phx				phx
.01149d	a6 28		ldx $28				ldx 	DCursor
.01149f	e2 20		sep #$20			sep 	#$20
.0114a1	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0114a5	c2 20		rep #$20			rep 	#$20
.0114a7	e8		inx				inx
.0114a8	8a		txa				txa
.0114a9	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.0114ac	85 28		sta $28				sta 	DCursor
.0114ae	aa		tax				tax
.0114af	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.0114b2	e2 20		sep #$20			sep 	#$20
.0114b4	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0114b8	c2 20		rep #$20			rep 	#$20
.0114ba	fa		plx				plx
.0114bb	68		pla				pla
.0114bc	60		rts				rts
.0114bd					HWNewLine:
.0114bd	48		pha				pha
.0114be	da		phx				phx
.0114bf	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.0114c2					HWMoveCursor:
.0114c2	a9 20 00	lda #$0020			lda 	#32
.0114c5	20 9b 14	jsr $01149b			jsr 	HWPrintChar
.0114c8	8a		txa				txa
.0114c9	25 28		and $28				and 	DCursor
.0114cb	d0 f5		bne $0114c2			bne 	HWMoveCursor
.0114cd	fa		plx				plx
.0114ce	68		pla				pla
.0114cf	60		rts				rts
.0114d0	48		pha		HWTab:	pha
.0114d1	da		phx				phx
.0114d2	a2 07 00	ldx #$0007			ldx 	#7
.0114d5	80 eb		bra $0114c2			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	7c 86 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0e 00 01 00 31 3e 05 d0
>024108	03 40 26 32 00 00 0e 00 02 00 31 3e 0f d0 02 40
>024118	26 32 00 00 0e 00 03 00 31 3e 38 d6 04 40 26 32
>024128	00 00 10 00 04 00 31 3e 63 de 9b d3 04 40 26 32
>024138	00 00 12 00 05 00 31 3e 62 de 6c dc 02 d0 05 40
>024148	26 32 00 00 0e 00 06 00 31 3e 10 d0 02 40 26 32
>024158	00 00 12 00 07 00 31 3e 2d dd cf dc 0a d0 06 40
>024168	26 32 00 00 12 00 08 00 31 3e 4f dd 20 dc 06 d0
>024178	02 40 26 32 00 00 12 00 09 00 31 3e 5a de 5e de
>024188	06 d0 02 40 26 32 00 00 12 00 0a 00 31 3e 2f dd
>024198	d2 dd 12 d0 05 40 26 32 00 00 12 00 0b 00 31 3e
>0241a8	03 fd be fd 01 f0 02 40 26 32 00 00 10 00 0c 00
>0241b8	31 3e ff fd 9b f1 03 40 26 32 00 00 10 00 0d 00
>0241c8	31 3e 5d fd 0a f0 03 40 26 32 00 00 10 00 0e 00
>0241d8	31 3e 76 fd 12 f1 02 40 26 32 00 00 0e 00 0f 00
>0241e8	31 3e 2f f6 02 40 26 32 00 00 10 00 10 00 31 3e
>0241f8	a4 fd 23 f0 04 40 26 32 00 00 0e 00 11 00 31 3e
>024208	2c f6 03 40 26 32 00 00 12 00 12 00 31 3e 04 fe
>024218	20 fc 04 f0 02 40 26 32 00 00 0e 00 13 00 31 3e
>024228	05 f0 03 40 26 32 00 00 10 00 14 00 31 3e 7d fd
>024238	4b f2 06 40 26 32 00 00 12 00 15 00 88 cd 61 cb
>024248	20 c0 06 22 01 10 56 bd 00 00 0e 00 16 00 49 c5
>024258	06 22 0b 24 58 40 00 00 10 00 17 00 2b 3e 17 c0
>024268	06 22 0b 24 ad 40 00 00 10 00 18 00 2b 3e 14 c0
>024278	06 22 0b 24 5a 40 00 00 10 00 19 00 2e cd eb c2
>024288	06 22 04 10 1e a2 00 00 0e 00 1a 00 28 ce 11 c0
>024298	06 22 07 40 00 00 10 00 1b 00 86 c5 06 22 0b 24
>0242a8	01 10 64 53 00 00 0e 00 1c 00 cf c5 06 22 0b 24
>0242b8	4e 40 00 00 0e 00 1d 00 02 c0 06 22 01 10 fa 75
>0242c8	00 00 0e 00 1e 00 2b 3e 54 c5 06 22 9d 40 00 00
>0242d8	12 00 1f 00 2b 3e d1 cc 88 c2 06 22 0b 24 26 40
>0242e8	00 00 10 00 20 00 d1 cd 1c c0 06 22 03 10 27 90
>0242f8	00 00 10 00 21 00 ac cd 0c c0 06 22 03 10 8e be
>024308	00 00 16 00 22 00 2b 3e 5e cd 0f cc 06 c0 06 22
>024318	0b 24 03 10 55 be 00 00 0e 00 23 00 14 ce 23 c0
>024328	06 22 42 b3 00 00 10 00 24 00 cf cd 21 c0 06 22
>024338	01 10 ba a3 00 00 10 00 25 00 2b 3e 1a c5 06 22
>024348	04 10 6c 8b 00 00 14 00 26 00 2b 3e 49 cd a9 c2
>024358	06 22 0b 24 05 10 57 54 00 00 10 00 27 00 03 c5
>024368	06 22 0b 24 01 10 32 b7 00 00 10 00 28 00 0c c0
>024378	06 22 0b 24 02 10 1c 6e 00 00 14 00 29 00 2b 3e
>024388	ed cc b1 ca 1f c0 06 22 0b 24 4a a0 00 00 10 00
>024398	2a 00 d0 cc 0d c5 06 22 0b 24 02 79 00 00 14 00
>0243a8	2b 00 2b 3e 36 ce 74 ce 22 c0 06 22 02 10 75 85
>0243b8	00 00 10 00 2c 00 d4 c5 06 22 0b 24 04 10 a0 98
>0243c8	00 00 14 00 2d 00 2b 3e fc cd 68 c3 06 22 0b 24
>0243d8	02 10 49 52 00 00 12 00 2e 00 2b 3e 19 c0 06 22
>0243e8	0b 24 01 10 92 4e 00 00 10 00 2f 00 2b 3e 2b ce
>0243f8	1a c3 06 22 b9 9c 00 00 10 00 30 00 2b 3e 11 c0
>024408	06 22 01 10 96 4e 00 00 12 00 31 00 4e cd 22 c2
>024418	06 22 0b 24 01 10 15 ac 00 00 14 00 32 00 2b 3e
>024428	82 cd 74 c4 06 22 0b 24 05 10 0d bb 00 00 10 00
>024438	33 00 2b 3e 40 c6 06 22 04 10 a8 48 00 00 10 00
>024448	34 00 15 c0 06 22 0b 24 03 10 39 85 00 00 12 00
>024458	35 00 2b 3e 09 c0 06 22 0b 24 03 10 8f b0 00 00
>024468	12 00 36 00 d0 cd 9c cc 0c c0 06 22 0b 24 96 40
>024478	00 00 12 00 37 00 0c ce 09 c3 06 22 0b 24 04 10
>024488	12 54 00 00 0e 00 38 00 59 cd 15 c0 06 22 a1 40
>024498	00 00 12 00 39 00 54 cd 98 c3 06 22 0b 24 03 10
>0244a8	83 44 00 00 16 00 3a 00 2b 3e ff cd b0 cd 18 c0
>0244b8	06 22 0b 24 04 10 0f 56 00 00 10 00 3b 00 5f cd
>0244c8	14 c0 06 22 0b 24 31 40 00 00 12 00 3c 00 2b 3e
>0244d8	2c c5 06 22 0b 24 01 10 98 51 00 00 14 00 3d 00
>0244e8	2b 3e a5 cd a7 cb 08 c0 06 22 04 10 74 55 00 00
>0244f8	0c 00 3e 00 0d c6 06 22 0c a6 00 00 14 00 3f 00
>024508	2b 3e d0 cd 01 c0 06 22 0b 24 04 10 48 9b 00 00
>024518	12 00 40 00 2c ce 29 c9 06 c0 06 22 0b 24 1c 40
>024528	00 00 10 00 41 00 b4 c5 06 22 0b 24 01 10 87 86
>024538	00 00 10 00 42 00 2b 3e 13 c0 06 22 0b 24 e1 49
>024548	00 00 10 00 43 00 8a cd 13 c0 06 22 05 10 3c 90
>024558	00 00 0e 00 44 00 85 cd a9 c2 06 22 8a 40 00 00
>024568	10 00 45 00 7e cd 0d c6 06 22 03 10 ec 6a 00 00
>024578	12 00 46 00 2b 3e fb cc f0 c3 06 22 01 10 d2 5d
>024588	00 00 0e 00 47 00 f8 c4 06 22 02 10 f1 6f 00 00
>024598	10 00 48 00 06 cd 02 c0 06 22 0b 24 61 40 00 00
>0245a8	12 00 49 00 2b 3e 32 c5 06 22 0b 24 02 10 05 59
>0245b8	00 00 14 00 4a 00 2b 3e fa cc 1a c0 06 22 0b 24
>0245c8	03 10 74 93 00 00 10 00 4b 00 0a ce 10 c0 06 22
>0245d8	0b 24 09 40 00 00 10 00 4c 00 c8 c4 06 22 0b 24
>0245e8	03 10 0e 51 00 00 10 00 4d 00 2b 3e 03 ce b2 c1
>0245f8	06 22 b4 4d 00 00 10 00 4e 00 74 c5 06 22 0b 24
>024608	05 10 a8 a5 00 00 12 00 4f 00 2b 3e 6e ce 13 c0
>024618	06 22 02 10 51 b2 00 00 12 00 50 00 2b 3e 5d ce
>024628	bf c2 06 22 05 10 4e bd 00 00 10 00 51 00 2d ed
>024638	f6 e0 06 22 04 00 01 41 00 00 14 00 52 00 2b 3e
>024648	69 e6 06 22 08 00 05 59 4d 56 46 4b 00 00 14 00
>024658	53 00 11 e0 06 22 0a 00 07 4a 42 4f 56 47 53 52
>024668	00 00 16 00 54 00 d0 ed ba e0 06 22 0a 00 07 4f
>024678	57 41 47 20 56 56 00 00 10 00 55 00 2c e5 06 22
>024688	06 00 02 52 4e 00 00 00 1c 00 56 00 2b 3e 0a ee
>024698	04 ed 1b e0 06 22 0c 00 09 4c 4c 4b 49 20 54 47
>0246a8	47 4e 00 00 10 00 57 00 2b 3e 59 e5 06 22 04 00
>0246b8	00 00 00 00 16 00 58 00 2b 3e d9 e5 06 22 0a 00
>0246c8	06 49 50 20 43 4b 4e 00 00 00 16 00 59 00 2b 3e
>0246d8	0a e0 06 22 0a 00 07 41 4a 48 4e 47 5a 56 00 00
>0246e8	16 00 5a 00 f8 e4 06 22 0c 00 08 4d 43 48 59 4e
>0246f8	45 53 4d 00 00 00 16 00 5b 00 0b e0 06 22 0c 00
>024708	08 4e 55 57 20 20 4b 55 55 00 00 00 14 00 5c 00
>024718	8d ed 06 e0 06 22 08 00 05 43 5a 57 44 52 00 00
>024728	18 00 5d 00 0f e0 06 22 0e 00 0b 43 4c 55 44 20
>024738	58 46 20 47 20 57 00 00 14 00 5e 00 2b 3e cc ec
>024748	05 ee 19 e0 06 22 04 00 00 00 00 00 10 00 5f 00
>024758	4f ed 2b e4 06 22 04 00 01 47 00 00 10 00 60 00
>024768	2b 3e 03 e0 06 22 04 00 01 46 00 00 1c 00 61 00
>024778	2b 3e 31 ee 14 ec 0b e0 06 22 0c 00 08 53 4e 43
>024788	20 53 20 58 43 00 00 00 16 00 62 00 5b e5 06 22
>024798	0c 00 08 49 50 54 20 20 20 4a 5a 00 00 00 14 00
>0247a8	63 00 8a ed 24 e0 06 22 08 00 04 59 4e 20 46 00
>0247b8	00 00 12 00 64 00 2b 3e 5e ee 08 e2 06 22 04 00
>0247c8	01 4e 00 00 14 00 65 00 2b 3e 4c ed 0d e0 06 22
>0247d8	06 00 02 41 41 00 00 00 10 00 66 00 fa e4 06 22
>0247e8	06 00 02 4c 48 00 00 00 16 00 67 00 09 e0 06 22
>0247f8	0c 00 08 52 57 44 57 54 46 46 52 00 00 00 12 00
>024808	68 00 33 ed 1e e0 06 22 06 00 02 58 54 00 00 00
>024818	10 00 69 00 5d e5 06 22 06 00 02 56 50 00 00 00
>024828	10 00 6a 00 a7 ed 1e e0 06 22 04 00 01 54 00 00
>024838	16 00 6b 00 d3 ec 34 ea 02 e0 06 22 08 00 04 4c
>024848	4f 20 45 00 00 00 16 00 6c 00 74 ed 1e e0 06 22
>024858	0a 00 06 56 42 4d 4a 20 45 00 00 00 14 00 6d 00
>024868	2b 3e 4d ed 7a eb 1f e0 06 22 04 00 00 00 00 00
>024878	1e 00 6e 00 2b 3e 5e ee ac ea 1e e0 06 22 0e 00
>024888	0b 47 44 52 45 4a 49 4d 20 42 53 54 00 00 10 00
>024898	6f 00 c5 ec 24 e0 06 22 04 00 01 5a 00 00 14 00
>0248a8	70 00 de ed 9c e3 06 22 08 00 04 49 53 56 58 00
>0248b8	00 00 1a 00 71 00 2b 3e d8 ec d0 e4 06 22 0c 00
>0248c8	09 48 59 54 54 20 20 53 41 55 00 00 1a 00 72 00
>0248d8	2b 3e 05 ee 42 e3 06 22 0c 00 08 49 4c 41 59 4e
>0248e8	4b 4f 4b 00 00 00 18 00 73 00 fd ed 78 e0 06 22
>0248f8	0c 00 09 4f 50 54 49 48 55 4f 53 46 00 00 16 00
>024908	74 00 2b 3e fb ec c0 ec 0f e0 06 22 06 00 03 49
>024918	4a 55 00 00 12 00 75 00 2b 3e ca e4 06 22 06 00
>024928	02 45 46 00 00 00 0e 00 76 00 e7 e5 06 22 04 00
>024938	00 00 00 00 14 00 77 00 2b 3e 00 ee 18 e0 06 22
>024948	06 00 03 53 4a 58 00 00 1a 00 78 00 2b 3e cd ec
>024958	01 e0 06 22 0c 00 08 4f 58 53 55 4d 56 43 4c 00
>024968	00 00 16 00 79 00 2b 3e 4d ed ea e8 1d e0 06 22
>024978	06 00 02 50 53 00 00 00 1a 00 7a 00 2b 3e 10 e0
>024988	06 22 0e 00 0b 55 44 42 5a 5a 20 45 52 46 57 51
>024998	00 00 16 00 7b 00 5d ee 95 eb 24 e0 06 22 08 00
>0249a8	05 44 54 4b 4f 55 00 00 12 00 7c 00 d1 ed 17 e0
>0249b8	06 22 06 00 03 52 41 56 00 00 1c 00 7d 00 2b 3e
>0249c8	ac ed 0c e0 06 22 0e 00 0b 55 46 45 20 45 58 56
>0249d8	52 48 4d 51 00 00 14 00 7e 00 2b 3e 12 e0 06 22
>0249e8	08 00 04 45 41 44 4e 00 00 00 1a 00 7f 00 7f ed
>0249f8	4a e2 06 22 0e 00 0b 46 4e 55 20 54 20 4a 4c 4a
>024a08	20 46 00 00 14 00 80 00 2b 3e 1c ed 2f e4 06 22
>024a18	06 00 03 52 4d 4d 00 00 12 00 81 00 2b 3e 3f e6
>024a28	06 22 06 00 03 58 4a 52 00 00 16 00 82 00 3f ee
>024a38	c2 eb 06 e0 06 22 08 00 05 5a 48 58 20 4c 00 00
>024a48	14 00 83 00 2b 3e 58 ed 0c e0 06 22 06 00 03 4d
>024a58	57 49 00 00 16 00 84 00 2b 3e d1 ed 0d e0 06 22
>024a68	08 00 05 46 20 20 44 4e 00 00 0e 00 85 00 a2 e5
>024a78	06 22 04 00 01 52 00 00 14 00 86 00 1e e5 06 22
>024a88	0a 00 06 55 52 4c 49 56 4e 00 00 00 14 00 87 00
>024a98	2b 3e ce ed 23 e0 06 22 06 00 03 53 46 48 00 00
>024aa8	14 00 88 00 2b 3e 06 ee 0f e0 06 22 06 00 03 54
>024ab8	53 52 00 00 14 00 89 00 b8 ed 80 ec 06 e0 06 22
>024ac8	06 00 02 54 5a 00 00 00 10 00 8a 00 1b ed 0e e0
>024ad8	06 22 04 00 01 57 00 00 10 00 8b 00 0c ee 15 e0
>024ae8	06 22 04 00 01 58 00 00 16 00 8c 00 18 e0 06 22
>024af8	0c 00 09 4d 20 4a 51 51 57 57 48 53 00 00 3e 00
>024b08	8d 00 05 d0 00 40 26 32 06 22 0b 24 02 10 17 46
>024b18	24 32 05 d0 01 40 26 32 06 22 03 10 9c b3 24 32
>024b28	05 d0 02 40 26 32 06 22 0b 24 05 10 3f 59 24 32
>024b38	05 d0 03 40 26 32 06 22 12 8f 00 00 2e 00 8e 00
>024b48	0f d0 00 40 26 32 06 22 02 10 65 5d 24 32 0f d0
>024b58	01 40 26 32 06 22 0b 24 72 40 24 32 0f d0 02 40
>024b68	26 32 06 22 02 10 c7 bd 00 00 4e 00 8f 00 38 d6
>024b78	00 40 26 32 06 22 0b 24 01 10 24 8d 24 32 38 d6
>024b88	01 40 26 32 06 22 0b 24 3a 40 24 32 38 d6 02 40
>024b98	26 32 06 22 05 10 29 63 24 32 38 d6 03 40 26 32
>024ba8	06 22 04 10 02 8c 24 32 38 d6 04 40 26 32 06 22
>024bb8	0b 24 03 10 9e 69 00 00 5a 00 90 00 63 de 9b d3
>024bc8	00 40 26 32 06 22 0b 24 02 10 d8 74 24 32 63 de
>024bd8	9b d3 01 40 26 32 06 22 0b 24 9b 40 24 32 63 de
>024be8	9b d3 02 40 26 32 06 22 0b 24 02 10 ae 75 24 32
>024bf8	63 de 9b d3 03 40 26 32 06 22 0b 24 c4 40 24 32
>024c08	63 de 9b d3 04 40 26 32 06 22 0b 24 05 10 9b a1
>024c18	00 00 76 00 91 00 62 de 6c dc 02 d0 00 40 26 32
>024c28	06 22 05 10 39 4d 24 32 62 de 6c dc 02 d0 01 40
>024c38	26 32 06 22 04 10 f1 a8 24 32 62 de 6c dc 02 d0
>024c48	02 40 26 32 06 22 0b 24 02 10 b8 6e 24 32 62 de
>024c58	6c dc 02 d0 03 40 26 32 06 22 0b 24 02 10 d8 78
>024c68	24 32 62 de 6c dc 02 d0 04 40 26 32 06 22 0b 24
>024c78	05 10 9c 97 24 32 62 de 6c dc 02 d0 05 40 26 32
>024c88	06 22 01 10 fb 5e 00 00 2e 00 92 00 10 d0 00 40
>024c98	26 32 06 22 04 10 7b 61 24 32 10 d0 01 40 26 32
>024ca8	06 22 0b 24 03 10 ff 98 24 32 10 d0 02 40 26 32
>024cb8	06 22 92 40 00 00 7e 00 93 00 2d dd cf dc 0a d0
>024cc8	00 40 26 32 06 22 0b 24 35 40 24 32 2d dd cf dc
>024cd8	0a d0 01 40 26 32 06 22 8d a3 24 32 2d dd cf dc
>024ce8	0a d0 02 40 26 32 06 22 03 10 b5 5f 24 32 2d dd
>024cf8	cf dc 0a d0 03 40 26 32 06 22 01 10 73 9c 24 32
>024d08	2d dd cf dc 0a d0 04 40 26 32 06 22 0b 24 57 40
>024d18	24 32 2d dd cf dc 0a d0 05 40 26 32 06 22 0b 24
>024d28	38 40 24 32 2d dd cf dc 0a d0 06 40 26 32 06 22
>024d38	07 40 00 00 3c 00 94 00 4f dd 20 dc 06 d0 00 40
>024d48	26 32 06 22 05 10 4c 75 24 32 4f dd 20 dc 06 d0
>024d58	01 40 26 32 06 22 05 10 e2 93 24 32 4f dd 20 dc
>024d68	06 d0 02 40 26 32 06 22 0b 24 01 10 8f 9a 00 00
>024d78	3c 00 95 00 5a de 5e de 06 d0 00 40 26 32 06 22
>024d88	0b 24 01 10 6b a0 24 32 5a de 5e de 06 d0 01 40
>024d98	26 32 06 22 0b 24 bb 40 24 32 5a de 5e de 06 d0
>024da8	02 40 26 32 06 22 01 10 2e 4b 00 00 70 00 96 00
>024db8	2f dd d2 dd 12 d0 00 40 26 32 06 22 04 10 cb 89
>024dc8	24 32 2f dd d2 dd 12 d0 01 40 26 32 06 22 02 10
>024dd8	70 9a 24 32 2f dd d2 dd 12 d0 02 40 26 32 06 22
>024de8	0b 24 99 40 24 32 2f dd d2 dd 12 d0 03 40 26 32
>024df8	06 22 0b 24 1f 40 24 32 2f dd d2 dd 12 d0 04 40
>024e08	26 32 06 22 c0 40 24 32 2f dd d2 dd 12 d0 05 40
>024e18	26 32 06 22 0b 24 02 10 bb b6 00 00 46 00 97 00
>024e28	03 fd be fd 01 f0 00 40 26 32 06 22 04 00 01 51
>024e38	24 32 03 fd be fd 01 f0 01 40 26 32 06 22 0a 00
>024e48	06 53 55 48 57 59 57 00 24 32 03 fd be fd 01 f0
>024e58	02 40 26 32 06 22 0a 00 07 4d 4c 47 51 4a 4a 52
>024e68	00 00 5c 00 98 00 ff fd 9b f1 00 40 26 32 06 22
>024e78	0a 00 06 4d 48 20 56 55 54 00 24 32 ff fd 9b f1
>024e88	01 40 26 32 06 22 0e 00 0a 41 4a 4d 50 57 48 4f
>024e98	51 20 58 00 24 32 ff fd 9b f1 02 40 26 32 06 22
>024ea8	04 00 00 00 24 32 ff fd 9b f1 03 40 26 32 06 22
>024eb8	0c 00 09 53 51 53 46 49 4a 20 20 4a 00 00 5c 00
>024ec8	99 00 5d fd 0a f0 00 40 26 32 06 22 0e 00 0b 43
>024ed8	4f 47 4b 20 43 59 59 50 43 49 24 32 5d fd 0a f0
>024ee8	01 40 26 32 06 22 0a 00 07 4a 59 49 20 20 4c 4c
>024ef8	24 32 5d fd 0a f0 02 40 26 32 06 22 04 00 00 00
>024f08	24 32 5d fd 0a f0 03 40 26 32 06 22 0c 00 08 44
>024f18	51 20 51 20 54 56 4c 00 00 00 40 00 9a 00 76 fd
>024f28	12 f1 00 40 26 32 06 22 08 00 05 4d 4d 43 58 41
>024f38	24 32 76 fd 12 f1 01 40 26 32 06 22 04 00 01 49
>024f48	24 32 76 fd 12 f1 02 40 26 32 06 22 0c 00 09 4c
>024f58	4e 4e 45 20 4d 54 20 43 00 00 42 00 9b 00 2f f6
>024f68	00 40 26 32 06 22 06 00 03 41 20 53 24 32 2f f6
>024f78	01 40 26 32 06 22 0c 00 09 59 54 4b 45 20 52 54
>024f88	20 47 24 32 2f f6 02 40 26 32 06 22 0e 00 0a 45
>024f98	53 20 4f 57 4a 52 55 43 49 00 00 00 68 00 9c 00
>024fa8	a4 fd 23 f0 00 40 26 32 06 22 0a 00 07 42 49 54
>024fb8	49 20 50 42 24 32 a4 fd 23 f0 01 40 26 32 06 22
>024fc8	0a 00 06 4d 4a 41 55 20 58 00 24 32 a4 fd 23 f0
>024fd8	02 40 26 32 06 22 0a 00 07 41 55 20 56 52 20 48
>024fe8	24 32 a4 fd 23 f0 03 40 26 32 06 22 04 00 00 00
>024ff8	24 32 a4 fd 23 f0 04 40 26 32 06 22 06 00 03 56
>025008	20 48 00 00 50 00 9d 00 2c f6 00 40 26 32 06 22
>025018	04 00 00 00 24 32 2c f6 01 40 26 32 06 22 0e 00
>025028	0b 58 5a 58 20 42 48 45 55 5a 56 52 24 32 2c f6
>025038	02 40 26 32 06 22 0c 00 08 42 45 57 57 52 5a 20
>025048	55 00 24 32 2c f6 03 40 26 32 06 22 06 00 03 46
>025058	4a 45 00 00 4e 00 9e 00 04 fe 20 fc 04 f0 00 40
>025068	26 32 06 22 08 00 04 41 20 20 56 00 24 32 04 fe
>025078	20 fc 04 f0 01 40 26 32 06 22 0a 00 06 48 44 4c
>025088	42 54 52 00 24 32 04 fe 20 fc 04 f0 02 40 26 32
>025098	06 22 0e 00 0b 57 59 20 59 41 52 4a 20 54 53 51
>0250a8	00 00 56 00 9f 00 05 f0 00 40 26 32 06 22 06 00
>0250b8	03 47 46 55 24 32 05 f0 01 40 26 32 06 22 0c 00
>0250c8	09 4d 51 20 41 56 4b 55 4a 46 24 32 05 f0 02 40
>0250d8	26 32 06 22 0a 00 06 4b 5a 4a 55 44 52 00 24 32
>0250e8	05 f0 03 40 26 32 06 22 0e 00 0b 56 52 50 54 20
>0250f8	47 4e 4b 4d 20 54 00 00 8a 00 a0 00 7d fd 4b f2
>025108	00 40 26 32 06 22 04 00 00 00 24 32 7d fd 4b f2
>025118	01 40 26 32 06 22 06 00 02 43 4b 00 24 32 7d fd
>025128	4b f2 02 40 26 32 06 22 0a 00 07 44 48 51 20 55
>025138	46 48 24 32 7d fd 4b f2 03 40 26 32 06 22 0c 00
>025148	08 53 20 4c 42 52 43 20 4f 00 24 32 7d fd 4b f2
>025158	04 40 26 32 06 22 04 00 00 00 24 32 7d fd 4b f2
>025168	05 40 26 32 06 22 08 00 04 50 47 20 48 00 24 32
>025178	7d fd 4b f2 06 40 26 32 06 22 06 00 03 55 54 4c
>025188	00 00 14 00 a1 00 2b 3e 7f ed 4a e2 06 22 0a ee
>025198	04 ed 1b e0 00 00 14 00 a2 00 2b 3e 0c ce 09 c3
>0251a8	06 22 05 d0 03 40 26 32 00 00 10 00 a3 00 2b 3e
>0251b8	33 ed 1e e0 06 22 5d e5 00 00 12 00 a4 00 2b 3e
>0251c8	69 e6 06 22 2c f6 00 40 26 32 00 00 14 00 a5 00
>0251d8	2b 3e 0f d0 02 40 26 32 06 22 0a ce 10 c0 00 00
>0251e8	12 00 a6 00 2b 3e 05 f0 03 40 26 32 06 22 a2 e5
>0251f8	00 00 1c 00 a7 00 2b 3e a4 fd 23 f0 00 40 26 32
>025208	06 22 04 fe 20 fc 04 f0 02 40 26 32 00 00 16 00
>025218	a8 00 2b 3e 63 de 9b d3 03 40 26 32 06 22 54 cd
>025228	98 c3 00 00 12 00 a9 00 2b 3e 5e cd 0f cc 06 c0
>025238	06 22 13 c0 00 00 12 00 aa 00 2b 3e 06 cd 02 c0
>025248	06 22 6e ce 13 c0 00 00 0e 00 ab 00 2b 3e ca e4
>025258	06 22 59 e5 00 00 1a 00 ac 00 2b 3e 4f dd 20 dc
>025268	06 d0 01 40 26 32 06 22 a5 cd a7 cb 08 c0 00 00
>025278	16 00 ad 00 2b 3e fb ec c0 ec 0f e0 06 22 5d ee
>025288	95 eb 24 e0 00 00 14 00 ae 00 2b 3e 8d ed 06 e0
>025298	06 22 3f ee c2 eb 06 e0 00 00 14 00 af 00 2b 3e
>0252a8	3f ee c2 eb 06 e0 06 22 d8 ec d0 e4 00 00 12 00
>0252b8	b0 00 2b 3e d1 cd 1c c0 06 22 0c ce 09 c3 00 00
>0252c8	0e 00 b1 00 2b 3e 69 e6 06 22 59 e5 00 00 18 00
>0252d8	b2 00 2b 3e 2f dd d2 dd 12 d0 05 40 26 32 06 22
>0252e8	ac cd 0c c0 00 00 12 00 b3 00 2b 3e a5 cd a7 cb
>0252f8	08 c0 06 22 b4 c5 00 00 16 00 b4 00 2b 3e 17 c0
>025308	06 22 2d dd cf dc 0a d0 06 40 26 32 00 00 12 00
>025318	b5 00 2b 3e d1 cd 1c c0 06 22 06 cd 02 c0 00 00
>025328	10 00 b6 00 2b 3e 74 ed 1e e0 06 22 5d e5 00 00
>025338	12 00 b7 00 2b 3e 5e ee 08 e2 06 22 4f ed 2b e4
>025348	00 00 18 00 b8 00 2b 3e 03 fd be fd 01 f0 00 40
>025358	26 32 06 22 a7 ed 1e e0 00 00 12 00 b9 00 2b 3e
>025368	58 ed 0c e0 06 22 4f ed 2b e4 00 00 16 00 ba 00
>025378	2b 3e 7d fd 4b f2 00 40 26 32 06 22 00 ee 18 e0
>025388	00 00 12 00 bb 00 2b 3e 1e e5 06 22 2f f6 01 40
>025398	26 32 00 00 10 00 bc 00 2b 3e d1 ed 0d e0 06 22
>0253a8	12 e0 00 00 18 00 bd 00 2b 3e 5a de 5e de 06 d0
>0253b8	02 40 26 32 06 22 03 ce b2 c1 00 00 1a 00 be 00
>0253c8	2b 3e 36 ce 74 ce 22 c0 06 22 5a de 5e de 06 d0
>0253d8	02 40 26 32 00 00 0e 00 bf 00 2b 3e 03 e0 06 22
>0253e8	5b e5 00 00 10 00 c0 00 2b 3e ca e4 06 22 c5 ec
>0253f8	24 e0 00 00 12 00 c1 00 2b 3e 7e cd 0d c6 06 22
>025408	2b ce 1a c3 00 00 12 00 c2 00 2b 3e fc cd 68 c3
>025418	06 22 d0 cd 01 c0 00 00 12 00 c3 00 2b 3e 15 c0
>025428	06 22 2c ce 29 c9 06 c0 00 00 12 00 c4 00 2b 3e
>025438	1a c5 06 22 05 d0 00 40 26 32 00 00 0e 00 c5 00
>025448	2b 3e f8 c4 06 22 0d c6 00 00 14 00 c6 00 2b 3e
>025458	a7 ed 1e e0 06 22 5e ee ac ea 1e e0 00 00 16 00
>025468	c7 00 2b 3e 0a e0 06 22 04 fe 20 fc 04 f0 01 40
>025478	26 32 00 00 12 00 c8 00 2b 3e 82 cd 74 c4 06 22
>025488	6e ce 13 c0 00 00 0e 00 c9 00 2b 3e 59 e5 06 22
>025498	18 e0 00 00 18 00 ca 00 2b 3e 62 de 6c dc 02 d0
>0254a8	01 40 26 32 06 22 2b ce 1a c3 00 00 12 00 cb 00
>0254b8	2b 3e d0 cc 0d c5 06 22 5f cd 14 c0 00 00 12 00
>0254c8	cc 00 2b 3e 59 cd 15 c0 06 22 d0 cc 0d c5 00 00
>0254d8	10 00 cd 00 2b 3e ce ed 23 e0 06 22 0a e0 00 00
>0254e8	14 00 ce 00 2b 3e 2c e5 06 22 5d fd 0a f0 00 40
>0254f8	26 32 00 00 10 00 cf 00 2b 3e 0c ee 15 e0 06 22
>025508	a2 e5 00 00 12 00 d0 00 2b 3e 5d ce bf c2 06 22
>025518	fa cc 1a c0 00 00 14 00 d1 00 2b 3e 5f cd 14 c0
>025528	06 22 36 ce 74 ce 22 c0 00 00 12 00 d2 00 2b 3e
>025538	ce ed 23 e0 06 22 06 ee 0f e0 00 00 18 00 d3 00
>025548	2b 3e 4c ed 0d e0 06 22 04 fe 20 fc 04 f0 01 40
>025558	26 32 00 00 14 00 d4 00 2b 3e 85 cd a9 c2 06 22
>025568	38 d6 01 40 26 32 00 00 14 00 d5 00 2b 3e 2f f6
>025578	00 40 26 32 06 22 ac ed 0c e0 00 00 10 00 d6 00
>025588	2b 3e 3f e6 06 22 33 ed 1e e0 00 00 12 00 d7 00
>025598	2b 3e fd ed 78 e0 06 22 d8 ec d0 e4 00 00 12 00
>0255a8	d8 00 2b 3e 85 cd a9 c2 06 22 fc cd 68 c3 00 00
>0255b8	16 00 d9 00 2b 3e cd ec 01 e0 06 22 5d fd 0a f0
>0255c8	00 40 26 32 00 00 18 00 da 00 2b 3e 03 fd be fd
>0255d8	01 f0 00 40 26 32 06 22 1c ed 2f e4 00 00 10 00
>0255e8	db 00 2b 3e 74 c5 06 22 fc cd 68 c3 00 00 12 00
>0255f8	dc 00 2b 3e 0a e0 06 22 31 ee 14 ec 0b e0 00 00
>025608	1a 00 dd 00 2b 3e 2f dd d2 dd 12 d0 05 40 26 32
>025618	06 22 ff cd b0 cd 18 c0 00 00 12 00 de 00 2b 3e
>025628	2f f6 02 40 26 32 06 22 0f e0 00 00 0e 00 df 00
>025638	2b 3e 19 c0 06 22 74 c5 00 00 10 00 e0 00 2b 3e
>025648	0c ee 15 e0 06 22 5b e5 00 00 18 00 e1 00 2b 3e
>025658	74 ed 1e e0 06 22 03 fd be fd 01 f0 02 40 26 32
>025668	00 00 10 00 e2 00 2b 3e 10 e0 06 22 0c ee 15 e0
>025678	00 00 0e 00 e3 00 2b 3e 59 e5 06 22 0f e0 00 00
>025688	10 00 e4 00 2b 3e 8a cd 13 c0 06 22 1a c5 00 00
>025698	16 00 e5 00 2b 3e 62 de 6c dc 02 d0 05 40 26 32
>0256a8	06 22 0c c0 00 00 18 00 e6 00 2b 3e 62 de 6c dc
>0256b8	02 d0 04 40 26 32 06 22 2b ce 1a c3 00 00 0e 00
>0256c8	e7 00 2b 3e f8 e4 06 22 11 e0 00 00 10 00 e8 00
>0256d8	2b 3e 03 e0 06 22 8d ed 06 e0 00 00 1c 00 e9 00
>0256e8	2b 3e 2f dd d2 dd 12 d0 00 40 26 32 06 22 63 de
>0256f8	9b d3 01 40 26 32 00 00 10 00 ea 00 2b 3e 4e cd
>025708	22 c2 06 22 17 c0 00 00 14 00 eb 00 2b 3e ed cc
>025718	b1 ca 1f c0 06 22 d1 cc 88 c2 00 00 16 00 ec 00
>025728	2b 3e 3f ee c2 eb 06 e0 06 22 4d ed 7a eb 1f e0
>025738	00 00 10 00 ed 00 2b 3e d4 c5 06 22 03 ce b2 c1
>025748	00 00 12 00 ee 00 2b 3e 06 cd 02 c0 06 22 59 cd
>025758	15 c0 00 00 12 00 ef 00 2b 3e 3f ee c2 eb 06 e0
>025768	06 22 f8 e4 00 00 0e 00 f0 00 2b 3e 49 c5 06 22
>025778	f8 c4 00 00 12 00 f1 00 2b 3e 28 ce 11 c0 06 22
>025788	5f cd 14 c0 00 00 10 00 f2 00 2b 3e 49 cd a9 c2
>025798	06 22 86 c5 00 00 16 00 f3 00 2b 3e ed cc b1 ca
>0257a8	1f c0 06 22 05 d0 03 40 26 32 00 00 14 00 f4 00
>0257b8	2b 3e 5e ee ac ea 1e e0 06 22 cd ec 01 e0 00 00
>0257c8	12 00 f5 00 2b 3e ac cd 0c c0 06 22 82 cd 74 c4
>0257d8	00 00 16 00 f6 00 2b 3e 2f dd d2 dd 12 d0 00 40
>0257e8	26 32 06 22 86 c5 00 00 14 00 f7 00 2b 3e 4d ed
>0257f8	ea e8 1d e0 06 22 d1 ed 17 e0 00 00 16 00 f8 00
>025808	2b 3e 2c ce 29 c9 06 c0 06 22 10 d0 02 40 26 32
>025818	00 00 12 00 f9 00 2b 3e fa cc 1a c0 06 22 03 ce
>025828	b2 c1 00 00 12 00 fa 00 2b 3e 2c c5 06 22 a5 cd
>025838	a7 cb 08 c0 00 00 16 00 fb 00 2b 3e f8 e4 06 22
>025848	04 fe 20 fc 04 f0 01 40 26 32 00 00 10 00 fc 00
>025858	2b 3e fd ed 78 e0 06 22 e7 e5 00 00 14 00 fd 00
>025868	2b 3e d0 cd 9c cc 0c c0 06 22 fb cc f0 c3 00 00
>025878	0e 00 fe 00 2b 3e 2c e5 06 22 11 e0 00 00 12 00
>025888	ff 00 2b 3e d0 cd 01 c0 06 22 14 ce 23 c0 00 00
>025898	12 00 00 01 2b 3e 88 cd 61 cb 20 c0 06 22 2c c5
>0258a8	00 00 14 00 01 01 2b 3e 5d ee 95 eb 24 e0 06 22
>0258b8	05 ee 42 e3 00 00 0e 00 02 01 2b 3e b4 c5 06 22
>0258c8	f8 c4 00 00 12 00 03 01 2b 3e 05 ee 42 e3 06 22
>0258d8	58 ed 0c e0 00 00 14 00 04 01 2b 3e 1b ed 0e e0
>0258e8	06 22 d3 ec 34 ea 02 e0 00 00 12 00 05 01 2b 3e
>0258f8	2d ed f6 e0 06 22 7f ed 4a e2 00 00 16 00 06 01
>025908	2b 3e 05 d0 03 40 26 32 06 22 36 ce 74 ce 22 c0
>025918	00 00 14 00 07 01 2b 3e d1 ed 0d e0 06 22 cc ec
>025928	05 ee 19 e0 00 00 0e 00 08 01 2b 3e 5b e5 06 22
>025938	18 e0 00 00 12 00 09 01 2b 3e 74 ed 1e e0 06 22
>025948	06 ee 0f e0 00 00 12 00 0a 01 2b 3e 5f cd 14 c0
>025958	06 22 d1 cd 1c c0 00 00 12 00 0b 01 2b 3e 2c c5
>025968	06 22 d0 cd 9c cc 0c c0 00 00 16 00 0c 01 2b 3e
>025978	05 d0 00 40 26 32 06 22 ff cd b0 cd 18 c0 00 00
>025988	14 00 0d 01 2b 3e 3f e6 06 22 7d fd 4b f2 06 40
>025998	26 32 00 00 0e 00 0e 01 2b 3e 49 c5 06 22 1a c5
>0259a8	00 00 10 00 0f 01 2b 3e 85 cd a9 c2 06 22 0d c6
>0259b8	00 00 12 00 10 01 2b 3e 1c ed 2f e4 06 22 a7 ed
>0259c8	1e e0 00 00 10 00 11 01 2b 3e 06 ee 0f e0 06 22
>0259d8	0a e0 00 00 16 00 12 01 2b 3e 8a cd 13 c0 06 22
>0259e8	63 de 9b d3 00 40 26 32 00 00 10 00 13 01 2b 3e
>0259f8	fa e4 06 22 d8 ec d0 e4 00 00 16 00 14 01 2b 3e
>025a08	5d fd 0a f0 01 40 26 32 06 22 8a ed 24 e0 00 00
>025a18	14 00 15 01 2b 3e a5 cd a7 cb 08 c0 06 22 5d ce
>025a28	bf c2 00 00 12 00 16 01 2b 3e 7f ed 4a e2 06 22
>025a38	4c ed 0d e0 00 00 16 00 17 01 2b 3e 5d ee 95 eb
>025a48	24 e0 06 22 05 f0 00 40 26 32 00 00 10 00 18 01
>025a58	2b 3e 40 c6 06 22 ac cd 0c c0 00 00 10 00 19 01
>025a68	2b 3e c5 ec 24 e0 06 22 11 e0 00 00 10 00 1a 01
>025a78	2b 3e 59 cd 15 c0 06 22 54 c5 00 00 12 00 1b 01
>025a88	2b 3e 06 ee 0f e0 06 22 d1 ed 0d e0 00 00 14 00
>025a98	1c 01 2b 3e 5e ee ac ea 1e e0 06 22 fd ed 78 e0
>025aa8	00 00 10 00 1d 01 2b 3e 4c ed 0d e0 06 22 18 e0
>025ab8	00 00 14 00 1e 01 2b 3e 4f ed 2b e4 06 22 05 f0
>025ac8	00 40 26 32 00 00 1a 00 1f 01 2b 3e a5 cd a7 cb
>025ad8	08 c0 06 22 2f dd d2 dd 12 d0 05 40 26 32 00 00
>025ae8	10 00 20 01 2b 3e ac ed 0c e0 06 22 0a e0 00 00
>025af8	0e 00 21 01 2b 3e 3f e6 06 22 f8 e4 00 00 18 00
>025b08	22 01 2b 3e a7 ed 1e e0 06 22 04 fe 20 fc 04 f0
>025b18	01 40 26 32 00 00 12 00 23 01 2b 3e d0 cc 0d c5
>025b28	06 22 49 cd a9 c2 00 00 0e 00 24 01 2b 3e ca e4
>025b38	06 22 03 e0 00 00 1a 00 25 01 2b 3e 05 d0 02 40
>025b48	26 32 06 22 5a de 5e de 06 d0 00 40 26 32 00 00
>025b58	0e 00 26 01 2b 3e 0a e0 06 22 f8 e4 00 00 0e 00
>025b68	27 01 2b 3e 54 c5 06 22 1a c5 00 00 10 00 28 01
>025b78	2b 3e 1a c5 06 22 d0 cc 0d c5 00 00 0e 00 29 01
>025b88	2b 3e 03 c5 06 22 86 c5 00 00 14 00 2a 01 2b 3e
>025b98	5d fd 0a f0 01 40 26 32 06 22 d9 e5 00 00 12 00
>025ba8	2b 01 2b 3e 05 f0 02 40 26 32 06 22 e7 e5 00 00
>025bb8	0e 00 2c 01 2b 3e 5d e5 06 22 3f e6 00 00 12 00
>025bc8	2d 01 2b 3e 38 d6 02 40 26 32 06 22 14 c0 00 00
>025bd8	12 00 2e 01 2b 3e 8a ed 24 e0 06 22 7f ed 4a e2
>025be8	00 00 16 00 2f 01 2b 3e 2d dd cf dc 0a d0 02 40
>025bf8	26 32 06 22 14 c0 00 00 12 00 30 01 2b 3e 82 cd
>025c08	74 c4 06 22 5f cd 14 c0 00 00 10 00 31 01 2b 3e
>025c18	cd ec 01 e0 06 22 f8 e4 00 00 0e 00 32 01 2b 3e
>025c28	ca e4 06 22 e7 e5 00 00 12 00 33 01 2b 3e 2c ce
>025c38	29 c9 06 c0 06 22 86 c5 00 00 1a 00 34 01 2b 3e
>025c48	03 fd be fd 01 f0 01 40 26 32 06 22 2f f6 00 40
>025c58	26 32 00 00 0e 00 35 01 2b 3e 13 c0 06 22 49 c5
>025c68	00 00 12 00 36 01 2b 3e 10 d0 02 40 26 32 06 22
>025c78	54 c5 00 00 12 00 37 01 2b 3e ce ed 23 e0 06 22
>025c88	fd ed 78 e0 00 00 0e 00 38 01 2b 3e 09 e0 06 22
>025c98	f8 e4 00 00 10 00 39 01 2b 3e d1 cc 88 c2 06 22
>025ca8	40 c6 00 00 10 00 3a 01 2b 3e 59 e5 06 22 d8 ec
>025cb8	d0 e4 00 00 14 00 3b 01 2b 3e 5e ee ac ea 1e e0
>025cc8	06 22 00 ee 18 e0 00 00 14 00 3c 01 2b 3e 5e ee
>025cd8	ac ea 1e e0 06 22 d0 ed ba e0 00 00 14 00 3d 01
>025ce8	2b 3e 4d ed 7a eb 1f e0 06 22 cd ec 01 e0 00 00
>025cf8	10 00 3e 01 2b 3e 49 c5 06 22 54 cd 98 c3 00 00
>025d08	12 00 3f 01 2b 3e 00 ee 18 e0 06 22 05 ee 42 e3
>025d18	00 00 10 00 40 01 2b 3e 5f cd 14 c0 06 22 11 c0
>025d28	00 00 10 00 41 01 2b 3e 5d e5 06 22 33 ed 1e e0
>025d38	00 00 14 00 42 01 2b 3e 76 fd 12 f1 00 40 26 32
>025d48	06 22 ca e4 00 00 14 00 43 01 2b 3e 1a c5 06 22
>025d58	63 de 9b d3 03 40 26 32 00 00 18 00 44 01 2b 3e
>025d68	04 fe 20 fc 04 f0 00 40 26 32 06 22 7f ed 4a e2
>025d78	00 00 10 00 45 01 2b 3e d9 e5 06 22 8d ed 06 e0
>025d88	00 00 12 00 46 01 2b 3e 5e ee ac ea 1e e0 06 22
>025d98	f8 e4 00 00 1a 00 47 01 2b 3e b8 ed 80 ec 06 e0
>025da8	06 22 04 fe 20 fc 04 f0 00 40 26 32 00 00 12 00
>025db8	48 01 2b 3e 58 ed 0c e0 06 22 7f ed 4a e2 00 00
>025dc8	12 00 49 01 2b 3e 17 c0 06 22 d0 cd 9c cc 0c c0
>025dd8	00 00 10 00 4a 01 2b 3e fa e4 06 22 1c ed 2f e4
>025de8	00 00 14 00 4b 01 2b 3e 00 ee 18 e0 06 22 cc ec
>025df8	05 ee 19 e0 00 00 14 00 4c 01 2b 3e fb ec c0 ec
>025e08	0f e0 06 22 de ed 9c e3 00 00 16 00 4d 01 2b 3e
>025e18	a5 cd a7 cb 08 c0 06 22 ed cc b1 ca 1f c0 00 00
>025e28	12 00 4e 01 2b 3e 32 c5 06 22 ed cc b1 ca 1f c0
>025e38	00 00 10 00 4f 01 2b 3e d9 e5 06 22 8d ed 06 e0
>025e48	00 00 0e 00 50 01 2b 3e 5b e5 06 22 10 e0 00 00
>025e58	16 00 51 01 2b 3e 4f dd 20 dc 06 d0 00 40 26 32
>025e68	06 22 2c c5 00 00 10 00 52 01 2b 3e 09 c0 06 22
>025e78	6e ce 13 c0 00 00 12 00 53 01 2b 3e fa e4 06 22
>025e88	4d ed 7a eb 1f e0 00 00 12 00 54 01 2b 3e 14 c0
>025e98	06 22 2c ce 29 c9 06 c0 00 00 10 00 55 01 2b 3e
>025ea8	82 cd 74 c4 06 22 2c c5 00 00 14 00 56 01 2b 3e
>025eb8	f8 e4 06 22 a4 fd 23 f0 02 40 26 32 00 00 14 00
>025ec8	57 01 2b 3e ce ed 23 e0 06 22 2f f6 02 40 26 32
>025ed8	00 00 10 00 58 01 2b 3e 86 c5 06 22 4e cd 22 c2
>025ee8	00 00 0e 00 59 01 2b 3e 03 e0 06 22 2c e5 00 00
>025ef8	10 00 5a 01 2b 3e fc cd 68 c3 06 22 54 c5 00 00
>025f08	12 00 5b 01 2b 3e ff cd b0 cd 18 c0 06 22 03 c5
>025f18	00 00 12 00 5c 01 2b 3e 69 e6 06 22 5e ee ac ea
>025f28	1e e0 00 00 10 00 5d 01 2b 3e 54 c5 06 22 fa cc
>025f38	1a c0 00 00 12 00 5e 01 2b 3e d1 ed 0d e0 06 22
>025f48	ce ed 23 e0 00 00 10 00 5f 01 2b 3e 5d e5 06 22
>025f58	ce ed 23 e0 00 00 0e 00 60 01 2b 3e b4 c5 06 22
>025f68	09 c0 00 00 10 00 61 01 2b 3e 59 e5 06 22 c5 ec
>025f78	24 e0 00 00 14 00 62 01 2b 3e cf cd 21 c0 06 22
>025f88	ed cc b1 ca 1f c0 00 00 14 00 63 01 2b 3e 7f ed
>025f98	4a e2 06 22 fb ec c0 ec 0f e0 00 00 10 00 64 01
>025fa8	2b 3e fb cc f0 c3 06 22 86 c5 00 00 14 00 65 01
>025fb8	2b 3e 49 cd a9 c2 06 22 ff cd b0 cd 18 c0 00 00
>025fc8	18 00 66 01 2b 3e 05 d0 00 40 26 32 06 22 63 de
>025fd8	9b d3 02 40 26 32 00 00 12 00 67 01 2b 3e d0 cd
>025fe8	9c cc 0c c0 06 22 74 c5 00 00 12 00 68 01 2b 3e
>025ff8	06 ee 0f e0 06 22 74 ed 1e e0 00 00 12 00 69 01
>026008	2b 3e fd ed 78 e0 06 22 de ed 9c e3 00 00 16 00
>026018	6a 01 2b 3e 76 fd 12 f1 02 40 26 32 06 22 8a ed
>026028	24 e0 00 00 12 00 6b 01 2b 3e 59 cd 15 c0 06 22
>026038	28 ce 11 c0 00 00 12 00 6c 01 2b 3e 2b ce 1a c3
>026048	06 22 ac cd 0c c0 00 00 0e 00 6d 01 2b 3e 15 c0
>026058	06 22 cf c5 00 00 12 00 6e 01 2b 3e 06 cd 02 c0
>026068	06 22 49 cd a9 c2 00 00 16 00 6f 01 2b 3e 4f dd
>026078	20 dc 06 d0 02 40 26 32 06 22 c8 c4 00 00 10 00
>026088	70 01 2b 3e 09 e0 06 22 4f ed 2b e4 00 00 12 00
>026098	71 01 2b 3e 2c c5 06 22 2c ce 29 c9 06 c0 00 00
>0260a8	16 00 72 01 2b 3e 0f d0 01 40 26 32 06 22 ed cc
>0260b8	b1 ca 1f c0 00 00 10 00 73 01 2b 3e 6e ce 13 c0
>0260c8	06 22 15 c0 00 00 16 00 74 01 2b 3e 4c ed 0d e0
>0260d8	06 22 a4 fd 23 f0 02 40 26 32 00 00 12 00 75 01
>0260e8	2b 3e 82 cd 74 c4 06 22 0c ce 09 c3 00 00 12 00
>0260f8	76 01 2b 3e fc cd 68 c3 06 22 2e cd eb c2 00 00
>026108	10 00 77 01 2b 3e 85 cd a9 c2 06 22 40 c6 00 00
>026118	10 00 78 01 2b 3e c8 c4 06 22 5f cd 14 c0 00 00
>026128	0e 00 79 01 2b 3e e7 e5 06 22 5b e5 00 00 0e 00
>026138	7a 01 2b 3e 1a c5 06 22 49 c5 00 00 10 00 7b 01
>026148	2b 3e fa cc 1a c0 06 22 03 c5 00 00 16 00 7c 01
>026158	2b 3e a4 fd 23 f0 04 40 26 32 06 22 a7 ed 1e e0
>026168	00 00 10 00 7d 01 2b 3e 06 ee 0f e0 06 22 3f e6
>026178	00 00 18 00 7e 01 2b 3e 2d dd cf dc 0a d0 02 40
>026188	26 32 06 22 cf cd 21 c0 00 00 12 00 7f 01 2b 3e
>026198	06 ee 0f e0 06 22 4f ed 2b e4 00 00 10 00 80 01
>0261a8	2b 3e fa e4 06 22 1c ed 2f e4 00 00 0e 00 81 01
>0261b8	2b 3e 40 c6 06 22 c8 c4 00 00 12 00 82 01 2b 3e
>0261c8	a5 cd a7 cb 08 c0 06 22 2c c5 00 00 10 00 83 01
>0261d8	2b 3e 0f e0 06 22 2d ed f6 e0 00 00 10 00 84 01
>0261e8	2b 3e 74 c5 06 22 4e cd 22 c2 00 00 0e 00 85 01
>0261f8	2b 3e 32 c5 06 22 19 c0 00 00 14 00 86 01 2b 3e
>026208	3f ee c2 eb 06 e0 06 22 8a ed 24 e0 00 00 12 00
>026218	87 01 2b 3e 40 c6 06 22 a5 cd a7 cb 08 c0 00 00
>026228	16 00 88 01 2b 3e d0 ed ba e0 06 22 ff fd 9b f1
>026238	00 40 26 32 00 00 12 00 89 01 2b 3e fa e4 06 22
>026248	3f ee c2 eb 06 e0 00 00 12 00 8a 01 2b 3e 4f ed
>026258	2b e4 06 22 c5 ec 24 e0 00 00 14 00 8b 01 2b 3e
>026268	03 ce b2 c1 06 22 d0 cd 9c cc 0c c0 00 00 14 00
>026278	8c 01 2b 3e a2 e5 06 22 76 fd 12 f1 01 40 26 32
>026288	00 00 12 00 8d 01 2b 3e d1 cd 1c c0 06 22 7e cd
>026298	0d c6 00 00 14 00 8e 01 2b 3e fa cc 1a c0 06 22
>0262a8	36 ce 74 ce 22 c0 00 00 10 00 8f 01 2b 3e 86 c5
>0262b8	06 22 2b ce 1a c3 00 00 18 00 90 01 2b 3e 88 cd
>0262c8	61 cb 20 c0 06 22 63 de 9b d3 04 40 26 32 00 00
>0262d8	18 00 91 01 2b 3e 74 ed 1e e0 06 22 03 fd be fd
>0262e8	01 f0 00 40 26 32 00 00 0e 00 92 01 2b 3e 13 c0
>0262f8	06 22 19 c0 00 00 12 00 93 01 2b 3e 7e cd 0d c6
>026308	06 22 59 cd 15 c0 00 00 16 00 94 01 2b 3e 76 fd
>026318	12 f1 02 40 26 32 06 22 1b ed 0e e0 00 00 10 00
>026328	95 01 2b 3e 1e e5 06 22 a7 ed 1e e0 00 00 14 00
>026338	96 01 2b 3e 85 cd a9 c2 06 22 05 d0 03 40 26 32
>026348	00 00 18 00 97 01 2b 3e 04 fe 20 fc 04 f0 02 40
>026358	26 32 06 22 1b ed 0e e0 00 00 10 00 98 01 2b 3e
>026368	5e ee 08 e2 06 22 11 e0 00 00 14 00 99 01 2b 3e
>026378	6e ce 13 c0 06 22 88 cd 61 cb 20 c0 00 00 14 00
>026388	9a 01 2b 3e ac ed 0c e0 06 22 fb ec c0 ec 0f e0
>026398	00 00 12 00 9b 01 2b 3e b8 ed 80 ec 06 e0 06 22
>0263a8	5d e5 00 00 18 00 9c 01 2b 3e d0 cc 0d c5 06 22
>0263b8	2d dd cf dc 0a d0 02 40 26 32 00 00 14 00 9d 01
>0263c8	2b 3e 8d ed 06 e0 06 22 5e ee ac ea 1e e0 00 00
>0263d8	12 00 9e 01 2b 3e e7 e5 06 22 cc ec 05 ee 19 e0
>0263e8	00 00 1a 00 9f 01 2b 3e 4f dd 20 dc 06 d0 01 40
>0263f8	26 32 06 22 38 d6 02 40 26 32 00 00 14 00 a0 01
>026408	2b 3e ac cd 0c c0 06 22 05 d0 01 40 26 32 00 00
>026418	14 00 a1 01 2b 3e a4 fd 23 f0 02 40 26 32 06 22
>026428	18 e0 00 00 10 00 a2 01 2b 3e 1e e5 06 22 33 ed
>026438	1e e0 00 00 14 00 a3 01 2b 3e 36 ce 74 ce 22 c0
>026448	06 22 03 ce b2 c1 00 00 16 00 a4 01 2b 3e ce ed
>026458	23 e0 06 22 a4 fd 23 f0 00 40 26 32 00 00 14 00
>026468	a5 01 2b 3e d1 ed 17 e0 06 22 2c f6 03 40 26 32
>026478	00 00 12 00 a6 01 2b 3e 31 ee 14 ec 0b e0 06 22
>026488	d9 e5 00 00 16 00 a7 01 2b 3e 58 ed 0c e0 06 22
>026498	7d fd 4b f2 04 40 26 32 00 00 12 00 a8 01 2b 3e
>0264a8	2d ed f6 e0 06 22 a7 ed 1e e0 00 00 14 00 a9 01
>0264b8	2b 3e 7e cd 0d c6 06 22 10 d0 02 40 26 32 00 00
>0264c8	14 00 aa 01 2b 3e 5d e5 06 22 76 fd 12 f1 00 40
>0264d8	26 32 00 00 1a 00 ab 01 2b 3e 38 d6 02 40 26 32
>0264e8	06 22 4f dd 20 dc 06 d0 02 40 26 32 00 00 12 00
>0264f8	ac 01 2b 3e 0c ee 15 e0 06 22 05 ee 42 e3 00 00
>026508	16 00 ad 01 2b 3e d1 ed 17 e0 06 22 7d fd 4b f2
>026518	04 40 26 32 00 00 12 00 ae 01 2b 3e d0 ed ba e0
>026528	06 22 33 ed 1e e0 00 00 12 00 af 01 2b 3e 58 ed
>026538	0c e0 06 22 ce ed 23 e0 00 00 10 00 b0 01 2b 3e
>026548	06 ee 0f e0 06 22 0b e0 00 00 12 00 b1 01 2b 3e
>026558	2c ce 29 c9 06 c0 06 22 f8 c4 00 00 10 00 b2 01
>026568	2b 3e a7 ed 1e e0 06 22 0a e0 00 00 12 00 b3 01
>026578	2b 3e 49 cd a9 c2 06 22 7e cd 0d c6 00 00 10 00
>026588	b4 01 2b 3e ca e4 06 22 2d ed f6 e0 00 00 0e 00
>026598	b5 01 2b 3e 3f e6 06 22 3f e6 00 00 14 00 b6 01
>0265a8	2b 3e 00 ee 18 e0 06 22 2c f6 00 40 26 32 00 00
>0265b8	14 00 b7 01 2b 3e 0a ee 04 ed 1b e0 06 22 2d ed
>0265c8	f6 e0 00 00 12 00 b8 01 2b 3e c5 ec 24 e0 06 22
>0265d8	a7 ed 1e e0 00 00 12 00 b9 01 2b 3e 88 cd 61 cb
>0265e8	20 c0 06 22 40 c6 00 00 10 00 ba 01 2b 3e d9 e5
>0265f8	06 22 05 ee 42 e3 00 00 1e 00 bb 01 2b 3e 62 de
>026608	6c dc 02 d0 03 40 26 32 06 22 62 de 6c dc 02 d0
>026618	03 40 26 32 00 00 12 00 bc 01 2b 3e fa cc 1a c0
>026628	06 22 82 cd 74 c4 00 00 12 00 bd 01 2b 3e 18 e0
>026638	06 22 05 f0 01 40 26 32 00 00 12 00 be 01 2b 3e
>026648	4e cd 22 c2 06 22 0c ce 09 c3 00 00 1a 00 bf 01
>026658	2b 3e 4d ed 7a eb 1f e0 06 22 04 fe 20 fc 04 f0
>026668	01 40 26 32 00 00 12 00 c0 01 2b 3e 03 c5 06 22
>026678	36 ce 74 ce 22 c0 00 00 10 00 c1 01 2b 3e 5e ee
>026688	08 e2 06 22 1e e5 00 00 14 00 c2 01 2b 3e d0 cd
>026698	9c cc 0c c0 06 22 fa cc 1a c0 00 00 16 00 c3 01
>0266a8	2b 3e 4f dd 20 dc 06 d0 02 40 26 32 06 22 2c c5
>0266b8	00 00 14 00 c4 01 2b 3e a4 fd 23 f0 02 40 26 32
>0266c8	06 22 2c e5 00 00 0e 00 c5 01 2b 3e d4 c5 06 22
>0266d8	0c c0 00 00 18 00 c6 01 2b 3e 2f dd d2 dd 12 d0
>0266e8	03 40 26 32 06 22 8a cd 13 c0 00 00 18 00 c7 01
>0266f8	2b 3e d0 ed ba e0 06 22 03 fd be fd 01 f0 00 40
>026708	26 32 00 00 12 00 c8 01 2b 3e 11 c0 06 22 36 ce
>026718	74 ce 22 c0 00 00 10 00 c9 01 2b 3e d0 ed ba e0
>026728	06 22 d9 e5 00 00 0e 00 ca 01 2b 3e 09 e0 06 22
>026738	0b e0 00 00 14 00 cb 01 2b 3e 76 fd 12 f1 02 40
>026748	26 32 06 22 2c e5 00 00 0e 00 cc 01 2b 3e 17 c0
>026758	06 22 74 c5 00 00 16 00 cd 01 2b 3e 5d fd 0a f0
>026768	02 40 26 32 06 22 fd ed 78 e0 00 00 10 00 ce 01
>026778	2b 3e 14 c0 06 22 0c ce 09 c3 00 00 10 00 cf 01
>026788	2b 3e 0f e0 06 22 c5 ec 24 e0 00 00 14 00 d0 01
>026798	2b 3e 3f ee c2 eb 06 e0 06 22 4f ed 2b e4 00 00
>0267a8	12 00 d1 01 2b 3e 2c f6 02 40 26 32 06 22 11 e0
>0267b8	00 00 16 00 d2 01 2b 3e 36 ce 74 ce 22 c0 06 22
>0267c8	ed cc b1 ca 1f c0 00 00 14 00 d3 01 2b 3e 4f ed
>0267d8	2b e4 06 22 5d ee 95 eb 24 e0 00 00 12 00 d4 01
>0267e8	2b 3e cd ec 01 e0 06 22 ce ed 23 e0 00 00 10 00
>0267f8	d5 01 2b 3e 2d ed f6 e0 06 22 18 e0 00 00 16 00
>026808	d6 01 2b 3e 3f ee c2 eb 06 e0 06 22 0a ee 04 ed
>026818	1b e0 00 00 12 00 d7 01 2b 3e 40 c6 06 22 05 d0
>026828	03 40 26 32 00 00 18 00 d8 01 2b 3e 74 ed 1e e0
>026838	06 22 03 fd be fd 01 f0 01 40 26 32 00 00 10 00
>026848	d9 01 2b 3e ce ed 23 e0 06 22 e7 e5 00 00 10 00
>026858	da 01 2b 3e 86 c5 06 22 fb cc f0 c3 00 00 12 00
>026868	db 01 2b 3e 0c c0 06 22 38 d6 02 40 26 32 00 00
>026878	14 00 dc 01 2b 3e cf cd 21 c0 06 22 d0 cd 9c cc
>026888	0c c0 00 00 16 00 dd 01 2b 3e 7d fd 4b f2 03 40
>026898	26 32 06 22 4c ed 0d e0 00 00 1e 00 de 01 2b 3e
>0268a8	4f dd 20 dc 06 d0 02 40 26 32 06 22 2f dd d2 dd
>0268b8	12 d0 00 40 26 32 00 00 0e 00 df 01 2b 3e 69 e6
>0268c8	06 22 0a e0 00 00 10 00 e0 01 2b 3e 2b ce 1a c3
>0268d8	06 22 1a c5 00 00 10 00 e1 01 2b 3e 03 e0 06 22
>0268e8	33 ed 1e e0 00 00 14 00 e2 01 2b 3e 06 cd 02 c0
>0268f8	06 22 10 d0 00 40 26 32 00 00 12 00 e3 01 2b 3e
>026908	4e cd 22 c2 06 22 d1 cc 88 c2 00 00 10 00 e4 01
>026918	2b 3e d0 cc 0d c5 06 22 c8 c4 00 00 14 00 e5 01
>026928	2b 3e 0f d0 00 40 26 32 06 22 28 ce 11 c0 00 00
>026938	10 00 e6 01 2b 3e d0 ed ba e0 06 22 59 e5 00 00
>026948	16 00 e7 01 2b 3e 63 de 9b d3 02 40 26 32 06 22
>026958	5f cd 14 c0 00 00 10 00 e8 01 2b 3e 0c ce 09 c3
>026968	06 22 13 c0 00 00 18 00 e9 01 2b 3e ff fd 9b f1
>026978	03 40 26 32 06 22 d3 ec 34 ea 02 e0 00 00 12 00
>026988	ea 01 2b 3e 5d ce bf c2 06 22 4e cd 22 c2 00 00
>026998	12 00 eb 01 2b 3e 2c ce 29 c9 06 c0 06 22 86 c5
>0269a8	00 00 12 00 ec 01 2b 3e 86 c5 06 22 5e cd 0f cc
>0269b8	06 c0 00 00 14 00 ed 01 2b 3e 0f d0 00 40 26 32
>0269c8	06 22 0c ce 09 c3 00 00 10 00 ee 01 2b 3e e7 e5
>0269d8	06 22 05 ee 42 e3 00 00 14 00 ef 01 2b 3e fb ec
>0269e8	c0 ec 0f e0 06 22 1c ed 2f e4 00 00 1a 00 f0 01
>0269f8	2b 3e 0f d0 01 40 26 32 06 22 2f dd d2 dd 12 d0
>026a08	02 40 26 32 00 00 16 00 f1 01 2b 3e ed cc b1 ca
>026a18	1f c0 06 22 d0 cd 9c cc 0c c0 00 00 12 00 f2 01
>026a28	2b 3e 59 cd 15 c0 06 22 8a cd 13 c0 00 00 14 00
>026a38	f3 01 2b 3e cc ec 05 ee 19 e0 06 22 d1 ed 0d e0
>026a48	00 00 12 00 f4 01 2b 3e 8a ed 24 e0 06 22 58 ed
>026a58	0c e0 00 00 0e 00 f5 01 2b 3e 1a c5 06 22 13 c0
>026a68	00 00 14 00 f6 01 2b 3e 2c ce 29 c9 06 c0 06 22
>026a78	d0 cc 0d c5 00 00 0e 00 f7 01 2b 3e 14 c0 06 22
>026a88	0c c0 00 00 12 00 f8 01 2b 3e 05 d0 02 40 26 32
>026a98	06 22 cf c5 00 00 14 00 f9 01 2b 3e 2d ed f6 e0
>026aa8	06 22 3f ee c2 eb 06 e0 00 00 12 00 fa 01 2b 3e
>026ab8	4d ed 7a eb 1f e0 06 22 10 e0 00 00 10 00 fb 01
>026ac8	2b 3e 40 c6 06 22 82 cd 74 c4 00 00 16 00 fc 01
>026ad8	2b 3e 7d fd 4b f2 02 40 26 32 06 22 1b ed 0e e0
>026ae8	00 00 12 00 fd 01 2b 3e 8d ed 06 e0 06 22 ce ed
>026af8	23 e0 00 00 12 00 fe 01 2b 3e 3f ee c2 eb 06 e0
>026b08	06 22 2c e5 00 00 12 00 ff 01 2b 3e d1 cd 1c c0
>026b18	06 22 28 ce 11 c0 00 00 12 00 00 02 2b 3e 06 ee
>026b28	0f e0 06 22 05 ee 42 e3 00 00 18 00 01 02 2b 3e
>026b38	00 ee 18 e0 06 22 03 fd be fd 01 f0 02 40 26 32
>026b48	00 00 10 00 02 02 2b 3e 0c ee 15 e0 06 22 18 e0
>026b58	00 00 10 00 03 02 2b 3e 0b e0 06 22 d8 ec d0 e4
>026b68	00 00 16 00 04 02 2b 3e 7d fd 4b f2 04 40 26 32
>026b78	06 22 06 ee 0f e0 00 00 12 00 05 02 2b 3e 5e ee
>026b88	08 e2 06 22 06 ee 0f e0 00 00 12 00 06 02 2b 3e
>026b98	13 c0 06 22 0f d0 01 40 26 32 00 00 12 00 07 02
>026ba8	2b 3e d1 cc 88 c2 06 22 85 cd a9 c2 00 00 16 00
>026bb8	08 02 2b 3e 0f d0 01 40 26 32 06 22 ed cc b1 ca
>026bc8	1f c0 00 00 16 00 09 02 2b 3e 2c f6 01 40 26 32
>026bd8	06 22 d3 ec 34 ea 02 e0 00 00 0e 00 0a 02 2b 3e
>026be8	0a e0 06 22 a2 e5 00 00 0e 00 0b 02 2b 3e 5d e5
>026bf8	06 22 03 e0 00 00 14 00 0c 02 2b 3e fa cc 1a c0
>026c08	06 22 05 d0 02 40 26 32 00 00 12 00 0d 02 2b 3e
>026c18	a5 cd a7 cb 08 c0 06 22 32 c5 00 00 14 00 0e 02
>026c28	2b 3e 32 c5 06 22 63 de 9b d3 03 40 26 32 00 00
>026c38	12 00 0f 02 2b 3e 69 e6 06 22 31 ee 14 ec 0b e0
>026c48	00 00 12 00 10 02 2b 3e 4d ed 7a eb 1f e0 06 22
>026c58	09 e0 00 00 10 00 11 02 2b 3e 40 c6 06 22 03 ce
>026c68	b2 c1 00 00 0e 00 12 02 2b 3e 02 c0 06 22 2c c5
>026c78	00 00 10 00 13 02 2b 3e 40 c6 06 22 ac cd 0c c0
>026c88	00 00 14 00 14 02 2b 3e 4d ed ea e8 1d e0 06 22
>026c98	8d ed 06 e0 00 00 12 00 15 02 2b 3e 0c c0 06 22
>026ca8	36 ce 74 ce 22 c0 00 00 12 00 16 02 2b 3e 2e cd
>026cb8	eb c2 06 22 d1 cc 88 c2 00 00 10 00 17 02 2b 3e
>026cc8	d0 cc 0d c5 06 22 14 c0 00 00 0e 00 18 02 2b 3e
>026cd8	15 c0 06 22 f8 c4 00 00 16 00 19 02 2b 3e 5d fd
>026ce8	0a f0 01 40 26 32 06 22 d0 ed ba e0 00 00 10 00
>026cf8	1a 02 2b 3e d9 e5 06 22 4f ed 2b e4 00 00 12 00
>026d08	1b 02 2b 3e 82 cd 74 c4 06 22 03 ce b2 c1 00 00
>026d18	12 00 1c 02 2b 3e 4d ed ea e8 1d e0 06 22 a2 e5
>026d28	00 00 10 00 1d 02 2b 3e 2e cd eb c2 06 22 15 c0
>026d38	00 00 12 00 1e 02 2b 3e cd ec 01 e0 06 22 c5 ec
>026d48	24 e0 00 00 10 00 1f 02 2b 3e 10 e0 06 22 de ed
>026d58	9c e3 00 00 10 00 20 02 2b 3e 6e ce 13 c0 06 22
>026d68	14 c0 00 00 10 00 21 02 2b 3e 5d ce bf c2 06 22
>026d78	2c c5 00 00 0e 00 22 02 2b 3e f8 c4 06 22 cf c5
>026d88	00 00 12 00 23 02 2b 3e a7 ed 1e e0 06 22 0c ee
>026d98	15 e0 00 00 12 00 24 02 2b 3e 2e cd eb c2 06 22
>026da8	82 cd 74 c4 00 00 14 00 25 02 2b 3e ff fd 9b f1
>026db8	03 40 26 32 06 22 ca e4 00 00 12 00 26 02 2b 3e
>026dc8	fa e4 06 22 4d ed ea e8 1d e0 00 00 12 00 27 02
>026dd8	2b 3e 0a ee 04 ed 1b e0 06 22 2c e5 00 00 10 00
>026de8	28 02 2b 3e d1 cd 1c c0 06 22 11 c0 00 00 18 00
>026df8	29 02 2b 3e 00 ee 18 e0 06 22 03 fd be fd 01 f0
>026e08	02 40 26 32 00 00 12 00 2a 02 2b 3e 4d ed ea e8
>026e18	1d e0 06 22 d9 e5 00 00 10 00 2b 02 2b 3e d0 ed
>026e28	ba e0 06 22 69 e6 00 00 0e 00 2c 02 2b 3e f8 e4
>026e38	06 22 0a e0 00 00 18 00 2d 02 2b 3e 5f cd 14 c0
>026e48	06 22 2d dd cf dc 0a d0 06 40 26 32 00 00 14 00
>026e58	2e 02 2b 3e ff fd 9b f1 02 40 26 32 06 22 1e e5
>026e68	00 00 10 00 2f 02 2b 3e a7 ed 1e e0 06 22 5b e5
>026e78	00 00 12 00 30 02 2b 3e 12 e0 06 22 d3 ec 34 ea
>026e88	02 e0 00 00 14 00 31 02 2b 3e d1 ed 0d e0 06 22
>026e98	3f ee c2 eb 06 e0 00 00 10 00 32 02 2b 3e 1c ed
>026ea8	2f e4 06 22 03 e0 00 00 10 00 33 02 2b 3e 00 ee
>026eb8	18 e0 06 22 0a e0 00 00 16 00 34 02 2b 3e 2f dd
>026ec8	d2 dd 12 d0 02 40 26 32 06 22 f8 c4 00 00 12 00
>026ed8	35 02 2b 3e 8a cd 13 c0 06 22 d0 cc 0d c5 00 00
>026ee8	12 00 36 02 2b 3e 33 ed 1e e0 06 22 0c ee 15 e0
>026ef8	00 00 10 00 37 02 2b 3e 49 c5 06 22 d0 cc 0d c5
>026f08	00 00 10 00 38 02 2b 3e 4f ed 2b e4 06 22 1e e5
>026f18	00 00 16 00 39 02 2b 3e b8 ed 80 ec 06 e0 06 22
>026f28	31 ee 14 ec 0b e0 00 00 10 00 3a 02 2b 3e 5e ee
>026f38	08 e2 06 22 1e e5 00 00 16 00 3b 02 2b 3e ce ed
>026f48	23 e0 06 22 7d fd 4b f2 05 40 26 32 00 00 12 00
>026f58	3c 02 2b 3e d4 c5 06 22 0f d0 02 40 26 32 00 00
>026f68	0e 00 3d 02 2b 3e 0a e0 06 22 69 e6 00 00 18 00
>026f78	3e 02 2b 3e 63 de 9b d3 01 40 26 32 06 22 ff cd
>026f88	b0 cd 18 c0 00 00 14 00 3f 02 2b 3e ff fd 9b f1
>026f98	02 40 26 32 06 22 59 e5 00 00 10 00 40 02 2b 3e
>026fa8	0f e0 06 22 06 ee 0f e0 00 00 12 00 41 02 2b 3e
>026fb8	3f e6 06 22 fb ec c0 ec 0f e0 00 00 12 00 42 02
>026fc8	2b 3e 2b ce 1a c3 06 22 0a ce 10 c0 00 00 14 00
>026fd8	43 02 2b 3e d0 cd 9c cc 0c c0 06 22 5d ce bf c2
>026fe8	00 00 12 00 44 02 2b 3e a2 e5 06 22 31 ee 14 ec
>026ff8	0b e0 00 00 14 00 45 02 2b 3e 49 c5 06 22 63 de
>027008	9b d3 03 40 26 32 00 00 18 00 46 02 2b 3e d3 ec
>027018	34 ea 02 e0 06 22 ff fd 9b f1 00 40 26 32 00 00
>027028	14 00 47 02 2b 3e 31 ee 14 ec 0b e0 06 22 4c ed
>027038	0d e0 00 00 14 00 48 02 2b 3e 1e e5 06 22 ff fd
>027048	9b f1 02 40 26 32 00 00 12 00 49 02 2b 3e 3f ee
>027058	c2 eb 06 e0 06 22 3f e6 00 00 14 00 4a 02 2b 3e
>027068	10 d0 01 40 26 32 06 22 54 cd 98 c3 00 00 10 00
>027078	4b 02 2b 3e 2c e5 06 22 4f ed 2b e4 00 00 0e 00
>027088	4c 02 2b 3e 18 e0 06 22 2c e5 00 00 14 00 4d 02
>027098	2b 3e 5d e5 06 22 5d fd 0a f0 01 40 26 32 00 00
>0270a8	12 00 4e 02 2b 3e 8d ed 06 e0 06 22 1c ed 2f e4
>0270b8	00 00 16 00 4f 02 2b 3e 38 d6 00 40 26 32 06 22
>0270c8	2c ce 29 c9 06 c0 00 00 16 00 50 02 2b 3e fd ed
>0270d8	78 e0 06 22 7d fd 4b f2 02 40 26 32 00 00 10 00
>0270e8	51 02 2b 3e 54 cd 98 c3 06 22 17 c0 00 00 14 00
>0270f8	52 02 2b 3e cc ec 05 ee 19 e0 06 22 4c ed 0d e0
>027108	00 00 14 00 53 02 2b 3e d0 ed ba e0 06 22 4d ed
>027118	ea e8 1d e0 00 00 14 00 54 02 2b 3e cf cd 21 c0
>027128	06 22 88 cd 61 cb 20 c0 00 00 10 00 55 02 2b 3e
>027138	0d c6 06 22 85 cd a9 c2 00 00 0e 00 56 02 2b 3e
>027148	49 c5 06 22 40 c6 00 00 14 00 57 02 2b 3e 59 cd
>027158	15 c0 06 22 2c ce 29 c9 06 c0 00 00 14 00 58 02
>027168	2b 3e 18 e0 06 22 a4 fd 23 f0 03 40 26 32 00 00
>027178	12 00 59 02 2b 3e 06 ee 0f e0 06 22 2d ed f6 e0
>027188	00 00 12 00 5a 02 2b 3e 03 e0 06 22 5e ee ac ea
>027198	1e e0 00 00 12 00 5b 02 2b 3e 49 c5 06 22 10 d0
>0271a8	02 40 26 32 00 00 12 00 5c 02 2b 3e de ed 9c e3
>0271b8	06 22 c5 ec 24 e0 00 00 14 00 5d 02 2b 3e 59 cd
>0271c8	15 c0 06 22 5e cd 0f cc 06 c0 00 00 18 00 5e 02
>0271d8	2b 3e 2d dd cf dc 0a d0 03 40 26 32 06 22 6e ce
>0271e8	13 c0 00 00 0e 00 5f 02 2b 3e 3f e6 06 22 e7 e5
>0271f8	00 00 10 00 60 02 2b 3e ca e4 06 22 05 ee 42 e3
>027208	00 00 0e 00 61 02 2b 3e 74 c5 06 22 11 c0 00 00
>027218	10 00 62 02 2b 3e 33 ed 1e e0 06 22 18 e0 00 00
>027228	10 00 63 02 2b 3e 14 c0 06 22 d0 cc 0d c5 00 00
>027238	10 00 64 02 2b 3e a7 ed 1e e0 06 22 69 e6 00 00
>027248	14 00 65 02 2b 3e 0a ee 04 ed 1b e0 06 22 7f ed
>027258	4a e2 00 00 12 00 66 02 2b 3e 7e cd 0d c6 06 22
>027268	5f cd 14 c0 00 00 14 00 67 02 2b 3e a4 fd 23 f0
>027278	02 40 26 32 06 22 5d e5 00 00 12 00 68 02 2b 3e
>027288	40 c6 06 22 38 d6 04 40 26 32 00 00 10 00 69 02
>027298	2b 3e 0f e0 06 22 ac ed 0c e0 00 00 10 00 6a 02
>0272a8	2b 3e ce ed 23 e0 06 22 69 e6 00 00 12 00 6b 02
>0272b8	2b 3e 05 ee 42 e3 06 22 4f ed 2b e4 00 00 18 00
>0272c8	6c 02 2b 3e cd ec 01 e0 06 22 04 fe 20 fc 04 f0
>0272d8	01 40 26 32 00 00 12 00 6d 02 2b 3e 28 ce 11 c0
>0272e8	06 22 14 ce 23 c0 00 00 14 00 6e 02 2b 3e 10 d0
>0272f8	00 40 26 32 06 22 d1 cc 88 c2 00 00 14 00 6f 02
>027308	2b 3e 5d ee 95 eb 24 e0 06 22 1c ed 2f e4 00 00
>027318	14 00 70 02 2b 3e 4c ed 0d e0 06 22 5d ee 95 eb
>027328	24 e0 00 00 10 00 71 02 2b 3e 1a c5 06 22 59 cd
>027338	15 c0 00 00 12 00 72 02 2b 3e 33 ed 1e e0 06 22
>027348	33 ed 1e e0 00 00 14 00 73 02 2b 3e d9 e5 06 22
>027358	7d fd 4b f2 00 40 26 32 00 00 12 00 74 02 2b 3e
>027368	06 cd 02 c0 06 22 cf cd 21 c0 00 00 14 00 75 02
>027378	2b 3e 7d fd 4b f2 04 40 26 32 06 22 03 e0 00 00
>027388	12 00 76 02 2b 3e 49 cd a9 c2 06 22 06 cd 02 c0
>027398	00 00 14 00 77 02 2b 3e 2c ce 29 c9 06 c0 06 22
>0273a8	d0 cc 0d c5 00 00 12 00 78 02 2b 3e 10 d0 02 40
>0273b8	26 32 06 22 0c c0 00 00 16 00 79 02 2b 3e 09 e0
>0273c8	06 22 03 fd be fd 01 f0 02 40 26 32 00 00 12 00
>0273d8	7a 02 2b 3e 05 f0 02 40 26 32 06 22 11 e0 00 00
>0273e8	14 00 7b 02 2b 3e 06 ee 0f e0 06 22 fb ec c0 ec
>0273f8	0f e0 00 00 10 00 7c 02 2b 3e 5f cd 14 c0 06 22
>027408	0c c0 00 00 16 00 7d 02 2b 3e f8 e4 06 22 04 fe
>027418	20 fc 04 f0 01 40 26 32 00 00 18 00 7e 02 2b 3e
>027428	5a de 5e de 06 d0 00 40 26 32 06 22 03 ce b2 c1
>027438	00 00 16 00 7f 02 2b 3e ed cc b1 ca 1f c0 06 22
>027448	ed cc b1 ca 1f c0 00 00 12 00 80 02 2b 3e 85 cd
>027458	a9 c2 06 22 fa cc 1a c0 00 00 14 00 81 02 2b 3e
>027468	33 ed 1e e0 06 22 2f f6 02 40 26 32 00 00 12 00
>027478	82 02 2b 3e d0 cc 0d c5 06 22 d0 cd 01 c0 00 00
>027488	14 00 83 02 2b 3e d1 cc 88 c2 06 22 d0 cd 9c cc
>027498	0c c0 00 00 12 00 84 02 2b 3e 69 e6 06 22 2f f6
>0274a8	00 40 26 32 00 00 0e 00 85 02 2b 3e 69 e6 06 22
>0274b8	ca e4 00 00 12 00 86 02 2b 3e 5e ee 08 e2 06 22
>0274c8	1b ed 0e e0 00 00 12 00 87 02 2b 3e 6e ce 13 c0
>0274d8	06 22 6e ce 13 c0 00 00 16 00 88 02 2b 3e a5 cd
>0274e8	a7 cb 08 c0 06 22 36 ce 74 ce 22 c0 00 00 14 00
>0274f8	89 02 2b 3e 4d ed ea e8 1d e0 06 22 d1 ed 0d e0
>027508	00 00 12 00 8a 02 2b 3e 88 cd 61 cb 20 c0 06 22
>027518	11 c0 00 00 12 00 8b 02 2b 3e 6e ce 13 c0 06 22
>027528	14 ce 23 c0 00 00 14 00 8c 02 2b 3e 09 e0 06 22
>027538	76 fd 12 f1 02 40 26 32 00 00 1a 00 8d 02 2b 3e
>027548	a5 cd a7 cb 08 c0 06 22 2f dd d2 dd 12 d0 03 40
>027558	26 32 00 00 10 00 8e 02 2b 3e 82 cd 74 c4 06 22
>027568	02 c0 00 00 10 00 8f 02 2b 3e d0 ed ba e0 06 22
>027578	0a e0 00 00 12 00 90 02 2b 3e 0c ce 09 c3 06 22
>027588	49 cd a9 c2 00 00 16 00 91 02 2b 3e 2d dd cf dc
>027598	0a d0 03 40 26 32 06 22 1a c5 00 00 12 00 92 02
>0275a8	2b 3e 2e cd eb c2 06 22 ac cd 0c c0 00 00 12 00
>0275b8	93 02 2b 3e 38 d6 01 40 26 32 06 22 09 c0 00 00
>0275c8	14 00 94 02 2b 3e fd ed 78 e0 06 22 0a ee 04 ed
>0275d8	1b e0 00 00 16 00 95 02 2c 3e 88 cd 61 cb 20 c0
>0275e8	06 22 0b 24 04 10 48 9b 00 00 12 00 96 02 2c 3e
>0275f8	49 c5 06 22 0b 24 02 10 17 46 00 00 0e 00 97 02
>027608	2c 3e 17 c0 06 22 07 40 00 00 12 00 98 02 2c 3e
>027618	14 c0 06 22 0b 24 03 10 0e 51 00 00 12 00 99 02
>027628	2c 3e 2e cd eb c2 06 22 03 10 9c b3 00 00 10 00
>027638	9a 02 2c 3e 28 ce 11 c0 06 22 42 b3 00 00 10 00
>027648	9b 02 2c 3e 86 c5 06 22 0b 24 e1 49 00 00 10 00
>027658	9c 02 2c 3e cf c5 06 22 0b 24 4e 40 00 00 12 00
>027668	9d 02 2c 3e 02 c0 06 22 0b 24 01 10 64 53 00 00
>027678	0e 00 9e 02 2c 3e 54 c5 06 22 b4 4d 00 00 14 00
>027688	9f 02 2c 3e d1 cc 88 c2 06 22 0b 24 01 10 64 53
>027698	00 00 14 00 a0 02 2c 3e d1 cd 1c c0 06 22 0b 24
>0276a8	04 10 48 9b 00 00 12 00 a1 02 2c 3e ac cd 0c c0
>0276b8	06 22 03 10 9c b3 00 00 14 00 a2 02 2c 3e 5e cd
>0276c8	0f cc 06 c0 06 22 0b 24 e1 49 00 00 10 00 a3 02
>0276d8	2c 3e 14 ce 23 c0 06 22 42 b3 00 00 14 00 a4 02
>0276e8	2c 3e cf cd 21 c0 06 22 0b 24 01 10 64 53 00 00
>0276f8	10 00 a5 02 2c 3e 1a c5 06 22 0b 24 e1 49 00 00
>027708	14 00 a6 02 2c 3e 49 cd a9 c2 06 22 0b 24 01 10
>027718	64 53 00 00 12 00 a7 02 2c 3e 03 c5 06 22 0b 24
>027728	04 10 48 9b 00 00 0e 00 a8 02 2c 3e 0c c0 06 22
>027738	12 8f 00 00 12 00 a9 02 2c 3e ed cc b1 ca 1f c0
>027748	06 22 12 8f 00 00 10 00 aa 02 2c 3e d0 cc 0d c5
>027758	06 22 42 b3 00 00 12 00 ab 02 2c 3e 36 ce 74 ce
>027768	22 c0 06 22 12 8f 00 00 10 00 ac 02 2c 3e d4 c5
>027778	06 22 0b 24 09 40 00 00 12 00 ad 02 2c 3e fc cd
>027788	68 c3 06 22 04 10 1e a2 00 00 12 00 ae 02 2c 3e
>027798	19 c0 06 22 0b 24 04 10 48 9b 00 00 12 00 af 02
>0277a8	2c 3e 2b ce 1a c3 06 22 0b 24 09 40 00 00 12 00
>0277b8	b0 02 2c 3e 11 c0 06 22 0b 24 04 10 48 9b 00 00
>0277c8	12 00 b1 02 2c 3e 4e cd 22 c2 06 22 02 10 51 b2
>0277d8	00 00 14 00 b2 02 2c 3e 82 cd 74 c4 06 22 0b 24
>0277e8	01 10 64 53 00 00 12 00 b3 02 2c 3e 40 c6 06 22
>0277f8	0b 24 03 10 9e 69 00 00 0e 00 b4 02 2c 3e 15 c0
>027808	06 22 0c a6 00 00 10 00 b5 02 2c 3e 09 c0 06 22
>027818	02 10 51 b2 00 00 16 00 b6 02 2c 3e d0 cd 9c cc
>027828	0c c0 06 22 0b 24 01 10 64 53 00 00 14 00 b7 02
>027838	2c 3e 0c ce 09 c3 06 22 0b 24 01 10 64 53 00 00
>027848	12 00 b8 02 2c 3e 59 cd 15 c0 06 22 0b 24 e1 49
>027858	00 00 10 00 b9 02 2c 3e 54 cd 98 c3 06 22 07 40
>027868	00 00 16 00 ba 02 2c 3e ff cd b0 cd 18 c0 06 22
>027878	0b 24 01 10 64 53 00 00 10 00 bb 02 2c 3e 5f cd
>027888	14 c0 06 22 12 8f 00 00 12 00 bc 02 2c 3e 2c c5
>027898	06 22 0b 24 01 10 64 53 00 00 16 00 bd 02 2c 3e
>0278a8	a5 cd a7 cb 08 c0 06 22 0b 24 02 10 d8 74 00 00
>0278b8	0e 00 be 02 2c 3e 0d c6 06 22 b4 4d 00 00 10 00
>0278c8	bf 02 2c 3e d0 cd 01 c0 06 22 42 b3 00 00 16 00
>0278d8	c0 02 2c 3e 2c ce 29 c9 06 c0 06 22 0b 24 03 10
>0278e8	0e 51 00 00 10 00 c1 02 2c 3e b4 c5 06 22 02 10
>0278f8	51 b2 00 00 10 00 c2 02 2c 3e 13 c0 06 22 0b 24
>027908	99 40 00 00 14 00 c3 02 2c 3e 8a cd 13 c0 06 22
>027918	0b 24 03 10 0e 51 00 00 12 00 c4 02 2c 3e 85 cd
>027928	a9 c2 06 22 0b 24 4e 40 00 00 10 00 c5 02 2c 3e
>027938	7e cd 0d c6 06 22 07 40 00 00 10 00 c6 02 2c 3e
>027948	fb cc f0 c3 06 22 07 40 00 00 10 00 c7 02 2c 3e
>027958	f8 c4 06 22 0b 24 4e 40 00 00 14 00 c8 02 2c 3e
>027968	06 cd 02 c0 06 22 0b 24 01 10 64 53 00 00 12 00
>027978	c9 02 2c 3e 32 c5 06 22 0b 24 03 10 83 44 00 00
>027988	12 00 ca 02 2c 3e fa cc 1a c0 06 22 0b 24 4e 40
>027998	00 00 12 00 cb 02 2c 3e 0a ce 10 c0 06 22 0b 24
>0279a8	09 40 00 00 10 00 cc 02 2c 3e c8 c4 06 22 01 10
>0279b8	96 4e 00 00 14 00 cd 02 2c 3e 03 ce b2 c1 06 22
>0279c8	0b 24 04 10 48 9b 00 00 12 00 ce 02 2c 3e 74 c5
>0279d8	06 22 0b 24 04 10 48 9b 00 00 10 00 cf 02 2c 3e
>0279e8	6e ce 13 c0 06 22 42 b3 00 00 14 00 d0 02 2c 3e
>0279f8	5d ce bf c2 06 22 0b 24 01 10 64 53 00 00 18 00
>027a08	d1 02 2c 3e 2d ed f6 e0 06 22 0a 00 06 48 44 4c
>027a18	42 54 52 00 00 00 10 00 d2 02 2c 3e 69 e6 06 22
>027a28	04 00 01 47 00 00 16 00 d3 02 2c 3e 11 e0 06 22
>027a38	0a 00 07 4a 42 4f 56 47 53 52 00 00 16 00 d4 02
>027a48	2c 3e d0 ed ba e0 06 22 08 00 05 5a 48 58 20 4c
>027a58	00 00 12 00 d5 02 2c 3e 2c e5 06 22 06 00 02 56
>027a68	50 00 00 00 18 00 d6 02 2c 3e 0a ee 04 ed 1b e0
>027a78	06 22 08 00 04 49 53 56 58 00 00 00 16 00 d7 02
>027a88	2c 3e 59 e5 06 22 0a 00 07 4a 42 4f 56 47 53 52
>027a98	00 00 12 00 d8 02 2c 3e d9 e5 06 22 06 00 03 53
>027aa8	4a 58 00 00 14 00 d9 02 2c 3e 0a e0 06 22 08 00
>027ab8	05 5a 48 58 20 4c 00 00 16 00 da 02 2c 3e f8 e4
>027ac8	06 22 0a 00 06 48 44 4c 42 54 52 00 00 00 18 00
>027ad8	db 02 2c 3e 0b e0 06 22 0c 00 09 48 59 54 54 20
>027ae8	20 53 41 55 00 00 14 00 dc 02 2c 3e 8d ed 06 e0
>027af8	06 22 06 00 02 56 50 00 00 00 14 00 dd 02 2c 3e
>027b08	0f e0 06 22 08 00 04 49 53 56 58 00 00 00 1a 00
>027b18	de 02 2c 3e cc ec 05 ee 19 e0 06 22 0a 00 07 41
>027b28	55 20 56 52 20 48 00 00 14 00 df 02 2c 3e 4f ed
>027b38	2b e4 06 22 06 00 02 56 50 00 00 00 16 00 e0 02
>027b48	2c 3e 03 e0 06 22 0a 00 06 48 44 4c 42 54 52 00
>027b58	00 00 1a 00 e1 02 2c 3e 31 ee 14 ec 0b e0 06 22
>027b68	0a 00 07 41 55 20 56 52 20 48 00 00 18 00 e2 02
>027b78	2c 3e 5b e5 06 22 0c 00 08 49 50 54 20 20 20 4a
>027b88	5a 00 00 00 1c 00 e3 02 2c 3e 8a ed 24 e0 06 22
>027b98	0e 00 0b 57 59 20 59 41 52 4a 20 54 53 51 00 00
>027ba8	16 00 e4 02 2c 3e 5e ee 08 e2 06 22 08 00 04 4c
>027bb8	4f 20 45 00 00 00 14 00 e5 02 2c 3e 4c ed 0d e0
>027bc8	06 22 06 00 02 56 50 00 00 00 10 00 e6 02 2c 3e
>027bd8	fa e4 06 22 04 00 01 49 00 00 16 00 e7 02 2c 3e
>027be8	09 e0 06 22 0a 00 07 4a 42 4f 56 47 53 52 00 00
>027bf8	1c 00 e8 02 2c 3e 33 ed 1e e0 06 22 0e 00 0b 43
>027c08	4c 55 44 20 58 46 20 47 20 57 00 00 16 00 e9 02
>027c18	2c 3e 5d e5 06 22 0a 00 07 4a 42 4f 56 47 53 52
>027c28	00 00 16 00 ea 02 2c 3e a7 ed 1e e0 06 22 08 00
>027c38	05 5a 48 58 20 4c 00 00 1a 00 eb 02 2c 3e d3 ec
>027c48	34 ea 02 e0 06 22 0a 00 06 4d 48 20 56 55 54 00
>027c58	00 00 1c 00 ec 02 2c 3e 74 ed 1e e0 06 22 0e 00
>027c68	0b 55 46 45 20 45 58 56 52 48 4d 51 00 00 1c 00
>027c78	ed 02 2c 3e 4d ed 7a eb 1f e0 06 22 0c 00 08 4e
>027c88	55 57 20 20 4b 55 55 00 00 00 1a 00 ee 02 2c 3e
>027c98	5e ee ac ea 1e e0 06 22 0a 00 06 48 44 4c 42 54
>027ca8	52 00 00 00 18 00 ef 02 2c 3e c5 ec 24 e0 06 22
>027cb8	0a 00 06 48 44 4c 42 54 52 00 00 00 18 00 f0 02
>027cc8	2c 3e de ed 9c e3 06 22 0a 00 06 48 44 4c 42 54
>027cd8	52 00 00 00 1a 00 f1 02 2c 3e d8 ec d0 e4 06 22
>027ce8	0c 00 09 48 59 54 54 20 20 53 41 55 00 00 14 00
>027cf8	f2 02 2c 3e 05 ee 42 e3 06 22 06 00 02 56 50 00
>027d08	00 00 16 00 f3 02 2c 3e fd ed 78 e0 06 22 08 00
>027d18	04 49 53 56 58 00 00 00 1e 00 f4 02 2c 3e fb ec
>027d28	c0 ec 0f e0 06 22 0e 00 0b 47 44 52 45 4a 49 4d
>027d38	20 42 53 54 00 00 10 00 f5 02 2c 3e ca e4 06 22
>027d48	04 00 01 47 00 00 10 00 f6 02 2c 3e e7 e5 06 22
>027d58	04 00 01 47 00 00 12 00 f7 02 2c 3e 00 ee 18 e0
>027d68	06 22 04 00 01 49 00 00 18 00 f8 02 2c 3e cd ec
>027d78	01 e0 06 22 0a 00 06 48 44 4c 42 54 52 00 00 00
>027d88	1a 00 f9 02 2c 3e 4d ed ea e8 1d e0 06 22 0a 00
>027d98	07 4a 42 4f 56 47 53 52 00 00 14 00 fa 02 2c 3e
>027da8	10 e0 06 22 08 00 04 49 53 56 58 00 00 00 16 00
>027db8	fb 02 2c 3e 5d ee 95 eb 24 e0 06 22 06 00 02 56
>027dc8	50 00 00 00 12 00 fc 02 2c 3e d1 ed 17 e0 06 22
>027dd8	04 00 00 00 00 00 16 00 fd 02 2c 3e ac ed 0c e0
>027de8	06 22 08 00 04 49 53 56 58 00 00 00 14 00 fe 02
>027df8	2c 3e 12 e0 06 22 08 00 04 4c 4f 20 45 00 00 00
>027e08	16 00 ff 02 2c 3e 7f ed 4a e2 06 22 08 00 04 49
>027e18	53 56 58 00 00 00 14 00 00 03 2c 3e 1c ed 2f e4
>027e28	06 22 06 00 02 56 50 00 00 00 10 00 01 03 2c 3e
>027e38	3f e6 06 22 04 00 01 47 00 00 1e 00 02 03 2c 3e
>027e48	3f ee c2 eb 06 e0 06 22 0e 00 0b 47 44 52 45 4a
>027e58	49 4d 20 42 53 54 00 00 1c 00 03 03 2c 3e 58 ed
>027e68	0c e0 06 22 0e 00 0b 57 59 20 59 41 52 4a 20 54
>027e78	53 51 00 00 18 00 04 03 2c 3e d1 ed 0d e0 06 22
>027e88	0a 00 07 4a 42 4f 56 47 53 52 00 00 14 00 05 03
>027e98	2c 3e a2 e5 06 22 08 00 05 5a 48 58 20 4c 00 00
>027ea8	16 00 06 03 2c 3e 1e e5 06 22 0a 00 07 4a 42 4f
>027eb8	56 47 53 52 00 00 16 00 07 03 2c 3e ce ed 23 e0
>027ec8	06 22 08 00 05 5a 48 58 20 4c 00 00 1c 00 08 03
>027ed8	2c 3e 06 ee 0f e0 06 22 0e 00 0b 47 44 52 45 4a
>027ee8	49 4d 20 42 53 54 00 00 18 00 09 03 2c 3e b8 ed
>027ef8	80 ec 06 e0 06 22 08 00 05 5a 48 58 20 4c 00 00
>027f08	16 00 0a 03 2c 3e 1b ed 0e e0 06 22 08 00 04 4c
>027f18	4f 20 45 00 00 00 1a 00 0b 03 2c 3e 0c ee 15 e0
>027f28	06 22 0c 00 09 4d 51 20 41 56 4b 55 4a 46 00 00
>027f38	10 00 0c 03 2c 3e 18 e0 06 22 04 00 00 00 00 00
>027f48	44 00 0d 03 2c 3e 05 d0 00 40 26 32 06 22 0b 24
>027f58	02 10 ae 75 24 32 2c 3e 05 d0 01 40 26 32 06 22
>027f68	03 10 9c b3 24 32 2c 3e 05 d0 02 40 26 32 06 22
>027f78	0b 24 4e 40 24 32 2c 3e 05 d0 03 40 26 32 06 22
>027f88	b4 4d 00 00 34 00 0e 03 2c 3e 0f d0 00 40 26 32
>027f98	06 22 0b 24 04 10 48 9b 24 32 2c 3e 0f d0 01 40
>027fa8	26 32 06 22 12 8f 24 32 2c 3e 0f d0 02 40 26 32
>027fb8	06 22 0b 24 09 40 00 00 58 00 0f 03 2c 3e 38 d6
>027fc8	00 40 26 32 06 22 01 10 96 4e 24 32 2c 3e 38 d6
>027fd8	01 40 26 32 06 22 02 10 51 b2 24 32 2c 3e 38 d6
>027fe8	02 40 26 32 06 22 0b 24 03 10 0e 51 24 32 2c 3e
>027ff8	38 d6 03 40 26 32 06 22 04 10 02 8c 24 32 2c 3e
>028008	38 d6 04 40 26 32 06 22 0b 24 03 10 9e 69 00 00
>028018	66 00 10 03 2c 3e 63 de 9b d3 00 40 26 32 06 22
>028028	0b 24 02 10 d8 74 24 32 2c 3e 63 de 9b d3 01 40
>028038	26 32 06 22 0b 24 01 10 64 53 24 32 2c 3e 63 de
>028048	9b d3 02 40 26 32 06 22 01 10 96 4e 24 32 2c 3e
>028058	63 de 9b d3 03 40 26 32 06 22 0b 24 03 10 83 44
>028068	24 32 2c 3e 63 de 9b d3 04 40 26 32 06 22 0b 24
>028078	05 10 9b a1 00 00 7e 00 11 03 2c 3e 62 de 6c dc
>028088	02 d0 00 40 26 32 06 22 05 10 39 4d 24 32 2c 3e
>028098	62 de 6c dc 02 d0 01 40 26 32 06 22 b9 9c 24 32
>0280a8	2c 3e 62 de 6c dc 02 d0 02 40 26 32 06 22 0b 24
>0280b8	02 10 b8 6e 24 32 2c 3e 62 de 6c dc 02 d0 03 40
>0280c8	26 32 06 22 0b 24 02 10 d8 78 24 32 2c 3e 62 de
>0280d8	6c dc 02 d0 04 40 26 32 06 22 b9 9c 24 32 2c 3e
>0280e8	62 de 6c dc 02 d0 05 40 26 32 06 22 0b 24 02 10
>0280f8	1c 6e 00 00 32 00 12 03 2c 3e 10 d0 00 40 26 32
>028108	06 22 b4 4d 24 32 2c 3e 10 d0 01 40 26 32 06 22
>028118	0b 24 03 10 83 44 24 32 2c 3e 10 d0 02 40 26 32
>028128	06 22 12 8f 00 00 8a 00 13 03 2c 3e 2d dd cf dc
>028138	0a d0 00 40 26 32 06 22 0b 24 35 40 24 32 2c 3e
>028148	2d dd cf dc 0a d0 01 40 26 32 06 22 8d a3 24 32
>028158	2c 3e 2d dd cf dc 0a d0 02 40 26 32 06 22 12 8f
>028168	24 32 2c 3e 2d dd cf dc 0a d0 03 40 26 32 06 22
>028178	0b 24 e1 49 24 32 2c 3e 2d dd cf dc 0a d0 04 40
>028188	26 32 06 22 0b 24 57 40 24 32 2c 3e 2d dd cf dc
>028198	0a d0 05 40 26 32 06 22 0b 24 38 40 24 32 2c 3e
>0281a8	2d dd cf dc 0a d0 06 40 26 32 06 22 07 40 00 00
>0281b8	42 00 14 03 2c 3e 4f dd 20 dc 06 d0 00 40 26 32
>0281c8	06 22 01 10 d2 5d 24 32 2c 3e 4f dd 20 dc 06 d0
>0281d8	01 40 26 32 06 22 0b 24 5a 40 24 32 2c 3e 4f dd
>0281e8	20 dc 06 d0 02 40 26 32 06 22 0b 24 01 10 64 53
>0281f8	00 00 40 00 15 03 2c 3e 5a de 5e de 06 d0 00 40
>028208	26 32 06 22 0b 24 04 10 48 9b 24 32 2c 3e 5a de
>028218	5e de 06 d0 01 40 26 32 06 22 0b 24 bb 40 24 32
>028228	2c 3e 5a de 5e de 06 d0 02 40 26 32 06 22 b4 4d
>028238	00 00 80 00 16 03 2c 3e 2f dd d2 dd 12 d0 00 40
>028248	26 32 06 22 0b 24 01 10 64 53 24 32 2c 3e 2f dd
>028258	d2 dd 12 d0 01 40 26 32 06 22 02 10 70 9a 24 32
>028268	2c 3e 2f dd d2 dd 12 d0 02 40 26 32 06 22 0b 24
>028278	4e 40 24 32 2c 3e 2f dd d2 dd 12 d0 03 40 26 32
>028288	06 22 0b 24 02 10 d8 74 24 32 2c 3e 2f dd d2 dd
>028298	12 d0 04 40 26 32 06 22 c0 40 24 32 2c 3e 2f dd
>0282a8	d2 dd 12 d0 05 40 26 32 06 22 0b 24 04 10 0f 56
>0282b8	00 00 52 00 17 03 2c 3e 03 fd be fd 01 f0 00 40
>0282c8	26 32 06 22 06 00 03 52 4d 4d 24 32 2c 3e 03 fd
>0282d8	be fd 01 f0 01 40 26 32 06 22 0e 00 0b 55 46 45
>0282e8	20 45 58 56 52 48 4d 51 24 32 2c 3e 03 fd be fd
>0282f8	01 f0 02 40 26 32 06 22 0a 00 07 4d 4c 47 51 4a
>028308	4a 52 00 00 68 00 18 03 2c 3e ff fd 9b f1 00 40
>028318	26 32 06 22 0a 00 06 4d 48 20 56 55 54 00 24 32
>028328	2c 3e ff fd 9b f1 01 40 26 32 06 22 0e 00 0a 41
>028338	4a 4d 50 57 48 4f 51 20 58 00 24 32 2c 3e ff fd
>028348	9b f1 02 40 26 32 06 22 0a 00 07 4a 42 4f 56 47
>028358	53 52 24 32 2c 3e ff fd 9b f1 03 40 26 32 06 22
>028368	0a 00 06 48 44 4c 42 54 52 00 00 00 68 00 19 03
>028378	2c 3e 5d fd 0a f0 00 40 26 32 06 22 0e 00 0b 43
>028388	4f 47 4b 20 43 59 59 50 43 49 24 32 2c 3e 5d fd
>028398	0a f0 01 40 26 32 06 22 0a 00 07 4a 42 4f 56 47
>0283a8	53 52 24 32 2c 3e 5d fd 0a f0 02 40 26 32 06 22
>0283b8	08 00 04 49 53 56 58 00 24 32 2c 3e 5d fd 0a f0
>0283c8	03 40 26 32 06 22 0c 00 08 44 51 20 51 20 54 56
>0283d8	4c 00 00 00 40 00 1a 03 2c 3e 76 fd 12 f1 00 40
>0283e8	26 32 06 22 04 00 00 00 24 32 2c 3e 76 fd 12 f1
>0283f8	01 40 26 32 06 22 04 00 01 49 24 32 2c 3e 76 fd
>028408	12 f1 02 40 26 32 06 22 0a 00 07 4a 42 4f 56 47
>028418	53 52 00 00 50 00 1b 03 2c 3e 2f f6 00 40 26 32
>028428	06 22 0e 00 0b 55 46 45 20 45 58 56 52 48 4d 51
>028438	24 32 2c 3e 2f f6 01 40 26 32 06 22 0c 00 09 59
>028448	54 4b 45 20 52 54 20 47 24 32 2c 3e 2f f6 02 40
>028458	26 32 06 22 0e 00 0b 43 4c 55 44 20 58 46 20 47
>028468	20 57 00 00 7a 00 1c 03 2c 3e a4 fd 23 f0 00 40
>028478	26 32 06 22 0e 00 0b 57 59 20 59 41 52 4a 20 54
>028488	53 51 24 32 2c 3e a4 fd 23 f0 01 40 26 32 06 22
>028498	0a 00 06 4d 4a 41 55 20 58 00 24 32 2c 3e a4 fd
>0284a8	23 f0 02 40 26 32 06 22 0a 00 07 4a 42 4f 56 47
>0284b8	53 52 24 32 2c 3e a4 fd 23 f0 03 40 26 32 06 22
>0284c8	04 00 00 00 24 32 2c 3e a4 fd 23 f0 04 40 26 32
>0284d8	06 22 0a 00 06 48 44 4c 42 54 52 00 00 00 50 00
>0284e8	1d 03 2c 3e 2c f6 00 40 26 32 06 22 04 00 00 00
>0284f8	24 32 2c 3e 2c f6 01 40 26 32 06 22 08 00 04 4c
>028508	4f 20 45 00 24 32 2c 3e 2c f6 02 40 26 32 06 22
>028518	0a 00 07 4a 42 4f 56 47 53 52 24 32 2c 3e 2c f6
>028528	03 40 26 32 06 22 06 00 03 46 4a 45 00 00 50 00
>028538	1e 03 2c 3e 04 fe 20 fc 04 f0 00 40 26 32 06 22
>028548	0a 00 06 48 44 4c 42 54 52 00 24 32 2c 3e 04 fe
>028558	20 fc 04 f0 01 40 26 32 06 22 0a 00 06 48 44 4c
>028568	42 54 52 00 24 32 2c 3e 04 fe 20 fc 04 f0 02 40
>028578	26 32 06 22 08 00 04 4c 4f 20 45 00 00 00 54 00
>028588	1f 03 2c 3e 05 f0 00 40 26 32 06 22 06 00 03 47
>028598	46 55 24 32 2c 3e 05 f0 01 40 26 32 06 22 0c 00
>0285a8	09 4d 51 20 41 56 4b 55 4a 46 24 32 2c 3e 05 f0
>0285b8	02 40 26 32 06 22 0a 00 07 4a 42 4f 56 47 53 52
>0285c8	24 32 2c 3e 05 f0 03 40 26 32 06 22 04 00 01 52
>0285d8	00 00 9c 00 20 03 2c 3e 7d fd 4b f2 00 40 26 32
>0285e8	06 22 06 00 03 53 4a 58 24 32 2c 3e 7d fd 4b f2
>0285f8	01 40 26 32 06 22 06 00 02 43 4b 00 24 32 2c 3e
>028608	7d fd 4b f2 02 40 26 32 06 22 08 00 04 4c 4f 20
>028618	45 00 24 32 2c 3e 7d fd 4b f2 03 40 26 32 06 22
>028628	0a 00 07 41 55 20 56 52 20 48 24 32 2c 3e 7d fd
>028638	4b f2 04 40 26 32 06 22 0a 00 06 48 44 4c 42 54
>028648	52 00 24 32 2c 3e 7d fd 4b f2 05 40 26 32 06 22
>028658	08 00 04 50 47 20 48 00 24 32 2c 3e 7d fd 4b f2
>028668	06 40 26 32 06 22 06 00 03 55 54 4c 00 00 00 00
>028678	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>028688	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 918 times (14688 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
