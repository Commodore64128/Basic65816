
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Fri Jun  7 21:47:18 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 31 06 01	jmp $010631		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	08 02					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	95 03					.word Binary_And               & $FFFF ; token $2001 "and"
>010004	a5 03					.word Binary_Or                & $FFFF ; token $2002 "or"
>010006	b5 03					.word Binary_Xor               & $FFFF ; token $2003 "xor"
>010008	f9 03					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	60 04					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	c5 03					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	42 04					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	24 04					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	df 03					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	df 02					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	60 03					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	6c 05					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	e9 04					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	60 05					.word Binary_Modulus           & $FFFF ; token $260e "mod"
>01001e	71 03					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	83 03					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	fa 05					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	da 05					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	b6 05					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	a0 05					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	08 02					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	08 02					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	08 02					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	08 02					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	08 02					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	08 02					.word IllegalToken             & $FFFF ; token $3e1a "let"
>010036	08 02					.word IllegalToken             & $FFFF ; token $3c1b "while"
>010038	08 02					.word IllegalToken             & $FFFF ; token $3a1c "wend"
.01003a					TokenText:
>01003a	04 61 6e 64				 .text $04,"and"      ; token $2001
>01003e	03 6f 72				 .text $03,"or"       ; token $2002
>010041	04 78 6f 72				 .text $04,"xor"      ; token $2003
>010045	12 3c					 .text $12,"<"        ; token $2204
>010047	12 3e					 .text $12,">"        ; token $2205
>010049	12 3d					 .text $12,"="        ; token $2206
>01004b	13 3c 3d				 .text $13,"<="       ; token $2207
>01004e	13 3e 3d				 .text $13,">="       ; token $2208
>010051	13 3c 3e				 .text $13,"<>"       ; token $2209
>010054	22 2b					 .text $22,"+"        ; token $240a
>010056	22 2d					 .text $22,"-"        ; token $240b
>010058	32 2a					 .text $32,"*"        ; token $260c
>01005a	32 2f					 .text $32,"/"        ; token $260d
>01005c	34 6d 6f 64				 .text $34,"mod"      ; token $260e
>010060	33 3e 3e				 .text $33,">>"       ; token $260f
>010063	33 3c 3c				 .text $33,"<<"       ; token $2610
>010066	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006c	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010071	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010076	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007b	92 2c					 .text $92,","        ; token $3215
>01007d	92 3b					 .text $92,";"        ; token $3216
>01007f	92 3a					 .text $92,":"        ; token $3217
>010081	92 28					 .text $92,"("        ; token $3218
>010083	92 29					 .text $92,")"        ; token $3219
>010085	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>010089	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c1b
>01008f	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a1c
>010094	00					.byte $00
=$2001					andTokenID                       = $2001
=$2002					orTokenID                        = $2002
=$2003					xorTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					modTokenID                       = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3c1b					whileTokenID                     = $3c1b
=$3a1c					wendTokenID                      = $3a1c

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010095					Evaluate:
.010095	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010098	a9 00 00	lda #$0000			lda 	#0<<9 						; start at the lowest precedence level.
.01009b					EvaluateLevel:
.01009b	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.01009e	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100a0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100a2	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100a5	b0 75		bcs $01011c			bcs 	_ELVariable
.0100a7	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100aa	b0 16		bcs $0100c2			bcs 	_ELConstant
.0100ac	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100af	90 77		bcc $010128			bcc 	_ELStringConstant
.0100b1	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100b4	90 03		bcc $0100b9			bcc 	_ELConstantShift
.0100b6	82 8c 00	brl $010145			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100b9					_ELConstantShift:
.0100b9	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100bc	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100be	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100c0	e6 06		inc $06				inc 	DCodePtr
.0100c2					_ELConstant:
.0100c2	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100c4	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100c5	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100c7	6a		ror a				ror 	a 							; rotate that into the constant value
.0100c8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100ca	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100cc	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100ce	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100d0	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100d2	e6 06		inc $06				inc 	DCodePtr
.0100d4					_ELGotAtom:
.0100d4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100d6	a8		tay				tay 								; save in Y
.0100d7	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100da	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100dd	d0 35		bne $010114			bne 	_ELExit
.0100df	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0100e1	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100e4	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0100e6	98		tya				tya 								; get the keyword token back
.0100e7	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100ea	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0100ec	90 26		bcc $010114			bcc 	_ELExit 					; precedence too low, then exit.
.0100ee	5a		phy				phy 								; save the binary operator on the stack
.0100ef	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0100f1	e6 06		inc $06				inc 	DCodePtr
.0100f3	18		clc				clc 								; try the next level up
.0100f4	69 00 02	adc #$0200			adc 	#1 << 9
.0100f7	e8		inx				inx 								; calculate the RHS at the next stack level.
.0100f8	e8		inx				inx
.0100f9	20 9b 00	jsr $01009b			jsr 	EvaluateLevel
.0100fc	ca		dex				dex
.0100fd	ca		dex				dex
.0100fe	7a		ply				ply 								; get operator token back into Y
.0100ff					_ELExecuteY:
.0100ff	98		tya				tya
.010100	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010103	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010104	9b		txy				txy 								; save X in Y
.010105	aa		tax				tax 								; double keyword ID in X
.010106	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01010a	bb		tyx				tyx 								; restore X.
.01010b	8f 10 01 01	sta $010110			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01010f					_ELCallRoutine:
.01010f	20 0f 01	jsr $01010f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010112	80 c0		bra $0100d4			bra 	_ELGotAtom 					; go round operator level again.
.010114	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010116	0a		asl a				asl 	a
.010117	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010119	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01011b	60		rts				rts
.01011c					_ELVariable:
.01011c	20 d9 01	jsr $0101d9			jsr 	VariableFindCreate 			; this will be 'find variable, create if required', get value.
.01011f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010121	94 10		sty $10,x			sty 	EXSValueH+0,x
.010123	80 af		bra $0100d4			bra 	_ELGotAtom
.010125					_ELSyntax
.010125	82 f1 00	brl $010219			brl 	SyntaxError
.010128					_ELStringConstant:
.010128	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01012b	f0 f8		beq $010125			beq 	_ELSyntax
.01012d	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01012f	1a		inc a				inc 	a
.010130	1a		inc a				inc 	a
.010131	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010133	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010135	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010137	18		clc				clc 								; add to string constant.
.010138	65 06		adc $06				adc 	DCodePtr
.01013a	85 06		sta $06				sta 	DCodePtr
.01013c	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01013e	09 00 80	ora #$8000			ora 	#$8000
.010141	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010143	80 8f		bra $0100d4			bra 	_ELGotAtom
.010145					_ELUnaryKeyword:
.010145	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010147	a8		tay				tay 								; put the token in Y.
.010148	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01014a	e6 06		inc $06				inc 	DCodePtr
.01014c	29 00 1e	and #$1e00			and 	#$1E00 						; mask out the keyword type.
.01014f	c9 00 10	cmp #$1000			cmp 	#$1000 						; if it is xxx1 000x then it's a unary function
.010152	f0 ab		beq $0100ff			beq 	_ELExecuteY					; go back and execute it
.010154	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.010157	d0 11		bne $01016a			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010159	20 90 01	jsr $010190			jsr 	EvaluateNext 				; evaluate the expression
.01015c	20 43 02	jsr $010243			jsr 	ExpectRightBracket 			; consume the right bracket.
.01015f					_ELCopy:
.01015f	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010161	95 00		sta $00,x			sta 	EXSValueL+0,x
.010163	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010165	95 10		sta $10,x			sta 	EXSValueH+0,x
.010167	82 6a ff	brl $0100d4			brl 	_ELGotAtom 					; and continue.
.01016a					_ELUnaryOperator:
.01016a	5a		phy				phy 								; save the operator on the stack.
.01016b	e8		inx				inx 								; this is like evaluate next
.01016c	e8		inx				inx
.01016d	a9 00 0e	lda #$0e00			lda 	#7<<9 						; except we use a very high precedence to make it atomic
.010170	20 9b 00	jsr $01009b			jsr 	EvaluateLevel
.010173	ca		dex				dex 								; unwind the stack.
.010174	ca		dex				dex
.010175	68		pla				pla 								; restore the unary operator.
.010176	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010179	f0 03		beq $01017e			beq 	_ELMinus
.01017b	4c 19 02	jmp $010219			jmp 	SyntaxError
.01017e					_ELMinus:
.01017e	38		sec				sec 								; do the negation calculation.
.01017f	a9 00 00	lda #$0000			lda 	#0
.010182	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010184	95 00		sta $00,x			sta 	EXSValueL+0,x
.010186	a9 00 00	lda #$0000			lda 	#0
.010189	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01018b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01018d	82 44 ff	brl $0100d4			brl 	_ELGotAtom					; and continue.
.010190					EvaluateNext:
.010190	e8		inx				inx
.010191	e8		inx				inx
.010192	a9 00 00	lda #$0000			lda 	#0<<9
.010195	20 9b 00	jsr $01009b			jsr 	EvaluateLevel
.010198	ca		dex				dex
.010199	ca		dex				dex
.01019a	60		rts				rts
.01019b					EvaluateInteger:
.01019b	20 95 00	jsr $010095			jsr 	Evaluate
.01019e	b0 01		bcs $0101a1			bcs 	EIType
.0101a0	60		rts				rts
.0101a1					EIType:
.0101a1	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>0101a4	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101ac	78 70 65 63 74 65 64 00
.0101b4					EvaluateNextInteger:
.0101b4	20 90 01	jsr $010190			jsr 	EvaluateNext
.0101b7	b0 e8		bcs $0101a1			bcs 	EIType
.0101b9	60		rts				rts
.0101ba					EvaluateString:
.0101ba	20 95 00	jsr $010095			jsr 	Evaluate
.0101bd	90 01		bcc $0101c0			bcc 	ESType
.0101bf	60		rts				rts
.0101c0					ESType:
.0101c0	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>0101c3	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101cb	78 70 65 63 74 65 64 00
.0101d3					EvaluateNextString:
.0101d3	20 90 01	jsr $010190			jsr 	EvaluateNext
.0101d6	90 e8		bcc $0101c0			bcc 	ESType
.0101d8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101d9					VariableFindCreate:
.0101d9	20 e5 01	jsr $0101e5			jsr 	VariableFind
.0101dc	b0 06		bcs $0101e4			bcs 	_VFCFound
.0101de	a9 0a 00	lda #$000a			lda 	#10 						; if creating an array, then max subscript is 10
.0101e1	20 02 02	jsr $010202			jsr 	VariableCreate
.0101e4					_VFCFound:
.0101e4	60		rts				rts
.0101e5					VariableFind:
.0101e5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0101e7	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0101ea	90 02		bcc $0101ee			bcc 	_VFCError
.0101ec	38		sec				sec
.0101ed	60		rts				rts
.0101ee					_VFCError:
.0101ee	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>0101f1	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0101f9	76 61 72 69 61 62 6c 65 00
.010202					VariableCreate:
.010202	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010203					ErrorHandler:
.010203	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010205	ea		nop				nop
.010206	80 fe		bra $010206	_EH1:	bra 	_EH1
.010208					IllegalToken:
.010208	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>01020b	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010213	54 6f 6b 65 6e 00
.010219					SyntaxError:
.010219	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>01021c	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010224	72 72 6f 72 00
.010229					ExpectToken:
.010229	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01022b	d0 05		bne $010232			bne 	_CTKError					; error if not
.01022d	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01022f	e6 06		inc $06				inc 	DCodePtr
.010231	60		rts				rts
.010232					_CTKError:
.010232	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>010235	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01023d	74 6f 6b 65 6e 00
.010243					ExpectRightBracket:
.010243	48		pha				pha
.010244	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010247	20 29 02	jsr $010229			jsr 	ExpectToken
.01024a	68		pla				pla
.01024b	60		rts				rts
.01024c					ExpectComma:
.01024c	48		pha				pha
.01024d	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010250	20 29 02	jsr $010229			jsr 	ExpectToken
.010253	68		pla				pla
.010254	60		rts				rts
.010255					CheckBothNumeric:
.010255	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010257	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010259	30 01		bmi $01025c			bmi 	_CBNFail 					; need to both be zero in bit 15
.01025b	60		rts				rts
.01025c					_CBNFail:
.01025c	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>01025f	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010267	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010275					ResetTypeInteger:
.010275	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010277	29 ff 7f	and #$7fff			and 	#$7FFF
.01027a	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01027c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.01027d					StringTempAllocate:
.01027d	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010280	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010283	18		clc				clc 								; this adds one, for the length.
.010284	65 16		adc $16				adc 	DTempStringPointer
.010286	85 16		sta $16				sta 	DTempStringPointer
.010288	48		pha				pha
.010289	a9 00 00	lda #$0000			lda 	#$0000
.01028c	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01028e	92 16		sta ($16)			sta		(DTempStringPointer)
.010290	c2 20		rep #$20			rep 	#$20
.010292	68		pla				pla
.010293	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010295	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010297	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010299	60		rts				rts
.01029a					StringCreateCopy:
.01029a	a8		tay				tay 								; put pointer to string in Y
.01029b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01029e	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0102a1	f0 17		beq $0102ba			beq 	_SCCExit 					; do nothing if length zero.
.0102a3	da		phx				phx 								; save X and put the character count in X
.0102a4	aa		tax				tax
.0102a5	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0102a7					_SCCCopy:
.0102a7	c8		iny				iny 								; advance and read (first time skips length)
.0102a8	b9 00 00	lda $0000,y			lda 	$0000,y
.0102ab	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0102ad	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0102af	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0102b1	1a		inc a				inc 	a
.0102b2	92 18		sta ($18)			sta 	(DStartTempString)
.0102b4	ca		dex				dex 								; do X times
.0102b5	d0 f0		bne $0102a7			bne 	_SCCCopy
.0102b7	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0102b9	fa		plx				plx
.0102ba					_SCCExit:
.0102ba	60		rts				rts
.0102bb					StringMakeConcrete:
.0102bb	85 08		sta $08				sta 	DTemp1 						; source
.0102bd	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0102bf	29 ff 00	and #$00ff			and 	#$00FF
.0102c2	48		pha				pha 								; save on stack.
.0102c3	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0102c6	18		clc				clc
.0102c7	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0102ca	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0102cc	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0102ce	85 0c		sta $0c				sta 	DTemp2 						; target
.0102d0	7a		ply				ply 								; get length copy from here until Y goes -ve
.0102d1	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0102d3					_SMCLoop:
.0102d3	b1 08		lda ($08),y			lda 	(DTemp1),y
.0102d5	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0102d7	88		dey				dey
.0102d8	10 f9		bpl $0102d3			bpl 	_SMCLoop
.0102da	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0102dc	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0102de	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0102df					Binary_Add:
.0102df	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0102e1	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0102e3	30 12		bmi $0102f7		bmi 	_BATypeError
.0102e5	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0102e7	30 3f		bmi $010328		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0102e9	18		clc			clc
.0102ea	b5 00		lda $00,x		lda		EXSValueL+0,x
.0102ec	75 02		adc $02,x		adc 	EXSValueL+2,x
.0102ee	95 00		sta $00,x		sta 	EXSValueL+0,x
.0102f0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0102f2	75 12		adc $12,x		adc 	EXSValueH+2,x
.0102f4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0102f6	60		rts			rts
.0102f7					_BATypeError:
.0102f7	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>0102fa	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010302	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010312	65 73 00
.010315					_BALengthError:
.010315	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>010318	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010320	6f 6f 20 6c 6f 6e 67 00
.010328					_BAConcatenateString:
.010328	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01032a	85 08		sta $08			sta 	DTemp1
.01032c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01032e	85 0c		sta $0c			sta 	DTemp2
.010330	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010332	18		clc			clc 										; work out the total length
.010333	b2 08		lda ($08)		lda 	(DTemp1)
.010335	72 0c		adc ($0c)		adc 	(DTemp2)
.010337	b0 14		bcs $01034d		bcs 	_BAConcatLengthError 				; string is too long.
.010339	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01033b	20 7d 02	jsr $01027d		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.01033e	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010340	74 10		stz $10,x		stz 	EXSValueH+0,x
.010342	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010344	20 9a 02	jsr $01029a		jsr 	StringCreateCopy
.010347	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010349	20 9a 02	jsr $01029a		jsr 	StringCreateCopy
.01034c	60		rts			rts
.01034d					_BAConcatLengthError:
.01034d	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>010350	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010358	6f 6f 20 6c 6f 6e 67 00
.010360					Binary_Subtract:
.010360	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.010363	38		sec			sec
.010364	b5 00		lda $00,x		lda		EXSValueL+0,x
.010366	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010368	95 00		sta $00,x		sta 	EXSValueL+0,x
.01036a	b5 10		lda $10,x		lda		EXSValueH+0,x
.01036c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01036e	95 10		sta $10,x		sta 	EXSValueH+0,x
.010370	60		rts			rts
.010371					Binary_ShiftRight:
.010371	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.010374	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010376	29 3f 00	and #$003f		and 	#63
.010379	f0 07		beq $010382		beq		_Binary_SRExit
.01037b					_Binary_SRLoop:
.01037b	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01037d	76 00		ror $00,x		ror 	EXSValueL+0,x
.01037f	3a		dec a			dec 	a
.010380	d0 f9		bne $01037b		bne 	_Binary_SRLoop
.010382					_Binary_SRExit:
.010382	60		rts			rts
.010383					Binary_ShiftLeft:
.010383	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.010386	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010388	29 3f 00	and #$003f		and 	#63
.01038b	f0 07		beq $010394		beq		_Binary_SLExit
.01038d					_Binary_SLLoop:
.01038d	16 00		asl $00,x		asl 	EXSValueL+0,x
.01038f	36 10		rol $10,x		rol 	EXSValueH+0,x
.010391	3a		dec a			dec 	a
.010392	d0 f9		bne $01038d		bne 	_Binary_SLLoop
.010394					_Binary_SLExit:
.010394	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010395					Binary_And:
.010395	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.010398	b5 00		lda $00,x		lda		EXSValueL+0,x
.01039a	35 02		and $02,x		and 	EXSValueL+2,x
.01039c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01039e	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103a0	35 12		and $12,x		and 	EXSValueH+2,x
.0103a2	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103a4	60		rts			rts
.0103a5					Binary_Or:
.0103a5	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.0103a8	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103aa	15 02		ora $02,x		ora 	EXSValueL+2,x
.0103ac	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103ae	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103b0	15 12		ora $12,x		ora 	EXSValueH+2,x
.0103b2	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103b4	60		rts			rts
.0103b5					Binary_Xor:
.0103b5	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.0103b8	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103ba	55 02		eor $02,x		eor 	EXSValueL+2,x
.0103bc	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103be	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103c0	55 12		eor $12,x		eor 	EXSValueH+2,x
.0103c2	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103c4	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0103c5					Binary_Equals:
.0103c5	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0103c8	b0 0e		bcs $0103d8		bcs 	_BEString
.0103ca	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0103cc	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0103ce	d0 4f		bne $01041f		bne 	Compare_Fail
.0103d0	b5 10		lda $10,x		lda 	EXSValueH,x
.0103d2	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0103d4	d0 49		bne $01041f		bne 	Compare_Fail
.0103d6	80 3f		bra $010417		bra 	Compare_Succeed
.0103d8					_BEString:
.0103d8	09 00 00	ora #$0000		ora 	#$0000
.0103db	f0 3a		beq $010417		beq 	Compare_Succeed
.0103dd	80 40		bra $01041f		bra 	Compare_Fail
.0103df					Binary_NotEquals:
.0103df	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0103e2	b0 0e		bcs $0103f2		bcs 	_BNEString
.0103e4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0103e6	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0103e8	d0 2d		bne $010417		bne 	Compare_Succeed
.0103ea	b5 10		lda $10,x		lda 	EXSValueH,x
.0103ec	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0103ee	d0 27		bne $010417		bne 	Compare_Succeed
.0103f0	80 2d		bra $01041f		bra 	Compare_Fail
.0103f2					_BNEString:
.0103f2	09 00 00	ora #$0000		ora 	#$0000
.0103f5	d0 20		bne $010417		bne 	Compare_Succeed
.0103f7	80 26		bra $01041f		bra 	Compare_Fail
.0103f9					Binary_Less:
.0103f9	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0103fc	b0 12		bcs $010410		bcs 	_BLString
.0103fe	38		sec			sec
.0103ff	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010401	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010403	b5 10		lda $10,x		lda 	EXSValueH,x
.010405	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010407	50 03		bvc $01040c		bvc 	*+5
.010409	49 00 80	eor #$8000		eor 	#$8000
.01040c	30 09		bmi $010417		bmi 	Compare_Succeed
.01040e	80 0f		bra $01041f		bra 	Compare_Fail
.010410					_BLString:
.010410	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010413	f0 02		beq $010417		beq 	Compare_Succeed
.010415	80 08		bra $01041f		bra 	Compare_Fail
.010417					Compare_Succeed:
.010417	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01041a	95 00		sta $00,x		sta 	EXSValueL,x
.01041c	95 10		sta $10,x		sta 	EXSValueH,x
.01041e	60		rts			rts
.01041f					Compare_Fail:
.01041f	74 00		stz $00,x		stz 	EXSValueL,x
.010421	74 10		stz $10,x		stz 	EXSValueH,x
.010423	60		rts			rts
.010424					Binary_GreaterEqual:
.010424	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010427	b0 12		bcs $01043b		bcs 	_BGEString
.010429	38		sec			sec
.01042a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01042c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01042e	b5 10		lda $10,x		lda 	EXSValueH,x
.010430	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010432	50 03		bvc $010437		bvc 	*+5
.010434	49 00 80	eor #$8000		eor 	#$8000
.010437	10 de		bpl $010417		bpl 	Compare_Succeed
.010439	80 e4		bra $01041f		bra 	Compare_Fail
.01043b					_BGEString:
.01043b	09 00 00	ora #$0000		ora 	#$0000
.01043e	10 d7		bpl $010417		bpl 	Compare_Succeed
.010440	80 dd		bra $01041f		bra 	Compare_Fail
.010442					Binary_LessEqual:
.010442	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010445	b0 12		bcs $010459		bcs 	_BLEString
.010447	18		clc			clc 									; numeric <= signed
.010448	b5 00		lda $00,x		lda 	EXSValueL,x
.01044a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01044c	b5 10		lda $10,x		lda 	EXSValueH,x
.01044e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010450	50 03		bvc $010455		bvc 	*+5
.010452	49 00 80	eor #$8000		eor 	#$8000
.010455	30 c0		bmi $010417		bmi 	Compare_Succeed
.010457	80 c6		bra $01041f		bra 	Compare_Fail
.010459					_BLEString:
.010459	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01045c	d0 b9		bne $010417		bne 	Compare_Succeed
.01045e	80 bf		bra $01041f		bra 	Compare_Fail
.010460					Binary_Greater:
.010460	20 7e 04	jsr $01047e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010463	b0 12		bcs $010477		bcs 	_BGString
.010465	18		clc			clc 									; numeric > signed
.010466	b5 00		lda $00,x		lda 	EXSValueL,x
.010468	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01046a	b5 10		lda $10,x		lda 	EXSValueH,x
.01046c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01046e	50 03		bvc $010473		bvc 	*+5
.010470	49 00 80	eor #$8000		eor 	#$8000
.010473	10 a2		bpl $010417		bpl 	Compare_Succeed
.010475	80 a8		bra $01041f		bra 	Compare_Fail
.010477					_BGString:
.010477	c9 01 00	cmp #$0001		cmp 	#$0001
.01047a	f0 9b		beq $010417		beq 	Compare_Succeed
.01047c	80 a1		bra $01041f		bra 	Compare_Fail
.01047e					CompareTypeCheck:
.01047e	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010480	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010482	30 06		bmi $01048a		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010484	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010486	30 1c		bmi $0104a4		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010488	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010489	60		rts			rts
.01048a					_CTCFail:
.01048a	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>01048d	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010495	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0104a4					_CTCStringCompare:
.0104a4	20 75 02	jsr $010275		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0104a7	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0104a9	85 08		sta $08			sta 	DTemp1
.0104ab	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0104ad	85 0c		sta $0c			sta 	DTemp2
.0104af	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0104b2	a8		tay			tay
.0104b3	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0104b5	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0104b7	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0104b9	90 02		bcc $0104bd		bcc 	_CTCSmallest
.0104bb	b2 0c		lda ($0c)		lda 	(DTemp2)
.0104bd					_CTCSmallest:
.0104bd	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0104bf					_CTCCompare:
.0104bf	c8		iny			iny 									; look at next character (done first, first char is size)
.0104c0	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0104c2	30 16		bmi $0104da		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0104c4	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0104c6	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0104c8	f0 f5		beq $0104bf		beq 	_CTCCompare 					; if zero, try the next character.
.0104ca	b0 07		bcs $0104d3		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0104cc					_CTCLess:
.0104cc	c2 20		rep #$20		rep 	#$20
.0104ce	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0104d1	80 14		bra $0104e7		bra 	_CTCExit
.0104d3					_CTCGreater:
.0104d3	c2 20		rep #$20		rep 	#$20
.0104d5	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0104d8	80 0d		bra $0104e7		bra 	_CTCExit
.0104da					_CTCEqualSoFar:
.0104da	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0104dc	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0104de	90 ec		bcc $0104cc		bcc 	_CTCLess
.0104e0	d0 f1		bne $0104d3		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0104e2	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0104e4	a9 00 00	lda #$0000		lda 	#$0000
.0104e7					_CTCExit:
.0104e7	38		sec			sec 									; return with CS indicating string comparison.
.0104e8	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0104e9					Binary_Divide:
.0104e9	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.0104ec	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0104ee	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0104f0	d0 14		bne $010506		bne 	_BinaryDivide_Ok
.0104f2	20 03 02	jsr $010203			jsr 	ErrorHandler 						; call error routine
>0104f5	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0104fd	20 62 79 20 7a 65 72 6f 00
.010506					_BinaryDivide_Ok:
.010506	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010508	64 0a		stz $0a			stz 	DTemp1+2
.01050a	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01050c	5a		phy			phy 										; save Y (bit counter)
.01050d	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01050f	10 07		bpl $010518		bpl 	_BinaryDivide_RightDone
.010511	e8		inx			inx
.010512	e8		inx			inx
.010513	20 4e 05	jsr $01054e		jsr 	Binary_DivNegate
.010516	ca		dex			dex
.010517	ca		dex			dex
.010518					_BinaryDivide_RightDone:
.010518	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01051a	10 03		bpl $01051f		bpl 	_BinaryDivide_LeftDone
.01051c	20 4e 05	jsr $01054e		jsr 	Binary_DivNegate
.01051f					_BinaryDivide_LeftDone:
.01051f	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010522					_BinaryDivide_Loop:
.010522	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010524	36 10		rol $10,x		rol 	EXSValueH+0,x
.010526	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010528	26 0a		rol $0a			rol 	DTemp1+2
.01052a	38		sec			sec											; calculate A-M
.01052b	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01052d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01052f	85 0c		sta $0c			sta 	DTemp2
.010531	a5 0a		lda $0a			lda 	DTemp1+2
.010533	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010535	90 08		bcc $01053f		bcc 	_Binary_NoSubract 					; if A < M skip this
.010537	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010539	a5 0c		lda $0c			lda 	DTemp2
.01053b	85 08		sta $08			sta 	DTemp1+0
.01053d	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01053f					_Binary_NoSubract:
.01053f	88		dey			dey 										; do it 32 times.
.010540	d0 e0		bne $010522		bne 	_BinaryDivide_Loop
.010542					_BinaryDivide_Exit:
.010542	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010544	29 01 00	and #$0001		and 	#1
.010547	f0 03		beq $01054c		beq 	_BinaryDivide_Exit2
.010549	20 4e 05	jsr $01054e		jsr 	Binary_DivNegate
.01054c					_BinaryDivide_Exit2:
.01054c	7a		ply			ply 										; restore Y
.01054d	60		rts			rts
.01054e					Binary_DivNegate:
.01054e	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010550	38		sec			sec 										; negate the value at stack X.
.010551	a9 00 00	lda #$0000		lda 	#$0000
.010554	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010556	95 00		sta $00,x		sta 	EXSValueL+0,x
.010558	a9 00 00	lda #$0000		lda 	#$0000
.01055b	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01055d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01055f	60		rts			rts
.010560					Binary_Modulus:
.010560	20 e9 04	jsr $0104e9		jsr 	Binary_Divide 						; do the divide
.010563	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010565	95 00		sta $00,x		sta 	EXSValueL+0,x
.010567	a5 0a		lda $0a			lda 	DTemp1+2
.010569	95 10		sta $10,x		sta 	EXSValueH+0,x
.01056b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01056c					Binary_Multiply:
.01056c	20 55 02	jsr $010255		jsr 	CheckBothNumeric 					; check both values are numeric
.01056f	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010571	85 08		sta $08			sta 	DTemp1
.010573	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010575	85 0a		sta $0a			sta		DTemp1+2
.010577	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010579	74 10		stz $10,x		stz 	EXSValueH+0,x
.01057b					_BinaryMultiply_Loop:
.01057b	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01057d	05 0a		ora $0a			ora 	DTemp1+2
.01057f	f0 1e		beq $01059f		beq 	_BinaryMultiply_Exit
.010581	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010583	29 01 00	and #$0001		and 	#1
.010586	f0 0d		beq $010595		beq 	_BinaryMultiply_NoAdd
.010588	18		clc			clc 										; add multiplicand to result.
.010589	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01058b	75 02		adc $02,x		adc 	EXSValueL+2,x
.01058d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01058f	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010591	75 12		adc $12,x		adc 	EXSValueH+2,x
.010593	95 10		sta $10,x		sta 	EXSValueH+0,x
.010595					_BinaryMultiply_NoAdd:
.010595	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010597	66 08		ror $08			ror 	DTemp1
.010599	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01059b	36 12		rol $12,x		rol 	EXSValueH+2,x
.01059d	80 dc		bra $01057b		bra 	_BinaryMultiply_Loop 				; go round again.
.01059f					_BinaryMultiply_Exit:
.01059f	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0105a0					Function_Len:
.0105a0	20 75 02	jsr $010275			jsr 	ResetTypeInteger 			; returns an integer
.0105a3	20 d3 01	jsr $0101d3			jsr 	EvaluateNextString 			; get the value you are absoluting
.0105a6	20 43 02	jsr $010243			jsr 	ExpectRightBracket 			; check )
.0105a9	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0105ab	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0105ae	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0105b1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0105b3	74 10		stz $10,x			stz 	EXSValueH+0,x
.0105b5	60		rts				rts
.0105b6					Function_Abs:
.0105b6	20 75 02	jsr $010275			jsr 	ResetTypeInteger 			; returns an integer
.0105b9	20 b4 01	jsr $0101b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0105bc	20 43 02	jsr $010243			jsr 	ExpectRightBracket 			; check )
.0105bf	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0105c1	30 07		bmi $0105ca			bmi 	_FAbsNegative 				; negate it if negative
.0105c3	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0105c5	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0105c7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0105c9	60		rts				rts
.0105ca					_FAbsNegative:
.0105ca	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0105cb	a9 00 00	lda #$0000			lda 	#0
.0105ce	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0105d0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0105d2	a9 00 00	lda #$0000			lda 	#0
.0105d5	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0105d7	95 10		sta $10,x			sta 	EXSValueH+0,x
.0105d9	60		rts				rts
.0105da					Function_Sgn:
.0105da	20 75 02	jsr $010275			jsr 	ResetTypeInteger 			; returns integer
.0105dd	20 b4 01	jsr $0101b4			jsr 	EvaluateNextInteger 		; get an integer
.0105e0	20 43 02	jsr $010243			jsr 	ExpectRightBracket 			; check )
.0105e3	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0105e5	74 10		stz $10,x			stz 	EXSValueH+0,x
.0105e7	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0105e9	30 07		bmi $0105f2			bmi 	_FSgnNegative 				; set to -1 if signed
.0105eb	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0105ed	f0 02		beq $0105f1			beq 	_FSgnExit
.0105ef	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0105f1					_FSgnExit:
.0105f1	60		rts				rts
.0105f2					_FSgnNegative:
.0105f2	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0105f5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0105f7	95 10		sta $10,x			sta 	EXSValueH+0,x
.0105f9	60		rts				rts
.0105fa					Function_Random:
.0105fa	20 75 02	jsr $010275			jsr 	ResetTypeInteger
.0105fd	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0105ff	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010601	d0 0a		bne $01060d			bne 	_Rnd_NotZero
.010603	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010606	85 10		sta $10				sta 	DRandom
.010608	a9 ea 00	lda #$00ea			lda 	#$EA
.01060b	85 12		sta $12				sta 	DRandom+2
.01060d					_Rnd_NotZero:
.01060d	20 18 06	jsr $010618			jsr 	_Rnd_Process 				; call randomiser twice
.010610	95 10		sta $10,x			sta 	EXSValueH+0,x
.010612	20 18 06	jsr $010618			jsr 	_Rnd_Process
.010615	95 00		sta $00,x			sta 	EXSValueL+0,x
.010617	60		rts				rts
.010618					_Rnd_Process:
.010618	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01061a	26 12		rol $12				rol 	DRandom+2
.01061c	90 0e		bcc $01062c			bcc 	_Rnd_Exit
.01061e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010620	49 54 d4	eor #$d454			eor 	#$D454
.010623	85 10		sta $10				sta 	DRandom
.010625	a5 12		lda $12				lda 	DRandom+2
.010627	49 d5 55	eor #$55d5			eor 	#$55D5
.01062a	85 12		sta $12				sta 	DRandom+2
.01062c					_Rnd_Exit:
.01062c	a5 10		lda $10				lda 	DRandom
.01062e	45 12		eor $12				eor 	DRandom+2
.010630	60		rts				rts

;******  Return to file: ../source/basic.asm

.010631					SwitchBasicInstance:
.010631	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010633	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010636	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010638	86 02		stx $02				stx		DBaseAddress
.01063a	84 04		sty $04				sty 	DHighAddress
.01063c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01063d	48		pha				pha 										; then copy it into B.
.01063e	ab		plb				plb
.01063f	ab		plb				plb
.010640	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 				; initialise temporary string below upper area
.010643	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; with enough memory to concrete a string above.
.010645	38		sec				sec
.010646	e9 00 01	sbc #$0100			sbc 	#256
.010649	85 16		sta $16				sta 	DTempStringPointer
.01064b	a9 04 41	lda #$4104			lda 	#$4104
.01064e	85 06		sta $06				sta 	DCodePtr
.010650	ea		nop				nop
.010651	20 95 00	jsr $010095			jsr 	Evaluate
.010654	ea		nop				nop
.010655	02 02		cop #$02			cop 	#2

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	62 41 d4 bf 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 4 times (64 bytes)...
>024068	00 00 00 00 00 00 00 00 00 00 00 00 2a 00 00 00
>024078	00 00 00 00 00 00 00 00 00 00 36 41 00 00 00 00
>024088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024098	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 41
>0240b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240d8	00 00 00 00 00 00 3e 41 00 00 00 00 00 00 00 00
>0240e8	00 00 00 00 00 00 56 41 00 00 00 00 00 00 00 00
>0240f8	00 00 00 00 00 00 00 00 28 00 0a 80 18 32 18 32
>024108	02 80 0a 24 03 80 19 32 0c 26 18 32 04 80 0a 24
>024118	05 80 19 32 0c 26 02 80 19 32 0a 24 01 80 00 00
>024128	00 00 ee ee ee ee 00 00 fe bf d6 ff ff ff 2e 41
>024138	fa bf ba 01 00 00 00 00 f8 bf f2 bf 00 00 ea bf
>024148	02 00 04 00 00 00 05 00 00 00 08 00 00 00 00 00
>024158	e2 bf 02 00 e0 bf da bf d4 bf 00 00 00 00 00 00
>024168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2021 times (32336 bytes)...
>02bfc8	00 00 00 00 00 00 00 00 00 00 00 00 05 63 68 69
>02bfd8	70 73 04 6c 69 6b 65 00 01 49 97 fb 3f f8 3c fb
>02bfe8	1b f0 2b db 3f d8 05 dd 1d d0 05 48 65 6c 6c 6f
>02bff8	ff e4 41 cc 1d c0 41 c4
.02c000					CodeEndSpace:

;******  End of listing
