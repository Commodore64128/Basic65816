
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 21 10:02:44 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 6a 1e 01	jmp $011e6a			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	a9 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	0a 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	1a 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	2a 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	6e 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d5 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	3a 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	b7 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	99 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	54 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	54 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d5 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e1 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	5e 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d5 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	e6 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	f8 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	6f 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	4f 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	2b 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	15 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	97 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	b7 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	a9 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e1 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	15 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	4b 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	65 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	7c 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	20 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	de 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	5f 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	f6 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	88 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	77 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	51 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	a9 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	a9 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	a9 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	a9 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	a9 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	a9 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	a9 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	a9 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	cc 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	62 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	ad 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	08 1b					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	0b 1b					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	9a 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	96 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	f3 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	c8 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	94 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	96 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	f5 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	11 1a					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	53 19					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	47 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	67 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	7f 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	93 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	5c 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	e3 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	87 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	e6 12					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	99 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	43 1a					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	a1 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	e0 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	1c 18					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	a9 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	d8 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	5a 1a					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	a9 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	75 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	97 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	5d 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 24 03	brl $0105ba			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c ba 05	jmp $0105ba			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 31		bcc $010382			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 0d 04	jsr $01040d			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	f0 0a		beq $010373			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010369	18		clc				clc 								; returning a number, read high data word
.01036a	a0 02 00	ldy #$0002			ldy 	#2
.01036d	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01036f	a8		tay				tay 								; put A into Y (this is the high byte)
.010370	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010372	60		rts				rts
.010373					_VANIsString:
.010373	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.010378	d0 06		bne $010380			bne 	_VANNotEmptyString
.01037a	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.01037d	18		clc				clc
.01037e	65 02		adc $02				adc 	DBaseAddress
.010380					_VANNotEmptyString:
.010380	38		sec				sec
.010381	60		rts				rts
.010382					_VANError:
.010382	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010385	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01038d	20 75 6e 6b 6e 6f 77 6e 00
.010396					VariableFind:
.010396	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010398	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01039b	90 5c		bcc $0103f9			bcc 	_VFError
.01039d	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a0	b0 11		bcs $0103b3			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a2	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103a5	3a		dec a				dec 	a 							; now 0-25
.0103a6	0a		asl a				asl 	a 							; x 4 and clear carry
.0103a7	0a		asl a				asl 	a
.0103a8	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103ab	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103ad	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103af	e6 06		inc $06				inc 	DCodePtr
.0103b1	38		sec				sec 								; return with carry set.
.0103b2	60		rts				rts
.0103b3					_VFSlowVariable:
.0103b3	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103b5	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103b8	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103b9	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103ba	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103bd	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103bf	85 08		sta $08				sta 	DTemp1
.0103c1	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c3	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103c6	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103c7	65 08		adc $08				adc 	DTemp1
.0103c9	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103cb	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103cd					_VFNext:
.0103cd	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103cf	f0 26		beq $0103f7			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d1	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d3	a8		tay				tay 								; read the address of the name at $0002,y
.0103d4	b9 02 00	lda $0002,y			lda 	$0002,y
.0103d7	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103d9	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103dc					_VFCompare:
.0103dc	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103de	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e0	d0 eb		bne $0103cd			bne 	_VFNext 					; if not, go to the next one.
.0103e2	c8		iny				iny 								; advance token pointer
.0103e3	c8		iny				iny
.0103e4	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103e7	d0 f3		bne $0103dc			bne 	_VFCompare
.0103e9	98		tya				tya 								; this is the length of the word.
.0103ea	18		clc				clc 								; so we add it to the code pointer
.0103eb	65 06		adc $06				adc 	DCodePtr
.0103ed	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103ef	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f1	18		clc				clc 								; four on is the actual data
.0103f2	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103f5	38		sec				sec 								; return with CS indicating success
.0103f6	60		rts				rts
.0103f7					_VFFail:
.0103f7	18		clc				clc
.0103f8	60		rts				rts
.0103f9					_VFError:
.0103f9	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0103fc	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010404	76 61 72 69 61 62 6c 65 00
.01040d					VariableSubscript:
.01040d	48		pha				pha		 							; save variable address on stack.
.01040e	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.010411	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; skip right bracket.
.010414	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010417	d0 10		bne $010429			bne 	_VANSubscript
.010419	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01041b	f0 02		beq $01041f			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01041d	b0 0a		bcs $010429			bcs 	_VANSubscript
.01041f					_VANSubOkay:
.01041f	0a		asl a				asl 	a 							; double lsword
.010420	0a		asl a				asl 	a 							; and again, also clears carry.
.010421	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010423	68		pla				pla 								; restore DVariablePtr
.010424	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010425	1a		inc a				inc 	a
.010426	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010428	60		rts				rts
.010429					_VANSubscript:
.010429	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>01042c	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010434	79 20 53 75 62 73 63 72 69 70 74 00
.010440					VariableCreate:
.010440	48		pha				pha 								; save count.
.010441	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010442	0a		asl a				asl 	a 							; 2 x # items.
.010443	0a		asl a				asl 	a 							; 4 x # items.
.010444					_VCNotSingle:
.010444	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010446	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010449	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01044c	f0 04		beq $010452			beq 	_VCNotArray
.01044e	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010450	e6 08		inc $08				inc 	DTemp1
.010452					_VCNotArray:
.010452	5a		phy				phy 								; save address of first token on stack.
.010453	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010456	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010458	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045a	18		clc				clc 								; add 4 for link and name words
.01045b	69 04 00	adc #$0004			adc 	#4
.01045e	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010460	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010462	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010464					_VCErase:
.010464	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.010467	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046a	c8		iny				iny
.01046b	c8		iny				iny
.01046c	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01046e	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010470	d0 f2		bne $010464			bne 	_VCErase
.010472	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010474	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010476	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010479	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.01047c	18		clc				clc
.01047d	65 02		adc $02				adc 	DBaseAddress
.01047f	85 08		sta $08				sta 	DTemp1
.010481	68		pla				pla 								; restore the token address
.010482	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010484	b0 03		bcs $010489			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010486	20 9a 04	jsr $01049a			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010489					_VCDontClone:
.010489	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01048c	68		pla				pla 								; restore count and store (if nonzero)
.01048d	f0 03		beq $010492			beq 	_VCNotArray2
.01048f	99 04 00	sta $0004,y			sta 	$0004,y
.010492					_VCNotArray2:
.010492	98		tya				tya 								; update the head link
.010493	92 20		sta ($20)			sta 	(DHashTablePtr)
.010495	18		clc				clc 								; advance pointer to the data bit.
.010496	69 04 00	adc #$0004			adc 	#4
.010499	60		rts				rts 								; and done.
.01049a					VCCloneIdentifier:
.01049a	da		phx				phx 								; save XY
.01049b	5a		phy				phy
.01049c	aa		tax				tax 								; identifier address in Y.
.01049d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a0	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a2	48		pha				pha
.0104a3					_VCCloneLoop:
.0104a3	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a6	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a8	48		pha				pha 								; save on stack
.0104a9	1a		inc a				inc 	a 							; space for one token.
.0104aa	1a		inc a				inc 	a
.0104ab	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104ad	7a		ply				ply 								; address of word in Y
.0104ae	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b1	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b4	e8		inx				inx 								; advance the token pointer
.0104b5	e8		inx				inx
.0104b6	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104b9	d0 e8		bne $0104a3			bne 	_VCCloneLoop
.0104bb	68		pla				pla 								; restore start address
.0104bc	7a		ply				ply 								; and the others
.0104bd	fa		plx				plx
.0104be	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104bf					LineDelete:
.0104bf	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c0	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c2	18		clc				clc
.0104c3	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c6	a8		tay				tay
.0104c7					_LDLoop:
.0104c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104ca	f0 2d		beq $0104f9			beq 	_LDExit						; exit if zero ; line does not exist
.0104cc	8a		txa				txa 								; found a match
.0104cd	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d0	f0 08		beq $0104da			beq		_LDFound
.0104d2	98		tya				tya 								; follow the link.
.0104d3	18		clc				clc
.0104d4	79 00 00	adc $0000,y			adc 	$0000,y
.0104d7	a8		tay				tay
.0104d8	80 ed		bra $0104c7			bra 	_LDLoop
.0104da					_LDFound:
.0104da	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104dc	98		tya				tya 								; follow link to next.
.0104dd	18		clc				clc
.0104de	79 00 00	adc $0000,y			adc 	$0000,y
.0104e1	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e3	20 dd 1b	jsr $011bdd			jsr 	FindCodeEnd 				; find the end of the code.
.0104e6	38		sec				sec
.0104e7	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104e9	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104ea	1a		inc a				inc 	a
.0104eb	aa		tax				tax
.0104ec	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104ef	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f1	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f3	c8		iny				iny
.0104f4	c8		iny				iny
.0104f5	ca		dex				dex
.0104f6	ca		dex				dex
.0104f7	d0 f6		bne $0104ef			bne 	_LDCopy
.0104f9					_LDExit:
.0104f9	60		rts				rts
.0104fa					LineInsert:
.0104fa	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104fc	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.0104fe	a0 00 00	ldy #$0000			ldy 	#0
.010501					_LIFindLength:
.010501	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010503	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010506	f0 10		beq $010518			beq 	_LIFindEnd
.010508	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050b	90 04		bcc $010511			bcc 	_LIQString
.01050d	c8		iny				iny 								; otherwise just skip it.
.01050e	c8		iny				iny
.01050f	80 f0		bra $010501			bra 	_LIFindLength
.010511					_LIQString:
.010511	98		tya				tya 								; skip quoted strings
.010512	18		clc				clc
.010513	71 08		adc ($08),y			adc 	(DTemp1),y
.010515	a8		tay				tay
.010516	80 e9		bra $010501			bra 	_LIFindLength
.010518					_LIFindEnd:
.010518	98		tya				tya 								; the tokens in the line
.010519	18		clc				clc
.01051a	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01051d	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.01051f	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010522	18		clc				clc
.010523	65 02		adc $02				adc 	DBaseAddress
.010525	a8		tay				tay
.010526					_LIFindInsertPoint:
.010526	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010529	f0 0f		beq $01053a			beq		_LIFoundInsertPoint
.01052b	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.01052e	c5 0c		cmp $0c				cmp 	DTemp2
.010530	b0 08		bcs $01053a			bcs 	_LIFoundInsertPoint
.010532	98		tya				tya 								; if < go to the next line.
.010533	18		clc				clc
.010534	79 00 00	adc $0000,y			adc 	$0000,y
.010537	a8		tay				tay
.010538	80 ec		bra $010526			bra 	_LIFindInsertPoint
.01053a					_LIFoundInsertPoint:
.01053a	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053c	20 dd 1b	jsr $011bdd			jsr 	FindCodeEnd 				; get the end of the code.
.01053f	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010541	18		clc				clc
.010542	65 24		adc $24				adc 	DTemp3
.010544	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010546					_LICopyMove:
.010546	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010548	92 34		sta ($34)			sta 	(DTemp4+2)
.01054a	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054c	c5 36		cmp $36				cmp 	DTemp5
.01054e	f0 0a		beq $01055a			beq 	_LICopyMoveOver
.010550	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010552	c6 32		dec $32				dec 	DTemp4
.010554	c6 34		dec $34				dec 	DTemp4+2
.010556	c6 34		dec $34				dec 	DTemp4+2
.010558	80 ec		bra $010546			bra 	_LICopyMove
.01055a					_LICopyMoveOver:
.01055a	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055c	92 36		sta ($36)			sta 	(DTemp5)
.01055e	a0 02 00	ldy #$0002			ldy 	#2
.010561	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010563	91 36		sta ($36),y			sta 	(DTemp5),y
.010565	a0 04 00	ldy #$0004			ldy 	#4
.010568					_LICopyTokens:
.010568	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056a	91 36		sta ($36),y			sta 	(DTemp5),y
.01056c	c8		iny				iny
.01056d	c8		iny				iny
.01056e	e6 08		inc $08				inc 	DTemp1
.010570	e6 08		inc $08				inc 	DTemp1
.010572	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010574	c6 24		dec $24				dec 	DTemp3
.010576	a5 24		lda $24				lda 	DTemp3
.010578	c9 04 00	cmp #$0004			cmp 	#4
.01057b	d0 eb		bne $010568			bne 	_LICopyTokens
.01057d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01057e					ErrorHandler:
.01057e	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010580	fa		plx				plx 								; address of error message -1
.010581	e8		inx				inx 								; error message.
.010582	20 26 06	jsr $010626			jsr 	PrintROMMessage 			; print message in ROM
.010585	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010587	f0 15		beq $01059e			beq 	_EHEndMessage
.010589	a2 a4 05	ldx #$05a4			ldx 	#_EHAt & $FFFF 				; print " at "
.01058c	20 26 06	jsr $010626			jsr 	PrintROMMessage
.01058f	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010591	a0 00 00	ldy #$0000			ldy 	#0
.010594	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010597	20 d2 10	jsr $0110d2			jsr 	ConvertToString 			; convert and print it.
.01059a	a8		tay				tay
.01059b	20 44 06	jsr $010644			jsr 	PrintBASICString
.01059e					_EHEndMessage:
.01059e	20 90 1d	jsr $011d90			jsr 	HWNewLine
.0105a1	4c 94 1e	jmp $011e94			jmp 	NextCommand 				; get next command.
>0105a4	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105a9					IllegalToken:
.0105a9	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0105ac	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b4	54 6f 6b 65 6e 00
.0105ba					SyntaxError:
.0105ba	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0105bd	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c5	72 72 6f 72 00
.0105ca					ExpectToken:
.0105ca	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105cc	d0 05		bne $0105d3			bne 	_CTKError					; error if not
.0105ce	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105d0	e6 06		inc $06				inc 	DCodePtr
.0105d2	60		rts				rts
.0105d3					_CTKError:
.0105d3	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0105d6	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105de	74 6f 6b 65 6e 00
.0105e4					ExpectRightBracket:
.0105e4	48		pha				pha
.0105e5	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105e8	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.0105eb	68		pla				pla
.0105ec	60		rts				rts
.0105ed					ExpectComma:
.0105ed	48		pha				pha
.0105ee	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105f1	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.0105f4	68		pla				pla
.0105f5	60		rts				rts
.0105f6					CheckBothNumeric:
.0105f6	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105f8	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105fa	30 01		bmi $0105fd			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105fc	60		rts				rts
.0105fd					_CBNFail:
.0105fd	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010600	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010608	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010616					ResetTypeInteger:
.010616	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010618	29 ff 7f	and #$7fff			and 	#$7FFF
.01061b	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01061d	60		rts				rts
.01061e					ResetTypeString:
.01061e	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010620	09 00 80	ora #$8000			ora 	#$8000
.010623	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010625	60		rts				rts
.010626					PrintROMMessage:
.010626	48		pha				pha
.010627	da		phx				phx
.010628					_PRMLoop:
.010628	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01062c	29 ff 00	and #$00ff			and 	#$00FF
.01062f	f0 10		beq $010641			beq 	_PRMExit
.010631	c9 0d 00	cmp #$000d			cmp 	#13
.010634	d0 05		bne $01063b			bne 	_PRMChar
.010636	20 90 1d	jsr $011d90			jsr 	HWNewLine
.010639	80 03		bra $01063e			bra 	_PRMNext
.01063b					_PRMChar:
.01063b	20 3f 1d	jsr $011d3f			jsr 	HWPrintChar
.01063e					_PRMNext:
.01063e	e8		inx				inx
.01063f	80 e7		bra $010628			bra 	_PRMLoop
.010641					_PRMExit:
.010641	fa		plx				plx
.010642	68		pla				pla
.010643	60		rts				rts
.010644					PrintBASICString:
.010644	48		pha				pha
.010645	da		phx				phx
.010646	5a		phy				phy
.010647	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01064a	29 ff 00	and #$00ff			and 	#$00FF
.01064d	f0 0b		beq $01065a			beq 	_PBSExit 					; null string
.01064f	aa		tax				tax
.010650					_PBSLoop:
.010650	c8		iny				iny
.010651	b9 00 00	lda $0000,y			lda 	$0000,y
.010654	20 3f 1d	jsr $011d3f			jsr 	HWPrintChar
.010657	ca		dex				dex
.010658	d0 f6		bne $010650			bne 	_PBSLoop
.01065a					_PBSExit:
.01065a	7a		ply				ply
.01065b	fa		plx				plx
.01065c	68		pla				pla
.01065d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.01065e					StringResetPermanent:
.01065e	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010660	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.010661	3a		dec a				dec 	a 							; at the top of memory.
.010662	a8		tay				tay
.010663	48		pha				pha
.010664	a9 00 00	lda #$0000			lda 	#$0000
.010667	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.01066a	68		pla				pla
.01066b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.01066e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010670	60		rts				rts
.010671					StringReassign:
.010671	da		phx				phx 								; save X
.010672	bb		tyx				tyx 								; save the pointer to the current value into X.
.010673	a8		tay				tay 								; put address of the new string in Y
.010674	bd 00 00	lda $0000,x			lda 	@w$0000,x					; address of the old string in A
.010677	20 19 07	jsr $010719			jsr 	StringRelease 				; release the old string
.01067a	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; get length
.01067d	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.010680	d0 03		bne $010685			bne 	_SRAContent
.010682	82 71 00	brl $0106f6			brl 	_SRAEmpty 					; if zero, return empty address.
.010685					_SRAContent:
.010685	5a		phy				phy 								; save the new string address on stack
.010686	7a		ply				ply 								; restore and save the new string address
.010687	5a		phy				phy
.010688	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.01068b	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.01068e	1a		inc a				inc 	a 							; we want one more, for the length byte.
.01068f	85 36		sta $36				sta 	DTemp5 						; the length required is stored in DTemp5.
.010691	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.010694	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010696	a8		tay				tay
.010697					_SRACheckUnused:
.010697	b9 00 00	lda $0000,y			lda 	$0000,y 					; this is the offset/size to the next (actually offset is 2 more)
.01069a	f0 22		beq $0106be			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.01069c	10 0f		bpl $0106ad			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.01069e	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size of this bhunk.
.0106a1	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106a3	90 08		bcc $0106ad			bcc 	_SRACheckNext 				; too small, go and look at the next block.
.0106a5	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with bit 15 cleared.
.0106a8	98		tya				tya 								; A is the address of the link
.0106a9	1a		inc a				inc 	a 							; add 2, to make this the address of the data space associated
.0106aa	1a		inc a				inc 	a 							; with it.
.0106ab	80 26		bra $0106d3			bra 	_SRACopyA 					; go and copy it there.
.0106ad					_SRACheckNext:
.0106ad	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15 out, this is the size of the block.
.0106b0	29 ff 7f	and #$7fff			and 	#$7FFF
.0106b3	85 38		sta $38				sta 	DTemp5+2 					; save it in temporary space.
.0106b5	98		tya				tya 								; add to the offset to the current address
.0106b6	18		clc				clc
.0106b7	65 38		adc $38				adc 	DTemp5+2
.0106b9	1a		inc a				inc 	a 							; add 2 more for the link itself, the link is 2 less than the offset.
.0106ba	1a		inc a				inc 	a
.0106bb	a8		tay				tay 								; put it in Y, go check that one.
.0106bc	80 d9		bra $010697			bra 	_SRACheckUnused
.0106be					_SRAAllocate:
.0106be	7a		ply				ply 								; get the new string address back.
.0106bf	5a		phy				phy 								; push it back on the stack.
.0106c0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106c3	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106c6	1a		inc a				inc 	a
.0106c7	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106c8	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106cb	90 03		bcc $0106d0			bcc 	_SRANoCarry 				; can't do more than this.
.0106cd	a9 ff 00	lda #$00ff			lda 	#255
.0106d0					_SRANoCarry:
.0106d0	20 fe 06	jsr $0106fe			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106d3					_SRACopyA:
.0106d3	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106d6	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106d9	aa		tax				tax 								; where we are copying to.
.0106da	7a		ply				ply 								; where we're coming from.
.0106db	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106de	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106e1	1a		inc a				inc 	a
.0106e2	85 36		sta $36				sta 	DTemp5 						; save counter.
.0106e4	e2 20		sep #$20			sep 	#$20
.0106e6					_SRACopy:
.0106e6	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.0106e9	9d 00 00	sta $0000,x			sta 	@W$0000,x
.0106ec	c8		iny				iny
.0106ed	e8		inx				inx
.0106ee	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.0106f0	d0 f4		bne $0106e6			bne 	_SRACopy
.0106f2	c2 20		rep #$20			rep 	#$20
.0106f4	fa		plx				plx 								; restore X and exit.
.0106f5	60		rts				rts
.0106f6					_SRAEmpty:
.0106f6	9e 00 00	stz $0000,x			stz 	@w$0000,x
.0106f9	9e 02 00	stz $0002,x			stz 	@w$0002,x
.0106fc	fa		plx				plx
.0106fd	60		rts				rts
.0106fe					StringAllocateSpace:
.0106fe	da		phx				phx									; save XY
.0106ff	5a		phy				phy
.010700	48		pha				pha 								; save the length.
.010701	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.010702	1a		inc a				inc 	a
.010703	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.010706	38		sec				sec 								; add 1 (2's complement)
.010707	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01070a	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01070c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.01070e	a8		tay				tay 								; put in Y
.01070f	68		pla				pla 								; restore the length
.010710	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.010713	98		tya				tya 								; get the address back
.010714	1a		inc a				inc 	a 							; skip over the link
.010715	1a		inc a				inc 	a
.010716	7a		ply				ply									; restore YX and exit.
.010717	fa		plx				plx
.010718	60		rts				rts
.010719					StringRelease:
.010719	5a		phy				phy									; save Y
.01071a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.01071d	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it
.01071f	90 0c		bcc $01072d			bcc 	_SASNoRelease
.010721	a8		tay				tay 								; the address of the old string
.010722	88		dey				dey 								; point to the link.
.010723	88		dey				dey
.010724	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.010727	09 00 80	ora #$8000			ora 	#$8000
.01072a	99 00 00	sta $0000,y			sta 	@w$0000,y
.01072d					_SASNoRelease:
.01072d	7a		ply				ply
.01072e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.01072f					StringTempAllocate:
.01072f	48		pha				pha
.010730	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010732	d0 09		bne $01073d			bne 	_STANoReset
.010734	5a		phy				phy 								; reset the temp string pointer.
.010735	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010738	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01073a	85 16		sta $16				sta 	DTempStringPointer
.01073c	7a		ply				ply
.01073d					_STANoReset:
.01073d	68		pla				pla 								; get length.
.01073e	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010741	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010744	18		clc				clc 								; this adds one, for the length.
.010745	65 16		adc $16				adc 	DTempStringPointer
.010747	85 16		sta $16				sta 	DTempStringPointer
.010749	48		pha				pha 								; save start address
.01074a	a9 00 00	lda #$0000			lda 	#$0000
.01074d	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01074f	92 16		sta ($16)			sta		(DTempStringPointer)
.010751	c2 20		rep #$20			rep 	#$20
.010753	68		pla				pla 								; restore start address
.010754	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010756	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010758	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01075a	60		rts				rts
.01075b					StringWriteCharacter:
.01075b	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.01075d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.01075f	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010761	1a		inc a				inc 	a
.010762	92 18		sta ($18)			sta 	(DStartTempString)
.010764	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010766	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010768	60		rts				rts
.010769					StringCreateCopy:
.010769	a8		tay				tay 								; put pointer to string in Y
.01076a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01076d	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010770	f0 17		beq $010789			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010772	da		phx				phx 								; save X and put the character count in X
.010773	aa		tax				tax
.010774					_SCCCopy:
.010774	c8		iny				iny 								; advance and read (first time skips length)
.010775	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010777	b9 00 00	lda $0000,y			lda 	$0000,y
.01077a	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01077c	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01077e	1a		inc a				inc 	a
.01077f	92 18		sta ($18)			sta 	(DStartTempString)
.010781	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010783	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010785	ca		dex				dex 								; do X times
.010786	d0 ec		bne $010774			bne 	_SCCCopy
.010788	fa		plx				plx
.010789					_SCCExit:
.010789	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.01078a					Tokenise:
.01078a	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.01078c	84 0a		sty $0a				sty 	DTemp1+2
.01078e	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010791	18		clc				clc
.010792	65 02		adc $02				adc 	DBaseAddress
.010794	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.010796	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.010799	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.01079c					_TOKCap:
.01079c	c8		iny				iny 								; go to next
.01079d	b7 08		lda [$08],y			lda 	[DTemp1],y
.01079f	29 ff 00	and #$00ff			and 	#$00FF
.0107a2	f0 22		beq $0107c6			beq 	_TOKEndCap
.0107a4	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107a7	d0 01		bne $0107aa			bne 	_TOKNotQuote
.0107a9	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107aa					_TOKNotQuote:
.0107aa	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107ad	90 ed		bcc $01079c			bcc 	_TOKCap
.0107af	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107b2	b0 e8		bcs $01079c			bcs 	_TOKCap
.0107b4	8a		txa				txa 								; check if in quotes
.0107b5	4a		lsr a				lsr 	a
.0107b6	b0 e4		bcs $01079c			bcs 	_TOKCap
.0107b8	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107ba	38		sec				sec
.0107bb	e9 20 00	sbc #$0020			sbc 	#32
.0107be	e2 20		sep #$20			sep 	#$20
.0107c0	97 08		sta [$08],y			sta 	[DTemp1],y
.0107c2	c2 20		rep #$20			rep 	#$20
.0107c4	80 d6		bra $01079c			bra 	_TOKCap
.0107c6					_TOKEndCap:
.0107c6	c6 08		dec $08				dec 	DTemp1
.0107c8					_TOKMainNext:
.0107c8	e6 08		inc $08				inc 	DTemp1
.0107ca					_TOKMainLoop:
.0107ca	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107cc	29 ff 00	and #$00ff			and 	#$00FF
.0107cf	c9 20 00	cmp #$0020			cmp 	#32
.0107d2	90 1d		bcc $0107f1			bcc 	_TOKExit 					; 0-31 exit.
.0107d4	f0 f2		beq $0107c8			beq 	_TOKMainNext 				; 32 (space) skip.
.0107d6	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107d9	f0 1d		beq $0107f8			beq 	_TOKString
.0107db	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107de	90 1d		bcc $0107fd			bcc 	_TOKPunctuation
.0107e0	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107e3	90 42		bcc $010827			bcc 	_TOKNumber
.0107e5	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107e8	90 13		bcc $0107fd			bcc 	_TOKPunctuation
.0107ea	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107ed	90 3d		bcc $01082c			bcc 	_TOKIdentifier
.0107ef	80 0c		bra $0107fd			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107f1					_TOKExit:
.0107f1	a9 00 00	lda #$0000			lda 	#$0000
.0107f4	20 31 08	jsr $010831			jsr 	TOKWriteToken
.0107f7	60		rts				rts
.0107f8					_TOKString:
.0107f8	20 cf 08	jsr $0108cf			jsr 	TOKQuotedString
.0107fb	80 cd		bra $0107ca			bra 	_TOKMainLoop
.0107fd					_TOKPunctuation:
.0107fd	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010800	20 36 09	jsr $010936			jsr 	TOKKeywordSearch
.010803	b0 1d		bcs $010822			bcs 	_TOKFoundPunctuation
.010805	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010808	20 36 09	jsr $010936			jsr 	TOKKeywordSearch
.01080b	b0 15		bcs $010822			bcs 	_TOKFoundPunctuation
.01080d	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010810	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010818	61 72 73 65 20 6c 69 6e 65 00
.010822					_TOKFoundPunctuation:
.010822	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; output the token and go round again.
.010825	80 a3		bra $0107ca			bra 	_TOKMainLoop
.010827					_TOKNumber:
.010827	20 50 08	jsr $010850			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01082a	80 9e		bra $0107ca			bra 	_TOKMainLoop
.01082c					_TOKIdentifier:
.01082c	20 91 09	jsr $010991			jsr 	TOKIdentifier
.01082f	80 99		bra $0107ca			bra 	_TOKMainLoop
.010831					TOKWriteToken:
.010831	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010833	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010835	e6 0c		inc $0c				inc 	DTemp2
.010837	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010839	29 ff 00	and #$00ff			and 	#$00FF
.01083c	f0 01		beq $01083f			beq 	_TOKWriteOverflow
.01083e	60		rts				rts
.01083f					_TOKWriteOverflow:
.01083f	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010842	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01084a	20 6c 6f 6e 67 00
.010850					TOKInteger:
.010850	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010852	64 26		stz $26				stz 	DTemp3+2
.010854					_TOKINLoop:
.010854	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010856	48		pha				pha
.010857	a5 24		lda $24				lda 	DTemp3
.010859	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01085b	26 26		rol $26				rol 	DTemp3+2
.01085d	06 24		asl $24				asl 	DTemp3
.01085f	26 26		rol $26				rol 	DTemp3+2
.010861	18		clc				clc
.010862	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010864	85 24		sta $24				sta 	DTemp3
.010866	68		pla				pla
.010867	65 26		adc $26				adc 	DTemp3+2
.010869	85 26		sta $26				sta 	DTemp3+2
.01086b	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.01086d	26 26		rol $26				rol 	DTemp3+2
.01086f	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010871	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010874	d0 44		bne $0108ba			bne 	_TOKINSize
.010876	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010878	29 0f 00	and #$000f			and 	#15
.01087b	18		clc				clc
.01087c	65 24		adc $24				adc 	DTemp3 						; add to the running count
.01087e	85 24		sta $24				sta 	DTemp3
.010880	90 02		bcc $010884			bcc 	_TOKINNoCarry
.010882	e6 26		inc $26				inc 	DTemp3+2
.010884					_TOKINNoCarry:
.010884	e6 08		inc $08				inc 	DTemp1 						; look at next
.010886	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.010888	29 ff 00	and #$00ff			and 	#$00FF
.01088b	c9 30 00	cmp #$0030			cmp 	#"0"
.01088e	90 05		bcc $010895			bcc 	_TOKINGotInteger
.010890	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010893	90 bf		bcc $010854			bcc		_TOKINLoop
.010895					_TOKINGotInteger:
.010895	a5 24		lda $24				lda 	DTemp3 						; lower word
.010897	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.01089a	18		clc				clc
.01089b	69 00 40	adc #$4000			adc 	#$4000
.01089e	48		pha				pha 								; save it.
.01089f	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108a1	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108a3	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108a5	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108a8	b0 10		bcs $0108ba			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108aa	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108ad	f0 06		beq $0108b5			beq 	_TOKINNoShift 				; don't need constant shift.
.0108af	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108b2	20 31 08	jsr $010831			jsr 	TOKWriteToken
.0108b5					_TOKINNoShift:
.0108b5	68		pla				pla 								; get lower its token
.0108b6	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; output it
.0108b9	60		rts				rts
.0108ba					_TOKINSize:
.0108ba	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0108bd	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108c5	74 6f 6f 20 6c 61 72 67 65 00
.0108cf					TOKQuotedString:
.0108cf	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108d1	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108d3	85 32		sta $32				sta 	DTemp4
.0108d5	a5 0a		lda $0a				lda 	DTemp1+2
.0108d7	85 34		sta $34				sta 	DTemp4+2
.0108d9					_TOKQFindSize:
.0108d9	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108db	e6 08		inc $08				inc 	DTemp1
.0108dd	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108e0	f0 3b		beq $01091d			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108e2	c9 22 00	cmp #$0022			cmp 	#34
.0108e5	d0 f2		bne $0108d9			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108e7	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108e9	38		sec				sec
.0108ea	e5 32		sbc $32				sbc 	DTemp4
.0108ec	3a		dec a				dec 	a 							; one less character for closing quote
.0108ed	85 26		sta $26				sta 	DTemp3+2
.0108ef	18		clc				clc
.0108f0	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108f3	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108f6	20 31 08	jsr $010831			jsr 	TOKWriteToken
.0108f9	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.0108fb	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108fe	c6 0c		dec $0c				dec 	DTemp2
.010900	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010902	f0 0f		beq $010913			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010904					_TOKQWriteString:
.010904	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010906	29 ff 00	and #$00ff			and 	#$00FF
.010909	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; effectively a byte-write.
.01090c	c6 0c		dec $0c				dec 	DTemp2
.01090e	e6 32		inc $32				inc 	DTemp4 						; advance character
.010910	ca		dex				dex 								; do X times
.010911	d0 f1		bne $010904			bne 	_TOKQWriteString
.010913					_TOKQWriteEnd:
.010913	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010915	29 01 00	and #$0001			and 	#1
.010918	f0 02		beq $01091c			beq 	_TOKQExit
.01091a	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01091c					_TOKQExit:
.01091c	60		rts				rts
.01091d					_TOQImbalance:
.01091d	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010920	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010928	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010936					TOKKeywordSearch:
.010936	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010938	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01093b	85 34		sta $34				sta 	DTemp4+2
.01093d	a2 00 00	ldx #$0000			ldx 	#0
.010940					_TOKScan:
.010940	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010944	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010947	f0 46		beq $01098f			beq 	_TOKFail 					; if zero then we have failed.
.010949	3a		dec a				dec 	a 							; -1 gives the length.
.01094a	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01094c	d0 2f		bne $01097d			bne 	_TOKNext 					; no, then skip to next token.
.01094e	da		phx				phx 								; save X
.01094f	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010952					_TOKCompare:
.010952	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010954	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.010958	29 ff 00	and #$00ff			and 	#$00FF
.01095b	d0 1f		bne $01097c			bne 	_TOKPopNext 				; if different, pop and goto next.
.01095d	e8		inx				inx 								; bump X and Y.
.01095e	c8		iny				iny
.01095f	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010961	d0 ef		bne $010952			bne 	_TOKCompare
.010963	98		tya				tya 								; add length to the text pointer
.010964	18		clc				clc
.010965	65 08		adc $08				adc 	DTemp1
.010967	85 08		sta $08				sta 	DTemp1
.010969	fa		plx				plx 								; restore X.
.01096a	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.01096e	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010971	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010972	4a		lsr a				lsr		a
.010973	4a		lsr a				lsr 	a
.010974	eb		xba				xba
.010975	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010977	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01097a	38		sec				sec
.01097b	60		rts				rts
.01097c					_TOKPopNext:
.01097c	fa		plx				plx 								; restore X.
.01097d					_TOKNext:
.01097d	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.010981	29 0f 00	and #$000f			and 	#$000F
.010984	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.010986	8a		txa				txa
.010987	18		clc				clc
.010988	65 14		adc $14				adc 	DSignCount
.01098a	aa		tax				tax
.01098b	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.01098d	80 b1		bra $010940			bra 	_TOKScan
.01098f					_TOKFail:
.01098f	18		clc				clc
.010990	60		rts				rts
.010991					TOKIdentifier:
.010991	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010993	85 24		sta $24				sta 	DTemp3
.010995					_TOKIFindLength:
.010995	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.010997	a7 08		lda [$08]			lda 	[DTemp1]
.010999	29 ff 00	and #$00ff			and 	#$00FF
.01099c	20 3c 0a	jsr $010a3c			jsr 	TOKIsIdentifierCharacter
.01099f	b0 f4		bcs $010995			bcs 	_TOKIFindLength
.0109a1	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109a3	38		sec				sec
.0109a4	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109a6	85 36		sta $36				sta 	DTemp5
.0109a8	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109aa	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109ad	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109af	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109b1	29 ff 00	and #$00ff			and 	#$00FF
.0109b4	c9 24 00	cmp #$0024			cmp 	#"$"
.0109b7	d0 0b		bne $0109c4			bne 	_TOKINotString
.0109b9	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109bb	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109bd	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109bf	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109c2	85 26		sta $26				sta 	DTemp3+2
.0109c4					_TOKINotString:
.0109c4	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109c6	29 ff 00	and #$00ff			and 	#$00FF
.0109c9	c9 28 00	cmp #$0028			cmp 	#"("
.0109cc	d0 0b		bne $0109d9			bne 	_TOKINotArray
.0109ce	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109d0	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109d2	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109d4	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109d7	85 26		sta $26				sta 	DTemp3+2
.0109d9					_TOKINotArray:
.0109d9	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109db	85 08		sta $08				sta 	DTemp1
.0109dd	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109df	20 36 09	jsr $010936			jsr 	TOKKeywordSearch
.0109e2	90 04		bcc $0109e8			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109e4	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109e7	60		rts				rts
.0109e8					_TOKIIdentifier:
.0109e8	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109ea	e6 08		inc $08				inc 	DTemp1
.0109ec	20 28 0a	jsr $010a28			jsr		_TOKIToConstant 			; convert to range 0-35
.0109ef	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109f1	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109f3	f0 1d		beq $010a12			beq 	_TOKINoSecond
.0109f5	48		pha				pha 								; save current on stack.
.0109f6	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109f8	e6 08		inc $08				inc 	DTemp1
.0109fa	20 28 0a	jsr $010a28			jsr		_TOKIToConstant 			; convert to range 0-35
.0109fd	85 14		sta $14				sta 	DSignCount 					; save it.
.0109ff	0a		asl a				asl 	a 							; x 4
.010a00	0a		asl a				asl 	a
.010a01	65 14		adc $14				adc 	DSignCount 					; x 5
.010a03	0a		asl a				asl 	a 							; x 10
.010a04	65 14		adc $14				adc 	DSignCount 					; x 11
.010a06	0a		asl a				asl 	a 							; x 22
.010a07	0a		asl a				asl 	a 							; x 44
.010a08	65 14		adc $14				adc 	DSignCount 					; x 45
.010a0a	85 14		sta $14				sta 	DSignCount
.010a0c	68		pla				pla 								; get old token and add x 45
.010a0d	18		clc				clc
.010a0e	65 14		adc $14				adc 	DSignCount
.010a10	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a12					_TOKINoSecond:
.010a12	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a14	f0 03		beq $010a19			beq 	_TOKINotLast				; if yes
.010a16	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a19					_TOKINotLast:
.010a19	20 31 08	jsr $010831			jsr 	TOKWriteToken 				; output the token
.010a1c	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a1e	d0 c8		bne $0109e8			bne 	_TOKIIdentifier
.010a20					_TOKIOut:
.010a20	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a22	18		clc				clc
.010a23	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a25	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a27	60		rts				rts
.010a28					_TOKIToConstant:
.010a28	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a2b	c9 41 00	cmp #$0041			cmp 	#65
.010a2e	90 04		bcc $010a34			bcc 	_TOKITInteger
.010a30	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a33	60		rts				rts
.010a34					_TOKITInteger:
.010a34	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a37	18		clc				clc
.010a38	69 1b 00	adc #$001b			adc 	#27
.010a3b	60		rts				rts
.010a3c					TOKIsIdentifierCharacter:
.010a3c	c9 30 00	cmp #$0030			cmp 	#"0"
.010a3f	90 0f		bcc $010a50			bcc 	_TOKIIFail
.010a41	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a44	90 0c		bcc $010a52			bcc 	_TOKIIOk
.010a46	c9 41 00	cmp #$0041			cmp 	#"A"
.010a49	90 05		bcc $010a50			bcc 	_TOKIIFail
.010a4b	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a4e	90 02		bcc $010a52			bcc 	_TOKIIOk
.010a50					_TOKIIFail:
.010a50	18		clc				clc
.010a51	60		rts				rts
.010a52					_TOKIIOk:
.010a52	38		sec				sec
.010a53	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a54					Binary_Add:
.010a54	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a56	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a58	30 12		bmi $010a6c		bmi 	_BATypeError
.010a5a	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a5c	30 3f		bmi $010a9d		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a5e	18		clc			clc 										; add the results
.010a5f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a61	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a63	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a65	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a67	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a69	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a6b	60		rts			rts
.010a6c					_BATypeError:
.010a6c	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010a6f	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a77	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a87	65 73 00
.010a8a					_BALengthError:
.010a8a	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010a8d	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a95	6f 6f 20 6c 6f 6e 67 00
.010a9d					_BAConcatenateString:
.010a9d	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a9f	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010aa1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010aa3	85 0c		sta $0c			sta 	DTemp2
.010aa5	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010aa7	18		clc			clc 										; work out the total length
.010aa8	b2 08		lda ($08)		lda 	(DTemp1)
.010aaa	72 0c		adc ($0c)		adc 	(DTemp2)
.010aac	b0 14		bcs $010ac2		bcs 	_BAConcatLengthError 				; string is too long.
.010aae	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010ab0	20 2f 07	jsr $01072f		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010ab3	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010ab5	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ab7	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010ab9	20 69 07	jsr $010769		jsr 	StringCreateCopy
.010abc	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010abe	20 69 07	jsr $010769		jsr 	StringCreateCopy
.010ac1	60		rts			rts
.010ac2					_BAConcatLengthError:
.010ac2	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010ac5	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010acd	6f 6f 20 6c 6f 6e 67 00
.010ad5					Binary_Subtract:
.010ad5	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010ad8	38		sec			sec
.010ad9	b5 00		lda $00,x		lda		EXSValueL+0,x
.010adb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010add	95 00		sta $00,x		sta 	EXSValueL+0,x
.010adf	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ae1	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ae3	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ae5	60		rts			rts
.010ae6					Binary_ShiftRight:
.010ae6	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010ae9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010aeb	29 3f 00	and #$003f		and 	#63
.010aee	f0 07		beq $010af7		beq		_Binary_SRExit
.010af0					_Binary_SRLoop:
.010af0	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010af2	76 00		ror $00,x		ror 	EXSValueL+0,x
.010af4	3a		dec a			dec 	a
.010af5	d0 f9		bne $010af0		bne 	_Binary_SRLoop
.010af7					_Binary_SRExit:
.010af7	60		rts			rts
.010af8					Binary_ShiftLeft:
.010af8	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010afb	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010afd	29 3f 00	and #$003f		and 	#63
.010b00	f0 07		beq $010b09		beq		_Binary_SLExit
.010b02					_Binary_SLLoop:
.010b02	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b04	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b06	3a		dec a			dec 	a
.010b07	d0 f9		bne $010b02		bne 	_Binary_SLLoop
.010b09					_Binary_SLExit:
.010b09	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010b0a					Binary_And:
.010b0a	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010b0d	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b0f	35 02		and $02,x		and 	EXSValueL+2,x
.010b11	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b13	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b15	35 22		and $22,x		and 	EXSValueH+2,x
.010b17	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b19	60		rts			rts
.010b1a					Binary_Or:
.010b1a	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010b1d	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b1f	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b21	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b23	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b25	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b27	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b29	60		rts			rts
.010b2a					Binary_Xor:
.010b2a	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010b2d	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b2f	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b31	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b33	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b35	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b37	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b39	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b3a					Binary_Equals:
.010b3a	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b3d	b0 0e		bcs $010b4d		bcs 	_BEString
.010b3f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b41	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b43	d0 4f		bne $010b94		bne 	Compare_Fail
.010b45	b5 20		lda $20,x		lda 	EXSValueH,x
.010b47	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b49	d0 49		bne $010b94		bne 	Compare_Fail
.010b4b	80 3f		bra $010b8c		bra 	Compare_Succeed
.010b4d					_BEString:
.010b4d	09 00 00	ora #$0000		ora 	#$0000
.010b50	f0 3a		beq $010b8c		beq 	Compare_Succeed
.010b52	80 40		bra $010b94		bra 	Compare_Fail
.010b54					Binary_NotEquals:
.010b54	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b57	b0 0e		bcs $010b67		bcs 	_BNEString
.010b59	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b5b	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b5d	d0 2d		bne $010b8c		bne 	Compare_Succeed
.010b5f	b5 20		lda $20,x		lda 	EXSValueH,x
.010b61	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b63	d0 27		bne $010b8c		bne 	Compare_Succeed
.010b65	80 2d		bra $010b94		bra 	Compare_Fail
.010b67					_BNEString:
.010b67	09 00 00	ora #$0000		ora 	#$0000
.010b6a	d0 20		bne $010b8c		bne 	Compare_Succeed
.010b6c	80 26		bra $010b94		bra 	Compare_Fail
.010b6e					Binary_Less:
.010b6e	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b71	b0 12		bcs $010b85		bcs 	_BLString
.010b73	38		sec			sec
.010b74	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b76	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b78	b5 20		lda $20,x		lda 	EXSValueH,x
.010b7a	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b7c	50 03		bvc $010b81		bvc 	*+5
.010b7e	49 00 80	eor #$8000		eor 	#$8000
.010b81	30 09		bmi $010b8c		bmi 	Compare_Succeed
.010b83	80 0f		bra $010b94		bra 	Compare_Fail
.010b85					_BLString:
.010b85	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b88	f0 02		beq $010b8c		beq 	Compare_Succeed
.010b8a	80 08		bra $010b94		bra 	Compare_Fail
.010b8c					Compare_Succeed:
.010b8c	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b8f	95 00		sta $00,x		sta 	EXSValueL,x
.010b91	95 20		sta $20,x		sta 	EXSValueH,x
.010b93	60		rts			rts
.010b94					Compare_Fail:
.010b94	74 00		stz $00,x		stz 	EXSValueL,x
.010b96	74 20		stz $20,x		stz 	EXSValueH,x
.010b98	60		rts			rts
.010b99					Binary_GreaterEqual:
.010b99	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b9c	b0 12		bcs $010bb0		bcs 	_BGEString
.010b9e	38		sec			sec
.010b9f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010ba1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ba3	b5 20		lda $20,x		lda 	EXSValueH,x
.010ba5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ba7	50 03		bvc $010bac		bvc 	*+5
.010ba9	49 00 80	eor #$8000		eor 	#$8000
.010bac	10 de		bpl $010b8c		bpl 	Compare_Succeed
.010bae	80 e4		bra $010b94		bra 	Compare_Fail
.010bb0					_BGEString:
.010bb0	09 00 00	ora #$0000		ora 	#$0000
.010bb3	10 d7		bpl $010b8c		bpl 	Compare_Succeed
.010bb5	80 dd		bra $010b94		bra 	Compare_Fail
.010bb7					Binary_LessEqual:
.010bb7	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bba	b0 12		bcs $010bce		bcs 	_BLEString
.010bbc	18		clc			clc 									; numeric <= signed
.010bbd	b5 00		lda $00,x		lda 	EXSValueL,x
.010bbf	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc1	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bc5	50 03		bvc $010bca		bvc 	*+5
.010bc7	49 00 80	eor #$8000		eor 	#$8000
.010bca	30 c0		bmi $010b8c		bmi 	Compare_Succeed
.010bcc	80 c6		bra $010b94		bra 	Compare_Fail
.010bce					_BLEString:
.010bce	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bd1	d0 b9		bne $010b8c		bne 	Compare_Succeed
.010bd3	80 bf		bra $010b94		bra 	Compare_Fail
.010bd5					Binary_Greater:
.010bd5	20 f3 0b	jsr $010bf3		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bd8	b0 12		bcs $010bec		bcs 	_BGString
.010bda	18		clc			clc 									; numeric > signed
.010bdb	b5 00		lda $00,x		lda 	EXSValueL,x
.010bdd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bdf	b5 20		lda $20,x		lda 	EXSValueH,x
.010be1	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010be3	50 03		bvc $010be8		bvc 	*+5
.010be5	49 00 80	eor #$8000		eor 	#$8000
.010be8	10 a2		bpl $010b8c		bpl 	Compare_Succeed
.010bea	80 a8		bra $010b94		bra 	Compare_Fail
.010bec					_BGString:
.010bec	c9 01 00	cmp #$0001		cmp 	#$0001
.010bef	f0 9b		beq $010b8c		beq 	Compare_Succeed
.010bf1	80 a1		bra $010b94		bra 	Compare_Fail
.010bf3					CompareTypeCheck:
.010bf3	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010bf5	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010bf7	30 06		bmi $010bff		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010bf9	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010bfb	30 1c		bmi $010c19		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010bfd	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010bfe	60		rts			rts
.010bff					_CTCFail:
.010bff	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010c02	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c0a	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c19					_CTCStringCompare:
.010c19	20 16 06	jsr $010616		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c1c	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c1e	85 08		sta $08			sta 	DTemp1
.010c20	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c22	85 0c		sta $0c			sta 	DTemp2
.010c24	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c27	a8		tay			tay
.010c28	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c2a	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c2c	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c2e	90 02		bcc $010c32		bcc 	_CTCSmallest
.010c30	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c32					_CTCSmallest:
.010c32	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c34					_CTCCompare:
.010c34	c8		iny			iny 									; look at next character (done first, first char is size)
.010c35	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c37	30 16		bmi $010c4f		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c39	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c3b	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c3d	f0 f5		beq $010c34		beq 	_CTCCompare 					; if zero, try the next character.
.010c3f	b0 07		bcs $010c48		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c41					_CTCLess:
.010c41	c2 20		rep #$20		rep 	#$20
.010c43	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c46	80 14		bra $010c5c		bra 	_CTCExit
.010c48					_CTCGreater:
.010c48	c2 20		rep #$20		rep 	#$20
.010c4a	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c4d	80 0d		bra $010c5c		bra 	_CTCExit
.010c4f					_CTCEqualSoFar:
.010c4f	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c51	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c53	90 ec		bcc $010c41		bcc 	_CTCLess
.010c55	d0 f1		bne $010c48		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c57	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c59	a9 00 00	lda #$0000		lda 	#$0000
.010c5c					_CTCExit:
.010c5c	38		sec			sec 									; return with CS indicating string comparison.
.010c5d	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c5e					Binary_Divide:
.010c5e	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010c61	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c63	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c65	d0 14		bne $010c7b		bne 	_BinaryDivide_Ok
.010c67	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010c6a	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c72	20 62 79 20 7a 65 72 6f 00
.010c7b					_BinaryDivide_Ok:
.010c7b	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c7d	64 0a		stz $0a			stz 	DTemp1+2
.010c7f	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c81	5a		phy			phy 										; save Y (bit counter)
.010c82	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c84	10 07		bpl $010c8d		bpl 	_BinaryDivide_RightDone
.010c86	e8		inx			inx
.010c87	e8		inx			inx
.010c88	20 c3 0c	jsr $010cc3		jsr 	Binary_DivNegate
.010c8b	ca		dex			dex
.010c8c	ca		dex			dex
.010c8d					_BinaryDivide_RightDone:
.010c8d	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c8f	10 03		bpl $010c94		bpl 	_BinaryDivide_LeftDone
.010c91	20 c3 0c	jsr $010cc3		jsr 	Binary_DivNegate
.010c94					_BinaryDivide_LeftDone:
.010c94	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c97					_BinaryDivide_Loop:
.010c97	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c99	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c9b	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c9d	26 0a		rol $0a			rol 	DTemp1+2
.010c9f	38		sec			sec											; calculate A-M
.010ca0	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010ca2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ca4	85 0c		sta $0c			sta 	DTemp2
.010ca6	a5 0a		lda $0a			lda 	DTemp1+2
.010ca8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010caa	90 08		bcc $010cb4		bcc 	_Binary_NoSubract 					; if A < M skip this
.010cac	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010cae	a5 0c		lda $0c			lda 	DTemp2
.010cb0	85 08		sta $08			sta 	DTemp1+0
.010cb2	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cb4					_Binary_NoSubract:
.010cb4	88		dey			dey 										; do it 32 times.
.010cb5	d0 e0		bne $010c97		bne 	_BinaryDivide_Loop
.010cb7					_BinaryDivide_Exit:
.010cb7	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cb9	29 01 00	and #$0001		and 	#1
.010cbc	f0 03		beq $010cc1		beq 	_BinaryDivide_Exit2
.010cbe	20 c3 0c	jsr $010cc3		jsr 	Binary_DivNegate
.010cc1					_BinaryDivide_Exit2:
.010cc1	7a		ply			ply 										; restore Y
.010cc2	60		rts			rts
.010cc3					Binary_DivNegate:
.010cc3	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cc5	38		sec			sec 										; negate the value at stack X.
.010cc6	a9 00 00	lda #$0000		lda 	#$0000
.010cc9	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010ccb	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ccd	a9 00 00	lda #$0000		lda 	#$0000
.010cd0	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cd2	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cd4	60		rts			rts
.010cd5					Binary_Modulus:
.010cd5	20 5e 0c	jsr $010c5e		jsr 	Binary_Divide 						; do the divide
.010cd8	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cda	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cdc	a5 0a		lda $0a			lda 	DTemp1+2
.010cde	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ce0	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010ce1					Binary_Multiply:
.010ce1	20 f6 05	jsr $0105f6		jsr 	CheckBothNumeric 					; check both values are numeric
.010ce4	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010ce6	85 08		sta $08			sta 	DTemp1
.010ce8	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cea	85 0a		sta $0a			sta		DTemp1+2
.010cec	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010cee	74 20		stz $20,x		stz 	EXSValueH+0,x
.010cf0					_BinaryMultiply_Loop:
.010cf0	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010cf2	05 0a		ora $0a			ora 	DTemp1+2
.010cf4	f0 1e		beq $010d14		beq 	_BinaryMultiply_Exit
.010cf6	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010cf8	29 01 00	and #$0001		and 	#1
.010cfb	f0 0d		beq $010d0a		beq 	_BinaryMultiply_NoAdd
.010cfd	18		clc			clc 										; add multiplicand to result.
.010cfe	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d00	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d02	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d04	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d06	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d08	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d0a					_BinaryMultiply_NoAdd:
.010d0a	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d0c	66 08		ror $08			ror 	DTemp1
.010d0e	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d10	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d12	80 dc		bra $010cf0		bra 	_BinaryMultiply_Loop 				; go round again.
.010d14					_BinaryMultiply_Exit:
.010d14	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010d15					Function_Len:
.010d15	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010d18	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d1b	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010d1e	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d20	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d23	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d26	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d28	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d2a	60		rts				rts
.010d2b					Function_Abs:
.010d2b	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010d2e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d31	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010d34	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d36	30 07		bmi $010d3f			bmi 	_FAbsNegative 				; negate it if negative
.010d38	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d3a	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d3c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d3e	60		rts				rts
.010d3f					_FAbsNegative:
.010d3f	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d40	a9 00 00	lda #$0000			lda 	#0
.010d43	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d45	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d47	a9 00 00	lda #$0000			lda 	#0
.010d4a	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d4c	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d4e	60		rts				rts
.010d4f					Function_Sgn:
.010d4f	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns integer
.010d52	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d55	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010d58	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d5a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d5c	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d5e	30 07		bmi $010d67			bmi 	_FSgnNegative 				; set to -1 if signed
.010d60	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d62	f0 02		beq $010d66			beq 	_FSgnExit
.010d64	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d66					_FSgnExit:
.010d66	60		rts				rts
.010d67					_FSgnNegative:
.010d67	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d6a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d6c	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d6e	60		rts				rts
.010d6f					Function_Random:
.010d6f	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010d72	20 16 06	jsr $010616			jsr 	ResetTypeInteger
.010d75	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d77	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d79	d0 0a		bne $010d85			bne 	_Rnd_NotZero
.010d7b	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d7e	85 10		sta $10				sta 	DRandom
.010d80	a9 ea 00	lda #$00ea			lda 	#$EA
.010d83	85 12		sta $12				sta 	DRandom+2
.010d85					_Rnd_NotZero:
.010d85	20 90 0d	jsr $010d90			jsr 	_Rnd_Process 				; call randomiser twice
.010d88	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d8a	20 90 0d	jsr $010d90			jsr 	_Rnd_Process
.010d8d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d8f	60		rts				rts
.010d90					_Rnd_Process:
.010d90	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d92	26 12		rol $12				rol 	DRandom+2
.010d94	90 0e		bcc $010da4			bcc 	_Rnd_Exit
.010d96	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d98	49 54 d4	eor #$d454			eor 	#$D454
.010d9b	85 10		sta $10				sta 	DRandom
.010d9d	a5 12		lda $12				lda 	DRandom+2
.010d9f	49 d5 55	eor #$55d5			eor 	#$55D5
.010da2	85 12		sta $12				sta 	DRandom+2
.010da4					_Rnd_Exit:
.010da4	a5 10		lda $10				lda 	DRandom
.010da6	45 12		eor $12				eor 	DRandom+2
.010da8	60		rts				rts
.010da9					Function_Chr:
.010da9	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string
.010dac	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010daf	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010db2	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010db5	d0 12		bne $010dc9			bne 	_FCHBad
.010db7	48		pha				pha  								; save char # on stack
.010db8	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dbb	20 2f 07	jsr $01072f			jsr 	StringTempAllocate
.010dbe	68		pla				pla 								; restore character number
.010dbf	20 5b 07	jsr $01075b			jsr 	StringWriteCharacter 		; write it out.
.010dc2	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dc4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dc6	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dc8	60		rts				rts
.010dc9					_FCHBad:
.010dc9	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010dcc	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010dd4	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010de1					Function_Asc:
.010de1	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010de4	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010de7	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010dea	a8		tay				tay 								; string address in Y
.010deb	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010dee	29 ff 00	and #$00ff			and 	#$00FF
.010df1	f0 0b		beq $010dfe			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010df3	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010df6	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010df9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dfb	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dfd	60		rts				rts
.010dfe					_FASBad:
.010dfe	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010e01	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e09	65 20 66 6f 72 20 61 73 63 28 29 00
.010e15					Function_SPC:
.010e15	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string
.010e18	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e1b	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010e1e	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e21	d0 17		bne $010e3a			bne 	_FSPBad
.010e23	48		pha				pha 								; save length
.010e24	20 2f 07	jsr $01072f			jsr 	StringTempAllocate 			; allocate character space
.010e27	7a		ply				ply 								; get count in Y
.010e28	f0 09		beq $010e33			beq 	_FSPExit 					; if zero, just empty string
.010e2a					_FSPCopy:
.010e2a	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e2d	20 5b 07	jsr $01075b			jsr 	StringWriteCharacter 		; write it out.
.010e30	88		dey				dey
.010e31	d0 f7		bne $010e2a			bne 	_FSPCopy	 				; do it Y times
.010e33					_FSPExit:
.010e33	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e35	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e37	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e39	60		rts				rts
.010e3a					_FSPBad:
.010e3a	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010e3d	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e45	65 20 66 6f 72 20 73 70 63 28 29 00
.010e51					Function_Inkey:
.010e51	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010e54	20 16 06	jsr $010616			jsr 	ResetTypeInteger
.010e57	20 b1 1d	jsr $011db1			jsr 	HWInkey 					; read current key
.010e5a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e5c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e5e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e5f					Function_LEFT:
.010e5f	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.010e62	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e65	48		pha				pha 								; save string on stack.
.010e66	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; get count
.010e69	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e6c	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e6f	d0 6d		bne $010ede			bne 	FNStringParameter
.010e71	85 08		sta $08				sta 	DTemp1 						; save count.
.010e73	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket
.010e76	7a		ply				ply 								; Y points to string.
.010e77	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e7a	29 ff 00	and #$00ff			and 	#$00FF
.010e7d	f0 52		beq $010ed1			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e7f	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e81	f0 55		beq $010ed8			beq 	FNStringY 					; return string in Y if current len = required len.
.010e83	90 53		bcc $010ed8			bcc 	FNStringY 					; if current < required return whole thing.
.010e85	c8		iny				iny 								; take from here - start of string
.010e86	80 33		bra $010ebb			bra 	FNDTemp1Characters
.010e88					Function_RIGHT:
.010e88	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.010e8b	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e8e	48		pha				pha 								; save string on stack.
.010e8f	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; get count
.010e92	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e95	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e98	d0 44		bne $010ede			bne 	FNStringParameter
.010e9a	85 08		sta $08				sta 	DTemp1 						; save count.
.010e9c	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket
.010e9f	7a		ply				ply 								; Y points to string.
.010ea0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010ea3	29 ff 00	and #$00ff			and 	#$00FF
.010ea6	f0 29		beq $010ed1			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ea8	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010eaa	f0 2c		beq $010ed8			beq 	FNStringY 					; return string in Y if current len = required len.
.010eac	90 2a		bcc $010ed8			bcc 	FNStringY 					; if current < required return whole thing.
.010eae	38		sec				sec 								; current-required is the number to skip
.010eaf	e5 08		sbc $08				sbc 	DTemp1
.010eb1	85 0a		sta $0a				sta 	DTemp1+2
.010eb3	98		tya				tya
.010eb4	18		clc				clc
.010eb5	65 0a		adc $0a				adc 	DTemp1+2
.010eb7	a8		tay				tay
.010eb8	c8		iny				iny 								; +1 for the count.
.010eb9	80 00		bra $010ebb			bra 	FNDTemp1Characters
.010ebb					FNDTemp1Characters:
.010ebb	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ebd	f0 12		beq $010ed1			beq 	FNStringEmpty 				; if zero, return empty string.
.010ebf	20 2f 07	jsr $01072f			jsr 	StringTempAllocate
.010ec2	48		pha				pha 								; save the address
.010ec3					_FND1Loop:
.010ec3	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ec6	20 5b 07	jsr $01075b			jsr 	StringWriteCharacter
.010ec9	c8		iny				iny
.010eca	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ecc	d0 f5		bne $010ec3			bne 	_FND1Loop
.010ece	7a		ply				ply 								; string address in Y
.010ecf	80 07		bra $010ed8			bra 	FNStringY
.010ed1					FNStringEmpty:
.010ed1	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ed4	20 2f 07	jsr $01072f			jsr 	StringTempAllocate 			; put address of it in Y
.010ed7	a8		tay				tay
.010ed8					FNStringY:
.010ed8	98		tya				tya
.010ed9	95 00		sta $00,x			sta 	EXSValueL+0,x
.010edb	74 22		stz $22,x			stz 	EXSValueH+2,x
.010edd	60		rts				rts
.010ede					FNStringParameter:
.010ede	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010ee1	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010ee9	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010ef6					Function_MID:
.010ef6	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.010ef9	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010efc	48		pha				pha 								; save string on stack.
.010efd	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; get offset (n)
.010f00	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010f03	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f06	d0 d6		bne $010ede			bne 	FNStringParameter
.010f08	c9 00 00	cmp #$0000			cmp 	#0
.010f0b	f0 d1		beq $010ede			beq 	FNStringParameter 			; or zero
.010f0d	48		pha				pha 								; save start position on stack.
.010f0e	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f11	85 08		sta $08				sta 	DTemp1
.010f13	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f15	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f18	d0 0e		bne $010f28			bne 	_FMINoThird
.010f1a	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f1c	e6 06		inc $06				inc 	DCodePtr
.010f1e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f21	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f24	d0 b8		bne $010ede			bne 	FNStringParameter
.010f26	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f28					_FMINoThird:
.010f28	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket
.010f2b	68		pla				pla 								; get offset position
.010f2c	85 0c		sta $0c				sta 	DTemp2
.010f2e	7a		ply				ply 								; get address of string in Y
.010f2f	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f32	29 ff 00	and #$00ff			and 	#$00FF
.010f35	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f37	90 98		bcc $010ed1			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f39	38		sec				sec 								; calculate number of characters left after
.010f3a	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f3c	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f3d	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f3f	b0 02		bcs $010f43			bcs 	_FMISufficient
.010f41	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f43					_FMISufficient:
.010f43	98		tya				tya 								; get address
.010f44	18		clc				clc
.010f45	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f47	a8		tay				tay 								; put in Y
.010f48	82 70 ff	brl $010ebb			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f4b					Function_Peek:
.010f4b	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010f4e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f51	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010f54	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f56	84 0a		sty $0a				sty 	DTemp1+2
.010f58	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f5b	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f5d	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f60	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f62	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f64	60		rts				rts
.010f65					Function_Deek:
.010f65	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010f68	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f6b	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010f6e	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f70	84 0a		sty $0a				sty 	DTemp1+2
.010f72	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f75	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f77	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f79	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f7b	60		rts				rts
.010f7c					Function_Leek:
.010f7c	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010f7f	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f82	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check )
.010f85	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f87	84 0a		sty $0a				sty 	DTemp1+2
.010f89	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f8c	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f8e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f90	c8		iny				iny
.010f91	c8		iny				iny
.010f92	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f94	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f96	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010f97					Function_VAL:
.010f97	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns an integer
.010f9a	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f9d	48		pha				pha 								; put string address on stack.
.010f9e	20 ae 0f	jsr $010fae			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fa1	7a		ply				ply 								; get string address back
.010fa2	da		phx				phx 								; save X on stack
.010fa3	aa		tax				tax 								; base in X
.010fa4	98		tya				tya 								; address in A
.010fa5	20 e8 0f	jsr $010fe8			jsr 	StringToInteger
.010fa8	fa		plx				plx 								; restore X
.010fa9	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fab	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fad	60		rts				rts
.010fae					VALGetBase:
.010fae	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fb0	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fb3	f0 07		beq $010fbc			beq 	_VGBAlternate
.010fb5	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fb8	a9 0a 00	lda #$000a			lda 	#10
.010fbb	60		rts				rts
.010fbc					_VGBAlternate:
.010fbc	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; skip comma.
.010fbf	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fc2	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fc5	d0 0e		bne $010fd5			bne 	_VGBBadBase
.010fc7	c9 02 00	cmp #$0002			cmp 	#2
.010fca	90 09		bcc $010fd5			bcc 	_VGBBadBase
.010fcc	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fcf	b0 04		bcs $010fd5			bcs 	_VGBBadBase
.010fd1	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fd4	60		rts				rts
.010fd5					_VGBBadBase:
.010fd5	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>010fd8	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fe0	65 72 20 42 61 73 65 00
.010fe8					StringToInteger:
.010fe8	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fea	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010fec	29 ff 00	and #$00ff			and 	#$00FF
.010fef	85 26		sta $26				sta 	DTemp3+2
.010ff1	f0 6e		beq $011061			beq 	_STIError 					; if length zero it's bad.
.010ff3	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010ff5	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010ff7	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010ff9	64 0a		stz $0a				stz 	DTemp1+2
.010ffb	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010ffd	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.011000	48		pha				pha 								; push on stack
.011001	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011004	d0 06		bne $01100c			bne 	_STILoop
.011006	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.011008	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01100a	f0 55		beq $011061			beq 	_STIError 					; if only - then error.
.01100c					_STILoop:
.01100c	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01100e	20 80 10	jsr $011080			jsr 	MultiplyTemp1ByA
.011011	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011013	29 ff 00	and #$00ff			and 	#$00FF
.011016	20 71 10	jsr $011071			jsr 	ConvertUpperCase	 		; make U/C
.011019	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.01101c	90 43		bcc $011061			bcc 	_STIError
.01101e	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011021	90 0e		bcc $011031			bcc 	_STIOkay1
.011023	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011026	90 39		bcc $011061			bcc 	_STIError
.011028	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01102b	b0 34		bcs $011061			bcs 	_STIError
.01102d	18		clc				clc 								; shift to correct range.
.01102e	69 09 00	adc #$0009			adc 	#9
.011031					_STIOkay1:
.011031	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011034	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011036	b0 29		bcs $011061			bcs 	_STIError
.011038	18		clc				clc 								; add A to DTemp1
.011039	65 08		adc $08				adc 	DTemp1
.01103b	85 08		sta $08				sta 	DTemp1
.01103d	90 02		bcc $011041			bcc 	_STINoCarry
.01103f	e6 0a		inc $0a				inc 	DTemp1+2
.011041					_STINoCarry:
.011041	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011043	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011045	d0 c5		bne $01100c			bne 	_STILoop 					; loop back.
.011047	68		pla				pla 								; get optional minus bac
.011048	c9 2d 00	cmp #$002d			cmp 	#"-"
.01104b	d0 0f		bne $01105c			bne 	_STINotNegative 			; handle the negative character
.01104d	38		sec				sec 								; negate DTemp1
.01104e	a9 00 00	lda #$0000			lda 	#0
.011051	e5 08		sbc $08				sbc 	DTemp1
.011053	85 08		sta $08				sta 	DTemp1
.011055	a9 00 00	lda #$0000			lda 	#0
.011058	e5 0a		sbc $0a				sbc 	DTemp1+2
.01105a	85 0a		sta $0a				sta 	DTemp1+2
.01105c					_STINotNegative:
.01105c	a5 08		lda $08				lda 	DTemp1 						; get the result
.01105e	a4 0a		ldy $0a				ldy 	DTemp1+2
.011060	60		rts				rts
.011061					_STIError:
.011061	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011064	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01106c	74 61 6e 74 00
.011071					ConvertUpperCase:
.011071	c9 61 00	cmp #$0061			cmp 	#'a'
.011074	90 09		bcc $01107f			bcc 	_CUCExit
.011076	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.011079	b0 04		bcs $01107f			bcs 	_CUCExit
.01107b	38		sec				sec
.01107c	e9 20 00	sbc #$0020			sbc 	#32
.01107f					_CUCExit:
.01107f	60		rts				rts
.011080					MultiplyTemp1ByA:
.011080					_MTGeneral:
.011080	da		phx				phx
.011081	aa		tax				tax 								; multiplier in X
.011082	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011084	85 0c		sta $0c				sta 	DTemp2
.011086	a5 0a		lda $0a				lda 	DTemp1+2
.011088	85 0e		sta $0e				sta 	DTemp2+2
.01108a	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.01108c	64 0a		stz $0a				stz 	DTemp1+2
.01108e	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011091					_MTLoop:
.011091	8a		txa				txa 								; shift X right into C
.011092	4a		lsr a				lsr 	a
.011093	aa		tax				tax
.011094	90 10		bcc $0110a6			bcc 	_MTNoAdd
.011096	18		clc				clc
.011097	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.011099	65 0c		adc $0c				adc 	DTemp2
.01109b	85 08		sta $08				sta 	DTemp1
.01109d	a5 0a		lda $0a				lda 	DTemp1+2
.01109f	65 0e		adc $0e				adc 	DTemp2+2
.0110a1	85 0a		sta $0a				sta 	DTemp1+2
.0110a3	90 01		bcc $0110a6			bcc 	_MTNoAdd
.0110a5	c8		iny				iny
.0110a6					_MTNoAdd:
.0110a6	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110a8	26 0e		rol $0e				rol 	DTemp2+2
.0110aa	90 01		bcc $0110ad			bcc 	_MTNoOverflow
.0110ac	c8		iny				iny
.0110ad					_MTNoOverflow:
.0110ad	8a		txa				txa 								; until multiplier is zero.
.0110ae	d0 e1		bne $011091			bne 	_MTLoop
.0110b0	98		tya				tya
.0110b1	18		clc				clc
.0110b2	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110b5	fa		plx				plx 								; restore X
.0110b6	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.0110b7					Function_Str:
.0110b7	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.0110ba	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110bd	48		pha				pha 								; save YA on the stack
.0110be	5a		phy				phy
.0110bf	20 ae 0f	jsr $010fae			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110c2	85 14		sta $14				sta 	DSignCount
.0110c4	7a		ply				ply 								; YA is the number
.0110c5	68		pla				pla
.0110c6	da		phx				phx
.0110c7	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110c9	20 d2 10	jsr $0110d2			jsr 	ConvertToString 			; convert it to a string.
.0110cc	fa		plx				plx 								; restore X
.0110cd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110cf	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110d1	60		rts				rts
.0110d2					ConvertToString:
.0110d2	48		pha				pha
.0110d3	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110d6	20 2f 07	jsr $01072f			jsr 	StringTempAllocate 			; allocate space for return string.
.0110d9	68		pla				pla
.0110da					ConvertToStringAlreadyAllocated:
.0110da	da		phx				phx 								; save X (base)
.0110db	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110dd	84 26		sty $26				sty 	DTemp3+2
.0110df	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110e1	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110e3	10 15		bpl $0110fa			bpl 	_CTSNotNegative
.0110e5	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110e8	20 64 11	jsr $011164			jsr 	CTSOutputA
.0110eb	38		sec				sec 								; negate DTemp3 which is the number
.0110ec	a9 00 00	lda #$0000			lda 	#0
.0110ef	e5 24		sbc $24				sbc 	DTemp3
.0110f1	85 24		sta $24				sta 	DTemp3
.0110f3	a9 00 00	lda #$0000			lda 	#0
.0110f6	e5 26		sbc $26				sbc 	DTemp3+2
.0110f8	85 26		sta $26				sta 	DTemp3+2
.0110fa					_CTSNotNegative:
.0110fa	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.0110fd	48		pha				pha
.0110fe	a9 00 00	lda #$0000			lda 	#0
.011101	48		pha				pha
.011102	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011104	85 08		sta $08				sta 	DTemp1
.011106	64 0a		stz $0a				stz 	DTemp1+2
.011108					_CTSMultiplySubtractor:
.011108	38		sec				sec 								; check number vs subtractor
.011109	a5 24		lda $24				lda 	DTemp3
.01110b	e5 08		sbc $08				sbc 	DTemp1
.01110d	a5 26		lda $26				lda 	DTemp3+2
.01110f	e5 0a		sbc $0a				sbc 	DTemp1+2
.011111	90 0f		bcc $011122			bcc		_CTSScaledUp 				; if >= then scaled up.
.011113	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011115	48		pha				pha
.011116	a5 0a		lda $0a				lda 	DTemp1+2
.011118	48		pha				pha
.011119	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01111b	20 80 10	jsr $011080			jsr 	MultiplyTemp1ByA
.01111e	b0 02		bcs $011122			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011120	80 e6		bra $011108			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011122					_CTSScaledUp:
.011122	7a		ply				ply 								; YA contains the previous divider.
.011123	68		pla				pla
.011124	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011127	d0 05		bne $01112e			bne 	_CTSHasDigit
.011129	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01112c	f0 20		beq $01114e			beq 	_CTSExit
.01112e					_CTSHasDigit:
.01112e	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011130	84 0e		sty $0e				sty 	DTemp2+2
.011132	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011135					_CTSSubLoop:
.011135	38		sec				sec 								; subtract subtractor from number
.011136	a5 24		lda $24				lda 	DTemp3
.011138	e5 0c		sbc $0c				sbc 	DTemp2
.01113a	a8		tay				tay 								; intermediate in Y
.01113b	a5 26		lda $26				lda 	DTemp3+2
.01113d	e5 0e		sbc $0e				sbc 	DTemp2+2
.01113f	90 07		bcc $011148			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011141	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011143	84 24		sty $24				sty 	DTemp3
.011145	e8		inx				inx 								; one more subtraction
.011146	80 ed		bra $011135			bra 	_CTSSubLoop 				; try it again.
.011148					_CTSFinishedSubtracting:
.011148	8a		txa				txa 								; convert to ASCII.
.011149	20 57 11	jsr $011157			jsr 	CTSOutputHexDigit 			; write that out.
.01114c	80 d4		bra $011122			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.01114e					_CTSExit:
.01114e	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011150	20 57 11	jsr $011157			jsr 	CTSOutputHexDigit
.011153	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011155	fa		plx				plx 								; restore X.
.011156	60		rts				rts
.011157					CTSOutputHexDigit:
.011157	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01115a	90 04		bcc $011160			bcc 	_CTSNotLetter
.01115c	18		clc				clc
.01115d	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011160					_CTSNotLetter:
.011160	18		clc				clc
.011161	69 30 00	adc #$0030			adc 	#48
.011164					CTSOutputA:
.011164	5a		phy				phy 								; save Y, set Y to current pointer
.011165	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011167	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01116a	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01116c	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.01116e	1a		inc a				inc 	a
.01116f	92 18		sta ($18)			sta 	(DStartTempString)
.011171	c2 20		rep #$20			rep 	#$20
.011173	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011175	7a		ply				ply 								; restore Y and exit.
.011176	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011177					Function_INSTR:
.011177	20 16 06	jsr $010616			jsr 	ResetTypeInteger 			; returns a integer
.01117a	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.01117d	48		pha				pha 								; save string to search
.01117e	20 ed 05	jsr $0105ed			jsr 	ExpectComma
.011181	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.011184	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket
.011187	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011189	68		pla				pla
.01118a	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.01118c	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.01118e	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011190	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011192	38		sec				sec
.011193	b2 0c		lda ($0c)			lda 	(DTemp2)
.011195	f2 08		sbc ($08)			sbc		(DTemp1)
.011197	c2 20		rep #$20			rep 	#$20
.011199	90 2c		bcc $0111c7			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.01119b	29 ff 00	and #$00ff			and 	#$00FF
.01119e	1a		inc a				inc 	a
.01119f	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111a1	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111a3	29 ff 00	and #$00ff			and 	#$00FF
.0111a6	f0 22		beq $0111ca			beq 	_FINSError
.0111a8					_FINSLoop:
.0111a8	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111aa	1a		inc a				inc 	a
.0111ab	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111ad	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111af	29 ff 00	and #$00ff			and 	#$00FF
.0111b2	a8		tay				tay									; start comparing at index 1.
.0111b3					_FINSCompare:
.0111b3	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111b5	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111b7	29 ff 00	and #$00ff			and 	#$00FF
.0111ba	d0 05		bne $0111c1			bne 	_FINSNext
.0111bc	88		dey				dey
.0111bd	d0 f4		bne $0111b3			bne 	_FINSCompare
.0111bf	80 08		bra $0111c9			bra 	_FINSExit
.0111c1					_FINSNext:
.0111c1	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111c3	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111c5	d0 e1		bne $0111a8			bne 	_FINSLoop
.0111c7					_FINSFail:
.0111c7	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111c9					_FINSExit:
.0111c9	60		rts				rts
.0111ca					_FINSError:
.0111ca	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0111cd	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111d5	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0111de					Function_UPPER:
.0111de	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.0111e1	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0111e4	48		pha				pha
.0111e5	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; close call.
.0111e8	20 2f 07	jsr $01072f			jsr		StringTempAllocate 			; allocate memory for it
.0111eb	68		pla				pla
.0111ec	20 69 07	jsr $010769			jsr 	StringCreateCopy 			; create a copy of it.
.0111ef	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111f1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111f3	a8		tay				tay 								; address in Y
.0111f4	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111f6	da		phx				phx 								; save X
.0111f7	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111f9	29 ff 00	and #$00ff			and 	#$00FF
.0111fc	f0 20		beq $01121e			beq 	_FUPExit
.0111fe	aa		tax				tax 								; put in X
.0111ff					_FUPLoop:
.0111ff	c8		iny				iny 								; increment and load character
.011200	b9 00 00	lda $0000,y			lda 	$0000,y
.011203	29 ff 00	and #$00ff			and 	#$00FF
.011206	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011209	90 10		bcc $01121b			bcc 	_FUPNoChange
.01120b	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01120e	b0 0b		bcs $01121b			bcs 	_FUPNoChange
.011210	38		sec				sec 								; shift case
.011211	e9 20 00	sbc #$0020			sbc 	#32
.011214	e2 20		sep #$20			sep 	#$20 						; write back
.011216	99 00 00	sta $0000,y			sta 	$0000,y
.011219	c2 20		rep #$20			rep 	#$20
.01121b					_FUPNoChange:
.01121b	ca		dex				dex 								; do X times
.01121c	d0 e1		bne $0111ff			bne 	_FUPLoop
.01121e					_FUPExit:
.01121e	fa		plx				plx 								; restore X
.01121f	60		rts				rts
.011220					Function_LOWER:
.011220	20 1e 06	jsr $01061e			jsr 	ResetTypeString 			; returns a string.
.011223	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011226	48		pha				pha
.011227	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; close call.
.01122a	20 2f 07	jsr $01072f			jsr		StringTempAllocate 			; allocate memory for it
.01122d	68		pla				pla
.01122e	20 69 07	jsr $010769			jsr 	StringCreateCopy 			; create a copy of it.
.011231	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011233	95 00		sta $00,x			sta 	EXSValueL+0,x
.011235	a8		tay				tay 								; address in Y
.011236	74 20		stz $20,x			stz 	EXSValueH+0,x
.011238	da		phx				phx 								; save X
.011239	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01123b	29 ff 00	and #$00ff			and 	#$00FF
.01123e	f0 20		beq $011260			beq 	_FLOExit
.011240	aa		tax				tax 								; put in X
.011241					_FLOLoop:
.011241	c8		iny				iny 								; increment and load character
.011242	b9 00 00	lda $0000,y			lda 	$0000,y
.011245	29 ff 00	and #$00ff			and 	#$00FF
.011248	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01124b	90 10		bcc $01125d			bcc 	_FLONoChange
.01124d	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011250	b0 0b		bcs $01125d			bcs 	_FLONoChange
.011252	18		clc				clc 								; shift case
.011253	69 20 00	adc #$0020			adc 	#32
.011256	e2 20		sep #$20			sep 	#$20 						; write back
.011258	99 00 00	sta $0000,y			sta 	$0000,y
.01125b	c2 20		rep #$20			rep 	#$20
.01125d					_FLONoChange:
.01125d	ca		dex				dex 								; do X times
.01125e	d0 e1		bne $011241			bne 	_FLOLoop
.011260					_FLOExit:
.011260	fa		plx				plx 								; restore X
.011261	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011262					Function_Let:
.011262	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011264	48		pha				pha  								; save on stack for later.
.011265	20 96 03	jsr $010396			jsr 	VariableFind 				; find the variable
.011268	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01126a	b0 1c		bcs $011288			bcs 	_FLetFound 					; skip if found.
.01126c	68		pla				pla 								; get and push the first token again.
.01126d	48		pha				pha
.01126e	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011271	d0 60		bne $0112d3			bne 	_FLError					; arrays, so this causes an error.
.011273	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011275	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011278	20 40 04	jsr $010440			jsr 	VariableCreate 				; create it.
.01127b	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01127d					_FLSkipToken:
.01127d	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01127f	e6 06		inc $06				inc 	DCodePtr
.011281	e6 06		inc $06				inc 	DCodePtr
.011283	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011286	d0 f5		bne $01127d			bne 	_FLSkipToken
.011288					_FLetFound:
.011288	68		pla				pla 								; get and save the first token.
.011289	48		pha				pha
.01128a	a8		tay				tay 								; put it in Y
.01128b	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.01128e	f0 07		beq $011297			beq 	_FLetNotArray
.011290	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011292	20 0d 04	jsr $01040d			jsr 	VariableSubscript			; index calculation
.011295	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011297					_FLetNotArray:
.011297	7a		ply				ply 								; get the first token into Y
.011298	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01129a	48		pha				pha
.01129b	5a		phy				phy 								; save the first token on the stack.
.01129c	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.01129f	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112a1	d0 23		bne $0112c6			bne 	_FLetMissingEquals
.0112a3	e6 06		inc $06				inc 	DCodePtr
.0112a5	e6 06		inc $06				inc 	DCodePtr
.0112a7	68		pla				pla 								; restore the first token.
.0112a8	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112ab	d0 0f		bne $0112bc			bne 	_FLetString 				; skip if string.
.0112ad	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.0112b0	7a		ply				ply 								; get address in Y
.0112b1	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112b3	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112b6	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112b8	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112bb	60		rts				rts
.0112bc					_FLetString:
.0112bc	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112bf	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112c1	7a		ply				ply 								; get address we are overwriting.
.0112c2	20 71 06	jsr $010671			jsr 	StringReassign 				; reassign that address
.0112c5	60		rts				rts
.0112c6					_FLetMissingEquals:
.0112c6	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0112c9	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112d1	3d 00
.0112d3					_FLError:
.0112d3	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0112d6	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112de	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.0112e6					Function_PROC:
.0112e6	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112e9	18		clc				clc
.0112ea	65 02		adc $02				adc 	DBaseAddress
.0112ec	aa		tax				tax 								; X is used to track it
.0112ed					_FPROLoop:
.0112ed	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112f0	f0 56		beq $011348			beq 	_FPROUnknown
.0112f2	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112f5	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.0112f8	f0 08		beq $011302			beq 	_FPROFoundDefProc
.0112fa					_FPRONext:
.0112fa	8a		txa				txa 								; follow the link.
.0112fb	18		clc				clc
.0112fc	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112ff	aa		tax				tax
.011300	80 eb		bra $0112ed			bra 	_FPROLoop
.011302					_FPROFoundDefProc:
.011302	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.011305	d2 06		cmp ($06)			cmp 	(DCodePtr)
.011307	d0 f1		bne $0112fa			bne 	_FPRONext
.011309	8a		txa				txa 								; DTemp1 points to the token.
.01130a	18		clc				clc
.01130b	69 06 00	adc #$0006			adc 	#6
.01130e	85 08		sta $08				sta 	DTemp1
.011310	a0 00 00	ldy #$0000			ldy 	#0
.011313					_FPROCompare:
.011313	b1 08		lda ($08),y			lda 	(DTemp1),y
.011315	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.011317	d0 e1		bne $0112fa			bne 	_FPRONext 					; fails, different
.011319	c8		iny				iny
.01131a	c8		iny				iny
.01131b	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.01131e	d0 f3		bne $011313			bne 	_FPROCompare
.011320	98		tya				tya 								; this is the offset to the next element
.011321	18		clc				clc
.011322	65 08		adc $08				adc 	DTemp1
.011324	48		pha				pha 								; push the next command on the stack
.011325	da		phx				phx 								; push the record address on the stack.
.011326	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011328	98		tya				tya 								; work out the return address
.011329	18		clc				clc
.01132a	65 06		adc $06				adc 	DCodePtr
.01132c	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01132e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011330	95 04		sta $04,x			sta 	$04,x
.011332	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011335	95 06		sta $06,x			sta 	$06,x
.011337	8a		txa				txa 								; advance stack by 6.
.011338	18		clc				clc
.011339	69 06 00	adc #$0006			adc 	#6
.01133c	85 2a		sta $2a				sta 	DStack
.01133e	7a		ply				ply 								; line record address
.01133f	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011342	85 22		sta $22				sta 	DLineNumber
.011344	68		pla				pla 								; next command
.011345	85 06		sta $06				sta 	DCodePtr
.011347	60		rts				rts
.011348					_FPROUnknown:
.011348	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>01134b	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011353	70 72 6f 63 65 64 75 72 65 00
.01135d					Function_ENDPROC:
.01135d	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.01135f	b5 00		lda $00,x			lda 	$00,x
.011361	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.011364	b0 2e		bcs $011394			bcs 	_FENPUnstack
.011366	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011369	d0 11		bne $01137c			bne 	_FENPFail
.01136b	8a		txa				txa 								; unpick stack.
.01136c	38		sec				sec
.01136d	e9 06 00	sbc #$0006			sbc 	#6
.011370	85 2a		sta $2a				sta 	DStack
.011372	aa		tax				tax
.011373	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011375	85 06		sta $06				sta 	DCodePtr
.011377	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011379	85 22		sta $22				sta 	DLineNumber
.01137b	60		rts				rts
.01137c					_FENPFail:
.01137c	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>01137f	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011387	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.011394					_FENPUnstack:
.011394	20 35 14	jsr $011435			jsr 	LocalRestore 				; restore off the stack.
.011397	80 c4		bra $01135d			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.011399					Command_LOCAL:
.011399	20 c3 13	jsr $0113c3			jsr 	LocalProcessVariable 		; make one variable 'local'
.01139c	90 0e		bcc $0113ac			bcc 	_CLOFail
.01139e	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.0113a0	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113a3	d0 06		bne $0113ab			bne 	_CLOExit
.0113a5	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113a7	e6 06		inc $06				inc 	DCodePtr
.0113a9	80 ee		bra $011399			bra 	Command_Local
.0113ab					_CLOExit:
.0113ab	60		rts				rts
.0113ac					_CLOFail:
.0113ac	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0113af	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113b7	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113c3					LocalProcessVariable:
.0113c3	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113c5	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113c8	90 56		bcc $011420			bcc 	_LPVFail
.0113ca	29 00 10	and #$1000			and 	#IDArrayMask
.0113cd	d0 51		bne $011420			bne 	_LPVFail
.0113cf	b2 06		lda ($06)			lda 	(DCodePtr) 					; save the type on the stack.
.0113d1	48		pha				pha
.0113d2	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find the variable
.0113d5	b0 13		bcs $0113ea			bcs 	_LPVFound 					; if found, A points to the data.
.0113d7	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0113d9	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.0113dc	20 40 04	jsr $010440			jsr 	VariableCreate 				; create it.
.0113df					_LPVSkipToken:
.0113df	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0113e1	e6 06		inc $06				inc 	DCodePtr
.0113e3	e6 06		inc $06				inc 	DCodePtr
.0113e5	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0113e8	d0 f5		bne $0113df			bne 	_LPVSkipToken
.0113ea					_LPVFound:
.0113ea	a8		tay				tay 								; address in Y
.0113eb	a6 2a		ldx $2a				ldx 	DStack 						; stack pointer in X
.0113ed	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.0113ef	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.0113f2	95 04		sta $04,x			sta 	$04,x
.0113f4	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.0113f7	95 06		sta $06,x			sta 	$06,x
.0113f9	a9 00 00	lda #$0000			lda 	#$0000 						; clear the old value
.0113fc	99 00 00	sta $0000,y			sta 	$0000,y
.0113ff	99 02 00	sta $0002,y			sta 	$0002,y
.011402	68		pla				pla
.011403	29 00 e0	and #$e000			and 	#$C000+IDTypeMask 			; $C000 if number, $E000 if string.
.011406	95 08		sta $08,x			sta 	$08,x						; save offset 6
.011408	c9 00 c0	cmp #$c000			cmp 	#$C000
.01140b	f0 09		beq $011416			beq 	_LPVNotString
.01140d	a9 00 00	lda #$0000			lda 	#0
.011410	99 00 00	sta $0000,y			sta 	$0000,y 					; make it an empty string.
.011413	99 02 00	sta $0002,y			sta 	$0002,y
.011416					_LPVNotString:
.011416	8a		txa				txa
.011417	18		clc				clc
.011418	69 08 00	adc #$0008			adc 	#8
.01141b	85 2a		sta $2a				sta 	DStack
.01141d	38		sec				sec
.01141e	98		tya				tya 								; return the data address.
.01141f	60		rts				rts
.011420					_LPVFail:
.011420	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011423	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>01142b	6c 20 43 6f 6d 6d 61 6e 64 00
.011435					LocalRestore:
.011435	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011437	38		sec				sec
.011438	e9 08 00	sbc #$0008			sbc 	#8
.01143b	85 2a		sta $2a				sta 	DStack
.01143d	aa		tax				tax
.01143e	b5 08		lda $08,x			lda 	$08,x 						; look at type.
.011440	c9 00 c0	cmp #$c000			cmp 	#$C000
.011443	f0 09		beq $01144e			beq 	_LRRestore					; skip if number.
.011445	b5 02		lda $02,x			lda 	$02,x 						; release the string that was there if any.
.011447	a8		tay				tay
.011448	b9 00 00	lda $0000,y			lda 	$0000,y
.01144b	20 19 07	jsr $010719			jsr 	StringRelease
.01144e					_LRRestore:
.01144e	b5 02		lda $02,x			lda 	$02,x 						; restore a string.
.011450	a8		tay				tay
.011451	b5 04		lda $04,x			lda 	$04,x
.011453	99 00 00	sta $0000,y			sta 	$0000,y
.011456	b5 06		lda $06,x			lda 	$06,x
.011458	99 02 00	sta $0002,y			sta 	$0002,y
.01145b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.01145c					Command_List:
.01145c	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.01145f	20 2f 07	jsr $01072f		jsr 	StringTempAllocate
.011462	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011464	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011466	64 2e		stz $2e			stz 	DIndent2
.011468	64 32		stz $32			stz 	DTemp4+0 						; low number
.01146a	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01146d	85 34		sta $34			sta 	DTemp4+2 						; high number.
.01146f	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011471	f0 3b		beq $0114ae		beq 	_CLIList
.011473	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011476	f0 36		beq $0114ae		beq 	_CLIList
.011478	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01147b	f0 13		beq $011490		beq 	_CLIComma
.01147d	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.011480	c0 00 00	cpy #$0000		cpy 	#0
.011483	d0 21		bne $0114a6		bne 	_CLIError
.011485	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011487	85 34		sta $34			sta 	DTemp4+2
.011489	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01148b	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.01148e	d0 1e		bne $0114ae		bne 	_CLIList
.011490					_CLIComma:
.011490	20 ed 05	jsr $0105ed		jsr 	ExpectComma 					; skip comma
.011493	b2 06		lda ($06)		lda 	(DCodePtr)
.011495	f0 12		beq $0114a9		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.011497	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01149a	f0 0d		beq $0114a9		beq 	_CLIToEnd
.01149c	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.01149f	85 34		sta $34			sta 	DTemp4+2
.0114a1	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0114a4	f0 08		beq $0114ae		beq 	_CLIList
.0114a6					_CLIError:
.0114a6	82 11 f1	brl $0105ba		brl 	SyntaxError
.0114a9					_CLIToEnd:
.0114a9	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0114ac	85 34		sta $34			sta 	DTemp4+2
.0114ae					_CLIList:
.0114ae	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114b1	18		clc			clc
.0114b2	65 02		adc $02			adc 	DBaseAddress
.0114b4	a8		tay			tay 									; put in Y
.0114b5					_CLINextLine:
.0114b5	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114b8	f0 29		beq $0114e3		beq 	_CLIExit
.0114ba	20 4b 16	jsr $01164b		jsr 	ScanIndent  					; scan for formatting.
.0114bd	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114c0	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114c2	90 14		bcc $0114d8		bcc 	_CLIFollowLink
.0114c4	c5 34		cmp $34			cmp 	DTemp4+2
.0114c6	f0 02		beq $0114ca		beq 	_CLIShowLine
.0114c8	b0 0e		bcs $0114d8		bcs 	_CLIFollowLink
.0114ca					_CLIShowLine:
.0114ca	a5 30		lda $30			lda 	DListBuffer
.0114cc	20 e6 14	jsr $0114e6		jsr 	Detokenise 						; detokenise it
.0114cf	5a		phy			phy
.0114d0	a8		tay			tay 									; print buffer out
.0114d1	20 44 06	jsr $010644		jsr 	PrintBasicString
.0114d4	20 90 1d	jsr $011d90		jsr 	HWNewLine
.0114d7	7a		ply			ply 									; get address
.0114d8					_CLIFollowLink:
.0114d8	98		tya			tya 									; follow link
.0114d9	18		clc			clc
.0114da	79 00 00	adc $0000,y		adc 	$0000,y
.0114dd	a8		tay			tay
.0114de	20 ac 1d	jsr $011dac		jsr 	HWCheckBreak 					; break key pressed.
.0114e1	f0 d2		beq $0114b5		beq 	_CLINextLine
.0114e3					_CLIExit:
.0114e3	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114e5	60		rts			rts
.0114e6					Detokenise:
.0114e6	48		pha			pha
.0114e7	da		phx			phx
.0114e8	5a		phy			phy
.0114e9	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0114eb	1a		inc a			inc 	a
.0114ec	85 1a		sta $1a			sta 	DCurrentTempString
.0114ee	64 1c		stz $1c			stz		DConstantShift
.0114f0	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114f3	92 18		sta ($18)		sta 	(DStartTempString)
.0114f5	5a		phy			phy 									; save Y
.0114f6	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0114f9	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0114fc	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114ff	20 da 10	jsr $0110da		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011502	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.011504	c5 2e		cmp $2e			cmp 	DIndent2
.011506	90 02		bcc $01150a		bcc 	_DTKSmaller
.011508	a5 2e		lda $2e			lda 	DIndent2
.01150a					_DTKSmaller:
.01150a	0a		asl a			asl 	a
.01150b	69 06 00	adc #$0006		adc 	#6
.01150e	85 08		sta $08			sta 	DTemp1
.011510					_DTKPadLineNo:
.011510	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011513	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.011516	b2 18		lda ($18)		lda 	(DStartTempString)
.011518	29 ff 00	and #$00ff		and 	#$00FF
.01151b	c5 08		cmp $08			cmp 	DTemp1
.01151d	d0 f1		bne $011510		bne 	_DTKPadLineNo
.01151f	68		pla			pla 									; get pointer
.011520	18		clc			clc 									; point to start of line
.011521	69 04 00	adc #$0004		adc 	#4
.011524	a8		tay			tay 									; put back in Y.
.011525					_DTKMainLoop:
.011525	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011528	d0 04		bne $01152e		bne 	_DTKNotZero 					; if zero, return.
.01152a	7a		ply			ply
.01152b	fa		plx			plx
.01152c	68		pla			pla
.01152d	60		rts			rts
.01152e					_DTKNotZero:
.01152e	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011531	b0 1c		bcs $01154f		bcs 	_DTKNotString
.011533	5a		phy			phy										; save token address on stack.
.011534	c8		iny			iny 									; skip first token
.011535	c8		iny			iny
.011536	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.011539	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.01153c	98		tya			tya 									; copy the string out.
.01153d	20 69 07	jsr $010769		jsr 	StringCreateCopy
.011540	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011543	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.011546	68		pla			pla 									; get token, which is its own offset
.011547	a8		tay			tay
.011548	18		clc			clc
.011549	79 00 00	adc $0000,y		adc 	$0000,y
.01154c	a8		tay			tay
.01154d	80 d6		bra $011525		bra 	_DTKMainLoop
.01154f					_DTKNotString:
.01154f	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011552	b0 09		bcs $01155d		bcs 	_DTKNotShift
.011554	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011557	85 1c		sta $1c			sta 	DConstantShift
.011559	c8		iny			iny 									; skip token.
.01155a	c8		iny			iny
.01155b	80 c8		bra $011525		bra 	_DTKMainLoop
.01155d					_DTKNotShift:
.01155d	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011560	b0 07		bcs $011569		bcs 	_DTKNotKeyword
.011562	c8		iny			iny 									; skip over token
.011563	c8		iny			iny
.011564	20 e3 15	jsr $0115e3		jsr 	_DTKDecodeKeyword 				; decode it.
.011567	80 bc		bra $011525		bra 	_DTKMainLoop
.011569					_DTKNotKeyword:
.011569	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01156c	b0 18		bcs $011586		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.01156e	5a		phy			phy 									; save pointer
.01156f	38		sec			sec  									; shift it in the range 0-32767
.011570	e9 00 40	sbc #$4000		sbc 	#$4000
.011573	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011574	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011576	6a		ror a			ror 	a 								; rotate that into the constant value
.011577	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011579	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01157c	20 da 10	jsr $0110da		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01157f	64 1c		stz $1c			stz 	DConstantShift
.011581	7a		ply			ply 									; restore pointer
.011582	c8		iny			iny 									; skip token.
.011583	c8		iny			iny
.011584	80 9f		bra $011525		bra 	_DTKMainLoop
.011586					_DTKIdentifier:
.011586	48		pha			pha 									; save token for typing at end
.011587					_DTKILoop:
.011587	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01158a	20 b3 15	jsr $0115b3		jsr 	_DTKIDecodeToken 				; decode it.
.01158d	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011590	c8		iny			iny 									; skip it
.011591	c8		iny			iny
.011592	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011595	d0 f0		bne $011587		bne 	_DTKILoop
.011597	68		pla			pla 									; add $( as required.
.011598	48		pha			pha 									; comes from the first token.
.011599	29 00 20	and #$2000		and 	#IDTypeMask
.01159c	f0 06		beq $0115a4		beq 	_DTKINotString
.01159e	a9 24 00	lda #$0024		lda 	#"$"
.0115a1	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.0115a4					_DTKINotString:
.0115a4	68		pla			pla
.0115a5	29 00 10	and #$1000		and 	#IDArrayMask
.0115a8	f0 06		beq $0115b0		beq 	_DTKINotArray
.0115aa	a9 28 00	lda #$0028		lda 	#"("
.0115ad	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.0115b0					_DTKINotArray:
.0115b0	82 72 ff	brl $011525		brl 	_DTKMainLoop
.0115b3					_DTKIDecodeToken:
.0115b3	5a		phy			phy
.0115b4	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115b7	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115ba					_DTKIDivide:
.0115ba	38		sec			sec
.0115bb	e9 2d 00	sbc #$002d		sbc 	#45
.0115be	c8		iny			iny
.0115bf	b0 f9		bcs $0115ba		bcs 	_DTKIDivide
.0115c1	69 2d 00	adc #$002d		adc 	#45
.0115c4	20 cd 15	jsr $0115cd		jsr 	_DTKIOutA 						; output low.
.0115c7	98		tya			tya
.0115c8	20 cd 15	jsr $0115cd		jsr 	_DTKIOutA 						; output high
.0115cb	7a		ply			ply
.0115cc	60		rts			rts
.0115cd					_DTKIOutA:
.0115cd	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115d0	f0 10		beq $0115e2		beq 	_DTKIOutExit
.0115d2	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115d5	90 04		bcc $0115db		bcc 	_DTKIOutAlpha
.0115d7	38		sec			sec  									; adjust for 0-9
.0115d8	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115db					_DTKIOutAlpha:
.0115db	18		clc			clc										; adjust for A-Z
.0115dc	69 60 00	adc #$0060		adc 	#96
.0115df	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.0115e2					_DTKIOutExit:
.0115e2	60		rts			rts
.0115e3					_DTKDecodeKeyword:
.0115e3	48		pha			pha
.0115e4	da		phx			phx
.0115e5	5a		phy			phy
.0115e6	a8		tay			tay 									; save token ID in Y
.0115e7	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115ea	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115ed	48		pha			pha 									; save this flag on a stack
.0115ee	5a		phy			phy 									; save the token ID
.0115ef	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115f2	d0 19		bne $01160d		bne 	_DTKNotSpecial1
.0115f4	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115f6	88		dey			dey
.0115f7	b9 00 00	lda $0000,y		lda 	$0000,y
.0115fa	29 ff 00	and #$00ff		and 	#$00FF
.0115fd	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011600	f0 0b		beq $01160d		beq 	_DTKNotSpecial1
.011602	c9 3a 00	cmp #$003a		cmp 	#":"
.011605	f0 06		beq $01160d		beq 	_DTKNotSpecial1
.011607	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.01160a	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.01160d					_DTKNotSpecial1:
.01160d	68		pla			pla
.01160e	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011611	a8		tay			tay 									; into Y.
.011612	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.011615					_DTKDWorkThrough:
.011615	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.011616	f0 0f		beq $011627		beq 	_DTKDFound
.011618	86 08		stx $08			stx 	DTemp1
.01161a	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.01161e	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011621	18		clc			clc
.011622	65 08		adc $08			adc 	DTemp1
.011624	aa		tax			tax
.011625	80 ee		bra $011615		bra 	_DTKDWorkThrough
.011627					_DTKDFound:
.011627	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.01162b	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.01162e	3a		dec a			dec 	a
.01162f	a8		tay			tay 									; put in Y
.011630					_DTKOut:
.011630	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.011634	29 ff 00	and #$00ff		and 	#$00FF
.011637					_DTKNotLC:
.011637	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.01163a	e8		inx			inx
.01163b	88		dey			dey
.01163c	d0 f2		bne $011630		bne 	_DTKOut
.01163e	68		pla			pla 									; trailing space.
.01163f	d0 06		bne $011647		bne 	_DTKNotSpecial2
.011641	a9 20 00	lda #$0020		lda 	#" "
.011644	20 5b 07	jsr $01075b		jsr 	StringWriteCharacter
.011647					_DTKNotSpecial2:
.011647	7a		ply			ply
.011648	fa		plx			plx
.011649	68		pla			pla
.01164a	60		rts			rts
.01164b					ScanIndent:
.01164b	48		pha			pha
.01164c	5a		phy			phy
.01164d	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.01164f	85 2e		sta $2e			sta 	DIndent2
.011651	98		tya			tya
.011652	18		clc			clc 									; point to code.
.011653	69 04 00	adc #$0004		adc 	#4
.011656	a8		tay			tay
.011657					_SILoop:
.011657	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01165a	f0 35		beq $011691		beq 	_SIExit
.01165c	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.01165f	b0 08		bcs $011669		bcs 	_SICheckKeyword
.011661	98		tya			tya 									; skip string.
.011662	18		clc			clc
.011663	79 00 00	adc $0000,y		adc 	$0000,y
.011666	a8		tay			tay
.011667	80 ee		bra $011657		bra 	_SILoop
.011669					_SICheckKeyword:
.011669	29 00 e0	and #$e000		and 	#$E000
.01166c	c9 00 20	cmp #$2000		cmp 	#$2000
.01166f	f0 04		beq $011675		beq 	_SIFoundKeyword
.011671					_SIAdvance:
.011671	c8		iny			iny 									; if not, loop round.
.011672	c8		iny			iny
.011673	80 e2		bra $011657		bra 	_SILoop
.011675					_SIFoundKeyword:
.011675	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011678	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01167b	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.01167e	f0 0d		beq $01168d		beq 	_SIKeyPlus
.011680	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011683	d0 ec		bne $011671		bne 	_SIAdvance
.011685	c6 2c		dec $2c			dec 	DIndent
.011687	10 e8		bpl $011671		bpl 	_SIAdvance
.011689	64 2c		stz $2c			stz 	DIndent
.01168b	80 e4		bra $011671		bra 	_SIAdvance
.01168d					_SIKeyPlus:
.01168d	e6 2c		inc $2c			inc 	DIndent
.01168f	80 e0		bra $011671		bra 	_SIAdvance
.011691					_SIExit:
.011691	7a		ply			ply
.011692	68		pla			pla
.011693	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011694					Function_PRINT:
.011694	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011696	f0 33		beq $0116cb			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011698	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.01169b	f0 2e		beq $0116cb			beq 	_FPRExitCR
.01169d	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.0116a0	f0 23		beq $0116c5			beq 	_FPRSkipLoop
.0116a2	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.0116a5	f0 1b		beq $0116c2			beq 	_FPRNewLine
.0116a7	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0116aa	f0 11		beq $0116bd			beq 	_FPRTab
.0116ac					_FPRExpression:
.0116ac	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.0116af	b0 06		bcs $0116b7			bcs 	_FPRHaveString
.0116b1	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116b4	20 d2 10	jsr $0110d2			jsr 	ConvertToString
.0116b7					_FPRHaveString:
.0116b7	a8		tay				tay 								; print the basic String.
.0116b8	20 44 06	jsr $010644			jsr 	PrintBASICString
.0116bb	80 d7		bra $011694			bra 	Function_Print 				; and go round again.
.0116bd					_FPRTab:
.0116bd	20 a5 1d	jsr $011da5			jsr 	HWTab
.0116c0	80 03		bra $0116c5			bra 	_FPRSkipLoop
.0116c2					_FPRNewLine:
.0116c2	20 90 1d	jsr $011d90			jsr 	HWNewLine
.0116c5					_FPRSkipLoop:
.0116c5	e6 06		inc $06				inc 	DCodePtr
.0116c7	e6 06		inc $06				inc 	DCodePtr
.0116c9	80 c9		bra $011694			bra 	Function_Print
.0116cb					_FPRExitCR:
.0116cb	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116cd	88		dey				dey
.0116ce	88		dey				dey
.0116cf	b9 00 00	lda $0000,y			lda 	$0000,y
.0116d2	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116d5	f0 08		beq $0116df			beq 	_FPRExit
.0116d7	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116da	f0 03		beq $0116df			beq 	_FPRExit
.0116dc	20 90 1d	jsr $011d90			jsr 	HWNewLine 					; print a new line.
.0116df					_FPRExit:
.0116df	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0116e0					Function_IF:
.0116e0	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.0116e3	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116e5	05 08		ora $08				ora 	DTemp1
.0116e7	a8		tay				tay 								; success flag in Y.
.0116e8	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116ea	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.0116ed	d0 32		bne $011721			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116ef	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116f1	e6 06		inc $06				inc 	DCodePtr
.0116f3	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116f6	f0 0f		beq $011707			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0116f8	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0116fa	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116fd	90 21		bcc $011720			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116ff	c9 00 c0	cmp #$c000			cmp 	#$C000
.011702	b0 1c		bcs $011720			bcs 	_FIFContinue
.011704	4c 96 19	jmp $011996			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.011707					_FIFEndOfLine:
.011707	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011709	f0 15		beq $011720			beq 	_FIFContinue 				; if done so, continue.
.01170b	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.01170e	90 06		bcc $011716			bcc 	_FIFStringConstant
.011710	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011712	e6 06		inc $06				inc 	DCodePtr
.011714	80 f1		bra $011707			bra 	_FIFEndOfLine
.011716					_FIFStringConstant:
.011716	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011719	18		clc				clc
.01171a	65 06		adc $06				adc 	DCodePtr
.01171c	85 06		sta $06				sta 	DCodePtr
.01171e	80 e7		bra $011707			bra 	_FIFEndOfLine
.011720					_FIFContinue:
.011720	60		rts				rts
.011721					_FIFExtended:
.011721	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011723	e6 2a		inc $2a				inc 	DStack
.011725	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.011728	a6 2a		ldx $2a				ldx 	DStack
.01172a	95 00		sta $00,x			sta 	$00,x
.01172c	98		tya				tya 								; see if the test was passed.
.01172d	f0 01		beq $011730			beq 	_FIXSkip 					; if zero then it has failed.
.01172f	60		rts				rts 								; test passed, so continue executing
.011730					_FIXSkip:
.011730	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011733	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.011736	20 96 17	jsr $011796			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.011739	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01173b	e6 06		inc $06				inc 	DCodePtr
.01173d	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011740	d0 04		bne $011746			bne 	_FIXNoThrow
.011742	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011744	c6 2a		dec $2a				dec 	DStack
.011746					_FIXNoThrow:
.011746	60		rts				rts
.011747					Handler_ELSE:
.011747	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011749	b5 00		lda $00,x			lda 	$00,x
.01174b	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01174e	d0 12		bne $011762			bne 	_HEBadStructure
.011750	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011753	a2 00 00	ldx #$0000			ldx 	#$0000
.011756	20 96 17	jsr $011796			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011759	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01175b	e6 06		inc $06				inc 	DCodePtr
.01175d	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01175f	c6 2a		dec $2a				dec 	DStack
.011761	60		rts				rts
.011762					_HEBadStructure:
.011762	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011765	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01176d	68 6f 75 74 20 49 66 00
.011775					Handler_ENDIF:
.011775	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011777	b5 00		lda $00,x			lda 	$00,x
.011779	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01177c	d0 05		bne $011783			bne 	_HEIBadStructure
.01177e	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011780	c6 2a		dec $2a				dec 	DStack
.011782	60		rts				rts
.011783					_HEIBadStructure:
.011783	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011786	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01178e	68 6f 75 74 20 49 66 00
.011796					ScanForwardLevel:
.011796	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011798	86 0a		stx $0a				stx 	DTemp1+2
.01179a	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01179c	85 0c		sta $0c				sta 	DTemp2
.01179e	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0117a1					_SFLLoop:
.0117a1	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0117a4	d0 0d		bne $0117b3			bne 	_SFLNoCheck 				; we're in a substructure.
.0117a6	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0117a8	f0 09		beq $0117b3			beq 	_SFLNoCheck 				; don't check zero
.0117aa	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0117ac	f0 04		beq $0117b2			beq 	_SFLFound
.0117ae	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117b0	d0 01		bne $0117b3			bne 	_SFLNoCheck
.0117b2					_SFLFound:
.0117b2	60		rts				rts
.0117b3					_SFLNoCheck:
.0117b3	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117b5	f0 4f		beq $011806			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117b7	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117ba	90 40		bcc $0117fc			bcc 	_SFLSkipString 				; then handle that.
.0117bc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117be	e6 06		inc $06				inc 	DCodePtr
.0117c0	a8		tay				tay 								; put token in Y temporarily.
.0117c1	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117c4	c9 00 20	cmp #$2000			cmp 	#$2000
.0117c7	d0 d8		bne $0117a1			bne 	_SFLLoop
.0117c9	98		tya				tya 								; get the token back.
.0117ca	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117cd	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117d0	f0 cf		beq $0117a1			beq 	_SFLLoop
.0117d2	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117d5	90 ca		bcc $0117a1			bcc 	_SFLLoop
.0117d7	e8		inx				inx 								; increment the level.
.0117d8	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117db	f0 c4		beq $0117a1			beq 	_SFLLoop
.0117dd	ca		dex				dex 								; decrement the level
.0117de	ca		dex				dex 								; one overdoes the previous inx.
.0117df	10 c0		bpl $0117a1			bpl 	_SFLLoop 					; if gone -ve then error.
.0117e1					_SFLError:
.0117e1	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117e3	85 22		sta $22				sta 	DLineNumber
.0117e5	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0117e8	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117f0	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0117fc					_SFLSkipString:
.0117fc	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117ff	18		clc				clc
.011800	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011802	85 06		sta $06				sta 	DCodePtr
.011804	80 9b		bra $0117a1			bra 	_SFLLoop 					; go round again.
.011806					_SFLNextLine:
.011806	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011808	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.01180b	f0 d4		beq $0117e1			beq 	_SFLError 					; if zero, then there's no more code to search.
.01180d	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011810	85 22		sta $22				sta 	DLineNumber
.011812	18		clc				clc
.011813	a5 06		lda $06				lda 	DCodePtr
.011815	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011818	85 06		sta $06				sta 	DCodePtr
.01181a	80 85		bra $0117a1			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.01181c					Command_FOR:
.01181c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.01181e	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011821	d0 60		bne $011883			bne		_CFOBad
.011823	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find variable
.011826	b0 15		bcs $01183d			bcs 	_CFOExists
.011828	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01182a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01182d	20 40 04	jsr $010440			jsr 	VariableCreate 				; create it.
.011830	48		pha				pha 								; save on stack
.011831					_CFOSkipToken:
.011831	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011833	e6 06		inc $06				inc 	DCodePtr
.011835	e6 06		inc $06				inc 	DCodePtr
.011837	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01183a	d0 f5		bne $011831			bne 	_CFOSkipToken
.01183c	68		pla				pla 								; restore address
.01183d					_CFOExists:
.01183d	48		pha				pha 								; push variable address on stack
.01183e	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011841	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.011844	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.011847	bb		tyx				tyx 								; put high value in X
.011848	7a		ply				ply 								; address in Y
.011849	99 00 00	sta $0000,y			sta 	$0000,y
.01184c	8a		txa				txa
.01184d	99 02 00	sta $0002,y			sta 	$0002,y
.011850	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011853	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.011856	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011858	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01185a	95 02		sta $02,x			sta 	$02,x
.01185c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01185e	95 04		sta $04,x			sta 	$04,x
.011860	98		tya				tya 								; save variable address at +6
.011861	95 06		sta $06,x			sta 	$06,x
.011863	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.011866	95 08		sta $08,x			sta 	$08,x
.011868	8a		txa				txa 								; add 8 to stack position
.011869	18		clc				clc
.01186a	69 08 00	adc #$0008			adc 	#8
.01186d	85 2a		sta $2a				sta 	DStack
.01186f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011872	b2 06		lda ($06)			lda 	(DCodePtr)
.011874	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.011877	d0 09		bne $011882			bne 	_CFONoStep
.011879	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01187c	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.01187f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.011882					_CFONoStep:
.011882	60		rts				rts
.011883					_CFOBad:
.011883	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011886	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>01188e	76 61 72 69 61 62 6c 65 00
.011897					Command_NEXT:
.011897	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011899	b5 00		lda $00,x			lda 	$00,x
.01189b	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.01189e	f0 14		beq $0118b4			beq 	_CNXOk
.0118a0	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0118a3	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0118ab	68 6f 75 74 20 46 6f 72 00
.0118b4					_CNXOk:
.0118b4	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0118b6	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0118b9	90 22		bcc $0118dd			bcc 	_CNXNoVariable
.0118bb	20 96 03	jsr $010396			jsr 	VariableFind 				; get address of variable.
.0118be	90 08		bcc $0118c8			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118c0	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118c2	ca		dex				dex
.0118c3	ca		dex				dex
.0118c4	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118c6	f0 15		beq $0118dd			beq 	_CNXNoVariable 				; then continue
.0118c8					_CNXNextVar:
.0118c8	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0118cb	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118d3	20 76 61 72 69 61 62 6c 65 00
.0118dd					_CNXNoVariable:
.0118dd	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118df	48		pha				pha
.0118e0	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118e2	38		sec				sec
.0118e3	e9 08 00	sbc #$0008			sbc 	#8
.0118e6	85 2a		sta $2a				sta 	DStack
.0118e8	aa		tax				tax 								; X points to the stack.
.0118e9	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118eb	85 06		sta $06				sta 	DCodePtr
.0118ed	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.0118f0	5a		phy				phy 								; save the target on the stack
.0118f1	48		pha				pha
.0118f2	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118f5	85 08		sta $08				sta 	DTemp1
.0118f7	64 0a		stz $0a				stz 	DTemp1+2
.0118f9	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118fb	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118fe	d0 0b		bne $01190b			bne 	_CNXNoStep
.011900	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011902	e6 06		inc $06				inc 	DCodePtr
.011904	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.011907	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011909	84 0a		sty $0a				sty 	DTemp1+2
.01190b					_CNXNoStep:
.01190b	68		pla				pla 								; save the Target in DTemp2
.01190c	85 0c		sta $0c				sta 	DTemp2
.01190e	68		pla				pla
.01190f	85 0e		sta $0e				sta 	DTemp2+2
.011911	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011913	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.011915	a8		tay				tay
.011916	18		clc				clc
.011917	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.01191a	65 08		adc $08				adc 	DTemp1
.01191c	99 00 00	sta $0000,y			sta 	$0000,y
.01191f	b9 02 00	lda $0002,y			lda 	$0002,y
.011922	65 0a		adc $0a				adc 	DTemp1+2
.011924	99 02 00	sta $0002,y			sta 	$0002,y
.011927	38		sec				sec
.011928	a5 0c		lda $0c				lda 	DTemp2
.01192a	f9 00 00	sbc $0000,y			sbc 	$0000,y
.01192d	85 0c		sta $0c				sta 	DTemp2
.01192f	a5 0e		lda $0e				lda 	DTemp2+2
.011931	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011934	85 0e		sta $0e				sta 	DTemp2+2
.011936	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011938	f0 0a		beq $011944			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01193a	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01193c	45 0a		eor $0a				eor 	DTemp1+2
.01193e	10 04		bpl $011944			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011940	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011941	85 06		sta $06				sta 	DCodePtr
.011943	60		rts				rts
.011944					_CNXLoopAgain:
.011944	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011945	18		clc				clc
.011946	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011948	aa		tax				tax
.011949	69 08 00	adc #$0008			adc 	#8
.01194c	85 2a		sta $2a				sta 	DStack
.01194e	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011950	85 22		sta $22				sta 	DLineNumber
.011952	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011953					Function_ONGOTO:
.011953	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.011956	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011959	d0 25		bne $011980			bne 	_FOGoFail
.01195b	c9 00 00	cmp #$0000			cmp 	#0
.01195e	f0 20		beq $011980			beq 	_FOGoFail 					; we start with index = 1
.011960	48		pha				pha 								; save count on stack
.011961	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011964	20 ca 05	jsr $0105ca			jsr 	ExpectToken
.011967	fa		plx				plx 								; put count in X.
.011968					_FOGoLoop:
.011968	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01196a	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01196d	90 73		bcc $0119e2			bcc 	FGOFail 					; if not, then we have an error.
.01196f	c9 00 c0	cmp #$c000			cmp 	#$C000
.011972	b0 6e		bcs $0119e2			bcs 	FGOFail
.011974	ca		dex				dex 								; subtract one, if done, call GOTO code
.011975	f0 1f		beq $011996			beq 	Function_GOTO
.011977	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011979	e6 06		inc $06				inc 	DCodePtr
.01197b	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; expect a comma
.01197e	80 e8		bra $011968			bra 	_FOGoLoop 					; and loop round.
.011980					_FOGoFail:
.011980	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011983	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01198b	47 6f 74 6f 20 76 61 6c 75 65 00
.011996					Function_GOTO:
.011996	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011998	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01199b	90 45		bcc $0119e2			bcc 	FGOFail 					; we don't do calculate line numbers.
.01199d	c9 00 c0	cmp #$c000			cmp 	#$C000
.0119a0	b0 40		bcs $0119e2			bcs 	FGOFail
.0119a2	38		sec				sec 								; convert to 0-32767
.0119a3	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0119a6	aa		tax				tax
.0119a7	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0119aa	18		clc				clc
.0119ab	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0119ad	a8		tay				tay
.0119ae					_FGOSearch:
.0119ae	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0119b1	f0 18		beq $0119cb			beq 	_FGOUnknown
.0119b3	8a		txa				txa 								; does it match line number ?
.0119b4	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0119b7	f0 08		beq $0119c1			beq 	_FGOFound 					; yes, then found.
.0119b9	98		tya				tya 								; no follow the link
.0119ba	18		clc				clc
.0119bb	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119be	a8		tay				tay
.0119bf	80 ed		bra $0119ae			bra 	_FGOSearch 					; and keep looking
.0119c1					_FGOFound:
.0119c1	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119c3	98		tya				tya 								; Y + 4 is the code pointer.
.0119c4	18		clc				clc 								; (skipping link and line #)
.0119c5	69 04 00	adc #$0004			adc 	#4
.0119c8	85 06		sta $06				sta 	DCodePtr
.0119ca	60		rts				rts									; and continue
.0119cb					_FGOUnknown:
.0119cb	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0119ce	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119d6	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119e2					FGOFail:
.0119e2	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>0119e5	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119ed	20 4e 75 6d 62 65 72 00
.0119f5					Function_GOSUB:
.0119f5	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119f7	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119f9	18		clc				clc
.0119fa	69 02 00	adc #$0002			adc 	#2
.0119fd	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119ff	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a01	95 04		sta $04,x			sta 	$04,x
.011a03	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.011a06	95 06		sta $06,x			sta 	$06,x
.011a08	8a		txa				txa 								; advance stack by 6.
.011a09	18		clc				clc
.011a0a	69 06 00	adc #$0006			adc 	#6
.011a0d	85 2a		sta $2a				sta 	DStack
.011a0f	80 85		bra $011996			bra 	Function_GOTO 				; and do a GOTO.
.011a11					Function_RETURN:
.011a11	a6 2a		ldx $2a				ldx 	DStack
.011a13	b5 00		lda $00,x			lda 	$00,x
.011a15	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011a18	d0 11		bne $011a2b			bne 	_FRetFail
.011a1a	8a		txa				txa 								; unpick stack.
.011a1b	38		sec				sec
.011a1c	e9 06 00	sbc #$0006			sbc 	#6
.011a1f	85 2a		sta $2a				sta 	DStack
.011a21	aa		tax				tax
.011a22	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a24	85 06		sta $06				sta 	DCodePtr
.011a26	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a28	85 22		sta $22				sta 	DLineNumber
.011a2a	60		rts				rts
.011a2b					_FRetFail:
.011a2b	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011a2e	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a36	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011a43					Function_REPEAT:
.011a43	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a45	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a47	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a49	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a4b	95 04		sta $04,x			sta 	$04,x
.011a4d	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011a50	95 06		sta $06,x			sta 	$06,x
.011a52	8a		txa				txa 								; advance stack by 6.
.011a53	18		clc				clc
.011a54	69 06 00	adc #$0006			adc 	#6
.011a57	85 2a		sta $2a				sta 	DStack
.011a59	60		rts				rts
.011a5a					Function_UNTIL:
.011a5a	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a5c	b5 00		lda $00,x			lda 	$00,x
.011a5e	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a61	d0 26		bne $011a89			bne 	_FUNFail
.011a63	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a66	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a69	d0 15		bne $011a80			bne 	_FUNExit
.011a6b	c9 00 00	cmp #$0000			cmp 	#0
.011a6e	d0 10		bne $011a80			bne 	_FUNExit
.011a70	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a72	38		sec				sec
.011a73	e9 06 00	sbc #$0006			sbc 	#6
.011a76	aa		tax				tax
.011a77	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a79	85 06		sta $06				sta 	DCodePtr
.011a7b	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a7d	85 22		sta $22				sta 	DLineNumber
.011a7f	60		rts				rts
.011a80					_FUNExit:
.011a80	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a82	38		sec				sec
.011a83	e9 06 00	sbc #$0006			sbc 	#6
.011a86	85 2a		sta $2a				sta 	DStack
.011a88	60		rts				rts
.011a89					_FUNFail:
.011a89	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011a8c	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a94	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011aa1					Function_WHILE:
.011aa1	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011aa3	48		pha				pha 								; save on stack
.011aa4	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011aa7	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011aaa	d0 14		bne $011ac0			bne 	_FWHExecute
.011aac	c9 00 00	cmp #$0000			cmp 	#0
.011aaf	d0 0f		bne $011ac0			bne 	_FWHExecute
.011ab1	68		pla				pla 								; throw away current instruction
.011ab2	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011ab5	a2 00 00	ldx #$0000			ldx 	#0
.011ab8	20 96 17	jsr $011796			jsr 	ScanForwardLevel 			; scan forward checking structures
.011abb	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011abd	e6 06		inc $06				inc 	DCodePtr
.011abf	60		rts				rts
.011ac0					_FWHExecute:
.011ac0	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011ac2	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011ac3	3a		dec a				dec 	a
.011ac4	3a		dec a				dec 	a
.011ac5	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011ac7	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011ac9	95 04		sta $04,x			sta 	$04,x
.011acb	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011ace	95 06		sta $06,x			sta 	$06,x
.011ad0	8a		txa				txa 								; advance stack by 6.
.011ad1	18		clc				clc
.011ad2	69 06 00	adc #$0006			adc 	#6
.011ad5	85 2a		sta $2a				sta 	DStack
.011ad7	60		rts				rts
.011ad8					Function_WEND:
.011ad8	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011ada	b5 00		lda $00,x			lda 	$00,x
.011adc	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011adf	d0 11		bne $011af2			bne 	_FWEFail
.011ae1	8a		txa				txa 								; unpick stack and always loop back.
.011ae2	38		sec				sec 								; we do the check at the top.
.011ae3	e9 06 00	sbc #$0006			sbc 	#6
.011ae6	85 2a		sta $2a				sta 	DStack
.011ae8	aa		tax				tax
.011ae9	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011aeb	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011aed	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011aef	85 22		sta $22				sta 	DLineNumber
.011af1	60		rts				rts
.011af2					_FWEFail:
.011af2	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011af5	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011afd	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011b08					Function_END:
.011b08	4c 8e 1e	jmp $011e8e			jmp 	WarmStart
.011b0b					Function_RUN:
.011b0b	20 96 1b	jsr $011b96			jsr 	Function_CLEAR 				; clear all variables.
.011b0e	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011b10	18		clc				clc
.011b11	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011b14	80 0c		bra $011b22			bra 	FRun_NextLineNumber
.011b16					RUNExecuteTokenBuffer:
.011b16	64 22		stz $22				stz 	DLineNumber					; zero line number
.011b18	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011b1b	18		clc				clc
.011b1c	65 02		adc $02				adc 	DBaseAddress
.011b1e	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b20	80 12		bra $011b34			bra 	FRun_NextInstruction
.011b22					FRun_NextLineNumber:
.011b22	a8		tay				tay 								; put in Y
.011b23	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b26	f0 e0		beq $011b08			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011b28	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b2b	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b2d	98		tya				tya 								; get address back
.011b2e	18		clc				clc 								; skip over the link/line number
.011b2f	69 04 00	adc #$0004			adc 	#4
.011b32	85 06		sta $06				sta 	DCodePtr
.011b34					FRun_NextInstruction:
.011b34	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b36	20 ac 1d	jsr $011dac			jsr 	HWCheckBreak 				; break key pressed.
.011b39	d0 40		bne $011b7b			bne 	_FRun_Break
.011b3b	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b3d	f0 32		beq $011b71			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b3f	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b42	f0 18		beq $011b5c			beq 	_FRun_Colon
.011b44	a8		tay				tay 								; save in Y
.011b45	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b48	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b4b	d0 15		bne $011b62			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b4d	98		tya				tya 								; get token back
.011b4e	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b51	0a		asl a				asl 	a 							; double it into X
.011b52	aa		tax				tax
.011b53	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b55	e6 06		inc $06				inc 	DCodePtr
.011b57	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b5a	80 d8		bra $011b34			bra 	FRun_NextInstruction 		; do the following instruction.
.011b5c					_FRun_Colon:
.011b5c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b5e	e6 06		inc $06				inc 	DCodePtr
.011b60	80 d2		bra $011b34			bra 	FRun_NextInstruction 		; do the following instruction.
.011b62					_FRun_TryLET:
.011b62	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b64	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b67	90 05		bcc $011b6e			bcc		_FRunSyntax 				; no, must be syntax.
.011b69	20 62 12	jsr $011262			jsr 	Function_LET 				; try as a LET.
.011b6c	80 c6		bra $011b34			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b6e					_FRunSyntax:
.011b6e	82 49 ea	brl $0105ba			brl 	SyntaxError
.011b71					_FRun_EndInstruction:
.011b71	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b73	f0 0f		beq $011b84			beq 	_FRun_WarmStart
.011b75	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b77	1a		inc a				inc 	a 							; go to link for next line
.011b78	1a		inc a				inc 	a
.011b79	80 a7		bra $011b22			bra 	FRun_NextLineNumber
.011b7b					_FRun_Break:
.011b7b	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011b7e	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b84					_FRun_WarmStart:
.011b84	82 07 03	brl $011e8e			brl 	WarmStart
.011b87					Function_NEW:
.011b87	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b8a	18		clc				clc
.011b8b	65 02		adc $02				adc 	DBaseAddress
.011b8d	a8		tay				tay
.011b8e	a9 00 00	lda #$0000			lda 	#$0000
.011b91	99 00 00	sta $0000,y			sta 	$0000,y
.011b94	80 00		bra $011b96			bra 	Function_Clear
.011b96					Function_CLEAR:
.011b96	20 a2 1b	jsr $011ba2			jsr 	ClearVariablesPointersAndStacks
.011b99	60		rts				rts
.011b9a					Function_STOP:
.011b9a	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011b9d	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011ba2					ClearVariablesPointersAndStacks:
.011ba2	a9 80 00	lda #$0080			lda 	#BASStack
.011ba5	85 2a		sta $2a				sta 	DStack
.011ba7	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011ba9	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011bac	a9 00 00	lda #$0000			lda 	#$0000
.011baf	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bb1	20 dd 1b	jsr $011bdd			jsr 	FindCodeEnd 				; find where the program ends.
.011bb4	a8		tay				tay 								; Y points to it.
.011bb5	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011bb8	99 02 00	sta $0002,y			sta 	$0002,y
.011bbb	99 04 00	sta $0004,y			sta 	$0004,y
.011bbe	98		tya				tya 								; start of working memory up
.011bbf	18		clc				clc
.011bc0	69 06 00	adc #$0006			adc 	#6
.011bc3	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011bc6	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bc8	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bcb					_FCLoop:
.011bcb	a9 00 00	lda #$0000			lda 	#$0000
.011bce	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bd0	c8		iny				iny
.011bd1	c8		iny				iny
.011bd2	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bd5	d0 f4		bne $011bcb			bne 	_FCLoop
.011bd7	64 16		stz $16				stz 	DTempStringPointer
.011bd9	20 5e 06	jsr $01065e			jsr 	StringResetPermanent
.011bdc	60		rts				rts
.011bdd					FindCodeEnd:
.011bdd	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011be0	18		clc				clc
.011be1	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011be3	a8		tay				tay
.011be4					_FCELoop:
.011be4	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011be7	f0 08		beq $011bf1			beq 	_FCEExit
.011be9	98		tya				tya 								; add offset
.011bea	18		clc				clc
.011beb	79 00 00	adc $0000,y			adc 	$0000,y
.011bee	a8		tay				tay
.011bef	80 f3		bra $011be4			bra 	_FCELoop
.011bf1					_FCEExit:
.011bf1	98		tya				tya 								; return in A
.011bf2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011bf3					Function_Dim:
.011bf3	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bf5	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011bf8	f0 3b		beq $011c35			beq		_FDIMNotArray 				; no, error.
.011bfa	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find it.
.011bfd	b0 41		bcs $011c40			bcs 	_FDIMExists 				; if it does, that's an error.
.011bff	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011c01	48		pha				pha
.011c02	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011c04	48		pha				pha
.011c05					_FDIMSkip:
.011c05	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011c07	e6 06		inc $06				inc 	DCodePtr
.011c09	e6 06		inc $06				inc 	DCodePtr
.011c0b	29 00 08	and #$0800			and 	#IDContMask
.011c0e	d0 f5		bne $011c05			bne 	_FDIMSkip
.011c10	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011c13	20 e4 05	jsr $0105e4			jsr 	ExpectRightBracket 			; check the ) following.
.011c16	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011c19	d0 3b		bne $011c56			bne 	_FDIMSize
.011c1b	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c1e	f0 36		beq $011c56			beq 	_FDIMSize
.011c20	7a		ply				ply 								; restore HashTablePtr
.011c21	84 20		sty $20				sty 	DHashTablePtr
.011c23	7a		ply				ply 								; so now A is the high index, Y points to the token
.011c24	20 40 04	jsr $010440			jsr 	VariableCreate 				; create the variable.
.011c27	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c29	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c2c	d0 06		bne $011c34			bne 	_FDIMExit
.011c2e	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c30	e6 06		inc $06				inc 	DCodePtr
.011c32	80 bf		bra $011bf3			bra 	Function_DIM 				; and do another
.011c34					_FDIMExit:
.011c34	60		rts				rts
.011c35					_FDIMNotArray:
.011c35	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011c38	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c40					_FDIMExists:
.011c40	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011c43	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c4b	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c56					_FDIMSize:
.011c56	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011c59	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c61	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c67					Command_POKE:
.011c67	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c6a	48		pha				pha	 								; save on stack
.011c6b	5a		phy				phy
.011c6c	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; comma seperator.
.011c6f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c72	fa		plx				plx 								; pull address and store in DTemp1
.011c73	86 0a		stx $0a				stx 	DTemp1+2
.011c75	fa		plx				plx
.011c76	86 08		stx $08				stx 	DTemp1+0
.011c78	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c7a	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c7c	c2 20		rep #$20			rep 	#$20 						; word mode
.011c7e	60		rts				rts
.011c7f					Command_DOKE:
.011c7f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c82	48		pha				pha	 								; save on stack
.011c83	5a		phy				phy
.011c84	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; comma seperator.
.011c87	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c8a	fa		plx				plx 								; pull address and store in DTemp1
.011c8b	86 0a		stx $0a				stx 	DTemp1+2
.011c8d	fa		plx				plx
.011c8e	86 08		stx $08				stx 	DTemp1+0
.011c90	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c92	60		rts				rts
.011c93					Command_LOKE:
.011c93	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c96	48		pha				pha	 								; save on stack
.011c97	5a		phy				phy
.011c98	20 ed 05	jsr $0105ed			jsr 	ExpectComma 				; comma seperator.
.011c9b	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c9e	fa		plx				plx 								; pull address and store in DTemp1
.011c9f	86 0a		stx $0a				stx 	DTemp1+2
.011ca1	fa		plx				plx
.011ca2	86 08		stx $08				stx 	DTemp1+0
.011ca4	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011ca6	98		tya				tya
.011ca7	a0 02 00	ldy #$0002			ldy 	#2
.011caa	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011cac	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011cad					Function_ASSERT:
.011cad	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011cb0	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011cb2	05 08		ora $08				ora 	Dtemp1
.011cb4	f0 01		beq $011cb7			beq 	_FAssFail
.011cb6	60		rts				rts
.011cb7					_FAssFail:
.011cb7	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011cba	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011cc2	61 69 6c 65 64 00
.011cc8					Function_CLS:
.011cc8	20 26 1d	jsr $011d26			jsr 	HWClearScreen
.011ccb	60		rts				rts
.011ccc					Function_REM:
.011ccc	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cce	f0 0f		beq $011cdf			beq 	_FRemExit 					; no comment present
.011cd0	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cd3	f0 0a		beq $011cdf			beq 	_FRemExit 					; no comment present
.011cd5	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011cd8	b0 06		bcs $011ce0			bcs 	_FRemSyntax
.011cda	18		clc				clc 								; add to DCodePtr
.011cdb	65 06		adc $06				adc 	DCodePtr
.011cdd	85 06		sta $06				sta 	DCodePtr
.011cdf					_FRemExit:
.011cdf	60		rts				rts
.011ce0					_FRemSyntax:
.011ce0	82 d7 e8	brl $0105ba			brl 	SyntaxError
.011ce3					Function_LINK:
.011ce3	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011ce6	85 08		sta $08				sta 	DTemp1 						; target address
.011ce8	84 0a		sty $0a				sty 	DTemp1+2
.011cea	7b		tdc				tda 								; work out what the actual address is
.011ceb	18		clc				clc
.011cec	69 08 00	adc #$0008			adc 	#DTemp1
.011cef	8f 24 1d 01	sta $011d24			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011cf3	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011cf5	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011cf8	48		pha				pha
.011cf9	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011cfc	aa		tax				tax
.011cfd	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011d00	a8		tay				tay
.011d01	68		pla				pla
.011d02	22 23 1d 01	jsl $011d23			jsl 	_FLIExecuteIt
.011d06	5a		phy				phy 								; save Y
.011d07	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011d09	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d0c	8a		txa				txa
.011d0d	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d10	68		pla				pla
.011d11	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d14	c8		iny				iny 								; point to their high bytes and clear them
.011d15	c8		iny				iny
.011d16	a9 00 00	lda #$0000			lda 	#0
.011d19	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d1c	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d1f	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d22	60		rts				rts
.011d23					_FLIExecuteIt:
.011d23	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d26					HWClearScreen:
.011d26	48		pha				pha
.011d27	da		phx				phx
.011d28	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d2b	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d2e	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d32	ca		dex				dex
.011d33	10 f6		bpl $011d2b			bpl 	_CS0
.011d35	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d38	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d3c	fa		plx				plx
.011d3d	68		pla				pla
.011d3e	60		rts				rts
.011d3f					HWPrintChar:
.011d3f	48		pha				pha
.011d40	da		phx				phx
.011d41	5a		phy				phy
.011d42	48		pha				pha 								; cursor position -> X
.011d43	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d47	aa		tax				tax
.011d48	68		pla				pla
.011d49	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d4c	f0 08		beq $011d56			beq 	_HWPCNoWrite
.011d4e	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d50	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d54	c2 20		rep #$20			rep 	#$20
.011d56					_HWPCNoWrite:
.011d56	e8		inx				inx 								; bump cursor position.
.011d57	8a		txa				txa
.011d58	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d5c	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d5f	d0 2b		bne $011d8c			bne 	_HWNotEnd
.011d61	38		sec				sec 	 							; back up one line
.011d62	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d65	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d69	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d6c					_HWScrollUp:
.011d6c	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d70	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d74	e8		inx				inx
.011d75	e8		inx				inx
.011d76	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d79	d0 f1		bne $011d6c			bne 	_HWScrollUp
.011d7b	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d7e					_HWBlank:
.011d7e	a9 20 20	lda #$2020			lda 	#$2020
.011d81	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d85	e8		inx				inx
.011d86	e8		inx				inx
.011d87	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d8a	d0 f2		bne $011d7e			bne 	_HWBlank
.011d8c					_HWNotEnd:
.011d8c	7a		ply				ply
.011d8d	fa		plx				plx
.011d8e	68		pla				pla
.011d8f	60		rts				rts
.011d90					HWNewLine:
.011d90	48		pha				pha
.011d91	da		phx				phx
.011d92	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d95					HWMoveCursor:
.011d95	a9 ff ff	lda #$ffff			lda 	#-1
.011d98	20 3f 1d	jsr $011d3f			jsr 	HWPrintChar
.011d9b	8a		txa				txa
.011d9c	2f 20 80 0f	and $0f8020			and 	HWCursor
.011da0	d0 f3		bne $011d95			bne 	HWMoveCursor
.011da2	fa		plx				plx
.011da3	68		pla				pla
.011da4	60		rts				rts
.011da5	48		pha		HWTab:	pha
.011da6	da		phx				phx
.011da7	a2 07 00	ldx #$0007			ldx 	#7
.011daa	80 e9		bra $011d95			bra 	HWMoveCursor
.011dac					HWCheckBreak:
.011dac	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011db0	60		rts				rts
.011db1					HWInkey:
.011db1	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011db5	60		rts				rts
.011db6					HWInputLine:
.011db6	20 b1 1d	jsr $011db1			jsr 	HWInkey 					; get a keystroke.
.011db9	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011dbd	f0 f7		beq $011db6			beq 	HWInputLine
.011dbf					_HWILWait:
.011dbf	20 b1 1d	jsr $011db1			jsr 	HWInkey
.011dc2	c9 00 00	cmp #$0000			cmp		#0
.011dc5	f0 f8		beq $011dbf			beq 	_HWILWait
.011dc7	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011dcb	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011dce	90 2f		bcc $011dff			bcc 	_HWILControl
.011dd0	20 3f 1d	jsr $011d3f			jsr 	HWPrintChar 				; print out.
.011dd3	80 e1		bra $011db6			bra 	HWInputLine 				; loop back.
.011dd5					_HWILBackSpace:
.011dd5	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011dd9	f0 db		beq $011db6			beq 	HWInputLine
.011ddb	aa		tax				tax
.011ddc	ca		dex				dex
.011ddd	a9 20 00	lda #$0020			lda 	#" "
.011de0	e2 20		sep #$20			sep 	#$20
.011de2	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011de6	c2 20		rep #$20			rep 	#$20
.011de8	a2 ff ff	ldx #$ffff			ldx 	#-1
.011deb					_HWILMove:
.011deb	8a		txa				txa
.011dec	18		clc				clc
.011ded	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011df1	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011df4	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011df8	80 bc		bra $011db6			bra 	HWInputLine
.011dfa					_HWILClear:
.011dfa	20 26 1d	jsr $011d26			jsr 	HWClearScreen
.011dfd	80 b7		bra $011db6			bra 	HWInputLine
.011dff					_HWILControl:
.011dff	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011e02	f0 60		beq $011e64			beq 	_HWILTab
.011e04	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011e07	f0 cc		beq $011dd5			beq 	_HWILBackSpace
.011e09	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011e0c	c9 17 00	cmp #$0017			cmp 	#23
.011e0f	f0 da		beq $011deb			beq 	_HWILMove
.011e11	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e14	c9 13 00	cmp #$0013			cmp 	#19
.011e17	f0 d2		beq $011deb			beq 	_HWILMove
.011e19	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e1c	c9 01 00	cmp #$0001			cmp 	#1
.011e1f	f0 ca		beq $011deb			beq 	_HWILMove
.011e21	a2 01 00	ldx #$0001			ldx 	#1
.011e24	c9 04 00	cmp #$0004			cmp 	#4
.011e27	f0 c2		beq $011deb			beq 	_HWILMove
.011e29	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e2c	f0 cc		beq $011dfa			beq 	_HWILClear
.011e2e	c9 0d 00	cmp #$000d			cmp 	#13
.011e31	d0 83		bne $011db6			bne 	HWInputLine
.011e33	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e37	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e3a	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e3c	a9 0f 00	lda #$000f			lda 	#$000F
.011e3f	85 0a		sta $0a				sta 	DTemp1+2
.011e41	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e44					_HWILCopy:
.011e44	bb		tyx				tyx
.011e45	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e47	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e4b	c8		iny				iny
.011e4c	c8		iny				iny
.011e4d	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e50	d0 f2		bne $011e44			bne 	_HWILCopy
.011e52	a9 00 00	lda #$0000			lda 	#0
.011e55	bb		tyx				tyx
.011e56	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e5a	20 90 1d	jsr $011d90			jsr 	HWNewLine 					; next line.
.011e5d	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e60	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e63	60		rts				rts
.011e64					_HWILTab:
.011e64	20 a5 1d	jsr $011da5			jsr 	HWTab
.011e67	82 4c ff	brl $011db6			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e6a					SwitchBasicInstance:
.011e6a	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e6c	20 26 1d	jsr $011d26			jsr 	HWClearScreen 						; clear screen
.011e6f	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e72	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e74	86 02		stx $02				stx		DBaseAddress
.011e76	84 04		sty $04				sty 	DHighAddress
.011e78	ba		tsx				tsx 										; save the current SP.
.011e79	86 3a		stx $3a				stx 	DStack65816
.011e7b	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e7c	48		pha				pha 										; then copy it into B.
.011e7d	ab		plb				plb
.011e7e	ab		plb				plb
.011e7f	20 a2 1b	jsr $011ba2			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e82	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e85	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e87	f0 05		beq $011e8e			beq 	WarmStart
.011e89	3a		dec a				dec 	a 									; decrement zero.
.011e8a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e8c	80 18		bra $011ea6			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e8e					WarmStart:
.011e8e	a2 f4 1e	ldx #$1ef4			ldx 	#BasicPrompt & $FFFF
.011e91	20 26 06	jsr $010626			jsr 	PrintROMMessage
.011e94					NextCommand:
.011e94	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e96	9a		txs				txs
.011e97	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e99	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e9c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e9e	d0 52		bne $011ef2			bne 	ExitEmulator
.011ea0	20 b6 1d	jsr $011db6			jsr 	HWInputLine 						; read line to YA.
.011ea3	20 8a 07	jsr $01078a			jsr 	Tokenise 							; tokenise it.
.011ea6					ExecuteTokenBuffer:
.011ea6	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011ea9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011eab	f0 e7		beq $011e94			beq 	NextCommand 						; nothing.
.011ead	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011eb0	90 27		bcc $011ed9			bcc 	_ETBCommand
.011eb2	c9 00 c0	cmp #$c000			cmp 	#$C000
.011eb5	b0 22		bcs $011ed9			bcs 	_ETBCommand
.011eb7	38		sec				sec
.011eb8	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011ebb	f0 1f		beq $011edc			beq 	_ETBError
.011ebd	48		pha				pha
.011ebe	20 bf 04	jsr $0104bf			jsr 	LineDelete 							; delete the line, if it exists.
.011ec1	20 a2 1b	jsr $011ba2			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ec4	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011ec7	18		clc				clc
.011ec8	65 02		adc $02				adc 	DBaseAddress
.011eca	a8		tay				tay 										; Y contains the code.
.011ecb	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ece	f0 c4		beq $011e94			beq 	NextCommand 						; no, next command.
.011ed0	68		pla				pla 										; line number in A, code in Y.
.011ed1	20 fa 04	jsr $0104fa			jsr 	LineInsert 							; insert the line
.011ed4	20 a2 1b	jsr $011ba2			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ed7	80 bb		bra $011e94			bra 	NextCommand
.011ed9					_ETBCommand:
.011ed9	4c 16 1b	jmp $011b16			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011edc					_ETBError:
.011edc	20 7e 05	jsr $01057e			jsr 	ErrorHandler 						; call error routine
>011edf	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011ee7	61 76 65 20 6c 69 6e 65 20 30 00
.011ef2					ExitEmulator:
.011ef2	02 00		cop #$00			cop 	#0
.011ef4					BasicPrompt:
>011ef4	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 8a 07	jsr $01078a			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	18 85 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 26 00 01 00 2d 3e c0 e4
>024208	06 22 14 00 11 59 4e 4f 43 38 3b 35 3a 40 39 39
>024218	40 49 32 30 32 4e 0a 24 04 00 00 00 00 00 1a 00
>024228	02 00 2d 3e ee e4 06 22 08 00 04 4a 55 52 4e 00
>024238	0a 24 04 00 00 00 00 00 20 00 03 00 2d 3e 1c e5
>024248	06 22 0e 00 0b 32 43 41 56 36 3b 4b 3c 4a 31 37
>024258	0a 24 04 00 00 00 00 00 1a 00 04 00 2d 3e 4a e5
>024268	06 22 08 00 04 58 43 3e 4d 00 0a 24 04 00 00 00
>024278	00 00 16 00 05 00 2d 3e 78 e5 06 22 04 00 01 35
>024288	0a 24 04 00 00 00 00 00 1c 00 06 00 2d 3e a6 e5
>024298	06 22 0a 00 06 56 41 34 32 3c 53 00 0a 24 04 00
>0242a8	00 00 00 00 22 00 07 00 2d 3e d4 e5 06 22 10 00
>0242b8	0c 34 3f 4b 45 44 31 4b 49 32 42 52 43 00 0a 24
>0242c8	04 00 00 00 00 00 22 00 08 00 2d 3e 02 e6 06 22
>0242d8	10 00 0d 49 4c 4d 35 3c 37 59 47 48 56 4a 47 4c
>0242e8	0a 24 04 00 00 00 00 00 1c 00 09 00 2d 3e 30 e6
>0242f8	06 22 0a 00 07 3f 3d 43 3c 47 42 4f 0a 24 04 00
>024308	00 00 00 00 1e 00 0a 00 2d 3e 5e e6 06 22 0c 00
>024318	09 3d 55 55 39 3d 59 48 4f 38 0a 24 04 00 00 00
>024328	00 00 22 00 0b 00 2d 3e f7 ec 1b e0 06 22 0e 00
>024338	0a 52 42 51 40 3e 33 50 32 3c 40 00 0a 24 04 00
>024348	00 00 00 00 1c 00 0c 00 2d 3e f8 ec 1c e0 06 22
>024358	08 00 04 42 38 37 55 00 0a 24 04 00 00 00 00 00
>024368	24 00 0d 00 2d 3e f9 ec 1d e0 06 22 10 00 0d 4f
>024378	35 32 40 46 3d 4b 59 47 4f 32 41 34 0a 24 04 00
>024388	00 00 00 00 24 00 0e 00 2d 3e fa ec 1e e0 06 22
>024398	10 00 0d 3a 4b 3b 35 4f 33 50 37 5a 48 4c 4d 35
>0243a8	0a 24 04 00 00 00 00 00 18 00 0f 00 2d 3e fb ec
>0243b8	1f e0 06 22 04 00 01 55 0a 24 04 00 00 00 00 00
>0243c8	24 00 10 00 2d 3e fc ec 20 e0 06 22 10 00 0d 35
>0243d8	50 37 39 3f 49 31 4f 48 41 54 5a 45 0a 24 04 00
>0243e8	00 00 00 00 24 00 11 00 2d 3e fd ec 21 e0 06 22
>0243f8	10 00 0c 4e 51 48 56 45 4c 40 4a 47 52 43 4f 00
>024408	0a 24 04 00 00 00 00 00 28 00 12 00 2d 3e fe ec
>024418	22 e0 06 22 14 00 10 50 57 43 4a 3e 51 4a 44 38
>024428	58 43 45 55 50 59 34 00 0a 24 04 00 00 00 00 00
>024438	24 00 13 00 2d 3e ff ec 23 e0 06 22 10 00 0d 33
>024448	3d 52 43 34 4c 3e 45 44 53 32 3c 4a 0a 24 04 00
>024458	00 00 00 00 1e 00 14 00 2d 3e 00 ed 24 e0 06 22
>024468	0a 00 06 33 3b 4c 54 32 3e 00 0a 24 04 00 00 00
>024478	00 00 1c 00 15 00 2d 3e 2e ed 1b e0 06 22 08 00
>024488	04 52 41 39 38 00 0a 24 04 00 00 00 00 00 28 00
>024498	16 00 2d 3e 2f ed 1c e0 06 22 14 00 11 4c 36 44
>0244a8	35 4c 41 30 54 34 43 4b 53 4e 34 32 32 36 0a 24
>0244b8	04 00 00 00 00 00 1c 00 17 00 2d 3e 30 ed 1d e0
>0244c8	06 22 08 00 04 42 58 54 40 00 0a 24 04 00 00 00
>0244d8	00 00 1a 00 18 00 2d 3e 31 ed 1e e0 06 22 06 00
>0244e8	03 49 3e 56 0a 24 04 00 00 00 00 00 28 00 19 00
>0244f8	2d 3e 32 ed 1f e0 06 22 14 00 11 57 50 58 4a 52
>024508	59 3e 39 4f 54 5a 40 4a 49 46 4d 41 0a 24 04 00
>024518	00 00 00 00 1c 00 1a 00 2d 3e 33 ed 20 e0 06 22
>024528	08 00 05 36 54 5a 30 52 0a 24 04 00 00 00 00 00
>024538	20 00 1b 00 2d 3e 1a ed 21 e0 06 22 0c 00 08 34
>024548	53 48 51 5a 31 4d 48 00 0a 24 04 00 00 00 00 00
>024558	18 00 1c 00 2d 3e 1b ed 22 e0 06 22 04 00 01 59
>024568	0a 24 04 00 00 00 00 00 1a 00 1d 00 2d 3e 1c ed
>024578	23 e0 06 22 06 00 03 34 49 37 0a 24 04 00 00 00
>024588	00 00 1a 00 1e 00 2d 3e 1d ed 24 e0 06 22 06 00
>024598	03 58 45 46 0a 24 04 00 00 00 00 00 26 00 1f 00
>0245a8	2d 3e 4b ed 1b e0 06 22 12 00 0e 53 30 3b 4e 31
>0245b8	3d 46 55 45 32 53 4e 54 51 00 0a 24 04 00 00 00
>0245c8	00 00 1e 00 20 00 2d 3e 4c ed 1c e0 06 22 0a 00
>0245d8	07 34 4d 32 36 48 50 54 0a 24 04 00 00 00 00 00
>0245e8	1e 00 21 00 2d 3e 4d ed 1d e0 06 22 0a 00 06 5a
>0245f8	50 33 59 32 34 00 0a 24 04 00 00 00 00 00 1c 00
>024608	22 00 2d 3e 4e ed 1e e0 06 22 08 00 05 32 4f 4c
>024618	32 4b 0a 24 04 00 00 00 00 00 1e 00 23 00 2d 3e
>024628	4f ed 1f e0 06 22 0a 00 06 40 43 31 35 40 51 00
>024638	0a 24 04 00 00 00 00 00 28 00 24 00 2d 3e 50 ed
>024648	20 e0 06 22 14 00 10 32 54 50 4a 42 47 38 36 34
>024658	3b 31 56 59 4f 46 3a 00 0a 24 04 00 00 00 00 00
>024668	18 00 25 00 2d 3e 51 ed 21 e0 06 22 04 00 00 00
>024678	0a 24 04 00 00 00 00 00 1a 00 26 00 2d 3e 52 ed
>024688	22 e0 06 22 06 00 02 58 42 00 0a 24 04 00 00 00
>024698	00 00 1a 00 27 00 2d 3e 53 ed 23 e0 06 22 06 00
>0246a8	02 34 41 00 0a 24 04 00 00 00 00 00 18 00 28 00
>0246b8	2d 3e 54 ed 24 e0 06 22 04 00 00 00 0a 24 04 00
>0246c8	00 00 00 00 10 00 29 00 41 3e b0 ca 99 c9 6b cc
>0246d8	1b c0 00 00 10 00 2a 00 41 3e b0 ca 99 c9 6b cc
>0246e8	1c c0 00 00 10 00 2b 00 41 3e b0 ca 99 c9 6b cc
>0246f8	1d c0 00 00 10 00 2c 00 41 3e b0 ca 99 c9 6b cc
>024708	1e c0 00 00 10 00 2d 00 41 3e b0 ca 99 c9 6b cc
>024718	1f c0 00 00 10 00 2e 00 41 3e b0 ca 99 c9 6b cc
>024728	20 c0 00 00 10 00 2f 00 41 3e b0 ca 99 c9 6b cc
>024738	21 c0 00 00 10 00 30 00 41 3e b0 ca 99 c9 6b cc
>024748	22 c0 00 00 10 00 31 00 41 3e b0 ca 99 c9 6b cc
>024758	23 c0 00 00 10 00 32 00 41 3e b0 ca 99 c9 6b cc
>024768	24 c0 00 00 10 00 33 00 41 3e b0 ca 99 c9 6b cc
>024778	db c4 00 00 10 00 34 00 41 3e b0 ca 99 c9 6b cc
>024788	08 c5 00 00 10 00 35 00 41 3e b0 ca 99 c9 6b cc
>024798	35 c5 00 00 10 00 36 00 41 3e b0 ca 99 c9 6b cc
>0247a8	62 c5 00 00 10 00 37 00 41 3e b0 ca 99 c9 6b cc
>0247b8	8f c5 00 00 10 00 38 00 41 3e b0 ca 99 c9 6b cc
>0247c8	bc c5 00 00 10 00 39 00 41 3e b0 ca 99 c9 6b cc
>0247d8	e9 c5 00 00 10 00 3a 00 41 3e b0 ca 99 c9 6b cc
>0247e8	16 c6 00 00 10 00 3b 00 41 3e b0 ca 99 c9 6b cc
>0247f8	43 c6 00 00 10 00 3c 00 41 3e b0 ca 99 c9 6b cc
>024808	70 c6 00 00 14 00 3d 00 41 3e 43 c8 a1 c9 31 c8
>024818	f5 c0 26 32 2f 3e 00 00 10 00 3e 00 47 3c b0 ca
>024828	99 c9 6b cc 1b c0 00 00 0a 00 3f 00 42 3e c0 e4
>024838	00 00 0a 00 40 00 42 3e 1c e5 00 00 0a 00 41 00
>024848	42 3e 4a e5 00 00 0a 00 42 00 42 3e d4 e5 00 00
>024858	0a 00 43 00 42 3e 5e e6 00 00 0c 00 44 00 42 3e
>024868	f7 ec 1b e0 00 00 0c 00 45 00 42 3e f8 ec 1c e0
>024878	00 00 0c 00 46 00 42 3e f9 ec 1d e0 00 00 0c 00
>024888	47 00 42 3e fb ec 1f e0 00 00 0c 00 48 00 42 3e
>024898	2f ed 1c e0 00 00 0c 00 49 00 42 3e 1a ed 21 e0
>0248a8	00 00 0c 00 4a 00 42 3e 1b ed 22 e0 00 00 0c 00
>0248b8	4b 00 42 3e 1c ed 23 e0 00 00 0c 00 4c 00 42 3e
>0248c8	1d ed 24 e0 00 00 0c 00 4d 00 42 3e 50 ed 20 e0
>0248d8	00 00 0c 00 4e 00 42 3e 53 ed 23 e0 00 00 26 00
>0248e8	4f 00 2d 3e fb ec 1f e0 06 22 12 00 0f 4d 30 57
>0248f8	3d 4d 4a 46 52 35 41 58 55 51 55 4d 0a 24 04 00
>024908	00 00 00 00 1e 00 50 00 2d 3e 4e ed 1e e0 06 22
>024918	0a 00 07 55 54 50 50 43 4d 36 0a 24 04 00 00 00
>024928	00 00 24 00 51 00 2d 3e 2f ed 1c e0 06 22 10 00
>024938	0d 5a 4d 52 42 54 40 30 30 4b 33 52 43 3f 0a 24
>024948	04 00 00 00 00 00 24 00 52 00 2d 3e 4f ed 1f e0
>024958	06 22 10 00 0c 55 4b 3a 43 54 58 47 4d 53 48 36
>024968	3a 00 0a 24 04 00 00 00 00 00 26 00 53 00 2d 3e
>024978	54 ed 24 e0 06 22 12 00 0f 44 4b 3d 42 3b 30 33
>024988	3f 47 42 36 5a 34 3a 52 0a 24 04 00 00 00 00 00
>024998	1c 00 54 00 2d 3e 1c ed 23 e0 06 22 08 00 05 42
>0249a8	48 46 59 38 0a 24 04 00 00 00 00 00 1e 00 55 00
>0249b8	2d 3e f8 ec 1c e0 06 22 0a 00 07 41 43 4c 36 56
>0249c8	56 47 0a 24 04 00 00 00 00 00 22 00 56 00 2d 3e
>0249d8	30 e6 06 22 10 00 0c 35 48 55 4a 5a 48 42 33 3c
>0249e8	36 39 45 00 0a 24 04 00 00 00 00 00 20 00 57 00
>0249f8	2d 3e 30 ed 1d e0 06 22 0c 00 08 4c 46 55 3c 43
>024a08	50 5a 39 00 0a 24 04 00 00 00 00 00 24 00 58 00
>024a18	2d 3e 51 ed 21 e0 06 22 10 00 0d 43 56 46 4c 3b
>024a28	59 4d 5a 49 4e 42 32 51 0a 24 04 00 00 00 00 00
>024a38	1a 00 59 00 2d 3e f9 ec 1d e0 06 22 06 00 02 39
>024a48	4a 00 0a 24 04 00 00 00 00 00 18 00 5a 00 2d 3e
>024a58	1c ed 23 e0 06 22 04 00 01 49 0a 24 04 00 00 00
>024a68	00 00 16 00 5b 00 2d 3e 1c e5 06 22 04 00 01 53
>024a78	0a 24 04 00 00 00 00 00 24 00 5c 00 2d 3e 00 ed
>024a88	24 e0 06 22 10 00 0c 47 3a 3d 51 55 39 3e 38 3b
>024a98	3f 33 33 00 0a 24 04 00 00 00 00 00 26 00 5d 00
>024aa8	2d 3e 5e e6 06 22 14 00 11 5a 4f 47 59 45 38 3d
>024ab8	37 38 31 50 5a 36 48 53 36 55 0a 24 04 00 00 00
>024ac8	00 00 08 00 5e 00 4d 3a 00 00 10 00 5f 00 47 3c
>024ad8	b0 ca 99 c9 6b cc 1c c0 00 00 0a 00 60 00 42 3e
>024ae8	c0 e4 00 00 0a 00 61 00 42 3e 1c e5 00 00 0a 00
>024af8	62 00 42 3e 4a e5 00 00 0a 00 63 00 42 3e 78 e5
>024b08	00 00 0a 00 64 00 42 3e a6 e5 00 00 0a 00 65 00
>024b18	42 3e d4 e5 00 00 0c 00 66 00 42 3e fa ec 1e e0
>024b28	00 00 0c 00 67 00 42 3e fb ec 1f e0 00 00 0c 00
>024b38	68 00 42 3e fc ec 20 e0 00 00 0c 00 69 00 42 3e
>024b48	fe ec 22 e0 00 00 0c 00 6a 00 42 3e 2e ed 1b e0
>024b58	00 00 0c 00 6b 00 42 3e 2f ed 1c e0 00 00 0c 00
>024b68	6c 00 42 3e 30 ed 1d e0 00 00 0c 00 6d 00 42 3e
>024b78	33 ed 20 e0 00 00 0c 00 6e 00 42 3e 1a ed 21 e0
>024b88	00 00 0c 00 6f 00 42 3e 1b ed 22 e0 00 00 0c 00
>024b98	70 00 42 3e 4c ed 1c e0 00 00 0c 00 71 00 42 3e
>024ba8	4d ed 1d e0 00 00 0c 00 72 00 42 3e 4e ed 1e e0
>024bb8	00 00 0c 00 73 00 42 3e 50 ed 20 e0 00 00 0c 00
>024bc8	74 00 42 3e 51 ed 21 e0 00 00 0c 00 75 00 42 3e
>024bd8	53 ed 23 e0 00 00 0c 00 76 00 42 3e 54 ed 24 e0
>024be8	00 00 16 00 77 00 2d 3e 30 e6 06 22 04 00 01 53
>024bf8	0a 24 04 00 00 00 00 00 18 00 78 00 2d 3e 31 ed
>024c08	1e e0 06 22 04 00 00 00 0a 24 04 00 00 00 00 00
>024c18	28 00 79 00 2d 3e 32 ed 1f e0 06 22 14 00 10 40
>024c28	43 30 4b 4e 38 4a 4b 54 45 56 4d 38 3e 31 3b 00
>024c38	0a 24 04 00 00 00 00 00 24 00 7a 00 2d 3e 2e ed
>024c48	1b e0 06 22 10 00 0c 30 50 3e 56 57 3b 38 58 5a
>024c58	49 3b 42 00 0a 24 04 00 00 00 00 00 1a 00 7b 00
>024c68	2d 3e 4a e5 06 22 08 00 04 48 3c 32 33 00 0a 24
>024c78	04 00 00 00 00 00 18 00 7c 00 2d 3e 4d ed 1d e0
>024c88	06 22 04 00 00 00 0a 24 04 00 00 00 00 00 18 00
>024c98	7d 00 2d 3e 1a ed 21 e0 06 22 04 00 01 39 0a 24
>024ca8	04 00 00 00 00 00 28 00 7e 00 2d 3e 4f ed 1f e0
>024cb8	06 22 14 00 10 48 30 41 35 48 53 46 31 53 47 53
>024cc8	32 32 57 44 4e 00 0a 24 04 00 00 00 00 00 22 00
>024cd8	7f 00 2d 3e 4a e5 06 22 10 00 0d 40 3d 49 51 3e
>024ce8	4c 52 37 52 52 48 38 4e 0a 24 04 00 00 00 00 00
>024cf8	26 00 80 00 2d 3e fe ec 22 e0 06 22 12 00 0f 39
>024d08	31 3a 52 54 3f 40 33 3b 33 42 47 37 4f 37 0a 24
>024d18	04 00 00 00 00 00 18 00 81 00 2d 3e 4a e5 06 22
>024d28	06 00 02 4d 56 00 0a 24 04 00 00 00 00 00 26 00
>024d38	82 00 2d 3e a6 e5 06 22 14 00 10 3b 3e 3c 59 4c
>024d48	31 59 37 47 38 46 50 33 4a 41 58 00 0a 24 04 00
>024d58	00 00 00 00 28 00 83 00 2d 3e 50 ed 20 e0 06 22
>024d68	14 00 11 33 3e 44 3d 58 53 35 3f 56 48 36 34 59
>024d78	44 47 53 4a 0a 24 04 00 00 00 00 00 1c 00 84 00
>024d88	2d 3e 4f ed 1f e0 06 22 08 00 04 45 55 38 43 00
>024d98	0a 24 04 00 00 00 00 00 20 00 85 00 2d 3e 2e ed
>024da8	1b e0 06 22 0c 00 09 49 54 4e 4a 56 46 3b 36 4c
>024db8	0a 24 04 00 00 00 00 00 08 00 86 00 4d 3a 00 00
>024dc8	10 00 87 00 47 3c b0 ca 99 c9 6b cc 1d c0 00 00
>024dd8	0a 00 88 00 42 3e 02 e6 00 00 0c 00 89 00 42 3e
>024de8	f7 ec 1b e0 00 00 0c 00 8a 00 42 3e f8 ec 1c e0
>024df8	00 00 0c 00 8b 00 42 3e fa ec 1e e0 00 00 0c 00
>024e08	8c 00 42 3e fb ec 1f e0 00 00 0c 00 8d 00 42 3e
>024e18	fc ec 20 e0 00 00 0c 00 8e 00 42 3e fd ec 21 e0
>024e28	00 00 0c 00 8f 00 42 3e ff ec 23 e0 00 00 0c 00
>024e38	90 00 42 3e 00 ed 24 e0 00 00 0c 00 91 00 42 3e
>024e48	2f ed 1c e0 00 00 0c 00 92 00 42 3e 30 ed 1d e0
>024e58	00 00 0c 00 93 00 42 3e 31 ed 1e e0 00 00 0c 00
>024e68	94 00 42 3e 1a ed 21 e0 00 00 0c 00 95 00 42 3e
>024e78	1b ed 22 e0 00 00 0c 00 96 00 42 3e 1c ed 23 e0
>024e88	00 00 0c 00 97 00 42 3e 4c ed 1c e0 00 00 0c 00
>024e98	98 00 42 3e 4d ed 1d e0 00 00 0c 00 99 00 42 3e
>024ea8	4e ed 1e e0 00 00 0c 00 9a 00 42 3e 4f ed 1f e0
>024eb8	00 00 0c 00 9b 00 42 3e 51 ed 21 e0 00 00 0c 00
>024ec8	9c 00 42 3e 53 ed 23 e0 00 00 22 00 9d 00 2d 3e
>024ed8	32 ed 1f e0 06 22 0e 00 0a 58 51 52 55 36 31 31
>024ee8	51 4e 52 00 0a 24 04 00 00 00 00 00 28 00 9e 00
>024ef8	2d 3e fe ec 22 e0 06 22 14 00 11 47 31 43 45 31
>024f08	5a 4c 51 35 41 42 49 30 3f 35 51 3b 0a 24 04 00
>024f18	00 00 00 00 28 00 9f 00 2d 3e fa ec 1e e0 06 22
>024f28	14 00 11 59 33 58 3d 35 37 4e 52 32 3c 50 44 54
>024f38	39 34 49 3d 0a 24 04 00 00 00 00 00 24 00 a0 00
>024f48	2d 3e 4f ed 1f e0 06 22 10 00 0d 43 3a 45 53 52
>024f58	40 3e 57 3c 3b 53 4c 44 0a 24 04 00 00 00 00 00
>024f68	26 00 a1 00 2d 3e 4c ed 1c e0 06 22 12 00 0f 58
>024f78	4b 33 36 58 3b 4e 44 47 4f 47 51 37 35 38 0a 24
>024f88	04 00 00 00 00 00 1c 00 a2 00 2d 3e c0 e4 06 22
>024f98	0a 00 07 31 30 4f 4a 53 4e 4c 0a 24 04 00 00 00
>024fa8	00 00 1e 00 a3 00 2d 3e 78 e5 06 22 0c 00 09 4d
>024fb8	4b 43 35 36 41 3c 43 55 0a 24 04 00 00 00 00 00
>024fc8	18 00 a4 00 2d 3e 32 ed 1f e0 06 22 04 00 00 00
>024fd8	0a 24 04 00 00 00 00 00 24 00 a5 00 2d 3e 30 e6
>024fe8	06 22 12 00 0e 56 35 48 3b 39 34 48 49 41 43 42
>024ff8	46 43 56 00 0a 24 04 00 00 00 00 00 1c 00 a6 00
>025008	2d 3e 00 ed 24 e0 06 22 08 00 05 30 37 55 58 47
>025018	0a 24 04 00 00 00 00 00 1e 00 a7 00 2d 3e 51 ed
>025028	21 e0 06 22 0a 00 07 3c 48 59 31 4d 41 53 0a 24
>025038	04 00 00 00 00 00 18 00 a8 00 2d 3e 30 ed 1d e0
>025048	06 22 04 00 01 43 0a 24 04 00 00 00 00 00 18 00
>025058	a9 00 2d 3e 51 ed 21 e0 06 22 04 00 01 33 0a 24
>025068	04 00 00 00 00 00 26 00 aa 00 2d 3e 31 ed 1e e0
>025078	06 22 12 00 0f 47 3a 49 42 3b 4c 4b 58 31 31 34
>025088	47 50 32 36 0a 24 04 00 00 00 00 00 1e 00 ab 00
>025098	2d 3e 4f ed 1f e0 06 22 0a 00 06 3d 37 43 4d 43
>0250a8	4a 00 0a 24 04 00 00 00 00 00 08 00 ac 00 4d 3a
>0250b8	00 00 10 00 ad 00 47 3c b0 ca 99 c9 6b cc 1e c0
>0250c8	00 00 0a 00 ae 00 42 3e 4a e5 00 00 0a 00 af 00
>0250d8	42 3e 02 e6 00 00 0c 00 b0 00 42 3e fa ec 1e e0
>0250e8	00 00 0c 00 b1 00 42 3e fd ec 21 e0 00 00 0c 00
>0250f8	b2 00 42 3e fe ec 22 e0 00 00 0c 00 b3 00 42 3e
>025108	00 ed 24 e0 00 00 0c 00 b4 00 42 3e 30 ed 1d e0
>025118	00 00 0c 00 b5 00 42 3e 31 ed 1e e0 00 00 0c 00
>025128	b6 00 42 3e 1a ed 21 e0 00 00 0c 00 b7 00 42 3e
>025138	1c ed 23 e0 00 00 0c 00 b8 00 42 3e 4d ed 1d e0
>025148	00 00 0c 00 b9 00 42 3e 4e ed 1e e0 00 00 0c 00
>025158	ba 00 42 3e 4f ed 1f e0 00 00 24 00 bb 00 2d 3e
>025168	54 ed 24 e0 06 22 10 00 0d 57 42 4d 5a 31 58 43
>025178	42 56 54 4e 3a 42 0a 24 04 00 00 00 00 00 22 00
>025188	bc 00 2d 3e 4d ed 1d e0 06 22 0e 00 0a 55 39 37
>025198	4f 47 3c 48 4c 58 34 00 0a 24 04 00 00 00 00 00
>0251a8	1a 00 bd 00 2d 3e 1d ed 24 e0 06 22 06 00 02 35
>0251b8	3d 00 0a 24 04 00 00 00 00 00 22 00 be 00 2d 3e
>0251c8	fc ec 20 e0 06 22 0e 00 0a 4b 55 4c 4e 45 30 3b
>0251d8	44 53 46 00 0a 24 04 00 00 00 00 00 18 00 bf 00
>0251e8	2d 3e 4f ed 1f e0 06 22 04 00 00 00 0a 24 04 00
>0251f8	00 00 00 00 24 00 c0 00 2d 3e f9 ec 1d e0 06 22
>025208	10 00 0d 3c 36 54 46 39 48 3b 4b 59 46 3a 50 58
>025218	0a 24 04 00 00 00 00 00 24 00 c1 00 2d 3e 54 ed
>025228	24 e0 06 22 10 00 0d 37 4f 58 39 32 58 45 32 4a
>025238	4f 36 41 4d 0a 24 04 00 00 00 00 00 24 00 c2 00
>025248	2d 3e f9 ec 1d e0 06 22 10 00 0d 3b 4c 4e 37 45
>025258	43 37 3d 59 36 37 47 50 0a 24 04 00 00 00 00 00
>025268	24 00 c3 00 2d 3e 32 ed 1f e0 06 22 10 00 0c 41
>025278	43 3b 43 48 4d 4c 33 51 44 3f 41 00 0a 24 04 00
>025288	00 00 00 00 1e 00 c4 00 2d 3e 30 ed 1d e0 06 22
>025298	0a 00 06 5a 3d 3c 30 44 3e 00 0a 24 04 00 00 00
>0252a8	00 00 24 00 c5 00 2d 3e f7 ec 1b e0 06 22 10 00
>0252b8	0d 32 42 3d 35 34 4a 33 51 59 42 37 46 5a 0a 24
>0252c8	04 00 00 00 00 00 1e 00 c6 00 2d 3e ff ec 23 e0
>0252d8	06 22 0a 00 07 37 36 39 4d 36 3c 4f 0a 24 04 00
>0252e8	00 00 00 00 24 00 c7 00 2d 3e fb ec 1f e0 06 22
>0252f8	10 00 0c 53 49 4d 47 3a 4a 46 4b 41 5a 41 56 00
>025308	0a 24 04 00 00 00 00 00 1e 00 c8 00 2d 3e ee e4
>025318	06 22 0c 00 08 3f 56 44 3f 4e 48 45 4c 00 0a 24
>025328	04 00 00 00 00 00 20 00 c9 00 2d 3e 32 ed 1f e0
>025338	06 22 0c 00 08 49 3d 40 39 4a 3a 37 34 00 0a 24
>025348	04 00 00 00 00 00 08 00 ca 00 4d 3a 00 00 10 00
>025358	cb 00 47 3c b0 ca 99 c9 6b cc 1f c0 00 00 0a 00
>025368	cc 00 42 3e c0 e4 00 00 0a 00 cd 00 42 3e 1c e5
>025378	00 00 0a 00 ce 00 42 3e 78 e5 00 00 0a 00 cf 00
>025388	42 3e a6 e5 00 00 0a 00 d0 00 42 3e d4 e5 00 00
>025398	0a 00 d1 00 42 3e 02 e6 00 00 0a 00 d2 00 42 3e
>0253a8	5e e6 00 00 0c 00 d3 00 42 3e f7 ec 1b e0 00 00
>0253b8	0c 00 d4 00 42 3e ff ec 23 e0 00 00 0c 00 d5 00
>0253c8	42 3e 2e ed 1b e0 00 00 0c 00 d6 00 42 3e 2f ed
>0253d8	1c e0 00 00 0c 00 d7 00 42 3e 30 ed 1d e0 00 00
>0253e8	0c 00 d8 00 42 3e 31 ed 1e e0 00 00 0c 00 d9 00
>0253f8	42 3e 32 ed 1f e0 00 00 0c 00 da 00 42 3e 33 ed
>025408	20 e0 00 00 0c 00 db 00 42 3e 50 ed 20 e0 00 00
>025418	0c 00 dc 00 42 3e 53 ed 23 e0 00 00 0c 00 dd 00
>025428	42 3e 54 ed 24 e0 00 00 24 00 de 00 2d 3e 52 ed
>025438	22 e0 06 22 10 00 0c 3e 30 4a 55 45 4a 43 54 56
>025448	30 3f 54 00 0a 24 04 00 00 00 00 00 22 00 df 00
>025458	2d 3e 1c ed 23 e0 06 22 0e 00 0b 41 3e 54 4e 4f
>025468	37 4d 49 3d 4a 5a 0a 24 04 00 00 00 00 00 28 00
>025478	e0 00 2d 3e 50 ed 20 e0 06 22 14 00 10 47 52 37
>025488	49 41 3d 48 35 31 56 38 37 30 33 31 4d 00 0a 24
>025498	04 00 00 00 00 00 24 00 e1 00 2d 3e 1b ed 22 e0
>0254a8	06 22 10 00 0d 4e 53 37 58 40 3c 34 54 38 49 49
>0254b8	49 50 0a 24 04 00 00 00 00 00 28 00 e2 00 2d 3e
>0254c8	1d ed 24 e0 06 22 14 00 11 35 4d 5a 39 4a 3c 58
>0254d8	4f 3e 3e 53 56 49 4c 32 31 3b 0a 24 04 00 00 00
>0254e8	00 00 1a 00 e3 00 2d 3e ff ec 23 e0 06 22 06 00
>0254f8	03 39 41 57 0a 24 04 00 00 00 00 00 1a 00 e4 00
>025508	2d 3e 1a ed 21 e0 06 22 06 00 03 33 53 47 0a 24
>025518	04 00 00 00 00 00 1a 00 e5 00 2d 3e ff ec 23 e0
>025528	06 22 06 00 03 57 3d 55 0a 24 04 00 00 00 00 00
>025538	20 00 e6 00 2d 3e 4f ed 1f e0 06 22 0c 00 09 40
>025548	47 48 3d 56 41 42 53 3b 0a 24 04 00 00 00 00 00
>025558	18 00 e7 00 2d 3e 53 ed 23 e0 06 22 04 00 01 49
>025568	0a 24 04 00 00 00 00 00 1c 00 e8 00 2d 3e 4e ed
>025578	1e e0 06 22 08 00 05 49 48 3b 51 44 0a 24 04 00
>025588	00 00 00 00 1e 00 e9 00 2d 3e 4f ed 1f e0 06 22
>025598	0a 00 07 36 35 49 3f 47 40 4e 0a 24 04 00 00 00
>0255a8	00 00 1a 00 ea 00 2d 3e fd ec 21 e0 06 22 06 00
>0255b8	02 46 38 00 0a 24 04 00 00 00 00 00 24 00 eb 00
>0255c8	2d 3e 2e ed 1b e0 06 22 10 00 0d 57 44 4b 44 53
>0255d8	34 33 32 31 4d 37 32 3d 0a 24 04 00 00 00 00 00
>0255e8	20 00 ec 00 2d 3e fa ec 1e e0 06 22 0c 00 09 3a
>0255f8	42 38 40 42 4e 4a 44 44 0a 24 04 00 00 00 00 00
>025608	08 00 ed 00 4d 3a 00 00 10 00 ee 00 47 3c b0 ca
>025618	99 c9 6b cc 20 c0 00 00 0a 00 ef 00 42 3e c0 e4
>025628	00 00 0a 00 f0 00 42 3e ee e4 00 00 0a 00 f1 00
>025638	42 3e 78 e5 00 00 0a 00 f2 00 42 3e d4 e5 00 00
>025648	0a 00 f3 00 42 3e 02 e6 00 00 0a 00 f4 00 42 3e
>025658	30 e6 00 00 0c 00 f5 00 42 3e f7 ec 1b e0 00 00
>025668	0c 00 f6 00 42 3e ff ec 23 e0 00 00 0c 00 f7 00
>025678	42 3e 00 ed 24 e0 00 00 0c 00 f8 00 42 3e 2e ed
>025688	1b e0 00 00 0c 00 f9 00 42 3e 30 ed 1d e0 00 00
>025698	0c 00 fa 00 42 3e 32 ed 1f e0 00 00 0c 00 fb 00
>0256a8	42 3e 1b ed 22 e0 00 00 0c 00 fc 00 42 3e 1c ed
>0256b8	23 e0 00 00 0c 00 fd 00 42 3e 4b ed 1b e0 00 00
>0256c8	0c 00 fe 00 42 3e 4c ed 1c e0 00 00 0c 00 ff 00
>0256d8	42 3e 4d ed 1d e0 00 00 0c 00 00 01 42 3e 4e ed
>0256e8	1e e0 00 00 0c 00 01 01 42 3e 52 ed 22 e0 00 00
>0256f8	0c 00 02 01 42 3e 53 ed 23 e0 00 00 22 00 03 01
>025708	2d 3e 32 ed 1f e0 06 22 0e 00 0b 3a 58 59 37 51
>025718	34 35 53 53 42 59 0a 24 04 00 00 00 00 00 24 00
>025728	04 01 2d 3e d4 e5 06 22 12 00 0f 55 3c 33 51 37
>025738	56 3c 32 3d 52 38 45 5a 59 44 0a 24 04 00 00 00
>025748	00 00 1c 00 05 01 2d 3e a6 e5 06 22 0a 00 07 47
>025758	57 4f 55 35 53 3d 0a 24 04 00 00 00 00 00 22 00
>025768	06 01 2d 3e 1d ed 24 e0 06 22 0e 00 0a 3a 54 4e
>025778	33 3b 4d 44 32 48 55 00 0a 24 04 00 00 00 00 00
>025788	28 00 07 01 2d 3e 51 ed 21 e0 06 22 14 00 11 56
>025798	39 30 38 39 4c 4f 3f 51 4c 47 4d 45 42 46 4d 3a
>0257a8	0a 24 04 00 00 00 00 00 28 00 08 01 2d 3e 2e ed
>0257b8	1b e0 06 22 14 00 10 33 45 3f 56 46 49 41 58 57
>0257c8	4a 32 33 36 47 49 4e 00 0a 24 04 00 00 00 00 00
>0257d8	1a 00 09 01 2d 3e 30 e6 06 22 08 00 04 4f 3e 31
>0257e8	3c 00 0a 24 04 00 00 00 00 00 20 00 0a 01 2d 3e
>0257f8	d4 e5 06 22 0e 00 0b 3b 32 56 46 3b 53 40 43 34
>025808	36 40 0a 24 04 00 00 00 00 00 1c 00 0b 01 2d 3e
>025818	f9 ec 1d e0 06 22 08 00 05 31 3b 40 54 3d 0a 24
>025828	04 00 00 00 00 00 26 00 0c 01 2d 3e c0 e4 06 22
>025838	14 00 11 3b 46 4e 48 43 57 34 43 39 42 40 4a 58
>025848	47 4c 57 5a 0a 24 04 00 00 00 00 00 26 00 0d 01
>025858	2d 3e c0 e4 06 22 14 00 11 3b 5a 43 54 41 51 3f
>025868	58 57 56 56 54 4b 51 32 52 4c 0a 24 04 00 00 00
>025878	00 00 22 00 0e 01 2d 3e f7 ec 1b e0 06 22 0e 00
>025888	0b 53 30 56 35 59 39 43 58 43 4d 41 0a 24 04 00
>025898	00 00 00 00 1e 00 0f 01 2d 3e 02 e6 06 22 0c 00
>0258a8	09 4c 39 58 31 57 53 39 36 32 0a 24 04 00 00 00
>0258b8	00 00 26 00 10 01 2d 3e 4c ed 1c e0 06 22 12 00
>0258c8	0f 49 49 4b 46 34 37 54 55 57 31 3e 51 57 4d 3f
>0258d8	0a 24 04 00 00 00 00 00 1a 00 11 01 2d 3e 30 e6
>0258e8	06 22 08 00 05 3b 3b 49 38 35 0a 24 04 00 00 00
>0258f8	00 00 08 00 12 01 4d 3a 00 00 10 00 13 01 47 3c
>025908	b0 ca 99 c9 6b cc 21 c0 00 00 0a 00 14 01 42 3e
>025918	1c e5 00 00 0a 00 15 01 42 3e 02 e6 00 00 0a 00
>025928	16 01 42 3e 30 e6 00 00 0c 00 17 01 42 3e f9 ec
>025938	1d e0 00 00 0c 00 18 01 42 3e fa ec 1e e0 00 00
>025948	0c 00 19 01 42 3e fb ec 1f e0 00 00 0c 00 1a 01
>025958	42 3e fc ec 20 e0 00 00 0c 00 1b 01 42 3e 2e ed
>025968	1b e0 00 00 0c 00 1c 01 42 3e 2f ed 1c e0 00 00
>025978	0c 00 1d 01 42 3e 32 ed 1f e0 00 00 0c 00 1e 01
>025988	42 3e 1d ed 24 e0 00 00 0c 00 1f 01 42 3e 4b ed
>025998	1b e0 00 00 0c 00 20 01 42 3e 4e ed 1e e0 00 00
>0259a8	0c 00 21 01 42 3e 4f ed 1f e0 00 00 0c 00 22 01
>0259b8	42 3e 50 ed 20 e0 00 00 0c 00 23 01 42 3e 53 ed
>0259c8	23 e0 00 00 1a 00 24 01 2d 3e fc ec 20 e0 06 22
>0259d8	06 00 03 39 47 43 0a 24 04 00 00 00 00 00 24 00
>0259e8	25 01 2d 3e 1a ed 21 e0 06 22 10 00 0d 55 3c 55
>0259f8	49 3b 4d 33 31 3f 52 45 32 50 0a 24 04 00 00 00
>025a08	00 00 18 00 26 01 2d 3e 2e ed 1b e0 06 22 04 00
>025a18	01 4f 0a 24 04 00 00 00 00 00 22 00 27 01 2d 3e
>025a28	f8 ec 1c e0 06 22 0e 00 0a 3d 30 4d 48 59 59 3a
>025a38	45 4f 52 00 0a 24 04 00 00 00 00 00 22 00 28 01
>025a48	2d 3e 4c ed 1c e0 06 22 0e 00 0a 52 48 4b 46 50
>025a58	55 47 45 49 54 00 0a 24 04 00 00 00 00 00 24 00
>025a68	29 01 2d 3e 4a e5 06 22 12 00 0e 40 45 5a 32 48
>025a78	48 43 33 38 5a 54 5a 39 47 00 0a 24 04 00 00 00
>025a88	00 00 1e 00 2a 01 2d 3e f9 ec 1d e0 06 22 0a 00
>025a98	06 3d 56 47 49 4c 44 00 0a 24 04 00 00 00 00 00
>025aa8	20 00 2b 01 2d 3e f9 ec 1d e0 06 22 0c 00 08 53
>025ab8	32 39 38 36 32 4d 43 00 0a 24 04 00 00 00 00 00
>025ac8	1a 00 2c 01 2d 3e f7 ec 1b e0 06 22 06 00 03 31
>025ad8	53 37 0a 24 04 00 00 00 00 00 16 00 2d 01 2d 3e
>025ae8	4a e5 06 22 04 00 01 43 0a 24 04 00 00 00 00 00
>025af8	18 00 2e 01 2d 3e 1c e5 06 22 06 00 02 44 3c 00
>025b08	0a 24 04 00 00 00 00 00 22 00 2f 01 2d 3e 1c e5
>025b18	06 22 10 00 0c 41 3b 38 3f 31 48 48 3d 34 34 34
>025b28	4d 00 0a 24 04 00 00 00 00 00 1c 00 30 01 2d 3e
>025b38	d4 e5 06 22 0a 00 06 4e 41 33 3d 3f 36 00 0a 24
>025b48	04 00 00 00 00 00 20 00 31 01 2d 3e 00 ed 24 e0
>025b58	06 22 0c 00 08 56 37 55 40 4a 4f 36 3a 00 0a 24
>025b68	04 00 00 00 00 00 1c 00 32 01 2d 3e 30 ed 1d e0
>025b78	06 22 08 00 04 3a 34 4b 53 00 0a 24 04 00 00 00
>025b88	00 00 08 00 33 01 4d 3a 00 00 10 00 34 01 47 3c
>025b98	b0 ca 99 c9 6b cc 22 c0 00 00 0a 00 35 01 42 3e
>025ba8	ee e4 00 00 0a 00 36 01 42 3e a6 e5 00 00 0a 00
>025bb8	37 01 42 3e d4 e5 00 00 0a 00 38 01 42 3e 30 e6
>025bc8	00 00 0a 00 39 01 42 3e 5e e6 00 00 0c 00 3a 01
>025bd8	42 3e f8 ec 1c e0 00 00 0c 00 3b 01 42 3e fe ec
>025be8	22 e0 00 00 0c 00 3c 01 42 3e ff ec 23 e0 00 00
>025bf8	0c 00 3d 01 42 3e 00 ed 24 e0 00 00 0c 00 3e 01
>025c08	42 3e 2f ed 1c e0 00 00 0c 00 3f 01 42 3e 30 ed
>025c18	1d e0 00 00 0c 00 40 01 42 3e 32 ed 1f e0 00 00
>025c28	0c 00 41 01 42 3e 33 ed 20 e0 00 00 0c 00 42 01
>025c38	42 3e 1a ed 21 e0 00 00 0c 00 43 01 42 3e 1b ed
>025c48	22 e0 00 00 0c 00 44 01 42 3e 1c ed 23 e0 00 00
>025c58	0c 00 45 01 42 3e 4e ed 1e e0 00 00 0c 00 46 01
>025c68	42 3e 4f ed 1f e0 00 00 0c 00 47 01 42 3e 50 ed
>025c78	20 e0 00 00 0c 00 48 01 42 3e 53 ed 23 e0 00 00
>025c88	20 00 49 01 2d 3e 1c ed 23 e0 06 22 0c 00 09 47
>025c98	34 4b 3d 4f 44 4e 3a 36 0a 24 04 00 00 00 00 00
>025ca8	28 00 4a 01 2d 3e 30 ed 1d e0 06 22 14 00 11 39
>025cb8	48 50 42 45 4a 33 51 48 32 31 55 48 44 5a 59 3b
>025cc8	0a 24 04 00 00 00 00 00 1c 00 4b 01 2d 3e 00 ed
>025cd8	24 e0 06 22 08 00 04 3c 56 56 51 00 0a 24 04 00
>025ce8	00 00 00 00 24 00 4c 01 2d 3e c0 e4 06 22 12 00
>025cf8	0f 3c 3b 39 52 30 47 57 50 35 4e 57 35 4a 4a 58
>025d08	0a 24 04 00 00 00 00 00 18 00 4d 01 2d 3e 52 ed
>025d18	22 e0 06 22 04 00 00 00 0a 24 04 00 00 00 00 00
>025d28	1a 00 4e 01 2d 3e 2f ed 1c e0 06 22 06 00 02 36
>025d38	4e 00 0a 24 04 00 00 00 00 00 1e 00 4f 01 2d 3e
>025d48	f7 ec 1b e0 06 22 0a 00 07 3f 55 3f 37 49 35 44
>025d58	0a 24 04 00 00 00 00 00 22 00 50 01 2d 3e ff ec
>025d68	23 e0 06 22 0e 00 0a 39 33 49 5a 3a 46 3a 50 47
>025d78	31 00 0a 24 04 00 00 00 00 00 1a 00 51 01 2d 3e
>025d88	4b ed 1b e0 06 22 06 00 03 38 32 4b 0a 24 04 00
>025d98	00 00 00 00 28 00 52 01 2d 3e 33 ed 20 e0 06 22
>025da8	14 00 11 51 41 44 33 52 31 58 37 34 39 58 47 5a
>025db8	3d 32 4d 4a 0a 24 04 00 00 00 00 00 18 00 53 01
>025dc8	2d 3e a6 e5 06 22 06 00 02 3f 3e 00 0a 24 04 00
>025dd8	00 00 00 00 28 00 54 01 2d 3e f7 ec 1b e0 06 22
>025de8	14 00 10 37 3f 59 55 30 39 5a 52 41 34 41 54 4b
>025df8	30 33 42 00 0a 24 04 00 00 00 00 00 1a 00 55 01
>025e08	2d 3e 1a ed 21 e0 06 22 06 00 03 3b 43 4f 0a 24
>025e18	04 00 00 00 00 00 16 00 56 01 2d 3e 78 e5 06 22
>025e28	04 00 00 00 0a 24 04 00 00 00 00 00 28 00 57 01
>025e38	2d 3e fe ec 22 e0 06 22 14 00 11 4c 53 34 48 59
>025e48	4c 4b 4b 51 33 34 56 41 36 34 3c 42 0a 24 04 00
>025e58	00 00 00 00 08 00 58 01 4d 3a 00 00 10 00 59 01
>025e68	47 3c b0 ca 99 c9 6b cc 23 c0 00 00 0a 00 5a 01
>025e78	42 3e c0 e4 00 00 0a 00 5b 01 42 3e 1c e5 00 00
>025e88	0a 00 5c 01 42 3e 4a e5 00 00 0a 00 5d 01 42 3e
>025e98	a6 e5 00 00 0c 00 5e 01 42 3e f7 ec 1b e0 00 00
>025ea8	0c 00 5f 01 42 3e f8 ec 1c e0 00 00 0c 00 60 01
>025eb8	42 3e f9 ec 1d e0 00 00 0c 00 61 01 42 3e fa ec
>025ec8	1e e0 00 00 0c 00 62 01 42 3e fb ec 1f e0 00 00
>025ed8	0c 00 63 01 42 3e fc ec 20 e0 00 00 0c 00 64 01
>025ee8	42 3e fd ec 21 e0 00 00 0c 00 65 01 42 3e fe ec
>025ef8	22 e0 00 00 0c 00 66 01 42 3e 2f ed 1c e0 00 00
>025f08	0c 00 67 01 42 3e 32 ed 1f e0 00 00 0c 00 68 01
>025f18	42 3e 1b ed 22 e0 00 00 0c 00 69 01 42 3e 1d ed
>025f28	24 e0 00 00 0c 00 6a 01 42 3e 4c ed 1c e0 00 00
>025f38	0c 00 6b 01 42 3e 4f ed 1f e0 00 00 0c 00 6c 01
>025f48	42 3e 52 ed 22 e0 00 00 24 00 6d 01 2d 3e 4e ed
>025f58	1e e0 06 22 10 00 0c 59 30 3d 4d 3e 45 52 3b 44
>025f68	41 52 38 00 0a 24 04 00 00 00 00 00 1a 00 6e 01
>025f78	2d 3e 31 ed 1e e0 06 22 06 00 03 49 3a 52 0a 24
>025f88	04 00 00 00 00 00 24 00 6f 01 2d 3e f7 ec 1b e0
>025f98	06 22 10 00 0d 3a 51 38 39 43 4c 5a 30 4c 3c 30
>025fa8	3a 42 0a 24 04 00 00 00 00 00 22 00 70 01 2d 3e
>025fb8	4b ed 1b e0 06 22 0e 00 0b 59 46 55 53 34 51 4b
>025fc8	58 57 31 37 0a 24 04 00 00 00 00 00 22 00 71 01
>025fd8	2d 3e fa ec 1e e0 06 22 0e 00 0a 4d 57 38 3c 5a
>025fe8	33 40 40 4b 50 00 0a 24 04 00 00 00 00 00 22 00
>025ff8	72 01 2d 3e 4a e5 06 22 10 00 0c 41 3d 49 58 3f
>026008	49 40 33 43 4b 31 32 00 0a 24 04 00 00 00 00 00
>026018	20 00 73 01 2d 3e fe ec 22 e0 06 22 0c 00 09 4f
>026028	5a 47 57 3f 52 3f 52 4c 0a 24 04 00 00 00 00 00
>026038	1e 00 74 01 2d 3e c0 e4 06 22 0c 00 08 3f 34 3a
>026048	3f 55 33 58 49 00 0a 24 04 00 00 00 00 00 1c 00
>026058	75 01 2d 3e 5e e6 06 22 0a 00 06 3a 4a 34 42 3c
>026068	31 00 0a 24 04 00 00 00 00 00 1a 00 76 01 2d 3e
>026078	1c e5 06 22 08 00 04 4c 31 4d 40 00 0a 24 04 00
>026088	00 00 00 00 1a 00 77 01 2d 3e 33 ed 20 e0 06 22
>026098	06 00 02 38 54 00 0a 24 04 00 00 00 00 00 1e 00
>0260a8	78 01 2d 3e 30 e6 06 22 0c 00 08 49 48 3e 52 48
>0260b8	45 39 3b 00 0a 24 04 00 00 00 00 00 24 00 79 01
>0260c8	2d 3e f7 ec 1b e0 06 22 10 00 0c 3d 30 51 55 48
>0260d8	4f 39 47 41 38 3d 46 00 0a 24 04 00 00 00 00 00
>0260e8	26 00 7a 01 2d 3e 4c ed 1c e0 06 22 12 00 0f 49
>0260f8	4b 53 30 3e 32 59 48 58 49 44 33 57 3f 41 0a 24
>026108	04 00 00 00 00 00 20 00 7b 01 2d 3e 31 ed 1e e0
>026118	06 22 0c 00 08 3d 32 41 36 51 44 40 39 00 0a 24
>026128	04 00 00 00 00 00 08 00 7c 01 4d 3a 00 00 10 00
>026138	7d 01 47 3c b0 ca 99 c9 6b cc 24 c0 00 00 0a 00
>026148	7e 01 42 3e 1c e5 00 00 0a 00 7f 01 42 3e 78 e5
>026158	00 00 0a 00 80 01 42 3e d4 e5 00 00 0a 00 81 01
>026168	42 3e 02 e6 00 00 0c 00 82 01 42 3e f7 ec 1b e0
>026178	00 00 0c 00 83 01 42 3e f9 ec 1d e0 00 00 0c 00
>026188	84 01 42 3e fb ec 1f e0 00 00 0c 00 85 01 42 3e
>026198	fc ec 20 e0 00 00 0c 00 86 01 42 3e fd ec 21 e0
>0261a8	00 00 0c 00 87 01 42 3e 00 ed 24 e0 00 00 0c 00
>0261b8	88 01 42 3e 2e ed 1b e0 00 00 0c 00 89 01 42 3e
>0261c8	30 ed 1d e0 00 00 0c 00 8a 01 42 3e 1a ed 21 e0
>0261d8	00 00 0c 00 8b 01 42 3e 1d ed 24 e0 00 00 0c 00
>0261e8	8c 01 42 3e 4c ed 1c e0 00 00 0c 00 8d 01 42 3e
>0261f8	4d ed 1d e0 00 00 0c 00 8e 01 42 3e 4f ed 1f e0
>026208	00 00 0c 00 8f 01 42 3e 52 ed 22 e0 00 00 0c 00
>026218	90 01 42 3e 53 ed 23 e0 00 00 20 00 91 01 2d 3e
>026228	fb ec 1f e0 06 22 0c 00 09 4b 40 43 30 31 3b 3f
>026238	4f 31 0a 24 04 00 00 00 00 00 1a 00 92 01 2d 3e
>026248	1c ed 23 e0 06 22 06 00 03 3a 54 38 0a 24 04 00
>026258	00 00 00 00 18 00 93 01 2d 3e 4e ed 1e e0 06 22
>026268	04 00 01 41 0a 24 04 00 00 00 00 00 20 00 94 01
>026278	2d 3e fc ec 20 e0 06 22 0c 00 09 45 3f 37 41 3a
>026288	36 51 45 52 0a 24 04 00 00 00 00 00 20 00 95 01
>026298	2d 3e 4d ed 1d e0 06 22 0c 00 09 30 3e 5a 55 43
>0262a8	46 40 56 3e 0a 24 04 00 00 00 00 00 28 00 96 01
>0262b8	2d 3e 2f ed 1c e0 06 22 14 00 11 42 50 36 57 3a
>0262c8	33 3d 49 55 31 51 4d 38 3a 56 42 4a 0a 24 04 00
>0262d8	00 00 00 00 1e 00 97 01 2d 3e 33 ed 20 e0 06 22
>0262e8	0a 00 06 4d 30 3d 4c 46 59 00 0a 24 04 00 00 00
>0262f8	00 00 1e 00 98 01 2d 3e f9 ec 1d e0 06 22 0a 00
>026308	07 31 4d 3d 3f 3d 4b 4c 0a 24 04 00 00 00 00 00
>026318	26 00 99 01 2d 3e a6 e5 06 22 14 00 11 4c 44 53
>026328	3b 57 57 4d 45 3e 30 30 51 40 40 3f 4e 36 0a 24
>026338	04 00 00 00 00 00 1c 00 9a 01 2d 3e fb ec 1f e0
>026348	06 22 08 00 04 4f 37 52 47 00 0a 24 04 00 00 00
>026358	00 00 24 00 9b 01 2d 3e ff ec 23 e0 06 22 10 00
>026368	0d 40 44 35 54 40 4a 4f 59 3d 4e 5a 37 51 0a 24
>026378	04 00 00 00 00 00 1e 00 9c 01 2d 3e 33 ed 20 e0
>026388	06 22 0a 00 07 57 4b 3f 4d 43 4f 3f 0a 24 04 00
>026398	00 00 00 00 1e 00 9d 01 2d 3e 78 e5 06 22 0c 00
>0263a8	09 55 44 36 3b 52 55 4e 4a 35 0a 24 04 00 00 00
>0263b8	00 00 20 00 9e 01 2d 3e 51 ed 21 e0 06 22 0c 00
>0263c8	09 51 3b 36 57 3d 43 52 52 50 0a 24 04 00 00 00
>0263d8	00 00 24 00 9f 01 2d 3e 4f ed 1f e0 06 22 10 00
>0263e8	0c 4e 52 55 50 58 46 54 4d 3b 40 30 3a 00 0a 24
>0263f8	04 00 00 00 00 00 08 00 a0 01 4d 3a 00 00 10 00
>026408	a1 01 47 3c b0 ca 99 c9 6b cc db c4 00 00 0a 00
>026418	a2 01 42 3e c0 e4 00 00 0a 00 a3 01 42 3e ee e4
>026428	00 00 0a 00 a4 01 42 3e a6 e5 00 00 0a 00 a5 01
>026438	42 3e 02 e6 00 00 0a 00 a6 01 42 3e 30 e6 00 00
>026448	0c 00 a7 01 42 3e f7 ec 1b e0 00 00 0c 00 a8 01
>026458	42 3e f8 ec 1c e0 00 00 0c 00 a9 01 42 3e f9 ec
>026468	1d e0 00 00 0c 00 aa 01 42 3e fa ec 1e e0 00 00
>026478	0c 00 ab 01 42 3e fb ec 1f e0 00 00 0c 00 ac 01
>026488	42 3e fc ec 20 e0 00 00 0c 00 ad 01 42 3e ff ec
>026498	23 e0 00 00 0c 00 ae 01 42 3e 2e ed 1b e0 00 00
>0264a8	0c 00 af 01 42 3e 2f ed 1c e0 00 00 0c 00 b0 01
>0264b8	42 3e 30 ed 1d e0 00 00 0c 00 b1 01 42 3e 31 ed
>0264c8	1e e0 00 00 0c 00 b2 01 42 3e 1a ed 21 e0 00 00
>0264d8	0c 00 b3 01 42 3e 4b ed 1b e0 00 00 0c 00 b4 01
>0264e8	42 3e 4c ed 1c e0 00 00 0c 00 b5 01 42 3e 4d ed
>0264f8	1d e0 00 00 0c 00 b6 01 42 3e 4e ed 1e e0 00 00
>026508	0c 00 b7 01 42 3e 4f ed 1f e0 00 00 0c 00 b8 01
>026518	42 3e 51 ed 21 e0 00 00 0c 00 b9 01 42 3e 52 ed
>026528	22 e0 00 00 28 00 ba 01 2d 3e 1a ed 21 e0 06 22
>026538	14 00 11 4c 37 30 46 40 44 37 51 59 38 59 40 4f
>026548	58 4e 4d 46 0a 24 04 00 00 00 00 00 20 00 bb 01
>026558	2d 3e 1d ed 24 e0 06 22 0c 00 09 53 59 49 48 4a
>026568	4d 32 41 3d 0a 24 04 00 00 00 00 00 22 00 bc 01
>026578	2d 3e 78 e5 06 22 10 00 0d 44 40 56 4a 3c 53 46
>026588	47 35 5a 4b 48 4e 0a 24 04 00 00 00 00 00 20 00
>026598	bd 01 2d 3e 1a ed 21 e0 06 22 0c 00 09 35 4e 39
>0265a8	4b 55 46 50 32 42 0a 24 04 00 00 00 00 00 1a 00
>0265b8	be 01 2d 3e 78 e5 06 22 08 00 04 43 44 39 35 00
>0265c8	0a 24 04 00 00 00 00 00 18 00 bf 01 2d 3e f8 ec
>0265d8	1c e0 06 22 04 00 00 00 0a 24 04 00 00 00 00 00
>0265e8	1c 00 c0 01 2d 3e 2e ed 1b e0 06 22 08 00 05 4d
>0265f8	3f 56 36 42 0a 24 04 00 00 00 00 00 28 00 c1 01
>026608	2d 3e 4f ed 1f e0 06 22 14 00 11 3e 54 39 42 4b
>026618	45 36 30 35 42 3e 54 57 52 54 47 32 0a 24 04 00
>026628	00 00 00 00 26 00 c2 01 2d 3e 4e ed 1e e0 06 22
>026638	12 00 0f 44 4b 41 45 4a 53 4c 44 53 38 57 37 57
>026648	36 49 0a 24 04 00 00 00 00 00 1c 00 c3 01 2d 3e
>026658	4c ed 1c e0 06 22 08 00 05 57 4f 38 56 39 0a 24
>026668	04 00 00 00 00 00 26 00 c4 01 2d 3e 4d ed 1d e0
>026678	06 22 12 00 0e 42 45 45 35 32 35 32 4c 38 57 48
>026688	58 4c 37 00 0a 24 04 00 00 00 00 00 28 00 c5 01
>026698	2d 3e 52 ed 22 e0 06 22 14 00 10 40 55 33 41 34
>0266a8	37 49 3a 37 30 51 33 38 3a 52 58 00 0a 24 04 00
>0266b8	00 00 00 00 1c 00 c6 01 2d 3e 32 ed 1f e0 06 22
>0266c8	08 00 04 59 4d 54 34 00 0a 24 04 00 00 00 00 00
>0266d8	28 00 c7 01 2d 3e fe ec 22 e0 06 22 14 00 11 3e
>0266e8	38 4a 33 45 3b 56 4d 43 46 49 30 57 53 59 3f 46
>0266f8	0a 24 04 00 00 00 00 00 1a 00 c8 01 2d 3e 32 ed
>026708	1f e0 06 22 06 00 02 55 52 00 0a 24 04 00 00 00
>026718	00 00 08 00 c9 01 4d 3a 00 00 10 00 ca 01 47 3c
>026728	b0 ca 99 c9 6b cc 08 c5 00 00 0a 00 cb 01 42 3e
>026738	c0 e4 00 00 0a 00 cc 01 42 3e ee e4 00 00 0a 00
>026748	cd 01 42 3e 4a e5 00 00 0a 00 ce 01 42 3e 78 e5
>026758	00 00 0a 00 cf 01 42 3e a6 e5 00 00 0a 00 d0 01
>026768	42 3e d4 e5 00 00 0a 00 d1 01 42 3e 5e e6 00 00
>026778	0c 00 d2 01 42 3e f8 ec 1c e0 00 00 0c 00 d3 01
>026788	42 3e fa ec 1e e0 00 00 0c 00 d4 01 42 3e fb ec
>026798	1f e0 00 00 0c 00 d5 01 42 3e fc ec 20 e0 00 00
>0267a8	0c 00 d6 01 42 3e fe ec 22 e0 00 00 0c 00 d7 01
>0267b8	42 3e 30 ed 1d e0 00 00 0c 00 d8 01 42 3e 33 ed
>0267c8	20 e0 00 00 0c 00 d9 01 42 3e 1b ed 22 e0 00 00
>0267d8	0c 00 da 01 42 3e 1c ed 23 e0 00 00 0c 00 db 01
>0267e8	42 3e 1d ed 24 e0 00 00 0c 00 dc 01 42 3e 4b ed
>0267f8	1b e0 00 00 0c 00 dd 01 42 3e 4e ed 1e e0 00 00
>026808	0c 00 de 01 42 3e 50 ed 20 e0 00 00 0c 00 df 01
>026818	42 3e 53 ed 23 e0 00 00 1e 00 e0 01 2d 3e fb ec
>026828	1f e0 06 22 0a 00 06 3b 51 59 4e 43 3f 00 0a 24
>026838	04 00 00 00 00 00 1e 00 e1 01 2d 3e fe ec 22 e0
>026848	06 22 0a 00 06 3e 55 3b 58 55 46 00 0a 24 04 00
>026858	00 00 00 00 28 00 e2 01 2d 3e 54 ed 24 e0 06 22
>026868	14 00 11 59 37 32 38 4e 3f 42 51 3b 49 4a 4b 45
>026878	34 48 3f 3b 0a 24 04 00 00 00 00 00 28 00 e3 01
>026888	2d 3e 1b ed 22 e0 06 22 14 00 10 4d 5a 36 44 35
>026898	3c 3c 34 50 49 57 55 46 4d 36 51 00 0a 24 04 00
>0268a8	00 00 00 00 22 00 e4 01 2d 3e ff ec 23 e0 06 22
>0268b8	0e 00 0b 32 5a 4b 4a 50 54 59 46 37 5a 59 0a 24
>0268c8	04 00 00 00 00 00 1a 00 e5 01 2d 3e ff ec 23 e0
>0268d8	06 22 06 00 02 39 36 00 0a 24 04 00 00 00 00 00
>0268e8	28 00 e6 01 2d 3e ff ec 23 e0 06 22 14 00 10 4e
>0268f8	4c 4d 3e 53 54 37 44 3f 4c 54 54 59 36 47 46 00
>026908	0a 24 04 00 00 00 00 00 1a 00 e7 01 2d 3e 1c ed
>026918	23 e0 06 22 06 00 02 31 43 00 0a 24 04 00 00 00
>026928	00 00 24 00 e8 01 2d 3e 53 ed 23 e0 06 22 10 00
>026938	0d 48 58 52 43 33 35 41 53 58 4d 54 46 47 0a 24
>026948	04 00 00 00 00 00 16 00 e9 01 2d 3e 30 e6 06 22
>026958	04 00 00 00 0a 24 04 00 00 00 00 00 26 00 ea 01
>026968	2d 3e f9 ec 1d e0 06 22 12 00 0e 43 3e 3e 4a 59
>026978	39 3e 32 58 56 30 48 38 34 00 0a 24 04 00 00 00
>026988	00 00 28 00 eb 01 2d 3e f8 ec 1c e0 06 22 14 00
>026998	10 54 3c 33 4d 52 40 34 5a 38 39 43 34 34 59 57
>0269a8	45 00 0a 24 04 00 00 00 00 00 1a 00 ec 01 2d 3e
>0269b8	4a e5 06 22 08 00 04 46 30 43 3b 00 0a 24 04 00
>0269c8	00 00 00 00 18 00 ed 01 2d 3e 1c ed 23 e0 06 22
>0269d8	04 00 01 34 0a 24 04 00 00 00 00 00 1e 00 ee 01
>0269e8	2d 3e 52 ed 22 e0 06 22 0a 00 06 58 49 4b 47 3b
>0269f8	40 00 0a 24 04 00 00 00 00 00 08 00 ef 01 4d 3a
>026a08	00 00 10 00 f0 01 47 3c b0 ca 99 c9 6b cc 35 c5
>026a18	00 00 0a 00 f1 01 42 3e ee e4 00 00 0a 00 f2 01
>026a28	42 3e 1c e5 00 00 0a 00 f3 01 42 3e 4a e5 00 00
>026a38	0a 00 f4 01 42 3e 78 e5 00 00 0a 00 f5 01 42 3e
>026a48	a6 e5 00 00 0a 00 f6 01 42 3e 30 e6 00 00 0a 00
>026a58	f7 01 42 3e 5e e6 00 00 0c 00 f8 01 42 3e f7 ec
>026a68	1b e0 00 00 0c 00 f9 01 42 3e f8 ec 1c e0 00 00
>026a78	0c 00 fa 01 42 3e f9 ec 1d e0 00 00 0c 00 fb 01
>026a88	42 3e fa ec 1e e0 00 00 0c 00 fc 01 42 3e fe ec
>026a98	22 e0 00 00 0c 00 fd 01 42 3e ff ec 23 e0 00 00
>026aa8	0c 00 fe 01 42 3e 00 ed 24 e0 00 00 0c 00 ff 01
>026ab8	42 3e 2e ed 1b e0 00 00 0c 00 00 02 42 3e 30 ed
>026ac8	1d e0 00 00 0c 00 01 02 42 3e 31 ed 1e e0 00 00
>026ad8	0c 00 02 02 42 3e 32 ed 1f e0 00 00 0c 00 03 02
>026ae8	42 3e 33 ed 20 e0 00 00 0c 00 04 02 42 3e 1a ed
>026af8	21 e0 00 00 0c 00 05 02 42 3e 1b ed 22 e0 00 00
>026b08	0c 00 06 02 42 3e 1d ed 24 e0 00 00 0c 00 07 02
>026b18	42 3e 4b ed 1b e0 00 00 0c 00 08 02 42 3e 4c ed
>026b28	1c e0 00 00 0c 00 09 02 42 3e 4e ed 1e e0 00 00
>026b38	0c 00 0a 02 42 3e 4f ed 1f e0 00 00 0c 00 0b 02
>026b48	42 3e 52 ed 22 e0 00 00 0c 00 0c 02 42 3e 53 ed
>026b58	23 e0 00 00 20 00 0d 02 2d 3e fc ec 20 e0 06 22
>026b68	0c 00 09 32 33 59 3f 40 4c 41 3e 4d 0a 24 04 00
>026b78	00 00 00 00 26 00 0e 02 2d 3e 1a ed 21 e0 06 22
>026b88	12 00 0e 41 39 3f 41 38 44 51 53 46 59 46 38 31
>026b98	3a 00 0a 24 04 00 00 00 00 00 1c 00 0f 02 2d 3e
>026ba8	fc ec 20 e0 06 22 08 00 04 3a 46 45 3b 00 0a 24
>026bb8	04 00 00 00 00 00 28 00 10 02 2d 3e f9 ec 1d e0
>026bc8	06 22 14 00 10 32 31 31 4f 53 50 44 40 35 3c 47
>026bd8	37 4f 3e 58 42 00 0a 24 04 00 00 00 00 00 1e 00
>026be8	11 02 2d 3e fa ec 1e e0 06 22 0a 00 07 39 54 51
>026bf8	45 36 41 42 0a 24 04 00 00 00 00 00 16 00 12 02
>026c08	2d 3e 30 e6 06 22 04 00 01 51 0a 24 04 00 00 00
>026c18	00 00 18 00 13 02 2d 3e 4d ed 1d e0 06 22 04 00
>026c28	00 00 0a 24 04 00 00 00 00 00 24 00 14 02 2d 3e
>026c38	5e e6 06 22 12 00 0f 3f 42 50 57 46 46 3a 4e 49
>026c48	42 48 35 56 58 36 0a 24 04 00 00 00 00 00 26 00
>026c58	15 02 2d 3e 2e ed 1b e0 06 22 12 00 0f 56 4a 30
>026c68	40 3b 4a 4e 35 40 46 45 3e 4d 46 56 0a 24 04 00
>026c78	00 00 00 00 22 00 16 02 2d 3e 32 ed 1f e0 06 22
>026c88	0e 00 0a 45 39 4e 55 4b 3b 57 55 31 36 00 0a 24
>026c98	04 00 00 00 00 00 26 00 17 02 2d 3e ee e4 06 22
>026ca8	14 00 11 37 33 36 40 46 3f 59 44 39 4c 49 53 46
>026cb8	45 54 45 47 0a 24 04 00 00 00 00 00 16 00 18 02
>026cc8	2d 3e d4 e5 06 22 04 00 00 00 0a 24 04 00 00 00
>026cd8	00 00 16 00 19 02 2d 3e 4a e5 06 22 04 00 00 00
>026ce8	0a 24 04 00 00 00 00 00 1e 00 1a 02 2d 3e 4f ed
>026cf8	1f e0 06 22 0a 00 07 4d 58 4f 3c 45 58 3a 0a 24
>026d08	04 00 00 00 00 00 20 00 1b 02 2d 3e 4e ed 1e e0
>026d18	06 22 0c 00 09 4f 31 58 4f 51 41 4f 51 55 0a 24
>026d28	04 00 00 00 00 00 08 00 1c 02 4d 3a 00 00 10 00
>026d38	1d 02 47 3c b0 ca 99 c9 6b cc 62 c5 00 00 0a 00
>026d48	1e 02 42 3e c0 e4 00 00 0a 00 1f 02 42 3e ee e4
>026d58	00 00 0a 00 20 02 42 3e 02 e6 00 00 0a 00 21 02
>026d68	42 3e 5e e6 00 00 0c 00 22 02 42 3e f7 ec 1b e0
>026d78	00 00 0c 00 23 02 42 3e f8 ec 1c e0 00 00 0c 00
>026d88	24 02 42 3e f9 ec 1d e0 00 00 0c 00 25 02 42 3e
>026d98	fa ec 1e e0 00 00 0c 00 26 02 42 3e fc ec 20 e0
>026da8	00 00 0c 00 27 02 42 3e fe ec 22 e0 00 00 0c 00
>026db8	28 02 42 3e ff ec 23 e0 00 00 0c 00 29 02 42 3e
>026dc8	30 ed 1d e0 00 00 0c 00 2a 02 42 3e 1b ed 22 e0
>026dd8	00 00 0c 00 2b 02 42 3e 4c ed 1c e0 00 00 0c 00
>026de8	2c 02 42 3e 4d ed 1d e0 00 00 0c 00 2d 02 42 3e
>026df8	4f ed 1f e0 00 00 0c 00 2e 02 42 3e 50 ed 20 e0
>026e08	00 00 0c 00 2f 02 42 3e 51 ed 21 e0 00 00 0c 00
>026e18	30 02 42 3e 53 ed 23 e0 00 00 1a 00 31 02 2d 3e
>026e28	2e ed 1b e0 06 22 06 00 02 3d 3b 00 0a 24 04 00
>026e38	00 00 00 00 22 00 32 02 2d 3e 1a ed 21 e0 06 22
>026e48	0e 00 0b 51 42 45 34 4b 45 41 39 4c 55 3e 0a 24
>026e58	04 00 00 00 00 00 20 00 33 02 2d 3e 30 ed 1d e0
>026e68	06 22 0c 00 09 4e 38 47 3d 38 55 42 4d 55 0a 24
>026e78	04 00 00 00 00 00 1c 00 34 02 2d 3e 1b ed 22 e0
>026e88	06 22 08 00 05 3e 49 40 57 30 0a 24 04 00 00 00
>026e98	00 00 1e 00 35 02 2d 3e fc ec 20 e0 06 22 0a 00
>026ea8	06 57 4f 46 53 31 4d 00 0a 24 04 00 00 00 00 00
>026eb8	24 00 36 02 2d 3e 1c ed 23 e0 06 22 10 00 0c 36
>026ec8	51 5a 51 3d 54 3a 4a 51 5a 58 4b 00 0a 24 04 00
>026ed8	00 00 00 00 18 00 37 02 2d 3e 50 ed 20 e0 06 22
>026ee8	04 00 00 00 0a 24 04 00 00 00 00 00 24 00 38 02
>026ef8	2d 3e fa ec 1e e0 06 22 10 00 0c 37 36 4a 4f 37
>026f08	45 34 5a 4c 44 41 51 00 0a 24 04 00 00 00 00 00
>026f18	20 00 39 02 2d 3e 30 ed 1d e0 06 22 0c 00 08 3c
>026f28	4c 36 53 51 3e 4d 50 00 0a 24 04 00 00 00 00 00
>026f38	24 00 3a 02 2d 3e 32 ed 1f e0 06 22 10 00 0d 39
>026f48	58 31 3f 4b 5a 56 38 3f 36 37 49 59 0a 24 04 00
>026f58	00 00 00 00 26 00 3b 02 2d 3e 52 ed 22 e0 06 22
>026f68	12 00 0e 53 3e 47 39 37 30 57 52 52 34 4f 5a 57
>026f78	34 00 0a 24 04 00 00 00 00 00 1e 00 3c 02 2d 3e
>026f88	54 ed 24 e0 06 22 0a 00 06 3c 57 33 40 4f 40 00
>026f98	0a 24 04 00 00 00 00 00 28 00 3d 02 2d 3e 1c ed
>026fa8	23 e0 06 22 14 00 10 34 3a 54 34 49 3e 52 31 53
>026fb8	56 35 31 47 4c 4d 39 00 0a 24 04 00 00 00 00 00
>026fc8	24 00 3e 02 2d 3e 32 ed 1f e0 06 22 10 00 0d 40
>026fd8	30 3a 32 42 39 55 34 3a 34 3c 33 55 0a 24 04 00
>026fe8	00 00 00 00 22 00 3f 02 2d 3e fa ec 1e e0 06 22
>026ff8	0e 00 0b 3c 34 31 59 4c 53 51 52 4e 53 42 0a 24
>027008	04 00 00 00 00 00 08 00 40 02 4d 3a 00 00 10 00
>027018	41 02 47 3c b0 ca 99 c9 6b cc 8f c5 00 00 0a 00
>027028	42 02 42 3e c0 e4 00 00 0a 00 43 02 42 3e ee e4
>027038	00 00 0a 00 44 02 42 3e 4a e5 00 00 0a 00 45 02
>027048	42 3e 78 e5 00 00 0a 00 46 02 42 3e a6 e5 00 00
>027058	0a 00 47 02 42 3e d4 e5 00 00 0c 00 48 02 42 3e
>027068	fd ec 21 e0 00 00 0c 00 49 02 42 3e 31 ed 1e e0
>027078	00 00 0c 00 4a 02 42 3e 32 ed 1f e0 00 00 0c 00
>027088	4b 02 42 3e 33 ed 20 e0 00 00 0c 00 4c 02 42 3e
>027098	1d ed 24 e0 00 00 0c 00 4d 02 42 3e 4f ed 1f e0
>0270a8	00 00 0c 00 4e 02 42 3e 51 ed 21 e0 00 00 0c 00
>0270b8	4f 02 42 3e 52 ed 22 e0 00 00 0c 00 50 02 42 3e
>0270c8	53 ed 23 e0 00 00 0c 00 51 02 42 3e 54 ed 24 e0
>0270d8	00 00 20 00 52 02 2d 3e 2f ed 1c e0 06 22 0c 00
>0270e8	08 47 41 41 34 38 56 38 50 00 0a 24 04 00 00 00
>0270f8	00 00 24 00 53 02 2d 3e fb ec 1f e0 06 22 10 00
>027108	0d 4f 41 3d 4a 34 56 35 55 3a 38 55 51 46 0a 24
>027118	04 00 00 00 00 00 1a 00 54 02 2d 3e fb ec 1f e0
>027128	06 22 06 00 03 4c 39 4b 0a 24 04 00 00 00 00 00
>027138	18 00 55 02 2d 3e 2f ed 1c e0 06 22 04 00 01 3f
>027148	0a 24 04 00 00 00 00 00 22 00 56 02 2d 3e f9 ec
>027158	1d e0 06 22 0e 00 0a 34 51 41 37 57 45 51 59 4c
>027168	58 00 0a 24 04 00 00 00 00 00 26 00 57 02 2d 3e
>027178	f7 ec 1b e0 06 22 12 00 0e 4f 4f 50 49 48 4d 32
>027188	45 45 37 46 31 5a 3e 00 0a 24 04 00 00 00 00 00
>027198	1a 00 58 02 2d 3e fd ec 21 e0 06 22 06 00 03 3b
>0271a8	58 3a 0a 24 04 00 00 00 00 00 1e 00 59 02 2d 3e
>0271b8	f8 ec 1c e0 06 22 0a 00 06 39 3e 3d 5a 4d 5a 00
>0271c8	0a 24 04 00 00 00 00 00 24 00 5a 02 2d 3e fa ec
>0271d8	1e e0 06 22 10 00 0d 4b 38 46 50 4f 40 4c 4e 39
>0271e8	56 55 35 3e 0a 24 04 00 00 00 00 00 1e 00 5b 02
>0271f8	2d 3e fd ec 21 e0 06 22 0a 00 07 4a 4d 38 53 34
>027208	36 3a 0a 24 04 00 00 00 00 00 1e 00 5c 02 2d 3e
>027218	31 ed 1e e0 06 22 0a 00 07 5a 59 3e 56 35 3e 53
>027228	0a 24 04 00 00 00 00 00 28 00 5d 02 2d 3e 33 ed
>027238	20 e0 06 22 14 00 11 3e 38 59 3d 4c 49 3d 3c 39
>027248	39 58 59 31 3a 39 58 45 0a 24 04 00 00 00 00 00
>027258	16 00 5e 02 2d 3e 78 e5 06 22 04 00 01 4d 0a 24
>027268	04 00 00 00 00 00 20 00 5f 02 2d 3e 4e ed 1e e0
>027278	06 22 0c 00 09 4e 31 3d 34 40 46 57 37 33 0a 24
>027288	04 00 00 00 00 00 26 00 60 02 2d 3e 30 ed 1d e0
>027298	06 22 12 00 0f 4a 4a 37 4e 49 4f 4d 36 35 58 3c
>0272a8	56 54 40 54 0a 24 04 00 00 00 00 00 08 00 61 02
>0272b8	4d 3a 00 00 10 00 62 02 47 3c b0 ca 99 c9 6b cc
>0272c8	bc c5 00 00 0a 00 63 02 42 3e ee e4 00 00 0a 00
>0272d8	64 02 42 3e a6 e5 00 00 0a 00 65 02 42 3e d4 e5
>0272e8	00 00 0a 00 66 02 42 3e 02 e6 00 00 0c 00 67 02
>0272f8	42 3e f8 ec 1c e0 00 00 0c 00 68 02 42 3e f9 ec
>027308	1d e0 00 00 0c 00 69 02 42 3e fa ec 1e e0 00 00
>027318	0c 00 6a 02 42 3e fb ec 1f e0 00 00 0c 00 6b 02
>027328	42 3e fc ec 20 e0 00 00 0c 00 6c 02 42 3e fd ec
>027338	21 e0 00 00 0c 00 6d 02 42 3e fe ec 22 e0 00 00
>027348	0c 00 6e 02 42 3e ff ec 23 e0 00 00 0c 00 6f 02
>027358	42 3e 00 ed 24 e0 00 00 0c 00 70 02 42 3e 30 ed
>027368	1d e0 00 00 0c 00 71 02 42 3e 31 ed 1e e0 00 00
>027378	0c 00 72 02 42 3e 32 ed 1f e0 00 00 0c 00 73 02
>027388	42 3e 33 ed 20 e0 00 00 0c 00 74 02 42 3e 4b ed
>027398	1b e0 00 00 0c 00 75 02 42 3e 4d ed 1d e0 00 00
>0273a8	0c 00 76 02 42 3e 50 ed 20 e0 00 00 0c 00 77 02
>0273b8	42 3e 53 ed 23 e0 00 00 0c 00 78 02 42 3e 54 ed
>0273c8	24 e0 00 00 24 00 79 02 2d 3e 30 e6 06 22 12 00
>0273d8	0f 32 36 38 40 34 5a 55 3d 40 38 54 3e 3a 58 4f
>0273e8	0a 24 04 00 00 00 00 00 20 00 7a 02 2d 3e 5e e6
>0273f8	06 22 0e 00 0a 39 3e 35 51 47 49 50 55 30 43 00
>027408	0a 24 04 00 00 00 00 00 18 00 7b 02 2d 3e fc ec
>027418	20 e0 06 22 04 00 00 00 0a 24 04 00 00 00 00 00
>027428	26 00 7c 02 2d 3e f9 ec 1d e0 06 22 12 00 0f 53
>027438	4f 42 32 39 56 44 4b 3d 57 48 3b 30 3a 58 0a 24
>027448	04 00 00 00 00 00 18 00 7d 02 2d 3e 78 e5 06 22
>027458	06 00 03 54 4f 31 0a 24 04 00 00 00 00 00 1a 00
>027468	7e 02 2d 3e 52 ed 22 e0 06 22 06 00 02 58 42 00
>027478	0a 24 04 00 00 00 00 00 24 00 7f 02 2d 3e 4f ed
>027488	1f e0 06 22 10 00 0d 4c 52 4f 4d 50 46 58 48 47
>027498	41 54 53 50 0a 24 04 00 00 00 00 00 26 00 80 02
>0274a8	2d 3e 4b ed 1b e0 06 22 12 00 0f 59 3a 41 46 3d
>0274b8	3e 3a 56 32 57 3e 3e 45 5a 49 0a 24 04 00 00 00
>0274c8	00 00 22 00 81 02 2d 3e 2e ed 1b e0 06 22 0e 00
>0274d8	0b 50 42 4b 3a 51 45 31 54 3b 58 34 0a 24 04 00
>0274e8	00 00 00 00 24 00 82 02 2d 3e 2f ed 1c e0 06 22
>0274f8	10 00 0c 45 3b 36 58 41 33 33 3b 4b 39 4d 51 00
>027508	0a 24 04 00 00 00 00 00 1a 00 83 02 2d 3e 1d ed
>027518	24 e0 06 22 06 00 02 4d 48 00 0a 24 04 00 00 00
>027528	00 00 1e 00 84 02 2d 3e f8 ec 1c e0 06 22 0a 00
>027538	07 34 44 4a 46 34 44 54 0a 24 04 00 00 00 00 00
>027548	1a 00 85 02 2d 3e 1a ed 21 e0 06 22 06 00 02 39
>027558	51 00 0a 24 04 00 00 00 00 00 22 00 86 02 2d 3e
>027568	33 ed 20 e0 06 22 0e 00 0a 44 31 5a 4e 37 4a 55
>027578	56 30 41 00 0a 24 04 00 00 00 00 00 22 00 87 02
>027588	2d 3e fa ec 1e e0 06 22 0e 00 0b 3d 5a 50 49 51
>027598	40 52 33 57 5a 54 0a 24 04 00 00 00 00 00 08 00
>0275a8	88 02 4d 3a 00 00 10 00 89 02 47 3c b0 ca 99 c9
>0275b8	6b cc e9 c5 00 00 0a 00 8a 02 42 3e c0 e4 00 00
>0275c8	0a 00 8b 02 42 3e ee e4 00 00 0a 00 8c 02 42 3e
>0275d8	4a e5 00 00 0a 00 8d 02 42 3e 78 e5 00 00 0a 00
>0275e8	8e 02 42 3e a6 e5 00 00 0a 00 8f 02 42 3e d4 e5
>0275f8	00 00 0a 00 90 02 42 3e 30 e6 00 00 0a 00 91 02
>027608	42 3e 5e e6 00 00 0c 00 92 02 42 3e f9 ec 1d e0
>027618	00 00 0c 00 93 02 42 3e fa ec 1e e0 00 00 0c 00
>027628	94 02 42 3e fb ec 1f e0 00 00 0c 00 95 02 42 3e
>027638	fc ec 20 e0 00 00 0c 00 96 02 42 3e fe ec 22 e0
>027648	00 00 0c 00 97 02 42 3e 00 ed 24 e0 00 00 0c 00
>027658	98 02 42 3e 2e ed 1b e0 00 00 0c 00 99 02 42 3e
>027668	2f ed 1c e0 00 00 0c 00 9a 02 42 3e 30 ed 1d e0
>027678	00 00 0c 00 9b 02 42 3e 32 ed 1f e0 00 00 0c 00
>027688	9c 02 42 3e 1b ed 22 e0 00 00 0c 00 9d 02 42 3e
>027698	1c ed 23 e0 00 00 0c 00 9e 02 42 3e 1d ed 24 e0
>0276a8	00 00 0c 00 9f 02 42 3e 4c ed 1c e0 00 00 0c 00
>0276b8	a0 02 42 3e 4d ed 1d e0 00 00 0c 00 a1 02 42 3e
>0276c8	53 ed 23 e0 00 00 0c 00 a2 02 42 3e 54 ed 24 e0
>0276d8	00 00 18 00 a3 02 2d 3e 53 ed 23 e0 06 22 04 00
>0276e8	00 00 0a 24 04 00 00 00 00 00 18 00 a4 02 2d 3e
>0276f8	30 ed 1d e0 06 22 04 00 00 00 0a 24 04 00 00 00
>027708	00 00 18 00 a5 02 2d 3e 1b ed 22 e0 06 22 04 00
>027718	01 44 0a 24 04 00 00 00 00 00 18 00 a6 02 2d 3e
>027728	a6 e5 06 22 06 00 02 37 54 00 0a 24 04 00 00 00
>027738	00 00 18 00 a7 02 2d 3e fe ec 22 e0 06 22 04 00
>027748	00 00 0a 24 04 00 00 00 00 00 26 00 a8 02 2d 3e
>027758	00 ed 24 e0 06 22 12 00 0f 3c 41 48 49 53 3c 47
>027768	5a 3d 53 4c 57 35 31 4d 0a 24 04 00 00 00 00 00
>027778	22 00 a9 02 2d 3e 52 ed 22 e0 06 22 0e 00 0a 45
>027788	50 55 3e 4a 46 59 36 5a 32 00 0a 24 04 00 00 00
>027798	00 00 24 00 aa 02 2d 3e d4 e5 06 22 12 00 0e 50
>0277a8	46 45 31 39 40 57 4e 4c 4f 48 53 54 42 00 0a 24
>0277b8	04 00 00 00 00 00 26 00 ab 02 2d 3e 4a e5 06 22
>0277c8	14 00 11 52 3b 3b 51 34 4f 58 4a 4e 39 41 59 52
>0277d8	51 53 4d 34 0a 24 04 00 00 00 00 00 1a 00 ac 02
>0277e8	2d 3e 4f ed 1f e0 06 22 06 00 03 55 48 4d 0a 24
>0277f8	04 00 00 00 00 00 1c 00 ad 02 2d 3e 1d ed 24 e0
>027808	06 22 08 00 04 3e 33 3f 33 00 0a 24 04 00 00 00
>027818	00 00 1e 00 ae 02 2d 3e fa ec 1e e0 06 22 0a 00
>027828	07 4a 45 3c 37 46 55 40 0a 24 04 00 00 00 00 00
>027838	1e 00 af 02 2d 3e ee e4 06 22 0c 00 09 43 4f 37
>027848	3b 36 45 4d 50 46 0a 24 04 00 00 00 00 00 1c 00
>027858	b0 02 2d 3e fa ec 1e e0 06 22 08 00 04 38 3d 55
>027868	4d 00 0a 24 04 00 00 00 00 00 18 00 b1 02 2d 3e
>027878	ff ec 23 e0 06 22 04 00 01 4f 0a 24 04 00 00 00
>027888	00 00 08 00 b2 02 4d 3a 00 00 10 00 b3 02 47 3c
>027898	b0 ca 99 c9 6b cc 16 c6 00 00 0a 00 b4 02 42 3e
>0278a8	c0 e4 00 00 0a 00 b5 02 42 3e 1c e5 00 00 0a 00
>0278b8	b6 02 42 3e 4a e5 00 00 0a 00 b7 02 42 3e a6 e5
>0278c8	00 00 0a 00 b8 02 42 3e 02 e6 00 00 0c 00 b9 02
>0278d8	42 3e f8 ec 1c e0 00 00 0c 00 ba 02 42 3e fa ec
>0278e8	1e e0 00 00 0c 00 bb 02 42 3e fb ec 1f e0 00 00
>0278f8	0c 00 bc 02 42 3e fc ec 20 e0 00 00 0c 00 bd 02
>027908	42 3e fd ec 21 e0 00 00 0c 00 be 02 42 3e fe ec
>027918	22 e0 00 00 0c 00 bf 02 42 3e 2e ed 1b e0 00 00
>027928	0c 00 c0 02 42 3e 30 ed 1d e0 00 00 0c 00 c1 02
>027938	42 3e 32 ed 1f e0 00 00 0c 00 c2 02 42 3e 33 ed
>027948	20 e0 00 00 0c 00 c3 02 42 3e 1a ed 21 e0 00 00
>027958	0c 00 c4 02 42 3e 1c ed 23 e0 00 00 0c 00 c5 02
>027968	42 3e 1d ed 24 e0 00 00 0c 00 c6 02 42 3e 4b ed
>027978	1b e0 00 00 0c 00 c7 02 42 3e 4e ed 1e e0 00 00
>027988	0c 00 c8 02 42 3e 50 ed 20 e0 00 00 0c 00 c9 02
>027998	42 3e 51 ed 21 e0 00 00 0c 00 ca 02 42 3e 53 ed
>0279a8	23 e0 00 00 1a 00 cb 02 2d 3e 4b ed 1b e0 06 22
>0279b8	06 00 02 49 3d 00 0a 24 04 00 00 00 00 00 1a 00
>0279c8	cc 02 2d 3e 32 ed 1f e0 06 22 06 00 03 31 59 31
>0279d8	0a 24 04 00 00 00 00 00 24 00 cd 02 2d 3e f9 ec
>0279e8	1d e0 06 22 10 00 0d 47 49 58 4c 59 59 52 34 57
>0279f8	41 4d 5a 39 0a 24 04 00 00 00 00 00 1c 00 ce 02
>027a08	2d 3e 30 ed 1d e0 06 22 08 00 05 40 3e 51 59 59
>027a18	0a 24 04 00 00 00 00 00 1e 00 cf 02 2d 3e 78 e5
>027a28	06 22 0c 00 08 34 48 31 4b 45 42 50 3f 00 0a 24
>027a38	04 00 00 00 00 00 1c 00 d0 02 2d 3e ff ec 23 e0
>027a48	06 22 08 00 04 57 45 4a 4e 00 0a 24 04 00 00 00
>027a58	00 00 22 00 d1 02 2d 3e 5e e6 06 22 10 00 0d 39
>027a68	57 3d 50 49 31 55 31 4f 41 38 32 3f 0a 24 04 00
>027a78	00 00 00 00 20 00 d2 02 2d 3e 52 ed 22 e0 06 22
>027a88	0c 00 09 48 39 4f 33 48 50 52 56 4e 0a 24 04 00
>027a98	00 00 00 00 1c 00 d3 02 2d 3e 4f ed 1f e0 06 22
>027aa8	08 00 05 57 39 39 32 5a 0a 24 04 00 00 00 00 00
>027ab8	20 00 d4 02 2d 3e 4d ed 1d e0 06 22 0c 00 09 40
>027ac8	46 40 56 50 30 4c 40 5a 0a 24 04 00 00 00 00 00
>027ad8	20 00 d5 02 2d 3e 33 ed 20 e0 06 22 0c 00 08 37
>027ae8	46 34 38 56 55 41 46 00 0a 24 04 00 00 00 00 00
>027af8	1c 00 d6 02 2d 3e fc ec 20 e0 06 22 08 00 05 4f
>027b08	48 4d 44 3d 0a 24 04 00 00 00 00 00 1a 00 d7 02
>027b18	2d 3e ee e4 06 22 08 00 05 54 51 47 51 3c 0a 24
>027b28	04 00 00 00 00 00 20 00 d8 02 2d 3e 5e e6 06 22
>027b38	0e 00 0a 54 5a 3f 36 41 45 4c 53 4f 31 00 0a 24
>027b48	04 00 00 00 00 00 24 00 d9 02 2d 3e 1d ed 24 e0
>027b58	06 22 10 00 0d 55 44 3b 3e 39 39 4c 38 46 3b 55
>027b68	45 34 0a 24 04 00 00 00 00 00 08 00 da 02 4d 3a
>027b78	00 00 10 00 db 02 47 3c b0 ca 99 c9 6b cc 43 c6
>027b88	00 00 0a 00 dc 02 42 3e c0 e4 00 00 0a 00 dd 02
>027b98	42 3e ee e4 00 00 0a 00 de 02 42 3e 78 e5 00 00
>027ba8	0a 00 df 02 42 3e d4 e5 00 00 0a 00 e0 02 42 3e
>027bb8	5e e6 00 00 0c 00 e1 02 42 3e f9 ec 1d e0 00 00
>027bc8	0c 00 e2 02 42 3e fa ec 1e e0 00 00 0c 00 e3 02
>027bd8	42 3e fb ec 1f e0 00 00 0c 00 e4 02 42 3e fe ec
>027be8	22 e0 00 00 0c 00 e5 02 42 3e ff ec 23 e0 00 00
>027bf8	0c 00 e6 02 42 3e 2f ed 1c e0 00 00 0c 00 e7 02
>027c08	42 3e 30 ed 1d e0 00 00 0c 00 e8 02 42 3e 31 ed
>027c18	1e e0 00 00 0c 00 e9 02 42 3e 1a ed 21 e0 00 00
>027c28	0c 00 ea 02 42 3e 1c ed 23 e0 00 00 0c 00 eb 02
>027c38	42 3e 1d ed 24 e0 00 00 0c 00 ec 02 42 3e 4c ed
>027c48	1c e0 00 00 0c 00 ed 02 42 3e 4d ed 1d e0 00 00
>027c58	0c 00 ee 02 42 3e 4e ed 1e e0 00 00 0c 00 ef 02
>027c68	42 3e 52 ed 22 e0 00 00 1e 00 f0 02 2d 3e a6 e5
>027c78	06 22 0c 00 09 48 48 41 43 41 56 4f 45 52 0a 24
>027c88	04 00 00 00 00 00 1c 00 f1 02 2d 3e f9 ec 1d e0
>027c98	06 22 08 00 05 35 36 42 49 39 0a 24 04 00 00 00
>027ca8	00 00 28 00 f2 02 2d 3e 52 ed 22 e0 06 22 14 00
>027cb8	11 4e 55 59 47 51 3d 43 4b 4e 57 33 3a 4d 33 4b
>027cc8	46 39 0a 24 04 00 00 00 00 00 20 00 f3 02 2d 3e
>027cd8	f7 ec 1b e0 06 22 0c 00 09 55 3c 41 49 37 36 33
>027ce8	55 34 0a 24 04 00 00 00 00 00 18 00 f4 02 2d 3e
>027cf8	1c e5 06 22 06 00 02 3f 33 00 0a 24 04 00 00 00
>027d08	00 00 18 00 f5 02 2d 3e ee e4 06 22 06 00 02 52
>027d18	4d 00 0a 24 04 00 00 00 00 00 1a 00 f6 02 2d 3e
>027d28	33 ed 20 e0 06 22 06 00 02 5a 54 00 0a 24 04 00
>027d38	00 00 00 00 28 00 f7 02 2d 3e 31 ed 1e e0 06 22
>027d48	14 00 10 55 3c 4c 3b 58 31 36 36 53 45 3a 47 46
>027d58	46 44 55 00 0a 24 04 00 00 00 00 00 18 00 f8 02
>027d68	2d 3e fe ec 22 e0 06 22 04 00 00 00 0a 24 04 00
>027d78	00 00 00 00 28 00 f9 02 2d 3e fe ec 22 e0 06 22
>027d88	14 00 11 41 3a 36 46 42 50 3a 47 3a 3e 34 36 59
>027d98	30 36 36 3f 0a 24 04 00 00 00 00 00 24 00 fa 02
>027da8	2d 3e ff ec 23 e0 06 22 10 00 0d 3b 50 50 46 34
>027db8	54 54 4b 3d 45 4a 3a 50 0a 24 04 00 00 00 00 00
>027dc8	1e 00 fb 02 2d 3e 1c ed 23 e0 06 22 0a 00 06 40
>027dd8	32 47 3d 41 41 00 0a 24 04 00 00 00 00 00 16 00
>027de8	fc 02 2d 3e 5e e6 06 22 04 00 01 43 0a 24 04 00
>027df8	00 00 00 00 26 00 fd 02 2d 3e c0 e4 06 22 14 00
>027e08	11 53 38 45 57 3d 3c 3c 52 4e 3e 4a 4f 47 55 4e
>027e18	55 3b 0a 24 04 00 00 00 00 00 1e 00 fe 02 2d 3e
>027e28	1c ed 23 e0 06 22 0a 00 06 52 3c 3b 4c 3c 37 00
>027e38	0a 24 04 00 00 00 00 00 08 00 ff 02 4d 3a 00 00
>027e48	10 00 00 03 47 3c b0 ca 99 c9 6b cc 70 c6 00 00
>027e58	0a 00 01 03 42 3e c0 e4 00 00 0a 00 02 03 42 3e
>027e68	ee e4 00 00 0a 00 03 03 42 3e 4a e5 00 00 0c 00
>027e78	04 03 42 3e fa ec 1e e0 00 00 0c 00 05 03 42 3e
>027e88	fe ec 22 e0 00 00 0c 00 06 03 42 3e ff ec 23 e0
>027e98	00 00 0c 00 07 03 42 3e 31 ed 1e e0 00 00 0c 00
>027ea8	08 03 42 3e 32 ed 1f e0 00 00 0c 00 09 03 42 3e
>027eb8	1a ed 21 e0 00 00 0c 00 0a 03 42 3e 1b ed 22 e0
>027ec8	00 00 0c 00 0b 03 42 3e 1d ed 24 e0 00 00 0c 00
>027ed8	0c 03 42 3e 4b ed 1b e0 00 00 0c 00 0d 03 42 3e
>027ee8	4d ed 1d e0 00 00 0c 00 0e 03 42 3e 50 ed 20 e0
>027ef8	00 00 0c 00 0f 03 42 3e 51 ed 21 e0 00 00 0c 00
>027f08	10 03 42 3e 52 ed 22 e0 00 00 0c 00 11 03 42 3e
>027f18	53 ed 23 e0 00 00 1c 00 12 03 2d 3e 2e ed 1b e0
>027f28	06 22 08 00 05 48 3d 4e 4b 36 0a 24 04 00 00 00
>027f38	00 00 28 00 13 03 2d 3e fa ec 1e e0 06 22 14 00
>027f48	11 38 54 3f 4a 38 46 3d 3f 3c 3b 53 36 4c 41 5a
>027f58	3b 51 0a 24 04 00 00 00 00 00 24 00 14 03 2d 3e
>027f68	30 ed 1d e0 06 22 10 00 0d 3d 51 58 3d 3a 4e 43
>027f78	45 31 54 36 55 42 0a 24 04 00 00 00 00 00 22 00
>027f88	15 03 2d 3e 32 ed 1f e0 06 22 0e 00 0b 46 53 37
>027f98	44 50 3a 55 3b 4b 52 43 0a 24 04 00 00 00 00 00
>027fa8	26 00 16 03 2d 3e 50 ed 20 e0 06 22 12 00 0e 3c
>027fb8	46 52 42 3f 31 3f 37 4f 52 3d 47 32 3a 00 0a 24
>027fc8	04 00 00 00 00 00 22 00 17 03 2d 3e 51 ed 21 e0
>027fd8	06 22 0e 00 0b 42 39 4d 4e 4c 30 52 38 59 3c 49
>027fe8	0a 24 04 00 00 00 00 00 24 00 18 03 2d 3e 4a e5
>027ff8	06 22 12 00 0e 31 44 4f 56 48 4a 4e 31 47 52 59
>028008	45 3f 5a 00 0a 24 04 00 00 00 00 00 1e 00 19 03
>028018	2d 3e 2f ed 1c e0 06 22 0a 00 07 3a 34 4e 45 5a
>028028	32 5a 0a 24 04 00 00 00 00 00 1c 00 1a 03 2d 3e
>028038	1d ed 24 e0 06 22 08 00 05 47 5a 48 43 4e 0a 24
>028048	04 00 00 00 00 00 24 00 1b 03 2d 3e fe ec 22 e0
>028058	06 22 10 00 0d 41 48 50 42 48 4b 3d 55 49 46 3a
>028068	42 33 0a 24 04 00 00 00 00 00 24 00 1c 03 2d 3e
>028078	4e ed 1e e0 06 22 10 00 0c 40 37 47 47 4d 34 50
>028088	34 48 48 38 37 00 0a 24 04 00 00 00 00 00 1c 00
>028098	1d 03 2d 3e 2f ed 1c e0 06 22 08 00 04 39 46 5a
>0280a8	31 00 0a 24 04 00 00 00 00 00 18 00 1e 03 2d 3e
>0280b8	f9 ec 1d e0 06 22 04 00 00 00 0a 24 04 00 00 00
>0280c8	00 00 18 00 1f 03 2d 3e 31 ed 1e e0 06 22 04 00
>0280d8	01 57 0a 24 04 00 00 00 00 00 26 00 20 03 2d 3e
>0280e8	2f ed 1c e0 06 22 12 00 0e 59 36 57 5a 3b 4d 4f
>0280f8	33 45 53 46 3f 5a 42 00 0a 24 04 00 00 00 00 00
>028108	08 00 21 03 4d 3a 00 00 10 00 22 03 47 3c 43 c8
>028118	a1 c9 31 c8 f5 c0 00 00 1e 00 23 03 2e 3e c0 e4
>028128	06 22 12 00 0f 3c 3b 39 52 30 47 57 50 35 4e 57
>028138	35 4a 4a 58 00 00 14 00 24 03 2e 3e ee e4 06 22
>028148	08 00 05 54 51 47 51 3c 00 00 12 00 25 03 2e 3e
>028158	1c e5 06 22 06 00 02 3f 33 00 00 00 10 00 26 03
>028168	2e 3e 4a e5 06 22 04 00 01 43 00 00 18 00 27 03
>028178	2e 3e 78 e5 06 22 0c 00 08 34 48 31 4b 45 42 50
>028188	3f 00 00 00 18 00 28 03 2e 3e a6 e5 06 22 0c 00
>028198	09 48 48 41 43 41 56 4f 45 52 00 00 10 00 29 03
>0281a8	2e 3e d4 e5 06 22 04 00 00 00 00 00 1c 00 2a 03
>0281b8	2e 3e 02 e6 06 22 10 00 0d 49 4c 4d 35 3c 37 59
>0281c8	47 48 56 4a 47 4c 00 00 1e 00 2b 03 2e 3e 30 e6
>0281d8	06 22 12 00 0f 32 36 38 40 34 5a 55 3d 40 38 54
>0281e8	3e 3a 58 4f 00 00 1a 00 2c 03 2e 3e 5e e6 06 22
>0281f8	0e 00 0a 54 5a 3f 36 41 45 4c 53 4f 31 00 00 00
>028208	1a 00 2d 03 2e 3e f7 ec 1b e0 06 22 0c 00 09 55
>028218	3c 41 49 37 36 33 55 34 00 00 18 00 2e 03 2e 3e
>028228	f8 ec 1c e0 06 22 0a 00 06 39 3e 3d 5a 4d 5a 00
>028238	00 00 12 00 2f 03 2e 3e f9 ec 1d e0 06 22 04 00
>028248	00 00 00 00 1e 00 30 03 2e 3e fa ec 1e e0 06 22
>028258	10 00 0d 4b 38 46 50 4f 40 4c 4e 39 56 55 35 3e
>028268	00 00 14 00 31 03 2e 3e fb ec 1f e0 06 22 06 00
>028278	03 4c 39 4b 00 00 16 00 32 03 2e 3e fc ec 20 e0
>028288	06 22 08 00 04 3a 46 45 3b 00 00 00 14 00 33 03
>028298	2e 3e fd ec 21 e0 06 22 06 00 02 46 38 00 00 00
>0282a8	22 00 34 03 2e 3e fe ec 22 e0 06 22 14 00 11 3e
>0282b8	38 4a 33 45 3b 56 4d 43 46 49 30 57 53 59 3f 46
>0282c8	00 00 16 00 35 03 2e 3e ff ec 23 e0 06 22 08 00
>0282d8	04 57 45 4a 4e 00 00 00 1a 00 36 03 2e 3e 00 ed
>0282e8	24 e0 06 22 0c 00 08 56 37 55 40 4a 4f 36 3a 00
>0282f8	00 00 16 00 37 03 2e 3e 2e ed 1b e0 06 22 08 00
>028308	05 48 3d 4e 4b 36 00 00 20 00 38 03 2e 3e 2f ed
>028318	1c e0 06 22 12 00 0e 59 36 57 5a 3b 4d 4f 33 45
>028328	53 46 3f 5a 42 00 00 00 1e 00 39 03 2e 3e 30 ed
>028338	1d e0 06 22 10 00 0d 3d 51 58 3d 3a 4e 43 45 31
>028348	54 36 55 42 00 00 1a 00 3a 03 2e 3e 31 ed 1e e0
>028358	06 22 0c 00 08 3d 32 41 36 51 44 40 39 00 00 00
>028368	1e 00 3b 03 2e 3e 32 ed 1f e0 06 22 10 00 0d 40
>028378	30 3a 32 42 39 55 34 3a 34 3c 33 55 00 00 14 00
>028388	3c 03 2e 3e 33 ed 20 e0 06 22 06 00 02 5a 54 00
>028398	00 00 14 00 3d 03 2e 3e 1a ed 21 e0 06 22 06 00
>0283a8	02 39 51 00 00 00 1e 00 3e 03 2e 3e 1b ed 22 e0
>0283b8	06 22 10 00 0d 4e 53 37 58 40 3c 34 54 38 49 49
>0283c8	49 50 00 00 22 00 3f 03 2e 3e 1c ed 23 e0 06 22
>0283d8	14 00 10 34 3a 54 34 49 3e 52 31 53 56 35 31 47
>0283e8	4c 4d 39 00 00 00 14 00 40 03 2e 3e 1d ed 24 e0
>0283f8	06 22 06 00 02 4d 48 00 00 00 1c 00 41 03 2e 3e
>028408	4b ed 1b e0 06 22 0e 00 0b 59 46 55 53 34 51 4b
>028418	58 57 31 37 00 00 1c 00 42 03 2e 3e 4c ed 1c e0
>028428	06 22 0e 00 0a 52 48 4b 46 50 55 47 45 49 54 00
>028438	00 00 1a 00 43 03 2e 3e 4d ed 1d e0 06 22 0c 00
>028448	09 40 46 40 56 50 30 4c 40 5a 00 00 1e 00 44 03
>028458	2e 3e 4e ed 1e e0 06 22 10 00 0c 40 37 47 47 4d
>028468	34 50 34 48 48 38 37 00 00 00 16 00 45 03 2e 3e
>028478	4f ed 1f e0 06 22 08 00 05 57 39 39 32 5a 00 00
>028488	22 00 46 03 2e 3e 50 ed 20 e0 06 22 14 00 10 32
>028498	54 50 4a 42 47 38 36 34 3b 31 56 59 4f 46 3a 00
>0284a8	00 00 1a 00 47 03 2e 3e 51 ed 21 e0 06 22 0c 00
>0284b8	09 51 3b 36 57 3d 43 52 52 50 00 00 1a 00 48 03
>0284c8	2e 3e 52 ed 22 e0 06 22 0c 00 09 48 39 4f 33 48
>0284d8	50 52 56 4e 00 00 14 00 49 03 2e 3e 53 ed 23 e0
>0284e8	06 22 06 00 02 34 41 00 00 00 18 00 4a 03 2e 3e
>0284f8	54 ed 24 e0 06 22 0a 00 06 3c 57 33 40 4f 40 00
>028508	00 00 08 00 4b 03 4d 3a 00 00 00 00 ee ee ee ee
>028518	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 941 times (15056 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
