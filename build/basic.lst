
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 09:29:19 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 7e 0d 01	jmp $010d7e			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	b8 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	8b 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	9b 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	ab 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	ef 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	56 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	bb 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	38 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	1a 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	d5 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	d5 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	56 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	62 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	df 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	56 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	67 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	79 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	f0 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	d0 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	ac 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	96 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	27 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	7c 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b8 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	b8 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	b8 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	b8 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	b8 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	b8 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	38 0a					.word Function_Let             & $FFFF ; token $3e1d "let"
>01003c	5f 0d					.word Function_ASSERT          & $FFFF ; token $3e1e "assert"
>01003e	ac 0b					.word Function_END             & $FFFF ; token $3e1f "end"
>010040	ae 0b					.word Function_RUN             & $FFFF ; token $3e20 "run"
>010042	06 0c					.word Function_CLEAR           & $FFFF ; token $3e21 "clear"
>010044	5d 0c					.word Function_Dim             & $FFFF ; token $3e22 "dim"
>010046	d1 0c					.word Function_COLLECT         & $FFFF ; token $3e23 "collect"
>010048	7a 0d					.word Function_CLS             & $FFFF ; token $3e24 "cls"
>01004a	b3 0a					.word Function_PRINT           & $FFFF ; token $3e25 "print"
>01004c	b3 0a					.word Function_PRINTALT        & $FFFF ; token $3e26 "?"
>01004e	ff 0a					.word Function_GOTO            & $FFFF ; token $3e27 "goto"
>010050	5e 0b					.word Function_GOSUB           & $FFFF ; token $3e28 "gosub"
>010052	7a 0b					.word Function_RETURN          & $FFFF ; token $3e29 "return"
>010054	b8 03					.word IllegalToken             & $FFFF ; token $3e2a "on"
>010056	b8 03					.word IllegalToken             & $FFFF ; token $3c2b "while"
>010058	b8 03					.word IllegalToken             & $FFFF ; token $3a2c "wend"
.01005a					TokenText:
>01005a	02 26					 .text $02,"&"        ; token $2001
>01005c	02 7c					 .text $02,"|"        ; token $2002
>01005e	02 5e					 .text $02,"^"        ; token $2003
>010060	12 3c					 .text $12,"<"        ; token $2204
>010062	12 3e					 .text $12,">"        ; token $2205
>010064	12 3d					 .text $12,"="        ; token $2206
>010066	13 3c 3d				 .text $13,"<="       ; token $2207
>010069	13 3e 3d				 .text $13,">="       ; token $2208
>01006c	13 3c 3e				 .text $13,"<>"       ; token $2209
>01006f	22 2b					 .text $22,"+"        ; token $240a
>010071	22 2d					 .text $22,"-"        ; token $240b
>010073	32 2a					 .text $32,"*"        ; token $260c
>010075	32 2f					 .text $32,"/"        ; token $260d
>010077	32 25					 .text $32,"%"        ; token $260e
>010079	33 3e 3e				 .text $33,">>"       ; token $260f
>01007c	33 3c 3c				 .text $33,"<<"       ; token $2610
>01007f	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010085	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01008a	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01008f	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010094	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010099	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>01009f	92 2c					 .text $92,","        ; token $3217
>0100a1	92 3b					 .text $92,";"        ; token $3218
>0100a3	92 3a					 .text $92,":"        ; token $3219
>0100a5	92 28					 .text $92,"("        ; token $321a
>0100a7	92 29					 .text $92,")"        ; token $321b
>0100a9	92 27					 .text $92,"'"        ; token $321c
>0100ab	f4 6c 65 74				 .text $f4,"let"      ; token $3e1d
>0100af	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1e
>0100b6	f4 65 6e 64				 .text $f4,"end"      ; token $3e1f
>0100ba	f4 72 75 6e				 .text $f4,"run"      ; token $3e20
>0100be	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e21
>0100c4	f4 64 69 6d				 .text $f4,"dim"      ; token $3e22
>0100c8	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e23
>0100d0	f4 63 6c 73				 .text $f4,"cls"      ; token $3e24
>0100d4	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e25
>0100da	f2 3f					 .text $f2,"?"        ; token $3e26
>0100dc	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e27
>0100e1	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e28
>0100e7	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e29
>0100ee	f3 6f 6e				 .text $f3,"on"       ; token $3e2a
>0100f1	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c2b
>0100f7	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a2c
>0100fc	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					letTokenID                       = $3e1d
=$3e1e					assertTokenID                    = $3e1e
=$3e1f					endTokenID                       = $3e1f
=$3e20					runTokenID                       = $3e20
=$3e21					clearTokenID                     = $3e21
=$3e22					dimTokenID                       = $3e22
=$3e23					collectTokenID                   = $3e23
=$3e24					clsTokenID                       = $3e24
=$3e25					printTokenID                     = $3e25
=$3e26					questionTokenID                  = $3e26
=$3e27					gotoTokenID                      = $3e27
=$3e28					gosubTokenID                     = $3e28
=$3e29					returnTokenID                    = $3e29
=$3e2a					onTokenID                        = $3e2a
=$3c2b					whileTokenID                     = $3c2b
=$3a2c					wendTokenID                      = $3a2c

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100fd					Evaluate:
.0100fd	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010100	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010103					EvaluateLevel:
.010103	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010106	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010108	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01010a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01010d	b0 79		bcs $010188			bcs 	_ELVariable
.01010f	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010112	b0 16		bcs $01012a			bcs 	_ELConstant
.010114	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010117	90 7f		bcc $010198			bcc 	_ELStringConstant
.010119	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01011c	90 03		bcc $010121			bcc 	_ELConstantShift
.01011e	82 94 00	brl $0101b5			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010121					_ELConstantShift:
.010121	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010124	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010126	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010128	e6 06		inc $06				inc 	DCodePtr
.01012a					_ELConstant:
.01012a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01012c	38		sec				sec  								; shift it in the range 0-32767
.01012d	e9 00 40	sbc #$4000			sbc 	#$4000
.010130	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010131	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010133	6a		ror a				ror 	a 							; rotate that into the constant value
.010134	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010136	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010138	95 10		sta $10,x			sta 	EXSValueH+0,x
.01013a	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01013c	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01013e	e6 06		inc $06				inc 	DCodePtr
.010140					_ELGotAtom:
.010140	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010142	a8		tay				tay 								; save in Y
.010143	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010146	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010149	d0 35		bne $010180			bne 	_ELExit
.01014b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01014d	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010150	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010152	98		tya				tya 								; get the keyword token back
.010153	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010156	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010158	90 26		bcc $010180			bcc 	_ELExit 					; precedence too low, then exit.
.01015a	5a		phy				phy 								; save the binary operator on the stack
.01015b	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01015d	e6 06		inc $06				inc 	DCodePtr
.01015f	18		clc				clc 								; try the next level up
.010160	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010163	e8		inx				inx 								; calculate the RHS at the next stack level.
.010164	e8		inx				inx
.010165	20 03 01	jsr $010103			jsr 	EvaluateLevel
.010168	ca		dex				dex
.010169	ca		dex				dex
.01016a	7a		ply				ply 								; get operator token back into Y
.01016b					_ELExecuteY:
.01016b	98		tya				tya
.01016c	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01016f	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010170	9b		txy				txy 								; save X in Y
.010171	aa		tax				tax 								; double keyword ID in X
.010172	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010176	bb		tyx				tyx 								; restore X.
.010177	8f 7c 01 01	sta $01017c			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01017b					_ELCallRoutine:
.01017b	20 7b 01	jsr $01017b			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01017e	80 c0		bra $010140			bra 	_ELGotAtom 					; go round operator level again.
.010180	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010182	0a		asl a				asl 	a
.010183	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010185	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010187	60		rts				rts
.010188					_ELVariable:
.010188	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01018a	20 49 02	jsr $010249			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01018d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01018f	94 10		sty $10,x			sty 	EXSValueH+0,x
.010191	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010193	80 ab		bra $010140			bra 	_ELGotAtom
.010195					_ELSyntax
.010195	82 31 02	brl $0103c9			brl 	SyntaxError
.010198					_ELStringConstant:
.010198	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01019b	f0 f8		beq $010195			beq 	_ELSyntax
.01019d	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01019f	1a		inc a				inc 	a
.0101a0	1a		inc a				inc 	a
.0101a1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101a3	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101a7	18		clc				clc 								; add to string constant.
.0101a8	65 06		adc $06				adc 	DCodePtr
.0101aa	85 06		sta $06				sta 	DCodePtr
.0101ac	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101ae	09 00 80	ora #$8000			ora 	#$8000
.0101b1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101b3	80 8b		bra $010140			bra 	_ELGotAtom
.0101b5					_ELUnaryKeyword:
.0101b5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101b7	a8		tay				tay 								; put the token in Y.
.0101b8	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101ba	e6 06		inc $06				inc 	DCodePtr
.0101bc	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101bf	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101c2	f0 a7		beq $01016b			beq 	_ELExecuteY					; go back and execute it
.0101c4	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101c7	d0 11		bne $0101da			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101c9	20 00 02	jsr $010200			jsr 	EvaluateNext 				; evaluate the expression
.0101cc	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101cf					_ELCopy:
.0101cf	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101d1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101d3	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101d5	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101d7	82 66 ff	brl $010140			brl 	_ELGotAtom 					; and continue.
.0101da					_ELUnaryOperator:
.0101da	5a		phy				phy 								; save the operator on the stack.
.0101db	e8		inx				inx 								; this is like evaluate next
.0101dc	e8		inx				inx
.0101dd	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101e0	20 03 01	jsr $010103			jsr 	EvaluateLevel
.0101e3	ca		dex				dex 								; unwind the stack.
.0101e4	ca		dex				dex
.0101e5	68		pla				pla 								; restore the unary operator.
.0101e6	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101e9	f0 03		beq $0101ee			beq 	_ELMinus
.0101eb	4c c9 03	jmp $0103c9			jmp 	SyntaxError
.0101ee					_ELMinus:
.0101ee	38		sec				sec 								; do the negation calculation.
.0101ef	a9 00 00	lda #$0000			lda 	#0
.0101f2	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101f4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101f6	a9 00 00	lda #$0000			lda 	#0
.0101f9	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101fb	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101fd	82 40 ff	brl $010140			brl 	_ELGotAtom					; and continue.
.010200					EvaluateNext:
.010200	e8		inx				inx
.010201	e8		inx				inx
.010202	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010205	20 03 01	jsr $010103			jsr 	EvaluateLevel
.010208	ca		dex				dex
.010209	ca		dex				dex
.01020a	60		rts				rts
.01020b					EvaluateInteger:
.01020b	20 fd 00	jsr $0100fd			jsr 	Evaluate
.01020e	b0 01		bcs $010211			bcs 	EIType
.010210	60		rts				rts
.010211					EIType:
.010211	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010214	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01021c	78 70 65 63 74 65 64 00
.010224					EvaluateNextInteger:
.010224	20 00 02	jsr $010200			jsr 	EvaluateNext
.010227	b0 e8		bcs $010211			bcs 	EIType
.010229	60		rts				rts
.01022a					EvaluateString:
.01022a	20 fd 00	jsr $0100fd			jsr 	Evaluate
.01022d	90 01		bcc $010230			bcc 	ESType
.01022f	60		rts				rts
.010230					ESType:
.010230	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010233	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01023b	78 70 65 63 74 65 64 00
.010243					EvaluateNextString:
.010243	20 00 02	jsr $010200			jsr 	EvaluateNext
.010246	90 e8		bcc $010230			bcc 	ESType
.010248	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010249					VariableAccessExpression:
.010249	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01024b	48		pha				pha
.01024c	20 8a 02	jsr $01028a			jsr 	VariableFind 				; try to find the variables
.01024f	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010251	90 23		bcc $010276			bcc 	_VANError
.010253	68		pla				pla 								; get and save that first token
.010254	48		pha				pha
.010255	a8		tay				tay 								; put first token in Y.
.010256	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010259	f0 07		beq $010262			beq 	_VANNotArray
.01025b	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01025d	20 01 03	jsr $010301			jsr 	VariableSubscript			; index calculation
.010260	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010262					_VANNotArray:
.010262	68		pla				pla 								; get the token back.
.010263	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010266	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010269	38		sec				sec 								; set up return string.
.01026a	f0 06		beq $010272			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01026c	18		clc				clc 								; returning a number, read high data word
.01026d	a0 02 00	ldy #$0002			ldy 	#2
.010270	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010272					_VANLoadLower:
.010272	a8		tay				tay 								; put A into Y (this is the high byte)
.010273	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010275	60		rts				rts
.010276					_VANError:
.010276	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010279	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010281	20 75 6e 6b 6e 6f 77 6e 00
.01028a					VariableFind:
.01028a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01028c	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01028f	90 5c		bcc $0102ed			bcc 	_VFError
.010291	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010294	b0 11		bcs $0102a7			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010296	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010299	3a		dec a				dec 	a 							; now 0-25
.01029a	0a		asl a				asl 	a 							; x 4 and clear carry
.01029b	0a		asl a				asl 	a
.01029c	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01029f	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102a3	e6 06		inc $06				inc 	DCodePtr
.0102a5	38		sec				sec 								; return with carry set.
.0102a6	60		rts				rts
.0102a7					_VFSlowVariable:
.0102a7	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102a9	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102ac	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102ad	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102ae	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102b1	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102b3	85 08		sta $08				sta 	DTemp1
.0102b5	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102b7	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102ba	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102bb	65 08		adc $08				adc 	DTemp1
.0102bd	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102bf	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102c1					_VFNext:
.0102c1	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102c3	f0 26		beq $0102eb			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102c5	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102c7	a8		tay				tay 								; read the address of the name at $0002,y
.0102c8	b9 02 00	lda $0002,y			lda 	$0002,y
.0102cb	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102cd	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102d0					_VFCompare:
.0102d0	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102d2	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102d4	d0 eb		bne $0102c1			bne 	_VFNext 					; if not, go to the next one.
.0102d6	c8		iny				iny 								; advance token pointer
.0102d7	c8		iny				iny
.0102d8	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102db	d0 f3		bne $0102d0			bne 	_VFCompare
.0102dd	98		tya				tya 								; this is the length of the word.
.0102de	18		clc				clc 								; so we add it to the code pointer
.0102df	65 06		adc $06				adc 	DCodePtr
.0102e1	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102e3	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102e5	18		clc				clc 								; four on is the actual data
.0102e6	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102e9	38		sec				sec 								; return with CS indicating success
.0102ea	60		rts				rts
.0102eb					_VFFail:
.0102eb	18		clc				clc
.0102ec	60		rts				rts
.0102ed					_VFError:
.0102ed	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0102f0	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102f8	76 61 72 69 61 62 6c 65 00
.010301					VariableSubscript:
.010301	48		pha				pha		 							; save variable address on stack.
.010302	20 24 02	jsr $010224			jsr		EvaluateNextInteger 		; get the subscript
.010305	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; skip right bracket.
.010308	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01030b	d0 10		bne $01031d			bne 	_VANSubscript
.01030d	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01030f	f0 02		beq $010313			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010311	b0 0a		bcs $01031d			bcs 	_VANSubscript
.010313					_VANSubOkay:
.010313	0a		asl a				asl 	a 							; double lsword
.010314	0a		asl a				asl 	a 							; and again, also clears carry.
.010315	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010317	68		pla				pla 								; restore DVariablePtr
.010318	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010319	1a		inc a				inc 	a
.01031a	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01031c	60		rts				rts
.01031d					_VANSubscript:
.01031d	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010320	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010328	79 20 53 75 62 73 63 72 69 70 74 00
.010334					VariableCreate:
.010334	48		pha				pha 								; save count.
.010335	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010338	29 00 20	and #$2000			and 	#IDTypeMask
.01033b	f0 06		beq $010343			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01033d	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010340	18		clc				clc
.010341	65 02		adc $02				adc 	DBaseAddress
.010343					_VCIsInteger:
.010343	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010345	68		pla				pla 								; restore count
.010346	48		pha				pha
.010347	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010348	0a		asl a				asl 	a 							; 2 x # items.
.010349	0a		asl a				asl 	a 							; 4 x # items.
.01034a					_VCNotSingle:
.01034a	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01034c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01034f	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010352	f0 04		beq $010358			beq 	_VCNotArray
.010354	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010356	e6 08		inc $08				inc 	DTemp1
.010358					_VCNotArray:
.010358	5a		phy				phy 								; save address of token on stack.
.010359	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01035c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.01035e	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010360	18		clc				clc 								; add 4 for link and name.
.010361	69 04 00	adc #$0004			adc 	#4
.010364	65 08		adc $08				adc 	DTemp1 						; add memory required
.010366	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010368	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01036a					_VCErase:
.01036a	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01036c	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01036f	c8		iny				iny
.010370	c8		iny				iny
.010371	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010373	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010375	d0 f3		bne $01036a			bne 	_VCErase
.010377	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010379	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01037b	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01037e	68		pla				pla 								; restore the token address
.01037f	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010382	68		pla				pla 								; restore count and store.
.010383	99 04 00	sta $0004,y			sta 	$0004,y
.010386					_VCNotArray2:
.010386	98		tya				tya 								; update the head link
.010387	92 20		sta ($20)			sta 	(DHashTablePtr)
.010389	18		clc				clc 								; advance pointer to the data bit.
.01038a	69 04 00	adc #$0004			adc 	#4
.01038d	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01038e					ErrorHandler:
.01038e	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010390	fa		plx				plx 								; address of error message -1
.010391	e8		inx				inx 								; error message.
.010392	20 35 04	jsr $010435			jsr 	PrintROMMessage 			; print message in ROM
.010395	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010397	f0 15		beq $0103ae			beq 	_EHEndMessage
.010399	a2 b3 03	ldx #$03b3			ldx 	#_EHAt & $FFFF 				; print " at "
.01039c	20 35 04	jsr $010435			jsr 	PrintROMMessage
.01039f	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103a1	a0 00 00	ldy #$0000			ldy 	#0
.0103a4	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103a7	20 97 09	jsr $010997			jsr 	ConvertToString 			; convert and print it.
.0103aa	a8		tay				tay
.0103ab	20 49 04	jsr $010449			jsr 	PrintBASICString
.0103ae					_EHEndMessage:
.0103ae	20 d0 0d	jsr $010dd0			jsr 	HWNewLine
.0103b1	80 fe		bra $0103b1	_EH1:	bra 	_EH1
>0103b3	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103b8					IllegalToken:
.0103b8	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0103bb	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103c3	54 6f 6b 65 6e 00
.0103c9					SyntaxError:
.0103c9	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0103cc	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103d4	72 72 6f 72 00
.0103d9					ExpectToken:
.0103d9	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103db	d0 05		bne $0103e2			bne 	_CTKError					; error if not
.0103dd	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103df	e6 06		inc $06				inc 	DCodePtr
.0103e1	60		rts				rts
.0103e2					_CTKError:
.0103e2	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0103e5	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103ed	74 6f 6b 65 6e 00
.0103f3					ExpectRightBracket:
.0103f3	48		pha				pha
.0103f4	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.0103f7	20 d9 03	jsr $0103d9			jsr 	ExpectToken
.0103fa	68		pla				pla
.0103fb	60		rts				rts
.0103fc					ExpectComma:
.0103fc	48		pha				pha
.0103fd	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010400	20 d9 03	jsr $0103d9			jsr 	ExpectToken
.010403	68		pla				pla
.010404	60		rts				rts
.010405					CheckBothNumeric:
.010405	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010407	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010409	30 01		bmi $01040c			bmi 	_CBNFail 					; need to both be zero in bit 15
.01040b	60		rts				rts
.01040c					_CBNFail:
.01040c	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>01040f	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010417	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010425					ResetTypeInteger:
.010425	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010427	29 ff 7f	and #$7fff			and 	#$7FFF
.01042a	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01042c	60		rts				rts
.01042d					ResetTypeString:
.01042d	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01042f	09 00 80	ora #$8000			ora 	#$8000
.010432	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010434	60		rts				rts
.010435					PrintROMMessage:
.010435	48		pha				pha
.010436	da		phx				phx
.010437					_PRMLoop:
.010437	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01043b	29 ff 00	and #$00ff			and 	#$00FF
.01043e	f0 06		beq $010446			beq 	_PRMExit
.010440	20 ae 0d	jsr $010dae			jsr 	HWPrintChar
.010443	e8		inx				inx
.010444	80 f1		bra $010437			bra 	_PRMLoop
.010446					_PRMExit:
.010446	fa		plx				plx
.010447	68		pla				pla
.010448	60		rts				rts
.010449					PrintBASICString:
.010449	48		pha				pha
.01044a	da		phx				phx
.01044b	5a		phy				phy
.01044c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01044f	29 ff 00	and #$00ff			and 	#$00FF
.010452	f0 0b		beq $01045f			beq 	_PBSExit 					; null string
.010454	aa		tax				tax
.010455					_PBSLoop:
.010455	c8		iny				iny
.010456	b9 00 00	lda $0000,y			lda 	$0000,y
.010459	20 ae 0d	jsr $010dae			jsr 	HWPrintChar
.01045c	ca		dex				dex
.01045d	d0 f6		bne $010455			bne 	_PBSLoop
.01045f					_PBSExit:
.01045f	7a		ply				ply
.010460	fa		plx				plx
.010461	68		pla				pla
.010462	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010463					StringTempAllocate:
.010463	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010466	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010469	18		clc				clc 								; this adds one, for the length.
.01046a	65 16		adc $16				adc 	DTempStringPointer
.01046c	85 16		sta $16				sta 	DTempStringPointer
.01046e	48		pha				pha
.01046f	a9 00 00	lda #$0000			lda 	#$0000
.010472	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010474	92 16		sta ($16)			sta		(DTempStringPointer)
.010476	c2 20		rep #$20			rep 	#$20
.010478	68		pla				pla
.010479	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.01047b	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01047d	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01047f	60		rts				rts
.010480					StringCreateCopy:
.010480	a8		tay				tay 								; put pointer to string in Y
.010481	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010484	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010487	f0 17		beq $0104a0			beq 	_SCCExit 					; do nothing if length zero.
.010489	da		phx				phx 								; save X and put the character count in X
.01048a	aa		tax				tax
.01048b					_SCCCopy:
.01048b	c8		iny				iny 								; advance and read (first time skips length)
.01048c	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01048e	b9 00 00	lda $0000,y			lda 	$0000,y
.010491	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010493	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010495	1a		inc a				inc 	a
.010496	92 18		sta ($18)			sta 	(DStartTempString)
.010498	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01049a	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01049c	ca		dex				dex 								; do X times
.01049d	d0 ec		bne $01048b			bne 	_SCCCopy
.01049f	fa		plx				plx
.0104a0					_SCCExit:
.0104a0	60		rts				rts
.0104a1					StringMakeConcrete:
.0104a1	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104a4	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104a6	90 0f		bcc $0104b7			bcc 	_SMCExit
.0104a8	85 08		sta $08				sta 	DTemp1 						; source
.0104aa	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104ac	29 ff 00	and #$00ff			and 	#$00FF
.0104af	d0 07		bne $0104b8			bne 	_SMCNonZero 				; if not "" skip.
.0104b1	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104b4	18		clc				clc
.0104b5	65 02		adc $02				adc 	DBaseAddress
.0104b7					_SMCExit:
.0104b7	60		rts				rts
.0104b8					_SMCNonZero:
.0104b8	48		pha				pha 								; save on stack.
.0104b9	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104bc	18		clc				clc
.0104bd	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104c0	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104c2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104c4	85 0c		sta $0c				sta 	DTemp2 						; target
.0104c6	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104c7	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104c9					_SMCLoop:
.0104c9	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104cb	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104cd	88		dey				dey
.0104ce	10 f9		bpl $0104c9			bpl 	_SMCLoop
.0104d0	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104d2	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104d4	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0104d5					Binary_Add:
.0104d5	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104d7	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104d9	30 12		bmi $0104ed		bmi 	_BATypeError
.0104db	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104dd	30 3f		bmi $01051e		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104df	18		clc			clc
.0104e0	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104e2	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104e4	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e6	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e8	75 12		adc $12,x		adc 	EXSValueH+2,x
.0104ea	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ec	60		rts			rts
.0104ed					_BATypeError:
.0104ed	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0104f0	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0104f8	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010508	65 73 00
.01050b					_BALengthError:
.01050b	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>01050e	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010516	6f 6f 20 6c 6f 6e 67 00
.01051e					_BAConcatenateString:
.01051e	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010520	85 08		sta $08			sta 	DTemp1
.010522	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010524	85 0c		sta $0c			sta 	DTemp2
.010526	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010528	18		clc			clc 										; work out the total length
.010529	b2 08		lda ($08)		lda 	(DTemp1)
.01052b	72 0c		adc ($0c)		adc 	(DTemp2)
.01052d	b0 14		bcs $010543		bcs 	_BAConcatLengthError 				; string is too long.
.01052f	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010531	20 63 04	jsr $010463		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010534	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010536	74 10		stz $10,x		stz 	EXSValueH+0,x
.010538	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01053a	20 80 04	jsr $010480		jsr 	StringCreateCopy
.01053d	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01053f	20 80 04	jsr $010480		jsr 	StringCreateCopy
.010542	60		rts			rts
.010543					_BAConcatLengthError:
.010543	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010546	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01054e	6f 6f 20 6c 6f 6e 67 00
.010556					Binary_Subtract:
.010556	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.010559	38		sec			sec
.01055a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01055c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01055e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010560	b5 10		lda $10,x		lda		EXSValueH+0,x
.010562	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010564	95 10		sta $10,x		sta 	EXSValueH+0,x
.010566	60		rts			rts
.010567					Binary_ShiftRight:
.010567	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.01056a	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01056c	29 3f 00	and #$003f		and 	#63
.01056f	f0 07		beq $010578		beq		_Binary_SRExit
.010571					_Binary_SRLoop:
.010571	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010573	76 00		ror $00,x		ror 	EXSValueL+0,x
.010575	3a		dec a			dec 	a
.010576	d0 f9		bne $010571		bne 	_Binary_SRLoop
.010578					_Binary_SRExit:
.010578	60		rts			rts
.010579					Binary_ShiftLeft:
.010579	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.01057c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01057e	29 3f 00	and #$003f		and 	#63
.010581	f0 07		beq $01058a		beq		_Binary_SLExit
.010583					_Binary_SLLoop:
.010583	16 00		asl $00,x		asl 	EXSValueL+0,x
.010585	36 10		rol $10,x		rol 	EXSValueH+0,x
.010587	3a		dec a			dec 	a
.010588	d0 f9		bne $010583		bne 	_Binary_SLLoop
.01058a					_Binary_SLExit:
.01058a	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01058b					Binary_And:
.01058b	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.01058e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010590	35 02		and $02,x		and 	EXSValueL+2,x
.010592	95 00		sta $00,x		sta 	EXSValueL+0,x
.010594	b5 10		lda $10,x		lda		EXSValueH+0,x
.010596	35 12		and $12,x		and 	EXSValueH+2,x
.010598	95 10		sta $10,x		sta 	EXSValueH+0,x
.01059a	60		rts			rts
.01059b					Binary_Or:
.01059b	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.01059e	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a0	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105a2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105a4	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105a6	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105a8	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105aa	60		rts			rts
.0105ab					Binary_Xor:
.0105ab	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.0105ae	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105b0	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105b2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105b4	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105b6	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105b8	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ba	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0105bb					Binary_Equals:
.0105bb	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105be	b0 0e		bcs $0105ce		bcs 	_BEString
.0105c0	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105c2	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105c4	d0 4f		bne $010615		bne 	Compare_Fail
.0105c6	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c8	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105ca	d0 49		bne $010615		bne 	Compare_Fail
.0105cc	80 3f		bra $01060d		bra 	Compare_Succeed
.0105ce					_BEString:
.0105ce	09 00 00	ora #$0000		ora 	#$0000
.0105d1	f0 3a		beq $01060d		beq 	Compare_Succeed
.0105d3	80 40		bra $010615		bra 	Compare_Fail
.0105d5					Binary_NotEquals:
.0105d5	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d8	b0 0e		bcs $0105e8		bcs 	_BNEString
.0105da	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105dc	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105de	d0 2d		bne $01060d		bne 	Compare_Succeed
.0105e0	b5 10		lda $10,x		lda 	EXSValueH,x
.0105e2	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105e4	d0 27		bne $01060d		bne 	Compare_Succeed
.0105e6	80 2d		bra $010615		bra 	Compare_Fail
.0105e8					_BNEString:
.0105e8	09 00 00	ora #$0000		ora 	#$0000
.0105eb	d0 20		bne $01060d		bne 	Compare_Succeed
.0105ed	80 26		bra $010615		bra 	Compare_Fail
.0105ef					Binary_Less:
.0105ef	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105f2	b0 12		bcs $010606		bcs 	_BLString
.0105f4	38		sec			sec
.0105f5	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0105f7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105f9	b5 10		lda $10,x		lda 	EXSValueH,x
.0105fb	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105fd	50 03		bvc $010602		bvc 	*+5
.0105ff	49 00 80	eor #$8000		eor 	#$8000
.010602	30 09		bmi $01060d		bmi 	Compare_Succeed
.010604	80 0f		bra $010615		bra 	Compare_Fail
.010606					_BLString:
.010606	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010609	f0 02		beq $01060d		beq 	Compare_Succeed
.01060b	80 08		bra $010615		bra 	Compare_Fail
.01060d					Compare_Succeed:
.01060d	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010610	95 00		sta $00,x		sta 	EXSValueL,x
.010612	95 10		sta $10,x		sta 	EXSValueH,x
.010614	60		rts			rts
.010615					Compare_Fail:
.010615	74 00		stz $00,x		stz 	EXSValueL,x
.010617	74 10		stz $10,x		stz 	EXSValueH,x
.010619	60		rts			rts
.01061a					Binary_GreaterEqual:
.01061a	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01061d	b0 12		bcs $010631		bcs 	_BGEString
.01061f	38		sec			sec
.010620	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010622	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010624	b5 10		lda $10,x		lda 	EXSValueH,x
.010626	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010628	50 03		bvc $01062d		bvc 	*+5
.01062a	49 00 80	eor #$8000		eor 	#$8000
.01062d	10 de		bpl $01060d		bpl 	Compare_Succeed
.01062f	80 e4		bra $010615		bra 	Compare_Fail
.010631					_BGEString:
.010631	09 00 00	ora #$0000		ora 	#$0000
.010634	10 d7		bpl $01060d		bpl 	Compare_Succeed
.010636	80 dd		bra $010615		bra 	Compare_Fail
.010638					Binary_LessEqual:
.010638	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01063b	b0 12		bcs $01064f		bcs 	_BLEString
.01063d	18		clc			clc 									; numeric <= signed
.01063e	b5 00		lda $00,x		lda 	EXSValueL,x
.010640	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010642	b5 10		lda $10,x		lda 	EXSValueH,x
.010644	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010646	50 03		bvc $01064b		bvc 	*+5
.010648	49 00 80	eor #$8000		eor 	#$8000
.01064b	30 c0		bmi $01060d		bmi 	Compare_Succeed
.01064d	80 c6		bra $010615		bra 	Compare_Fail
.01064f					_BLEString:
.01064f	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010652	d0 b9		bne $01060d		bne 	Compare_Succeed
.010654	80 bf		bra $010615		bra 	Compare_Fail
.010656					Binary_Greater:
.010656	20 74 06	jsr $010674		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010659	b0 12		bcs $01066d		bcs 	_BGString
.01065b	18		clc			clc 									; numeric > signed
.01065c	b5 00		lda $00,x		lda 	EXSValueL,x
.01065e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010660	b5 10		lda $10,x		lda 	EXSValueH,x
.010662	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010664	50 03		bvc $010669		bvc 	*+5
.010666	49 00 80	eor #$8000		eor 	#$8000
.010669	10 a2		bpl $01060d		bpl 	Compare_Succeed
.01066b	80 a8		bra $010615		bra 	Compare_Fail
.01066d					_BGString:
.01066d	c9 01 00	cmp #$0001		cmp 	#$0001
.010670	f0 9b		beq $01060d		beq 	Compare_Succeed
.010672	80 a1		bra $010615		bra 	Compare_Fail
.010674					CompareTypeCheck:
.010674	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010676	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010678	30 06		bmi $010680		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01067a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01067c	30 1c		bmi $01069a		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01067e	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01067f	60		rts			rts
.010680					_CTCFail:
.010680	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010683	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01068b	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01069a					_CTCStringCompare:
.01069a	20 25 04	jsr $010425		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01069d	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01069f	85 08		sta $08			sta 	DTemp1
.0106a1	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106a3	85 0c		sta $0c			sta 	DTemp2
.0106a5	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106a8	a8		tay			tay
.0106a9	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106ab	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106ad	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106af	90 02		bcc $0106b3		bcc 	_CTCSmallest
.0106b1	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106b3					_CTCSmallest:
.0106b3	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106b5					_CTCCompare:
.0106b5	c8		iny			iny 									; look at next character (done first, first char is size)
.0106b6	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106b8	30 16		bmi $0106d0		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106ba	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106bc	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106be	f0 f5		beq $0106b5		beq 	_CTCCompare 					; if zero, try the next character.
.0106c0	b0 07		bcs $0106c9		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106c2					_CTCLess:
.0106c2	c2 20		rep #$20		rep 	#$20
.0106c4	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106c7	80 14		bra $0106dd		bra 	_CTCExit
.0106c9					_CTCGreater:
.0106c9	c2 20		rep #$20		rep 	#$20
.0106cb	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106ce	80 0d		bra $0106dd		bra 	_CTCExit
.0106d0					_CTCEqualSoFar:
.0106d0	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106d2	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106d4	90 ec		bcc $0106c2		bcc 	_CTCLess
.0106d6	d0 f1		bne $0106c9		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106d8	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106da	a9 00 00	lda #$0000		lda 	#$0000
.0106dd					_CTCExit:
.0106dd	38		sec			sec 									; return with CS indicating string comparison.
.0106de	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0106df					Binary_Divide:
.0106df	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.0106e2	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106e4	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106e6	d0 14		bne $0106fc		bne 	_BinaryDivide_Ok
.0106e8	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0106eb	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0106f3	20 62 79 20 7a 65 72 6f 00
.0106fc					_BinaryDivide_Ok:
.0106fc	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0106fe	64 0a		stz $0a			stz 	DTemp1+2
.010700	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010702	5a		phy			phy 										; save Y (bit counter)
.010703	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010705	10 07		bpl $01070e		bpl 	_BinaryDivide_RightDone
.010707	e8		inx			inx
.010708	e8		inx			inx
.010709	20 44 07	jsr $010744		jsr 	Binary_DivNegate
.01070c	ca		dex			dex
.01070d	ca		dex			dex
.01070e					_BinaryDivide_RightDone:
.01070e	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010710	10 03		bpl $010715		bpl 	_BinaryDivide_LeftDone
.010712	20 44 07	jsr $010744		jsr 	Binary_DivNegate
.010715					_BinaryDivide_LeftDone:
.010715	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010718					_BinaryDivide_Loop:
.010718	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01071a	36 10		rol $10,x		rol 	EXSValueH+0,x
.01071c	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01071e	26 0a		rol $0a			rol 	DTemp1+2
.010720	38		sec			sec											; calculate A-M
.010721	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010723	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010725	85 0c		sta $0c			sta 	DTemp2
.010727	a5 0a		lda $0a			lda 	DTemp1+2
.010729	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01072b	90 08		bcc $010735		bcc 	_Binary_NoSubract 					; if A < M skip this
.01072d	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01072f	a5 0c		lda $0c			lda 	DTemp2
.010731	85 08		sta $08			sta 	DTemp1+0
.010733	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010735					_Binary_NoSubract:
.010735	88		dey			dey 										; do it 32 times.
.010736	d0 e0		bne $010718		bne 	_BinaryDivide_Loop
.010738					_BinaryDivide_Exit:
.010738	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01073a	29 01 00	and #$0001		and 	#1
.01073d	f0 03		beq $010742		beq 	_BinaryDivide_Exit2
.01073f	20 44 07	jsr $010744		jsr 	Binary_DivNegate
.010742					_BinaryDivide_Exit2:
.010742	7a		ply			ply 										; restore Y
.010743	60		rts			rts
.010744					Binary_DivNegate:
.010744	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010746	38		sec			sec 										; negate the value at stack X.
.010747	a9 00 00	lda #$0000		lda 	#$0000
.01074a	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01074c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01074e	a9 00 00	lda #$0000		lda 	#$0000
.010751	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010753	95 10		sta $10,x		sta 	EXSValueH+0,x
.010755	60		rts			rts
.010756					Binary_Modulus:
.010756	20 df 06	jsr $0106df		jsr 	Binary_Divide 						; do the divide
.010759	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01075b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01075d	a5 0a		lda $0a			lda 	DTemp1+2
.01075f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010761	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010762					Binary_Multiply:
.010762	20 05 04	jsr $010405		jsr 	CheckBothNumeric 					; check both values are numeric
.010765	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010767	85 08		sta $08			sta 	DTemp1
.010769	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01076b	85 0a		sta $0a			sta		DTemp1+2
.01076d	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01076f	74 10		stz $10,x		stz 	EXSValueH+0,x
.010771					_BinaryMultiply_Loop:
.010771	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010773	05 0a		ora $0a			ora 	DTemp1+2
.010775	f0 1e		beq $010795		beq 	_BinaryMultiply_Exit
.010777	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010779	29 01 00	and #$0001		and 	#1
.01077c	f0 0d		beq $01078b		beq 	_BinaryMultiply_NoAdd
.01077e	18		clc			clc 										; add multiplicand to result.
.01077f	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010781	75 02		adc $02,x		adc 	EXSValueL+2,x
.010783	95 00		sta $00,x		sta 	EXSValueL+0,x
.010785	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010787	75 12		adc $12,x		adc 	EXSValueH+2,x
.010789	95 10		sta $10,x		sta 	EXSValueH+0,x
.01078b					_BinaryMultiply_NoAdd:
.01078b	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01078d	66 08		ror $08			ror 	DTemp1
.01078f	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010791	36 12		rol $12,x		rol 	EXSValueH+2,x
.010793	80 dc		bra $010771		bra 	_BinaryMultiply_Loop 				; go round again.
.010795					_BinaryMultiply_Exit:
.010795	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010796					Function_Len:
.010796	20 25 04	jsr $010425			jsr 	ResetTypeInteger 			; returns an integer
.010799	20 43 02	jsr $010243			jsr 	EvaluateNextString 			; get the value you are absoluting
.01079c	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; check )
.01079f	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107a1	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107a4	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107a7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107a9	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107ab	60		rts				rts
.0107ac					Function_Abs:
.0107ac	20 25 04	jsr $010425			jsr 	ResetTypeInteger 			; returns an integer
.0107af	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107b2	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; check )
.0107b5	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107b7	30 07		bmi $0107c0			bmi 	_FAbsNegative 				; negate it if negative
.0107b9	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107bb	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107bd	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107bf	60		rts				rts
.0107c0					_FAbsNegative:
.0107c0	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107c1	a9 00 00	lda #$0000			lda 	#0
.0107c4	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107c6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107c8	a9 00 00	lda #$0000			lda 	#0
.0107cb	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107cd	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107cf	60		rts				rts
.0107d0					Function_Sgn:
.0107d0	20 25 04	jsr $010425			jsr 	ResetTypeInteger 			; returns integer
.0107d3	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get an integer
.0107d6	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; check )
.0107d9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107db	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107dd	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107df	30 07		bmi $0107e8			bmi 	_FSgnNegative 				; set to -1 if signed
.0107e1	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107e3	f0 02		beq $0107e7			beq 	_FSgnExit
.0107e5	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107e7					_FSgnExit:
.0107e7	60		rts				rts
.0107e8					_FSgnNegative:
.0107e8	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0107eb	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107ed	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107ef	60		rts				rts
.0107f0					Function_Random:
.0107f0	20 25 04	jsr $010425			jsr 	ResetTypeInteger
.0107f3	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0107f5	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0107f7	d0 0a		bne $010803			bne 	_Rnd_NotZero
.0107f9	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0107fc	85 10		sta $10				sta 	DRandom
.0107fe	a9 ea 00	lda #$00ea			lda 	#$EA
.010801	85 12		sta $12				sta 	DRandom+2
.010803					_Rnd_NotZero:
.010803	20 0e 08	jsr $01080e			jsr 	_Rnd_Process 				; call randomiser twice
.010806	95 10		sta $10,x			sta 	EXSValueH+0,x
.010808	20 0e 08	jsr $01080e			jsr 	_Rnd_Process
.01080b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01080d	60		rts				rts
.01080e					_Rnd_Process:
.01080e	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010810	26 12		rol $12				rol 	DRandom+2
.010812	90 0e		bcc $010822			bcc 	_Rnd_Exit
.010814	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010816	49 54 d4	eor #$d454			eor 	#$D454
.010819	85 10		sta $10				sta 	DRandom
.01081b	a5 12		lda $12				lda 	DRandom+2
.01081d	49 d5 55	eor #$55d5			eor 	#$55D5
.010820	85 12		sta $12				sta 	DRandom+2
.010822					_Rnd_Exit:
.010822	a5 10		lda $10				lda 	DRandom
.010824	45 12		eor $12				eor 	DRandom+2
.010826	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010827					Function_VAL:
.010827	20 25 04	jsr $010425			jsr 	ResetTypeInteger 			; returns an integer
.01082a	20 43 02	jsr $010243			jsr 	EvaluateNextString 			; get the value you are absoluting
.01082d	48		pha				pha 								; put string address on stack.
.01082e	20 3e 08	jsr $01083e			jsr 	VALGetBase 					; process , base (shared with STR$())
.010831	7a		ply				ply 								; get string address back
.010832	da		phx				phx 								; save X on stack
.010833	aa		tax				tax 								; base in X
.010834	98		tya				tya 								; address in A
.010835	20 78 08	jsr $010878			jsr 	StringToInteger
.010838	fa		plx				plx 								; restore X
.010839	95 00		sta $00,x			sta 	EXSValueL+0,x
.01083b	94 10		sty $10,x			sty 	EXSValueH+0,x
.01083d	60		rts				rts
.01083e					VALGetBase:
.01083e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010840	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010843	f0 07		beq $01084c			beq 	_VGBAlternate
.010845	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket			; expect ), and return 10.
.010848	a9 0a 00	lda #$000a			lda 	#10
.01084b	60		rts				rts
.01084c					_VGBAlternate:
.01084c	20 fc 03	jsr $0103fc			jsr 	ExpectComma 				; skip comma.
.01084f	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get base
.010852	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010855	d0 0e		bne $010865			bne 	_VGBBadBase
.010857	c9 02 00	cmp #$0002			cmp 	#2
.01085a	90 09		bcc $010865			bcc 	_VGBBadBase
.01085c	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.01085f	b0 04		bcs $010865			bcs 	_VGBBadBase
.010861	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; get right bracket and return.
.010864	60		rts				rts
.010865					_VGBBadBase:
.010865	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010868	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010870	65 72 20 42 61 73 65 00
.010878					StringToInteger:
.010878	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.01087a	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.01087c	29 ff 00	and #$00ff			and 	#$00FF
.01087f	85 26		sta $26				sta 	DTemp3+2
.010881	f0 6e		beq $0108f1			beq 	_STIError 					; if length zero it's bad.
.010883	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010885	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010887	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010889	64 0a		stz $0a				stz 	DTemp1+2
.01088b	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01088d	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010890	48		pha				pha 								; push on stack
.010891	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010894	d0 06		bne $01089c			bne 	_STILoop
.010896	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010898	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01089a	f0 55		beq $0108f1			beq 	_STIError 					; if only - then error.
.01089c					_STILoop:
.01089c	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01089e	20 10 09	jsr $010910			jsr 	MultiplyTemp1ByA
.0108a1	b2 24		lda ($24)			lda 	(DTemp3)
.0108a3	29 ff 00	and #$00ff			and 	#$00FF
.0108a6	20 01 09	jsr $010901			jsr 	ConvertUpperCase
.0108a9	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108ac	90 43		bcc $0108f1			bcc 	_STIError
.0108ae	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108b1	90 0e		bcc $0108c1			bcc 	_STIOkay1
.0108b3	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108b6	90 39		bcc $0108f1			bcc 	_STIError
.0108b8	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108bb	b0 34		bcs $0108f1			bcs 	_STIError
.0108bd	18		clc				clc 								; shift to correct range.
.0108be	69 09 00	adc #$0009			adc 	#9
.0108c1					_STIOkay1:
.0108c1	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108c4	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108c6	b0 29		bcs $0108f1			bcs 	_STIError
.0108c8	18		clc				clc 								; add A to DTemp1
.0108c9	65 08		adc $08				adc 	DTemp1
.0108cb	85 08		sta $08				sta 	DTemp1
.0108cd	90 02		bcc $0108d1			bcc 	_STINoCarry
.0108cf	e6 0a		inc $0a				inc 	DTemp1+2
.0108d1					_STINoCarry:
.0108d1	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108d3	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108d5	d0 c5		bne $01089c			bne 	_STILoop 					; loop back.
.0108d7	68		pla				pla 								; get optional minus bac
.0108d8	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108db	d0 0f		bne $0108ec			bne 	_STINotNegative 			; handle the negative character
.0108dd	38		sec				sec 								; negate DTemp1
.0108de	a9 00 00	lda #$0000			lda 	#0
.0108e1	e5 08		sbc $08				sbc 	DTemp1
.0108e3	85 08		sta $08				sta 	DTemp1
.0108e5	a9 00 00	lda #$0000			lda 	#0
.0108e8	e5 0a		sbc $0a				sbc 	DTemp1+2
.0108ea	85 0a		sta $0a				sta 	DTemp1+2
.0108ec					_STINotNegative:
.0108ec	a5 08		lda $08				lda 	DTemp1 						; get the result
.0108ee	a4 0a		ldy $0a				ldy 	DTemp1+2
.0108f0	60		rts				rts
.0108f1					_STIError:
.0108f1	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>0108f4	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>0108fc	74 61 6e 74 00
.010901					ConvertUpperCase:
.010901	c9 61 00	cmp #$0061			cmp 	#'a'
.010904	90 09		bcc $01090f			bcc 	_CUCExit
.010906	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010909	b0 04		bcs $01090f			bcs 	_CUCExit
.01090b	38		sec				sec
.01090c	e9 20 00	sbc #$0020			sbc 	#32
.01090f					_CUCExit:
.01090f	60		rts				rts
.010910					MultiplyTemp1ByA:
.010910	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010913	f0 56		beq $01096b			beq 	_MT1_16
.010915	c9 0a 00	cmp #$000a			cmp 	#10
.010918	f0 33		beq $01094d			beq 	_MT1_10
.01091a	c9 08 00	cmp #$0008			cmp 	#8
.01091d	f0 50		beq $01096f			beq 	_MT1_8
.01091f	c9 02 00	cmp #$0002			cmp 	#2
.010922	f0 53		beq $010977			beq 	_MT1_2
.010924					_MTGeneral:
.010924	da		phx				phx
.010925	aa		tax				tax 								; multiplier in X
.010926	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010928	85 0c		sta $0c				sta 	DTemp2
.01092a	a5 0a		lda $0a				lda 	DTemp1+2
.01092c	85 0e		sta $0e				sta 	DTemp2+2
.01092e	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010930	64 0a		stz $0a				stz 	DTemp1+2
.010932					_MTLoop:
.010932	8a		txa				txa 								; shift X right into C
.010933	4a		lsr a				lsr 	a
.010934	aa		tax				tax
.010935	90 0d		bcc $010944			bcc 	_MTNoAdd
.010937	18		clc				clc
.010938	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01093a	65 0c		adc $0c				adc 	DTemp2
.01093c	85 08		sta $08				sta 	DTemp1
.01093e	a5 0a		lda $0a				lda 	DTemp1+2
.010940	65 0e		adc $0e				adc 	DTemp2+2
.010942	85 0a		sta $0a				sta 	DTemp1+2
.010944					_MTNoAdd:
.010944	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010946	26 0e		rol $0e				rol 	DTemp2+2
.010948	8a		txa				txa 								; until multiplier is zero.
.010949	d0 e7		bne $010932			bne 	_MTLoop
.01094b					_MTGExit:
.01094b	fa		plx				plx 								; restore X
.01094c	60		rts				rts 								; and exit
.01094d					_MT1_10:
.01094d	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.01094f	48		pha				pha
.010950	a5 08		lda $08				lda 	DTemp1
.010952	48		pha				pha
.010953	06 08		asl $08				asl 	DTemp1						; x 4
.010955	26 0a		rol $0a				rol 	DTemp1+2
.010957	06 08		asl $08				asl 	DTemp1
.010959	26 0a		rol $0a				rol 	DTemp1+2
.01095b	68		pla				pla 								; add saved value, x 5
.01095c	18		clc				clc
.01095d	65 08		adc $08				adc 	DTemp1
.01095f	85 08		sta $08				sta 	DTemp1
.010961	68		pla				pla
.010962	65 0a		adc $0a				adc 	DTemp1+2
.010964	85 0a		sta $0a				sta 	DTemp1+2
.010966	06 08		asl $08				asl 	DTemp1
.010968	26 0a		rol $0a				rol 	DTemp1+2
.01096a	60		rts				rts
.01096b					_MT1_16:
.01096b	06 08		asl $08				asl 	DTemp1
.01096d	26 0a		rol $0a				rol 	DTemp1+2
.01096f					_MT1_8:
.01096f	06 08		asl $08				asl 	DTemp1
.010971	26 0a		rol $0a				rol 	DTemp1+2
.010973					_MT1_4:
.010973	06 08		asl $08				asl 	DTemp1
.010975	26 0a		rol $0a				rol 	DTemp1+2
.010977					_MT1_2
.010977	06 08		asl $08				asl 	DTemp1
.010979	26 0a		rol $0a				rol 	DTemp1+2
.01097b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.01097c					Function_Str:
.01097c	20 2d 04	jsr $01042d			jsr 	ResetTypeString 			; returns a string.
.01097f	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010982	48		pha				pha 								; save YA on the stack
.010983	5a		phy				phy
.010984	20 3e 08	jsr $01083e			jsr 	VALGetBase 					; process , base (shared with STR$())
.010987	85 14		sta $14				sta 	DSignCount
.010989	7a		ply				ply 								; YA is the number
.01098a	68		pla				pla
.01098b	da		phx				phx
.01098c	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.01098e	20 97 09	jsr $010997			jsr 	ConvertToString 			; convert it to a string.
.010991	fa		plx				plx 								; restore X
.010992	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010994	74 10		stz $10,x			stz 	EXSValueH+0,x
.010996	60		rts				rts
.010997					ConvertToString:
.010997	da		phx				phx 								; save X
.010998	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.01099a	84 26		sty $26				sty 	DTemp3+2
.01099c	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.01099e	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109a1	20 63 04	jsr $010463			jsr 	StringTempAllocate 			; allocate space for return string.
.0109a4	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109a6	10 15		bpl $0109bd			bpl 	_CTSNotNegative
.0109a8	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109ab	20 25 0a	jsr $010a25			jsr 	CTSOutputA
.0109ae	38		sec				sec 								; negate DTemp3
.0109af	a9 00 00	lda #$0000			lda 	#0
.0109b2	e5 24		sbc $24				sbc 	DTemp3
.0109b4	85 24		sta $24				sta 	DTemp3
.0109b6	a9 00 00	lda #$0000			lda 	#0
.0109b9	e5 26		sbc $26				sbc 	DTemp3+2
.0109bb	85 26		sta $26				sta 	DTemp3+2
.0109bd					_CTSNotNegative:
.0109bd	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109c0	48		pha				pha
.0109c1	a9 00 00	lda #$0000			lda 	#0
.0109c4	48		pha				pha
.0109c5	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109c7	85 08		sta $08				sta 	DTemp1
.0109c9	64 0a		stz $0a				stz 	DTemp1+2
.0109cb					_CTSMultiplySubtractor:
.0109cb	38		sec				sec
.0109cc	a5 24		lda $24				lda 	DTemp3
.0109ce	e5 08		sbc $08				sbc 	DTemp1
.0109d0	a5 26		lda $26				lda 	DTemp3+2
.0109d2	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109d4	90 0d		bcc $0109e3			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109d6	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109d8	48		pha				pha
.0109d9	a5 0a		lda $0a				lda 	DTemp1+2
.0109db	48		pha				pha
.0109dc	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109de	20 10 09	jsr $010910			jsr 	MultiplyTemp1ByA
.0109e1	80 e8		bra $0109cb			bra 	_CTSMultiplySubtractor
.0109e3					_CTSScaledUp:
.0109e3	7a		ply				ply 								; YA contains the previous divider.
.0109e4	68		pla				pla
.0109e5	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109e8	d0 05		bne $0109ef			bne 	_CTSHasDigit
.0109ea	c9 01 00	cmp #$0001			cmp 	#1 							;
.0109ed	f0 20		beq $010a0f			beq 	_CTSExit
.0109ef					_CTSHasDigit:
.0109ef	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0109f1	84 0e		sty $0e				sty 	DTemp2+2
.0109f3	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0109f6					_CTSSubLoop:
.0109f6	38		sec				sec 								; subtract subtractor from number
.0109f7	a5 24		lda $24				lda 	DTemp3
.0109f9	e5 0c		sbc $0c				sbc 	DTemp2
.0109fb	a8		tay				tay 								; intermediate in Y
.0109fc	a5 26		lda $26				lda 	DTemp3+2
.0109fe	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a00	90 07		bcc $010a09			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a02	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a04	84 24		sty $24				sty 	DTemp3
.010a06	e8		inx				inx 								; one more subtraction
.010a07	80 ed		bra $0109f6			bra 	_CTSSubLoop 				; try it again.
.010a09					_CTSFinishedSubtracting:
.010a09	8a		txa				txa 								; convert to ASCII.
.010a0a	20 18 0a	jsr $010a18			jsr 	CTSOutputHexDigit 			; write that out.
.010a0d	80 d4		bra $0109e3			bra 	_CTSScaledUp
.010a0f					_CTSExit:
.010a0f	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a11	20 18 0a	jsr $010a18			jsr 	CTSOutputHexDigit
.010a14	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a16	fa		plx				plx 								; restore X.
.010a17	60		rts				rts
.010a18					CTSOutputHexDigit:
.010a18	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a1b	90 04		bcc $010a21			bcc 	_CTSNotLetter
.010a1d	18		clc				clc
.010a1e	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a21					_CTSNotLetter:
.010a21	18		clc				clc
.010a22	69 30 00	adc #$0030			adc 	#48
.010a25					CTSOutputA:
.010a25	5a		phy				phy 								; save Y, set Y to current pointer
.010a26	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a28	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a2b	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a2d	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a2f	1a		inc a				inc 	a
.010a30	92 18		sta ($18)			sta 	(DStartTempString)
.010a32	c2 20		rep #$20			rep 	#$20
.010a34	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a36	7a		ply				ply 								; restore Y and exit.
.010a37	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a38					Function_Let:
.010a38	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a3a	48		pha				pha
.010a3b	20 8a 02	jsr $01028a			jsr 	VariableFind 				; find the variable
.010a3e	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a40	b0 1c		bcs $010a5e			bcs 	_FLetFound 					; skip if found.
.010a42	68		pla				pla 								; get and push the first token again.
.010a43	48		pha				pha
.010a44	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a47	d0 57		bne $010aa0			bne 	_FLError					; arrays, so this causes an error.
.010a49	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a4b	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a4e	20 34 03	jsr $010334			jsr 	VariableCreate 				; create it.
.010a51	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a53					_FLSkipToken:
.010a53	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a55	e6 06		inc $06				inc 	DCodePtr
.010a57	e6 06		inc $06				inc 	DCodePtr
.010a59	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a5c	d0 f5		bne $010a53			bne 	_FLSkipToken
.010a5e					_FLetFound:
.010a5e	68		pla				pla 								; get and save the first token.
.010a5f	48		pha				pha
.010a60	a8		tay				tay 								; put it in Y
.010a61	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a64	f0 07		beq $010a6d			beq 	_FLetNotArray
.010a66	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a68	20 01 03	jsr $010301			jsr 	VariableSubscript			; index calculation
.010a6b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a6d					_FLetNotArray:
.010a6d	7a		ply				ply 								; get the first token into Y
.010a6e	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a70	48		pha				pha
.010a71	5a		phy				phy 								; save the first token on the stack.
.010a72	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a75	20 d9 03	jsr $0103d9			jsr 	ExpectToken
.010a78	68		pla				pla 								; restore the first token.
.010a79	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a7c	d0 0f		bne $010a8d			bne 	_FLetString 				; skip if string.
.010a7e	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; get an integer
.010a81	7a		ply				ply 								; get address in Y
.010a82	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a84	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a87	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a89	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a8c	60		rts				rts
.010a8d					_FLetString:
.010a8d	20 2a 02	jsr $01022a			jsr 	EvaluateString 				; get a string.
.010a90	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a92	20 a1 04	jsr $0104a1			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010a95	7a		ply				ply 								; get address
.010a96	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a99	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010a9c	99 02 00	sta $0002,y			sta 	$0002,y
.010a9f	60		rts				rts
.010aa0					_FLError:
.010aa0	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010aa3	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010aab	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010ab3					Function_PRINTALT:
.010ab3					Function_PRINT:
.010ab3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010ab5	f0 33		beq $010aea			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010ab7	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010aba	f0 2e		beq $010aea			beq 	_FPRExitCR
.010abc	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010abf	f0 23		beq $010ae4			beq 	_FPRSkipLoop
.010ac1	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010ac4	f0 1b		beq $010ae1			beq 	_FPRNewLine
.010ac6	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010ac9	f0 11		beq $010adc			beq 	_FPRTab
.010acb					_FPRExpression:
.010acb	20 fd 00	jsr $0100fd			jsr 	Evaluate 					; evaluate a string or integer.
.010ace	b0 06		bcs $010ad6			bcs 	_FPRHaveString
.010ad0	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ad3	20 97 09	jsr $010997			jsr 	ConvertToString
.010ad6					_FPRHaveString:
.010ad6	a8		tay				tay 								; print the basic String.
.010ad7	20 49 04	jsr $010449			jsr 	PrintBASICString
.010ada	80 d7		bra $010ab3			bra 	Function_Print 				; and go round again.
.010adc					_FPRTab:
.010adc	20 e3 0d	jsr $010de3			jsr 	HWTab
.010adf	80 03		bra $010ae4			bra 	_FPRSkipLoop
.010ae1					_FPRNewLine:
.010ae1	20 d0 0d	jsr $010dd0			jsr 	HWNewLine
.010ae4					_FPRSkipLoop:
.010ae4	e6 06		inc $06				inc 	DCodePtr
.010ae6	e6 06		inc $06				inc 	DCodePtr
.010ae8	80 c9		bra $010ab3			bra 	Function_Print
.010aea					_FPRExitCR:
.010aea	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010aec	88		dey				dey
.010aed	88		dey				dey
.010aee	b9 00 00	lda $0000,y			lda 	$0000,y
.010af1	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010af4	f0 08		beq $010afe			beq 	_FPRExit
.010af6	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010af9	f0 03		beq $010afe			beq 	_FPRExit
.010afb	20 d0 0d	jsr $010dd0			jsr 	HWNewLine 					; print a new line.
.010afe					_FPRExit:
.010afe	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010aff					Function_GOTO:
.010aff	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010b01	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b04	90 2e		bcc $010b34			bcc 	_FGOFail
.010b06	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b09	b0 29		bcs $010b34			bcs 	_FGOFail
.010b0b	38		sec				sec 								; convert to 0-32767
.010b0c	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010b0f	aa		tax				tax
.010b10	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010b13	18		clc				clc
.010b14	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010b16	a8		tay				tay
.010b17					_FGOSearch:
.010b17	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010b1a	f0 2b		beq $010b47			beq 	_FGOUnknown
.010b1c	8a		txa				txa 								; does it match line number.
.010b1d	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010b20	f0 08		beq $010b2a			beq 	_FGOFound 					; yes, then found.
.010b22	98		tya				tya 								; no follow the link
.010b23	18		clc				clc
.010b24	79 00 00	adc $0000,y			adc 	$0000,y
.010b27	a8		tay				tay
.010b28	80 ed		bra $010b17			bra 	_FGOSearch
.010b2a					_FGOFound:
.010b2a	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010b2c	98		tya				tya 								; Y + 4 is the code pointer.
.010b2d	18		clc				clc
.010b2e	69 04 00	adc #$0004			adc 	#4
.010b31	85 06		sta $06				sta 	DCodePtr
.010b33	60		rts				rts									; and continue
.010b34					_FGOFail:
.010b34	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010b37	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010b3f	20 4e 75 6d 62 65 72 00
.010b47					_FGOUnknown:
.010b47	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010b4a	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010b52	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010b5e					Function_GOSUB:
.010b5e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010b60	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010b62	18		clc				clc
.010b63	69 02 00	adc #$0002			adc 	#2
.010b66	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010b68	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010b6a	95 04		sta $04,x			sta 	$04,x
.010b6c	a9 28 3e	lda #$3e28			lda 	#gosubTokenID 				; save gosub token at +6
.010b6f	95 06		sta $06,x			sta 	$06,x
.010b71	8a		txa				txa 								; advance stack by 6.
.010b72	18		clc				clc
.010b73	69 06 00	adc #$0006			adc 	#6
.010b76	85 2a		sta $2a				sta 	DStack
.010b78	80 85		bra $010aff			bra 	Function_GOTO 				; and do a GOTO.
.010b7a					Function_RETURN:
.010b7a	a6 2a		ldx $2a				ldx 	DStack
.010b7c	b5 00		lda $00,x			lda 	$00,x
.010b7e	c9 28 3e	cmp #$3e28			cmp 	#gosubTokenID 				; check top token.
.010b81	d0 11		bne $010b94			bne 	_FRetFail
.010b83	8a		txa				txa 								; unpick stack.
.010b84	38		sec				sec
.010b85	e9 06 00	sbc #$0006			sbc 	#6
.010b88	85 2a		sta $2a				sta 	DStack
.010b8a	aa		tax				tax
.010b8b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010b8d	85 06		sta $06				sta 	DCodePtr
.010b8f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010b91	85 22		sta $22				sta 	DLineNumber
.010b93	60		rts				rts
.010b94					_FRetFail:
.010b94	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010b97	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010b9f	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010bac					Function_END:
.010bac	02 00		cop #$00			cop 	#0
.010bae					Function_RUN:
.010bae	20 06 0c	jsr $010c06			jsr 	Function_CLEAR 				; clear all variables.
.010bb1	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010bb3	18		clc				clc
.010bb4	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010bb7					_FRun_NextLineNumber:
.010bb7	a8		tay				tay 								; put in Y
.010bb8	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010bbb	f0 ef		beq $010bac			beq 	Function_END 				; if zero, off the end of the program
.010bbd	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010bc0	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010bc2	98		tya				tya 								; get address back
.010bc3	18		clc				clc 								; skip over the link/line number
.010bc4	69 04 00	adc #$0004			adc 	#4
.010bc7	85 06		sta $06				sta 	DCodePtr
.010bc9					_FRun_NextInstruction:
.010bc9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010bcc	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010bce	38		sec				sec
.010bcf	e9 00 01	sbc #$0100			sbc 	#256
.010bd2	85 16		sta $16				sta 	DTempStringPointer
.010bd4	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010bd6	f0 28		beq $010c00			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010bd8	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010bdb	f0 18		beq $010bf5			beq 	_FRun_Colon
.010bdd	a8		tay				tay 								; save in Y
.010bde	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010be1	c9 00 20	cmp #$2000			cmp 	#$2000
.010be4	d0 15		bne $010bfb			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010be6	98		tya				tya 								; get token back
.010be7	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010bea	0a		asl a				asl 	a 							; double it into X
.010beb	aa		tax				tax
.010bec	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010bee	e6 06		inc $06				inc 	DCodePtr
.010bf0	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010bf3	80 d4		bra $010bc9			bra 	_FRun_NextInstruction 		; do the following instruction.
.010bf5					_FRun_Colon:
.010bf5	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010bf7	e6 06		inc $06				inc 	DCodePtr
.010bf9	80 ce		bra $010bc9			bra 	_FRun_NextInstruction 		; do the following instruction.
.010bfb					_FRun_TryLET:
.010bfb	20 38 0a	jsr $010a38			jsr 	Function_LET 				; try as a LET.
.010bfe	80 c9		bra $010bc9			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010c00					_FRun_EndInstruction:
.010c00	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010c02	1a		inc a				inc 	a 							; go to link for next line
.010c03	1a		inc a				inc 	a
.010c04	80 b1		bra $010bb7			bra 	_FRun_NextLineNumber
.010c06					Function_CLEAR:
.010c06	20 0a 0c	jsr $010c0a			jsr 	ClearVariablesPointersAndStacks
.010c09	60		rts				rts
.010c0a					ClearVariablesPointersAndStacks:
.010c0a	a9 80 00	lda #$0080			lda 	#BASStack
.010c0d	85 2a		sta $2a				sta 	DStack
.010c0f	64 80		stz $80				stz 	BASStack
.010c11	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010c14	a9 00 00	lda #$0000			lda 	#$0000
.010c17	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c19	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010c1b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010c1e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c20	20 47 0c	jsr $010c47			jsr 	FindCodeEnd 				; find where the program ends.
.010c23	a8		tay				tay 								; Y points to it.
.010c24	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010c27	99 02 00	sta $0002,y			sta 	$0002,y
.010c2a	99 04 00	sta $0004,y			sta 	$0004,y
.010c2d	98		tya				tya 								; start of working memory up
.010c2e	18		clc				clc
.010c2f	69 06 00	adc #$0006			adc 	#6
.010c32	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010c35	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c37	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010c3a					_FCLoop:
.010c3a	a9 00 00	lda #$0000			lda 	#$0000
.010c3d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c3f	c8		iny				iny
.010c40	c8		iny				iny
.010c41	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010c44	d0 f4		bne $010c3a			bne 	_FCLoop
.010c46	60		rts				rts
.010c47					FindCodeEnd:
.010c47	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010c4a	18		clc				clc
.010c4b	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010c4d	a8		tay				tay
.010c4e					_FCELoop:
.010c4e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010c51	f0 08		beq $010c5b			beq 	_FCEExit
.010c53	98		tya				tya 								; add offset
.010c54	18		clc				clc
.010c55	79 00 00	adc $0000,y			adc 	$0000,y
.010c58	a8		tay				tay
.010c59	80 f3		bra $010c4e			bra 	_FCELoop
.010c5b					_FCEExit:
.010c5b	98		tya				tya 								; return in A
.010c5c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010c5d					Function_Dim:
.010c5d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010c5f	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010c62	f0 3b		beq $010c9f			beq		_FDIMNotArray 				; no, error.
.010c64	20 8a 02	jsr $01028a			jsr 	VariableFind 				; try to find it.
.010c67	b0 41		bcs $010caa			bcs 	_FDIMExists 				; if it does, that's an error.
.010c69	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010c6b	48		pha				pha
.010c6c	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010c6e	48		pha				pha
.010c6f					_FDIMSkip:
.010c6f	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010c71	e6 06		inc $06				inc 	DCodePtr
.010c73	e6 06		inc $06				inc 	DCodePtr
.010c75	29 00 08	and #$0800			and 	#IDContMask
.010c78	d0 f5		bne $010c6f			bne 	_FDIMSkip
.010c7a	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; evaluate the size
.010c7d	20 f3 03	jsr $0103f3			jsr 	ExpectRightBracket 			; check the ) following.
.010c80	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010c83	d0 3b		bne $010cc0			bne 	_FDIMSize
.010c85	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010c88	f0 36		beq $010cc0			beq 	_FDIMSize
.010c8a	7a		ply				ply 								; restore HashTablePtr
.010c8b	84 20		sty $20				sty 	DHashTablePtr
.010c8d	7a		ply				ply 								; so now A is the high index, Y points to the token
.010c8e	20 34 03	jsr $010334			jsr 	VariableCreate 				; create the variable.
.010c91	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010c93	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010c96	d0 06		bne $010c9e			bne 	_FDIMExit
.010c98	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010c9a	e6 06		inc $06				inc 	DCodePtr
.010c9c	80 bf		bra $010c5d			bra 	Function_DIM 				; and do another
.010c9e					_FDIMExit:
.010c9e	60		rts				rts
.010c9f					_FDIMNotArray:
.010c9f	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010ca2	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010caa					_FDIMExists:
.010caa	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010cad	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010cb5	65 64 69 6d 65 6e 73 69 6f 6e 00
.010cc0					_FDIMSize:
.010cc0	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010cc3	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010ccb	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010cd1					Function_COLLECT:
.010cd1	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010cd3	85 0c		sta $0c				sta 	DTemp2
.010cd5	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010cd8	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010cda	85 0e		sta $0e				sta 	DTemp2+2
.010cdc	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010cde	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ce0					_FCNextPass:
.010ce0	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010ce2	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010ce4	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010ce6	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010ce9	18		clc				clc
.010cea	65 02		adc $02				adc 	DBaseAddress
.010cec	a8		tay				tay 								; put in Y
.010ced	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010cf0					_FCO1:
.010cf0	20 16 0d	jsr $010d16			jsr  	COLLECTScanVariable 		; scan that one.
.010cf3	c8		iny				iny 	 							; go to next pointer
.010cf4	c8		iny				iny
.010cf5	ca		dex				dex
.010cf6	d0 f8		bne $010cf0			bne 	_FCO1 						; until done all 16.
.010cf8	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010cfb					_FCO2:
.010cfb	20 2a 0d	jsr $010d2a			jsr  	COLLECTScanArray 			; scan that one.
.010cfe	c8		iny				iny 	 							; go to next pointer
.010cff	c8		iny				iny
.010d00	ca		dex				dex
.010d01	d0 f8		bne $010cfb			bne 	_FCO2 						; until done all 16.
.010d03	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010d05	f0 0e		beq $010d15			beq		_FCExit 					; if finished then exit.
.010d07	48		pha				pha 								; save the target address
.010d08	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010d0a	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010d0c	20 a1 04	jsr $0104a1			jsr 	StringMakeConcrete 			; make the string concrete.
.010d0f	7a		ply				ply 								; restore the string.
.010d10	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010d13	80 cb		bra $010ce0			bra		_FCNextPass
.010d15					_FCExit:
.010d15	60		rts				rts
.010d16					COLLECTScanVariable:
.010d16	da		phx				phx 								; save XY
.010d17	5a		phy				phy
.010d18					_CSVLoop:
.010d18	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d1b	f0 0a		beq $010d27			beq 	_CSVExit
.010d1d	a8		tay				tay 								; put new address into Y
.010d1e	18		clc				clc 								; which is four on.
.010d1f	69 04 00	adc #$0004			adc 	#4
.010d22	20 49 0d	jsr $010d49			jsr 	COLLECTCheck
.010d25	80 f1		bra $010d18			bra 	_CSVLoop
.010d27					_CSVExit:
.010d27	7a		ply				ply
.010d28	fa		plx				plx
.010d29	60		rts				rts
.010d2a					COLLECTScanArray:
.010d2a	da		phx				phx 								; save XY
.010d2b	5a		phy				phy
.010d2c					_CSALoop:
.010d2c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d2f	f0 15		beq $010d46			beq 	_CSAExit
.010d31	a8		tay				tay 								; put new address in Y
.010d32	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010d35	aa		tax				tax
.010d36	e8		inx				inx									; +1 as one more data element.
.010d37	98		tya				tya 								; point A to first element, at +6
.010d38	18		clc				clc
.010d39	69 06 00	adc #$0006			adc 	#6
.010d3c					_CSADoAllStrings:
.010d3c	20 49 0d	jsr $010d49			jsr 	COLLECTCheck 				; collect check the first.
.010d3f	1a		inc a				inc 	a 							; advance the pointer.
.010d40	1a		inc a				inc 	a
.010d41	ca		dex				dex
.010d42	d0 f8		bne $010d3c			bne 	_CSADoAllStrings 			; until all strings are done.
.010d44	80 e6		bra $010d2c			bra 	_CSALoop
.010d46					_CSAExit:
.010d46	7a		ply				ply
.010d47	fa		plx				plx
.010d48	60		rts				rts
.010d49					COLLECTCheck:
.010d49	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010d4b	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010d4d	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010d4f	90 0a		bcc $010d5b			bcc 	_COCExit
.010d51	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010d53	b0 06		bcs $010d5b			bcs 	_COCExit
.010d55	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010d57	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010d59	85 14		sta $14				sta 	DSignCount
.010d5b					_COCExit:
.010d5b	a5 0a		lda $0a				lda 	DTemp1+2
.010d5d	60		rts				rts
.010d5e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010d5f					Function_ASSERT:
.010d5f	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; something that returns an integer.
.010d62	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010d64	05 08		ora $08				ora 	Dtemp1
.010d66	f0 01		beq $010d69			beq 	_FAssFail
.010d68	60		rts				rts
.010d69					_FAssFail:
.010d69	20 8e 03	jsr $01038e			jsr 	ErrorHandler 						; call error routine
>010d6c	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010d74	61 69 6c 65 64 00
.010d7a					Function_CLS:
.010d7a	20 93 0d	jsr $010d93			jsr 	HWClearScreen
.010d7d	60		rts				rts

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010d7e					SwitchBasicInstance:
.010d7e	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010d80	20 93 0d	jsr $010d93			jsr 	HWClearScreen 						; clear screen
.010d83	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010d86	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010d88	86 02		stx $02				stx		DBaseAddress
.010d8a	84 04		sty $04				sty 	DHighAddress
.010d8c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010d8d	48		pha				pha 										; then copy it into B.
.010d8e	ab		plb				plb
.010d8f	ab		plb				plb
.010d90	4c ae 0b	jmp $010bae			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
.010d93					HWClearScreen:
.010d93	48		pha				pha
.010d94	da		phx				phx
.010d95	a2 fe 01	ldx #$01fe			ldx 	#510
.010d98	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010d9b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010d9f	ca		dex				dex
.010da0	10 f6		bpl $010d98			bpl 	_CS0
.010da2	64 28		stz $28				stz 	DCursor
.010da4	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010da7	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010dab	fa		plx				plx
.010dac	68		pla				pla
.010dad	60		rts				rts
.010dae					HWPrintChar:
.010dae	48		pha				pha
.010daf	da		phx				phx
.010db0	a6 28		ldx $28				ldx 	DCursor
.010db2	e2 20		sep #$20			sep 	#$20
.010db4	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010db8	c2 20		rep #$20			rep 	#$20
.010dba	e8		inx				inx
.010dbb	8a		txa				txa
.010dbc	29 ff 01	and #$01ff			and 	#(32*16-1)
.010dbf	85 28		sta $28				sta 	DCursor
.010dc1	aa		tax				tax
.010dc2	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010dc5	e2 20		sep #$20			sep 	#$20
.010dc7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010dcb	c2 20		rep #$20			rep 	#$20
.010dcd	fa		plx				plx
.010dce	68		pla				pla
.010dcf	60		rts				rts
.010dd0					HWNewLine:
.010dd0	48		pha				pha
.010dd1	da		phx				phx
.010dd2	a2 1f 00	ldx #$001f			ldx 	#31
.010dd5					HWMoveCursor:
.010dd5	a9 20 00	lda #$0020			lda 	#32
.010dd8	20 ae 0d	jsr $010dae			jsr 	HWPrintChar
.010ddb	8a		txa				txa
.010ddc	25 28		and $28				and 	DCursor
.010dde	d0 f5		bne $010dd5			bne 	HWMoveCursor
.010de0	fa		plx				plx
.010de1	68		pla				pla
.010de2	60		rts				rts
.010de3	48		pha		HWTab:	pha
.010de4	da		phx				phx
.010de5	a2 07 00	ldx #$0007			ldx 	#7
.010de8	80 eb		bra $010dd5			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	fc 48 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0e 00 01 00 22 3e c9 d4
>024108	04 40 1b 32 00 00 12 00 02 00 22 3e 3d de fc dc
>024118	11 d0 03 40 1b 32 00 00 0e 00 03 00 22 3e 86 d5
>024128	05 40 1b 32 00 00 10 00 04 00 22 3e da dd 1c d0
>024138	03 40 1b 32 00 00 10 00 05 00 22 3e 41 fe 79 f2
>024148	02 40 1b 32 00 00 0e 00 06 00 22 3e 1a f0 06 40
>024158	1b 32 00 00 12 00 07 00 22 3e aa fd dd fc 14 f0
>024168	06 40 1b 32 00 00 0e 00 08 00 22 3e 78 f5 02 40
>024178	1b 32 00 00 12 00 09 00 1d 3e 04 c6 06 22 0b 24
>024188	04 10 ba 94 00 00 10 00 0a 00 1d 3e 01 c0 06 22
>024198	02 10 ec 97 00 00 12 00 0b 00 60 cd 11 c0 06 22
>0241a8	0b 24 03 10 a3 6b 00 00 12 00 0c 00 1d 3e 09 c0
>0241b8	06 22 0b 24 05 10 be 98 00 00 1c 00 0d 00 1d 3e
>0241c8	33 ed 0a e0 06 22 0e 00 0a 43 4b 51 46 50 43 4a
>0241d8	20 53 59 00 00 00 14 00 0e 00 1d 3e 5b ee ad ea
>0241e8	08 e0 06 22 04 00 01 55 00 00 12 00 0f 00 1d 3e
>0241f8	b1 ed 05 e0 06 22 04 00 01 47 00 00 12 00 10 00
>024208	d6 ed c9 e3 06 22 06 00 03 49 54 44 00 00 46 00
>024218	11 00 c9 d4 00 40 1b 32 06 22 0b 24 76 ba 19 32
>024228	c9 d4 01 40 1b 32 06 22 0b 24 32 40 19 32 c9 d4
>024238	02 40 1b 32 06 22 20 40 19 32 c9 d4 03 40 1b 32
>024248	06 22 18 40 19 32 c9 d4 04 40 1b 32 06 22 0b 24
>024258	ac 40 00 00 50 00 12 00 3d de fc dc 11 d0 00 40
>024268	1b 32 06 22 0b 24 58 40 19 32 3d de fc dc 11 d0
>024278	01 40 1b 32 06 22 0b 24 02 10 d7 5c 19 32 3d de
>024288	fc dc 11 d0 02 40 1b 32 06 22 04 10 07 6c 19 32
>024298	3d de fc dc 11 d0 03 40 1b 32 06 22 0b 24 04 10
>0242a8	fa 8e 00 00 5a 00 13 00 86 d5 00 40 1b 32 06 22
>0242b8	f0 55 19 32 86 d5 01 40 1b 32 06 22 0b 24 73 40
>0242c8	19 32 86 d5 02 40 1b 32 06 22 0b 24 04 10 e9 5f
>0242d8	19 32 86 d5 03 40 1b 32 06 22 02 10 d5 68 19 32
>0242e8	86 d5 04 40 1b 32 06 22 0b 24 05 10 83 78 19 32
>0242f8	86 d5 05 40 1b 32 06 22 0b 24 a4 40 00 00 40 00
>024308	14 00 da dd 1c d0 00 40 1b 32 06 22 f5 93 19 32
>024318	da dd 1c d0 01 40 1b 32 06 22 0b 24 36 54 19 32
>024328	da dd 1c d0 02 40 1b 32 06 22 0b 24 d4 97 19 32
>024338	da dd 1c d0 03 40 1b 32 06 22 4f 40 00 00 42 00
>024348	15 00 41 fe 79 f2 00 40 1b 32 06 22 08 00 05 4f
>024358	4a 5a 54 4f 19 32 41 fe 79 f2 01 40 1b 32 06 22
>024368	0e 00 0a 46 4c 53 56 43 20 55 4b 4b 4a 00 19 32
>024378	41 fe 79 f2 02 40 1b 32 06 22 04 00 00 00 00 00
>024388	a0 00 16 00 1a f0 00 40 1b 32 06 22 0e 00 0a 43
>024398	20 55 56 54 57 54 50 4a 48 00 19 32 1a f0 01 40
>0243a8	1b 32 06 22 08 00 05 4f 53 20 46 4f 19 32 1a f0
>0243b8	02 40 1b 32 06 22 0c 00 08 43 50 55 54 20 48 20
>0243c8	45 00 19 32 1a f0 03 40 1b 32 06 22 0c 00 08 46
>0243d8	20 42 43 20 42 54 58 00 19 32 1a f0 04 40 1b 32
>0243e8	06 22 0c 00 08 57 20 45 4e 47 50 43 46 00 19 32
>0243f8	1a f0 05 40 1b 32 06 22 0e 00 0a 4d 46 42 41 56
>024408	20 5a 43 44 41 00 19 32 1a f0 06 40 1b 32 06 22
>024418	0e 00 0b 46 58 4b 51 47 20 54 4a 54 20 49 00 00
>024428	ac 00 17 00 aa fd dd fc 14 f0 00 40 1b 32 06 22
>024438	0c 00 08 5a 45 44 51 20 20 54 54 00 19 32 aa fd
>024448	dd fc 14 f0 01 40 1b 32 06 22 0a 00 07 47 48 4a
>024458	55 4d 20 4e 19 32 aa fd dd fc 14 f0 02 40 1b 32
>024468	06 22 0e 00 0a 4b 47 20 4e 4b 55 4b 47 49 43 00
>024478	19 32 aa fd dd fc 14 f0 03 40 1b 32 06 22 0a 00
>024488	07 49 55 59 20 41 53 46 19 32 aa fd dd fc 14 f0
>024498	04 40 1b 32 06 22 08 00 04 53 58 20 57 00 19 32
>0244a8	aa fd dd fc 14 f0 05 40 1b 32 06 22 04 00 01 49
>0244b8	19 32 aa fd dd fc 14 f0 06 40 1b 32 06 22 0c 00
>0244c8	09 57 44 5a 4d 54 50 4b 4e 42 00 00 3c 00 18 00
>0244d8	78 f5 00 40 1b 32 06 22 0e 00 0a 4d 52 20 47 46
>0244e8	47 20 20 20 4a 00 19 32 78 f5 01 40 1b 32 06 22
>0244f8	06 00 02 4d 4f 00 19 32 78 f5 02 40 1b 32 06 22
>024508	06 00 02 4a 52 00 00 00 12 00 19 00 1e 3e 04 c6
>024518	06 22 0b 24 04 10 ba 94 00 00 10 00 1a 00 1e 3e
>024528	01 c0 06 22 02 10 ec 97 00 00 14 00 1b 00 1e 3e
>024538	60 cd 11 c0 06 22 0b 24 03 10 a3 6b 00 00 12 00
>024548	1c 00 1e 3e 09 c0 06 22 0b 24 05 10 be 98 00 00
>024558	1c 00 1d 00 1e 3e 33 ed 0a e0 06 22 0e 00 0a 43
>024568	4b 51 46 50 43 4a 20 53 59 00 00 00 14 00 1e 00
>024578	1e 3e 5b ee ad ea 08 e0 06 22 04 00 01 55 00 00
>024588	12 00 1f 00 1e 3e b1 ed 05 e0 06 22 04 00 01 47
>024598	00 00 14 00 20 00 1e 3e d6 ed c9 e3 06 22 06 00
>0245a8	03 49 54 44 00 00 50 00 21 00 1e 3e c9 d4 00 40
>0245b8	1b 32 06 22 0b 24 76 ba 19 32 1e 3e c9 d4 01 40
>0245c8	1b 32 06 22 0b 24 32 40 19 32 1e 3e c9 d4 02 40
>0245d8	1b 32 06 22 20 40 19 32 1e 3e c9 d4 03 40 1b 32
>0245e8	06 22 18 40 19 32 1e 3e c9 d4 04 40 1b 32 06 22
>0245f8	0b 24 ac 40 00 00 58 00 22 00 1e 3e 3d de fc dc
>024608	11 d0 00 40 1b 32 06 22 0b 24 58 40 19 32 1e 3e
>024618	3d de fc dc 11 d0 01 40 1b 32 06 22 0b 24 02 10
>024628	d7 5c 19 32 1e 3e 3d de fc dc 11 d0 02 40 1b 32
>024638	06 22 04 10 07 6c 19 32 1e 3e 3d de fc dc 11 d0
>024648	03 40 1b 32 06 22 0b 24 04 10 fa 8e 00 00 66 00
>024658	23 00 1e 3e 86 d5 00 40 1b 32 06 22 f0 55 19 32
>024668	1e 3e 86 d5 01 40 1b 32 06 22 0b 24 73 40 19 32
>024678	1e 3e 86 d5 02 40 1b 32 06 22 0b 24 04 10 e9 5f
>024688	19 32 1e 3e 86 d5 03 40 1b 32 06 22 02 10 d5 68
>024698	19 32 1e 3e 86 d5 04 40 1b 32 06 22 0b 24 05 10
>0246a8	83 78 19 32 1e 3e 86 d5 05 40 1b 32 06 22 0b 24
>0246b8	a4 40 00 00 48 00 24 00 1e 3e da dd 1c d0 00 40
>0246c8	1b 32 06 22 f5 93 19 32 1e 3e da dd 1c d0 01 40
>0246d8	1b 32 06 22 0b 24 36 54 19 32 1e 3e da dd 1c d0
>0246e8	02 40 1b 32 06 22 0b 24 d4 97 19 32 1e 3e da dd
>0246f8	1c d0 03 40 1b 32 06 22 4f 40 00 00 48 00 25 00
>024708	1e 3e 41 fe 79 f2 00 40 1b 32 06 22 08 00 05 4f
>024718	4a 5a 54 4f 19 32 1e 3e 41 fe 79 f2 01 40 1b 32
>024728	06 22 0e 00 0a 46 4c 53 56 43 20 55 4b 4b 4a 00
>024738	19 32 1e 3e 41 fe 79 f2 02 40 1b 32 06 22 04 00
>024748	00 00 00 00 ae 00 26 00 1e 3e 1a f0 00 40 1b 32
>024758	06 22 0e 00 0a 43 20 55 56 54 57 54 50 4a 48 00
>024768	19 32 1e 3e 1a f0 01 40 1b 32 06 22 08 00 05 4f
>024778	53 20 46 4f 19 32 1e 3e 1a f0 02 40 1b 32 06 22
>024788	0c 00 08 43 50 55 54 20 48 20 45 00 19 32 1e 3e
>024798	1a f0 03 40 1b 32 06 22 0c 00 08 46 20 42 43 20
>0247a8	42 54 58 00 19 32 1e 3e 1a f0 04 40 1b 32 06 22
>0247b8	0c 00 08 57 20 45 4e 47 50 43 46 00 19 32 1e 3e
>0247c8	1a f0 05 40 1b 32 06 22 0e 00 0a 4d 46 42 41 56
>0247d8	20 5a 43 44 41 00 19 32 1e 3e 1a f0 06 40 1b 32
>0247e8	06 22 0e 00 0b 46 58 4b 51 47 20 54 4a 54 20 49
>0247f8	00 00 ba 00 27 00 1e 3e aa fd dd fc 14 f0 00 40
>024808	1b 32 06 22 0c 00 08 5a 45 44 51 20 20 54 54 00
>024818	19 32 1e 3e aa fd dd fc 14 f0 01 40 1b 32 06 22
>024828	0a 00 07 47 48 4a 55 4d 20 4e 19 32 1e 3e aa fd
>024838	dd fc 14 f0 02 40 1b 32 06 22 0e 00 0a 4b 47 20
>024848	4e 4b 55 4b 47 49 43 00 19 32 1e 3e aa fd dd fc
>024858	14 f0 03 40 1b 32 06 22 0a 00 07 49 55 59 20 41
>024868	53 46 19 32 1e 3e aa fd dd fc 14 f0 04 40 1b 32
>024878	06 22 08 00 04 53 58 20 57 00 19 32 1e 3e aa fd
>024888	dd fc 14 f0 05 40 1b 32 06 22 04 00 01 49 19 32
>024898	1e 3e aa fd dd fc 14 f0 06 40 1b 32 06 22 0c 00
>0248a8	09 57 44 5a 4d 54 50 4b 4e 42 00 00 42 00 28 00
>0248b8	1e 3e 78 f5 00 40 1b 32 06 22 0e 00 0a 4d 52 20
>0248c8	47 46 47 20 20 20 4a 00 19 32 1e 3e 78 f5 01 40
>0248d8	1b 32 06 22 06 00 02 4d 4f 00 19 32 1e 3e 78 f5
>0248e8	02 40 1b 32 06 22 06 00 02 4a 52 00 00 00 00 00
>0248f8	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>024908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1902 times (30432 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
