
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun  8 16:17:25 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 86 07 01	jmp $010786		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ea 02					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	77 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	87 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	97 04					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	db 04					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	42 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a7 04					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	24 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	06 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c1 04					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c1 03					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	42 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4e 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	cb 05					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	42 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	53 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	65 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	dc 06					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	bc 06					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	98 06					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	82 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	ea 02					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	ea 02					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	ea 02					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	ea 02					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	ea 02					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	2e 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	13 07					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	2f 07					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	31 07					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	ea 02					.word IllegalToken             & $FFFF ; token $3c1e "while"
>01003e	ea 02					.word IllegalToken             & $FFFF ; token $3a1f "wend"
.010040					TokenText:
>010040	02 26					 .text $02,"&"        ; token $2001
>010042	02 7c					 .text $02,"|"        ; token $2002
>010044	02 5e					 .text $02,"^"        ; token $2003
>010046	12 3c					 .text $12,"<"        ; token $2204
>010048	12 3e					 .text $12,">"        ; token $2205
>01004a	12 3d					 .text $12,"="        ; token $2206
>01004c	13 3c 3d				 .text $13,"<="       ; token $2207
>01004f	13 3e 3d				 .text $13,">="       ; token $2208
>010052	13 3c 3e				 .text $13,"<>"       ; token $2209
>010055	22 2b					 .text $22,"+"        ; token $240a
>010057	22 2d					 .text $22,"-"        ; token $240b
>010059	32 2a					 .text $32,"*"        ; token $260c
>01005b	32 2f					 .text $32,"/"        ; token $260d
>01005d	32 25					 .text $32,"%"        ; token $260e
>01005f	33 3e 3e				 .text $33,">>"       ; token $260f
>010062	33 3c 3c				 .text $33,"<<"       ; token $2610
>010065	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006b	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010070	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010075	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007a	92 2c					 .text $92,","        ; token $3215
>01007c	92 3b					 .text $92,";"        ; token $3216
>01007e	92 3a					 .text $92,":"        ; token $3217
>010080	92 28					 .text $92,"("        ; token $3218
>010082	92 29					 .text $92,")"        ; token $3219
>010084	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>010088	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>01008f	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010093	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>010097	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c1e
>01009d	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a1f
>0100a2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3c1e					whileTokenID                     = $3c1e
=$3a1f					wendTokenID                      = $3a1f

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100a3					Evaluate:
.0100a3	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100a6	a9 00 00	lda #$0000			lda 	#0<<9 						; start at the lowest precedence level.
.0100a9					EvaluateLevel:
.0100a9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ac	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100ae	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100b0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100b3	b0 79		bcs $01012e			bcs 	_ELVariable
.0100b5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100b8	b0 16		bcs $0100d0			bcs 	_ELConstant
.0100ba	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100bd	90 7f		bcc $01013e			bcc 	_ELStringConstant
.0100bf	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100c2	90 03		bcc $0100c7			bcc 	_ELConstantShift
.0100c4	82 94 00	brl $01015b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100c7					_ELConstantShift:
.0100c7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100ca	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100cc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ce	e6 06		inc $06				inc 	DCodePtr
.0100d0					_ELConstant:
.0100d0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100d2	38		sec				sec  								; shift it in the range 0-32767
.0100d3	e9 00 40	sbc #$4000			sbc 	#$4000
.0100d6	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100d7	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100d9	6a		ror a				ror 	a 							; rotate that into the constant value
.0100da	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100dc	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100de	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100e0	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100e2	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100e4	e6 06		inc $06				inc 	DCodePtr
.0100e6					_ELGotAtom:
.0100e6	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100e8	a8		tay				tay 								; save in Y
.0100e9	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100ec	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100ef	d0 35		bne $010126			bne 	_ELExit
.0100f1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0100f3	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100f6	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0100f8	98		tya				tya 								; get the keyword token back
.0100f9	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100fc	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0100fe	90 26		bcc $010126			bcc 	_ELExit 					; precedence too low, then exit.
.010100	5a		phy				phy 								; save the binary operator on the stack
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010103	e6 06		inc $06				inc 	DCodePtr
.010105	18		clc				clc 								; try the next level up
.010106	69 00 02	adc #$0200			adc 	#1 << 9
.010109	e8		inx				inx 								; calculate the RHS at the next stack level.
.01010a	e8		inx				inx
.01010b	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.01010e	ca		dex				dex
.01010f	ca		dex				dex
.010110	7a		ply				ply 								; get operator token back into Y
.010111					_ELExecuteY:
.010111	98		tya				tya
.010112	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010115	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010116	9b		txy				txy 								; save X in Y
.010117	aa		tax				tax 								; double keyword ID in X
.010118	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01011c	bb		tyx				tyx 								; restore X.
.01011d	8f 22 01 01	sta $010122			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010121					_ELCallRoutine:
.010121	20 21 01	jsr $010121			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010124	80 c0		bra $0100e6			bra 	_ELGotAtom 					; go round operator level again.
.010126	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010128	0a		asl a				asl 	a
.010129	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01012b	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01012d	60		rts				rts
.01012e					_ELVariable:
.01012e	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010130	20 ef 01	jsr $0101ef			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010133	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010135	94 10		sty $10,x			sty 	EXSValueH+0,x
.010137	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010139	80 ab		bra $0100e6			bra 	_ELGotAtom
.01013b					_ELSyntax
.01013b	82 bd 01	brl $0102fb			brl 	SyntaxError
.01013e					_ELStringConstant:
.01013e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010141	f0 f8		beq $01013b			beq 	_ELSyntax
.010143	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010145	1a		inc a				inc 	a
.010146	1a		inc a				inc 	a
.010147	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010149	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01014b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01014d	18		clc				clc 								; add to string constant.
.01014e	65 06		adc $06				adc 	DCodePtr
.010150	85 06		sta $06				sta 	DCodePtr
.010152	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010154	09 00 80	ora #$8000			ora 	#$8000
.010157	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010159	80 8b		bra $0100e6			bra 	_ELGotAtom
.01015b					_ELUnaryKeyword:
.01015b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01015d	a8		tay				tay 								; put the token in Y.
.01015e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010160	e6 06		inc $06				inc 	DCodePtr
.010162	29 00 1e	and #$1e00			and 	#$1E00 						; mask out the keyword type.
.010165	c9 00 10	cmp #$1000			cmp 	#$1000 						; if it is xxx1 000x then it's a unary function
.010168	f0 a7		beq $010111			beq 	_ELExecuteY					; go back and execute it
.01016a	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01016d	d0 11		bne $010180			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01016f	20 a6 01	jsr $0101a6			jsr 	EvaluateNext 				; evaluate the expression
.010172	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; consume the right bracket.
.010175					_ELCopy:
.010175	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010177	95 00		sta $00,x			sta 	EXSValueL+0,x
.010179	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01017b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01017d	82 66 ff	brl $0100e6			brl 	_ELGotAtom 					; and continue.
.010180					_ELUnaryOperator:
.010180	5a		phy				phy 								; save the operator on the stack.
.010181	e8		inx				inx 								; this is like evaluate next
.010182	e8		inx				inx
.010183	a9 00 0e	lda #$0e00			lda 	#7<<9 						; except we use a very high precedence to make it atomic
.010186	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.010189	ca		dex				dex 								; unwind the stack.
.01018a	ca		dex				dex
.01018b	68		pla				pla 								; restore the unary operator.
.01018c	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01018f	f0 03		beq $010194			beq 	_ELMinus
.010191	4c fb 02	jmp $0102fb			jmp 	SyntaxError
.010194					_ELMinus:
.010194	38		sec				sec 								; do the negation calculation.
.010195	a9 00 00	lda #$0000			lda 	#0
.010198	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01019a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01019c	a9 00 00	lda #$0000			lda 	#0
.01019f	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101a1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101a3	82 40 ff	brl $0100e6			brl 	_ELGotAtom					; and continue.
.0101a6					EvaluateNext:
.0101a6	e8		inx				inx
.0101a7	e8		inx				inx
.0101a8	a9 00 00	lda #$0000			lda 	#0<<9
.0101ab	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.0101ae	ca		dex				dex
.0101af	ca		dex				dex
.0101b0	60		rts				rts
.0101b1					EvaluateInteger:
.0101b1	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101b4	b0 01		bcs $0101b7			bcs 	EIType
.0101b6	60		rts				rts
.0101b7					EIType:
.0101b7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101ba	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101c2	78 70 65 63 74 65 64 00
.0101ca					EvaluateNextInteger:
.0101ca	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101cd	b0 e8		bcs $0101b7			bcs 	EIType
.0101cf	60		rts				rts
.0101d0					EvaluateString:
.0101d0	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101d3	90 01		bcc $0101d6			bcc 	ESType
.0101d5	60		rts				rts
.0101d6					ESType:
.0101d6	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101d9	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextString:
.0101e9	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101ec	90 e8		bcc $0101d6			bcc 	ESType
.0101ee	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101ef					VariableAccessExpression:
.0101ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101f1	48		pha				pha
.0101f2	20 6c 02	jsr $01026c			jsr 	VariableFind 				; try to find the variable
.0101f5	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0101f7	90 48		bcc $010241			bcc 	_VANError
.0101f9	68		pla				pla 								; get and save that first token
.0101fa	48		pha				pha
.0101fb	29 00 10	and #$1000			and 	#$1000 						; is it an array ?
.0101fe	f0 2d		beq $01022d			beq 	_VANNotArray
.010200	a5 1e		lda $1e				lda 	DVariablePtr 				; push the variable address on the stack as well.
.010202	48		pha				pha
.010203	20 ca 01	jsr $0101ca			jsr		EvaluateNextInteger 		; get the subscript
.010206	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; skip right bracket.
.010209	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01020c	d0 47		bne $010255			bne 	_VANSubscript
.01020e	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010210	f0 02		beq $010214			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010212	b0 41		bcs $010255			bcs 	_VANSubscript
.010214					_VANSubOkay:
.010214	0a		asl a				asl 	a 							; double lsword
.010215	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.010217	68		pla				pla 								; restore DVariablePtr
.010218	85 1e		sta $1e				sta 	DVariablePtr
.01021a	68		pla				pla 								; get and save that first token
.01021b	48		pha				pha
.01021c	29 00 20	and #$2000			and 	#$2000 						; is it a string ?
.01021f	d0 02		bne $010223			bne 	_VANNotString  				; if not, i.e. it is an integeer
.010221	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.010223					_VANNotString
.010223	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.010225	18		clc				clc 								; add 2 to get it past the high subscript
.010226	69 02 00	adc #$0002			adc 	#2
.010229	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01022b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01022d					_VANNotArray:
.01022d	68		pla				pla 								; get the token back.
.01022e	29 00 20	and #$2000			and 	#$2000 						; this is the integer/string bit. $2000 if string, $0000 if int
.010231	49 00 20	eor #$2000			eor 	#$2000 						; now $0000 if string, $2000 if integer.
.010234	38		sec				sec 								; set up return string.
.010235	f0 06		beq $01023d			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010237	18		clc				clc 								; returning a number, read high data word
.010238	a0 02 00	ldy #$0002			ldy 	#2
.01023b	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01023d					_VANLoadLower:
.01023d	a8		tay				tay 								; put A into Y (this is the high byte)
.01023e	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010240	60		rts				rts
.010241					_VANError:
.010241	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010244	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01024c	20 75 6e 6b 6e 6f 77 6e 00
.010255					_VANSubscript:
.010255	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010258	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010260	79 20 53 75 62 73 63 72 69 70 74 00
.01026c					VariableFind:
.01026c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01026e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010271	90 5c		bcc $0102cf			bcc 	_VFError
.010273	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010276	b0 11		bcs $010289			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010278	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01027b	3a		dec a				dec 	a 							; now 0-25
.01027c	0a		asl a				asl 	a 							; x 4 and clear carry
.01027d	0a		asl a				asl 	a
.01027e	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010281	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010283	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010285	e6 06		inc $06				inc 	DCodePtr
.010287	38		sec				sec 								; return with carry set.
.010288	60		rts				rts
.010289					_VFSlowVariable:
.010289	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01028b	29 00 30	and #$3000			and 	#$3000 						; get the type bits out --xx ---- ---- ----
.01028e	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01028f	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010290	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010293	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010295	85 08		sta $08				sta 	DTemp1
.010297	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010299	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01029c	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01029d	65 08		adc $08				adc 	DTemp1
.01029f	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102a1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102a3					_VFNext:
.0102a3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102a5	f0 26		beq $0102cd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102a7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102a9	a8		tay				tay 								; read the address of the name at $0002,y
.0102aa	b9 02 00	lda $0002,y			lda 	$0002,y
.0102ad	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102af	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102b2					_VFCompare:
.0102b2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102b4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102b6	d0 eb		bne $0102a3			bne 	_VFNext 					; if not, go to the next one.
.0102b8	c8		iny				iny 								; advance token pointer
.0102b9	c8		iny				iny
.0102ba	29 00 08	and #$0800			and 	#$0800 						; if continuation bit set, keep going
.0102bd	d0 f3		bne $0102b2			bne 	_VFCompare
.0102bf	98		tya				tya 								; this is the length of the word.
.0102c0	18		clc				clc 								; so we add it to the code pointer
.0102c1	65 06		adc $06				adc 	DCodePtr
.0102c3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102c5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102c7	18		clc				clc 								; four on is the actual data
.0102c8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102cb	38		sec				sec 								; return with CS indicating success
.0102cc	60		rts				rts
.0102cd					_VFFail:
.0102cd	18		clc				clc
.0102ce	60		rts				rts
.0102cf					_VFError:
.0102cf	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102d2	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102da	76 61 72 69 61 62 6c 65 00
.0102e3					VariableCreate:
.0102e3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.0102e4					ErrorHandler:
.0102e4	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0102e6	fa		plx				plx 								; address of error message -1
.0102e7	ea		nop				nop
.0102e8	80 fe		bra $0102e8	_EH1:	bra 	_EH1
.0102ea					IllegalToken:
.0102ea	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102ed	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0102f5	54 6f 6b 65 6e 00
.0102fb					SyntaxError:
.0102fb	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102fe	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010306	72 72 6f 72 00
.01030b					ExpectToken:
.01030b	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01030d	d0 05		bne $010314			bne 	_CTKError					; error if not
.01030f	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010311	e6 06		inc $06				inc 	DCodePtr
.010313	60		rts				rts
.010314					_CTKError:
.010314	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010317	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01031f	74 6f 6b 65 6e 00
.010325					ExpectRightBracket:
.010325	48		pha				pha
.010326	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010329	20 0b 03	jsr $01030b			jsr 	ExpectToken
.01032c	68		pla				pla
.01032d	60		rts				rts
.01032e					ExpectComma:
.01032e	48		pha				pha
.01032f	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010332	20 0b 03	jsr $01030b			jsr 	ExpectToken
.010335	68		pla				pla
.010336	60		rts				rts
.010337					CheckBothNumeric:
.010337	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010339	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01033b	30 01		bmi $01033e			bmi 	_CBNFail 					; need to both be zero in bit 15
.01033d	60		rts				rts
.01033e					_CBNFail:
.01033e	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010341	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010349	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010357					ResetTypeInteger:
.010357	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010359	29 ff 7f	and #$7fff			and 	#$7FFF
.01035c	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01035e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.01035f					StringTempAllocate:
.01035f	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010362	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010365	18		clc				clc 								; this adds one, for the length.
.010366	65 16		adc $16				adc 	DTempStringPointer
.010368	85 16		sta $16				sta 	DTempStringPointer
.01036a	48		pha				pha
.01036b	a9 00 00	lda #$0000			lda 	#$0000
.01036e	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010370	92 16		sta ($16)			sta		(DTempStringPointer)
.010372	c2 20		rep #$20			rep 	#$20
.010374	68		pla				pla
.010375	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010377	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010379	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01037b	60		rts				rts
.01037c					StringCreateCopy:
.01037c	a8		tay				tay 								; put pointer to string in Y
.01037d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010380	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010383	f0 17		beq $01039c			beq 	_SCCExit 					; do nothing if length zero.
.010385	da		phx				phx 								; save X and put the character count in X
.010386	aa		tax				tax
.010387	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010389					_SCCCopy:
.010389	c8		iny				iny 								; advance and read (first time skips length)
.01038a	b9 00 00	lda $0000,y			lda 	$0000,y
.01038d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01038f	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010391	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010393	1a		inc a				inc 	a
.010394	92 18		sta ($18)			sta 	(DStartTempString)
.010396	ca		dex				dex 								; do X times
.010397	d0 f0		bne $010389			bne 	_SCCCopy
.010399	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01039b	fa		plx				plx
.01039c					_SCCExit:
.01039c	60		rts				rts
.01039d					StringMakeConcrete:
.01039d	85 08		sta $08				sta 	DTemp1 						; source
.01039f	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0103a1	29 ff 00	and #$00ff			and 	#$00FF
.0103a4	48		pha				pha 								; save on stack.
.0103a5	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0103a8	18		clc				clc
.0103a9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0103ac	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0103ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0103b0	85 0c		sta $0c				sta 	DTemp2 						; target
.0103b2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0103b3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0103b5					_SMCLoop:
.0103b5	b1 08		lda ($08),y			lda 	(DTemp1),y
.0103b7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0103b9	88		dey				dey
.0103ba	10 f9		bpl $0103b5			bpl 	_SMCLoop
.0103bc	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0103be	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0103c0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0103c1					Binary_Add:
.0103c1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0103c3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0103c5	30 12		bmi $0103d9		bmi 	_BATypeError
.0103c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0103c9	30 3f		bmi $01040a		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0103cb	18		clc			clc
.0103cc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103ce	75 02		adc $02,x		adc 	EXSValueL+2,x
.0103d0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103d2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103d4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0103d6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103d8	60		rts			rts
.0103d9					_BATypeError:
.0103d9	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103dc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0103e4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0103f4	65 73 00
.0103f7					_BALengthError:
.0103f7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103fa	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010402	6f 6f 20 6c 6f 6e 67 00
.01040a					_BAConcatenateString:
.01040a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01040c	85 08		sta $08			sta 	DTemp1
.01040e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010410	85 0c		sta $0c			sta 	DTemp2
.010412	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010414	18		clc			clc 										; work out the total length
.010415	b2 08		lda ($08)		lda 	(DTemp1)
.010417	72 0c		adc ($0c)		adc 	(DTemp2)
.010419	b0 14		bcs $01042f		bcs 	_BAConcatLengthError 				; string is too long.
.01041b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01041d	20 5f 03	jsr $01035f		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010420	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010422	74 10		stz $10,x		stz 	EXSValueH+0,x
.010424	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010426	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.010429	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01042b	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.01042e	60		rts			rts
.01042f					_BAConcatLengthError:
.01042f	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010432	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01043a	6f 6f 20 6c 6f 6e 67 00
.010442					Binary_Subtract:
.010442	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010445	38		sec			sec
.010446	b5 00		lda $00,x		lda		EXSValueL+0,x
.010448	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01044a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01044c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01044e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010450	95 10		sta $10,x		sta 	EXSValueH+0,x
.010452	60		rts			rts
.010453					Binary_ShiftRight:
.010453	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010456	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010458	29 3f 00	and #$003f		and 	#63
.01045b	f0 07		beq $010464		beq		_Binary_SRExit
.01045d					_Binary_SRLoop:
.01045d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01045f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010461	3a		dec a			dec 	a
.010462	d0 f9		bne $01045d		bne 	_Binary_SRLoop
.010464					_Binary_SRExit:
.010464	60		rts			rts
.010465					Binary_ShiftLeft:
.010465	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010468	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01046a	29 3f 00	and #$003f		and 	#63
.01046d	f0 07		beq $010476		beq		_Binary_SLExit
.01046f					_Binary_SLLoop:
.01046f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010471	36 10		rol $10,x		rol 	EXSValueH+0,x
.010473	3a		dec a			dec 	a
.010474	d0 f9		bne $01046f		bne 	_Binary_SLLoop
.010476					_Binary_SLExit:
.010476	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010477					Binary_And:
.010477	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01047a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01047c	35 02		and $02,x		and 	EXSValueL+2,x
.01047e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010480	b5 10		lda $10,x		lda		EXSValueH+0,x
.010482	35 12		and $12,x		and 	EXSValueH+2,x
.010484	95 10		sta $10,x		sta 	EXSValueH+0,x
.010486	60		rts			rts
.010487					Binary_Or:
.010487	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01048a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01048c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01048e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010490	b5 10		lda $10,x		lda		EXSValueH+0,x
.010492	15 12		ora $12,x		ora 	EXSValueH+2,x
.010494	95 10		sta $10,x		sta 	EXSValueH+0,x
.010496	60		rts			rts
.010497					Binary_Xor:
.010497	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01049a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01049c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01049e	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104a0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104a2	55 12		eor $12,x		eor 	EXSValueH+2,x
.0104a4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104a6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0104a7					Binary_Equals:
.0104a7	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104aa	b0 0e		bcs $0104ba		bcs 	_BEString
.0104ac	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104ae	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104b0	d0 4f		bne $010501		bne 	Compare_Fail
.0104b2	b5 10		lda $10,x		lda 	EXSValueH,x
.0104b4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104b6	d0 49		bne $010501		bne 	Compare_Fail
.0104b8	80 3f		bra $0104f9		bra 	Compare_Succeed
.0104ba					_BEString:
.0104ba	09 00 00	ora #$0000		ora 	#$0000
.0104bd	f0 3a		beq $0104f9		beq 	Compare_Succeed
.0104bf	80 40		bra $010501		bra 	Compare_Fail
.0104c1					Binary_NotEquals:
.0104c1	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104c4	b0 0e		bcs $0104d4		bcs 	_BNEString
.0104c6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104c8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104ca	d0 2d		bne $0104f9		bne 	Compare_Succeed
.0104cc	b5 10		lda $10,x		lda 	EXSValueH,x
.0104ce	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104d0	d0 27		bne $0104f9		bne 	Compare_Succeed
.0104d2	80 2d		bra $010501		bra 	Compare_Fail
.0104d4					_BNEString:
.0104d4	09 00 00	ora #$0000		ora 	#$0000
.0104d7	d0 20		bne $0104f9		bne 	Compare_Succeed
.0104d9	80 26		bra $010501		bra 	Compare_Fail
.0104db					Binary_Less:
.0104db	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104de	b0 12		bcs $0104f2		bcs 	_BLString
.0104e0	38		sec			sec
.0104e1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0104e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104e5	b5 10		lda $10,x		lda 	EXSValueH,x
.0104e7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e9	50 03		bvc $0104ee		bvc 	*+5
.0104eb	49 00 80	eor #$8000		eor 	#$8000
.0104ee	30 09		bmi $0104f9		bmi 	Compare_Succeed
.0104f0	80 0f		bra $010501		bra 	Compare_Fail
.0104f2					_BLString:
.0104f2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0104f5	f0 02		beq $0104f9		beq 	Compare_Succeed
.0104f7	80 08		bra $010501		bra 	Compare_Fail
.0104f9					Compare_Succeed:
.0104f9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0104fc	95 00		sta $00,x		sta 	EXSValueL,x
.0104fe	95 10		sta $10,x		sta 	EXSValueH,x
.010500	60		rts			rts
.010501					Compare_Fail:
.010501	74 00		stz $00,x		stz 	EXSValueL,x
.010503	74 10		stz $10,x		stz 	EXSValueH,x
.010505	60		rts			rts
.010506					Binary_GreaterEqual:
.010506	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010509	b0 12		bcs $01051d		bcs 	_BGEString
.01050b	38		sec			sec
.01050c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01050e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010510	b5 10		lda $10,x		lda 	EXSValueH,x
.010512	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010514	50 03		bvc $010519		bvc 	*+5
.010516	49 00 80	eor #$8000		eor 	#$8000
.010519	10 de		bpl $0104f9		bpl 	Compare_Succeed
.01051b	80 e4		bra $010501		bra 	Compare_Fail
.01051d					_BGEString:
.01051d	09 00 00	ora #$0000		ora 	#$0000
.010520	10 d7		bpl $0104f9		bpl 	Compare_Succeed
.010522	80 dd		bra $010501		bra 	Compare_Fail
.010524					Binary_LessEqual:
.010524	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010527	b0 12		bcs $01053b		bcs 	_BLEString
.010529	18		clc			clc 									; numeric <= signed
.01052a	b5 00		lda $00,x		lda 	EXSValueL,x
.01052c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01052e	b5 10		lda $10,x		lda 	EXSValueH,x
.010530	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010532	50 03		bvc $010537		bvc 	*+5
.010534	49 00 80	eor #$8000		eor 	#$8000
.010537	30 c0		bmi $0104f9		bmi 	Compare_Succeed
.010539	80 c6		bra $010501		bra 	Compare_Fail
.01053b					_BLEString:
.01053b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01053e	d0 b9		bne $0104f9		bne 	Compare_Succeed
.010540	80 bf		bra $010501		bra 	Compare_Fail
.010542					Binary_Greater:
.010542	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010545	b0 12		bcs $010559		bcs 	_BGString
.010547	18		clc			clc 									; numeric > signed
.010548	b5 00		lda $00,x		lda 	EXSValueL,x
.01054a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01054c	b5 10		lda $10,x		lda 	EXSValueH,x
.01054e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010550	50 03		bvc $010555		bvc 	*+5
.010552	49 00 80	eor #$8000		eor 	#$8000
.010555	10 a2		bpl $0104f9		bpl 	Compare_Succeed
.010557	80 a8		bra $010501		bra 	Compare_Fail
.010559					_BGString:
.010559	c9 01 00	cmp #$0001		cmp 	#$0001
.01055c	f0 9b		beq $0104f9		beq 	Compare_Succeed
.01055e	80 a1		bra $010501		bra 	Compare_Fail
.010560					CompareTypeCheck:
.010560	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010562	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010564	30 06		bmi $01056c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010566	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010568	30 1c		bmi $010586		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01056a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01056b	60		rts			rts
.01056c					_CTCFail:
.01056c	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>01056f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010577	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010586					_CTCStringCompare:
.010586	20 57 03	jsr $010357		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010589	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01058b	85 08		sta $08			sta 	DTemp1
.01058d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01058f	85 0c		sta $0c			sta 	DTemp2
.010591	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010594	a8		tay			tay
.010595	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010597	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010599	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01059b	90 02		bcc $01059f		bcc 	_CTCSmallest
.01059d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01059f					_CTCSmallest:
.01059f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0105a1					_CTCCompare:
.0105a1	c8		iny			iny 									; look at next character (done first, first char is size)
.0105a2	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0105a4	30 16		bmi $0105bc		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0105a6	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0105a8	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0105aa	f0 f5		beq $0105a1		beq 	_CTCCompare 					; if zero, try the next character.
.0105ac	b0 07		bcs $0105b5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0105ae					_CTCLess:
.0105ae	c2 20		rep #$20		rep 	#$20
.0105b0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0105b3	80 14		bra $0105c9		bra 	_CTCExit
.0105b5					_CTCGreater:
.0105b5	c2 20		rep #$20		rep 	#$20
.0105b7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0105ba	80 0d		bra $0105c9		bra 	_CTCExit
.0105bc					_CTCEqualSoFar:
.0105bc	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0105be	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0105c0	90 ec		bcc $0105ae		bcc 	_CTCLess
.0105c2	d0 f1		bne $0105b5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0105c4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0105c6	a9 00 00	lda #$0000		lda 	#$0000
.0105c9					_CTCExit:
.0105c9	38		sec			sec 									; return with CS indicating string comparison.
.0105ca	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0105cb					Binary_Divide:
.0105cb	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.0105ce	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0105d0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0105d2	d0 14		bne $0105e8		bne 	_BinaryDivide_Ok
.0105d4	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0105d7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0105df	20 62 79 20 7a 65 72 6f 00
.0105e8					_BinaryDivide_Ok:
.0105e8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0105ea	64 0a		stz $0a			stz 	DTemp1+2
.0105ec	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0105ee	5a		phy			phy 										; save Y (bit counter)
.0105ef	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0105f1	10 07		bpl $0105fa		bpl 	_BinaryDivide_RightDone
.0105f3	e8		inx			inx
.0105f4	e8		inx			inx
.0105f5	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.0105f8	ca		dex			dex
.0105f9	ca		dex			dex
.0105fa					_BinaryDivide_RightDone:
.0105fa	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0105fc	10 03		bpl $010601		bpl 	_BinaryDivide_LeftDone
.0105fe	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.010601					_BinaryDivide_LeftDone:
.010601	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010604					_BinaryDivide_Loop:
.010604	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010606	36 10		rol $10,x		rol 	EXSValueH+0,x
.010608	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01060a	26 0a		rol $0a			rol 	DTemp1+2
.01060c	38		sec			sec											; calculate A-M
.01060d	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01060f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010611	85 0c		sta $0c			sta 	DTemp2
.010613	a5 0a		lda $0a			lda 	DTemp1+2
.010615	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010617	90 08		bcc $010621		bcc 	_Binary_NoSubract 					; if A < M skip this
.010619	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01061b	a5 0c		lda $0c			lda 	DTemp2
.01061d	85 08		sta $08			sta 	DTemp1+0
.01061f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010621					_Binary_NoSubract:
.010621	88		dey			dey 										; do it 32 times.
.010622	d0 e0		bne $010604		bne 	_BinaryDivide_Loop
.010624					_BinaryDivide_Exit:
.010624	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010626	29 01 00	and #$0001		and 	#1
.010629	f0 03		beq $01062e		beq 	_BinaryDivide_Exit2
.01062b	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.01062e					_BinaryDivide_Exit2:
.01062e	7a		ply			ply 										; restore Y
.01062f	60		rts			rts
.010630					Binary_DivNegate:
.010630	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010632	38		sec			sec 										; negate the value at stack X.
.010633	a9 00 00	lda #$0000		lda 	#$0000
.010636	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010638	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063a	a9 00 00	lda #$0000		lda 	#$0000
.01063d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01063f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010641	60		rts			rts
.010642					Binary_Modulus:
.010642	20 cb 05	jsr $0105cb		jsr 	Binary_Divide 						; do the divide
.010645	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010647	95 00		sta $00,x		sta 	EXSValueL+0,x
.010649	a5 0a		lda $0a			lda 	DTemp1+2
.01064b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01064d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01064e					Binary_Multiply:
.01064e	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010651	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010653	85 08		sta $08			sta 	DTemp1
.010655	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010657	85 0a		sta $0a			sta		DTemp1+2
.010659	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01065b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01065d					_BinaryMultiply_Loop:
.01065d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01065f	05 0a		ora $0a			ora 	DTemp1+2
.010661	f0 1e		beq $010681		beq 	_BinaryMultiply_Exit
.010663	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010665	29 01 00	and #$0001		and 	#1
.010668	f0 0d		beq $010677		beq 	_BinaryMultiply_NoAdd
.01066a	18		clc			clc 										; add multiplicand to result.
.01066b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01066d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01066f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010671	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010673	75 12		adc $12,x		adc 	EXSValueH+2,x
.010675	95 10		sta $10,x		sta 	EXSValueH+0,x
.010677					_BinaryMultiply_NoAdd:
.010677	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010679	66 08		ror $08			ror 	DTemp1
.01067b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01067d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01067f	80 dc		bra $01065d		bra 	_BinaryMultiply_Loop 				; go round again.
.010681					_BinaryMultiply_Exit:
.010681	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010682					Function_Len:
.010682	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.010685	20 e9 01	jsr $0101e9			jsr 	EvaluateNextString 			; get the value you are absoluting
.010688	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.01068b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01068d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010690	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010693	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010695	74 10		stz $10,x			stz 	EXSValueH+0,x
.010697	60		rts				rts
.010698					Function_Abs:
.010698	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.01069b	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01069e	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106a1	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0106a3	30 07		bmi $0106ac			bmi 	_FAbsNegative 				; negate it if negative
.0106a5	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0106a7	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0106a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106ab	60		rts				rts
.0106ac					_FAbsNegative:
.0106ac	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0106ad	a9 00 00	lda #$0000			lda 	#0
.0106b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0106b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106b4	a9 00 00	lda #$0000			lda 	#0
.0106b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0106b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106bb	60		rts				rts
.0106bc					Function_Sgn:
.0106bc	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns integer
.0106bf	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get an integer
.0106c2	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106c5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0106c7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0106c9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0106cb	30 07		bmi $0106d4			bmi 	_FSgnNegative 				; set to -1 if signed
.0106cd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0106cf	f0 02		beq $0106d3			beq 	_FSgnExit
.0106d1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0106d3					_FSgnExit:
.0106d3	60		rts				rts
.0106d4					_FSgnNegative:
.0106d4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0106d7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106d9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106db	60		rts				rts
.0106dc					Function_Random:
.0106dc	20 57 03	jsr $010357			jsr 	ResetTypeInteger
.0106df	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0106e1	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0106e3	d0 0a		bne $0106ef			bne 	_Rnd_NotZero
.0106e5	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0106e8	85 10		sta $10				sta 	DRandom
.0106ea	a9 ea 00	lda #$00ea			lda 	#$EA
.0106ed	85 12		sta $12				sta 	DRandom+2
.0106ef					_Rnd_NotZero:
.0106ef	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process 				; call randomiser twice
.0106f2	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106f4	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process
.0106f7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106f9	60		rts				rts
.0106fa					_Rnd_Process:
.0106fa	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0106fc	26 12		rol $12				rol 	DRandom+2
.0106fe	90 0e		bcc $01070e			bcc 	_Rnd_Exit
.010700	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010702	49 54 d4	eor #$d454			eor 	#$D454
.010705	85 10		sta $10				sta 	DRandom
.010707	a5 12		lda $12				lda 	DRandom+2
.010709	49 d5 55	eor #$55d5			eor 	#$55D5
.01070c	85 12		sta $12				sta 	DRandom+2
.01070e					_Rnd_Exit:
.01070e	a5 10		lda $10				lda 	DRandom
.010710	45 12		eor $12				eor 	DRandom+2
.010712	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010713					Function_ASSERT:
.010713	20 b1 01	jsr $0101b1			jsr 	EvaluateInteger 			; something that returns an integer.
.010716	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010718	05 08		ora $08				ora 	Dtemp1
.01071a	f0 01		beq $01071d			beq 	_FAssFail
.01071c	60		rts				rts
.01071d					_FAssFail:
.01071d	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010720	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010728	61 69 6c 65 64 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.01072e					Function_Let:
.01072e	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.01072f					Function_END:
.01072f	02 00		cop #$00			cop 	#0
.010731					Function_RUN:
.010731	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010733	18		clc				clc
.010734	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010737					_FRun_NextLineNumber:
.010737	a8		tay				tay 								; put in Y
.010738	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01073b	f0 f2		beq $01072f			beq 	Function_END 				; if zero, off the end of the program
.01073d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010740	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010742	98		tya				tya 								; get address back
.010743	18		clc				clc 								; skip over the link/line number
.010744	69 04 00	adc #$0004			adc 	#4
.010747	85 06		sta $06				sta 	DCodePtr
.010749					_FRun_NextInstruction:
.010749	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.01074c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01074e	38		sec				sec
.01074f	e9 00 01	sbc #$0100			sbc 	#256
.010752	85 16		sta $16				sta 	DTempStringPointer
.010754	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010756	f0 28		beq $010780			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010758	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.01075b	f0 18		beq $010775			beq 	_FRun_Colon
.01075d	a8		tay				tay 								; save in Y
.01075e	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 001x
.010761	c9 00 20	cmp #$2000			cmp 	#$2000
.010764	d0 15		bne $01077b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010766	98		tya				tya 								; get token back
.010767	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01076a	0a		asl a				asl 	a 							; double it into X
.01076b	aa		tax				tax
.01076c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01076e	e6 06		inc $06				inc 	DCodePtr
.010770	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010773	80 d4		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.010775					_FRun_Colon:
.010775	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010777	e6 06		inc $06				inc 	DCodePtr
.010779	80 ce		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.01077b					_FRun_TryLET:
.01077b	20 2e 07	jsr $01072e			jsr 	Function_LET 				; try as a LET.
.01077e	80 c9		bra $010749			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010780					_FRun_EndInstruction:
.010780	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010782	1a		inc a				inc 	a 							; go to link for next line
.010783	1a		inc a				inc 	a
.010784	80 b1		bra $010737			bra 	_FRun_NextLineNumber

;******  Return to file: ../source/basic.asm

.010786					SwitchBasicInstance:
.010786	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010788	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01078b	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01078d	86 02		stx $02				stx		DBaseAddress
.01078f	84 04		sty $04				sty 	DHighAddress
.010791	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010792	48		pha				pha 										; then copy it into B.
.010793	ab		plb				plb
.010794	ab		plb				plb
.010795	4c 31 07	jmp $010731			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	46 b1 98 bd 00 00 00 00 99 8d ff ff 7e ae ff ff
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024028	00 00 00 00 00 00 00 00 00 00 00 00 b7 ff ff ff
>024038	e9 c8 00 00 fd ff ff ff 00 00 00 00 e0 ff ff ff
>024048	57 6c fc ff 00 00 00 00 00 00 00 00 00 00 00 00
>024058	00 00 00 00 70 1b 00 00 52 00 00 00 00 00 00 00
>024068	f3 ff ff ff 25 2a 03 00 09 00 00 00 00 00 00 00
>024078	00 00 00 00 00 00 00 00 c2 b0 20 b0 e6 ac 3a af
>024088	ae af d0 af 7e b0 90 ae ec b0 24 b1 00 ad 84 ad
>024098	3e b0 d8 a6 0c ae 9c b0 50 ac 64 b0 86 b0 7e af
>0240a8	48 ae 1c af 2c b1 02 af a4 b0 ca b0 46 b0 66 ac
>0240b8	42 af 98 ae b6 af 0e b1 00 00 00 00 00 00 00 00
>0240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2 times (32 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1c 00 01 00 1b 3e 18 32
>024108	03 10 29 74 0b 24 0b 24 84 bf 19 32 06 22 04 10
>024118	ad 73 00 00 1a 00 02 00 1b 3e 18 32 0b 24 0d 40
>024128	0b 24 44 40 19 32 06 22 0b 24 51 40 00 00 1c 00
>024138	03 00 1b 3e 18 32 05 10 11 7c 0a 24 0b 24 37 40
>024148	19 32 06 22 05 10 da 7b 00 00 18 00 04 00 1b 3e
>024158	18 32 76 c5 01 20 0b 24 52 40 19 32 06 22 0c 40
>024168	00 00 1c 00 05 00 1b 3e 18 32 0b cb 19 c0 0a 24
>024178	06 10 ac a0 19 32 06 22 0b 10 84 86 00 00 1e 00
>024188	06 00 1b 3e 18 32 07 d0 03 40 19 32 0a 24 70 c9
>024198	05 c0 19 32 06 22 01 10 3d 71 00 00 24 00 07 00
>0241a8	1b 3e 18 32 0b 24 03 10 78 bb 03 20 da d9 fb d3
>0241b8	00 40 19 32 19 32 06 22 0b 24 03 10 64 bb 00 00
>0241c8	20 00 08 00 1b 3e 18 32 07 10 87 5e 03 20 0b 24
>0241d8	05 10 4f 8d 19 32 06 22 0b 24 02 10 ca 93 00 00
>0241e8	18 00 09 00 1b 3e 18 32 95 c3 02 20 04 40 19 32
>0241f8	06 22 07 10 75 68 00 00 1a 00 0a 00 1b 3e 18 32
>024208	2e c6 0d 26 fc c9 12 c0 19 32 06 22 0b 24 81 54
>024218	00 00 1c 00 0b 00 1b 3e 18 32 0b 24 20 40 0a 24
>024228	02 10 de 5c 19 32 06 22 02 10 be 5c 00 00 1e 00
>024238	0c 00 1b 3e 18 32 0b 24 5d 40 0c 26 04 10 5c a1
>024248	19 32 06 22 0b 24 ba 11 6c 9e 00 00 1e 00 0d 00
>024258	1b 3e 18 32 da c9 23 c0 01 20 e3 d3 02 40 19 32
>024268	19 32 06 22 04 10 00 56 00 00 1a 00 0e 00 1b 3e
>024278	18 32 0a 40 03 20 26 cd c9 c3 19 32 06 22 03 10
>024288	26 b8 00 00 1e 00 0f 00 1b 3e 18 32 e4 d5 06 40
>024298	19 32 02 20 0b 24 33 44 19 32 06 22 0b 24 13 44
>0242a8	00 00 24 00 10 00 1b 3e 18 32 11 de 1f d0 03 40
>0242b8	19 32 02 20 03 d0 00 40 19 32 19 32 06 22 0b 24
>0242c8	02 10 35 53 00 00 24 00 11 00 1b 3e 18 32 da d9
>0242d8	fb d3 03 40 19 32 0a 24 18 d1 02 40 19 32 19 32
>0242e8	06 22 0b 24 01 10 b8 80 00 00 24 00 12 00 1b 3e
>0242f8	18 32 70 d8 04 d3 03 40 19 32 0a 24 0b 24 01 10
>024308	23 a6 19 32 06 22 0b 24 06 10 31 8f 00 00 20 00
>024318	13 00 1b 3e 18 32 41 de b8 d0 01 40 19 32 01 20
>024328	3f c3 19 32 06 22 0b 24 05 10 5e 95 00 00 1e 00
>024338	14 00 1b 3e 18 32 36 cb 97 c3 02 20 62 d6 01 40
>024348	19 32 19 32 06 22 0b 24 31 40 00 00 1e 00 15 00
>024358	1b 3e 18 32 0b 24 60 40 02 20 0b 24 05 10 80 b9
>024368	19 32 06 22 0b 24 60 40 00 00 1e 00 16 00 1b 3e
>024378	18 32 0b 24 02 10 8a bd 03 20 0b 24 02 10 49 44
>024388	19 32 06 22 c1 b9 00 00 1c 00 17 00 1b 3e 18 32
>024398	01 10 04 5c 0d 26 71 d0 06 40 19 32 19 32 06 22
>0243a8	00 40 00 00 1e 00 18 00 1b 3e 18 32 0a ce 7f c4
>0243b8	03 20 08 d0 01 40 19 32 19 32 06 22 06 10 20 bc
>0243c8	00 00 1c 00 19 00 1b 3e 18 32 58 40 03 20 90 cb
>0243d8	5d c0 19 32 06 22 0b 24 01 10 33 4f 00 00 1a 00
>0243e8	1a 00 1b 3e 18 32 01 10 48 73 02 20 5b 40 19 32
>0243f8	06 22 01 10 5b 73 00 00 1e 00 1b 00 1b 3e 18 32
>024408	0b 24 01 10 6b 4f 0c 26 0b 24 20 40 19 32 06 22
>024418	23 10 60 ad 00 00 18 00 1c 00 1b 3e 18 32 0f c0
>024428	01 20 01 10 92 88 19 32 06 22 12 88 00 00 1a 00
>024438	1d 00 1b 3e 18 32 6c a6 03 20 01 10 f6 7d 19 32
>024448	06 22 01 10 9a 9b 00 00 1c 00 1e 00 1b 3e 18 32
>024458	14 de ad d2 03 40 19 32 03 20 25 40 19 32 06 22
>024468	7d 40 00 00 1e 00 1f 00 1b 3e 18 32 9d d4 00 40
>024478	19 32 0b 24 87 d2 01 40 19 32 19 32 06 22 0a 40
>024488	00 00 16 00 20 00 1b 3e 18 32 1f 40 02 20 2d 40
>024498	19 32 06 22 3f 40 00 00 22 00 21 00 1b 3e 18 32
>0244a8	0b 24 07 10 b5 7d 0a 24 0d d0 01 40 19 32 19 32
>0244b8	06 22 0b 24 06 10 5e 75 00 00 22 00 22 00 1b 3e
>0244c8	18 32 0b cb 19 c0 03 20 50 dd 69 d3 00 40 19 32
>0244d8	19 32 06 22 0b 24 04 10 4c 69 00 00 16 00 23 00
>0244e8	1b 3e 18 32 fb 84 0a 24 87 c3 19 32 06 22 c3 84
>0244f8	00 00 20 00 24 00 1b 3e 18 32 0b 24 02 10 62 43
>024508	0d 26 0d d0 01 40 19 32 19 32 06 22 0b 24 01 40
>024518	00 00 1e 00 25 00 1b 3e 18 32 0b 24 20 40 02 20
>024528	78 d4 02 40 19 32 19 32 06 22 0b 24 05 40 00 00
>024538	16 00 26 00 1b 3e 18 32 0a 40 03 20 ad 96 19 32
>024548	06 22 a7 96 00 00 1a 00 27 00 1b 3e 18 32 51 40
>024558	0c 26 d9 cd 74 c5 19 32 06 22 b9 11 4e 43 00 00
>024568	20 00 28 00 1b 3e 18 32 c8 c8 74 c3 02 20 4d dd
>024578	1c d0 02 40 19 32 19 32 06 22 06 10 5d 7e 00 00
>024588	1c 00 29 00 1b 3e 18 32 0b 24 04 40 02 20 02 10
>024598	b7 64 19 32 06 22 0b 24 01 40 00 00 20 00 2a 00
>0245a8	1b 3e 18 32 fe dc 1d d5 01 40 19 32 01 20 0b 24
>0245b8	01 10 b0 90 19 32 06 22 00 40 00 00 20 00 2b 00
>0245c8	1b 3e 18 32 3a d6 02 40 19 32 01 20 14 de ad d2
>0245d8	00 40 19 32 19 32 06 22 e0 44 00 00 1c 00 2c 00
>0245e8	1b 3e 18 32 76 c5 03 20 34 ce 42 c4 19 32 06 22
>0245f8	0b 24 02 10 2a 7a 00 00 1c 00 2d 00 1b 3e 18 32
>024608	a6 da 98 d4 03 40 19 32 03 20 e7 ad 19 32 06 22
>024618	af ad 00 00 1c 00 2e 00 1b 3e 18 32 fc d4 01 40
>024628	19 32 0d 26 94 cc 06 c0 19 32 06 22 00 40 00 00
>024638	1a 00 2f 00 1b 3e 18 32 06 cd 0a c0 02 20 3f c3
>024648	19 32 06 22 0b 24 19 40 00 00 1e 00 30 00 1b 3e
>024658	18 32 0b 24 04 10 86 7b 03 20 0b 24 5e 40 19 32
>024668	06 22 04 10 d8 7b 00 00 1e 00 31 00 1b 3e 18 32
>024678	0b 24 06 10 ae 5e 03 20 41 40 19 32 06 22 0b 24
>024688	06 10 ed 5e 00 00 1e 00 32 00 1b 3e 18 32 e9 d8
>024698	02 d0 02 40 19 32 02 20 02 c6 19 32 06 22 0b 24
>0246a8	0c 40 00 00 20 00 33 00 1b 3e 18 32 23 dc 05 d0
>0246b8	00 40 19 32 03 20 01 10 48 73 19 32 06 22 01 10
>0246c8	c4 ab 00 00 1e 00 34 00 1b 3e 18 32 12 d6 01 40
>0246d8	19 32 0a 24 05 10 61 a3 19 32 06 22 05 10 56 a3
>0246e8	00 00 1e 00 35 00 1b 3e 18 32 13 d0 01 40 19 32
>0246f8	0a 24 07 10 87 5e 19 32 06 22 07 10 54 5a 00 00
>024708	1a 00 36 00 1b 3e 18 32 12 40 01 20 0b 24 05 10
>024718	5d a9 19 32 06 22 02 40 00 00 1a 00 37 00 1b 3e
>024728	18 32 03 10 16 52 0d 26 04 10 03 72 19 32 06 22
>024738	00 40 00 00 1c 00 38 00 1b 3e 18 32 02 10 67 a3
>024748	0c 26 63 ca d6 c5 19 32 06 22 e3 10 fe 96 00 00
>024758	1e 00 39 00 1b 3e 18 32 24 cc 2b c3 0b 24 07 10
>024768	7b 8f 19 32 06 22 0b 24 0b 10 99 97 00 00 1c 00
>024778	3a 00 1b 3e 18 32 0a ce 7f c4 01 20 11 d0 00 40
>024788	19 32 19 32 06 22 00 40 00 00 1c 00 3b 00 1b 3e
>024798	18 32 01 10 57 7c 0d 26 0b 24 38 40 19 32 06 22
>0247a8	0b 24 5c 43 00 00 26 00 3c 00 1b 3e 18 32 41 de
>0247b8	b8 d0 04 40 19 32 02 20 46 d8 17 d0 00 40 19 32
>0247c8	19 32 06 22 0b 24 04 10 11 90 00 00 1e 00 3d 00
>0247d8	1b 3e 18 32 0b 24 4a 40 01 20 34 ce 42 c4 19 32
>0247e8	06 22 0b 24 02 10 7e 7a 00 00 1e 00 3e 00 1b 3e
>0247f8	18 32 0b 24 68 6a 0b 24 01 10 74 49 19 32 06 22
>024808	0b 24 01 10 dc 73 00 00 20 00 3f 00 1b 3e 18 32
>024818	0b 24 68 6a 01 20 c0 db 15 d0 05 40 19 32 19 32
>024828	06 22 0b 24 78 6a 00 00 1c 00 40 00 1b 3e 18 32
>024838	9f d4 03 40 19 32 03 20 02 40 19 32 06 22 06 10
>024848	bc 8a 00 00 18 00 41 00 1b 3e 18 32 30 c6 0c 26
>024858	02 c6 19 32 06 22 38 10 b8 9e 00 00 18 00 42 00
>024868	1b 3e 18 32 02 10 67 a3 0d 26 4f 40 19 32 06 22
>024878	7f 44 00 00 22 00 43 00 1b 3e 18 32 4c ca 5d c6
>024888	0a 24 e3 da 0f d6 06 40 19 32 19 32 06 22 0b 24
>024898	01 10 b1 54 00 00 20 00 44 00 1b 3e 18 32 0b cb
>0248a8	19 c0 03 20 0b 24 07 10 71 47 19 32 06 22 0b 24
>0248b8	03 10 a9 a2 00 00 24 00 45 00 1b 3e 18 32 e5 dd
>0248c8	24 d0 06 40 19 32 03 20 7a d4 00 40 19 32 19 32
>0248d8	06 22 0b 24 02 10 75 b5 00 00 1c 00 46 00 1b 3e
>0248e8	18 32 03 10 29 74 0d 26 0b 24 05 10 e7 5d 19 32
>0248f8	06 22 00 40 00 00 1c 00 47 00 1b 3e 18 32 12 d0
>024908	03 40 19 32 03 20 0b 24 03 40 19 32 06 22 5c 40
>024918	00 00 20 00 48 00 1b 3e 18 32 01 10 4a 88 01 20
>024928	ff dc 0b d0 00 40 19 32 19 32 06 22 01 10 40 48
>024938	00 00 18 00 49 00 1b 3e 18 32 01 c0 0d 26 ad 96
>024948	19 32 06 22 0b 24 01 40 00 00 1c 00 4a 00 1b 3e
>024958	18 32 0b 24 cb 90 0a 24 03 10 f6 6f 19 32 06 22
>024968	02 10 2b 9f 00 00 22 00 4b 00 1b 3e 18 32 b9 dd
>024978	1f d0 03 40 19 32 03 20 6b d4 00 40 19 32 19 32
>024988	06 22 04 10 ff 73 00 00 1e 00 4c 00 1b 3e 18 32
>024998	0b 24 5e 40 03 20 0b 24 06 10 8c 42 19 32 06 22
>0249a8	06 10 d6 42 00 00 1e 00 4d 00 1b 3e 18 32 0b 24
>0249b8	45 40 03 20 6b d4 01 40 19 32 19 32 06 22 0b 24
>0249c8	4e 40 00 00 1c 00 4e 00 1b 3e 18 32 af dd a7 d3
>0249d8	01 40 19 32 0d 26 30 c6 19 32 06 22 03 40 00 00
>0249e8	1c 00 4f 00 1b 3e 18 32 c8 c8 74 c3 03 20 70 c9
>0249f8	1b c0 19 32 06 22 04 10 cb a7 00 00 26 00 50 00
>024a08	1b 3e 18 32 17 d9 04 d1 01 40 19 32 03 20 42 d8
>024a18	17 d0 00 40 19 32 19 32 06 22 0b 24 03 10 b2 86
>024a28	00 00 20 00 51 00 1b 3e 18 32 70 c9 1b c0 03 20
>024a38	aa dd 40 d2 03 40 19 32 19 32 06 22 06 10 c8 8f
>024a48	00 00 1c 00 52 00 1b 3e 18 32 16 d0 04 40 19 32
>024a58	0c 26 61 40 19 32 06 22 8a 10 ff 59 00 00 22 00
>024a68	53 00 1b 3e 18 32 9a db 10 d2 01 40 19 32 0b 24
>024a78	87 ca 79 c2 19 32 06 22 0b 24 0a 10 e9 63 00 00
>024a88	18 00 54 00 1b 3e 18 32 17 c0 0d 26 01 10 92 88
>024a98	19 32 06 22 00 40 00 00 1a 00 55 00 1b 3e 18 32
>024aa8	a0 c9 04 c0 0d 26 0b 24 cb 90 19 32 06 22 00 40
>024ab8	00 00 26 00 56 00 1b 3e 18 32 b9 dd 1f d0 02 40
>024ac8	19 32 0b 24 e9 d8 02 d0 05 40 19 32 19 32 06 22
>024ad8	0b 24 01 10 ef 8a 00 00 1c 00 57 00 1b 3e 18 32
>024ae8	bc cb 24 c0 01 20 e3 d3 04 40 19 32 19 32 06 22
>024af8	05 40 00 00 18 00 58 00 1b 3e 18 32 02 10 b7 64
>024b08	01 20 0b 40 19 32 06 22 03 40 00 00 1e 00 59 00
>024b18	1b 3e 18 32 06 10 be 8a 0b 24 c6 d3 01 40 19 32
>024b28	19 32 06 22 06 10 ba a3 00 00 24 00 5a 00 1b 3e
>024b38	18 32 95 dc 20 d0 02 40 19 32 0a 24 2d dd 7c d2
>024b48	02 40 19 32 19 32 06 22 02 10 da ab 00 00 20 00
>024b58	5b 00 1b 3e 18 32 a7 c2 0b 24 6f db 35 d3 03 40
>024b68	19 32 19 32 06 22 0b 24 06 10 8e b8 00 00 20 00
>024b78	5c 00 1b 3e 18 32 78 d4 01 40 19 32 03 20 01 10
>024b88	57 45 19 32 06 22 0b 24 06 10 33 8d 00 00 1a 00
>024b98	5d 00 1b 3e 18 32 04 10 88 71 03 20 10 40 19 32
>024ba8	06 22 04 10 98 71 00 00 24 00 5e 00 1b 3e 18 32
>024bb8	0b 24 04 10 fe 77 03 20 e2 d8 97 d5 01 40 19 32
>024bc8	19 32 06 22 0b 24 04 10 cf 77 00 00 1e 00 5f 00
>024bd8	1b 3e 18 32 0b 24 05 10 80 b9 03 20 52 40 19 32
>024be8	06 22 0b 24 05 10 2e b9 00 00 24 00 60 00 1b 3e
>024bf8	18 32 a6 da 98 d4 03 40 19 32 02 20 55 d1 00 40
>024c08	19 32 19 32 06 22 0b 24 06 10 28 7e 00 00 22 00
>024c18	61 00 1b 3e 18 32 e8 db c4 d4 03 40 19 32 01 20
>024c28	0b 24 01 10 d2 8a 19 32 06 22 02 10 2e 50 00 00
>024c38	1a 00 62 00 1b 3e 18 32 06 40 02 20 32 cd 82 c5
>024c48	19 32 06 22 0b 24 2a 40 00 00 22 00 63 00 1b 3e
>024c58	18 32 fe dc 1d d5 02 40 19 32 03 20 05 10 f3 58
>024c68	19 32 06 22 0b 24 05 10 ec 58 00 00 1c 00 64 00
>024c78	1b 3e 18 32 0b 24 05 10 c8 90 0d 26 ce c9 7e c1
>024c88	19 32 06 22 00 40 00 00 1e 00 65 00 1b 3e 18 32
>024c98	26 ae 02 20 93 db 19 d0 02 40 19 32 19 32 06 22
>024ca8	01 10 3f af 00 00 1a 00 66 00 1b 3e 18 32 c0 c4
>024cb8	0b 24 df cb 2b c2 19 32 06 22 0c 10 30 a6 00 00
>024cc8	22 00 67 00 1b 3e 18 32 05 10 4e 95 03 20 9f d8
>024cd8	19 d0 00 40 19 32 19 32 06 22 0b 24 07 10 f5 8a
>024ce8	00 00 1a 00 68 00 1b 3e 18 32 97 c8 19 c0 03 20
>024cf8	0b 24 3b 40 19 32 06 22 7e 40 00 00 1a 00 69 00
>024d08	1b 3e 18 32 07 10 5b 50 0d 26 3c ce 07 c0 19 32
>024d18	06 22 b9 55 00 00 22 00 6a 00 1b 3e 18 32 0b 24
>024d28	80 81 0a 24 fb dd 1d d0 02 40 19 32 19 32 06 22
>024d38	0b 24 02 10 7b be 00 00 18 00 6b 00 1b 3e 18 32
>024d48	0b 24 09 40 03 20 17 c0 19 32 06 22 04 40 00 00
>024d58	1e 00 6c 00 1b 3e 18 32 6b d4 03 40 19 32 0d 26
>024d68	65 ce 7d c0 19 32 06 22 0b 24 01 40 00 00 1a 00
>024d78	6d 00 1b 3e 18 32 ea c8 1b c0 0b 24 60 40 19 32
>024d88	06 22 0b 24 c0 40 00 00 1a 00 6e 00 1b 3e 18 32
>024d98	15 c0 01 20 06 d0 01 40 19 32 19 32 06 22 10 40
>024da8	00 00 1e 00 6f 00 1b 3e 18 32 e3 da 7e d2 00 40
>024db8	19 32 0c 26 2e c6 19 32 06 22 ca 10 37 43 00 00
>024dc8	1e 00 70 00 1b 3e 18 32 5a de 77 d4 01 40 19 32
>024dd8	01 20 02 c6 19 32 06 22 0b 24 40 40 00 00 1a 00
>024de8	71 00 1b 3e 18 32 41 cc c9 c4 0c 26 10 40 19 32
>024df8	06 22 04 10 c0 4a 00 00 1c 00 72 00 1b 3e 18 32
>024e08	c5 d4 02 40 19 32 01 20 a7 c4 19 32 06 22 06 10
>024e18	00 61 00 00 18 00 73 00 1b 3e 18 32 46 40 0a 24
>024e28	0b 24 0d 40 19 32 06 22 39 40 00 00 1a 00 74 00
>024e38	1b 3e 18 32 d5 cc 17 c0 0a 24 14 40 19 32 06 22
>024e48	0b 24 33 40 00 00 1c 00 75 00 1b 3e 18 32 07 10
>024e58	71 68 03 20 05 10 d1 8b 19 32 06 22 02 10 a0 a3
>024e68	00 00 1a 00 76 00 1b 3e 18 32 02 10 b7 64 0b 24
>024e78	88 c5 19 32 06 22 06 10 3d a0 00 00 1c 00 77 00
>024e88	1b 3e 18 32 02 c6 0c 26 03 10 6f 48 19 32 06 22
>024e98	0b 24 55 10 24 ac 00 00 1c 00 78 00 1b 3e 18 32
>024ea8	b7 c5 03 20 18 d1 04 40 19 32 19 32 06 22 07 10
>024eb8	e2 85 00 00 24 00 79 00 1b 3e 18 32 0b 24 02 10
>024ec8	96 99 0a 24 af dd a7 d3 00 40 19 32 19 32 06 22
>024ed8	0b 24 08 10 f3 82 00 00 20 00 7a 00 1b 3e 18 32
>024ee8	0b 24 05 10 48 71 03 20 0b 24 03 10 80 82 19 32
>024ef8	06 22 06 10 38 b3 00 00 1c 00 7b 00 1b 3e 18 32
>024f08	ab d5 02 40 19 32 0a 24 1d 7a 19 32 06 22 01 10
>024f18	74 7f 00 00 1e 00 7c 00 1b 3e 18 32 e3 d3 01 40
>024f28	19 32 0c 26 03 10 ea 4a 19 32 06 22 06 10 d4 55
>024f38	00 00 18 00 7d 00 1b 3e 18 32 0b 24 28 40 01 20
>024f48	2b 42 19 32 06 22 08 42 00 00 1e 00 7e 00 1b 3e
>024f58	18 32 0b 24 10 40 0b 24 04 10 d6 9d 19 32 06 22
>024f68	0b 24 04 10 e6 9d 00 00 1e 00 7f 00 1b 3e 18 32
>024f78	9d d4 02 40 19 32 01 20 4c ca 5d c6 19 32 06 22
>024f88	03 10 00 40 00 00 1c 00 80 00 1b 3e 18 32 2b 40
>024f98	0b 24 0b 24 06 10 b6 98 19 32 06 22 06 10 e1 98
>024fa8	00 00 1e 00 81 00 1b 3e 18 32 08 d0 02 40 19 32
>024fb8	01 20 01 c0 19 32 06 22 0b 24 03 10 68 b2 00 00
>024fc8	1e 00 82 00 1b 3e 18 32 a2 d5 03 40 19 32 02 20
>024fd8	03 10 82 57 19 32 06 22 03 10 82 97 00 00 1e 00
>024fe8	83 00 1b 3e 18 32 01 10 82 5b 0a 24 55 d1 01 40
>024ff8	19 32 19 32 06 22 01 10 8d 5b 00 00 22 00 84 00
>025008	1b 3e 18 32 5f db 0e d0 03 40 19 32 02 20 55 d1
>025018	02 40 19 32 19 32 06 22 03 10 d8 b8 00 00 20 00
>025028	85 00 1b 3e 18 32 f2 dc 83 d2 02 40 19 32 01 20
>025038	87 c3 19 32 06 22 0b 24 05 10 b8 45 00 00 16 00
>025048	86 00 1b 3e 18 32 21 40 0b 24 1a c5 19 32 06 22
>025058	2a 40 00 00 1c 00 87 00 1b 3e 18 32 0b c0 03 20
>025068	a6 da 98 d4 06 40 19 32 19 32 06 22 9c 85 00 00
>025078	20 00 88 00 1b 3e 18 32 15 cb 43 c6 0c 26 e2 d8
>025088	97 d5 04 40 19 32 19 32 06 22 81 10 5e 9c 00 00
>025098	22 00 89 00 1b 3e 18 32 95 dc 20 d0 00 40 19 32
>0250a8	03 20 07 10 c2 46 19 32 06 22 0b 24 05 10 ff 5f
>0250b8	00 00 24 00 8a 00 1b 3e 18 32 0b 24 06 10 de 8d
>0250c8	0b 24 d3 dd 24 d0 01 40 19 32 19 32 06 22 0b 24
>0250d8	0b 10 00 4a 00 00 22 00 8b 00 1b 3e 18 32 08 d0
>0250e8	00 40 19 32 02 20 0b 24 05 10 5d a9 19 32 06 22
>0250f8	0b 24 05 10 15 a9 00 00 1c 00 8c 00 1b 3e 18 32
>025108	d5 cc 17 c0 01 20 0b 24 6d 77 19 32 06 22 0b 24
>025118	6f 77 00 00 20 00 8d 00 1b 3e 18 32 0b 24 47 40
>025128	03 20 fb dd 1d d0 01 40 19 32 19 32 06 22 04 10
>025138	4f 77 00 00 1e 00 8e 00 1b 3e 18 32 5f db 0e d0
>025148	00 40 19 32 0d 26 1a c5 19 32 06 22 0b 24 07 40
>025158	00 00 1e 00 8f 00 1b 3e 18 32 10 c9 53 c2 01 20
>025168	f4 db 09 d0 05 40 19 32 19 32 06 22 4d 40 00 00
>025178	16 00 90 00 1b 3e 18 32 0b c0 0d 26 5f c5 19 32
>025188	06 22 48 42 00 00 1c 00 91 00 1b 3e 18 32 b5 c3
>025198	03 20 0b 24 05 10 85 6a 19 32 06 22 05 10 ae 6a
>0251a8	00 00 1c 00 92 00 1b 3e 18 32 88 cb 36 c0 03 20
>0251b8	1a c5 19 32 06 22 0b 24 03 10 27 6b 00 00 20 00
>0251c8	93 00 1b 3e 18 32 42 d8 17 d0 01 40 19 32 03 20
>0251d8	1f c9 2a c1 19 32 06 22 03 10 03 ae 00 00 1c 00
>0251e8	94 00 1b 3e 18 32 8c c8 68 c5 0c 26 2e c6 19 32
>0251f8	06 22 0b 24 c3 10 72 a3 00 00 1a 00 95 00 1b 3e
>025208	18 32 51 40 03 20 07 10 71 68 19 32 06 22 07 10
>025218	20 68 00 00 22 00 96 00 1b 3e 18 32 95 dc 20 d0
>025228	01 40 19 32 02 20 0b 24 06 10 69 ae 19 32 06 22
>025238	0b 24 29 80 00 00 20 00 97 00 1b 3e 18 32 71 d0
>025248	04 40 19 32 02 20 fc d4 01 40 19 32 19 32 06 22
>025258	0b 24 28 40 00 00 20 00 98 00 1b 3e 18 32 0b 24
>025268	05 10 07 6f 03 20 7a d4 00 40 19 32 19 32 06 22
>025278	04 10 6d 95 00 00 20 00 99 00 1b 3e 18 32 e5 dd
>025288	24 d0 05 40 19 32 03 20 70 c9 1b c0 19 32 06 22
>025298	04 10 8f 9d 00 00 20 00 9a 00 1b 3e 18 32 c5 d4
>0252a8	02 40 19 32 0d 26 0b 24 07 10 01 41 19 32 06 22
>0252b8	0b 24 01 40 00 00 1c 00 9b 00 1b 3e 18 32 10 c9
>0252c8	53 c2 01 20 e3 d3 01 40 19 32 19 32 06 22 02 40
>0252d8	00 00 20 00 9c 00 1b 3e 18 32 89 ca 24 c0 0a 24
>0252e8	2d dd 7c d2 04 40 19 32 19 32 06 22 0b 24 9a 54
>0252f8	00 00 1a 00 9d 00 1b 3e 18 32 03 10 b5 5a 03 20
>025308	03 10 0c 4e 19 32 06 22 b9 54 00 00 20 00 9e 00
>025318	1b 3e 18 32 70 d8 04 d3 01 40 19 32 02 20 0b 24
>025328	31 40 19 32 06 22 0b 24 31 40 00 00 1e 00 9f 00
>025338	1b 3e 18 32 04 10 d6 9d 03 20 0b 24 08 40 19 32
>025348	06 22 0b 24 04 10 d2 9d 00 00 22 00 a0 00 1b 3e
>025358	18 32 41 de b8 d0 01 40 19 32 0a 24 27 ca 0c c0
>025368	19 32 06 22 0b 24 05 10 10 95 00 00 18 00 a1 00
>025378	1b 3e 18 32 06 10 74 8d 03 20 13 c4 19 32 06 22
>025388	08 90 00 00 1e 00 a2 00 1b 3e 18 32 da d9 fb d3
>025398	01 40 19 32 02 20 10 40 19 32 06 22 0b 24 a1 b6
>0253a8	00 00 22 00 a3 00 1b 3e 18 32 12 d6 00 40 19 32
>0253b8	0b 24 9a db 10 d2 02 40 19 32 19 32 06 22 07 10
>0253c8	b0 99 00 00 1e 00 a4 00 1b 3e 18 32 0b 24 49 40
>0253d8	03 20 46 d8 17 d0 02 40 19 32 19 32 06 22 6d ab
>0253e8	00 00 1e 00 a5 00 1b 3e 18 32 0b 24 04 10 56 bf
>0253f8	03 20 41 40 19 32 06 22 0b 24 04 10 15 bf 00 00
>025408	1c 00 a6 00 1b 3e 18 32 0b 24 cb 90 02 20 0b 24
>025418	32 40 19 32 06 22 0b 24 01 40 00 00 1c 00 a7 00
>025428	1b 3e 18 32 17 d9 04 d1 03 40 19 32 0a 24 15 c0
>025438	19 32 06 22 12 40 00 00 20 00 a8 00 1b 3e 18 32
>025448	51 dc 78 d4 02 40 19 32 01 20 03 d3 02 40 19 32
>025458	19 32 06 22 13 49 00 00 20 00 a9 00 1b 3e 18 32
>025468	03 10 2c b8 0b 24 a2 dd 53 d5 00 40 19 32 19 32
>025478	06 22 05 10 75 bc 00 00 1e 00 aa 00 1b 3e 18 32
>025488	70 5b 0b 24 46 d8 17 d0 01 40 19 32 19 32 06 22
>025498	03 10 db 44 00 00 20 00 ab 00 1b 3e 18 32 0b 24
>0254a8	02 10 41 50 0a 24 0b 24 28 40 19 32 06 22 0b 24
>0254b8	02 10 69 50 00 00 1a 00 ac 00 1b 3e 18 32 0c 40
>0254c8	02 20 06 10 74 8d 19 32 06 22 06 10 7c 8d 00 00
>0254d8	1c 00 ad 00 1b 3e 18 32 03 10 82 93 01 20 94 cc
>0254e8	06 c0 19 32 06 22 02 10 82 50 00 00 1e 00 ae 00
>0254f8	1b 3e 18 32 0b 24 5d 40 0c 26 0b 24 06 10 29 9d
>025508	19 32 06 22 71 12 e5 97 00 00 20 00 af 00 1b 3e
>025518	18 32 05 10 d1 87 0b 24 51 dc 78 d4 04 40 19 32
>025528	19 32 06 22 03 10 87 4d 00 00 1a 00 b0 00 1b 3e
>025538	18 32 a7 c2 0b 24 65 ce 7d c0 19 32 06 22 03 10
>025548	7e b6 00 00 22 00 b1 00 1b 3e 18 32 e3 da 0f d6
>025558	04 40 19 32 03 20 03 10 ae a7 19 32 06 22 0b 24
>025568	02 10 f2 ac 00 00 20 00 b2 00 1b 3e 18 32 0b 24
>025578	04 10 7b ac 01 20 d5 cc 17 c0 19 32 06 22 0b 24
>025588	04 10 7f ac 00 00 20 00 b3 00 1b 3e 18 32 9a db
>025598	10 d2 01 40 19 32 0b 24 0e c0 19 32 06 22 0b 24
>0255a8	05 10 6d 82 00 00 22 00 b4 00 1b 3e 18 32 10 dc
>0255b8	21 d3 01 40 19 32 02 20 f9 c9 02 c0 19 32 06 22
>0255c8	0b 24 01 10 23 40 00 00 1e 00 b5 00 1b 3e 18 32
>0255d8	0a c0 01 20 0b 24 04 10 16 7e 19 32 06 22 0b 24
>0255e8	04 10 5e 7e 00 00 1e 00 b6 00 1b 3e 18 32 05 10
>0255f8	ee 78 0d 26 cf d5 00 40 19 32 19 32 06 22 0b 24
>025608	04 40 00 00 1c 00 b7 00 1b 3e 18 32 b5 c3 03 20
>025618	f5 c8 0d c0 19 32 06 22 0b 24 04 10 3b b6 00 00
>025628	1c 00 b8 00 1b 3e 18 32 06 10 7c 5d 0d 26 ea c8
>025638	1b c0 19 32 06 22 0b 24 4e 48 00 00 18 00 b9 00
>025648	1b 3e 18 32 01 10 b4 4e 0d 26 ac 60 19 32 06 22
>025658	04 40 00 00 20 00 ba 00 1b 3e 18 32 9f d8 19 d0
>025668	01 40 19 32 01 20 60 ce 69 c5 19 32 06 22 03 10
>025678	cb 43 00 00 18 00 bb 00 1b 3e 18 32 50 40 01 20
>025688	ea c8 1b c0 19 32 06 22 00 40 00 00 20 00 bc 00
>025698	1b 3e 18 32 af dd a7 d3 00 40 19 32 03 20 0b 24
>0256a8	05 10 85 6a 19 32 06 22 d8 83 00 00 1a 00 bd 00
>0256b8	1b 3e 18 32 0b 24 cc 5d 03 20 dd 63 19 32 06 22
>0256c8	0b 24 17 7e 00 00 1a 00 be 00 1b 3e 18 32 09 40
>0256d8	0d 26 0b 24 03 10 35 94 19 32 06 22 00 40 00 00
>0256e8	1a 00 bf 00 1b 3e 18 32 01 10 e9 88 03 20 dd 59
>0256f8	19 32 06 22 01 10 34 91 00 00 1e 00 c0 00 1b 3e
>025708	18 32 06 d0 04 40 19 32 0a 24 46 40 19 32 06 22
>025718	0b 24 06 10 46 5f 00 00 24 00 c1 00 1b 3e 18 32
>025728	d5 d9 79 d0 03 40 19 32 03 20 e5 dd 24 d0 01 40
>025738	19 32 19 32 06 22 04 10 12 ac 00 00 1e 00 c2 00
>025748	1b 3e 18 32 0b 24 02 10 96 99 01 20 03 10 16 52
>025758	19 32 06 22 01 10 02 42 00 00 1e 00 c3 00 1b 3e
>025768	18 32 cc c8 28 c2 0b 24 1f c9 2a c1 19 32 06 22
>025778	0b 24 01 10 76 b2 00 00 22 00 c4 00 1b 3e 18 32
>025788	01 10 5f 76 0c 26 50 dd 69 d3 02 40 19 32 19 32
>025798	06 22 0b 24 44 10 d0 71 00 00 1c 00 c5 00 1b 3e
>0257a8	18 32 02 10 de 5c 0b 24 c6 cb 1a c0 19 32 06 22
>0257b8	02 10 cc 5c 00 00 22 00 c6 00 1b 3e 18 32 0b 24
>0257c8	04 10 98 8b 02 20 0b 24 04 10 98 8b 19 32 06 22
>0257d8	0b 24 04 10 98 8b 00 00 1c 00 c7 00 1b 3e 18 32
>0257e8	52 40 0c 26 03 d3 03 40 19 32 19 32 06 22 0b 24
>0257f8	38 53 00 00 20 00 c8 00 1b 3e 18 32 e3 da 0f d6
>025808	01 40 19 32 02 20 0b 24 22 40 19 32 06 22 0b 24
>025818	22 40 00 00 1c 00 c9 00 1b 3e 18 32 04 10 57 4d
>025828	01 20 0b 24 05 10 1e 6a 19 32 06 22 42 45 00 00
>025838	20 00 ca 00 1b 3e 18 32 0b 24 07 10 a9 53 03 20
>025848	0b 24 04 10 fe 77 19 32 06 22 03 10 55 64 00 00
>025858	1e 00 cb 00 1b 3e 18 32 16 d0 02 40 19 32 03 20
>025868	0b 24 3e 40 19 32 06 22 0b 24 30 40 00 00 22 00
>025878	cc 00 1b 3e 18 32 05 d0 03 40 19 32 0d 26 a2 d9
>025888	07 d0 00 40 19 32 19 32 06 22 0b 24 04 40 00 00
>025898	20 00 cd 00 1b 3e 18 32 0b 24 30 40 02 20 52 da
>0258a8	0c d0 05 40 19 32 19 32 06 22 0b 24 0a 40 00 00
>0258b8	1a 00 ce 00 1b 3e 18 32 0b 24 63 40 0c 26 0b 24
>0258c8	5e 40 19 32 06 22 5a 64 00 00 20 00 cf 00 1b 3e
>0258d8	18 32 0b 24 01 10 c4 70 01 20 0b 24 3e 40 19 32
>0258e8	06 22 0b 24 01 10 00 71 00 00 1a 00 d0 00 1b 3e
>0258f8	18 32 09 40 03 20 02 10 97 4a 19 32 06 22 02 10
>025908	9e 4a 00 00 1e 00 d1 00 1b 3e 18 32 05 d0 00 40
>025918	19 32 01 20 04 10 7e 47 19 32 06 22 04 10 2a 47
>025928	00 00 1c 00 d2 00 1b 3e 18 32 15 c0 0d 26 a6 da
>025938	98 d4 05 40 19 32 19 32 06 22 00 40 00 00 18 00
>025948	d3 00 1b 3e 18 32 48 40 01 20 02 10 b7 64 19 32
>025958	06 22 00 40 00 00 20 00 d4 00 1b 3e 18 32 aa dd
>025968	40 d2 01 40 19 32 01 20 0b 24 06 10 84 45 19 32
>025978	06 22 00 40 00 00 20 00 d5 00 1b 3e 18 32 9d d4
>025988	00 40 19 32 0b 24 02 10 67 a3 19 32 06 22 0b 24
>025998	02 10 aa a3 00 00 20 00 d6 00 1b 3e 18 32 c5 d4
>0259a8	01 40 19 32 0b 24 c5 d4 00 40 19 32 19 32 06 22
>0259b8	03 10 ec 6f 00 00 20 00 d7 00 1b 3e 18 32 51 dc
>0259c8	78 d4 03 40 19 32 03 20 e7 ad 19 32 06 22 0b 24
>0259d8	04 10 9e 41 00 00 1e 00 d8 00 1b 3e 18 32 0b 24
>0259e8	04 10 1e 48 01 20 1f c9 2a c1 19 32 06 22 03 10
>0259f8	62 40 00 00 1a 00 d9 00 1b 3e 18 32 0b 24 1c 40
>025a08	03 20 0b 24 37 40 19 32 06 22 2d 40 00 00 1e 00
>025a18	da 00 1b 3e 18 32 15 cb 43 c6 0b 24 0b 24 04 10
>025a28	10 be 19 32 06 22 0b 10 fa a7 00 00 1e 00 db 00
>025a38	1b 3e 18 32 13 c4 01 20 27 dd 21 d0 02 40 19 32
>025a48	19 32 06 22 04 10 10 5c 00 00 1c 00 dc 00 1b 3e
>025a58	18 32 f7 c8 91 c5 0a 24 8c c8 68 c5 19 32 06 22
>025a68	0b 24 1a 40 00 00 1c 00 dd 00 1b 3e 18 32 0a c0
>025a78	0b 24 25 d5 01 40 19 32 19 32 06 22 0b 24 0e 40
>025a88	00 00 1e 00 de 00 1b 3e 18 32 02 10 fa 8c 0b 24
>025a98	06 10 ac a0 19 32 06 22 0b 24 04 10 b2 53 00 00
>025aa8	18 00 df 00 1b 3e 18 32 58 40 01 20 c6 cc de c4
>025ab8	19 32 06 22 18 40 00 00 20 00 e0 00 1b 3e 18 32
>025ac8	71 d0 04 40 19 32 02 20 c1 d3 01 40 19 32 19 32
>025ad8	06 22 0b 24 34 40 00 00 1a 00 e1 00 1b 3e 18 32
>025ae8	0b 24 52 40 03 20 1d 7a 19 32 06 22 0b 24 4d 7a
>025af8	00 00 1e 00 e2 00 1b 3e 18 32 87 c3 0b 24 e2 d8
>025b08	97 d5 04 40 19 32 19 32 06 22 0b 24 4b 40 00 00
>025b18	1c 00 e3 00 1b 3e 18 32 da d9 fb d3 02 40 19 32
>025b28	02 20 19 c0 19 32 06 22 2f 40 00 00 24 00 e4 00
>025b38	1b 3e 18 32 39 de 1f d0 02 40 19 32 01 20 0b 24
>025b48	05 10 07 6f 19 32 06 22 0b 24 05 10 98 bf 00 00
>025b58	22 00 e5 00 1b 3e 18 32 52 da 0c d0 03 40 19 32
>025b68	03 20 e3 da 7e d2 02 40 19 32 19 32 06 22 7d ac
>025b78	00 00 24 00 e6 00 1b 3e 18 32 95 dc 20 d0 02 40
>025b88	19 32 02 20 0b 24 06 10 01 bb 19 32 06 22 0b 24
>025b98	02 10 01 72 00 00 1e 00 e7 00 1b 3e 18 32 a2 d9
>025ba8	07 d0 04 40 19 32 0b 24 ac 60 19 32 06 22 0b 24
>025bb8	83 60 00 00 1e 00 e8 00 1b 3e 18 32 0b 24 04 10
>025bc8	fe 77 02 20 04 10 47 91 19 32 06 22 0b 24 b9 66
>025bd8	00 00 16 00 e9 00 1b 3e 18 32 58 40 0d 26 13 40
>025be8	19 32 06 22 04 40 00 00 1c 00 ea 00 1b 3e 18 32
>025bf8	d3 dd 24 d0 03 40 19 32 01 20 52 40 19 32 06 22
>025c08	52 40 00 00 20 00 eb 00 1b 3e 18 32 0b 24 06 10
>025c18	68 7e 02 20 0b cb 19 c0 19 32 06 22 0b 24 02 10
>025c28	28 5a 00 00 1e 00 ec 00 1b 3e 18 32 3f c3 01 20
>025c38	0b 24 06 10 29 9d 19 32 06 22 0b 24 06 10 7d 9d
>025c48	00 00 1e 00 ed 00 1b 3e 18 32 69 c8 b3 c3 0d 26
>025c58	0b 24 05 10 b3 48 19 32 06 22 0b 24 01 40 00 00
>025c68	20 00 ee 00 1b 3e 18 32 87 d2 01 40 19 32 0a 24
>025c78	7a d4 01 40 19 32 19 32 06 22 05 10 91 68 00 00
>025c88	1a 00 ef 00 1b 3e 18 32 73 c1 0d 26 9d d4 02 40
>025c98	19 32 19 32 06 22 01 40 00 00 1c 00 f0 00 1b 3e
>025ca8	18 32 0b 24 6d 77 01 20 0b cb 19 c0 19 32 06 22
>025cb8	04 10 90 80 00 00 20 00 f1 00 1b 3e 18 32 7a d4
>025cc8	00 40 19 32 0a 24 0b 24 60 40 19 32 06 22 0b 24
>025cd8	01 10 cc ba 00 00 1c 00 f2 00 1b 3e 18 32 0b 24
>025ce8	01 10 b5 ac 01 20 01 10 04 5c 19 32 06 22 00 50
>025cf8	00 00 1c 00 f3 00 1b 3e 18 32 10 40 0d 26 af dd
>025d08	a7 d3 01 40 19 32 19 32 06 22 00 40 00 00 20 00
>025d18	f4 00 1b 3e 18 32 0b 24 05 10 e7 5d 01 20 0b 24
>025d28	d4 52 19 32 06 22 0b 24 05 10 f8 5f 00 00 1a 00
>025d38	f5 00 1b 3e 18 32 c6 cb 1a c0 0d 26 f5 c8 0d c0
>025d48	19 32 06 22 00 40 00 00 20 00 f6 00 1b 3e 18 32
>025d58	02 d5 02 40 19 32 0a 24 55 d1 01 40 19 32 19 32
>025d68	06 22 06 10 71 7b 00 00 22 00 f7 00 1b 3e 18 32
>025d78	0b 24 cb 90 0a 24 e3 da 0f d6 04 40 19 32 19 32
>025d88	06 22 0b 24 01 10 2b 9c 00 00 1e 00 f8 00 1b 3e
>025d98	18 32 a2 d5 00 40 19 32 03 20 f5 c8 0d c0 19 32
>025da8	06 22 04 10 10 b6 00 00 1e 00 f9 00 1b 3e 18 32
>025db8	0e cc 0d c0 0c 26 0b 24 07 10 71 47 19 32 06 22
>025dc8	54 10 4c 99 00 00 1c 00 fa 00 1b 3e 18 32 0b cb
>025dd8	19 c0 0d 26 cb d0 01 40 19 32 19 32 06 22 00 40
>025de8	00 00 1c 00 fb 00 1b 3e 18 32 8c c8 68 c5 0b 24
>025df8	1f ca 09 c0 19 32 06 22 0b 24 a4 40 00 00 1c 00
>025e08	fc 00 1b 3e 18 32 0d d0 00 40 19 32 0b 24 76 c5
>025e18	19 32 06 22 0b 24 55 40 00 00 1c 00 fd 00 1b 3e
>025e28	18 32 90 cb 5d c0 0a 24 03 10 f6 6f 19 32 06 22
>025e38	02 10 8b 60 00 00 20 00 fe 00 1b 3e 18 32 07 d0
>025e48	02 40 19 32 0b 24 63 ca d6 c5 19 32 06 22 0b 24
>025e58	06 10 08 99 00 00 1e 00 ff 00 1b 3e 18 32 0b 24
>025e68	47 40 0d 26 52 da 0c d0 03 40 19 32 19 32 06 22
>025e78	00 40 00 00 1e 00 00 01 1b 3e 18 32 34 ce 42 c4
>025e88	0a 24 06 cd 0a c0 19 32 06 22 0b 24 01 10 4e 8c
>025e98	00 00 20 00 01 01 1b 3e 18 32 0b 24 06 10 84 45
>025ea8	02 20 01 10 e9 88 19 32 06 22 0b 24 06 10 03 45
>025eb8	00 00 1e 00 02 01 1b 3e 18 32 ec db 01 d4 03 40
>025ec8	19 32 0b 24 10 40 19 32 06 22 02 10 11 9f 00 00
>025ed8	18 00 03 01 1b 3e 18 32 4f 40 0d 26 20 ca 0e c0
>025ee8	19 32 06 22 00 40 00 00 1c 00 04 01 1b 3e 18 32
>025ef8	19 c0 0c 26 0b 24 68 6a 19 32 06 22 0b 24 02 10
>025f08	a8 bd 00 00 20 00 05 01 1b 3e 18 32 2d cd 10 c0
>025f18	03 20 8b d5 05 40 19 32 19 32 06 22 0b 24 05 10
>025f28	20 74 00 00 1e 00 06 01 1b 3e 18 32 88 cb 36 c0
>025f38	03 20 9f d4 01 40 19 32 19 32 06 22 03 10 36 6b
>025f48	00 00 1c 00 07 01 1b 3e 18 32 04 10 5c a1 0a 24
>025f58	0b 24 20 40 19 32 06 22 04 10 3c a1 00 00 1e 00
>025f68	08 01 1b 3e 18 32 06 10 ea a9 01 20 c1 d3 02 40
>025f78	19 32 19 32 06 22 02 10 a0 48 00 00 20 00 09 01
>025f88	1b 3e 18 32 09 d0 05 40 19 32 0a 24 0b 24 11 40
>025f98	19 32 06 22 0b 24 04 10 7e a4 00 00 1e 00 0a 01
>025fa8	1b 3e 18 32 e3 da 7e d2 04 40 19 32 03 20 09 40
>025fb8	19 32 06 22 06 10 82 6a 00 00 18 00 0b 01 1b 3e
>025fc8	18 32 88 c5 03 20 73 c1 19 32 06 22 02 10 94 4d
>025fd8	00 00 1e 00 0c 01 1b 3e 18 32 70 d8 04 d3 06 40
>025fe8	19 32 0d 26 04 10 10 b6 19 32 06 22 00 40 00 00
>025ff8	1c 00 0d 01 1b 3e 18 32 03 10 82 93 01 20 fe cd
>026008	06 c3 19 32 06 22 01 10 02 91 00 00 22 00 0e 01
>026018	1b 3e 18 32 41 de b8 d0 00 40 19 32 0a 24 24 cd
>026028	7a c2 19 32 06 22 0b 24 0b 10 26 4d 00 00 1a 00
>026038	0f 01 1b 3e 18 32 02 10 52 9e 03 20 2b 6c 19 32
>026048	06 22 02 10 79 b2 00 00 1a 00 10 01 1b 3e 18 32
>026058	0b 24 3d 40 0d 26 f5 c8 0d c0 19 32 06 22 00 40
>026068	00 00 1a 00 11 01 1b 3e 18 32 01 10 f9 55 0a 24
>026078	3c 40 19 32 06 22 01 10 35 56 00 00 20 00 12 01
>026088	1b 3e 18 32 0c c0 01 20 41 de b8 d0 04 40 19 32
>026098	19 32 06 22 0b 24 05 10 13 90 00 00 1c 00 13 01
>0260a8	1b 3e 18 32 01 10 82 58 0d 26 0b 24 67 b2 19 32
>0260b8	06 22 0b 24 01 40 00 00 20 00 14 01 1b 3e 18 32
>0260c8	1a d0 02 40 19 32 03 20 e4 d5 04 40 19 32 19 32
>0260d8	06 22 0b 24 68 ae 00 00 24 00 15 01 1b 3e 18 32
>0260e8	05 d0 04 40 19 32 02 20 41 de b8 d0 01 40 19 32
>0260f8	19 32 06 22 0b 24 04 10 1a 40 00 00 1c 00 16 01
>026108	1b 3e 18 32 0b 24 30 40 02 20 0e cc 0d c0 19 32
>026118	06 22 0b 24 0c 40 00 00 22 00 17 01 1b 3e 18 32
>026128	0b 24 05 10 8d 82 03 20 ff dc 0b d0 01 40 19 32
>026138	19 32 06 22 04 10 a2 ae 00 00 1e 00 18 01 1b 3e
>026148	18 32 04 10 d6 9d 0a 24 e3 da 7e d2 03 40 19 32
>026158	19 32 06 22 d7 55 00 00 20 00 19 01 1b 3e 18 32
>026168	3a d6 03 40 19 32 0d 26 0d d0 04 40 19 32 19 32
>026178	06 22 0b 24 01 40 00 00 1c 00 1a 01 1b 3e 18 32
>026188	18 d1 03 40 19 32 0d 26 04 10 47 91 19 32 06 22
>026198	00 40 00 00 22 00 1b 01 1b 3e 18 32 b9 dd 1f d0
>0261a8	02 40 19 32 0a 24 0b 24 0c 40 19 32 06 22 0b 24
>0261b8	02 10 76 ba 00 00 1e 00 1c 01 1b 3e 18 32 0b 24
>0261c8	06 10 2e 5e 03 20 0b c0 19 32 06 22 0b 24 07 10
>0261d8	c5 96 00 00 1c 00 1d 01 1b 3e 18 32 03 10 2c b8
>0261e8	02 20 02 10 de 5c 19 32 06 22 03 10 fe bc 00 00
>0261f8	1a 00 1e 01 1b 3e 18 32 58 40 03 20 08 d0 00 40
>026208	19 32 19 32 06 22 11 40 00 00 20 00 1f 01 1b 3e
>026218	18 32 02 10 97 4a 0a 24 9f d8 19 d0 00 40 19 32
>026228	19 32 06 22 0b 24 24 55 00 00 1c 00 20 01 1b 3e
>026238	18 32 0b 24 33 44 0b 24 0b 24 37 40 19 32 06 22
>026248	0b 24 fc 43 00 00 16 00 21 01 1b 3e 18 32 98 c3
>026258	0d 26 13 c4 19 32 06 22 00 40 00 00 22 00 22 01
>026268	1b 3e 18 32 0b 24 05 10 b9 b6 01 20 0b 24 05 10
>026278	b9 b6 19 32 06 22 0b 24 05 10 b9 b6 00 00 20 00
>026288	23 01 1b 3e 18 32 02 10 b9 97 0a 24 55 d1 00 40
>026298	19 32 19 32 06 22 0b 24 03 10 af a6 00 00 1a 00
>0262a8	24 01 1b 3e 18 32 a7 c4 0d 26 82 cd 2f c3 19 32
>0262b8	06 22 0b 24 e8 4d 00 00 20 00 25 01 1b 3e 18 32
>0262c8	0b 24 06 10 29 9d 01 20 c6 cc de c4 19 32 06 22
>0262d8	0b 24 07 10 ef 9d 00 00 20 00 26 01 1b 3e 18 32
>0262e8	4d dd 1c d0 01 40 19 32 0d 26 0b 24 10 40 19 32
>0262f8	06 22 0b 24 e2 6e 00 00 1a 00 27 01 1b 3e 18 32
>026308	01 10 04 5c 0a 24 1d 40 19 32 06 22 01 10 21 5c
>026318	00 00 1e 00 28 01 1b 3e 18 32 70 c9 11 c0 03 20
>026328	f7 c8 91 c5 19 32 06 22 0b 24 04 10 d4 8b 00 00
>026338	1c 00 29 01 1b 3e 18 32 02 c6 01 20 23 ca 01 c0
>026348	19 32 06 22 0b 24 04 10 80 b1 00 00 1e 00 2a 01
>026358	1b 3e 18 32 09 d0 02 40 19 32 0c 26 2d cd 10 c0
>026368	19 32 06 22 3b 11 40 ae 00 00 1a 00 2b 01 1b 3e
>026378	18 32 12 40 0c 26 a0 c9 6f c6 19 32 06 22 15 10
>026388	48 b8 00 00 1a 00 2c 01 1b 3e 18 32 18 c0 0b 24
>026398	0b 24 60 40 19 32 06 22 06 10 85 6a 00 00 1e 00
>0263a8	2d 01 1b 3e 18 32 f2 dc 83 d2 03 40 19 32 03 20
>0263b8	52 40 19 32 06 22 0b 24 73 40 00 00 20 00 2e 01
>0263c8	1b 3e 18 32 0b 24 60 40 03 20 b9 dd 1f d0 02 40
>0263d8	19 32 19 32 06 22 02 10 36 ba 00 00 1a 00 2f 01
>0263e8	1b 3e 18 32 19 40 02 20 0b 24 09 40 19 32 06 22
>0263f8	0b 24 01 40 00 00 16 00 30 01 1b 3e 18 32 3d 94
>026408	0b 24 0a c0 19 32 06 22 86 94 00 00 1c 00 31 01
>026418	1b 3e 18 32 0c c0 03 20 03 10 2e 6b 19 32 06 22
>026428	0b 24 03 10 2d 6b 00 00 20 00 32 01 1b 3e 18 32
>026438	07 cb 1b c0 02 20 0b 24 03 10 24 41 19 32 06 22
>026448	0b 24 02 10 22 41 00 00 20 00 33 01 1b 3e 18 32
>026458	08 d0 00 40 19 32 0a 24 df cb 2b c2 19 32 06 22
>026468	0b 24 06 10 3b 45 00 00 1a 00 34 01 1b 3e 18 32
>026478	60 ce 69 c5 03 20 30 40 19 32 06 22 0b 24 21 40
>026488	00 00 1c 00 35 01 1b 3e 18 32 07 10 c8 6d 03 20
>026498	02 10 97 4a 19 32 06 22 05 10 5f 67 00 00 1c 00
>0264a8	36 01 1b 3e 18 32 0b 24 05 10 4f 8d 01 20 05 10
>0264b8	4e 95 19 32 06 22 00 50 00 00 18 00 37 01 1b 3e
>0264c8	18 32 5f c5 0a 24 0b 24 0d 40 19 32 06 22 4b 40
>0264d8	00 00 1e 00 38 01 1b 3e 18 32 aa dd 5f d3 00 40
>0264e8	19 32 03 20 0b 24 11 40 19 32 06 22 15 4b 00 00
>0264f8	20 00 39 01 1b 3e 18 32 f9 c9 02 c0 03 20 9f d4
>026508	01 40 19 32 19 32 06 22 0b 24 01 10 3b a6 00 00
>026518	1a 00 3a 01 1b 3e 18 32 1d 40 0b 24 03 d3 00 40
>026528	19 32 19 32 06 22 74 40 00 00 1e 00 3b 01 1b 3e
>026538	18 32 09 d0 04 40 19 32 0b 24 18 c0 19 32 06 22
>026548	0b 24 02 10 8f 73 00 00 1e 00 3c 01 1b 3e 18 32
>026558	03 d0 00 40 19 32 0b 24 0b 24 45 40 19 32 06 22
>026568	01 10 8f 88 00 00 1a 00 3d 01 1b 3e 18 32 2d cd
>026578	10 c0 0b 24 27 ca 0c c0 19 32 06 22 3e 40 00 00
>026588	1a 00 3e 01 1b 3e 18 32 0f c0 01 20 bd d0 01 40
>026598	19 32 19 32 06 22 14 88 00 00 1e 00 3f 01 1b 3e
>0265a8	18 32 1a c5 0a 24 12 d3 04 40 19 32 19 32 06 22
>0265b8	0b 24 05 10 f2 4d 00 00 1a 00 40 01 1b 3e 18 32
>0265c8	a6 cc 03 c6 03 20 b7 c5 19 32 06 22 01 10 de aa
>0265d8	00 00 1e 00 41 01 1b 3e 18 32 0b 24 09 40 03 20
>0265e8	0b 24 06 10 68 7e 19 32 06 22 06 10 6f 7e 00 00
>0265f8	1e 00 42 01 1b 3e 18 32 0b 40 03 20 14 de ad d2
>026608	05 40 19 32 19 32 06 22 0b 24 5b 40 00 00 1e 00
>026618	43 01 1b 3e 18 32 0b 24 5d 40 03 20 fe d4 05 40
>026628	19 32 19 32 06 22 02 10 1e a1 00 00 20 00 44 01
>026638	1b 3e 18 32 cb d0 01 40 19 32 02 20 04 10 5c a1
>026648	19 32 06 22 0b 24 03 10 02 4a 00 00 20 00 45 01
>026658	1b 3e 18 32 12 d6 03 40 19 32 03 20 63 ca d6 c5
>026668	19 32 06 22 0b 24 06 10 00 5f 00 00 1e 00 46 01
>026678	1b 3e 18 32 0b 24 06 10 8b 51 0d 26 01 10 ca 73
>026688	19 32 06 22 0b 24 04 40 00 00 20 00 47 01 1b 3e
>026698	18 32 0b 24 06 10 29 9d 03 20 69 c8 b3 c3 19 32
>0266a8	06 22 0b 24 03 10 90 6b 00 00 22 00 48 01 1b 3e
>0266b8	18 32 a6 da 98 d4 05 40 19 32 0d 26 fb dd 1d d0
>0266c8	03 40 19 32 19 32 06 22 00 40 00 00 20 00 49 01
>0266d8	1b 3e 18 32 06 10 be 8a 0d 26 73 dc 86 d5 00 40
>0266e8	19 32 19 32 06 22 0b 24 83 48 00 00 1c 00 4a 01
>0266f8	1b 3e 18 32 04 10 7b 64 0b 24 0b 24 0d 40 19 32
>026708	06 22 04 10 88 64 00 00 24 00 4b 01 1b 3e 18 32
>026718	fb dd 1d d0 02 40 19 32 0d 26 fb dd 1d d0 00 40
>026728	19 32 19 32 06 22 0b 24 01 40 00 00 1a 00 4c 01
>026738	1b 3e 18 32 a0 c9 6f c6 0b 24 13 40 19 32 06 22
>026748	01 10 f1 5b 00 00 1a 00 4d 01 1b 3e 18 32 09 40
>026758	01 20 62 d6 02 40 19 32 19 32 06 22 09 40 00 00
>026768	1e 00 4e 01 1b 3e 18 32 27 dd 21 d0 01 40 19 32
>026778	0a 24 01 c0 19 32 06 22 04 10 45 62 00 00 1a 00
>026788	4f 01 1b 3e 18 32 41 cc c9 c4 0a 24 01 c0 19 32
>026798	06 22 0b 24 bb 91 00 00 1c 00 50 01 1b 3e 18 32
>0267a8	05 10 a7 b6 01 20 0b 24 07 10 af 40 19 32 06 22
>0267b8	01 b6 00 00 22 00 51 01 1b 3e 18 32 a2 d9 07 d0
>0267c8	04 40 19 32 01 20 23 dc 05 d0 01 40 19 32 19 32
>0267d8	06 22 21 40 00 00 1c 00 52 01 1b 3e 18 32 06 10
>0267e8	ac a0 0b 24 04 10 8e 93 19 32 06 22 02 10 1e 4d
>0267f8	00 00 1e 00 53 01 1b 3e 18 32 cb d0 01 40 19 32
>026808	0d 26 02 10 0f bc 19 32 06 22 0b 24 02 40 00 00
>026818	24 00 54 01 1b 3e 18 32 9d d4 05 40 19 32 03 20
>026828	e3 da 7e d2 04 40 19 32 19 32 06 22 0b 24 05 10
>026838	d6 5e 00 00 20 00 55 01 1b 3e 18 32 38 d8 dc d1
>026848	02 40 19 32 03 20 3a 40 19 32 06 22 0b 24 01 10
>026858	bf ac 00 00 20 00 56 01 1b 3e 18 32 5f db 0e d0
>026868	02 40 19 32 03 20 53 40 19 32 06 22 0b 24 04 10
>026878	6f b6 00 00 1e 00 57 01 1b 3e 18 32 0b 24 02 10
>026888	41 50 03 20 0b 24 5d 40 19 32 06 22 02 10 1c 50
>026898	00 00 1c 00 58 01 1b 3e 18 32 0b 24 01 10 38 6f
>0268a8	02 20 30 c6 19 32 06 22 0b 24 22 43 00 00 1c 00
>0268b8	59 01 1b 3e 18 32 01 10 04 5c 03 20 01 c0 19 32
>0268c8	06 22 0b 24 01 10 63 ae 00 00 20 00 5a 01 1b 3e
>0268d8	18 32 16 d0 03 40 19 32 0d 26 e2 d8 97 d5 01 40
>0268e8	19 32 19 32 06 22 b1 45 00 00 22 00 5b 01 1b 3e
>0268f8	18 32 07 cb 1b c0 02 20 27 dd 21 d0 00 40 19 32
>026908	19 32 06 22 0b 24 04 10 01 63 00 00 1a 00 5c 01
>026918	1b 3e 18 32 10 40 01 20 0b 24 07 10 0c 7b 19 32
>026928	06 22 10 40 00 00 1c 00 5d 01 1b 3e 18 32 04 10
>026938	38 4c 0a 24 04 10 9d 7f 19 32 06 22 08 10 d5 8b
>026948	00 00 1a 00 5e 01 1b 3e 18 32 0b 24 6d 77 03 20
>026958	0b 24 3e 40 19 32 06 22 51 77 00 00 22 00 5f 01
>026968	1b 3e 18 32 05 10 a7 b6 03 20 11 de 1f d0 02 40
>026978	19 32 19 32 06 22 0b 24 05 10 e2 b6 00 00 1c 00
>026988	60 01 1b 3e 18 32 04 40 0b 24 04 10 d8 a5 19 32
>026998	06 22 0b 24 04 10 d4 a5 00 00 1e 00 61 01 1b 3e
>0269a8	18 32 0b 24 60 40 03 20 1a d0 02 40 19 32 19 32
>0269b8	06 22 0b 24 7a ae 00 00 1c 00 62 01 1b 3e 18 32
>0269c8	0b 24 02 10 35 7a 0d 26 87 ca 79 c2 19 32 06 22
>0269d8	00 40 00 00 1a 00 63 01 1b 3e 18 32 0b 24 5e 40
>0269e8	0c 26 0b 24 09 40 19 32 06 22 4e 43 00 00 1c 00
>0269f8	64 01 1b 3e 18 32 0b 24 d4 52 0d 26 7e d5 06 40
>026a08	19 32 19 32 06 22 00 40 00 00 20 00 65 01 1b 3e
>026a18	18 32 02 10 3a b6 03 20 0b 24 04 10 7f b1 19 32
>026a28	06 22 0b 24 06 10 45 47 00 00 16 00 66 01 1b 3e
>026a38	18 32 1d 40 0a 24 15 c0 19 32 06 22 6f 40 00 00
>026a48	1e 00 67 01 1b 3e 18 32 10 dc 21 d3 03 40 19 32
>026a58	0d 26 07 10 7b 8f 19 32 06 22 00 40 00 00 1e 00
>026a68	68 01 1b 3e 18 32 f5 c8 0d c0 01 20 fb dd 1d d0
>026a78	01 40 19 32 19 32 06 22 10 80 00 00 1e 00 69 01
>026a88	1b 3e 18 32 9f d8 19 d0 01 40 19 32 01 20 06 cd
>026a98	0a c0 19 32 06 22 c3 41 00 00 1c 00 6a 01 1b 3e
>026aa8	18 32 70 c9 11 c0 02 20 07 10 7f 63 19 32 06 22
>026ab8	0b 24 81 88 00 00 20 00 6b 01 1b 3e 18 32 76 dc
>026ac8	20 d0 00 40 19 32 02 20 01 10 04 5c 19 32 06 22
>026ad8	05 10 a7 5e 00 00 1c 00 6c 01 1b 3e 18 32 a2 d5
>026ae8	01 40 19 32 01 20 03 10 23 79 19 32 06 22 20 79
>026af8	00 00 22 00 6d 01 1b 3e 18 32 e9 d8 02 d0 02 40
>026b08	19 32 0d 26 51 dc 78 d4 01 40 19 32 19 32 06 22
>026b18	83 4d 00 00 1e 00 6e 01 1b 3e 18 32 0c c0 0a 24
>026b28	0b 24 06 10 3f 93 19 32 06 22 0b 24 06 10 42 93
>026b38	00 00 1a 00 6f 01 1b 3e 18 32 15 cb 43 c6 0a 24
>026b48	33 5b 19 32 06 22 07 10 1d 45 00 00 1c 00 70 01
>026b58	1b 3e 18 32 07 10 71 68 0a 24 07 10 d0 8d 19 32
>026b68	06 22 0e 10 41 b6 00 00 1e 00 71 01 1b 3e 18 32
>026b78	0b 24 06 4b 0a 24 36 cb 97 c3 19 32 06 22 0b 24
>026b88	07 10 77 52 00 00 1c 00 72 01 1b 3e 18 32 04 10
>026b98	d8 a5 0a 24 06 10 ea a9 19 32 06 22 0b 10 c2 8f
>026ba8	00 00 18 00 73 01 1b 3e 18 32 0b 24 84 bf 01 20
>026bb8	48 40 19 32 06 22 48 40 00 00 16 00 74 01 1b 3e
>026bc8	18 32 51 40 0a 24 44 40 19 32 06 22 95 40 00 00
>026bd8	1e 00 75 01 1b 3e 18 32 c0 db 15 d0 02 40 19 32
>026be8	0b 24 ac 60 19 32 06 22 01 10 aa bf 00 00 1a 00
>026bf8	76 01 1b 3e 18 32 46 40 0a 24 03 10 77 46 19 32
>026c08	06 22 03 10 bd 46 00 00 1e 00 77 01 1b 3e 18 32
>026c18	cf d5 03 40 19 32 0b 24 95 c3 19 32 06 22 0b 24
>026c28	0c 10 4f 60 00 00 20 00 78 01 1b 3e 18 32 97 c8
>026c38	19 c0 0b 24 ec db 01 d4 00 40 19 32 19 32 06 22
>026c48	06 10 47 42 00 00 1a 00 79 01 1b 3e 18 32 06 10
>026c58	37 5a 0d 26 a0 c9 6f c6 19 32 06 22 05 40 00 00
>026c68	1a 00 7a 01 1b 3e 18 32 01 10 b4 4e 0a 24 60 40
>026c78	19 32 06 22 01 10 14 4f 00 00 1c 00 7b 01 1b 3e
>026c88	18 32 fc d4 04 40 19 32 01 20 02 10 a0 b4 19 32
>026c98	06 22 a0 54 00 00 1e 00 7c 01 1b 3e 18 32 15 cb
>026ca8	43 c6 03 20 bd d0 02 40 19 32 19 32 06 22 06 10
>026cb8	de a9 00 00 1c 00 7d 01 1b 3e 18 32 0b 24 05 10
>026cc8	4f 8d 0d 26 11 40 19 32 06 22 0b 24 31 6a 00 00
>026cd8	20 00 7e 01 1b 3e 18 32 06 10 0e 77 03 20 0b 24
>026ce8	01 10 7b 6f 19 32 06 22 0b 24 07 10 75 58 00 00
>026cf8	20 00 7f 01 1b 3e 18 32 01 10 f9 55 0a 24 0b 24
>026d08	07 10 a9 53 19 32 06 22 0b 24 05 10 b0 bd 00 00
>026d18	20 00 80 01 1b 3e 18 32 01 10 b4 4e 02 20 0b 24
>026d28	07 10 d7 7e 19 32 06 22 0b 24 06 10 43 70 00 00
>026d38	1a 00 81 01 1b 3e 18 32 07 10 5b 50 0a 24 fb 84
>026d48	19 32 06 22 07 10 56 95 00 00 1c 00 82 01 1b 3e
>026d58	18 32 05 10 de 68 0d 26 0b 24 07 10 a9 53 19 32
>026d68	06 22 00 40 00 00 20 00 83 01 1b 3e 18 32 0a 40
>026d78	03 20 28 dd 05 d0 03 40 19 32 19 32 06 22 0b 24
>026d88	04 10 0e 80 00 00 1e 00 84 01 1b 3e 18 32 ea ca
>026d98	1b c0 0a 24 fc c9 12 c0 19 32 06 22 0b 24 05 10
>026da8	8d b9 00 00 1e 00 85 01 1b 3e 18 32 0b 24 03 10
>026db8	02 b5 02 20 30 c6 19 32 06 22 0b 24 02 10 02 41
>026dc8	00 00 1a 00 86 01 1b 3e 18 32 4f 40 0b 24 85 c5
>026dd8	19 32 06 22 0b 24 02 10 51 b4 00 00 1a 00 87 01
>026de8	1b 3e 18 32 0b 24 82 91 02 20 6b c6 19 32 06 22
>026df8	0b 24 02 40 00 00 1e 00 88 01 1b 3e 18 32 05 10
>026e08	4e 95 0b 24 0b 24 04 10 fe 77 19 32 06 22 0a 10
>026e18	4c 4d 00 00 20 00 89 01 1b 3e 18 32 46 d8 17 d0
>026e28	00 40 19 32 02 20 ad 96 19 32 06 22 0b 24 06 10
>026e38	53 41 00 00 22 00 8a 01 1b 3e 18 32 0b 24 20 40
>026e48	0c 26 ff dc 0b d0 03 40 19 32 19 32 06 22 0b 24
>026e58	8f 10 60 a5 00 00 20 00 8b 01 1b 3e 18 32 02 10
>026e68	0f bc 0a 24 0b 24 06 10 3f 6f 19 32 06 22 0b 24
>026e78	03 10 30 73 00 00 1a 00 8c 01 1b 3e 18 32 97 c8
>026e88	19 c0 0c 26 76 c5 19 32 06 22 0b 24 d1 47 00 00
>026e98	22 00 8d 01 1b 3e 18 32 ab d5 02 40 19 32 03 20
>026ea8	0b 24 07 10 71 47 19 32 06 22 0b 24 06 10 28 42
>026eb8	00 00 1a 00 8e 01 1b 3e 18 32 01 10 f9 55 0c 26
>026ec8	58 40 19 32 06 22 67 10 98 4d 00 00 1c 00 8f 01
>026ed8	1b 3e 18 32 0b 24 04 10 0e a9 03 20 a7 c2 19 32
>026ee8	06 22 04 10 72 68 00 00 1a 00 90 01 1b 3e 18 32
>026ef8	0b 24 67 b2 03 20 ac 60 19 32 06 22 0b 24 cb 92
>026f08	00 00 20 00 91 01 1b 3e 18 32 6a d8 2e d1 03 40
>026f18	19 32 0d 26 e3 d3 04 40 19 32 19 32 06 22 00 40
>026f28	00 00 20 00 92 01 1b 3e 18 32 4c ca 5d c6 0a 24
>026f38	f4 db 09 d0 02 40 19 32 19 32 06 22 03 10 02 6a
>026f48	00 00 1c 00 93 01 1b 3e 18 32 0b 24 06 10 3f 93
>026f58	0d 26 10 40 19 32 06 22 0b 24 33 75 00 00 20 00
>026f68	94 01 1b 3e 18 32 0b 24 43 40 0a 24 d5 d9 79 d0
>026f78	01 40 19 32 19 32 06 22 0b 24 53 40 00 00 22 00
>026f88	95 01 1b 3e 18 32 0b 24 06 10 69 ae 02 20 aa dd
>026f98	5f d3 00 40 19 32 19 32 06 22 0b 24 01 4a 00 00
>026fa8	1e 00 96 01 1b 3e 18 32 07 10 63 40 0d 26 0b 24
>026fb8	01 10 6c ba 19 32 06 22 0b 24 03 40 00 00 20 00
>026fc8	97 01 1b 3e 18 32 23 ca 01 c0 03 20 52 da 0c d0
>026fd8	05 40 19 32 19 32 06 22 04 10 27 b1 00 00 1a 00
>026fe8	98 01 1b 3e 18 32 24 cc 2b c3 0d 26 d9 cd 74 c5
>026ff8	19 32 06 22 00 40 00 00 1c 00 99 01 1b 3e 18 32
>027008	06 10 98 62 0d 26 0b 24 45 40 19 32 06 22 0b 24
>027018	a1 4b 00 00 20 00 9a 01 1b 3e 18 32 0b 24 20 40
>027028	0a 24 0b 24 04 10 56 bf 19 32 06 22 0b 24 04 10
>027038	76 bf 00 00 1a 00 9b 01 1b 3e 18 32 06 cd 0a c0
>027048	0a 24 ad 96 19 32 06 22 01 10 94 84 00 00 1e 00
>027058	9c 01 1b 3e 18 32 16 d0 01 40 19 32 0d 26 09 d0
>027068	06 40 19 32 19 32 06 22 01 40 00 00 1c 00 9d 01
>027078	1b 3e 18 32 a4 bf 0b 24 0b 24 04 10 fe 77 19 32
>027088	06 22 05 10 a2 77 00 00 1e 00 9e 01 1b 3e 18 32
>027098	11 40 0a 24 02 d5 00 40 19 32 19 32 06 22 0b 24
>0270a8	06 10 58 ae 00 00 22 00 9f 01 1b 3e 18 32 cc c8
>0270b8	28 c2 02 20 2d dd 7c d2 02 40 19 32 19 32 06 22
>0270c8	0b 24 02 10 07 a0 00 00 1c 00 a0 01 1b 3e 18 32
>0270d8	58 ce 12 c0 03 20 2e ca 1d c0 19 32 06 22 05 10
>0270e8	0f a2 00 00 1a 00 a1 01 1b 3e 18 32 04 10 47 91
>0270f8	02 20 2e c6 19 32 06 22 06 10 d7 9b 00 00 1e 00
>027108	a2 01 1b 3e 18 32 2d dd 7c d2 02 40 19 32 03 20
>027118	01 c0 19 32 06 22 02 10 08 53 00 00 1c 00 a3 01
>027128	1b 3e 18 32 13 40 0b 24 02 10 b7 64 19 32 06 22
>027138	0b 24 02 10 a4 64 00 00 1e 00 a4 01 1b 3e 18 32
>027148	cb d0 00 40 19 32 0a 24 05 10 e3 8c 19 32 06 22
>027158	0b 10 5c 92 00 00 24 00 a5 01 1b 3e 18 32 5f db
>027168	0e d0 03 40 19 32 0a 24 fe dc 1d d5 02 40 19 32
>027178	19 32 06 22 03 10 bf b8 00 00 22 00 a6 01 1b 3e
>027188	18 32 0b 24 3e 40 0b 24 10 dc 21 d3 03 40 19 32
>027198	19 32 06 22 0b 24 01 10 12 a2 00 00 1e 00 a7 01
>0271a8	1b 3e 18 32 0b 24 21 40 0a 24 62 d6 00 40 19 32
>0271b8	19 32 06 22 05 10 85 6d 00 00 1c 00 a8 01 1b 3e
>0271c8	18 32 0b 24 63 40 0a 24 03 10 d8 b8 19 32 06 22
>0271d8	03 10 75 b8 00 00 1e 00 a9 01 1b 3e 18 32 70 c9
>0271e8	05 c0 0b 24 0b 24 03 10 9f 6f 19 32 06 22 06 10
>0271f8	ae 6b 00 00 1c 00 aa 01 1b 3e 18 32 0b 24 01 10
>027208	23 a6 03 20 30 c6 19 32 06 22 03 10 43 a5 00 00
>027218	18 00 ab 01 1b 3e 18 32 0b 24 97 65 03 20 a7 c2
>027228	19 32 06 22 e9 a4 00 00 1a 00 ac 01 1b 3e 18 32
>027238	2a 40 02 20 d9 cd 74 c5 19 32 06 22 05 10 ee 78
>027248	00 00 24 00 ad 01 1b 3e 18 32 d5 d9 79 d0 02 40
>027258	19 32 0b 24 71 d0 01 40 19 32 19 32 06 22 0b 24
>027268	0c 10 e5 42 00 00 1c 00 ae 01 1b 3e 18 32 0b 24
>027278	80 81 0c 26 0b 24 1c 40 19 32 06 22 0e 10 00 6a
>027288	00 00 20 00 af 01 1b 3e 18 32 9f d8 19 d0 01 40
>027298	19 32 02 20 94 cc 06 c0 19 32 06 22 03 10 df 5f
>0272a8	00 00 1c 00 b0 01 1b 3e 18 32 b7 c5 0d 26 a2 dd
>0272b8	53 d5 00 40 19 32 19 32 06 22 00 40 00 00 22 00
>0272c8	b1 01 1b 3e 18 32 0b 24 05 10 e7 5d 0b 24 cf d5
>0272d8	00 40 19 32 19 32 06 22 0b 24 04 10 a7 4b 00 00
>0272e8	24 00 b2 01 1b 3e 18 32 1a d0 03 40 19 32 03 20
>0272f8	af dd a7 d3 01 40 19 32 19 32 06 22 0b 24 06 10
>027308	16 b2 00 00 1e 00 b3 01 1b 3e 18 32 2d 40 0a 24
>027318	0b 24 07 10 a9 53 19 32 06 22 0b 24 07 10 7c 53
>027328	00 00 1e 00 b4 01 1b 3e 18 32 12 d3 04 40 19 32
>027338	0d 26 c5 d4 02 40 19 32 19 32 06 22 00 40 00 00
>027348	1a 00 b5 01 1b 3e 18 32 ea ca 1b c0 03 20 a7 c2
>027358	19 32 06 22 05 10 00 78 00 00 20 00 b6 01 1b 3e
>027368	18 32 0f c0 0b 24 38 d8 dc d1 04 40 19 32 19 32
>027378	06 22 0b 24 07 10 78 53 00 00 1c 00 b7 01 1b 3e
>027388	18 32 24 cd 7a c2 02 20 0e cc 0d c0 19 32 06 22
>027398	0b 24 04 40 00 00 1c 00 b8 01 1b 3e 18 32 52 40
>0273a8	03 20 d3 dd 24 d0 03 40 19 32 19 32 06 22 09 40
>0273b8	00 00 1e 00 b9 01 1b 3e 18 32 0b 24 06 10 20 66
>0273c8	03 20 0b 24 03 40 19 32 06 22 06 10 1d 66 00 00
>0273d8	20 00 ba 01 1b 3e 18 32 e5 dd 24 d0 00 40 19 32
>0273e8	01 20 01 c0 19 32 06 22 0b 24 03 10 f8 bb 00 00
>0273f8	1e 00 bb 01 1b 3e 18 32 51 dc 78 d4 01 40 19 32
>027408	03 20 32 cd 82 c5 19 32 06 22 22 40 00 00 1c 00
>027418	bc 01 1b 3e 18 32 0a c0 01 20 24 cc 2b c3 19 32
>027428	06 22 0b 24 04 10 5e 48 00 00 20 00 bd 01 1b 3e
>027438	18 32 23 ca 01 c0 01 20 0b 24 04 10 10 be 19 32
>027448	06 22 0b 24 04 10 80 bf 00 00 1a 00 be 01 1b 3e
>027458	18 32 0b 24 05 10 5d a9 01 20 58 40 19 32 06 22
>027468	00 40 00 00 1e 00 bf 01 1b 3e 18 32 d9 cd 74 c5
>027478	03 20 0b 24 05 10 11 90 19 32 06 22 0b 24 ff a8
>027488	00 00 22 00 c0 01 1b 3e 18 32 9a db 10 d2 01 40
>027498	19 32 0b 24 06 10 79 45 19 32 06 22 0b 24 0b 10
>0274a8	06 88 00 00 18 00 c1 01 1b 3e 18 32 14 c0 0b 24
>0274b8	0b 24 47 40 19 32 06 22 b7 5b 00 00 1a 00 c2 01
>0274c8	1b 3e 18 32 52 40 0c 26 0b 24 3e 40 19 32 06 22
>0274d8	0b 24 dc 53 00 00 1c 00 c3 01 1b 3e 18 32 07 10
>0274e8	5b 50 03 20 02 10 ac 90 19 32 06 22 05 10 f7 80
>0274f8	00 00 22 00 c4 01 1b 3e 18 32 6b d4 02 40 19 32
>027508	03 20 12 d3 05 40 19 32 19 32 06 22 0b 24 04 10
>027518	d6 71 00 00 1c 00 c5 01 1b 3e 18 32 6b c6 0c 26
>027528	04 10 47 91 19 32 06 22 0b 24 bc 11 a0 ba 00 00
>027538	20 00 c6 01 1b 3e 18 32 cf d5 01 40 19 32 03 20
>027548	0e cc 0d c0 19 32 06 22 0b 24 06 10 0c 50 00 00
>027558	1a 00 c7 01 1b 3e 18 32 a7 c2 01 20 05 10 49 8d
>027568	19 32 06 22 05 10 00 4c 00 00 20 00 c8 01 1b 3e
>027578	18 32 63 ca d6 c5 03 20 0b 24 06 10 8c 5f 19 32
>027588	06 22 0b 24 06 10 da 5f 00 00 1a 00 c9 01 1b 3e
>027598	18 32 30 c6 0c 26 32 cd 82 c5 19 32 06 22 61 10
>0275a8	60 62 00 00 16 00 ca 01 1b 3e 18 32 1d 40 0a 24
>0275b8	1a c5 19 32 06 22 14 40 00 00 20 00 cb 01 1b 3e
>0275c8	18 32 90 cb 5d c0 03 20 06 d0 01 40 19 32 19 32
>0275d8	06 22 0b 24 02 10 fc 7e 00 00 20 00 cc 01 1b 3e
>0275e8	18 32 01 c0 0a 24 27 dd 21 d0 00 40 19 32 19 32
>0275f8	06 22 0b 24 05 10 78 9d 00 00 1c 00 cd 01 1b 3e
>027608	18 32 12 d3 05 40 19 32 01 20 a0 c9 04 c0 19 32
>027618	06 22 11 40 00 00 1e 00 ce 01 1b 3e 18 32 0b 24
>027628	04 10 10 be 03 20 44 40 19 32 06 22 0b 24 04 10
>027638	4c be 00 00 1e 00 cf 01 1b 3e 18 32 05 10 a7 b6
>027648	01 20 12 d6 00 40 19 32 19 32 06 22 05 10 27 80
>027658	00 00 1e 00 d0 01 1b 3e 18 32 0b 24 67 b2 03 20
>027668	0b 24 07 10 f4 6d 19 32 06 22 07 10 95 9f 00 00
>027678	1a 00 d1 01 1b 3e 18 32 88 cb 36 c0 03 20 52 40
>027688	19 32 06 22 03 10 7c 6b 00 00 22 00 d2 01 1b 3e
>027698	18 32 e3 da 0f d6 01 40 19 32 0a 24 65 ce 7d c0
>0276a8	19 32 06 22 0b 24 09 10 38 7e 00 00 20 00 d3 01
>0276b8	1b 3e 18 32 06 10 40 96 0a 24 da d9 fb d3 03 40
>0276c8	19 32 19 32 06 22 02 10 f2 95 00 00 1e 00 d4 01
>0276d8	1b 3e 18 32 c9 cc 1e c0 03 20 0b 24 05 10 e9 4d
>0276e8	19 32 06 22 05 10 84 7a 00 00 1c 00 d5 01 1b 3e
>0276f8	18 32 50 dd 69 d3 02 40 19 32 0c 26 3f c3 19 32
>027708	06 22 70 51 00 00 24 00 d6 01 1b 3e 18 32 ab d9
>027718	03 d0 04 40 19 32 02 20 11 d0 01 40 19 32 19 32
>027728	06 22 0b 24 04 10 85 79 00 00 26 00 d7 01 1b 3e
>027738	18 32 c0 db 15 d0 01 40 19 32 0a 24 52 da 0c d0
>027748	01 40 19 32 19 32 06 22 0b 24 05 10 64 a7 00 00
>027758	1c 00 d8 01 1b 3e 18 32 04 10 47 91 03 20 02 10
>027768	67 a3 19 32 06 22 06 10 20 72 00 00 16 00 d9 01
>027778	1b 3e 18 32 18 40 0b 24 a7 c2 19 32 06 22 98 81
>027788	00 00 20 00 da 01 1b 3e 18 32 0b 24 07 10 16 4b
>027798	02 20 0b cb 19 c0 19 32 06 22 0b 24 03 10 06 4a
>0277a8	00 00 1e 00 db 01 1b 3e 18 32 41 cc c9 c4 0b 24
>0277b8	69 c8 b3 c3 19 32 06 22 0b 24 05 10 fb 95 00 00
>0277c8	1c 00 dc 01 1b 3e 18 32 a6 cc 03 c6 0a 24 88 c5
>0277d8	19 32 06 22 0b 24 04 10 73 7b 00 00 1c 00 dd 01
>0277e8	1b 3e 18 32 ea ca 1b c0 0c 26 13 40 19 32 06 22
>0277f8	0b 24 71 10 80 44 00 00 1e 00 de 01 1b 3e 18 32
>027808	0b 24 02 10 6a ba 0c 26 4f 40 19 32 06 22 0b 24
>027818	e9 10 b6 86 00 00 18 00 df 01 1b 3e 18 32 0e c0
>027828	0b 24 e7 ad 19 32 06 22 0b 24 07 ae 00 00 1e 00
>027838	e0 01 1b 3e 18 32 10 c9 53 c2 03 20 90 cb 5d c0
>027848	19 32 06 22 0b 24 01 10 26 4f 00 00 24 00 e1 01
>027858	1b 3e 18 32 0b 24 07 10 66 88 02 20 28 dd 05 d0
>027868	05 40 19 32 19 32 06 22 0b 24 02 10 65 80 00 00
>027878	1e 00 e2 01 1b 3e 18 32 01 10 7d 9f 03 20 c5 d4
>027888	02 40 19 32 19 32 06 22 06 10 02 bc 00 00 1e 00
>027898	e3 01 1b 3e 18 32 9a db 10 d2 02 40 19 32 01 20
>0278a8	27 ca 0c c0 19 32 06 22 0a 40 00 00 24 00 e4 01
>0278b8	1b 3e 18 32 0b 24 03 10 02 b5 0a 24 9f d8 19 d0
>0278c8	02 40 19 32 19 32 06 22 0b 24 03 10 fe b4 00 00
>0278d8	24 00 e5 01 1b 3e 18 32 0b 24 05 10 d8 61 03 20
>0278e8	e2 d8 97 d5 06 40 19 32 19 32 06 22 0b 24 05 10
>0278f8	c6 61 00 00 20 00 e6 01 1b 3e 18 32 52 40 03 20
>027908	f4 db 09 d0 01 40 19 32 19 32 06 22 0b 24 07 10
>027918	c6 5d 00 00 1e 00 e7 01 1b 3e 18 32 d6 d2 02 40
>027928	19 32 0d 26 0b 24 07 10 40 88 19 32 06 22 00 40
>027938	00 00 1e 00 e8 01 1b 3e 18 32 f5 c8 0d c0 03 20
>027948	0b 24 0d 40 19 32 06 22 0b 24 04 10 1d b6 00 00
>027958	1a 00 e9 01 1b 3e 18 32 0b 24 5e 40 01 20 01 c0
>027968	19 32 06 22 0b 24 80 b2 00 00 20 00 ea 01 1b 3e
>027978	18 32 d9 cd 74 c5 0b 24 f2 dc 83 d2 03 40 19 32
>027988	19 32 06 22 05 10 0f 79 00 00 1c 00 eb 01 1b 3e
>027998	18 32 03 10 ae a7 02 20 01 10 f9 55 19 32 06 22
>0279a8	03 10 ff b7 00 00 20 00 ec 01 1b 3e 18 32 0b 24
>0279b8	05 10 80 b9 03 20 0b 24 06 10 68 7e 19 32 06 22
>0279c8	03 10 18 87 00 00 20 00 ed 01 1b 3e 18 32 2d dd
>0279d8	7c d2 02 40 19 32 03 20 13 d0 04 40 19 32 19 32
>0279e8	06 22 cc 82 00 00 20 00 ee 01 1b 3e 18 32 aa dd
>0279f8	40 d2 02 40 19 32 01 20 04 10 10 b6 19 32 06 22
>027a08	04 10 00 a2 00 00 1c 00 ef 01 1b 3e 18 32 09 d0
>027a18	02 40 19 32 0a 24 50 40 19 32 06 22 04 10 d8 71
>027a28	00 00 1e 00 f0 01 1b 3e 18 32 0b 24 52 40 0a 24
>027a38	42 d8 17 d0 01 40 19 32 19 32 06 22 1a a6 00 00
>027a48	1c 00 f1 01 1b 3e 18 32 09 d0 04 40 19 32 0b 24
>027a58	33 40 19 32 06 22 03 10 63 b6 00 00 1a 00 f2 01
>027a68	1b 3e 18 32 0b 24 06 10 47 5a 0d 26 3f c3 19 32
>027a78	06 22 8a 48 00 00 22 00 f3 01 1b 3e 18 32 0b 24
>027a88	05 10 d8 61 0b 24 0b 24 02 10 62 43 19 32 06 22
>027a98	0b 24 03 10 76 5e 00 00 26 00 f4 01 1b 3e 18 32
>027aa8	ff dc 0b d0 02 40 19 32 03 20 73 dc 86 d5 02 40
>027ab8	19 32 19 32 06 22 0b 24 07 10 3c b4 00 00 1a 00
>027ac8	f5 01 1b 3e 18 32 0b 24 5d 40 03 20 51 40 19 32
>027ad8	06 22 0b 24 0e 40 00 00 18 00 f6 01 1b 3e 18 32
>027ae8	5b 40 03 20 01 c0 19 32 06 22 0b 24 3e b2 00 00
>027af8	1c 00 f7 01 1b 3e 18 32 25 d5 01 40 19 32 03 20
>027b08	0b 24 30 40 19 32 06 22 15 40 00 00 20 00 f8 01
>027b18	1b 3e 18 32 0b 24 32 40 01 20 ab d9 03 d0 06 40
>027b28	19 32 19 32 06 22 0b 24 76 40 00 00 20 00 f9 01
>027b38	1b 3e 18 32 0b 24 07 10 a9 53 01 20 fc c9 e4 c5
>027b48	19 32 06 22 0b 24 07 10 ef 9f 00 00 1a 00 fa 01
>027b58	1b 3e 18 32 01 10 57 48 0c 26 0b 40 19 32 06 22
>027b68	0b 10 bd 9b 00 00 18 00 fb 01 1b 3e 18 32 12 40
>027b78	0d 26 88 cb 36 c0 19 32 06 22 00 40 00 00 1e 00
>027b88	fc 01 1b 3e 18 32 48 40 0c 26 0b 24 04 10 ed 4e
>027b98	19 32 06 22 0b 24 28 11 a8 72 00 00 1c 00 fd 01
>027ba8	1b 3e 18 32 0b 24 01 10 23 a6 01 20 85 c5 19 32
>027bb8	06 22 02 10 80 50 00 00 1e 00 fe 01 1b 3e 18 32
>027bc8	70 c9 11 c0 03 20 06 cd 0a c0 19 32 06 22 0b 24
>027bd8	04 10 71 66 00 00 20 00 ff 01 1b 3e 18 32 fe d4
>027be8	05 40 19 32 0b 24 0b 24 60 40 19 32 06 22 0b 24
>027bf8	02 10 e3 a0 00 00 22 00 00 02 1b 3e 18 32 fe d4
>027c08	01 40 19 32 0b 24 9f d4 03 40 19 32 19 32 06 22
>027c18	0b 24 06 10 92 9d 00 00 20 00 01 02 1b 3e 18 32
>027c28	0b 24 47 40 0c 26 2d dd 7c d2 03 40 19 32 19 32
>027c38	06 22 13 12 33 5d 00 00 20 00 02 02 1b 3e 18 32
>027c48	10 dc 21 d3 00 40 19 32 0a 24 05 10 ee 78 19 32
>027c58	06 22 05 10 ef 78 00 00 1c 00 03 02 1b 3e 18 32
>027c68	c6 cc de c4 03 20 0b 24 0d 40 19 32 06 22 05 10
>027c78	ea 5d 00 00 1c 00 04 02 1b 3e 18 32 06 cd 0a c0
>027c88	03 20 fc c9 12 c0 19 32 06 22 0b 24 ec ad 00 00
>027c98	20 00 05 02 1b 3e 18 32 0b 24 01 10 6c 8c 03 20
>027ca8	87 ca 79 c2 19 32 06 22 0b 24 05 10 38 6d 00 00
>027cb8	1a 00 06 02 1b 3e 18 32 1d 40 02 20 03 10 96 b6
>027cc8	19 32 06 22 03 10 9f b6 00 00 20 00 07 02 1b 3e
>027cd8	18 32 05 10 a7 b6 03 20 0b 24 04 10 7f b1 19 32
>027ce8	06 22 0b 24 01 10 da 47 00 00 1c 00 08 02 1b 3e
>027cf8	18 32 07 10 44 6c 03 20 05 10 11 7c 19 32 06 22
>027d08	02 10 55 50 00 00 20 00 09 02 1b 3e 18 32 0b 24
>027d18	05 10 5e 7c 01 20 20 ca 0e c0 19 32 06 22 0b 24
>027d28	07 10 5e bd 00 00 1c 00 0a 02 1b 3e 18 32 70 c9
>027d38	05 c0 01 20 fe d4 04 40 19 32 19 32 06 22 0a 40
>027d48	00 00 1a 00 0b 02 1b 3e 18 32 87 c3 02 20 07 10
>027d58	87 5e 19 32 06 22 0b 24 31 40 00 00 1e 00 0c 02
>027d68	1b 3e 18 32 04 10 00 76 0b 24 05 10 ee 78 19 32
>027d78	06 22 0b 24 01 10 ee 42 00 00 1c 00 0d 02 1b 3e
>027d88	18 32 0b 24 6d 77 0a 24 e4 d5 05 40 19 32 19 32
>027d98	06 22 37 88 00 00 1e 00 0e 02 1b 3e 18 32 4f dd
>027da8	2d d6 03 40 19 32 02 20 2a 40 19 32 06 22 06 10
>027db8	7b 9e 00 00 1e 00 0f 02 1b 3e 18 32 03 10 6f 48
>027dc8	02 20 16 d0 03 40 19 32 19 32 06 22 03 10 6f 6a
>027dd8	00 00 22 00 10 02 1b 3e 18 32 aa dd 5f d3 02 40
>027de8	19 32 03 20 0b 24 04 10 7b ac 19 32 06 22 04 10
>027df8	72 ac 00 00 20 00 11 02 1b 3e 18 32 0b 24 05 10
>027e08	80 b9 0b 24 0b 24 63 40 19 32 06 22 0b 24 05 10
>027e18	1d b9 00 00 1e 00 12 02 1b 3e 18 32 0b 24 52 40
>027e28	0b 24 0b 24 04 10 fe 77 19 32 06 22 04 10 ac 77
>027e38	00 00 1c 00 13 02 1b 3e 18 32 0b 24 01 10 2f 6c
>027e48	0d 26 0a 40 19 32 06 22 0b 24 37 51 00 00 20 00
>027e58	14 02 1b 3e 18 32 0b 24 45 40 0a 24 0b 24 04 10
>027e68	fe 77 19 32 06 22 0b 24 04 10 43 78 00 00 1c 00
>027e78	15 02 1b 3e 18 32 0b 24 1c 40 0a 24 01 10 f9 55
>027e88	19 32 06 22 01 10 dd 55 00 00 1e 00 16 02 1b 3e
>027e98	18 32 8b d5 03 40 19 32 02 20 ea c8 1b c0 19 32
>027ea8	06 22 0b 24 46 40 00 00 16 00 17 02 1b 3e 18 32
>027eb8	58 40 03 20 5f c5 19 32 06 22 00 40 00 00 1e 00
>027ec8	18 02 1b 3e 18 32 aa dd 40 d2 01 40 19 32 0b 24
>027ed8	0b 24 33 44 19 32 06 22 35 44 00 00 18 00 19 02
>027ee8	1b 3e 18 32 87 c3 0a 24 06 cd 0a c0 19 32 06 22
>027ef8	af ad 00 00 1e 00 1a 02 1b 3e 18 32 e3 d3 03 40
>027f08	19 32 03 20 03 10 9b 64 19 32 06 22 03 10 c8 64
>027f18	00 00 1c 00 1b 02 1b 3e 18 32 62 d6 04 40 19 32
>027f28	02 20 73 c1 19 32 06 22 0b 24 01 40 00 00 1c 00
>027f38	1c 02 1b 3e 18 32 13 c4 0c 26 0b 24 1c 40 19 32
>027f48	06 22 0b 24 ae 10 90 79 00 00 1a 00 1d 02 1b 3e
>027f58	18 32 13 c4 03 20 41 cc c9 c4 19 32 06 22 06 10
>027f68	d0 7d 00 00 1a 00 1e 02 1b 3e 18 32 04 10 5c a1
>027f78	03 20 04 10 10 b6 19 32 06 22 4c 57 00 00 1e 00
>027f88	1f 02 1b 3e 18 32 df cb 2b c2 03 20 03 10 2e 6b
>027f98	19 32 06 22 0b 24 05 10 ae 6e 00 00 1a 00 20 02
>027fa8	1b 3e 18 32 03 10 22 91 0b 24 a7 c2 19 32 06 22
>027fb8	04 10 a2 52 00 00 24 00 21 02 1b 3e 18 32 e3 da
>027fc8	7e d2 01 40 19 32 03 20 0b 24 01 10 23 a6 19 32
>027fd8	06 22 0b 24 06 10 d7 94 00 00 1c 00 22 02 1b 3e
>027fe8	18 32 d3 dd 24 d0 00 40 19 32 0b 24 12 40 19 32
>027ff8	06 22 3d 40 00 00 1a 00 23 02 1b 3e 18 32 03 40
>028008	02 20 0b 24 0d 40 19 32 06 22 0b 24 0d 40 00 00
>028018	20 00 24 02 1b 3e 18 32 d5 d9 79 d0 03 40 19 32
>028028	0b 24 fe d4 03 40 19 32 19 32 06 22 20 40 00 00
>028038	1e 00 25 02 1b 3e 18 32 50 dd 69 d3 05 40 19 32
>028048	02 20 13 c4 19 32 06 22 06 10 7f 5d 00 00 20 00
>028058	26 02 1b 3e 18 32 3b 40 03 20 ab d9 03 d0 00 40
>028068	19 32 19 32 06 22 0b 24 05 10 3a 4d 00 00 1c 00
>028078	27 02 1b 3e 18 32 0b 24 e7 6a 01 20 e4 d5 01 40
>028088	19 32 19 32 06 22 01 40 00 00 1e 00 28 02 1b 3e
>028098	18 32 f9 c9 02 c0 03 20 02 10 0f bc 19 32 06 22
>0280a8	0b 24 03 10 2e 5a 00 00 18 00 29 02 1b 3e 18 32
>0280b8	02 10 57 41 0d 26 1d 40 19 32 06 22 df 48 00 00
>0280c8	1c 00 2a 02 1b 3e 18 32 02 d5 00 40 19 32 03 20
>0280d8	bc cb 24 c0 19 32 06 22 40 73 00 00 1a 00 2b 02
>0280e8	1b 3e 18 32 12 d0 01 40 19 32 0d 26 95 c3 19 32
>0280f8	06 22 00 40 00 00 1e 00 2c 02 1b 3e 18 32 0b 24
>028108	05 10 1e 6a 01 20 06 10 7c 5d 19 32 06 22 02 10
>028118	60 55 00 00 18 00 2d 02 1b 3e 18 32 dd 63 0b 24
>028128	0b 24 0c 40 19 32 06 22 e9 63 00 00 20 00 2e 02
>028138	1b 3e 18 32 0b 24 09 40 02 20 e3 da 7e d2 04 40
>028148	19 32 19 32 06 22 0b 24 01 40 00 00 24 00 2f 02
>028158	1b 3e 18 32 0b 24 01 10 23 a6 02 20 6f db 35 d3
>028168	03 40 19 32 19 32 06 22 0b 24 01 10 21 80 00 00
>028178	22 00 30 02 1b 3e 18 32 05 d0 05 40 19 32 0a 24
>028188	0b 24 01 10 6b 4f 19 32 06 22 0b 24 01 10 54 4f
>028198	00 00 1e 00 31 02 1b 3e 18 32 0b 24 01 10 80 9e
>0281a8	03 20 0b 24 0d 40 19 32 06 22 01 10 73 9e 00 00
>0281b8	1e 00 32 02 1b 3e 18 32 0b 24 02 10 62 43 0a 24
>0281c8	03 10 6f 48 19 32 06 22 01 10 0d 45 00 00 18 00
>0281d8	33 02 1b 3e 18 32 0b 24 3c 40 01 20 13 40 19 32
>0281e8	06 22 00 40 00 00 1a 00 34 02 1b 3e 18 32 0e cc
>0281f8	0d c0 0d 26 06 10 ee 82 19 32 06 22 00 40 00 00
>028208	1e 00 35 02 1b 3e 18 32 03 d0 00 40 19 32 0d 26
>028218	fc c9 12 c0 19 32 06 22 0b 24 68 4f 00 00 1c 00
>028228	36 02 1b 3e 18 32 6c a6 01 20 17 d9 04 d1 06 40
>028238	19 32 19 32 06 22 44 66 00 00 1c 00 37 02 1b 3e
>028248	18 32 0b 24 01 10 80 9e 0d 26 76 c5 19 32 06 22
>028258	0b 24 ac 47 00 00 1a 00 38 02 1b 3e 18 32 02 10
>028268	b7 64 0d 26 07 10 5b 50 19 32 06 22 00 40 00 00
>028278	1a 00 39 02 1b 3e 18 32 87 c3 01 20 03 10 0f bc
>028288	19 32 06 22 03 10 08 bc 00 00 1e 00 3a 02 1b 3e
>028298	18 32 51 dc 78 d4 00 40 19 32 0c 26 30 40 19 32
>0282a8	06 22 be 10 e0 7e 00 00 1a 00 3b 02 1b 3e 18 32
>0282b8	0a 40 0d 26 0b 24 03 10 66 92 19 32 06 22 00 40
>0282c8	00 00 1c 00 3c 02 1b 3e 18 32 0e 40 0b 24 02 10
>0282d8	b4 6d 19 32 06 22 0b 24 02 10 a6 6d 00 00 1c 00
>0282e8	3d 02 1b 3e 18 32 04 10 ef 91 01 20 04 10 d6 9d
>0282f8	19 32 06 22 04 10 c6 91 00 00 16 00 3e 02 1b 3e
>028308	18 32 13 40 0c 26 3a 40 19 32 06 22 4e 44 00 00
>028318	1a 00 3f 02 1b 3e 18 32 8c 98 02 20 07 10 71 68
>028328	19 32 06 22 07 10 fd b8 00 00 20 00 40 02 1b 3e
>028338	18 32 9a db 10 d2 01 40 19 32 0a 24 17 c0 19 32
>028348	06 22 0b 24 05 10 9a 82 00 00 1e 00 41 02 1b 3e
>028358	18 32 0b 24 06 10 29 9d 03 20 09 c2 19 32 06 22
>028368	0b 24 07 10 9d 93 00 00 1e 00 42 02 1b 3e 18 32
>028378	23 dc 05 d0 02 40 19 32 0d 26 87 c3 19 32 06 22
>028388	0b 24 76 40 00 00 1a 00 43 02 1b 3e 18 32 0b cb
>028398	19 c0 0a 24 85 c5 19 32 06 22 07 10 78 9a 00 00
>0283a8	1a 00 44 02 1b 3e 18 32 06 10 66 7b 02 20 3d 94
>0283b8	19 32 06 22 06 10 7f bf 00 00 1e 00 45 02 1b 3e
>0283c8	18 32 10 c9 53 c2 0c 26 0b 24 84 bf 19 32 06 22
>0283d8	0b 24 4e 10 bc 99 00 00 1c 00 46 02 1b 3e 18 32
>0283e8	58 40 0b 24 0b 24 06 10 84 45 19 32 06 22 06 10
>0283f8	dc 45 00 00 1c 00 47 02 1b 3e 18 32 52 40 03 20
>028408	65 ce 7d c0 19 32 06 22 0b 24 04 10 b0 77 00 00
>028418	20 00 48 02 1b 3e 18 32 01 10 e9 88 03 20 0b 24
>028428	04 10 7f b1 19 32 06 22 0b 24 05 10 98 79 00 00
>028438	1c 00 49 02 1b 3e 18 32 03 10 9b 64 02 20 0b 24
>028448	03 40 19 32 06 22 0b 24 01 40 00 00 20 00 4a 02
>028458	1b 3e 18 32 01 10 48 73 0a 24 06 d0 04 40 19 32
>028468	19 32 06 22 0b 24 04 10 44 ac 00 00 1e 00 4b 02
>028478	1b 3e 18 32 46 40 03 20 0b 24 06 10 10 be 19 32
>028488	06 22 0b 24 06 10 4a be 00 00 1c 00 4c 02 1b 3e
>028498	18 32 03 10 2e 6b 02 20 0b 24 1c 40 19 32 06 22
>0284a8	0b 24 12 40 00 00 24 00 4d 02 1b 3e 18 32 70 d8
>0284b8	04 d3 03 40 19 32 01 20 9f d4 00 40 19 32 19 32
>0284c8	06 22 0b 24 07 10 80 ab 00 00 18 00 4e 02 1b 3e
>0284d8	18 32 07 10 71 68 0d 26 a3 c1 19 32 06 22 02 40
>0284e8	00 00 1a 00 4f 02 1b 3e 18 32 0b 24 6d 77 0d 26
>0284f8	01 10 b4 4e 19 32 06 22 00 40 00 00 1c 00 50 02
>028508	1b 3e 18 32 0b 24 02 10 62 43 0d 26 06 10 ea a9
>028518	19 32 06 22 00 40 00 00 1e 00 51 02 1b 3e 18 32
>028528	0b 24 04 10 11 ab 03 20 0b 24 30 40 19 32 06 22
>028538	04 10 3f ab 00 00 1c 00 52 02 1b 3e 18 32 b7 c5
>028548	0a 24 36 cb 97 c3 19 32 06 22 0b 24 05 10 a4 5c
>028558	00 00 1a 00 53 02 1b 3e 18 32 01 10 7d 9f 0b 24
>028568	00 40 19 32 06 22 01 10 7d 9f 00 00 20 00 54 02
>028578	1b 3e 18 32 0b c0 02 20 e3 da 0f d6 03 40 19 32
>028588	19 32 06 22 0b 24 06 10 07 61 00 00 1c 00 55 02
>028598	1b 3e 18 32 36 cb 97 c3 03 20 0b 24 3c 40 19 32
>0285a8	06 22 07 10 4b 47 00 00 20 00 56 02 1b 3e 18 32
>0285b8	5f db 0e d0 01 40 19 32 0d 26 0b 24 02 10 6a ba
>0285c8	19 32 06 22 00 40 00 00 1e 00 57 02 1b 3e 18 32
>0285d8	0b 24 01 10 bc 84 03 20 01 10 48 73 19 32 06 22
>0285e8	0b 24 f4 b7 00 00 20 00 58 02 1b 3e 18 32 70 c9
>0285f8	1b c0 01 20 23 dc 05 d0 01 40 19 32 19 32 06 22
>028608	04 10 90 85 00 00 22 00 59 02 1b 3e 18 32 38 d8
>028618	dc d1 00 40 19 32 0c 26 0b 24 01 10 46 5e 19 32
>028628	06 22 59 10 b0 43 00 00 20 00 5a 02 1b 3e 18 32
>028638	10 dc 21 d3 03 40 19 32 02 20 1f c9 2a c1 19 32
>028648	06 22 03 10 ff a9 00 00 1a 00 5b 02 1b 3e 18 32
>028658	44 40 02 20 0b 24 10 40 19 32 06 22 0b 24 0c 40
>028668	00 00 24 00 5c 02 1b 3e 18 32 5f db 0e d0 01 40
>028678	19 32 03 20 e3 da 0f d6 03 40 19 32 19 32 06 22
>028688	06 10 a5 7c 00 00 1c 00 5d 02 1b 3e 18 32 05 10
>028698	4e 95 0a 24 02 10 85 71 19 32 06 22 08 10 d3 46
>0286a8	00 00 22 00 5e 02 1b 3e 18 32 0b 24 07 10 a9 53
>0286b8	03 20 cb d0 00 40 19 32 19 32 06 22 0b 24 01 10
>0286c8	d2 56 00 00 20 00 5f 02 1b 3e 18 32 c6 cb 1a c0
>0286d8	03 20 aa dd 40 d2 02 40 19 32 19 32 06 22 05 10
>0286e8	73 a3 00 00 20 00 60 02 1b 3e 18 32 6b d4 00 40
>0286f8	19 32 0d 26 0b 24 02 10 6f a1 19 32 06 22 0b 24
>028708	02 40 00 00 1c 00 61 02 1b 3e 18 32 01 40 0b 24
>028718	05 10 11 7c 19 32 06 22 0b 24 05 10 10 7c 00 00
>028728	1a 00 62 02 1b 3e 18 32 8c c8 68 c5 0c 26 0b 24
>028738	32 40 19 32 06 22 5c 52 00 00 1a 00 63 02 1b 3e
>028748	18 32 03 10 db 43 01 20 a3 c1 19 32 06 22 02 10
>028758	43 43 00 00 20 00 64 02 1b 3e 18 32 27 ca 0c c0
>028768	03 20 12 d6 03 40 19 32 19 32 06 22 0b 24 06 10
>028778	a8 5e 00 00 18 00 65 02 1b 3e 18 32 14 c0 0d 26
>028788	01 10 e3 9f 19 32 06 22 00 40 00 00 1c 00 66 02
>028798	1b 3e 18 32 01 10 7d 9f 03 20 06 10 40 96 19 32
>0287a8	06 22 07 10 3d 49 00 00 24 00 67 02 1b 3e 18 32
>0287b8	73 dc 86 d5 01 40 19 32 03 20 52 da 0c d0 01 40
>0287c8	19 32 19 32 06 22 0b 24 f1 90 00 00 22 00 68 02
>0287d8	1b 3e 18 32 87 d2 00 40 19 32 02 20 0b 24 04 10
>0287e8	86 7b 19 32 06 22 0b 24 04 10 06 52 00 00 1e 00
>0287f8	69 02 1b 3e 18 32 0b 24 5d 40 03 20 0b 24 07 10
>028808	71 47 19 32 06 22 07 10 2c 47 00 00 24 00 6a 02
>028818	1b 3e 18 32 e9 d8 02 d0 00 40 19 32 03 20 c6 dc
>028828	b8 d3 05 40 19 32 19 32 06 22 0b 24 40 40 00 00
>028838	1e 00 6b 02 1b 3e 18 32 13 40 03 20 d3 dd 24 d0
>028848	01 40 19 32 19 32 06 22 04 10 31 7c 00 00 20 00
>028858	6c 02 1b 3e 18 32 0b 24 06 10 84 45 0d 26 bd d0
>028868	00 40 19 32 19 32 06 22 0b 24 02 40 00 00 1e 00
>028878	6d 02 1b 3e 18 32 da c9 23 c0 0a 24 85 d3 01 40
>028888	19 32 19 32 06 22 04 10 53 6d 00 00 1a 00 6e 02
>028898	1b 3e 18 32 76 c5 02 20 0b 24 2b 40 19 32 06 22
>0288a8	0b 24 23 40 00 00 1a 00 6f 02 1b 3e 18 32 87 c3
>0288b8	0a 24 02 10 b7 64 19 32 06 22 02 10 7f 64 00 00
>0288c8	1c 00 70 02 1b 3e 18 32 0b 24 04 10 16 7e 0d 26
>0288d8	60 ce 69 c5 19 32 06 22 c5 61 00 00 22 00 71 02
>0288e8	1b 3e 18 32 ff dc 0b d0 01 40 19 32 03 20 0d d0
>0288f8	05 40 19 32 19 32 06 22 0b 24 5b 65 00 00 1c 00
>028908	72 02 1b 3e 18 32 01 10 04 5c 0a 24 2d cd 10 c0
>028918	19 32 06 22 01 10 4c 5c 00 00 20 00 73 02 1b 3e
>028928	18 32 0b 24 03 10 66 92 02 20 0b 24 04 10 1e 48
>028938	19 32 06 22 0b 24 06 40 00 00 1e 00 74 02 1b 3e
>028948	18 32 c0 db 15 d0 03 40 19 32 0c 26 13 40 19 32
>028958	06 22 0b 24 b5 41 00 00 1e 00 75 02 1b 3e 18 32
>028968	04 10 04 64 0a 24 a2 d5 01 40 19 32 19 32 06 22
>028978	08 10 3c 9f 00 00 1a 00 76 02 1b 3e 18 32 03 10
>028988	ea 4a 0d 26 04 10 5c a1 19 32 06 22 00 40 00 00
>028998	1a 00 77 02 1b 3e 18 32 51 40 01 20 0d d0 00 40
>0289a8	19 32 19 32 06 22 40 40 00 00 1a 00 78 02 1b 3e
>0289b8	18 32 06 10 25 6a 0d 26 03 10 ae a7 19 32 06 22
>0289c8	01 40 00 00 1e 00 79 02 1b 3e 18 32 04 10 0f a7
>0289d8	0b 24 0b 24 07 10 40 88 19 32 06 22 0c 10 4f 6f
>0289e8	00 00 20 00 7a 02 1b 3e 18 32 01 10 b4 4e 0b 24
>0289f8	38 d8 dc d1 05 40 19 32 19 32 06 22 01 10 97 4e
>028a08	00 00 1c 00 7b 02 1b 3e 18 32 2e c6 0b 24 0b 24
>028a18	05 10 7e b7 19 32 06 22 08 10 15 42 00 00 1a 00
>028a28	7c 02 1b 3e 18 32 0b 24 09 40 02 20 01 c0 19 32
>028a38	06 22 0b 24 01 40 00 00 20 00 7d 02 1b 3e 18 32
>028a48	0b 24 04 10 98 8b 01 20 02 d5 02 40 19 32 19 32
>028a58	06 22 02 10 60 70 00 00 18 00 7e 02 1b 3e 18 32
>028a68	46 40 0a 24 32 cd 82 c5 19 32 06 22 16 40 00 00
>028a78	20 00 7f 02 1b 3e 18 32 0b 24 09 40 03 20 0d d0
>028a88	04 40 19 32 19 32 06 22 0b 24 02 10 89 56 00 00
>028a98	22 00 80 02 1b 3e 18 32 0b 24 02 10 62 43 0d 26
>028aa8	c6 dc b8 d3 05 40 19 32 19 32 06 22 0b 24 5e 48
>028ab8	00 00 1e 00 81 02 1b 3e 18 32 0b 24 07 10 16 4b
>028ac8	03 20 0b 24 0d 40 19 32 06 22 07 10 19 4b 00 00
>028ad8	22 00 82 02 1b 3e 18 32 4d dd 1c d0 01 40 19 32
>028ae8	02 20 df cb 2b c2 19 32 06 22 0b 24 02 10 83 41
>028af8	00 00 24 00 83 02 1b 3e 18 32 0b 24 03 10 02 b5
>028b08	01 20 e5 dd 24 d0 01 40 19 32 19 32 06 22 0b 24
>028b18	07 10 16 bd 00 00 18 00 84 02 1b 3e 18 32 01 10
>028b28	48 73 0d 26 17 40 19 32 06 22 cb 47 00 00 18 00
>028b38	85 02 1b 3e 18 32 52 40 02 20 27 ca 0c c0 19 32
>028b48	06 22 5a 40 00 00 1c 00 86 02 1b 3e 18 32 89 ca
>028b58	24 c0 0a 24 0b 24 11 40 19 32 06 22 03 10 d9 4a
>028b68	00 00 1c 00 87 02 1b 3e 18 32 3c ce 07 c0 03 20
>028b78	1f c9 2a c1 19 32 06 22 03 10 45 48 00 00 20 00
>028b88	88 02 1b 3e 18 32 02 10 40 69 03 20 0b 24 04 10
>028b98	7f b1 19 32 06 22 0b 24 06 10 3f 98 00 00 1a 00
>028ba8	89 02 1b 3e 18 32 e7 ad 01 20 fe d4 02 40 19 32
>028bb8	19 32 06 22 64 8d 00 00 18 00 8a 02 1b 3e 18 32
>028bc8	70 5b 0a 24 98 c3 19 32 06 22 02 10 27 80 00 00
>028bd8	20 00 8b 02 1b 3e 18 32 e3 da 7e d2 02 40 19 32
>028be8	0a 24 30 c6 19 32 06 22 0b 24 08 10 b3 b5 00 00
>028bf8	1e 00 8c 02 1b 3e 18 32 06 cd 0a c0 03 20 34 ce
>028c08	42 c4 19 32 06 22 0b 24 02 10 d4 97 00 00 1e 00
>028c18	8d 02 1b 3e 18 32 df cb 2b c2 02 20 02 10 1e 52
>028c28	19 32 06 22 0b 24 04 10 82 45 00 00 22 00 8e 02
>028c38	1b 3e 18 32 8c c8 68 c5 0a 24 14 de ad d2 04 40
>028c48	19 32 19 32 06 22 0b 24 06 10 3c 8e 00 00 1e 00
>028c58	8f 02 1b 3e 18 32 0b 24 48 40 02 20 12 d0 05 40
>028c68	19 32 19 32 06 22 0b 24 47 40 00 00 18 00 90 02
>028c78	1b 3e 18 32 0a c0 02 20 45 40 19 32 06 22 0b 24
>028c88	09 40 00 00 1c 00 91 02 1b 3e 18 32 0b 24 38 40
>028c98	01 20 06 10 25 6a 19 32 06 22 06 10 00 6a 00 00
>028ca8	20 00 92 02 1b 3e 18 32 21 cc 10 c0 0a 24 0b 24
>028cb8	04 10 08 80 19 32 06 22 0b 24 04 10 70 aa 00 00
>028cc8	20 00 93 02 1b 3e 18 32 9a db 10 d2 00 40 19 32
>028cd8	0b 24 0b 24 0c 40 19 32 06 22 03 10 3f 90 00 00
>028ce8	20 00 94 02 1b 3e 18 32 0b 24 04 10 ff 87 03 20
>028cf8	03 d3 00 40 19 32 19 32 06 22 04 10 a8 87 00 00
>028d08	1c 00 95 02 1b 3e 18 32 aa dd 40 d2 00 40 19 32
>028d18	01 20 51 40 19 32 06 22 40 40 00 00 16 00 96 02
>028d28	1b 3e 18 32 61 40 0c 26 0b 40 19 32 06 22 2b 44
>028d38	00 00 20 00 97 02 1b 3e 18 32 05 10 4e 95 0d 26
>028d48	38 d8 dc d1 04 40 19 32 19 32 06 22 0b 24 cd 4e
>028d58	00 00 20 00 98 02 1b 3e 18 32 51 dc 78 d4 02 40
>028d68	19 32 03 20 3a d6 02 40 19 32 19 32 06 22 b6 63
>028d78	00 00 1c 00 99 02 1b 3e 18 32 58 ce 12 c0 0b 24
>028d88	f1 cc 0f c0 19 32 06 22 08 10 bf 8c 00 00 1e 00
>028d98	9a 02 1b 3e 18 32 ea ca 1b c0 0b 24 46 d8 17 d0
>028da8	00 40 19 32 19 32 06 22 77 9a 00 00 1c 00 9b 02
>028db8	1b 3e 18 32 05 10 cf 5b 0d 26 0b 24 06 10 29 9d
>028dc8	19 32 06 22 00 40 00 00 1e 00 9c 02 1b 3e 18 32
>028dd8	01 10 f9 55 0b 24 04 10 d6 9d 19 32 06 22 0b 24
>028de8	03 10 dd 87 00 00 1e 00 9d 02 1b 3e 18 32 24 cd
>028df8	7a c2 0b 24 0b 24 06 10 37 9a 19 32 06 22 01 10
>028e08	6f 49 00 00 16 00 9e 02 1b 3e 18 32 30 40 0c 26
>028e18	52 40 19 32 06 22 60 4f 00 00 24 00 9f 02 1b 3e
>028e28	18 32 0b 24 04 10 0a 77 03 20 d3 dd 24 d0 02 40
>028e38	19 32 19 32 06 22 0b 24 07 10 8c 60 00 00 20 00
>028e48	a0 02 1b 3e 18 32 c6 d3 03 40 19 32 03 20 02 10
>028e58	a0 b4 19 32 06 22 0b 24 02 10 ea b4 00 00 1c 00
>028e68	a1 02 1b 3e 18 32 05 d0 00 40 19 32 0a 24 87 c3
>028e78	19 32 06 22 0b 24 8e 40 00 00 1e 00 a2 02 1b 3e
>028e88	18 32 02 10 85 71 0d 26 0b 24 01 10 40 52 19 32
>028e98	06 22 0b 24 02 40 00 00 1c 00 a3 02 1b 3e 18 32
>028ea8	01 10 e9 88 0d 26 0b 24 02 10 43 a1 19 32 06 22
>028eb8	00 40 00 00 1a 00 a4 02 1b 3e 18 32 01 10 f9 55
>028ec8	0b 24 2a 40 19 32 06 22 01 10 cf 55 00 00 1c 00
>028ed8	a5 02 1b 3e 18 32 fe dc 1d d5 02 40 19 32 01 20
>028ee8	57 40 19 32 06 22 47 40 00 00 1e 00 a6 02 1b 3e
>028ef8	18 32 a7 c4 03 20 39 de 1f d0 06 40 19 32 19 32
>028f08	06 22 01 10 78 9e 00 00 20 00 a7 02 1b 3e 18 32
>028f18	0b 24 2d 40 0c 26 e4 d5 05 40 19 32 19 32 06 22
>028f28	0b 24 2c 10 d4 af 00 00 1e 00 a8 02 1b 3e 18 32
>028f38	0b 24 04 10 90 6d 01 20 02 c6 19 32 06 22 0b 24
>028f48	04 10 a0 6d 00 00 1a 00 a9 02 1b 3e 18 32 2a 40
>028f58	03 20 03 10 82 93 19 32 06 22 03 10 a8 93 00 00
>028f68	20 00 aa 02 1b 3e 18 32 ff dc 0b d0 02 40 19 32
>028f78	0d 26 bd d0 01 40 19 32 19 32 06 22 00 40 00 00
>028f88	24 00 ab 02 1b 3e 18 32 9a db 10 d2 02 40 19 32
>028f98	0a 24 0b 24 05 10 c8 90 19 32 06 22 0b 24 07 10
>028fa8	09 a1 00 00 20 00 ac 02 1b 3e 18 32 0b 24 03 10
>028fb8	d4 9b 02 20 70 c9 1b c0 19 32 06 22 0b 24 03 10
>028fc8	02 42 00 00 1a 00 ad 02 1b 3e 18 32 04 10 d6 9d
>028fd8	02 20 15 c0 19 32 06 22 04 10 d6 9d 00 00 1e 00
>028fe8	ae 02 1b 3e 18 32 6f db 35 d3 01 40 19 32 0c 26
>028ff8	46 40 19 32 06 22 01 10 c2 57 00 00 1c 00 af 02
>029008	1b 3e 18 32 07 cb 1b c0 0a 24 05 10 ee 78 19 32
>029018	06 22 07 10 80 41 00 00 20 00 b0 02 1b 3e 18 32
>029028	0b 24 06 10 29 9d 02 20 01 10 7d 9f 19 32 06 22
>029038	0b 24 06 10 01 40 00 00 1c 00 b1 02 1b 3e 18 32
>029048	0b 24 03 40 01 20 04 10 d8 a5 19 32 06 22 04 10
>029058	d8 a5 00 00 1a 00 b2 02 1b 3e 18 32 3c ce 07 c0
>029068	0d 26 0b 24 84 bf 19 32 06 22 00 40 00 00 1c 00
>029078	b3 02 1b 3e 18 32 0b 24 0c 40 01 20 01 10 f9 55
>029088	19 32 06 22 01 10 f0 55 00 00 1a 00 b4 02 1b 3e
>029098	18 32 02 10 52 9e 0d 26 04 10 39 5a 19 32 06 22
>0290a8	00 40 00 00 1e 00 b5 02 1b 3e 18 32 03 10 18 82
>0290b8	02 20 03 d0 00 40 19 32 19 32 06 22 03 10 5a 8a
>0290c8	00 00 1a 00 b6 02 1b 3e 18 32 c1 d3 04 40 19 32
>0290d8	0c 26 0e c0 19 32 06 22 40 44 00 00 20 00 b7 02
>0290e8	1b 3e 18 32 0b 24 06 10 84 45 03 20 01 10 7d 9f
>0290f8	19 32 06 22 0b 24 07 10 ff 9a 00 00 24 00 b8 02
>029108	1b 3e 18 32 50 dd 69 d3 02 40 19 32 01 20 0b 24
>029118	03 10 28 41 19 32 06 22 0b 24 03 10 30 41 00 00
>029128	18 00 b9 02 1b 3e 18 32 12 40 01 20 24 cc 2b c3
>029138	19 32 06 22 02 40 00 00 18 00 ba 02 1b 3e 18 32
>029148	52 40 01 20 63 ca d6 c5 19 32 06 22 52 40 00 00
>029158	1c 00 bb 02 1b 3e 18 32 97 c8 19 c0 01 20 0b 24
>029168	56 40 19 32 06 22 0b 24 56 40 00 00 1e 00 bc 02
>029178	1b 3e 18 32 18 c0 0a 24 ff dc 0b d0 03 40 19 32
>029188	19 32 06 22 0a 10 50 a9 00 00 1e 00 bd 02 1b 3e
>029198	18 32 0b 24 04 10 1e 48 0a 24 18 40 19 32 06 22
>0291a8	0b 24 04 10 06 48 00 00 20 00 be 02 1b 3e 18 32
>0291b8	e4 d5 03 40 19 32 0a 24 04 10 d6 9d 19 32 06 22
>0291c8	0b 24 01 10 b5 73 00 00 22 00 bf 02 1b 3e 18 32
>0291d8	c6 dc b8 d3 00 40 19 32 03 20 01 10 b4 4e 19 32
>0291e8	06 22 0b 24 02 10 81 9a 00 00 22 00 c0 02 1b 3e
>0291f8	18 32 01 10 cd aa 03 20 76 dc 20 d0 02 40 19 32
>029208	19 32 06 22 0b 24 01 10 d3 aa 00 00 1a 00 c1 02
>029218	1b 3e 18 32 17 c0 02 20 10 c9 53 c2 19 32 06 22
>029228	0b 24 01 40 00 00 18 00 c2 02 1b 3e 18 32 5b 40
>029238	0d 26 21 cc 10 c0 19 32 06 22 00 40 00 00 20 00
>029248	c3 02 1b 3e 18 32 5a de 77 d4 01 40 19 32 03 20
>029258	a0 c9 04 c0 19 32 06 22 0b 24 6d 40 00 00 1e 00
>029268	c4 02 1b 3e 18 32 01 10 5f 76 03 20 0b 24 92 bb
>029278	19 32 06 22 0b 24 01 10 cf 8d 00 00 1e 00 c5 02
>029288	1b 3e 18 32 0b 24 2b 40 0b 24 0b 24 04 10 de b7
>029298	19 32 06 22 04 10 b3 b7 00 00 1c 00 c6 02 1b 3e
>0292a8	18 32 2d cd 10 c0 03 20 06 10 4c 54 19 32 06 22
>0292b8	06 10 04 54 00 00 1e 00 c7 02 1b 3e 18 32 0b 24
>0292c8	06 10 84 45 0d 26 02 10 56 60 19 32 06 22 0b 24
>0292d8	02 40 00 00 1a 00 c8 02 1b 3e 18 32 02 10 b7 64
>0292e8	03 20 02 10 a0 b4 19 32 06 22 17 90 00 00 18 00
>0292f8	c9 02 1b 3e 18 32 09 c2 0b 24 5b 40 19 32 06 22
>029308	01 10 59 4e 00 00 18 00 ca 02 1b 3e 18 32 32 cd
>029318	82 c5 0d 26 52 40 19 32 06 22 00 40 00 00 1c 00
>029328	cb 02 1b 3e 18 32 c0 c4 03 20 6f db 35 d3 03 40
>029338	19 32 19 32 06 22 a2 97 00 00 20 00 cc 02 1b 3e
>029348	18 32 e5 dd 24 d0 05 40 19 32 03 20 26 cd c9 c3
>029358	19 32 06 22 03 10 75 b8 00 00 1c 00 cd 02 1b 3e
>029368	18 32 0e c0 0c 26 0b 24 07 10 0c 7b 19 32 06 22
>029378	ee 10 80 a1 00 00 1a 00 ce 02 1b 3e 18 32 02 10
>029388	a0 b4 0b 24 58 40 19 32 06 22 02 10 48 b4 00 00
>029398	18 00 cf 02 1b 3e 18 32 13 40 0d 26 02 10 b4 6d
>0293a8	19 32 06 22 00 40 00 00 26 00 d0 02 1b 3e 18 32
>0293b8	9a db 10 d2 02 40 19 32 02 20 23 dc 05 d0 03 40
>0293c8	19 32 19 32 06 22 0b 24 02 10 01 40 00 00 1e 00
>0293d8	d1 02 1b 3e 18 32 78 d4 02 40 19 32 02 20 0b 24
>0293e8	fc 8f 19 32 06 22 0b 24 61 84 00 00 22 00 d2 02
>0293f8	1b 3e 18 32 6a d8 2e d1 02 40 19 32 03 20 03 10
>029408	22 91 19 32 06 22 0b 24 03 10 80 91 00 00 1c 00
>029418	d3 02 1b 3e 18 32 a4 bf 02 20 3a d6 02 40 19 32
>029428	19 32 06 22 04 10 e5 bf 00 00 1a 00 d4 02 1b 3e
>029438	18 32 0b 24 09 45 0b 24 52 40 19 32 06 22 0b 24
>029448	5b 45 00 00 24 00 d5 02 1b 3e 18 32 14 de ad d2
>029458	04 40 19 32 01 20 0b 24 01 10 c4 70 19 32 06 22
>029468	0b 24 07 10 e0 bd 00 00 1e 00 d6 02 1b 3e 18 32
>029478	6b c6 0a 24 0b 24 03 10 66 92 19 32 06 22 0b 24
>029488	03 10 c6 92 00 00 1e 00 d7 02 1b 3e 18 32 0b 24
>029498	05 10 4f 8d 02 20 0b 24 82 91 19 32 06 22 0b 24
>0294a8	01 81 00 00 1e 00 d8 02 1b 3e 18 32 0b 24 22 40
>0294b8	0b 24 a0 c9 6f c6 19 32 06 22 0b 24 01 10 26 5c
>0294c8	00 00 20 00 d9 02 1b 3e 18 32 11 de 1f d0 04 40
>0294d8	19 32 03 20 01 10 70 bc 19 32 06 22 06 10 30 9f
>0294e8	00 00 22 00 da 02 1b 3e 18 32 ab d9 03 d0 01 40
>0294f8	19 32 01 20 41 de b8 d0 03 40 19 32 19 32 06 22
>029508	0c 40 00 00 20 00 db 02 1b 3e 18 32 0b 24 0c 40
>029518	0a 24 25 d5 05 40 19 32 19 32 06 22 0b 24 06 10
>029528	2c 66 00 00 20 00 dc 02 1b 3e 18 32 fc c9 e4 c5
>029538	0b 24 0b 24 04 10 fe 77 19 32 06 22 0b 24 01 10
>029548	51 55 00 00 1a 00 dd 02 1b 3e 18 32 23 40 0c 26
>029558	4c ca 5d c6 19 32 06 22 6d 10 02 b9 00 00 1a 00
>029568	de 02 1b 3e 18 32 05 10 49 8d 0d 26 a7 c4 19 32
>029578	06 22 0b 24 03 40 00 00 1a 00 df 02 1b 3e 18 32
>029588	fe cd 06 c3 03 20 1d 40 19 32 06 22 05 10 53 95
>029598	00 00 20 00 e0 02 1b 3e 18 32 07 cb 1b c0 03 20
>0295a8	27 d5 02 40 19 32 19 32 06 22 0b 24 07 10 99 5f
>0295b8	00 00 1e 00 e1 02 1b 3e 18 32 04 10 d8 a5 0b 24
>0295c8	0d d0 05 40 19 32 19 32 06 22 03 10 64 9c 00 00
>0295d8	1c 00 e2 02 1b 3e 18 32 70 5b 0a 24 38 d8 dc d1
>0295e8	04 40 19 32 19 32 06 22 3f 5b 00 00 1e 00 e3 02
>0295f8	1b 3e 18 32 cb d0 01 40 19 32 0d 26 0b 24 01 10
>029608	6c ba 19 32 06 22 03 40 00 00 16 00 e4 02 1b 3e
>029618	18 32 22 40 01 20 17 c0 19 32 06 22 22 40 00 00
>029628	16 00 e5 02 1b 3e 18 32 18 c0 0d 26 76 c5 19 32
>029638	06 22 ef 5b 00 00 24 00 e6 02 1b 3e 18 32 46 d8
>029648	17 d0 02 40 19 32 02 20 2d dd 7c d2 03 40 19 32
>029658	19 32 06 22 0b 24 25 69 00 00 20 00 e7 02 1b 3e
>029668	18 32 1f ca 09 c0 02 20 0b 24 02 10 35 7a 19 32
>029678	06 22 0b 24 02 10 31 7a 00 00 1e 00 e8 02 1b 3e
>029688	18 32 1d 7a 03 20 0b 24 04 10 ef 71 19 32 06 22
>029698	0b 24 04 10 f4 4b 00 00 1e 00 e9 02 1b 3e 18 32
>0296a8	01 10 48 73 0a 24 0b 24 01 10 85 ac 19 32 06 22
>0296b8	0b 24 3d 79 00 00 1e 00 ea 02 1b 3e 18 32 71 d0
>0296c8	06 40 19 32 0c 26 58 40 19 32 06 22 0b 24 3d 11
>0296d8	68 9d 00 00 1a 00 eb 02 1b 3e 18 32 89 ca 24 c0
>0296e8	0d 26 05 10 ac 54 19 32 06 22 00 40 00 00 20 00
>0296f8	ec 02 1b 3e 18 32 0b 24 20 40 01 20 0b 24 02 10
>029708	32 bf 19 32 06 22 0b 24 02 10 40 bf 00 00 1e 00
>029718	ed 02 1b 3e 18 32 3a d6 00 40 19 32 0d 26 0b 24
>029728	05 10 07 6f 19 32 06 22 00 40 00 00 1c 00 ee 02
>029738	1b 3e 18 32 05 10 2d 5b 0a 24 d5 cc 17 c0 19 32
>029748	06 22 05 10 e6 5a 00 00 20 00 ef 02 1b 3e 18 32
>029758	34 ce 42 c4 02 20 73 dc 86 d5 00 40 19 32 19 32
>029768	06 22 0b 24 21 40 00 00 1a 00 f0 02 1b 3e 18 32
>029778	0f c0 0c 26 52 40 19 32 06 22 0b 24 4a 12 22 8c
>029788	00 00 18 00 f1 02 1b 3e 18 32 0b 24 0d 40 0d 26
>029798	b7 c5 19 32 06 22 00 40 00 00 1c 00 f2 02 1b 3e
>0297a8	18 32 02 10 a3 45 0a 24 05 10 a7 b6 19 32 06 22
>0297b8	07 10 4a bc 00 00 20 00 f3 02 1b 3e 18 32 0b 24
>0297c8	32 82 03 20 fc d4 02 40 19 32 19 32 06 22 0b 24
>0297d8	04 10 43 41 00 00 18 00 f4 02 1b 3e 18 32 85 c5
>0297e8	03 20 70 5b 19 32 06 22 02 10 d0 af 00 00 1a 00
>0297f8	f5 02 1b 3e 18 32 3f c3 0a 24 0b 24 11 40 19 32
>029808	06 22 0b 24 6e 40 00 00 20 00 f6 02 1b 3e 18 32
>029818	23 dc 05 d0 01 40 19 32 02 20 0b 24 5e 40 19 32
>029828	06 22 0b 24 4d 40 00 00 1c 00 f7 02 1b 3e 18 32
>029838	41 cc c9 c4 03 20 05 10 ee 78 19 32 06 22 05 10
>029848	42 58 00 00 20 00 f8 02 1b 3e 18 32 27 d5 03 40
>029858	19 32 0d 26 38 d8 dc d1 00 40 19 32 19 32 06 22
>029868	60 4c 00 00 1e 00 f9 02 1b 3e 18 32 0b 24 5e 40
>029878	0d 26 17 d9 04 d1 04 40 19 32 19 32 06 22 00 40
>029888	00 00 18 00 fa 02 1b 3e 18 32 01 c0 0d 26 70 c9
>029898	1b c0 19 32 06 22 00 40 00 00 22 00 fb 02 1b 3e
>0298a8	18 32 62 d6 00 40 19 32 0c 26 50 dd 69 d3 05 40
>0298b8	19 32 19 32 06 22 7b 10 ea 59 00 00 18 00 fc 02
>0298c8	1b 3e 18 32 49 40 01 20 0b cb 19 c0 19 32 06 22
>0298d8	48 40 00 00 1a 00 fd 02 1b 3e 18 32 0b 24 03 10
>0298e8	68 8d 01 20 52 40 19 32 06 22 10 40 00 00 1c 00
>0298f8	fe 02 1b 3e 18 32 30 c6 03 20 0b 24 05 10 07 6f
>029908	19 32 06 22 07 10 67 6c 00 00 1c 00 ff 02 1b 3e
>029918	18 32 07 10 7f 63 03 20 fe cd 06 c3 19 32 06 22
>029928	02 10 31 b6 00 00 1e 00 00 03 1b 3e 18 32 4d 40
>029938	02 20 0b 24 01 10 b0 90 19 32 06 22 0b 24 01 10
>029948	a3 90 00 00 1e 00 01 03 1b 3e 18 32 03 10 18 82
>029958	0b 24 0b 24 02 10 a3 63 19 32 06 22 05 10 bb a5
>029968	00 00 1e 00 02 03 1b 3e 18 32 0b 24 47 40 0c 26
>029978	0b 24 05 10 85 6a 19 32 06 22 7a 11 e3 8a 00 00
>029988	1e 00 03 03 1b 3e 18 32 0b 24 0e 40 03 20 cc c8
>029998	28 c2 19 32 06 22 0b 24 01 10 f5 55 00 00 20 00
>0299a8	04 03 1b 3e 18 32 70 c9 11 c0 01 20 0b 24 02 10
>0299b8	96 99 19 32 06 22 0b 24 06 10 98 9b 00 00 1a 00
>0299c8	05 03 1b 3e 18 32 0b 24 03 10 02 b5 0d 26 87 c3
>0299d8	19 32 06 22 f2 48 00 00 1a 00 06 03 1b 3e 18 32
>0299e8	0b 24 68 6a 03 20 60 ce 69 c5 19 32 06 22 77 6a
>0299f8	00 00 22 00 07 03 1b 3e 18 32 01 10 04 5c 0c 26
>029a08	23 dc 05 d0 05 40 19 32 19 32 06 22 0b 24 04 10
>029a18	10 b0 00 00 1c 00 08 03 1b 3e 18 32 c1 d3 00 40
>029a28	19 32 0a 24 3f c3 19 32 06 22 07 10 e7 6b 00 00
>029a38	1e 00 09 03 1b 3e 18 32 0b 24 02 10 e5 a3 0c 26
>029a48	15 c0 19 32 06 22 0b 24 e3 10 5a bf 00 00 1c 00
>029a58	0a 03 1b 3e 18 32 34 ce 42 c4 0c 26 19 40 19 32
>029a68	06 22 0b 24 3d 10 2d 6f 00 00 1e 00 0b 03 1b 3e
>029a78	18 32 18 d1 04 40 19 32 01 20 fc c9 e4 c5 19 32
>029a88	06 22 02 10 21 62 00 00 1c 00 0c 03 1b 3e 18 32
>029a98	0b 24 47 40 0b 24 f1 cc 0f c0 19 32 06 22 03 10
>029aa8	31 bb 00 00 1e 00 0d 03 1b 3e 18 32 6b d4 01 40
>029ab8	19 32 03 20 0b 24 38 40 19 32 06 22 0b 24 3f 40
>029ac8	00 00 20 00 0e 03 1b 3e 18 32 21 cc 10 c0 01 20
>029ad8	af dd a7 d3 02 40 19 32 19 32 06 22 07 10 00 40
>029ae8	00 00 1e 00 0f 03 1b 3e 18 32 0b 24 3d 40 03 20
>029af8	02 d5 01 40 19 32 19 32 06 22 05 10 b8 6a 00 00
>029b08	1c 00 10 03 1b 3e 18 32 0b 24 3e 40 0d 26 12 d3
>029b18	02 40 19 32 19 32 06 22 00 40 00 00 1c 00 11 03
>029b28	1b 3e 18 32 0b 24 2b 40 0c 26 05 d0 00 40 19 32
>029b38	19 32 06 22 72 4e 00 00 20 00 12 03 1b 3e 18 32
>029b48	cc c8 28 c2 03 20 0b 24 02 10 35 7a 19 32 06 22
>029b58	0b 24 03 10 ce 6f 00 00 1c 00 13 03 1b 3e 18 32
>029b68	06 10 37 5a 0b 24 0b 24 0d 40 19 32 06 22 06 10
>029b78	44 5a 00 00 1a 00 14 03 1b 3e 18 32 bc cb 24 c0
>029b88	01 20 06 10 4c 54 19 32 06 22 44 40 00 00 1a 00
>029b98	15 03 1b 3e 18 32 03 d3 02 40 19 32 0a 24 04 40
>029ba8	19 32 06 22 37 5b 00 00 20 00 16 03 1b 3e 18 32
>029bb8	36 cb 97 c3 03 20 12 d0 02 40 19 32 19 32 06 22
>029bc8	0b 24 04 10 54 7e 00 00 1e 00 17 03 1b 3e 18 32
>029bd8	88 cb 36 c0 03 20 0b 24 30 40 19 32 06 22 0b 24
>029be8	03 10 02 6b 00 00 1e 00 18 03 1b 3e 18 32 14 40
>029bf8	03 20 0b 24 01 10 40 52 19 32 06 22 0b 24 01 10
>029c08	2c 52 00 00 1c 00 19 03 1b 3e 18 32 03 10 29 74
>029c18	03 20 02 10 44 66 19 32 06 22 01 10 6d 52 00 00
>029c28	24 00 1a 03 1b 3e 18 32 ff dc 0b d0 00 40 19 32
>029c38	0b 24 41 de b8 d0 00 40 19 32 19 32 06 22 0c 10
>029c48	cf b5 00 00 1c 00 1b 03 1b 3e 18 32 98 c3 03 20
>029c58	bc cb 24 c0 19 32 06 22 0b 24 04 10 a0 b9 00 00
>029c68	20 00 1c 03 1b 3e 18 32 0b 24 04 10 c5 79 0a 24
>029c78	02 10 62 62 19 32 06 22 0b 24 02 10 63 57 00 00
>029c88	22 00 1d 03 1b 3e 18 32 93 db 19 d0 02 40 19 32
>029c98	03 20 0b 24 60 40 19 32 06 22 0b 24 01 10 41 45
>029ca8	00 00 1e 00 1e 03 1b 3e 18 32 7a d4 01 40 19 32
>029cb8	0d 26 0b 24 06 10 0d af 19 32 06 22 00 40 00 00
>029cc8	1e 00 1f 03 1b 3e 18 32 0b 24 92 bb 03 20 03 10
>029cd8	6f 48 19 32 06 22 0b 24 03 10 ff b3 00 00 1c 00
>029ce8	20 03 1b 3e 18 32 f7 c8 91 c5 01 20 0b 24 04 10
>029cf8	c5 79 19 32 06 22 00 40 00 00 18 00 21 03 1b 3e
>029d08	18 32 10 40 01 20 0b 24 0c 40 19 32 06 22 10 40
>029d18	00 00 1a 00 22 03 1b 3e 18 32 04 10 d8 a5 03 20
>029d28	51 40 19 32 06 22 04 10 89 a5 00 00 20 00 23 03
>029d38	1b 3e 18 32 01 10 92 88 0a 24 0b 24 05 10 8d 82
>029d48	19 32 06 22 0b 24 03 10 fb b9 00 00 20 00 24 03
>029d58	1b 3e 18 32 0b 24 07 10 71 47 02 20 d9 cd 74 c5
>029d68	19 32 06 22 0b 24 02 10 11 47 00 00 1e 00 25 03
>029d78	1b 3e 18 32 ec db 01 d4 02 40 19 32 02 20 0a 40
>029d88	19 32 06 22 03 10 be 83 00 00 22 00 26 03 1b 3e
>029d98	18 32 ff dc 0b d0 03 40 19 32 0b 24 0b 24 04 10
>029da8	c5 79 19 32 06 22 08 10 f0 b8 00 00 1a 00 27 03
>029db8	1b 3e 18 32 1a c5 02 20 f1 cc 0f c0 19 32 06 22
>029dc8	0b 24 01 40 00 00 1e 00 28 03 1b 3e 18 32 c6 d3
>029dd8	00 40 19 32 03 20 56 c2 19 32 06 22 0b 24 01 10
>029de8	76 9a 00 00 1a 00 29 03 1b 3e 18 32 0b 24 30 40
>029df8	03 20 47 40 19 32 06 22 0b 24 69 40 00 00 1c 00
>029e08	2a 03 1b 3e 18 32 0b 24 fc 8f 0c 26 5f c5 19 32
>029e18	06 22 0b 24 36 10 a0 be 00 00 1c 00 2b 03 1b 3e
>029e28	18 32 58 40 0b 24 04 10 d8 a5 19 32 06 22 0b 24
>029e38	04 10 80 a5 00 00 1e 00 2c 03 1b 3e 18 32 0b 24
>029e48	4d 40 0c 26 d6 d2 01 40 19 32 19 32 06 22 0b 24
>029e58	5f 5b 00 00 24 00 2d 03 1b 3e 18 32 28 dd 05 d0
>029e68	01 40 19 32 0b 24 fe d4 02 40 19 32 19 32 06 22
>029e78	0b 24 0b 10 5d a0 00 00 18 00 2e 03 1b 3e 18 32
>029e88	4d 40 03 20 63 ca d6 c5 19 32 06 22 1f 40 00 00
>029e98	1c 00 2f 03 1b 3e 18 32 01 10 04 5c 01 20 3a d6
>029ea8	03 40 19 32 19 32 06 22 00 5c 00 00 20 00 30 03
>029eb8	1b 3e 18 32 0b 24 01 10 b5 ac 03 20 4c ca 5d c6
>029ec8	19 32 06 22 0b 24 02 10 a3 be 00 00 1a 00 31 03
>029ed8	1b 3e 18 32 0b 24 49 40 0c 26 d5 cc 17 c0 19 32
>029ee8	06 22 3f 54 00 00 1a 00 32 03 1b 3e 18 32 2b 6c
>029ef8	01 20 0b 24 04 10 0a 77 19 32 06 22 22 48 00 00
>029f08	22 00 33 03 1b 3e 18 32 0b 24 03 10 35 93 0b 24
>029f18	11 d0 00 40 19 32 19 32 06 22 0b 24 03 10 3b 93
>029f28	00 00 1a 00 34 03 1b 3e 18 32 02 c0 01 20 03 10
>029f38	23 79 19 32 06 22 03 10 22 68 00 00 1c 00 35 03
>029f48	1b 3e 18 32 02 10 4a 7a 03 20 06 10 ac a0 19 32
>029f58	06 22 04 10 e6 9a 00 00 20 00 36 03 1b 3e 18 32
>029f68	c6 dc b8 d3 02 40 19 32 0d 26 0b 24 57 40 19 32
>029f78	06 22 0b 24 03 45 00 00 1a 00 37 03 1b 3e 18 32
>029f88	a6 cc 03 c6 0b 24 73 c1 19 32 06 22 06 10 25 76
>029f98	00 00 1e 00 38 03 1b 3e 18 32 da c9 23 c0 03 20
>029fa8	c6 cc de c4 19 32 06 22 0b 24 01 10 e7 6b 00 00
>029fb8	1c 00 39 03 1b 3e 18 32 73 c1 03 20 8b d5 01 40
>029fc8	19 32 19 32 06 22 06 10 1b 76 00 00 22 00 3a 03
>029fd8	1b 3e 18 32 52 da 0c d0 04 40 19 32 0a 24 f9 c9
>029fe8	02 c0 19 32 06 22 0b 24 06 10 7d 59 00 00 20 00
>029ff8	3b 03 1b 3e 18 32 17 d9 04 d1 01 40 19 32 0a 24
>02a008	10 40 19 32 06 22 0b 24 06 10 51 41 00 00 1a 00
>02a018	3c 03 1b 3e 18 32 04 10 d6 9d 03 20 13 c4 19 32
>02a028	06 22 02 10 aa 80 00 00 22 00 3d 03 1b 3e 18 32
>02a038	9f d4 01 40 19 32 0a 24 0b 24 06 10 12 76 19 32
>02a048	06 22 0b 24 06 10 fa 75 00 00 20 00 3e 03 1b 3e
>02a058	18 32 6b d8 24 d0 02 40 19 32 02 20 0b 24 08 40
>02a068	19 32 06 22 0b 24 04 40 00 00 18 00 3f 03 1b 3e
>02a078	18 32 a6 cc 03 c6 01 20 76 c5 19 32 06 22 11 40
>02a088	00 00 1a 00 40 03 1b 3e 18 32 04 10 41 55 0b 24
>02a098	2a 40 19 32 06 22 04 10 17 55 00 00 18 00 41 03
>02a0a8	1b 3e 18 32 0b 24 4d 40 03 20 1a c5 19 32 06 22
>02a0b8	44 40 00 00 1e 00 42 03 1b 3e 18 32 94 cc 06 c0
>02a0c8	0b 24 0b 24 04 10 5a 73 19 32 06 22 06 10 38 90
>02a0d8	00 00 20 00 43 03 1b 3e 18 32 95 dc 20 d0 03 40
>02a0e8	19 32 0a 24 12 d6 02 40 19 32 19 32 06 22 6f 40
>02a0f8	00 00 1e 00 44 03 1b 3e 18 32 05 10 a7 b6 0d 26
>02a108	0b 24 01 10 80 9e 19 32 06 22 0b 24 03 40 00 00
>02a118	24 00 45 03 1b 3e 18 32 d5 d9 79 d0 00 40 19 32
>02a128	0b 24 78 d4 02 40 19 32 19 32 06 22 0b 24 06 10
>02a138	7a 6b 00 00 1c 00 46 03 1b 3e 18 32 02 10 7e 50
>02a148	0b 24 0b 24 25 40 19 32 06 22 02 10 a3 50 00 00
>02a158	20 00 47 03 1b 3e 18 32 1f c9 2a c1 0a 24 4d dd
>02a168	1c d0 01 40 19 32 19 32 06 22 08 10 90 b6 00 00
>02a178	1e 00 48 03 1b 3e 18 32 a2 d5 03 40 19 32 0d 26
>02a188	9d d4 02 40 19 32 19 32 06 22 00 40 00 00 1e 00
>02a198	49 03 1b 3e 18 32 03 10 2c b8 03 20 0b 24 80 81
>02a1a8	19 32 06 22 0b 24 03 10 54 79 00 00 1c 00 4a 03
>02a1b8	1b 3e 18 32 fc c9 12 c0 03 20 70 c9 11 c0 19 32
>02a1c8	06 22 04 10 9b 8b 00 00 16 00 4b 03 1b 3e 18 32
>02a1d8	15 c0 01 20 48 40 19 32 06 22 40 40 00 00 1e 00
>02a1e8	4c 03 1b 3e 18 32 03 10 9b 64 03 20 9f d4 03 40
>02a1f8	19 32 19 32 06 22 05 10 25 ae 00 00 22 00 4d 03
>02a208	1b 3e 18 32 02 10 a0 b4 0a 24 6b d8 24 d0 00 40
>02a218	19 32 19 32 06 22 0b 24 01 10 b1 7a 00 00 24 00
>02a228	4e 03 1b 3e 18 32 2d dd 7c d2 03 40 19 32 01 20
>02a238	0b 24 05 10 5d a9 19 32 06 22 0b 24 07 10 fd bd
>02a248	00 00 1c 00 4f 03 1b 3e 18 32 0b 24 20 40 01 20
>02a258	1f c9 2a c1 19 32 06 22 03 10 60 48 00 00 1a 00
>02a268	50 03 1b 3e 18 32 3f 40 0c 26 58 ce 12 c0 19 32
>02a278	06 22 24 11 79 40 00 00 20 00 51 03 1b 3e 18 32
>02a288	5f db 0e d0 04 40 19 32 0a 24 0b 24 0c 40 19 32
>02a298	06 22 0b 24 3e 40 00 00 1c 00 52 03 1b 3e 18 32
>02a2a8	bc cb 24 c0 0a 24 52 40 19 32 06 22 0b 24 06 10
>02a2b8	d7 9c 00 00 1e 00 53 03 1b 3e 18 32 5a de 77 d4
>02a2c8	02 40 19 32 01 20 06 cd 0a c0 19 32 06 22 c2 61
>02a2d8	00 00 22 00 54 03 1b 3e 18 32 9a db 10 d2 01 40
>02a2e8	19 32 0b 24 0b 24 04 10 de b7 19 32 06 22 0b 24
>02a2f8	af 8a 00 00 18 00 55 03 1b 3e 18 32 2a 40 0d 26
>02a308	02 10 97 4a 19 32 06 22 00 40 00 00 1a 00 56 03
>02a318	1b 3e 18 32 ac 60 0a 24 15 cb 43 c6 19 32 06 22
>02a328	07 10 96 4a 00 00 1e 00 57 03 1b 3e 18 32 bc cb
>02a338	24 c0 02 20 3c ce 07 c0 19 32 06 22 0b 24 06 10
>02a348	01 9d 00 00 1a 00 58 03 1b 3e 18 32 03 10 2e 6b
>02a358	02 20 13 c4 19 32 06 22 07 10 7e 7f 00 00 1c 00
>02a368	59 03 1b 3e 18 32 87 c3 0d 26 a6 da 98 d4 02 40
>02a378	19 32 19 32 06 22 0e 40 00 00 20 00 5a 03 1b 3e
>02a388	18 32 da c9 23 c0 03 20 28 dd 05 d0 04 40 19 32
>02a398	19 32 06 22 06 10 85 47 00 00 24 00 5b 03 1b 3e
>02a3a8	18 32 23 dc 05 d0 04 40 19 32 03 20 0b 24 03 10
>02a3b8	80 82 19 32 06 22 0b 24 03 10 61 82 00 00 20 00
>02a3c8	5c 03 1b 3e 18 32 da d9 fb d3 03 40 19 32 03 20
>02a3d8	90 cb 5d c0 19 32 06 22 05 10 27 4f 00 00 1c 00
>02a3e8	5d 03 1b 3e 18 32 27 ca 0c c0 03 20 02 10 67 a3
>02a3f8	19 32 06 22 02 10 6d a3 00 00 20 00 5e 03 1b 3e
>02a408	18 32 0b 24 67 b2 0a 24 0b 24 05 10 07 6f 19 32
>02a418	06 22 0b 24 06 10 6e 61 00 00 1e 00 5f 03 1b 3e
>02a428	18 32 0b 24 06 10 68 7e 03 20 0b 24 15 40 19 32
>02a438	06 22 06 10 73 7e 00 00 00 00 ee ee ee ee 00 00
>02a448	fe bf 04 00 a6 ad 02 00 ce ff ff ff dd 23 00 00
>02a458	57 01 01 00 db ff ff ff 00 00 fc bf 05 00 0c 00
>02a468	00 00 36 00 00 00 96 3f 01 00 cd ff ff ff 2f 2f
>02a478	03 00 8e 53 02 00 00 00 f8 bf ee b8 02 00 00 00
>02a488	f4 bf 05 00 e2 55 fd ff 4d 00 00 00 ab ff ff ff
>02a498	58 00 00 00 22 b2 fc ff ae ff ff ff 60 a4 f2 bf
>02a4a8	02 00 49 00 00 00 b8 4e fd ff 9a 2d fe ff 00 00
>02a4b8	f0 bf 7d df 00 00 00 00 ee bf 05 00 05 7f 03 00
>02a4c8	09 00 00 00 3b 00 00 00 e6 41 03 00 22 d7 fe ff
>02a4d8	a3 05 01 00 00 00 ea bf fe 0a fe ff 00 00 e6 bf
>02a4e8	05 00 14 00 00 00 5f 89 ff ff 2f 00 00 00 b2 ff
>02a4f8	fd ff 41 15 02 00 c9 a5 fc ff a4 a4 e2 bf 05 00
>02a508	ba ff ff ff 17 6d fd ff 76 82 fe ff f8 bf fd ff
>02a518	85 31 01 00 1b 9c fe ff 00 00 de bf d7 a2 fc ff
>02a528	be a4 dc bf 06 00 a7 ff ff ff f5 ff ff ff c7 4f
>02a538	00 00 ba 61 ff ff 9f d3 fc ff a8 4b fd ff 3d 54
>02a548	00 00 00 00 da bf 58 00 00 00 00 00 d6 bf 05 00
>02a558	8c 58 00 00 b1 47 fe ff dd 19 00 00 54 b8 00 00
>02a568	1f 00 00 00 fc ff ff ff 00 00 d2 bf 10 00 00 00
>02a578	00 00 d0 bf 02 00 98 c1 fc ff 0b 00 00 00 50 00
>02a588	00 00 b6 a4 cc bf 13 00 00 00 46 a4 ca bf 03 00
>02a598	00 00 00 00 38 3b 02 00 50 00 00 00 82 d3 01 00
>02a5a8	00 00 c6 bf 06 00 cd ff ff ff dc ff ff ff 6e 84
>02a5b8	ff ff f0 81 fc ff 86 e6 00 00 d0 cd 03 00 f8 ff
>02a5c8	ff ff 00 00 c2 bf 98 32 fe ff 00 00 c0 bf 02 00
>02a5d8	06 00 00 00 3b c6 fd ff 5a 20 03 00 00 00 be bf
>02a5e8	05 00 d1 18 02 00 47 00 00 00 f5 a8 fc ff ff 84
>02a5f8	fc ff c5 ff ff ff 82 9b 00 00 dc a4 ba bf 04 9c
>02a608	00 00 00 00 b6 bf 04 00 f6 bd 00 00 18 c2 01 00
>02a618	91 9e fe ff 4b 42 fc ff 7c 60 fe ff 00 00 b2 bf
>02a628	92 c8 00 00 d2 a5 ae bf 05 00 24 00 00 00 44 3b
>02a638	ff ff b9 ff ff ff cb 2c fe ff 40 a3 03 00 b5 4b
>02a648	02 00 02 a6 aa bf d6 5d 02 00 00 00 a8 bf 03 00
>02a658	c0 6d ff ff 00 10 03 00 2a 00 00 00 22 88 fd ff
>02a668	00 00 a6 bf b7 24 01 00 02 a5 a4 bf 02 00 3c 4f
>02a678	ff ff 9a 37 fc ff 9b 2b 03 00 68 a6 a0 bf 1d 3a
>02a688	00 00 28 a5 9e bf 02 00 03 00 00 00 ec 1d 01 00
>02a698	57 85 00 00 92 a5 9c bf 02 00 97 91 fc ff 7b 55
>02a6a8	fd ff 66 3b 03 00 ca a5 98 bf a0 ff ff ff 2c a6
>02a6b8	96 bf 06 00 41 00 00 00 ec 6c 03 00 9c ff ff ff
>02a6c8	f6 ff ff ff c8 ff ff ff 4d 77 fd ff d9 31 fe ff
>02a6d8	00 00 92 bf 48 00 00 00 e4 a4 8e bf 04 00 77 6e
>02a6e8	03 00 c2 ff ff ff ca b3 00 00 1c 00 00 00 11 00
>02a6f8	00 00 4a a6 8a bf 4f 00 00 00 52 a5 88 bf 02 00
>02a708	4a c8 00 00 02 00 00 00 4d 00 00 00 00 00 86 bf
>02a718	06 00 40 a4 01 00 e3 d6 01 00 4d 00 00 00 1a 00
>02a728	00 00 fc 7e fd ff ce 80 fe ff b8 86 03 00 8a a5
>02a738	82 bf 12 00 00 00 8a a6 7e bf 03 00 89 02 01 00
>02a748	f6 c8 fd ff 05 c3 fe ff c1 d0 fc ff 20 a5 7a bf
>02a758	f9 95 00 00 52 a6 78 bf 03 00 80 3d fe ff 18 00
>02a768	00 00 ae e7 01 00 be 4a 03 00 00 00 76 bf 97 0a
>02a778	01 00 00 00 72 bf 06 00 22 8c fd ff 62 18 fd ff
>02a788	56 20 01 00 e9 ff ff ff 18 d4 ff ff c9 ff ff ff
>02a798	69 da ff ff 4a a5 6e bf 6f 88 01 00 00 00 6c bf
>02a7a8	02 00 04 b0 ff ff 5b 00 00 00 8a 07 00 00 00 00
>02a7b8	68 bf b9 ff ff ff 78 a5 66 bf 06 00 c3 ff ff ff
>02a7c8	c5 ff ff ff c0 37 fc ff 38 0c 02 00 c8 ad 03 00
>02a7d8	e0 d9 fc ff 50 e8 00 00 72 a7 62 bf 48 b3 00 00
>02a7e8	5c a7 5e bf 04 00 3f 00 00 00 35 62 ff ff c2 89
>02a7f8	fd ff d8 f8 01 00 ce ff ff ff 24 a6 5a bf 5c 61
>02a808	02 00 e8 a7 56 bf 02 00 45 e0 fe ff db 83 01 00
>02a818	04 00 00 00 0a a6 54 bf 05 00 bd ff ff ff 47 00
>02a828	00 00 60 8c fd ff 85 9f fd ff 18 00 00 00 a1 4b
>02a838	fe ff fa a6 50 bf 68 b4 fd ff 9c a6 4e bf 05 00
>02a848	aa ff ff ff ea c1 fd ff 23 b9 01 00 a1 ff ff ff
>02a858	bf ad fd ff 39 1a 02 00 00 00 4c bf 7c 1d 03 00
>02a868	02 a7 4a bf 03 00 a9 ff ff ff f0 81 fd ff 33 1b
>02a878	00 00 c4 ff ff ff b6 a7 46 bf 02 c8 fd ff e4 a5
>02a888	42 bf 03 00 ef 94 fd ff ac 94 02 00 11 bc 02 00
>02a898	5d 55 00 00 68 a8 3e bf 04 00 61 00 00 00 f4 b2
>02a8a8	03 00 af 8d fc ff 01 b8 fd ff 8b 2a 03 00 7e a4
>02a8b8	3c bf b4 8e 00 00 e0 a6 3a bf 02 00 94 05 ff ff
>02a8c8	de a8 02 00 5b 90 03 00 ae a6 38 bf f7 ff ff ff
>02a8d8	42 a8 34 bf 05 00 d1 c7 02 00 6c 66 00 00 b9 57
>02a8e8	01 00 ee 42 03 00 c9 7f ff ff 43 ea 00 00 00 00
>02a8f8	30 bf d8 65 02 00 d8 a8 2c bf 05 00 43 8a 00 00
>02a908	ff 7e fc ff 11 00 00 00 45 53 00 00 29 00 00 00
>02a918	0f 67 02 00 02 a8 28 bf bb ff ff ff 7a a7 24 bf
>02a928	05 00 6c b3 ff ff 29 41 fc ff d0 ff ff ff c8 50
>02a938	ff ff df d1 fe ff 17 00 00 00 00 00 20 bf e2 f7
>02a948	fd ff a8 a5 1c bf 03 00 28 aa fc ff 82 98 00 00
>02a958	96 85 fe ff fa 4c 01 00 b6 a8 18 bf a7 f6 02 00
>02a968	86 a8 16 bf 06 00 e3 cc 02 00 f3 a8 fd ff 4a a7
>02a978	fc ff 2e 35 ff ff e3 df 00 00 f2 cb fc ff 34 e2
>02a988	ff ff 7e a8 12 bf 10 76 02 00 68 a9 0e bf 06 00
>02a998	c8 fe fd ff 9f fe fc ff b3 d1 ff ff c0 ff ff ff
>02a9a8	57 4c fc ff c8 80 01 00 44 26 01 00 3a a8 0a bf
>02a9b8	95 70 ff ff b6 a6 06 bf 05 00 a2 43 fd ff e6 2a
>02a9c8	fd ff 2a 00 00 00 0e 00 00 00 ef 2f fd ff ce bd
>02a9d8	ff ff 00 00 02 bf 88 04 fe ff 9c a8 00 bf 06 00
>02a9e8	3f c6 01 00 02 00 00 00 87 9e 03 00 53 00 00 00
>02a9f8	2d 00 00 00 3b 00 00 00 0c 52 fc ff e0 a7 fc be
>02aa08	f4 ff ff ff a4 a7 f8 be 05 00 cb 2b fe ff 2b a5
>02aa18	fc ff 29 b4 01 00 a0 ff ff ff a3 ff ff ff 1f 00
>02aa28	00 00 9c a7 f4 be 46 00 00 00 3e a7 f0 be 06 00
>02aa38	fd 72 fd ff ed 6b fc ff 03 32 02 00 c1 ac fc ff
>02aa48	60 00 00 00 0b 00 00 00 aa ff ff ff 70 a5 ec be
>02aa58	d0 ff ff ff 1c a8 e8 be 03 00 28 5e fd ff 21 ee
>02aa68	02 00 4c 14 03 00 d8 76 ff ff 60 a8 e4 be 52 00
>02aa78	00 00 be a7 e0 be 06 00 2c 24 fe ff ea 93 fd ff
>02aa88	2e 26 00 00 29 00 00 00 0d 00 00 00 59 00 00 00
>02aa98	1f 8f 01 00 fe a8 dc be 06 00 a3 ff ff ff 3a 00
>02aaa8	00 00 eb ff ff ff d2 e1 fc ff a6 cc fd ff a6 ff
>02aab8	ff ff 22 00 00 00 54 a7 d8 be b1 32 fd ff 86 a4
>02aac8	d6 be 06 00 59 c9 fc ff 23 00 00 00 10 79 03 00
>02aad8	75 ee fc ff be ff ff ff a4 7f 00 00 64 a1 00 00
>02aae8	b4 a9 d2 be ef ff ff ff 0c aa d0 be 04 00 6b 33
>02aaf8	fc ff cb 45 01 00 12 00 00 00 62 22 01 00 5f b6
>02ab08	00 00 1c a9 ce be c8 ff ff ff 32 aa ca be 05 00
>02ab18	af d0 fd ff 59 00 00 00 b4 2d 01 00 d3 ff ff ff
>02ab28	3c 00 00 00 d1 cb 02 00 0a ab c6 be 7c 80 ff ff
>02ab38	00 00 c2 be 03 00 74 fd fc ff cf 9b 02 00 b4 c3
>02ab48	01 00 21 5f 01 00 8a a9 be be ea 69 03 00 70 a6
>02ab58	ba be 05 00 b8 ff ff ff f0 ff ff ff 7b 13 ff ff
>02ab68	9d ff ff ff cf ff ff ff 1d 00 00 00 42 a9 b6 be
>02ab78	38 2f fd ff 7a aa b4 be 02 00 61 50 fe ff 4d 00
>02ab88	00 00 7f a3 03 00 30 ab b0 be 44 00 00 00 7c ab
>02ab98	ac be 05 00 21 00 00 00 f0 ff ff ff 07 6a fd ff
>02aba8	f8 ff ff ff b8 ff ff ff bb ff ff ff e8 aa aa be
>02abb8	9e fc fe ff 24 a9 a6 be 06 00 79 f4 fd ff 46 31
>02abc8	00 00 98 22 03 00 f2 96 fd ff 2b 2c 00 00 04 24
>02abd8	02 00 5b 6e 01 00 8e ab a4 be 80 be ff ff e2 a9
>02abe8	a0 be 03 00 4f 00 00 00 22 3c 02 00 82 97 01 00
>02abf8	5b 00 00 00 de ab 9e be 80 21 ff ff 96 ab 9c be
>02ac08	05 00 aa ff ff ff b4 c9 fe ff ad 56 00 00 70 d2
>02ac18	fd ff 46 f7 fd ff 17 00 00 00 da a9 98 be 98 d5
>02ac28	ff ff 9c aa 96 be 05 00 6a a6 fe ff 7e 07 02 00
>02ac38	bb ff ff ff 37 1a 03 00 17 72 fd ff 11 ce fd ff
>02ac48	82 a6 94 be 7a c4 fd ff bc ab 90 be 03 00 01 00
>02ac58	00 00 51 7f fc ff b2 82 fd ff d4 e1 00 00 12 ab
>02ac68	8e be 02 00 79 05 03 00 ea 74 fc ff aa d1 ff ff
>02ac78	d0 a8 8a be 80 06 fd ff 0a a8 86 be 04 00 ac 50
>02ac88	01 00 2b 02 00 00 2d 00 00 00 0e 37 03 00 11 00
>02ac98	00 00 4e ab 82 be c2 ff ff ff f0 aa 7e be 06 00
>02aca8	20 11 01 00 57 bc 00 00 fc ff ff ff 48 00 00 00
>02acb8	a4 ff ff ff b4 33 02 00 75 8d 00 00 04 aa 7a be
>02acc8	4e d5 02 00 a2 ac 78 be 04 00 af a9 01 00 91 b1
>02acd8	01 00 1a a2 01 00 5d 7c 03 00 74 e0 fc ff 54 aa
>02ace8	76 be e4 ff ff ff 2a ac 72 be 02 00 b7 fb fe ff
>02acf8	fd ff ff ff b9 e5 fc ff 78 ac 6e be 00 36 02 00
>02ad08	e6 ab 6c be 04 00 cb ff ff ff cd fb ff ff 19 d5
>02ad18	ff ff 7b 24 02 00 5d dc fe ff be aa 68 be a2 ff
>02ad28	ff ff 04 ac 64 be 03 00 c3 e6 fe ff 50 2f ff ff
>02ad38	49 cd 02 00 30 00 00 00 22 ad 60 be 2a 00 00 00
>02ad48	ee ac 5c be 06 00 dc 60 ff ff 33 00 00 00 9f b9
>02ad58	00 00 51 00 00 00 13 00 00 00 e0 ff ff ff 12 00
>02ad68	00 00 fc ab 58 be 0a 00 00 00 5c aa 56 be 02 00
>02ad78	0d 52 01 00 3c 48 02 00 34 00 00 00 f6 a8 54 be
>02ad88	a0 ff ff ff be a8 50 be 04 00 22 d1 01 00 94 33
>02ad98	ff ff a2 ff ff ff 04 00 00 00 40 56 03 00 36 a7
>02ada8	4e be 1d 00 00 00 8c ad 4c be 04 00 f3 98 02 00
>02adb8	4b 13 ff ff e1 2e 02 00 d8 7e fe ff ef 51 02 00
>02adc8	60 a9 48 be dd 19 ff ff 80 ac 44 be 02 00 a3 16
>02add8	fd ff f8 8d fc ff 63 80 03 00 2a aa 40 be 7c fa
>02ade8	fc ff 48 ad 3c be 06 00 55 00 00 00 3e 42 fc ff
>02adf8	7a 7a fd ff df ff ff ff 38 d0 01 00 c8 ff ff ff
>02ae08	29 13 fd ff c4 ac 38 be 47 09 fd ff ae ad 34 be
>02ae18	02 00 33 d0 01 00 73 3d fd ff bf ef fe ff a6 ad
>02ae28	30 be 8f 78 fc ff cc ac 2c be 02 00 09 ac fc ff
>02ae38	95 96 fe ff da 94 ff ff 48 ac 28 be 2e ab 01 00
>02ae48	c6 aa 24 be 06 00 f0 e9 fd ff 68 62 fc ff ec 17
>02ae58	00 00 0c 8e 01 00 f6 af 01 00 5d 0e ff ff 82 08
>02ae68	fd ff 72 aa 22 be ee c9 fc ff 14 a7 20 be 05 00
>02ae78	75 72 fe ff 2c ed ff ff 74 4d 03 00 d8 ff ff ff
>02ae88	0a 00 00 00 bd 9e fe ff 6a ad 1e be cd ea 00 00
>02ae98	72 ad 1c be 05 00 c8 ff ff ff 57 88 00 00 e2 fe
>02aea8	01 00 7b cf 03 00 80 16 01 00 74 89 00 00 74 ab
>02aeb8	18 be cb c5 fe ff 08 ad 14 be 02 00 3a 76 01 00
>02aec8	ca f3 01 00 1f 85 00 00 9a ac 12 be d5 ff ff ff
>02aed8	be ae 0e be 06 00 2b 00 00 00 c6 79 fd ff db f1
>02aee8	fc ff 90 5e fc ff a0 74 ff ff 13 f1 fd ff 39 d9
>02aef8	fd ff 6a ae 0a be 81 8e fd ff 92 a9 08 be 02 00
>02af08	b8 29 fd ff b3 ff ff ff f3 90 fc ff 26 ae 04 be
>02af18	e7 6d 00 00 2a ad 02 be 05 00 7c 3c fd ff 53 f7
>02af28	ff ff b9 ff ff ff 25 00 00 00 fb 44 00 00 c5 ff
>02af38	ff ff fa ae 00 be 67 63 01 00 38 ab fe bd 04 00
>02af48	b8 4f 01 00 58 31 ff ff 73 43 02 00 0f fc 01 00
>02af58	f1 9f 02 00 b4 ab fa bd 51 00 00 00 14 ae f6 bd
>02af68	02 00 fa f4 ff ff 19 00 00 00 f7 ff ff ff d0 ae
>02af78	f4 bd a0 74 01 00 d8 ae f0 bd 02 00 9d ff ff ff
>02af88	35 af ff ff f9 50 fd ff 40 ad ec bd 16 92 01 00
>02af98	d0 ad e8 bd 03 00 57 00 00 00 6a 2d fe ff 60 00
>02afa8	00 00 5b 5e 03 00 b6 ae e4 bd de 1c 01 00 72 ae
>02afb8	e0 bd 04 00 25 a2 03 00 21 00 00 00 e7 ff ff ff
>02afc8	dc 7e fe ff 2d 9b 02 00 76 af de bd 71 a8 03 00
>02afd8	bc a9 dc bd 06 00 44 ac 03 00 04 0c 03 00 b5 9a
>02afe8	01 00 3f dd ff ff de ff ff ff 45 00 00 00 f4 44
>02aff8	fc ff 5c af da bd ac 60 03 00 4a a9 d6 bd 05 00
>02b008	df ff ff ff bf ff ff ff d0 42 ff ff 07 21 fd ff
>02b018	57 00 00 00 85 50 ff ff 22 ac d2 bd ac 20 00 00
>02b028	64 af ce bd 03 00 c2 86 03 00 02 00 00 00 61 e3
>02b038	02 00 1e 12 01 00 90 af ca bd f3 ff ff ff 28 b0
>02b048	c8 bd 03 00 aa 80 fd ff 57 ee fe ff 26 6e 00 00
>02b058	12 00 00 00 14 af c4 bd 2c f8 01 00 d8 af c0 bd
>02b068	04 00 fa fb 01 00 f2 ff ff ff 57 0d 02 00 85 93
>02b078	fd ff 4a 3a 01 00 5c b0 bc bd 19 62 fd ff ea ad
>02b088	ba bd 03 00 6f c9 02 00 f5 ff ff ff 3f 00 00 00
>02b098	52 e1 fc ff e2 ad b8 bd a3 ff ff ff 56 ab b4 bd
>02b0a8	05 00 81 be fc ff 77 86 01 00 40 29 01 00 7e 10
>02b0b8	01 00 9b a4 01 00 87 d8 fd ff fa af b0 bd 0f 7c
>02b0c8	01 00 02 b0 ae bd 06 00 a2 52 ff ff 15 00 00 00
>02b0d8	88 31 02 00 9d 3f 02 00 96 f6 01 00 93 9b fd ff
>02b0e8	70 fc 00 00 40 ae aa bd 47 51 02 00 2e ae a6 bd
>02b0f8	02 00 a7 0e 02 00 18 8f 01 00 e0 ff ff ff c8 ad
>02b108	a2 bd 93 c8 ff ff 98 af 9e bd 03 00 71 b9 03 00
>02b118	d1 53 ff ff 3d 5b 01 00 2b 3f 02 00 06 b1 9a bd
>02b128	ea 8a 01 00 f4 b0 98 bd 04 00 f7 fa ff ff 04 e7
>02b138	ff ff 43 00 00 00 b6 ff ff ff 52 5e 01 00 00 00
>02b148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 196 times (3136 bytes)...
>02bd98	c6 d3 89 ca 24 c0 ff dc 0b d0 c9 cc 1e c0 76 dc
>02bda8	20 d0 58 ce 12 c0 09 d0 70 c9 05 c0 e8 db c4 d4
>02bdb8	3f c3 12 d6 c6 cc de c4 51 dc 78 d4 26 cd c9 c3
>02bdc8	1a d0 fc c9 12 c0 aa dd 40 d2 41 cc c9 c4 e9 d8
>02bdd8	02 d0 c0 c4 c1 d3 95 c3 fe dc 1d d5 94 cc 06 c0
>02bde8	4f dd 2d d6 4c ca 5d c6 73 dc 86 d5 85 c5 aa dd
>02bdf8	5f d3 a0 c9 04 c0 fc d4 a3 c1 85 d3 06 cd 0a c0
>02be08	87 d2 23 ca 01 c0 e3 da 0f d6 b5 c3 93 db 19 d0
>02be18	34 ce 42 c4 0d d0 b7 c5 fe d4 73 c1 f4 db 09 d0
>02be28	88 cb 36 c0 46 d8 17 d0 36 cb 97 c3 9a db 10 d2
>02be38	ce c9 7e c1 f2 dc 83 d2 df cb 2b c2 af dd a7 d3
>02be48	f9 c9 02 c0 3a d6 76 c5 6a d8 2e d1 6b c6 bd d0
>02be58	27 ca 0c c0 e2 d8 97 d5 3c ce 07 c0 95 dc 20 d0
>02be68	8c c8 68 c5 13 d0 da c9 23 c0 a2 dd 53 d5 02 c6
>02be78	06 d0 fe cd 06 c3 a6 da 98 d4 95 cc 9c c3 6f db
>02be88	35 d3 ea ca 1b c0 cb d0 10 dc 21 d3 88 c5 12 d3
>02be98	21 cc 10 c0 05 d0 a7 c4 d3 dd 24 d0 a7 c2 70 d8
>02bea8	04 d3 30 c6 d5 d9 79 d0 f7 c8 91 c5 c5 d4 24 cd
>02beb8	7a c2 38 d8 dc d1 15 cb 43 c6 ec db 01 d4 17 c9
>02bec8	2c c4 6b d8 24 d0 87 c3 16 d0 60 ce 69 c5 e4 d5
>02bed8	fc c9 e4 c5 52 da 0c d0 e5 dd 24 d0 63 ca d6 c5
>02bee8	4d dd 1c d0 32 cd 82 c5 ab d9 03 d0 1f ca 09 c0
>02bef8	c6 dc b8 d3 0e cc 0d c0 e3 d3 f1 cc 0f c0 41 de
>02bf08	b8 d0 90 cb 5d c0 17 d9 04 d1 f5 c8 0d c0 07 d0
>02bf18	69 c8 b3 c3 b9 dd 1f d0 24 cc 2b c3 50 dd 69 d3
>02bf28	97 c8 19 c0 a2 d9 07 d0 0b cb 19 c0 42 d8 17 d0
>02bf38	1a c5 7a d4 09 c2 e3 da 7e d2 27 dd 21 d0 65 ce
>02bf48	7d c0 03 d3 13 c4 12 d0 70 c9 11 c0 9d d4 9f d8
>02bf58	19 d0 87 ca 79 c2 5f db 0e d0 2e ca 1d c0 25 d5
>02bf68	d5 cc 17 c0 d6 d2 1f c9 2a c1 c0 db 15 d0 2e c6
>02bf78	9f d4 cc c8 28 c2 fb dd 1d d0 c6 cb 1a c0 7e d5
>02bf88	03 d0 10 c9 53 c2 5a de 77 d4 2d cd 10 c0 71 d0
>02bf98	ea c8 1b c0 02 d5 ab d5 c8 c8 74 c3 78 d4 98 c3
>02bfa8	cf d5 70 c9 1b c0 11 de 1f d0 07 cb 1b c0 2d dd
>02bfb8	7c d2 a0 c9 6f c6 27 d5 11 d0 0a ce 7f c4 39 de
>02bfc8	1f d0 a2 d5 a6 cc 03 c6 55 d1 82 cd 2f c3 23 dc
>02bfd8	05 d0 5f c5 8b d5 bc cb 24 c0 28 dd 05 d0 da d9
>02bfe8	fb d3 20 ca 0e c0 6b d4 56 c2 08 d0 14 de ad d2
>02bff8	d9 cd 74 c5 18 d1 62 d6
.02c000					CodeEndSpace:

;******  End of listing
