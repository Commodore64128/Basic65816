
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 14 19:38:43 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c ca 12 01	jmp $0112ca			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	48 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	36 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	46 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	56 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	9a 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	01 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	66 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	e3 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	c5 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	80 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	80 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	01 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	0d 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	8a 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	01 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	12 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	24 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	9b 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	7b 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	57 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	41 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	c9 09					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	e9 0a					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	d5 08					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	0d 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	41 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	7d 09					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	97 09					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	ae 09					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	48 04					.word IllegalToken             & $FFFF ; token $321d ","
>01003c	48 04					.word IllegalToken             & $FFFF ; token $321e ";"
>01003e	48 04					.word IllegalToken             & $FFFF ; token $321f ":"
>010040	48 04					.word IllegalToken             & $FFFF ; token $3220 "("
>010042	48 04					.word IllegalToken             & $FFFF ; token $3221 ")"
>010044	48 04					.word IllegalToken             & $FFFF ; token $3222 "'"
>010046	48 04					.word IllegalToken             & $FFFF ; token $3223 "to"
>010048	48 04					.word IllegalToken             & $FFFF ; token $3224 "step"
>01004a	b8 12					.word Function_REM             & $FFFF ; token $3e25 "rem"
>01004c	a7 0b					.word Function_Let             & $FFFF ; token $3e26 "let"
>01004e	99 12					.word Function_ASSERT          & $FFFF ; token $3e27 "assert"
>010050	96 10					.word Function_END             & $FFFF ; token $3e28 "end"
>010052	98 10					.word Function_RUN             & $FFFF ; token $3e29 "run"
>010054	f5 10					.word Function_STOP            & $FFFF ; token $3e2a "stop"
>010056	f1 10					.word Function_CLEAR           & $FFFF ; token $3e2b "clear"
>010058	50 11					.word Function_Dim             & $FFFF ; token $3e2c "dim"
>01005a	c4 11					.word Function_COLLECT         & $FFFF ; token $3e2d "collect"
>01005c	b4 12					.word Function_CLS             & $FFFF ; token $3e2e "cls"
>01005e	22 0c					.word Function_PRINT           & $FFFF ; token $3e2f "print"
>010060	24 0f					.word Function_GOTO            & $FFFF ; token $3e30 "goto"
>010062	83 0f					.word Function_GOSUB           & $FFFF ; token $3e31 "gosub"
>010064	9f 0f					.word Function_RETURN          & $FFFF ; token $3e32 "return"
>010066	e1 0e					.word Function_ONGOTO          & $FFFF ; token $3e33 "on"
>010068	d5 0c					.word Handler_ELSE             & $FFFF ; token $3e34 "else"
>01006a	53 12					.word Command_POKE             & $FFFF ; token $3e35 "poke"
>01006c	6b 12					.word Command_DOKE             & $FFFF ; token $3e36 "doke"
>01006e	7f 12					.word Command_LOKE             & $FFFF ; token $3e37 "loke"
>010070	d1 0f					.word Function_REPEAT          & $FFFF ; token $3c38 "repeat"
>010072	2f 10					.word Function_WHILE           & $FFFF ; token $3c39 "while"
>010074	6e 0c					.word Function_IF              & $FFFF ; token $3c3a "if"
>010076	aa 0d					.word Command_FOR              & $FFFF ; token $3c3b "for"
>010078	66 10					.word Function_WEND            & $FFFF ; token $3a3c "wend"
>01007a	e8 0f					.word Function_UNTIL           & $FFFF ; token $3a3d "until"
>01007c	48 04					.word IllegalToken             & $FFFF ; token $3a3e "then"
>01007e	03 0d					.word Handler_ENDIF            & $FFFF ; token $3a3f "endif"
>010080	25 0e					.word Command_NEXT             & $FFFF ; token $3a40 "next"
.010082					TokenText:
>010082	02 26					 .text $02,"&"        ; token $2001
>010084	02 7c					 .text $02,"|"        ; token $2002
>010086	02 5e					 .text $02,"^"        ; token $2003
>010088	12 3c					 .text $12,"<"        ; token $2204
>01008a	12 3e					 .text $12,">"        ; token $2205
>01008c	12 3d					 .text $12,"="        ; token $2206
>01008e	13 3c 3d				 .text $13,"<="       ; token $2207
>010091	13 3e 3d				 .text $13,">="       ; token $2208
>010094	13 3c 3e				 .text $13,"<>"       ; token $2209
>010097	22 2b					 .text $22,"+"        ; token $240a
>010099	22 2d					 .text $22,"-"        ; token $240b
>01009b	32 2a					 .text $32,"*"        ; token $260c
>01009d	32 2f					 .text $32,"/"        ; token $260d
>01009f	32 25					 .text $32,"%"        ; token $260e
>0100a1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100a4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100a7	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100ac	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100b1	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100b6	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100bb	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100c0	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100c6	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100cc	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100d1	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100d6	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100dc	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100e2	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100e8	92 2c					 .text $92,","        ; token $321d
>0100ea	92 3b					 .text $92,";"        ; token $321e
>0100ec	92 3a					 .text $92,":"        ; token $321f
>0100ee	92 28					 .text $92,"("        ; token $3220
>0100f0	92 29					 .text $92,")"        ; token $3221
>0100f2	92 27					 .text $92,"'"        ; token $3222
>0100f4	93 74 6f				 .text $93,"to"       ; token $3223
>0100f7	95 73 74 65 70				 .text $95,"step"     ; token $3224
>0100fc	f4 72 65 6d				 .text $f4,"rem"      ; token $3e25
>010100	f4 6c 65 74				 .text $f4,"let"      ; token $3e26
>010104	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e27
>01010b	f4 65 6e 64				 .text $f4,"end"      ; token $3e28
>01010f	f4 72 75 6e				 .text $f4,"run"      ; token $3e29
>010113	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2a
>010118	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e2b
>01011e	f4 64 69 6d				 .text $f4,"dim"      ; token $3e2c
>010122	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e2d
>01012a	f4 63 6c 73				 .text $f4,"cls"      ; token $3e2e
>01012e	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e2f
>010134	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e30
>010139	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e31
>01013f	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e32
>010146	f3 6f 6e				 .text $f3,"on"       ; token $3e33
>010149	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e34
>01014e	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e35
>010153	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e36
>010158	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e37
>01015d	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c38
>010164	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c39
>01016a	e3 69 66				 .text $e3,"if"       ; token $3c3a
>01016d	e4 66 6f 72				 .text $e4,"for"      ; token $3c3b
>010171	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a3c
>010176	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a3d
>01017c	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a3e
>010181	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a3f
>010187	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a40
>01018c	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$321d					commaTokenID                     = $321d
=$321e					semicolonTokenID                 = $321e
=$321f					colonTokenID                     = $321f
=$3220					lparenTokenID                    = $3220
=$3221					rparenTokenID                    = $3221
=$3222					squoteTokenID                    = $3222
=$3223					toTokenID                        = $3223
=$3224					stepTokenID                      = $3224
=$3e25					remTokenID                       = $3e25
=$3e26					letTokenID                       = $3e26
=$3e27					assertTokenID                    = $3e27
=$3e28					endTokenID                       = $3e28
=$3e29					runTokenID                       = $3e29
=$3e2a					stopTokenID                      = $3e2a
=$3e2b					clearTokenID                     = $3e2b
=$3e2c					dimTokenID                       = $3e2c
=$3e2d					collectTokenID                   = $3e2d
=$3e2e					clsTokenID                       = $3e2e
=$3e2f					printTokenID                     = $3e2f
=$3e30					gotoTokenID                      = $3e30
=$3e31					gosubTokenID                     = $3e31
=$3e32					returnTokenID                    = $3e32
=$3e33					onTokenID                        = $3e33
=$3e34					elseTokenID                      = $3e34
=$3e35					pokeTokenID                      = $3e35
=$3e36					dokeTokenID                      = $3e36
=$3e37					lokeTokenID                      = $3e37
=$3c38					repeatTokenID                    = $3c38
=$3c39					whileTokenID                     = $3c39
=$3c3a					ifTokenID                        = $3c3a
=$3c3b					forTokenID                       = $3c3b
=$3a3c					wendTokenID                      = $3a3c
=$3a3d					untilTokenID                     = $3a3d
=$3a3e					thenTokenID                      = $3a3e
=$3a3f					endifTokenID                     = $3a3f
=$3a40					nextTokenID                      = $3a40

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.01018d					Evaluate:
.01018d	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010190	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010193					EvaluateLevel:
.010193	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010196	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010198	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01019a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01019d	b0 79		bcs $010218			bcs 	_ELVariable
.01019f	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101a2	b0 16		bcs $0101ba			bcs 	_ELConstant
.0101a4	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101a7	90 7f		bcc $010228			bcc 	_ELStringConstant
.0101a9	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101ac	90 03		bcc $0101b1			bcc 	_ELConstantShift
.0101ae	82 94 00	brl $010245			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101b1					_ELConstantShift:
.0101b1	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101b4	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101b6	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101b8	e6 06		inc $06				inc 	DCodePtr
.0101ba					_ELConstant:
.0101ba	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101bc	38		sec				sec  								; shift it in the range 0-32767
.0101bd	e9 00 40	sbc #$4000			sbc 	#$4000
.0101c0	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101c1	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101c3	6a		ror a				ror 	a 							; rotate that into the constant value
.0101c4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101c6	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101c8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101ca	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101cc	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101ce	e6 06		inc $06				inc 	DCodePtr
.0101d0					_ELGotAtom:
.0101d0	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0101d2	a8		tay				tay 								; save in Y
.0101d3	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0101d6	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0101d9	d0 35		bne $010210			bne 	_ELExit
.0101db	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0101dd	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101e0	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0101e2	98		tya				tya 								; get the keyword token back
.0101e3	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101e6	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.0101e8	90 26		bcc $010210			bcc 	_ELExit 					; precedence too low, then exit.
.0101ea	5a		phy				phy 								; save the binary operator on the stack
.0101eb	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0101ed	e6 06		inc $06				inc 	DCodePtr
.0101ef	18		clc				clc 								; try the next level up
.0101f0	69 00 02	adc #$0200			adc 	#1 << TokenShift
.0101f3	e8		inx				inx 								; calculate the RHS at the next stack level.
.0101f4	e8		inx				inx
.0101f5	20 93 01	jsr $010193			jsr 	EvaluateLevel
.0101f8	ca		dex				dex
.0101f9	ca		dex				dex
.0101fa	7a		ply				ply 								; get operator token back into Y
.0101fb					_ELExecuteY:
.0101fb	98		tya				tya
.0101fc	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101ff	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010200	9b		txy				txy 								; save X in Y
.010201	aa		tax				tax 								; double keyword ID in X
.010202	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010206	bb		tyx				tyx 								; restore X.
.010207	8f 0c 02 01	sta $01020c			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01020b					_ELCallRoutine:
.01020b	20 0b 02	jsr $01020b			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01020e	80 c0		bra $0101d0			bra 	_ELGotAtom 					; go round operator level again.
.010210	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010212	0a		asl a				asl 	a
.010213	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010215	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010217	60		rts				rts
.010218					_ELVariable:
.010218	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.01021a	20 d9 02	jsr $0102d9			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01021d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01021f	94 10		sty $10,x			sty 	EXSValueH+0,x
.010221	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010223	80 ab		bra $0101d0			bra 	_ELGotAtom
.010225					_ELSyntax
.010225	82 31 02	brl $010459			brl 	SyntaxError
.010228					_ELStringConstant:
.010228	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01022b	f0 f8		beq $010225			beq 	_ELSyntax
.01022d	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01022f	1a		inc a				inc 	a
.010230	1a		inc a				inc 	a
.010231	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010233	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010235	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010237	18		clc				clc 								; add to string constant.
.010238	65 06		adc $06				adc 	DCodePtr
.01023a	85 06		sta $06				sta 	DCodePtr
.01023c	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01023e	09 00 80	ora #$8000			ora 	#$8000
.010241	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010243	80 8b		bra $0101d0			bra 	_ELGotAtom
.010245					_ELUnaryKeyword:
.010245	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010247	a8		tay				tay 								; put the token in Y.
.010248	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01024a	e6 06		inc $06				inc 	DCodePtr
.01024c	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01024f	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010252	f0 a7		beq $0101fb			beq 	_ELExecuteY					; go back and execute it
.010254	c0 20 32	cpy #$3220			cpy 	#lparenTokenID 				; is it an open bracket ?
.010257	d0 11		bne $01026a			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010259	20 90 02	jsr $010290			jsr 	EvaluateNext 				; evaluate the expression
.01025c	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; consume the right bracket.
.01025f					_ELCopy:
.01025f	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010261	95 00		sta $00,x			sta 	EXSValueL+0,x
.010263	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010265	95 10		sta $10,x			sta 	EXSValueH+0,x
.010267	82 66 ff	brl $0101d0			brl 	_ELGotAtom 					; and continue.
.01026a					_ELUnaryOperator:
.01026a	5a		phy				phy 								; save the operator on the stack.
.01026b	e8		inx				inx 								; this is like evaluate next
.01026c	e8		inx				inx
.01026d	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010270	20 93 01	jsr $010193			jsr 	EvaluateLevel
.010273	ca		dex				dex 								; unwind the stack.
.010274	ca		dex				dex
.010275	68		pla				pla 								; restore the unary operator.
.010276	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010279	f0 03		beq $01027e			beq 	_ELMinus
.01027b	4c 59 04	jmp $010459			jmp 	SyntaxError
.01027e					_ELMinus:
.01027e	38		sec				sec 								; do the negation calculation.
.01027f	a9 00 00	lda #$0000			lda 	#0
.010282	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010284	95 00		sta $00,x			sta 	EXSValueL+0,x
.010286	a9 00 00	lda #$0000			lda 	#0
.010289	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01028b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01028d	82 40 ff	brl $0101d0			brl 	_ELGotAtom					; and continue.
.010290					EvaluateNext:
.010290	e8		inx				inx
.010291	e8		inx				inx
.010292	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010295	20 93 01	jsr $010193			jsr 	EvaluateLevel
.010298	ca		dex				dex
.010299	ca		dex				dex
.01029a	60		rts				rts
.01029b					EvaluateInteger:
.01029b	20 8d 01	jsr $01018d			jsr 	Evaluate
.01029e	b0 01		bcs $0102a1			bcs 	EIType
.0102a0	60		rts				rts
.0102a1					EIType:
.0102a1	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0102a4	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102ac	78 70 65 63 74 65 64 00
.0102b4					EvaluateNextInteger:
.0102b4	20 90 02	jsr $010290			jsr 	EvaluateNext
.0102b7	b0 e8		bcs $0102a1			bcs 	EIType
.0102b9	60		rts				rts
.0102ba					EvaluateString:
.0102ba	20 8d 01	jsr $01018d			jsr 	Evaluate
.0102bd	90 01		bcc $0102c0			bcc 	ESType
.0102bf	60		rts				rts
.0102c0					ESType:
.0102c0	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0102c3	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102cb	78 70 65 63 74 65 64 00
.0102d3					EvaluateNextString:
.0102d3	20 90 02	jsr $010290			jsr 	EvaluateNext
.0102d6	90 e8		bcc $0102c0			bcc 	ESType
.0102d8	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0102d9					VariableAccessExpression:
.0102d9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0102db	48		pha				pha
.0102dc	20 1a 03	jsr $01031a			jsr 	VariableFind 				; try to find the variables
.0102df	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0102e1	90 23		bcc $010306			bcc 	_VANError 					; not found, so report an error.
.0102e3	68		pla				pla 								; get and save that first token
.0102e4	48		pha				pha 								; we use it for typing.
.0102e5	a8		tay				tay 								; put first token in Y.
.0102e6	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102e9	f0 07		beq $0102f2			beq 	_VANNotArray
.0102eb	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.0102ed	20 91 03	jsr $010391			jsr 	VariableSubscript			; index calculation
.0102f0	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0102f2					_VANNotArray:
.0102f2	68		pla				pla 								; get the token back.
.0102f3	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.0102f6	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.0102f9	38		sec				sec 								; set up return string.
.0102fa	f0 06		beq $010302			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.0102fc	18		clc				clc 								; returning a number, read high data word
.0102fd	a0 02 00	ldy #$0002			ldy 	#2
.010300	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010302					_VANLoadLower:
.010302	a8		tay				tay 								; put A into Y (this is the high byte)
.010303	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010305	60		rts				rts
.010306					_VANError:
.010306	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010309	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010311	20 75 6e 6b 6e 6f 77 6e 00
.01031a					VariableFind:
.01031a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01031c	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01031f	90 5c		bcc $01037d			bcc 	_VFError
.010321	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010324	b0 11		bcs $010337			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010326	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010329	3a		dec a				dec 	a 							; now 0-25
.01032a	0a		asl a				asl 	a 							; x 4 and clear carry
.01032b	0a		asl a				asl 	a
.01032c	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01032f	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010331	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010333	e6 06		inc $06				inc 	DCodePtr
.010335	38		sec				sec 								; return with carry set.
.010336	60		rts				rts
.010337					_VFSlowVariable:
.010337	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010339	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.01033c	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01033d	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01033e	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010341	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010343	85 08		sta $08				sta 	DTemp1
.010345	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010347	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01034a	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01034b	65 08		adc $08				adc 	DTemp1
.01034d	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01034f	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010351					_VFNext:
.010351	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010353	f0 26		beq $01037b			beq 	_VFFail 					; if zero, then it's the end of the list.
.010355	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010357	a8		tay				tay 								; read the address of the name at $0002,y
.010358	b9 02 00	lda $0002,y			lda 	$0002,y
.01035b	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01035d	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010360					_VFCompare:
.010360	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010362	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010364	d0 eb		bne $010351			bne 	_VFNext 					; if not, go to the next one.
.010366	c8		iny				iny 								; advance token pointer
.010367	c8		iny				iny
.010368	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.01036b	d0 f3		bne $010360			bne 	_VFCompare
.01036d	98		tya				tya 								; this is the length of the word.
.01036e	18		clc				clc 								; so we add it to the code pointer
.01036f	65 06		adc $06				adc 	DCodePtr
.010371	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010373	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010375	18		clc				clc 								; four on is the actual data
.010376	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010379	38		sec				sec 								; return with CS indicating success
.01037a	60		rts				rts
.01037b					_VFFail:
.01037b	18		clc				clc
.01037c	60		rts				rts
.01037d					_VFError:
.01037d	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010380	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010388	76 61 72 69 61 62 6c 65 00
.010391					VariableSubscript:
.010391	48		pha				pha		 							; save variable address on stack.
.010392	20 b4 02	jsr $0102b4			jsr		EvaluateNextInteger 		; get the subscript
.010395	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; skip right bracket.
.010398	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01039b	d0 10		bne $0103ad			bne 	_VANSubscript
.01039d	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01039f	f0 02		beq $0103a3			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103a1	b0 0a		bcs $0103ad			bcs 	_VANSubscript
.0103a3					_VANSubOkay:
.0103a3	0a		asl a				asl 	a 							; double lsword
.0103a4	0a		asl a				asl 	a 							; and again, also clears carry.
.0103a5	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103a7	68		pla				pla 								; restore DVariablePtr
.0103a8	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103a9	1a		inc a				inc 	a
.0103aa	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103ac	60		rts				rts
.0103ad					_VANSubscript:
.0103ad	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0103b0	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103b8	79 20 53 75 62 73 63 72 69 70 74 00
.0103c4					VariableCreate:
.0103c4	48		pha				pha 								; save count.
.0103c5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103c8	29 00 20	and #$2000			and 	#IDTypeMask
.0103cb	f0 06		beq $0103d3			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103cd	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103d0	18		clc				clc 								; which is guaranteed by have a 0 length.
.0103d1	65 02		adc $02				adc 	DBaseAddress
.0103d3					_VCIsInteger:
.0103d3	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.0103d5	68		pla				pla 								; restore count
.0103d6	48		pha				pha
.0103d7	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.0103d8	0a		asl a				asl 	a 							; 2 x # items.
.0103d9	0a		asl a				asl 	a 							; 4 x # items.
.0103da					_VCNotSingle:
.0103da	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0103dc	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0103df	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.0103e2	f0 04		beq $0103e8			beq 	_VCNotArray
.0103e4	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.0103e6	e6 08		inc $08				inc 	DTemp1
.0103e8					_VCNotArray:
.0103e8	5a		phy				phy 								; save address of first token on stack.
.0103e9	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0103ec	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0103ee	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103f0	18		clc				clc 								; add 4 for link and name words
.0103f1	69 04 00	adc #$0004			adc 	#4
.0103f4	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.0103f6	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.0103f8	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.0103fa					_VCErase:
.0103fa	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103fc	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103ff	c8		iny				iny
.010400	c8		iny				iny
.010401	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010403	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010405	d0 f3		bne $0103fa			bne 	_VCErase
.010407	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010409	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01040b	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01040e	68		pla				pla 								; restore the token address
.01040f	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010412	68		pla				pla 								; restore count and store.
.010413	99 04 00	sta $0004,y			sta 	$0004,y
.010416	98		tya				tya 								; update the head link
.010417	92 20		sta ($20)			sta 	(DHashTablePtr)
.010419	18		clc				clc 								; advance pointer to the data bit.
.01041a	69 04 00	adc #$0004			adc 	#4
.01041d	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.01041e					ErrorHandler:
.01041e	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010420	fa		plx				plx 								; address of error message -1
.010421	e8		inx				inx 								; error message.
.010422	20 c5 04	jsr $0104c5			jsr 	PrintROMMessage 			; print message in ROM
.010425	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010427	f0 15		beq $01043e			beq 	_EHEndMessage
.010429	a2 43 04	ldx #$0443			ldx 	#_EHAt & $FFFF 				; print " at "
.01042c	20 c5 04	jsr $0104c5			jsr 	PrintROMMessage
.01042f	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010431	a0 00 00	ldy #$0000			ldy 	#0
.010434	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010437	20 04 0b	jsr $010b04			jsr 	ConvertToString 			; convert and print it.
.01043a	a8		tay				tay
.01043b	20 d9 04	jsr $0104d9			jsr 	PrintBASICString
.01043e					_EHEndMessage:
.01043e	20 1c 13	jsr $01131c			jsr 	HWNewLine
.010441	80 fe		bra $010441	_EH1:	bra 	_EH1
>010443	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010448					IllegalToken:
.010448	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01044b	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010453	54 6f 6b 65 6e 00
.010459					SyntaxError:
.010459	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01045c	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010464	72 72 6f 72 00
.010469					ExpectToken:
.010469	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01046b	d0 05		bne $010472			bne 	_CTKError					; error if not
.01046d	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01046f	e6 06		inc $06				inc 	DCodePtr
.010471	60		rts				rts
.010472					_CTKError:
.010472	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010475	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01047d	74 6f 6b 65 6e 00
.010483					ExpectRightBracket:
.010483	48		pha				pha
.010484	a9 21 32	lda #$3221			lda 	#rparenTokenID
.010487	20 69 04	jsr $010469			jsr 	ExpectToken
.01048a	68		pla				pla
.01048b	60		rts				rts
.01048c					ExpectComma:
.01048c	48		pha				pha
.01048d	a9 1d 32	lda #$321d			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010490	20 69 04	jsr $010469			jsr 	ExpectToken
.010493	68		pla				pla
.010494	60		rts				rts
.010495					CheckBothNumeric:
.010495	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010497	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010499	30 01		bmi $01049c			bmi 	_CBNFail 					; need to both be zero in bit 15
.01049b	60		rts				rts
.01049c					_CBNFail:
.01049c	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01049f	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104a7	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104b5					ResetTypeInteger:
.0104b5	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104b7	29 ff 7f	and #$7fff			and 	#$7FFF
.0104ba	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104bc	60		rts				rts
.0104bd					ResetTypeString:
.0104bd	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104bf	09 00 80	ora #$8000			ora 	#$8000
.0104c2	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104c4	60		rts				rts
.0104c5					PrintROMMessage:
.0104c5	48		pha				pha
.0104c6	da		phx				phx
.0104c7					_PRMLoop:
.0104c7	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104cb	29 ff 00	and #$00ff			and 	#$00FF
.0104ce	f0 06		beq $0104d6			beq 	_PRMExit
.0104d0	20 fa 12	jsr $0112fa			jsr 	HWPrintChar
.0104d3	e8		inx				inx
.0104d4	80 f1		bra $0104c7			bra 	_PRMLoop
.0104d6					_PRMExit:
.0104d6	fa		plx				plx
.0104d7	68		pla				pla
.0104d8	60		rts				rts
.0104d9					PrintBASICString:
.0104d9	48		pha				pha
.0104da	da		phx				phx
.0104db	5a		phy				phy
.0104dc	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0104df	29 ff 00	and #$00ff			and 	#$00FF
.0104e2	f0 0b		beq $0104ef			beq 	_PBSExit 					; null string
.0104e4	aa		tax				tax
.0104e5					_PBSLoop:
.0104e5	c8		iny				iny
.0104e6	b9 00 00	lda $0000,y			lda 	$0000,y
.0104e9	20 fa 12	jsr $0112fa			jsr 	HWPrintChar
.0104ec	ca		dex				dex
.0104ed	d0 f6		bne $0104e5			bne 	_PBSLoop
.0104ef					_PBSExit:
.0104ef	7a		ply				ply
.0104f0	fa		plx				plx
.0104f1	68		pla				pla
.0104f2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0104f3					StringTempAllocate:
.0104f3	48		pha				pha
.0104f4	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.0104f6	d0 09		bne $010501			bne 	_STANoReset
.0104f8	5a		phy				phy 								; reset the temp string pointer.
.0104f9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0104fc	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104fe	85 16		sta $16				sta 	DTempStringPointer
.010500	7a		ply				ply
.010501					_STANoReset:
.010501	68		pla				pla 								; get length.
.010502	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010505	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010508	18		clc				clc 								; this adds one, for the length.
.010509	65 16		adc $16				adc 	DTempStringPointer
.01050b	85 16		sta $16				sta 	DTempStringPointer
.01050d	48		pha				pha 								; save start address
.01050e	a9 00 00	lda #$0000			lda 	#$0000
.010511	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010513	92 16		sta ($16)			sta		(DTempStringPointer)
.010515	c2 20		rep #$20			rep 	#$20
.010517	68		pla				pla 								; restore start address
.010518	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01051a	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01051c	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01051e	60		rts				rts
.01051f					StringWriteCharacter:
.01051f	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010521	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010523	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010525	1a		inc a				inc 	a
.010526	92 18		sta ($18)			sta 	(DStartTempString)
.010528	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01052a	60		rts				rts
.01052b					StringCreateCopy:
.01052b	a8		tay				tay 								; put pointer to string in Y
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01052f	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010532	f0 17		beq $01054b			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010534	da		phx				phx 								; save X and put the character count in X
.010535	aa		tax				tax
.010536					_SCCCopy:
.010536	c8		iny				iny 								; advance and read (first time skips length)
.010537	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010539	b9 00 00	lda $0000,y			lda 	$0000,y
.01053c	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01053e	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010540	1a		inc a				inc 	a
.010541	92 18		sta ($18)			sta 	(DStartTempString)
.010543	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010545	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010547	ca		dex				dex 								; do X times
.010548	d0 ec		bne $010536			bne 	_SCCCopy
.01054a	fa		plx				plx
.01054b					_SCCExit:
.01054b	60		rts				rts
.01054c					StringMakeConcrete:
.01054c	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01054f	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010551	90 0f		bcc $010562			bcc 	_SMCExit
.010553	85 08		sta $08				sta 	DTemp1 						; source
.010555	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010557	29 ff 00	and #$00ff			and 	#$00FF
.01055a	d0 07		bne $010563			bne 	_SMCNonZero 				; if not "" skip.
.01055c	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01055f	18		clc				clc 								; this reference is used for all empty strings.
.010560	65 02		adc $02				adc 	DBaseAddress
.010562					_SMCExit:
.010562	60		rts				rts
.010563					_SMCNonZero:
.010563	48		pha				pha 								; save on stack.
.010564	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010567	18		clc				clc
.010568	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01056b	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01056d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01056f	85 0c		sta $0c				sta 	DTemp2 						; target
.010571	7a		ply				ply 								; get length copy from here until Y goes -ve
.010572	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010574					_SMCLoop:
.010574	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.010576	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010578	88		dey				dey 								; Y+1 times.
.010579	10 f9		bpl $010574			bpl 	_SMCLoop
.01057b	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01057d	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01057f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010580					Binary_Add:
.010580	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010582	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010584	30 12		bmi $010598		bmi 	_BATypeError
.010586	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010588	30 3f		bmi $0105c9		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01058a	18		clc			clc 										; add the results
.01058b	b5 00		lda $00,x		lda		EXSValueL+0,x
.01058d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01058f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010591	b5 10		lda $10,x		lda		EXSValueH+0,x
.010593	75 12		adc $12,x		adc 	EXSValueH+2,x
.010595	95 10		sta $10,x		sta 	EXSValueH+0,x
.010597	60		rts			rts
.010598					_BATypeError:
.010598	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01059b	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105a3	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105b3	65 73 00
.0105b6					_BALengthError:
.0105b6	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0105b9	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105c1	6f 6f 20 6c 6f 6e 67 00
.0105c9					_BAConcatenateString:
.0105c9	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105cb	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0105cd	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105cf	85 0c		sta $0c			sta 	DTemp2
.0105d1	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0105d3	18		clc			clc 										; work out the total length
.0105d4	b2 08		lda ($08)		lda 	(DTemp1)
.0105d6	72 0c		adc ($0c)		adc 	(DTemp2)
.0105d8	b0 14		bcs $0105ee		bcs 	_BAConcatLengthError 				; string is too long.
.0105da	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0105dc	20 f3 04	jsr $0104f3		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0105df	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0105e1	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105e3	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0105e5	20 2b 05	jsr $01052b		jsr 	StringCreateCopy
.0105e8	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0105ea	20 2b 05	jsr $01052b		jsr 	StringCreateCopy
.0105ed	60		rts			rts
.0105ee					_BAConcatLengthError:
.0105ee	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0105f1	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105f9	6f 6f 20 6c 6f 6e 67 00
.010601					Binary_Subtract:
.010601	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010604	38		sec			sec
.010605	b5 00		lda $00,x		lda		EXSValueL+0,x
.010607	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010609	95 00		sta $00,x		sta 	EXSValueL+0,x
.01060b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01060d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01060f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010611	60		rts			rts
.010612					Binary_ShiftRight:
.010612	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010615	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010617	29 3f 00	and #$003f		and 	#63
.01061a	f0 07		beq $010623		beq		_Binary_SRExit
.01061c					_Binary_SRLoop:
.01061c	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01061e	76 00		ror $00,x		ror 	EXSValueL+0,x
.010620	3a		dec a			dec 	a
.010621	d0 f9		bne $01061c		bne 	_Binary_SRLoop
.010623					_Binary_SRExit:
.010623	60		rts			rts
.010624					Binary_ShiftLeft:
.010624	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010627	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010629	29 3f 00	and #$003f		and 	#63
.01062c	f0 07		beq $010635		beq		_Binary_SLExit
.01062e					_Binary_SLLoop:
.01062e	16 00		asl $00,x		asl 	EXSValueL+0,x
.010630	36 10		rol $10,x		rol 	EXSValueH+0,x
.010632	3a		dec a			dec 	a
.010633	d0 f9		bne $01062e		bne 	_Binary_SLLoop
.010635					_Binary_SLExit:
.010635	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010636					Binary_And:
.010636	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010639	b5 00		lda $00,x		lda		EXSValueL+0,x
.01063b	35 02		and $02,x		and 	EXSValueL+2,x
.01063d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063f	b5 10		lda $10,x		lda		EXSValueH+0,x
.010641	35 12		and $12,x		and 	EXSValueH+2,x
.010643	95 10		sta $10,x		sta 	EXSValueH+0,x
.010645	60		rts			rts
.010646					Binary_Or:
.010646	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010649	b5 00		lda $00,x		lda		EXSValueL+0,x
.01064b	15 02		ora $02,x		ora 	EXSValueL+2,x
.01064d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01064f	b5 10		lda $10,x		lda		EXSValueH+0,x
.010651	15 12		ora $12,x		ora 	EXSValueH+2,x
.010653	95 10		sta $10,x		sta 	EXSValueH+0,x
.010655	60		rts			rts
.010656					Binary_Xor:
.010656	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010659	b5 00		lda $00,x		lda		EXSValueL+0,x
.01065b	55 02		eor $02,x		eor 	EXSValueL+2,x
.01065d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01065f	b5 10		lda $10,x		lda		EXSValueH+0,x
.010661	55 12		eor $12,x		eor 	EXSValueH+2,x
.010663	95 10		sta $10,x		sta 	EXSValueH+0,x
.010665	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010666					Binary_Equals:
.010666	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010669	b0 0e		bcs $010679		bcs 	_BEString
.01066b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01066d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01066f	d0 4f		bne $0106c0		bne 	Compare_Fail
.010671	b5 10		lda $10,x		lda 	EXSValueH,x
.010673	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010675	d0 49		bne $0106c0		bne 	Compare_Fail
.010677	80 3f		bra $0106b8		bra 	Compare_Succeed
.010679					_BEString:
.010679	09 00 00	ora #$0000		ora 	#$0000
.01067c	f0 3a		beq $0106b8		beq 	Compare_Succeed
.01067e	80 40		bra $0106c0		bra 	Compare_Fail
.010680					Binary_NotEquals:
.010680	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010683	b0 0e		bcs $010693		bcs 	_BNEString
.010685	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010687	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010689	d0 2d		bne $0106b8		bne 	Compare_Succeed
.01068b	b5 10		lda $10,x		lda 	EXSValueH,x
.01068d	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01068f	d0 27		bne $0106b8		bne 	Compare_Succeed
.010691	80 2d		bra $0106c0		bra 	Compare_Fail
.010693					_BNEString:
.010693	09 00 00	ora #$0000		ora 	#$0000
.010696	d0 20		bne $0106b8		bne 	Compare_Succeed
.010698	80 26		bra $0106c0		bra 	Compare_Fail
.01069a					Binary_Less:
.01069a	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01069d	b0 12		bcs $0106b1		bcs 	_BLString
.01069f	38		sec			sec
.0106a0	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106a2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106a4	b5 10		lda $10,x		lda 	EXSValueH,x
.0106a6	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106a8	50 03		bvc $0106ad		bvc 	*+5
.0106aa	49 00 80	eor #$8000		eor 	#$8000
.0106ad	30 09		bmi $0106b8		bmi 	Compare_Succeed
.0106af	80 0f		bra $0106c0		bra 	Compare_Fail
.0106b1					_BLString:
.0106b1	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106b4	f0 02		beq $0106b8		beq 	Compare_Succeed
.0106b6	80 08		bra $0106c0		bra 	Compare_Fail
.0106b8					Compare_Succeed:
.0106b8	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106bb	95 00		sta $00,x		sta 	EXSValueL,x
.0106bd	95 10		sta $10,x		sta 	EXSValueH,x
.0106bf	60		rts			rts
.0106c0					Compare_Fail:
.0106c0	74 00		stz $00,x		stz 	EXSValueL,x
.0106c2	74 10		stz $10,x		stz 	EXSValueH,x
.0106c4	60		rts			rts
.0106c5					Binary_GreaterEqual:
.0106c5	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106c8	b0 12		bcs $0106dc		bcs 	_BGEString
.0106ca	38		sec			sec
.0106cb	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106cd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106cf	b5 10		lda $10,x		lda 	EXSValueH,x
.0106d1	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106d3	50 03		bvc $0106d8		bvc 	*+5
.0106d5	49 00 80	eor #$8000		eor 	#$8000
.0106d8	10 de		bpl $0106b8		bpl 	Compare_Succeed
.0106da	80 e4		bra $0106c0		bra 	Compare_Fail
.0106dc					_BGEString:
.0106dc	09 00 00	ora #$0000		ora 	#$0000
.0106df	10 d7		bpl $0106b8		bpl 	Compare_Succeed
.0106e1	80 dd		bra $0106c0		bra 	Compare_Fail
.0106e3					Binary_LessEqual:
.0106e3	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106e6	b0 12		bcs $0106fa		bcs 	_BLEString
.0106e8	18		clc			clc 									; numeric <= signed
.0106e9	b5 00		lda $00,x		lda 	EXSValueL,x
.0106eb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ed	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ef	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106f1	50 03		bvc $0106f6		bvc 	*+5
.0106f3	49 00 80	eor #$8000		eor 	#$8000
.0106f6	30 c0		bmi $0106b8		bmi 	Compare_Succeed
.0106f8	80 c6		bra $0106c0		bra 	Compare_Fail
.0106fa					_BLEString:
.0106fa	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0106fd	d0 b9		bne $0106b8		bne 	Compare_Succeed
.0106ff	80 bf		bra $0106c0		bra 	Compare_Fail
.010701					Binary_Greater:
.010701	20 1f 07	jsr $01071f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010704	b0 12		bcs $010718		bcs 	_BGString
.010706	18		clc			clc 									; numeric > signed
.010707	b5 00		lda $00,x		lda 	EXSValueL,x
.010709	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01070b	b5 10		lda $10,x		lda 	EXSValueH,x
.01070d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01070f	50 03		bvc $010714		bvc 	*+5
.010711	49 00 80	eor #$8000		eor 	#$8000
.010714	10 a2		bpl $0106b8		bpl 	Compare_Succeed
.010716	80 a8		bra $0106c0		bra 	Compare_Fail
.010718					_BGString:
.010718	c9 01 00	cmp #$0001		cmp 	#$0001
.01071b	f0 9b		beq $0106b8		beq 	Compare_Succeed
.01071d	80 a1		bra $0106c0		bra 	Compare_Fail
.01071f					CompareTypeCheck:
.01071f	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010721	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010723	30 06		bmi $01072b		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010725	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010727	30 1c		bmi $010745		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010729	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01072a	60		rts			rts
.01072b					_CTCFail:
.01072b	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01072e	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010736	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010745					_CTCStringCompare:
.010745	20 b5 04	jsr $0104b5		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010748	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01074a	85 08		sta $08			sta 	DTemp1
.01074c	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01074e	85 0c		sta $0c			sta 	DTemp2
.010750	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010753	a8		tay			tay
.010754	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010756	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010758	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01075a	90 02		bcc $01075e		bcc 	_CTCSmallest
.01075c	b2 0c		lda ($0c)		lda 	(DTemp2)
.01075e					_CTCSmallest:
.01075e	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010760					_CTCCompare:
.010760	c8		iny			iny 									; look at next character (done first, first char is size)
.010761	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010763	30 16		bmi $01077b		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010765	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010767	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010769	f0 f5		beq $010760		beq 	_CTCCompare 					; if zero, try the next character.
.01076b	b0 07		bcs $010774		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01076d					_CTCLess:
.01076d	c2 20		rep #$20		rep 	#$20
.01076f	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010772	80 14		bra $010788		bra 	_CTCExit
.010774					_CTCGreater:
.010774	c2 20		rep #$20		rep 	#$20
.010776	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010779	80 0d		bra $010788		bra 	_CTCExit
.01077b					_CTCEqualSoFar:
.01077b	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01077d	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01077f	90 ec		bcc $01076d		bcc 	_CTCLess
.010781	d0 f1		bne $010774		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010783	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010785	a9 00 00	lda #$0000		lda 	#$0000
.010788					_CTCExit:
.010788	38		sec			sec 									; return with CS indicating string comparison.
.010789	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.01078a					Binary_Divide:
.01078a	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.01078d	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01078f	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010791	d0 14		bne $0107a7		bne 	_BinaryDivide_Ok
.010793	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010796	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01079e	20 62 79 20 7a 65 72 6f 00
.0107a7					_BinaryDivide_Ok:
.0107a7	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107a9	64 0a		stz $0a			stz 	DTemp1+2
.0107ab	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107ad	5a		phy			phy 										; save Y (bit counter)
.0107ae	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107b0	10 07		bpl $0107b9		bpl 	_BinaryDivide_RightDone
.0107b2	e8		inx			inx
.0107b3	e8		inx			inx
.0107b4	20 ef 07	jsr $0107ef		jsr 	Binary_DivNegate
.0107b7	ca		dex			dex
.0107b8	ca		dex			dex
.0107b9					_BinaryDivide_RightDone:
.0107b9	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107bb	10 03		bpl $0107c0		bpl 	_BinaryDivide_LeftDone
.0107bd	20 ef 07	jsr $0107ef		jsr 	Binary_DivNegate
.0107c0					_BinaryDivide_LeftDone:
.0107c0	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0107c3					_BinaryDivide_Loop:
.0107c3	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107c5	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107c7	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107c9	26 0a		rol $0a			rol 	DTemp1+2
.0107cb	38		sec			sec											; calculate A-M
.0107cc	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107ce	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0107d0	85 0c		sta $0c			sta 	DTemp2
.0107d2	a5 0a		lda $0a			lda 	DTemp1+2
.0107d4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0107d6	90 08		bcc $0107e0		bcc 	_Binary_NoSubract 					; if A < M skip this
.0107d8	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0107da	a5 0c		lda $0c			lda 	DTemp2
.0107dc	85 08		sta $08			sta 	DTemp1+0
.0107de	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0107e0					_Binary_NoSubract:
.0107e0	88		dey			dey 										; do it 32 times.
.0107e1	d0 e0		bne $0107c3		bne 	_BinaryDivide_Loop
.0107e3					_BinaryDivide_Exit:
.0107e3	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0107e5	29 01 00	and #$0001		and 	#1
.0107e8	f0 03		beq $0107ed		beq 	_BinaryDivide_Exit2
.0107ea	20 ef 07	jsr $0107ef		jsr 	Binary_DivNegate
.0107ed					_BinaryDivide_Exit2:
.0107ed	7a		ply			ply 										; restore Y
.0107ee	60		rts			rts
.0107ef					Binary_DivNegate:
.0107ef	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0107f1	38		sec			sec 										; negate the value at stack X.
.0107f2	a9 00 00	lda #$0000		lda 	#$0000
.0107f5	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0107f7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107f9	a9 00 00	lda #$0000		lda 	#$0000
.0107fc	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0107fe	95 10		sta $10,x		sta 	EXSValueH+0,x
.010800	60		rts			rts
.010801					Binary_Modulus:
.010801	20 8a 07	jsr $01078a		jsr 	Binary_Divide 						; do the divide
.010804	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010806	95 00		sta $00,x		sta 	EXSValueL+0,x
.010808	a5 0a		lda $0a			lda 	DTemp1+2
.01080a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01080c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.01080d					Binary_Multiply:
.01080d	20 95 04	jsr $010495		jsr 	CheckBothNumeric 					; check both values are numeric
.010810	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010812	85 08		sta $08			sta 	DTemp1
.010814	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010816	85 0a		sta $0a			sta		DTemp1+2
.010818	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01081a	74 10		stz $10,x		stz 	EXSValueH+0,x
.01081c					_BinaryMultiply_Loop:
.01081c	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01081e	05 0a		ora $0a			ora 	DTemp1+2
.010820	f0 1e		beq $010840		beq 	_BinaryMultiply_Exit
.010822	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010824	29 01 00	and #$0001		and 	#1
.010827	f0 0d		beq $010836		beq 	_BinaryMultiply_NoAdd
.010829	18		clc			clc 										; add multiplicand to result.
.01082a	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01082c	75 02		adc $02,x		adc 	EXSValueL+2,x
.01082e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010830	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010832	75 12		adc $12,x		adc 	EXSValueH+2,x
.010834	95 10		sta $10,x		sta 	EXSValueH+0,x
.010836					_BinaryMultiply_NoAdd:
.010836	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010838	66 08		ror $08			ror 	DTemp1
.01083a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01083c	36 12		rol $12,x		rol 	EXSValueH+2,x
.01083e	80 dc		bra $01081c		bra 	_BinaryMultiply_Loop 				; go round again.
.010840					_BinaryMultiply_Exit:
.010840	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010841					Function_Len:
.010841	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.010844	20 d3 02	jsr $0102d3			jsr 	EvaluateNextString 			; get the value you are absoluting
.010847	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.01084a	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01084c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01084f	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010852	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010854	74 10		stz $10,x			stz 	EXSValueH+0,x
.010856	60		rts				rts
.010857					Function_Abs:
.010857	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.01085a	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01085d	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.010860	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010862	30 07		bmi $01086b			bmi 	_FAbsNegative 				; negate it if negative
.010864	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010866	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010868	95 00		sta $00,x			sta 	EXSValueL+0,x
.01086a	60		rts				rts
.01086b					_FAbsNegative:
.01086b	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01086c	a9 00 00	lda #$0000			lda 	#0
.01086f	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010871	95 00		sta $00,x			sta 	EXSValueL+0,x
.010873	a9 00 00	lda #$0000			lda 	#0
.010876	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010878	95 10		sta $10,x			sta 	EXSValueH+0,x
.01087a	60		rts				rts
.01087b					Function_Sgn:
.01087b	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns integer
.01087e	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get an integer
.010881	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.010884	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010886	74 10		stz $10,x			stz 	EXSValueH+0,x
.010888	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.01088a	30 07		bmi $010893			bmi 	_FSgnNegative 				; set to -1 if signed
.01088c	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01088e	f0 02		beq $010892			beq 	_FSgnExit
.010890	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010892					_FSgnExit:
.010892	60		rts				rts
.010893					_FSgnNegative:
.010893	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010896	95 00		sta $00,x			sta 	EXSValueL+0,x
.010898	95 10		sta $10,x			sta 	EXSValueH+0,x
.01089a	60		rts				rts
.01089b					Function_Random:
.01089b	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.01089e	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger
.0108a1	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108a3	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108a5	d0 0a		bne $0108b1			bne 	_Rnd_NotZero
.0108a7	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108aa	85 10		sta $10				sta 	DRandom
.0108ac	a9 ea 00	lda #$00ea			lda 	#$EA
.0108af	85 12		sta $12				sta 	DRandom+2
.0108b1					_Rnd_NotZero:
.0108b1	20 bc 08	jsr $0108bc			jsr 	_Rnd_Process 				; call randomiser twice
.0108b4	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108b6	20 bc 08	jsr $0108bc			jsr 	_Rnd_Process
.0108b9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108bb	60		rts				rts
.0108bc					_Rnd_Process:
.0108bc	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108be	26 12		rol $12				rol 	DRandom+2
.0108c0	90 0e		bcc $0108d0			bcc 	_Rnd_Exit
.0108c2	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108c4	49 54 d4	eor #$d454			eor 	#$D454
.0108c7	85 10		sta $10				sta 	DRandom
.0108c9	a5 12		lda $12				lda 	DRandom+2
.0108cb	49 d5 55	eor #$55d5			eor 	#$55D5
.0108ce	85 12		sta $12				sta 	DRandom+2
.0108d0					_Rnd_Exit:
.0108d0	a5 10		lda $10				lda 	DRandom
.0108d2	45 12		eor $12				eor 	DRandom+2
.0108d4	60		rts				rts
.0108d5					Function_Chr:
.0108d5	20 bd 04	jsr $0104bd			jsr 	ResetTypeString 			; returns a string
.0108d8	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get integer
.0108db	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.0108de	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.0108e1	d0 12		bne $0108f5			bne 	_FCHBad
.0108e3	48		pha				pha  								; save char # on stack
.0108e4	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.0108e7	20 f3 04	jsr $0104f3			jsr 	StringTempAllocate
.0108ea	68		pla				pla 								; restore character number
.0108eb	20 1f 05	jsr $01051f			jsr 	StringWriteCharacter 		; write it out.
.0108ee	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.0108f0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.0108f2	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108f4	60		rts				rts
.0108f5					_FCHBad:
.0108f5	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0108f8	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010900	65 20 66 6f 72 20 63 68 72 24 28 29 00
.01090d					Function_Asc:
.01090d	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.010910	20 d3 02	jsr $0102d3			jsr 	EvaluateNextString 			; get string
.010913	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.010916	a8		tay				tay 								; string address in Y
.010917	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.01091a	29 ff 00	and #$00ff			and 	#$00FF
.01091d	f0 0b		beq $01092a			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.01091f	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010922	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010925	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010927	74 10		stz $10,x			stz 	EXSValueH+0,x
.010929	60		rts				rts
.01092a					_FASBad:
.01092a	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01092d	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010935	65 20 66 6f 72 20 61 73 63 28 29 00
.010941					Function_SPC:
.010941	20 bd 04	jsr $0104bd			jsr 	ResetTypeString 			; returns a string
.010944	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010947	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.01094a	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01094d	d0 17		bne $010966			bne 	_FSPBad
.01094f	48		pha				pha 								; save length
.010950	20 f3 04	jsr $0104f3			jsr 	StringTempAllocate 			; allocate character space
.010953	7a		ply				ply 								; get count in Y
.010954	f0 09		beq $01095f			beq 	_FSPExit 					; if zero, just empty string
.010956					_FSPCopy:
.010956	a9 20 00	lda #$0020			lda 	#" "						; space character
.010959	20 1f 05	jsr $01051f			jsr 	StringWriteCharacter 		; write it out.
.01095c	88		dey				dey
.01095d	d0 f7		bne $010956			bne 	_FSPCopy	 				; do it Y times
.01095f					_FSPExit:
.01095f	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010961	95 00		sta $00,x			sta 	EXSValueL+0,x
.010963	74 10		stz $10,x			stz 	EXSValueH+0,x
.010965	60		rts				rts
.010966					_FSPBad:
.010966	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010969	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010971	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.01097d					Function_Peek:
.01097d	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.010980	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010983	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.010986	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010988	84 0a		sty $0a				sty 	DTemp1+2
.01098a	a0 00 00	ldy #$0000			ldy 	#0							; read data
.01098d	b7 08		lda [$08],y			lda 	[DTemp1],y
.01098f	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010992	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010994	74 10		stz $10,x			stz 	EXSValueH+0,x
.010996	60		rts				rts
.010997					Function_Deek:
.010997	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.01099a	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01099d	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.0109a0	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.0109a2	84 0a		sty $0a				sty 	DTemp1+2
.0109a4	a0 00 00	ldy #$0000			ldy 	#0							; read data
.0109a7	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109a9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.0109ab	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109ad	60		rts				rts
.0109ae					Function_Leek:
.0109ae	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.0109b1	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0109b4	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check )
.0109b7	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.0109b9	84 0a		sty $0a				sty 	DTemp1+2
.0109bb	a0 00 00	ldy #$0000			ldy 	#0							; read data
.0109be	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109c0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.0109c2	c8		iny				iny
.0109c3	c8		iny				iny
.0109c4	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109c6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0109c8	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0109c9					Function_VAL:
.0109c9	20 b5 04	jsr $0104b5			jsr 	ResetTypeInteger 			; returns an integer
.0109cc	20 d3 02	jsr $0102d3			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109cf	48		pha				pha 								; put string address on stack.
.0109d0	20 e0 09	jsr $0109e0			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109d3	7a		ply				ply 								; get string address back
.0109d4	da		phx				phx 								; save X on stack
.0109d5	aa		tax				tax 								; base in X
.0109d6	98		tya				tya 								; address in A
.0109d7	20 1a 0a	jsr $010a1a			jsr 	StringToInteger
.0109da	fa		plx				plx 								; restore X
.0109db	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109dd	94 10		sty $10,x			sty 	EXSValueH+0,x
.0109df	60		rts				rts
.0109e0					VALGetBase:
.0109e0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0109e2	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if comma, go to get base code.
.0109e5	f0 07		beq $0109ee			beq 	_VGBAlternate
.0109e7	20 83 04	jsr $010483			jsr 	ExpectRightBracket			; expect ), and return 10.
.0109ea	a9 0a 00	lda #$000a			lda 	#10
.0109ed	60		rts				rts
.0109ee					_VGBAlternate:
.0109ee	20 8c 04	jsr $01048c			jsr 	ExpectComma 				; skip comma.
.0109f1	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get base
.0109f4	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0109f7	d0 0e		bne $010a07			bne 	_VGBBadBase
.0109f9	c9 02 00	cmp #$0002			cmp 	#2
.0109fc	90 09		bcc $010a07			bcc 	_VGBBadBase
.0109fe	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010a01	b0 04		bcs $010a07			bcs 	_VGBBadBase
.010a03	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; get right bracket and return.
.010a06	60		rts				rts
.010a07					_VGBBadBase:
.010a07	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010a0a	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010a12	65 72 20 42 61 73 65 00
.010a1a					StringToInteger:
.010a1a	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010a1c	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010a1e	29 ff 00	and #$00ff			and 	#$00FF
.010a21	85 26		sta $26				sta 	DTemp3+2
.010a23	f0 6e		beq $010a93			beq 	_STIError 					; if length zero it's bad.
.010a25	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010a27	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010a29	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010a2b	64 0a		stz $0a				stz 	DTemp1+2
.010a2d	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010a2f	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010a32	48		pha				pha 								; push on stack
.010a33	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010a36	d0 06		bne $010a3e			bne 	_STILoop
.010a38	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010a3a	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010a3c	f0 55		beq $010a93			beq 	_STIError 					; if only - then error.
.010a3e					_STILoop:
.010a3e	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010a40	20 b2 0a	jsr $010ab2			jsr 	MultiplyTemp1ByA
.010a43	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010a45	29 ff 00	and #$00ff			and 	#$00FF
.010a48	20 a3 0a	jsr $010aa3			jsr 	ConvertUpperCase	 		; make U/C
.010a4b	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010a4e	90 43		bcc $010a93			bcc 	_STIError
.010a50	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010a53	90 0e		bcc $010a63			bcc 	_STIOkay1
.010a55	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010a58	90 39		bcc $010a93			bcc 	_STIError
.010a5a	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010a5d	b0 34		bcs $010a93			bcs 	_STIError
.010a5f	18		clc				clc 								; shift to correct range.
.010a60	69 09 00	adc #$0009			adc 	#9
.010a63					_STIOkay1:
.010a63	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010a66	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010a68	b0 29		bcs $010a93			bcs 	_STIError
.010a6a	18		clc				clc 								; add A to DTemp1
.010a6b	65 08		adc $08				adc 	DTemp1
.010a6d	85 08		sta $08				sta 	DTemp1
.010a6f	90 02		bcc $010a73			bcc 	_STINoCarry
.010a71	e6 0a		inc $0a				inc 	DTemp1+2
.010a73					_STINoCarry:
.010a73	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010a75	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010a77	d0 c5		bne $010a3e			bne 	_STILoop 					; loop back.
.010a79	68		pla				pla 								; get optional minus bac
.010a7a	c9 2d 00	cmp #$002d			cmp 	#"-"
.010a7d	d0 0f		bne $010a8e			bne 	_STINotNegative 			; handle the negative character
.010a7f	38		sec				sec 								; negate DTemp1
.010a80	a9 00 00	lda #$0000			lda 	#0
.010a83	e5 08		sbc $08				sbc 	DTemp1
.010a85	85 08		sta $08				sta 	DTemp1
.010a87	a9 00 00	lda #$0000			lda 	#0
.010a8a	e5 0a		sbc $0a				sbc 	DTemp1+2
.010a8c	85 0a		sta $0a				sta 	DTemp1+2
.010a8e					_STINotNegative:
.010a8e	a5 08		lda $08				lda 	DTemp1 						; get the result
.010a90	a4 0a		ldy $0a				ldy 	DTemp1+2
.010a92	60		rts				rts
.010a93					_STIError:
.010a93	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010a96	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010a9e	74 61 6e 74 00
.010aa3					ConvertUpperCase:
.010aa3	c9 61 00	cmp #$0061			cmp 	#'a'
.010aa6	90 09		bcc $010ab1			bcc 	_CUCExit
.010aa8	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010aab	b0 04		bcs $010ab1			bcs 	_CUCExit
.010aad	38		sec				sec
.010aae	e9 20 00	sbc #$0020			sbc 	#32
.010ab1					_CUCExit:
.010ab1	60		rts				rts
.010ab2					MultiplyTemp1ByA:
.010ab2					_MTGeneral:
.010ab2	da		phx				phx
.010ab3	aa		tax				tax 								; multiplier in X
.010ab4	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010ab6	85 0c		sta $0c				sta 	DTemp2
.010ab8	a5 0a		lda $0a				lda 	DTemp1+2
.010aba	85 0e		sta $0e				sta 	DTemp2+2
.010abc	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010abe	64 0a		stz $0a				stz 	DTemp1+2
.010ac0	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010ac3					_MTLoop:
.010ac3	8a		txa				txa 								; shift X right into C
.010ac4	4a		lsr a				lsr 	a
.010ac5	aa		tax				tax
.010ac6	90 10		bcc $010ad8			bcc 	_MTNoAdd
.010ac8	18		clc				clc
.010ac9	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010acb	65 0c		adc $0c				adc 	DTemp2
.010acd	85 08		sta $08				sta 	DTemp1
.010acf	a5 0a		lda $0a				lda 	DTemp1+2
.010ad1	65 0e		adc $0e				adc 	DTemp2+2
.010ad3	85 0a		sta $0a				sta 	DTemp1+2
.010ad5	90 01		bcc $010ad8			bcc 	_MTNoAdd
.010ad7	c8		iny				iny
.010ad8					_MTNoAdd:
.010ad8	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ada	26 0e		rol $0e				rol 	DTemp2+2
.010adc	90 01		bcc $010adf			bcc 	_MTNoOverflow
.010ade	c8		iny				iny
.010adf					_MTNoOverflow:
.010adf	8a		txa				txa 								; until multiplier is zero.
.010ae0	d0 e1		bne $010ac3			bne 	_MTLoop
.010ae2	98		tya				tya
.010ae3	18		clc				clc
.010ae4	69 ff ff	adc #$ffff			adc 	#$FFFF
.010ae7	fa		plx				plx 								; restore X
.010ae8	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010ae9					Function_Str:
.010ae9	20 bd 04	jsr $0104bd			jsr 	ResetTypeString 			; returns a string.
.010aec	20 b4 02	jsr $0102b4			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010aef	48		pha				pha 								; save YA on the stack
.010af0	5a		phy				phy
.010af1	20 e0 09	jsr $0109e0			jsr 	VALGetBase 					; process , base (shared with STR$())
.010af4	85 14		sta $14				sta 	DSignCount
.010af6	7a		ply				ply 								; YA is the number
.010af7	68		pla				pla
.010af8	da		phx				phx
.010af9	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010afb	20 04 0b	jsr $010b04			jsr 	ConvertToString 			; convert it to a string.
.010afe	fa		plx				plx 								; restore X
.010aff	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010b01	74 10		stz $10,x			stz 	EXSValueH+0,x
.010b03	60		rts				rts
.010b04					ConvertToString:
.010b04	da		phx				phx 								; save X (base)
.010b05	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010b07	84 26		sty $26				sty 	DTemp3+2
.010b09	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010b0b	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010b0e	20 f3 04	jsr $0104f3			jsr 	StringTempAllocate 			; allocate space for return string.
.010b11	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010b13	10 15		bpl $010b2a			bpl 	_CTSNotNegative
.010b15	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010b18	20 94 0b	jsr $010b94			jsr 	CTSOutputA
.010b1b	38		sec				sec 								; negate DTemp3 which is the number
.010b1c	a9 00 00	lda #$0000			lda 	#0
.010b1f	e5 24		sbc $24				sbc 	DTemp3
.010b21	85 24		sta $24				sta 	DTemp3
.010b23	a9 00 00	lda #$0000			lda 	#0
.010b26	e5 26		sbc $26				sbc 	DTemp3+2
.010b28	85 26		sta $26				sta 	DTemp3+2
.010b2a					_CTSNotNegative:
.010b2a	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010b2d	48		pha				pha
.010b2e	a9 00 00	lda #$0000			lda 	#0
.010b31	48		pha				pha
.010b32	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010b34	85 08		sta $08				sta 	DTemp1
.010b36	64 0a		stz $0a				stz 	DTemp1+2
.010b38					_CTSMultiplySubtractor:
.010b38	38		sec				sec 								; check number vs subtractor
.010b39	a5 24		lda $24				lda 	DTemp3
.010b3b	e5 08		sbc $08				sbc 	DTemp1
.010b3d	a5 26		lda $26				lda 	DTemp3+2
.010b3f	e5 0a		sbc $0a				sbc 	DTemp1+2
.010b41	90 0f		bcc $010b52			bcc		_CTSScaledUp 				; if >= then scaled up.
.010b43	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010b45	48		pha				pha
.010b46	a5 0a		lda $0a				lda 	DTemp1+2
.010b48	48		pha				pha
.010b49	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010b4b	20 b2 0a	jsr $010ab2			jsr 	MultiplyTemp1ByA
.010b4e	b0 02		bcs $010b52			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010b50	80 e6		bra $010b38			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010b52					_CTSScaledUp:
.010b52	7a		ply				ply 								; YA contains the previous divider.
.010b53	68		pla				pla
.010b54	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010b57	d0 05		bne $010b5e			bne 	_CTSHasDigit
.010b59	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010b5c	f0 20		beq $010b7e			beq 	_CTSExit
.010b5e					_CTSHasDigit:
.010b5e	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010b60	84 0e		sty $0e				sty 	DTemp2+2
.010b62	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010b65					_CTSSubLoop:
.010b65	38		sec				sec 								; subtract subtractor from number
.010b66	a5 24		lda $24				lda 	DTemp3
.010b68	e5 0c		sbc $0c				sbc 	DTemp2
.010b6a	a8		tay				tay 								; intermediate in Y
.010b6b	a5 26		lda $26				lda 	DTemp3+2
.010b6d	e5 0e		sbc $0e				sbc 	DTemp2+2
.010b6f	90 07		bcc $010b78			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010b71	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010b73	84 24		sty $24				sty 	DTemp3
.010b75	e8		inx				inx 								; one more subtraction
.010b76	80 ed		bra $010b65			bra 	_CTSSubLoop 				; try it again.
.010b78					_CTSFinishedSubtracting:
.010b78	8a		txa				txa 								; convert to ASCII.
.010b79	20 87 0b	jsr $010b87			jsr 	CTSOutputHexDigit 			; write that out.
.010b7c	80 d4		bra $010b52			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010b7e					_CTSExit:
.010b7e	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010b80	20 87 0b	jsr $010b87			jsr 	CTSOutputHexDigit
.010b83	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010b85	fa		plx				plx 								; restore X.
.010b86	60		rts				rts
.010b87					CTSOutputHexDigit:
.010b87	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010b8a	90 04		bcc $010b90			bcc 	_CTSNotLetter
.010b8c	18		clc				clc
.010b8d	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010b90					_CTSNotLetter:
.010b90	18		clc				clc
.010b91	69 30 00	adc #$0030			adc 	#48
.010b94					CTSOutputA:
.010b94	5a		phy				phy 								; save Y, set Y to current pointer
.010b95	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010b97	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010b9a	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010b9c	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010b9e	1a		inc a				inc 	a
.010b9f	92 18		sta ($18)			sta 	(DStartTempString)
.010ba1	c2 20		rep #$20			rep 	#$20
.010ba3	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010ba5	7a		ply				ply 								; restore Y and exit.
.010ba6	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010ba7					Function_Let:
.010ba7	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010ba9	48		pha				pha  								; save on stack for later.
.010baa	20 1a 03	jsr $01031a			jsr 	VariableFind 				; find the variable
.010bad	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010baf	b0 1c		bcs $010bcd			bcs 	_FLetFound 					; skip if found.
.010bb1	68		pla				pla 								; get and push the first token again.
.010bb2	48		pha				pha
.010bb3	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010bb6	d0 57		bne $010c0f			bne 	_FLError					; arrays, so this causes an error.
.010bb8	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010bba	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010bbd	20 c4 03	jsr $0103c4			jsr 	VariableCreate 				; create it.
.010bc0	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010bc2					_FLSkipToken:
.010bc2	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010bc4	e6 06		inc $06				inc 	DCodePtr
.010bc6	e6 06		inc $06				inc 	DCodePtr
.010bc8	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010bcb	d0 f5		bne $010bc2			bne 	_FLSkipToken
.010bcd					_FLetFound:
.010bcd	68		pla				pla 								; get and save the first token.
.010bce	48		pha				pha
.010bcf	a8		tay				tay 								; put it in Y
.010bd0	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010bd3	f0 07		beq $010bdc			beq 	_FLetNotArray
.010bd5	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010bd7	20 91 03	jsr $010391			jsr 	VariableSubscript			; index calculation
.010bda	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010bdc					_FLetNotArray:
.010bdc	7a		ply				ply 								; get the first token into Y
.010bdd	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010bdf	48		pha				pha
.010be0	5a		phy				phy 								; save the first token on the stack.
.010be1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010be4	20 69 04	jsr $010469			jsr 	ExpectToken
.010be7	68		pla				pla 								; restore the first token.
.010be8	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010beb	d0 0f		bne $010bfc			bne 	_FLetString 				; skip if string.
.010bed	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; get an integer
.010bf0	7a		ply				ply 								; get address in Y
.010bf1	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010bf3	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010bf6	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010bf8	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010bfb	60		rts				rts
.010bfc					_FLetString:
.010bfc	20 ba 02	jsr $0102ba			jsr 	EvaluateString 				; get a string.
.010bff	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010c01	20 4c 05	jsr $01054c			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010c04	7a		ply				ply 								; get address
.010c05	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010c08	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010c0b	99 02 00	sta $0002,y			sta 	$0002,y
.010c0e	60		rts				rts
.010c0f					_FLError:
.010c0f	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010c12	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010c1a	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010c22					Function_PRINT:
.010c22	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010c24	f0 33		beq $010c59			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010c26	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; likewise if a colon.
.010c29	f0 2e		beq $010c59			beq 	_FPRExitCR
.010c2b	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID 			; semicolon, skip it
.010c2e	f0 23		beq $010c53			beq 	_FPRSkipLoop
.010c30	c9 22 32	cmp #$3222			cmp 	#squoteTokenID 				; single quote is CR
.010c33	f0 1b		beq $010c50			beq 	_FPRNewLine
.010c35	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; , is tab.
.010c38	f0 11		beq $010c4b			beq 	_FPRTab
.010c3a					_FPRExpression:
.010c3a	20 8d 01	jsr $01018d			jsr 	Evaluate 					; evaluate a string or integer.
.010c3d	b0 06		bcs $010c45			bcs 	_FPRHaveString
.010c3f	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010c42	20 04 0b	jsr $010b04			jsr 	ConvertToString
.010c45					_FPRHaveString:
.010c45	a8		tay				tay 								; print the basic String.
.010c46	20 d9 04	jsr $0104d9			jsr 	PrintBASICString
.010c49	80 d7		bra $010c22			bra 	Function_Print 				; and go round again.
.010c4b					_FPRTab:
.010c4b	20 2f 13	jsr $01132f			jsr 	HWTab
.010c4e	80 03		bra $010c53			bra 	_FPRSkipLoop
.010c50					_FPRNewLine:
.010c50	20 1c 13	jsr $01131c			jsr 	HWNewLine
.010c53					_FPRSkipLoop:
.010c53	e6 06		inc $06				inc 	DCodePtr
.010c55	e6 06		inc $06				inc 	DCodePtr
.010c57	80 c9		bra $010c22			bra 	Function_Print
.010c59					_FPRExitCR:
.010c59	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010c5b	88		dey				dey
.010c5c	88		dey				dey
.010c5d	b9 00 00	lda $0000,y			lda 	$0000,y
.010c60	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.010c63	f0 08		beq $010c6d			beq 	_FPRExit
.010c65	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID
.010c68	f0 03		beq $010c6d			beq 	_FPRExit
.010c6a	20 1c 13	jsr $01131c			jsr 	HWNewLine 					; print a new line.
.010c6d					_FPRExit:
.010c6d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.010c6e					Function_IF:
.010c6e	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; check success.
.010c71	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010c73	05 08		ora $08				ora 	DTemp1
.010c75	a8		tay				tay 								; success flag in Y.
.010c76	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010c78	c9 3e 3a	cmp #$3a3e			cmp 	#thenTokenID
.010c7b	d0 32		bne $010caf			bne 	_FIFExtended 				; if so, go to the extended IF.
.010c7d	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010c7f	e6 06		inc $06				inc 	DCodePtr
.010c81	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010c84	f0 0f		beq $010c95			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010c86	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010c88	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010c8b	90 21		bcc $010cae			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010c8d	c9 00 c0	cmp #$c000			cmp 	#$C000
.010c90	b0 1c		bcs $010cae			bcs 	_FIFContinue
.010c92	4c 24 0f	jmp $010f24			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010c95					_FIFEndOfLine:
.010c95	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010c97	f0 15		beq $010cae			beq 	_FIFContinue 				; if done so, continue.
.010c99	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010c9c	90 06		bcc $010ca4			bcc 	_FIFStringConstant
.010c9e	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010ca0	e6 06		inc $06				inc 	DCodePtr
.010ca2	80 f1		bra $010c95			bra 	_FIFEndOfLine
.010ca4					_FIFStringConstant:
.010ca4	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010ca7	18		clc				clc
.010ca8	65 06		adc $06				adc 	DCodePtr
.010caa	85 06		sta $06				sta 	DCodePtr
.010cac	80 e7		bra $010c95			bra 	_FIFEndOfLine
.010cae					_FIFContinue:
.010cae	60		rts				rts
.010caf					_FIFExtended:
.010caf	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010cb1	e6 2a		inc $2a				inc 	DStack
.010cb3	a9 3a 3c	lda #$3c3a			lda 	#ifTokenID
.010cb6	a6 2a		ldx $2a				ldx 	DStack
.010cb8	95 00		sta $00,x			sta 	$00,x
.010cba	98		tya				tya 								; see if the test was passed.
.010cbb	f0 01		beq $010cbe			beq 	_FIXSkip 					; if zero then it has failed.
.010cbd	60		rts				rts 								; test passed, so continue executing
.010cbe					_FIXSkip:
.010cbe	a9 34 3e	lda #$3e34			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010cc1	a2 3f 3a	ldx #$3a3f			ldx 	#endifTokenID 				; at the same level.
.010cc4	20 24 0d	jsr $010d24			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010cc7	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010cc9	e6 06		inc $06				inc 	DCodePtr
.010ccb	c9 3f 3a	cmp #$3a3f			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010cce	d0 04		bne $010cd4			bne 	_FIXNoThrow
.010cd0	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010cd2	c6 2a		dec $2a				dec 	DStack
.010cd4					_FIXNoThrow:
.010cd4	60		rts				rts
.010cd5					Handler_ELSE:
.010cd5	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010cd7	b5 00		lda $00,x			lda 	$00,x
.010cd9	c9 3a 3c	cmp #$3c3a			cmp 	#ifTokenID
.010cdc	d0 12		bne $010cf0			bne 	_HEBadStructure
.010cde	a9 3f 3a	lda #$3a3f			lda 	#endifTokenID 				; only searching one token.
.010ce1	a2 00 00	ldx #$0000			ldx 	#$0000
.010ce4	20 24 0d	jsr $010d24			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010ce7	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010ce9	e6 06		inc $06				inc 	DCodePtr
.010ceb	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010ced	c6 2a		dec $2a				dec 	DStack
.010cef	60		rts				rts
.010cf0					_HEBadStructure:
.010cf0	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010cf3	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010cfb	68 6f 75 74 20 49 66 00
.010d03					Handler_ENDIF:
.010d03	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010d05	b5 00		lda $00,x			lda 	$00,x
.010d07	c9 3a 3c	cmp #$3c3a			cmp 	#ifTokenID
.010d0a	d0 05		bne $010d11			bne 	_HEIBadStructure
.010d0c	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010d0e	c6 2a		dec $2a				dec 	DStack
.010d10	60		rts				rts
.010d11					_HEIBadStructure:
.010d11	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010d14	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010d1c	68 6f 75 74 20 49 66 00
.010d24					ScanForwardLevel:
.010d24	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010d26	86 0a		stx $0a				stx 	DTemp1+2
.010d28	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010d2a	85 0c		sta $0c				sta 	DTemp2
.010d2c	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010d2f					_SFLLoop:
.010d2f	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010d32	d0 0d		bne $010d41			bne 	_SFLNoCheck 				; we're in a substructure.
.010d34	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010d36	f0 09		beq $010d41			beq 	_SFLNoCheck 				; don't check zero
.010d38	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010d3a	f0 04		beq $010d40			beq 	_SFLFound
.010d3c	c5 0a		cmp $0a				cmp 	DTemp1+2
.010d3e	d0 01		bne $010d41			bne 	_SFLNoCheck
.010d40					_SFLFound:
.010d40	60		rts				rts
.010d41					_SFLNoCheck:
.010d41	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010d43	f0 4f		beq $010d94			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010d45	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010d48	90 40		bcc $010d8a			bcc 	_SFLSkipString 				; then handle that.
.010d4a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010d4c	e6 06		inc $06				inc 	DCodePtr
.010d4e	a8		tay				tay 								; put token in Y temporarily.
.010d4f	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010d52	c9 00 20	cmp #$2000			cmp 	#$2000
.010d55	d0 d8		bne $010d2f			bne 	_SFLLoop
.010d57	98		tya				tya 								; get the token back.
.010d58	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010d5b	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010d5e	f0 cf		beq $010d2f			beq 	_SFLLoop
.010d60	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010d63	90 ca		bcc $010d2f			bcc 	_SFLLoop
.010d65	e8		inx				inx 								; increment the level.
.010d66	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010d69	f0 c4		beq $010d2f			beq 	_SFLLoop
.010d6b	ca		dex				dex 								; decrement the level
.010d6c	ca		dex				dex 								; one overdoes the previous inx.
.010d6d	10 c0		bpl $010d2f			bpl 	_SFLLoop 					; if gone -ve then error.
.010d6f					_SFLError:
.010d6f	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010d71	85 22		sta $22				sta 	DLineNumber
.010d73	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010d76	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010d7e	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010d8a					_SFLSkipString:
.010d8a	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010d8d	18		clc				clc
.010d8e	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010d90	85 06		sta $06				sta 	DCodePtr
.010d92	80 9b		bra $010d2f			bra 	_SFLLoop 					; go round again.
.010d94					_SFLNextLine:
.010d94	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010d96	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010d99	f0 d4		beq $010d6f			beq 	_SFLError 					; if zero, then there's no more code to search.
.010d9b	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010d9e	85 22		sta $22				sta 	DLineNumber
.010da0	18		clc				clc
.010da1	a5 06		lda $06				lda 	DCodePtr
.010da3	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010da6	85 06		sta $06				sta 	DCodePtr
.010da8	80 85		bra $010d2f			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.010daa					Command_FOR:
.010daa	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.010dac	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.010daf	d0 60		bne $010e11			bne		_CFOBad
.010db1	20 1a 03	jsr $01031a			jsr 	VariableFind 				; try to find variable
.010db4	b0 15		bcs $010dcb			bcs 	_CFOExists
.010db6	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010db8	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010dbb	20 c4 03	jsr $0103c4			jsr 	VariableCreate 				; create it.
.010dbe	48		pha				pha 								; save on stack
.010dbf					_CFOSkipToken:
.010dbf	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010dc1	e6 06		inc $06				inc 	DCodePtr
.010dc3	e6 06		inc $06				inc 	DCodePtr
.010dc5	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010dc8	d0 f5		bne $010dbf			bne 	_CFOSkipToken
.010dca	68		pla				pla 								; restore address
.010dcb					_CFOExists:
.010dcb	48		pha				pha 								; push variable address on stack
.010dcc	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.010dcf	20 69 04	jsr $010469			jsr 	ExpectToken
.010dd2	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; this is the start value
.010dd5	bb		tyx				tyx 								; put high value in X
.010dd6	7a		ply				ply 								; address in Y
.010dd7	99 00 00	sta $0000,y			sta 	$0000,y
.010dda	8a		txa				txa
.010ddb	99 02 00	sta $0002,y			sta 	$0002,y
.010dde	a9 23 32	lda #$3223			lda 	#toTokenID 					; expect the TO
.010de1	20 69 04	jsr $010469			jsr 	ExpectToken
.010de4	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.010de6	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.010de8	95 02		sta $02,x			sta 	$02,x
.010dea	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010dec	95 04		sta $04,x			sta 	$04,x
.010dee	98		tya				tya 								; save variable address at +6
.010def	95 06		sta $06,x			sta 	$06,x
.010df1	a9 3b 3c	lda #$3c3b			lda 	#forTokenID 				; save for token at +8
.010df4	95 08		sta $08,x			sta 	$08,x
.010df6	8a		txa				txa 								; add 8 to stack position
.010df7	18		clc				clc
.010df8	69 08 00	adc #$0008			adc 	#8
.010dfb	85 2a		sta $2a				sta 	DStack
.010dfd	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.010e00	b2 06		lda ($06)			lda 	(DCodePtr)
.010e02	c9 24 32	cmp #$3224			cmp 	#stepTokenID 				; if STEP x is present.
.010e05	d0 09		bne $010e10			bne 	_CFONoStep
.010e07	a9 24 32	lda #$3224			lda 	#stepTokenID 				; skip STEP
.010e0a	20 69 04	jsr $010469			jsr 	ExpectToken
.010e0d	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; and whatever the step is.
.010e10					_CFONoStep:
.010e10	60		rts				rts
.010e11					_CFOBad:
.010e11	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010e14	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>010e1c	76 61 72 69 61 62 6c 65 00
.010e25					Command_NEXT:
.010e25	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.010e27	b5 00		lda $00,x			lda 	$00,x
.010e29	c9 3b 3c	cmp #$3c3b			cmp 	#forTokenID 				; if not FOR then error
.010e2c	f0 14		beq $010e42			beq 	_CNXOk
.010e2e	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010e31	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>010e39	68 6f 75 74 20 46 6f 72 00
.010e42					_CNXOk:
.010e42	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.010e44	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.010e47	90 22		bcc $010e6b			bcc 	_CNXNoVariable
.010e49	20 1a 03	jsr $01031a			jsr 	VariableFind 				; get address of variable.
.010e4c	90 08		bcc $010e56			bcc 	_CNXNextVar 				; not found variable, it's an error.
.010e4e	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.010e50	ca		dex				dex
.010e51	ca		dex				dex
.010e52	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.010e54	f0 15		beq $010e6b			beq 	_CNXNoVariable 				; then continue
.010e56					_CNXNextVar:
.010e56	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010e59	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>010e61	20 76 61 72 69 61 62 6c 65 00
.010e6b					_CNXNoVariable:
.010e6b	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.010e6d	48		pha				pha
.010e6e	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.010e70	38		sec				sec
.010e71	e9 08 00	sbc #$0008			sbc 	#8
.010e74	85 2a		sta $2a				sta 	DStack
.010e76	aa		tax				tax 								; X points to the stack.
.010e77	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.010e79	85 06		sta $06				sta 	DCodePtr
.010e7b	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; this is the target constant
.010e7e	5a		phy				phy 								; save the target on the stack
.010e7f	48		pha				pha
.010e80	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.010e83	85 08		sta $08				sta 	DTemp1
.010e85	64 0a		stz $0a				stz 	DTemp1+2
.010e87	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.010e89	c9 24 32	cmp #$3224			cmp 	#stepTokenID
.010e8c	d0 0b		bne $010e99			bne 	_CNXNoStep
.010e8e	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.010e90	e6 06		inc $06				inc 	DCodePtr
.010e92	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; work out the step.
.010e95	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.010e97	84 0a		sty $0a				sty 	DTemp1+2
.010e99					_CNXNoStep:
.010e99	68		pla				pla 								; save the Target in DTemp2
.010e9a	85 0c		sta $0c				sta 	DTemp2
.010e9c	68		pla				pla
.010e9d	85 0e		sta $0e				sta 	DTemp2+2
.010e9f	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.010ea1	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.010ea3	a8		tay				tay
.010ea4	18		clc				clc
.010ea5	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.010ea8	65 08		adc $08				adc 	DTemp1
.010eaa	99 00 00	sta $0000,y			sta 	$0000,y
.010ead	b9 02 00	lda $0002,y			lda 	$0002,y
.010eb0	65 0a		adc $0a				adc 	DTemp1+2
.010eb2	99 02 00	sta $0002,y			sta 	$0002,y
.010eb5	38		sec				sec
.010eb6	a5 0c		lda $0c				lda 	DTemp2
.010eb8	f9 00 00	sbc $0000,y			sbc 	$0000,y
.010ebb	85 0c		sta $0c				sta 	DTemp2
.010ebd	a5 0e		lda $0e				lda 	DTemp2+2
.010ebf	f9 02 00	sbc $0002,y			sbc 	$0002,y
.010ec2	85 0e		sta $0e				sta 	DTemp2+2
.010ec4	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.010ec6	f0 0a		beq $010ed2			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.010ec8	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.010eca	45 0a		eor $0a				eor 	DTemp1+2
.010ecc	10 04		bpl $010ed2			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.010ece	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.010ecf	85 06		sta $06				sta 	DCodePtr
.010ed1	60		rts				rts
.010ed2					_CNXLoopAgain:
.010ed2	68		pla				pla 								; throw the original DCodePtr as we're going back.
.010ed3	18		clc				clc
.010ed4	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.010ed6	aa		tax				tax
.010ed7	69 08 00	adc #$0008			adc 	#8
.010eda	85 2a		sta $2a				sta 	DStack
.010edc	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.010ede	85 22		sta $22				sta 	DLineNumber
.010ee0	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010ee1					Function_ONGOTO:
.010ee1	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; on what GOTO :)
.010ee4	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.010ee7	d0 25		bne $010f0e			bne 	_FOGoFail
.010ee9	c9 00 00	cmp #$0000			cmp 	#0
.010eec	f0 20		beq $010f0e			beq 	_FOGoFail 					; we start with index = 1
.010eee	48		pha				pha 								; save count on stack
.010eef	a9 30 3e	lda #$3e30			lda 	#gotoTokenID 				; expect GOTO
.010ef2	20 69 04	jsr $010469			jsr 	ExpectToken
.010ef5	fa		plx				plx 								; put count in X.
.010ef6					_FOGoLoop:
.010ef6	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010ef8	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010efb	90 73		bcc $010f70			bcc 	FGOFail 					; if not, then we have an error.
.010efd	c9 00 c0	cmp #$c000			cmp 	#$C000
.010f00	b0 6e		bcs $010f70			bcs 	FGOFail
.010f02	ca		dex				dex 								; subtract one, if done, call GOTO code
.010f03	f0 1f		beq $010f24			beq 	Function_GOTO
.010f05	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.010f07	e6 06		inc $06				inc 	DCodePtr
.010f09	20 8c 04	jsr $01048c			jsr 	ExpectComma 				; expect a comma
.010f0c	80 e8		bra $010ef6			bra 	_FOGoLoop 					; and loop round.
.010f0e					_FOGoFail:
.010f0e	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010f11	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010f19	47 6f 74 6f 20 76 61 6c 75 65 00
.010f24					Function_GOTO:
.010f24	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010f26	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010f29	90 45		bcc $010f70			bcc 	FGOFail 					; we don't do calculate line numbers.
.010f2b	c9 00 c0	cmp #$c000			cmp 	#$C000
.010f2e	b0 40		bcs $010f70			bcs 	FGOFail
.010f30	38		sec				sec 								; convert to 0-32767
.010f31	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010f34	aa		tax				tax
.010f35	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.010f38	18		clc				clc
.010f39	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.010f3b	a8		tay				tay
.010f3c					_FGOSearch:
.010f3c	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.010f3f	f0 18		beq $010f59			beq 	_FGOUnknown
.010f41	8a		txa				txa 								; does it match line number ?
.010f42	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010f45	f0 08		beq $010f4f			beq 	_FGOFound 					; yes, then found.
.010f47	98		tya				tya 								; no follow the link
.010f48	18		clc				clc
.010f49	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.010f4c	a8		tay				tay
.010f4d	80 ed		bra $010f3c			bra 	_FGOSearch 					; and keep looking
.010f4f					_FGOFound:
.010f4f	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010f51	98		tya				tya 								; Y + 4 is the code pointer.
.010f52	18		clc				clc 								; (skipping link and line #)
.010f53	69 04 00	adc #$0004			adc 	#4
.010f56	85 06		sta $06				sta 	DCodePtr
.010f58	60		rts				rts									; and continue
.010f59					_FGOUnknown:
.010f59	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010f5c	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010f64	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010f70					FGOFail:
.010f70	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010f73	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010f7b	20 4e 75 6d 62 65 72 00
.010f83					Function_GOSUB:
.010f83	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010f85	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010f87	18		clc				clc
.010f88	69 02 00	adc #$0002			adc 	#2
.010f8b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010f8d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010f8f	95 04		sta $04,x			sta 	$04,x
.010f91	a9 31 3e	lda #$3e31			lda 	#gosubTokenID 				; save gosub token at +6
.010f94	95 06		sta $06,x			sta 	$06,x
.010f96	8a		txa				txa 								; advance stack by 6.
.010f97	18		clc				clc
.010f98	69 06 00	adc #$0006			adc 	#6
.010f9b	85 2a		sta $2a				sta 	DStack
.010f9d	80 85		bra $010f24			bra 	Function_GOTO 				; and do a GOTO.
.010f9f					Function_RETURN:
.010f9f	a6 2a		ldx $2a				ldx 	DStack
.010fa1	b5 00		lda $00,x			lda 	$00,x
.010fa3	c9 31 3e	cmp #$3e31			cmp 	#gosubTokenID 				; check top token.
.010fa6	d0 11		bne $010fb9			bne 	_FRetFail
.010fa8	8a		txa				txa 								; unpick stack.
.010fa9	38		sec				sec
.010faa	e9 06 00	sbc #$0006			sbc 	#6
.010fad	85 2a		sta $2a				sta 	DStack
.010faf	aa		tax				tax
.010fb0	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010fb2	85 06		sta $06				sta 	DCodePtr
.010fb4	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010fb6	85 22		sta $22				sta 	DLineNumber
.010fb8	60		rts				rts
.010fb9					_FRetFail:
.010fb9	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>010fbc	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010fc4	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.010fd1					Function_REPEAT:
.010fd1	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010fd3	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010fd5	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010fd7	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010fd9	95 04		sta $04,x			sta 	$04,x
.010fdb	a9 38 3c	lda #$3c38			lda 	#repeatTokenID 				; save repeat token at +6
.010fde	95 06		sta $06,x			sta 	$06,x
.010fe0	8a		txa				txa 								; advance stack by 6.
.010fe1	18		clc				clc
.010fe2	69 06 00	adc #$0006			adc 	#6
.010fe5	85 2a		sta $2a				sta 	DStack
.010fe7	60		rts				rts
.010fe8					Function_UNTIL:
.010fe8	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010fea	b5 00		lda $00,x			lda 	$00,x
.010fec	c9 38 3c	cmp #$3c38			cmp 	#repeatTokenID
.010fef	d0 26		bne $011017			bne 	_FUNFail
.010ff1	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; .... until what.
.010ff4	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010ff7	d0 15		bne $01100e			bne 	_FUNExit
.010ff9	c9 00 00	cmp #$0000			cmp 	#0
.010ffc	d0 10		bne $01100e			bne 	_FUNExit
.010ffe	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011000	38		sec				sec
.011001	e9 06 00	sbc #$0006			sbc 	#6
.011004	aa		tax				tax
.011005	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011007	85 06		sta $06				sta 	DCodePtr
.011009	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01100b	85 22		sta $22				sta 	DLineNumber
.01100d	60		rts				rts
.01100e					_FUNExit:
.01100e	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011010	38		sec				sec
.011011	e9 06 00	sbc #$0006			sbc 	#6
.011014	85 2a		sta $2a				sta 	DStack
.011016	60		rts				rts
.011017					_FUNFail:
.011017	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>01101a	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011022	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.01102f					Function_WHILE:
.01102f	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011031	48		pha				pha 								; save on stack
.011032	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; while what.
.011035	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011038	d0 14		bne $01104e			bne 	_FWHExecute
.01103a	c9 00 00	cmp #$0000			cmp 	#0
.01103d	d0 0f		bne $01104e			bne 	_FWHExecute
.01103f	68		pla				pla 								; throw away current instruction
.011040	a9 3c 3a	lda #$3a3c			lda 	#wendTokenID 				; skip to WEND
.011043	a2 00 00	ldx #$0000			ldx 	#0
.011046	20 24 0d	jsr $010d24			jsr 	ScanForwardLevel 			; scan forward checking structures
.011049	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.01104b	e6 06		inc $06				inc 	DCodePtr
.01104d	60		rts				rts
.01104e					_FWHExecute:
.01104e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011050	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011051	3a		dec a				dec 	a
.011052	3a		dec a				dec 	a
.011053	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011055	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011057	95 04		sta $04,x			sta 	$04,x
.011059	a9 39 3c	lda #$3c39			lda 	#whileTokenID 				; save while token at +6
.01105c	95 06		sta $06,x			sta 	$06,x
.01105e	8a		txa				txa 								; advance stack by 6.
.01105f	18		clc				clc
.011060	69 06 00	adc #$0006			adc 	#6
.011063	85 2a		sta $2a				sta 	DStack
.011065	60		rts				rts
.011066					Function_WEND:
.011066	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011068	b5 00		lda $00,x			lda 	$00,x
.01106a	c9 39 3c	cmp #$3c39			cmp 	#whileTokenID
.01106d	d0 11		bne $011080			bne 	_FWEFail
.01106f	8a		txa				txa 								; unpick stack and always loop back.
.011070	38		sec				sec 								; we do the check at the top.
.011071	e9 06 00	sbc #$0006			sbc 	#6
.011074	85 2a		sta $2a				sta 	DStack
.011076	aa		tax				tax
.011077	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011079	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.01107b	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01107d	85 22		sta $22				sta 	DLineNumber
.01107f	60		rts				rts
.011080					_FWEFail:
.011080	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>011083	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>01108b	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011096					Function_END:
.011096	02 00		cop #$00			cop 	#0
.011098					Function_RUN:
.011098	20 f1 10	jsr $0110f1			jsr 	Function_CLEAR 				; clear all variables.
.01109b	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.01109d	18		clc				clc
.01109e	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0110a1					_FRun_NextLineNumber:
.0110a1	a8		tay				tay 								; put in Y
.0110a2	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0110a5	f0 ef		beq $011096			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0110a7	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0110aa	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0110ac	98		tya				tya 								; get address back
.0110ad	18		clc				clc 								; skip over the link/line number
.0110ae	69 04 00	adc #$0004			adc 	#4
.0110b1	85 06		sta $06				sta 	DCodePtr
.0110b3					_FRun_NextInstruction:
.0110b3	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0110b5	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0110b7	f0 32		beq $0110eb			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0110b9	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; colon then skip
.0110bc	f0 18		beq $0110d6			beq 	_FRun_Colon
.0110be	a8		tay				tay 								; save in Y
.0110bf	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0110c2	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0110c5	d0 15		bne $0110dc			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0110c7	98		tya				tya 								; get token back
.0110c8	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0110cb	0a		asl a				asl 	a 							; double it into X
.0110cc	aa		tax				tax
.0110cd	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0110cf	e6 06		inc $06				inc 	DCodePtr
.0110d1	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0110d4	80 dd		bra $0110b3			bra 	_FRun_NextInstruction 		; do the following instruction.
.0110d6					_FRun_Colon:
.0110d6	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0110d8	e6 06		inc $06				inc 	DCodePtr
.0110da	80 d7		bra $0110b3			bra 	_FRun_NextInstruction 		; do the following instruction.
.0110dc					_FRun_TryLET:
.0110dc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.0110de	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110e1	90 05		bcc $0110e8			bcc		_FRunSyntax 				; no, must be syntax.
.0110e3	20 a7 0b	jsr $010ba7			jsr 	Function_LET 				; try as a LET.
.0110e6	80 cb		bra $0110b3			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0110e8					_FRunSyntax:
.0110e8	82 6e f3	brl $010459			brl 	SyntaxError
.0110eb					_FRun_EndInstruction:
.0110eb	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.0110ed	1a		inc a				inc 	a 							; go to link for next line
.0110ee	1a		inc a				inc 	a
.0110ef	80 b0		bra $0110a1			bra 	_FRun_NextLineNumber
.0110f1					Function_CLEAR:
.0110f1	20 fd 10	jsr $0110fd			jsr 	ClearVariablesPointersAndStacks
.0110f4	60		rts				rts
.0110f5					Function_STOP:
.0110f5	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0110f8	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.0110fd					ClearVariablesPointersAndStacks:
.0110fd	a9 80 00	lda #$0080			lda 	#BASStack
.011100	85 2a		sta $2a				sta 	DStack
.011102	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011104	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011107	a9 00 00	lda #$0000			lda 	#$0000
.01110a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01110c	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01110e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011111	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011113	20 3a 11	jsr $01113a			jsr 	FindCodeEnd 				; find where the program ends.
.011116	a8		tay				tay 								; Y points to it.
.011117	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01111a	99 02 00	sta $0002,y			sta 	$0002,y
.01111d	99 04 00	sta $0004,y			sta 	$0004,y
.011120	98		tya				tya 								; start of working memory up
.011121	18		clc				clc
.011122	69 06 00	adc #$0006			adc 	#6
.011125	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011128	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01112a	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01112d					_FCLoop:
.01112d	a9 00 00	lda #$0000			lda 	#$0000
.011130	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011132	c8		iny				iny
.011133	c8		iny				iny
.011134	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011137	d0 f4		bne $01112d			bne 	_FCLoop
.011139	60		rts				rts
.01113a					FindCodeEnd:
.01113a	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01113d	18		clc				clc
.01113e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011140	a8		tay				tay
.011141					_FCELoop:
.011141	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011144	f0 08		beq $01114e			beq 	_FCEExit
.011146	98		tya				tya 								; add offset
.011147	18		clc				clc
.011148	79 00 00	adc $0000,y			adc 	$0000,y
.01114b	a8		tay				tay
.01114c	80 f3		bra $011141			bra 	_FCELoop
.01114e					_FCEExit:
.01114e	98		tya				tya 								; return in A
.01114f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011150					Function_Dim:
.011150	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011152	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011155	f0 3b		beq $011192			beq		_FDIMNotArray 				; no, error.
.011157	20 1a 03	jsr $01031a			jsr 	VariableFind 				; try to find it.
.01115a	b0 41		bcs $01119d			bcs 	_FDIMExists 				; if it does, that's an error.
.01115c	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01115e	48		pha				pha
.01115f	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011161	48		pha				pha
.011162					_FDIMSkip:
.011162	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011164	e6 06		inc $06				inc 	DCodePtr
.011166	e6 06		inc $06				inc 	DCodePtr
.011168	29 00 08	and #$0800			and 	#IDContMask
.01116b	d0 f5		bne $011162			bne 	_FDIMSkip
.01116d	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; evaluate the size
.011170	20 83 04	jsr $010483			jsr 	ExpectRightBracket 			; check the ) following.
.011173	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011176	d0 3b		bne $0111b3			bne 	_FDIMSize
.011178	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.01117b	f0 36		beq $0111b3			beq 	_FDIMSize
.01117d	7a		ply				ply 								; restore HashTablePtr
.01117e	84 20		sty $20				sty 	DHashTablePtr
.011180	7a		ply				ply 								; so now A is the high index, Y points to the token
.011181	20 c4 03	jsr $0103c4			jsr 	VariableCreate 				; create the variable.
.011184	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011186	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if not a comma, exit
.011189	d0 06		bne $011191			bne 	_FDIMExit
.01118b	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01118d	e6 06		inc $06				inc 	DCodePtr
.01118f	80 bf		bra $011150			bra 	Function_DIM 				; and do another
.011191					_FDIMExit:
.011191	60		rts				rts
.011192					_FDIMNotArray:
.011192	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>011195	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01119d					_FDIMExists:
.01119d	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0111a0	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0111a8	65 64 69 6d 65 6e 73 69 6f 6e 00
.0111b3					_FDIMSize:
.0111b3	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0111b6	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0111be	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.0111c4					Function_COLLECT:
.0111c4	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0111c6	85 0c		sta $0c				sta 	DTemp2
.0111c8	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0111cb	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0111cd	85 0e		sta $0e				sta 	DTemp2+2
.0111cf	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0111d1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0111d3					_FCNextPass:
.0111d3	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0111d5	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0111d7	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0111d9	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0111dc	18		clc				clc
.0111dd	65 02		adc $02				adc 	DBaseAddress
.0111df	a8		tay				tay 								; put in Y
.0111e0	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0111e3					_FCO1:
.0111e3	20 09 12	jsr $011209			jsr  	COLLECTScanVariable 		; scan that one.
.0111e6	c8		iny				iny 	 							; go to next pointer
.0111e7	c8		iny				iny
.0111e8	ca		dex				dex
.0111e9	d0 f8		bne $0111e3			bne 	_FCO1 						; until done all 16.
.0111eb	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0111ee					_FCO2:
.0111ee	20 1d 12	jsr $01121d			jsr  	COLLECTScanArray 			; scan that one.
.0111f1	c8		iny				iny 	 							; go to next pointer
.0111f2	c8		iny				iny
.0111f3	ca		dex				dex
.0111f4	d0 f8		bne $0111ee			bne 	_FCO2 						; until done all 16.
.0111f6	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0111f8	f0 0e		beq $011208			beq		_FCExit 					; if finished then exit.
.0111fa	48		pha				pha 								; save the target address
.0111fb	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0111fd	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0111ff	20 4c 05	jsr $01054c			jsr 	StringMakeConcrete 			; make the string concrete.
.011202	7a		ply				ply 								; restore the string.
.011203	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011206	80 cb		bra $0111d3			bra		_FCNextPass
.011208					_FCExit:
.011208	60		rts				rts
.011209					COLLECTScanVariable:
.011209	da		phx				phx 								; save XY
.01120a	5a		phy				phy
.01120b					_CSVLoop:
.01120b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01120e	f0 0a		beq $01121a			beq 	_CSVExit
.011210	a8		tay				tay 								; put new address into Y
.011211	18		clc				clc 								; which is four on.
.011212	69 04 00	adc #$0004			adc 	#4
.011215	20 3e 12	jsr $01123e			jsr 	COLLECTCheck
.011218	80 f1		bra $01120b			bra 	_CSVLoop
.01121a					_CSVExit:
.01121a	7a		ply				ply
.01121b	fa		plx				plx
.01121c	60		rts				rts
.01121d					COLLECTScanArray:
.01121d	da		phx				phx 								; save XY
.01121e	5a		phy				phy
.01121f					_CSALoop:
.01121f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011222	f0 17		beq $01123b			beq 	_CSAExit
.011224	a8		tay				tay 								; put new address in Y
.011225	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011228	aa		tax				tax
.011229	e8		inx				inx									; +1 as one more data element.
.01122a	98		tya				tya 								; point A to first element, at +6
.01122b	18		clc				clc
.01122c	69 06 00	adc #$0006			adc 	#6
.01122f					_CSADoAllStrings:
.01122f	20 3e 12	jsr $01123e			jsr 	COLLECTCheck 				; collect check the first.
.011232	1a		inc a				inc 	a 							; advance the pointer.
.011233	1a		inc a				inc 	a
.011234	1a		inc a				inc 	a
.011235	1a		inc a				inc 	a
.011236	ca		dex				dex
.011237	d0 f6		bne $01122f			bne 	_CSADoAllStrings 			; until all strings are done.
.011239	80 e4		bra $01121f			bra 	_CSALoop
.01123b					_CSAExit:
.01123b	7a		ply				ply
.01123c	fa		plx				plx
.01123d	60		rts				rts
.01123e					COLLECTCheck:
.01123e	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011240	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011242	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011244	90 0a		bcc $011250			bcc 	_COCExit
.011246	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011248	b0 06		bcs $011250			bcs 	_COCExit
.01124a	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01124c	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01124e	85 14		sta $14				sta 	DSignCount
.011250					_COCExit:
.011250	a5 0a		lda $0a				lda 	DTemp1+2
.011252	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011253					Command_POKE:
.011253	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; address
.011256	48		pha				pha	 								; save on stack
.011257	5a		phy				phy
.011258	20 8c 04	jsr $01048c			jsr 	ExpectComma 				; comma seperator.
.01125b	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; data
.01125e	fa		plx				plx 								; pull address and store in DTemp1
.01125f	86 0a		stx $0a				stx 	DTemp1+2
.011261	fa		plx				plx
.011262	86 08		stx $08				stx 	DTemp1+0
.011264	e2 20		sep #$20			sep 	#$20 						; byte mode
.011266	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011268	c2 20		rep #$20			rep 	#$20 						; word mode
.01126a	60		rts				rts
.01126b					Command_DOKE:
.01126b	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; address
.01126e	48		pha				pha	 								; save on stack
.01126f	5a		phy				phy
.011270	20 8c 04	jsr $01048c			jsr 	ExpectComma 				; comma seperator.
.011273	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; data
.011276	fa		plx				plx 								; pull address and store in DTemp1
.011277	86 0a		stx $0a				stx 	DTemp1+2
.011279	fa		plx				plx
.01127a	86 08		stx $08				stx 	DTemp1+0
.01127c	87 08		sta [$08]			sta 	[DTemp1]					; write it
.01127e	60		rts				rts
.01127f					Command_LOKE:
.01127f	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; address
.011282	48		pha				pha	 								; save on stack
.011283	5a		phy				phy
.011284	20 8c 04	jsr $01048c			jsr 	ExpectComma 				; comma seperator.
.011287	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; data
.01128a	fa		plx				plx 								; pull address and store in DTemp1
.01128b	86 0a		stx $0a				stx 	DTemp1+2
.01128d	fa		plx				plx
.01128e	86 08		stx $08				stx 	DTemp1+0
.011290	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011292	98		tya				tya
.011293	a0 02 00	ldy #$0002			ldy 	#2
.011296	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011298	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011299					Function_ASSERT:
.011299	20 9b 02	jsr $01029b			jsr 	EvaluateInteger 			; something that returns an integer.
.01129c	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.01129e	05 08		ora $08				ora 	Dtemp1
.0112a0	f0 01		beq $0112a3			beq 	_FAssFail
.0112a2	60		rts				rts
.0112a3					_FAssFail:
.0112a3	20 1e 04	jsr $01041e			jsr 	ErrorHandler 						; call error routine
>0112a6	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0112ae	61 69 6c 65 64 00
.0112b4					Function_CLS:
.0112b4	20 df 12	jsr $0112df			jsr 	HWClearScreen
.0112b7	60		rts				rts
.0112b8					Function_REM:
.0112b8	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0112ba	f0 0b		beq $0112c7			beq 	_FRemSyntax 				; if 0, syntax error
.0112bc	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0112bf	b0 06		bcs $0112c7			bcs 	_FRemSyntax
.0112c1	18		clc				clc 								; add to DCodePtr
.0112c2	65 06		adc $06				adc 	DCodePtr
.0112c4	85 06		sta $06				sta 	DCodePtr
.0112c6	60		rts				rts
.0112c7					_FRemSyntax:
.0112c7	82 8f f1	brl $010459			brl 	SyntaxError

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0112ca					SwitchBasicInstance:
.0112ca	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0112cc	20 df 12	jsr $0112df			jsr 	HWClearScreen 						; clear screen
.0112cf	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0112d2	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0112d4	86 02		stx $02				stx		DBaseAddress
.0112d6	84 04		sty $04				sty 	DHighAddress
.0112d8	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0112d9	48		pha				pha 										; then copy it into B.
.0112da	ab		plb				plb
.0112db	ab		plb				plb
.0112dc	4c 98 10	jmp $011098			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.0112df					HWClearScreen:
.0112df	48		pha				pha
.0112e0	da		phx				phx
.0112e1	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.0112e4	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.0112e7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0112eb	ca		dex				dex
.0112ec	10 f6		bpl $0112e4			bpl 	_CS0
.0112ee	64 28		stz $28				stz 	DCursor
.0112f0	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.0112f3	8f 00 00 0f	sta $0f0000			sta 	$F0000
.0112f7	fa		plx				plx
.0112f8	68		pla				pla
.0112f9	60		rts				rts
.0112fa					HWPrintChar:
.0112fa	48		pha				pha
.0112fb	da		phx				phx
.0112fc	a6 28		ldx $28				ldx 	DCursor
.0112fe	e2 20		sep #$20			sep 	#$20
.011300	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011304	c2 20		rep #$20			rep 	#$20
.011306	e8		inx				inx
.011307	8a		txa				txa
.011308	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.01130b	85 28		sta $28				sta 	DCursor
.01130d	aa		tax				tax
.01130e	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.011311	e2 20		sep #$20			sep 	#$20
.011313	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011317	c2 20		rep #$20			rep 	#$20
.011319	fa		plx				plx
.01131a	68		pla				pla
.01131b	60		rts				rts
.01131c					HWNewLine:
.01131c	48		pha				pha
.01131d	da		phx				phx
.01131e	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011321					HWMoveCursor:
.011321	a9 20 00	lda #$0020			lda 	#32
.011324	20 fa 12	jsr $0112fa			jsr 	HWPrintChar
.011327	8a		txa				txa
.011328	25 28		and $28				and 	DCursor
.01132a	d0 f5		bne $011321			bne 	HWMoveCursor
.01132c	fa		plx				plx
.01132d	68		pla				pla
.01132e	60		rts				rts
.01132f	48		pha		HWTab:	pha
.011330	da		phx				phx
.011331	a2 07 00	ldx #$0007			ldx 	#7
.011334	80 eb		bra $011321			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	fe 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1e 00 0a 00 25 3e 16 00
>024108	13 50 4f 4b 45 20 4c 4f 4b 45 20 44 4f 4b 45 20
>024118	74 65 73 74 00 00 1c 00 0f 00 01 e0 06 22 08 00
>024128	05 68 65 6c 6c 6f 0a 24 08 00 05 77 6f 72 6c 64
>024138	00 00 1c 00 14 00 b5 c8 2e c3 06 22 02 40 0c 26
>024148	02 10 00 40 0a 24 04 40 0c 26 00 50 00 00 0a 00
>024158	1e 00 31 3e 82 40 00 00 08 00 3c 00 2f 3e 00 00
>024168	16 00 46 00 37 3e b5 c8 2e c3 0a 24 02 40 1d 32
>024178	0b 24 2a 40 00 00 0a 00 50 00 31 3e 82 40 00 00
>024188	08 00 5a 00 2a 3e 00 00 16 00 64 00 25 3e 0e 00
>024198	0b 44 69 73 70 6c 61 79 20 52 41 4d 00 00 12 00
>0241a8	82 00 3b 3c 41 c4 06 22 00 40 23 32 08 40 00 00
>0241b8	2e 00 8c 00 2f 3e 16 30 41 c4 0a 24 b5 c8 2e c3
>0241c8	1d 32 10 40 21 32 1d 32 16 30 1a 30 41 c4 0a 24
>0241d8	b5 c8 2e c3 21 32 1d 32 10 40 21 32 00 00 0a 00
>0241e8	96 00 40 3a 41 c4 00 00 08 00 a0 00 32 3e 00 00
>0241f8	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>024208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2014 times (32224 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
