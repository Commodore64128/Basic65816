
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Mon Jun 10 18:33:21 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c a8 08 01	jmp $0108a8		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	51 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	de 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	ee 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	fe 04					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	42 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	a9 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	0e 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	8b 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	6d 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	28 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	28 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	a9 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	b5 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	32 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	a9 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ba 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	cc 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	43 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	23 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	ff 06					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	e9 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	51 03					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	51 03					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	51 03					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	51 03					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	51 03					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	95 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	7a 07					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	0a 08					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	0c 08					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	64 08					.word Function_CLEAR           & $FFFF ; token $3e1e "clear"
>01003e	51 03					.word IllegalToken             & $FFFF ; token $3e1f "dim"
>010040	51 03					.word IllegalToken             & $FFFF ; token $3c20 "while"
>010042	51 03					.word IllegalToken             & $FFFF ; token $3a21 "wend"
.010044					TokenText:
>010044	02 26					 .text $02,"&"        ; token $2001
>010046	02 7c					 .text $02,"|"        ; token $2002
>010048	02 5e					 .text $02,"^"        ; token $2003
>01004a	12 3c					 .text $12,"<"        ; token $2204
>01004c	12 3e					 .text $12,">"        ; token $2205
>01004e	12 3d					 .text $12,"="        ; token $2206
>010050	13 3c 3d				 .text $13,"<="       ; token $2207
>010053	13 3e 3d				 .text $13,">="       ; token $2208
>010056	13 3c 3e				 .text $13,"<>"       ; token $2209
>010059	22 2b					 .text $22,"+"        ; token $240a
>01005b	22 2d					 .text $22,"-"        ; token $240b
>01005d	32 2a					 .text $32,"*"        ; token $260c
>01005f	32 2f					 .text $32,"/"        ; token $260d
>010061	32 25					 .text $32,"%"        ; token $260e
>010063	33 3e 3e				 .text $33,">>"       ; token $260f
>010066	33 3c 3c				 .text $33,"<<"       ; token $2610
>010069	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006f	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010074	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010079	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007e	92 2c					 .text $92,","        ; token $3215
>010080	92 3b					 .text $92,";"        ; token $3216
>010082	92 3a					 .text $92,":"        ; token $3217
>010084	92 28					 .text $92,"("        ; token $3218
>010086	92 29					 .text $92,")"        ; token $3219
>010088	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>01008c	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>010093	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010097	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>01009b	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1e
>0100a1	f4 64 69 6d				 .text $f4,"dim"      ; token $3e1f
>0100a5	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c20
>0100ab	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a21
>0100b0	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3e1e					clearTokenID                     = $3e1e
=$3e1f					dimTokenID                       = $3e1f
=$3c20					whileTokenID                     = $3c20
=$3a21					wendTokenID                      = $3a21

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100b1					Evaluate:
.0100b1	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100b4	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100b7					EvaluateLevel:
.0100b7	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ba	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100bc	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100be	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100c1	b0 79		bcs $01013c			bcs 	_ELVariable
.0100c3	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100c6	b0 16		bcs $0100de			bcs 	_ELConstant
.0100c8	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100cb	90 7f		bcc $01014c			bcc 	_ELStringConstant
.0100cd	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100d0	90 03		bcc $0100d5			bcc 	_ELConstantShift
.0100d2	82 94 00	brl $010169			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100d5					_ELConstantShift:
.0100d5	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100d8	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100da	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100dc	e6 06		inc $06				inc 	DCodePtr
.0100de					_ELConstant:
.0100de	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100e0	38		sec				sec  								; shift it in the range 0-32767
.0100e1	e9 00 40	sbc #$4000			sbc 	#$4000
.0100e4	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100e5	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100e7	6a		ror a				ror 	a 							; rotate that into the constant value
.0100e8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100ea	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100ec	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100ee	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100f0	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100f2	e6 06		inc $06				inc 	DCodePtr
.0100f4					_ELGotAtom:
.0100f4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100f6	a8		tay				tay 								; save in Y
.0100f7	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100fa	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100fd	d0 35		bne $010134			bne 	_ELExit
.0100ff	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010101	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010104	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010106	98		tya				tya 								; get the keyword token back
.010107	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01010a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01010c	90 26		bcc $010134			bcc 	_ELExit 					; precedence too low, then exit.
.01010e	5a		phy				phy 								; save the binary operator on the stack
.01010f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010111	e6 06		inc $06				inc 	DCodePtr
.010113	18		clc				clc 								; try the next level up
.010114	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010117	e8		inx				inx 								; calculate the RHS at the next stack level.
.010118	e8		inx				inx
.010119	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.01011c	ca		dex				dex
.01011d	ca		dex				dex
.01011e	7a		ply				ply 								; get operator token back into Y
.01011f					_ELExecuteY:
.01011f	98		tya				tya
.010120	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010123	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010124	9b		txy				txy 								; save X in Y
.010125	aa		tax				tax 								; double keyword ID in X
.010126	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01012a	bb		tyx				tyx 								; restore X.
.01012b	8f 30 01 01	sta $010130			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01012f					_ELCallRoutine:
.01012f	20 2f 01	jsr $01012f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010132	80 c0		bra $0100f4			bra 	_ELGotAtom 					; go round operator level again.
.010134	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010136	0a		asl a				asl 	a
.010137	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010139	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01013b	60		rts				rts
.01013c					_ELVariable:
.01013c	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01013e	20 fd 01	jsr $0101fd			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010141	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010143	94 10		sty $10,x			sty 	EXSValueH+0,x
.010145	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010147	80 ab		bra $0100f4			bra 	_ELGotAtom
.010149					_ELSyntax
.010149	82 16 02	brl $010362			brl 	SyntaxError
.01014c					_ELStringConstant:
.01014c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01014f	f0 f8		beq $010149			beq 	_ELSyntax
.010151	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010153	1a		inc a				inc 	a
.010154	1a		inc a				inc 	a
.010155	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010157	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010159	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01015b	18		clc				clc 								; add to string constant.
.01015c	65 06		adc $06				adc 	DCodePtr
.01015e	85 06		sta $06				sta 	DCodePtr
.010160	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010162	09 00 80	ora #$8000			ora 	#$8000
.010165	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010167	80 8b		bra $0100f4			bra 	_ELGotAtom
.010169					_ELUnaryKeyword:
.010169	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01016b	a8		tay				tay 								; put the token in Y.
.01016c	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01016e	e6 06		inc $06				inc 	DCodePtr
.010170	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010173	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010176	f0 a7		beq $01011f			beq 	_ELExecuteY					; go back and execute it
.010178	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01017b	d0 11		bne $01018e			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01017d	20 b4 01	jsr $0101b4			jsr 	EvaluateNext 				; evaluate the expression
.010180	20 8c 03	jsr $01038c			jsr 	ExpectRightBracket 			; consume the right bracket.
.010183					_ELCopy:
.010183	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010185	95 00		sta $00,x			sta 	EXSValueL+0,x
.010187	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010189	95 10		sta $10,x			sta 	EXSValueH+0,x
.01018b	82 66 ff	brl $0100f4			brl 	_ELGotAtom 					; and continue.
.01018e					_ELUnaryOperator:
.01018e	5a		phy				phy 								; save the operator on the stack.
.01018f	e8		inx				inx 								; this is like evaluate next
.010190	e8		inx				inx
.010191	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010194	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.010197	ca		dex				dex 								; unwind the stack.
.010198	ca		dex				dex
.010199	68		pla				pla 								; restore the unary operator.
.01019a	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01019d	f0 03		beq $0101a2			beq 	_ELMinus
.01019f	4c 62 03	jmp $010362			jmp 	SyntaxError
.0101a2					_ELMinus:
.0101a2	38		sec				sec 								; do the negation calculation.
.0101a3	a9 00 00	lda #$0000			lda 	#0
.0101a6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101a8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101aa	a9 00 00	lda #$0000			lda 	#0
.0101ad	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101af	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101b1	82 40 ff	brl $0100f4			brl 	_ELGotAtom					; and continue.
.0101b4					EvaluateNext:
.0101b4	e8		inx				inx
.0101b5	e8		inx				inx
.0101b6	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101b9	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.0101bc	ca		dex				dex
.0101bd	ca		dex				dex
.0101be	60		rts				rts
.0101bf					EvaluateInteger:
.0101bf	20 b1 00	jsr $0100b1			jsr 	Evaluate
.0101c2	b0 01		bcs $0101c5			bcs 	EIType
.0101c4	60		rts				rts
.0101c5					EIType:
.0101c5	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0101c8	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101d0	78 70 65 63 74 65 64 00
.0101d8					EvaluateNextInteger:
.0101d8	20 b4 01	jsr $0101b4			jsr 	EvaluateNext
.0101db	b0 e8		bcs $0101c5			bcs 	EIType
.0101dd	60		rts				rts
.0101de					EvaluateString:
.0101de	20 b1 00	jsr $0100b1			jsr 	Evaluate
.0101e1	90 01		bcc $0101e4			bcc 	ESType
.0101e3	60		rts				rts
.0101e4					ESType:
.0101e4	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0101e7	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101ef	78 70 65 63 74 65 64 00
.0101f7					EvaluateNextString:
.0101f7	20 b4 01	jsr $0101b4			jsr 	EvaluateNext
.0101fa	90 e8		bcc $0101e4			bcc 	ESType
.0101fc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101fd					VariableAccessExpression:
.0101fd	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101ff	48		pha				pha
.010200	20 3e 02	jsr $01023e			jsr 	VariableFind 				; try to find the variables
.010203	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010205	90 23		bcc $01022a			bcc 	_VANError
.010207	68		pla				pla 								; get and save that first token
.010208	48		pha				pha
.010209	a8		tay				tay 								; put first token in Y.
.01020a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01020d	f0 07		beq $010216			beq 	_VANNotArray
.01020f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010211	20 b5 02	jsr $0102b5			jsr 	VariableSubscript			; index calculation
.010214	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010216					_VANNotArray:
.010216	68		pla				pla 								; get the token back.
.010217	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01021a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01021d	38		sec				sec 								; set up return string.
.01021e	f0 06		beq $010226			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010220	18		clc				clc 								; returning a number, read high data word
.010221	a0 02 00	ldy #$0002			ldy 	#2
.010224	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010226					_VANLoadLower:
.010226	a8		tay				tay 								; put A into Y (this is the high byte)
.010227	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010229	60		rts				rts
.01022a					_VANError:
.01022a	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>01022d	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010235	20 75 6e 6b 6e 6f 77 6e 00
.01023e					VariableFind:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010240	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010243	90 5c		bcc $0102a1			bcc 	_VFError
.010245	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010248	b0 11		bcs $01025b			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01024a	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01024d	3a		dec a				dec 	a 							; now 0-25
.01024e	0a		asl a				asl 	a 							; x 4 and clear carry
.01024f	0a		asl a				asl 	a
.010250	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010253	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010255	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010257	e6 06		inc $06				inc 	DCodePtr
.010259	38		sec				sec 								; return with carry set.
.01025a	60		rts				rts
.01025b					_VFSlowVariable:
.01025b	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01025d	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010260	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010261	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010262	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010265	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010267	85 08		sta $08				sta 	DTemp1
.010269	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01026b	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01026e	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01026f	65 08		adc $08				adc 	DTemp1
.010271	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010273	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010275					_VFNext:
.010275	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010277	f0 26		beq $01029f			beq 	_VFFail 					; if zero, then it's the end of the list.
.010279	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01027b	a8		tay				tay 								; read the address of the name at $0002,y
.01027c	b9 02 00	lda $0002,y			lda 	$0002,y
.01027f	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010281	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010284					_VFCompare:
.010284	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010286	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010288	d0 eb		bne $010275			bne 	_VFNext 					; if not, go to the next one.
.01028a	c8		iny				iny 								; advance token pointer
.01028b	c8		iny				iny
.01028c	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.01028f	d0 f3		bne $010284			bne 	_VFCompare
.010291	98		tya				tya 								; this is the length of the word.
.010292	18		clc				clc 								; so we add it to the code pointer
.010293	65 06		adc $06				adc 	DCodePtr
.010295	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010297	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010299	18		clc				clc 								; four on is the actual data
.01029a	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.01029d	38		sec				sec 								; return with CS indicating success
.01029e	60		rts				rts
.01029f					_VFFail:
.01029f	18		clc				clc
.0102a0	60		rts				rts
.0102a1					_VFError:
.0102a1	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0102a4	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102ac	76 61 72 69 61 62 6c 65 00
.0102b5					VariableSubscript:
.0102b5	5a		phy				phy 								; save token on stack
.0102b6	48		pha				pha		 							; save variable address on stack.
.0102b7	20 d8 01	jsr $0101d8			jsr		EvaluateNextInteger 		; get the subscript
.0102ba	20 8c 03	jsr $01038c			jsr 	ExpectRightBracket 			; skip right bracket.
.0102bd	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102c0	d0 1d		bne $0102df			bne 	_VANSubscript
.0102c2	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102c4	f0 02		beq $0102c8			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102c6	b0 17		bcs $0102df			bcs 	_VANSubscript
.0102c8					_VANSubOkay:
.0102c8	0a		asl a				asl 	a 							; double lsword
.0102c9	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102cb	68		pla				pla 								; restore DVariablePtr
.0102cc	85 1e		sta $1e				sta 	DVariablePtr
.0102ce	68		pla				pla 								; get and save that first token
.0102cf	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102d2	d0 02		bne $0102d6			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102d4	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102d6					_VANNotString
.0102d6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102d8	18		clc				clc 								; add 2 to get it past the high subscript
.0102d9	69 02 00	adc #$0002			adc 	#2
.0102dc	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102de	60		rts				rts
.0102df					_VANSubscript:
.0102df	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0102e2	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102ea	79 20 53 75 62 73 63 72 69 70 74 00
.0102f6					VariableCreate:
.0102f6	48		pha				pha 								; save count.
.0102f7	0a		asl a				asl 	a 							; 2 x # items.
.0102f8	d0 03		bne $0102fd			bne 	_VCNotSingle 				; if this is zero, then it is a single variable
.0102fa	a9 02 00	lda #$0002			lda 	#2 							; so we want 2 (1 items x 2)
.0102fd					_VCNotSingle:
.0102fd	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0102ff	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010302	48		pha				pha 								; save on stack
.010303	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010306	d0 02		bne $01030a			bne 	_VCString
.010308	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.01030a					_VCString:
.01030a	68		pla				pla 								; restore first token.
.01030b	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01030e	f0 04		beq $010314			beq 	_VCNotArray
.010310	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010312	e6 08		inc $08				inc 	DTemp1
.010314					_VCNotArray:
.010314	5a		phy				phy 								; save address of token on stack.
.010315	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010318	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.01031a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01031c	18		clc				clc 								; add 4 for link and name.
.01031d	69 04 00	adc #$0004			adc 	#4
.010320	65 08		adc $08				adc 	DTemp1 						; add memory required
.010322	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010324	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010326					_VCErase:
.010326	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word
.010329	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01032c	c8		iny				iny
.01032d	c8		iny				iny
.01032e	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010330	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010332	d0 f2		bne $010326			bne 	_VCErase
.010334	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010336	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010338	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01033b	68		pla				pla 								; restore the token address
.01033c	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01033f	68		pla				pla 								; restore count and store.
.010340	99 04 00	sta $0004,y			sta 	$0004,y
.010343					_VCNotArray2:
.010343	98		tya				tya 								; update the head link
.010344	92 20		sta ($20)			sta 	(DHashTablePtr)
.010346	18		clc				clc 								; advance pointer to the data bit.
.010347	69 04 00	adc #$0004			adc 	#4
.01034a	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01034b					ErrorHandler:
.01034b	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01034d	fa		plx				plx 								; address of error message -1
.01034e	ea		nop				nop
.01034f	80 fe		bra $01034f	_EH1:	bra 	_EH1
.010351					IllegalToken:
.010351	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010354	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01035c	54 6f 6b 65 6e 00
.010362					SyntaxError:
.010362	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010365	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01036d	72 72 6f 72 00
.010372					ExpectToken:
.010372	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010374	d0 05		bne $01037b			bne 	_CTKError					; error if not
.010376	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010378	e6 06		inc $06				inc 	DCodePtr
.01037a	60		rts				rts
.01037b					_CTKError:
.01037b	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>01037e	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010386	74 6f 6b 65 6e 00
.01038c					ExpectRightBracket:
.01038c	48		pha				pha
.01038d	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010390	20 72 03	jsr $010372			jsr 	ExpectToken
.010393	68		pla				pla
.010394	60		rts				rts
.010395					ExpectComma:
.010395	48		pha				pha
.010396	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010399	20 72 03	jsr $010372			jsr 	ExpectToken
.01039c	68		pla				pla
.01039d	60		rts				rts
.01039e					CheckBothNumeric:
.01039e	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103a0	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103a2	30 01		bmi $0103a5			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103a4	60		rts				rts
.0103a5					_CBNFail:
.0103a5	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0103a8	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103b0	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103be					ResetTypeInteger:
.0103be	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103c0	29 ff 7f	and #$7fff			and 	#$7FFF
.0103c3	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103c5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.0103c6					StringTempAllocate:
.0103c6	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103c9	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103cc	18		clc				clc 								; this adds one, for the length.
.0103cd	65 16		adc $16				adc 	DTempStringPointer
.0103cf	85 16		sta $16				sta 	DTempStringPointer
.0103d1	48		pha				pha
.0103d2	a9 00 00	lda #$0000			lda 	#$0000
.0103d5	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103d7	92 16		sta ($16)			sta		(DTempStringPointer)
.0103d9	c2 20		rep #$20			rep 	#$20
.0103db	68		pla				pla
.0103dc	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103de	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103e0	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0103e2	60		rts				rts
.0103e3					StringCreateCopy:
.0103e3	a8		tay				tay 								; put pointer to string in Y
.0103e4	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0103e7	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0103ea	f0 17		beq $010403			beq 	_SCCExit 					; do nothing if length zero.
.0103ec	da		phx				phx 								; save X and put the character count in X
.0103ed	aa		tax				tax
.0103ee	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0103f0					_SCCCopy:
.0103f0	c8		iny				iny 								; advance and read (first time skips length)
.0103f1	b9 00 00	lda $0000,y			lda 	$0000,y
.0103f4	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0103f6	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0103f8	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0103fa	1a		inc a				inc 	a
.0103fb	92 18		sta ($18)			sta 	(DStartTempString)
.0103fd	ca		dex				dex 								; do X times
.0103fe	d0 f0		bne $0103f0			bne 	_SCCCopy
.010400	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010402	fa		plx				plx
.010403					_SCCExit:
.010403	60		rts				rts
.010404					StringMakeConcrete:
.010404	85 08		sta $08				sta 	DTemp1 						; source
.010406	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010408	29 ff 00	and #$00ff			and 	#$00FF
.01040b	48		pha				pha 								; save on stack.
.01040c	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.01040f	18		clc				clc
.010410	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010413	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010415	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010417	85 0c		sta $0c				sta 	DTemp2 						; target
.010419	7a		ply				ply 								; get length copy from here until Y goes -ve
.01041a	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01041c					_SMCLoop:
.01041c	b1 08		lda ($08),y			lda 	(DTemp1),y
.01041e	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010420	88		dey				dey
.010421	10 f9		bpl $01041c			bpl 	_SMCLoop
.010423	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010425	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010427	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010428					Binary_Add:
.010428	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01042a	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01042c	30 12		bmi $010440		bmi 	_BATypeError
.01042e	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010430	30 3f		bmi $010471		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010432	18		clc			clc
.010433	b5 00		lda $00,x		lda		EXSValueL+0,x
.010435	75 02		adc $02,x		adc 	EXSValueL+2,x
.010437	95 00		sta $00,x		sta 	EXSValueL+0,x
.010439	b5 10		lda $10,x		lda		EXSValueH+0,x
.01043b	75 12		adc $12,x		adc 	EXSValueH+2,x
.01043d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01043f	60		rts			rts
.010440					_BATypeError:
.010440	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010443	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01044b	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01045b	65 73 00
.01045e					_BALengthError:
.01045e	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010461	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010469	6f 6f 20 6c 6f 6e 67 00
.010471					_BAConcatenateString:
.010471	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010473	85 08		sta $08			sta 	DTemp1
.010475	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010477	85 0c		sta $0c			sta 	DTemp2
.010479	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01047b	18		clc			clc 										; work out the total length
.01047c	b2 08		lda ($08)		lda 	(DTemp1)
.01047e	72 0c		adc ($0c)		adc 	(DTemp2)
.010480	b0 14		bcs $010496		bcs 	_BAConcatLengthError 				; string is too long.
.010482	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010484	20 c6 03	jsr $0103c6		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010487	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010489	74 10		stz $10,x		stz 	EXSValueH+0,x
.01048b	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01048d	20 e3 03	jsr $0103e3		jsr 	StringCreateCopy
.010490	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010492	20 e3 03	jsr $0103e3		jsr 	StringCreateCopy
.010495	60		rts			rts
.010496					_BAConcatLengthError:
.010496	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010499	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104a1	6f 6f 20 6c 6f 6e 67 00
.0104a9					Binary_Subtract:
.0104a9	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0104ac	38		sec			sec
.0104ad	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104af	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104b1	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104b3	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104b5	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104b7	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104b9	60		rts			rts
.0104ba					Binary_ShiftRight:
.0104ba	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0104bd	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104bf	29 3f 00	and #$003f		and 	#63
.0104c2	f0 07		beq $0104cb		beq		_Binary_SRExit
.0104c4					_Binary_SRLoop:
.0104c4	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104c6	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104c8	3a		dec a			dec 	a
.0104c9	d0 f9		bne $0104c4		bne 	_Binary_SRLoop
.0104cb					_Binary_SRExit:
.0104cb	60		rts			rts
.0104cc					Binary_ShiftLeft:
.0104cc	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0104cf	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104d1	29 3f 00	and #$003f		and 	#63
.0104d4	f0 07		beq $0104dd		beq		_Binary_SLExit
.0104d6					_Binary_SLLoop:
.0104d6	16 00		asl $00,x		asl 	EXSValueL+0,x
.0104d8	36 10		rol $10,x		rol 	EXSValueH+0,x
.0104da	3a		dec a			dec 	a
.0104db	d0 f9		bne $0104d6		bne 	_Binary_SLLoop
.0104dd					_Binary_SLExit:
.0104dd	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.0104de					Binary_And:
.0104de	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0104e1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104e3	35 02		and $02,x		and 	EXSValueL+2,x
.0104e5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e9	35 12		and $12,x		and 	EXSValueH+2,x
.0104eb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ed	60		rts			rts
.0104ee					Binary_Or:
.0104ee	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0104f1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104f3	15 02		ora $02,x		ora 	EXSValueL+2,x
.0104f5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104f7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104f9	15 12		ora $12,x		ora 	EXSValueH+2,x
.0104fb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104fd	60		rts			rts
.0104fe					Binary_Xor:
.0104fe	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.010501	b5 00		lda $00,x		lda		EXSValueL+0,x
.010503	55 02		eor $02,x		eor 	EXSValueL+2,x
.010505	95 00		sta $00,x		sta 	EXSValueL+0,x
.010507	b5 10		lda $10,x		lda		EXSValueH+0,x
.010509	55 12		eor $12,x		eor 	EXSValueH+2,x
.01050b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01050d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.01050e					Binary_Equals:
.01050e	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010511	b0 0e		bcs $010521		bcs 	_BEString
.010513	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010515	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010517	d0 4f		bne $010568		bne 	Compare_Fail
.010519	b5 10		lda $10,x		lda 	EXSValueH,x
.01051b	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01051d	d0 49		bne $010568		bne 	Compare_Fail
.01051f	80 3f		bra $010560		bra 	Compare_Succeed
.010521					_BEString:
.010521	09 00 00	ora #$0000		ora 	#$0000
.010524	f0 3a		beq $010560		beq 	Compare_Succeed
.010526	80 40		bra $010568		bra 	Compare_Fail
.010528					Binary_NotEquals:
.010528	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01052b	b0 0e		bcs $01053b		bcs 	_BNEString
.01052d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01052f	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010531	d0 2d		bne $010560		bne 	Compare_Succeed
.010533	b5 10		lda $10,x		lda 	EXSValueH,x
.010535	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010537	d0 27		bne $010560		bne 	Compare_Succeed
.010539	80 2d		bra $010568		bra 	Compare_Fail
.01053b					_BNEString:
.01053b	09 00 00	ora #$0000		ora 	#$0000
.01053e	d0 20		bne $010560		bne 	Compare_Succeed
.010540	80 26		bra $010568		bra 	Compare_Fail
.010542					Binary_Less:
.010542	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010545	b0 12		bcs $010559		bcs 	_BLString
.010547	38		sec			sec
.010548	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01054a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01054c	b5 10		lda $10,x		lda 	EXSValueH,x
.01054e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010550	50 03		bvc $010555		bvc 	*+5
.010552	49 00 80	eor #$8000		eor 	#$8000
.010555	30 09		bmi $010560		bmi 	Compare_Succeed
.010557	80 0f		bra $010568		bra 	Compare_Fail
.010559					_BLString:
.010559	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01055c	f0 02		beq $010560		beq 	Compare_Succeed
.01055e	80 08		bra $010568		bra 	Compare_Fail
.010560					Compare_Succeed:
.010560	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010563	95 00		sta $00,x		sta 	EXSValueL,x
.010565	95 10		sta $10,x		sta 	EXSValueH,x
.010567	60		rts			rts
.010568					Compare_Fail:
.010568	74 00		stz $00,x		stz 	EXSValueL,x
.01056a	74 10		stz $10,x		stz 	EXSValueH,x
.01056c	60		rts			rts
.01056d					Binary_GreaterEqual:
.01056d	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010570	b0 12		bcs $010584		bcs 	_BGEString
.010572	38		sec			sec
.010573	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010575	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010577	b5 10		lda $10,x		lda 	EXSValueH,x
.010579	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01057b	50 03		bvc $010580		bvc 	*+5
.01057d	49 00 80	eor #$8000		eor 	#$8000
.010580	10 de		bpl $010560		bpl 	Compare_Succeed
.010582	80 e4		bra $010568		bra 	Compare_Fail
.010584					_BGEString:
.010584	09 00 00	ora #$0000		ora 	#$0000
.010587	10 d7		bpl $010560		bpl 	Compare_Succeed
.010589	80 dd		bra $010568		bra 	Compare_Fail
.01058b					Binary_LessEqual:
.01058b	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01058e	b0 12		bcs $0105a2		bcs 	_BLEString
.010590	18		clc			clc 									; numeric <= signed
.010591	b5 00		lda $00,x		lda 	EXSValueL,x
.010593	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010595	b5 10		lda $10,x		lda 	EXSValueH,x
.010597	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010599	50 03		bvc $01059e		bvc 	*+5
.01059b	49 00 80	eor #$8000		eor 	#$8000
.01059e	30 c0		bmi $010560		bmi 	Compare_Succeed
.0105a0	80 c6		bra $010568		bra 	Compare_Fail
.0105a2					_BLEString:
.0105a2	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105a5	d0 b9		bne $010560		bne 	Compare_Succeed
.0105a7	80 bf		bra $010568		bra 	Compare_Fail
.0105a9					Binary_Greater:
.0105a9	20 c7 05	jsr $0105c7		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105ac	b0 12		bcs $0105c0		bcs 	_BGString
.0105ae	18		clc			clc 									; numeric > signed
.0105af	b5 00		lda $00,x		lda 	EXSValueL,x
.0105b1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105b3	b5 10		lda $10,x		lda 	EXSValueH,x
.0105b5	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105b7	50 03		bvc $0105bc		bvc 	*+5
.0105b9	49 00 80	eor #$8000		eor 	#$8000
.0105bc	10 a2		bpl $010560		bpl 	Compare_Succeed
.0105be	80 a8		bra $010568		bra 	Compare_Fail
.0105c0					_BGString:
.0105c0	c9 01 00	cmp #$0001		cmp 	#$0001
.0105c3	f0 9b		beq $010560		beq 	Compare_Succeed
.0105c5	80 a1		bra $010568		bra 	Compare_Fail
.0105c7					CompareTypeCheck:
.0105c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105c9	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105cb	30 06		bmi $0105d3		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105cd	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105cf	30 1c		bmi $0105ed		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105d1	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0105d2	60		rts			rts
.0105d3					_CTCFail:
.0105d3	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0105d6	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0105de	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0105ed					_CTCStringCompare:
.0105ed	20 be 03	jsr $0103be		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0105f0	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0105f2	85 08		sta $08			sta 	DTemp1
.0105f4	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0105f6	85 0c		sta $0c			sta 	DTemp2
.0105f8	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0105fb	a8		tay			tay
.0105fc	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0105fe	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010600	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010602	90 02		bcc $010606		bcc 	_CTCSmallest
.010604	b2 0c		lda ($0c)		lda 	(DTemp2)
.010606					_CTCSmallest:
.010606	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010608					_CTCCompare:
.010608	c8		iny			iny 									; look at next character (done first, first char is size)
.010609	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01060b	30 16		bmi $010623		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01060d	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01060f	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010611	f0 f5		beq $010608		beq 	_CTCCompare 					; if zero, try the next character.
.010613	b0 07		bcs $01061c		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010615					_CTCLess:
.010615	c2 20		rep #$20		rep 	#$20
.010617	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01061a	80 14		bra $010630		bra 	_CTCExit
.01061c					_CTCGreater:
.01061c	c2 20		rep #$20		rep 	#$20
.01061e	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010621	80 0d		bra $010630		bra 	_CTCExit
.010623					_CTCEqualSoFar:
.010623	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010625	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010627	90 ec		bcc $010615		bcc 	_CTCLess
.010629	d0 f1		bne $01061c		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01062b	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01062d	a9 00 00	lda #$0000		lda 	#$0000
.010630					_CTCExit:
.010630	38		sec			sec 									; return with CS indicating string comparison.
.010631	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010632					Binary_Divide:
.010632	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.010635	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010637	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010639	d0 14		bne $01064f		bne 	_BinaryDivide_Ok
.01063b	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>01063e	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010646	20 62 79 20 7a 65 72 6f 00
.01064f					_BinaryDivide_Ok:
.01064f	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010651	64 0a		stz $0a			stz 	DTemp1+2
.010653	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010655	5a		phy			phy 										; save Y (bit counter)
.010656	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010658	10 07		bpl $010661		bpl 	_BinaryDivide_RightDone
.01065a	e8		inx			inx
.01065b	e8		inx			inx
.01065c	20 97 06	jsr $010697		jsr 	Binary_DivNegate
.01065f	ca		dex			dex
.010660	ca		dex			dex
.010661					_BinaryDivide_RightDone:
.010661	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010663	10 03		bpl $010668		bpl 	_BinaryDivide_LeftDone
.010665	20 97 06	jsr $010697		jsr 	Binary_DivNegate
.010668					_BinaryDivide_LeftDone:
.010668	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01066b					_BinaryDivide_Loop:
.01066b	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01066d	36 10		rol $10,x		rol 	EXSValueH+0,x
.01066f	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010671	26 0a		rol $0a			rol 	DTemp1+2
.010673	38		sec			sec											; calculate A-M
.010674	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010676	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010678	85 0c		sta $0c			sta 	DTemp2
.01067a	a5 0a		lda $0a			lda 	DTemp1+2
.01067c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01067e	90 08		bcc $010688		bcc 	_Binary_NoSubract 					; if A < M skip this
.010680	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010682	a5 0c		lda $0c			lda 	DTemp2
.010684	85 08		sta $08			sta 	DTemp1+0
.010686	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010688					_Binary_NoSubract:
.010688	88		dey			dey 										; do it 32 times.
.010689	d0 e0		bne $01066b		bne 	_BinaryDivide_Loop
.01068b					_BinaryDivide_Exit:
.01068b	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01068d	29 01 00	and #$0001		and 	#1
.010690	f0 03		beq $010695		beq 	_BinaryDivide_Exit2
.010692	20 97 06	jsr $010697		jsr 	Binary_DivNegate
.010695					_BinaryDivide_Exit2:
.010695	7a		ply			ply 										; restore Y
.010696	60		rts			rts
.010697					Binary_DivNegate:
.010697	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010699	38		sec			sec 										; negate the value at stack X.
.01069a	a9 00 00	lda #$0000		lda 	#$0000
.01069d	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01069f	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106a1	a9 00 00	lda #$0000		lda 	#$0000
.0106a4	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106a6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106a8	60		rts			rts
.0106a9					Binary_Modulus:
.0106a9	20 32 06	jsr $010632		jsr 	Binary_Divide 						; do the divide
.0106ac	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106ae	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106b0	a5 0a		lda $0a			lda 	DTemp1+2
.0106b2	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106b4	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0106b5					Binary_Multiply:
.0106b5	20 9e 03	jsr $01039e		jsr 	CheckBothNumeric 					; check both values are numeric
.0106b8	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106ba	85 08		sta $08			sta 	DTemp1
.0106bc	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106be	85 0a		sta $0a			sta		DTemp1+2
.0106c0	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106c2	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106c4					_BinaryMultiply_Loop:
.0106c4	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106c6	05 0a		ora $0a			ora 	DTemp1+2
.0106c8	f0 1e		beq $0106e8		beq 	_BinaryMultiply_Exit
.0106ca	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106cc	29 01 00	and #$0001		and 	#1
.0106cf	f0 0d		beq $0106de		beq 	_BinaryMultiply_NoAdd
.0106d1	18		clc			clc 										; add multiplicand to result.
.0106d2	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0106d4	75 02		adc $02,x		adc 	EXSValueL+2,x
.0106d6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106d8	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106da	75 12		adc $12,x		adc 	EXSValueH+2,x
.0106dc	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106de					_BinaryMultiply_NoAdd:
.0106de	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0106e0	66 08		ror $08			ror 	DTemp1
.0106e2	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0106e4	36 12		rol $12,x		rol 	EXSValueH+2,x
.0106e6	80 dc		bra $0106c4		bra 	_BinaryMultiply_Loop 				; go round again.
.0106e8					_BinaryMultiply_Exit:
.0106e8	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0106e9					Function_Len:
.0106e9	20 be 03	jsr $0103be			jsr 	ResetTypeInteger 			; returns an integer
.0106ec	20 f7 01	jsr $0101f7			jsr 	EvaluateNextString 			; get the value you are absoluting
.0106ef	20 8c 03	jsr $01038c			jsr 	ExpectRightBracket 			; check )
.0106f2	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0106f4	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0106f7	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0106fa	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0106fc	74 10		stz $10,x			stz 	EXSValueH+0,x
.0106fe	60		rts				rts
.0106ff					Function_Abs:
.0106ff	20 be 03	jsr $0103be			jsr 	ResetTypeInteger 			; returns an integer
.010702	20 d8 01	jsr $0101d8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010705	20 8c 03	jsr $01038c			jsr 	ExpectRightBracket 			; check )
.010708	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01070a	30 07		bmi $010713			bmi 	_FAbsNegative 				; negate it if negative
.01070c	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01070e	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010710	95 00		sta $00,x			sta 	EXSValueL+0,x
.010712	60		rts				rts
.010713					_FAbsNegative:
.010713	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010714	a9 00 00	lda #$0000			lda 	#0
.010717	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010719	95 00		sta $00,x			sta 	EXSValueL+0,x
.01071b	a9 00 00	lda #$0000			lda 	#0
.01071e	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010720	95 10		sta $10,x			sta 	EXSValueH+0,x
.010722	60		rts				rts
.010723					Function_Sgn:
.010723	20 be 03	jsr $0103be			jsr 	ResetTypeInteger 			; returns integer
.010726	20 d8 01	jsr $0101d8			jsr 	EvaluateNextInteger 		; get an integer
.010729	20 8c 03	jsr $01038c			jsr 	ExpectRightBracket 			; check )
.01072c	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01072e	74 10		stz $10,x			stz 	EXSValueH+0,x
.010730	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010732	30 07		bmi $01073b			bmi 	_FSgnNegative 				; set to -1 if signed
.010734	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010736	f0 02		beq $01073a			beq 	_FSgnExit
.010738	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01073a					_FSgnExit:
.01073a	60		rts				rts
.01073b					_FSgnNegative:
.01073b	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01073e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010740	95 10		sta $10,x			sta 	EXSValueH+0,x
.010742	60		rts				rts
.010743					Function_Random:
.010743	20 be 03	jsr $0103be			jsr 	ResetTypeInteger
.010746	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010748	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.01074a	d0 0a		bne $010756			bne 	_Rnd_NotZero
.01074c	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01074f	85 10		sta $10				sta 	DRandom
.010751	a9 ea 00	lda #$00ea			lda 	#$EA
.010754	85 12		sta $12				sta 	DRandom+2
.010756					_Rnd_NotZero:
.010756	20 61 07	jsr $010761			jsr 	_Rnd_Process 				; call randomiser twice
.010759	95 10		sta $10,x			sta 	EXSValueH+0,x
.01075b	20 61 07	jsr $010761			jsr 	_Rnd_Process
.01075e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010760	60		rts				rts
.010761					_Rnd_Process:
.010761	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010763	26 12		rol $12				rol 	DRandom+2
.010765	90 0e		bcc $010775			bcc 	_Rnd_Exit
.010767	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010769	49 54 d4	eor #$d454			eor 	#$D454
.01076c	85 10		sta $10				sta 	DRandom
.01076e	a5 12		lda $12				lda 	DRandom+2
.010770	49 d5 55	eor #$55d5			eor 	#$55D5
.010773	85 12		sta $12				sta 	DRandom+2
.010775					_Rnd_Exit:
.010775	a5 10		lda $10				lda 	DRandom
.010777	45 12		eor $12				eor 	DRandom+2
.010779	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.01077a					Function_ASSERT:
.01077a	20 bf 01	jsr $0101bf			jsr 	EvaluateInteger 			; something that returns an integer.
.01077d	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.01077f	05 08		ora $08				ora 	Dtemp1
.010781	f0 01		beq $010784			beq 	_FAssFail
.010783	60		rts				rts
.010784					_FAssFail:
.010784	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>010787	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>01078f	61 69 6c 65 64 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010795					Function_Let:
.010795	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010797	48		pha				pha
.010798	20 3e 02	jsr $01023e			jsr 	VariableFind 				; find the variable
.01079b	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01079d	b0 1c		bcs $0107bb			bcs 	_FLetFound 					; skip if found.
.01079f	68		pla				pla 								; get and push the first token again.
.0107a0	48		pha				pha
.0107a1	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.0107a4	d0 51		bne $0107f7			bne 	_FLError					; arrays, so this causes an error.
.0107a6	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0107a8	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0107ab	20 f6 02	jsr $0102f6			jsr 	VariableCreate 				; create it.
.0107ae	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0107b0					_FLSkipToken:
.0107b0	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0107b2	e6 06		inc $06				inc 	DCodePtr
.0107b4	e6 06		inc $06				inc 	DCodePtr
.0107b6	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0107b9	d0 f5		bne $0107b0			bne 	_FLSkipToken
.0107bb					_FLetFound:
.0107bb	68		pla				pla 								; get and save the first token.
.0107bc	48		pha				pha
.0107bd	a8		tay				tay 								; put it in Y
.0107be	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0107c1	f0 07		beq $0107ca			beq 	_FLetNotArray
.0107c3	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0107c5	20 b5 02	jsr $0102b5			jsr 	VariableSubscript			; index calculation
.0107c8	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0107ca					_FLetNotArray:
.0107ca	7a		ply				ply 								; get the first token into Y
.0107cb	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0107cd	48		pha				pha
.0107ce	5a		phy				phy 								; save the first token on the stack.
.0107cf	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0107d2	20 72 03	jsr $010372			jsr 	ExpectToken
.0107d5	68		pla				pla 								; restore the first token.
.0107d6	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0107d9	d0 0f		bne $0107ea			bne 	_FLetString 				; skip if string.
.0107db	20 bf 01	jsr $0101bf			jsr 	EvaluateInteger 			; get an integer
.0107de	7a		ply				ply 								; get address in Y
.0107df	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0107e1	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107e4	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.0107e6	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0107e9	60		rts				rts
.0107ea					_FLetString:
.0107ea	20 de 01	jsr $0101de			jsr 	EvaluateString 				; get a string.
.0107ed	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0107ef	20 04 04	jsr $010404			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0107f2	7a		ply				ply 								; get address
.0107f3	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107f6	60		rts				rts
.0107f7					_FLError:
.0107f7	20 4b 03	jsr $01034b			jsr 	ErrorHandler 						; call error routine
>0107fa	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010802	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.01080a					Function_END:
.01080a	02 00		cop #$00			cop 	#0
.01080c					Function_RUN:
.01080c	20 64 08	jsr $010864			jsr 	Function_CLEAR 				; clear all variables.
.01080f	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010811	18		clc				clc
.010812	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010815					_FRun_NextLineNumber:
.010815	a8		tay				tay 								; put in Y
.010816	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010819	f0 ef		beq $01080a			beq 	Function_END 				; if zero, off the end of the program
.01081b	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01081e	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010820	98		tya				tya 								; get address back
.010821	18		clc				clc 								; skip over the link/line number
.010822	69 04 00	adc #$0004			adc 	#4
.010825	85 06		sta $06				sta 	DCodePtr
.010827					_FRun_NextInstruction:
.010827	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.01082a	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01082c	38		sec				sec
.01082d	e9 00 01	sbc #$0100			sbc 	#256
.010830	85 16		sta $16				sta 	DTempStringPointer
.010832	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010834	f0 28		beq $01085e			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010836	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.010839	f0 18		beq $010853			beq 	_FRun_Colon
.01083b	a8		tay				tay 								; save in Y
.01083c	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.01083f	c9 00 20	cmp #$2000			cmp 	#$2000
.010842	d0 15		bne $010859			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010844	98		tya				tya 								; get token back
.010845	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010848	0a		asl a				asl 	a 							; double it into X
.010849	aa		tax				tax
.01084a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01084c	e6 06		inc $06				inc 	DCodePtr
.01084e	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010851	80 d4		bra $010827			bra 	_FRun_NextInstruction 		; do the following instruction.
.010853					_FRun_Colon:
.010853	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010855	e6 06		inc $06				inc 	DCodePtr
.010857	80 ce		bra $010827			bra 	_FRun_NextInstruction 		; do the following instruction.
.010859					_FRun_TryLET:
.010859	20 95 07	jsr $010795			jsr 	Function_LET 				; try as a LET.
.01085c	80 c9		bra $010827			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.01085e					_FRun_EndInstruction:
.01085e	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010860	1a		inc a				inc 	a 							; go to link for next line
.010861	1a		inc a				inc 	a
.010862	80 b1		bra $010815			bra 	_FRun_NextLineNumber
.010864					Function_CLEAR:
.010864	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010866	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010869	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01086b	20 92 08	jsr $010892			jsr 	FindCodeEnd 				; find where the program ends.
.01086e	a8		tay				tay 								; Y points to it.
.01086f	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010872	99 02 00	sta $0002,y			sta 	$0002,y
.010875	99 04 00	sta $0004,y			sta 	$0004,y
.010878	98		tya				tya 								; start of working memory up
.010879	18		clc				clc
.01087a	69 06 00	adc #$0006			adc 	#6
.01087d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010880	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010882	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010885					_FCLoop:
.010885	a9 00 00	lda #$0000			lda 	#$0000
.010888	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01088a	c8		iny				iny
.01088b	c8		iny				iny
.01088c	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.01088f	d0 f4		bne $010885			bne 	_FCLoop
.010891	60		rts				rts
.010892					FindCodeEnd:
.010892	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010895	18		clc				clc
.010896	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010898	a8		tay				tay
.010899					_FCELoop:
.010899	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.01089c	f0 08		beq $0108a6			beq 	_FCEExit
.01089e	98		tya				tya 								; add offset
.01089f	18		clc				clc
.0108a0	79 00 00	adc $0000,y			adc 	$0000,y
.0108a3	a8		tay				tay
.0108a4	80 f3		bra $010899			bra 	_FCELoop
.0108a6					_FCEExit:
.0108a6	98		tya				tya 								; return in A
.0108a7	60		rts				rts

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0108a8					SwitchBasicInstance:
.0108a8	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0108aa	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0108ad	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0108af	86 02		stx $02				stx		DBaseAddress
.0108b1	84 04		sty $04				sty 	DHighAddress
.0108b3	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0108b4	48		pha				pha 										; then copy it into B.
.0108b5	ab		plb				plb
.0108b6	ab		plb				plb
.0108b7	4c 0c 08	jmp $01080c			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	66 8c 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0e 00 01 00 01 ce 18 c0
>024108	06 22 2d 40 00 00 12 00 02 00 67 ce 5e cd 16 c0
>024118	06 22 03 10 9d 9d 00 00 10 00 03 00 1a 3e b5 c5
>024128	06 22 02 10 46 ae 00 00 10 00 04 00 1a 3e 35 ce
>024138	75 c1 06 22 6e 40 00 00 12 00 05 00 23 cd e3 ca
>024148	05 c0 06 22 0b 24 42 97 00 00 0e 00 06 00 13 c0
>024158	06 22 03 10 8a b9 00 00 10 00 07 00 58 ce 22 c0
>024168	06 22 04 10 a8 70 00 00 10 00 08 00 38 ce 0c cc
>024178	02 c0 06 22 cf 8f 00 00 10 00 09 00 1a 3e fe cc
>024188	0b c0 06 22 9d 40 00 00 12 00 0a 00 1a 3e 8a cd
>024198	ff c1 06 22 04 10 4e 83 00 00 10 00 0b 00 1a 3e
>0241a8	1a c0 06 22 0b 24 8f 40 00 00 12 00 0c 00 60 ce
>0241b8	97 c5 06 22 0b 24 06 10 6e 44 00 00 0c 00 0d 00
>0241c8	03 c6 06 22 6b 40 00 00 0c 00 0e 00 21 c5 06 22
>0241d8	b7 70 00 00 12 00 0f 00 1a 3e a8 cd 71 c4 06 22
>0241e8	0b 24 12 40 00 00 14 00 10 00 1a 3e 67 ce 05 c0
>0241f8	06 22 0b 24 02 10 90 6d 00 00 14 00 11 00 06 cd
>024208	c6 cb 10 c0 06 22 0b 24 03 10 c0 8f 00 00 12 00
>024218	12 00 d5 cd d9 cd 14 c0 06 22 03 10 44 b9 00 00
>024228	14 00 13 00 f2 cc 0c ca 10 c0 06 22 0b 24 05 10
>024238	82 4d 00 00 0e 00 14 00 04 c0 06 22 0b 24 10 40
>024248	00 00 0e 00 15 00 fe c4 06 22 05 10 fe ad 00 00
>024258	12 00 16 00 40 ce 1b c0 06 22 0b 24 05 10 04 41
>024268	00 00 0e 00 17 00 68 c6 06 22 0b 24 4a 40 00 00
>024278	0e 00 18 00 10 c6 06 22 05 10 30 94 00 00 0e 00
>024288	19 00 fd cc 19 c0 06 22 4c 6c 00 00 10 00 1a 00
>024298	e1 c5 06 22 0b 24 04 10 82 49 00 00 14 00 1b 00
>0242a8	1a 3e d8 cc d2 cc 1e c0 06 22 05 10 77 98 00 00
>0242b8	14 00 1c 00 1a 3e 21 cd 2b cb 04 c0 06 22 0b 24
>0242c8	4a 40 00 00 12 00 1d 00 1a 3e 0e c0 06 22 0b 24
>0242d8	03 10 e2 be 00 00 10 00 1e 00 02 ce 22 c0 06 22
>0242e8	0b 24 78 86 00 00 10 00 1f 00 1a 3e 10 ce f0 c1
>0242f8	06 22 a4 40 00 00 10 00 20 00 15 c0 06 22 0b 24
>024308	04 10 1b 5f 00 00 12 00 21 00 d0 cd b4 c2 06 22
>024318	0b 24 04 10 03 b1 00 00 0e 00 22 00 2a c6 06 22
>024328	01 10 cf 86 00 00 10 00 23 00 63 ce 26 cc 0c c0
>024338	06 22 f8 ba 00 00 12 00 24 00 1a 3e 7b c5 06 22
>024348	0b 24 04 10 bf 87 00 00 10 00 25 00 1a 3e 0a c0
>024358	06 22 0b 24 92 40 00 00 10 00 26 00 0c c0 06 22
>024368	0b 24 01 10 d4 b7 00 00 12 00 27 00 1a 3e 5f c6
>024378	06 22 0b 24 05 10 0a 4b 00 00 12 00 28 00 1a 3e
>024388	03 c0 06 22 0b 24 02 10 08 b4 00 00 12 00 29 00
>024398	1a 3e f8 cc 1d c0 06 22 01 10 5d ab 00 00 0e 00
>0243a8	2a 00 1a 3e 01 c0 06 22 1a 40 00 00 10 00 2b 00
>0243b8	4c cd f7 c0 06 22 04 10 3e 55 00 00 12 00 2c 00
>0243c8	1a 3e a6 cd ee c5 06 22 04 10 ea 86 00 00 14 00
>0243d8	2d 00 1a 3e 5f ce c4 cb 10 c0 06 22 04 10 f3 b9
>0243e8	00 00 10 00 2e 00 1a 3e 1c c5 06 22 0b 24 31 40
>0243f8	00 00 12 00 2f 00 5a ce c0 c2 06 22 0b 24 05 10
>024408	46 54 00 00 12 00 30 00 1a 3e b2 cd 5c c0 06 22
>024418	0b 24 7e 40 00 00 10 00 31 00 55 cd 09 c0 06 22
>024428	04 10 50 5e 00 00 12 00 32 00 1a 3e d0 c5 06 22
>024438	0b 24 04 10 fd 68 00 00 10 00 33 00 1a 3e 17 c0
>024448	06 22 01 10 23 60 00 00 12 00 34 00 1a 3e a8 cd
>024458	11 c0 06 22 02 10 b2 52 00 00 10 00 35 00 00 ce
>024468	22 c0 06 22 01 10 25 64 00 00 14 00 36 00 1a 3e
>024478	6a ce 1a c0 06 22 0b 24 01 10 39 54 00 00 12 00
>024488	37 00 14 ce 58 cd 23 c0 06 22 02 10 30 b6 00 00
>024498	12 00 38 00 1a 3e fb c4 06 22 0b 24 04 10 81 bc
>0244a8	00 00 10 00 39 00 c4 cc 38 cd 1b c0 06 22 39 40
>0244b8	00 00 12 00 3a 00 79 cd 6f cc 23 c0 06 22 05 10
>0244c8	2a a0 00 00 12 00 3b 00 1a 3e d2 cc 0a c0 06 22
>0244d8	01 10 73 9f 00 00 0e 00 3c 00 e6 c5 06 22 04 10
>0244e8	01 70 00 00 14 00 3d 00 1a 3e f7 cc 66 c4 06 22
>0244f8	0b 24 03 10 ea 7a 00 00 12 00 3e 00 1a 3e f2 cc
>024508	ad cd 09 c0 06 22 09 40 00 00 10 00 3f 00 1a 3e
>024518	b6 cd 1a c4 06 22 1c 40 00 00 16 00 40 00 1a 3e
>024528	5e cd 27 ca 13 c0 06 22 0b 24 04 10 69 ba 00 00
>024538	10 00 41 00 0c ce 6b c4 06 22 01 10 50 a2 00 00
>024548	12 00 42 00 1a 3e df c5 06 22 0b 24 01 10 c7 72
>024558	00 00 12 00 43 00 1a 3e b0 cd 98 c4 06 22 04 10
>024568	dd 72 00 00 10 00 44 00 1a 3e cc cc 4e c0 06 22
>024578	80 40 00 00 12 00 45 00 ce cd 19 c0 06 22 0b 24
>024588	04 10 bd 6c 00 00 14 00 46 00 1a 3e d1 cd 49 cc
>024598	15 c0 06 22 02 10 b3 43 00 00 12 00 47 00 1a 3e
>0245a8	62 c6 06 22 0b 24 04 10 d3 87 00 00 12 00 48 00
>0245b8	1a 3e b3 cd 14 c9 09 c0 06 22 6a 9d 00 00 14 00
>0245c8	49 00 1a 3e a6 cd 16 c0 06 22 0b 24 01 10 bf a6
>0245d8	00 00 10 00 4a 00 23 c5 06 22 0b 24 01 10 75 a6
>0245e8	00 00 0e 00 4b 00 2e c5 06 22 03 10 65 98 00 00
>0245f8	12 00 4c 00 20 cd 13 c0 06 22 0b 24 01 10 13 a2
>024608	00 00 12 00 4d 00 1a 3e fb c5 06 22 0b 24 03 10
>024618	04 88 00 00 0e 00 4e 00 d6 c4 06 22 03 10 bf 86
>024628	00 00 14 00 4f 00 fa cc 7b cc 0f c0 06 22 0b 24
>024638	01 10 16 44 00 00 12 00 50 00 63 ce 5d c6 06 22
>024648	0b 24 01 10 bc 42 00 00 0c 00 51 00 16 c0 06 22
>024658	ee 9f 00 00 14 00 52 00 1a 3e 81 cd 58 ca 02 c0
>024668	06 22 05 10 9a a5 00 00 12 00 53 00 1a 3e 11 c6
>024678	06 22 0b 24 01 10 ff b6 00 00 10 00 54 00 54 cd
>024688	10 c0 06 22 01 10 d3 79 00 00 10 00 55 00 1a 3e
>024698	01 c5 06 22 0b 24 a4 40 00 00 10 00 56 00 1a 3e
>0246a8	5e ce 1a c0 06 22 4a 9f 00 00 12 00 57 00 84 cd
>0246b8	0e c2 06 22 0b 24 04 10 8a 98 00 00 12 00 58 00
>0246c8	84 cd f3 c1 06 22 0b 24 05 10 c5 4d 00 00 10 00
>0246d8	59 00 ff cd 88 c5 06 22 05 10 40 40 00 00 10 00
>0246e8	5a 00 6b ce 85 c2 06 22 01 10 e5 76 00 00 0e 00
>0246f8	5b 00 f5 cc da c2 06 22 aa 57 00 00 10 00 5c 00
>024708	7a cd bb ca 05 c0 06 22 72 40 00 00 14 00 5d 00
>024718	1a 3e a3 cd 4a c0 06 22 0b 24 01 10 0d a2 00 00
>024728	10 00 5e 00 b5 cd 12 c0 06 22 05 10 3f ae 00 00
>024738	12 00 5f 00 af cd aa c4 06 22 0b 24 05 10 b4 41
>024748	00 00 12 00 60 00 1a 3e 4d cd 63 c0 06 22 04 10
>024758	5f b7 00 00 0e 00 61 00 1a 3e d9 c5 06 22 b2 40
>024768	00 00 12 00 62 00 1a 3e 08 c0 06 22 0b 24 03 10
>024778	c9 a1 00 00 12 00 63 00 1a 3e 84 cd 22 c0 06 22
>024788	0b 24 24 80 00 00 12 00 64 00 14 ce 35 c8 0c c0
>024798	06 22 0b 24 95 40 00 00 16 00 65 00 0b ee 12 e0
>0247a8	06 22 0a 00 06 58 57 48 58 20 42 00 00 00 0e 00
>0247b8	66 00 29 e5 06 22 04 00 01 53 00 00 1c 00 67 00
>0247c8	1a 3e d1 ed 17 e0 06 22 0e 00 0b 50 20 20 20 42
>0247d8	44 4f 51 49 54 41 00 00 12 00 68 00 b6 e5 06 22
>0247e8	08 00 04 48 20 20 49 00 00 00 1c 00 69 00 1a 3e
>0247f8	4a ed 07 e0 06 22 0e 00 0b 4d 48 50 5a 49 54 50
>024808	20 20 20 5a 00 00 16 00 6a 00 f8 e4 06 22 0c 00
>024818	09 59 49 46 4d 4d 57 59 45 43 00 00 16 00 6b 00
>024828	09 e0 06 22 0c 00 08 54 48 20 4a 41 4b 20 4f 00
>024838	00 00 0e 00 6c 00 16 e0 06 22 04 00 00 00 00 00
>024848	16 00 6d 00 15 e0 06 22 0c 00 08 59 51 58 51 4e
>024858	43 50 5a 00 00 00 10 00 6e 00 50 ed bf e3 06 22
>024868	04 00 01 4a 00 00 12 00 6f 00 3c e6 06 22 08 00
>024878	04 4d 48 20 50 00 00 00 12 00 70 00 1a 3e 8b ed
>024888	23 e0 06 22 04 00 01 49 00 00 1a 00 71 00 1a ed
>024898	f5 ec 23 e0 06 22 0c 00 08 49 4e 48 50 4e 50 5a
>0248a8	52 00 00 00 12 00 72 00 d2 ec 1d e0 06 22 06 00
>0248b8	03 58 43 5a 00 00 1a 00 73 00 56 ee d8 e0 06 22
>0248c8	0e 00 0b 58 49 20 4a 4d 4b 49 52 20 20 46 00 00
>0248d8	1a 00 74 00 1a 3e fb ed 5f e5 06 22 0c 00 09 48
>0248e8	42 20 54 53 42 20 4b 51 00 00 10 00 75 00 1a 3e
>0248f8	18 e0 06 22 04 00 00 00 00 00 16 00 76 00 1a 3e
>024908	22 e5 06 22 0a 00 06 4f 53 48 20 49 44 00 00 00
>024918	16 00 77 00 1a 3e 2f ed 22 e4 06 22 08 00 05 59
>024928	59 42 20 59 00 00 10 00 78 00 3e ee 0b e0 06 22
>024938	04 00 01 48 00 00 14 00 79 00 e2 ed 75 e1 06 22
>024948	08 00 05 58 56 4f 20 57 00 00 12 00 7a 00 1a 3e
>024958	b5 ed 67 e6 06 22 04 00 00 00 00 00 18 00 7b 00
>024968	1a 3e 28 ee 0a e0 06 22 0a 00 07 41 51 54 55 4e
>024978	4b 44 00 00 0e 00 7c 00 1a e0 06 22 04 00 00 00
>024988	00 00 16 00 7d 00 d7 e5 06 22 0c 00 09 4c 20 47
>024998	5a 47 51 4b 59 4d 00 00 18 00 7e 00 d5 ec 79 e3
>0249a8	06 22 0c 00 08 4c 45 51 43 51 4c 52 4e 00 00 00
>0249b8	12 00 7f 00 1a 3e 21 ed b6 e3 06 22 04 00 00 00
>0249c8	00 00 10 00 80 00 b9 ed 16 e4 06 22 04 00 01 47
>0249d8	00 00 12 00 81 00 a9 ed 11 e0 06 22 06 00 03 45
>0249e8	57 50 00 00 10 00 82 00 59 ee ea e2 06 22 04 00
>0249f8	01 45 00 00 18 00 83 00 09 ee 4c e4 06 22 0c 00
>024a08	08 59 44 47 4f 43 20 52 52 00 00 00 12 00 84 00
>024a18	0c e6 06 22 08 00 05 4c 20 4b 20 4e 00 00 14 00
>024a28	85 00 e1 ed 43 e1 06 22 08 00 05 43 56 42 20 53
>024a38	00 00 18 00 86 00 1a 3e 86 e5 06 22 0c 00 08 49
>024a48	42 4a 44 45 4a 4b 56 00 00 00 0e 00 87 00 f4 e4
>024a58	06 22 04 00 01 49 00 00 1c 00 88 00 1a 3e c6 ec
>024a68	69 ec 0e e0 06 22 0c 00 08 47 45 20 52 20 53 52
>024a78	56 00 00 00 16 00 89 00 1a 3e 14 e0 06 22 0a 00
>024a88	06 53 20 50 45 45 50 00 00 00 16 00 8a 00 1a 3e
>024a98	0d e0 06 22 0a 00 06 46 4e 20 42 4c 45 00 00 00
>024aa8	14 00 8b 00 0a e0 06 22 0a 00 07 54 20 57 43 4d
>024ab8	4f 55 00 00 1a 00 8c 00 09 ee 68 e2 06 22 0e 00
>024ac8	0a 4e 47 41 58 42 4f 4e 4e 4a 56 00 00 00 10 00
>024ad8	8d 00 07 e0 06 22 06 00 03 44 53 51 00 00 16 00
>024ae8	8e 00 1a 3e c9 ec 01 e0 06 22 08 00 05 4a 51 20
>024af8	20 45 00 00 1a 00 8f 00 c2 ec 8d e2 06 22 0e 00
>024b08	0a 47 53 4e 49 53 45 49 20 20 51 00 00 00 16 00
>024b18	90 00 1a 3e 23 ed 06 e5 06 22 08 00 05 41 20 44
>024b28	4b 57 00 00 0e 00 91 00 67 e6 06 22 04 00 01 55
>024b38	00 00 0e 00 92 00 fa e4 06 22 04 00 00 00 00 00
>024b48	18 00 93 00 1a 3e 36 e6 06 22 0c 00 08 4c 47 20
>024b58	20 51 4d 46 43 00 00 00 1a 00 94 00 1a 3e 01 ed
>024b68	d4 ea 17 e0 06 22 0a 00 07 4b 5a 4a 58 45 47 50
>024b78	00 00 14 00 95 00 32 ee dc e2 06 22 08 00 05 44
>024b88	41 46 48 52 00 00 1a 00 96 00 1a 3e f9 e4 06 22
>024b98	0e 00 0b 48 20 59 49 4f 55 56 20 46 4b 51 00 00
>024ba8	16 00 97 00 1a 3e 05 ee 17 e0 06 22 08 00 05 52
>024bb8	59 4f 4c 4e 00 00 0e 00 98 00 21 e5 06 22 04 00
>024bc8	01 41 00 00 14 00 99 00 24 ed 7e e4 06 22 08 00
>024bd8	05 46 4a 52 47 5a 00 00 12 00 9a 00 1a 3e 5b ee
>024be8	1c e0 06 22 04 00 00 00 00 00 12 00 9b 00 1a 3e
>024bf8	10 e0 06 22 06 00 03 47 46 4f 00 00 12 00 9c 00
>024c08	a9 ed 1a e0 06 22 06 00 02 4b 48 00 00 00 16 00
>024c18	9d 00 db ed 42 e0 06 22 0a 00 06 4a 45 45 53 58
>024c28	51 00 00 00 18 00 9e 00 37 ee 78 ed 03 e0 06 22
>024c38	0a 00 06 49 20 20 20 54 54 00 00 00 12 00 9f 00
>024c48	1a 3e 7a ed 09 e0 06 22 04 00 00 00 00 00 18 00
>024c58	a0 00 10 ee 02 e4 06 22 0c 00 09 49 4c 20 45 50
>024c68	20 45 43 47 00 00 14 00 a1 00 f6 ec 16 e0 06 22
>024c78	08 00 04 59 41 55 52 00 00 00 18 00 a2 00 05 ed
>024c88	08 e0 06 22 0c 00 08 4f 50 52 57 55 4d 20 4c 00
>024c98	00 00 12 00 a3 00 03 ed 9b eb 18 e0 06 22 04 00
>024ca8	00 00 00 00 14 00 a4 00 1a 3e b2 ed 5b e2 06 22
>024cb8	06 00 02 4c 4f 00 00 00 16 00 a5 00 1a 3e 56 ee
>024cc8	69 e3 06 22 08 00 04 56 4c 43 51 00 00 00 12 00
>024cd8	a6 00 1a 3e fb e5 06 22 06 00 02 43 5a 00 00 00
>024ce8	12 00 a7 00 60 ee 86 e1 06 22 06 00 02 48 56 00
>024cf8	00 00 1c 00 a8 00 1a 3e d3 ed a9 e1 06 22 0e 00
>024d08	0a 50 42 5a 44 54 55 59 41 4a 51 00 00 00 1a 00
>024d18	a9 00 1a 3e 6c ee 10 e0 06 22 0c 00 09 43 59 58
>024d28	50 44 41 20 46 52 00 00 14 00 aa 00 1a 3e 0f ee
>024d38	0e e0 06 22 06 00 02 54 57 00 00 00 12 00 ab 00
>024d48	1a 3e f0 ec 0a e0 06 22 04 00 00 00 00 00 1c 00
>024d58	ac 00 1a 3e 0a ee 0b e0 06 22 0e 00 0b 44 41 20
>024d68	43 43 54 58 56 20 47 5a 00 00 1a 00 ad 00 a8 ed
>024d78	19 e0 06 22 0e 00 0a 43 4e 4c 44 20 20 50 49 20
>024d88	41 00 00 00 18 00 ae 00 1a 3e 3e ee 23 e0 06 22
>024d98	0a 00 06 4b 20 54 42 55 4a 00 00 00 18 00 af 00
>024da8	b8 ed a8 e5 06 22 0c 00 09 54 51 5a 51 4a 4d 42
>024db8	47 43 00 00 16 00 b0 00 1a 3e d9 e5 06 22 0a 00
>024dc8	06 57 4c 48 49 42 50 00 00 00 14 00 b1 00 d9 ec
>024dd8	74 ec 14 e0 06 22 06 00 03 4f 4b 56 00 00 16 00
>024de8	b2 00 1a 3e 12 ee e4 e5 06 22 08 00 04 55 20 50
>024df8	53 00 00 00 18 00 b3 00 2c ee ef eb 21 e0 06 22
>024e08	0a 00 06 41 20 54 20 51 54 00 00 00 12 00 b4 00
>024e18	8a ed 09 e0 06 22 06 00 03 58 50 56 00 00 14 00
>024e28	b5 00 c3 e4 06 22 0a 00 07 4e 20 20 51 58 4d 4c
>024e38	00 00 16 00 b6 00 2b e6 06 22 0c 00 08 45 20 41
>024e48	4d 44 5a 53 55 00 00 00 14 00 b7 00 1a 3e c7 e4
>024e58	06 22 08 00 04 51 20 42 49 00 00 00 10 00 b8 00
>024e68	29 ed 1e e0 06 22 04 00 00 00 00 00 1a 00 b9 00
>024e78	68 ee 50 e8 0b e0 06 22 0c 00 08 46 46 49 5a 45
>024e88	20 47 4b 00 00 00 1a 00 ba 00 1a 3e ef ec 1a e0
>024e98	06 22 0c 00 08 54 59 49 20 4d 56 20 53 00 00 00
>024ea8	14 00 bb 00 ff ec ec e5 06 22 08 00 05 57 42 54
>024eb8	5a 58 00 00 18 00 bc 00 2e ee 94 e5 06 22 0c 00
>024ec8	08 51 20 20 55 20 50 58 53 00 00 00 18 00 bd 00
>024ed8	1a 3e 2d ed 24 e0 06 22 0a 00 06 44 57 48 44 47
>024ee8	5a 00 00 00 16 00 be 00 1a 3e 02 ed 01 e0 06 22
>024ef8	08 00 05 58 51 4c 49 57 00 00 14 00 bf 00 0b ee
>024f08	10 e0 06 22 08 00 04 4a 57 50 57 00 00 00 10 00
>024f18	c0 00 1a 3e 7a e5 06 22 04 00 00 00 00 00 16 00
>024f28	c1 00 38 ee 4a e9 13 e0 06 22 08 00 04 5a 4a 4b
>024f38	4d 00 00 00 18 00 c2 00 ce ec 07 e0 06 22 0c 00
>024f48	08 4b 57 4b 5a 20 4e 4a 46 00 00 00 18 00 c3 00
>024f58	db ed 97 e3 06 22 0c 00 08 50 20 47 49 4c 43 49
>024f68	44 00 00 00 1a 00 c4 00 1a 3e a3 ed 12 e0 06 22
>024f78	0c 00 09 45 53 4b 55 53 50 4b 20 44 00 00 14 00
>024f88	c5 00 1a 3e ce ec 0d e0 06 22 06 00 02 49 49 00
>024f98	00 00 12 00 c6 00 d7 ed 1f e0 06 22 06 00 03 55
>024fa8	51 59 00 00 10 00 c7 00 09 ee 02 e0 06 22 04 00
>024fb8	01 42 00 00 10 00 c8 00 1a 3e 19 e0 06 22 04 00
>024fc8	00 00 00 00 12 00 c9 00 1a 3e 24 ed 7e e4 06 22
>024fd8	d7 ed 1f e0 00 00 10 00 ca 00 1a 3e 55 cd 09 c0
>024fe8	06 22 c1 40 00 00 12 00 cb 00 1a 3e a6 cd 16 c0
>024ff8	06 22 0b 24 86 8d 00 00 10 00 cc 00 1a 3e 5f c6
>025008	06 22 04 10 33 96 00 00 18 00 cd 00 1a 3e 1a e0
>025018	06 22 0c 00 09 4c 20 55 56 58 4e 56 4b 46 00 00
>025028	10 00 ce 00 1a 3e 21 e5 06 22 04 00 00 00 00 00
>025038	10 00 cf 00 1a 3e d9 c5 06 22 01 10 e6 6b 00 00
>025048	12 00 d0 00 1a 3e fb ed 5f e5 06 22 04 00 00 00
>025058	00 00 14 00 d1 00 1a 3e e1 ed 43 e1 06 22 06 00
>025068	02 42 49 00 00 00 14 00 d2 00 1a 3e 81 cd 58 ca
>025078	02 c0 06 22 01 10 d6 5f 00 00 1e 00 d3 00 1a 3e
>025088	d9 ec 74 ec 14 e0 06 22 0e 00 0a 57 20 20 20 4c
>025098	20 55 47 20 53 00 00 00 14 00 d4 00 1a 3e 58 ce
>0250a8	22 c0 06 22 0b 24 05 10 db 93 00 00 10 00 d5 00
>0250b8	1a 3e df c5 06 22 02 10 0f 60 00 00 16 00 d6 00
>0250c8	1a 3e 05 ed 08 e0 06 22 08 00 05 53 52 4c 42 5a
>0250d8	00 00 12 00 d7 00 1a 3e 56 ee d8 e0 06 22 04 00
>0250e8	00 00 00 00 0e 00 d8 00 1a 3e 21 e5 06 22 7a e5
>0250f8	00 00 12 00 d9 00 1a 3e f7 cc 66 c4 06 22 63 ce
>025108	5d c6 00 00 0e 00 da 00 1a 3e 21 c5 06 22 e1 c5
>025118	00 00 12 00 db 00 1a 3e d2 ec 1d e0 06 22 0b ee
>025128	12 e0 00 00 12 00 dc 00 1a 3e 4a ed 07 e0 06 22
>025138	ff ec ec e5 00 00 12 00 dd 00 1a 3e 63 ce 26 cc
>025148	0c c0 06 22 15 a2 00 00 14 00 de 00 1a 3e c4 cc
>025158	38 cd 1b c0 06 22 84 cd f3 c1 00 00 16 00 df 00
>025168	1a 3e d9 ec 74 ec 14 e0 06 22 2c ee ef eb 21 e0
>025178	00 00 16 00 e0 00 1a 3e d2 ec 1d e0 06 22 08 00
>025188	04 42 58 57 57 00 00 00 12 00 e1 00 1a 3e b2 ed
>025198	5b e2 06 22 4a ed 07 e0 00 00 12 00 e2 00 1a 3e
>0251a8	b8 ed a8 e5 06 22 04 00 01 43 00 00 12 00 e3 00
>0251b8	1a 3e d7 ed 1f e0 06 22 8b ed 23 e0 00 00 1a 00
>0251c8	e4 00 1a 3e 4a ed 07 e0 06 22 0c 00 09 48 20 57
>0251d8	50 4e 20 4a 58 45 00 00 12 00 e5 00 1a 3e fb e5
>0251e8	06 22 68 ee 50 e8 0b e0 00 00 12 00 e6 00 1a 3e
>0251f8	24 ed 7e e4 06 22 0b ee 10 e0 00 00 1a 00 e7 00
>025208	1a 3e d3 ed a9 e1 06 22 0c 00 08 51 43 5a 52 56
>025218	20 4a 4a 00 00 00 18 00 e8 00 1a 3e 86 e5 06 22
>025228	0c 00 09 55 5a 45 4d 53 4b 4f 45 4f 00 00 12 00
>025238	e9 00 1a 3e 2f ed 22 e4 06 22 04 00 01 48 00 00
>025248	10 00 ea 00 1a 3e d6 c4 06 22 60 ce 97 c5 00 00
>025258	14 00 eb 00 1a 3e b3 cd 14 c9 09 c0 06 22 03 10
>025268	ea 5c 00 00 0e 00 ec 00 1a 3e 01 c5 06 22 10 c6
>025278	00 00 16 00 ed 00 1a 3e 03 ed 9b eb 18 e0 06 22
>025288	06 00 02 45 58 00 00 00 10 00 ee 00 1a 3e 09 ee
>025298	4c e4 06 22 7a e5 00 00 12 00 ef 00 1a 3e 15 c0
>0252a8	06 22 0b 24 02 10 7c aa 00 00 12 00 f0 00 1a 3e
>0252b8	d1 ed 17 e0 06 22 10 ee 02 e4 00 00 1c 00 f1 00
>0252c8	1a 3e 28 ee 0a e0 06 22 0e 00 0a 59 20 57 20 43
>0252d8	4a 52 43 42 54 00 00 00 14 00 f2 00 1a 3e b0 cd
>0252e8	98 c4 06 22 0b 24 02 10 1d 41 00 00 1a 00 f3 00
>0252f8	1a 3e 56 ee d8 e0 06 22 0c 00 09 47 47 56 4b 41
>025308	20 41 20 4a 00 00 12 00 f4 00 1a 3e e1 ed 43 e1
>025318	06 22 f0 ec 0a e0 00 00 12 00 f5 00 1a 3e ce ec
>025328	0d e0 06 22 04 00 00 00 00 00 10 00 f6 00 1a 3e
>025338	1c c5 06 22 6a ce 1a c0 00 00 12 00 f7 00 1a 3e
>025348	b0 cd 98 c4 06 22 05 10 68 af 00 00 10 00 f8 00
>025358	1a 3e 0a c0 06 22 55 cd 09 c0 00 00 14 00 f9 00
>025368	1a 3e 55 cd 09 c0 06 22 0b 24 03 10 7f 43 00 00
>025378	10 00 fa 00 1a 3e 05 ee 17 e0 06 22 0c e6 00 00
>025388	14 00 fb 00 1a 3e 67 ce 5e cd 16 c0 06 22 0b 24
>025398	55 40 00 00 16 00 fc 00 1a 3e 63 ce 26 cc 0c c0
>0253a8	06 22 d1 cd 49 cc 15 c0 00 00 1a 00 fd 00 1a 3e
>0253b8	3e ee 0b e0 06 22 0c 00 09 56 52 49 49 4e 20 59
>0253c8	48 44 00 00 10 00 fe 00 1a 3e 2e c5 06 22 35 ce
>0253d8	75 c1 00 00 0e 00 ff 00 1a 3e d9 c5 06 22 b5 c5
>0253e8	00 00 12 00 00 01 1a 3e 29 ed 1e e0 06 22 04 00
>0253f8	00 00 00 00 14 00 01 01 1a 3e f2 cc ad cd 09 c0
>025408	06 22 58 ce 22 c0 00 00 12 00 02 01 1a 3e 3c e6
>025418	06 22 06 00 03 47 44 55 00 00 10 00 03 01 1a 3e
>025428	e6 c5 06 22 84 cd f3 c1 00 00 12 00 04 01 1a 3e
>025438	fa e4 06 22 06 00 02 55 51 00 00 00 14 00 05 01
>025448	1a 3e f7 cc 66 c4 06 22 0b 24 01 10 2f 89 00 00
>025458	12 00 06 01 1a 3e 5b ee 1c e0 06 22 2e ee 94 e5
>025468	00 00 12 00 07 01 1a 3e 09 ee 4c e4 06 22 a9 ed
>025478	11 e0 00 00 12 00 08 01 1a 3e d6 c4 06 22 0b 24
>025488	04 10 b3 a1 00 00 12 00 09 01 1a 3e 29 ed 1e e0
>025498	06 22 b9 ed 16 e4 00 00 10 00 0a 01 1a 3e 67 ce
>0254a8	05 c0 06 22 d6 c4 00 00 12 00 0b 01 1a 3e 29 ed
>0254b8	1e e0 06 22 32 ee dc e2 00 00 0e 00 0c 01 1a 3e
>0254c8	d6 c4 06 22 58 40 00 00 10 00 0d 01 1a 3e d9 e5
>0254d8	06 22 04 00 01 4f 00 00 12 00 0e 01 1a 3e f8 cc
>0254e8	1d c0 06 22 60 ce 97 c5 00 00 14 00 0f 01 1a 3e
>0254f8	b2 ed 5b e2 06 22 68 ee 50 e8 0b e0 00 00 12 00
>025508	10 01 1a 3e 63 ce 5d c6 06 22 84 cd 22 c0 00 00
>025518	10 00 11 01 1a 3e b9 ed 16 e4 06 22 09 e0 00 00
>025528	14 00 12 01 1a 3e b9 ed 16 e4 06 22 06 00 02 57
>025538	45 00 00 00 14 00 13 01 1a 3e d5 ec 79 e3 06 22
>025548	38 ee 4a e9 13 e0 00 00 10 00 14 01 1a 3e 7b c5
>025558	06 22 fd cc 19 c0 00 00 14 00 15 01 1a 3e d9 ec
>025568	74 ec 14 e0 06 22 04 00 00 00 00 00 12 00 16 01
>025578	1a 3e af cd aa c4 06 22 01 10 8c a1 00 00 14 00
>025588	17 01 1a 3e f6 ec 16 e0 06 22 06 00 02 5a 50 00
>025598	00 00 10 00 18 01 1a 3e 7a e5 06 22 50 ed bf e3
>0255a8	00 00 12 00 19 01 1a 3e 10 ee 02 e4 06 22 24 ed
>0255b8	7e e4 00 00 0e 00 1a 01 1a 3e 10 c6 06 22 04 c0
>0255c8	00 00 12 00 1b 01 1a 3e 67 ce 5e cd 16 c0 06 22
>0255d8	62 c6 00 00 10 00 1c 01 1a 3e 7b c5 06 22 84 cd
>0255e8	22 c0 00 00 12 00 1d 01 1a 3e 0a ee 0b e0 06 22
>0255f8	60 ee 86 e1 00 00 16 00 1e 01 1a 3e 79 cd 6f cc
>025608	23 c0 06 22 23 cd e3 ca 05 c0 00 00 14 00 1f 01
>025618	1a 3e 5e ce 1a c0 06 22 5e cd 27 ca 13 c0 00 00
>025628	12 00 20 01 1a 3e 29 e5 06 22 06 00 03 55 4f 53
>025638	00 00 10 00 21 01 1a 3e d7 ed 1f e0 06 22 0d e0
>025648	00 00 14 00 22 01 1a 3e b0 cd 98 c4 06 22 c4 cc
>025658	38 cd 1b c0 00 00 12 00 23 01 1a 3e 0c ce 6b c4
>025668	06 22 4d cd 63 c0 00 00 10 00 24 01 1a 3e 03 c0
>025678	06 22 d2 cc 0a c0 00 00 14 00 25 01 1a 3e b6 cd
>025688	1a c4 06 22 0b 24 05 10 aa a7 00 00 1c 00 26 01
>025698	1a 3e d9 ec 74 ec 14 e0 06 22 0c 00 08 46 56 4b
>0256a8	43 4d 56 20 55 00 00 00 14 00 27 01 1a 3e b3 cd
>0256b8	14 c9 09 c0 06 22 05 10 ff 6b 00 00 16 00 28 01
>0256c8	1a 3e fb e5 06 22 0a 00 06 58 48 20 54 20 4c 00
>0256d8	00 00 12 00 29 01 1a 3e f0 ec 0a e0 06 22 09 ee
>0256e8	68 e2 00 00 12 00 2a 01 1a 3e b5 ed 67 e6 06 22
>0256f8	2e ee 94 e5 00 00 12 00 2b 01 1a 3e 50 ed bf e3
>025708	06 22 09 ee 4c e4 00 00 12 00 2c 01 1a 3e 0c ce
>025718	6b c4 06 22 f5 cc da c2 00 00 14 00 2d 01 1a 3e
>025728	f5 cc da c2 06 22 0b 24 03 10 db 7a 00 00 12 00
>025738	2e 01 1a 3e 7a ed 09 e0 06 22 a8 ed 19 e0 00 00
>025748	10 00 2f 01 1a 3e 67 ce 05 c0 06 22 5e 40 00 00
>025758	1a 00 30 01 1a 3e 3e ee 23 e0 06 22 0c 00 09 43
>025768	55 20 4b 45 56 55 57 47 00 00 14 00 31 01 1a 3e
>025778	84 cd 0e c2 06 22 21 cd 2b cb 04 c0 00 00 0e 00
>025788	32 01 1a 3e 08 c0 06 22 2e c5 00 00 10 00 33 01
>025798	1a 3e 36 e6 06 22 a9 ed 11 e0 00 00 12 00 34 01
>0257a8	1a 3e d5 cd d9 cd 14 c0 06 22 fe c4 00 00 14 00
>0257b8	35 01 1a 3e 68 ee 50 e8 0b e0 06 22 b2 ed 5b e2
>0257c8	00 00 10 00 36 01 1a 3e 29 e5 06 22 b2 ed 5b e2
>0257d8	00 00 10 00 37 01 1a 3e 00 ce 22 c0 06 22 e1 c5
>0257e8	00 00 14 00 38 01 1a 3e 84 cd 22 c0 06 22 c4 cc
>0257f8	38 cd 1b c0 00 00 10 00 39 01 1a 3e ce ec 0d e0
>025808	06 22 19 e0 00 00 1e 00 3a 01 1a 3e 03 ed 9b eb
>025818	18 e0 06 22 0e 00 0a 48 42 4f 56 54 4f 55 4d 20
>025828	52 00 00 00 10 00 3b 01 1a 3e 7a e5 06 22 09 ee
>025838	02 e0 00 00 12 00 3c 01 1a 3e d7 ed 1f e0 06 22
>025848	f6 ec 16 e0 00 00 14 00 3d 01 1a 3e 21 cd 2b cb
>025858	04 c0 06 22 02 ce 22 c0 00 00 0e 00 3e 01 1a 3e
>025868	b6 e5 06 22 21 e5 00 00 14 00 3f 01 1a 3e 84 cd
>025878	22 c0 06 22 0b 24 02 10 c6 62 00 00 10 00 40 01
>025888	1a 3e fb c4 06 22 55 cd 09 c0 00 00 12 00 41 01
>025898	1a 3e 23 cd e3 ca 05 c0 06 22 11 c6 00 00 14 00
>0258a8	42 01 1a 3e 40 ce 1b c0 06 22 0b 24 06 10 60 46
>0258b8	00 00 10 00 43 01 1a 3e 16 c0 06 22 4c cd f7 c0
>0258c8	00 00 16 00 44 01 1a 3e 06 cd c6 cb 10 c0 06 22
>0258d8	0b 24 03 10 b5 4d 00 00 12 00 45 01 1a 3e a8 cd
>0258e8	71 c4 06 22 03 10 c0 8b 00 00 0e 00 46 01 1a 3e
>0258f8	2a c6 06 22 20 40 00 00 10 00 47 01 1a 3e f9 e4
>025908	06 22 0f ee 0e e0 00 00 12 00 48 01 1a 3e 59 ee
>025918	ea e2 06 22 4a ed 07 e0 00 00 12 00 49 01 1a 3e
>025928	32 ee dc e2 06 22 db ed 42 e0 00 00 1a 00 4a 01
>025938	1a 3e ce ec 0d e0 06 22 0c 00 09 57 53 4d 5a 20
>025948	46 4f 51 47 00 00 10 00 4b 01 1a 3e 29 e5 06 22
>025958	05 ee 17 e0 00 00 12 00 4c 01 1a 3e 24 ed 7e e4
>025968	06 22 05 ed 08 e0 00 00 10 00 4d 01 1a 3e d5 ec
>025978	79 e3 06 22 10 e0 00 00 14 00 4e 01 1a 3e f6 ec
>025988	16 e0 06 22 06 00 02 46 47 00 00 00 10 00 4f 01
>025998	1a 3e fb c4 06 22 04 10 40 49 00 00 14 00 50 01
>0259a8	1a 3e 38 ee 4a e9 13 e0 06 22 b8 ed a8 e5 00 00
>0259b8	10 00 51 01 1a 3e 0d e0 06 22 04 00 01 48 00 00
>0259c8	10 00 52 01 1a 3e 0b ee 10 e0 06 22 b6 e5 00 00
>0259d8	12 00 53 01 1a 3e 0f ee 0e e0 06 22 0b ee 12 e0
>0259e8	00 00 18 00 54 01 1a 3e 38 ee 4a e9 13 e0 06 22
>0259f8	08 00 04 4a 4a 43 54 00 00 00 14 00 55 01 1a 3e
>025a08	09 e0 06 22 08 00 04 4d 20 42 55 00 00 00 16 00
>025a18	56 01 1a 3e 09 ee 4c e4 06 22 08 00 04 45 42 4c
>025a28	4f 00 00 00 14 00 57 01 1a 3e b3 cd 14 c9 09 c0
>025a38	06 22 0b 24 07 40 00 00 10 00 58 01 1a 3e 3c e6
>025a48	06 22 b9 ed 16 e4 00 00 12 00 59 01 1a 3e 23 ed
>025a58	06 e5 06 22 56 ee d8 e0 00 00 10 00 5a 01 1a 3e
>025a68	67 e6 06 22 04 00 00 00 00 00 12 00 5b 01 1a 3e
>025a78	f8 cc 1d c0 06 22 5a ce c0 c2 00 00 12 00 5c 01
>025a88	1a 3e 23 ed 06 e5 06 22 02 ed 01 e0 00 00 1c 00
>025a98	5d 01 1a 3e 2c ee ef eb 21 e0 06 22 0c 00 08 58
>025aa8	54 20 47 59 5a 44 58 00 00 00 14 00 5e 01 1a 3e
>025ab8	b5 ed 67 e6 06 22 c6 ec 69 ec 0e e0 00 00 12 00
>025ac8	5f 01 1a 3e 50 ed bf e3 06 22 04 00 00 00 00 00
>025ad8	10 00 60 01 1a 3e 29 e5 06 22 04 00 00 00 00 00
>025ae8	18 00 61 01 1a 3e ff ec ec e5 06 22 0a 00 07 50
>025af8	54 20 53 59 47 41 00 00 14 00 62 01 1a 3e 60 ce
>025b08	97 c5 06 22 0b 24 04 10 94 90 00 00 12 00 63 01
>025b18	1a 3e a8 cd 11 c0 06 22 0b 24 04 40 00 00 12 00
>025b28	64 01 1a 3e d0 c5 06 22 0b 24 05 10 e4 59 00 00
>025b38	0e 00 65 01 1a 3e 17 c0 06 22 1a c0 00 00 16 00
>025b48	66 01 1a 3e 19 e0 06 22 0a 00 06 45 58 20 42 54
>025b58	56 00 00 00 1a 00 67 01 1a 3e a8 ed 19 e0 06 22
>025b68	0c 00 08 4d 44 55 50 43 59 20 51 00 00 00 10 00
>025b78	68 01 1a 3e 0b ee 10 e0 06 22 19 e0 00 00 16 00
>025b88	69 01 1a 3e 5f ce c4 cb 10 c0 06 22 79 cd 6f cc
>025b98	23 c0 00 00 12 00 6a 01 1a 3e f0 ec 0a e0 06 22
>025ba8	b8 ed a8 e5 00 00 10 00 6b 01 1a 3e f6 ec 16 e0
>025bb8	06 22 f8 e4 00 00 14 00 6c 01 1a 3e a6 cd ee c5
>025bc8	06 22 0b 24 02 10 34 a9 00 00 18 00 6d 01 1a 3e
>025bd8	d3 ed a9 e1 06 22 0a 00 06 46 54 43 41 20 46 00
>025be8	00 00 14 00 6e 01 1a 3e b5 ed 67 e6 06 22 68 ee
>025bf8	50 e8 0b e0 00 00 0e 00 6f 01 1a 3e 15 c0 06 22
>025c08	1c c5 00 00 14 00 70 01 1a 3e d1 cd 49 cc 15 c0
>025c18	06 22 04 10 ae 8d 00 00 10 00 71 01 1a 3e ff ec
>025c28	ec e5 06 22 18 e0 00 00 1c 00 72 01 1a 3e d1 ed
>025c38	17 e0 06 22 0e 00 0a 4d 51 4b 4f 46 4e 20 52 56
>025c48	55 00 00 00 12 00 73 01 1a 3e ce ec 0d e0 06 22
>025c58	3e ee 23 e0 00 00 0e 00 74 01 1a 3e f4 e4 06 22
>025c68	c7 e4 00 00 14 00 75 01 1a 3e f2 cc 0c ca 10 c0
>025c78	06 22 f5 cc da c2 00 00 10 00 76 01 1a 3e 67 e6
>025c88	06 22 04 00 01 51 00 00 10 00 77 01 1a 3e c2 ec
>025c98	8d e2 06 22 7a e5 00 00 10 00 78 01 1a 3e 07 e0
>025ca8	06 22 f0 ec 0a e0 00 00 14 00 79 01 1a 3e 38 ee
>025cb8	4a e9 13 e0 06 22 02 ed 01 e0 00 00 14 00 7a 01
>025cc8	1a 3e 8a cd ff c1 06 22 f2 cc ad cd 09 c0 00 00
>025cd8	12 00 7b 01 1a 3e 0a ee 0b e0 06 22 59 ee ea e2
>025ce8	00 00 10 00 7c 01 1a 3e 68 c6 06 22 04 10 60 bc
>025cf8	00 00 14 00 7d 01 1a 3e 0c ce 6b c4 06 22 67 ce
>025d08	5e cd 16 c0 00 00 14 00 7e 01 1a 3e a8 ed 19 e0
>025d18	06 22 38 ee 4a e9 13 e0 00 00 14 00 7f 01 1a 3e
>025d28	ff cd 88 c5 06 22 c4 cc 38 cd 1b c0 00 00 16 00
>025d38	80 01 1a 3e 2f ed 22 e4 06 22 08 00 04 4e 20 20
>025d48	52 00 00 00 10 00 81 01 1a 3e 16 c0 06 22 04 10
>025d58	70 93 00 00 12 00 82 01 1a 3e 01 c0 06 22 0b 24
>025d68	04 10 25 97 00 00 14 00 83 01 1a 3e 81 cd 58 ca
>025d78	02 c0 06 22 0b 24 33 5e 00 00 10 00 84 01 1a 3e
>025d88	d9 e5 06 22 8b ed 23 e0 00 00 0e 00 85 01 1a 3e
>025d98	03 c0 06 22 13 c0 00 00 14 00 86 01 1a 3e a8 cd
>025da8	71 c4 06 22 0b 24 05 10 9e 6f 00 00 10 00 87 01
>025db8	1a 3e 5a ce c0 c2 06 22 16 c0 00 00 14 00 88 01
>025dc8	1a 3e 3e ee 0b e0 06 22 03 ed 9b eb 18 e0 00 00
>025dd8	12 00 89 01 1a 3e ce ec 0d e0 06 22 ff ec ec e5
>025de8	00 00 14 00 8a 01 1a 3e a6 cd 16 c0 06 22 0b 24
>025df8	01 10 8e 6a 00 00 10 00 8b 01 1a 3e 3e ee 0b e0
>025e08	06 22 36 e6 00 00 14 00 8c 01 1a 3e 2e ee 94 e5
>025e18	06 22 06 00 02 53 58 00 00 00 10 00 8d 01 1a 3e
>025e28	7b c5 06 22 4c cd f7 c0 00 00 12 00 8e 01 1a 3e
>025e38	8b ed 23 e0 06 22 c2 ec 8d e2 00 00 10 00 8f 01
>025e48	1a 3e 84 cd f3 c1 06 22 1a c0 00 00 14 00 90 01
>025e58	1a 3e 21 cd 2b cb 04 c0 06 22 a3 cd 4a c0 00 00
>025e68	14 00 91 01 1a 3e 7a cd bb ca 05 c0 06 22 0b 24
>025e78	f3 44 00 00 14 00 92 01 1a 3e 2d ed 24 e0 06 22
>025e88	37 ee 78 ed 03 e0 00 00 10 00 93 01 1a 3e 8a ed
>025e98	09 e0 06 22 7a e5 00 00 12 00 94 01 1a 3e 2a c6
>025ea8	06 22 f2 cc 0c ca 10 c0 00 00 0e 00 95 01 1a 3e
>025eb8	1a c0 06 22 1c c5 00 00 12 00 96 01 1a 3e f6 ec
>025ec8	16 e0 06 22 4a ed 07 e0 00 00 12 00 97 01 1a 3e
>025ed8	a8 ed 19 e0 06 22 32 ee dc e2 00 00 10 00 98 01
>025ee8	1a 3e b2 cd 5c c0 06 22 0a c0 00 00 12 00 99 01
>025ef8	1a 3e 09 ee 4c e4 06 22 7a ed 09 e0 00 00 14 00
>025f08	9a 01 1a 3e 4d cd 63 c0 06 22 0b 24 03 10 d0 b9
>025f18	00 00 1a 00 9b 01 1a 3e 21 e5 06 22 0e 00 0b 57
>025f28	20 20 20 20 4c 46 46 4e 20 42 00 00 14 00 9c 01
>025f38	1a 3e 7a cd bb ca 05 c0 06 22 02 10 2c 4c 00 00
>025f48	12 00 9d 01 1a 3e 35 ce 75 c1 06 22 0b 24 98 40
>025f58	00 00 12 00 9e 01 1a 3e 0b ee 10 e0 06 22 d3 ed
>025f68	a9 e1 00 00 1a 00 9f 01 1a 3e 09 ee 02 e0 06 22
>025f78	0c 00 09 43 42 4f 59 20 4d 20 53 5a 00 00 12 00
>025f88	a0 01 1a 3e a6 cd 16 c0 06 22 d2 cc 0a c0 00 00
>025f98	0e 00 a1 01 1a 3e 0a c0 06 22 10 c6 00 00 10 00
>025fa8	a2 01 1a 3e 10 ee 02 e4 06 22 36 e6 00 00 18 00
>025fb8	a3 01 1a 3e d1 ed 17 e0 06 22 0a 00 07 46 48 4d
>025fc8	5a 46 41 4e 00 00 14 00 a4 01 1a 3e fe cc 0b c0
>025fd8	06 22 7a cd bb ca 05 c0 00 00 12 00 a5 01 1a 3e
>025fe8	59 ee ea e2 06 22 50 ed bf e3 00 00 12 00 a6 01
>025ff8	1a 3e 0b ee 12 e0 06 22 f0 ec 0a e0 00 00 1e 00
>026008	a7 01 1a 3e 68 ee 50 e8 0b e0 06 22 0e 00 0b 51
>026018	42 20 4f 20 20 42 20 4a 4f 42 00 00 12 00 a8 01
>026028	1a 3e 2a c6 06 22 5e cd 27 ca 13 c0 00 00 14 00
>026038	a9 01 1a 3e 63 ce 26 cc 0c c0 06 22 d2 cc 0a c0
>026048	00 00 18 00 aa 01 1a 3e f9 e4 06 22 0c 00 09 41
>026058	48 20 48 50 46 4e 47 50 00 00 10 00 ab 01 1a 3e
>026068	fe c4 06 22 a8 cd 71 c4 00 00 12 00 ac 01 1a 3e
>026078	4a ed 07 e0 06 22 c2 ec 8d e2 00 00 18 00 ad 01
>026088	1a 3e c7 e4 06 22 0c 00 08 51 4d 48 20 41 4c 41
>026098	53 00 00 00 0e 00 ae 01 1a 3e 10 e0 06 22 b6 e5
>0260a8	00 00 0e 00 af 01 1a 3e d6 c4 06 22 0a c0 00 00
>0260b8	16 00 b0 01 1a 3e 14 ce 58 cd 23 c0 06 22 5f ce
>0260c8	c4 cb 10 c0 00 00 10 00 b1 01 1a 3e 21 c5 06 22
>0260d8	58 ce 22 c0 00 00 1a 00 b2 01 1a 3e b2 ed 5b e2
>0260e8	06 22 0c 00 09 58 5a 53 49 4d 4f 44 4e 51 00 00
>0260f8	12 00 b3 01 1a 3e 28 ee 0a e0 06 22 5b ee 1c e0
>026108	00 00 10 00 b4 01 1a 3e 10 c6 06 22 05 10 63 8b
>026118	00 00 12 00 b5 01 1a 3e fb ed 5f e5 06 22 3e ee
>026128	23 e0 00 00 14 00 b6 01 1a 3e 02 ce 22 c0 06 22
>026138	0b 24 04 10 c1 82 00 00 10 00 b7 01 1a 3e 4d cd
>026148	63 c0 06 22 10 c6 00 00 10 00 b8 01 1a 3e 84 cd
>026158	22 c0 06 22 d9 c5 00 00 10 00 b9 01 1a 3e 16 c0
>026168	06 22 f8 cc 1d c0 00 00 10 00 ba 01 1a 3e 8a ed
>026178	09 e0 06 22 19 e0 00 00 1a 00 bb 01 1a 3e f6 ec
>026188	16 e0 06 22 0c 00 08 4d 51 48 51 43 4e 20 44 00
>026198	00 00 12 00 bc 01 1a 3e 01 c5 06 22 f2 cc ad cd
>0261a8	09 c0 00 00 14 00 bd 01 1a 3e 21 cd 2b cb 04 c0
>0261b8	06 22 04 10 67 af 00 00 10 00 be 01 1a 3e 10 c6
>0261c8	06 22 01 10 54 7c 00 00 10 00 bf 01 1a 3e 04 c0
>0261d8	06 22 5a ce c0 c2 00 00 0e 00 c0 01 1a 3e 7a e5
>0261e8	06 22 f4 e4 00 00 18 00 c1 01 1a 3e 02 ed 01 e0
>0261f8	06 22 0a 00 07 46 5a 45 47 43 54 59 00 00 12 00
>026208	c2 01 1a 3e b5 ed 67 e6 06 22 04 00 01 57 00 00
>026218	12 00 c3 01 1a 3e 58 ce 22 c0 06 22 b0 cd 98 c4
>026228	00 00 10 00 c4 01 1a 3e fa e4 06 22 b5 ed 67 e6
>026238	00 00 10 00 c5 01 1a 3e fb c5 06 22 a8 cd 71 c4
>026248	00 00 12 00 c6 01 1a 3e 0a c0 06 22 d5 cd d9 cd
>026258	14 c0 00 00 12 00 c7 01 1a 3e 8b ed 23 e0 06 22
>026268	a9 ed 11 e0 00 00 10 00 c8 01 1a 3e e1 c5 06 22
>026278	0b 24 0c 40 00 00 0e 00 c9 01 1a 3e 0c c0 06 22
>026288	4e 40 00 00 10 00 ca 01 1a 3e 67 e6 06 22 04 00
>026298	00 00 00 00 0e 00 cb 01 1a 3e 2b e6 06 22 86 e5
>0262a8	00 00 12 00 cc 01 1a 3e f2 cc ad cd 09 c0 06 22
>0262b8	fb c4 00 00 10 00 cd 01 1a 3e 84 cd 0e c2 06 22
>0262c8	68 c6 00 00 10 00 ce 01 1a 3e e6 c5 06 22 01 10
>0262d8	58 92 00 00 14 00 cf 01 1a 3e f2 cc ad cd 09 c0
>0262e8	06 22 0b 24 b5 40 00 00 12 00 d0 01 1a 3e 35 ce
>0262f8	75 c1 06 22 6a ce 1a c0 00 00 16 00 d1 01 1a 3e
>026308	38 ce 0c cc 02 c0 06 22 0b 24 05 10 41 8a 00 00
>026318	0e 00 d2 01 1a 3e 1a e0 06 22 22 e5 00 00 14 00
>026328	d3 01 1a 3e 35 ce 75 c1 06 22 0b 24 05 10 9e ac
>026338	00 00 10 00 d4 01 1a 3e 19 e0 06 22 ef ec 1a e0
>026348	00 00 14 00 d5 01 1a 3e 06 cd c6 cb 10 c0 06 22
>026358	00 ce 22 c0 00 00 14 00 d6 01 1a 3e d5 cd d9 cd
>026368	14 c0 06 22 05 10 9d 83 00 00 12 00 d7 01 1a 3e
>026378	b9 ed 16 e4 06 22 04 00 00 00 00 00 12 00 d8 01
>026388	1a 3e 5e ce 1a c0 06 22 0b 24 b1 40 00 00 10 00
>026398	d9 01 1a 3e b5 cd 12 c0 06 22 62 c6 00 00 12 00
>0263a8	da 01 1a 3e a8 cd 11 c0 06 22 05 10 15 63 00 00
>0263b8	12 00 db 01 1a 3e 50 ed bf e3 06 22 04 00 00 00
>0263c8	00 00 14 00 dc 01 1a 3e 2c ee ef eb 21 e0 06 22
>0263d8	04 00 00 00 00 00 18 00 dd 01 1a 3e 6c ee 10 e0
>0263e8	06 22 0a 00 07 41 43 20 58 20 58 52 00 00 14 00
>0263f8	de 01 1a 3e b3 cd 14 c9 09 c0 06 22 a8 cd 11 c0
>026408	00 00 16 00 df 01 1a 3e 15 e0 06 22 0a 00 07 57
>026418	52 20 56 49 48 43 00 00 14 00 e0 01 1a 3e d1 cd
>026428	49 cc 15 c0 06 22 ce cd 19 c0 00 00 0e 00 e1 01
>026438	1a 3e 11 c6 06 22 2e 40 00 00 10 00 e2 01 1a 3e
>026448	16 e0 06 22 ce ec 07 e0 00 00 10 00 e3 01 1a 3e
>026458	18 e0 06 22 02 ed 01 e0 00 00 12 00 e4 01 1a 3e
>026468	10 c6 06 22 79 cd 6f cc 23 c0 00 00 10 00 e5 01
>026478	1a 3e a9 ed 1a e0 06 22 22 e5 00 00 12 00 e6 01
>026488	1a 3e 58 ce 22 c0 06 22 4d cd 63 c0 00 00 12 00
>026498	e7 01 1a 3e fe c4 06 22 0b 24 02 10 6c 4a 00 00
>0264a8	10 00 e8 01 1a 3e 7b c5 06 22 5a ce c0 c2 00 00
>0264b8	16 00 e9 01 1a 3e 0a e0 06 22 0a 00 07 4f 54 4a
>0264c8	59 55 55 43 00 00 12 00 ea 01 1a 3e d0 cd b4 c2
>0264d8	06 22 0b 24 99 74 00 00 10 00 eb 01 1a 3e 4d cd
>0264e8	63 c0 06 22 0c c0 00 00 10 00 ec 01 1a 3e 59 ee
>0264f8	ea e2 06 22 0d e0 00 00 12 00 ed 01 1a 3e 00 ce
>026508	22 c0 06 22 4d cd 63 c0 00 00 12 00 ee 01 1a 3e
>026518	54 cd 10 c0 06 22 4c cd f7 c0 00 00 14 00 ef 01
>026528	1a 3e 5a ce c0 c2 06 22 81 cd 58 ca 02 c0 00 00
>026538	10 00 f0 01 1a 3e 13 c0 06 22 03 10 5e 5c 00 00
>026548	12 00 f1 01 1a 3e f6 ec 16 e0 06 22 2e ee 94 e5
>026558	00 00 12 00 f2 01 1a 3e c2 ec 8d e2 06 22 b8 ed
>026568	a8 e5 00 00 12 00 f3 01 1a 3e fd cc 19 c0 06 22
>026578	0c ce 6b c4 00 00 14 00 f4 01 1a 3e 01 ed d4 ea
>026588	17 e0 06 22 21 ed b6 e3 00 00 10 00 f5 01 1a 3e
>026598	f8 cc 1d c0 06 22 2e c5 00 00 14 00 f6 01 1a 3e
>0265a8	67 ce 5e cd 16 c0 06 22 f8 cc 1d c0 00 00 0e 00
>0265b8	f7 01 1a 3e 0e c0 06 22 2a c6 00 00 0e 00 f8 01
>0265c8	1a 3e 7a e5 06 22 19 e0 00 00 10 00 f9 01 1a 3e
>0265d8	02 ce 22 c0 06 22 fe c4 00 00 0e 00 fa 01 1a 3e
>0265e8	0e c0 06 22 73 40 00 00 10 00 fb 01 1a 3e 68 c6
>0265f8	06 22 55 cd 09 c0 00 00 16 00 fc 01 1a 3e 05 ed
>026608	08 e0 06 22 08 00 04 53 49 55 42 00 00 00 14 00
>026618	fd 01 1a 3e 63 ce 26 cc 0c c0 06 22 01 10 33 a2
>026628	00 00 10 00 fe 01 1a 3e e1 c5 06 22 f7 cc 66 c4
>026638	00 00 10 00 ff 01 1a 3e 2e c5 06 22 0b 24 05 40
>026648	00 00 16 00 00 02 1a 3e 3c e6 06 22 0a 00 06 42
>026658	4c 20 42 51 51 00 00 00 12 00 01 02 1a 3e f7 cc
>026668	66 c4 06 22 05 10 c2 52 00 00 12 00 02 02 1a 3e
>026678	21 ed b6 e3 06 22 04 00 01 49 00 00 10 00 03 02
>026688	1a 3e b6 e5 06 22 04 00 00 00 00 00 12 00 04 02
>026698	1a 3e 12 ee e4 e5 06 22 04 00 00 00 00 00 12 00
>0266a8	05 02 1a 3e f8 cc 1d c0 06 22 10 ce f0 c1 00 00
>0266b8	12 00 06 02 1a 3e 20 cd 13 c0 06 22 03 10 82 93
>0266c8	00 00 12 00 07 02 1a 3e b2 cd 5c c0 06 22 01 10
>0266d8	c8 84 00 00 12 00 08 02 1a 3e 60 ce 97 c5 06 22
>0266e8	0b 24 80 40 00 00 10 00 09 02 1a 3e 21 e5 06 22
>0266f8	09 ee 4c e4 00 00 14 00 0a 02 1a 3e 09 e0 06 22
>026708	08 00 05 47 20 49 20 54 00 00 12 00 0b 02 1a 3e
>026718	6c ee 10 e0 06 22 21 ed b6 e3 00 00 12 00 0c 02
>026728	1a 3e 60 ce 97 c5 06 22 63 ce 5d c6 00 00 10 00
>026738	0d 02 1a 3e 10 c6 06 22 a6 cd ee c5 00 00 12 00
>026748	0e 02 1a 3e 5b ee 1c e0 06 22 f0 ec 0a e0 00 00
>026758	16 00 0f 02 1a 3e fa e4 06 22 0a 00 06 50 59 20
>026768	41 20 43 00 00 00 12 00 10 02 1a 3e c2 ec 8d e2
>026778	06 22 0b ee 12 e0 00 00 12 00 11 02 1a 3e 35 ce
>026788	75 c1 06 22 0b 24 9e 40 00 00 18 00 12 02 1a 3e
>026798	5b ee 1c e0 06 22 0a 00 06 55 4d 4a 46 43 54 00
>0267a8	00 00 12 00 13 02 1a 3e b2 ed 5b e2 06 22 04 00
>0267b8	01 49 00 00 12 00 14 02 1a 3e 58 ce 22 c0 06 22
>0267c8	54 cd 10 c0 00 00 16 00 15 02 1a 3e 63 ce 26 cc
>0267d8	0c c0 06 22 7a cd bb ca 05 c0 00 00 1c 00 16 02
>0267e8	1a 3e d2 ec 1d e0 06 22 0e 00 0a 51 20 48 49 56
>0267f8	56 48 52 54 4b 00 00 00 14 00 17 02 1a 3e 60 ee
>026808	86 e1 06 22 06 00 02 54 41 00 00 00 12 00 18 02
>026818	1a 3e 00 ce 22 c0 06 22 8a cd ff c1 00 00 12 00
>026828	19 02 1a 3e c4 cc 38 cd 1b c0 06 22 0a 40 00 00
>026838	14 00 1a 02 1a 3e a3 cd 4a c0 06 22 b3 cd 14 c9
>026848	09 c0 00 00 12 00 1b 02 1a 3e 0c ce 6b c4 06 22
>026858	35 ce 75 c1 00 00 10 00 1c 02 1a 3e 21 c5 06 22
>026868	a6 cd ee c5 00 00 0e 00 1d 02 1a 3e 67 e6 06 22
>026878	fa e4 00 00 12 00 1e 02 1a 3e d2 cc 0a c0 06 22
>026888	04 10 ef ae 00 00 16 00 1f 02 1a 3e d1 ed 17 e0
>026898	06 22 08 00 05 4f 54 43 43 48 00 00 12 00 20 02
>0268a8	1a 3e 67 ce 05 c0 06 22 0b 24 6a 40 00 00 10 00
>0268b8	21 02 1a 3e d9 e5 06 22 d2 ec 1d e0 00 00 12 00
>0268c8	22 02 1a 3e db ed 97 e3 06 22 d3 ed a9 e1 00 00
>0268d8	12 00 23 02 1a 3e 40 ce 1b c0 06 22 5e ce 1a c0
>0268e8	00 00 10 00 24 02 1a 3e b5 cd 12 c0 06 22 21 c5
>0268f8	00 00 10 00 25 02 1a 3e 40 ce 1b c0 06 22 26 40
>026908	00 00 12 00 26 02 1a 3e d1 ed 17 e0 06 22 db ed
>026918	97 e3 00 00 18 00 27 02 1a 3e 14 e0 06 22 0c 00
>026928	09 4c 54 4d 20 4d 51 44 20 4d 00 00 12 00 28 02
>026938	1a 3e e1 ed 43 e1 06 22 04 00 01 50 00 00 14 00
>026948	29 02 1a 3e d2 cc 0a c0 06 22 79 cd 6f cc 23 c0
>026958	00 00 12 00 2a 02 1a 3e 02 ed 01 e0 06 22 56 ee
>026968	69 e3 00 00 12 00 2b 02 1a 3e f2 cc ad cd 09 c0
>026978	06 22 01 c0 00 00 14 00 2c 02 1a 3e 84 cd f3 c1
>026988	06 22 0b 24 05 10 29 9b 00 00 12 00 2d 02 1a 3e
>026998	a8 cd 11 c0 06 22 04 10 45 a7 00 00 10 00 2e 02
>0269a8	1a 3e 01 c0 06 22 ce cd 19 c0 00 00 14 00 2f 02
>0269b8	1a 3e b3 cd 14 c9 09 c0 06 22 01 10 66 49 00 00
>0269c8	10 00 30 02 1a 3e 5e ce 1a c0 06 22 02 40 00 00
>0269d8	10 00 31 02 1a 3e ff cd 88 c5 06 22 62 c6 00 00
>0269e8	12 00 32 02 1a 3e 01 c5 06 22 0b 24 02 10 6e 5c
>0269f8	00 00 12 00 33 02 1a 3e 62 c6 06 22 0b 24 02 10
>026a08	1a b1 00 00 16 00 34 02 1a 3e 09 e0 06 22 0a 00
>026a18	06 58 59 59 4d 4c 4c 00 00 00 1a 00 35 02 1a 3e
>026a28	32 ee dc e2 06 22 0c 00 08 49 57 42 4a 51 55 51
>026a38	4d 00 00 00 12 00 36 02 1a 3e 38 ee 4a e9 13 e0
>026a48	06 22 f8 e4 00 00 10 00 37 02 1a 3e 20 cd 13 c0
>026a58	06 22 08 c0 00 00 12 00 38 02 1a 3e c2 ec 8d e2
>026a68	06 22 21 ed b6 e3 00 00 10 00 39 02 1a 3e fe cc
>026a78	0b c0 06 22 d9 b1 00 00 12 00 3a 02 1a 3e b2 cd
>026a88	5c c0 06 22 84 cd 0e c2 00 00 1c 00 3b 02 1a 3e
>026a98	2f ed 22 e4 06 22 0e 00 0a 56 20 4a 42 20 57 4c
>026aa8	47 45 55 00 00 00 12 00 3c 02 1a 3e 3e ee 23 e0
>026ab8	06 22 32 ee dc e2 00 00 14 00 3d 02 1a 3e b9 ed
>026ac8	16 e4 06 22 d9 ec 74 ec 14 e0 00 00 0e 00 3e 02
>026ad8	1a 3e 16 e0 06 22 67 e6 00 00 14 00 3f 02 1a 3e
>026ae8	84 cd f3 c1 06 22 0b 24 01 10 05 bf 00 00 14 00
>026af8	40 02 1a 3e b3 cd 14 c9 09 c0 06 22 84 cd 0e c2
>026b08	00 00 12 00 41 02 1a 3e 36 e6 06 22 2c ee ef eb
>026b18	21 e0 00 00 14 00 42 02 1a 3e 7a e5 06 22 08 00
>026b28	05 57 4d 4d 4e 41 00 00 16 00 43 02 1a 3e 0d e0
>026b38	06 22 0a 00 07 54 20 4f 20 20 52 59 00 00 16 00
>026b48	44 02 1a 3e c6 ec 69 ec 0e e0 06 22 06 00 03 57
>026b58	20 57 00 00 12 00 45 02 1a 3e a8 cd 11 c0 06 22
>026b68	0b 24 50 9c 00 00 12 00 46 02 1a 3e 09 ee 02 e0
>026b78	06 22 f6 ec 16 e0 00 00 12 00 47 02 1a 3e a6 cd
>026b88	ee c5 06 22 0b 24 0c af 00 00 12 00 48 02 1a 3e
>026b98	40 ce 1b c0 06 22 02 10 d2 4d 00 00 10 00 49 02
>026ba8	1a 3e cc cc 4e c0 06 22 28 40 00 00 12 00 4a 02
>026bb8	1a 3e 56 ee 69 e3 06 22 a9 ed 11 e0 00 00 0e 00
>026bc8	4b 02 1a 3e 10 e0 06 22 2b e6 00 00 14 00 4c 02
>026bd8	1a 3e 1a ed f5 ec 23 e0 06 22 04 00 00 00 00 00
>026be8	10 00 4d 02 1a 3e d9 c5 06 22 0b 24 0b 53 00 00
>026bf8	12 00 4e 02 1a 3e f7 cc 66 c4 06 22 0b 24 65 40
>026c08	00 00 12 00 4f 02 1a 3e 35 ce 75 c1 06 22 0b 24
>026c18	7f 40 00 00 12 00 50 02 1a 3e 56 ee d8 e0 06 22
>026c28	0b ee 10 e0 00 00 10 00 51 02 1a 3e 7b c5 06 22
>026c38	0b 24 38 40 00 00 12 00 52 02 1a 3e ff cd 88 c5
>026c48	06 22 03 10 d8 66 00 00 0e 00 53 02 1a 3e 0c c0
>026c58	06 22 fe c4 00 00 14 00 54 02 1a 3e c9 ec 01 e0
>026c68	06 22 06 00 03 51 57 41 00 00 10 00 55 02 1a 3e
>026c78	b2 ed 5b e2 06 22 07 e0 00 00 10 00 56 02 1a 3e
>026c88	09 e0 06 22 04 00 00 00 00 00 12 00 57 02 1a 3e
>026c98	cc cc 4e c0 06 22 02 10 84 87 00 00 12 00 58 02
>026ca8	1a 3e 5a ce c0 c2 06 22 05 10 dd 46 00 00 12 00
>026cb8	59 02 1a 3e 21 ed b6 e3 06 22 29 ed 1e e0 00 00
>026cc8	16 00 5a 02 1a 3e 0f ee 0e e0 06 22 08 00 04 5a
>026cd8	55 20 43 00 00 00 14 00 5b 02 1a 3e d1 ed 17 e0
>026ce8	06 22 03 ed 9b eb 18 e0 00 00 10 00 5c 02 1a 3e
>026cf8	2a c6 06 22 84 cd 0e c2 00 00 12 00 5d 02 1a 3e
>026d08	f9 e4 06 22 06 00 03 42 4b 51 00 00 12 00 5e 02
>026d18	1a 3e b0 cd 98 c4 06 22 54 cd 10 c0 00 00 0e 00
>026d28	5f 02 1a 3e 86 e5 06 22 10 e0 00 00 0e 00 60 02
>026d38	1a 3e fe c4 06 22 01 c5 00 00 12 00 61 02 1a 3e
>026d48	d6 c4 06 22 0b 24 05 10 90 74 00 00 14 00 62 02
>026d58	1a 3e 8b ed 23 e0 06 22 1a ed f5 ec 23 e0 00 00
>026d68	0e 00 63 02 1a 3e 1c c5 06 22 fe c4 00 00 12 00
>026d78	64 02 1a 3e 11 c6 06 22 0b 24 04 10 a9 8c 00 00
>026d88	14 00 65 02 1a 3e 2d ed 24 e0 06 22 06 00 03 5a
>026d98	4f 41 00 00 1a 00 66 02 1a 3e b5 ed 67 e6 06 22
>026da8	0c 00 08 50 20 48 53 44 53 4d 50 00 00 00 16 00
>026db8	67 02 1a 3e 2c ee ef eb 21 e0 06 22 06 00 03 48
>026dc8	4b 4b 00 00 1c 00 68 02 1a 3e fb ed 5f e5 06 22
>026dd8	0e 00 0b 42 53 50 20 20 4c 42 42 4e 57 4f 00 00
>026de8	12 00 69 02 1a 3e fd cc 19 c0 06 22 03 10 bf 51
>026df8	00 00 10 00 6a 02 1a 3e d1 ed 17 e0 06 22 b6 e5
>026e08	00 00 12 00 6b 02 1a 3e c9 ec 01 e0 06 22 0b ee
>026e18	10 e0 00 00 10 00 6c 02 1a 3e 14 e0 06 22 12 ee
>026e28	e4 e5 00 00 10 00 6d 02 1a 3e fa e4 06 22 04 00
>026e38	01 42 00 00 12 00 6e 02 1a 3e 3e ee 23 e0 06 22
>026e48	db ed 42 e0 00 00 10 00 6f 02 1a 3e 56 ee 69 e3
>026e58	06 22 c7 e4 00 00 16 00 70 02 1a 3e fa cc 7b cc
>026e68	0f c0 06 22 f2 cc ad cd 09 c0 00 00 10 00 71 02
>026e78	1a 3e 09 ee 02 e0 06 22 c3 e4 00 00 12 00 72 02
>026e88	1a 3e 21 cd 2b cb 04 c0 06 22 92 40 00 00 1a 00
>026e98	73 02 1a 3e 86 e5 06 22 0e 00 0a 42 59 4f 42 58
>026ea8	51 54 50 51 53 00 00 00 12 00 74 02 1a 3e 1a c0
>026eb8	06 22 d1 cd 49 cc 15 c0 00 00 12 00 75 02 1a 3e
>026ec8	32 ee dc e2 06 22 05 ed 08 e0 00 00 1a 00 76 02
>026ed8	1a 3e 2f ed 22 e4 06 22 0c 00 08 46 41 4c 43 4e
>026ee8	45 20 4d 00 00 00 12 00 77 02 1a 3e 05 ee 17 e0
>026ef8	06 22 b9 ed 16 e4 00 00 12 00 78 02 1a 3e 63 ce
>026f08	5d c6 06 22 04 10 94 4d 00 00 10 00 79 02 1a 3e
>026f18	e2 ed 75 e1 06 22 fb e5 00 00 0e 00 7a 02 1a 3e
>026f28	fe c4 06 22 31 40 00 00 12 00 7b 02 1a 3e 09 ee
>026f38	02 e0 06 22 b2 ed 5b e2 00 00 1a 00 7c 02 1a 3e
>026f48	f4 e4 06 22 0e 00 0b 50 4b 48 48 48 20 4f 4d 57
>026f58	20 4f 00 00 18 00 7d 02 1a 3e 0d e0 06 22 0c 00
>026f68	09 52 4b 43 53 44 46 4a 55 53 00 00 14 00 7e 02
>026f78	1a 3e d3 ed a9 e1 06 22 03 ed 9b eb 18 e0 00 00
>026f88	10 00 7f 02 1a 3e 10 ce f0 c1 06 22 01 c5 00 00
>026f98	12 00 80 02 1a 3e cc cc 4e c0 06 22 03 10 22 5e
>026fa8	00 00 1a 00 81 02 1a 3e 68 ee 50 e8 0b e0 06 22
>026fb8	0a 00 07 46 4a 4e 49 53 54 51 00 00 10 00 82 02
>026fc8	1a 3e f7 cc 66 c4 06 22 e1 c5 00 00 12 00 83 02
>026fd8	1a 3e d0 cd b4 c2 06 22 01 10 d7 46 00 00 14 00
>026fe8	84 02 1a 3e d7 ed 1f e0 06 22 06 00 03 49 20 4d
>026ff8	00 00 10 00 85 02 1a 3e ce ec 07 e0 06 22 36 e6
>027008	00 00 12 00 86 02 1a 3e f6 ec 16 e0 06 22 fb ed
>027018	5f e5 00 00 10 00 87 02 1a 3e ce cd 19 c0 06 22
>027028	10 c6 00 00 12 00 88 02 1a 3e 16 c0 06 22 0b 24
>027038	02 10 a8 53 00 00 12 00 89 02 1a 3e d5 cd d9 cd
>027048	14 c0 06 22 d6 c4 00 00 12 00 8a 02 1a 3e 0b ee
>027058	10 e0 06 22 ce ec 07 e0 00 00 14 00 8b 02 1a 3e
>027068	f2 cc ad cd 09 c0 06 22 b6 cd 1a c4 00 00 14 00
>027078	8c 02 1a 3e 06 cd c6 cb 10 c0 06 22 84 cd 22 c0
>027088	00 00 12 00 8d 02 1a 3e 54 cd 10 c0 06 22 04 10
>027098	03 9d 00 00 12 00 8e 02 1a 3e 2d ed 24 e0 06 22
>0270a8	d3 ed a9 e1 00 00 12 00 8f 02 1a 3e df c5 06 22
>0270b8	0b 24 04 10 c7 8f 00 00 12 00 90 02 1a 3e 60 ce
>0270c8	97 c5 06 22 cc cc 4e c0 00 00 1a 00 91 02 1a 3e
>0270d8	fb e5 06 22 0e 00 0a 44 20 51 50 20 50 43 4d 20
>0270e8	48 00 00 00 0e 00 92 02 1a 3e 1a c0 06 22 75 40
>0270f8	00 00 12 00 93 02 1a 3e 20 cd 13 c0 06 22 04 10
>027108	14 7f 00 00 10 00 94 02 1a 3e b8 ed a8 e5 06 22
>027118	07 e0 00 00 14 00 95 02 1a 3e 40 ce 1b c0 06 22
>027128	0b 24 02 10 52 6f 00 00 12 00 96 02 1a 3e 81 cd
>027138	58 ca 02 c0 06 22 68 c6 00 00 12 00 97 02 1a 3e
>027148	58 ce 22 c0 06 22 04 10 79 45 00 00 18 00 98 02
>027158	1a 3e a9 ed 11 e0 06 22 0a 00 07 4f 20 53 58 51
>027168	50 48 00 00 12 00 99 02 1a 3e b8 ed a8 e5 06 22
>027178	02 ed 01 e0 00 00 10 00 9a 02 1a 3e d6 c4 06 22
>027188	0b 24 2b 40 00 00 10 00 9b 02 1a 3e 0b ee 10 e0
>027198	06 22 09 e0 00 00 14 00 9c 02 1a 3e 84 cd f3 c1
>0271a8	06 22 0b 24 02 10 30 a5 00 00 12 00 9d 02 1a 3e
>0271b8	40 ce 1b c0 06 22 0b 24 45 40 00 00 10 00 9e 02
>0271c8	1a 3e 5e ce 1a c0 06 22 2e c5 00 00 14 00 9f 02
>0271d8	1a 3e 81 cd 58 ca 02 c0 06 22 84 cd 22 c0 00 00
>0271e8	12 00 a0 02 1a 3e 0c ce 6b c4 06 22 0b 24 2b 40
>0271f8	00 00 10 00 a1 02 1a 3e 36 e6 06 22 10 ee 02 e4
>027208	00 00 12 00 a2 02 1a 3e fb ed 5f e5 06 22 0b ee
>027218	10 e0 00 00 12 00 a3 02 1a 3e 0b ee 10 e0 06 22
>027228	f0 ec 0a e0 00 00 16 00 a4 02 1a 3e fa cc 7b cc
>027238	0f c0 06 22 5f ce c4 cb 10 c0 00 00 0e 00 a5 02
>027248	1a 3e d7 e5 06 22 fb e5 00 00 12 00 a6 02 1a 3e
>027258	02 ed 01 e0 06 22 04 00 01 44 00 00 12 00 a7 02
>027268	1a 3e a8 cd 11 c0 06 22 67 ce 05 c0 00 00 12 00
>027278	a8 02 1a 3e 84 cd 0e c2 06 22 a3 cd 4a c0 00 00
>027288	1a 00 a9 02 1a 3e f9 e4 06 22 0e 00 0a 58 20 41
>027298	42 20 4d 45 4c 42 53 00 00 00 12 00 aa 02 1a 3e
>0272a8	c6 ec 69 ec 0e e0 06 22 67 e6 00 00 12 00 ab 02
>0272b8	1a 3e 20 cd 13 c0 06 22 02 10 fa bb 00 00 12 00
>0272c8	ac 02 1a 3e 20 cd 13 c0 06 22 20 cd 13 c0 00 00
>0272d8	18 00 ad 02 1a 3e 7a ed 09 e0 06 22 0a 00 07 44
>0272e8	57 20 47 41 57 55 00 00 10 00 ae 02 1a 3e 14 e0
>0272f8	06 22 04 00 00 00 00 00 12 00 af 02 1a 3e 5e ce
>027308	1a c0 06 22 03 10 b6 ad 00 00 10 00 b0 02 1a 3e
>027318	df c5 06 22 01 10 87 bf 00 00 12 00 b1 02 1a 3e
>027328	63 ce 5d c6 06 22 0b 24 1f 99 00 00 14 00 b2 02
>027338	1a 3e db ed 42 e0 06 22 03 ed 9b eb 18 e0 00 00
>027348	12 00 b3 02 1a 3e a3 cd 4a c0 06 22 67 ce 05 c0
>027358	00 00 14 00 b4 02 1a 3e 5f ce c4 cb 10 c0 06 22
>027368	02 10 b3 5a 00 00 12 00 b5 02 1a 3e 60 ee 86 e1
>027378	06 22 6c ee 10 e0 00 00 14 00 b6 02 1a 3e 38 ee
>027388	4a e9 13 e0 06 22 3e ee 0b e0 00 00 14 00 b7 02
>027398	1a 3e a9 ed 1a e0 06 22 06 00 03 51 5a 4d 00 00
>0273a8	10 00 b8 02 1a 3e 07 e0 06 22 04 00 01 5a 00 00
>0273b8	12 00 b9 02 1a 3e 19 e0 06 22 06 00 03 50 20 4b
>0273c8	00 00 10 00 ba 02 1a 3e 0c c0 06 22 0b 24 c0 40
>0273d8	00 00 10 00 bb 02 1a 3e 5f c6 06 22 d0 cd b4 c2
>0273e8	00 00 0e 00 bc 02 1a 3e 1a c0 06 22 03 76 00 00
>0273f8	12 00 bd 02 1a 3e f7 cc 66 c4 06 22 0b 24 14 40
>027408	00 00 12 00 be 02 1a 3e 0f ee 0e e0 06 22 04 00
>027418	01 4e 00 00 0e 00 bf 02 1a 3e 08 c0 06 22 a3 40
>027428	00 00 0e 00 c0 02 1a 3e 23 c5 06 22 01 c5 00 00
>027438	12 00 c1 02 1a 3e 29 e5 06 22 06 00 02 54 49 00
>027448	00 00 14 00 c2 02 1a 3e 37 ee 78 ed 03 e0 06 22
>027458	21 ed b6 e3 00 00 14 00 c3 02 1a 3e 0b ee 10 e0
>027468	06 22 1a ed f5 ec 23 e0 00 00 10 00 c4 02 1a 3e
>027478	b5 cd 12 c0 06 22 0e c0 00 00 12 00 c5 02 1a 3e
>027488	2d ed 24 e0 06 22 04 00 01 4a 00 00 10 00 c6 02
>027498	1a 3e 7a ed 09 e0 06 22 15 e0 00 00 10 00 c7 02
>0274a8	1a 3e 54 cd 10 c0 06 22 03 c0 00 00 16 00 c8 02
>0274b8	1a 3e 5f ce c4 cb 10 c0 06 22 0b 24 04 10 70 be
>0274c8	00 00 10 00 c9 02 1a 3e a8 cd 71 c4 06 22 03 c0
>0274d8	00 00 12 00 ca 02 1a 3e db ed 97 e3 06 22 ef ec
>0274e8	1a e0 00 00 10 00 cb 02 1a 3e 1a e0 06 22 59 ee
>0274f8	ea e2 00 00 1a 00 cc 02 1a 3e a3 ed 12 e0 06 22
>027508	0c 00 08 51 48 56 5a 43 52 55 54 00 00 00 12 00
>027518	cd 02 1a 3e 01 ce 18 c0 06 22 ce cd 19 c0 00 00
>027528	12 00 ce 02 1a 3e 20 cd 13 c0 06 22 0b 24 95 40
>027538	00 00 12 00 cf 02 1a 3e 5f c6 06 22 0b 24 05 10
>027548	a6 47 00 00 12 00 d0 02 1a 3e e6 c5 06 22 0b 24
>027558	04 10 4a b9 00 00 12 00 d1 02 1a 3e fb c5 06 22
>027568	0b 24 05 10 96 84 00 00 16 00 d2 02 1a 3e 2b e6
>027578	06 22 0a 00 07 47 51 4e 43 55 58 4c 00 00 14 00
>027588	d3 02 1a 3e 7a cd bb ca 05 c0 06 22 67 ce 05 c0
>027598	00 00 10 00 d4 02 1a 3e d9 c5 06 22 b0 cd 98 c4
>0275a8	00 00 12 00 d5 02 1a 3e 7b c5 06 22 23 cd e3 ca
>0275b8	05 c0 00 00 10 00 d6 02 1a 3e 54 cd 10 c0 06 22
>0275c8	58 40 00 00 12 00 d7 02 1a 3e 7b c5 06 22 d1 cd
>0275d8	49 cc 15 c0 00 00 14 00 d8 02 1a 3e 67 ce 5e cd
>0275e8	16 c0 06 22 84 cd f3 c1 00 00 12 00 d9 02 1a 3e
>0275f8	a8 ed 19 e0 06 22 56 ee 69 e3 00 00 12 00 da 02
>027608	1a 3e 67 ce 5e cd 16 c0 06 22 df c5 00 00 10 00
>027618	db 02 1a 3e f7 cc 66 c4 06 22 61 40 00 00 14 00
>027628	dc 02 1a 3e f7 cc 66 c4 06 22 63 ce 26 cc 0c c0
>027638	00 00 10 00 dd 02 1a 3e 17 c0 06 22 01 ce 18 c0
>027648	00 00 10 00 de 02 1a 3e 18 e0 06 22 04 00 00 00
>027658	00 00 14 00 df 02 1a 3e c4 cc 38 cd 1b c0 06 22
>027668	04 10 9d 63 00 00 10 00 e0 02 1a 3e 18 e0 06 22
>027678	f6 ec 16 e0 00 00 14 00 e1 02 1a 3e 67 ce 05 c0
>027688	06 22 0b 24 02 10 12 a6 00 00 14 00 e2 02 1a 3e
>027698	10 ce f0 c1 06 22 0b 24 04 10 b9 b9 00 00 1c 00
>0276a8	e3 02 1a 3e 24 ed 7e e4 06 22 0e 00 0b 51 53 41
>0276b8	50 4e 20 4d 49 4a 20 5a 00 00 14 00 e4 02 1a 3e
>0276c8	02 ed 01 e0 06 22 37 ee 78 ed 03 e0 00 00 18 00
>0276d8	e5 02 1a 3e d7 ed 1f e0 06 22 0a 00 07 50 59 52
>0276e8	46 4f 47 49 00 00 10 00 e6 02 1a 3e 1a c0 06 22
>0276f8	0b 24 eb ab 00 00 14 00 e7 02 1a 3e 5e ce 1a c0
>027708	06 22 0b 24 03 10 84 b2 00 00 12 00 e8 02 1a 3e
>027718	20 cd 13 c0 06 22 0b 24 a1 40 00 00 16 00 e9 02
>027728	1a 3e 06 cd c6 cb 10 c0 06 22 0b 24 04 10 17 57
>027738	00 00 10 00 ea 02 1a 3e d0 c5 06 22 0b 24 c7 40
>027748	00 00 14 00 eb 02 1a 3e 84 cd 22 c0 06 22 0b 24
>027758	04 10 c5 8c 00 00 10 00 ec 02 1a 3e 0c c0 06 22
>027768	af cd aa c4 00 00 12 00 ed 02 1a 3e f5 cc da c2
>027778	06 22 05 10 ab 73 00 00 1c 00 ee 02 1a 3e 56 ee
>027788	d8 e0 06 22 0e 00 0a 4a 4d 20 53 20 4c 55 46 4b
>027798	58 00 00 00 12 00 ef 02 1a 3e 16 e0 06 22 06 00
>0277a8	02 4d 4f 00 00 00 12 00 f0 02 1a 3e 2f ed 22 e4
>0277b8	06 22 04 00 01 47 00 00 14 00 f1 02 1a 3e f2 cc
>0277c8	ad cd 09 c0 06 22 01 10 62 a9 00 00 18 00 f2 02
>0277d8	1a 3e a9 ed 1a e0 06 22 0a 00 06 4b 56 48 59 20
>0277e8	57 00 00 00 14 00 f3 02 1a 3e b2 ed 5b e2 06 22
>0277f8	06 00 03 4b 42 50 00 00 12 00 f4 02 1a 3e cc cc
>027808	4e c0 06 22 67 ce 05 c0 00 00 14 00 f5 02 1a 3e
>027818	c4 cc 38 cd 1b c0 06 22 20 cd 13 c0 00 00 16 00
>027828	f6 02 1a 3e 29 ed 1e e0 06 22 08 00 04 4b 4e 42
>027838	45 00 00 00 16 00 f7 02 1a 3e c4 cc 38 cd 1b c0
>027848	06 22 0b 24 01 10 e1 a8 00 00 18 00 f8 02 1a 3e
>027858	37 ee 78 ed 03 e0 06 22 08 00 04 5a 42 46 57 00
>027868	00 00 0e 00 f9 02 1a 3e 0a e0 06 22 f9 e4 00 00
>027878	14 00 fa 02 1a 3e fe cc 0b c0 06 22 0b 24 05 10
>027888	d6 a5 00 00 10 00 fb 02 1a 3e b6 e5 06 22 2e ee
>027898	94 e5 00 00 1a 00 fc 02 1a 3e 37 ee 78 ed 03 e0
>0278a8	06 22 0a 00 07 56 58 4e 54 20 4f 42 00 00 12 00
>0278b8	fd 02 1a 3e 6c ee 10 e0 06 22 04 00 01 55 00 00
>0278c8	0e 00 fe 02 1a 3e 15 c0 06 22 03 c0 00 00 12 00
>0278d8	ff 02 1a 3e 03 c6 06 22 0b 24 02 10 e3 51 00 00
>0278e8	1a 00 00 03 1a 3e b9 ed 16 e4 06 22 0c 00 08 4c
>0278f8	4f 20 4e 43 41 20 42 00 00 00 12 00 01 03 1a 3e
>027908	6a ce 1a c0 06 22 0b 24 2e 40 00 00 14 00 02 03
>027918	1a 3e 5e ce 1a c0 06 22 d1 cd 49 cc 15 c0 00 00
>027928	14 00 03 03 1a 3e d0 cd b4 c2 06 22 5f ce c4 cb
>027938	10 c0 00 00 10 00 04 03 1a 3e 14 e0 06 22 0b ee
>027948	12 e0 00 00 0e 00 05 03 1a 3e f8 e4 06 22 19 e0
>027958	00 00 1e 00 06 03 1a 3e 03 ed 9b eb 18 e0 06 22
>027968	0e 00 0b 51 46 57 20 4e 5a 20 4c 52 20 58 00 00
>027978	16 00 07 03 1a 3e f2 cc ad cd 09 c0 06 22 0b 24
>027988	02 10 a7 9c 00 00 10 00 08 03 1a 3e 8a ed 09 e0
>027998	06 22 d7 e5 00 00 14 00 09 03 1a 3e 6c ee 10 e0
>0279a8	06 22 06 00 03 59 42 49 00 00 18 00 0a 03 1a 3e
>0279b8	f4 e4 06 22 0c 00 08 4b 49 4c 4e 5a 20 4b 4c 00
>0279c8	00 00 0e 00 0b 03 1a 3e 0e c0 06 22 e1 c5 00 00
>0279d8	14 00 0c 03 1a 3e 60 ce 97 c5 06 22 0b 24 06 10
>0279e8	ea 41 00 00 12 00 0d 03 1a 3e 07 e0 06 22 06 00
>0279f8	02 46 51 00 00 00 18 00 0e 03 1a 3e c2 ec 8d e2
>027a08	06 22 0a 00 06 55 57 55 4a 4a 48 00 00 00 12 00
>027a18	0f 03 1a 3e 01 ed d4 ea 17 e0 06 22 86 e5 00 00
>027a28	12 00 10 03 1a 3e 4d cd 63 c0 06 22 02 10 02 88
>027a38	00 00 14 00 11 03 1a 3e 10 ce f0 c1 06 22 63 ce
>027a48	26 cc 0c c0 00 00 0e 00 12 03 1a 3e 86 e5 06 22
>027a58	fa e4 00 00 10 00 13 03 1a 3e 7b c5 06 22 af cd
>027a68	aa c4 00 00 12 00 14 03 1a 3e a9 ed 11 e0 06 22
>027a78	3e ee 23 e0 00 00 12 00 15 03 1a 3e 8a cd ff c1
>027a88	06 22 20 cd 13 c0 00 00 10 00 16 03 1a 3e 16 c0
>027a98	06 22 84 cd 0e c2 00 00 12 00 17 03 1a 3e ef ec
>027aa8	1a e0 06 22 a9 ed 1a e0 00 00 10 00 18 03 1a 3e
>027ab8	d2 cc 0a c0 06 22 03 c6 00 00 12 00 19 03 1a 3e
>027ac8	8a cd ff c1 06 22 04 10 35 56 00 00 10 00 1a 03
>027ad8	1a 3e 40 ce 1b c0 06 22 1c c5 00 00 14 00 1b 03
>027ae8	1a 3e 55 cd 09 c0 06 22 0b 24 02 10 14 aa 00 00
>027af8	0e 00 1c 03 1a 3e 0e c0 06 22 c0 40 00 00 10 00
>027b08	1d 03 1a 3e 67 e6 06 22 04 00 01 58 00 00 14 00
>027b18	1e 03 1a 3e 59 ee ea e2 06 22 1a ed f5 ec 23 e0
>027b28	00 00 10 00 1f 03 1a 3e fe c4 06 22 a6 cd 16 c0
>027b38	00 00 14 00 20 03 1a 3e 60 ce 97 c5 06 22 0b 24
>027b48	04 10 f5 a1 00 00 14 00 21 03 1a 3e ce ec 0d e0
>027b58	06 22 2c ee ef eb 21 e0 00 00 10 00 22 03 1a 3e
>027b68	0c c0 06 22 0b 24 65 40 00 00 12 00 23 03 1a 3e
>027b78	02 ed 01 e0 06 22 04 00 00 00 00 00 12 00 24 03
>027b88	1a 3e a9 ed 11 e0 06 22 04 00 00 00 00 00 12 00
>027b98	25 03 1a 3e 32 ee dc e2 06 22 e1 ed 43 e1 00 00
>027ba8	12 00 26 03 1a 3e b5 ed 67 e6 06 22 56 ee 69 e3
>027bb8	00 00 14 00 27 03 1a 3e 23 cd e3 ca 05 c0 06 22
>027bc8	05 10 e5 96 00 00 10 00 28 03 1a 3e d1 ed 17 e0
>027bd8	06 22 3c e6 00 00 12 00 29 03 1a 3e 84 cd f3 c1
>027be8	06 22 0b 24 3b 5c 00 00 18 00 2a 03 1a 3e a3 ed
>027bf8	12 e0 06 22 0a 00 07 4e 20 4a 41 58 48 49 00 00
>027c08	10 00 2b 03 1a 3e a3 ed 12 e0 06 22 fa e4 00 00
>027c18	16 00 2c 03 1a 3e d5 ec 79 e3 06 22 08 00 05 53
>027c28	58 51 42 4d 00 00 18 00 2d 03 1a 3e 2d ed 24 e0
>027c38	06 22 0a 00 07 57 5a 42 45 20 4b 4f 00 00 10 00
>027c48	2e 03 1a 3e 21 ed b6 e3 06 22 2b e6 00 00 0e 00
>027c58	2f 03 1a 3e 0e c0 06 22 fb c5 00 00 10 00 30 03
>027c68	1a 3e 0a e0 06 22 05 ee 17 e0 00 00 14 00 31 03
>027c78	1a 3e db ed 42 e0 06 22 06 00 03 4e 43 54 00 00
>027c88	12 00 32 03 1a 3e 15 e0 06 22 c6 ec 69 ec 0e e0
>027c98	00 00 1a 00 33 03 1a 3e ce ec 0d e0 06 22 0c 00
>027ca8	09 56 46 54 20 51 56 4e 20 46 00 00 14 00 34 03
>027cb8	1a 3e 8a cd ff c1 06 22 14 ce 35 c8 0c c0 00 00
>027cc8	12 00 35 03 1a 3e 09 ee 68 e2 06 22 04 00 01 41
>027cd8	00 00 12 00 36 03 1a 3e e1 ed 43 e1 06 22 04 00
>027ce8	00 00 00 00 12 00 37 03 1a 3e 17 c0 06 22 0b 24
>027cf8	02 10 f8 54 00 00 10 00 38 03 1a 3e d7 e5 06 22
>027d08	04 00 00 00 00 00 14 00 39 03 1a 3e 20 cd 13 c0
>027d18	06 22 0b 24 01 10 7b 7c 00 00 18 00 3a 03 1a 3e
>027d28	0d e0 06 22 0c 00 09 48 58 55 20 57 51 4d 42 4f
>027d38	00 00 14 00 3b 03 1a 3e db ed 42 e0 06 22 06 00
>027d48	03 51 4e 42 00 00 16 00 3c 03 1a 3e 67 e6 06 22
>027d58	0a 00 07 57 4b 41 55 20 42 47 00 00 14 00 3d 03
>027d68	1a 3e f2 cc 0c ca 10 c0 06 22 02 10 3a a7 00 00
>027d78	12 00 3e 03 1a 3e 81 cd 58 ca 02 c0 06 22 17 c0
>027d88	00 00 0e 00 3f 03 1a 3e 5f c6 06 22 73 40 00 00
>027d98	16 00 40 03 1a 3e d1 cd 49 cc 15 c0 06 22 0b 24
>027da8	04 10 1f 92 00 00 10 00 41 03 1a 3e 7b c5 06 22
>027db8	4c cd f7 c0 00 00 12 00 42 03 1a 3e d0 cd b4 c2
>027dc8	06 22 0b 24 b2 40 00 00 14 00 43 03 1a 3e 2d ed
>027dd8	24 e0 06 22 06 00 02 4a 46 00 00 00 10 00 44 03
>027de8	1a 3e b5 cd 12 c0 06 22 03 c0 00 00 12 00 45 03
>027df8	1a 3e e1 ed 43 e1 06 22 04 00 00 00 00 00 12 00
>027e08	46 03 1a 3e 5a ce c0 c2 06 22 02 10 c9 4a 00 00
>027e18	0e 00 47 03 1a 3e 2e c5 06 22 01 c5 00 00 12 00
>027e28	48 03 1a 3e b2 ed 5b e2 06 22 0b ee 12 e0 00 00
>027e38	10 00 49 03 1a 3e 1c c5 06 22 6b ce 85 c2 00 00
>027e48	10 00 4a 03 1a 3e fd cc 19 c0 06 22 10 c6 00 00
>027e58	14 00 4b 03 1a 3e fa cc 7b cc 0f c0 06 22 02 10
>027e68	7d 7d 00 00 12 00 4c 03 1a 3e f8 e4 06 22 06 00
>027e78	03 51 59 5a 00 00 14 00 4d 03 1a 3e 35 ce 75 c1
>027e88	06 22 0b 24 04 10 0d a7 00 00 12 00 4e 03 1a 3e
>027e98	1a ed f5 ec 23 e0 06 22 36 e6 00 00 10 00 4f 03
>027ea8	1a 3e 17 c0 06 22 0b 24 38 40 00 00 14 00 50 03
>027eb8	1a 3e d8 cc d2 cc 1e c0 06 22 ce cd 19 c0 00 00
>027ec8	12 00 51 03 1a 3e 11 c6 06 22 0b 24 03 10 14 5a
>027ed8	00 00 14 00 52 03 1a 3e 01 ce 18 c0 06 22 0b 24
>027ee8	04 10 26 41 00 00 10 00 53 03 1a 3e b5 c5 06 22
>027ef8	0b 24 b1 40 00 00 12 00 54 03 1a 3e a9 ed 1a e0
>027f08	06 22 5b ee 1c e0 00 00 12 00 55 03 1a 3e d1 cd
>027f18	49 cc 15 c0 06 22 9c b6 00 00 10 00 56 03 1a 3e
>027f28	68 c6 06 22 05 10 58 73 00 00 10 00 57 03 1a 3e
>027f38	13 c0 06 22 84 cd 0e c2 00 00 18 00 58 03 1a 3e
>027f48	b2 ed 5b e2 06 22 0a 00 07 4b 43 43 4c 20 43 50
>027f58	00 00 1c 00 59 03 1a 3e d5 ec 79 e3 06 22 0e 00
>027f68	0a 44 20 48 47 20 48 20 4d 4c 51 00 00 00 16 00
>027f78	5a 03 1a 3e 05 ed 08 e0 06 22 08 00 05 5a 47 4c
>027f88	51 51 00 00 10 00 5b 03 1a 3e 07 e0 06 22 a9 ed
>027f98	11 e0 00 00 12 00 5c 03 1a 3e 84 cd 22 c0 06 22
>027fa8	a3 cd 4a c0 00 00 12 00 5d 03 1a 3e 50 ed bf e3
>027fb8	06 22 a3 ed 12 e0 00 00 12 00 5e 03 1a 3e fd cc
>027fc8	19 c0 06 22 67 ce 05 c0 00 00 10 00 5f 03 1a 3e
>027fd8	60 ee 86 e1 06 22 10 e0 00 00 10 00 60 03 1a 3e
>027fe8	d6 c4 06 22 40 ce 1b c0 00 00 14 00 61 03 1a 3e
>027ff8	67 e6 06 22 08 00 04 44 53 4c 4b 00 00 00 10 00
>028008	62 03 1a 3e 03 c6 06 22 a8 cd 11 c0 00 00 12 00
>028018	63 03 1a 3e 67 ce 5e cd 16 c0 06 22 77 af 00 00
>028028	12 00 64 03 1a 3e 8a cd ff c1 06 22 af cd aa c4
>028038	00 00 14 00 65 03 1a 3e 3e ee 23 e0 06 22 68 ee
>028048	50 e8 0b e0 00 00 10 00 66 03 1a 3e 21 c5 06 22
>028058	f5 cc da c2 00 00 18 00 67 03 1a 3e 37 ee 78 ed
>028068	03 e0 06 22 08 00 05 51 46 55 48 5a 00 00 10 00
>028078	68 03 1a 3e 16 e0 06 22 a3 ed 12 e0 00 00 0e 00
>028088	69 03 1a 3e 18 e0 06 22 22 e5 00 00 12 00 6a 03
>028098	1a 3e 8b ed 23 e0 06 22 04 00 00 00 00 00 12 00
>0280a8	6b 03 1a 3e 0a ee 0b e0 06 22 5b ee 1c e0 00 00
>0280b8	12 00 6c 03 1a 3e b5 cd 12 c0 06 22 10 ce f0 c1
>0280c8	00 00 16 00 6d 03 1a 3e db ed 97 e3 06 22 08 00
>0280d8	04 44 20 4a 50 00 00 00 14 00 6e 03 1a 3e d9 ec
>0280e8	74 ec 14 e0 06 22 b2 ed 5b e2 00 00 10 00 6f 03
>0280f8	1a 3e 07 e0 06 22 10 ee 02 e4 00 00 1a 00 70 03
>028108	1a 3e e1 ed 43 e1 06 22 0c 00 08 57 47 54 46 4b
>028118	20 20 4e 00 00 00 12 00 71 03 1a 3e fb c4 06 22
>028128	79 cd 6f cc 23 c0 00 00 12 00 72 03 1a 3e f7 cc
>028138	66 c4 06 22 54 cd 10 c0 00 00 12 00 73 03 1a 3e
>028148	28 ee 0a e0 06 22 04 00 00 00 00 00 12 00 74 03
>028158	1a 3e b2 ed 5b e2 06 22 a3 ed 12 e0 00 00 10 00
>028168	75 03 1a 3e f8 cc 1d c0 06 22 e6 c5 00 00 10 00
>028178	76 03 1a 3e 01 c5 06 22 84 cd 22 c0 00 00 10 00
>028188	77 03 1a 3e 67 ce 05 c0 06 22 2d 40 00 00 16 00
>028198	78 03 1a 3e 14 ce 58 cd 23 c0 06 22 d8 cc d2 cc
>0281a8	1e c0 00 00 14 00 79 03 1a 3e 16 e0 06 22 08 00
>0281b8	04 4e 55 20 52 00 00 00 16 00 7a 03 1a 3e d8 cc
>0281c8	d2 cc 1e c0 06 22 63 ce 26 cc 0c c0 00 00 14 00
>0281d8	7b 03 1a 3e 14 ce 35 c8 0c c0 06 22 b0 cd 98 c4
>0281e8	00 00 10 00 7c 03 1a 3e e6 c5 06 22 05 10 ef 8a
>0281f8	00 00 10 00 7d 03 1a 3e b9 ed 16 e4 06 22 67 e6
>028208	00 00 14 00 7e 03 1a 3e fa e4 06 22 08 00 05 49
>028218	4c 45 41 50 00 00 12 00 7f 03 1a 3e a8 cd 11 c0
>028228	06 22 fe cc 0b c0 00 00 0e 00 80 03 1a 3e 2a c6
>028238	06 22 d9 c5 00 00 12 00 81 03 1a 3e 81 cd 58 ca
>028248	02 c0 06 22 04 c0 00 00 10 00 82 03 1a 3e 84 cd
>028258	22 c0 06 22 10 c6 00 00 0e 00 83 03 1a 3e 07 e0
>028268	06 22 09 e0 00 00 12 00 84 03 1a 3e b6 cd 1a c4
>028278	06 22 05 10 f6 93 00 00 14 00 85 03 1a 3e 40 ce
>028288	1b c0 06 22 0b 24 05 10 dd 7f 00 00 12 00 86 03
>028298	1a 3e f6 ec 16 e0 06 22 04 00 01 49 00 00 18 00
>0282a8	87 03 1a 3e c7 e4 06 22 0c 00 09 56 4c 52 20 20
>0282b8	58 20 54 49 00 00 12 00 88 03 1a 3e 84 cd f3 c1
>0282c8	06 22 55 cd 09 c0 00 00 14 00 89 03 1a 3e 63 ce
>0282d8	26 cc 0c c0 06 22 02 10 c9 6b 00 00 16 00 8a 03
>0282e8	1a 3e 2c ee ef eb 21 e0 06 22 06 00 03 46 20 59
>0282f8	00 00 10 00 8b 03 1a 3e 0a e0 06 22 ce ec 07 e0
>028308	00 00 16 00 8c 03 1a 3e d1 cd 49 cc 15 c0 06 22
>028318	0b 24 02 10 dc 7d 00 00 16 00 8d 03 1a 3e f2 cc
>028328	0c ca 10 c0 06 22 0b 24 03 10 d4 61 00 00 1a 00
>028338	8e 03 1a 3e ce ec 07 e0 06 22 0c 00 08 42 4d 20
>028348	49 52 48 49 47 00 00 00 10 00 8f 03 1a 3e 7a e5
>028358	06 22 d5 ec 79 e3 00 00 14 00 90 03 1a 3e b0 cd
>028368	98 c4 06 22 0b 24 02 10 b0 98 00 00 0e 00 91 03
>028378	1a 3e 2a c6 06 22 e1 c5 00 00 10 00 92 03 1a 3e
>028388	0e c0 06 22 0b 24 59 94 00 00 16 00 93 03 1a 3e
>028398	d8 cc d2 cc 1e c0 06 22 0b 24 05 10 28 57 00 00
>0283a8	18 00 94 03 1a 3e ff ec ec e5 06 22 0a 00 07 53
>0283b8	20 20 45 20 4c 4d 00 00 12 00 95 03 1a 3e b9 ed
>0283c8	16 e4 06 22 d2 ec 1d e0 00 00 10 00 96 03 1a 3e
>0283d8	df c5 06 22 0b 24 a8 40 00 00 10 00 97 03 1a 3e
>0283e8	01 ce 18 c0 06 22 41 40 00 00 14 00 98 03 1a 3e
>0283f8	e1 ed 43 e1 06 22 06 00 02 47 53 00 00 00 1a 00
>028408	99 03 1a 3e 15 e0 06 22 0e 00 0b 55 46 20 20 55
>028418	20 54 48 4d 4e 54 00 00 0e 00 9a 03 1a 3e fb c5
>028428	06 22 48 5f 00 00 12 00 9b 03 1a 3e ff ec ec e5
>028438	06 22 c2 ec 8d e2 00 00 16 00 9c 03 1a 3e 14 ce
>028448	35 c8 0c c0 06 22 0b 24 01 10 ce 6c 00 00 10 00
>028458	9d 03 1a 3e 0c c0 06 22 d2 cc 0a c0 00 00 10 00
>028468	9e 03 1a 3e ce ec 07 e0 06 22 14 e0 00 00 14 00
>028478	9f 03 1a 3e d9 e5 06 22 08 00 05 55 47 51 50 49
>028488	00 00 10 00 a0 03 1a 3e 84 cd 22 c0 06 22 73 78
>028498	00 00 10 00 a1 03 1a 3e 22 e5 06 22 fb ed 5f e5
>0284a8	00 00 10 00 a2 03 1a 3e 21 ed b6 e3 06 22 7a e5
>0284b8	00 00 14 00 a3 03 1a 3e 35 ce 75 c1 06 22 06 cd
>0284c8	c6 cb 10 c0 00 00 12 00 a4 03 1a 3e 63 ce 5d c6
>0284d8	06 22 0b 24 8a 40 00 00 10 00 a5 03 1a 3e 18 e0
>0284e8	06 22 21 ed b6 e3 00 00 1c 00 a6 03 1a 3e fb ed
>0284f8	5f e5 06 22 0e 00 0b 44 54 20 20 4a 58 20 46 54
>028508	59 4d 00 00 12 00 a7 03 1a 3e f8 cc 1d c0 06 22
>028518	d0 cd b4 c2 00 00 12 00 a8 03 1a 3e fd cc 19 c0
>028528	06 22 0b 24 39 40 00 00 10 00 a9 03 1a 3e 68 c6
>028538	06 22 54 cd 10 c0 00 00 0e 00 aa 03 1a 3e 21 c5
>028548	06 22 6d 40 00 00 12 00 ab 03 1a 3e f9 e4 06 22
>028558	06 00 03 42 20 4e 00 00 18 00 ac 03 1a 3e a8 ed
>028568	19 e0 06 22 0a 00 07 46 20 20 58 4d 20 47 00 00
>028578	14 00 ad 03 1a 3e 63 ce 26 cc 0c c0 06 22 02 10
>028588	45 aa 00 00 16 00 ae 03 1a 3e 86 e5 06 22 0a 00
>028598	07 46 20 4d 50 20 20 53 00 00 12 00 af 03 1a 3e
>0285a8	c9 ec 01 e0 06 22 59 ee ea e2 00 00 12 00 b0 03
>0285b8	1a 3e 01 ce 18 c0 06 22 05 10 e0 58 00 00 10 00
>0285c8	b1 03 1a 3e 0c c0 06 22 0b 24 0a 6d 00 00 1a 00
>0285d8	b2 03 1a 3e 0c e6 06 22 0e 00 0b 53 53 20 49 20
>0285e8	59 20 56 56 20 44 00 00 14 00 b3 03 1a 3e 0b ee
>0285f8	12 e0 06 22 06 00 02 55 4b 00 00 00 14 00 b4 03
>028608	1a 3e d1 cd 49 cc 15 c0 06 22 b0 cd 98 c4 00 00
>028618	12 00 b5 03 1a 3e 01 ed d4 ea 17 e0 06 22 f8 e4
>028628	00 00 16 00 b6 03 1a 3e d2 ec 1d e0 06 22 08 00
>028638	05 52 20 59 20 51 00 00 10 00 b7 03 1a 3e d7 e5
>028648	06 22 02 ed 01 e0 00 00 16 00 b8 03 1a 3e b3 cd
>028658	14 c9 09 c0 06 22 0b 24 02 10 36 68 00 00 14 00
>028668	b9 03 1a 3e 81 cd 58 ca 02 c0 06 22 60 ce 97 c5
>028678	00 00 10 00 ba 03 1a 3e c3 e4 06 22 d7 ed 1f e0
>028688	00 00 14 00 bb 03 1a 3e 67 ce 05 c0 06 22 67 ce
>028698	5e cd 16 c0 00 00 0e 00 bc 03 1a 3e d6 c4 06 22
>0286a8	e1 c5 00 00 14 00 bd 03 1a 3e d5 cd d9 cd 14 c0
>0286b8	06 22 b2 cd 5c c0 00 00 16 00 be 03 1a 3e 7a ed
>0286c8	09 e0 06 22 08 00 05 44 43 52 43 5a 00 00 1c 00
>0286d8	bf 03 1a 3e 8a ed 09 e0 06 22 0e 00 0b 4b 50 42
>0286e8	20 47 46 4f 46 57 49 4c 00 00 0e 00 c0 03 1a 3e
>0286f8	21 c5 06 22 16 c0 00 00 14 00 c1 03 1a 3e 68 ee
>028708	50 e8 0b e0 06 22 04 00 00 00 00 00 10 00 c2 03
>028718	1a 3e a6 cd 16 c0 06 22 a8 40 00 00 12 00 c3 03
>028728	1a 3e d5 ec 79 e3 06 22 d5 ec 79 e3 00 00 12 00
>028738	c4 03 1a 3e fe cc 0b c0 06 22 0b 24 13 40 00 00
>028748	14 00 c5 03 1a 3e f2 cc 0c ca 10 c0 06 22 02 10
>028758	f0 5a 00 00 12 00 c6 03 1a 3e 01 ce 18 c0 06 22
>028768	b2 cd 5c c0 00 00 10 00 c7 03 1a 3e af cd aa c4
>028778	06 22 7f 40 00 00 10 00 c8 03 1a 3e 1a c0 06 22
>028788	ff cd 88 c5 00 00 10 00 c9 03 1a 3e cc cc 4e c0
>028798	06 22 e6 c5 00 00 18 00 ca 03 1a 3e f9 e4 06 22
>0287a8	0c 00 08 44 5a 52 58 43 4f 4c 51 00 00 00 12 00
>0287b8	cb 03 1a 3e 40 ce 1b c0 06 22 02 10 f9 aa 00 00
>0287c8	10 00 cc 03 1a 3e 2b e6 06 22 04 00 00 00 00 00
>0287d8	10 00 cd 03 1a 3e 08 c0 06 22 0b 24 61 4b 00 00
>0287e8	14 00 ce 03 1a 3e fa cc 7b cc 0f c0 06 22 03 10
>0287f8	c5 b7 00 00 0e 00 cf 03 1a 3e 21 e5 06 22 16 e0
>028808	00 00 10 00 d0 03 1a 3e a3 cd 4a c0 06 22 01 c0
>028818	00 00 16 00 d1 03 1a 3e 14 ce 58 cd 23 c0 06 22
>028828	14 ce 35 c8 0c c0 00 00 12 00 d2 03 1a 3e a8 cd
>028838	71 c4 06 22 0c ce 6b c4 00 00 12 00 d3 03 1a 3e
>028848	63 ce 26 cc 0c c0 06 22 03 c6 00 00 14 00 d4 03
>028858	1a 3e 67 ce 5e cd 16 c0 06 22 02 10 7e 4c 00 00
>028868	12 00 d5 03 1a 3e 62 c6 06 22 0b 24 04 10 c7 70
>028878	00 00 10 00 d6 03 1a 3e c3 e4 06 22 2f ed 22 e4
>028888	00 00 14 00 d7 03 1a 3e a8 ed 19 e0 06 22 06 00
>028898	03 50 4a 4d 00 00 14 00 d8 03 1a 3e 03 ed 9b eb
>0288a8	18 e0 06 22 12 ee e4 e5 00 00 10 00 d9 03 1a 3e
>0288b8	cc cc 4e c0 06 22 a5 40 00 00 16 00 da 03 1a 3e
>0288c8	a9 ed 11 e0 06 22 08 00 05 4e 42 20 44 4d 00 00
>0288d8	10 00 db 03 1a 3e 8a cd ff c1 06 22 e6 c5 00 00
>0288e8	10 00 dc 03 1a 3e 35 ce 75 c1 06 22 e6 c5 00 00
>0288f8	18 00 dd 03 1a 3e 14 e0 06 22 0c 00 08 4c 49 5a
>028908	4f 55 49 54 54 00 00 00 10 00 de 03 1a 3e fb c4
>028918	06 22 03 10 c2 b0 00 00 18 00 df 03 1a 3e 0d e0
>028928	06 22 0c 00 09 44 20 56 41 20 48 46 47 59 00 00
>028938	12 00 e0 03 1a 3e 23 ed 06 e5 06 22 04 00 01 58
>028948	00 00 12 00 e1 03 1a 3e c3 e4 06 22 06 00 03 58
>028958	4f 4a 00 00 12 00 e2 03 1a 3e 20 cd 13 c0 06 22
>028968	01 10 c1 4d 00 00 12 00 e3 03 1a 3e ff ec ec e5
>028978	06 22 04 00 00 00 00 00 10 00 e4 03 1a 3e f9 e4
>028988	06 22 4a ed 07 e0 00 00 12 00 e5 03 1a 3e 0d e0
>028998	06 22 06 00 03 48 42 50 00 00 12 00 e6 03 1a 3e
>0289a8	1a e0 06 22 06 00 02 5a 47 00 00 00 12 00 e7 03
>0289b8	1a 3e f2 cc ad cd 09 c0 06 22 55 40 00 00 14 00
>0289c8	e8 03 1a 3e 5f ce c4 cb 10 c0 06 22 a8 cd 71 c4
>0289d8	00 00 12 00 e9 03 1a 3e b5 cd 12 c0 06 22 0c ce
>0289e8	6b c4 00 00 12 00 ea 03 1a 3e fb c4 06 22 0b 24
>0289f8	04 10 75 50 00 00 18 00 eb 03 1a 3e d2 ec 1d e0
>028a08	06 22 0a 00 06 58 58 43 20 4d 51 00 00 00 10 00
>028a18	ec 03 1a 3e 10 ce f0 c1 06 22 7b c5 00 00 12 00
>028a28	ed 03 1a 3e 59 ee ea e2 06 22 0b ee 12 e0 00 00
>028a38	14 00 ee 03 1a 3e 59 ee ea e2 06 22 06 00 02 4c
>028a48	42 00 00 00 12 00 ef 03 1a 3e 7a ed 09 e0 06 22
>028a58	c2 ec 8d e2 00 00 12 00 f0 03 1a 3e d0 cd b4 c2
>028a68	06 22 58 ce 22 c0 00 00 12 00 f1 03 1a 3e 3e ee
>028a78	0b e0 06 22 c2 ec 8d e2 00 00 12 00 f2 03 1a 3e
>028a88	d1 ed 17 e0 06 22 f0 ec 0a e0 00 00 12 00 f3 03
>028a98	1a 3e 1c c5 06 22 0b 24 02 10 5e 50 00 00 10 00
>028aa8	f4 03 1a 3e 67 e6 06 22 04 00 00 00 00 00 12 00
>028ab8	f5 03 1a 3e 67 ce 5e cd 16 c0 06 22 2e c5 00 00
>028ac8	10 00 f6 03 1a 3e 1c c5 06 22 b6 cd 1a c4 00 00
>028ad8	10 00 f7 03 1a 3e db ed 42 e0 06 22 b6 e5 00 00
>028ae8	12 00 f8 03 1a 3e d5 cd d9 cd 14 c0 06 22 23 c5
>028af8	00 00 10 00 f9 03 1a 3e 0d e0 06 22 50 ed bf e3
>028b08	00 00 10 00 fa 03 1a 3e 24 ed 7e e4 06 22 fa e4
>028b18	00 00 10 00 fb 03 1a 3e 03 c0 06 22 a6 cd ee c5
>028b28	00 00 18 00 fc 03 1a 3e 22 e5 06 22 0c 00 09 5a
>028b38	4c 52 53 51 46 43 44 48 00 00 10 00 fd 03 1a 3e
>028b48	d2 ec 1d e0 06 22 29 e5 00 00 14 00 fe 03 1a 3e
>028b58	38 ee 4a e9 13 e0 06 22 d5 ec 79 e3 00 00 12 00
>028b68	ff 03 1a 3e 0a c0 06 22 d5 cd d9 cd 14 c0 00 00
>028b78	14 00 00 04 1a 3e 5a ce c0 c2 06 22 0b 24 04 10
>028b88	c8 9a 00 00 12 00 01 04 1a 3e 13 c0 06 22 f2 cc
>028b98	ad cd 09 c0 00 00 10 00 02 04 1a 3e a8 cd 11 c0
>028ba8	06 22 47 ab 00 00 12 00 03 04 1a 3e 6b ce 85 c2
>028bb8	06 22 04 10 0c 48 00 00 1a 00 04 04 1a 3e d2 ec
>028bc8	1d e0 06 22 0c 00 08 56 4f 50 20 49 20 54 4d 00
>028bd8	00 00 1a 00 05 04 1a 3e 10 e0 06 22 0e 00 0b 4f
>028be8	41 20 47 20 20 54 5a 57 50 41 00 00 10 00 06 04
>028bf8	1a 3e 6a ce 1a c0 06 22 1c c5 00 00 10 00 07 04
>028c08	1a 3e 4d cd 63 c0 06 22 21 c5 00 00 16 00 08 04
>028c18	1a 3e d1 cd 49 cc 15 c0 06 22 0b 24 03 10 84 ba
>028c28	00 00 14 00 09 04 1a 3e 6b ce 85 c2 06 22 c4 cc
>028c38	38 cd 1b c0 00 00 10 00 0a 04 1a 3e 2e c5 06 22
>028c48	10 ce f0 c1 00 00 12 00 0b 04 1a 3e d2 cc 0a c0
>028c58	06 22 02 ce 22 c0 00 00 00 00 ee ee ee ee 00 00
>028c68	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 824 times (13184 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
