
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 21 10:31:49 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 5a 1e 01	jmp $011e5a			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	b5 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	16 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	26 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	36 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	7a 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	e1 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	46 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	c3 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	a5 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	60 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	60 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	e1 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	ed 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	6a 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	e1 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	f2 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	04 0b					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	7b 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	5b 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	37 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	21 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a3 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	c3 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b5 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	ed 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	21 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	57 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	71 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	88 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	2c 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	ea 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	6b 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	02 0f					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	94 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	83 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	5d 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	b5 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	b5 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	b5 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	b5 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	b5 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	b5 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	b5 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	b5 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	bc 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	6e 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	9d 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	eb 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	ee 1a					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	7d 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	79 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	d6 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	b8 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	86 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	79 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	d8 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	f4 19					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	36 19					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	39 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	57 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	6f 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	83 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	4e 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	d3 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	6a 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	e5 12					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	98 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	26 1a					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	84 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	d2 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	0e 18					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	b5 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	bb 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	3d 1a					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	b5 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	67 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	7a 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	5c 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 30 03	brl $0105c6			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c c6 05	jmp $0105c6			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 31		bcc $010382			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 0d 04	jsr $01040d			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	f0 0a		beq $010373			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010369	18		clc				clc 								; returning a number, read high data word
.01036a	a0 02 00	ldy #$0002			ldy 	#2
.01036d	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01036f	a8		tay				tay 								; put A into Y (this is the high byte)
.010370	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010372	60		rts				rts
.010373					_VANIsString:
.010373	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.010378	d0 06		bne $010380			bne 	_VANNotEmptyString
.01037a	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.01037d	18		clc				clc
.01037e	65 02		adc $02				adc 	DBaseAddress
.010380					_VANNotEmptyString:
.010380	38		sec				sec
.010381	60		rts				rts
.010382					_VANError:
.010382	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010385	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01038d	20 75 6e 6b 6e 6f 77 6e 00
.010396					VariableFind:
.010396	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010398	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01039b	90 5c		bcc $0103f9			bcc 	_VFError
.01039d	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a0	b0 11		bcs $0103b3			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a2	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103a5	3a		dec a				dec 	a 							; now 0-25
.0103a6	0a		asl a				asl 	a 							; x 4 and clear carry
.0103a7	0a		asl a				asl 	a
.0103a8	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103ab	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103ad	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103af	e6 06		inc $06				inc 	DCodePtr
.0103b1	38		sec				sec 								; return with carry set.
.0103b2	60		rts				rts
.0103b3					_VFSlowVariable:
.0103b3	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103b5	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103b8	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103b9	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103ba	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103bd	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103bf	85 08		sta $08				sta 	DTemp1
.0103c1	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c3	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103c6	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103c7	65 08		adc $08				adc 	DTemp1
.0103c9	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103cb	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103cd					_VFNext:
.0103cd	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103cf	f0 26		beq $0103f7			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d1	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d3	a8		tay				tay 								; read the address of the name at $0002,y
.0103d4	b9 02 00	lda $0002,y			lda 	$0002,y
.0103d7	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103d9	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103dc					_VFCompare:
.0103dc	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103de	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e0	d0 eb		bne $0103cd			bne 	_VFNext 					; if not, go to the next one.
.0103e2	c8		iny				iny 								; advance token pointer
.0103e3	c8		iny				iny
.0103e4	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103e7	d0 f3		bne $0103dc			bne 	_VFCompare
.0103e9	98		tya				tya 								; this is the length of the word.
.0103ea	18		clc				clc 								; so we add it to the code pointer
.0103eb	65 06		adc $06				adc 	DCodePtr
.0103ed	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103ef	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f1	18		clc				clc 								; four on is the actual data
.0103f2	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103f5	38		sec				sec 								; return with CS indicating success
.0103f6	60		rts				rts
.0103f7					_VFFail:
.0103f7	18		clc				clc
.0103f8	60		rts				rts
.0103f9					_VFError:
.0103f9	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0103fc	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010404	76 61 72 69 61 62 6c 65 00
.01040d					VariableSubscript:
.01040d	48		pha				pha		 							; save variable address on stack.
.01040e	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.010411	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; skip right bracket.
.010414	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010417	d0 10		bne $010429			bne 	_VANSubscript
.010419	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01041b	f0 02		beq $01041f			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01041d	b0 0a		bcs $010429			bcs 	_VANSubscript
.01041f					_VANSubOkay:
.01041f	0a		asl a				asl 	a 							; double lsword
.010420	0a		asl a				asl 	a 							; and again, also clears carry.
.010421	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010423	68		pla				pla 								; restore DVariablePtr
.010424	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010425	1a		inc a				inc 	a
.010426	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010428	60		rts				rts
.010429					_VANSubscript:
.010429	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01042c	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010434	79 20 53 75 62 73 63 72 69 70 74 00
.010440					VariableCreateNew:
.010440	48		pha				pha 								; save count.
.010441	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010442	0a		asl a				asl 	a 							; 2 x # items.
.010443	0a		asl a				asl 	a 							; 4 x # items.
.010444					_VCNotSingle:
.010444	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010446	b2 06		lda ($06)			lda 	(DCodePtr) 					; get first token.
.010448	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01044b	f0 04		beq $010451			beq 	_VCNotArray
.01044d	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01044f	e6 08		inc $08				inc 	DTemp1
.010451					_VCNotArray:
.010451	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010454	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010456	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010458	18		clc				clc 								; add 4 for link and name words
.010459	69 04 00	adc #$0004			adc 	#4
.01045c	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01045e	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010460	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010462					_VCErase:
.010462	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.010465	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010468	c8		iny				iny
.010469	c8		iny				iny
.01046a	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01046c	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01046e	d0 f2		bne $010462			bne 	_VCErase
.010470	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010472	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010474	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010477	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.01047a	18		clc				clc
.01047b	65 02		adc $02				adc 	DBaseAddress
.01047d	85 08		sta $08				sta 	DTemp1
.01047f	a5 06		lda $06				lda 	DCodePtr 					; get the address of the token.
.010481	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010483	b0 03		bcs $010488			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010485	20 a6 04	jsr $0104a6			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010488					_VCDontClone:
.010488	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01048b	68		pla				pla 								; restore count and store (if nonzero)
.01048c	f0 03		beq $010491			beq 	_VCNotArray2
.01048e	99 04 00	sta $0004,y			sta 	$0004,y
.010491					_VCNotArray2:
.010491	98		tya				tya 								; update the head link
.010492	92 20		sta ($20)			sta 	(DHashTablePtr)
.010494	18		clc				clc 								; advance pointer to the data bit.
.010495	69 04 00	adc #$0004			adc 	#4
.010498	48		pha				pha 								; save on stack.
.010499					_VCSkipToken:
.010499	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01049b	e6 06		inc $06				inc 	DCodePtr
.01049d	e6 06		inc $06				inc 	DCodePtr
.01049f	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0104a2	d0 f5		bne $010499			bne 	_VCSkipToken
.0104a4							l
.0104a4	68		pla				pla 								; restore data address
.0104a5	60		rts				rts 								; and done.
.0104a6					VCCloneIdentifier:
.0104a6	da		phx				phx 								; save XY
.0104a7	5a		phy				phy
.0104a8	aa		tax				tax 								; identifier address in Y.
.0104a9	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104ac	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ae	48		pha				pha
.0104af					_VCCloneLoop:
.0104af	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104b2	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104b4	48		pha				pha 								; save on stack
.0104b5	1a		inc a				inc 	a 							; space for one token.
.0104b6	1a		inc a				inc 	a
.0104b7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b9	7a		ply				ply 								; address of word in Y
.0104ba	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104bd	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104c0	e8		inx				inx 								; advance the token pointer
.0104c1	e8		inx				inx
.0104c2	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104c5	d0 e8		bne $0104af			bne 	_VCCloneLoop
.0104c7	68		pla				pla 								; restore start address
.0104c8	7a		ply				ply 								; and the others
.0104c9	fa		plx				plx
.0104ca	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104cb					LineDelete:
.0104cb	aa		tax				tax 	 							; this is the one we're looking for ....
.0104cc	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104ce	18		clc				clc
.0104cf	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104d2	a8		tay				tay
.0104d3					_LDLoop:
.0104d3	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104d6	f0 2d		beq $010505			beq 	_LDExit						; exit if zero ; line does not exist
.0104d8	8a		txa				txa 								; found a match
.0104d9	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104dc	f0 08		beq $0104e6			beq		_LDFound
.0104de	98		tya				tya 								; follow the link.
.0104df	18		clc				clc
.0104e0	79 00 00	adc $0000,y			adc 	$0000,y
.0104e3	a8		tay				tay
.0104e4	80 ed		bra $0104d3			bra 	_LDLoop
.0104e6					_LDFound:
.0104e6	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104e8	98		tya				tya 								; follow link to next.
.0104e9	18		clc				clc
.0104ea	79 00 00	adc $0000,y			adc 	$0000,y
.0104ed	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104ef	20 c0 1b	jsr $011bc0			jsr 	FindCodeEnd 				; find the end of the code.
.0104f2	38		sec				sec
.0104f3	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104f5	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104f6	1a		inc a				inc 	a
.0104f7	aa		tax				tax
.0104f8	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104fb	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104fd	91 08		sta ($08),y			sta 	(DTemp1),y
.0104ff	c8		iny				iny
.010500	c8		iny				iny
.010501	ca		dex				dex
.010502	ca		dex				dex
.010503	d0 f6		bne $0104fb			bne 	_LDCopy
.010505					_LDExit:
.010505	60		rts				rts
.010506					LineInsert:
.010506	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.010508	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.01050a	a0 00 00	ldy #$0000			ldy 	#0
.01050d					_LIFindLength:
.01050d	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.01050f	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010512	f0 10		beq $010524			beq 	_LIFindEnd
.010514	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.010517	90 04		bcc $01051d			bcc 	_LIQString
.010519	c8		iny				iny 								; otherwise just skip it.
.01051a	c8		iny				iny
.01051b	80 f0		bra $01050d			bra 	_LIFindLength
.01051d					_LIQString:
.01051d	98		tya				tya 								; skip quoted strings
.01051e	18		clc				clc
.01051f	71 08		adc ($08),y			adc 	(DTemp1),y
.010521	a8		tay				tay
.010522	80 e9		bra $01050d			bra 	_LIFindLength
.010524					_LIFindEnd:
.010524	98		tya				tya 								; the tokens in the line
.010525	18		clc				clc
.010526	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010529	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.01052b	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.01052e	18		clc				clc
.01052f	65 02		adc $02				adc 	DBaseAddress
.010531	a8		tay				tay
.010532					_LIFindInsertPoint:
.010532	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010535	f0 0f		beq $010546			beq		_LIFoundInsertPoint
.010537	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.01053a	c5 0c		cmp $0c				cmp 	DTemp2
.01053c	b0 08		bcs $010546			bcs 	_LIFoundInsertPoint
.01053e	98		tya				tya 								; if < go to the next line.
.01053f	18		clc				clc
.010540	79 00 00	adc $0000,y			adc 	$0000,y
.010543	a8		tay				tay
.010544	80 ec		bra $010532			bra 	_LIFindInsertPoint
.010546					_LIFoundInsertPoint:
.010546	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.010548	20 c0 1b	jsr $011bc0			jsr 	FindCodeEnd 				; get the end of the code.
.01054b	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.01054d	18		clc				clc
.01054e	65 24		adc $24				adc 	DTemp3
.010550	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010552					_LICopyMove:
.010552	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010554	92 34		sta ($34)			sta 	(DTemp4+2)
.010556	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.010558	c5 36		cmp $36				cmp 	DTemp5
.01055a	f0 0a		beq $010566			beq 	_LICopyMoveOver
.01055c	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.01055e	c6 32		dec $32				dec 	DTemp4
.010560	c6 34		dec $34				dec 	DTemp4+2
.010562	c6 34		dec $34				dec 	DTemp4+2
.010564	80 ec		bra $010552			bra 	_LICopyMove
.010566					_LICopyMoveOver:
.010566	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010568	92 36		sta ($36)			sta 	(DTemp5)
.01056a	a0 02 00	ldy #$0002			ldy 	#2
.01056d	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.01056f	91 36		sta ($36),y			sta 	(DTemp5),y
.010571	a0 04 00	ldy #$0004			ldy 	#4
.010574					_LICopyTokens:
.010574	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010576	91 36		sta ($36),y			sta 	(DTemp5),y
.010578	c8		iny				iny
.010579	c8		iny				iny
.01057a	e6 08		inc $08				inc 	DTemp1
.01057c	e6 08		inc $08				inc 	DTemp1
.01057e	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010580	c6 24		dec $24				dec 	DTemp3
.010582	a5 24		lda $24				lda 	DTemp3
.010584	c9 04 00	cmp #$0004			cmp 	#4
.010587	d0 eb		bne $010574			bne 	_LICopyTokens
.010589	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01058a					ErrorHandler:
.01058a	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01058c	fa		plx				plx 								; address of error message -1
.01058d	e8		inx				inx 								; error message.
.01058e	20 32 06	jsr $010632			jsr 	PrintROMMessage 			; print message in ROM
.010591	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010593	f0 15		beq $0105aa			beq 	_EHEndMessage
.010595	a2 b0 05	ldx #$05b0			ldx 	#_EHAt & $FFFF 				; print " at "
.010598	20 32 06	jsr $010632			jsr 	PrintROMMessage
.01059b	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01059d	a0 00 00	ldy #$0000			ldy 	#0
.0105a0	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105a3	20 de 10	jsr $0110de			jsr 	ConvertToString 			; convert and print it.
.0105a6	a8		tay				tay
.0105a7	20 50 06	jsr $010650			jsr 	PrintBASICString
.0105aa					_EHEndMessage:
.0105aa	20 80 1d	jsr $011d80			jsr 	HWNewLine
.0105ad	4c 84 1e	jmp $011e84			jmp 	NextCommand 				; get next command.
>0105b0	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105b5					IllegalToken:
.0105b5	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0105b8	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105c0	54 6f 6b 65 6e 00
.0105c6					SyntaxError:
.0105c6	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0105c9	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105d1	72 72 6f 72 00
.0105d6					ExpectToken:
.0105d6	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105d8	d0 05		bne $0105df			bne 	_CTKError					; error if not
.0105da	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105dc	e6 06		inc $06				inc 	DCodePtr
.0105de	60		rts				rts
.0105df					_CTKError:
.0105df	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0105e2	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105ea	74 6f 6b 65 6e 00
.0105f0					ExpectRightBracket:
.0105f0	48		pha				pha
.0105f1	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105f4	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.0105f7	68		pla				pla
.0105f8	60		rts				rts
.0105f9					ExpectComma:
.0105f9	48		pha				pha
.0105fa	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105fd	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.010600	68		pla				pla
.010601	60		rts				rts
.010602					CheckBothNumeric:
.010602	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010604	15 42		ora $42,x			ora 	EXSPrecType+2,x
.010606	30 01		bmi $010609			bmi 	_CBNFail 					; need to both be zero in bit 15
.010608	60		rts				rts
.010609					_CBNFail:
.010609	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01060c	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010614	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010622					ResetTypeInteger:
.010622	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010624	29 ff 7f	and #$7fff			and 	#$7FFF
.010627	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010629	60		rts				rts
.01062a					ResetTypeString:
.01062a	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01062c	09 00 80	ora #$8000			ora 	#$8000
.01062f	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010631	60		rts				rts
.010632					PrintROMMessage:
.010632	48		pha				pha
.010633	da		phx				phx
.010634					_PRMLoop:
.010634	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010638	29 ff 00	and #$00ff			and 	#$00FF
.01063b	f0 10		beq $01064d			beq 	_PRMExit
.01063d	c9 0d 00	cmp #$000d			cmp 	#13
.010640	d0 05		bne $010647			bne 	_PRMChar
.010642	20 80 1d	jsr $011d80			jsr 	HWNewLine
.010645	80 03		bra $01064a			bra 	_PRMNext
.010647					_PRMChar:
.010647	20 2f 1d	jsr $011d2f			jsr 	HWPrintChar
.01064a					_PRMNext:
.01064a	e8		inx				inx
.01064b	80 e7		bra $010634			bra 	_PRMLoop
.01064d					_PRMExit:
.01064d	fa		plx				plx
.01064e	68		pla				pla
.01064f	60		rts				rts
.010650					PrintBASICString:
.010650	48		pha				pha
.010651	da		phx				phx
.010652	5a		phy				phy
.010653	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010656	29 ff 00	and #$00ff			and 	#$00FF
.010659	f0 0b		beq $010666			beq 	_PBSExit 					; null string
.01065b	aa		tax				tax
.01065c					_PBSLoop:
.01065c	c8		iny				iny
.01065d	b9 00 00	lda $0000,y			lda 	$0000,y
.010660	20 2f 1d	jsr $011d2f			jsr 	HWPrintChar
.010663	ca		dex				dex
.010664	d0 f6		bne $01065c			bne 	_PBSLoop
.010666					_PBSExit:
.010666	7a		ply				ply
.010667	fa		plx				plx
.010668	68		pla				pla
.010669	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.01066a					StringResetPermanent:
.01066a	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.01066c	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.01066d	3a		dec a				dec 	a 							; at the top of memory.
.01066e	a8		tay				tay
.01066f	48		pha				pha
.010670	a9 00 00	lda #$0000			lda 	#$0000
.010673	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.010676	68		pla				pla
.010677	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.01067a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01067c	60		rts				rts
.01067d					StringReassign:
.01067d	da		phx				phx 								; save X
.01067e	bb		tyx				tyx 								; save the pointer to the current value into X.
.01067f	a8		tay				tay 								; put address of the new string in Y
.010680	bd 00 00	lda $0000,x			lda 	@w$0000,x					; address of the old string in A
.010683	20 25 07	jsr $010725			jsr 	StringRelease 				; release the old string
.010686	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; get length
.010689	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.01068c	d0 03		bne $010691			bne 	_SRAContent
.01068e	82 71 00	brl $010702			brl 	_SRAEmpty 					; if zero, return empty address.
.010691					_SRAContent:
.010691	5a		phy				phy 								; save the new string address on stack
.010692	7a		ply				ply 								; restore and save the new string address
.010693	5a		phy				phy
.010694	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.010697	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.01069a	1a		inc a				inc 	a 							; we want one more, for the length byte.
.01069b	85 36		sta $36				sta 	DTemp5 						; the length required is stored in DTemp5.
.01069d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.0106a0	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106a2	a8		tay				tay
.0106a3					_SRACheckUnused:
.0106a3	b9 00 00	lda $0000,y			lda 	$0000,y 					; this is the offset/size to the next (actually offset is 2 more)
.0106a6	f0 22		beq $0106ca			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106a8	10 0f		bpl $0106b9			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106aa	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size of this bhunk.
.0106ad	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106af	90 08		bcc $0106b9			bcc 	_SRACheckNext 				; too small, go and look at the next block.
.0106b1	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with bit 15 cleared.
.0106b4	98		tya				tya 								; A is the address of the link
.0106b5	1a		inc a				inc 	a 							; add 2, to make this the address of the data space associated
.0106b6	1a		inc a				inc 	a 							; with it.
.0106b7	80 26		bra $0106df			bra 	_SRACopyA 					; go and copy it there.
.0106b9					_SRACheckNext:
.0106b9	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15 out, this is the size of the block.
.0106bc	29 ff 7f	and #$7fff			and 	#$7FFF
.0106bf	85 38		sta $38				sta 	DTemp5+2 					; save it in temporary space.
.0106c1	98		tya				tya 								; add to the offset to the current address
.0106c2	18		clc				clc
.0106c3	65 38		adc $38				adc 	DTemp5+2
.0106c5	1a		inc a				inc 	a 							; add 2 more for the link itself, the link is 2 less than the offset.
.0106c6	1a		inc a				inc 	a
.0106c7	a8		tay				tay 								; put it in Y, go check that one.
.0106c8	80 d9		bra $0106a3			bra 	_SRACheckUnused
.0106ca					_SRAAllocate:
.0106ca	7a		ply				ply 								; get the new string address back.
.0106cb	5a		phy				phy 								; push it back on the stack.
.0106cc	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106cf	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106d2	1a		inc a				inc 	a
.0106d3	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106d4	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106d7	90 03		bcc $0106dc			bcc 	_SRANoCarry 				; can't do more than this.
.0106d9	a9 ff 00	lda #$00ff			lda 	#255
.0106dc					_SRANoCarry:
.0106dc	20 0a 07	jsr $01070a			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106df					_SRACopyA:
.0106df	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106e2	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106e5	aa		tax				tax 								; where we are copying to.
.0106e6	7a		ply				ply 								; where we're coming from.
.0106e7	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106ea	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106ed	1a		inc a				inc 	a
.0106ee	85 36		sta $36				sta 	DTemp5 						; save counter.
.0106f0	e2 20		sep #$20			sep 	#$20
.0106f2					_SRACopy:
.0106f2	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.0106f5	9d 00 00	sta $0000,x			sta 	@W$0000,x
.0106f8	c8		iny				iny
.0106f9	e8		inx				inx
.0106fa	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.0106fc	d0 f4		bne $0106f2			bne 	_SRACopy
.0106fe	c2 20		rep #$20			rep 	#$20
.010700	fa		plx				plx 								; restore X and exit.
.010701	60		rts				rts
.010702					_SRAEmpty:
.010702	9e 00 00	stz $0000,x			stz 	@w$0000,x
.010705	9e 02 00	stz $0002,x			stz 	@w$0002,x
.010708	fa		plx				plx
.010709	60		rts				rts
.01070a					StringAllocateSpace:
.01070a	da		phx				phx									; save XY
.01070b	5a		phy				phy
.01070c	48		pha				pha 								; save the length.
.01070d	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.01070e	1a		inc a				inc 	a
.01070f	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.010712	38		sec				sec 								; add 1 (2's complement)
.010713	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010716	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010718	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.01071a	a8		tay				tay 								; put in Y
.01071b	68		pla				pla 								; restore the length
.01071c	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.01071f	98		tya				tya 								; get the address back
.010720	1a		inc a				inc 	a 							; skip over the link
.010721	1a		inc a				inc 	a
.010722	7a		ply				ply									; restore YX and exit.
.010723	fa		plx				plx
.010724	60		rts				rts
.010725					StringRelease:
.010725	5a		phy				phy									; save Y
.010726	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.010729	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it
.01072b	90 0c		bcc $010739			bcc 	_SASNoRelease
.01072d	a8		tay				tay 								; the address of the old string
.01072e	88		dey				dey 								; point to the link.
.01072f	88		dey				dey
.010730	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.010733	09 00 80	ora #$8000			ora 	#$8000
.010736	99 00 00	sta $0000,y			sta 	@w$0000,y
.010739					_SASNoRelease:
.010739	7a		ply				ply
.01073a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.01073b					StringTempAllocate:
.01073b	48		pha				pha
.01073c	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01073e	d0 09		bne $010749			bne 	_STANoReset
.010740	5a		phy				phy 								; reset the temp string pointer.
.010741	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010744	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010746	85 16		sta $16				sta 	DTempStringPointer
.010748	7a		ply				ply
.010749					_STANoReset:
.010749	68		pla				pla 								; get length.
.01074a	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01074d	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010750	18		clc				clc 								; this adds one, for the length.
.010751	65 16		adc $16				adc 	DTempStringPointer
.010753	85 16		sta $16				sta 	DTempStringPointer
.010755	48		pha				pha 								; save start address
.010756	a9 00 00	lda #$0000			lda 	#$0000
.010759	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01075b	92 16		sta ($16)			sta		(DTempStringPointer)
.01075d	c2 20		rep #$20			rep 	#$20
.01075f	68		pla				pla 								; restore start address
.010760	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010762	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010764	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010766	60		rts				rts
.010767					StringWriteCharacter:
.010767	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010769	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.01076b	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01076d	1a		inc a				inc 	a
.01076e	92 18		sta ($18)			sta 	(DStartTempString)
.010770	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010772	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010774	60		rts				rts
.010775					StringCreateCopy:
.010775	a8		tay				tay 								; put pointer to string in Y
.010776	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010779	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01077c	f0 17		beq $010795			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01077e	da		phx				phx 								; save X and put the character count in X
.01077f	aa		tax				tax
.010780					_SCCCopy:
.010780	c8		iny				iny 								; advance and read (first time skips length)
.010781	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010783	b9 00 00	lda $0000,y			lda 	$0000,y
.010786	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010788	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01078a	1a		inc a				inc 	a
.01078b	92 18		sta ($18)			sta 	(DStartTempString)
.01078d	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01078f	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010791	ca		dex				dex 								; do X times
.010792	d0 ec		bne $010780			bne 	_SCCCopy
.010794	fa		plx				plx
.010795					_SCCExit:
.010795	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.010796					Tokenise:
.010796	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010798	84 0a		sty $0a				sty 	DTemp1+2
.01079a	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.01079d	18		clc				clc
.01079e	65 02		adc $02				adc 	DBaseAddress
.0107a0	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0107a2	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0107a5	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0107a8					_TOKCap:
.0107a8	c8		iny				iny 								; go to next
.0107a9	b7 08		lda [$08],y			lda 	[DTemp1],y
.0107ab	29 ff 00	and #$00ff			and 	#$00FF
.0107ae	f0 22		beq $0107d2			beq 	_TOKEndCap
.0107b0	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107b3	d0 01		bne $0107b6			bne 	_TOKNotQuote
.0107b5	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107b6					_TOKNotQuote:
.0107b6	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107b9	90 ed		bcc $0107a8			bcc 	_TOKCap
.0107bb	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107be	b0 e8		bcs $0107a8			bcs 	_TOKCap
.0107c0	8a		txa				txa 								; check if in quotes
.0107c1	4a		lsr a				lsr 	a
.0107c2	b0 e4		bcs $0107a8			bcs 	_TOKCap
.0107c4	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107c6	38		sec				sec
.0107c7	e9 20 00	sbc #$0020			sbc 	#32
.0107ca	e2 20		sep #$20			sep 	#$20
.0107cc	97 08		sta [$08],y			sta 	[DTemp1],y
.0107ce	c2 20		rep #$20			rep 	#$20
.0107d0	80 d6		bra $0107a8			bra 	_TOKCap
.0107d2					_TOKEndCap:
.0107d2	c6 08		dec $08				dec 	DTemp1
.0107d4					_TOKMainNext:
.0107d4	e6 08		inc $08				inc 	DTemp1
.0107d6					_TOKMainLoop:
.0107d6	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107d8	29 ff 00	and #$00ff			and 	#$00FF
.0107db	c9 20 00	cmp #$0020			cmp 	#32
.0107de	90 1d		bcc $0107fd			bcc 	_TOKExit 					; 0-31 exit.
.0107e0	f0 f2		beq $0107d4			beq 	_TOKMainNext 				; 32 (space) skip.
.0107e2	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107e5	f0 1d		beq $010804			beq 	_TOKString
.0107e7	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107ea	90 1d		bcc $010809			bcc 	_TOKPunctuation
.0107ec	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107ef	90 42		bcc $010833			bcc 	_TOKNumber
.0107f1	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107f4	90 13		bcc $010809			bcc 	_TOKPunctuation
.0107f6	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107f9	90 3d		bcc $010838			bcc 	_TOKIdentifier
.0107fb	80 0c		bra $010809			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107fd					_TOKExit:
.0107fd	a9 00 00	lda #$0000			lda 	#$0000
.010800	20 3d 08	jsr $01083d			jsr 	TOKWriteToken
.010803	60		rts				rts
.010804					_TOKString:
.010804	20 db 08	jsr $0108db			jsr 	TOKQuotedString
.010807	80 cd		bra $0107d6			bra 	_TOKMainLoop
.010809					_TOKPunctuation:
.010809	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01080c	20 42 09	jsr $010942			jsr 	TOKKeywordSearch
.01080f	b0 1d		bcs $01082e			bcs 	_TOKFoundPunctuation
.010811	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010814	20 42 09	jsr $010942			jsr 	TOKKeywordSearch
.010817	b0 15		bcs $01082e			bcs 	_TOKFoundPunctuation
.010819	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01081c	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010824	61 72 73 65 20 6c 69 6e 65 00
.01082e					_TOKFoundPunctuation:
.01082e	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; output the token and go round again.
.010831	80 a3		bra $0107d6			bra 	_TOKMainLoop
.010833					_TOKNumber:
.010833	20 5c 08	jsr $01085c			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010836	80 9e		bra $0107d6			bra 	_TOKMainLoop
.010838					_TOKIdentifier:
.010838	20 9d 09	jsr $01099d			jsr 	TOKIdentifier
.01083b	80 99		bra $0107d6			bra 	_TOKMainLoop
.01083d					TOKWriteToken:
.01083d	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01083f	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010841	e6 0c		inc $0c				inc 	DTemp2
.010843	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010845	29 ff 00	and #$00ff			and 	#$00FF
.010848	f0 01		beq $01084b			beq 	_TOKWriteOverflow
.01084a	60		rts				rts
.01084b					_TOKWriteOverflow:
.01084b	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01084e	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010856	20 6c 6f 6e 67 00
.01085c					TOKInteger:
.01085c	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.01085e	64 26		stz $26				stz 	DTemp3+2
.010860					_TOKINLoop:
.010860	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010862	48		pha				pha
.010863	a5 24		lda $24				lda 	DTemp3
.010865	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010867	26 26		rol $26				rol 	DTemp3+2
.010869	06 24		asl $24				asl 	DTemp3
.01086b	26 26		rol $26				rol 	DTemp3+2
.01086d	18		clc				clc
.01086e	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010870	85 24		sta $24				sta 	DTemp3
.010872	68		pla				pla
.010873	65 26		adc $26				adc 	DTemp3+2
.010875	85 26		sta $26				sta 	DTemp3+2
.010877	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010879	26 26		rol $26				rol 	DTemp3+2
.01087b	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.01087d	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010880	d0 44		bne $0108c6			bne 	_TOKINSize
.010882	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010884	29 0f 00	and #$000f			and 	#15
.010887	18		clc				clc
.010888	65 24		adc $24				adc 	DTemp3 						; add to the running count
.01088a	85 24		sta $24				sta 	DTemp3
.01088c	90 02		bcc $010890			bcc 	_TOKINNoCarry
.01088e	e6 26		inc $26				inc 	DTemp3+2
.010890					_TOKINNoCarry:
.010890	e6 08		inc $08				inc 	DTemp1 						; look at next
.010892	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.010894	29 ff 00	and #$00ff			and 	#$00FF
.010897	c9 30 00	cmp #$0030			cmp 	#"0"
.01089a	90 05		bcc $0108a1			bcc 	_TOKINGotInteger
.01089c	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01089f	90 bf		bcc $010860			bcc		_TOKINLoop
.0108a1					_TOKINGotInteger:
.0108a1	a5 24		lda $24				lda 	DTemp3 						; lower word
.0108a3	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0108a6	18		clc				clc
.0108a7	69 00 40	adc #$4000			adc 	#$4000
.0108aa	48		pha				pha 								; save it.
.0108ab	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108ad	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108af	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108b1	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108b4	b0 10		bcs $0108c6			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108b6	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108b9	f0 06		beq $0108c1			beq 	_TOKINNoShift 				; don't need constant shift.
.0108bb	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108be	20 3d 08	jsr $01083d			jsr 	TOKWriteToken
.0108c1					_TOKINNoShift:
.0108c1	68		pla				pla 								; get lower its token
.0108c2	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; output it
.0108c5	60		rts				rts
.0108c6					_TOKINSize:
.0108c6	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0108c9	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108d1	74 6f 6f 20 6c 61 72 67 65 00
.0108db					TOKQuotedString:
.0108db	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108dd	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108df	85 32		sta $32				sta 	DTemp4
.0108e1	a5 0a		lda $0a				lda 	DTemp1+2
.0108e3	85 34		sta $34				sta 	DTemp4+2
.0108e5					_TOKQFindSize:
.0108e5	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108e7	e6 08		inc $08				inc 	DTemp1
.0108e9	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108ec	f0 3b		beq $010929			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108ee	c9 22 00	cmp #$0022			cmp 	#34
.0108f1	d0 f2		bne $0108e5			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108f3	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108f5	38		sec				sec
.0108f6	e5 32		sbc $32				sbc 	DTemp4
.0108f8	3a		dec a				dec 	a 							; one less character for closing quote
.0108f9	85 26		sta $26				sta 	DTemp3+2
.0108fb	18		clc				clc
.0108fc	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108ff	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010902	20 3d 08	jsr $01083d			jsr 	TOKWriteToken
.010905	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010907	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; effectively a byte-write.
.01090a	c6 0c		dec $0c				dec 	DTemp2
.01090c	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.01090e	f0 0f		beq $01091f			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010910					_TOKQWriteString:
.010910	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010912	29 ff 00	and #$00ff			and 	#$00FF
.010915	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; effectively a byte-write.
.010918	c6 0c		dec $0c				dec 	DTemp2
.01091a	e6 32		inc $32				inc 	DTemp4 						; advance character
.01091c	ca		dex				dex 								; do X times
.01091d	d0 f1		bne $010910			bne 	_TOKQWriteString
.01091f					_TOKQWriteEnd:
.01091f	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010921	29 01 00	and #$0001			and 	#1
.010924	f0 02		beq $010928			beq 	_TOKQExit
.010926	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010928					_TOKQExit:
.010928	60		rts				rts
.010929					_TOQImbalance:
.010929	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01092c	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010934	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010942					TOKKeywordSearch:
.010942	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010944	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010947	85 34		sta $34				sta 	DTemp4+2
.010949	a2 00 00	ldx #$0000			ldx 	#0
.01094c					_TOKScan:
.01094c	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010950	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010953	f0 46		beq $01099b			beq 	_TOKFail 					; if zero then we have failed.
.010955	3a		dec a				dec 	a 							; -1 gives the length.
.010956	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010958	d0 2f		bne $010989			bne 	_TOKNext 					; no, then skip to next token.
.01095a	da		phx				phx 								; save X
.01095b	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.01095e					_TOKCompare:
.01095e	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010960	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.010964	29 ff 00	and #$00ff			and 	#$00FF
.010967	d0 1f		bne $010988			bne 	_TOKPopNext 				; if different, pop and goto next.
.010969	e8		inx				inx 								; bump X and Y.
.01096a	c8		iny				iny
.01096b	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.01096d	d0 ef		bne $01095e			bne 	_TOKCompare
.01096f	98		tya				tya 								; add length to the text pointer
.010970	18		clc				clc
.010971	65 08		adc $08				adc 	DTemp1
.010973	85 08		sta $08				sta 	DTemp1
.010975	fa		plx				plx 								; restore X.
.010976	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.01097a	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.01097d	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.01097e	4a		lsr a				lsr		a
.01097f	4a		lsr a				lsr 	a
.010980	eb		xba				xba
.010981	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010983	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010986	38		sec				sec
.010987	60		rts				rts
.010988					_TOKPopNext:
.010988	fa		plx				plx 								; restore X.
.010989					_TOKNext:
.010989	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.01098d	29 0f 00	and #$000f			and 	#$000F
.010990	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.010992	8a		txa				txa
.010993	18		clc				clc
.010994	65 14		adc $14				adc 	DSignCount
.010996	aa		tax				tax
.010997	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010999	80 b1		bra $01094c			bra 	_TOKScan
.01099b					_TOKFail:
.01099b	18		clc				clc
.01099c	60		rts				rts
.01099d					TOKIdentifier:
.01099d	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.01099f	85 24		sta $24				sta 	DTemp3
.0109a1					_TOKIFindLength:
.0109a1	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0109a3	a7 08		lda [$08]			lda 	[DTemp1]
.0109a5	29 ff 00	and #$00ff			and 	#$00FF
.0109a8	20 48 0a	jsr $010a48			jsr 	TOKIsIdentifierCharacter
.0109ab	b0 f4		bcs $0109a1			bcs 	_TOKIFindLength
.0109ad	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109af	38		sec				sec
.0109b0	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109b2	85 36		sta $36				sta 	DTemp5
.0109b4	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109b6	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109b9	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109bb	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109bd	29 ff 00	and #$00ff			and 	#$00FF
.0109c0	c9 24 00	cmp #$0024			cmp 	#"$"
.0109c3	d0 0b		bne $0109d0			bne 	_TOKINotString
.0109c5	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109c7	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109c9	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109cb	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109ce	85 26		sta $26				sta 	DTemp3+2
.0109d0					_TOKINotString:
.0109d0	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109d2	29 ff 00	and #$00ff			and 	#$00FF
.0109d5	c9 28 00	cmp #$0028			cmp 	#"("
.0109d8	d0 0b		bne $0109e5			bne 	_TOKINotArray
.0109da	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109dc	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109de	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109e0	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109e3	85 26		sta $26				sta 	DTemp3+2
.0109e5					_TOKINotArray:
.0109e5	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109e7	85 08		sta $08				sta 	DTemp1
.0109e9	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109eb	20 42 09	jsr $010942			jsr 	TOKKeywordSearch
.0109ee	90 04		bcc $0109f4			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109f0	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109f3	60		rts				rts
.0109f4					_TOKIIdentifier:
.0109f4	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109f6	e6 08		inc $08				inc 	DTemp1
.0109f8	20 34 0a	jsr $010a34			jsr		_TOKIToConstant 			; convert to range 0-35
.0109fb	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109fd	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109ff	f0 1d		beq $010a1e			beq 	_TOKINoSecond
.010a01	48		pha				pha 								; save current on stack.
.010a02	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010a04	e6 08		inc $08				inc 	DTemp1
.010a06	20 34 0a	jsr $010a34			jsr		_TOKIToConstant 			; convert to range 0-35
.010a09	85 14		sta $14				sta 	DSignCount 					; save it.
.010a0b	0a		asl a				asl 	a 							; x 4
.010a0c	0a		asl a				asl 	a
.010a0d	65 14		adc $14				adc 	DSignCount 					; x 5
.010a0f	0a		asl a				asl 	a 							; x 10
.010a10	65 14		adc $14				adc 	DSignCount 					; x 11
.010a12	0a		asl a				asl 	a 							; x 22
.010a13	0a		asl a				asl 	a 							; x 44
.010a14	65 14		adc $14				adc 	DSignCount 					; x 45
.010a16	85 14		sta $14				sta 	DSignCount
.010a18	68		pla				pla 								; get old token and add x 45
.010a19	18		clc				clc
.010a1a	65 14		adc $14				adc 	DSignCount
.010a1c	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a1e					_TOKINoSecond:
.010a1e	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a20	f0 03		beq $010a25			beq 	_TOKINotLast				; if yes
.010a22	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a25					_TOKINotLast:
.010a25	20 3d 08	jsr $01083d			jsr 	TOKWriteToken 				; output the token
.010a28	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a2a	d0 c8		bne $0109f4			bne 	_TOKIIdentifier
.010a2c					_TOKIOut:
.010a2c	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a2e	18		clc				clc
.010a2f	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a31	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a33	60		rts				rts
.010a34					_TOKIToConstant:
.010a34	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a37	c9 41 00	cmp #$0041			cmp 	#65
.010a3a	90 04		bcc $010a40			bcc 	_TOKITInteger
.010a3c	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a3f	60		rts				rts
.010a40					_TOKITInteger:
.010a40	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a43	18		clc				clc
.010a44	69 1b 00	adc #$001b			adc 	#27
.010a47	60		rts				rts
.010a48					TOKIsIdentifierCharacter:
.010a48	c9 30 00	cmp #$0030			cmp 	#"0"
.010a4b	90 0f		bcc $010a5c			bcc 	_TOKIIFail
.010a4d	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a50	90 0c		bcc $010a5e			bcc 	_TOKIIOk
.010a52	c9 41 00	cmp #$0041			cmp 	#"A"
.010a55	90 05		bcc $010a5c			bcc 	_TOKIIFail
.010a57	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a5a	90 02		bcc $010a5e			bcc 	_TOKIIOk
.010a5c					_TOKIIFail:
.010a5c	18		clc				clc
.010a5d	60		rts				rts
.010a5e					_TOKIIOk:
.010a5e	38		sec				sec
.010a5f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a60					Binary_Add:
.010a60	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a62	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a64	30 12		bmi $010a78		bmi 	_BATypeError
.010a66	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a68	30 3f		bmi $010aa9		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a6a	18		clc			clc 										; add the results
.010a6b	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a6d	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a6f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a71	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a73	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a75	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a77	60		rts			rts
.010a78					_BATypeError:
.010a78	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010a7b	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a83	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a93	65 73 00
.010a96					_BALengthError:
.010a96	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010a99	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010aa1	6f 6f 20 6c 6f 6e 67 00
.010aa9					_BAConcatenateString:
.010aa9	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010aab	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010aad	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010aaf	85 0c		sta $0c			sta 	DTemp2
.010ab1	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010ab3	18		clc			clc 										; work out the total length
.010ab4	b2 08		lda ($08)		lda 	(DTemp1)
.010ab6	72 0c		adc ($0c)		adc 	(DTemp2)
.010ab8	b0 14		bcs $010ace		bcs 	_BAConcatLengthError 				; string is too long.
.010aba	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010abc	20 3b 07	jsr $01073b		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010abf	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010ac1	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ac3	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010ac5	20 75 07	jsr $010775		jsr 	StringCreateCopy
.010ac8	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010aca	20 75 07	jsr $010775		jsr 	StringCreateCopy
.010acd	60		rts			rts
.010ace					_BAConcatLengthError:
.010ace	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010ad1	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ad9	6f 6f 20 6c 6f 6e 67 00
.010ae1					Binary_Subtract:
.010ae1	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010ae4	38		sec			sec
.010ae5	b5 00		lda $00,x		lda		EXSValueL+0,x
.010ae7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae9	95 00		sta $00,x		sta 	EXSValueL+0,x
.010aeb	b5 20		lda $20,x		lda		EXSValueH+0,x
.010aed	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010aef	95 20		sta $20,x		sta 	EXSValueH+0,x
.010af1	60		rts			rts
.010af2					Binary_ShiftRight:
.010af2	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010af5	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010af7	29 3f 00	and #$003f		and 	#63
.010afa	f0 07		beq $010b03		beq		_Binary_SRExit
.010afc					_Binary_SRLoop:
.010afc	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010afe	76 00		ror $00,x		ror 	EXSValueL+0,x
.010b00	3a		dec a			dec 	a
.010b01	d0 f9		bne $010afc		bne 	_Binary_SRLoop
.010b03					_Binary_SRExit:
.010b03	60		rts			rts
.010b04					Binary_ShiftLeft:
.010b04	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010b07	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b09	29 3f 00	and #$003f		and 	#63
.010b0c	f0 07		beq $010b15		beq		_Binary_SLExit
.010b0e					_Binary_SLLoop:
.010b0e	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b10	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b12	3a		dec a			dec 	a
.010b13	d0 f9		bne $010b0e		bne 	_Binary_SLLoop
.010b15					_Binary_SLExit:
.010b15	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010b16					Binary_And:
.010b16	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010b19	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b1b	35 02		and $02,x		and 	EXSValueL+2,x
.010b1d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b1f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b21	35 22		and $22,x		and 	EXSValueH+2,x
.010b23	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b25	60		rts			rts
.010b26					Binary_Or:
.010b26	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010b29	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b2b	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b2d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b2f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b31	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b33	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b35	60		rts			rts
.010b36					Binary_Xor:
.010b36	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010b39	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b3b	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b3d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b3f	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b41	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b43	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b45	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b46					Binary_Equals:
.010b46	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b49	b0 0e		bcs $010b59		bcs 	_BEString
.010b4b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b4d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b4f	d0 4f		bne $010ba0		bne 	Compare_Fail
.010b51	b5 20		lda $20,x		lda 	EXSValueH,x
.010b53	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b55	d0 49		bne $010ba0		bne 	Compare_Fail
.010b57	80 3f		bra $010b98		bra 	Compare_Succeed
.010b59					_BEString:
.010b59	09 00 00	ora #$0000		ora 	#$0000
.010b5c	f0 3a		beq $010b98		beq 	Compare_Succeed
.010b5e	80 40		bra $010ba0		bra 	Compare_Fail
.010b60					Binary_NotEquals:
.010b60	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b63	b0 0e		bcs $010b73		bcs 	_BNEString
.010b65	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b67	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b69	d0 2d		bne $010b98		bne 	Compare_Succeed
.010b6b	b5 20		lda $20,x		lda 	EXSValueH,x
.010b6d	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b6f	d0 27		bne $010b98		bne 	Compare_Succeed
.010b71	80 2d		bra $010ba0		bra 	Compare_Fail
.010b73					_BNEString:
.010b73	09 00 00	ora #$0000		ora 	#$0000
.010b76	d0 20		bne $010b98		bne 	Compare_Succeed
.010b78	80 26		bra $010ba0		bra 	Compare_Fail
.010b7a					Binary_Less:
.010b7a	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b7d	b0 12		bcs $010b91		bcs 	_BLString
.010b7f	38		sec			sec
.010b80	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b82	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b84	b5 20		lda $20,x		lda 	EXSValueH,x
.010b86	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b88	50 03		bvc $010b8d		bvc 	*+5
.010b8a	49 00 80	eor #$8000		eor 	#$8000
.010b8d	30 09		bmi $010b98		bmi 	Compare_Succeed
.010b8f	80 0f		bra $010ba0		bra 	Compare_Fail
.010b91					_BLString:
.010b91	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b94	f0 02		beq $010b98		beq 	Compare_Succeed
.010b96	80 08		bra $010ba0		bra 	Compare_Fail
.010b98					Compare_Succeed:
.010b98	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b9b	95 00		sta $00,x		sta 	EXSValueL,x
.010b9d	95 20		sta $20,x		sta 	EXSValueH,x
.010b9f	60		rts			rts
.010ba0					Compare_Fail:
.010ba0	74 00		stz $00,x		stz 	EXSValueL,x
.010ba2	74 20		stz $20,x		stz 	EXSValueH,x
.010ba4	60		rts			rts
.010ba5					Binary_GreaterEqual:
.010ba5	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ba8	b0 12		bcs $010bbc		bcs 	_BGEString
.010baa	38		sec			sec
.010bab	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010bad	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010baf	b5 20		lda $20,x		lda 	EXSValueH,x
.010bb1	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bb3	50 03		bvc $010bb8		bvc 	*+5
.010bb5	49 00 80	eor #$8000		eor 	#$8000
.010bb8	10 de		bpl $010b98		bpl 	Compare_Succeed
.010bba	80 e4		bra $010ba0		bra 	Compare_Fail
.010bbc					_BGEString:
.010bbc	09 00 00	ora #$0000		ora 	#$0000
.010bbf	10 d7		bpl $010b98		bpl 	Compare_Succeed
.010bc1	80 dd		bra $010ba0		bra 	Compare_Fail
.010bc3					Binary_LessEqual:
.010bc3	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bc6	b0 12		bcs $010bda		bcs 	_BLEString
.010bc8	18		clc			clc 									; numeric <= signed
.010bc9	b5 00		lda $00,x		lda 	EXSValueL,x
.010bcb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bcd	b5 20		lda $20,x		lda 	EXSValueH,x
.010bcf	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bd1	50 03		bvc $010bd6		bvc 	*+5
.010bd3	49 00 80	eor #$8000		eor 	#$8000
.010bd6	30 c0		bmi $010b98		bmi 	Compare_Succeed
.010bd8	80 c6		bra $010ba0		bra 	Compare_Fail
.010bda					_BLEString:
.010bda	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bdd	d0 b9		bne $010b98		bne 	Compare_Succeed
.010bdf	80 bf		bra $010ba0		bra 	Compare_Fail
.010be1					Binary_Greater:
.010be1	20 ff 0b	jsr $010bff		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010be4	b0 12		bcs $010bf8		bcs 	_BGString
.010be6	18		clc			clc 									; numeric > signed
.010be7	b5 00		lda $00,x		lda 	EXSValueL,x
.010be9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010beb	b5 20		lda $20,x		lda 	EXSValueH,x
.010bed	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bef	50 03		bvc $010bf4		bvc 	*+5
.010bf1	49 00 80	eor #$8000		eor 	#$8000
.010bf4	10 a2		bpl $010b98		bpl 	Compare_Succeed
.010bf6	80 a8		bra $010ba0		bra 	Compare_Fail
.010bf8					_BGString:
.010bf8	c9 01 00	cmp #$0001		cmp 	#$0001
.010bfb	f0 9b		beq $010b98		beq 	Compare_Succeed
.010bfd	80 a1		bra $010ba0		bra 	Compare_Fail
.010bff					CompareTypeCheck:
.010bff	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010c01	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010c03	30 06		bmi $010c0b		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010c05	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010c07	30 1c		bmi $010c25		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010c09	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010c0a	60		rts			rts
.010c0b					_CTCFail:
.010c0b	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010c0e	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c16	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c25					_CTCStringCompare:
.010c25	20 22 06	jsr $010622		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c28	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c2a	85 08		sta $08			sta 	DTemp1
.010c2c	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c2e	85 0c		sta $0c			sta 	DTemp2
.010c30	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c33	a8		tay			tay
.010c34	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c36	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c38	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c3a	90 02		bcc $010c3e		bcc 	_CTCSmallest
.010c3c	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c3e					_CTCSmallest:
.010c3e	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c40					_CTCCompare:
.010c40	c8		iny			iny 									; look at next character (done first, first char is size)
.010c41	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c43	30 16		bmi $010c5b		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c45	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c47	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c49	f0 f5		beq $010c40		beq 	_CTCCompare 					; if zero, try the next character.
.010c4b	b0 07		bcs $010c54		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c4d					_CTCLess:
.010c4d	c2 20		rep #$20		rep 	#$20
.010c4f	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c52	80 14		bra $010c68		bra 	_CTCExit
.010c54					_CTCGreater:
.010c54	c2 20		rep #$20		rep 	#$20
.010c56	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c59	80 0d		bra $010c68		bra 	_CTCExit
.010c5b					_CTCEqualSoFar:
.010c5b	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c5d	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c5f	90 ec		bcc $010c4d		bcc 	_CTCLess
.010c61	d0 f1		bne $010c54		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c63	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c65	a9 00 00	lda #$0000		lda 	#$0000
.010c68					_CTCExit:
.010c68	38		sec			sec 									; return with CS indicating string comparison.
.010c69	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c6a					Binary_Divide:
.010c6a	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010c6d	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c6f	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c71	d0 14		bne $010c87		bne 	_BinaryDivide_Ok
.010c73	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010c76	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c7e	20 62 79 20 7a 65 72 6f 00
.010c87					_BinaryDivide_Ok:
.010c87	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c89	64 0a		stz $0a			stz 	DTemp1+2
.010c8b	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c8d	5a		phy			phy 										; save Y (bit counter)
.010c8e	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c90	10 07		bpl $010c99		bpl 	_BinaryDivide_RightDone
.010c92	e8		inx			inx
.010c93	e8		inx			inx
.010c94	20 cf 0c	jsr $010ccf		jsr 	Binary_DivNegate
.010c97	ca		dex			dex
.010c98	ca		dex			dex
.010c99					_BinaryDivide_RightDone:
.010c99	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c9b	10 03		bpl $010ca0		bpl 	_BinaryDivide_LeftDone
.010c9d	20 cf 0c	jsr $010ccf		jsr 	Binary_DivNegate
.010ca0					_BinaryDivide_LeftDone:
.010ca0	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010ca3					_BinaryDivide_Loop:
.010ca3	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010ca5	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ca7	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010ca9	26 0a		rol $0a			rol 	DTemp1+2
.010cab	38		sec			sec											; calculate A-M
.010cac	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010cae	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010cb0	85 0c		sta $0c			sta 	DTemp2
.010cb2	a5 0a		lda $0a			lda 	DTemp1+2
.010cb4	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010cb6	90 08		bcc $010cc0		bcc 	_Binary_NoSubract 					; if A < M skip this
.010cb8	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010cba	a5 0c		lda $0c			lda 	DTemp2
.010cbc	85 08		sta $08			sta 	DTemp1+0
.010cbe	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cc0					_Binary_NoSubract:
.010cc0	88		dey			dey 										; do it 32 times.
.010cc1	d0 e0		bne $010ca3		bne 	_BinaryDivide_Loop
.010cc3					_BinaryDivide_Exit:
.010cc3	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cc5	29 01 00	and #$0001		and 	#1
.010cc8	f0 03		beq $010ccd		beq 	_BinaryDivide_Exit2
.010cca	20 cf 0c	jsr $010ccf		jsr 	Binary_DivNegate
.010ccd					_BinaryDivide_Exit2:
.010ccd	7a		ply			ply 										; restore Y
.010cce	60		rts			rts
.010ccf					Binary_DivNegate:
.010ccf	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cd1	38		sec			sec 										; negate the value at stack X.
.010cd2	a9 00 00	lda #$0000		lda 	#$0000
.010cd5	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cd7	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cd9	a9 00 00	lda #$0000		lda 	#$0000
.010cdc	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cde	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ce0	60		rts			rts
.010ce1					Binary_Modulus:
.010ce1	20 6a 0c	jsr $010c6a		jsr 	Binary_Divide 						; do the divide
.010ce4	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010ce6	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ce8	a5 0a		lda $0a			lda 	DTemp1+2
.010cea	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cec	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010ced					Binary_Multiply:
.010ced	20 02 06	jsr $010602		jsr 	CheckBothNumeric 					; check both values are numeric
.010cf0	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cf2	85 08		sta $08			sta 	DTemp1
.010cf4	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cf6	85 0a		sta $0a			sta		DTemp1+2
.010cf8	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010cfa	74 20		stz $20,x		stz 	EXSValueH+0,x
.010cfc					_BinaryMultiply_Loop:
.010cfc	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010cfe	05 0a		ora $0a			ora 	DTemp1+2
.010d00	f0 1e		beq $010d20		beq 	_BinaryMultiply_Exit
.010d02	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010d04	29 01 00	and #$0001		and 	#1
.010d07	f0 0d		beq $010d16		beq 	_BinaryMultiply_NoAdd
.010d09	18		clc			clc 										; add multiplicand to result.
.010d0a	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d0c	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d0e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d10	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d12	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d14	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d16					_BinaryMultiply_NoAdd:
.010d16	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d18	66 08		ror $08			ror 	DTemp1
.010d1a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d1c	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d1e	80 dc		bra $010cfc		bra 	_BinaryMultiply_Loop 				; go round again.
.010d20					_BinaryMultiply_Exit:
.010d20	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010d21					Function_Len:
.010d21	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010d24	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d27	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010d2a	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d2c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d2f	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d32	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d34	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d36	60		rts				rts
.010d37					Function_Abs:
.010d37	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010d3a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d3d	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010d40	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d42	30 07		bmi $010d4b			bmi 	_FAbsNegative 				; negate it if negative
.010d44	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d46	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d48	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d4a	60		rts				rts
.010d4b					_FAbsNegative:
.010d4b	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d4c	a9 00 00	lda #$0000			lda 	#0
.010d4f	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d51	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d53	a9 00 00	lda #$0000			lda 	#0
.010d56	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d58	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d5a	60		rts				rts
.010d5b					Function_Sgn:
.010d5b	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns integer
.010d5e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d61	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010d64	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d66	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d68	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d6a	30 07		bmi $010d73			bmi 	_FSgnNegative 				; set to -1 if signed
.010d6c	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d6e	f0 02		beq $010d72			beq 	_FSgnExit
.010d70	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d72					_FSgnExit:
.010d72	60		rts				rts
.010d73					_FSgnNegative:
.010d73	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d76	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d78	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d7a	60		rts				rts
.010d7b					Function_Random:
.010d7b	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010d7e	20 22 06	jsr $010622			jsr 	ResetTypeInteger
.010d81	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d83	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d85	d0 0a		bne $010d91			bne 	_Rnd_NotZero
.010d87	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d8a	85 10		sta $10				sta 	DRandom
.010d8c	a9 ea 00	lda #$00ea			lda 	#$EA
.010d8f	85 12		sta $12				sta 	DRandom+2
.010d91					_Rnd_NotZero:
.010d91	20 9c 0d	jsr $010d9c			jsr 	_Rnd_Process 				; call randomiser twice
.010d94	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d96	20 9c 0d	jsr $010d9c			jsr 	_Rnd_Process
.010d99	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d9b	60		rts				rts
.010d9c					_Rnd_Process:
.010d9c	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d9e	26 12		rol $12				rol 	DRandom+2
.010da0	90 0e		bcc $010db0			bcc 	_Rnd_Exit
.010da2	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010da4	49 54 d4	eor #$d454			eor 	#$D454
.010da7	85 10		sta $10				sta 	DRandom
.010da9	a5 12		lda $12				lda 	DRandom+2
.010dab	49 d5 55	eor #$55d5			eor 	#$55D5
.010dae	85 12		sta $12				sta 	DRandom+2
.010db0					_Rnd_Exit:
.010db0	a5 10		lda $10				lda 	DRandom
.010db2	45 12		eor $12				eor 	DRandom+2
.010db4	60		rts				rts
.010db5					Function_Chr:
.010db5	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string
.010db8	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010dbb	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010dbe	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dc1	d0 12		bne $010dd5			bne 	_FCHBad
.010dc3	48		pha				pha  								; save char # on stack
.010dc4	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dc7	20 3b 07	jsr $01073b			jsr 	StringTempAllocate
.010dca	68		pla				pla 								; restore character number
.010dcb	20 67 07	jsr $010767			jsr 	StringWriteCharacter 		; write it out.
.010dce	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dd0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dd2	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dd4	60		rts				rts
.010dd5					_FCHBad:
.010dd5	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010dd8	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010de0	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010ded					Function_Asc:
.010ded	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010df0	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010df3	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010df6	a8		tay				tay 								; string address in Y
.010df7	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010dfa	29 ff 00	and #$00ff			and 	#$00FF
.010dfd	f0 0b		beq $010e0a			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010dff	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010e02	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010e05	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010e07	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e09	60		rts				rts
.010e0a					_FASBad:
.010e0a	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010e0d	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e15	65 20 66 6f 72 20 61 73 63 28 29 00
.010e21					Function_SPC:
.010e21	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string
.010e24	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e27	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010e2a	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e2d	d0 17		bne $010e46			bne 	_FSPBad
.010e2f	48		pha				pha 								; save length
.010e30	20 3b 07	jsr $01073b			jsr 	StringTempAllocate 			; allocate character space
.010e33	7a		ply				ply 								; get count in Y
.010e34	f0 09		beq $010e3f			beq 	_FSPExit 					; if zero, just empty string
.010e36					_FSPCopy:
.010e36	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e39	20 67 07	jsr $010767			jsr 	StringWriteCharacter 		; write it out.
.010e3c	88		dey				dey
.010e3d	d0 f7		bne $010e36			bne 	_FSPCopy	 				; do it Y times
.010e3f					_FSPExit:
.010e3f	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e41	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e43	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e45	60		rts				rts
.010e46					_FSPBad:
.010e46	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010e49	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e51	65 20 66 6f 72 20 73 70 63 28 29 00
.010e5d					Function_Inkey:
.010e5d	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010e60	20 22 06	jsr $010622			jsr 	ResetTypeInteger
.010e63	20 a1 1d	jsr $011da1			jsr 	HWInkey 					; read current key
.010e66	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e68	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e6a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e6b					Function_LEFT:
.010e6b	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.010e6e	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e71	48		pha				pha 								; save string on stack.
.010e72	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; get count
.010e75	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e78	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e7b	d0 6d		bne $010eea			bne 	FNStringParameter
.010e7d	85 08		sta $08				sta 	DTemp1 						; save count.
.010e7f	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket
.010e82	7a		ply				ply 								; Y points to string.
.010e83	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e86	29 ff 00	and #$00ff			and 	#$00FF
.010e89	f0 52		beq $010edd			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e8b	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e8d	f0 55		beq $010ee4			beq 	FNStringY 					; return string in Y if current len = required len.
.010e8f	90 53		bcc $010ee4			bcc 	FNStringY 					; if current < required return whole thing.
.010e91	c8		iny				iny 								; take from here - start of string
.010e92	80 33		bra $010ec7			bra 	FNDTemp1Characters
.010e94					Function_RIGHT:
.010e94	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.010e97	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e9a	48		pha				pha 								; save string on stack.
.010e9b	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; get count
.010e9e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010ea1	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ea4	d0 44		bne $010eea			bne 	FNStringParameter
.010ea6	85 08		sta $08				sta 	DTemp1 						; save count.
.010ea8	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket
.010eab	7a		ply				ply 								; Y points to string.
.010eac	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010eaf	29 ff 00	and #$00ff			and 	#$00FF
.010eb2	f0 29		beq $010edd			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010eb4	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010eb6	f0 2c		beq $010ee4			beq 	FNStringY 					; return string in Y if current len = required len.
.010eb8	90 2a		bcc $010ee4			bcc 	FNStringY 					; if current < required return whole thing.
.010eba	38		sec				sec 								; current-required is the number to skip
.010ebb	e5 08		sbc $08				sbc 	DTemp1
.010ebd	85 0a		sta $0a				sta 	DTemp1+2
.010ebf	98		tya				tya
.010ec0	18		clc				clc
.010ec1	65 0a		adc $0a				adc 	DTemp1+2
.010ec3	a8		tay				tay
.010ec4	c8		iny				iny 								; +1 for the count.
.010ec5	80 00		bra $010ec7			bra 	FNDTemp1Characters
.010ec7					FNDTemp1Characters:
.010ec7	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ec9	f0 12		beq $010edd			beq 	FNStringEmpty 				; if zero, return empty string.
.010ecb	20 3b 07	jsr $01073b			jsr 	StringTempAllocate
.010ece	48		pha				pha 								; save the address
.010ecf					_FND1Loop:
.010ecf	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ed2	20 67 07	jsr $010767			jsr 	StringWriteCharacter
.010ed5	c8		iny				iny
.010ed6	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ed8	d0 f5		bne $010ecf			bne 	_FND1Loop
.010eda	7a		ply				ply 								; string address in Y
.010edb	80 07		bra $010ee4			bra 	FNStringY
.010edd					FNStringEmpty:
.010edd	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ee0	20 3b 07	jsr $01073b			jsr 	StringTempAllocate 			; put address of it in Y
.010ee3	a8		tay				tay
.010ee4					FNStringY:
.010ee4	98		tya				tya
.010ee5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ee7	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ee9	60		rts				rts
.010eea					FNStringParameter:
.010eea	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010eed	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010ef5	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010f02					Function_MID:
.010f02	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.010f05	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f08	48		pha				pha 								; save string on stack.
.010f09	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; get offset (n)
.010f0c	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010f0f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f12	d0 d6		bne $010eea			bne 	FNStringParameter
.010f14	c9 00 00	cmp #$0000			cmp 	#0
.010f17	f0 d1		beq $010eea			beq 	FNStringParameter 			; or zero
.010f19	48		pha				pha 								; save start position on stack.
.010f1a	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f1d	85 08		sta $08				sta 	DTemp1
.010f1f	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f21	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f24	d0 0e		bne $010f34			bne 	_FMINoThird
.010f26	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f28	e6 06		inc $06				inc 	DCodePtr
.010f2a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f2d	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f30	d0 b8		bne $010eea			bne 	FNStringParameter
.010f32	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f34					_FMINoThird:
.010f34	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket
.010f37	68		pla				pla 								; get offset position
.010f38	85 0c		sta $0c				sta 	DTemp2
.010f3a	7a		ply				ply 								; get address of string in Y
.010f3b	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f3e	29 ff 00	and #$00ff			and 	#$00FF
.010f41	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f43	90 98		bcc $010edd			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f45	38		sec				sec 								; calculate number of characters left after
.010f46	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f48	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f49	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f4b	b0 02		bcs $010f4f			bcs 	_FMISufficient
.010f4d	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f4f					_FMISufficient:
.010f4f	98		tya				tya 								; get address
.010f50	18		clc				clc
.010f51	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f53	a8		tay				tay 								; put in Y
.010f54	82 70 ff	brl $010ec7			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f57					Function_Peek:
.010f57	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010f5a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f5d	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010f60	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f62	84 0a		sty $0a				sty 	DTemp1+2
.010f64	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f67	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f69	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f6c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f6e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f70	60		rts				rts
.010f71					Function_Deek:
.010f71	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010f74	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f77	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010f7a	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f7c	84 0a		sty $0a				sty 	DTemp1+2
.010f7e	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f81	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f83	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f85	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f87	60		rts				rts
.010f88					Function_Leek:
.010f88	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010f8b	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f8e	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check )
.010f91	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f93	84 0a		sty $0a				sty 	DTemp1+2
.010f95	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f98	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f9a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f9c	c8		iny				iny
.010f9d	c8		iny				iny
.010f9e	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fa0	95 20		sta $20,x			sta 	EXSValueH+0,x
.010fa2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010fa3					Function_VAL:
.010fa3	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns an integer
.010fa6	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010fa9	48		pha				pha 								; put string address on stack.
.010faa	20 ba 0f	jsr $010fba			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fad	7a		ply				ply 								; get string address back
.010fae	da		phx				phx 								; save X on stack
.010faf	aa		tax				tax 								; base in X
.010fb0	98		tya				tya 								; address in A
.010fb1	20 f4 0f	jsr $010ff4			jsr 	StringToInteger
.010fb4	fa		plx				plx 								; restore X
.010fb5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fb7	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fb9	60		rts				rts
.010fba					VALGetBase:
.010fba	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fbc	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fbf	f0 07		beq $010fc8			beq 	_VGBAlternate
.010fc1	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fc4	a9 0a 00	lda #$000a			lda 	#10
.010fc7	60		rts				rts
.010fc8					_VGBAlternate:
.010fc8	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; skip comma.
.010fcb	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fce	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fd1	d0 0e		bne $010fe1			bne 	_VGBBadBase
.010fd3	c9 02 00	cmp #$0002			cmp 	#2
.010fd6	90 09		bcc $010fe1			bcc 	_VGBBadBase
.010fd8	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fdb	b0 04		bcs $010fe1			bcs 	_VGBBadBase
.010fdd	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fe0	60		rts				rts
.010fe1					_VGBBadBase:
.010fe1	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>010fe4	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fec	65 72 20 42 61 73 65 00
.010ff4					StringToInteger:
.010ff4	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010ff6	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ff8	29 ff 00	and #$00ff			and 	#$00FF
.010ffb	85 26		sta $26				sta 	DTemp3+2
.010ffd	f0 6e		beq $01106d			beq 	_STIError 					; if length zero it's bad.
.010fff	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.011001	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.011003	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.011005	64 0a		stz $0a				stz 	DTemp1+2
.011007	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.011009	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.01100c	48		pha				pha 								; push on stack
.01100d	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011010	d0 06		bne $011018			bne 	_STILoop
.011012	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.011014	c6 26		dec $26				dec 	DTemp3+2					; dec count
.011016	f0 55		beq $01106d			beq 	_STIError 					; if only - then error.
.011018					_STILoop:
.011018	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01101a	20 8c 10	jsr $01108c			jsr 	MultiplyTemp1ByA
.01101d	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.01101f	29 ff 00	and #$00ff			and 	#$00FF
.011022	20 7d 10	jsr $01107d			jsr 	ConvertUpperCase	 		; make U/C
.011025	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.011028	90 43		bcc $01106d			bcc 	_STIError
.01102a	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.01102d	90 0e		bcc $01103d			bcc 	_STIOkay1
.01102f	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011032	90 39		bcc $01106d			bcc 	_STIError
.011034	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.011037	b0 34		bcs $01106d			bcs 	_STIError
.011039	18		clc				clc 								; shift to correct range.
.01103a	69 09 00	adc #$0009			adc 	#9
.01103d					_STIOkay1:
.01103d	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011040	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011042	b0 29		bcs $01106d			bcs 	_STIError
.011044	18		clc				clc 								; add A to DTemp1
.011045	65 08		adc $08				adc 	DTemp1
.011047	85 08		sta $08				sta 	DTemp1
.011049	90 02		bcc $01104d			bcc 	_STINoCarry
.01104b	e6 0a		inc $0a				inc 	DTemp1+2
.01104d					_STINoCarry:
.01104d	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.01104f	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011051	d0 c5		bne $011018			bne 	_STILoop 					; loop back.
.011053	68		pla				pla 								; get optional minus bac
.011054	c9 2d 00	cmp #$002d			cmp 	#"-"
.011057	d0 0f		bne $011068			bne 	_STINotNegative 			; handle the negative character
.011059	38		sec				sec 								; negate DTemp1
.01105a	a9 00 00	lda #$0000			lda 	#0
.01105d	e5 08		sbc $08				sbc 	DTemp1
.01105f	85 08		sta $08				sta 	DTemp1
.011061	a9 00 00	lda #$0000			lda 	#0
.011064	e5 0a		sbc $0a				sbc 	DTemp1+2
.011066	85 0a		sta $0a				sta 	DTemp1+2
.011068					_STINotNegative:
.011068	a5 08		lda $08				lda 	DTemp1 						; get the result
.01106a	a4 0a		ldy $0a				ldy 	DTemp1+2
.01106c	60		rts				rts
.01106d					_STIError:
.01106d	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011070	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>011078	74 61 6e 74 00
.01107d					ConvertUpperCase:
.01107d	c9 61 00	cmp #$0061			cmp 	#'a'
.011080	90 09		bcc $01108b			bcc 	_CUCExit
.011082	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.011085	b0 04		bcs $01108b			bcs 	_CUCExit
.011087	38		sec				sec
.011088	e9 20 00	sbc #$0020			sbc 	#32
.01108b					_CUCExit:
.01108b	60		rts				rts
.01108c					MultiplyTemp1ByA:
.01108c					_MTGeneral:
.01108c	da		phx				phx
.01108d	aa		tax				tax 								; multiplier in X
.01108e	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011090	85 0c		sta $0c				sta 	DTemp2
.011092	a5 0a		lda $0a				lda 	DTemp1+2
.011094	85 0e		sta $0e				sta 	DTemp2+2
.011096	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.011098	64 0a		stz $0a				stz 	DTemp1+2
.01109a	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.01109d					_MTLoop:
.01109d	8a		txa				txa 								; shift X right into C
.01109e	4a		lsr a				lsr 	a
.01109f	aa		tax				tax
.0110a0	90 10		bcc $0110b2			bcc 	_MTNoAdd
.0110a2	18		clc				clc
.0110a3	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0110a5	65 0c		adc $0c				adc 	DTemp2
.0110a7	85 08		sta $08				sta 	DTemp1
.0110a9	a5 0a		lda $0a				lda 	DTemp1+2
.0110ab	65 0e		adc $0e				adc 	DTemp2+2
.0110ad	85 0a		sta $0a				sta 	DTemp1+2
.0110af	90 01		bcc $0110b2			bcc 	_MTNoAdd
.0110b1	c8		iny				iny
.0110b2					_MTNoAdd:
.0110b2	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110b4	26 0e		rol $0e				rol 	DTemp2+2
.0110b6	90 01		bcc $0110b9			bcc 	_MTNoOverflow
.0110b8	c8		iny				iny
.0110b9					_MTNoOverflow:
.0110b9	8a		txa				txa 								; until multiplier is zero.
.0110ba	d0 e1		bne $01109d			bne 	_MTLoop
.0110bc	98		tya				tya
.0110bd	18		clc				clc
.0110be	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110c1	fa		plx				plx 								; restore X
.0110c2	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.0110c3					Function_Str:
.0110c3	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.0110c6	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110c9	48		pha				pha 								; save YA on the stack
.0110ca	5a		phy				phy
.0110cb	20 ba 0f	jsr $010fba			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110ce	85 14		sta $14				sta 	DSignCount
.0110d0	7a		ply				ply 								; YA is the number
.0110d1	68		pla				pla
.0110d2	da		phx				phx
.0110d3	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110d5	20 de 10	jsr $0110de			jsr 	ConvertToString 			; convert it to a string.
.0110d8	fa		plx				plx 								; restore X
.0110d9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110db	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110dd	60		rts				rts
.0110de					ConvertToString:
.0110de	48		pha				pha
.0110df	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110e2	20 3b 07	jsr $01073b			jsr 	StringTempAllocate 			; allocate space for return string.
.0110e5	68		pla				pla
.0110e6					ConvertToStringAlreadyAllocated:
.0110e6	da		phx				phx 								; save X (base)
.0110e7	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110e9	84 26		sty $26				sty 	DTemp3+2
.0110eb	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110ed	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110ef	10 15		bpl $011106			bpl 	_CTSNotNegative
.0110f1	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110f4	20 70 11	jsr $011170			jsr 	CTSOutputA
.0110f7	38		sec				sec 								; negate DTemp3 which is the number
.0110f8	a9 00 00	lda #$0000			lda 	#0
.0110fb	e5 24		sbc $24				sbc 	DTemp3
.0110fd	85 24		sta $24				sta 	DTemp3
.0110ff	a9 00 00	lda #$0000			lda 	#0
.011102	e5 26		sbc $26				sbc 	DTemp3+2
.011104	85 26		sta $26				sta 	DTemp3+2
.011106					_CTSNotNegative:
.011106	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.011109	48		pha				pha
.01110a	a9 00 00	lda #$0000			lda 	#0
.01110d	48		pha				pha
.01110e	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011110	85 08		sta $08				sta 	DTemp1
.011112	64 0a		stz $0a				stz 	DTemp1+2
.011114					_CTSMultiplySubtractor:
.011114	38		sec				sec 								; check number vs subtractor
.011115	a5 24		lda $24				lda 	DTemp3
.011117	e5 08		sbc $08				sbc 	DTemp1
.011119	a5 26		lda $26				lda 	DTemp3+2
.01111b	e5 0a		sbc $0a				sbc 	DTemp1+2
.01111d	90 0f		bcc $01112e			bcc		_CTSScaledUp 				; if >= then scaled up.
.01111f	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011121	48		pha				pha
.011122	a5 0a		lda $0a				lda 	DTemp1+2
.011124	48		pha				pha
.011125	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011127	20 8c 10	jsr $01108c			jsr 	MultiplyTemp1ByA
.01112a	b0 02		bcs $01112e			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01112c	80 e6		bra $011114			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.01112e					_CTSScaledUp:
.01112e	7a		ply				ply 								; YA contains the previous divider.
.01112f	68		pla				pla
.011130	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011133	d0 05		bne $01113a			bne 	_CTSHasDigit
.011135	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011138	f0 20		beq $01115a			beq 	_CTSExit
.01113a					_CTSHasDigit:
.01113a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01113c	84 0e		sty $0e				sty 	DTemp2+2
.01113e	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011141					_CTSSubLoop:
.011141	38		sec				sec 								; subtract subtractor from number
.011142	a5 24		lda $24				lda 	DTemp3
.011144	e5 0c		sbc $0c				sbc 	DTemp2
.011146	a8		tay				tay 								; intermediate in Y
.011147	a5 26		lda $26				lda 	DTemp3+2
.011149	e5 0e		sbc $0e				sbc 	DTemp2+2
.01114b	90 07		bcc $011154			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.01114d	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01114f	84 24		sty $24				sty 	DTemp3
.011151	e8		inx				inx 								; one more subtraction
.011152	80 ed		bra $011141			bra 	_CTSSubLoop 				; try it again.
.011154					_CTSFinishedSubtracting:
.011154	8a		txa				txa 								; convert to ASCII.
.011155	20 63 11	jsr $011163			jsr 	CTSOutputHexDigit 			; write that out.
.011158	80 d4		bra $01112e			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.01115a					_CTSExit:
.01115a	a5 24		lda $24				lda 	DTemp3 						; output last digit
.01115c	20 63 11	jsr $011163			jsr 	CTSOutputHexDigit
.01115f	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011161	fa		plx				plx 								; restore X.
.011162	60		rts				rts
.011163					CTSOutputHexDigit:
.011163	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.011166	90 04		bcc $01116c			bcc 	_CTSNotLetter
.011168	18		clc				clc
.011169	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.01116c					_CTSNotLetter:
.01116c	18		clc				clc
.01116d	69 30 00	adc #$0030			adc 	#48
.011170					CTSOutputA:
.011170	5a		phy				phy 								; save Y, set Y to current pointer
.011171	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011173	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.011176	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011178	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.01117a	1a		inc a				inc 	a
.01117b	92 18		sta ($18)			sta 	(DStartTempString)
.01117d	c2 20		rep #$20			rep 	#$20
.01117f	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011181	7a		ply				ply 								; restore Y and exit.
.011182	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011183					Function_INSTR:
.011183	20 22 06	jsr $010622			jsr 	ResetTypeInteger 			; returns a integer
.011186	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011189	48		pha				pha 								; save string to search
.01118a	20 f9 05	jsr $0105f9			jsr 	ExpectComma
.01118d	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.011190	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket
.011193	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011195	68		pla				pla
.011196	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011198	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.01119a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.01119c	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.01119e	38		sec				sec
.01119f	b2 0c		lda ($0c)			lda 	(DTemp2)
.0111a1	f2 08		sbc ($08)			sbc		(DTemp1)
.0111a3	c2 20		rep #$20			rep 	#$20
.0111a5	90 2c		bcc $0111d3			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0111a7	29 ff 00	and #$00ff			and 	#$00FF
.0111aa	1a		inc a				inc 	a
.0111ab	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111ad	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111af	29 ff 00	and #$00ff			and 	#$00FF
.0111b2	f0 22		beq $0111d6			beq 	_FINSError
.0111b4					_FINSLoop:
.0111b4	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111b6	1a		inc a				inc 	a
.0111b7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111b9	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111bb	29 ff 00	and #$00ff			and 	#$00FF
.0111be	a8		tay				tay									; start comparing at index 1.
.0111bf					_FINSCompare:
.0111bf	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111c1	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111c3	29 ff 00	and #$00ff			and 	#$00FF
.0111c6	d0 05		bne $0111cd			bne 	_FINSNext
.0111c8	88		dey				dey
.0111c9	d0 f4		bne $0111bf			bne 	_FINSCompare
.0111cb	80 08		bra $0111d5			bra 	_FINSExit
.0111cd					_FINSNext:
.0111cd	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111cf	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111d1	d0 e1		bne $0111b4			bne 	_FINSLoop
.0111d3					_FINSFail:
.0111d3	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111d5					_FINSExit:
.0111d5	60		rts				rts
.0111d6					_FINSError:
.0111d6	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0111d9	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111e1	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0111ea					Function_UPPER:
.0111ea	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.0111ed	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0111f0	48		pha				pha
.0111f1	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; close call.
.0111f4	20 3b 07	jsr $01073b			jsr		StringTempAllocate 			; allocate memory for it
.0111f7	68		pla				pla
.0111f8	20 75 07	jsr $010775			jsr 	StringCreateCopy 			; create a copy of it.
.0111fb	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111fd	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111ff	a8		tay				tay 								; address in Y
.011200	74 20		stz $20,x			stz 	EXSValueH+0,x
.011202	da		phx				phx 								; save X
.011203	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011205	29 ff 00	and #$00ff			and 	#$00FF
.011208	f0 20		beq $01122a			beq 	_FUPExit
.01120a	aa		tax				tax 								; put in X
.01120b					_FUPLoop:
.01120b	c8		iny				iny 								; increment and load character
.01120c	b9 00 00	lda $0000,y			lda 	$0000,y
.01120f	29 ff 00	and #$00ff			and 	#$00FF
.011212	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011215	90 10		bcc $011227			bcc 	_FUPNoChange
.011217	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01121a	b0 0b		bcs $011227			bcs 	_FUPNoChange
.01121c	38		sec				sec 								; shift case
.01121d	e9 20 00	sbc #$0020			sbc 	#32
.011220	e2 20		sep #$20			sep 	#$20 						; write back
.011222	99 00 00	sta $0000,y			sta 	$0000,y
.011225	c2 20		rep #$20			rep 	#$20
.011227					_FUPNoChange:
.011227	ca		dex				dex 								; do X times
.011228	d0 e1		bne $01120b			bne 	_FUPLoop
.01122a					_FUPExit:
.01122a	fa		plx				plx 								; restore X
.01122b	60		rts				rts
.01122c					Function_LOWER:
.01122c	20 2a 06	jsr $01062a			jsr 	ResetTypeString 			; returns a string.
.01122f	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011232	48		pha				pha
.011233	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; close call.
.011236	20 3b 07	jsr $01073b			jsr		StringTempAllocate 			; allocate memory for it
.011239	68		pla				pla
.01123a	20 75 07	jsr $010775			jsr 	StringCreateCopy 			; create a copy of it.
.01123d	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01123f	95 00		sta $00,x			sta 	EXSValueL+0,x
.011241	a8		tay				tay 								; address in Y
.011242	74 20		stz $20,x			stz 	EXSValueH+0,x
.011244	da		phx				phx 								; save X
.011245	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011247	29 ff 00	and #$00ff			and 	#$00FF
.01124a	f0 20		beq $01126c			beq 	_FLOExit
.01124c	aa		tax				tax 								; put in X
.01124d					_FLOLoop:
.01124d	c8		iny				iny 								; increment and load character
.01124e	b9 00 00	lda $0000,y			lda 	$0000,y
.011251	29 ff 00	and #$00ff			and 	#$00FF
.011254	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011257	90 10		bcc $011269			bcc 	_FLONoChange
.011259	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01125c	b0 0b		bcs $011269			bcs 	_FLONoChange
.01125e	18		clc				clc 								; shift case
.01125f	69 20 00	adc #$0020			adc 	#32
.011262	e2 20		sep #$20			sep 	#$20 						; write back
.011264	99 00 00	sta $0000,y			sta 	$0000,y
.011267	c2 20		rep #$20			rep 	#$20
.011269					_FLONoChange:
.011269	ca		dex				dex 								; do X times
.01126a	d0 e1		bne $01124d			bne 	_FLOLoop
.01126c					_FLOExit:
.01126c	fa		plx				plx 								; restore X
.01126d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.01126e					Function_Let:
.01126e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011270	48		pha				pha  								; save on stack for later.
.011271	20 96 03	jsr $010396			jsr 	VariableFind 				; find the variable
.011274	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.011276	b0 0f		bcs $011287			bcs 	_FLetFound 					; skip if found.
.011278	68		pla				pla 								; get and push the first token again.
.011279	48		pha				pha
.01127a	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.01127d	d0 53		bne $0112d2			bne 	_FLError					; arrays, so this causes an error.
.01127f	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011282	20 40 04	jsr $010440			jsr 	VariableCreateNew 			; create it.
.011285	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011287					_FLetFound:
.011287	68		pla				pla 								; get and save the first token.
.011288	48		pha				pha
.011289	a8		tay				tay 								; put it in Y
.01128a	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.01128d	f0 07		beq $011296			beq 	_FLetNotArray
.01128f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011291	20 0d 04	jsr $01040d			jsr 	VariableSubscript			; index calculation
.011294	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011296					_FLetNotArray:
.011296	7a		ply				ply 								; get the first token into Y
.011297	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011299	48		pha				pha
.01129a	5a		phy				phy 								; save the first token on the stack.
.01129b	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.01129e	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112a0	d0 23		bne $0112c5			bne 	_FLetMissingEquals
.0112a2	e6 06		inc $06				inc 	DCodePtr
.0112a4	e6 06		inc $06				inc 	DCodePtr
.0112a6	68		pla				pla 								; restore the first token.
.0112a7	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112aa	d0 0f		bne $0112bb			bne 	_FLetString 				; skip if string.
.0112ac	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.0112af	7a		ply				ply 								; get address in Y
.0112b0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112b2	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112b5	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112b7	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112ba	60		rts				rts
.0112bb					_FLetString:
.0112bb	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112be	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112c0	7a		ply				ply 								; get address we are overwriting.
.0112c1	20 7d 06	jsr $01067d			jsr 	StringReassign 				; reassign that address
.0112c4	60		rts				rts
.0112c5					_FLetMissingEquals:
.0112c5	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0112c8	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112d0	3d 00
.0112d2					_FLError:
.0112d2	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0112d5	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112dd	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.0112e5					Function_PROC:
.0112e5	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112e8	18		clc				clc
.0112e9	65 02		adc $02				adc 	DBaseAddress
.0112eb	aa		tax				tax 								; X is used to track it
.0112ec					_FPROLoop:
.0112ec	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112ef	f0 56		beq $011347			beq 	_FPROUnknown
.0112f1	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112f4	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.0112f7	f0 08		beq $011301			beq 	_FPROFoundDefProc
.0112f9					_FPRONext:
.0112f9	8a		txa				txa 								; follow the link.
.0112fa	18		clc				clc
.0112fb	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112fe	aa		tax				tax
.0112ff	80 eb		bra $0112ec			bra 	_FPROLoop
.011301					_FPROFoundDefProc:
.011301	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.011304	d2 06		cmp ($06)			cmp 	(DCodePtr)
.011306	d0 f1		bne $0112f9			bne 	_FPRONext
.011308	8a		txa				txa 								; DTemp1 points to the token.
.011309	18		clc				clc
.01130a	69 06 00	adc #$0006			adc 	#6
.01130d	85 08		sta $08				sta 	DTemp1
.01130f	a0 00 00	ldy #$0000			ldy 	#0
.011312					_FPROCompare:
.011312	b1 08		lda ($08),y			lda 	(DTemp1),y
.011314	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.011316	d0 e1		bne $0112f9			bne 	_FPRONext 					; fails, different
.011318	c8		iny				iny
.011319	c8		iny				iny
.01131a	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.01131d	d0 f3		bne $011312			bne 	_FPROCompare
.01131f	98		tya				tya 								; this is the offset to the next element
.011320	18		clc				clc
.011321	65 08		adc $08				adc 	DTemp1
.011323	48		pha				pha 								; push the next command on the stack
.011324	da		phx				phx 								; push the record address on the stack.
.011325	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011327	98		tya				tya 								; work out the return address
.011328	18		clc				clc
.011329	65 06		adc $06				adc 	DCodePtr
.01132b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01132d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01132f	95 04		sta $04,x			sta 	$04,x
.011331	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011334	95 06		sta $06,x			sta 	$06,x
.011336	8a		txa				txa 								; advance stack by 6.
.011337	18		clc				clc
.011338	69 06 00	adc #$0006			adc 	#6
.01133b	85 2a		sta $2a				sta 	DStack
.01133d	7a		ply				ply 								; line record address
.01133e	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011341	85 22		sta $22				sta 	DLineNumber
.011343	68		pla				pla 								; next command
.011344	85 06		sta $06				sta 	DCodePtr
.011346	60		rts				rts
.011347					_FPROUnknown:
.011347	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01134a	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011352	70 72 6f 63 65 64 75 72 65 00
.01135c					Function_ENDPROC:
.01135c	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.01135e	b5 00		lda $00,x			lda 	$00,x
.011360	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.011363	b0 2e		bcs $011393			bcs 	_FENPUnstack
.011365	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011368	d0 11		bne $01137b			bne 	_FENPFail
.01136a	8a		txa				txa 								; unpick stack.
.01136b	38		sec				sec
.01136c	e9 06 00	sbc #$0006			sbc 	#6
.01136f	85 2a		sta $2a				sta 	DStack
.011371	aa		tax				tax
.011372	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011374	85 06		sta $06				sta 	DCodePtr
.011376	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011378	85 22		sta $22				sta 	DLineNumber
.01137a	60		rts				rts
.01137b					_FENPFail:
.01137b	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>01137e	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011386	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.011393					_FENPUnstack:
.011393	20 27 14	jsr $011427			jsr 	LocalRestore 				; restore off the stack.
.011396	80 c4		bra $01135c			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.011398					Command_LOCAL:
.011398	20 c2 13	jsr $0113c2			jsr 	LocalProcessVariable 		; make one variable 'local'
.01139b	90 0e		bcc $0113ab			bcc 	_CLOFail
.01139d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.01139f	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113a2	d0 06		bne $0113aa			bne 	_CLOExit
.0113a4	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113a6	e6 06		inc $06				inc 	DCodePtr
.0113a8	80 ee		bra $011398			bra 	Command_Local
.0113aa					_CLOExit:
.0113aa	60		rts				rts
.0113ab					_CLOFail:
.0113ab	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0113ae	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113b6	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113c2					LocalProcessVariable:
.0113c2	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113c4	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113c7	90 49		bcc $011412			bcc 	_LPVFail
.0113c9	29 00 10	and #$1000			and 	#IDArrayMask
.0113cc	d0 44		bne $011412			bne 	_LPVFail
.0113ce	b2 06		lda ($06)			lda 	(DCodePtr) 					; save the type on the stack.
.0113d0	48		pha				pha
.0113d1	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find the variable
.0113d4	b0 06		bcs $0113dc			bcs 	_LPVFound 					; if found, A points to the data.
.0113d6	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.0113d9	20 40 04	jsr $010440			jsr 	VariableCreateNew			; create it.
.0113dc					_LPVFound:
.0113dc	a8		tay				tay 								; address in Y
.0113dd	a6 2a		ldx $2a				ldx 	DStack 						; stack pointer in X
.0113df	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.0113e1	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.0113e4	95 04		sta $04,x			sta 	$04,x
.0113e6	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.0113e9	95 06		sta $06,x			sta 	$06,x
.0113eb	a9 00 00	lda #$0000			lda 	#$0000 						; clear the old value
.0113ee	99 00 00	sta $0000,y			sta 	$0000,y
.0113f1	99 02 00	sta $0002,y			sta 	$0002,y
.0113f4	68		pla				pla
.0113f5	29 00 e0	and #$e000			and 	#$C000+IDTypeMask 			; $C000 if number, $E000 if string.
.0113f8	95 08		sta $08,x			sta 	$08,x						; save offset 6
.0113fa	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113fd	f0 09		beq $011408			beq 	_LPVNotString
.0113ff	a9 00 00	lda #$0000			lda 	#0
.011402	99 00 00	sta $0000,y			sta 	$0000,y 					; make it an empty string.
.011405	99 02 00	sta $0002,y			sta 	$0002,y
.011408					_LPVNotString:
.011408	8a		txa				txa
.011409	18		clc				clc
.01140a	69 08 00	adc #$0008			adc 	#8
.01140d	85 2a		sta $2a				sta 	DStack
.01140f	38		sec				sec
.011410	98		tya				tya 								; return the data address.
.011411	60		rts				rts
.011412					_LPVFail:
.011412	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011415	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>01141d	6c 20 43 6f 6d 6d 61 6e 64 00
.011427					LocalRestore:
.011427	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011429	38		sec				sec
.01142a	e9 08 00	sbc #$0008			sbc 	#8
.01142d	85 2a		sta $2a				sta 	DStack
.01142f	aa		tax				tax
.011430	b5 08		lda $08,x			lda 	$08,x 						; look at type.
.011432	c9 00 c0	cmp #$c000			cmp 	#$C000
.011435	f0 09		beq $011440			beq 	_LRRestore					; skip if number.
.011437	b5 02		lda $02,x			lda 	$02,x 						; release the string that was there if any.
.011439	a8		tay				tay
.01143a	b9 00 00	lda $0000,y			lda 	$0000,y
.01143d	20 25 07	jsr $010725			jsr 	StringRelease
.011440					_LRRestore:
.011440	b5 02		lda $02,x			lda 	$02,x 						; restore a string.
.011442	a8		tay				tay
.011443	b5 04		lda $04,x			lda 	$04,x
.011445	99 00 00	sta $0000,y			sta 	$0000,y
.011448	b5 06		lda $06,x			lda 	$06,x
.01144a	99 02 00	sta $0002,y			sta 	$0002,y
.01144d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.01144e					Command_List:
.01144e	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011451	20 3b 07	jsr $01073b		jsr 	StringTempAllocate
.011454	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011456	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011458	64 2e		stz $2e			stz 	DIndent2
.01145a	64 32		stz $32			stz 	DTemp4+0 						; low number
.01145c	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01145f	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011461	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011463	f0 3b		beq $0114a0		beq 	_CLIList
.011465	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011468	f0 36		beq $0114a0		beq 	_CLIList
.01146a	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01146d	f0 13		beq $011482		beq 	_CLIComma
.01146f	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.011472	c0 00 00	cpy #$0000		cpy 	#0
.011475	d0 21		bne $011498		bne 	_CLIError
.011477	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011479	85 34		sta $34			sta 	DTemp4+2
.01147b	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01147d	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011480	d0 1e		bne $0114a0		bne 	_CLIList
.011482					_CLIComma:
.011482	20 f9 05	jsr $0105f9		jsr 	ExpectComma 					; skip comma
.011485	b2 06		lda ($06)		lda 	(DCodePtr)
.011487	f0 12		beq $01149b		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.011489	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01148c	f0 0d		beq $01149b		beq 	_CLIToEnd
.01148e	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.011491	85 34		sta $34			sta 	DTemp4+2
.011493	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011496	f0 08		beq $0114a0		beq 	_CLIList
.011498					_CLIError:
.011498	82 2b f1	brl $0105c6		brl 	SyntaxError
.01149b					_CLIToEnd:
.01149b	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01149e	85 34		sta $34			sta 	DTemp4+2
.0114a0					_CLIList:
.0114a0	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114a3	18		clc			clc
.0114a4	65 02		adc $02			adc 	DBaseAddress
.0114a6	a8		tay			tay 									; put in Y
.0114a7					_CLINextLine:
.0114a7	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114aa	f0 29		beq $0114d5		beq 	_CLIExit
.0114ac	20 3d 16	jsr $01163d		jsr 	ScanIndent  					; scan for formatting.
.0114af	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114b2	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114b4	90 14		bcc $0114ca		bcc 	_CLIFollowLink
.0114b6	c5 34		cmp $34			cmp 	DTemp4+2
.0114b8	f0 02		beq $0114bc		beq 	_CLIShowLine
.0114ba	b0 0e		bcs $0114ca		bcs 	_CLIFollowLink
.0114bc					_CLIShowLine:
.0114bc	a5 30		lda $30			lda 	DListBuffer
.0114be	20 d8 14	jsr $0114d8		jsr 	Detokenise 						; detokenise it
.0114c1	5a		phy			phy
.0114c2	a8		tay			tay 									; print buffer out
.0114c3	20 50 06	jsr $010650		jsr 	PrintBasicString
.0114c6	20 80 1d	jsr $011d80		jsr 	HWNewLine
.0114c9	7a		ply			ply 									; get address
.0114ca					_CLIFollowLink:
.0114ca	98		tya			tya 									; follow link
.0114cb	18		clc			clc
.0114cc	79 00 00	adc $0000,y		adc 	$0000,y
.0114cf	a8		tay			tay
.0114d0	20 9c 1d	jsr $011d9c		jsr 	HWCheckBreak 					; break key pressed.
.0114d3	f0 d2		beq $0114a7		beq 	_CLINextLine
.0114d5					_CLIExit:
.0114d5	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114d7	60		rts			rts
.0114d8					Detokenise:
.0114d8	48		pha			pha
.0114d9	da		phx			phx
.0114da	5a		phy			phy
.0114db	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0114dd	1a		inc a			inc 	a
.0114de	85 1a		sta $1a			sta 	DCurrentTempString
.0114e0	64 1c		stz $1c			stz		DConstantShift
.0114e2	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114e5	92 18		sta ($18)		sta 	(DStartTempString)
.0114e7	5a		phy			phy 									; save Y
.0114e8	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0114eb	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0114ee	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114f1	20 e6 10	jsr $0110e6		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114f4	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0114f6	c5 2e		cmp $2e			cmp 	DIndent2
.0114f8	90 02		bcc $0114fc		bcc 	_DTKSmaller
.0114fa	a5 2e		lda $2e			lda 	DIndent2
.0114fc					_DTKSmaller:
.0114fc	0a		asl a			asl 	a
.0114fd	69 06 00	adc #$0006		adc 	#6
.011500	85 08		sta $08			sta 	DTemp1
.011502					_DTKPadLineNo:
.011502	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011505	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.011508	b2 18		lda ($18)		lda 	(DStartTempString)
.01150a	29 ff 00	and #$00ff		and 	#$00FF
.01150d	c5 08		cmp $08			cmp 	DTemp1
.01150f	d0 f1		bne $011502		bne 	_DTKPadLineNo
.011511	68		pla			pla 									; get pointer
.011512	18		clc			clc 									; point to start of line
.011513	69 04 00	adc #$0004		adc 	#4
.011516	a8		tay			tay 									; put back in Y.
.011517					_DTKMainLoop:
.011517	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01151a	d0 04		bne $011520		bne 	_DTKNotZero 					; if zero, return.
.01151c	7a		ply			ply
.01151d	fa		plx			plx
.01151e	68		pla			pla
.01151f	60		rts			rts
.011520					_DTKNotZero:
.011520	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011523	b0 1c		bcs $011541		bcs 	_DTKNotString
.011525	5a		phy			phy										; save token address on stack.
.011526	c8		iny			iny 									; skip first token
.011527	c8		iny			iny
.011528	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01152b	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.01152e	98		tya			tya 									; copy the string out.
.01152f	20 75 07	jsr $010775		jsr 	StringCreateCopy
.011532	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011535	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.011538	68		pla			pla 									; get token, which is its own offset
.011539	a8		tay			tay
.01153a	18		clc			clc
.01153b	79 00 00	adc $0000,y		adc 	$0000,y
.01153e	a8		tay			tay
.01153f	80 d6		bra $011517		bra 	_DTKMainLoop
.011541					_DTKNotString:
.011541	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011544	b0 09		bcs $01154f		bcs 	_DTKNotShift
.011546	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011549	85 1c		sta $1c			sta 	DConstantShift
.01154b	c8		iny			iny 									; skip token.
.01154c	c8		iny			iny
.01154d	80 c8		bra $011517		bra 	_DTKMainLoop
.01154f					_DTKNotShift:
.01154f	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011552	b0 07		bcs $01155b		bcs 	_DTKNotKeyword
.011554	c8		iny			iny 									; skip over token
.011555	c8		iny			iny
.011556	20 d5 15	jsr $0115d5		jsr 	_DTKDecodeKeyword 				; decode it.
.011559	80 bc		bra $011517		bra 	_DTKMainLoop
.01155b					_DTKNotKeyword:
.01155b	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01155e	b0 18		bcs $011578		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011560	5a		phy			phy 									; save pointer
.011561	38		sec			sec  									; shift it in the range 0-32767
.011562	e9 00 40	sbc #$4000		sbc 	#$4000
.011565	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011566	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011568	6a		ror a			ror 	a 								; rotate that into the constant value
.011569	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01156b	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01156e	20 e6 10	jsr $0110e6		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011571	64 1c		stz $1c			stz 	DConstantShift
.011573	7a		ply			ply 									; restore pointer
.011574	c8		iny			iny 									; skip token.
.011575	c8		iny			iny
.011576	80 9f		bra $011517		bra 	_DTKMainLoop
.011578					_DTKIdentifier:
.011578	48		pha			pha 									; save token for typing at end
.011579					_DTKILoop:
.011579	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01157c	20 a5 15	jsr $0115a5		jsr 	_DTKIDecodeToken 				; decode it.
.01157f	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011582	c8		iny			iny 									; skip it
.011583	c8		iny			iny
.011584	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011587	d0 f0		bne $011579		bne 	_DTKILoop
.011589	68		pla			pla 									; add $( as required.
.01158a	48		pha			pha 									; comes from the first token.
.01158b	29 00 20	and #$2000		and 	#IDTypeMask
.01158e	f0 06		beq $011596		beq 	_DTKINotString
.011590	a9 24 00	lda #$0024		lda 	#"$"
.011593	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.011596					_DTKINotString:
.011596	68		pla			pla
.011597	29 00 10	and #$1000		and 	#IDArrayMask
.01159a	f0 06		beq $0115a2		beq 	_DTKINotArray
.01159c	a9 28 00	lda #$0028		lda 	#"("
.01159f	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.0115a2					_DTKINotArray:
.0115a2	82 72 ff	brl $011517		brl 	_DTKMainLoop
.0115a5					_DTKIDecodeToken:
.0115a5	5a		phy			phy
.0115a6	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115a9	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115ac					_DTKIDivide:
.0115ac	38		sec			sec
.0115ad	e9 2d 00	sbc #$002d		sbc 	#45
.0115b0	c8		iny			iny
.0115b1	b0 f9		bcs $0115ac		bcs 	_DTKIDivide
.0115b3	69 2d 00	adc #$002d		adc 	#45
.0115b6	20 bf 15	jsr $0115bf		jsr 	_DTKIOutA 						; output low.
.0115b9	98		tya			tya
.0115ba	20 bf 15	jsr $0115bf		jsr 	_DTKIOutA 						; output high
.0115bd	7a		ply			ply
.0115be	60		rts			rts
.0115bf					_DTKIOutA:
.0115bf	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115c2	f0 10		beq $0115d4		beq 	_DTKIOutExit
.0115c4	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115c7	90 04		bcc $0115cd		bcc 	_DTKIOutAlpha
.0115c9	38		sec			sec  									; adjust for 0-9
.0115ca	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115cd					_DTKIOutAlpha:
.0115cd	18		clc			clc										; adjust for A-Z
.0115ce	69 60 00	adc #$0060		adc 	#96
.0115d1	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.0115d4					_DTKIOutExit:
.0115d4	60		rts			rts
.0115d5					_DTKDecodeKeyword:
.0115d5	48		pha			pha
.0115d6	da		phx			phx
.0115d7	5a		phy			phy
.0115d8	a8		tay			tay 									; save token ID in Y
.0115d9	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115dc	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115df	48		pha			pha 									; save this flag on a stack
.0115e0	5a		phy			phy 									; save the token ID
.0115e1	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115e4	d0 19		bne $0115ff		bne 	_DTKNotSpecial1
.0115e6	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115e8	88		dey			dey
.0115e9	b9 00 00	lda $0000,y		lda 	$0000,y
.0115ec	29 ff 00	and #$00ff		and 	#$00FF
.0115ef	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0115f2	f0 0b		beq $0115ff		beq 	_DTKNotSpecial1
.0115f4	c9 3a 00	cmp #$003a		cmp 	#":"
.0115f7	f0 06		beq $0115ff		beq 	_DTKNotSpecial1
.0115f9	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0115fc	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.0115ff					_DTKNotSpecial1:
.0115ff	68		pla			pla
.011600	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011603	a8		tay			tay 									; into Y.
.011604	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.011607					_DTKDWorkThrough:
.011607	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.011608	f0 0f		beq $011619		beq 	_DTKDFound
.01160a	86 08		stx $08			stx 	DTemp1
.01160c	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.011610	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011613	18		clc			clc
.011614	65 08		adc $08			adc 	DTemp1
.011616	aa		tax			tax
.011617	80 ee		bra $011607		bra 	_DTKDWorkThrough
.011619					_DTKDFound:
.011619	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.01161d	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011620	3a		dec a			dec 	a
.011621	a8		tay			tay 									; put in Y
.011622					_DTKOut:
.011622	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.011626	29 ff 00	and #$00ff		and 	#$00FF
.011629					_DTKNotLC:
.011629	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.01162c	e8		inx			inx
.01162d	88		dey			dey
.01162e	d0 f2		bne $011622		bne 	_DTKOut
.011630	68		pla			pla 									; trailing space.
.011631	d0 06		bne $011639		bne 	_DTKNotSpecial2
.011633	a9 20 00	lda #$0020		lda 	#" "
.011636	20 67 07	jsr $010767		jsr 	StringWriteCharacter
.011639					_DTKNotSpecial2:
.011639	7a		ply			ply
.01163a	fa		plx			plx
.01163b	68		pla			pla
.01163c	60		rts			rts
.01163d					ScanIndent:
.01163d	48		pha			pha
.01163e	5a		phy			phy
.01163f	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011641	85 2e		sta $2e			sta 	DIndent2
.011643	98		tya			tya
.011644	18		clc			clc 									; point to code.
.011645	69 04 00	adc #$0004		adc 	#4
.011648	a8		tay			tay
.011649					_SILoop:
.011649	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01164c	f0 35		beq $011683		beq 	_SIExit
.01164e	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011651	b0 08		bcs $01165b		bcs 	_SICheckKeyword
.011653	98		tya			tya 									; skip string.
.011654	18		clc			clc
.011655	79 00 00	adc $0000,y		adc 	$0000,y
.011658	a8		tay			tay
.011659	80 ee		bra $011649		bra 	_SILoop
.01165b					_SICheckKeyword:
.01165b	29 00 e0	and #$e000		and 	#$E000
.01165e	c9 00 20	cmp #$2000		cmp 	#$2000
.011661	f0 04		beq $011667		beq 	_SIFoundKeyword
.011663					_SIAdvance:
.011663	c8		iny			iny 									; if not, loop round.
.011664	c8		iny			iny
.011665	80 e2		bra $011649		bra 	_SILoop
.011667					_SIFoundKeyword:
.011667	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01166a	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01166d	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011670	f0 0d		beq $01167f		beq 	_SIKeyPlus
.011672	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011675	d0 ec		bne $011663		bne 	_SIAdvance
.011677	c6 2c		dec $2c			dec 	DIndent
.011679	10 e8		bpl $011663		bpl 	_SIAdvance
.01167b	64 2c		stz $2c			stz 	DIndent
.01167d	80 e4		bra $011663		bra 	_SIAdvance
.01167f					_SIKeyPlus:
.01167f	e6 2c		inc $2c			inc 	DIndent
.011681	80 e0		bra $011663		bra 	_SIAdvance
.011683					_SIExit:
.011683	7a		ply			ply
.011684	68		pla			pla
.011685	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011686					Function_PRINT:
.011686	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011688	f0 33		beq $0116bd			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01168a	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.01168d	f0 2e		beq $0116bd			beq 	_FPRExitCR
.01168f	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011692	f0 23		beq $0116b7			beq 	_FPRSkipLoop
.011694	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.011697	f0 1b		beq $0116b4			beq 	_FPRNewLine
.011699	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.01169c	f0 11		beq $0116af			beq 	_FPRTab
.01169e					_FPRExpression:
.01169e	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.0116a1	b0 06		bcs $0116a9			bcs 	_FPRHaveString
.0116a3	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116a6	20 de 10	jsr $0110de			jsr 	ConvertToString
.0116a9					_FPRHaveString:
.0116a9	a8		tay				tay 								; print the basic String.
.0116aa	20 50 06	jsr $010650			jsr 	PrintBASICString
.0116ad	80 d7		bra $011686			bra 	Function_Print 				; and go round again.
.0116af					_FPRTab:
.0116af	20 95 1d	jsr $011d95			jsr 	HWTab
.0116b2	80 03		bra $0116b7			bra 	_FPRSkipLoop
.0116b4					_FPRNewLine:
.0116b4	20 80 1d	jsr $011d80			jsr 	HWNewLine
.0116b7					_FPRSkipLoop:
.0116b7	e6 06		inc $06				inc 	DCodePtr
.0116b9	e6 06		inc $06				inc 	DCodePtr
.0116bb	80 c9		bra $011686			bra 	Function_Print
.0116bd					_FPRExitCR:
.0116bd	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116bf	88		dey				dey
.0116c0	88		dey				dey
.0116c1	b9 00 00	lda $0000,y			lda 	$0000,y
.0116c4	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116c7	f0 08		beq $0116d1			beq 	_FPRExit
.0116c9	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116cc	f0 03		beq $0116d1			beq 	_FPRExit
.0116ce	20 80 1d	jsr $011d80			jsr 	HWNewLine 					; print a new line.
.0116d1					_FPRExit:
.0116d1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0116d2					Function_IF:
.0116d2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.0116d5	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116d7	05 08		ora $08				ora 	DTemp1
.0116d9	a8		tay				tay 								; success flag in Y.
.0116da	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116dc	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.0116df	d0 32		bne $011713			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116e1	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116e3	e6 06		inc $06				inc 	DCodePtr
.0116e5	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116e8	f0 0f		beq $0116f9			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0116ea	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0116ec	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116ef	90 21		bcc $011712			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116f1	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116f4	b0 1c		bcs $011712			bcs 	_FIFContinue
.0116f6	4c 79 19	jmp $011979			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0116f9					_FIFEndOfLine:
.0116f9	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0116fb	f0 15		beq $011712			beq 	_FIFContinue 				; if done so, continue.
.0116fd	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011700	90 06		bcc $011708			bcc 	_FIFStringConstant
.011702	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011704	e6 06		inc $06				inc 	DCodePtr
.011706	80 f1		bra $0116f9			bra 	_FIFEndOfLine
.011708					_FIFStringConstant:
.011708	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01170b	18		clc				clc
.01170c	65 06		adc $06				adc 	DCodePtr
.01170e	85 06		sta $06				sta 	DCodePtr
.011710	80 e7		bra $0116f9			bra 	_FIFEndOfLine
.011712					_FIFContinue:
.011712	60		rts				rts
.011713					_FIFExtended:
.011713	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011715	e6 2a		inc $2a				inc 	DStack
.011717	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.01171a	a6 2a		ldx $2a				ldx 	DStack
.01171c	95 00		sta $00,x			sta 	$00,x
.01171e	98		tya				tya 								; see if the test was passed.
.01171f	f0 01		beq $011722			beq 	_FIXSkip 					; if zero then it has failed.
.011721	60		rts				rts 								; test passed, so continue executing
.011722					_FIXSkip:
.011722	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011725	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.011728	20 88 17	jsr $011788			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01172b	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01172d	e6 06		inc $06				inc 	DCodePtr
.01172f	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011732	d0 04		bne $011738			bne 	_FIXNoThrow
.011734	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011736	c6 2a		dec $2a				dec 	DStack
.011738					_FIXNoThrow:
.011738	60		rts				rts
.011739					Handler_ELSE:
.011739	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01173b	b5 00		lda $00,x			lda 	$00,x
.01173d	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.011740	d0 12		bne $011754			bne 	_HEBadStructure
.011742	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011745	a2 00 00	ldx #$0000			ldx 	#$0000
.011748	20 88 17	jsr $011788			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01174b	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01174d	e6 06		inc $06				inc 	DCodePtr
.01174f	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011751	c6 2a		dec $2a				dec 	DStack
.011753	60		rts				rts
.011754					_HEBadStructure:
.011754	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011757	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01175f	68 6f 75 74 20 49 66 00
.011767					Handler_ENDIF:
.011767	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011769	b5 00		lda $00,x			lda 	$00,x
.01176b	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01176e	d0 05		bne $011775			bne 	_HEIBadStructure
.011770	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011772	c6 2a		dec $2a				dec 	DStack
.011774	60		rts				rts
.011775					_HEIBadStructure:
.011775	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011778	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011780	68 6f 75 74 20 49 66 00
.011788					ScanForwardLevel:
.011788	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01178a	86 0a		stx $0a				stx 	DTemp1+2
.01178c	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01178e	85 0c		sta $0c				sta 	DTemp2
.011790	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011793					_SFLLoop:
.011793	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011796	d0 0d		bne $0117a5			bne 	_SFLNoCheck 				; we're in a substructure.
.011798	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01179a	f0 09		beq $0117a5			beq 	_SFLNoCheck 				; don't check zero
.01179c	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01179e	f0 04		beq $0117a4			beq 	_SFLFound
.0117a0	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117a2	d0 01		bne $0117a5			bne 	_SFLNoCheck
.0117a4					_SFLFound:
.0117a4	60		rts				rts
.0117a5					_SFLNoCheck:
.0117a5	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117a7	f0 4f		beq $0117f8			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117a9	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117ac	90 40		bcc $0117ee			bcc 	_SFLSkipString 				; then handle that.
.0117ae	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117b0	e6 06		inc $06				inc 	DCodePtr
.0117b2	a8		tay				tay 								; put token in Y temporarily.
.0117b3	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117b6	c9 00 20	cmp #$2000			cmp 	#$2000
.0117b9	d0 d8		bne $011793			bne 	_SFLLoop
.0117bb	98		tya				tya 								; get the token back.
.0117bc	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117bf	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117c2	f0 cf		beq $011793			beq 	_SFLLoop
.0117c4	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117c7	90 ca		bcc $011793			bcc 	_SFLLoop
.0117c9	e8		inx				inx 								; increment the level.
.0117ca	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117cd	f0 c4		beq $011793			beq 	_SFLLoop
.0117cf	ca		dex				dex 								; decrement the level
.0117d0	ca		dex				dex 								; one overdoes the previous inx.
.0117d1	10 c0		bpl $011793			bpl 	_SFLLoop 					; if gone -ve then error.
.0117d3					_SFLError:
.0117d3	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117d5	85 22		sta $22				sta 	DLineNumber
.0117d7	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0117da	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117e2	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0117ee					_SFLSkipString:
.0117ee	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117f1	18		clc				clc
.0117f2	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0117f4	85 06		sta $06				sta 	DCodePtr
.0117f6	80 9b		bra $011793			bra 	_SFLLoop 					; go round again.
.0117f8					_SFLNextLine:
.0117f8	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0117fa	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0117fd	f0 d4		beq $0117d3			beq 	_SFLError 					; if zero, then there's no more code to search.
.0117ff	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011802	85 22		sta $22				sta 	DLineNumber
.011804	18		clc				clc
.011805	a5 06		lda $06				lda 	DCodePtr
.011807	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01180a	85 06		sta $06				sta 	DCodePtr
.01180c	80 85		bra $011793			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.01180e					Command_FOR:
.01180e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011810	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011813	d0 51		bne $011866			bne		_CFOBad
.011815	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find variable
.011818	b0 06		bcs $011820			bcs 	_CFOExists
.01181a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01181d	20 40 04	jsr $010440			jsr 	VariableCreateNew			; create it and skip token.
.011820					_CFOExists:
.011820	48		pha				pha 								; push variable address on stack
.011821	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011824	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.011827	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.01182a	bb		tyx				tyx 								; put high value in X
.01182b	7a		ply				ply 								; address of for variable in Y
.01182c	99 00 00	sta $0000,y			sta 	$0000,y
.01182f	8a		txa				txa
.011830	99 02 00	sta $0002,y			sta 	$0002,y
.011833	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011836	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.011839	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01183b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01183d	95 02		sta $02,x			sta 	$02,x
.01183f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011841	95 04		sta $04,x			sta 	$04,x
.011843	98		tya				tya 								; save variable address at +6
.011844	95 06		sta $06,x			sta 	$06,x
.011846	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.011849	95 08		sta $08,x			sta 	$08,x
.01184b	8a		txa				txa 								; add 8 to stack position
.01184c	18		clc				clc
.01184d	69 08 00	adc #$0008			adc 	#8
.011850	85 2a		sta $2a				sta 	DStack
.011852	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011855	b2 06		lda ($06)			lda 	(DCodePtr)
.011857	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01185a	d0 09		bne $011865			bne 	_CFONoStep
.01185c	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01185f	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.011862	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.011865					_CFONoStep:
.011865	60		rts				rts
.011866					_CFOBad:
.011866	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011869	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011871	76 61 72 69 61 62 6c 65 00
.01187a					Command_NEXT:
.01187a	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01187c	b5 00		lda $00,x			lda 	$00,x
.01187e	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.011881	f0 14		beq $011897			beq 	_CNXOk
.011883	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011886	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01188e	68 6f 75 74 20 46 6f 72 00
.011897					_CNXOk:
.011897	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011899	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01189c	90 22		bcc $0118c0			bcc 	_CNXNoVariable
.01189e	20 96 03	jsr $010396			jsr 	VariableFind 				; get address of variable.
.0118a1	90 08		bcc $0118ab			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118a3	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118a5	ca		dex				dex
.0118a6	ca		dex				dex
.0118a7	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118a9	f0 15		beq $0118c0			beq 	_CNXNoVariable 				; then continue
.0118ab					_CNXNextVar:
.0118ab	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0118ae	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118b6	20 76 61 72 69 61 62 6c 65 00
.0118c0					_CNXNoVariable:
.0118c0	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118c2	48		pha				pha
.0118c3	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118c5	38		sec				sec
.0118c6	e9 08 00	sbc #$0008			sbc 	#8
.0118c9	85 2a		sta $2a				sta 	DStack
.0118cb	aa		tax				tax 								; X points to the stack.
.0118cc	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118ce	85 06		sta $06				sta 	DCodePtr
.0118d0	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.0118d3	5a		phy				phy 								; save the target on the stack
.0118d4	48		pha				pha
.0118d5	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118d8	85 08		sta $08				sta 	DTemp1
.0118da	64 0a		stz $0a				stz 	DTemp1+2
.0118dc	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118de	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118e1	d0 0b		bne $0118ee			bne 	_CNXNoStep
.0118e3	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0118e5	e6 06		inc $06				inc 	DCodePtr
.0118e7	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.0118ea	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0118ec	84 0a		sty $0a				sty 	DTemp1+2
.0118ee					_CNXNoStep:
.0118ee	68		pla				pla 								; save the Target in DTemp2
.0118ef	85 0c		sta $0c				sta 	DTemp2
.0118f1	68		pla				pla
.0118f2	85 0e		sta $0e				sta 	DTemp2+2
.0118f4	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0118f6	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0118f8	a8		tay				tay
.0118f9	18		clc				clc
.0118fa	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0118fd	65 08		adc $08				adc 	DTemp1
.0118ff	99 00 00	sta $0000,y			sta 	$0000,y
.011902	b9 02 00	lda $0002,y			lda 	$0002,y
.011905	65 0a		adc $0a				adc 	DTemp1+2
.011907	99 02 00	sta $0002,y			sta 	$0002,y
.01190a	38		sec				sec
.01190b	a5 0c		lda $0c				lda 	DTemp2
.01190d	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011910	85 0c		sta $0c				sta 	DTemp2
.011912	a5 0e		lda $0e				lda 	DTemp2+2
.011914	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011917	85 0e		sta $0e				sta 	DTemp2+2
.011919	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01191b	f0 0a		beq $011927			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01191d	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01191f	45 0a		eor $0a				eor 	DTemp1+2
.011921	10 04		bpl $011927			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011923	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011924	85 06		sta $06				sta 	DCodePtr
.011926	60		rts				rts
.011927					_CNXLoopAgain:
.011927	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011928	18		clc				clc
.011929	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01192b	aa		tax				tax
.01192c	69 08 00	adc #$0008			adc 	#8
.01192f	85 2a		sta $2a				sta 	DStack
.011931	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011933	85 22		sta $22				sta 	DLineNumber
.011935	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011936					Function_ONGOTO:
.011936	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.011939	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01193c	d0 25		bne $011963			bne 	_FOGoFail
.01193e	c9 00 00	cmp #$0000			cmp 	#0
.011941	f0 20		beq $011963			beq 	_FOGoFail 					; we start with index = 1
.011943	48		pha				pha 								; save count on stack
.011944	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011947	20 d6 05	jsr $0105d6			jsr 	ExpectToken
.01194a	fa		plx				plx 								; put count in X.
.01194b					_FOGoLoop:
.01194b	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01194d	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011950	90 73		bcc $0119c5			bcc 	FGOFail 					; if not, then we have an error.
.011952	c9 00 c0	cmp #$c000			cmp 	#$C000
.011955	b0 6e		bcs $0119c5			bcs 	FGOFail
.011957	ca		dex				dex 								; subtract one, if done, call GOTO code
.011958	f0 1f		beq $011979			beq 	Function_GOTO
.01195a	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01195c	e6 06		inc $06				inc 	DCodePtr
.01195e	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; expect a comma
.011961	80 e8		bra $01194b			bra 	_FOGoLoop 					; and loop round.
.011963					_FOGoFail:
.011963	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011966	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01196e	47 6f 74 6f 20 76 61 6c 75 65 00
.011979					Function_GOTO:
.011979	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01197b	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01197e	90 45		bcc $0119c5			bcc 	FGOFail 					; we don't do calculate line numbers.
.011980	c9 00 c0	cmp #$c000			cmp 	#$C000
.011983	b0 40		bcs $0119c5			bcs 	FGOFail
.011985	38		sec				sec 								; convert to 0-32767
.011986	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011989	aa		tax				tax
.01198a	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.01198d	18		clc				clc
.01198e	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011990	a8		tay				tay
.011991					_FGOSearch:
.011991	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011994	f0 18		beq $0119ae			beq 	_FGOUnknown
.011996	8a		txa				txa 								; does it match line number ?
.011997	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01199a	f0 08		beq $0119a4			beq 	_FGOFound 					; yes, then found.
.01199c	98		tya				tya 								; no follow the link
.01199d	18		clc				clc
.01199e	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119a1	a8		tay				tay
.0119a2	80 ed		bra $011991			bra 	_FGOSearch 					; and keep looking
.0119a4					_FGOFound:
.0119a4	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119a6	98		tya				tya 								; Y + 4 is the code pointer.
.0119a7	18		clc				clc 								; (skipping link and line #)
.0119a8	69 04 00	adc #$0004			adc 	#4
.0119ab	85 06		sta $06				sta 	DCodePtr
.0119ad	60		rts				rts									; and continue
.0119ae					_FGOUnknown:
.0119ae	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0119b1	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119b9	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119c5					FGOFail:
.0119c5	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>0119c8	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119d0	20 4e 75 6d 62 65 72 00
.0119d8					Function_GOSUB:
.0119d8	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119da	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119dc	18		clc				clc
.0119dd	69 02 00	adc #$0002			adc 	#2
.0119e0	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119e2	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119e4	95 04		sta $04,x			sta 	$04,x
.0119e6	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119e9	95 06		sta $06,x			sta 	$06,x
.0119eb	8a		txa				txa 								; advance stack by 6.
.0119ec	18		clc				clc
.0119ed	69 06 00	adc #$0006			adc 	#6
.0119f0	85 2a		sta $2a				sta 	DStack
.0119f2	80 85		bra $011979			bra 	Function_GOTO 				; and do a GOTO.
.0119f4					Function_RETURN:
.0119f4	a6 2a		ldx $2a				ldx 	DStack
.0119f6	b5 00		lda $00,x			lda 	$00,x
.0119f8	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0119fb	d0 11		bne $011a0e			bne 	_FRetFail
.0119fd	8a		txa				txa 								; unpick stack.
.0119fe	38		sec				sec
.0119ff	e9 06 00	sbc #$0006			sbc 	#6
.011a02	85 2a		sta $2a				sta 	DStack
.011a04	aa		tax				tax
.011a05	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a07	85 06		sta $06				sta 	DCodePtr
.011a09	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a0b	85 22		sta $22				sta 	DLineNumber
.011a0d	60		rts				rts
.011a0e					_FRetFail:
.011a0e	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011a11	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a19	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011a26					Function_REPEAT:
.011a26	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a28	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a2a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a2c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a2e	95 04		sta $04,x			sta 	$04,x
.011a30	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011a33	95 06		sta $06,x			sta 	$06,x
.011a35	8a		txa				txa 								; advance stack by 6.
.011a36	18		clc				clc
.011a37	69 06 00	adc #$0006			adc 	#6
.011a3a	85 2a		sta $2a				sta 	DStack
.011a3c	60		rts				rts
.011a3d					Function_UNTIL:
.011a3d	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a3f	b5 00		lda $00,x			lda 	$00,x
.011a41	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a44	d0 26		bne $011a6c			bne 	_FUNFail
.011a46	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a49	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a4c	d0 15		bne $011a63			bne 	_FUNExit
.011a4e	c9 00 00	cmp #$0000			cmp 	#0
.011a51	d0 10		bne $011a63			bne 	_FUNExit
.011a53	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a55	38		sec				sec
.011a56	e9 06 00	sbc #$0006			sbc 	#6
.011a59	aa		tax				tax
.011a5a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a5c	85 06		sta $06				sta 	DCodePtr
.011a5e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a60	85 22		sta $22				sta 	DLineNumber
.011a62	60		rts				rts
.011a63					_FUNExit:
.011a63	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a65	38		sec				sec
.011a66	e9 06 00	sbc #$0006			sbc 	#6
.011a69	85 2a		sta $2a				sta 	DStack
.011a6b	60		rts				rts
.011a6c					_FUNFail:
.011a6c	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011a6f	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a77	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011a84					Function_WHILE:
.011a84	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a86	48		pha				pha 								; save on stack
.011a87	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011a8a	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a8d	d0 14		bne $011aa3			bne 	_FWHExecute
.011a8f	c9 00 00	cmp #$0000			cmp 	#0
.011a92	d0 0f		bne $011aa3			bne 	_FWHExecute
.011a94	68		pla				pla 								; throw away current instruction
.011a95	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011a98	a2 00 00	ldx #$0000			ldx 	#0
.011a9b	20 88 17	jsr $011788			jsr 	ScanForwardLevel 			; scan forward checking structures
.011a9e	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011aa0	e6 06		inc $06				inc 	DCodePtr
.011aa2	60		rts				rts
.011aa3					_FWHExecute:
.011aa3	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011aa5	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011aa6	3a		dec a				dec 	a
.011aa7	3a		dec a				dec 	a
.011aa8	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011aaa	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011aac	95 04		sta $04,x			sta 	$04,x
.011aae	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011ab1	95 06		sta $06,x			sta 	$06,x
.011ab3	8a		txa				txa 								; advance stack by 6.
.011ab4	18		clc				clc
.011ab5	69 06 00	adc #$0006			adc 	#6
.011ab8	85 2a		sta $2a				sta 	DStack
.011aba	60		rts				rts
.011abb					Function_WEND:
.011abb	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011abd	b5 00		lda $00,x			lda 	$00,x
.011abf	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011ac2	d0 11		bne $011ad5			bne 	_FWEFail
.011ac4	8a		txa				txa 								; unpick stack and always loop back.
.011ac5	38		sec				sec 								; we do the check at the top.
.011ac6	e9 06 00	sbc #$0006			sbc 	#6
.011ac9	85 2a		sta $2a				sta 	DStack
.011acb	aa		tax				tax
.011acc	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011ace	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011ad0	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011ad2	85 22		sta $22				sta 	DLineNumber
.011ad4	60		rts				rts
.011ad5					_FWEFail:
.011ad5	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011ad8	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011ae0	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011aeb					Function_END:
.011aeb	4c 7e 1e	jmp $011e7e			jmp 	WarmStart
.011aee					Function_RUN:
.011aee	20 79 1b	jsr $011b79			jsr 	Function_CLEAR 				; clear all variables.
.011af1	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011af3	18		clc				clc
.011af4	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011af7	80 0c		bra $011b05			bra 	FRun_NextLineNumber
.011af9					RUNExecuteTokenBuffer:
.011af9	64 22		stz $22				stz 	DLineNumber					; zero line number
.011afb	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011afe	18		clc				clc
.011aff	65 02		adc $02				adc 	DBaseAddress
.011b01	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b03	80 12		bra $011b17			bra 	FRun_NextInstruction
.011b05					FRun_NextLineNumber:
.011b05	a8		tay				tay 								; put in Y
.011b06	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b09	f0 e0		beq $011aeb			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011b0b	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b0e	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b10	98		tya				tya 								; get address back
.011b11	18		clc				clc 								; skip over the link/line number
.011b12	69 04 00	adc #$0004			adc 	#4
.011b15	85 06		sta $06				sta 	DCodePtr
.011b17					FRun_NextInstruction:
.011b17	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b19	20 9c 1d	jsr $011d9c			jsr 	HWCheckBreak 				; break key pressed.
.011b1c	d0 40		bne $011b5e			bne 	_FRun_Break
.011b1e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b20	f0 32		beq $011b54			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b22	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b25	f0 18		beq $011b3f			beq 	_FRun_Colon
.011b27	a8		tay				tay 								; save in Y
.011b28	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b2b	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b2e	d0 15		bne $011b45			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b30	98		tya				tya 								; get token back
.011b31	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b34	0a		asl a				asl 	a 							; double it into X
.011b35	aa		tax				tax
.011b36	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b38	e6 06		inc $06				inc 	DCodePtr
.011b3a	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b3d	80 d8		bra $011b17			bra 	FRun_NextInstruction 		; do the following instruction.
.011b3f					_FRun_Colon:
.011b3f	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b41	e6 06		inc $06				inc 	DCodePtr
.011b43	80 d2		bra $011b17			bra 	FRun_NextInstruction 		; do the following instruction.
.011b45					_FRun_TryLET:
.011b45	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b47	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b4a	90 05		bcc $011b51			bcc		_FRunSyntax 				; no, must be syntax.
.011b4c	20 6e 12	jsr $01126e			jsr 	Function_LET 				; try as a LET.
.011b4f	80 c6		bra $011b17			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b51					_FRunSyntax:
.011b51	82 72 ea	brl $0105c6			brl 	SyntaxError
.011b54					_FRun_EndInstruction:
.011b54	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b56	f0 0f		beq $011b67			beq 	_FRun_WarmStart
.011b58	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b5a	1a		inc a				inc 	a 							; go to link for next line
.011b5b	1a		inc a				inc 	a
.011b5c	80 a7		bra $011b05			bra 	FRun_NextLineNumber
.011b5e					_FRun_Break:
.011b5e	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011b61	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b67					_FRun_WarmStart:
.011b67	82 14 03	brl $011e7e			brl 	WarmStart
.011b6a					Function_NEW:
.011b6a	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b6d	18		clc				clc
.011b6e	65 02		adc $02				adc 	DBaseAddress
.011b70	a8		tay				tay
.011b71	a9 00 00	lda #$0000			lda 	#$0000
.011b74	99 00 00	sta $0000,y			sta 	$0000,y
.011b77	80 00		bra $011b79			bra 	Function_Clear
.011b79					Function_CLEAR:
.011b79	20 85 1b	jsr $011b85			jsr 	ClearVariablesPointersAndStacks
.011b7c	60		rts				rts
.011b7d					Function_STOP:
.011b7d	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011b80	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b85					ClearVariablesPointersAndStacks:
.011b85	a9 80 00	lda #$0080			lda 	#BASStack
.011b88	85 2a		sta $2a				sta 	DStack
.011b8a	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b8c	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011b8f	a9 00 00	lda #$0000			lda 	#$0000
.011b92	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b94	20 c0 1b	jsr $011bc0			jsr 	FindCodeEnd 				; find where the program ends.
.011b97	a8		tay				tay 								; Y points to it.
.011b98	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011b9b	99 02 00	sta $0002,y			sta 	$0002,y
.011b9e	99 04 00	sta $0004,y			sta 	$0004,y
.011ba1	98		tya				tya 								; start of working memory up
.011ba2	18		clc				clc
.011ba3	69 06 00	adc #$0006			adc 	#6
.011ba6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011ba9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bab	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bae					_FCLoop:
.011bae	a9 00 00	lda #$0000			lda 	#$0000
.011bb1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bb3	c8		iny				iny
.011bb4	c8		iny				iny
.011bb5	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bb8	d0 f4		bne $011bae			bne 	_FCLoop
.011bba	64 16		stz $16				stz 	DTempStringPointer
.011bbc	20 6a 06	jsr $01066a			jsr 	StringResetPermanent
.011bbf	60		rts				rts
.011bc0					FindCodeEnd:
.011bc0	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011bc3	18		clc				clc
.011bc4	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011bc6	a8		tay				tay
.011bc7					_FCELoop:
.011bc7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011bca	f0 08		beq $011bd4			beq 	_FCEExit
.011bcc	98		tya				tya 								; add offset
.011bcd	18		clc				clc
.011bce	79 00 00	adc $0000,y			adc 	$0000,y
.011bd1	a8		tay				tay
.011bd2	80 f3		bra $011bc7			bra 	_FCELoop
.011bd4					_FCEExit:
.011bd4	98		tya				tya 								; return in A
.011bd5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011bd6					Function_Dim:
.011bd6	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bd8	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011bdb	f0 48		beq $011c25			beq		_FDIMNotArray 				; no, error.
.011bdd	20 96 03	jsr $010396			jsr 	VariableFind 				; try to find it.
.011be0	b0 4e		bcs $011c30			bcs 	_FDIMExists 				; if it does, that's an error.
.011be2	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011be4	48		pha				pha
.011be5	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011be7	48		pha				pha
.011be8					_FDIMSkip:
.011be8	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token, so we can evaluate the array size.
.011bea	e6 06		inc $06				inc 	DCodePtr
.011bec	e6 06		inc $06				inc 	DCodePtr
.011bee	29 00 08	and #$0800			and 	#IDContMask
.011bf1	d0 f5		bne $011be8			bne 	_FDIMSkip
.011bf3	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011bf6	20 f0 05	jsr $0105f0			jsr 	ExpectRightBracket 			; check the ) following.
.011bf9	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011bfc	d0 48		bne $011c46			bne 	_FDIMSize
.011bfe	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c01	f0 43		beq $011c46			beq 	_FDIMSize
.011c03	7a		ply				ply 								; restore HashTablePtr for the array variable.
.011c04	84 20		sty $20				sty 	DHashTablePtr
.011c06	7a		ply				ply 								; restore DCodePtr to point to the identifier.
.011c07	84 06		sty $06				sty 	DCodePtr
.011c09	20 40 04	jsr $010440			jsr 	VariableCreateNew 			; create the variable.
.011c0c					_FDIMFindRight:
.011c0c	b2 06		lda ($06)			lda 	(DCodePtr)
.011c0e	e6 06		inc $06				inc 	DCodePtr
.011c10	e6 06		inc $06				inc 	DCodePtr
.011c12	c9 28 32	cmp #$3228			cmp 	#rParenTokenID
.011c15	d0 f5		bne $011c0c			bne 	_FDIMFindRight
.011c17	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c19	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c1c	d0 06		bne $011c24			bne 	_FDIMExit
.011c1e	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c20	e6 06		inc $06				inc 	DCodePtr
.011c22	80 b2		bra $011bd6			bra 	Function_DIM 				; and do another
.011c24					_FDIMExit:
.011c24	60		rts				rts
.011c25					_FDIMNotArray:
.011c25	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011c28	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c30					_FDIMExists:
.011c30	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011c33	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c3b	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c46					_FDIMSize:
.011c46	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011c49	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c51	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c57					Command_POKE:
.011c57	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c5a	48		pha				pha	 								; save on stack
.011c5b	5a		phy				phy
.011c5c	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; comma seperator.
.011c5f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c62	fa		plx				plx 								; pull address and store in DTemp1
.011c63	86 0a		stx $0a				stx 	DTemp1+2
.011c65	fa		plx				plx
.011c66	86 08		stx $08				stx 	DTemp1+0
.011c68	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c6a	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c6c	c2 20		rep #$20			rep 	#$20 						; word mode
.011c6e	60		rts				rts
.011c6f					Command_DOKE:
.011c6f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c72	48		pha				pha	 								; save on stack
.011c73	5a		phy				phy
.011c74	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; comma seperator.
.011c77	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c7a	fa		plx				plx 								; pull address and store in DTemp1
.011c7b	86 0a		stx $0a				stx 	DTemp1+2
.011c7d	fa		plx				plx
.011c7e	86 08		stx $08				stx 	DTemp1+0
.011c80	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c82	60		rts				rts
.011c83					Command_LOKE:
.011c83	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c86	48		pha				pha	 								; save on stack
.011c87	5a		phy				phy
.011c88	20 f9 05	jsr $0105f9			jsr 	ExpectComma 				; comma seperator.
.011c8b	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c8e	fa		plx				plx 								; pull address and store in DTemp1
.011c8f	86 0a		stx $0a				stx 	DTemp1+2
.011c91	fa		plx				plx
.011c92	86 08		stx $08				stx 	DTemp1+0
.011c94	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c96	98		tya				tya
.011c97	a0 02 00	ldy #$0002			ldy 	#2
.011c9a	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c9c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011c9d					Function_ASSERT:
.011c9d	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011ca0	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011ca2	05 08		ora $08				ora 	Dtemp1
.011ca4	f0 01		beq $011ca7			beq 	_FAssFail
.011ca6	60		rts				rts
.011ca7					_FAssFail:
.011ca7	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011caa	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011cb2	61 69 6c 65 64 00
.011cb8					Function_CLS:
.011cb8	20 16 1d	jsr $011d16			jsr 	HWClearScreen
.011cbb	60		rts				rts
.011cbc					Function_REM:
.011cbc	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cbe	f0 0f		beq $011ccf			beq 	_FRemExit 					; no comment present
.011cc0	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cc3	f0 0a		beq $011ccf			beq 	_FRemExit 					; no comment present
.011cc5	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011cc8	b0 06		bcs $011cd0			bcs 	_FRemSyntax
.011cca	18		clc				clc 								; add to DCodePtr
.011ccb	65 06		adc $06				adc 	DCodePtr
.011ccd	85 06		sta $06				sta 	DCodePtr
.011ccf					_FRemExit:
.011ccf	60		rts				rts
.011cd0					_FRemSyntax:
.011cd0	82 f3 e8	brl $0105c6			brl 	SyntaxError
.011cd3					Function_LINK:
.011cd3	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011cd6	85 08		sta $08				sta 	DTemp1 						; target address
.011cd8	84 0a		sty $0a				sty 	DTemp1+2
.011cda	7b		tdc				tda 								; work out what the actual address is
.011cdb	18		clc				clc
.011cdc	69 08 00	adc #$0008			adc 	#DTemp1
.011cdf	8f 14 1d 01	sta $011d14			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011ce3	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011ce5	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011ce8	48		pha				pha
.011ce9	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011cec	aa		tax				tax
.011ced	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011cf0	a8		tay				tay
.011cf1	68		pla				pla
.011cf2	22 13 1d 01	jsl $011d13			jsl 	_FLIExecuteIt
.011cf6	5a		phy				phy 								; save Y
.011cf7	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cf9	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011cfc	8a		txa				txa
.011cfd	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d00	68		pla				pla
.011d01	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d04	c8		iny				iny 								; point to their high bytes and clear them
.011d05	c8		iny				iny
.011d06	a9 00 00	lda #$0000			lda 	#0
.011d09	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d0c	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d0f	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d12	60		rts				rts
.011d13					_FLIExecuteIt:
.011d13	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d16					HWClearScreen:
.011d16	48		pha				pha
.011d17	da		phx				phx
.011d18	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d1b	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d1e	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d22	ca		dex				dex
.011d23	10 f6		bpl $011d1b			bpl 	_CS0
.011d25	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d28	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d2c	fa		plx				plx
.011d2d	68		pla				pla
.011d2e	60		rts				rts
.011d2f					HWPrintChar:
.011d2f	48		pha				pha
.011d30	da		phx				phx
.011d31	5a		phy				phy
.011d32	48		pha				pha 								; cursor position -> X
.011d33	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d37	aa		tax				tax
.011d38	68		pla				pla
.011d39	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d3c	f0 08		beq $011d46			beq 	_HWPCNoWrite
.011d3e	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d40	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d44	c2 20		rep #$20			rep 	#$20
.011d46					_HWPCNoWrite:
.011d46	e8		inx				inx 								; bump cursor position.
.011d47	8a		txa				txa
.011d48	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d4c	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d4f	d0 2b		bne $011d7c			bne 	_HWNotEnd
.011d51	38		sec				sec 	 							; back up one line
.011d52	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d55	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d59	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d5c					_HWScrollUp:
.011d5c	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d60	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d64	e8		inx				inx
.011d65	e8		inx				inx
.011d66	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d69	d0 f1		bne $011d5c			bne 	_HWScrollUp
.011d6b	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d6e					_HWBlank:
.011d6e	a9 20 20	lda #$2020			lda 	#$2020
.011d71	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d75	e8		inx				inx
.011d76	e8		inx				inx
.011d77	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d7a	d0 f2		bne $011d6e			bne 	_HWBlank
.011d7c					_HWNotEnd:
.011d7c	7a		ply				ply
.011d7d	fa		plx				plx
.011d7e	68		pla				pla
.011d7f	60		rts				rts
.011d80					HWNewLine:
.011d80	48		pha				pha
.011d81	da		phx				phx
.011d82	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d85					HWMoveCursor:
.011d85	a9 ff ff	lda #$ffff			lda 	#-1
.011d88	20 2f 1d	jsr $011d2f			jsr 	HWPrintChar
.011d8b	8a		txa				txa
.011d8c	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d90	d0 f3		bne $011d85			bne 	HWMoveCursor
.011d92	fa		plx				plx
.011d93	68		pla				pla
.011d94	60		rts				rts
.011d95	48		pha		HWTab:	pha
.011d96	da		phx				phx
.011d97	a2 07 00	ldx #$0007			ldx 	#7
.011d9a	80 e9		bra $011d85			bra 	HWMoveCursor
.011d9c					HWCheckBreak:
.011d9c	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011da0	60		rts				rts
.011da1					HWInkey:
.011da1	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011da5	60		rts				rts
.011da6					HWInputLine:
.011da6	20 a1 1d	jsr $011da1			jsr 	HWInkey 					; get a keystroke.
.011da9	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011dad	f0 f7		beq $011da6			beq 	HWInputLine
.011daf					_HWILWait:
.011daf	20 a1 1d	jsr $011da1			jsr 	HWInkey
.011db2	c9 00 00	cmp #$0000			cmp		#0
.011db5	f0 f8		beq $011daf			beq 	_HWILWait
.011db7	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011dbb	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011dbe	90 2f		bcc $011def			bcc 	_HWILControl
.011dc0	20 2f 1d	jsr $011d2f			jsr 	HWPrintChar 				; print out.
.011dc3	80 e1		bra $011da6			bra 	HWInputLine 				; loop back.
.011dc5					_HWILBackSpace:
.011dc5	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011dc9	f0 db		beq $011da6			beq 	HWInputLine
.011dcb	aa		tax				tax
.011dcc	ca		dex				dex
.011dcd	a9 20 00	lda #$0020			lda 	#" "
.011dd0	e2 20		sep #$20			sep 	#$20
.011dd2	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011dd6	c2 20		rep #$20			rep 	#$20
.011dd8	a2 ff ff	ldx #$ffff			ldx 	#-1
.011ddb					_HWILMove:
.011ddb	8a		txa				txa
.011ddc	18		clc				clc
.011ddd	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011de1	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011de4	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011de8	80 bc		bra $011da6			bra 	HWInputLine
.011dea					_HWILClear:
.011dea	20 16 1d	jsr $011d16			jsr 	HWClearScreen
.011ded	80 b7		bra $011da6			bra 	HWInputLine
.011def					_HWILControl:
.011def	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011df2	f0 60		beq $011e54			beq 	_HWILTab
.011df4	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011df7	f0 cc		beq $011dc5			beq 	_HWILBackSpace
.011df9	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011dfc	c9 17 00	cmp #$0017			cmp 	#23
.011dff	f0 da		beq $011ddb			beq 	_HWILMove
.011e01	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e04	c9 13 00	cmp #$0013			cmp 	#19
.011e07	f0 d2		beq $011ddb			beq 	_HWILMove
.011e09	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e0c	c9 01 00	cmp #$0001			cmp 	#1
.011e0f	f0 ca		beq $011ddb			beq 	_HWILMove
.011e11	a2 01 00	ldx #$0001			ldx 	#1
.011e14	c9 04 00	cmp #$0004			cmp 	#4
.011e17	f0 c2		beq $011ddb			beq 	_HWILMove
.011e19	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e1c	f0 cc		beq $011dea			beq 	_HWILClear
.011e1e	c9 0d 00	cmp #$000d			cmp 	#13
.011e21	d0 83		bne $011da6			bne 	HWInputLine
.011e23	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e27	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e2a	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e2c	a9 0f 00	lda #$000f			lda 	#$000F
.011e2f	85 0a		sta $0a				sta 	DTemp1+2
.011e31	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e34					_HWILCopy:
.011e34	bb		tyx				tyx
.011e35	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e37	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e3b	c8		iny				iny
.011e3c	c8		iny				iny
.011e3d	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e40	d0 f2		bne $011e34			bne 	_HWILCopy
.011e42	a9 00 00	lda #$0000			lda 	#0
.011e45	bb		tyx				tyx
.011e46	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e4a	20 80 1d	jsr $011d80			jsr 	HWNewLine 					; next line.
.011e4d	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e50	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e53	60		rts				rts
.011e54					_HWILTab:
.011e54	20 95 1d	jsr $011d95			jsr 	HWTab
.011e57	82 4c ff	brl $011da6			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e5a					SwitchBasicInstance:
.011e5a	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e5c	20 16 1d	jsr $011d16			jsr 	HWClearScreen 						; clear screen
.011e5f	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e62	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e64	86 02		stx $02				stx		DBaseAddress
.011e66	84 04		sty $04				sty 	DHighAddress
.011e68	ba		tsx				tsx 										; save the current SP.
.011e69	86 3a		stx $3a				stx 	DStack65816
.011e6b	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e6c	48		pha				pha 										; then copy it into B.
.011e6d	ab		plb				plb
.011e6e	ab		plb				plb
.011e6f	20 85 1b	jsr $011b85			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e72	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e75	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e77	f0 05		beq $011e7e			beq 	WarmStart
.011e79	3a		dec a				dec 	a 									; decrement zero.
.011e7a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e7c	80 18		bra $011e96			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e7e					WarmStart:
.011e7e	a2 e4 1e	ldx #$1ee4			ldx 	#BasicPrompt & $FFFF
.011e81	20 32 06	jsr $010632			jsr 	PrintROMMessage
.011e84					NextCommand:
.011e84	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e86	9a		txs				txs
.011e87	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e89	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e8c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e8e	d0 52		bne $011ee2			bne 	ExitEmulator
.011e90	20 a6 1d	jsr $011da6			jsr 	HWInputLine 						; read line to YA.
.011e93	20 96 07	jsr $010796			jsr 	Tokenise 							; tokenise it.
.011e96					ExecuteTokenBuffer:
.011e96	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e99	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e9b	f0 e7		beq $011e84			beq 	NextCommand 						; nothing.
.011e9d	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011ea0	90 27		bcc $011ec9			bcc 	_ETBCommand
.011ea2	c9 00 c0	cmp #$c000			cmp 	#$C000
.011ea5	b0 22		bcs $011ec9			bcs 	_ETBCommand
.011ea7	38		sec				sec
.011ea8	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011eab	f0 1f		beq $011ecc			beq 	_ETBError
.011ead	48		pha				pha
.011eae	20 cb 04	jsr $0104cb			jsr 	LineDelete 							; delete the line, if it exists.
.011eb1	20 85 1b	jsr $011b85			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011eb4	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011eb7	18		clc				clc
.011eb8	65 02		adc $02				adc 	DBaseAddress
.011eba	a8		tay				tay 										; Y contains the code.
.011ebb	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ebe	f0 c4		beq $011e84			beq 	NextCommand 						; no, next command.
.011ec0	68		pla				pla 										; line number in A, code in Y.
.011ec1	20 06 05	jsr $010506			jsr 	LineInsert 							; insert the line
.011ec4	20 85 1b	jsr $011b85			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ec7	80 bb		bra $011e84			bra 	NextCommand
.011ec9					_ETBCommand:
.011ec9	4c f9 1a	jmp $011af9			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011ecc					_ETBError:
.011ecc	20 8a 05	jsr $01058a			jsr 	ErrorHandler 						; call error routine
>011ecf	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011ed7	61 76 65 20 6c 69 6e 65 20 30 00
.011ee2					ExitEmulator:
.011ee2	02 00		cop #$00			cop 	#0
.011ee4					BasicPrompt:
>011ee4	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 96 07	jsr $010796			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	6e 42 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 8c 40 2c 3e 12 00 0f 4c
>024108	69 6e 65 20 6e 75 6d 62 65 72 20 31 34 30 00 40
>024118	ea ca 0d ce 8e ca 15 c0 00 00 00 00 00 00 00 00
>024128	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 12 times (192 bytes)...
>0241f8	00 00 00 00 00 00 00 00 22 00 64 00 2c 3e 12 00
>024208	0f 4c 69 6e 65 20 6e 75 6d 62 65 72 20 31 30 30
>024218	06 40 a4 c9 5e cd 02 c0 00 00 22 00 78 00 2c 3e
>024228	12 00 0f 4c 69 6e 65 20 6e 75 6d 62 65 72 20 31
>024238	32 30 06 40 2b cb 1f cd 8e c0 00 00 24 00 8c 00
>024248	2c 3e 12 00 0f 4c 69 6e 65 20 6e 75 6d 62 65 72
>024258	20 31 34 30 03 40 3a c8 f6 cc 5c cb 03 c0 00 00
>024268	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>024278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2007 times (32112 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
