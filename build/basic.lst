
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun  8 15:26:19 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 86 07 01	jmp $010786		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ea 02					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	77 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	87 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	97 04					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	db 04					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	42 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a7 04					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	24 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	06 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c1 04					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c1 03					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	42 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4e 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	cb 05					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	42 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	53 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	65 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	dc 06					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	bc 06					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	98 06					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	82 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	ea 02					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	ea 02					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	ea 02					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	ea 02					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	ea 02					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	2e 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	13 07					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	2f 07					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	31 07					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	ea 02					.word IllegalToken             & $FFFF ; token $3c1e "while"
>01003e	ea 02					.word IllegalToken             & $FFFF ; token $3a1f "wend"
.010040					TokenText:
>010040	02 26					 .text $02,"&"        ; token $2001
>010042	02 7c					 .text $02,"|"        ; token $2002
>010044	02 5e					 .text $02,"^"        ; token $2003
>010046	12 3c					 .text $12,"<"        ; token $2204
>010048	12 3e					 .text $12,">"        ; token $2205
>01004a	12 3d					 .text $12,"="        ; token $2206
>01004c	13 3c 3d				 .text $13,"<="       ; token $2207
>01004f	13 3e 3d				 .text $13,">="       ; token $2208
>010052	13 3c 3e				 .text $13,"<>"       ; token $2209
>010055	22 2b					 .text $22,"+"        ; token $240a
>010057	22 2d					 .text $22,"-"        ; token $240b
>010059	32 2a					 .text $32,"*"        ; token $260c
>01005b	32 2f					 .text $32,"/"        ; token $260d
>01005d	32 25					 .text $32,"%"        ; token $260e
>01005f	33 3e 3e				 .text $33,">>"       ; token $260f
>010062	33 3c 3c				 .text $33,"<<"       ; token $2610
>010065	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006b	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010070	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010075	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007a	92 2c					 .text $92,","        ; token $3215
>01007c	92 3b					 .text $92,";"        ; token $3216
>01007e	92 3a					 .text $92,":"        ; token $3217
>010080	92 28					 .text $92,"("        ; token $3218
>010082	92 29					 .text $92,")"        ; token $3219
>010084	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>010088	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>01008f	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010093	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>010097	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c1e
>01009d	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a1f
>0100a2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3c1e					whileTokenID                     = $3c1e
=$3a1f					wendTokenID                      = $3a1f

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100a3					Evaluate:
.0100a3	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100a6	a9 00 00	lda #$0000			lda 	#0<<9 						; start at the lowest precedence level.
.0100a9					EvaluateLevel:
.0100a9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ac	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100ae	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100b0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100b3	b0 79		bcs $01012e			bcs 	_ELVariable
.0100b5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100b8	b0 16		bcs $0100d0			bcs 	_ELConstant
.0100ba	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100bd	90 7f		bcc $01013e			bcc 	_ELStringConstant
.0100bf	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100c2	90 03		bcc $0100c7			bcc 	_ELConstantShift
.0100c4	82 94 00	brl $01015b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100c7					_ELConstantShift:
.0100c7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100ca	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100cc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ce	e6 06		inc $06				inc 	DCodePtr
.0100d0					_ELConstant:
.0100d0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100d2	38		sec				sec  								; shift it in the range 0-32767
.0100d3	e9 00 40	sbc #$4000			sbc 	#$4000
.0100d6	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100d7	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100d9	6a		ror a				ror 	a 							; rotate that into the constant value
.0100da	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100dc	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100de	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100e0	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100e2	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100e4	e6 06		inc $06				inc 	DCodePtr
.0100e6					_ELGotAtom:
.0100e6	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100e8	a8		tay				tay 								; save in Y
.0100e9	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100ec	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100ef	d0 35		bne $010126			bne 	_ELExit
.0100f1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0100f3	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100f6	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0100f8	98		tya				tya 								; get the keyword token back
.0100f9	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100fc	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0100fe	90 26		bcc $010126			bcc 	_ELExit 					; precedence too low, then exit.
.010100	5a		phy				phy 								; save the binary operator on the stack
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010103	e6 06		inc $06				inc 	DCodePtr
.010105	18		clc				clc 								; try the next level up
.010106	69 00 02	adc #$0200			adc 	#1 << 9
.010109	e8		inx				inx 								; calculate the RHS at the next stack level.
.01010a	e8		inx				inx
.01010b	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.01010e	ca		dex				dex
.01010f	ca		dex				dex
.010110	7a		ply				ply 								; get operator token back into Y
.010111					_ELExecuteY:
.010111	98		tya				tya
.010112	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010115	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010116	9b		txy				txy 								; save X in Y
.010117	aa		tax				tax 								; double keyword ID in X
.010118	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01011c	bb		tyx				tyx 								; restore X.
.01011d	8f 22 01 01	sta $010122			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010121					_ELCallRoutine:
.010121	20 21 01	jsr $010121			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010124	80 c0		bra $0100e6			bra 	_ELGotAtom 					; go round operator level again.
.010126	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010128	0a		asl a				asl 	a
.010129	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01012b	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01012d	60		rts				rts
.01012e					_ELVariable:
.01012e	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010130	20 ef 01	jsr $0101ef			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010133	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010135	94 10		sty $10,x			sty 	EXSValueH+0,x
.010137	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010139	80 ab		bra $0100e6			bra 	_ELGotAtom
.01013b					_ELSyntax
.01013b	82 bd 01	brl $0102fb			brl 	SyntaxError
.01013e					_ELStringConstant:
.01013e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010141	f0 f8		beq $01013b			beq 	_ELSyntax
.010143	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010145	1a		inc a				inc 	a
.010146	1a		inc a				inc 	a
.010147	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010149	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01014b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01014d	18		clc				clc 								; add to string constant.
.01014e	65 06		adc $06				adc 	DCodePtr
.010150	85 06		sta $06				sta 	DCodePtr
.010152	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010154	09 00 80	ora #$8000			ora 	#$8000
.010157	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010159	80 8b		bra $0100e6			bra 	_ELGotAtom
.01015b					_ELUnaryKeyword:
.01015b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01015d	a8		tay				tay 								; put the token in Y.
.01015e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010160	e6 06		inc $06				inc 	DCodePtr
.010162	29 00 1e	and #$1e00			and 	#$1E00 						; mask out the keyword type.
.010165	c9 00 10	cmp #$1000			cmp 	#$1000 						; if it is xxx1 000x then it's a unary function
.010168	f0 a7		beq $010111			beq 	_ELExecuteY					; go back and execute it
.01016a	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01016d	d0 11		bne $010180			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01016f	20 a6 01	jsr $0101a6			jsr 	EvaluateNext 				; evaluate the expression
.010172	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; consume the right bracket.
.010175					_ELCopy:
.010175	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010177	95 00		sta $00,x			sta 	EXSValueL+0,x
.010179	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01017b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01017d	82 66 ff	brl $0100e6			brl 	_ELGotAtom 					; and continue.
.010180					_ELUnaryOperator:
.010180	5a		phy				phy 								; save the operator on the stack.
.010181	e8		inx				inx 								; this is like evaluate next
.010182	e8		inx				inx
.010183	a9 00 0e	lda #$0e00			lda 	#7<<9 						; except we use a very high precedence to make it atomic
.010186	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.010189	ca		dex				dex 								; unwind the stack.
.01018a	ca		dex				dex
.01018b	68		pla				pla 								; restore the unary operator.
.01018c	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01018f	f0 03		beq $010194			beq 	_ELMinus
.010191	4c fb 02	jmp $0102fb			jmp 	SyntaxError
.010194					_ELMinus:
.010194	38		sec				sec 								; do the negation calculation.
.010195	a9 00 00	lda #$0000			lda 	#0
.010198	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01019a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01019c	a9 00 00	lda #$0000			lda 	#0
.01019f	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101a1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101a3	82 40 ff	brl $0100e6			brl 	_ELGotAtom					; and continue.
.0101a6					EvaluateNext:
.0101a6	e8		inx				inx
.0101a7	e8		inx				inx
.0101a8	a9 00 00	lda #$0000			lda 	#0<<9
.0101ab	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.0101ae	ca		dex				dex
.0101af	ca		dex				dex
.0101b0	60		rts				rts
.0101b1					EvaluateInteger:
.0101b1	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101b4	b0 01		bcs $0101b7			bcs 	EIType
.0101b6	60		rts				rts
.0101b7					EIType:
.0101b7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101ba	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101c2	78 70 65 63 74 65 64 00
.0101ca					EvaluateNextInteger:
.0101ca	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101cd	b0 e8		bcs $0101b7			bcs 	EIType
.0101cf	60		rts				rts
.0101d0					EvaluateString:
.0101d0	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101d3	90 01		bcc $0101d6			bcc 	ESType
.0101d5	60		rts				rts
.0101d6					ESType:
.0101d6	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101d9	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextString:
.0101e9	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101ec	90 e8		bcc $0101d6			bcc 	ESType
.0101ee	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101ef					VariableAccessExpression:
.0101ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101f1	48		pha				pha
.0101f2	20 6c 02	jsr $01026c			jsr 	VariableFind 				; try to find the variable
.0101f5	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0101f7	90 48		bcc $010241			bcc 	_VANError
.0101f9	68		pla				pla 								; get and save that first token
.0101fa	48		pha				pha
.0101fb	29 00 10	and #$1000			and 	#$1000 						; is it an array ?
.0101fe	f0 2d		beq $01022d			beq 	_VANNotArray
.010200	a5 1e		lda $1e				lda 	DVariablePtr 				; push the variable address on the stack as well.
.010202	48		pha				pha
.010203	20 ca 01	jsr $0101ca			jsr		EvaluateNextInteger 		; get the subscript
.010206	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; skip right bracket.
.010209	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01020c	d0 47		bne $010255			bne 	_VANSubscript
.01020e	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010210	f0 02		beq $010214			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010212	b0 41		bcs $010255			bcs 	_VANSubscript
.010214					_VANSubOkay:
.010214	0a		asl a				asl 	a 							; double lsword
.010215	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.010217	68		pla				pla 								; restore DVariablePtr
.010218	85 1e		sta $1e				sta 	DVariablePtr
.01021a	68		pla				pla 								; get and save that first token
.01021b	48		pha				pha
.01021c	29 00 20	and #$2000			and 	#$2000 						; is it a string ?
.01021f	d0 02		bne $010223			bne 	_VANNotString  				; if not, i.e. it is an integeer
.010221	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.010223					_VANNotString
.010223	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.010225	18		clc				clc 								; add 2 to get it past the high subscript
.010226	69 02 00	adc #$0002			adc 	#2
.010229	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01022b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01022d					_VANNotArray:
.01022d	68		pla				pla 								; get the token back.
.01022e	29 00 20	and #$2000			and 	#$2000 						; this is the integer/string bit. $2000 if string, $0000 if int
.010231	49 00 20	eor #$2000			eor 	#$2000 						; now $0000 if string, $2000 if integer.
.010234	38		sec				sec 								; set up return string.
.010235	f0 06		beq $01023d			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010237	18		clc				clc 								; returning a number, read high data word
.010238	a0 02 00	ldy #$0002			ldy 	#2
.01023b	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01023d					_VANLoadLower:
.01023d	a8		tay				tay 								; put A into Y (this is the high byte)
.01023e	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010240	60		rts				rts
.010241					_VANError:
.010241	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010244	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01024c	20 75 6e 6b 6e 6f 77 6e 00
.010255					_VANSubscript:
.010255	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010258	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010260	79 20 53 75 62 73 63 72 69 70 74 00
.01026c					VariableFind:
.01026c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01026e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010271	90 5c		bcc $0102cf			bcc 	_VFError
.010273	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010276	b0 11		bcs $010289			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010278	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01027b	3a		dec a				dec 	a 							; now 0-25
.01027c	0a		asl a				asl 	a 							; x 4 and clear carry
.01027d	0a		asl a				asl 	a
.01027e	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010281	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010283	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010285	e6 06		inc $06				inc 	DCodePtr
.010287	38		sec				sec 								; return with carry set.
.010288	60		rts				rts
.010289					_VFSlowVariable:
.010289	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01028b	29 00 30	and #$3000			and 	#$3000 						; get the type bits out --xx ---- ---- ----
.01028e	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01028f	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010290	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010293	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010295	85 08		sta $08				sta 	DTemp1
.010297	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010299	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01029c	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01029d	65 08		adc $08				adc 	DTemp1
.01029f	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102a1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102a3					_VFNext:
.0102a3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102a5	f0 26		beq $0102cd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102a7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102a9	a8		tay				tay 								; read the address of the name at $0002,y
.0102aa	b9 02 00	lda $0002,y			lda 	$0002,y
.0102ad	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102af	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102b2					_VFCompare:
.0102b2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102b4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102b6	d0 eb		bne $0102a3			bne 	_VFNext 					; if not, go to the next one.
.0102b8	c8		iny				iny 								; advance token pointer
.0102b9	c8		iny				iny
.0102ba	29 00 08	and #$0800			and 	#$0800 						; if continuation bit set, keep going
.0102bd	d0 f3		bne $0102b2			bne 	_VFCompare
.0102bf	98		tya				tya 								; this is the length of the word.
.0102c0	18		clc				clc 								; so we add it to the code pointer
.0102c1	65 06		adc $06				adc 	DCodePtr
.0102c3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102c5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102c7	18		clc				clc 								; four on is the actual data
.0102c8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102cb	38		sec				sec 								; return with CS indicating success
.0102cc	60		rts				rts
.0102cd					_VFFail:
.0102cd	18		clc				clc
.0102ce	60		rts				rts
.0102cf					_VFError:
.0102cf	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102d2	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102da	76 61 72 69 61 62 6c 65 00
.0102e3					VariableCreate:
.0102e3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.0102e4					ErrorHandler:
.0102e4	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0102e6	fa		plx				plx 								; address of error message -1
.0102e7	ea		nop				nop
.0102e8	80 fe		bra $0102e8	_EH1:	bra 	_EH1
.0102ea					IllegalToken:
.0102ea	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102ed	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0102f5	54 6f 6b 65 6e 00
.0102fb					SyntaxError:
.0102fb	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102fe	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010306	72 72 6f 72 00
.01030b					ExpectToken:
.01030b	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01030d	d0 05		bne $010314			bne 	_CTKError					; error if not
.01030f	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010311	e6 06		inc $06				inc 	DCodePtr
.010313	60		rts				rts
.010314					_CTKError:
.010314	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010317	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01031f	74 6f 6b 65 6e 00
.010325					ExpectRightBracket:
.010325	48		pha				pha
.010326	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010329	20 0b 03	jsr $01030b			jsr 	ExpectToken
.01032c	68		pla				pla
.01032d	60		rts				rts
.01032e					ExpectComma:
.01032e	48		pha				pha
.01032f	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010332	20 0b 03	jsr $01030b			jsr 	ExpectToken
.010335	68		pla				pla
.010336	60		rts				rts
.010337					CheckBothNumeric:
.010337	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010339	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01033b	30 01		bmi $01033e			bmi 	_CBNFail 					; need to both be zero in bit 15
.01033d	60		rts				rts
.01033e					_CBNFail:
.01033e	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010341	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010349	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010357					ResetTypeInteger:
.010357	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010359	29 ff 7f	and #$7fff			and 	#$7FFF
.01035c	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01035e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.01035f					StringTempAllocate:
.01035f	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010362	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010365	18		clc				clc 								; this adds one, for the length.
.010366	65 16		adc $16				adc 	DTempStringPointer
.010368	85 16		sta $16				sta 	DTempStringPointer
.01036a	48		pha				pha
.01036b	a9 00 00	lda #$0000			lda 	#$0000
.01036e	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010370	92 16		sta ($16)			sta		(DTempStringPointer)
.010372	c2 20		rep #$20			rep 	#$20
.010374	68		pla				pla
.010375	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010377	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010379	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01037b	60		rts				rts
.01037c					StringCreateCopy:
.01037c	a8		tay				tay 								; put pointer to string in Y
.01037d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010380	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010383	f0 17		beq $01039c			beq 	_SCCExit 					; do nothing if length zero.
.010385	da		phx				phx 								; save X and put the character count in X
.010386	aa		tax				tax
.010387	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010389					_SCCCopy:
.010389	c8		iny				iny 								; advance and read (first time skips length)
.01038a	b9 00 00	lda $0000,y			lda 	$0000,y
.01038d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01038f	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010391	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010393	1a		inc a				inc 	a
.010394	92 18		sta ($18)			sta 	(DStartTempString)
.010396	ca		dex				dex 								; do X times
.010397	d0 f0		bne $010389			bne 	_SCCCopy
.010399	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01039b	fa		plx				plx
.01039c					_SCCExit:
.01039c	60		rts				rts
.01039d					StringMakeConcrete:
.01039d	85 08		sta $08				sta 	DTemp1 						; source
.01039f	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0103a1	29 ff 00	and #$00ff			and 	#$00FF
.0103a4	48		pha				pha 								; save on stack.
.0103a5	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0103a8	18		clc				clc
.0103a9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0103ac	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0103ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0103b0	85 0c		sta $0c				sta 	DTemp2 						; target
.0103b2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0103b3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0103b5					_SMCLoop:
.0103b5	b1 08		lda ($08),y			lda 	(DTemp1),y
.0103b7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0103b9	88		dey				dey
.0103ba	10 f9		bpl $0103b5			bpl 	_SMCLoop
.0103bc	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0103be	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0103c0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0103c1					Binary_Add:
.0103c1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0103c3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0103c5	30 12		bmi $0103d9		bmi 	_BATypeError
.0103c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0103c9	30 3f		bmi $01040a		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0103cb	18		clc			clc
.0103cc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103ce	75 02		adc $02,x		adc 	EXSValueL+2,x
.0103d0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103d2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103d4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0103d6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103d8	60		rts			rts
.0103d9					_BATypeError:
.0103d9	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103dc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0103e4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0103f4	65 73 00
.0103f7					_BALengthError:
.0103f7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103fa	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010402	6f 6f 20 6c 6f 6e 67 00
.01040a					_BAConcatenateString:
.01040a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01040c	85 08		sta $08			sta 	DTemp1
.01040e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010410	85 0c		sta $0c			sta 	DTemp2
.010412	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010414	18		clc			clc 										; work out the total length
.010415	b2 08		lda ($08)		lda 	(DTemp1)
.010417	72 0c		adc ($0c)		adc 	(DTemp2)
.010419	b0 14		bcs $01042f		bcs 	_BAConcatLengthError 				; string is too long.
.01041b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01041d	20 5f 03	jsr $01035f		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010420	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010422	74 10		stz $10,x		stz 	EXSValueH+0,x
.010424	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010426	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.010429	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01042b	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.01042e	60		rts			rts
.01042f					_BAConcatLengthError:
.01042f	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010432	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01043a	6f 6f 20 6c 6f 6e 67 00
.010442					Binary_Subtract:
.010442	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010445	38		sec			sec
.010446	b5 00		lda $00,x		lda		EXSValueL+0,x
.010448	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01044a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01044c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01044e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010450	95 10		sta $10,x		sta 	EXSValueH+0,x
.010452	60		rts			rts
.010453					Binary_ShiftRight:
.010453	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010456	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010458	29 3f 00	and #$003f		and 	#63
.01045b	f0 07		beq $010464		beq		_Binary_SRExit
.01045d					_Binary_SRLoop:
.01045d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01045f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010461	3a		dec a			dec 	a
.010462	d0 f9		bne $01045d		bne 	_Binary_SRLoop
.010464					_Binary_SRExit:
.010464	60		rts			rts
.010465					Binary_ShiftLeft:
.010465	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010468	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01046a	29 3f 00	and #$003f		and 	#63
.01046d	f0 07		beq $010476		beq		_Binary_SLExit
.01046f					_Binary_SLLoop:
.01046f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010471	36 10		rol $10,x		rol 	EXSValueH+0,x
.010473	3a		dec a			dec 	a
.010474	d0 f9		bne $01046f		bne 	_Binary_SLLoop
.010476					_Binary_SLExit:
.010476	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010477					Binary_And:
.010477	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01047a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01047c	35 02		and $02,x		and 	EXSValueL+2,x
.01047e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010480	b5 10		lda $10,x		lda		EXSValueH+0,x
.010482	35 12		and $12,x		and 	EXSValueH+2,x
.010484	95 10		sta $10,x		sta 	EXSValueH+0,x
.010486	60		rts			rts
.010487					Binary_Or:
.010487	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01048a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01048c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01048e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010490	b5 10		lda $10,x		lda		EXSValueH+0,x
.010492	15 12		ora $12,x		ora 	EXSValueH+2,x
.010494	95 10		sta $10,x		sta 	EXSValueH+0,x
.010496	60		rts			rts
.010497					Binary_Xor:
.010497	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01049a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01049c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01049e	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104a0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104a2	55 12		eor $12,x		eor 	EXSValueH+2,x
.0104a4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104a6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0104a7					Binary_Equals:
.0104a7	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104aa	b0 0e		bcs $0104ba		bcs 	_BEString
.0104ac	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104ae	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104b0	d0 4f		bne $010501		bne 	Compare_Fail
.0104b2	b5 10		lda $10,x		lda 	EXSValueH,x
.0104b4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104b6	d0 49		bne $010501		bne 	Compare_Fail
.0104b8	80 3f		bra $0104f9		bra 	Compare_Succeed
.0104ba					_BEString:
.0104ba	09 00 00	ora #$0000		ora 	#$0000
.0104bd	f0 3a		beq $0104f9		beq 	Compare_Succeed
.0104bf	80 40		bra $010501		bra 	Compare_Fail
.0104c1					Binary_NotEquals:
.0104c1	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104c4	b0 0e		bcs $0104d4		bcs 	_BNEString
.0104c6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104c8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104ca	d0 2d		bne $0104f9		bne 	Compare_Succeed
.0104cc	b5 10		lda $10,x		lda 	EXSValueH,x
.0104ce	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104d0	d0 27		bne $0104f9		bne 	Compare_Succeed
.0104d2	80 2d		bra $010501		bra 	Compare_Fail
.0104d4					_BNEString:
.0104d4	09 00 00	ora #$0000		ora 	#$0000
.0104d7	d0 20		bne $0104f9		bne 	Compare_Succeed
.0104d9	80 26		bra $010501		bra 	Compare_Fail
.0104db					Binary_Less:
.0104db	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104de	b0 12		bcs $0104f2		bcs 	_BLString
.0104e0	38		sec			sec
.0104e1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0104e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104e5	b5 10		lda $10,x		lda 	EXSValueH,x
.0104e7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e9	50 03		bvc $0104ee		bvc 	*+5
.0104eb	49 00 80	eor #$8000		eor 	#$8000
.0104ee	30 09		bmi $0104f9		bmi 	Compare_Succeed
.0104f0	80 0f		bra $010501		bra 	Compare_Fail
.0104f2					_BLString:
.0104f2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0104f5	f0 02		beq $0104f9		beq 	Compare_Succeed
.0104f7	80 08		bra $010501		bra 	Compare_Fail
.0104f9					Compare_Succeed:
.0104f9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0104fc	95 00		sta $00,x		sta 	EXSValueL,x
.0104fe	95 10		sta $10,x		sta 	EXSValueH,x
.010500	60		rts			rts
.010501					Compare_Fail:
.010501	74 00		stz $00,x		stz 	EXSValueL,x
.010503	74 10		stz $10,x		stz 	EXSValueH,x
.010505	60		rts			rts
.010506					Binary_GreaterEqual:
.010506	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010509	b0 12		bcs $01051d		bcs 	_BGEString
.01050b	38		sec			sec
.01050c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01050e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010510	b5 10		lda $10,x		lda 	EXSValueH,x
.010512	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010514	50 03		bvc $010519		bvc 	*+5
.010516	49 00 80	eor #$8000		eor 	#$8000
.010519	10 de		bpl $0104f9		bpl 	Compare_Succeed
.01051b	80 e4		bra $010501		bra 	Compare_Fail
.01051d					_BGEString:
.01051d	09 00 00	ora #$0000		ora 	#$0000
.010520	10 d7		bpl $0104f9		bpl 	Compare_Succeed
.010522	80 dd		bra $010501		bra 	Compare_Fail
.010524					Binary_LessEqual:
.010524	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010527	b0 12		bcs $01053b		bcs 	_BLEString
.010529	18		clc			clc 									; numeric <= signed
.01052a	b5 00		lda $00,x		lda 	EXSValueL,x
.01052c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01052e	b5 10		lda $10,x		lda 	EXSValueH,x
.010530	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010532	50 03		bvc $010537		bvc 	*+5
.010534	49 00 80	eor #$8000		eor 	#$8000
.010537	30 c0		bmi $0104f9		bmi 	Compare_Succeed
.010539	80 c6		bra $010501		bra 	Compare_Fail
.01053b					_BLEString:
.01053b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01053e	d0 b9		bne $0104f9		bne 	Compare_Succeed
.010540	80 bf		bra $010501		bra 	Compare_Fail
.010542					Binary_Greater:
.010542	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010545	b0 12		bcs $010559		bcs 	_BGString
.010547	18		clc			clc 									; numeric > signed
.010548	b5 00		lda $00,x		lda 	EXSValueL,x
.01054a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01054c	b5 10		lda $10,x		lda 	EXSValueH,x
.01054e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010550	50 03		bvc $010555		bvc 	*+5
.010552	49 00 80	eor #$8000		eor 	#$8000
.010555	10 a2		bpl $0104f9		bpl 	Compare_Succeed
.010557	80 a8		bra $010501		bra 	Compare_Fail
.010559					_BGString:
.010559	c9 01 00	cmp #$0001		cmp 	#$0001
.01055c	f0 9b		beq $0104f9		beq 	Compare_Succeed
.01055e	80 a1		bra $010501		bra 	Compare_Fail
.010560					CompareTypeCheck:
.010560	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010562	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010564	30 06		bmi $01056c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010566	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010568	30 1c		bmi $010586		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01056a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01056b	60		rts			rts
.01056c					_CTCFail:
.01056c	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>01056f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010577	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010586					_CTCStringCompare:
.010586	20 57 03	jsr $010357		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010589	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01058b	85 08		sta $08			sta 	DTemp1
.01058d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01058f	85 0c		sta $0c			sta 	DTemp2
.010591	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010594	a8		tay			tay
.010595	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010597	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010599	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01059b	90 02		bcc $01059f		bcc 	_CTCSmallest
.01059d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01059f					_CTCSmallest:
.01059f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0105a1					_CTCCompare:
.0105a1	c8		iny			iny 									; look at next character (done first, first char is size)
.0105a2	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0105a4	30 16		bmi $0105bc		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0105a6	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0105a8	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0105aa	f0 f5		beq $0105a1		beq 	_CTCCompare 					; if zero, try the next character.
.0105ac	b0 07		bcs $0105b5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0105ae					_CTCLess:
.0105ae	c2 20		rep #$20		rep 	#$20
.0105b0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0105b3	80 14		bra $0105c9		bra 	_CTCExit
.0105b5					_CTCGreater:
.0105b5	c2 20		rep #$20		rep 	#$20
.0105b7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0105ba	80 0d		bra $0105c9		bra 	_CTCExit
.0105bc					_CTCEqualSoFar:
.0105bc	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0105be	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0105c0	90 ec		bcc $0105ae		bcc 	_CTCLess
.0105c2	d0 f1		bne $0105b5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0105c4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0105c6	a9 00 00	lda #$0000		lda 	#$0000
.0105c9					_CTCExit:
.0105c9	38		sec			sec 									; return with CS indicating string comparison.
.0105ca	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0105cb					Binary_Divide:
.0105cb	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.0105ce	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0105d0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0105d2	d0 14		bne $0105e8		bne 	_BinaryDivide_Ok
.0105d4	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0105d7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0105df	20 62 79 20 7a 65 72 6f 00
.0105e8					_BinaryDivide_Ok:
.0105e8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0105ea	64 0a		stz $0a			stz 	DTemp1+2
.0105ec	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0105ee	5a		phy			phy 										; save Y (bit counter)
.0105ef	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0105f1	10 07		bpl $0105fa		bpl 	_BinaryDivide_RightDone
.0105f3	e8		inx			inx
.0105f4	e8		inx			inx
.0105f5	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.0105f8	ca		dex			dex
.0105f9	ca		dex			dex
.0105fa					_BinaryDivide_RightDone:
.0105fa	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0105fc	10 03		bpl $010601		bpl 	_BinaryDivide_LeftDone
.0105fe	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.010601					_BinaryDivide_LeftDone:
.010601	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010604					_BinaryDivide_Loop:
.010604	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010606	36 10		rol $10,x		rol 	EXSValueH+0,x
.010608	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01060a	26 0a		rol $0a			rol 	DTemp1+2
.01060c	38		sec			sec											; calculate A-M
.01060d	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01060f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010611	85 0c		sta $0c			sta 	DTemp2
.010613	a5 0a		lda $0a			lda 	DTemp1+2
.010615	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010617	90 08		bcc $010621		bcc 	_Binary_NoSubract 					; if A < M skip this
.010619	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01061b	a5 0c		lda $0c			lda 	DTemp2
.01061d	85 08		sta $08			sta 	DTemp1+0
.01061f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010621					_Binary_NoSubract:
.010621	88		dey			dey 										; do it 32 times.
.010622	d0 e0		bne $010604		bne 	_BinaryDivide_Loop
.010624					_BinaryDivide_Exit:
.010624	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010626	29 01 00	and #$0001		and 	#1
.010629	f0 03		beq $01062e		beq 	_BinaryDivide_Exit2
.01062b	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.01062e					_BinaryDivide_Exit2:
.01062e	7a		ply			ply 										; restore Y
.01062f	60		rts			rts
.010630					Binary_DivNegate:
.010630	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010632	38		sec			sec 										; negate the value at stack X.
.010633	a9 00 00	lda #$0000		lda 	#$0000
.010636	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010638	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063a	a9 00 00	lda #$0000		lda 	#$0000
.01063d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01063f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010641	60		rts			rts
.010642					Binary_Modulus:
.010642	20 cb 05	jsr $0105cb		jsr 	Binary_Divide 						; do the divide
.010645	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010647	95 00		sta $00,x		sta 	EXSValueL+0,x
.010649	a5 0a		lda $0a			lda 	DTemp1+2
.01064b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01064d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01064e					Binary_Multiply:
.01064e	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010651	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010653	85 08		sta $08			sta 	DTemp1
.010655	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010657	85 0a		sta $0a			sta		DTemp1+2
.010659	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01065b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01065d					_BinaryMultiply_Loop:
.01065d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01065f	05 0a		ora $0a			ora 	DTemp1+2
.010661	f0 1e		beq $010681		beq 	_BinaryMultiply_Exit
.010663	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010665	29 01 00	and #$0001		and 	#1
.010668	f0 0d		beq $010677		beq 	_BinaryMultiply_NoAdd
.01066a	18		clc			clc 										; add multiplicand to result.
.01066b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01066d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01066f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010671	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010673	75 12		adc $12,x		adc 	EXSValueH+2,x
.010675	95 10		sta $10,x		sta 	EXSValueH+0,x
.010677					_BinaryMultiply_NoAdd:
.010677	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010679	66 08		ror $08			ror 	DTemp1
.01067b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01067d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01067f	80 dc		bra $01065d		bra 	_BinaryMultiply_Loop 				; go round again.
.010681					_BinaryMultiply_Exit:
.010681	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010682					Function_Len:
.010682	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.010685	20 e9 01	jsr $0101e9			jsr 	EvaluateNextString 			; get the value you are absoluting
.010688	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.01068b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01068d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010690	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010693	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010695	74 10		stz $10,x			stz 	EXSValueH+0,x
.010697	60		rts				rts
.010698					Function_Abs:
.010698	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.01069b	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01069e	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106a1	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0106a3	30 07		bmi $0106ac			bmi 	_FAbsNegative 				; negate it if negative
.0106a5	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0106a7	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0106a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106ab	60		rts				rts
.0106ac					_FAbsNegative:
.0106ac	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0106ad	a9 00 00	lda #$0000			lda 	#0
.0106b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0106b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106b4	a9 00 00	lda #$0000			lda 	#0
.0106b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0106b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106bb	60		rts				rts
.0106bc					Function_Sgn:
.0106bc	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns integer
.0106bf	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get an integer
.0106c2	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106c5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0106c7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0106c9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0106cb	30 07		bmi $0106d4			bmi 	_FSgnNegative 				; set to -1 if signed
.0106cd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0106cf	f0 02		beq $0106d3			beq 	_FSgnExit
.0106d1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0106d3					_FSgnExit:
.0106d3	60		rts				rts
.0106d4					_FSgnNegative:
.0106d4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0106d7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106d9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106db	60		rts				rts
.0106dc					Function_Random:
.0106dc	20 57 03	jsr $010357			jsr 	ResetTypeInteger
.0106df	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0106e1	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0106e3	d0 0a		bne $0106ef			bne 	_Rnd_NotZero
.0106e5	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0106e8	85 10		sta $10				sta 	DRandom
.0106ea	a9 ea 00	lda #$00ea			lda 	#$EA
.0106ed	85 12		sta $12				sta 	DRandom+2
.0106ef					_Rnd_NotZero:
.0106ef	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process 				; call randomiser twice
.0106f2	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106f4	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process
.0106f7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106f9	60		rts				rts
.0106fa					_Rnd_Process:
.0106fa	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0106fc	26 12		rol $12				rol 	DRandom+2
.0106fe	90 0e		bcc $01070e			bcc 	_Rnd_Exit
.010700	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010702	49 54 d4	eor #$d454			eor 	#$D454
.010705	85 10		sta $10				sta 	DRandom
.010707	a5 12		lda $12				lda 	DRandom+2
.010709	49 d5 55	eor #$55d5			eor 	#$55D5
.01070c	85 12		sta $12				sta 	DRandom+2
.01070e					_Rnd_Exit:
.01070e	a5 10		lda $10				lda 	DRandom
.010710	45 12		eor $12				eor 	DRandom+2
.010712	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010713					Function_ASSERT:
.010713	20 b1 01	jsr $0101b1			jsr 	EvaluateInteger 			; something that returns an integer.
.010716	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010718	05 08		ora $08				ora 	Dtemp1
.01071a	f0 01		beq $01071d			beq 	_FAssFail
.01071c	60		rts				rts
.01071d					_FAssFail:
.01071d	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010720	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010728	61 69 6c 65 64 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.01072e					Function_Let:
.01072e	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.01072f					Function_END:
.01072f	02 00		cop #$00			cop 	#0
.010731					Function_RUN:
.010731	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010733	18		clc				clc
.010734	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010737					_FRun_NextLineNumber:
.010737	a8		tay				tay 								; put in Y
.010738	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01073b	f0 f2		beq $01072f			beq 	Function_END 				; if zero, off the end of the program
.01073d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010740	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010742	98		tya				tya 								; get address back
.010743	18		clc				clc 								; skip over the link/line number
.010744	69 04 00	adc #$0004			adc 	#4
.010747	85 06		sta $06				sta 	DCodePtr
.010749					_FRun_NextInstruction:
.010749	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.01074c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01074e	38		sec				sec
.01074f	e9 00 01	sbc #$0100			sbc 	#256
.010752	85 16		sta $16				sta 	DTempStringPointer
.010754	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010756	f0 28		beq $010780			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010758	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.01075b	f0 18		beq $010775			beq 	_FRun_Colon
.01075d	a8		tay				tay 								; save in Y
.01075e	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 001x
.010761	c9 00 20	cmp #$2000			cmp 	#$2000
.010764	d0 15		bne $01077b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010766	98		tya				tya 								; get token back
.010767	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01076a	0a		asl a				asl 	a 							; double it into X
.01076b	aa		tax				tax
.01076c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01076e	e6 06		inc $06				inc 	DCodePtr
.010770	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010773	80 d4		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.010775					_FRun_Colon:
.010775	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010777	e6 06		inc $06				inc 	DCodePtr
.010779	80 ce		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.01077b					_FRun_TryLET:
.01077b	20 2e 07	jsr $01072e			jsr 	Function_LET 				; try as a LET.
.01077e	80 c9		bra $010749			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010780					_FRun_EndInstruction:
.010780	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010782	1a		inc a				inc 	a 							; go to link for next line
.010783	1a		inc a				inc 	a
.010784	80 b1		bra $010737			bra 	_FRun_NextLineNumber

;******  Return to file: ../source/basic.asm

.010786					SwitchBasicInstance:
.010786	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010788	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01078b	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01078d	86 02		stx $02				stx		DBaseAddress
.01078f	84 04		sty $04				sty 	DHighAddress
.010791	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010792	48		pha				pha 										; then copy it into B.
.010793	ab		plb				plb
.010794	ab		plb				plb
.010795	4c 31 07	jmp $010731			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	84 95 5c b2 00 00 00 00 00 00 00 00 42 00 00 00
>024018	00 00 00 00 43 00 00 00 00 00 00 00 00 00 00 00
>024028	43 bf ff ff 00 00 00 00 00 00 00 00 28 00 00 00
>024038	00 00 00 00 00 00 00 00 1b 50 ff ff 2a 1d ff ff
>024048	00 00 00 00 00 00 00 00 00 00 00 00 a7 a1 03 00
>024058	fe ff ff ff 23 00 00 00 00 00 00 00 e4 95 00 00
>024068	00 00 00 00 34 00 00 00 c6 ff ff ff 00 00 00 00
>024078	00 00 00 00 00 00 00 00 1a 95 b4 92 8e 93 ba 93
>024088	78 91 58 8b 52 95 e0 91 74 94 c6 88 b2 84 ec 8e
>024098	f2 92 dc 94 7c 92 22 93 fa 8e 60 90 94 88 ea 94
>0240a8	6e 93 82 94 c2 92 30 93 e2 90 c2 91 b2 94 94 87
>0240b8	e0 8f 28 95 02 94 60 95 9e 8f 24 92 76 8e 16 91
>0240c8	c2 93 5a 95 d8 89 22 95 80 91 54 92 98 8d 96 93
>0240d8	0a 8a fc 93 e4 94 ac 94 80 93 a8 92 52 8d 52 93
>0240e8	a4 91 76 95 08 95 c0 90 98 94 64 94 bc 8b 42 95
>0240f8	24 94 e2 93 3c 92 cc 94 14 00 01 00 1b 3e f2 e3
>024108	06 22 08 00 04 41 56 4e 52 00 00 00 16 00 02 00
>024118	1b 3e cd dc 04 d0 03 40 19 32 06 22 02 10 d2 40
>024128	00 00 16 00 03 00 1b 3e 79 fd 0f f5 03 40 19 32
>024138	06 22 04 00 01 4b 00 00 14 00 04 00 1b 3e b8 ed
>024148	07 e0 06 22 06 00 02 41 52 00 00 00 10 00 05 00
>024158	1b 3e 8c c2 06 22 0b 24 8b 89 00 00 0e 00 06 00
>024168	1b 3e e5 c0 06 22 5b 9b 00 00 18 00 07 00 1b 3e
>024178	41 de 0e d0 03 40 19 32 06 22 0b 24 01 10 1b ac
>024188	00 00 16 00 08 00 1b 3e 5f ee 12 e6 06 22 08 00
>024198	04 47 45 4b 50 00 00 00 18 00 09 00 1b 3e 58 fe
>0241a8	23 f0 00 40 19 32 06 22 06 00 02 47 44 00 00 00
>0241b8	12 00 0a 00 1b 3e 51 cd 07 c0 06 22 05 10 f7 ab
>0241c8	00 00 10 00 0b 00 1b 3e 7f e2 06 22 04 00 01 59
>0241d8	00 00 12 00 0c 00 1b 3e 8c cd 07 c0 06 22 07 10
>0241e8	ea 40 00 00 14 00 0d 00 1b 3e 37 ce 21 c0 06 22
>0241f8	0b 24 03 10 3d b6 00 00 12 00 0e 00 1b 3e 7c c5
>024208	06 22 0b 24 04 10 a6 a3 00 00 14 00 0f 00 1b 3e
>024218	11 e6 06 22 08 00 05 43 4c 49 5a 57 00 00 18 00
>024228	10 00 1b 3e 86 fb da f5 03 40 19 32 06 22 06 00
>024238	02 4d 5a 00 00 00 1a 00 11 00 1b 3e 99 f9 15 f0
>024248	02 40 19 32 06 22 08 00 04 5a 46 54 51 00 00 00
>024258	16 00 12 00 1b 3e 41 de 0e d0 04 40 19 32 06 22
>024268	05 10 42 69 00 00 14 00 13 00 1b 3e 01 d3 03 40
>024278	19 32 06 22 02 10 42 9d 00 00 18 00 14 00 1b 3e
>024288	a9 dd 77 d2 02 40 19 32 06 22 0b 24 02 10 a6 73
>024298	00 00 14 00 15 00 1b 3e 72 c9 a1 c3 06 22 0b 24
>0242a8	03 10 04 45 00 00 16 00 16 00 1b 3e cb ec 13 e6
>0242b8	06 22 08 00 05 51 45 4b 47 4b 00 00 12 00 17 00
>0242c8	1b 3e cd e8 49 e6 06 22 04 00 00 00 00 00 10 00
>0242d8	18 00 1b 3e 16 c0 06 22 01 10 e4 55 00 00 18 00
>0242e8	19 00 1b 3e b9 f0 00 40 19 32 06 22 08 00 04 4a
>0242f8	54 4e 4b 00 00 00 12 00 1a 00 1b 3e e8 ca 36 c3
>024308	06 22 07 10 9a 7d 00 00 18 00 1b 00 1b 3e 80 fa
>024318	1d f0 02 40 19 32 06 22 06 00 03 55 44 51 00 00
>024328	12 00 1c 00 1b 3e 08 d0 03 40 19 32 06 22 03 40
>024338	00 00 14 00 1d 00 1b 3e c1 e0 06 22 08 00 05 48
>024348	4f 4f 41 45 00 00 16 00 1e 00 1b 3e 2b f6 03 40
>024358	19 32 06 22 06 00 02 4b 55 00 00 00 12 00 1f 00
>024368	1b 3e 14 e4 06 22 06 00 02 55 4a 00 00 00 16 00
>024378	20 00 1b 3e 23 fc de f2 03 40 19 32 06 22 04 00
>024388	01 4a 00 00 10 00 21 00 1b 3e 76 c1 06 22 03 10
>024398	53 6f 00 00 16 00 22 00 1b 3e 2f f2 02 40 19 32
>0243a8	06 22 06 00 02 52 55 00 00 00 14 00 23 00 1b 3e
>0243b8	21 dc 0c d0 02 40 19 32 06 22 27 46 00 00 18 00
>0243c8	24 00 1b 3e b9 f0 00 40 19 32 06 22 08 00 04 4a
>0243d8	54 4e 4b 00 00 00 12 00 25 00 1b 3e 41 ec 1e e0
>0243e8	06 22 04 00 01 55 00 00 16 00 26 00 1b 3e 36 d3
>0243f8	01 40 19 32 06 22 0b 24 02 10 c9 b6 00 00 12 00
>024408	27 00 1b 3e 49 d1 01 40 19 32 06 22 31 40 00 00
>024418	18 00 28 00 1b 3e 2c dd 40 d6 04 40 19 32 06 22
>024428	0b 24 05 10 97 71 00 00 14 00 29 00 1b 3e bf eb
>024438	0b e0 06 22 06 00 03 4d 55 55 00 00 12 00 2a 00
>024448	1b 3e 88 ed f1 e3 06 22 04 00 01 4c 00 00 14 00
>024458	2b 00 1b 3e 19 c9 19 c0 06 22 0b 24 02 10 b5 b6
>024468	00 00 14 00 2c 00 1b 3e 93 e0 06 22 08 00 05 57
>024478	55 4d 44 58 00 00 12 00 2d 00 1b 3e d8 ec b8 e1
>024488	06 22 04 00 01 59 00 00 16 00 2e 00 1b 3e 93 f4
>024498	02 40 19 32 06 22 06 00 02 56 4c 00 00 00 18 00
>0244a8	2f 00 1b 3e 59 dd d5 d5 01 40 19 32 06 22 0b 24
>0244b8	07 10 25 4e 00 00 14 00 30 00 1b 3e 3d c9 08 c6
>0244c8	06 22 0b 24 03 10 eb 60 00 00 12 00 31 00 1b 3e
>0244d8	7c c5 06 22 0b 24 04 10 a6 a3 00 00 14 00 32 00
>0244e8	1b 3e b7 e5 06 22 08 00 04 50 4d 51 4a 00 00 00
>0244f8	18 00 33 00 1b 3e 79 fd 0f f5 04 40 19 32 06 22
>024508	06 00 03 58 53 57 00 00 14 00 34 00 1b 3e 4d cd
>024518	18 c0 06 22 0b 24 01 10 0c 65 00 00 12 00 35 00
>024528	1b 3e 7f c5 06 22 0b 24 06 10 04 46 00 00 12 00
>024538	36 00 1b 3e fd e9 21 e0 06 22 04 00 01 41 00 00
>024548	16 00 37 00 1b 3e 42 d4 02 40 19 32 06 22 0b 24
>024558	05 10 fc 8a 00 00 10 00 38 00 1b 3e 70 e1 06 22
>024568	04 00 00 00 00 00 16 00 39 00 1b 3e 67 e8 21 e0
>024578	06 22 08 00 05 41 41 58 4e 4e 00 00 18 00 3a 00
>024588	1b 3e 16 dc fb d1 01 40 19 32 06 22 0b 24 01 10
>024598	20 a2 00 00 10 00 3b 00 1b 3e 77 e1 06 22 04 00
>0245a8	00 00 00 00 16 00 3c 00 1b 3e 0f ee 8a e0 06 22
>0245b8	08 00 05 41 53 44 48 56 00 00 1a 00 3d 00 1b 3e
>0245c8	aa fa 01 f0 01 40 19 32 06 22 08 00 05 42 42 52
>0245d8	43 4e 00 00 12 00 3e 00 1b 3e 2c ce 1a c0 06 22
>0245e8	0b 24 11 40 00 00 12 00 3f 00 1b 3e 4d c1 06 22
>0245f8	0b 24 03 10 b8 48 00 00 14 00 40 00 1b 3e b8 ed
>024608	07 e0 06 22 06 00 02 41 52 00 00 00 18 00 41 00
>024618	1b 3e 4f fc d6 f5 00 40 19 32 06 22 06 00 02 52
>024628	54 00 00 00 14 00 42 00 1b 3e a6 dd 1e d0 01 40
>024638	19 32 06 22 29 40 00 00 12 00 43 00 1b 3e 9a c1
>024648	06 22 0b 24 01 10 c6 7b 00 00 16 00 44 00 1b 3e
>024658	0f ee 8a e0 06 22 08 00 05 41 53 44 48 56 00 00
>024668	1a 00 45 00 1b 3e 29 fe 87 f4 02 40 19 32 06 22
>024678	08 00 04 43 41 54 4b 00 00 00 14 00 46 00 1b 3e
>024688	88 f0 02 40 19 32 06 22 04 00 01 42 00 00 12 00
>024698	47 00 1b 3e 36 ce 1f c0 06 22 0b 24 0f 40 00 00
>0246a8	12 00 48 00 1b 3e b7 ca 1a c0 06 22 0b 24 81 45
>0246b8	00 00 0e 00 49 00 1b 3e 04 c0 06 22 43 40 00 00
>0246c8	18 00 4a 00 1b 3e a9 dd 77 d2 02 40 19 32 06 22
>0246d8	0b 24 02 10 a6 73 00 00 14 00 4b 00 1b 3e 1a d0
>0246e8	00 40 19 32 06 22 0b 24 37 40 00 00 16 00 4c 00
>0246f8	1b 3e 05 db e8 d3 00 40 19 32 06 22 0b 24 19 40
>024708	00 00 14 00 4d 00 1b 3e 8c ed 13 e0 06 22 06 00
>024718	03 57 4d 44 00 00 12 00 4e 00 1b 3e cd e8 49 e6
>024728	06 22 04 00 00 00 00 00 18 00 4f 00 1b 3e 02 fb
>024738	1d f0 04 40 19 32 06 22 06 00 03 43 42 4b 00 00
>024748	14 00 50 00 1b 3e d9 e2 06 22 08 00 05 4e 45 42
>024758	58 53 00 00 10 00 51 00 1b 3e 40 c6 06 22 05 10
>024768	e7 6a 00 00 12 00 52 00 1b 3e 72 d0 01 40 19 32
>024778	06 22 2a 58 00 00 10 00 53 00 1b 3e 70 e1 06 22
>024788	04 00 00 00 00 00 14 00 54 00 1b 3e f6 e3 06 22
>024798	08 00 05 53 43 47 42 53 00 00 12 00 55 00 1b 3e
>0247a8	50 ea 0d e0 06 22 04 00 00 00 00 00 1a 00 56 00
>0247b8	1b 3e e5 fd 19 f0 00 40 19 32 06 22 08 00 04 46
>0247c8	54 4c 42 00 00 00 1a 00 57 00 1b 3e 05 fa 19 f0
>0247d8	01 40 19 32 06 22 08 00 05 43 4e 42 43 42 00 00
>0247e8	16 00 58 00 1b 3e 55 fd 13 f0 04 40 19 32 06 22
>0247f8	04 00 00 00 00 00 16 00 59 00 1b 3e d5 f4 00 40
>024808	19 32 06 22 06 00 02 4c 45 00 00 00 16 00 5a 00
>024818	1b 3e 9e f3 01 40 19 32 06 22 06 00 02 46 45 00
>024828	00 00 14 00 5b 00 1b 3e 72 c9 a1 c3 06 22 0b 24
>024838	03 10 04 45 00 00 14 00 5c 00 1b 3e 48 d4 01 40
>024848	19 32 06 22 0b 24 13 40 00 00 12 00 5d 00 1b 3e
>024858	24 cc a6 c4 06 22 04 10 1e 4c 00 00 18 00 5e 00
>024868	1b 3e 2c dd 40 d6 02 40 19 32 06 22 0b 24 04 10
>024878	98 96 00 00 16 00 5f 00 1b 3e d3 e9 52 e2 06 22
>024888	08 00 05 43 51 58 56 54 00 00 14 00 60 00 1b 3e
>024898	0d d4 04 40 19 32 06 22 0b 24 16 40 00 00 14 00
>0248a8	61 00 1b 3e 2e ee 18 e0 06 22 06 00 03 58 59 50
>0248b8	00 00 16 00 62 00 1b 3e 75 dd 17 d0 02 40 19 32
>0248c8	06 22 0b 24 18 40 00 00 0e 00 63 00 1b 3e 14 c0
>0248d8	06 22 23 40 00 00 12 00 64 00 1b 3e 2c ce 1a c0
>0248e8	06 22 0b 24 11 40 00 00 16 00 65 00 1b 3e 1e d9
>0248f8	02 d1 00 40 19 32 06 22 0b 24 93 7b 00 00 14 00
>024908	66 00 1b 3e b9 e3 06 22 08 00 04 50 54 56 52 00
>024918	00 00 1a 00 67 00 1b 3e f1 fc 0e f0 01 40 19 32
>024928	06 22 08 00 05 4d 42 54 50 4d 00 00 18 00 68 00
>024938	1b 3e a6 dd 1e d0 00 40 19 32 06 22 0b 24 02 10
>024948	3e 57 00 00 16 00 69 00 1b 3e 9e f3 00 40 19 32
>024958	06 22 06 00 03 55 51 56 00 00 16 00 6a 00 1b 3e
>024968	2e d5 01 40 19 32 06 22 0b 24 02 10 d2 a0 00 00
>024978	16 00 6b 00 1b 3e 4b fc bd f2 00 40 19 32 06 22
>024988	04 00 01 4e 00 00 16 00 6c 00 1b 3e 02 fb 1d f0
>024998	03 40 19 32 06 22 04 00 01 43 00 00 18 00 6d 00
>0249a8	1b 3e a6 dd 1e d0 00 40 19 32 06 22 0b 24 02 10
>0249b8	3e 57 00 00 0e 00 6e 00 1b 3e 15 c1 06 22 c8 a0
>0249c8	00 00 12 00 6f 00 1b 3e 31 c0 06 22 0b 24 02 10
>0249d8	07 87 00 00 12 00 70 00 1b 3e 63 c8 be c5 06 22
>0249e8	05 10 06 8e 00 00 14 00 71 00 1b 3e dc e2 06 22
>0249f8	08 00 04 41 51 51 51 00 00 00 16 00 72 00 1b 3e
>024a08	49 fc e1 f3 01 40 19 32 06 22 04 00 00 00 00 00
>024a18	16 00 73 00 1b 3e 9b ec 1b e0 06 22 08 00 05 4a
>024a28	52 41 56 5a 00 00 10 00 74 00 1b 3e d4 c9 8e c5
>024a38	06 22 06 40 00 00 14 00 75 00 1b 3e a6 dd 1e d0
>024a48	01 40 19 32 06 22 29 40 00 00 10 00 76 00 1b 3e
>024a58	8c c2 06 22 0b 24 8b 89 00 00 16 00 77 00 1b 3e
>024a68	fa f8 fd f0 01 40 19 32 06 22 04 00 01 59 00 00
>024a78	18 00 78 00 1b 3e a6 dd 1e d0 00 40 19 32 06 22
>024a88	0b 24 02 10 3e 57 00 00 14 00 79 00 1b 3e 97 e8
>024a98	a6 e2 06 22 06 00 03 44 45 58 00 00 10 00 7a 00
>024aa8	1b 3e 73 cc 81 c4 06 22 0b 40 00 00 16 00 7b 00
>024ab8	1b 3e 60 fb af f1 01 40 19 32 06 22 04 00 00 00
>024ac8	00 00 16 00 7c 00 1b 3e 42 d4 04 40 19 32 06 22
>024ad8	0b 24 06 10 45 52 00 00 18 00 7d 00 1b 3e cd dc
>024ae8	04 d0 02 40 19 32 06 22 0b 24 07 10 fd 5a 00 00
>024af8	0e 00 7e 00 1b 3e 0a c0 06 22 28 40 00 00 18 00
>024b08	7f 00 1b 3e 79 fd 0f f5 04 40 19 32 06 22 06 00
>024b18	03 58 53 57 00 00 16 00 80 00 1b 3e ab fa 21 f0
>024b28	03 40 19 32 06 22 04 00 00 00 00 00 1a 00 81 00
>024b38	1b 3e 25 f9 6b f0 01 40 19 32 06 22 08 00 04 45
>024b48	41 52 54 00 00 00 16 00 82 00 1b 3e 59 db e6 d2
>024b58	01 40 19 32 06 22 06 10 c5 4a 00 00 16 00 83 00
>024b68	1b 3e 23 dd 76 d1 03 40 19 32 06 22 07 10 ac 45
>024b78	00 00 12 00 84 00 1b 3e 5a e6 06 22 06 00 02 41
>024b88	55 00 00 00 16 00 85 00 1b 3e 13 f9 40 f6 02 40
>024b98	19 32 06 22 04 00 01 42 00 00 14 00 86 00 1b 3e
>024ba8	fe da a9 d4 05 40 19 32 06 22 2d 40 00 00 1a 00
>024bb8	87 00 1b 3e 4f fc 21 f0 01 40 19 32 06 22 08 00
>024bc8	04 51 55 4c 43 00 00 00 10 00 88 00 1b 3e fe c1
>024bd8	06 22 0b 24 4a 7d 00 00 14 00 89 00 1b 3e e0 f2
>024be8	04 40 19 32 06 22 04 00 01 48 00 00 16 00 8a 00
>024bf8	1b 3e 59 db e6 d2 01 40 19 32 06 22 06 10 c5 4a
>024c08	00 00 12 00 8b 00 1b 3e 0e c0 06 22 0b 24 01 10
>024c18	d6 a2 00 00 14 00 8c 00 1b 3e d6 cc 1f c0 06 22
>024c28	0b 24 01 10 a5 4c 00 00 14 00 8d 00 1b 3e ab ca
>024c38	10 c4 06 22 0b 24 04 10 bc 58 00 00 18 00 8e 00
>024c48	1b 3e 23 da 66 d5 01 40 19 32 06 22 0b 24 07 10
>024c58	1c 6b 00 00 16 00 8f 00 1b 3e 4d da 09 d0 03 40
>024c68	19 32 06 22 02 10 ce bf 00 00 16 00 90 00 1b 3e
>024c78	94 f8 1f f0 00 40 19 32 06 22 04 00 01 55 00 00
>024c88	18 00 91 00 1b 3e 9c dc 23 d0 02 40 19 32 06 22
>024c98	0b 24 02 10 ec b6 00 00 0e 00 92 00 1b 3e 14 c0
>024ca8	06 22 23 40 00 00 10 00 93 00 1b 3e 68 e0 06 22
>024cb8	04 00 01 58 00 00 10 00 94 00 1b 3e 80 c2 06 22
>024cc8	02 10 02 61 00 00 12 00 95 00 1b 3e fb cc 1a c0
>024cd8	06 22 0b 24 24 5f 00 00 18 00 96 00 1b 3e 44 d8
>024ce8	57 d5 02 40 19 32 06 22 0b 24 03 10 4e 4d 00 00
>024cf8	14 00 97 00 1b 3e 42 d8 23 d0 06 40 19 32 06 22
>024d08	59 40 00 00 12 00 98 00 1b 3e 36 ce 1f c0 06 22
>024d18	0b 24 0f 40 00 00 16 00 99 00 1b 3e 9e f3 02 40
>024d28	19 32 06 22 06 00 02 56 52 00 00 00 14 00 9a 00
>024d38	1b 3e b7 d3 01 40 19 32 06 22 06 10 10 51 00 00
>024d48	16 00 9b 00 1b 3e 44 f0 02 40 19 32 06 22 06 00
>024d58	03 55 4d 56 00 00 14 00 9c 00 1b 3e fb c8 1b c1
>024d68	06 22 0b 24 07 10 ea 8d 00 00 18 00 9d 00 1b 3e
>024d78	10 f1 01 40 19 32 06 22 08 00 05 46 4e 47 48 47
>024d88	00 00 14 00 9e 00 1b 3e 43 dc 1a d0 01 40 19 32
>024d98	06 22 37 40 00 00 12 00 9f 00 1b 3e a8 ec 10 e0
>024da8	06 22 04 00 01 4f 00 00 10 00 a0 00 1b 3e 73 cc
>024db8	81 c4 06 22 0b 40 00 00 16 00 a1 00 1b 3e d7 d5
>024dc8	04 40 19 32 06 22 0b 24 03 10 18 52 00 00 16 00
>024dd8	a2 00 1b 3e f8 d4 00 40 19 32 06 22 0b 24 07 10
>024de8	f9 46 00 00 18 00 a3 00 1b 3e d3 dd 0b d0 03 40
>024df8	19 32 06 22 0b 24 07 10 19 80 00 00 14 00 a4 00
>024e08	1b 3e ee d0 01 40 19 32 06 22 0b 24 56 40 00 00
>024e18	14 00 a5 00 1b 3e 45 c8 ad c2 06 22 0b 24 02 10
>024e28	35 6c 00 00 10 00 a6 00 1b 3e 7b c1 06 22 0b 24
>024e38	0d 40 00 00 16 00 a7 00 1b 3e 4e d9 14 d0 00 40
>024e48	19 32 06 22 0b 24 63 40 00 00 10 00 a8 00 1b 3e
>024e58	73 c4 06 22 0b 24 11 40 00 00 18 00 a9 00 1b 3e
>024e68	8a fd 76 f4 03 40 19 32 06 22 06 00 03 4b 56 4e
>024e78	00 00 16 00 aa 00 1b 3e 23 da 66 d5 05 40 19 32
>024e88	06 22 01 10 3a 95 00 00 14 00 ab 00 1b 3e 49 d1
>024e98	02 40 19 32 06 22 04 10 4d b2 00 00 10 00 ac 00
>024ea8	1b 3e d3 c5 06 22 01 10 ad be 00 00 14 00 ad 00
>024eb8	1b 3e 90 d0 02 40 19 32 06 22 02 10 4e 63 00 00
>024ec8	12 00 ae 00 1b 3e 30 ca b2 c4 06 22 0b 24 14 40
>024ed8	00 00 14 00 af 00 1b 3e ee d0 01 40 19 32 06 22
>024ee8	0b 24 56 40 00 00 12 00 b0 00 1b 3e 0d c0 06 22
>024ef8	0b 24 01 10 e5 6f 00 00 1a 00 b1 00 1b 3e 4f fc
>024f08	21 f0 01 40 19 32 06 22 08 00 04 51 55 4c 43 00
>024f18	00 00 14 00 b2 00 1b 3e e8 d3 01 40 19 32 06 22
>024f28	03 10 ec 4e 00 00 16 00 b3 00 1b 3e 3e d9 19 d0
>024f38	02 40 19 32 06 22 01 10 3a 6d 00 00 12 00 b4 00
>024f48	1b 3e af e5 06 22 06 00 03 46 49 4c 00 00 14 00
>024f58	b5 00 1b 3e 1f ca 1a c0 06 22 0b 24 05 10 39 42
>024f68	00 00 10 00 b6 00 1b 3e d1 e1 06 22 04 00 00 00
>024f78	00 00 14 00 b7 00 1b 3e d6 cc 1f c0 06 22 0b 24
>024f88	01 10 a5 4c 00 00 12 00 b8 00 1b 3e 57 ce 42 c3
>024f98	06 22 0b 24 11 40 00 00 16 00 b9 00 1b 3e 01 d3
>024fa8	01 40 19 32 06 22 0b 24 05 10 78 9d 00 00 14 00
>024fb8	ba 00 1b 3e dc e1 06 22 08 00 05 4d 4d 4e 55 55
>024fc8	00 00 1a 00 bb 00 1b 3e 5d fe 1a f0 03 40 19 32
>024fd8	06 22 08 00 05 4f 57 45 56 4e 00 00 12 00 bc 00
>024fe8	1b 3e 6f ec 17 e0 06 22 04 00 00 00 00 00 10 00
>024ff8	bd 00 1b 3e 70 cc 00 c5 06 22 a1 a4 00 00 16 00
>025008	be 00 1b 3e d0 ec a6 e2 06 22 08 00 04 4f 44 4b
>025018	50 00 00 00 18 00 bf 00 1b 3e d6 f9 15 f0 03 40
>025028	19 32 06 22 06 00 02 41 47 00 00 00 12 00 c0 00
>025038	1b 3e 03 d0 04 40 19 32 06 22 35 96 00 00 12 00
>025048	c1 00 1b 3e 08 d0 01 40 19 32 06 22 77 a1 00 00
>025058	16 00 c2 00 1b 3e 93 f4 02 40 19 32 06 22 06 00
>025068	02 56 4c 00 00 00 16 00 c3 00 1b 3e 4f dd 12 d0
>025078	01 40 19 32 06 22 07 10 5b 5e 00 00 12 00 c4 00
>025088	1b 3e 9a c1 06 22 0b 24 01 10 c6 7b 00 00 14 00
>025098	c5 00 1b 3e 93 e0 06 22 08 00 05 57 55 4d 44 58
>0250a8	00 00 14 00 c6 00 1b 3e 2e d5 03 40 19 32 06 22
>0250b8	07 10 df 62 00 00 14 00 c7 00 1b 3e 10 e0 06 22
>0250c8	08 00 05 4e 4e 49 48 50 00 00 14 00 c8 00 1b 3e
>0250d8	6e cb 6d c1 06 22 0b 24 05 10 b4 77 00 00 14 00
>0250e8	c9 00 1b 3e 48 d4 00 40 19 32 06 22 0b 24 20 40
>0250f8	00 00 12 00 ca 00 1b 3e 71 c1 06 22 0b 24 06 10
>025108	15 5d 00 00 16 00 cb 00 1b 3e 8a fd 76 f4 02 40
>025118	19 32 06 22 04 00 00 00 00 00 14 00 cc 00 1b 3e
>025128	e0 da c5 d3 03 40 19 32 06 22 5d 40 00 00 12 00
>025138	cd 00 1b 3e 51 cd 07 c0 06 22 05 10 f7 ab 00 00
>025148	10 00 ce 00 1b 3e a1 c5 06 22 05 10 98 44 00 00
>025158	12 00 cf 00 1b 3e 41 ec 1e e0 06 22 04 00 01 55
>025168	00 00 18 00 d0 00 1b 3e 59 fe 6e f0 01 40 19 32
>025178	06 22 06 00 02 50 48 00 00 00 12 00 d1 00 1b 3e
>025188	7c cd 20 c0 06 22 03 10 c8 6f 00 00 1a 00 d2 00
>025198	1b 3e 55 fd 13 f0 05 40 19 32 06 22 08 00 04 46
>0251a8	58 42 50 00 00 00 14 00 d3 00 1b 3e 1e d9 02 d1
>0251b8	02 40 19 32 06 22 ca 94 00 00 14 00 d4 00 1b 3e
>0251c8	f6 e3 06 22 08 00 05 53 43 47 42 53 00 00 18 00
>0251d8	d5 00 1b 3e 48 dc a2 d0 03 40 19 32 06 22 0b 24
>0251e8	05 10 d6 51 00 00 1a 00 d6 00 1b 3e 05 fa 19 f0
>0251f8	02 40 19 32 06 22 08 00 05 52 59 56 4a 59 00 00
>025208	16 00 d7 00 1b 3e cb ec 13 e6 06 22 08 00 05 51
>025218	45 4b 47 4b 00 00 16 00 d8 00 1b 3e 44 f0 01 40
>025228	19 32 06 22 06 00 03 47 45 57 00 00 16 00 d9 00
>025238	1b 3e 4d da 09 d0 00 40 19 32 06 22 0b 24 3d 40
>025248	00 00 10 00 da 00 1b 3e 6b c8 47 c5 06 22 35 40
>025258	00 00 12 00 db 00 1b 3e 4b ec e4 e2 06 22 04 00
>025268	00 00 00 00 12 00 dc 00 1b 3e 5d e3 06 22 06 00
>025278	02 4c 55 00 00 00 18 00 dd 00 1b 3e 33 db f0 d4
>025288	00 40 19 32 06 22 0b 24 06 10 b4 6b 00 00 16 00
>025298	de 00 1b 3e 53 f1 00 40 19 32 06 22 06 00 03 5a
>0252a8	58 52 00 00 12 00 df 00 1b 3e b7 ca 1a c0 06 22
>0252b8	0b 24 81 45 00 00 10 00 e0 00 1b 3e 5b ce 17 c0
>0252c8	06 22 60 40 00 00 10 00 e1 00 1b 3e 19 c0 06 22
>0252d8	0b 24 3a 40 00 00 14 00 e2 00 1b 3e 66 db 11 d0
>0252e8	02 40 19 32 06 22 4e 40 00 00 18 00 e3 00 1b 3e
>0252f8	09 f6 00 40 19 32 06 22 08 00 04 52 54 51 4a 00
>025308	00 00 18 00 e4 00 1b 3e 8b dd 18 d4 02 40 19 32
>025318	06 22 0b 24 05 10 31 46 00 00 16 00 e5 00 1b 3e
>025328	30 de 01 d0 03 40 19 32 06 22 05 10 51 47 00 00
>025338	12 00 e6 00 1b 3e 10 e9 ef e4 06 22 04 00 01 41
>025348	00 00 18 00 e7 00 1b 3e 54 da 16 d0 00 40 19 32
>025358	06 22 0b 24 04 10 c8 bf 00 00 16 00 e8 00 1b 3e
>025368	f8 d4 01 40 19 32 06 22 0b 24 06 10 00 43 00 00
>025378	14 00 e9 00 1b 3e d5 f4 02 40 19 32 06 22 04 00
>025388	01 48 00 00 14 00 ea 00 1b 3e f0 d9 10 d0 06 40
>025398	19 32 06 22 44 40 00 00 14 00 eb 00 1b 3e 5d cb
>0253a8	7d c2 06 22 0b 24 01 10 fa aa 00 00 14 00 ec 00
>0253b8	1b 3e e0 da c5 d3 03 40 19 32 06 22 5d 40 00 00
>0253c8	10 00 ed 00 1b 3e 19 c0 06 22 0b 24 3a 40 00 00
>0253d8	16 00 ee 00 1b 3e 69 e8 0e e0 06 22 08 00 05 4a
>0253e8	51 4c 47 53 00 00 16 00 ef 00 1b 3e 70 f0 03 40
>0253f8	19 32 06 22 06 00 03 55 4d 4e 00 00 12 00 f0 00
>025408	1b 3e 10 e9 ef e4 06 22 04 00 01 41 00 00 16 00
>025418	f1 00 1b 3e 27 fa dd f4 00 40 19 32 06 22 04 00
>025428	00 00 00 00 14 00 f2 00 1b 3e a7 e5 06 22 08 00
>025438	04 4d 50 4b 43 00 00 00 10 00 f3 00 1b 3e 69 e1
>025448	06 22 04 00 00 00 00 00 12 00 f4 00 1b 3e 24 cc
>025458	a6 c4 06 22 04 10 1e 4c 00 00 12 00 f5 00 1b 3e
>025468	fb cc 1a c0 06 22 0b 24 24 5f 00 00 16 00 f6 00
>025478	1b 3e 25 ec c4 e1 06 22 08 00 05 52 50 4e 49 4f
>025488	00 00 12 00 f7 00 1b 3e 65 e6 06 22 06 00 02 56
>025498	53 00 00 00 16 00 f8 00 1b 3e e0 da c5 d3 01 40
>0254a8	19 32 06 22 01 10 0e 84 00 00 14 00 f9 00 1b 3e
>0254b8	0c d0 04 40 19 32 06 22 03 10 97 72 00 00 14 00
>0254c8	fa 00 1b 3e 10 ee 88 e1 06 22 06 00 03 50 41 51
>0254d8	00 00 16 00 fb 00 1b 3e 9c dc 23 d0 03 40 19 32
>0254e8	06 22 01 10 82 9f 00 00 12 00 fc 00 1b 3e 3b ee
>0254f8	ba e2 06 22 04 00 00 00 00 00 14 00 fd 00 1b 3e
>025508	b9 f0 02 40 19 32 06 22 04 00 01 48 00 00 16 00
>025518	fe 00 1b 3e 1f fd 01 f5 02 40 19 32 06 22 04 00
>025528	00 00 00 00 14 00 ff 00 1b 3e 05 f0 03 40 19 32
>025538	06 22 04 00 00 00 00 00 16 00 00 01 1b 3e b0 fa
>025548	db f2 01 40 19 32 06 22 04 00 01 5a 00 00 12 00
>025558	01 01 1b 3e 9a c1 06 22 0b 24 01 10 c6 7b 00 00
>025568	16 00 02 01 1b 3e d3 e9 52 e2 06 22 08 00 05 43
>025578	51 58 56 54 00 00 14 00 03 01 1b 3e 6e cb 6d c1
>025588	06 22 0b 24 05 10 b4 77 00 00 12 00 04 01 1b 3e
>025598	6f d3 03 40 19 32 06 22 2e 40 00 00 18 00 05 01
>0255a8	1b 3e af fd 88 f0 01 40 19 32 06 22 06 00 02 4c
>0255b8	4e 00 00 00 10 00 06 01 1b 3e d1 e1 06 22 04 00
>0255c8	00 00 00 00 16 00 07 01 1b 3e 42 d8 23 d0 01 40
>0255d8	19 32 06 22 01 10 53 9a 00 00 16 00 08 01 1b 3e
>0255e8	9b ec 1b e0 06 22 08 00 05 4a 52 41 56 5a 00 00
>0255f8	12 00 09 01 1b 3e e8 ea 11 e0 06 22 04 00 01 51
>025608	00 00 12 00 0a 01 1b 3e 8f ea 2d e5 06 22 04 00
>025618	01 48 00 00 16 00 0b 01 1b 3e 0f ee 8a e0 06 22
>025628	08 00 05 41 53 44 48 56 00 00 18 00 0c 01 1b 3e
>025638	76 fc 06 f0 00 40 19 32 06 22 06 00 02 47 58 00
>025648	00 00 14 00 0d 01 1b 3e c5 e1 06 22 08 00 05 4b
>025658	57 58 48 59 00 00 18 00 0e 01 1b 3e 21 dc 0c d0
>025668	00 40 19 32 06 22 0b 24 01 10 61 89 00 00 18 00
>025678	0f 01 1b 3e a9 dd 77 d2 04 40 19 32 06 22 0b 24
>025688	05 10 ad b7 00 00 16 00 10 01 1b 3e d6 f9 15 f0
>025698	00 40 19 32 06 22 04 00 00 00 00 00 12 00 11 01
>0256a8	1b 3e bd e8 48 e6 06 22 04 00 01 55 00 00 0e 00
>0256b8	12 01 1b 3e 31 c6 06 22 22 40 00 00 14 00 13 01
>0256c8	1b 3e c8 cc 07 c0 06 22 0b 24 04 10 d8 56 00 00
>0256d8	12 00 14 01 1b 3e 9a c1 06 22 0b 24 01 10 c6 7b
>0256e8	00 00 12 00 15 01 1b 3e 4b ec e4 e2 06 22 04 00
>0256f8	00 00 00 00 12 00 16 01 1b 3e 42 e3 06 22 06 00
>025708	03 48 54 46 00 00 14 00 17 01 1b 3e e0 da c5 d3
>025718	03 40 19 32 06 22 5d 40 00 00 14 00 18 01 1b 3e
>025728	fe da a9 d4 01 40 19 32 06 22 63 40 00 00 10 00
>025738	19 01 1b 3e 16 c0 06 22 01 10 e4 55 00 00 16 00
>025748	1a 01 1b 3e 94 f8 1f f0 00 40 19 32 06 22 04 00
>025758	01 55 00 00 14 00 1b 01 1b 3e bf eb 0b e0 06 22
>025768	06 00 03 4d 55 55 00 00 12 00 1c 01 1b 3e 6e eb
>025778	24 e0 06 22 04 00 01 4b 00 00 16 00 1d 01 1b 3e
>025788	75 dd 17 d0 01 40 19 32 06 22 01 10 fc a2 00 00
>025798	14 00 1e 01 1b 3e f0 d9 10 d0 05 40 19 32 06 22
>0257a8	1c 40 00 00 16 00 1f 01 1b 3e a6 dd 1e d0 02 40
>0257b8	19 32 06 22 07 10 ac 5c 00 00 1a 00 20 01 1b 3e
>0257c8	d6 f9 15 f0 05 40 19 32 06 22 08 00 05 58 50 51
>0257d8	46 50 00 00 12 00 21 01 1b 3e 5f ca c5 c1 06 22
>0257e8	04 10 54 8a 00 00 16 00 22 01 1b 3e 5f ee 12 e6
>0257f8	06 22 08 00 04 47 45 4b 50 00 00 00 12 00 23 01
>025808	1b 3e 57 ed 10 e0 06 22 04 00 01 54 00 00 12 00
>025818	24 01 1b 3e 84 c5 06 22 0b 24 07 10 be 67 00 00
>025828	18 00 25 01 1b 3e 99 f9 15 f0 01 40 19 32 06 22
>025838	06 00 03 44 50 55 00 00 18 00 26 01 1b 3e 44 d8
>025848	57 d5 02 40 19 32 06 22 0b 24 03 10 4e 4d 00 00
>025858	16 00 27 01 1b 3e 25 ec c4 e1 06 22 08 00 05 52
>025868	50 4e 49 4f 00 00 14 00 28 01 1b 3e ee d0 02 40
>025878	19 32 06 22 0b 24 27 40 00 00 14 00 29 01 1b 3e
>025888	11 d0 00 40 19 32 06 22 03 10 4c 86 00 00 12 00
>025898	2a 01 1b 3e 0e c0 06 22 0b 24 01 10 d6 a2 00 00
>0258a8	18 00 2b 01 1b 3e 15 fc 24 f0 04 40 19 32 06 22
>0258b8	06 00 03 44 52 4a 00 00 16 00 2c 01 1b 3e aa dc
>0258c8	01 d0 04 40 19 32 06 22 0b 24 51 40 00 00 16 00
>0258d8	2d 01 1b 3e 05 db 14 d0 00 40 19 32 06 22 03 10
>0258e8	65 41 00 00 16 00 2e 01 1b 3e 05 db e8 d3 00 40
>0258f8	19 32 06 22 0b 24 19 40 00 00 12 00 2f 01 1b 3e
>025908	23 ea a5 e2 06 22 04 00 00 00 00 00 16 00 30 01
>025918	1b 3e 4f fc d6 f5 02 40 19 32 06 22 04 00 00 00
>025928	00 00 0e 00 31 01 1b 3e e5 c0 06 22 5b 9b 00 00
>025938	18 00 32 01 1b 3e 27 fa dd f4 03 40 19 32 06 22
>025948	06 00 03 46 48 5a 00 00 12 00 33 01 1b 3e 5d e3
>025958	06 22 06 00 02 4c 55 00 00 00 10 00 34 01 1b 3e
>025968	7f e2 06 22 04 00 01 59 00 00 16 00 35 01 1b 3e
>025978	54 da 16 d0 02 40 19 32 06 22 06 10 c0 83 00 00
>025988	10 00 36 01 1b 3e 5b ce 17 c0 06 22 60 40 00 00
>025998	14 00 37 01 1b 3e d9 e4 06 22 08 00 05 41 49 52
>0259a8	5a 57 00 00 14 00 38 01 1b 3e 0c d0 04 40 19 32
>0259b8	06 22 03 10 97 72 00 00 12 00 39 01 1b 3e 25 c2
>0259c8	06 22 0b 24 07 10 18 42 00 00 10 00 3a 01 1b 3e
>0259d8	13 c0 06 22 0b 24 02 40 00 00 16 00 3b 01 1b 3e
>0259e8	24 da 07 d0 05 40 19 32 06 22 0b 24 1a 40 00 00
>0259f8	18 00 3c 01 1b 3e 70 f0 02 40 19 32 06 22 08 00
>025a08	05 43 4e 4e 50 5a 00 00 18 00 3d 01 1b 3e a9 dd
>025a18	77 d2 00 40 19 32 06 22 0b 24 06 10 08 ae 00 00
>025a28	18 00 3e 01 1b 3e 04 dd 20 d0 03 40 19 32 06 22
>025a38	0b 24 03 10 9b 83 00 00 16 00 3f 01 1b 3e e5 e8
>025a48	32 e3 06 22 08 00 04 48 49 4d 41 00 00 00 10 00
>025a58	40 01 1b 3e d3 c5 06 22 01 10 ad be 00 00 10 00
>025a68	41 01 1b 3e 3c cc 14 c0 06 22 34 40 00 00 16 00
>025a78	42 01 1b 3e 4f dd 12 d0 01 40 19 32 06 22 07 10
>025a88	5b 5e 00 00 10 00 43 01 1b 3e 3c cc 14 c0 06 22
>025a98	34 40 00 00 1a 00 44 01 1b 3e af fa 78 f0 02 40
>025aa8	19 32 06 22 08 00 05 53 41 41 51 42 00 00 12 00
>025ab8	45 01 1b 3e dd ca a6 c0 06 22 0b 24 04 40 00 00
>025ac8	14 00 46 01 1b 3e 24 da 07 d0 03 40 19 32 06 22
>025ad8	08 a9 00 00 10 00 47 01 1b 3e 5b ce 17 c0 06 22
>025ae8	60 40 00 00 16 00 48 01 1b 3e 6e d9 7c d4 06 40
>025af8	19 32 06 22 0b 24 35 40 00 00 16 00 49 01 1b 3e
>025b08	0f ee 8a e0 06 22 08 00 05 41 53 44 48 56 00 00
>025b18	12 00 4a 01 1b 3e 6e eb 24 e0 06 22 04 00 01 4b
>025b28	00 00 12 00 4b 01 1b 3e d8 ec b8 e1 06 22 04 00
>025b38	01 59 00 00 1a 00 4c 01 1b 3e 8e fa 11 f0 02 40
>025b48	19 32 06 22 08 00 05 5a 4e 4a 5a 56 00 00 14 00
>025b58	4d 01 1b 3e 0c d0 02 40 19 32 06 22 0b 24 0c 40
>025b68	00 00 12 00 4e 01 1b 3e 7c c5 06 22 0b 24 04 10
>025b78	a6 a3 00 00 10 00 4f 01 1b 3e a1 c5 06 22 05 10
>025b88	98 44 00 00 1a 00 50 01 1b 3e 5d fe 1a f0 03 40
>025b98	19 32 06 22 08 00 05 4f 57 45 56 4e 00 00 14 00
>025ba8	51 01 1b 3e 09 f6 05 40 19 32 06 22 04 00 01 52
>025bb8	00 00 12 00 52 01 1b 3e 41 ec 1e e0 06 22 04 00
>025bc8	01 55 00 00 14 00 53 01 1b 3e dc e2 06 22 08 00
>025bd8	04 41 51 51 51 00 00 00 10 00 54 01 1b 3e 69 e1
>025be8	06 22 04 00 00 00 00 00 16 00 55 01 1b 3e 59 db
>025bf8	e6 d2 01 40 19 32 06 22 06 10 c5 4a 00 00 14 00
>025c08	56 01 1b 3e 43 ec 45 e1 06 22 06 00 03 58 55 4e
>025c18	00 00 10 00 57 01 1b 3e 7f e2 06 22 04 00 01 59
>025c28	00 00 14 00 58 01 1b 3e 15 f0 02 40 19 32 06 22
>025c38	04 00 01 48 00 00 18 00 59 01 1b 3e 91 f8 23 f0
>025c48	05 40 19 32 06 22 06 00 03 50 43 47 00 00 16 00
>025c58	5a 01 1b 3e 2c dd 40 d6 03 40 19 32 06 22 06 10
>025c68	d5 85 00 00 16 00 5b 01 1b 3e 93 f4 02 40 19 32
>025c78	06 22 06 00 02 56 4c 00 00 00 16 00 5c 01 1b 3e
>025c88	f6 d4 04 40 19 32 06 22 0b 24 03 10 94 84 00 00
>025c98	12 00 5d 01 1b 3e e3 d3 01 40 19 32 06 22 33 40
>025ca8	00 00 18 00 5e 01 1b 3e 2b f6 04 40 19 32 06 22
>025cb8	08 00 04 47 52 4e 54 00 00 00 12 00 5f 01 1b 3e
>025cc8	00 ce 30 c1 06 22 06 10 23 af 00 00 18 00 60 01
>025cd8	1b 3e 04 dd 20 d0 05 40 19 32 06 22 0b 24 04 10
>025ce8	27 83 00 00 14 00 61 01 1b 3e fb c8 1b c1 06 22
>025cf8	0b 24 07 10 ea 8d 00 00 16 00 62 01 1b 3e b6 fd
>025d08	17 f3 01 40 19 32 06 22 04 00 00 00 00 00 18 00
>025d18	63 01 1b 3e f4 f8 6b f1 02 40 19 32 06 22 06 00
>025d28	03 51 51 52 00 00 14 00 64 01 1b 3e 59 d6 02 40
>025d38	19 32 06 22 0b 24 3c 40 00 00 18 00 65 01 1b 3e
>025d48	4f fc d6 f5 00 40 19 32 06 22 06 00 02 52 54 00
>025d58	00 00 14 00 66 01 1b 3e b9 e3 06 22 08 00 04 50
>025d68	54 56 52 00 00 00 14 00 67 01 1b 3e bf eb 0b e0
>025d78	06 22 06 00 03 4d 55 55 00 00 14 00 68 01 1b 3e
>025d88	da d9 18 d0 01 40 19 32 06 22 45 40 00 00 18 00
>025d98	69 01 1b 3e 59 dd d5 d5 02 40 19 32 06 22 0b 24
>025da8	01 10 d8 bf 00 00 1a 00 6a 01 1b 3e e8 f8 1e f0
>025db8	01 40 19 32 06 22 08 00 04 50 58 54 49 00 00 00
>025dc8	18 00 6b 01 1b 3e 89 db 5f d6 01 40 19 32 06 22
>025dd8	0b 24 07 10 4c 7f 00 00 16 00 6c 01 1b 3e fe da
>025de8	a9 d4 03 40 19 32 06 22 01 10 94 6b 00 00 14 00
>025df8	6d 01 1b 3e 10 f1 02 40 19 32 06 22 04 00 01 4a
>025e08	00 00 14 00 6e 01 1b 3e 45 c8 ad c2 06 22 0b 24
>025e18	02 10 35 6c 00 00 12 00 6f 01 1b 3e 36 d3 00 40
>025e28	19 32 06 22 23 40 00 00 1a 00 70 01 1b 3e 24 f9
>025e38	e9 f2 01 40 19 32 06 22 08 00 04 52 4e 4b 50 00
>025e48	00 00 0e 00 71 01 1b 3e a0 c1 06 22 2d 40 00 00
>025e58	16 00 72 01 1b 3e d5 f4 01 40 19 32 06 22 06 00
>025e68	03 48 46 52 00 00 16 00 73 01 1b 3e e3 d3 00 40
>025e78	19 32 06 22 0b 24 04 10 59 67 00 00 12 00 74 01
>025e88	1b 3e d8 ec b8 e1 06 22 04 00 01 59 00 00 16 00
>025e98	75 01 1b 3e 51 ec 04 e6 06 22 08 00 05 4a 48 44
>025ea8	5a 49 00 00 12 00 76 01 1b 3e 03 d0 03 40 19 32
>025eb8	06 22 d0 46 00 00 18 00 77 01 1b 3e d6 f9 15 f0
>025ec8	06 40 19 32 06 22 06 00 03 4b 42 51 00 00 14 00
>025ed8	78 01 1b 3e ab ca 10 c4 06 22 0b 24 04 10 bc 58
>025ee8	00 00 14 00 79 01 1b 3e f0 d9 10 d0 05 40 19 32
>025ef8	06 22 1c 40 00 00 14 00 7a 01 1b 3e 45 c8 ad c2
>025f08	06 22 0b 24 02 10 35 6c 00 00 16 00 7b 01 1b 3e
>025f18	f0 d9 10 d0 03 40 19 32 06 22 0b 24 3a 40 00 00
>025f28	18 00 7c 01 1b 3e 23 fc de f2 01 40 19 32 06 22
>025f38	06 00 03 54 49 44 00 00 16 00 7d 01 1b 3e e7 d8
>025f48	0a d0 02 40 19 32 06 22 04 10 ba 42 00 00 12 00
>025f58	7e 01 1b 3e e3 d3 05 40 19 32 06 22 06 40 00 00
>025f68	18 00 7f 01 1b 3e 32 d8 12 d0 02 40 19 32 06 22
>025f78	0b 24 04 10 fb 7f 00 00 16 00 80 01 1b 3e a9 dd
>025f88	77 d2 03 40 19 32 06 22 01 10 e8 80 00 00 16 00
>025f98	81 01 1b 3e 5d dd 5d d5 03 40 19 32 06 22 06 10
>025fa8	f9 8b 00 00 18 00 82 01 1b 3e 17 f0 00 40 19 32
>025fb8	06 22 08 00 05 43 59 41 46 59 00 00 16 00 83 01
>025fc8	1b 3e 1f fd 01 f5 01 40 19 32 06 22 04 00 01 41
>025fd8	00 00 14 00 84 01 1b 3e 1f ca 1a c0 06 22 0b 24
>025fe8	05 10 39 42 00 00 14 00 85 01 1b 3e 45 c8 ad c2
>025ff8	06 22 0b 24 02 10 35 6c 00 00 12 00 86 01 1b 3e
>026008	2c ce 1a c0 06 22 0b 24 11 40 00 00 18 00 87 01
>026018	1b 3e b4 da 0f d0 05 40 19 32 06 22 0b 24 03 10
>026028	bb a6 00 00 12 00 88 01 1b 3e e4 cb 2d c1 06 22
>026038	05 10 9a 53 00 00 16 00 89 01 1b 3e d5 f4 01 40
>026048	19 32 06 22 06 00 03 48 46 52 00 00 1a 00 8a 01
>026058	1b 3e 13 fc 0c f0 02 40 19 32 06 22 08 00 05 5a
>026068	53 52 42 49 00 00 12 00 8b 01 1b 3e 41 ec 1e e0
>026078	06 22 04 00 01 55 00 00 18 00 8c 01 1b 3e 62 da
>026088	24 d0 01 40 19 32 06 22 0b 24 02 10 56 70 00 00
>026098	14 00 8d 01 1b 3e ba dd 17 d0 00 40 19 32 06 22
>0260a8	2d 40 00 00 14 00 8e 01 1b 3e 21 dc 0c d0 02 40
>0260b8	19 32 06 22 27 46 00 00 14 00 8f 01 1b 3e 4b d9
>0260c8	24 d0 01 40 19 32 06 22 5a 40 00 00 1a 00 90 01
>0260d8	1b 3e 8a fd 76 f4 01 40 19 32 06 22 08 00 05 4e
>0260e8	55 54 47 57 00 00 18 00 91 01 1b 3e 70 f0 01 40
>0260f8	19 32 06 22 08 00 05 48 58 4c 48 58 00 00 10 00
>026108	92 01 1b 3e 12 c0 06 22 07 10 a7 61 00 00 14 00
>026118	93 01 1b 3e b8 ed 07 e0 06 22 06 00 02 41 52 00
>026128	00 00 12 00 94 01 1b 3e 36 ce 1f c0 06 22 0b 24
>026138	0f 40 00 00 18 00 95 01 1b 3e 07 fe 23 f0 04 40
>026148	19 32 06 22 06 00 03 51 4a 53 00 00 14 00 96 01
>026158	1b 3e 87 dd 90 d0 04 40 19 32 06 22 23 40 00 00
>026168	10 00 97 01 1b 3e a6 e5 06 22 04 00 01 59 00 00
>026178	10 00 98 01 1b 3e 68 e0 06 22 04 00 01 58 00 00
>026188	14 00 99 01 1b 3e 1a d0 01 40 19 32 06 22 0b 24
>026198	3e 40 00 00 10 00 9a 01 1b 3e 03 e5 06 22 04 00
>0261a8	01 56 00 00 16 00 9b 01 1b 3e 3e d4 00 40 19 32
>0261b8	06 22 0b 24 07 10 c3 53 00 00 14 00 9c 01 1b 3e
>0261c8	5d dd 5d d5 04 40 19 32 06 22 01 40 00 00 12 00
>0261d8	9d 01 1b 3e 57 ce 42 c3 06 22 0b 24 11 40 00 00
>0261e8	0e 00 9e 01 1b 3e 31 c6 06 22 22 40 00 00 18 00
>0261f8	9f 01 1b 3e a5 fa 6a f2 03 40 19 32 06 22 06 00
>026208	02 4b 49 00 00 00 16 00 a0 01 1b 3e 2d dd ac d4
>026218	06 40 19 32 06 22 0b 24 27 40 00 00 10 00 a1 01
>026228	1b 3e 18 c1 06 22 07 10 dc 50 00 00 16 00 a2 01
>026238	1b 3e 23 fc de f2 04 40 19 32 06 22 04 00 00 00
>026248	00 00 12 00 a3 01 1b 3e d1 cd d6 c2 06 22 0b 24
>026258	40 86 00 00 18 00 a4 01 1b 3e d8 fd 1c f0 01 40
>026268	19 32 06 22 06 00 02 4a 5a 00 00 00 14 00 a5 01
>026278	1b 3e c8 cc 07 c0 06 22 0b 24 04 10 d8 56 00 00
>026288	18 00 a6 01 1b 3e ae f5 04 40 19 32 06 22 08 00
>026298	04 5a 59 53 41 00 00 00 16 00 a7 01 1b 3e 25 f9
>0262a8	6b f0 03 40 19 32 06 22 04 00 01 45 00 00 18 00
>0262b8	a8 01 1b 3e c3 dc 1a d0 01 40 19 32 06 22 0b 24
>0262c8	04 10 3f 97 00 00 12 00 a9 01 1b 3e 24 cc a6 c4
>0262d8	06 22 04 10 1e 4c 00 00 16 00 aa 01 1b 3e 97 fb
>0262e8	73 f6 02 40 19 32 06 22 04 00 01 55 00 00 16 00
>0262f8	ab 01 1b 3e 5b f5 04 40 19 32 06 22 06 00 02 49
>026308	4d 00 00 00 0e 00 ac 01 1b 3e 14 c0 06 22 23 40
>026318	00 00 14 00 ad 01 1b 3e 37 ce 21 c0 06 22 0b 24
>026328	03 10 3d b6 00 00 10 00 ae 01 1b 3e 8e cb 11 c0
>026338	06 22 25 40 00 00 12 00 af 01 1b 3e 7b cd 20 c0
>026348	06 22 03 10 a2 b9 00 00 16 00 b0 01 1b 3e f5 f4
>026358	01 40 19 32 06 22 06 00 02 44 57 00 00 00 14 00
>026368	b1 01 1b 3e 8a eb 9f e0 06 22 06 00 02 42 47 00
>026378	00 00 18 00 b2 01 1b 3e 6d de 07 d0 00 40 19 32
>026388	06 22 0b 24 04 10 29 5f 00 00 12 00 b3 01 1b 3e
>026398	69 c8 45 c4 06 22 06 10 f9 4b 00 00 12 00 b4 01
>0263a8	1b 3e 0f e9 16 e0 06 22 04 00 00 00 00 00 10 00
>0263b8	b5 01 1b 3e d1 e1 06 22 04 00 00 00 00 00 14 00
>0263c8	b6 01 1b 3e ef d0 01 40 19 32 06 22 03 10 9f 80
>0263d8	00 00 18 00 b7 01 1b 3e 88 f0 00 40 19 32 06 22
>0263e8	08 00 05 59 42 4d 4b 53 00 00 10 00 b8 01 1b 3e
>0263f8	a6 e5 06 22 04 00 01 59 00 00 12 00 b9 01 1b 3e
>026408	ae cd ba c0 06 22 03 10 6f 7c 00 00 14 00 ba 01
>026418	1b 3e f0 e9 02 e0 06 22 06 00 03 54 51 46 00 00
>026428	12 00 bb 01 1b 3e ae cd ba c0 06 22 03 10 6f 7c
>026438	00 00 16 00 bc 01 1b 3e ba dd 17 d0 04 40 19 32
>026448	06 22 05 10 7d 9e 00 00 14 00 bd 01 1b 3e bf eb
>026458	0b e0 06 22 06 00 03 4d 55 55 00 00 0e 00 be 01
>026468	1b 3e 02 c0 06 22 42 40 00 00 14 00 bf 01 1b 3e
>026478	2e ee 18 e0 06 22 06 00 03 58 59 50 00 00 14 00
>026488	c0 01 1b 3e f2 e3 06 22 08 00 04 41 56 4e 52 00
>026498	00 00 16 00 c1 01 1b 3e 7e da d2 d2 02 40 19 32
>0264a8	06 22 06 10 ac 89 00 00 12 00 c2 01 1b 3e fd e9
>0264b8	21 e0 06 22 04 00 01 41 00 00 16 00 c3 01 1b 3e
>0264c8	4c da e5 d3 01 40 19 32 06 22 06 10 7e 7e 00 00
>0264d8	14 00 c4 01 1b 3e fb c8 1b c1 06 22 0b 24 07 10
>0264e8	ea 8d 00 00 10 00 c5 01 1b 3e 76 c1 06 22 03 10
>0264f8	53 6f 00 00 16 00 c6 01 1b 3e 9b ec 1b e0 06 22
>026508	08 00 05 4a 52 41 56 5a 00 00 0e 00 c7 01 1b 3e
>026518	14 c0 06 22 23 40 00 00 12 00 c8 01 1b 3e 24 cc
>026528	a6 c4 06 22 04 10 1e 4c 00 00 12 00 c9 01 1b 3e
>026538	01 d3 00 40 19 32 06 22 51 40 00 00 10 00 ca 01
>026548	1b 3e a1 c5 06 22 05 10 98 44 00 00 16 00 cb 01
>026558	1b 3e 49 fc e1 f3 00 40 19 32 06 22 04 00 00 00
>026568	00 00 18 00 cc 01 1b 3e 02 fb 1d f0 04 40 19 32
>026578	06 22 06 00 03 43 42 4b 00 00 18 00 cd 01 1b 3e
>026588	07 fe 23 f0 02 40 19 32 06 22 06 00 02 51 43 00
>026598	00 00 12 00 ce 01 1b 3e bd e8 48 e6 06 22 04 00
>0265a8	01 55 00 00 14 00 cf 01 1b 3e ba e3 06 22 08 00
>0265b8	04 4d 4c 49 58 00 00 00 12 00 d0 01 1b 3e 6a e9
>0265c8	15 e4 06 22 04 00 01 44 00 00 0e 00 d1 01 1b 3e
>0265d8	e5 c0 06 22 5b 9b 00 00 18 00 d2 01 1b 3e 5d fe
>0265e8	1a f0 01 40 19 32 06 22 06 00 02 54 46 00 00 00
>0265f8	12 00 d3 01 1b 3e 65 e6 06 22 06 00 02 56 53 00
>026608	00 00 14 00 d4 01 1b 3e 74 e5 06 22 08 00 05 57
>026618	56 57 45 57 00 00 16 00 d5 01 1b 3e 43 dc 1a d0
>026628	05 40 19 32 06 22 0b 24 1a 40 00 00 12 00 d6 01
>026638	1b 3e 2c ce 1a c0 06 22 0b 24 11 40 00 00 14 00
>026648	d7 01 1b 3e 7e da d2 d2 05 40 19 32 06 22 dc 52
>026658	00 00 14 00 d8 01 1b 3e 3b ec 20 e0 06 22 06 00
>026668	02 56 55 00 00 00 16 00 d9 01 1b 3e e5 e8 32 e3
>026678	06 22 08 00 04 48 49 4d 41 00 00 00 14 00 da 01
>026688	1b 3e d3 e4 06 22 08 00 04 59 41 59 5a 00 00 00
>026698	18 00 db 01 1b 3e 2c dd 40 d6 02 40 19 32 06 22
>0266a8	0b 24 04 10 98 96 00 00 14 00 dc 01 1b 3e 44 ec
>0266b8	1b e0 06 22 06 00 03 54 56 43 00 00 16 00 dd 01
>0266c8	1b 3e 9b ec 1b e0 06 22 08 00 05 4a 52 41 56 5a
>0266d8	00 00 10 00 de 01 1b 3e 70 e1 06 22 04 00 00 00
>0266e8	00 00 18 00 df 01 1b 3e 6e d9 7c d4 03 40 19 32
>0266f8	06 22 0b 24 06 10 98 4b 00 00 16 00 e0 01 1b 3e
>026708	5c fe 1b f0 02 40 19 32 06 22 04 00 01 45 00 00
>026718	12 00 e1 01 1b 3e 63 c8 be c5 06 22 05 10 06 8e
>026728	00 00 10 00 e2 01 1b 3e 73 c4 06 22 0b 24 11 40
>026738	00 00 10 00 e3 01 1b 3e 44 c8 01 c6 06 22 55 40
>026748	00 00 16 00 e4 01 1b 3e 42 d8 23 d0 01 40 19 32
>026758	06 22 01 10 53 9a 00 00 14 00 e5 01 1b 3e 1d e9
>026768	70 e6 06 22 06 00 02 42 4c 00 00 00 12 00 e6 01
>026778	1b 3e 10 e9 ef e4 06 22 04 00 01 41 00 00 14 00
>026788	e7 01 1b 3e 0f d0 02 40 19 32 06 22 04 10 8d b5
>026798	00 00 12 00 e8 01 1b 3e d8 ec b8 e1 06 22 04 00
>0267a8	01 59 00 00 1a 00 e9 01 1b 3e 46 f9 c1 f5 03 40
>0267b8	19 32 06 22 08 00 05 53 4a 43 44 57 00 00 14 00
>0267c8	ea 01 1b 3e 49 d1 02 40 19 32 06 22 04 10 4d b2
>0267d8	00 00 10 00 eb 01 1b 3e ed c4 06 22 05 10 51 41
>0267e8	00 00 16 00 ec 01 1b 3e 51 ec 04 e6 06 22 08 00
>0267f8	05 4a 48 44 5a 49 00 00 1a 00 ed 01 1b 3e 23 fc
>026808	de f2 02 40 19 32 06 22 08 00 05 5a 4c 4a 43 59
>026818	00 00 18 00 ee 01 1b 3e 28 f1 00 40 19 32 06 22
>026828	08 00 04 47 4a 49 59 00 00 00 14 00 ef 01 1b 3e
>026838	e5 cb 18 c0 06 22 0b 24 01 10 6d b8 00 00 12 00
>026848	f0 01 1b 3e 7c cd 20 c0 06 22 03 10 c8 6f 00 00
>026858	12 00 f1 01 1b 3e 69 c8 45 c4 06 22 06 10 f9 4b
>026868	00 00 14 00 f2 01 1b 3e 2e ee 18 e0 06 22 06 00
>026878	03 58 59 50 00 00 10 00 f3 01 1b 3e 7f e2 06 22
>026888	04 00 01 59 00 00 12 00 f4 01 1b 3e 27 c9 16 c4
>026898	06 22 05 10 89 70 00 00 16 00 f5 01 1b 3e fe da
>0268a8	a9 d4 04 40 19 32 06 22 0b 24 01 40 00 00 14 00
>0268b8	f6 01 1b 3e 61 f6 01 40 19 32 06 22 04 00 01 4e
>0268c8	00 00 14 00 f7 01 1b 3e 74 e5 06 22 08 00 05 57
>0268d8	56 57 45 57 00 00 10 00 f8 01 1b 3e 7b c1 06 22
>0268e8	0b 24 0d 40 00 00 14 00 f9 01 1b 3e 12 eb 1e e0
>0268f8	06 22 06 00 03 59 4c 46 00 00 12 00 fa 01 1b 3e
>026908	5a e6 06 22 06 00 02 41 55 00 00 00 18 00 fb 01
>026918	1b 3e 09 f0 00 40 19 32 06 22 08 00 04 43 48 46
>026928	45 00 00 00 16 00 fc 01 1b 3e 87 d5 00 40 19 32
>026938	06 22 0b 24 01 10 11 92 00 00 14 00 fd 01 1b 3e
>026948	f0 d9 10 d0 04 40 19 32 06 22 6a 87 00 00 18 00
>026958	fe 01 1b 3e 06 de 0f d0 00 40 19 32 06 22 0b 24
>026968	07 10 85 83 00 00 16 00 ff 01 1b 3e 76 fc 06 f0
>026978	01 40 19 32 06 22 04 00 00 00 00 00 16 00 00 02
>026988	1b 3e f5 f4 02 40 19 32 06 22 06 00 03 56 53 4b
>026998	00 00 16 00 01 02 1b 3e 5d dd 5d d5 02 40 19 32
>0269a8	06 22 02 10 5a a8 00 00 10 00 02 02 1b 3e 19 c0
>0269b8	06 22 0b 24 3a 40 00 00 12 00 03 02 1b 3e 4d c1
>0269c8	06 22 0b 24 03 10 b8 48 00 00 10 00 04 02 1b 3e
>0269d8	a4 cc 1d c0 06 22 07 40 00 00 14 00 05 02 1b 3e
>0269e8	04 f2 01 40 19 32 06 22 04 00 00 00 00 00 14 00
>0269f8	06 02 1b 3e 45 c8 ad c2 06 22 0b 24 02 10 35 6c
>026a08	00 00 16 00 07 02 1b 3e f9 dc 79 d1 02 40 19 32
>026a18	06 22 0b 24 54 40 00 00 16 00 08 02 1b 3e a4 fd
>026a28	11 f0 01 40 19 32 06 22 04 00 01 58 00 00 18 00
>026a38	09 02 1b 3e 1f fc 3b f4 00 40 19 32 06 22 06 00
>026a48	03 4b 57 53 00 00 14 00 0a 02 1b 3e 7b ed 63 e6
>026a58	06 22 06 00 03 50 50 5a 00 00 0e 00 0b 02 1b 3e
>026a68	e5 c0 06 22 5b 9b 00 00 16 00 0c 02 1b 3e 77 ed
>026a78	be e2 06 22 08 00 05 56 52 41 58 43 00 00 10 00
>026a88	0d 02 1b 3e 12 c0 06 22 07 10 a7 61 00 00 14 00
>026a98	0e 02 1b 3e 3b ec 20 e0 06 22 06 00 02 56 55 00
>026aa8	00 00 16 00 0f 02 1b 3e 86 fb da f5 00 40 19 32
>026ab8	06 22 04 00 00 00 00 00 16 00 10 02 1b 3e 87 d5
>026ac8	01 40 19 32 06 22 0b 24 03 10 b1 41 00 00 16 00
>026ad8	11 02 1b 3e 4f fc 21 f0 02 40 19 32 06 22 04 00
>026ae8	01 57 00 00 10 00 12 02 1b 3e 18 c1 06 22 07 10
>026af8	dc 50 00 00 18 00 13 02 1b 3e 05 f0 00 40 19 32
>026b08	06 22 08 00 05 49 47 51 54 51 00 00 10 00 14 02
>026b18	1b 3e 6e c1 06 22 0b 24 0f 40 00 00 16 00 15 02
>026b28	1b 3e 45 d0 00 40 19 32 06 22 0b 24 04 10 ad 40
>026b38	00 00 12 00 16 02 1b 3e a1 e8 16 e0 06 22 04 00
>026b48	00 00 00 00 18 00 17 02 1b 3e d6 f9 15 f0 03 40
>026b58	19 32 06 22 06 00 02 41 47 00 00 00 16 00 18 02
>026b68	1b 3e 53 f1 00 40 19 32 06 22 06 00 03 5a 58 52
>026b78	00 00 16 00 19 02 1b 3e aa dc 01 d0 00 40 19 32
>026b88	06 22 02 10 1f 8a 00 00 12 00 1a 02 1b 3e 10 e9
>026b98	ef e4 06 22 04 00 01 41 00 00 14 00 1b 02 1b 3e
>026ba8	b7 d3 02 40 19 32 06 22 0b 24 3e 40 00 00 12 00
>026bb8	1c 02 1b 3e a1 e8 16 e0 06 22 04 00 00 00 00 00
>026bc8	12 00 1d 02 1b 3e 69 c8 45 c4 06 22 06 10 f9 4b
>026bd8	00 00 16 00 1e 02 1b 3e b2 eb 1e e0 06 22 08 00
>026be8	05 57 58 50 58 58 00 00 10 00 1f 02 1b 3e fe c1
>026bf8	06 22 0b 24 4a 7d 00 00 14 00 20 02 1b 3e 72 c9
>026c08	a1 c3 06 22 0b 24 03 10 04 45 00 00 18 00 21 02
>026c18	1b 3e 31 db 21 d0 05 40 19 32 06 22 0b 24 03 10
>026c28	e2 97 00 00 12 00 22 02 1b 3e 50 c4 06 22 0b 24
>026c38	02 10 ec b2 00 00 18 00 23 02 1b 3e 4f fc d6 f5
>026c48	00 40 19 32 06 22 06 00 02 52 54 00 00 00 18 00
>026c58	24 02 1b 3e 5c fe 1f f0 03 40 19 32 06 22 06 00
>026c68	03 41 43 45 00 00 12 00 25 02 1b 3e 7c cd 20 c0
>026c78	06 22 03 10 c8 6f 00 00 18 00 26 02 1b 3e 2c fa
>026c88	46 f6 06 40 19 32 06 22 06 00 02 56 56 00 00 00
>026c98	10 00 27 02 1b 3e d4 c9 8e c5 06 22 06 40 00 00
>026ca8	16 00 28 02 1b 3e 04 dd 20 d0 01 40 19 32 06 22
>026cb8	01 10 a3 ab 00 00 10 00 29 02 1b 3e 5b ce 17 c0
>026cc8	06 22 60 40 00 00 16 00 2a 02 1b 3e 33 db f0 d4
>026cd8	01 40 19 32 06 22 0b 24 0b 45 00 00 12 00 2b 02
>026ce8	1b 3e 27 c9 16 c4 06 22 05 10 89 70 00 00 16 00
>026cf8	2c 02 1b 3e e5 e8 32 e3 06 22 08 00 04 48 49 4d
>026d08	41 00 00 00 16 00 2d 02 1b 3e 09 f6 02 40 19 32
>026d18	06 22 06 00 03 43 44 43 00 00 16 00 2e 02 1b 3e
>026d28	f5 f4 02 40 19 32 06 22 06 00 03 56 53 4b 00 00
>026d38	12 00 2f 02 1b 3e 0f e9 16 e0 06 22 04 00 00 00
>026d48	00 00 12 00 30 02 1b 3e d7 cd 1c c0 06 22 0b 24
>026d58	a8 48 00 00 16 00 31 02 1b 3e 70 f0 05 40 19 32
>026d68	06 22 06 00 02 58 54 00 00 00 0e 00 32 02 1b 3e
>026d78	04 c0 06 22 43 40 00 00 18 00 33 02 1b 3e 4b fc
>026d88	bd f2 01 40 19 32 06 22 06 00 02 56 4d 00 00 00
>026d98	14 00 34 02 1b 3e 4b d9 24 d0 00 40 19 32 06 22
>026da8	2d 40 00 00 18 00 35 02 1b 3e 85 fa 0d f0 03 40
>026db8	19 32 06 22 06 00 03 54 41 45 00 00 18 00 36 02
>026dc8	1b 3e c3 dc 1a d0 01 40 19 32 06 22 0b 24 04 10
>026dd8	3f 97 00 00 12 00 37 02 1b 3e 4d cc 1b c0 06 22
>026de8	0b 24 12 40 00 00 12 00 38 02 1b 3e 01 e0 06 22
>026df8	06 00 03 48 55 51 00 00 10 00 39 02 1b 3e 69 e1
>026e08	06 22 04 00 00 00 00 00 12 00 3a 02 1b 3e 57 ed
>026e18	10 e0 06 22 04 00 01 54 00 00 10 00 3b 02 1b 3e
>026e28	d1 e1 06 22 04 00 00 00 00 00 16 00 3c 02 1b 3e
>026e38	31 db 21 d0 04 40 19 32 06 22 07 10 df 76 00 00
>026e48	14 00 3d 02 1b 3e d5 f4 02 40 19 32 06 22 04 00
>026e58	01 48 00 00 18 00 3e 02 1b 3e af fd 88 f0 00 40
>026e68	19 32 06 22 06 00 03 57 51 4e 00 00 16 00 3f 02
>026e78	1b 3e 69 e8 0e e0 06 22 08 00 05 4a 51 4c 47 53
>026e88	00 00 14 00 40 02 1b 3e 48 d4 00 40 19 32 06 22
>026e98	0b 24 20 40 00 00 10 00 41 02 1b 3e 13 c0 06 22
>026ea8	0b 24 02 40 00 00 16 00 42 02 1b 3e a3 d9 06 d0
>026eb8	03 40 19 32 06 22 06 10 e0 53 00 00 10 00 43 02
>026ec8	1b 3e a1 c5 06 22 05 10 98 44 00 00 12 00 44 02
>026ed8	1b 3e 5d e3 06 22 06 00 02 4c 55 00 00 00 1a 00
>026ee8	45 02 1b 3e 45 f9 49 f5 01 40 19 32 06 22 08 00
>026ef8	05 56 56 56 4d 56 00 00 12 00 46 02 1b 3e 0f d0
>026f08	01 40 19 32 06 22 3a 40 00 00 12 00 47 02 1b 3e
>026f18	9a c1 06 22 0b 24 01 10 c6 7b 00 00 18 00 48 02
>026f28	1b 3e 4f fc 21 f0 05 40 19 32 06 22 06 00 03 53
>026f38	41 44 00 00 14 00 49 02 1b 3e f0 d9 10 d0 05 40
>026f48	19 32 06 22 1c 40 00 00 10 00 4a 02 1b 3e 76 c1
>026f58	06 22 03 10 53 6f 00 00 18 00 4b 02 1b 3e e1 f3
>026f68	02 40 19 32 06 22 08 00 05 4d 42 53 52 52 00 00
>026f78	16 00 4c 02 1b 3e 51 ec 04 e6 06 22 08 00 05 4a
>026f88	48 44 5a 49 00 00 16 00 4d 02 1b 3e 55 fe 95 f4
>026f98	02 40 19 32 06 22 04 00 01 59 00 00 14 00 4e 02
>026fa8	1b 3e d3 dd 0b d0 05 40 19 32 06 22 19 40 00 00
>026fb8	14 00 4f 02 1b 3e 51 e2 06 22 08 00 05 48 44 43
>026fc8	46 4b 00 00 16 00 50 02 1b 3e 44 f0 03 40 19 32
>026fd8	06 22 06 00 02 45 53 00 00 00 18 00 51 02 1b 3e
>026fe8	9d fb 56 f4 05 40 19 32 06 22 06 00 02 4f 4e 00
>026ff8	00 00 18 00 52 02 1b 3e a5 fa 6a f2 03 40 19 32
>027008	06 22 06 00 02 4b 49 00 00 00 16 00 53 02 1b 3e
>027018	a3 f9 97 f4 00 40 19 32 06 22 04 00 00 00 00 00
>027028	0e 00 54 02 1b 3e c1 c3 06 22 2a 68 00 00 0e 00
>027038	55 02 1b 3e 67 c6 06 22 ba 6b 00 00 12 00 56 02
>027048	1b 3e 63 c8 be c5 06 22 05 10 06 8e 00 00 16 00
>027058	57 02 1b 3e 24 d2 03 40 19 32 06 22 0b 24 06 10
>027068	8c 51 00 00 14 00 58 02 1b 3e 3d c9 08 c6 06 22
>027078	0b 24 03 10 eb 60 00 00 16 00 59 02 1b 3e 05 db
>027088	e8 d3 00 40 19 32 06 22 0b 24 19 40 00 00 18 00
>027098	5a 02 1b 3e 4f fc 21 f0 06 40 19 32 06 22 06 00
>0270a8	03 54 45 43 00 00 10 00 5b 02 1b 3e 70 e1 06 22
>0270b8	04 00 00 00 00 00 16 00 5c 02 1b 3e aa f9 24 f4
>0270c8	00 40 19 32 06 22 04 00 01 4b 00 00 14 00 5d 02
>0270d8	1b 3e d9 e4 06 22 08 00 05 41 49 52 5a 57 00 00
>0270e8	14 00 5e 02 1b 3e e5 cb 18 c0 06 22 0b 24 01 10
>0270f8	6d b8 00 00 16 00 5f 02 1b 3e 8a fd 76 f4 04 40
>027108	19 32 06 22 04 00 01 59 00 00 14 00 60 02 1b 3e
>027118	88 f0 02 40 19 32 06 22 04 00 01 42 00 00 12 00
>027128	61 02 1b 3e d7 cd 1c c0 06 22 0b 24 a8 48 00 00
>027138	12 00 62 02 1b 3e 41 ec 1e e0 06 22 04 00 01 55
>027148	00 00 16 00 63 02 1b 3e 4f dd 12 d0 01 40 19 32
>027158	06 22 07 10 5b 5e 00 00 18 00 64 02 1b 3e f1 fc
>027168	0e f0 02 40 19 32 06 22 06 00 02 59 57 00 00 00
>027178	10 00 65 02 1b 3e e2 c2 06 22 0b 24 02 40 00 00
>027188	1a 00 66 02 1b 3e 25 f9 6b f0 05 40 19 32 06 22
>027198	08 00 05 57 49 50 42 47 00 00 14 00 67 02 1b 3e
>0271a8	0c d0 03 40 19 32 06 22 0b 24 52 40 00 00 16 00
>0271b8	68 02 1b 3e 21 dc fc d1 00 40 19 32 06 22 04 10
>0271c8	cf 61 00 00 14 00 69 02 1b 3e ab ca 10 c4 06 22
>0271d8	0b 24 04 10 bc 58 00 00 18 00 6a 02 1b 3e 58 fe
>0271e8	23 f0 01 40 19 32 06 22 06 00 02 47 48 00 00 00
>0271f8	16 00 6b 02 1b 3e 67 e8 21 e0 06 22 08 00 05 41
>027208	41 58 4e 4e 00 00 16 00 6c 02 1b 3e cb ec 13 e6
>027218	06 22 08 00 05 51 45 4b 47 4b 00 00 12 00 6d 02
>027228	1b 3e 7f c5 06 22 0b 24 06 10 04 46 00 00 14 00
>027238	6e 02 1b 3e 43 dc 1a d0 00 40 19 32 06 22 18 40
>027248	00 00 14 00 6f 02 1b 3e c5 e1 06 22 08 00 05 4b
>027258	57 58 48 59 00 00 10 00 70 02 1b 3e 76 c1 06 22
>027268	03 10 53 6f 00 00 0e 00 71 02 1b 3e 04 c0 06 22
>027278	43 40 00 00 14 00 72 02 1b 3e 93 cc 16 c0 06 22
>027288	0b 24 04 10 86 a6 00 00 12 00 73 02 1b 3e cd e8
>027298	49 e6 06 22 04 00 00 00 00 00 16 00 74 02 1b 3e
>0272a8	44 f0 02 40 19 32 06 22 06 00 03 55 4d 56 00 00
>0272b8	1a 00 75 02 1b 3e 29 fe 87 f4 00 40 19 32 06 22
>0272c8	08 00 05 41 52 54 44 46 00 00 12 00 76 02 1b 3e
>0272d8	4d c1 06 22 0b 24 03 10 b8 48 00 00 16 00 77 02
>0272e8	1b 3e b9 db 01 d0 03 40 19 32 06 22 0b 24 20 40
>0272f8	00 00 12 00 78 02 1b 3e 7f c5 06 22 0b 24 06 10
>027308	04 46 00 00 12 00 79 02 1b 3e 36 ce 1f c0 06 22
>027318	0b 24 0f 40 00 00 18 00 7a 02 1b 3e 30 de 01 d0
>027328	00 40 19 32 06 22 0b 24 04 10 b0 92 00 00 1a 00
>027338	7b 02 1b 3e 94 f8 22 f0 02 40 19 32 06 22 08 00
>027348	04 51 44 49 52 00 00 00 16 00 7c 02 1b 3e b6 d8
>027358	1c d0 01 40 19 32 06 22 0b 24 0a 40 00 00 18 00
>027368	7d 02 1b 3e c3 dc 1a d0 06 40 19 32 06 22 0b 24
>027378	05 10 a8 a3 00 00 18 00 7e 02 1b 3e 58 fe 23 f0
>027388	00 40 19 32 06 22 06 00 02 47 44 00 00 00 0e 00
>027398	7f 02 1b 3e 04 c0 06 22 43 40 00 00 12 00 80 02
>0273a8	1b 3e 24 d2 02 40 19 32 06 22 2d 40 00 00 12 00
>0273b8	81 02 1b 3e 4e e5 06 22 06 00 03 42 47 51 00 00
>0273c8	14 00 82 02 1b 3e e7 d8 0a d0 01 40 19 32 06 22
>0273d8	5b 69 00 00 14 00 83 02 1b 3e 10 e0 06 22 08 00
>0273e8	05 4e 4e 49 48 50 00 00 14 00 84 02 1b 3e a6 ca
>0273f8	c0 c4 06 22 0b 24 03 10 0f 5b 00 00 14 00 85 02
>027408	1b 3e 3d c9 08 c6 06 22 0b 24 03 10 eb 60 00 00
>027418	14 00 86 02 1b 3e b8 ed 07 e0 06 22 06 00 02 41
>027428	52 00 00 00 10 00 87 02 1b 3e 3c cc 14 c0 06 22
>027438	34 40 00 00 12 00 88 02 1b 3e 41 ec 1e e0 06 22
>027448	04 00 01 55 00 00 12 00 89 02 1b 3e 4d c1 06 22
>027458	0b 24 03 10 b8 48 00 00 14 00 8a 02 1b 3e 62 da
>027468	24 d0 04 40 19 32 06 22 3b 40 00 00 14 00 8b 02
>027478	1b 3e 7b ed 63 e6 06 22 06 00 03 50 50 5a 00 00
>027488	18 00 8c 02 1b 3e 31 db 21 d0 05 40 19 32 06 22
>027498	0b 24 03 10 e2 97 00 00 10 00 8d 02 1b 3e 44 c8
>0274a8	01 c6 06 22 55 40 00 00 16 00 8e 02 1b 3e 69 e8
>0274b8	0e e0 06 22 08 00 05 4a 51 4c 47 53 00 00 16 00
>0274c8	8f 02 1b 3e 1f fd 01 f5 02 40 19 32 06 22 04 00
>0274d8	00 00 00 00 14 00 90 02 1b 3e 49 d1 02 40 19 32
>0274e8	06 22 04 10 4d b2 00 00 16 00 91 02 1b 3e f9 dc
>0274f8	79 d1 02 40 19 32 06 22 0b 24 54 40 00 00 14 00
>027508	92 02 1b 3e d6 cc 1f c0 06 22 0b 24 01 10 a5 4c
>027518	00 00 16 00 93 02 1b 3e 5c fe 1b f0 02 40 19 32
>027528	06 22 04 00 01 45 00 00 18 00 94 02 1b 3e 4b fc
>027538	bd f2 03 40 19 32 06 22 06 00 02 47 4e 00 00 00
>027548	10 00 95 02 1b 3e 70 e1 06 22 04 00 00 00 00 00
>027558	16 00 96 02 1b 3e 2d dd ac d4 05 40 19 32 06 22
>027568	06 10 e5 bb 00 00 14 00 97 02 1b 3e 10 ee 88 e1
>027578	06 22 06 00 03 50 41 51 00 00 18 00 98 02 1b 3e
>027588	45 f9 49 f5 03 40 19 32 06 22 06 00 03 51 50 59
>027598	00 00 14 00 99 02 1b 3e 43 ec 45 e1 06 22 06 00
>0275a8	03 58 55 4e 00 00 14 00 9a 02 1b 3e b9 f0 01 40
>0275b8	19 32 06 22 04 00 01 53 00 00 14 00 9b 02 1b 3e
>0275c8	5d f6 00 40 19 32 06 22 04 00 00 00 00 00 16 00
>0275d8	9c 02 1b 3e d3 e9 52 e2 06 22 08 00 05 43 51 58
>0275e8	56 54 00 00 1a 00 9d 02 1b 3e e5 fd 19 f0 01 40
>0275f8	19 32 06 22 08 00 04 56 5a 55 48 00 00 00 12 00
>027608	9e 02 1b 3e 23 ea a5 e2 06 22 04 00 00 00 00 00
>027618	16 00 9f 02 1b 3e 06 f0 04 40 19 32 06 22 06 00
>027628	02 4d 53 00 00 00 12 00 a0 02 1b 3e 5a e6 06 22
>027638	06 00 02 41 55 00 00 00 18 00 a1 02 1b 3e 88 f0
>027648	01 40 19 32 06 22 08 00 05 48 4f 55 53 55 00 00
>027658	16 00 a2 02 1b 3e b2 eb 1e e0 06 22 08 00 05 57
>027668	58 50 58 58 00 00 1a 00 a3 02 1b 3e 23 fc de f2
>027678	02 40 19 32 06 22 08 00 05 5a 4c 4a 43 59 00 00
>027688	10 00 a4 02 1b 3e 07 c0 06 22 0b 24 bd 80 00 00
>027698	12 00 a5 02 1b 3e 42 e3 06 22 06 00 03 48 54 46
>0276a8	00 00 16 00 a6 02 1b 3e b2 eb 1e e0 06 22 08 00
>0276b8	05 57 58 50 58 58 00 00 14 00 a7 02 1b 3e 74 e5
>0276c8	06 22 08 00 05 57 56 57 45 57 00 00 14 00 a8 02
>0276d8	1b 3e cc f1 04 40 19 32 06 22 04 00 00 00 00 00
>0276e8	12 00 a9 02 1b 3e 0f e9 16 e0 06 22 04 00 00 00
>0276f8	00 00 16 00 aa 02 1b 3e aa f9 24 f4 00 40 19 32
>027708	06 22 04 00 01 4b 00 00 12 00 ab 02 1b 3e 50 ea
>027718	0d e0 06 22 04 00 00 00 00 00 14 00 ac 02 1b 3e
>027728	c8 cc 07 c0 06 22 0b 24 04 10 d8 56 00 00 14 00
>027738	ad 02 1b 3e cd d9 02 d6 04 40 19 32 06 22 4b 40
>027748	00 00 14 00 ae 02 1b 3e c8 cc 07 c0 06 22 0b 24
>027758	04 10 d8 56 00 00 14 00 af 02 1b 3e e0 f2 00 40
>027768	19 32 06 22 04 00 01 52 00 00 14 00 b0 02 1b 3e
>027778	5d cb 7d c2 06 22 0b 24 01 10 fa aa 00 00 14 00
>027788	b1 02 1b 3e 37 ce 21 c0 06 22 0b 24 03 10 3d b6
>027798	00 00 12 00 b2 02 1b 3e 8f d2 00 40 19 32 06 22
>0277a8	06 40 00 00 14 00 b3 02 1b 3e 3f ec 39 e2 06 22
>0277b8	06 00 02 59 44 00 00 00 18 00 b4 02 1b 3e c7 fc
>0277c8	67 f0 02 40 19 32 06 22 06 00 03 42 4f 50 00 00
>0277d8	14 00 b5 02 1b 3e 48 d4 00 40 19 32 06 22 0b 24
>0277e8	20 40 00 00 16 00 b6 02 1b 3e 01 d3 01 40 19 32
>0277f8	06 22 0b 24 05 10 78 9d 00 00 16 00 b7 02 1b 3e
>027808	a3 d9 06 d0 02 40 19 32 06 22 06 10 c6 9c 00 00
>027818	16 00 b8 02 1b 3e 9b ec 1b e0 06 22 08 00 05 4a
>027828	52 41 56 5a 00 00 16 00 b9 02 1b 3e ab fa 21 f0
>027838	04 40 19 32 06 22 04 00 00 00 00 00 14 00 ba 02
>027848	1b 3e d9 e4 06 22 08 00 05 41 49 52 5a 57 00 00
>027858	10 00 bb 02 1b 3e ed c4 06 22 05 10 51 41 00 00
>027868	16 00 bc 02 1b 3e 1f fd 01 f5 00 40 19 32 06 22
>027878	04 00 00 00 00 00 14 00 bd 02 1b 3e f0 e9 02 e0
>027888	06 22 06 00 03 54 51 46 00 00 16 00 be 02 1b 3e
>027898	2c dd 40 d6 05 40 19 32 06 22 0b 24 14 40 00 00
>0278a8	12 00 bf 02 1b 3e 30 ca b2 c4 06 22 0b 24 14 40
>0278b8	00 00 18 00 c0 02 1b 3e a4 fd 11 f0 03 40 19 32
>0278c8	06 22 06 00 03 58 4b 57 00 00 16 00 c1 02 1b 3e
>0278d8	27 fa dd f4 02 40 19 32 06 22 04 00 01 43 00 00
>0278e8	16 00 c2 02 1b 3e 9c dc 23 d0 03 40 19 32 06 22
>0278f8	01 10 82 9f 00 00 16 00 c3 02 1b 3e 1e d9 02 d1
>027908	01 40 19 32 06 22 03 10 4a 8b 00 00 12 00 c4 02
>027918	1b 3e 7b cd 20 c0 06 22 03 10 a2 b9 00 00 14 00
>027928	c5 02 1b 3e 2e ee 18 e0 06 22 06 00 03 58 59 50
>027938	00 00 14 00 c6 02 1b 3e 21 dc 0c d0 02 40 19 32
>027948	06 22 27 46 00 00 14 00 c7 02 1b 3e 19 c9 19 c0
>027958	06 22 0b 24 02 10 b5 b6 00 00 12 00 c8 02 1b 3e
>027968	a2 cc 03 c0 06 22 0b 24 60 40 00 00 12 00 c9 02
>027978	1b 3e 7c cd 20 c0 06 22 03 10 c8 6f 00 00 1a 00
>027988	ca 02 1b 3e e8 f8 1e f0 03 40 19 32 06 22 08 00
>027998	05 51 4b 4e 4d 49 00 00 12 00 cb 02 1b 3e fb cc
>0279a8	1a c0 06 22 0b 24 24 5f 00 00 18 00 cc 02 1b 3e
>0279b8	d6 f9 15 f0 02 40 19 32 06 22 06 00 02 42 57 00
>0279c8	00 00 14 00 cd 02 1b 3e 51 e2 06 22 08 00 05 48
>0279d8	44 43 46 4b 00 00 16 00 ce 02 1b 3e 0f fe 05 f0
>0279e8	03 40 19 32 06 22 04 00 00 00 00 00 12 00 cf 02
>0279f8	1b 3e b7 ca 1a c0 06 22 0b 24 81 45 00 00 10 00
>027a08	d0 02 1b 3e 07 c0 06 22 0b 24 bd 80 00 00 0e 00
>027a18	d1 02 1b 3e c1 c3 06 22 2a 68 00 00 10 00 d2 02
>027a28	1b 3e f2 cc 08 c0 06 22 41 40 00 00 12 00 d3 02
>027a38	1b 3e 7c cd 20 c0 06 22 03 10 c8 6f 00 00 14 00
>027a48	d4 02 1b 3e 51 e2 06 22 08 00 05 48 44 43 46 4b
>027a58	00 00 10 00 d5 02 1b 3e f2 cc 08 c0 06 22 41 40
>027a68	00 00 14 00 d6 02 1b 3e c1 e0 06 22 08 00 05 48
>027a78	4f 4f 41 45 00 00 14 00 d7 02 1b 3e f6 d0 02 40
>027a88	19 32 06 22 0b 24 0a 40 00 00 16 00 d8 02 1b 3e
>027a98	7e da d2 d2 01 40 19 32 06 22 06 10 7f 76 00 00
>027aa8	16 00 d9 02 1b 3e 6f d3 01 40 19 32 06 22 0b 24
>027ab8	04 10 46 b1 00 00 12 00 da 02 1b 3e 8c cd 07 c0
>027ac8	06 22 07 10 ea 40 00 00 14 00 db 02 1b 3e d3 e4
>027ad8	06 22 08 00 04 59 41 59 5a 00 00 00 14 00 dc 02
>027ae8	1b 3e 45 c8 ad c2 06 22 0b 24 02 10 35 6c 00 00
>027af8	16 00 dd 02 1b 3e 77 ed be e2 06 22 08 00 05 56
>027b08	52 41 58 43 00 00 14 00 de 02 1b 3e 15 f0 02 40
>027b18	19 32 06 22 04 00 01 48 00 00 12 00 df 02 1b 3e
>027b28	6a e9 15 e4 06 22 04 00 01 44 00 00 14 00 e0 02
>027b38	1b 3e 19 c9 19 c0 06 22 0b 24 02 10 b5 b6 00 00
>027b48	18 00 e1 02 1b 3e 5d fe 1a f0 02 40 19 32 06 22
>027b58	06 00 02 52 53 00 00 00 18 00 e2 02 1b 3e 28 f1
>027b68	02 40 19 32 06 22 08 00 04 54 56 43 5a 00 00 00
>027b78	14 00 e3 02 1b 3e 70 f0 00 40 19 32 06 22 04 00
>027b88	01 4a 00 00 18 00 e4 02 1b 3e cd d9 02 d6 03 40
>027b98	19 32 06 22 0b 24 04 10 7a ae 00 00 18 00 e5 02
>027ba8	1b 3e 2d f3 03 40 19 32 06 22 08 00 04 51 47 4a
>027bb8	50 00 00 00 10 00 e6 02 1b 3e 73 c4 06 22 0b 24
>027bc8	11 40 00 00 1a 00 e7 02 1b 3e 79 fd 0f f5 01 40
>027bd8	19 32 06 22 08 00 05 41 4e 41 45 56 00 00 10 00
>027be8	e8 02 1b 3e f6 cb 04 c0 06 22 1c 40 00 00 14 00
>027bf8	e9 02 1b 3e 49 dd 1d d0 00 40 19 32 06 22 37 40
>027c08	00 00 12 00 ea 02 1b 3e 23 cc 06 c0 06 22 0b 24
>027c18	3d 40 00 00 18 00 eb 02 1b 3e 8e fa 11 f0 00 40
>027c28	19 32 06 22 06 00 02 52 46 00 00 00 14 00 ec 02
>027c38	1b 3e ef d0 00 40 19 32 06 22 0b 24 42 40 00 00
>027c48	12 00 ed 02 1b 3e fd e9 21 e0 06 22 04 00 01 41
>027c58	00 00 14 00 ee 02 1b 3e f0 e9 02 e0 06 22 06 00
>027c68	03 54 51 46 00 00 14 00 ef 02 1b 3e 7b ed 63 e6
>027c78	06 22 06 00 03 50 50 5a 00 00 10 00 f0 02 1b 3e
>027c88	03 e5 06 22 04 00 01 56 00 00 16 00 f1 02 1b 3e
>027c98	fe da a9 d4 03 40 19 32 06 22 01 10 94 6b 00 00
>027ca8	12 00 f2 02 1b 3e a8 ec 10 e0 06 22 04 00 01 4f
>027cb8	00 00 16 00 f3 02 1b 3e 44 d8 57 d5 04 40 19 32
>027cc8	06 22 0b 24 64 40 00 00 16 00 f4 02 1b 3e 89 db
>027cd8	5f d6 00 40 19 32 06 22 06 10 17 49 00 00 16 00
>027ce8	f5 02 1b 3e 69 e8 0e e0 06 22 08 00 05 4a 51 4c
>027cf8	47 53 00 00 14 00 f6 02 1b 3e 4d cd 18 c0 06 22
>027d08	0b 24 01 10 0c 65 00 00 14 00 f7 02 1b 3e 11 e6
>027d18	06 22 08 00 05 43 4c 49 5a 57 00 00 12 00 f8 02
>027d28	1b 3e 6f ec 17 e0 06 22 04 00 00 00 00 00 10 00
>027d38	f9 02 1b 3e 8c c2 06 22 0b 24 8b 89 00 00 14 00
>027d48	fa 02 1b 3e 43 ec 45 e1 06 22 06 00 03 58 55 4e
>027d58	00 00 16 00 fb 02 1b 3e e1 f3 00 40 19 32 06 22
>027d68	06 00 03 43 4e 4e 00 00 10 00 fc 02 1b 3e 18 c1
>027d78	06 22 07 10 dc 50 00 00 1a 00 fd 02 1b 3e 6e fe
>027d88	0d f0 03 40 19 32 06 22 08 00 05 51 49 4a 55 4b
>027d98	00 00 14 00 fe 02 1b 3e 97 e8 a6 e2 06 22 06 00
>027da8	03 44 45 58 00 00 14 00 ff 02 1b 3e b7 d3 03 40
>027db8	19 32 06 22 0b 24 39 40 00 00 16 00 00 03 1b 3e
>027dc8	53 f1 03 40 19 32 06 22 06 00 03 56 59 49 00 00
>027dd8	12 00 01 03 1b 3e 5a e6 06 22 06 00 02 41 55 00
>027de8	00 00 16 00 02 03 1b 3e 97 fb 73 f6 02 40 19 32
>027df8	06 22 04 00 01 55 00 00 12 00 03 03 1b 3e 7c cd
>027e08	20 c0 06 22 03 10 c8 6f 00 00 16 00 04 03 1b 3e
>027e18	17 f0 02 40 19 32 06 22 06 00 03 46 4a 59 00 00
>027e28	10 00 05 03 1b 3e 5e ce 03 c1 06 22 61 40 00 00
>027e38	16 00 06 03 1b 3e 4d f9 06 f0 03 40 19 32 06 22
>027e48	04 00 01 57 00 00 14 00 07 03 1b 3e b7 d3 02 40
>027e58	19 32 06 22 0b 24 3e 40 00 00 14 00 08 03 1b 3e
>027e68	f6 d4 06 40 19 32 06 22 0b 24 40 40 00 00 10 00
>027e78	09 03 1b 3e 70 cc 00 c5 06 22 a1 a4 00 00 14 00
>027e88	0a 03 1b 3e 51 e2 06 22 08 00 05 48 44 43 46 4b
>027e98	00 00 12 00 0b 03 1b 3e d8 ec b8 e1 06 22 04 00
>027ea8	01 59 00 00 16 00 0c 03 1b 3e 63 f6 00 40 19 32
>027eb8	06 22 06 00 02 5a 59 00 00 00 10 00 0d 03 1b 3e
>027ec8	a1 c5 06 22 05 10 98 44 00 00 12 00 0e 03 1b 3e
>027ed8	c1 ec 1b e0 06 22 04 00 00 00 00 00 12 00 0f 03
>027ee8	1b 3e 69 c8 45 c4 06 22 06 10 f9 4b 00 00 18 00
>027ef8	10 03 1b 3e 54 da 16 d0 00 40 19 32 06 22 0b 24
>027f08	04 10 c8 bf 00 00 10 00 11 03 1b 3e 76 c1 06 22
>027f18	03 10 53 6f 00 00 14 00 12 03 1b 3e b8 ed 07 e0
>027f28	06 22 06 00 02 41 52 00 00 00 16 00 13 03 1b 3e
>027f38	f5 f4 02 40 19 32 06 22 06 00 03 56 53 4b 00 00
>027f48	14 00 14 03 1b 3e fb c8 1b c1 06 22 0b 24 07 10
>027f58	ea 8d 00 00 0e 00 15 03 1b 3e 14 c0 06 22 23 40
>027f68	00 00 14 00 16 03 1b 3e ee d0 01 40 19 32 06 22
>027f78	0b 24 56 40 00 00 18 00 17 03 1b 3e f1 fc 0e f0
>027f88	02 40 19 32 06 22 06 00 02 59 57 00 00 00 12 00
>027f98	18 03 1b 3e 11 d0 02 40 19 32 06 22 19 40 00 00
>027fa8	0e 00 19 03 1b 3e 04 c0 06 22 43 40 00 00 14 00
>027fb8	1a 03 1b 3e 93 e0 06 22 08 00 05 57 55 4d 44 58
>027fc8	00 00 10 00 1b 03 1b 3e 13 c0 06 22 0b 24 02 40
>027fd8	00 00 18 00 1c 03 1b 3e b9 f0 00 40 19 32 06 22
>027fe8	08 00 04 4a 54 4e 4b 00 00 00 12 00 1d 03 1b 3e
>027ff8	84 c5 06 22 0b 24 07 10 be 67 00 00 18 00 1e 03
>028008	1b 3e c3 dc 1a d0 06 40 19 32 06 22 0b 24 05 10
>028018	a8 a3 00 00 12 00 1f 03 1b 3e f6 d4 00 40 19 32
>028028	06 22 4a 40 00 00 10 00 20 03 1b 3e 13 c0 06 22
>028038	0b 24 02 40 00 00 00 00 ee ee ee ee 00 00 fc bf
>028048	1c 00 00 00 00 00 f8 bf f4 bf 00 00 f0 bf 03 00
>028058	65 81 01 00 53 83 00 00 93 aa 00 00 73 84 03 00
>028068	00 00 ec bf 03 00 ea bf e4 bf e2 bf de bf 00 00
>028078	dc bf ba 2b 00 00 00 00 da bf d6 bf 00 00 d4 bf
>028088	05 00 ea ff ff ff e0 ff ff ff 04 f8 fc ff d0 06
>028098	00 00 35 56 00 00 5c 00 00 00 00 00 d2 bf 05 00
>0280a8	d0 bf cc bf c8 bf c4 bf be bf ba bf 7e 80 b8 bf
>0280b8	b2 bf 00 00 ae bf 03 00 1a 42 fe ff 1b 89 fd ff
>0280c8	ac ff ff ff bb ff ff ff 00 00 ac bf 02 00 a6 bf
>0280d8	a2 bf 9e bf 00 00 9c bf 48 77 fe ff 00 00 9a bf
>0280e8	98 bf 84 80 94 bf 05 00 18 00 00 00 37 00 00 00
>0280f8	d5 ff ff ff bb 2e 02 00 63 18 00 00 e6 ff ff ff
>028108	00 00 92 bf 05 00 8c bf 88 bf 84 bf 7e bf 78 bf
>028118	74 bf 00 00 70 bf 6c bf 00 00 68 bf 06 00 83 e8
>028128	fe ff 53 da 00 00 6d c8 00 00 57 00 00 00 ce 13
>028138	03 00 46 a6 00 00 59 00 00 00 00 00 64 bf 06 00
>028148	5e bf 58 bf 54 bf 50 bf 4e bf 4c bf 4a bf 00 00
>028158	46 bf 44 bf 00 00 40 bf 04 00 8d 45 fc ff 82 2a
>028168	ff ff 5a 68 01 00 f9 4b 03 00 01 00 00 00 00 00
>028178	3e bf 03 00 38 bf 34 bf 32 bf 2c bf 00 00 28 bf
>028188	a2 f9 01 00 1a 81 24 bf 22 bf 00 00 20 bf 02 00
>028198	07 79 fc ff 00 fd fc ff a5 ff ff ff 76 81 1c bf
>0281a8	04 00 16 bf 10 bf 0e bf 0a bf 08 bf 4c 80 06 bf
>0281b8	00 bf 00 00 fe be 02 00 4c c6 01 00 c2 ff ff ff
>0281c8	19 00 00 00 00 00 fa be 02 00 f6 be f2 be f0 be
>0281d8	00 00 ec be f9 0b 03 00 00 00 ea be e8 be 20 81
>0281e8	e4 be 04 00 1c b8 01 00 aa cf fe ff 7a 28 fd ff
>0281f8	4a e1 ff ff 3b 00 00 00 00 00 e2 be 04 00 dc be
>028208	d8 be d4 be ce be ca be 84 81 c6 be 44 e7 fd ff
>028218	e4 80 c2 be c0 be 00 00 bc be 05 00 64 00 00 00
>028228	3a e8 01 00 68 a9 fd ff d5 45 03 00 69 4e fd ff
>028238	ec ff ff ff 68 80 b8 be 04 00 b6 be b4 be b2 be
>028248	ae be aa be 00 00 a8 be b6 c2 ff ff 00 00 a4 be
>028258	9e be 00 00 9c be 02 00 e8 63 fe ff aa ff ff ff
>028268	d9 ff ff ff 00 00 9a be 05 00 98 be 92 be 8c be
>028278	88 be 86 be 82 be dc 80 7e be 15 5f fe ff 18 82
>028288	7a be 74 be 00 00 70 be 02 00 2d 00 00 00 5a 00
>028298	00 00 43 00 00 00 a4 81 6e be 02 00 6c be 68 be
>0282a8	64 be 00 00 60 be 93 07 ff ff 00 00 5e be 5c be
>0282b8	ba 80 5a be 02 00 82 32 fc ff 31 00 00 00 4d 72
>0282c8	02 00 00 00 58 be 06 00 54 be 52 be 4c be 48 be
>0282d8	44 be 42 be 3c be 00 00 38 be 07 00 00 00 54 82
>0282e8	34 be 2e be 92 81 2c be 03 00 b8 1c fd ff 77 61
>0282f8	00 00 fb ff ff ff 03 00 00 00 00 00 2a be 02 00
>028308	24 be 22 be 1c be 00 00 18 be 7a 99 fd ff 00 00
>028318	14 be 12 be b8 82 0e be 05 00 35 9a fe ff f1 ca
>028328	03 00 89 ee 01 00 e0 ff ff ff de ff ff ff 6c ac
>028338	00 00 08 81 0c be 03 00 08 be 04 be 00 be fa bd
>028348	0e 83 f8 bd ad fe 00 00 b4 81 f6 bd f0 bd 00 00
>028358	ee bd 02 00 c9 ff ff ff c2 ff ff ff 48 72 fd ff
>028368	cc 81 ea bd 02 00 e8 bd e6 bd e4 bd 4c 82 e2 bd
>028378	f1 ff ff ff e6 82 e0 bd de bd 5a 82 dc bd 06 00
>028388	3d 6c fc ff ee 33 01 00 3d bf 03 00 16 9b fd ff
>028398	84 43 fc ff ee 60 01 00 13 01 02 00 02 83 da bd
>0283a8	02 00 d4 bd ce bd cc bd 00 00 ca bd c4 bd 00 00
>0283b8	c0 bd 06 00 7b 3c fc ff 4f 00 00 00 6b c6 00 00
>0283c8	b8 c5 fe ff 45 24 ff ff 97 50 00 00 d4 e0 00 00
>0283d8	ca 82 bc bd 03 00 ba bd b8 bd b6 bd b2 bd 76 80
>0283e8	ae bd c3 09 fe ff 00 00 aa bd a8 bd 5c 81 a4 bd
>0283f8	04 00 30 89 02 00 22 d7 ff ff 73 19 fe ff 86 91
>028408	fd ff 4b 00 00 00 3c 82 a0 bd 03 00 9a bd 96 bd
>028418	90 bd 8a bd 00 00 88 bd 22 00 00 00 e0 81 84 bd
>028428	80 bd 1e 82 7c bd 04 00 88 e7 fd ff 99 ad fd ff
>028438	14 89 fe ff 82 df 00 00 36 bd fc ff 9e 82 78 bd
>028448	03 00 74 bd 70 bd 6e bd 68 bd aa 82 66 bd e8 7d
>028458	fc ff 00 00 62 bd 60 bd 2a 84 5c bd 05 00 c0 ce
>028468	fd ff 54 71 ff ff ab ff ff ff b4 1c 02 00 fc ff
>028478	ff ff 68 f1 fc ff 00 82 58 bd 03 00 54 bd 50 bd
>028488	4e bd 4c bd 00 00 48 bd 46 bd ea 80 42 bd 02 00
>028498	4c d4 fc ff f5 fa ff ff 0c 4c 02 00 00 00 3e bd
>0284a8	03 00 3c bd 38 bd 32 bd 30 bd 00 00 2e bd 3a 44
>0284b8	ff ff 16 83 2a bd 24 bd 00 00 22 bd 04 00 a4 ff
>0284c8	ff ff 3a 00 00 00 8d 75 02 00 72 7e ff ff 9b c3
>0284d8	ff ff a4 83 1e bd 06 00 18 bd 12 bd 0e bd 08 bd
>0284e8	04 bd 00 bd fe bc ee 83 fc bc fa bc 00 00 f6 bc
>0284f8	03 00 df 2f 01 00 0e c4 00 00 72 e4 fe ff 5d 00
>028508	00 00 44 84 f2 bc 06 00 f0 bc ee bc ec bc ea bc
>028518	e6 bc e2 bc e0 bc 10 82 dc bc 60 00 00 00 7c 83
>028528	da bc d4 bc 92 84 d0 bc 03 00 8d aa fd ff fe ff
>028538	ff ff c6 5c 03 00 e0 13 03 00 0a 85 ce bc 02 00
>028548	ca bc c6 bc c4 bc 00 00 c0 bc 23 6f 03 00 86 82
>028558	be bc b8 bc 1c 83 b4 bc 02 00 4e 00 00 00 c5 0a
>028568	03 00 26 2a 02 00 7e 84 b0 bc 03 00 ae bc aa bc
>028578	a8 bc a4 bc 8c 84 a0 bc 9c bc f4 84 98 bc 03 00
>028588	50 ad fd ff 64 2e 03 00 3c ab 03 00 51 87 02 00
>028598	00 00 96 bc 05 00 90 bc 8e bc 8a bc 86 bc 84 bc
>0285a8	7e bc 24 84 7c bc 78 bc 5c 85 74 bc 04 00 f8 91
>0285b8	fc ff a1 b4 02 00 5a cc fe ff e8 c0 00 00 53 08
>0285c8	fd ff 6c 82 72 bc 02 00 6c bc 66 bc 64 bc de 82
>0285d8	62 bc 42 58 fc ff 5a 84 5e bc 5a bc f4 83 56 bc
>0285e8	04 00 0d 00 00 00 e3 dd 02 00 03 65 fc ff d2 00
>0285f8	01 00 3d 00 00 00 00 00 54 bc 02 00 50 bc 4e bc
>028608	48 bc 00 00 44 bc a0 ff ff ff b4 80 42 bc 3c bc
>028618	e6 81 38 bc 06 00 c4 cd fe ff 42 00 00 00 05 c0
>028628	fd ff 2e 00 00 00 d9 a9 fd ff c5 8b ff ff b5 ff
>028638	ff ff 42 81 34 bc 02 00 30 bc 2c bc 2a bc 74 83
>028648	26 bc 61 00 00 00 56 85 24 bc 22 bc 82 83 1e bc
>028658	04 00 9d ff ff ff ce 5e 01 00 6a a1 02 00 00 f3
>028668	ff ff a7 e2 ff ff 3a 86 1a bc 04 00 18 bc 16 bc
>028678	12 bc 0e bc 0a bc 1c 84 08 bc f9 b8 fe ff b0 83
>028688	06 bc 04 bc 00 00 02 bc 05 00 c8 a7 fc ff 10 11
>028698	03 00 c2 ff ff ff c7 ff ff ff 9d 7d fe ff 8b 1c
>0286a8	02 00 6e 85 fe bb 02 00 fa bb f4 bb f0 bb de 85
>0286b8	ee bb ea bb b6 83 e8 bb 06 00 4a 00 00 00 70 6d
>0286c8	02 00 f3 09 02 00 81 ea fc ff 6c 3b fe ff ba ff
>0286d8	ff ff c0 ff ff ff 00 00 e4 bb 03 00 e2 bb dc bb
>0286e8	d8 bb d6 bb d6 85 d2 bb 1e 0c 02 00 00 00 d0 bb
>0286f8	ce bb b0 85 cc bb 02 00 4b 00 00 00 44 d4 fd ff
>028708	c4 ff ff ff 3a 83 c8 bb 03 00 c4 bb c2 bb bc bb
>028718	b6 bb 4e 85 b4 bb e7 aa 02 00 12 86 b0 bb ae bb
>028728	bc 86 ac bb 03 00 23 00 00 00 37 89 fe ff 4b 00
>028738	00 00 f9 ba fe ff 6e 86 a8 bb 03 00 a4 bb 9e bb
>028748	98 bb 94 bb 7e 86 92 bb 98 84 02 00 ee 84 8e bb
>028758	8c bb e4 85 8a bb 04 00 1b 00 00 00 c8 f7 fe ff
>028768	f2 8f ff ff 4c 00 00 00 ea ff ff ff 3e 87 86 bb
>028778	05 00 80 bb 7a bb 78 bb 74 bb 72 bb 70 bb 52 84
>028788	6e bb 5b 5b 00 00 86 86 6a bb 66 bb 8c 82 62 bb
>028798	02 00 2a 00 00 00 fa ff ff ff cf 79 fd ff 98 85
>0287a8	5e bb 02 00 5a bb 58 bb 56 bb 4c 87 52 bb f7 eb
>0287b8	02 00 00 00 50 bb 4a bb 2c 85 46 bb 02 00 0e 37
>0287c8	ff ff 1e 00 00 00 f8 ff ff ff d8 83 42 bb 06 00
>0287d8	40 bb 3c bb 38 bb 34 bb 32 bb 2c bb 28 bb 00 00
>0287e8	24 bb c7 7d fd ff b6 86 22 bb 1c bb 8c 86 1a bb
>0287f8	04 00 f6 84 ff ff 19 34 00 00 c9 2b fe ff 08 00
>028808	00 00 e8 6d fe ff d0 80 16 bb 03 00 14 bb 10 bb
>028818	0c bb 06 bb e6 83 02 bb 89 b0 02 00 8c 81 00 bb
>028828	fc ba 18 86 fa ba 06 00 02 73 00 00 2a 18 00 00
>028838	99 ea 00 00 b6 34 fc ff b6 20 03 00 f8 d9 fc ff
>028848	f2 ff ff ff 0e 88 f6 ba 04 00 f2 ba ee ba e8 ba
>028858	e4 ba e0 ba 44 80 de ba 5b 00 00 00 f4 86 da ba
>028868	d4 ba fa 86 d0 ba 02 00 e0 e4 fd ff db 71 fc ff
>028878	28 00 ff ff 42 85 cc ba 05 00 c8 ba c4 ba be ba
>028888	b8 ba b2 ba ae ba b2 82 ac ba a6 ba 2a 88 a4 ba
>028898	05 00 4d 87 01 00 f8 91 fe ff 04 35 fd ff 28 29
>0288a8	fe ff bb ed fc ff ca ff ff ff 68 83 a0 ba 06 00
>0288b8	9c ba 96 ba 94 ba 8e ba 8c ba 88 ba 84 ba d8 81
>0288c8	80 ba 4b 89 fe ff 8e 88 7c ba 7a ba c0 84 78 ba
>0288d8	03 00 be ff ff ff 9f c0 01 00 b4 ff ff ff a6 98
>0288e8	fd ff d2 87 74 ba 03 00 72 ba 70 ba 6e ba 68 ba
>0288f8	5c 88 64 ba f1 ff ff ff ba 84 60 ba 5e ba ba 81
>028908	5a ba 05 00 cf 21 02 00 9d 83 03 00 d9 3f 03 00
>028918	fc ff ff ff 97 32 03 00 53 00 00 00 0e 84 56 ba
>028928	04 00 52 ba 4e ba 48 ba 46 ba 44 ba 7e 82 42 ba
>028938	51 81 02 00 56 81 3e ba 38 ba d4 88 34 ba 02 00
>028948	52 c9 fc ff 5b 9e 03 00 f6 ff ff ff 7c 88 32 ba
>028958	03 00 2c ba 26 ba 22 ba 20 ba ec 86 1c ba 9a 93
>028968	02 00 50 83 18 ba 16 ba 54 86 12 ba 03 00 cf 50
>028978	03 00 ee cc fc ff 17 34 01 00 c9 97 fc ff de 86
>028988	0e ba 05 00 0a ba 06 ba 04 ba fe b9 f8 b9 f4 b9
>028998	86 87 f0 b9 cb d3 fe ff 8e 87 ec b9 e6 b9 56 83
>0289a8	e2 b9 05 00 1f 4a 01 00 5a 00 00 00 f6 ff ff ff
>0289b8	34 00 00 00 af ff ff ff 29 00 00 00 24 89 e0 b9
>0289c8	02 00 dc b9 d8 b9 d2 b9 e6 87 ce b9 15 ab 03 00
>0289d8	ba 87 cc b9 ca b9 ec 82 c8 b9 02 00 e0 ff ff ff
>0289e8	ed ff ff ff ec ff ff ff 4c 88 c6 b9 05 00 c0 b9
>0289f8	bc b9 b8 b9 b2 b9 ae b9 ac b9 1a 87 aa b9 02 21
>028a08	01 00 a0 89 a8 b9 a2 b9 60 84 a0 b9 04 00 f5 0f
>028a18	ff ff 93 0a 01 00 f4 ff ff ff ae ff ff ff 97 b2
>028a28	01 00 54 89 9c b9 03 00 96 b9 90 b9 8a b9 86 b9
>028a38	00 00 82 b9 a7 ff ff ff 3c 89 80 b9 7e b9 00 00
>028a48	7a b9 05 00 9f ff ff ff d9 ff ff ff b2 72 fe ff
>028a58	1e 4a fc ff 9c ff ff ff a8 c1 00 00 2a 8a 76 b9
>028a68	04 00 70 b9 6a b9 64 b9 60 b9 5c b9 02 8a 58 b9
>028a78	a1 64 00 00 ce 88 54 b9 4e b9 70 89 4a b9 02 00
>028a88	6d c4 ff ff 4a cb 01 00 ca 54 00 00 f0 89 46 b9
>028a98	03 00 44 b9 42 b9 3e b9 3c b9 22 87 3a b9 38 b9
>028aa8	82 8a 34 b9 06 00 b3 4b fd ff 45 00 00 00 f1 ff
>028ab8	ff ff 68 f4 fc ff 74 1c 00 00 7e 4e 03 00 cb ff
>028ac8	ff ff 64 8a 30 b9 06 00 2a b9 24 b9 22 b9 20 b9
>028ad8	1a b9 18 b9 16 b9 38 8a 12 b9 28 e9 fd ff a2 8a
>028ae8	0e b9 08 b9 28 87 04 b9 05 00 d0 ff ff ff e0 1d
>028af8	ff ff 54 00 00 00 f2 ff ff ff a6 ff ff ff a4 ff
>028b08	ff ff a2 80 00 b9 06 00 fc b8 fa b8 f4 b8 f2 b8
>028b18	ec b8 ea b8 e4 b8 34 89 e0 b8 f4 5a ff ff 54 87
>028b28	dc b8 da b8 6a 88 d6 b8 04 00 37 00 00 00 8c 04
>028b38	fd ff 25 fd fc ff e5 96 fc ff c4 82 02 00 da 84
>028b48	d4 b8 05 00 d2 b8 ce b8 ca b8 c8 b8 c2 b8 c0 b8
>028b58	98 89 be b8 c8 60 00 00 e6 8a bc b8 b6 b8 c0 87
>028b68	b4 b8 06 00 a7 d8 fd ff 33 00 00 00 b9 6d fd ff
>028b78	87 6f 00 00 f4 ff ff ff 06 00 00 00 32 a0 01 00
>028b88	ca 85 b0 b8 06 00 aa b8 a4 b8 a0 b8 9e b8 9a b8
>028b98	96 b8 92 b8 00 00 90 b8 5a 9c fd ff 24 88 8c b8
>028ba8	88 b8 06 89 84 b8 02 00 9f 36 ff ff 5b 7f fe ff
>028bb8	27 06 00 00 74 87 80 b8 02 00 7e b8 7c b8 7a b8
>028bc8	1e 85 76 b8 dc e0 ff ff 26 85 74 b8 6e b8 aa 8b
>028bd8	6c b8 03 00 51 00 00 00 88 22 fd ff c7 ff ff ff
>028be8	42 5d 01 00 00 00 68 b8 04 00 62 b8 60 b8 5e b8
>028bf8	5c b8 58 b8 9c 8b 54 b8 c8 af 01 00 40 8a 50 b8
>028c08	4c b8 46 8a 48 b8 05 00 4a 52 ff ff 24 ba 00 00
>028c18	f5 c3 03 00 08 69 00 00 7d 40 03 00 e6 ff ff ff
>028c28	a4 84 44 b8 03 00 3e b8 38 b8 36 b8 34 b8 1c 88
>028c38	30 b8 ef ff ff ff 00 89 2c b8 2a b8 66 8b 26 b8
>028c48	06 00 bb ff ff ff c1 a8 fd ff a6 1c fe ff 0f c6
>028c58	00 00 10 00 00 00 fa ad 02 00 58 1c fd ff c4 89
>028c68	24 b8 02 00 20 b8 1c b8 18 b8 b2 87 16 b8 eb e2
>028c78	fc ff 04 8c 12 b8 10 b8 d6 8b 0c b8 05 00 a5 f9
>028c88	fc ff 69 51 02 00 7b 06 fe ff 32 00 00 00 df b6
>028c98	03 00 1e 28 fe ff 28 8c 08 b8 04 00 06 b8 04 b8
>028ca8	02 b8 fe b7 fa b7 62 89 f6 b7 55 00 00 00 ee 87
>028cb8	f2 b7 f0 b7 0a 8c ee b7 03 00 92 bf fc ff 76 cb
>028cc8	fe ff 2d 00 00 00 74 ee fc ff b2 88 ea b7 02 00
>028cd8	e6 b7 e4 b7 e2 b7 0a 86 e0 b7 02 00 00 00 00 00
>028ce8	dc b7 d6 b7 82 85 d2 b7 06 00 d5 c9 fc ff 58 00
>028cf8	00 00 11 46 03 00 c6 ff ff ff 6a 47 00 00 1c 00
>028d08	00 00 44 00 00 00 ca 8a ce b7 06 00 ca b7 c8 b7
>028d18	c2 b7 c0 b7 be b7 b8 b7 b4 b7 de 8a b0 b7 9a bd
>028d28	03 00 7a 8c ac b7 aa b7 5a 87 a6 b7 06 00 d9 ff
>028d38	ff ff ed 27 01 00 93 20 02 00 52 e4 fc ff 3b 00
>028d48	00 00 e5 7b 03 00 d9 ff ff ff ec 8b a4 b7 02 00
>028d58	a0 b7 9a b7 96 b7 c8 8b 92 b7 35 00 00 00 e6 8c
>028d68	90 b7 8a b7 de 89 88 b7 02 00 c7 d4 fd ff ec 8e
>028d78	01 00 e6 45 03 00 fe 85 84 b7 05 00 82 b7 80 b7
>028d88	7a b7 74 b7 72 b7 6e b7 74 8a 6a b7 ec ff ff ff
>028d98	6a 89 68 b7 64 b7 f4 87 62 b7 02 00 ef 2d ff ff
>028da8	4f 7e fe ff 0b 00 00 00 0e 8d 5e b7 05 00 5c b7
>028db8	56 b7 54 b7 52 b7 50 b7 4a b7 5e 8d 46 b7 16 32
>028dc8	fc ff 4e 86 44 b7 3e b7 bc 8c 3a b7 05 00 c2 46
>028dd8	02 00 02 00 00 00 06 80 02 00 cf ff ff ff 84 20
>028de8	fd ff 45 19 fe ff 94 8a 38 b7 02 00 32 b7 30 b7
>028df8	2e b7 fc 8b 2a b7 34 00 00 00 b6 8c 28 b7 26 b7
>028e08	ec 8a 22 b7 04 00 2c f8 ff ff f6 ff ff ff 85 3d
>028e18	ff ff b3 ff ff ff 11 85 fe ff 9e 8c 1e b7 02 00
>028e28	1c b7 16 b7 12 b7 fa 8d 10 b7 75 b6 ff ff 7c 8a
>028e38	0c b7 08 b7 9e 8d 04 b7 06 00 77 77 01 00 38 9e
>028e48	fe ff 6f ce fd ff 8d 72 fc ff 4f 00 00 00 04 a6
>028e58	fd ff 63 00 00 00 0a 8b 02 b7 04 00 00 b7 fc b6
>028e68	f6 b6 f0 b6 ec b6 ae 8c ea b6 35 c2 fd ff 36 8e
>028e78	e8 b6 e4 b6 3c 8e e0 b6 06 00 c2 b1 02 00 5b 29
>028e88	00 00 ba 02 02 00 0b 00 00 00 14 00 00 00 cd 25
>028e98	fe ff 3e 00 00 00 86 89 dc b6 04 00 da b6 d6 b6
>028ea8	d2 b6 cc b6 c8 b6 46 86 c4 b6 25 00 00 00 aa 85
>028eb8	c0 b6 be b6 a8 8a bc b6 05 00 07 65 03 00 2e 9f
>028ec8	fe ff 9f ff ff ff df a2 03 00 2e 45 fd ff 2e 32
>028ed8	03 00 22 8e ba b6 05 00 b8 b6 b4 b6 b0 b6 ac b6
>028ee8	aa b6 a4 b6 c2 8d a2 b6 f3 ff ff ff d0 8b 9e b6
>028ef8	9c b6 ec 8c 9a b6 03 00 0b 00 00 00 94 81 ff ff
>028f08	4e 23 01 00 35 00 00 00 9e 8e 98 b6 02 00 96 b6
>028f18	92 b6 90 b6 36 8c 8c b6 58 f7 ff ff 3e 8c 88 b6
>028f28	86 b6 52 80 84 b6 03 00 53 ff fd ff 17 00 00 00
>028f38	4e 00 00 00 5d fe 00 00 88 8b 80 b6 05 00 7a b6
>028f48	76 b6 74 b6 6e b6 68 b6 66 b6 ae 8e 62 b6 4c 48
>028f58	fd ff 02 8e 5e b6 5a b6 bc 8e 56 b6 06 00 36 95
>028f68	00 00 13 00 00 00 3a ad 00 00 e5 f4 01 00 9f 44
>028f78	fc ff 58 5b 01 00 60 87 fe ff da 8e 54 b6 06 00
>028f88	52 b6 50 b6 4a b6 46 b6 40 b6 3a b6 36 b6 48 83
>028f98	32 b6 0b 00 00 00 5a 8f 2e b6 28 b6 60 8f 24 b6
>028fa8	06 00 44 6b 01 00 63 00 00 00 df ff ff ff 94 ab
>028fb8	00 00 ff ff ff ff 2d 00 00 00 f1 68 fe ff 7e 8d
>028fc8	22 b6 02 00 20 b6 1e b6 18 b6 2e 8e 14 b6 ef ff
>028fd8	ff ff 26 8b 10 b6 0c b6 10 8a 08 b6 06 00 6c 41
>028fe8	ff ff 7e 3e 03 00 5f 61 ff ff 20 51 03 00 7c bf
>028ff8	fe ff e5 5f ff ff a1 60 fe ff a6 87 04 b6 03 00
>029008	fe b5 fc b5 f8 b5 f4 b5 f8 88 f0 b5 5b 73 ff ff
>029018	64 88 ee b5 e8 b5 30 8d e6 b5 06 00 71 44 00 00
>029028	53 bf fc ff 09 00 00 00 4d 00 00 00 d6 f5 fc ff
>029038	15 70 fe ff 0f 00 00 00 d2 8c e2 b5 05 00 dc b5
>029048	da b5 d8 b5 d6 b5 d0 b5 ce b5 de 8c cc b5 fe ff
>029058	ff ff 66 8d ca b5 c6 b5 80 8c c2 b5 05 00 b3 a8
>029068	02 00 5a 00 00 00 4e ae 03 00 e5 13 ff ff 42 a9
>029078	02 00 ad ba 03 00 40 8f c0 b5 05 00 be b5 b8 b5
>029088	b2 b5 ac b5 aa b5 a6 b5 72 8c a4 b5 2a 28 00 00
>029098	7c 85 a2 b5 a0 b5 7c 8e 9c b5 06 00 57 55 01 00
>0290a8	1c 18 01 00 c3 81 01 00 f2 28 03 00 23 00 00 00
>0290b8	67 06 03 00 c0 e6 ff ff aa 86 98 b5 06 00 92 b5
>0290c8	90 b5 8c b5 86 b5 82 b5 7c b5 76 b5 d2 8f 72 b5
>0290d8	97 79 02 00 18 90 70 b5 6a b5 6c 8d 66 b5 04 00
>0290e8	14 00 00 00 4d 00 00 00 52 ad 01 00 2a 6e fd ff
>0290f8	6a a0 02 00 40 90 62 b5 05 00 5e b5 5a b5 56 b5
>029108	50 b5 4c b5 46 b5 96 8f 42 b5 06 ce 02 00 ca 8d
>029118	3e b5 3a b5 2a 8f 36 b5 02 00 f4 ff ff ff fc e2
>029128	00 00 e8 ff ff ff 66 8c 32 b5 06 00 2e b5 2a b5
>029138	28 b5 24 b5 22 b5 1c b5 18 b5 d0 89 16 b5 fc f9
>029148	fc ff 60 8b 12 b5 10 b5 08 8e 0c b5 03 00 a6 ff
>029158	ff ff d4 d5 00 00 4e 00 00 00 1a a2 fe ff 7e 90
>029168	08 b5 05 00 04 b5 02 b5 fe b4 fc b4 f8 b4 f6 b4
>029178	6e 8e f2 b4 06 00 00 00 da 8f ee b4 ec b4 d0 8d
>029188	e8 b4 05 00 92 ae fc ff a3 eb 00 00 6d 1a 00 00
>029198	65 3c fe ff 39 00 00 00 d9 bc fd ff 82 8f e4 b4
>0291a8	04 00 e2 b4 de b4 dc b4 d8 b4 d6 b4 52 8f d4 b4
>0291b8	c4 40 ff ff 4a 91 d2 b4 cc b4 2c 8b c8 b4 02 00
>0291c8	17 09 03 00 b4 40 fc ff 81 78 03 00 c6 8f c4 b4
>0291d8	02 00 c2 b4 bc b4 b8 b4 1c 8f b4 b4 7f fa ff ff
>0291e8	2a 8d b0 b4 ae b4 a4 8f aa b4 06 00 40 00 00 00
>0291f8	e4 ff ff ff b7 9a fd ff 9c ff ff ff e2 30 01 00
>029208	fe ff ff ff 47 8f fe ff ee 8d a6 b4 02 00 a0 b4
>029218	9e b4 98 b4 10 90 94 b4 f1 64 fe ff bc 91 90 b4
>029228	8e b4 50 91 8a b4 02 00 c2 e8 fe ff 29 00 00 00
>029238	ac 9c 03 00 0c 87 86 b4 04 00 82 b4 7c b4 76 b4
>029248	72 b4 70 b4 0e 91 6c b4 c3 ff ff ff dc 90 6a b4
>029258	64 b4 a6 89 60 b4 02 00 a5 66 fc ff 45 00 00 00
>029268	f0 ff ff ff 5e 8e 5c b4 04 00 56 b4 52 b4 50 b4
>029278	4e b4 4c b4 b4 91 48 b4 6f bc 01 00 a4 8b 44 b4
>029288	3e b4 44 8c 3a b4 05 00 b4 24 ff ff e4 54 fc ff
>029298	eb ff ff ff 59 00 00 00 24 3f 01 00 3a d5 00 00
>0292a8	d4 91 38 b4 02 00 34 b4 32 b4 2e b4 90 90 2a b4
>0292b8	c0 b9 ff ff 5a 90 26 b4 20 b4 2a 92 1e b4 06 00
>0292c8	06 00 00 00 e7 ff ff ff f6 ff ff ff f6 ff ff ff
>0292d8	61 00 00 00 92 ed ff ff 4b a8 03 00 fc 90 1a b4
>0292e8	03 00 16 b4 10 b4 0a b4 08 b4 d4 90 04 b4 ea 80
>0292f8	03 00 84 92 00 b4 fe b3 8a 92 fa b3 03 00 52 00
>029308	00 00 fa 2a ff ff ab 7f fd ff ac 85 03 00 ea 88
>029318	f6 b3 02 00 f2 b3 f0 b3 ee b3 42 91 ea b3 54 4a
>029328	02 00 e8 91 e6 b3 e0 b3 9e 90 de b3 06 00 51 00
>029338	00 00 4d 00 00 00 e0 24 01 00 e8 ce 02 00 c9 8e
>029348	02 00 4e 00 00 00 8b 38 01 00 2e 91 dc b3 03 00
>029358	d8 b3 d2 b3 d0 b3 cc b3 52 90 c8 b3 41 00 00 00
>029368	24 8f c4 b3 c0 b3 86 91 bc b3 02 00 38 80 fd ff
>029378	9e 5e fe ff c0 43 03 00 66 91 b8 b3 03 00 b4 b3
>029388	b2 b3 b0 b3 aa b3 60 93 a6 b3 fc 7a fe ff fa 92
>029398	a2 b3 9c b3 1e 90 98 b3 02 00 d7 e0 fd ff 23 00
>0293a8	00 00 a0 ff ff ff 46 8b 94 b3 02 00 8e b3 8a b3
>0293b8	84 b3 4c 92 82 b3 ef ff ff ff b6 8e 80 b3 7a b3
>0293c8	42 89 78 b3 04 00 06 00 00 00 26 aa fe ff 95 8c
>0293d8	00 00 8d 63 02 00 2d 00 00 00 10 8f 76 b3 05 00
>0293e8	70 b3 6c b3 66 b3 60 b3 5c b3 58 b3 1e 8b 54 b3
>0293f8	ee ff ff ff 68 93 52 b3 4e b3 ee 91 4a b3 06 00
>029408	ef 40 fe ff 7f 36 03 00 ac 49 03 00 a1 4a 00 00
>029418	b5 8c 03 00 dc 12 00 00 74 6f ff ff 02 90 46 b3
>029428	06 00 40 b3 3a b3 34 b3 30 b3 2e b3 2c b3 28 b3
>029438	90 8d 26 b3 2d 00 00 00 2a 93 24 b3 20 b3 00 93
>029448	1e b3 05 00 c5 bd ff ff 55 e0 02 00 a4 38 00 00
>029458	86 5b 01 00 b6 ff ff ff f1 b2 03 00 10 92 1a b3
>029468	04 00 14 b3 0e b3 08 b3 06 b3 02 b3 22 8d 00 b3
>029478	dc 90 03 00 f4 8e fc b2 f8 b2 1c 91 f4 b2 03 00
>029488	e7 ff ff ff 12 00 00 00 c6 ff ff ff 5e 00 00 00
>029498	ae 93 f0 b2 02 00 ec b2 e8 b2 e6 b2 f4 93 e2 b2
>0294a8	fc ff ff ff 40 94 de b2 da b2 5a 92 d6 b2 04 00
>0294b8	2d 00 00 00 63 1c 00 00 f6 f9 fc ff 74 39 fc ff
>0294c8	7d de 02 00 e4 92 d4 b2 04 00 d2 b2 ce b2 ca b2
>0294d8	c8 b2 c4 b2 a4 94 c0 b2 06 15 ff ff 98 90 be b2
>0294e8	ba b2 46 94 b6 b2 05 00 3d b5 02 00 48 9d 01 00
>0294f8	f3 ff ff ff e7 3f fc ff a2 39 fe ff 19 00 00 00
>029508	16 93 b2 b2 05 00 b0 b2 ae b2 aa b2 a6 b2 a4 b2
>029518	a0 b2 38 94 9e b2 14 8d fe ff 7c 94 9a b2 94 b2
>029528	9c 93 90 b2 04 00 c3 ff ff ff 48 c4 ff ff 38 00
>029538	00 00 ce 7f 01 00 a2 97 00 00 6c 92 8c b2 04 00
>029548	8a b2 86 b2 80 b2 7c b2 7a b2 1c 92 78 b2 53 af
>029558	01 00 bc 92 76 b2 72 b2 c8 93 70 b2 03 00 43 bd
>029568	fd ff ba 8e fd ff f8 9e 01 00 2e 00 00 00 b0 8d
>029578	6c b2 03 00 6a b2 66 b2 60 b2 5c b2 00 00 00 00
>029588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 460 times (7360 bytes)...
>02b258	00 00 00 00 02 4b 49 00 04 45 4e 4d 52 00 02 52
>02b268	41 00 00 00 a5 fa 6a f2 6f d3 02 56 53 00 65 e6
>02b278	76 c1 00 00 02 47 4e 00 04 55 43 4a 55 00 02 56
>02b288	4d 00 01 4e 4b fc bd f2 4d da 09 d0 05 41 41 58
>02b298	4e 4e 67 e8 21 e0 50 c4 03 55 4b 56 00 00 02 4d
>02b2a8	5a 00 02 41 58 00 00 00 00 00 86 fb da f5 d3 dd
>02b2b8	0b d0 03 42 47 51 4e e5 5d cb 7d c2 03 44 5a 46
>02b2c8	01 46 02 52 55 00 02 4f 54 00 01 51 2f f2 ba dd
>02b2d8	17 d0 03 4d 55 55 bf eb 0b e0 dd ca a6 c0 00 00
>02b2e8	02 47 48 00 02 47 44 00 58 fe 23 f0 05 db e8 d3
>02b2f8	03 44 45 58 97 e8 a6 e2 18 c1 03 58 53 57 01 4b
>02b308	04 47 52 54 48 00 05 41 4e 41 45 56 04 47 43 42
>02b318	4d 00 79 fd 0f f5 e3 d5 03 46 49 4c af e5 a0 c1
>02b328	02 56 56 00 00 00 01 44 02 4e 4a 00 04 4e 4a 4f
>02b338	4e 00 05 41 49 45 56 4a 05 4d 50 4f 4d 41 2c fa
>02b348	46 f6 7e da d2 d2 02 4c 55 00 5d e3 4d cc 1b c0
>02b358	02 50 51 00 03 59 4a 43 04 51 47 4a 50 00 05 52
>02b368	4b 55 50 44 03 55 45 56 05 4a 4d 58 45 50 2d f3
>02b378	8f d2 05 57 56 57 45 57 74 e5 73 c4 05 55 4e 48
>02b388	41 59 02 4a 5a 00 04 52 47 59 52 00 d8 fd 1c f0
>02b398	6d de 07 d0 05 4a 52 41 56 5a 9b ec 1b e0 72 c9
>02b3a8	a1 c3 04 54 46 52 56 00 01 59 01 5a 02 49 49 00
>02b3b8	b0 fa db f2 54 da 16 d0 02 42 4c 00 1d e9 70 e6
>02b3c8	f2 cc 08 c0 03 56 59 49 00 00 05 43 4e 50 4c 48
>02b3d8	03 5a 58 52 53 f1 07 d3 04 47 45 4b 50 00 5f ee
>02b3e8	12 e6 5f ca c5 c1 00 00 00 00 02 47 58 00 76 fc
>02b3f8	06 f0 23 dd 76 d1 00 00 4b ec e4 e2 8c cd 07 c0
>02b408	01 50 05 53 41 41 51 42 04 42 43 4b 4f 00 02 5a
>02b418	51 00 af fa 78 f0 f6 d0 04 48 49 4d 41 00 e5 e8
>02b428	32 e3 d1 cd d6 c2 02 4c 56 00 00 00 03 4f 46 50
>02b438	f1 f3 23 da 66 d5 05 51 45 4b 47 4b cb ec 13 e6
>02b448	ae cd ba c0 00 00 00 00 00 00 03 47 42 54 05 5a
>02b458	47 4e 55 49 ab fa 21 f0 da d9 18 d0 04 50 54 56
>02b468	52 00 b9 e3 23 cc 06 c0 00 00 02 4f 47 00 05 5a
>02b478	4e 4a 5a 56 04 52 50 4d 45 00 02 52 46 00 8e fa
>02b488	11 f0 a6 dd 1e d0 01 55 41 ec 1e e0 a6 ca c0 c4
>02b498	04 43 41 54 4b 00 00 00 05 41 52 54 44 46 29 fe
>02b4a8	87 f4 1e dc 78 d3 01 48 8f ea 2d e5 b7 ca 1a c0
>02b4b8	02 59 57 00 05 4d 42 54 50 4d 00 00 f1 fc 0e f0
>02b4c8	89 db 5f d6 05 48 4f 4f 41 45 c1 e0 be c0 01 49
>02b4d8	03 53 58 4c 00 00 03 58 56 4a 01 55 94 f8 1f f0
>02b4e8	04 dd 20 d0 01 4f a8 ec 10 e0 d4 c9 8e c5 00 00
>02b4f8	03 47 4f 4d 01 4d 03 45 59 4f 00 00 02 4e 44 00
>02b508	60 fb af f1 66 db 11 d0 00 00 a1 e8 16 e0 7f c5
>02b518	03 54 48 51 04 4f 51 47 52 00 01 58 02 45 4b 00
>02b528	01 56 03 4c 48 48 03 47 4c 4b 33 fe 76 f1 75 dd
>02b538	17 d0 03 58 55 4e 43 ec 45 e1 63 c8 be c5 05 42
>02b548	51 47 56 52 02 50 57 00 04 46 47 52 42 00 03 4c
>02b558	42 4a 02 4c 4e 00 03 57 51 4e af fd 88 f0 48 dc
>02b568	a2 d0 05 41 49 52 5a 57 d9 e4 fc cd 74 c6 05 53
>02b578	50 4b 46 59 05 54 45 55 53 4f 03 51 4a 53 05 42
>02b588	53 42 5a 58 02 51 43 00 00 00 05 47 49 59 4e 4d
>02b598	07 fe 23 f0 87 dd 90 d0 01 43 de e2 c1 c3 03 4b
>02b5a8	41 45 01 48 05 45 41 59 54 56 04 51 50 51 41 00
>02b5b8	05 4d 46 54 47 4c 01 52 e0 f2 41 de 0e d0 02 44
>02b5c8	54 00 55 e6 e2 c2 00 00 04 45 4a 57 52 00 00 00
>02b5d8	00 00 00 00 05 4d 47 4b 55 44 0f fe 05 f0 ad d1
>02b5e8	05 4e 45 42 58 53 d9 e2 d6 cc 1f c0 03 41 43 45
>02b5f8	03 55 41 5a 00 00 05 4a 47 4a 45 53 5c fe 1f f0
>02b608	4c da e5 d3 02 41 52 00 b8 ed 07 e0 2c ce 1a c0
>02b618	05 4d 54 4b 4e 43 01 4e 00 00 61 f6 fe da a9 d4
>02b628	04 4f 44 4b 50 00 d0 ec a6 e2 73 cc 81 c4 03 45
>02b638	42 56 05 4a 4c 49 5a 52 05 4d 48 4a 43 4d 03 44
>02b648	45 54 05 5a 57 55 55 47 00 00 01 5a 04 f2 3e d9
>02b658	19 d0 03 54 51 46 f0 e9 02 e0 6e cb 6d c1 01 4e
>02b668	04 4d 50 4b 4c 00 05 4b 41 4a 50 52 01 43 02 43
>02b678	46 00 04 57 57 44 45 00 30 fb 23 f4 45 d0 00 00
>02b688	cd e8 49 e6 d7 cd 1c c0 00 00 02 4f 46 00 00 00
>02b698	5d f6 90 d0 01 54 57 ed 10 e0 7b c1 04 50 45 53
>02b6a8	4b 00 01 43 02 45 53 00 03 55 4d 56 03 47 45 57
>02b6b8	01 4f 44 f0 2e d5 01 44 14 e9 09 e0 8e cb 11 c0
>02b6c8	03 49 5a 59 05 4f 57 45 56 4e 02 52 53 00 02 54
>02b6d8	46 00 01 55 5d fe 1a f0 e7 d8 0a d0 03 48 54 46
>02b6e8	42 e3 c4 c3 02 49 4d 00 05 51 59 42 55 49 05 4f
>02b6f8	56 4f 4b 4b 03 4c 4d 43 01 4d 5b f5 f7 db 63 d2
>02b708	03 59 4c 46 12 eb 1e e0 8c c2 03 51 51 52 05 4a
>02b718	5a 43 50 4e 01 42 f4 f8 6b f1 b6 d8 1c d0 00 00
>02b728	70 e1 3c cc 14 c0 01 48 01 53 04 4a 54 4e 4b 00
>02b738	b9 f0 b4 da 0f d0 05 57 55 4d 44 58 93 e0 fb c8
>02b748	1b c1 05 57 49 50 42 47 01 58 01 45 00 00 04 45
>02b758	41 52 54 00 00 00 25 f9 6b f0 87 d5 02 41 55 00
>02b768	5a e6 30 ca b2 c4 03 50 43 47 00 00 05 41 54 55
>02b778	54 5a 05 54 52 52 56 4c 00 00 01 4a 91 f8 23 f0
>02b788	e8 d3 05 4b 57 58 48 59 c5 e1 6b c8 47 c5 03 46
>02b798	49 4a 05 4e 50 42 45 44 03 45 4f 4e 82 f5 2d dd
>02b7a8	ac d4 00 00 6f ec 17 e0 e8 ca 36 c3 03 50 58 48
>02b7b8	04 46 58 42 50 00 00 00 01 47 05 57 4b 47 50 45
>02b7c8	00 00 02 54 4e 00 55 fd 13 f0 f0 d9 10 d0 05 52
>02b7d8	50 4e 49 4f 25 ec c4 e1 22 c2 00 00 00 00 02 52
>02b7e8	54 00 4f fc d6 f5 24 d2 01 41 10 e9 ef e4 44 c8
>02b7f8	01 c6 02 56 46 00 03 58 4b 57 00 00 01 58 00 00
>02b808	a4 fd 11 f0 31 db 21 d0 00 00 0f e9 16 e0 71 c1
>02b818	02 56 4c 00 03 5a 5a 42 03 4b 48 54 93 f4 c3 dc
>02b828	1a d0 01 41 fd e9 21 e0 57 ce 42 c3 00 00 00 00
>02b838	04 52 4e 4b 50 00 05 5a 4d 4f 49 4b 24 f9 e9 f2
>02b848	24 da 07 d0 02 59 44 00 3f ec 39 e2 7c cd 20 c0
>02b858	03 43 42 4b 01 43 00 00 01 55 04 58 42 45 41 00
>02b868	02 fb 1d f0 01 d3 04 50 4d 51 4a 00 b7 e5 fb cc
>02b878	1a c0 01 58 00 00 01 4b aa f9 24 f4 21 dc 0c d0
>02b888	03 50 50 5a 7b ed 63 e6 7c c5 03 58 56 48 03 44
>02b898	53 58 02 54 52 00 01 41 03 55 44 51 04 44 53 59
>02b8a8	4d 00 04 54 43 5a 45 00 80 fa 1d f0 e3 d3 05 43
>02b8b8	4c 49 5a 57 11 e6 15 c1 01 4c 04 58 41 4f 50 00
>02b8c8	01 43 03 55 56 5a 03 47 4e 4a 00 00 08 f6 49 dd
>02b8d8	1d d0 01 51 e8 ea 11 e0 4d cd 18 c0 04 48 47 58
>02b8e8	49 00 00 00 04 51 54 54 4e 00 00 00 05 48 55 53
>02b8f8	42 58 01 4a 02 58 44 00 bb fb 10 f0 16 dc fb d1
>02b908	05 4a 48 44 5a 49 51 ec 04 e6 c8 cc 07 c0 00 00
>02b918	01 52 05 57 54 4a 54 50 00 00 00 00 04 56 5a 55
>02b928	48 00 04 46 54 4c 42 00 e5 fd 19 f0 6e d9 7c d4
>02b938	00 00 d1 e1 00 00 02 55 50 00 00 00 00 00 49 fc
>02b948	e1 f3 1e d9 02 d1 05 57 58 50 58 58 b2 eb 1e e0
>02b958	70 cc 00 c5 02 4d 44 00 03 54 41 45 05 51 42 52
>02b968	46 55 05 4e 51 48 50 5a 05 41 44 44 4b 4a 85 fa
>02b978	0d f0 44 d8 57 d5 01 59 7f e2 68 ce 19 c0 03 4a
>02b988	52 42 05 52 59 56 4a 59 05 43 4e 42 43 42 05 46
>02b998	55 41 4c 46 05 fa 19 f0 0c d0 04 41 51 51 51 00
>02b9a8	dc e2 80 c2 01 52 02 4b 4c 00 05 5a 59 4d 42 43
>02b9b8	03 43 44 43 03 46 55 56 04 52 54 51 4a 00 09 f6
>02b9c8	48 d4 01 59 a6 e5 3f cc db c4 05 46 57 43 56 45
>02b9d8	03 52 4a 54 02 5a 59 00 63 f6 aa dc 01 d0 04 55
>02b9e8	41 43 5a 00 3c ee d1 e4 45 c8 ad c2 02 4f 4e 00
>02b9f8	05 4b 4e 47 42 49 05 52 51 57 44 43 00 00 03 4d
>02ba08	47 57 03 4a 49 5a 9d fb 56 f4 5e d8 09 d6 01 44
>02ba18	6a e9 15 e4 e4 cb 2d c1 00 00 02 41 47 00 04 42
>02ba28	58 43 4d 00 05 49 47 51 54 51 05 f0 4f dd 12 d0
>02ba38	05 41 53 44 48 56 0f ee 8a e0 ed c4 00 00 01 4a
>02ba48	05 5a 4c 4a 43 59 03 54 49 44 02 53 49 00 23 fc
>02ba58	de f2 21 dc fc d1 00 00 ed ec 1f e0 36 ce 1f c0
>02ba68	05 53 4a 43 44 57 01 58 01 43 01 46 46 f9 c1 f5
>02ba78	ef d0 00 00 92 e8 92 e5 19 c9 19 c0 03 54 45 43
>02ba88	03 53 41 44 00 00 04 42 47 42 46 00 01 57 04 51
>02ba98	55 4c 43 00 03 4f 4e 59 4f fc 21 f0 42 d4 04 41
>02baa8	56 4e 52 00 f2 e3 03 46 4d 49 05 59 49 58 57 43
>02bab8	05 55 4a 49 52 51 05 48 57 51 4a 53 03 4c 56 53
>02bac8	03 4c 4c 51 f5 f8 0c f0 59 dd d5 d5 05 4a 51 4c
>02bad8	47 53 69 e8 0e e0 b6 c5 03 51 4f 43 02 51 53 00
>02bae8	04 5a 46 54 51 00 03 44 50 55 02 45 57 00 99 f9
>02baf8	15 f0 72 d0 03 5a 56 5a 0b e0 27 c9 16 c4 05 46
>02bb08	57 4d 51 45 02 50 4a 00 02 50 48 00 00 00 59 fe
>02bb18	6e f0 d7 d5 05 4e 4e 49 48 50 10 e0 1f ca 1a c0
>02bb28	03 4b 42 51 05 58 50 51 46 50 01 54 02 41 47 00
>02bb38	02 42 57 00 03 53 52 42 00 00 d6 f9 15 f0 43 d8
>02bb48	03 d0 05 53 43 47 42 53 f6 e3 51 cd 07 c0 01 45
>02bb58	00 00 02 53 58 00 5c fe 1b f0 8b dd 18 d4 03 57
>02bb68	4d 44 8c ed 13 e0 e5 c0 00 00 01 59 03 4b 56 4e
>02bb78	00 00 05 4e 55 54 47 57 05 48 4f 4f 54 45 8a fd
>02bb88	76 f4 0d d4 01 4c 88 ed f1 e3 a1 c5 03 4b 4c 4d
>02bb98	04 52 49 58 49 00 04 4b 47 4b 53 00 03 54 42 4d
>02bba8	5a fd 0e f0 36 d3 00 00 c1 ec 1b e0 40 c6 05 51
>02bbb8	49 4a 55 4b 05 53 55 4c 53 46 00 00 02 4b 51 00
>02bbc8	6e fe 0d f0 59 d6 00 00 69 e1 24 cc a6 c4 01 57
>02bbd8	02 44 4f 00 05 43 49 44 42 46 01 53 4d f9 06 f0
>02bbe8	f6 d4 02 42 4f 00 30 e5 03 42 4f 50 05 52 48 4c
>02bbf8	5a 54 03 48 43 41 c7 fc 67 f0 b7 d3 01 44 6c e4
>02bc08	31 c0 02 48 53 00 03 47 44 47 02 4f 52 00 01 59
>02bc18	01 44 fa f8 fd f0 4e d9 14 d0 01 56 03 e5 5e ce
>02bc28	03 c1 00 00 02 48 44 00 02 51 47 00 7a fa fa f4
>02bc38	32 d8 12 d0 05 48 44 43 46 4b 51 e2 a2 cc 03 c0
>02bc48	05 4d 42 53 52 52 01 59 03 43 4e 4e e1 f3 cd dc
>02bc58	04 d0 03 50 41 51 10 ee 88 e1 84 c5 01 4a 05 46
>02bc68	4e 47 48 47 05 46 47 4c 55 51 10 f1 a9 dd 77 d2
>02bc78	02 55 4a 00 14 e4 05 4c 4e 4c 57 43 00 00 03 48
>02bc88	57 4b 02 50 4c 00 01 52 05 54 47 4d 4c 4b cc f1
>02bc98	30 de 01 d0 03 58 59 50 2e ee 18 e0 03 46 48 5a
>02bca8	01 43 02 47 54 00 00 00 27 fa dd f4 59 db e6 d2
>02bcb8	04 59 41 59 5a 00 d3 e4 00 ce 30 c1 01 48 03 48
>02bcc8	46 52 02 4c 45 00 d5 f4 a3 d9 06 d0 04 4d 50 4b
>02bcd8	43 00 a7 e5 5b ce 17 c0 01 58 02 52 59 00 03 44
>02bce8	52 4a 01 51 01 54 01 4b 00 00 15 fc 24 f0 e0 da
>02bcf8	c5 d3 01 58 68 e0 01 51 02 53 57 00 03 48 43 4a
>02bd08	05 51 4b 4e 4d 49 03 54 43 48 04 50 58 54 49 00
>02bd18	04 4d 50 49 5a 00 e8 f8 1e f0 0f d0 05 4e 49 5a
>02bd28	50 41 7d e9 e6 e3 9a c1 00 00 04 51 44 49 52 00
>02bd38	03 4a 4b 55 00 00 94 f8 22 f0 33 db f0 d4 01 4b
>02bd48	6e eb 24 e0 01 55 01 55 03 47 49 4e 02 46 4e 00
>02bd58	97 fb 73 f6 7c dc 19 d0 00 00 50 ea 0d e0 25 c2
>02bd68	04 4f 41 4a 46 00 01 59 03 4a 4a 43 03 4f 4e 5a
>02bd78	55 fe 95 f4 9c dc 23 d0 03 54 56 43 44 ec 1b e0
>02bd88	31 c6 05 4f 51 55 58 5a 05 5a 53 52 42 49 03 46
>02bd98	57 4a 04 45 4b 49 4b 00 13 fc 0c f0 cd d9 02 d6
>02bda8	01 59 d8 ec b8 e1 37 ce 21 c0 03 58 50 54 01 4e
>02bdb8	00 00 01 53 b6 fd 17 f3 06 de 0f d0 05 4d 4d 4e
>02bdc8	55 55 dc e1 01 42 05 48 4f 55 53 55 05 59 42 4d
>02bdd8	4b 53 88 f0 3e d4 00 00 77 e1 6e c1 00 00 01 41
>02bde8	00 00 1f fd 01 f5 1a d0 04 4d 4c 49 58 00 ba e3
>02bdf8	d3 c5 04 56 49 45 42 00 02 56 52 00 02 46 45 00
>02be08	03 55 51 56 9e f3 b9 db 01 d0 01 55 bd e8 48 e6
>02be18	93 cc 16 c0 04 54 56 43 5a 00 01 44 04 47 4a 49
>02be28	59 00 28 f1 08 d0 04 4e 49 52 42 00 17 e9 2e e3
>02be38	a4 cc 1d c0 04 48 57 51 43 00 00 00 02 4d 53 00
>02be48	03 53 59 52 04 56 50 46 42 00 00 00 03 4b 45 4c
>02be58	06 f0 49 d1 00 00 32 e5 e5 cb 18 c0 03 56 53 4b
>02be68	02 44 57 00 01 53 f5 f4 4b d9 24 d0 05 43 51 58
>02be78	56 54 d3 e9 52 e2 3d c9 08 c6 02 58 54 00 01 43
>02be88	03 55 4d 4e 05 43 4e 4e 50 5a 05 48 58 4c 48 58
>02be98	01 4a 70 f0 ee d0 05 56 52 41 58 43 77 ed be e2
>02bea8	fe c1 03 56 4e 42 03 46 51 4e 01 44 01 52 00 00
>02beb8	a3 f9 97 f4 2c dd 40 d6 00 00 23 ea a5 e2 ab ca
>02bec8	10 c4 02 59 52 00 05 45 48 54 55 41 03 46 4a 59
>02bed8	03 4b 57 4d 05 43 59 41 46 59 17 f0 62 da 24 d0
>02bee8	00 00 e4 e5 69 c8 45 c4 01 45 03 56 41 58 03 4b
>02bef8	57 53 1f fc 3b f4 11 d0 04 53 58 52 54 00 fa e4
>02bf08	01 4a 03 51 50 59 01 41 05 56 56 56 4d 56 05 56
>02bf18	5a 59 44 52 45 f9 49 f5 f8 d4 00 00 3b ee ba e2
>02bf28	7b cd 20 c0 05 41 5a 43 4d 4c 01 48 02 4d 49 00
>02bf38	05 4e 54 58 44 58 15 f0 5d dd 5d d5 01 4e ff ea
>02bf48	0e e0 00 00 01 4a 00 00 03 47 44 46 03 45 48 49
>02bf58	05 42 42 52 43 4e 05 54 4d 52 57 4d aa fa 01 f0
>02bf68	42 d8 23 d0 02 56 55 00 3b ec 20 e0 02 42 52 00
>02bf78	04 5a 59 53 41 00 04 51 5a 54 54 00 02 51 59 00
>02bf88	03 50 51 51 05 51 4d 58 50 5a ae f5 43 dc 1a d0
>02bf98	00 00 13 e6 4d c1 03 4e 53 55 02 49 42 00 04 43
>02bfa8	48 46 45 00 09 f0 f9 dc 79 d1 05 53 57 4f 42 43
>02bfb8	41 e1 02 41 4d 00 04 47 52 4e 54 00 02 4b 55 00
>02bfc8	03 4a 43 41 02 4b 45 00 00 00 2b f6 03 d0 03 48
>02bfd8	55 51 01 e0 67 c6 03 57 56 56 01 42 05 58 54 4c
>02bfe8	4f 54 01 51 13 f9 40 f6 05 db 14 d0 02 42 47 00
>02bff8	8a eb 9f e0 f6 cb 04 c0
.02c000					CodeEndSpace:

;******  End of listing
