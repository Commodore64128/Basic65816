
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 15:05:22 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 47 0e 01	jmp $010e47			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	c3 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	96 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	a6 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	b6 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	fa 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	61 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	c6 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	43 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	25 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	e0 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	e0 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	61 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	6d 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	ea 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	61 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	72 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	84 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	fb 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	db 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	b7 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	a1 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	32 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	87 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	c3 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	c3 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	c3 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	c3 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	c3 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	c3 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	34 0e					.word Function_REM             & $FFFF ; token $3e1d "rem"
>01003c	43 0a					.word Function_Let             & $FFFF ; token $3e1e "let"
>01003e	15 0e					.word Function_ASSERT          & $FFFF ; token $3e1f "assert"
>010040	58 0c					.word Function_END             & $FFFF ; token $3e20 "end"
>010042	5a 0c					.word Function_RUN             & $FFFF ; token $3e21 "run"
>010044	b6 0c					.word Function_STOP            & $FFFF ; token $3e22 "stop"
>010046	b2 0c					.word Function_CLEAR           & $FFFF ; token $3e23 "clear"
>010048	11 0d					.word Function_Dim             & $FFFF ; token $3e24 "dim"
>01004a	85 0d					.word Function_COLLECT         & $FFFF ; token $3e25 "collect"
>01004c	30 0e					.word Function_CLS             & $FFFF ; token $3e26 "cls"
>01004e	be 0a					.word Function_PRINT           & $FFFF ; token $3e27 "print"
>010050	4d 0b					.word Function_GOTO            & $FFFF ; token $3e28 "goto"
>010052	ac 0b					.word Function_GOSUB           & $FFFF ; token $3e29 "gosub"
>010054	c8 0b					.word Function_RETURN          & $FFFF ; token $3e2a "return"
>010056	0a 0b					.word Function_ONGOTO          & $FFFF ; token $3e2b "on"
>010058	fa 0b					.word Function_REPEAT          & $FFFF ; token $3c2c "repeat"
>01005a	11 0c					.word Function_UNTIL           & $FFFF ; token $3a2d "until"
.01005c					TokenText:
>01005c	02 26					 .text $02,"&"        ; token $2001
>01005e	02 7c					 .text $02,"|"        ; token $2002
>010060	02 5e					 .text $02,"^"        ; token $2003
>010062	12 3c					 .text $12,"<"        ; token $2204
>010064	12 3e					 .text $12,">"        ; token $2205
>010066	12 3d					 .text $12,"="        ; token $2206
>010068	13 3c 3d				 .text $13,"<="       ; token $2207
>01006b	13 3e 3d				 .text $13,">="       ; token $2208
>01006e	13 3c 3e				 .text $13,"<>"       ; token $2209
>010071	22 2b					 .text $22,"+"        ; token $240a
>010073	22 2d					 .text $22,"-"        ; token $240b
>010075	32 2a					 .text $32,"*"        ; token $260c
>010077	32 2f					 .text $32,"/"        ; token $260d
>010079	32 25					 .text $32,"%"        ; token $260e
>01007b	33 3e 3e				 .text $33,">>"       ; token $260f
>01007e	33 3c 3c				 .text $33,"<<"       ; token $2610
>010081	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010087	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01008c	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010091	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010096	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>01009b	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100a1	92 2c					 .text $92,","        ; token $3217
>0100a3	92 3b					 .text $92,";"        ; token $3218
>0100a5	92 3a					 .text $92,":"        ; token $3219
>0100a7	92 28					 .text $92,"("        ; token $321a
>0100a9	92 29					 .text $92,")"        ; token $321b
>0100ab	92 27					 .text $92,"'"        ; token $321c
>0100ad	f4 72 65 6d				 .text $f4,"rem"      ; token $3e1d
>0100b1	f4 6c 65 74				 .text $f4,"let"      ; token $3e1e
>0100b5	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1f
>0100bc	f4 65 6e 64				 .text $f4,"end"      ; token $3e20
>0100c0	f4 72 75 6e				 .text $f4,"run"      ; token $3e21
>0100c4	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e22
>0100c9	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e23
>0100cf	f4 64 69 6d				 .text $f4,"dim"      ; token $3e24
>0100d3	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e25
>0100db	f4 63 6c 73				 .text $f4,"cls"      ; token $3e26
>0100df	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e27
>0100e5	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e28
>0100ea	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e29
>0100f0	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e2a
>0100f7	f3 6f 6e				 .text $f3,"on"       ; token $3e2b
>0100fa	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c2c
>010101	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a2d
>010107	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					remTokenID                       = $3e1d
=$3e1e					letTokenID                       = $3e1e
=$3e1f					assertTokenID                    = $3e1f
=$3e20					endTokenID                       = $3e20
=$3e21					runTokenID                       = $3e21
=$3e22					stopTokenID                      = $3e22
=$3e23					clearTokenID                     = $3e23
=$3e24					dimTokenID                       = $3e24
=$3e25					collectTokenID                   = $3e25
=$3e26					clsTokenID                       = $3e26
=$3e27					printTokenID                     = $3e27
=$3e28					gotoTokenID                      = $3e28
=$3e29					gosubTokenID                     = $3e29
=$3e2a					returnTokenID                    = $3e2a
=$3e2b					onTokenID                        = $3e2b
=$3c2c					repeatTokenID                    = $3c2c
=$3a2d					untilTokenID                     = $3a2d

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010108					Evaluate:
.010108	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.01010b	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.01010e					EvaluateLevel:
.01010e	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010111	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010113	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010115	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010118	b0 79		bcs $010193			bcs 	_ELVariable
.01011a	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01011d	b0 16		bcs $010135			bcs 	_ELConstant
.01011f	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010122	90 7f		bcc $0101a3			bcc 	_ELStringConstant
.010124	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010127	90 03		bcc $01012c			bcc 	_ELConstantShift
.010129	82 94 00	brl $0101c0			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01012c					_ELConstantShift:
.01012c	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.01012f	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010131	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010133	e6 06		inc $06				inc 	DCodePtr
.010135					_ELConstant:
.010135	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010137	38		sec				sec  								; shift it in the range 0-32767
.010138	e9 00 40	sbc #$4000			sbc 	#$4000
.01013b	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01013c	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.01013e	6a		ror a				ror 	a 							; rotate that into the constant value
.01013f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010141	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010143	95 10		sta $10,x			sta 	EXSValueH+0,x
.010145	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010147	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010149	e6 06		inc $06				inc 	DCodePtr
.01014b					_ELGotAtom:
.01014b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.01014d	a8		tay				tay 								; save in Y
.01014e	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010151	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010154	d0 35		bne $01018b			bne 	_ELExit
.010156	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010158	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01015b	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.01015d	98		tya				tya 								; get the keyword token back
.01015e	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010161	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010163	90 26		bcc $01018b			bcc 	_ELExit 					; precedence too low, then exit.
.010165	5a		phy				phy 								; save the binary operator on the stack
.010166	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010168	e6 06		inc $06				inc 	DCodePtr
.01016a	18		clc				clc 								; try the next level up
.01016b	69 00 02	adc #$0200			adc 	#1 << TokenShift
.01016e	e8		inx				inx 								; calculate the RHS at the next stack level.
.01016f	e8		inx				inx
.010170	20 0e 01	jsr $01010e			jsr 	EvaluateLevel
.010173	ca		dex				dex
.010174	ca		dex				dex
.010175	7a		ply				ply 								; get operator token back into Y
.010176					_ELExecuteY:
.010176	98		tya				tya
.010177	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01017a	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01017b	9b		txy				txy 								; save X in Y
.01017c	aa		tax				tax 								; double keyword ID in X
.01017d	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010181	bb		tyx				tyx 								; restore X.
.010182	8f 87 01 01	sta $010187			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010186					_ELCallRoutine:
.010186	20 86 01	jsr $010186			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010189	80 c0		bra $01014b			bra 	_ELGotAtom 					; go round operator level again.
.01018b	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.01018d	0a		asl a				asl 	a
.01018e	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010190	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010192	60		rts				rts
.010193					_ELVariable:
.010193	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010195	20 54 02	jsr $010254			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010198	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01019a	94 10		sty $10,x			sty 	EXSValueH+0,x
.01019c	76 20		ror $20,x			ror 	EXSPrecType+0,x
.01019e	80 ab		bra $01014b			bra 	_ELGotAtom
.0101a0					_ELSyntax
.0101a0	82 31 02	brl $0103d4			brl 	SyntaxError
.0101a3					_ELStringConstant:
.0101a3	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.0101a6	f0 f8		beq $0101a0			beq 	_ELSyntax
.0101a8	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0101aa	1a		inc a				inc 	a
.0101ab	1a		inc a				inc 	a
.0101ac	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101ae	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101b0	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101b2	18		clc				clc 								; add to string constant.
.0101b3	65 06		adc $06				adc 	DCodePtr
.0101b5	85 06		sta $06				sta 	DCodePtr
.0101b7	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101b9	09 00 80	ora #$8000			ora 	#$8000
.0101bc	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101be	80 8b		bra $01014b			bra 	_ELGotAtom
.0101c0					_ELUnaryKeyword:
.0101c0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101c2	a8		tay				tay 								; put the token in Y.
.0101c3	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101c5	e6 06		inc $06				inc 	DCodePtr
.0101c7	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101ca	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101cd	f0 a7		beq $010176			beq 	_ELExecuteY					; go back and execute it
.0101cf	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101d2	d0 11		bne $0101e5			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101d4	20 0b 02	jsr $01020b			jsr 	EvaluateNext 				; evaluate the expression
.0101d7	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101da					_ELCopy:
.0101da	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101dc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101de	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101e0	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101e2	82 66 ff	brl $01014b			brl 	_ELGotAtom 					; and continue.
.0101e5					_ELUnaryOperator:
.0101e5	5a		phy				phy 								; save the operator on the stack.
.0101e6	e8		inx				inx 								; this is like evaluate next
.0101e7	e8		inx				inx
.0101e8	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101eb	20 0e 01	jsr $01010e			jsr 	EvaluateLevel
.0101ee	ca		dex				dex 								; unwind the stack.
.0101ef	ca		dex				dex
.0101f0	68		pla				pla 								; restore the unary operator.
.0101f1	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101f4	f0 03		beq $0101f9			beq 	_ELMinus
.0101f6	4c d4 03	jmp $0103d4			jmp 	SyntaxError
.0101f9					_ELMinus:
.0101f9	38		sec				sec 								; do the negation calculation.
.0101fa	a9 00 00	lda #$0000			lda 	#0
.0101fd	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101ff	95 00		sta $00,x			sta 	EXSValueL+0,x
.010201	a9 00 00	lda #$0000			lda 	#0
.010204	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010206	95 10		sta $10,x			sta 	EXSValueH+0,x
.010208	82 40 ff	brl $01014b			brl 	_ELGotAtom					; and continue.
.01020b					EvaluateNext:
.01020b	e8		inx				inx
.01020c	e8		inx				inx
.01020d	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010210	20 0e 01	jsr $01010e			jsr 	EvaluateLevel
.010213	ca		dex				dex
.010214	ca		dex				dex
.010215	60		rts				rts
.010216					EvaluateInteger:
.010216	20 08 01	jsr $010108			jsr 	Evaluate
.010219	b0 01		bcs $01021c			bcs 	EIType
.01021b	60		rts				rts
.01021c					EIType:
.01021c	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>01021f	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010227	78 70 65 63 74 65 64 00
.01022f					EvaluateNextInteger:
.01022f	20 0b 02	jsr $01020b			jsr 	EvaluateNext
.010232	b0 e8		bcs $01021c			bcs 	EIType
.010234	60		rts				rts
.010235					EvaluateString:
.010235	20 08 01	jsr $010108			jsr 	Evaluate
.010238	90 01		bcc $01023b			bcc 	ESType
.01023a	60		rts				rts
.01023b					ESType:
.01023b	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>01023e	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010246	78 70 65 63 74 65 64 00
.01024e					EvaluateNextString:
.01024e	20 0b 02	jsr $01020b			jsr 	EvaluateNext
.010251	90 e8		bcc $01023b			bcc 	ESType
.010253	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010254					VariableAccessExpression:
.010254	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010256	48		pha				pha
.010257	20 95 02	jsr $010295			jsr 	VariableFind 				; try to find the variables
.01025a	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01025c	90 23		bcc $010281			bcc 	_VANError
.01025e	68		pla				pla 								; get and save that first token
.01025f	48		pha				pha
.010260	a8		tay				tay 								; put first token in Y.
.010261	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010264	f0 07		beq $01026d			beq 	_VANNotArray
.010266	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010268	20 0c 03	jsr $01030c			jsr 	VariableSubscript			; index calculation
.01026b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01026d					_VANNotArray:
.01026d	68		pla				pla 								; get the token back.
.01026e	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010271	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010274	38		sec				sec 								; set up return string.
.010275	f0 06		beq $01027d			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010277	18		clc				clc 								; returning a number, read high data word
.010278	a0 02 00	ldy #$0002			ldy 	#2
.01027b	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01027d					_VANLoadLower:
.01027d	a8		tay				tay 								; put A into Y (this is the high byte)
.01027e	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010280	60		rts				rts
.010281					_VANError:
.010281	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010284	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01028c	20 75 6e 6b 6e 6f 77 6e 00
.010295					VariableFind:
.010295	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010297	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01029a	90 5c		bcc $0102f8			bcc 	_VFError
.01029c	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01029f	b0 11		bcs $0102b2			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0102a1	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0102a4	3a		dec a				dec 	a 							; now 0-25
.0102a5	0a		asl a				asl 	a 							; x 4 and clear carry
.0102a6	0a		asl a				asl 	a
.0102a7	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0102aa	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102ac	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102ae	e6 06		inc $06				inc 	DCodePtr
.0102b0	38		sec				sec 								; return with carry set.
.0102b1	60		rts				rts
.0102b2					_VFSlowVariable:
.0102b2	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102b4	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102b7	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102b8	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102b9	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102bc	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102be	85 08		sta $08				sta 	DTemp1
.0102c0	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102c2	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102c5	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102c6	65 08		adc $08				adc 	DTemp1
.0102c8	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102ca	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102cc					_VFNext:
.0102cc	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102ce	f0 26		beq $0102f6			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102d0	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102d2	a8		tay				tay 								; read the address of the name at $0002,y
.0102d3	b9 02 00	lda $0002,y			lda 	$0002,y
.0102d6	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102d8	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102db					_VFCompare:
.0102db	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102dd	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102df	d0 eb		bne $0102cc			bne 	_VFNext 					; if not, go to the next one.
.0102e1	c8		iny				iny 								; advance token pointer
.0102e2	c8		iny				iny
.0102e3	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102e6	d0 f3		bne $0102db			bne 	_VFCompare
.0102e8	98		tya				tya 								; this is the length of the word.
.0102e9	18		clc				clc 								; so we add it to the code pointer
.0102ea	65 06		adc $06				adc 	DCodePtr
.0102ec	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102ee	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102f0	18		clc				clc 								; four on is the actual data
.0102f1	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102f4	38		sec				sec 								; return with CS indicating success
.0102f5	60		rts				rts
.0102f6					_VFFail:
.0102f6	18		clc				clc
.0102f7	60		rts				rts
.0102f8					_VFError:
.0102f8	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0102fb	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010303	76 61 72 69 61 62 6c 65 00
.01030c					VariableSubscript:
.01030c	48		pha				pha		 							; save variable address on stack.
.01030d	20 2f 02	jsr $01022f			jsr		EvaluateNextInteger 		; get the subscript
.010310	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; skip right bracket.
.010313	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010316	d0 10		bne $010328			bne 	_VANSubscript
.010318	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01031a	f0 02		beq $01031e			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01031c	b0 0a		bcs $010328			bcs 	_VANSubscript
.01031e					_VANSubOkay:
.01031e	0a		asl a				asl 	a 							; double lsword
.01031f	0a		asl a				asl 	a 							; and again, also clears carry.
.010320	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010322	68		pla				pla 								; restore DVariablePtr
.010323	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010324	1a		inc a				inc 	a
.010325	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010327	60		rts				rts
.010328					_VANSubscript:
.010328	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>01032b	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010333	79 20 53 75 62 73 63 72 69 70 74 00
.01033f					VariableCreate:
.01033f	48		pha				pha 								; save count.
.010340	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010343	29 00 20	and #$2000			and 	#IDTypeMask
.010346	f0 06		beq $01034e			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010348	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01034b	18		clc				clc
.01034c	65 02		adc $02				adc 	DBaseAddress
.01034e					_VCIsInteger:
.01034e	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010350	68		pla				pla 								; restore count
.010351	48		pha				pha
.010352	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010353	0a		asl a				asl 	a 							; 2 x # items.
.010354	0a		asl a				asl 	a 							; 4 x # items.
.010355					_VCNotSingle:
.010355	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010357	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01035a	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01035d	f0 04		beq $010363			beq 	_VCNotArray
.01035f	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010361	e6 08		inc $08				inc 	DTemp1
.010363					_VCNotArray:
.010363	5a		phy				phy 								; save address of token on stack.
.010364	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010367	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010369	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01036b	18		clc				clc 								; add 4 for link and name.
.01036c	69 04 00	adc #$0004			adc 	#4
.01036f	65 08		adc $08				adc 	DTemp1 						; add memory required
.010371	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010373	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010375					_VCErase:
.010375	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010377	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01037a	c8		iny				iny
.01037b	c8		iny				iny
.01037c	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01037e	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010380	d0 f3		bne $010375			bne 	_VCErase
.010382	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010384	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010386	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010389	68		pla				pla 								; restore the token address
.01038a	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01038d	68		pla				pla 								; restore count and store.
.01038e	99 04 00	sta $0004,y			sta 	$0004,y
.010391					_VCNotArray2:
.010391	98		tya				tya 								; update the head link
.010392	92 20		sta ($20)			sta 	(DHashTablePtr)
.010394	18		clc				clc 								; advance pointer to the data bit.
.010395	69 04 00	adc #$0004			adc 	#4
.010398	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010399					ErrorHandler:
.010399	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01039b	fa		plx				plx 								; address of error message -1
.01039c	e8		inx				inx 								; error message.
.01039d	20 40 04	jsr $010440			jsr 	PrintROMMessage 			; print message in ROM
.0103a0	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0103a2	f0 15		beq $0103b9			beq 	_EHEndMessage
.0103a4	a2 be 03	ldx #$03be			ldx 	#_EHAt & $FFFF 				; print " at "
.0103a7	20 40 04	jsr $010440			jsr 	PrintROMMessage
.0103aa	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103ac	a0 00 00	ldy #$0000			ldy 	#0
.0103af	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103b2	20 a2 09	jsr $0109a2			jsr 	ConvertToString 			; convert and print it.
.0103b5	a8		tay				tay
.0103b6	20 54 04	jsr $010454			jsr 	PrintBASICString
.0103b9					_EHEndMessage:
.0103b9	20 99 0e	jsr $010e99			jsr 	HWNewLine
.0103bc	80 fe		bra $0103bc	_EH1:	bra 	_EH1
>0103be	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103c3					IllegalToken:
.0103c3	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0103c6	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103ce	54 6f 6b 65 6e 00
.0103d4					SyntaxError:
.0103d4	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0103d7	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103df	72 72 6f 72 00
.0103e4					ExpectToken:
.0103e4	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103e6	d0 05		bne $0103ed			bne 	_CTKError					; error if not
.0103e8	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103ea	e6 06		inc $06				inc 	DCodePtr
.0103ec	60		rts				rts
.0103ed					_CTKError:
.0103ed	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0103f0	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103f8	74 6f 6b 65 6e 00
.0103fe					ExpectRightBracket:
.0103fe	48		pha				pha
.0103ff	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.010402	20 e4 03	jsr $0103e4			jsr 	ExpectToken
.010405	68		pla				pla
.010406	60		rts				rts
.010407					ExpectComma:
.010407	48		pha				pha
.010408	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01040b	20 e4 03	jsr $0103e4			jsr 	ExpectToken
.01040e	68		pla				pla
.01040f	60		rts				rts
.010410					CheckBothNumeric:
.010410	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010412	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010414	30 01		bmi $010417			bmi 	_CBNFail 					; need to both be zero in bit 15
.010416	60		rts				rts
.010417					_CBNFail:
.010417	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>01041a	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010422	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010430					ResetTypeInteger:
.010430	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010432	29 ff 7f	and #$7fff			and 	#$7FFF
.010435	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010437	60		rts				rts
.010438					ResetTypeString:
.010438	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01043a	09 00 80	ora #$8000			ora 	#$8000
.01043d	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01043f	60		rts				rts
.010440					PrintROMMessage:
.010440	48		pha				pha
.010441	da		phx				phx
.010442					_PRMLoop:
.010442	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010446	29 ff 00	and #$00ff			and 	#$00FF
.010449	f0 06		beq $010451			beq 	_PRMExit
.01044b	20 77 0e	jsr $010e77			jsr 	HWPrintChar
.01044e	e8		inx				inx
.01044f	80 f1		bra $010442			bra 	_PRMLoop
.010451					_PRMExit:
.010451	fa		plx				plx
.010452	68		pla				pla
.010453	60		rts				rts
.010454					PrintBASICString:
.010454	48		pha				pha
.010455	da		phx				phx
.010456	5a		phy				phy
.010457	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01045a	29 ff 00	and #$00ff			and 	#$00FF
.01045d	f0 0b		beq $01046a			beq 	_PBSExit 					; null string
.01045f	aa		tax				tax
.010460					_PBSLoop:
.010460	c8		iny				iny
.010461	b9 00 00	lda $0000,y			lda 	$0000,y
.010464	20 77 0e	jsr $010e77			jsr 	HWPrintChar
.010467	ca		dex				dex
.010468	d0 f6		bne $010460			bne 	_PBSLoop
.01046a					_PBSExit:
.01046a	7a		ply				ply
.01046b	fa		plx				plx
.01046c	68		pla				pla
.01046d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.01046e					StringTempAllocate:
.01046e	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010471	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010474	18		clc				clc 								; this adds one, for the length.
.010475	65 16		adc $16				adc 	DTempStringPointer
.010477	85 16		sta $16				sta 	DTempStringPointer
.010479	48		pha				pha
.01047a	a9 00 00	lda #$0000			lda 	#$0000
.01047d	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01047f	92 16		sta ($16)			sta		(DTempStringPointer)
.010481	c2 20		rep #$20			rep 	#$20
.010483	68		pla				pla
.010484	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010486	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010488	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01048a	60		rts				rts
.01048b					StringCreateCopy:
.01048b	a8		tay				tay 								; put pointer to string in Y
.01048c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01048f	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010492	f0 17		beq $0104ab			beq 	_SCCExit 					; do nothing if length zero.
.010494	da		phx				phx 								; save X and put the character count in X
.010495	aa		tax				tax
.010496					_SCCCopy:
.010496	c8		iny				iny 								; advance and read (first time skips length)
.010497	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010499	b9 00 00	lda $0000,y			lda 	$0000,y
.01049c	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01049e	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0104a0	1a		inc a				inc 	a
.0104a1	92 18		sta ($18)			sta 	(DStartTempString)
.0104a3	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0104a5	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0104a7	ca		dex				dex 								; do X times
.0104a8	d0 ec		bne $010496			bne 	_SCCCopy
.0104aa	fa		plx				plx
.0104ab					_SCCExit:
.0104ab	60		rts				rts
.0104ac					StringMakeConcrete:
.0104ac	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104af	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104b1	90 0f		bcc $0104c2			bcc 	_SMCExit
.0104b3	85 08		sta $08				sta 	DTemp1 						; source
.0104b5	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104b7	29 ff 00	and #$00ff			and 	#$00FF
.0104ba	d0 07		bne $0104c3			bne 	_SMCNonZero 				; if not "" skip.
.0104bc	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104bf	18		clc				clc
.0104c0	65 02		adc $02				adc 	DBaseAddress
.0104c2					_SMCExit:
.0104c2	60		rts				rts
.0104c3					_SMCNonZero:
.0104c3	48		pha				pha 								; save on stack.
.0104c4	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104c7	18		clc				clc
.0104c8	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104cb	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104cd	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104cf	85 0c		sta $0c				sta 	DTemp2 						; target
.0104d1	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104d2	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104d4					_SMCLoop:
.0104d4	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104d6	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104d8	88		dey				dey
.0104d9	10 f9		bpl $0104d4			bpl 	_SMCLoop
.0104db	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104dd	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104df	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0104e0					Binary_Add:
.0104e0	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104e2	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104e4	30 12		bmi $0104f8		bmi 	_BATypeError
.0104e6	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104e8	30 3f		bmi $010529		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104ea	18		clc			clc
.0104eb	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104ed	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104ef	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104f1	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104f3	75 12		adc $12,x		adc 	EXSValueH+2,x
.0104f5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104f7	60		rts			rts
.0104f8					_BATypeError:
.0104f8	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0104fb	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010503	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010513	65 73 00
.010516					_BALengthError:
.010516	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010519	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010521	6f 6f 20 6c 6f 6e 67 00
.010529					_BAConcatenateString:
.010529	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01052b	85 08		sta $08			sta 	DTemp1
.01052d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01052f	85 0c		sta $0c			sta 	DTemp2
.010531	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010533	18		clc			clc 										; work out the total length
.010534	b2 08		lda ($08)		lda 	(DTemp1)
.010536	72 0c		adc ($0c)		adc 	(DTemp2)
.010538	b0 14		bcs $01054e		bcs 	_BAConcatLengthError 				; string is too long.
.01053a	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01053c	20 6e 04	jsr $01046e		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.01053f	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010541	74 10		stz $10,x		stz 	EXSValueH+0,x
.010543	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010545	20 8b 04	jsr $01048b		jsr 	StringCreateCopy
.010548	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01054a	20 8b 04	jsr $01048b		jsr 	StringCreateCopy
.01054d	60		rts			rts
.01054e					_BAConcatLengthError:
.01054e	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010551	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010559	6f 6f 20 6c 6f 6e 67 00
.010561					Binary_Subtract:
.010561	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.010564	38		sec			sec
.010565	b5 00		lda $00,x		lda		EXSValueL+0,x
.010567	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010569	95 00		sta $00,x		sta 	EXSValueL+0,x
.01056b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01056d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01056f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010571	60		rts			rts
.010572					Binary_ShiftRight:
.010572	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.010575	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010577	29 3f 00	and #$003f		and 	#63
.01057a	f0 07		beq $010583		beq		_Binary_SRExit
.01057c					_Binary_SRLoop:
.01057c	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01057e	76 00		ror $00,x		ror 	EXSValueL+0,x
.010580	3a		dec a			dec 	a
.010581	d0 f9		bne $01057c		bne 	_Binary_SRLoop
.010583					_Binary_SRExit:
.010583	60		rts			rts
.010584					Binary_ShiftLeft:
.010584	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.010587	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010589	29 3f 00	and #$003f		and 	#63
.01058c	f0 07		beq $010595		beq		_Binary_SLExit
.01058e					_Binary_SLLoop:
.01058e	16 00		asl $00,x		asl 	EXSValueL+0,x
.010590	36 10		rol $10,x		rol 	EXSValueH+0,x
.010592	3a		dec a			dec 	a
.010593	d0 f9		bne $01058e		bne 	_Binary_SLLoop
.010595					_Binary_SLExit:
.010595	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010596					Binary_And:
.010596	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.010599	b5 00		lda $00,x		lda		EXSValueL+0,x
.01059b	35 02		and $02,x		and 	EXSValueL+2,x
.01059d	95 00		sta $00,x		sta 	EXSValueL+0,x
.01059f	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105a1	35 12		and $12,x		and 	EXSValueH+2,x
.0105a3	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105a5	60		rts			rts
.0105a6					Binary_Or:
.0105a6	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.0105a9	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105ab	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105ad	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105af	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105b1	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105b3	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105b5	60		rts			rts
.0105b6					Binary_Xor:
.0105b6	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.0105b9	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105bb	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105bd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105bf	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105c1	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105c3	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105c5	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0105c6					Binary_Equals:
.0105c6	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105c9	b0 0e		bcs $0105d9		bcs 	_BEString
.0105cb	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105cd	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105cf	d0 4f		bne $010620		bne 	Compare_Fail
.0105d1	b5 10		lda $10,x		lda 	EXSValueH,x
.0105d3	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105d5	d0 49		bne $010620		bne 	Compare_Fail
.0105d7	80 3f		bra $010618		bra 	Compare_Succeed
.0105d9					_BEString:
.0105d9	09 00 00	ora #$0000		ora 	#$0000
.0105dc	f0 3a		beq $010618		beq 	Compare_Succeed
.0105de	80 40		bra $010620		bra 	Compare_Fail
.0105e0					Binary_NotEquals:
.0105e0	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105e3	b0 0e		bcs $0105f3		bcs 	_BNEString
.0105e5	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105e7	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105e9	d0 2d		bne $010618		bne 	Compare_Succeed
.0105eb	b5 10		lda $10,x		lda 	EXSValueH,x
.0105ed	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105ef	d0 27		bne $010618		bne 	Compare_Succeed
.0105f1	80 2d		bra $010620		bra 	Compare_Fail
.0105f3					_BNEString:
.0105f3	09 00 00	ora #$0000		ora 	#$0000
.0105f6	d0 20		bne $010618		bne 	Compare_Succeed
.0105f8	80 26		bra $010620		bra 	Compare_Fail
.0105fa					Binary_Less:
.0105fa	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105fd	b0 12		bcs $010611		bcs 	_BLString
.0105ff	38		sec			sec
.010600	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010602	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010604	b5 10		lda $10,x		lda 	EXSValueH,x
.010606	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010608	50 03		bvc $01060d		bvc 	*+5
.01060a	49 00 80	eor #$8000		eor 	#$8000
.01060d	30 09		bmi $010618		bmi 	Compare_Succeed
.01060f	80 0f		bra $010620		bra 	Compare_Fail
.010611					_BLString:
.010611	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010614	f0 02		beq $010618		beq 	Compare_Succeed
.010616	80 08		bra $010620		bra 	Compare_Fail
.010618					Compare_Succeed:
.010618	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01061b	95 00		sta $00,x		sta 	EXSValueL,x
.01061d	95 10		sta $10,x		sta 	EXSValueH,x
.01061f	60		rts			rts
.010620					Compare_Fail:
.010620	74 00		stz $00,x		stz 	EXSValueL,x
.010622	74 10		stz $10,x		stz 	EXSValueH,x
.010624	60		rts			rts
.010625					Binary_GreaterEqual:
.010625	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010628	b0 12		bcs $01063c		bcs 	_BGEString
.01062a	38		sec			sec
.01062b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01062d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01062f	b5 10		lda $10,x		lda 	EXSValueH,x
.010631	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010633	50 03		bvc $010638		bvc 	*+5
.010635	49 00 80	eor #$8000		eor 	#$8000
.010638	10 de		bpl $010618		bpl 	Compare_Succeed
.01063a	80 e4		bra $010620		bra 	Compare_Fail
.01063c					_BGEString:
.01063c	09 00 00	ora #$0000		ora 	#$0000
.01063f	10 d7		bpl $010618		bpl 	Compare_Succeed
.010641	80 dd		bra $010620		bra 	Compare_Fail
.010643					Binary_LessEqual:
.010643	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010646	b0 12		bcs $01065a		bcs 	_BLEString
.010648	18		clc			clc 									; numeric <= signed
.010649	b5 00		lda $00,x		lda 	EXSValueL,x
.01064b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01064d	b5 10		lda $10,x		lda 	EXSValueH,x
.01064f	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010651	50 03		bvc $010656		bvc 	*+5
.010653	49 00 80	eor #$8000		eor 	#$8000
.010656	30 c0		bmi $010618		bmi 	Compare_Succeed
.010658	80 c6		bra $010620		bra 	Compare_Fail
.01065a					_BLEString:
.01065a	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01065d	d0 b9		bne $010618		bne 	Compare_Succeed
.01065f	80 bf		bra $010620		bra 	Compare_Fail
.010661					Binary_Greater:
.010661	20 7f 06	jsr $01067f		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010664	b0 12		bcs $010678		bcs 	_BGString
.010666	18		clc			clc 									; numeric > signed
.010667	b5 00		lda $00,x		lda 	EXSValueL,x
.010669	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01066b	b5 10		lda $10,x		lda 	EXSValueH,x
.01066d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01066f	50 03		bvc $010674		bvc 	*+5
.010671	49 00 80	eor #$8000		eor 	#$8000
.010674	10 a2		bpl $010618		bpl 	Compare_Succeed
.010676	80 a8		bra $010620		bra 	Compare_Fail
.010678					_BGString:
.010678	c9 01 00	cmp #$0001		cmp 	#$0001
.01067b	f0 9b		beq $010618		beq 	Compare_Succeed
.01067d	80 a1		bra $010620		bra 	Compare_Fail
.01067f					CompareTypeCheck:
.01067f	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010681	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010683	30 06		bmi $01068b		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010685	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010687	30 1c		bmi $0106a5		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010689	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01068a	60		rts			rts
.01068b					_CTCFail:
.01068b	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>01068e	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010696	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0106a5					_CTCStringCompare:
.0106a5	20 30 04	jsr $010430		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0106a8	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0106aa	85 08		sta $08			sta 	DTemp1
.0106ac	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106ae	85 0c		sta $0c			sta 	DTemp2
.0106b0	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106b3	a8		tay			tay
.0106b4	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106b6	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106b8	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106ba	90 02		bcc $0106be		bcc 	_CTCSmallest
.0106bc	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106be					_CTCSmallest:
.0106be	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106c0					_CTCCompare:
.0106c0	c8		iny			iny 									; look at next character (done first, first char is size)
.0106c1	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106c3	30 16		bmi $0106db		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106c5	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106c7	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106c9	f0 f5		beq $0106c0		beq 	_CTCCompare 					; if zero, try the next character.
.0106cb	b0 07		bcs $0106d4		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106cd					_CTCLess:
.0106cd	c2 20		rep #$20		rep 	#$20
.0106cf	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106d2	80 14		bra $0106e8		bra 	_CTCExit
.0106d4					_CTCGreater:
.0106d4	c2 20		rep #$20		rep 	#$20
.0106d6	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106d9	80 0d		bra $0106e8		bra 	_CTCExit
.0106db					_CTCEqualSoFar:
.0106db	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106dd	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106df	90 ec		bcc $0106cd		bcc 	_CTCLess
.0106e1	d0 f1		bne $0106d4		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106e3	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106e5	a9 00 00	lda #$0000		lda 	#$0000
.0106e8					_CTCExit:
.0106e8	38		sec			sec 									; return with CS indicating string comparison.
.0106e9	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0106ea					Binary_Divide:
.0106ea	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.0106ed	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106ef	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106f1	d0 14		bne $010707		bne 	_BinaryDivide_Ok
.0106f3	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0106f6	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0106fe	20 62 79 20 7a 65 72 6f 00
.010707					_BinaryDivide_Ok:
.010707	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010709	64 0a		stz $0a			stz 	DTemp1+2
.01070b	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01070d	5a		phy			phy 										; save Y (bit counter)
.01070e	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010710	10 07		bpl $010719		bpl 	_BinaryDivide_RightDone
.010712	e8		inx			inx
.010713	e8		inx			inx
.010714	20 4f 07	jsr $01074f		jsr 	Binary_DivNegate
.010717	ca		dex			dex
.010718	ca		dex			dex
.010719					_BinaryDivide_RightDone:
.010719	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01071b	10 03		bpl $010720		bpl 	_BinaryDivide_LeftDone
.01071d	20 4f 07	jsr $01074f		jsr 	Binary_DivNegate
.010720					_BinaryDivide_LeftDone:
.010720	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010723					_BinaryDivide_Loop:
.010723	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010725	36 10		rol $10,x		rol 	EXSValueH+0,x
.010727	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010729	26 0a		rol $0a			rol 	DTemp1+2
.01072b	38		sec			sec											; calculate A-M
.01072c	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01072e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010730	85 0c		sta $0c			sta 	DTemp2
.010732	a5 0a		lda $0a			lda 	DTemp1+2
.010734	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010736	90 08		bcc $010740		bcc 	_Binary_NoSubract 					; if A < M skip this
.010738	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01073a	a5 0c		lda $0c			lda 	DTemp2
.01073c	85 08		sta $08			sta 	DTemp1+0
.01073e	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010740					_Binary_NoSubract:
.010740	88		dey			dey 										; do it 32 times.
.010741	d0 e0		bne $010723		bne 	_BinaryDivide_Loop
.010743					_BinaryDivide_Exit:
.010743	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010745	29 01 00	and #$0001		and 	#1
.010748	f0 03		beq $01074d		beq 	_BinaryDivide_Exit2
.01074a	20 4f 07	jsr $01074f		jsr 	Binary_DivNegate
.01074d					_BinaryDivide_Exit2:
.01074d	7a		ply			ply 										; restore Y
.01074e	60		rts			rts
.01074f					Binary_DivNegate:
.01074f	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010751	38		sec			sec 										; negate the value at stack X.
.010752	a9 00 00	lda #$0000		lda 	#$0000
.010755	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010757	95 00		sta $00,x		sta 	EXSValueL+0,x
.010759	a9 00 00	lda #$0000		lda 	#$0000
.01075c	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01075e	95 10		sta $10,x		sta 	EXSValueH+0,x
.010760	60		rts			rts
.010761					Binary_Modulus:
.010761	20 ea 06	jsr $0106ea		jsr 	Binary_Divide 						; do the divide
.010764	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010766	95 00		sta $00,x		sta 	EXSValueL+0,x
.010768	a5 0a		lda $0a			lda 	DTemp1+2
.01076a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01076c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01076d					Binary_Multiply:
.01076d	20 10 04	jsr $010410		jsr 	CheckBothNumeric 					; check both values are numeric
.010770	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010772	85 08		sta $08			sta 	DTemp1
.010774	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010776	85 0a		sta $0a			sta		DTemp1+2
.010778	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01077a	74 10		stz $10,x		stz 	EXSValueH+0,x
.01077c					_BinaryMultiply_Loop:
.01077c	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01077e	05 0a		ora $0a			ora 	DTemp1+2
.010780	f0 1e		beq $0107a0		beq 	_BinaryMultiply_Exit
.010782	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010784	29 01 00	and #$0001		and 	#1
.010787	f0 0d		beq $010796		beq 	_BinaryMultiply_NoAdd
.010789	18		clc			clc 										; add multiplicand to result.
.01078a	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01078c	75 02		adc $02,x		adc 	EXSValueL+2,x
.01078e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010790	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010792	75 12		adc $12,x		adc 	EXSValueH+2,x
.010794	95 10		sta $10,x		sta 	EXSValueH+0,x
.010796					_BinaryMultiply_NoAdd:
.010796	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010798	66 08		ror $08			ror 	DTemp1
.01079a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01079c	36 12		rol $12,x		rol 	EXSValueH+2,x
.01079e	80 dc		bra $01077c		bra 	_BinaryMultiply_Loop 				; go round again.
.0107a0					_BinaryMultiply_Exit:
.0107a0	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0107a1					Function_Len:
.0107a1	20 30 04	jsr $010430			jsr 	ResetTypeInteger 			; returns an integer
.0107a4	20 4e 02	jsr $01024e			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107a7	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; check )
.0107aa	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107ac	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107af	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107b2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107b4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107b6	60		rts				rts
.0107b7					Function_Abs:
.0107b7	20 30 04	jsr $010430			jsr 	ResetTypeInteger 			; returns an integer
.0107ba	20 2f 02	jsr $01022f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107bd	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; check )
.0107c0	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107c2	30 07		bmi $0107cb			bmi 	_FAbsNegative 				; negate it if negative
.0107c4	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107c6	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107c8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107ca	60		rts				rts
.0107cb					_FAbsNegative:
.0107cb	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107cc	a9 00 00	lda #$0000			lda 	#0
.0107cf	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107d1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107d3	a9 00 00	lda #$0000			lda 	#0
.0107d6	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107d8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107da	60		rts				rts
.0107db					Function_Sgn:
.0107db	20 30 04	jsr $010430			jsr 	ResetTypeInteger 			; returns integer
.0107de	20 2f 02	jsr $01022f			jsr 	EvaluateNextInteger 		; get an integer
.0107e1	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; check )
.0107e4	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107e6	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107e8	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107ea	30 07		bmi $0107f3			bmi 	_FSgnNegative 				; set to -1 if signed
.0107ec	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107ee	f0 02		beq $0107f2			beq 	_FSgnExit
.0107f0	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107f2					_FSgnExit:
.0107f2	60		rts				rts
.0107f3					_FSgnNegative:
.0107f3	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0107f6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107f8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107fa	60		rts				rts
.0107fb					Function_Random:
.0107fb	20 30 04	jsr $010430			jsr 	ResetTypeInteger
.0107fe	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010800	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010802	d0 0a		bne $01080e			bne 	_Rnd_NotZero
.010804	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010807	85 10		sta $10				sta 	DRandom
.010809	a9 ea 00	lda #$00ea			lda 	#$EA
.01080c	85 12		sta $12				sta 	DRandom+2
.01080e					_Rnd_NotZero:
.01080e	20 19 08	jsr $010819			jsr 	_Rnd_Process 				; call randomiser twice
.010811	95 10		sta $10,x			sta 	EXSValueH+0,x
.010813	20 19 08	jsr $010819			jsr 	_Rnd_Process
.010816	95 00		sta $00,x			sta 	EXSValueL+0,x
.010818	60		rts				rts
.010819					_Rnd_Process:
.010819	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01081b	26 12		rol $12				rol 	DRandom+2
.01081d	90 0e		bcc $01082d			bcc 	_Rnd_Exit
.01081f	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010821	49 54 d4	eor #$d454			eor 	#$D454
.010824	85 10		sta $10				sta 	DRandom
.010826	a5 12		lda $12				lda 	DRandom+2
.010828	49 d5 55	eor #$55d5			eor 	#$55D5
.01082b	85 12		sta $12				sta 	DRandom+2
.01082d					_Rnd_Exit:
.01082d	a5 10		lda $10				lda 	DRandom
.01082f	45 12		eor $12				eor 	DRandom+2
.010831	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010832					Function_VAL:
.010832	20 30 04	jsr $010430			jsr 	ResetTypeInteger 			; returns an integer
.010835	20 4e 02	jsr $01024e			jsr 	EvaluateNextString 			; get the value you are absoluting
.010838	48		pha				pha 								; put string address on stack.
.010839	20 49 08	jsr $010849			jsr 	VALGetBase 					; process , base (shared with STR$())
.01083c	7a		ply				ply 								; get string address back
.01083d	da		phx				phx 								; save X on stack
.01083e	aa		tax				tax 								; base in X
.01083f	98		tya				tya 								; address in A
.010840	20 83 08	jsr $010883			jsr 	StringToInteger
.010843	fa		plx				plx 								; restore X
.010844	95 00		sta $00,x			sta 	EXSValueL+0,x
.010846	94 10		sty $10,x			sty 	EXSValueH+0,x
.010848	60		rts				rts
.010849					VALGetBase:
.010849	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.01084b	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.01084e	f0 07		beq $010857			beq 	_VGBAlternate
.010850	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket			; expect ), and return 10.
.010853	a9 0a 00	lda #$000a			lda 	#10
.010856	60		rts				rts
.010857					_VGBAlternate:
.010857	20 07 04	jsr $010407			jsr 	ExpectComma 				; skip comma.
.01085a	20 2f 02	jsr $01022f			jsr 	EvaluateNextInteger 		; get base
.01085d	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010860	d0 0e		bne $010870			bne 	_VGBBadBase
.010862	c9 02 00	cmp #$0002			cmp 	#2
.010865	90 09		bcc $010870			bcc 	_VGBBadBase
.010867	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.01086a	b0 04		bcs $010870			bcs 	_VGBBadBase
.01086c	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; get right bracket and return.
.01086f	60		rts				rts
.010870					_VGBBadBase:
.010870	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010873	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>01087b	65 72 20 42 61 73 65 00
.010883					StringToInteger:
.010883	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010885	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010887	29 ff 00	and #$00ff			and 	#$00FF
.01088a	85 26		sta $26				sta 	DTemp3+2
.01088c	f0 6e		beq $0108fc			beq 	_STIError 					; if length zero it's bad.
.01088e	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010890	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010892	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010894	64 0a		stz $0a				stz 	DTemp1+2
.010896	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010898	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.01089b	48		pha				pha 								; push on stack
.01089c	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.01089f	d0 06		bne $0108a7			bne 	_STILoop
.0108a1	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.0108a3	c6 26		dec $26				dec 	DTemp3+2					; dec count
.0108a5	f0 55		beq $0108fc			beq 	_STIError 					; if only - then error.
.0108a7					_STILoop:
.0108a7	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.0108a9	20 1b 09	jsr $01091b			jsr 	MultiplyTemp1ByA
.0108ac	b2 24		lda ($24)			lda 	(DTemp3)
.0108ae	29 ff 00	and #$00ff			and 	#$00FF
.0108b1	20 0c 09	jsr $01090c			jsr 	ConvertUpperCase
.0108b4	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108b7	90 43		bcc $0108fc			bcc 	_STIError
.0108b9	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108bc	90 0e		bcc $0108cc			bcc 	_STIOkay1
.0108be	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108c1	90 39		bcc $0108fc			bcc 	_STIError
.0108c3	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108c6	b0 34		bcs $0108fc			bcs 	_STIError
.0108c8	18		clc				clc 								; shift to correct range.
.0108c9	69 09 00	adc #$0009			adc 	#9
.0108cc					_STIOkay1:
.0108cc	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108cf	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108d1	b0 29		bcs $0108fc			bcs 	_STIError
.0108d3	18		clc				clc 								; add A to DTemp1
.0108d4	65 08		adc $08				adc 	DTemp1
.0108d6	85 08		sta $08				sta 	DTemp1
.0108d8	90 02		bcc $0108dc			bcc 	_STINoCarry
.0108da	e6 0a		inc $0a				inc 	DTemp1+2
.0108dc					_STINoCarry:
.0108dc	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108de	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108e0	d0 c5		bne $0108a7			bne 	_STILoop 					; loop back.
.0108e2	68		pla				pla 								; get optional minus bac
.0108e3	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108e6	d0 0f		bne $0108f7			bne 	_STINotNegative 			; handle the negative character
.0108e8	38		sec				sec 								; negate DTemp1
.0108e9	a9 00 00	lda #$0000			lda 	#0
.0108ec	e5 08		sbc $08				sbc 	DTemp1
.0108ee	85 08		sta $08				sta 	DTemp1
.0108f0	a9 00 00	lda #$0000			lda 	#0
.0108f3	e5 0a		sbc $0a				sbc 	DTemp1+2
.0108f5	85 0a		sta $0a				sta 	DTemp1+2
.0108f7					_STINotNegative:
.0108f7	a5 08		lda $08				lda 	DTemp1 						; get the result
.0108f9	a4 0a		ldy $0a				ldy 	DTemp1+2
.0108fb	60		rts				rts
.0108fc					_STIError:
.0108fc	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>0108ff	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010907	74 61 6e 74 00
.01090c					ConvertUpperCase:
.01090c	c9 61 00	cmp #$0061			cmp 	#'a'
.01090f	90 09		bcc $01091a			bcc 	_CUCExit
.010911	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010914	b0 04		bcs $01091a			bcs 	_CUCExit
.010916	38		sec				sec
.010917	e9 20 00	sbc #$0020			sbc 	#32
.01091a					_CUCExit:
.01091a	60		rts				rts
.01091b					MultiplyTemp1ByA:
.01091b	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.01091e	f0 56		beq $010976			beq 	_MT1_16
.010920	c9 0a 00	cmp #$000a			cmp 	#10
.010923	f0 33		beq $010958			beq 	_MT1_10
.010925	c9 08 00	cmp #$0008			cmp 	#8
.010928	f0 50		beq $01097a			beq 	_MT1_8
.01092a	c9 02 00	cmp #$0002			cmp 	#2
.01092d	f0 53		beq $010982			beq 	_MT1_2
.01092f					_MTGeneral:
.01092f	da		phx				phx
.010930	aa		tax				tax 								; multiplier in X
.010931	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010933	85 0c		sta $0c				sta 	DTemp2
.010935	a5 0a		lda $0a				lda 	DTemp1+2
.010937	85 0e		sta $0e				sta 	DTemp2+2
.010939	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.01093b	64 0a		stz $0a				stz 	DTemp1+2
.01093d					_MTLoop:
.01093d	8a		txa				txa 								; shift X right into C
.01093e	4a		lsr a				lsr 	a
.01093f	aa		tax				tax
.010940	90 0d		bcc $01094f			bcc 	_MTNoAdd
.010942	18		clc				clc
.010943	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010945	65 0c		adc $0c				adc 	DTemp2
.010947	85 08		sta $08				sta 	DTemp1
.010949	a5 0a		lda $0a				lda 	DTemp1+2
.01094b	65 0e		adc $0e				adc 	DTemp2+2
.01094d	85 0a		sta $0a				sta 	DTemp1+2
.01094f					_MTNoAdd:
.01094f	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010951	26 0e		rol $0e				rol 	DTemp2+2
.010953	8a		txa				txa 								; until multiplier is zero.
.010954	d0 e7		bne $01093d			bne 	_MTLoop
.010956					_MTGExit:
.010956	fa		plx				plx 								; restore X
.010957	60		rts				rts 								; and exit
.010958					_MT1_10:
.010958	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.01095a	48		pha				pha
.01095b	a5 08		lda $08				lda 	DTemp1
.01095d	48		pha				pha
.01095e	06 08		asl $08				asl 	DTemp1						; x 4
.010960	26 0a		rol $0a				rol 	DTemp1+2
.010962	06 08		asl $08				asl 	DTemp1
.010964	26 0a		rol $0a				rol 	DTemp1+2
.010966	68		pla				pla 								; add saved value, x 5
.010967	18		clc				clc
.010968	65 08		adc $08				adc 	DTemp1
.01096a	85 08		sta $08				sta 	DTemp1
.01096c	68		pla				pla
.01096d	65 0a		adc $0a				adc 	DTemp1+2
.01096f	85 0a		sta $0a				sta 	DTemp1+2
.010971	06 08		asl $08				asl 	DTemp1
.010973	26 0a		rol $0a				rol 	DTemp1+2
.010975	60		rts				rts
.010976					_MT1_16:
.010976	06 08		asl $08				asl 	DTemp1
.010978	26 0a		rol $0a				rol 	DTemp1+2
.01097a					_MT1_8:
.01097a	06 08		asl $08				asl 	DTemp1
.01097c	26 0a		rol $0a				rol 	DTemp1+2
.01097e					_MT1_4:
.01097e	06 08		asl $08				asl 	DTemp1
.010980	26 0a		rol $0a				rol 	DTemp1+2
.010982					_MT1_2
.010982	06 08		asl $08				asl 	DTemp1
.010984	26 0a		rol $0a				rol 	DTemp1+2
.010986	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010987					Function_Str:
.010987	20 38 04	jsr $010438			jsr 	ResetTypeString 			; returns a string.
.01098a	20 2f 02	jsr $01022f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01098d	48		pha				pha 								; save YA on the stack
.01098e	5a		phy				phy
.01098f	20 49 08	jsr $010849			jsr 	VALGetBase 					; process , base (shared with STR$())
.010992	85 14		sta $14				sta 	DSignCount
.010994	7a		ply				ply 								; YA is the number
.010995	68		pla				pla
.010996	da		phx				phx
.010997	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010999	20 a2 09	jsr $0109a2			jsr 	ConvertToString 			; convert it to a string.
.01099c	fa		plx				plx 								; restore X
.01099d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01099f	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109a1	60		rts				rts
.0109a2					ConvertToString:
.0109a2	da		phx				phx 								; save X
.0109a3	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0109a5	84 26		sty $26				sty 	DTemp3+2
.0109a7	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0109a9	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109ac	20 6e 04	jsr $01046e			jsr 	StringTempAllocate 			; allocate space for return string.
.0109af	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109b1	10 15		bpl $0109c8			bpl 	_CTSNotNegative
.0109b3	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109b6	20 30 0a	jsr $010a30			jsr 	CTSOutputA
.0109b9	38		sec				sec 								; negate DTemp3
.0109ba	a9 00 00	lda #$0000			lda 	#0
.0109bd	e5 24		sbc $24				sbc 	DTemp3
.0109bf	85 24		sta $24				sta 	DTemp3
.0109c1	a9 00 00	lda #$0000			lda 	#0
.0109c4	e5 26		sbc $26				sbc 	DTemp3+2
.0109c6	85 26		sta $26				sta 	DTemp3+2
.0109c8					_CTSNotNegative:
.0109c8	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109cb	48		pha				pha
.0109cc	a9 00 00	lda #$0000			lda 	#0
.0109cf	48		pha				pha
.0109d0	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109d2	85 08		sta $08				sta 	DTemp1
.0109d4	64 0a		stz $0a				stz 	DTemp1+2
.0109d6					_CTSMultiplySubtractor:
.0109d6	38		sec				sec
.0109d7	a5 24		lda $24				lda 	DTemp3
.0109d9	e5 08		sbc $08				sbc 	DTemp1
.0109db	a5 26		lda $26				lda 	DTemp3+2
.0109dd	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109df	90 0d		bcc $0109ee			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109e1	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109e3	48		pha				pha
.0109e4	a5 0a		lda $0a				lda 	DTemp1+2
.0109e6	48		pha				pha
.0109e7	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109e9	20 1b 09	jsr $01091b			jsr 	MultiplyTemp1ByA
.0109ec	80 e8		bra $0109d6			bra 	_CTSMultiplySubtractor
.0109ee					_CTSScaledUp:
.0109ee	7a		ply				ply 								; YA contains the previous divider.
.0109ef	68		pla				pla
.0109f0	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109f3	d0 05		bne $0109fa			bne 	_CTSHasDigit
.0109f5	c9 01 00	cmp #$0001			cmp 	#1 							;
.0109f8	f0 20		beq $010a1a			beq 	_CTSExit
.0109fa					_CTSHasDigit:
.0109fa	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0109fc	84 0e		sty $0e				sty 	DTemp2+2
.0109fe	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010a01					_CTSSubLoop:
.010a01	38		sec				sec 								; subtract subtractor from number
.010a02	a5 24		lda $24				lda 	DTemp3
.010a04	e5 0c		sbc $0c				sbc 	DTemp2
.010a06	a8		tay				tay 								; intermediate in Y
.010a07	a5 26		lda $26				lda 	DTemp3+2
.010a09	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a0b	90 07		bcc $010a14			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a0d	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a0f	84 24		sty $24				sty 	DTemp3
.010a11	e8		inx				inx 								; one more subtraction
.010a12	80 ed		bra $010a01			bra 	_CTSSubLoop 				; try it again.
.010a14					_CTSFinishedSubtracting:
.010a14	8a		txa				txa 								; convert to ASCII.
.010a15	20 23 0a	jsr $010a23			jsr 	CTSOutputHexDigit 			; write that out.
.010a18	80 d4		bra $0109ee			bra 	_CTSScaledUp
.010a1a					_CTSExit:
.010a1a	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a1c	20 23 0a	jsr $010a23			jsr 	CTSOutputHexDigit
.010a1f	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a21	fa		plx				plx 								; restore X.
.010a22	60		rts				rts
.010a23					CTSOutputHexDigit:
.010a23	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a26	90 04		bcc $010a2c			bcc 	_CTSNotLetter
.010a28	18		clc				clc
.010a29	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a2c					_CTSNotLetter:
.010a2c	18		clc				clc
.010a2d	69 30 00	adc #$0030			adc 	#48
.010a30					CTSOutputA:
.010a30	5a		phy				phy 								; save Y, set Y to current pointer
.010a31	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a33	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a36	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a38	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a3a	1a		inc a				inc 	a
.010a3b	92 18		sta ($18)			sta 	(DStartTempString)
.010a3d	c2 20		rep #$20			rep 	#$20
.010a3f	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a41	7a		ply				ply 								; restore Y and exit.
.010a42	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a43					Function_Let:
.010a43	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a45	48		pha				pha
.010a46	20 95 02	jsr $010295			jsr 	VariableFind 				; find the variable
.010a49	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a4b	b0 1c		bcs $010a69			bcs 	_FLetFound 					; skip if found.
.010a4d	68		pla				pla 								; get and push the first token again.
.010a4e	48		pha				pha
.010a4f	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a52	d0 57		bne $010aab			bne 	_FLError					; arrays, so this causes an error.
.010a54	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a56	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a59	20 3f 03	jsr $01033f			jsr 	VariableCreate 				; create it.
.010a5c	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a5e					_FLSkipToken:
.010a5e	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a60	e6 06		inc $06				inc 	DCodePtr
.010a62	e6 06		inc $06				inc 	DCodePtr
.010a64	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a67	d0 f5		bne $010a5e			bne 	_FLSkipToken
.010a69					_FLetFound:
.010a69	68		pla				pla 								; get and save the first token.
.010a6a	48		pha				pha
.010a6b	a8		tay				tay 								; put it in Y
.010a6c	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a6f	f0 07		beq $010a78			beq 	_FLetNotArray
.010a71	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a73	20 0c 03	jsr $01030c			jsr 	VariableSubscript			; index calculation
.010a76	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a78					_FLetNotArray:
.010a78	7a		ply				ply 								; get the first token into Y
.010a79	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a7b	48		pha				pha
.010a7c	5a		phy				phy 								; save the first token on the stack.
.010a7d	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a80	20 e4 03	jsr $0103e4			jsr 	ExpectToken
.010a83	68		pla				pla 								; restore the first token.
.010a84	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a87	d0 0f		bne $010a98			bne 	_FLetString 				; skip if string.
.010a89	20 16 02	jsr $010216			jsr 	EvaluateInteger 			; get an integer
.010a8c	7a		ply				ply 								; get address in Y
.010a8d	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a8f	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a92	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a94	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a97	60		rts				rts
.010a98					_FLetString:
.010a98	20 35 02	jsr $010235			jsr 	EvaluateString 				; get a string.
.010a9b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a9d	20 ac 04	jsr $0104ac			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010aa0	7a		ply				ply 								; get address
.010aa1	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010aa4	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010aa7	99 02 00	sta $0002,y			sta 	$0002,y
.010aaa	60		rts				rts
.010aab					_FLError:
.010aab	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010aae	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010ab6	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010abe					Function_PRINT:
.010abe	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010ac0	f0 33		beq $010af5			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010ac2	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010ac5	f0 2e		beq $010af5			beq 	_FPRExitCR
.010ac7	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010aca	f0 23		beq $010aef			beq 	_FPRSkipLoop
.010acc	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010acf	f0 1b		beq $010aec			beq 	_FPRNewLine
.010ad1	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010ad4	f0 11		beq $010ae7			beq 	_FPRTab
.010ad6					_FPRExpression:
.010ad6	20 08 01	jsr $010108			jsr 	Evaluate 					; evaluate a string or integer.
.010ad9	b0 06		bcs $010ae1			bcs 	_FPRHaveString
.010adb	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ade	20 a2 09	jsr $0109a2			jsr 	ConvertToString
.010ae1					_FPRHaveString:
.010ae1	a8		tay				tay 								; print the basic String.
.010ae2	20 54 04	jsr $010454			jsr 	PrintBASICString
.010ae5	80 d7		bra $010abe			bra 	Function_Print 				; and go round again.
.010ae7					_FPRTab:
.010ae7	20 ac 0e	jsr $010eac			jsr 	HWTab
.010aea	80 03		bra $010aef			bra 	_FPRSkipLoop
.010aec					_FPRNewLine:
.010aec	20 99 0e	jsr $010e99			jsr 	HWNewLine
.010aef					_FPRSkipLoop:
.010aef	e6 06		inc $06				inc 	DCodePtr
.010af1	e6 06		inc $06				inc 	DCodePtr
.010af3	80 c9		bra $010abe			bra 	Function_Print
.010af5					_FPRExitCR:
.010af5	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010af7	88		dey				dey
.010af8	88		dey				dey
.010af9	b9 00 00	lda $0000,y			lda 	$0000,y
.010afc	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010aff	f0 08		beq $010b09			beq 	_FPRExit
.010b01	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010b04	f0 03		beq $010b09			beq 	_FPRExit
.010b06	20 99 0e	jsr $010e99			jsr 	HWNewLine 					; print a new line.
.010b09					_FPRExit:
.010b09	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010b0a					Function_ONGOTO:
.010b0a	20 16 02	jsr $010216			jsr 	EvaluateInteger 			; on what GOTO :)
.010b0d	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010b10	d0 25		bne $010b37			bne 	_FOGoFail
.010b12	c9 00 00	cmp #$0000			cmp 	#0
.010b15	f0 20		beq $010b37			beq 	_FOGoFail 					; we start with index = 1
.010b17	48		pha				pha 								; save count.
.010b18	a9 28 3e	lda #$3e28			lda 	#gotoTokenID 				; expect GOTO
.010b1b	20 e4 03	jsr $0103e4			jsr 	ExpectToken
.010b1e	fa		plx				plx 								; put count in X.
.010b1f					_FOGoLoop:
.010b1f	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010b21	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b24	90 73		bcc $010b99			bcc 	FGOFail
.010b26	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b29	b0 6e		bcs $010b99			bcs 	FGOFail
.010b2b	ca		dex				dex 								; subtract one, if done, call GOTO code
.010b2c	f0 1f		beq $010b4d			beq 	Function_GOTO
.010b2e	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010b30	e6 06		inc $06				inc 	DCodePtr
.010b32	20 07 04	jsr $010407			jsr 	ExpectComma 				; expect a comma
.010b35	80 e8		bra $010b1f			bra 	_FOGoLoop 					; and loop round.
.010b37					_FOGoFail:
.010b37	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010b3a	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010b42	47 6f 74 6f 20 76 61 6c 75 65 00
.010b4d					Function_GOTO:
.010b4d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010b4f	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b52	90 45		bcc $010b99			bcc 	FGOFail
.010b54	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b57	b0 40		bcs $010b99			bcs 	FGOFail
.010b59	38		sec				sec 								; convert to 0-32767
.010b5a	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010b5d	aa		tax				tax
.010b5e	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010b61	18		clc				clc
.010b62	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010b64	a8		tay				tay
.010b65					_FGOSearch:
.010b65	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010b68	f0 18		beq $010b82			beq 	_FGOUnknown
.010b6a	8a		txa				txa 								; does it match line number.
.010b6b	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010b6e	f0 08		beq $010b78			beq 	_FGOFound 					; yes, then found.
.010b70	98		tya				tya 								; no follow the link
.010b71	18		clc				clc
.010b72	79 00 00	adc $0000,y			adc 	$0000,y
.010b75	a8		tay				tay
.010b76	80 ed		bra $010b65			bra 	_FGOSearch
.010b78					_FGOFound:
.010b78	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010b7a	98		tya				tya 								; Y + 4 is the code pointer.
.010b7b	18		clc				clc
.010b7c	69 04 00	adc #$0004			adc 	#4
.010b7f	85 06		sta $06				sta 	DCodePtr
.010b81	60		rts				rts									; and continue
.010b82					_FGOUnknown:
.010b82	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010b85	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010b8d	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010b99					FGOFail:
.010b99	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010b9c	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010ba4	20 4e 75 6d 62 65 72 00
.010bac					Function_GOSUB:
.010bac	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010bae	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010bb0	18		clc				clc
.010bb1	69 02 00	adc #$0002			adc 	#2
.010bb4	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010bb6	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010bb8	95 04		sta $04,x			sta 	$04,x
.010bba	a9 29 3e	lda #$3e29			lda 	#gosubTokenID 				; save gosub token at +6
.010bbd	95 06		sta $06,x			sta 	$06,x
.010bbf	8a		txa				txa 								; advance stack by 6.
.010bc0	18		clc				clc
.010bc1	69 06 00	adc #$0006			adc 	#6
.010bc4	85 2a		sta $2a				sta 	DStack
.010bc6	80 85		bra $010b4d			bra 	Function_GOTO 				; and do a GOTO.
.010bc8					Function_RETURN:
.010bc8	a6 2a		ldx $2a				ldx 	DStack
.010bca	b5 00		lda $00,x			lda 	$00,x
.010bcc	c9 29 3e	cmp #$3e29			cmp 	#gosubTokenID 				; check top token.
.010bcf	d0 11		bne $010be2			bne 	_FRetFail
.010bd1	8a		txa				txa 								; unpick stack.
.010bd2	38		sec				sec
.010bd3	e9 06 00	sbc #$0006			sbc 	#6
.010bd6	85 2a		sta $2a				sta 	DStack
.010bd8	aa		tax				tax
.010bd9	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010bdb	85 06		sta $06				sta 	DCodePtr
.010bdd	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010bdf	85 22		sta $22				sta 	DLineNumber
.010be1	60		rts				rts
.010be2					_FRetFail:
.010be2	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010be5	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010bed	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.010bfa					Function_REPEAT:
.010bfa	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010bfc	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010bfe	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010c00	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010c02	95 04		sta $04,x			sta 	$04,x
.010c04	a9 2c 3c	lda #$3c2c			lda 	#repeatTokenID 				; save repeat token at +6
.010c07	95 06		sta $06,x			sta 	$06,x
.010c09	8a		txa				txa 								; advance stack by 6.
.010c0a	18		clc				clc
.010c0b	69 06 00	adc #$0006			adc 	#6
.010c0e	85 2a		sta $2a				sta 	DStack
.010c10	60		rts				rts
.010c11					Function_UNTIL:
.010c11	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010c13	b5 00		lda $00,x			lda 	$00,x
.010c15	c9 2c 3c	cmp #$3c2c			cmp 	#repeatTokenID
.010c18	d0 26		bne $010c40			bne 	_FUNFail
.010c1a	20 16 02	jsr $010216			jsr 	EvaluateInteger 			; .... until what.
.010c1d	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010c20	d0 15		bne $010c37			bne 	_FUNExit
.010c22	c9 00 00	cmp #$0000			cmp 	#0
.010c25	d0 10		bne $010c37			bne 	_FUNExit
.010c27	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010c29	38		sec				sec
.010c2a	e9 06 00	sbc #$0006			sbc 	#6
.010c2d	aa		tax				tax
.010c2e	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010c30	85 06		sta $06				sta 	DCodePtr
.010c32	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010c34	85 22		sta $22				sta 	DLineNumber
.010c36	60		rts				rts
.010c37					_FUNExit:
.010c37	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010c39	38		sec				sec
.010c3a	e9 06 00	sbc #$0006			sbc 	#6
.010c3d	85 2a		sta $2a				sta 	DStack
.010c3f	60		rts				rts
.010c40					_FUNFail:
.010c40	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010c43	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010c4b	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010c58					Function_END:
.010c58	02 00		cop #$00			cop 	#0
.010c5a					Function_RUN:
.010c5a	20 b2 0c	jsr $010cb2			jsr 	Function_CLEAR 				; clear all variables.
.010c5d	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010c5f	18		clc				clc
.010c60	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010c63					_FRun_NextLineNumber:
.010c63	a8		tay				tay 								; put in Y
.010c64	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010c67	f0 ef		beq $010c58			beq 	Function_END 				; if zero, off the end of the program
.010c69	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010c6c	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010c6e	98		tya				tya 								; get address back
.010c6f	18		clc				clc 								; skip over the link/line number
.010c70	69 04 00	adc #$0004			adc 	#4
.010c73	85 06		sta $06				sta 	DCodePtr
.010c75					_FRun_NextInstruction:
.010c75	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010c78	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010c7a	38		sec				sec
.010c7b	e9 00 01	sbc #$0100			sbc 	#256
.010c7e	85 16		sta $16				sta 	DTempStringPointer
.010c80	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010c82	f0 28		beq $010cac			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010c84	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010c87	f0 18		beq $010ca1			beq 	_FRun_Colon
.010c89	a8		tay				tay 								; save in Y
.010c8a	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010c8d	c9 00 20	cmp #$2000			cmp 	#$2000
.010c90	d0 15		bne $010ca7			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010c92	98		tya				tya 								; get token back
.010c93	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010c96	0a		asl a				asl 	a 							; double it into X
.010c97	aa		tax				tax
.010c98	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c9a	e6 06		inc $06				inc 	DCodePtr
.010c9c	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010c9f	80 d4		bra $010c75			bra 	_FRun_NextInstruction 		; do the following instruction.
.010ca1					_FRun_Colon:
.010ca1	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010ca3	e6 06		inc $06				inc 	DCodePtr
.010ca5	80 ce		bra $010c75			bra 	_FRun_NextInstruction 		; do the following instruction.
.010ca7					_FRun_TryLET:
.010ca7	20 43 0a	jsr $010a43			jsr 	Function_LET 				; try as a LET.
.010caa	80 c9		bra $010c75			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010cac					_FRun_EndInstruction:
.010cac	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010cae	1a		inc a				inc 	a 							; go to link for next line
.010caf	1a		inc a				inc 	a
.010cb0	80 b1		bra $010c63			bra 	_FRun_NextLineNumber
.010cb2					Function_CLEAR:
.010cb2	20 be 0c	jsr $010cbe			jsr 	ClearVariablesPointersAndStacks
.010cb5	60		rts				rts
.010cb6					Function_STOP:
.010cb6	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010cb9	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010cbe					ClearVariablesPointersAndStacks:
.010cbe	a9 80 00	lda #$0080			lda 	#BASStack
.010cc1	85 2a		sta $2a				sta 	DStack
.010cc3	64 80		stz $80				stz 	BASStack
.010cc5	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010cc8	a9 00 00	lda #$0000			lda 	#$0000
.010ccb	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ccd	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010ccf	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010cd2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010cd4	20 fb 0c	jsr $010cfb			jsr 	FindCodeEnd 				; find where the program ends.
.010cd7	a8		tay				tay 								; Y points to it.
.010cd8	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010cdb	99 02 00	sta $0002,y			sta 	$0002,y
.010cde	99 04 00	sta $0004,y			sta 	$0004,y
.010ce1	98		tya				tya 								; start of working memory up
.010ce2	18		clc				clc
.010ce3	69 06 00	adc #$0006			adc 	#6
.010ce6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010ce9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ceb	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010cee					_FCLoop:
.010cee	a9 00 00	lda #$0000			lda 	#$0000
.010cf1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010cf3	c8		iny				iny
.010cf4	c8		iny				iny
.010cf5	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010cf8	d0 f4		bne $010cee			bne 	_FCLoop
.010cfa	60		rts				rts
.010cfb					FindCodeEnd:
.010cfb	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010cfe	18		clc				clc
.010cff	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010d01	a8		tay				tay
.010d02					_FCELoop:
.010d02	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010d05	f0 08		beq $010d0f			beq 	_FCEExit
.010d07	98		tya				tya 								; add offset
.010d08	18		clc				clc
.010d09	79 00 00	adc $0000,y			adc 	$0000,y
.010d0c	a8		tay				tay
.010d0d	80 f3		bra $010d02			bra 	_FCELoop
.010d0f					_FCEExit:
.010d0f	98		tya				tya 								; return in A
.010d10	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010d11					Function_Dim:
.010d11	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010d13	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010d16	f0 3b		beq $010d53			beq		_FDIMNotArray 				; no, error.
.010d18	20 95 02	jsr $010295			jsr 	VariableFind 				; try to find it.
.010d1b	b0 41		bcs $010d5e			bcs 	_FDIMExists 				; if it does, that's an error.
.010d1d	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010d1f	48		pha				pha
.010d20	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010d22	48		pha				pha
.010d23					_FDIMSkip:
.010d23	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010d25	e6 06		inc $06				inc 	DCodePtr
.010d27	e6 06		inc $06				inc 	DCodePtr
.010d29	29 00 08	and #$0800			and 	#IDContMask
.010d2c	d0 f5		bne $010d23			bne 	_FDIMSkip
.010d2e	20 16 02	jsr $010216			jsr 	EvaluateInteger 			; evaluate the size
.010d31	20 fe 03	jsr $0103fe			jsr 	ExpectRightBracket 			; check the ) following.
.010d34	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010d37	d0 3b		bne $010d74			bne 	_FDIMSize
.010d39	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010d3c	f0 36		beq $010d74			beq 	_FDIMSize
.010d3e	7a		ply				ply 								; restore HashTablePtr
.010d3f	84 20		sty $20				sty 	DHashTablePtr
.010d41	7a		ply				ply 								; so now A is the high index, Y points to the token
.010d42	20 3f 03	jsr $01033f			jsr 	VariableCreate 				; create the variable.
.010d45	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010d47	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010d4a	d0 06		bne $010d52			bne 	_FDIMExit
.010d4c	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010d4e	e6 06		inc $06				inc 	DCodePtr
.010d50	80 bf		bra $010d11			bra 	Function_DIM 				; and do another
.010d52					_FDIMExit:
.010d52	60		rts				rts
.010d53					_FDIMNotArray:
.010d53	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010d56	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010d5e					_FDIMExists:
.010d5e	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010d61	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010d69	65 64 69 6d 65 6e 73 69 6f 6e 00
.010d74					_FDIMSize:
.010d74	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010d77	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010d7f	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010d85					Function_COLLECT:
.010d85	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010d87	85 0c		sta $0c				sta 	DTemp2
.010d89	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010d8c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010d8e	85 0e		sta $0e				sta 	DTemp2+2
.010d90	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010d92	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010d94					_FCNextPass:
.010d94	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010d96	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010d98	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010d9a	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010d9d	18		clc				clc
.010d9e	65 02		adc $02				adc 	DBaseAddress
.010da0	a8		tay				tay 								; put in Y
.010da1	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010da4					_FCO1:
.010da4	20 ca 0d	jsr $010dca			jsr  	COLLECTScanVariable 		; scan that one.
.010da7	c8		iny				iny 	 							; go to next pointer
.010da8	c8		iny				iny
.010da9	ca		dex				dex
.010daa	d0 f8		bne $010da4			bne 	_FCO1 						; until done all 16.
.010dac	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010daf					_FCO2:
.010daf	20 de 0d	jsr $010dde			jsr  	COLLECTScanArray 			; scan that one.
.010db2	c8		iny				iny 	 							; go to next pointer
.010db3	c8		iny				iny
.010db4	ca		dex				dex
.010db5	d0 f8		bne $010daf			bne 	_FCO2 						; until done all 16.
.010db7	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010db9	f0 0e		beq $010dc9			beq		_FCExit 					; if finished then exit.
.010dbb	48		pha				pha 								; save the target address
.010dbc	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010dbe	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010dc0	20 ac 04	jsr $0104ac			jsr 	StringMakeConcrete 			; make the string concrete.
.010dc3	7a		ply				ply 								; restore the string.
.010dc4	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010dc7	80 cb		bra $010d94			bra		_FCNextPass
.010dc9					_FCExit:
.010dc9	60		rts				rts
.010dca					COLLECTScanVariable:
.010dca	da		phx				phx 								; save XY
.010dcb	5a		phy				phy
.010dcc					_CSVLoop:
.010dcc	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010dcf	f0 0a		beq $010ddb			beq 	_CSVExit
.010dd1	a8		tay				tay 								; put new address into Y
.010dd2	18		clc				clc 								; which is four on.
.010dd3	69 04 00	adc #$0004			adc 	#4
.010dd6	20 ff 0d	jsr $010dff			jsr 	COLLECTCheck
.010dd9	80 f1		bra $010dcc			bra 	_CSVLoop
.010ddb					_CSVExit:
.010ddb	7a		ply				ply
.010ddc	fa		plx				plx
.010ddd	60		rts				rts
.010dde					COLLECTScanArray:
.010dde	da		phx				phx 								; save XY
.010ddf	5a		phy				phy
.010de0					_CSALoop:
.010de0	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010de3	f0 17		beq $010dfc			beq 	_CSAExit
.010de5	a8		tay				tay 								; put new address in Y
.010de6	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010de9	aa		tax				tax
.010dea	e8		inx				inx									; +1 as one more data element.
.010deb	98		tya				tya 								; point A to first element, at +6
.010dec	18		clc				clc
.010ded	69 06 00	adc #$0006			adc 	#6
.010df0					_CSADoAllStrings:
.010df0	20 ff 0d	jsr $010dff			jsr 	COLLECTCheck 				; collect check the first.
.010df3	1a		inc a				inc 	a 							; advance the pointer.
.010df4	1a		inc a				inc 	a
.010df5	1a		inc a				inc 	a
.010df6	1a		inc a				inc 	a
.010df7	ca		dex				dex
.010df8	d0 f6		bne $010df0			bne 	_CSADoAllStrings 			; until all strings are done.
.010dfa	80 e4		bra $010de0			bra 	_CSALoop
.010dfc					_CSAExit:
.010dfc	7a		ply				ply
.010dfd	fa		plx				plx
.010dfe	60		rts				rts
.010dff					COLLECTCheck:
.010dff	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010e01	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010e03	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010e05	90 0a		bcc $010e11			bcc 	_COCExit
.010e07	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010e09	b0 06		bcs $010e11			bcs 	_COCExit
.010e0b	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010e0d	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010e0f	85 14		sta $14				sta 	DSignCount
.010e11					_COCExit:
.010e11	a5 0a		lda $0a				lda 	DTemp1+2
.010e13	60		rts				rts
.010e14	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010e15					Function_ASSERT:
.010e15	20 16 02	jsr $010216			jsr 	EvaluateInteger 			; something that returns an integer.
.010e18	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010e1a	05 08		ora $08				ora 	Dtemp1
.010e1c	f0 01		beq $010e1f			beq 	_FAssFail
.010e1e	60		rts				rts
.010e1f					_FAssFail:
.010e1f	20 99 03	jsr $010399			jsr 	ErrorHandler 						; call error routine
>010e22	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010e2a	61 69 6c 65 64 00
.010e30					Function_CLS:
.010e30	20 5c 0e	jsr $010e5c			jsr 	HWClearScreen
.010e33	60		rts				rts
.010e34					Function_REM:
.010e34	ea		nop				nop
.010e35	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.010e37	f0 0b		beq $010e44			beq 	_FRemSyntax 				; if 0, syntax error
.010e39	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.010e3c	b0 06		bcs $010e44			bcs 	_FRemSyntax
.010e3e	18		clc				clc 								; add to DCodePtr
.010e3f	65 06		adc $06				adc 	DCodePtr
.010e41	85 06		sta $06				sta 	DCodePtr
.010e43	60		rts				rts
.010e44					_FRemSyntax:
.010e44	82 8d f5	brl $0103d4			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010e47					SwitchBasicInstance:
.010e47	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010e49	20 5c 0e	jsr $010e5c			jsr 	HWClearScreen 						; clear screen
.010e4c	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010e4f	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010e51	86 02		stx $02				stx		DBaseAddress
.010e53	84 04		sty $04				sty 	DHighAddress
.010e55	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010e56	48		pha				pha 										; then copy it into B.
.010e57	ab		plb				plb
.010e58	ab		plb				plb
.010e59	4c 5a 0c	jmp $010c5a			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.010e5c					HWClearScreen:
.010e5c	48		pha				pha
.010e5d	da		phx				phx
.010e5e	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.010e61	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010e64	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e68	ca		dex				dex
.010e69	10 f6		bpl $010e61			bpl 	_CS0
.010e6b	64 28		stz $28				stz 	DCursor
.010e6d	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010e70	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010e74	fa		plx				plx
.010e75	68		pla				pla
.010e76	60		rts				rts
.010e77					HWPrintChar:
.010e77	48		pha				pha
.010e78	da		phx				phx
.010e79	a6 28		ldx $28				ldx 	DCursor
.010e7b	e2 20		sep #$20			sep 	#$20
.010e7d	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e81	c2 20		rep #$20			rep 	#$20
.010e83	e8		inx				inx
.010e84	8a		txa				txa
.010e85	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.010e88	85 28		sta $28				sta 	DCursor
.010e8a	aa		tax				tax
.010e8b	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010e8e	e2 20		sep #$20			sep 	#$20
.010e90	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e94	c2 20		rep #$20			rep 	#$20
.010e96	fa		plx				plx
.010e97	68		pla				pla
.010e98	60		rts				rts
.010e99					HWNewLine:
.010e99	48		pha				pha
.010e9a	da		phx				phx
.010e9b	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.010e9e					HWMoveCursor:
.010e9e	a9 20 00	lda #$0020			lda 	#32
.010ea1	20 77 0e	jsr $010e77			jsr 	HWPrintChar
.010ea4	8a		txa				txa
.010ea5	25 28		and $28				and 	DCursor
.010ea7	d0 f5		bne $010e9e			bne 	HWMoveCursor
.010ea9	fa		plx				plx
.010eaa	68		pla				pla
.010eab	60		rts				rts
.010eac	48		pha		HWTab:	pha
.010ead	da		phx				phx
.010eae	a2 07 00	ldx #$0007			ldx 	#7
.010eb1	80 eb		bra $010e9e			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	ca 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 06 00 01 00 00 00 0c 00
>024108	0a 00 18 c0 06 22 01 40 00 00 08 00 14 00 2c 3c
>024118	00 00 14 00 19 00 27 3e 08 00 04 58 20 3d 20 00
>024128	18 32 18 c0 00 00 1a 00 1c 00 2b 3e 18 c0 28 3e
>024138	64 40 17 32 c8 40 17 32 2c 41 17 32 90 41 00 00
>024148	10 00 1e 00 18 c0 06 22 18 c0 0a 24 01 40 00 00
>024158	0e 00 28 00 2d 3a 18 c0 06 22 05 40 00 00 08 00
>024168	32 00 22 3e 00 00 06 00 33 00 00 00 14 00 64 00
>024178	27 3e 06 00 03 31 30 30 19 32 28 3e 1e 40 00 00
>024188	14 00 c8 00 27 3e 06 00 03 32 30 30 19 32 28 3e
>024198	1e 40 00 00 14 00 2c 01 27 3e 06 00 03 33 30 30
>0241a8	19 32 28 3e 1e 40 00 00 14 00 90 01 27 3e 06 00
>0241b8	03 34 30 30 19 32 28 3e 1e 40 00 00 00 00 ee ee
>0241c8	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0241d8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2017 times (32272 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
