
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Mon Jun 17 19:25:10 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c b7 1b 01	jmp $011bb7			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	4e 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	12 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	22 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	32 0a					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	76 0a					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	dd 0a					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	42 0a					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	bf 0a					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	a1 0a					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	5c 0a					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	5c 09					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	dd 09					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e9 0b					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	66 0b					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	dd 0b					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ee 09					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	00 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	77 0c					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	57 0c					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	33 0c					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	1d 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	91 0e					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	b1 0f					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b1 0c					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e9 0c					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	1d 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	45 0e					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	5f 0e					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	76 0e					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	1a 11					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	d8 10					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	59 0d					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	f0 0d					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	82 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	71 10					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	4e 05					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	4e 05					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	4e 05					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	4e 05					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	4e 05					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	4e 05					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	4e 05					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	4e 05					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	b7 1a					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	5c 11					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	98 1a					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	70 18					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	72 18					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	f2 18					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	ee 18					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	4f 19					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	c3 19					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	b3 1a					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	fc 13					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	fe 16					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	5d 17					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	79 17					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	bb 16					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	af 14					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	52 1a					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	6a 1a					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	7e 1a					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	d7 11					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	c9 1a					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	ab 17					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	09 18					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	48 14					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	84 15					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	40 18					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	c2 17					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	4e 05					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	dd 14					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	ff 15					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 f1 02	brl $01055f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 5f 05	jmp $01055f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.010464					LineDelete:
.010464	aa		tax				tax 	 							; this is the one we're looking for ....
.010465	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.010467	18		clc				clc
.010468	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.01046b	a8		tay				tay
.01046c					_LDLoop:
.01046c	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.01046f	f0 2d		beq $01049e			beq 	_LDExit						; exit if zero ; line does not exist
.010471	8a		txa				txa 								; found a match
.010472	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010475	f0 08		beq $01047f			beq		_LDFound
.010477	98		tya				tya 								; follow the link.
.010478	18		clc				clc
.010479	79 00 00	adc $0000,y			adc 	$0000,y
.01047c	a8		tay				tay
.01047d	80 ed		bra $01046c			bra 	_LDLoop
.01047f					_LDFound:
.01047f	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.010481	98		tya				tya 								; follow link to next.
.010482	18		clc				clc
.010483	79 00 00	adc $0000,y			adc 	$0000,y
.010486	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.010488	20 39 19	jsr $011939			jsr 	FindCodeEnd 				; find the end of the code.
.01048b	38		sec				sec
.01048c	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.01048e	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.01048f	1a		inc a				inc 	a
.010490	aa		tax				tax
.010491	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.010494	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.010496	91 08		sta ($08),y			sta 	(DTemp1),y
.010498	c8		iny				iny
.010499	c8		iny				iny
.01049a	ca		dex				dex
.01049b	ca		dex				dex
.01049c	d0 f6		bne $010494			bne 	_LDCopy
.01049e					_LDExit:
.01049e	60		rts				rts
.01049f					LineInsert:
.01049f	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104a1	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.0104a3	a0 00 00	ldy #$0000			ldy 	#0
.0104a6					_LIFindLength:
.0104a6	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.0104a8	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.0104ab	f0 10		beq $0104bd			beq 	_LIFindEnd
.0104ad	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.0104b0	90 04		bcc $0104b6			bcc 	_LIQString
.0104b2	c8		iny				iny 								; otherwise just skip it.
.0104b3	c8		iny				iny
.0104b4	80 f0		bra $0104a6			bra 	_LIFindLength
.0104b6					_LIQString:
.0104b6	98		tya				tya 								; skip quoted strings
.0104b7	18		clc				clc
.0104b8	71 08		adc ($08),y			adc 	(DTemp1),y
.0104ba	a8		tay				tay
.0104bb	80 e9		bra $0104a6			bra 	_LIFindLength
.0104bd					_LIFindEnd:
.0104bd	98		tya				tya 								; the tokens in the line
.0104be	18		clc				clc
.0104bf	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.0104c2	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.0104c4	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.0104c7	18		clc				clc
.0104c8	65 02		adc $02				adc 	DBaseAddress
.0104ca	a8		tay				tay
.0104cb					_LIFindInsertPoint:
.0104cb	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.0104ce	f0 0f		beq $0104df			beq		_LIFoundInsertPoint
.0104d0	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.0104d3	c5 0c		cmp $0c				cmp 	DTemp2
.0104d5	b0 08		bcs $0104df			bcs 	_LIFoundInsertPoint
.0104d7	98		tya				tya 								; if < go to the next line.
.0104d8	18		clc				clc
.0104d9	79 00 00	adc $0000,y			adc 	$0000,y
.0104dc	a8		tay				tay
.0104dd	80 ec		bra $0104cb			bra 	_LIFindInsertPoint
.0104df					_LIFoundInsertPoint:
.0104df	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.0104e1	20 39 19	jsr $011939			jsr 	FindCodeEnd 				; get the end of the code.
.0104e4	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.0104e6	18		clc				clc
.0104e7	65 24		adc $24				adc 	DTemp3
.0104e9	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.0104eb					_LICopyMove:
.0104eb	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.0104ed	92 34		sta ($34)			sta 	(DTemp4+2)
.0104ef	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.0104f1	c5 36		cmp $36				cmp 	DTemp5
.0104f3	f0 0a		beq $0104ff			beq 	_LICopyMoveOver
.0104f5	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.0104f7	c6 32		dec $32				dec 	DTemp4
.0104f9	c6 34		dec $34				dec 	DTemp4+2
.0104fb	c6 34		dec $34				dec 	DTemp4+2
.0104fd	80 ec		bra $0104eb			bra 	_LICopyMove
.0104ff					_LICopyMoveOver:
.0104ff	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010501	92 36		sta ($36)			sta 	(DTemp5)
.010503	a0 02 00	ldy #$0002			ldy 	#2
.010506	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010508	91 36		sta ($36),y			sta 	(DTemp5),y
.01050a	a0 04 00	ldy #$0004			ldy 	#4
.01050d					_LICopyTokens:
.01050d	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01050f	91 36		sta ($36),y			sta 	(DTemp5),y
.010511	c8		iny				iny
.010512	c8		iny				iny
.010513	e6 08		inc $08				inc 	DTemp1
.010515	e6 08		inc $08				inc 	DTemp1
.010517	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010519	c6 24		dec $24				dec 	DTemp3
.01051b	a5 24		lda $24				lda 	DTemp3
.01051d	c9 04 00	cmp #$0004			cmp 	#4
.010520	d0 eb		bne $01050d			bne 	_LICopyTokens
.010522	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.010523					ErrorHandler:
.010523	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010525	fa		plx				plx 								; address of error message -1
.010526	e8		inx				inx 								; error message.
.010527	20 cb 05	jsr $0105cb			jsr 	PrintROMMessage 			; print message in ROM
.01052a	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01052c	f0 15		beq $010543			beq 	_EHEndMessage
.01052e	a2 49 05	ldx #$0549			ldx 	#_EHAt & $FFFF 				; print " at "
.010531	20 cb 05	jsr $0105cb			jsr 	PrintROMMessage
.010534	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010536	a0 00 00	ldy #$0000			ldy 	#0
.010539	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01053c	20 cc 0f	jsr $010fcc			jsr 	ConvertToString 			; convert and print it.
.01053f	a8		tay				tay
.010540	20 e9 05	jsr $0105e9			jsr 	PrintBASICString
.010543					_EHEndMessage:
.010543	20 88 1b	jsr $011b88			jsr 	HWNewLine
.010546	4c e1 1b	jmp $011be1			jmp 	NextCommand 				; get next command.
>010549	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01054e					IllegalToken:
.01054e	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010551	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010559	54 6f 6b 65 6e 00
.01055f					SyntaxError:
.01055f	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010562	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01056a	72 72 6f 72 00
.01056f					ExpectToken:
.01056f	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010571	d0 05		bne $010578			bne 	_CTKError					; error if not
.010573	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010575	e6 06		inc $06				inc 	DCodePtr
.010577	60		rts				rts
.010578					_CTKError:
.010578	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01057b	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010583	74 6f 6b 65 6e 00
.010589					ExpectRightBracket:
.010589	48		pha				pha
.01058a	a9 27 32	lda #$3227			lda 	#rparenTokenID
.01058d	20 6f 05	jsr $01056f			jsr 	ExpectToken
.010590	68		pla				pla
.010591	60		rts				rts
.010592					ExpectComma:
.010592	48		pha				pha
.010593	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010596	20 6f 05	jsr $01056f			jsr 	ExpectToken
.010599	68		pla				pla
.01059a	60		rts				rts
.01059b					CheckBothNumeric:
.01059b	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01059d	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01059f	30 01		bmi $0105a2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105a1	60		rts				rts
.0105a2					_CBNFail:
.0105a2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0105a5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0105ad	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0105bb					ResetTypeInteger:
.0105bb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0105bd	29 ff 7f	and #$7fff			and 	#$7FFF
.0105c0	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0105c2	60		rts				rts
.0105c3					ResetTypeString:
.0105c3	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0105c5	09 00 80	ora #$8000			ora 	#$8000
.0105c8	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0105ca	60		rts				rts
.0105cb					PrintROMMessage:
.0105cb	48		pha				pha
.0105cc	da		phx				phx
.0105cd					_PRMLoop:
.0105cd	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0105d1	29 ff 00	and #$00ff			and 	#$00FF
.0105d4	f0 10		beq $0105e6			beq 	_PRMExit
.0105d6	c9 0d 00	cmp #$000d			cmp 	#13
.0105d9	d0 05		bne $0105e0			bne 	_PRMChar
.0105db	20 88 1b	jsr $011b88			jsr 	HWNewLine
.0105de	80 03		bra $0105e3			bra 	_PRMNext
.0105e0					_PRMChar:
.0105e0	20 25 1b	jsr $011b25			jsr 	HWPrintChar
.0105e3					_PRMNext:
.0105e3	e8		inx				inx
.0105e4	80 e7		bra $0105cd			bra 	_PRMLoop
.0105e6					_PRMExit:
.0105e6	fa		plx				plx
.0105e7	68		pla				pla
.0105e8	60		rts				rts
.0105e9					PrintBASICString:
.0105e9	48		pha				pha
.0105ea	da		phx				phx
.0105eb	5a		phy				phy
.0105ec	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0105ef	29 ff 00	and #$00ff			and 	#$00FF
.0105f2	f0 0b		beq $0105ff			beq 	_PBSExit 					; null string
.0105f4	aa		tax				tax
.0105f5					_PBSLoop:
.0105f5	c8		iny				iny
.0105f6	b9 00 00	lda $0000,y			lda 	$0000,y
.0105f9	20 25 1b	jsr $011b25			jsr 	HWPrintChar
.0105fc	ca		dex				dex
.0105fd	d0 f6		bne $0105f5			bne 	_PBSLoop
.0105ff					_PBSExit:
.0105ff	7a		ply				ply
.010600	fa		plx				plx
.010601	68		pla				pla
.010602	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringutils.asm

.010603					StringTempAllocate:
.010603	48		pha				pha
.010604	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010606	d0 09		bne $010611			bne 	_STANoReset
.010608	5a		phy				phy 								; reset the temp string pointer.
.010609	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01060c	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01060e	85 16		sta $16				sta 	DTempStringPointer
.010610	7a		ply				ply
.010611					_STANoReset:
.010611	68		pla				pla 								; get length.
.010612	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010615	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010618	18		clc				clc 								; this adds one, for the length.
.010619	65 16		adc $16				adc 	DTempStringPointer
.01061b	85 16		sta $16				sta 	DTempStringPointer
.01061d	48		pha				pha 								; save start address
.01061e	a9 00 00	lda #$0000			lda 	#$0000
.010621	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010623	92 16		sta ($16)			sta		(DTempStringPointer)
.010625	c2 20		rep #$20			rep 	#$20
.010627	68		pla				pla 								; restore start address
.010628	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01062a	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01062c	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01062e	60		rts				rts
.01062f					StringWriteCharacter:
.01062f	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010631	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010633	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010635	1a		inc a				inc 	a
.010636	92 18		sta ($18)			sta 	(DStartTempString)
.010638	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01063a	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01063c	60		rts				rts
.01063d					StringCreateCopy:
.01063d	a8		tay				tay 								; put pointer to string in Y
.01063e	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010641	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010644	f0 17		beq $01065d			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010646	da		phx				phx 								; save X and put the character count in X
.010647	aa		tax				tax
.010648					_SCCCopy:
.010648	c8		iny				iny 								; advance and read (first time skips length)
.010649	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01064b	b9 00 00	lda $0000,y			lda 	$0000,y
.01064e	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010650	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010652	1a		inc a				inc 	a
.010653	92 18		sta ($18)			sta 	(DStartTempString)
.010655	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010657	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010659	ca		dex				dex 								; do X times
.01065a	d0 ec		bne $010648			bne 	_SCCCopy
.01065c	fa		plx				plx
.01065d					_SCCExit:
.01065d	60		rts				rts
.01065e					StringMakeConcrete:
.01065e	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010661	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010663	90 0f		bcc $010674			bcc 	_SMCExit
.010665	85 08		sta $08				sta 	DTemp1 						; source
.010667	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010669	29 ff 00	and #$00ff			and 	#$00FF
.01066c	d0 07		bne $010675			bne 	_SMCNonZero 				; if not "" skip.
.01066e	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010671	18		clc				clc 								; this reference is used for all empty strings.
.010672	65 02		adc $02				adc 	DBaseAddress
.010674					_SMCExit:
.010674	60		rts				rts
.010675					_SMCNonZero:
.010675	48		pha				pha 								; save on stack.
.010676	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010679	18		clc				clc
.01067a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01067d	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01067f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010681	85 0c		sta $0c				sta 	DTemp2 						; target
.010683	7a		ply				ply 								; get length copy from here until Y goes -ve
.010684	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010686					_SMCLoop:
.010686	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.010688	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01068a	88		dey				dey 								; Y+1 times.
.01068b	10 f9		bpl $010686			bpl 	_SMCLoop
.01068d	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01068f	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010691	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.010692					Tokenise:
.010692	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010694	84 0a		sty $0a				sty 	DTemp1+2
.010696	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010699	18		clc				clc
.01069a	65 02		adc $02				adc 	DBaseAddress
.01069c	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01069e	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0106a1	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0106a4					_TOKCap:
.0106a4	c8		iny				iny 								; go to next
.0106a5	b7 08		lda [$08],y			lda 	[DTemp1],y
.0106a7	29 ff 00	and #$00ff			and 	#$00FF
.0106aa	f0 22		beq $0106ce			beq 	_TOKEndCap
.0106ac	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0106af	d0 01		bne $0106b2			bne 	_TOKNotQuote
.0106b1	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0106b2					_TOKNotQuote:
.0106b2	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0106b5	90 ed		bcc $0106a4			bcc 	_TOKCap
.0106b7	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0106ba	b0 e8		bcs $0106a4			bcs 	_TOKCap
.0106bc	8a		txa				txa 								; check if in quotes
.0106bd	4a		lsr a				lsr 	a
.0106be	b0 e4		bcs $0106a4			bcs 	_TOKCap
.0106c0	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0106c2	38		sec				sec
.0106c3	e9 20 00	sbc #$0020			sbc 	#32
.0106c6	e2 20		sep #$20			sep 	#$20
.0106c8	97 08		sta [$08],y			sta 	[DTemp1],y
.0106ca	c2 20		rep #$20			rep 	#$20
.0106cc	80 d6		bra $0106a4			bra 	_TOKCap
.0106ce					_TOKEndCap:
.0106ce	c6 08		dec $08				dec 	DTemp1
.0106d0					_TOKMainNext:
.0106d0	e6 08		inc $08				inc 	DTemp1
.0106d2					_TOKMainLoop:
.0106d2	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0106d4	29 ff 00	and #$00ff			and 	#$00FF
.0106d7	c9 20 00	cmp #$0020			cmp 	#32
.0106da	90 1d		bcc $0106f9			bcc 	_TOKExit 					; 0-31 exit.
.0106dc	f0 f2		beq $0106d0			beq 	_TOKMainNext 				; 32 (space) skip.
.0106de	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0106e1	f0 1d		beq $010700			beq 	_TOKString
.0106e3	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0106e6	90 1d		bcc $010705			bcc 	_TOKPunctuation
.0106e8	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0106eb	90 42		bcc $01072f			bcc 	_TOKNumber
.0106ed	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0106f0	90 13		bcc $010705			bcc 	_TOKPunctuation
.0106f2	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0106f5	90 3d		bcc $010734			bcc 	_TOKIdentifier
.0106f7	80 0c		bra $010705			bra 	_TOKPunctuation 			; 91-   punctuation.
.0106f9					_TOKExit:
.0106f9	a9 00 00	lda #$0000			lda 	#$0000
.0106fc	20 39 07	jsr $010739			jsr 	TOKWriteToken
.0106ff	60		rts				rts
.010700					_TOKString:
.010700	20 d7 07	jsr $0107d7			jsr 	TOKQuotedString
.010703	80 cd		bra $0106d2			bra 	_TOKMainLoop
.010705					_TOKPunctuation:
.010705	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010708	20 3e 08	jsr $01083e			jsr 	TOKKeywordSearch
.01070b	b0 1d		bcs $01072a			bcs 	_TOKFoundPunctuation
.01070d	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010710	20 3e 08	jsr $01083e			jsr 	TOKKeywordSearch
.010713	b0 15		bcs $01072a			bcs 	_TOKFoundPunctuation
.010715	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010718	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010720	61 72 73 65 20 6c 69 6e 65 00
.01072a					_TOKFoundPunctuation:
.01072a	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; output the token and go round again.
.01072d	80 a3		bra $0106d2			bra 	_TOKMainLoop
.01072f					_TOKNumber:
.01072f	20 58 07	jsr $010758			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010732	80 9e		bra $0106d2			bra 	_TOKMainLoop
.010734					_TOKIdentifier:
.010734	20 99 08	jsr $010899			jsr 	TOKIdentifier
.010737	80 99		bra $0106d2			bra 	_TOKMainLoop
.010739					TOKWriteToken:
.010739	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01073b	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.01073d	e6 0c		inc $0c				inc 	DTemp2
.01073f	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010741	29 ff 00	and #$00ff			and 	#$00FF
.010744	f0 01		beq $010747			beq 	_TOKWriteOverflow
.010746	60		rts				rts
.010747					_TOKWriteOverflow:
.010747	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01074a	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010752	20 6c 6f 6e 67 00
.010758					TOKInteger:
.010758	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.01075a	64 26		stz $26				stz 	DTemp3+2
.01075c					_TOKINLoop:
.01075c	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01075e	48		pha				pha
.01075f	a5 24		lda $24				lda 	DTemp3
.010761	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010763	26 26		rol $26				rol 	DTemp3+2
.010765	06 24		asl $24				asl 	DTemp3
.010767	26 26		rol $26				rol 	DTemp3+2
.010769	18		clc				clc
.01076a	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.01076c	85 24		sta $24				sta 	DTemp3
.01076e	68		pla				pla
.01076f	65 26		adc $26				adc 	DTemp3+2
.010771	85 26		sta $26				sta 	DTemp3+2
.010773	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010775	26 26		rol $26				rol 	DTemp3+2
.010777	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010779	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.01077c	d0 44		bne $0107c2			bne 	_TOKINSize
.01077e	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.010780	29 0f 00	and #$000f			and 	#15
.010783	18		clc				clc
.010784	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010786	85 24		sta $24				sta 	DTemp3
.010788	90 02		bcc $01078c			bcc 	_TOKINNoCarry
.01078a	e6 26		inc $26				inc 	DTemp3+2
.01078c					_TOKINNoCarry:
.01078c	e6 08		inc $08				inc 	DTemp1 						; look at next
.01078e	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.010790	29 ff 00	and #$00ff			and 	#$00FF
.010793	c9 30 00	cmp #$0030			cmp 	#"0"
.010796	90 05		bcc $01079d			bcc 	_TOKINGotInteger
.010798	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01079b	90 bf		bcc $01075c			bcc		_TOKINLoop
.01079d					_TOKINGotInteger:
.01079d	a5 24		lda $24				lda 	DTemp3 						; lower word
.01079f	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0107a2	18		clc				clc
.0107a3	69 00 40	adc #$4000			adc 	#$4000
.0107a6	48		pha				pha 								; save it.
.0107a7	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0107a9	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0107ab	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0107ad	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0107b0	b0 10		bcs $0107c2			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0107b2	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0107b5	f0 06		beq $0107bd			beq 	_TOKINNoShift 				; don't need constant shift.
.0107b7	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0107ba	20 39 07	jsr $010739			jsr 	TOKWriteToken
.0107bd					_TOKINNoShift:
.0107bd	68		pla				pla 								; get lower its token
.0107be	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; output it
.0107c1	60		rts				rts
.0107c2					_TOKINSize:
.0107c2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0107c5	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0107cd	74 6f 6f 20 6c 61 72 67 65 00
.0107d7					TOKQuotedString:
.0107d7	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0107d9	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0107db	85 32		sta $32				sta 	DTemp4
.0107dd	a5 0a		lda $0a				lda 	DTemp1+2
.0107df	85 34		sta $34				sta 	DTemp4+2
.0107e1					_TOKQFindSize:
.0107e1	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0107e3	e6 08		inc $08				inc 	DTemp1
.0107e5	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0107e8	f0 3b		beq $010825			beq 	_TOQImbalance 				; end of line, and no quote found.
.0107ea	c9 22 00	cmp #$0022			cmp 	#34
.0107ed	d0 f2		bne $0107e1			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0107ef	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0107f1	38		sec				sec
.0107f2	e5 32		sbc $32				sbc 	DTemp4
.0107f4	3a		dec a				dec 	a 							; one less character for closing quote
.0107f5	85 26		sta $26				sta 	DTemp3+2
.0107f7	18		clc				clc
.0107f8	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0107fb	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0107fe	20 39 07	jsr $010739			jsr 	TOKWriteToken
.010801	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010803	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; effectively a byte-write.
.010806	c6 0c		dec $0c				dec 	DTemp2
.010808	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.01080a	f0 0f		beq $01081b			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.01080c					_TOKQWriteString:
.01080c	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01080e	29 ff 00	and #$00ff			and 	#$00FF
.010811	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; effectively a byte-write.
.010814	c6 0c		dec $0c				dec 	DTemp2
.010816	e6 32		inc $32				inc 	DTemp4 						; advance character
.010818	ca		dex				dex 								; do X times
.010819	d0 f1		bne $01080c			bne 	_TOKQWriteString
.01081b					_TOKQWriteEnd:
.01081b	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01081d	29 01 00	and #$0001			and 	#1
.010820	f0 02		beq $010824			beq 	_TOKQExit
.010822	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010824					_TOKQExit:
.010824	60		rts				rts
.010825					_TOQImbalance:
.010825	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010828	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010830	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01083e					TOKKeywordSearch:
.01083e	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010840	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010843	85 34		sta $34				sta 	DTemp4+2
.010845	a2 00 00	ldx #$0000			ldx 	#0
.010848					_TOKScan:
.010848	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; read the first byte
.01084c	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01084f	f0 46		beq $010897			beq 	_TOKFail 					; if zero then we have failed.
.010851	3a		dec a				dec 	a 							; -1 gives the length.
.010852	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010854	d0 2f		bne $010885			bne 	_TOKNext 					; no, then skip to next token.
.010856	da		phx				phx 								; save X
.010857	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.01085a					_TOKCompare:
.01085a	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01085c	5f 93 00 01	eor $010093,x			eor 	TokenText+1,x
.010860	29 ff 00	and #$00ff			and 	#$00FF
.010863	d0 1f		bne $010884			bne 	_TOKPopNext 				; if different, pop and goto next.
.010865	e8		inx				inx 								; bump X and Y.
.010866	c8		iny				iny
.010867	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010869	d0 ef		bne $01085a			bne 	_TOKCompare
.01086b	98		tya				tya 								; add length to the text pointer
.01086c	18		clc				clc
.01086d	65 08		adc $08				adc 	DTemp1
.01086f	85 08		sta $08				sta 	DTemp1
.010871	fa		plx				plx 								; restore X.
.010872	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the type/token bit.
.010876	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010879	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.01087a	4a		lsr a				lsr		a
.01087b	4a		lsr a				lsr 	a
.01087c	eb		xba				xba
.01087d	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01087f	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010882	38		sec				sec
.010883	60		rts				rts
.010884					_TOKPopNext:
.010884	fa		plx				plx 								; restore X.
.010885					_TOKNext:
.010885	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the token skip again.
.010889	29 0f 00	and #$000f			and 	#$000F
.01088c	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01088e	8a		txa				txa
.01088f	18		clc				clc
.010890	65 14		adc $14				adc 	DSignCount
.010892	aa		tax				tax
.010893	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010895	80 b1		bra $010848			bra 	_TOKScan
.010897					_TOKFail:
.010897	18		clc				clc
.010898	60		rts				rts
.010899					TOKIdentifier:
.010899	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.01089b	85 24		sta $24				sta 	DTemp3
.01089d					_TOKIFindLength:
.01089d	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01089f	a7 08		lda [$08]			lda 	[DTemp1]
.0108a1	29 ff 00	and #$00ff			and 	#$00FF
.0108a4	20 44 09	jsr $010944			jsr 	TOKIsIdentifierCharacter
.0108a7	b0 f4		bcs $01089d			bcs 	_TOKIFindLength
.0108a9	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0108ab	38		sec				sec
.0108ac	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0108ae	85 36		sta $36				sta 	DTemp5
.0108b0	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0108b2	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0108b5	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0108b7	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0108b9	29 ff 00	and #$00ff			and 	#$00FF
.0108bc	c9 24 00	cmp #$0024			cmp 	#"$"
.0108bf	d0 0b		bne $0108cc			bne 	_TOKINotString
.0108c1	e6 08		inc $08				inc 	DTemp1 						; skip $
.0108c3	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0108c5	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0108c7	09 00 20	ora #$2000			ora 	#IDTypeMask
.0108ca	85 26		sta $26				sta 	DTemp3+2
.0108cc					_TOKINotString:
.0108cc	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0108ce	29 ff 00	and #$00ff			and 	#$00FF
.0108d1	c9 28 00	cmp #$0028			cmp 	#"("
.0108d4	d0 0b		bne $0108e1			bne 	_TOKINotArray
.0108d6	e6 08		inc $08				inc 	DTemp1 						; skip (
.0108d8	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0108da	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0108dc	09 00 10	ora #$1000			ora 	#IDArrayMask
.0108df	85 26		sta $26				sta 	DTemp3+2
.0108e1					_TOKINotArray:
.0108e1	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0108e3	85 08		sta $08				sta 	DTemp1
.0108e5	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0108e7	20 3e 08	jsr $01083e			jsr 	TOKKeywordSearch
.0108ea	90 04		bcc $0108f0			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0108ec	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; if CS write token and exit.
.0108ef	60		rts				rts
.0108f0					_TOKIIdentifier:
.0108f0	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0108f2	e6 08		inc $08				inc 	DTemp1
.0108f4	20 30 09	jsr $010930			jsr		_TOKIToConstant 			; convert to range 0-35
.0108f7	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0108f9	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0108fb	f0 1d		beq $01091a			beq 	_TOKINoSecond
.0108fd	48		pha				pha 								; save current on stack.
.0108fe	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010900	e6 08		inc $08				inc 	DTemp1
.010902	20 30 09	jsr $010930			jsr		_TOKIToConstant 			; convert to range 0-35
.010905	85 14		sta $14				sta 	DSignCount 					; save it.
.010907	0a		asl a				asl 	a 							; x 4
.010908	0a		asl a				asl 	a
.010909	65 14		adc $14				adc 	DSignCount 					; x 5
.01090b	0a		asl a				asl 	a 							; x 10
.01090c	65 14		adc $14				adc 	DSignCount 					; x 11
.01090e	0a		asl a				asl 	a 							; x 22
.01090f	0a		asl a				asl 	a 							; x 44
.010910	65 14		adc $14				adc 	DSignCount 					; x 45
.010912	85 14		sta $14				sta 	DSignCount
.010914	68		pla				pla 								; get old token and add x 45
.010915	18		clc				clc
.010916	65 14		adc $14				adc 	DSignCount
.010918	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.01091a					_TOKINoSecond:
.01091a	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.01091c	f0 03		beq $010921			beq 	_TOKINotLast				; if yes
.01091e	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010921					_TOKINotLast:
.010921	20 39 07	jsr $010739			jsr 	TOKWriteToken 				; output the token
.010924	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010926	d0 c8		bne $0108f0			bne 	_TOKIIdentifier
.010928					_TOKIOut:
.010928	a5 24		lda $24				lda 	DTemp3 						; get original start position
.01092a	18		clc				clc
.01092b	65 38		adc $38				adc 	DTemp5+2					; add overall length
.01092d	85 08		sta $08				sta 	DTemp1 						; this is the end position
.01092f	60		rts				rts
.010930					_TOKIToConstant:
.010930	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010933	c9 41 00	cmp #$0041			cmp 	#65
.010936	90 04		bcc $01093c			bcc 	_TOKITInteger
.010938	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.01093b	60		rts				rts
.01093c					_TOKITInteger:
.01093c	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.01093f	18		clc				clc
.010940	69 1b 00	adc #$001b			adc 	#27
.010943	60		rts				rts
.010944					TOKIsIdentifierCharacter:
.010944	c9 30 00	cmp #$0030			cmp 	#"0"
.010947	90 0f		bcc $010958			bcc 	_TOKIIFail
.010949	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01094c	90 0c		bcc $01095a			bcc 	_TOKIIOk
.01094e	c9 41 00	cmp #$0041			cmp 	#"A"
.010951	90 05		bcc $010958			bcc 	_TOKIIFail
.010953	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010956	90 02		bcc $01095a			bcc 	_TOKIIOk
.010958					_TOKIIFail:
.010958	18		clc				clc
.010959	60		rts				rts
.01095a					_TOKIIOk:
.01095a	38		sec				sec
.01095b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01095c					Binary_Add:
.01095c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.01095e	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010960	30 12		bmi $010974		bmi 	_BATypeError
.010962	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010964	30 3f		bmi $0109a5		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010966	18		clc			clc 										; add the results
.010967	b5 00		lda $00,x		lda		EXSValueL+0,x
.010969	75 02		adc $02,x		adc 	EXSValueL+2,x
.01096b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01096d	b5 20		lda $20,x		lda		EXSValueH+0,x
.01096f	75 22		adc $22,x		adc 	EXSValueH+2,x
.010971	95 20		sta $20,x		sta 	EXSValueH+0,x
.010973	60		rts			rts
.010974					_BATypeError:
.010974	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010977	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01097f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01098f	65 73 00
.010992					_BALengthError:
.010992	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010995	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01099d	6f 6f 20 6c 6f 6e 67 00
.0109a5					_BAConcatenateString:
.0109a5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0109a7	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0109a9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0109ab	85 0c		sta $0c			sta 	DTemp2
.0109ad	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0109af	18		clc			clc 										; work out the total length
.0109b0	b2 08		lda ($08)		lda 	(DTemp1)
.0109b2	72 0c		adc ($0c)		adc 	(DTemp2)
.0109b4	b0 14		bcs $0109ca		bcs 	_BAConcatLengthError 				; string is too long.
.0109b6	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0109b8	20 03 06	jsr $010603		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0109bb	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0109bd	74 20		stz $20,x		stz 	EXSValueH+0,x
.0109bf	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0109c1	20 3d 06	jsr $01063d		jsr 	StringCreateCopy
.0109c4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0109c6	20 3d 06	jsr $01063d		jsr 	StringCreateCopy
.0109c9	60		rts			rts
.0109ca					_BAConcatLengthError:
.0109ca	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0109cd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0109d5	6f 6f 20 6c 6f 6e 67 00
.0109dd					Binary_Subtract:
.0109dd	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.0109e0	38		sec			sec
.0109e1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109e5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109e7	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109e9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109eb	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109ed	60		rts			rts
.0109ee					Binary_ShiftRight:
.0109ee	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.0109f1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0109f3	29 3f 00	and #$003f		and 	#63
.0109f6	f0 07		beq $0109ff		beq		_Binary_SRExit
.0109f8					_Binary_SRLoop:
.0109f8	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.0109fa	76 00		ror $00,x		ror 	EXSValueL+0,x
.0109fc	3a		dec a			dec 	a
.0109fd	d0 f9		bne $0109f8		bne 	_Binary_SRLoop
.0109ff					_Binary_SRExit:
.0109ff	60		rts			rts
.010a00					Binary_ShiftLeft:
.010a00	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010a03	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a05	29 3f 00	and #$003f		and 	#63
.010a08	f0 07		beq $010a11		beq		_Binary_SLExit
.010a0a					_Binary_SLLoop:
.010a0a	16 00		asl $00,x		asl 	EXSValueL+0,x
.010a0c	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a0e	3a		dec a			dec 	a
.010a0f	d0 f9		bne $010a0a		bne 	_Binary_SLLoop
.010a11					_Binary_SLExit:
.010a11	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010a12					Binary_And:
.010a12	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010a15	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a17	35 02		and $02,x		and 	EXSValueL+2,x
.010a19	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a1b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a1d	35 22		and $22,x		and 	EXSValueH+2,x
.010a1f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a21	60		rts			rts
.010a22					Binary_Or:
.010a22	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010a25	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a27	15 02		ora $02,x		ora 	EXSValueL+2,x
.010a29	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a2b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a2d	15 22		ora $22,x		ora 	EXSValueH+2,x
.010a2f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a31	60		rts			rts
.010a32					Binary_Xor:
.010a32	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010a35	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a37	55 02		eor $02,x		eor 	EXSValueL+2,x
.010a39	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a3b	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a3d	55 22		eor $22,x		eor 	EXSValueH+2,x
.010a3f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a41	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010a42					Binary_Equals:
.010a42	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a45	b0 0e		bcs $010a55		bcs 	_BEString
.010a47	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010a49	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010a4b	d0 4f		bne $010a9c		bne 	Compare_Fail
.010a4d	b5 20		lda $20,x		lda 	EXSValueH,x
.010a4f	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010a51	d0 49		bne $010a9c		bne 	Compare_Fail
.010a53	80 3f		bra $010a94		bra 	Compare_Succeed
.010a55					_BEString:
.010a55	09 00 00	ora #$0000		ora 	#$0000
.010a58	f0 3a		beq $010a94		beq 	Compare_Succeed
.010a5a	80 40		bra $010a9c		bra 	Compare_Fail
.010a5c					Binary_NotEquals:
.010a5c	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a5f	b0 0e		bcs $010a6f		bcs 	_BNEString
.010a61	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010a63	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010a65	d0 2d		bne $010a94		bne 	Compare_Succeed
.010a67	b5 20		lda $20,x		lda 	EXSValueH,x
.010a69	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010a6b	d0 27		bne $010a94		bne 	Compare_Succeed
.010a6d	80 2d		bra $010a9c		bra 	Compare_Fail
.010a6f					_BNEString:
.010a6f	09 00 00	ora #$0000		ora 	#$0000
.010a72	d0 20		bne $010a94		bne 	Compare_Succeed
.010a74	80 26		bra $010a9c		bra 	Compare_Fail
.010a76					Binary_Less:
.010a76	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a79	b0 12		bcs $010a8d		bcs 	_BLString
.010a7b	38		sec			sec
.010a7c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010a7e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a80	b5 20		lda $20,x		lda 	EXSValueH,x
.010a82	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a84	50 03		bvc $010a89		bvc 	*+5
.010a86	49 00 80	eor #$8000		eor 	#$8000
.010a89	30 09		bmi $010a94		bmi 	Compare_Succeed
.010a8b	80 0f		bra $010a9c		bra 	Compare_Fail
.010a8d					_BLString:
.010a8d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010a90	f0 02		beq $010a94		beq 	Compare_Succeed
.010a92	80 08		bra $010a9c		bra 	Compare_Fail
.010a94					Compare_Succeed:
.010a94	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010a97	95 00		sta $00,x		sta 	EXSValueL,x
.010a99	95 20		sta $20,x		sta 	EXSValueH,x
.010a9b	60		rts			rts
.010a9c					Compare_Fail:
.010a9c	74 00		stz $00,x		stz 	EXSValueL,x
.010a9e	74 20		stz $20,x		stz 	EXSValueH,x
.010aa0	60		rts			rts
.010aa1					Binary_GreaterEqual:
.010aa1	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010aa4	b0 12		bcs $010ab8		bcs 	_BGEString
.010aa6	38		sec			sec
.010aa7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010aa9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010aab	b5 20		lda $20,x		lda 	EXSValueH,x
.010aad	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010aaf	50 03		bvc $010ab4		bvc 	*+5
.010ab1	49 00 80	eor #$8000		eor 	#$8000
.010ab4	10 de		bpl $010a94		bpl 	Compare_Succeed
.010ab6	80 e4		bra $010a9c		bra 	Compare_Fail
.010ab8					_BGEString:
.010ab8	09 00 00	ora #$0000		ora 	#$0000
.010abb	10 d7		bpl $010a94		bpl 	Compare_Succeed
.010abd	80 dd		bra $010a9c		bra 	Compare_Fail
.010abf					Binary_LessEqual:
.010abf	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ac2	b0 12		bcs $010ad6		bcs 	_BLEString
.010ac4	18		clc			clc 									; numeric <= signed
.010ac5	b5 00		lda $00,x		lda 	EXSValueL,x
.010ac7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ac9	b5 20		lda $20,x		lda 	EXSValueH,x
.010acb	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010acd	50 03		bvc $010ad2		bvc 	*+5
.010acf	49 00 80	eor #$8000		eor 	#$8000
.010ad2	30 c0		bmi $010a94		bmi 	Compare_Succeed
.010ad4	80 c6		bra $010a9c		bra 	Compare_Fail
.010ad6					_BLEString:
.010ad6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010ad9	d0 b9		bne $010a94		bne 	Compare_Succeed
.010adb	80 bf		bra $010a9c		bra 	Compare_Fail
.010add					Binary_Greater:
.010add	20 fb 0a	jsr $010afb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ae0	b0 12		bcs $010af4		bcs 	_BGString
.010ae2	18		clc			clc 									; numeric > signed
.010ae3	b5 00		lda $00,x		lda 	EXSValueL,x
.010ae5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae7	b5 20		lda $20,x		lda 	EXSValueH,x
.010ae9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010aeb	50 03		bvc $010af0		bvc 	*+5
.010aed	49 00 80	eor #$8000		eor 	#$8000
.010af0	10 a2		bpl $010a94		bpl 	Compare_Succeed
.010af2	80 a8		bra $010a9c		bra 	Compare_Fail
.010af4					_BGString:
.010af4	c9 01 00	cmp #$0001		cmp 	#$0001
.010af7	f0 9b		beq $010a94		beq 	Compare_Succeed
.010af9	80 a1		bra $010a9c		bra 	Compare_Fail
.010afb					CompareTypeCheck:
.010afb	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010afd	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010aff	30 06		bmi $010b07		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010b01	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010b03	30 1c		bmi $010b21		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010b05	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010b06	60		rts			rts
.010b07					_CTCFail:
.010b07	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010b0a	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010b12	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010b21					_CTCStringCompare:
.010b21	20 bb 05	jsr $0105bb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010b24	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010b26	85 08		sta $08			sta 	DTemp1
.010b28	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010b2a	85 0c		sta $0c			sta 	DTemp2
.010b2c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010b2f	a8		tay			tay
.010b30	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010b32	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010b34	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b36	90 02		bcc $010b3a		bcc 	_CTCSmallest
.010b38	b2 0c		lda ($0c)		lda 	(DTemp2)
.010b3a					_CTCSmallest:
.010b3a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010b3c					_CTCCompare:
.010b3c	c8		iny			iny 									; look at next character (done first, first char is size)
.010b3d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010b3f	30 16		bmi $010b57		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010b41	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010b43	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010b45	f0 f5		beq $010b3c		beq 	_CTCCompare 					; if zero, try the next character.
.010b47	b0 07		bcs $010b50		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010b49					_CTCLess:
.010b49	c2 20		rep #$20		rep 	#$20
.010b4b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b4e	80 14		bra $010b64		bra 	_CTCExit
.010b50					_CTCGreater:
.010b50	c2 20		rep #$20		rep 	#$20
.010b52	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010b55	80 0d		bra $010b64		bra 	_CTCExit
.010b57					_CTCEqualSoFar:
.010b57	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010b59	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b5b	90 ec		bcc $010b49		bcc 	_CTCLess
.010b5d	d0 f1		bne $010b50		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010b5f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010b61	a9 00 00	lda #$0000		lda 	#$0000
.010b64					_CTCExit:
.010b64	38		sec			sec 									; return with CS indicating string comparison.
.010b65	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010b66					Binary_Divide:
.010b66	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010b69	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010b6b	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010b6d	d0 14		bne $010b83		bne 	_BinaryDivide_Ok
.010b6f	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010b72	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010b7a	20 62 79 20 7a 65 72 6f 00
.010b83					_BinaryDivide_Ok:
.010b83	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010b85	64 0a		stz $0a			stz 	DTemp1+2
.010b87	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010b89	5a		phy			phy 										; save Y (bit counter)
.010b8a	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010b8c	10 07		bpl $010b95		bpl 	_BinaryDivide_RightDone
.010b8e	e8		inx			inx
.010b8f	e8		inx			inx
.010b90	20 cb 0b	jsr $010bcb		jsr 	Binary_DivNegate
.010b93	ca		dex			dex
.010b94	ca		dex			dex
.010b95					_BinaryDivide_RightDone:
.010b95	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010b97	10 03		bpl $010b9c		bpl 	_BinaryDivide_LeftDone
.010b99	20 cb 0b	jsr $010bcb		jsr 	Binary_DivNegate
.010b9c					_BinaryDivide_LeftDone:
.010b9c	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010b9f					_BinaryDivide_Loop:
.010b9f	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010ba1	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ba3	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010ba5	26 0a		rol $0a			rol 	DTemp1+2
.010ba7	38		sec			sec											; calculate A-M
.010ba8	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010baa	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bac	85 0c		sta $0c			sta 	DTemp2
.010bae	a5 0a		lda $0a			lda 	DTemp1+2
.010bb0	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bb2	90 08		bcc $010bbc		bcc 	_Binary_NoSubract 					; if A < M skip this
.010bb4	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010bb6	a5 0c		lda $0c			lda 	DTemp2
.010bb8	85 08		sta $08			sta 	DTemp1+0
.010bba	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010bbc					_Binary_NoSubract:
.010bbc	88		dey			dey 										; do it 32 times.
.010bbd	d0 e0		bne $010b9f		bne 	_BinaryDivide_Loop
.010bbf					_BinaryDivide_Exit:
.010bbf	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010bc1	29 01 00	and #$0001		and 	#1
.010bc4	f0 03		beq $010bc9		beq 	_BinaryDivide_Exit2
.010bc6	20 cb 0b	jsr $010bcb		jsr 	Binary_DivNegate
.010bc9					_BinaryDivide_Exit2:
.010bc9	7a		ply			ply 										; restore Y
.010bca	60		rts			rts
.010bcb					Binary_DivNegate:
.010bcb	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010bcd	38		sec			sec 										; negate the value at stack X.
.010bce	a9 00 00	lda #$0000		lda 	#$0000
.010bd1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010bd3	95 00		sta $00,x		sta 	EXSValueL+0,x
.010bd5	a9 00 00	lda #$0000		lda 	#$0000
.010bd8	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010bda	95 20		sta $20,x		sta 	EXSValueH+0,x
.010bdc	60		rts			rts
.010bdd					Binary_Modulus:
.010bdd	20 66 0b	jsr $010b66		jsr 	Binary_Divide 						; do the divide
.010be0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010be2	95 00		sta $00,x		sta 	EXSValueL+0,x
.010be4	a5 0a		lda $0a			lda 	DTemp1+2
.010be6	95 20		sta $20,x		sta 	EXSValueH+0,x
.010be8	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010be9					Binary_Multiply:
.010be9	20 9b 05	jsr $01059b		jsr 	CheckBothNumeric 					; check both values are numeric
.010bec	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010bee	85 08		sta $08			sta 	DTemp1
.010bf0	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010bf2	85 0a		sta $0a			sta		DTemp1+2
.010bf4	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010bf6	74 20		stz $20,x		stz 	EXSValueH+0,x
.010bf8					_BinaryMultiply_Loop:
.010bf8	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010bfa	05 0a		ora $0a			ora 	DTemp1+2
.010bfc	f0 1e		beq $010c1c		beq 	_BinaryMultiply_Exit
.010bfe	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010c00	29 01 00	and #$0001		and 	#1
.010c03	f0 0d		beq $010c12		beq 	_BinaryMultiply_NoAdd
.010c05	18		clc			clc 										; add multiplicand to result.
.010c06	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010c08	75 02		adc $02,x		adc 	EXSValueL+2,x
.010c0a	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c0c	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c0e	75 22		adc $22,x		adc 	EXSValueH+2,x
.010c10	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c12					_BinaryMultiply_NoAdd:
.010c12	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010c14	66 08		ror $08			ror 	DTemp1
.010c16	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010c18	36 22		rol $22,x		rol 	EXSValueH+2,x
.010c1a	80 dc		bra $010bf8		bra 	_BinaryMultiply_Loop 				; go round again.
.010c1c					_BinaryMultiply_Exit:
.010c1c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010c1d					Function_Len:
.010c1d	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010c20	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c23	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010c26	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010c28	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010c2b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010c2e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010c30	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c32	60		rts				rts
.010c33					Function_Abs:
.010c33	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010c36	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c39	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010c3c	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010c3e	30 07		bmi $010c47			bmi 	_FAbsNegative 				; negate it if negative
.010c40	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010c42	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010c44	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c46	60		rts				rts
.010c47					_FAbsNegative:
.010c47	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010c48	a9 00 00	lda #$0000			lda 	#0
.010c4b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010c4d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c4f	a9 00 00	lda #$0000			lda 	#0
.010c52	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010c54	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c56	60		rts				rts
.010c57					Function_Sgn:
.010c57	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns integer
.010c5a	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010c5d	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010c60	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010c62	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c64	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010c66	30 07		bmi $010c6f			bmi 	_FSgnNegative 				; set to -1 if signed
.010c68	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010c6a	f0 02		beq $010c6e			beq 	_FSgnExit
.010c6c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010c6e					_FSgnExit:
.010c6e	60		rts				rts
.010c6f					_FSgnNegative:
.010c6f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010c72	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c74	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c76	60		rts				rts
.010c77					Function_Random:
.010c77	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010c7a	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger
.010c7d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010c7f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010c81	d0 0a		bne $010c8d			bne 	_Rnd_NotZero
.010c83	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010c86	85 10		sta $10				sta 	DRandom
.010c88	a9 ea 00	lda #$00ea			lda 	#$EA
.010c8b	85 12		sta $12				sta 	DRandom+2
.010c8d					_Rnd_NotZero:
.010c8d	20 98 0c	jsr $010c98			jsr 	_Rnd_Process 				; call randomiser twice
.010c90	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c92	20 98 0c	jsr $010c98			jsr 	_Rnd_Process
.010c95	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c97	60		rts				rts
.010c98					_Rnd_Process:
.010c98	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010c9a	26 12		rol $12				rol 	DRandom+2
.010c9c	90 0e		bcc $010cac			bcc 	_Rnd_Exit
.010c9e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010ca0	49 54 d4	eor #$d454			eor 	#$D454
.010ca3	85 10		sta $10				sta 	DRandom
.010ca5	a5 12		lda $12				lda 	DRandom+2
.010ca7	49 d5 55	eor #$55d5			eor 	#$55D5
.010caa	85 12		sta $12				sta 	DRandom+2
.010cac					_Rnd_Exit:
.010cac	a5 10		lda $10				lda 	DRandom
.010cae	45 12		eor $12				eor 	DRandom+2
.010cb0	60		rts				rts
.010cb1					Function_Chr:
.010cb1	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string
.010cb4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010cb7	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010cba	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010cbd	d0 12		bne $010cd1			bne 	_FCHBad
.010cbf	48		pha				pha  								; save char # on stack
.010cc0	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010cc3	20 03 06	jsr $010603			jsr 	StringTempAllocate
.010cc6	68		pla				pla 								; restore character number
.010cc7	20 2f 06	jsr $01062f			jsr 	StringWriteCharacter 		; write it out.
.010cca	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010ccc	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010cce	74 20		stz $20,x			stz 	EXSValueH+0,x
.010cd0	60		rts				rts
.010cd1					_FCHBad:
.010cd1	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010cd4	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010cdc	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010ce9					Function_Asc:
.010ce9	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010cec	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010cef	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010cf2	a8		tay				tay 								; string address in Y
.010cf3	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010cf6	29 ff 00	and #$00ff			and 	#$00FF
.010cf9	f0 0b		beq $010d06			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010cfb	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010cfe	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010d01	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d03	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d05	60		rts				rts
.010d06					_FASBad:
.010d06	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010d09	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010d11	65 20 66 6f 72 20 61 73 63 28 29 00
.010d1d					Function_SPC:
.010d1d	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string
.010d20	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010d23	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010d26	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d29	d0 17		bne $010d42			bne 	_FSPBad
.010d2b	48		pha				pha 								; save length
.010d2c	20 03 06	jsr $010603			jsr 	StringTempAllocate 			; allocate character space
.010d2f	7a		ply				ply 								; get count in Y
.010d30	f0 09		beq $010d3b			beq 	_FSPExit 					; if zero, just empty string
.010d32					_FSPCopy:
.010d32	a9 20 00	lda #$0020			lda 	#" "						; space character
.010d35	20 2f 06	jsr $01062f			jsr 	StringWriteCharacter 		; write it out.
.010d38	88		dey				dey
.010d39	d0 f7		bne $010d32			bne 	_FSPCopy	 				; do it Y times
.010d3b					_FSPExit:
.010d3b	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010d3d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d3f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d41	60		rts				rts
.010d42					_FSPBad:
.010d42	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010d45	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010d4d	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010d59					Function_LEFT:
.010d59	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.010d5c	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d5f	48		pha				pha 								; save string on stack.
.010d60	20 92 05	jsr $010592			jsr 	ExpectComma 				; get count
.010d63	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d66	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d69	d0 6d		bne $010dd8			bne 	FNStringParameter
.010d6b	85 08		sta $08				sta 	DTemp1 						; save count.
.010d6d	20 89 05	jsr $010589			jsr 	ExpectRightBracket
.010d70	7a		ply				ply 								; Y points to string.
.010d71	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010d74	29 ff 00	and #$00ff			and 	#$00FF
.010d77	f0 52		beq $010dcb			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010d79	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010d7b	f0 55		beq $010dd2			beq 	FNStringY 					; return string in Y if current len = required len.
.010d7d	90 53		bcc $010dd2			bcc 	FNStringY 					; if current < required return whole thing.
.010d7f	c8		iny				iny 								; take from here - start of string
.010d80	80 33		bra $010db5			bra 	FNDTemp1Characters
.010d82					Function_RIGHT:
.010d82	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.010d85	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d88	48		pha				pha 								; save string on stack.
.010d89	20 92 05	jsr $010592			jsr 	ExpectComma 				; get count
.010d8c	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d8f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d92	d0 44		bne $010dd8			bne 	FNStringParameter
.010d94	85 08		sta $08				sta 	DTemp1 						; save count.
.010d96	20 89 05	jsr $010589			jsr 	ExpectRightBracket
.010d99	7a		ply				ply 								; Y points to string.
.010d9a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010d9d	29 ff 00	and #$00ff			and 	#$00FF
.010da0	f0 29		beq $010dcb			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010da2	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010da4	f0 2c		beq $010dd2			beq 	FNStringY 					; return string in Y if current len = required len.
.010da6	90 2a		bcc $010dd2			bcc 	FNStringY 					; if current < required return whole thing.
.010da8	38		sec				sec 								; current-required is the number to skip
.010da9	e5 08		sbc $08				sbc 	DTemp1
.010dab	85 0a		sta $0a				sta 	DTemp1+2
.010dad	98		tya				tya
.010dae	18		clc				clc
.010daf	65 0a		adc $0a				adc 	DTemp1+2
.010db1	a8		tay				tay
.010db2	c8		iny				iny 								; +1 for the count.
.010db3	80 00		bra $010db5			bra 	FNDTemp1Characters
.010db5					FNDTemp1Characters:
.010db5	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010db7	f0 12		beq $010dcb			beq 	FNStringEmpty 				; if zero, return empty string.
.010db9	20 03 06	jsr $010603			jsr 	StringTempAllocate
.010dbc	48		pha				pha 								; save the address
.010dbd					_FND1Loop:
.010dbd	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010dc0	20 2f 06	jsr $01062f			jsr 	StringWriteCharacter
.010dc3	c8		iny				iny
.010dc4	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010dc6	d0 f5		bne $010dbd			bne 	_FND1Loop
.010dc8	7a		ply				ply 								; string address in Y
.010dc9	80 07		bra $010dd2			bra 	FNStringY
.010dcb					FNStringEmpty:
.010dcb	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010dce	20 03 06	jsr $010603			jsr 	StringTempAllocate 			; put address of it in Y
.010dd1	a8		tay				tay
.010dd2					FNStringY:
.010dd2	98		tya				tya
.010dd3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010dd5	74 22		stz $22,x			stz 	EXSValueH+2,x
.010dd7	60		rts				rts
.010dd8					FNStringParameter:
.010dd8	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010ddb	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010de3	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010df0					Function_MID:
.010df0	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.010df3	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010df6	48		pha				pha 								; save string on stack.
.010df7	20 92 05	jsr $010592			jsr 	ExpectComma 				; get offset (n)
.010dfa	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010dfd	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e00	d0 d6		bne $010dd8			bne 	FNStringParameter
.010e02	c9 00 00	cmp #$0000			cmp 	#0
.010e05	f0 d1		beq $010dd8			beq 	FNStringParameter 			; or zero
.010e07	48		pha				pha 								; save start position on stack.
.010e08	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010e0b	85 08		sta $08				sta 	DTemp1
.010e0d	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010e0f	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010e12	d0 0e		bne $010e22			bne 	_FMINoThird
.010e14	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010e16	e6 06		inc $06				inc 	DCodePtr
.010e18	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010e1b	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e1e	d0 b8		bne $010dd8			bne 	FNStringParameter
.010e20	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010e22					_FMINoThird:
.010e22	20 89 05	jsr $010589			jsr 	ExpectRightBracket
.010e25	68		pla				pla 								; get offset position
.010e26	85 0c		sta $0c				sta 	DTemp2
.010e28	7a		ply				ply 								; get address of string in Y
.010e29	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010e2c	29 ff 00	and #$00ff			and 	#$00FF
.010e2f	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010e31	90 98		bcc $010dcb			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010e33	38		sec				sec 								; calculate number of characters left after
.010e34	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010e36	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010e37	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010e39	b0 02		bcs $010e3d			bcs 	_FMISufficient
.010e3b	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010e3d					_FMISufficient:
.010e3d	98		tya				tya 								; get address
.010e3e	18		clc				clc
.010e3f	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010e41	a8		tay				tay 								; put in Y
.010e42	82 70 ff	brl $010db5			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010e45					Function_Peek:
.010e45	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010e48	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e4b	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010e4e	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e50	84 0a		sty $0a				sty 	DTemp1+2
.010e52	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e55	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e57	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010e5a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e5c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e5e	60		rts				rts
.010e5f					Function_Deek:
.010e5f	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010e62	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e65	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010e68	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e6a	84 0a		sty $0a				sty 	DTemp1+2
.010e6c	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e6f	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e71	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e73	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e75	60		rts				rts
.010e76					Function_Leek:
.010e76	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010e79	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e7c	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check )
.010e7f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010e81	84 0a		sty $0a				sty 	DTemp1+2
.010e83	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e86	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e88	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e8a	c8		iny				iny
.010e8b	c8		iny				iny
.010e8c	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e8e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010e90	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010e91					Function_VAL:
.010e91	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns an integer
.010e94	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e97	48		pha				pha 								; put string address on stack.
.010e98	20 a8 0e	jsr $010ea8			jsr 	VALGetBase 					; process , base (shared with STR$())
.010e9b	7a		ply				ply 								; get string address back
.010e9c	da		phx				phx 								; save X on stack
.010e9d	aa		tax				tax 								; base in X
.010e9e	98		tya				tya 								; address in A
.010e9f	20 e2 0e	jsr $010ee2			jsr 	StringToInteger
.010ea2	fa		plx				plx 								; restore X
.010ea3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ea5	94 20		sty $20,x			sty 	EXSValueH+0,x
.010ea7	60		rts				rts
.010ea8					VALGetBase:
.010ea8	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010eaa	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010ead	f0 07		beq $010eb6			beq 	_VGBAlternate
.010eaf	20 89 05	jsr $010589			jsr 	ExpectRightBracket			; expect ), and return 10.
.010eb2	a9 0a 00	lda #$000a			lda 	#10
.010eb5	60		rts				rts
.010eb6					_VGBAlternate:
.010eb6	20 92 05	jsr $010592			jsr 	ExpectComma 				; skip comma.
.010eb9	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010ebc	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010ebf	d0 0e		bne $010ecf			bne 	_VGBBadBase
.010ec1	c9 02 00	cmp #$0002			cmp 	#2
.010ec4	90 09		bcc $010ecf			bcc 	_VGBBadBase
.010ec6	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010ec9	b0 04		bcs $010ecf			bcs 	_VGBBadBase
.010ecb	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; get right bracket and return.
.010ece	60		rts				rts
.010ecf					_VGBBadBase:
.010ecf	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010ed2	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010eda	65 72 20 42 61 73 65 00
.010ee2					StringToInteger:
.010ee2	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010ee4	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ee6	29 ff 00	and #$00ff			and 	#$00FF
.010ee9	85 26		sta $26				sta 	DTemp3+2
.010eeb	f0 6e		beq $010f5b			beq 	_STIError 					; if length zero it's bad.
.010eed	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010eef	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010ef1	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010ef3	64 0a		stz $0a				stz 	DTemp1+2
.010ef5	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010ef7	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010efa	48		pha				pha 								; push on stack
.010efb	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010efe	d0 06		bne $010f06			bne 	_STILoop
.010f00	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010f02	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010f04	f0 55		beq $010f5b			beq 	_STIError 					; if only - then error.
.010f06					_STILoop:
.010f06	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010f08	20 7a 0f	jsr $010f7a			jsr 	MultiplyTemp1ByA
.010f0b	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010f0d	29 ff 00	and #$00ff			and 	#$00FF
.010f10	20 6b 0f	jsr $010f6b			jsr 	ConvertUpperCase	 		; make U/C
.010f13	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010f16	90 43		bcc $010f5b			bcc 	_STIError
.010f18	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010f1b	90 0e		bcc $010f2b			bcc 	_STIOkay1
.010f1d	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010f20	90 39		bcc $010f5b			bcc 	_STIError
.010f22	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010f25	b0 34		bcs $010f5b			bcs 	_STIError
.010f27	18		clc				clc 								; shift to correct range.
.010f28	69 09 00	adc #$0009			adc 	#9
.010f2b					_STIOkay1:
.010f2b	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010f2e	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010f30	b0 29		bcs $010f5b			bcs 	_STIError
.010f32	18		clc				clc 								; add A to DTemp1
.010f33	65 08		adc $08				adc 	DTemp1
.010f35	85 08		sta $08				sta 	DTemp1
.010f37	90 02		bcc $010f3b			bcc 	_STINoCarry
.010f39	e6 0a		inc $0a				inc 	DTemp1+2
.010f3b					_STINoCarry:
.010f3b	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010f3d	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010f3f	d0 c5		bne $010f06			bne 	_STILoop 					; loop back.
.010f41	68		pla				pla 								; get optional minus bac
.010f42	c9 2d 00	cmp #$002d			cmp 	#"-"
.010f45	d0 0f		bne $010f56			bne 	_STINotNegative 			; handle the negative character
.010f47	38		sec				sec 								; negate DTemp1
.010f48	a9 00 00	lda #$0000			lda 	#0
.010f4b	e5 08		sbc $08				sbc 	DTemp1
.010f4d	85 08		sta $08				sta 	DTemp1
.010f4f	a9 00 00	lda #$0000			lda 	#0
.010f52	e5 0a		sbc $0a				sbc 	DTemp1+2
.010f54	85 0a		sta $0a				sta 	DTemp1+2
.010f56					_STINotNegative:
.010f56	a5 08		lda $08				lda 	DTemp1 						; get the result
.010f58	a4 0a		ldy $0a				ldy 	DTemp1+2
.010f5a	60		rts				rts
.010f5b					_STIError:
.010f5b	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>010f5e	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010f66	74 61 6e 74 00
.010f6b					ConvertUpperCase:
.010f6b	c9 61 00	cmp #$0061			cmp 	#'a'
.010f6e	90 09		bcc $010f79			bcc 	_CUCExit
.010f70	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010f73	b0 04		bcs $010f79			bcs 	_CUCExit
.010f75	38		sec				sec
.010f76	e9 20 00	sbc #$0020			sbc 	#32
.010f79					_CUCExit:
.010f79	60		rts				rts
.010f7a					MultiplyTemp1ByA:
.010f7a					_MTGeneral:
.010f7a	da		phx				phx
.010f7b	aa		tax				tax 								; multiplier in X
.010f7c	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010f7e	85 0c		sta $0c				sta 	DTemp2
.010f80	a5 0a		lda $0a				lda 	DTemp1+2
.010f82	85 0e		sta $0e				sta 	DTemp2+2
.010f84	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010f86	64 0a		stz $0a				stz 	DTemp1+2
.010f88	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010f8b					_MTLoop:
.010f8b	8a		txa				txa 								; shift X right into C
.010f8c	4a		lsr a				lsr 	a
.010f8d	aa		tax				tax
.010f8e	90 10		bcc $010fa0			bcc 	_MTNoAdd
.010f90	18		clc				clc
.010f91	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010f93	65 0c		adc $0c				adc 	DTemp2
.010f95	85 08		sta $08				sta 	DTemp1
.010f97	a5 0a		lda $0a				lda 	DTemp1+2
.010f99	65 0e		adc $0e				adc 	DTemp2+2
.010f9b	85 0a		sta $0a				sta 	DTemp1+2
.010f9d	90 01		bcc $010fa0			bcc 	_MTNoAdd
.010f9f	c8		iny				iny
.010fa0					_MTNoAdd:
.010fa0	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010fa2	26 0e		rol $0e				rol 	DTemp2+2
.010fa4	90 01		bcc $010fa7			bcc 	_MTNoOverflow
.010fa6	c8		iny				iny
.010fa7					_MTNoOverflow:
.010fa7	8a		txa				txa 								; until multiplier is zero.
.010fa8	d0 e1		bne $010f8b			bne 	_MTLoop
.010faa	98		tya				tya
.010fab	18		clc				clc
.010fac	69 ff ff	adc #$ffff			adc 	#$FFFF
.010faf	fa		plx				plx 								; restore X
.010fb0	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010fb1					Function_Str:
.010fb1	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.010fb4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010fb7	48		pha				pha 								; save YA on the stack
.010fb8	5a		phy				phy
.010fb9	20 a8 0e	jsr $010ea8			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fbc	85 14		sta $14				sta 	DSignCount
.010fbe	7a		ply				ply 								; YA is the number
.010fbf	68		pla				pla
.010fc0	da		phx				phx
.010fc1	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010fc3	20 cc 0f	jsr $010fcc			jsr 	ConvertToString 			; convert it to a string.
.010fc6	fa		plx				plx 								; restore X
.010fc7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010fc9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010fcb	60		rts				rts
.010fcc					ConvertToString:
.010fcc	48		pha				pha
.010fcd	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010fd0	20 03 06	jsr $010603			jsr 	StringTempAllocate 			; allocate space for return string.
.010fd3	68		pla				pla
.010fd4					ConvertToStringAlreadyAllocated:
.010fd4	da		phx				phx 								; save X (base)
.010fd5	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010fd7	84 26		sty $26				sty 	DTemp3+2
.010fd9	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010fdb	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010fdd	10 15		bpl $010ff4			bpl 	_CTSNotNegative
.010fdf	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010fe2	20 5e 10	jsr $01105e			jsr 	CTSOutputA
.010fe5	38		sec				sec 								; negate DTemp3 which is the number
.010fe6	a9 00 00	lda #$0000			lda 	#0
.010fe9	e5 24		sbc $24				sbc 	DTemp3
.010feb	85 24		sta $24				sta 	DTemp3
.010fed	a9 00 00	lda #$0000			lda 	#0
.010ff0	e5 26		sbc $26				sbc 	DTemp3+2
.010ff2	85 26		sta $26				sta 	DTemp3+2
.010ff4					_CTSNotNegative:
.010ff4	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010ff7	48		pha				pha
.010ff8	a9 00 00	lda #$0000			lda 	#0
.010ffb	48		pha				pha
.010ffc	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010ffe	85 08		sta $08				sta 	DTemp1
.011000	64 0a		stz $0a				stz 	DTemp1+2
.011002					_CTSMultiplySubtractor:
.011002	38		sec				sec 								; check number vs subtractor
.011003	a5 24		lda $24				lda 	DTemp3
.011005	e5 08		sbc $08				sbc 	DTemp1
.011007	a5 26		lda $26				lda 	DTemp3+2
.011009	e5 0a		sbc $0a				sbc 	DTemp1+2
.01100b	90 0f		bcc $01101c			bcc		_CTSScaledUp 				; if >= then scaled up.
.01100d	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.01100f	48		pha				pha
.011010	a5 0a		lda $0a				lda 	DTemp1+2
.011012	48		pha				pha
.011013	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011015	20 7a 0f	jsr $010f7a			jsr 	MultiplyTemp1ByA
.011018	b0 02		bcs $01101c			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01101a	80 e6		bra $011002			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.01101c					_CTSScaledUp:
.01101c	7a		ply				ply 								; YA contains the previous divider.
.01101d	68		pla				pla
.01101e	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011021	d0 05		bne $011028			bne 	_CTSHasDigit
.011023	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011026	f0 20		beq $011048			beq 	_CTSExit
.011028					_CTSHasDigit:
.011028	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01102a	84 0e		sty $0e				sty 	DTemp2+2
.01102c	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.01102f					_CTSSubLoop:
.01102f	38		sec				sec 								; subtract subtractor from number
.011030	a5 24		lda $24				lda 	DTemp3
.011032	e5 0c		sbc $0c				sbc 	DTemp2
.011034	a8		tay				tay 								; intermediate in Y
.011035	a5 26		lda $26				lda 	DTemp3+2
.011037	e5 0e		sbc $0e				sbc 	DTemp2+2
.011039	90 07		bcc $011042			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.01103b	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01103d	84 24		sty $24				sty 	DTemp3
.01103f	e8		inx				inx 								; one more subtraction
.011040	80 ed		bra $01102f			bra 	_CTSSubLoop 				; try it again.
.011042					_CTSFinishedSubtracting:
.011042	8a		txa				txa 								; convert to ASCII.
.011043	20 51 10	jsr $011051			jsr 	CTSOutputHexDigit 			; write that out.
.011046	80 d4		bra $01101c			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011048					_CTSExit:
.011048	a5 24		lda $24				lda 	DTemp3 						; output last digit
.01104a	20 51 10	jsr $011051			jsr 	CTSOutputHexDigit
.01104d	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.01104f	fa		plx				plx 								; restore X.
.011050	60		rts				rts
.011051					CTSOutputHexDigit:
.011051	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.011054	90 04		bcc $01105a			bcc 	_CTSNotLetter
.011056	18		clc				clc
.011057	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.01105a					_CTSNotLetter:
.01105a	18		clc				clc
.01105b	69 30 00	adc #$0030			adc 	#48
.01105e					CTSOutputA:
.01105e	5a		phy				phy 								; save Y, set Y to current pointer
.01105f	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011061	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.011064	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011066	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011068	1a		inc a				inc 	a
.011069	92 18		sta ($18)			sta 	(DStartTempString)
.01106b	c2 20		rep #$20			rep 	#$20
.01106d	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.01106f	7a		ply				ply 								; restore Y and exit.
.011070	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011071					Function_INSTR:
.011071	20 bb 05	jsr $0105bb			jsr 	ResetTypeInteger 			; returns a integer
.011074	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.011077	48		pha				pha 								; save string to search
.011078	20 92 05	jsr $010592			jsr 	ExpectComma
.01107b	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.01107e	20 89 05	jsr $010589			jsr 	ExpectRightBracket
.011081	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011083	68		pla				pla
.011084	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011086	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011088	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.01108a	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.01108c	38		sec				sec
.01108d	b2 0c		lda ($0c)			lda 	(DTemp2)
.01108f	f2 08		sbc ($08)			sbc		(DTemp1)
.011091	c2 20		rep #$20			rep 	#$20
.011093	90 2c		bcc $0110c1			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011095	29 ff 00	and #$00ff			and 	#$00FF
.011098	1a		inc a				inc 	a
.011099	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.01109b	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.01109d	29 ff 00	and #$00ff			and 	#$00FF
.0110a0	f0 22		beq $0110c4			beq 	_FINSError
.0110a2					_FINSLoop:
.0110a2	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0110a4	1a		inc a				inc 	a
.0110a5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0110a7	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0110a9	29 ff 00	and #$00ff			and 	#$00FF
.0110ac	a8		tay				tay									; start comparing at index 1.
.0110ad					_FINSCompare:
.0110ad	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0110af	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0110b1	29 ff 00	and #$00ff			and 	#$00FF
.0110b4	d0 05		bne $0110bb			bne 	_FINSNext
.0110b6	88		dey				dey
.0110b7	d0 f4		bne $0110ad			bne 	_FINSCompare
.0110b9	80 08		bra $0110c3			bra 	_FINSExit
.0110bb					_FINSNext:
.0110bb	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0110bd	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0110bf	d0 e1		bne $0110a2			bne 	_FINSLoop
.0110c1					_FINSFail:
.0110c1	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0110c3					_FINSExit:
.0110c3	60		rts				rts
.0110c4					_FINSError:
.0110c4	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0110c7	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0110cf	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0110d8					Function_UPPER:
.0110d8	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.0110db	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.0110de	48		pha				pha
.0110df	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; close call.
.0110e2	20 03 06	jsr $010603			jsr		StringTempAllocate 			; allocate memory for it
.0110e5	68		pla				pla
.0110e6	20 3d 06	jsr $01063d			jsr 	StringCreateCopy 			; create a copy of it.
.0110e9	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0110eb	95 00		sta $00,x			sta 	EXSValueL+0,x
.0110ed	a8		tay				tay 								; address in Y
.0110ee	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110f0	da		phx				phx 								; save X
.0110f1	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0110f3	29 ff 00	and #$00ff			and 	#$00FF
.0110f6	f0 20		beq $011118			beq 	_FUPExit
.0110f8	aa		tax				tax 								; put in X
.0110f9					_FUPLoop:
.0110f9	c8		iny				iny 								; increment and load character
.0110fa	b9 00 00	lda $0000,y			lda 	$0000,y
.0110fd	29 ff 00	and #$00ff			and 	#$00FF
.011100	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011103	90 10		bcc $011115			bcc 	_FUPNoChange
.011105	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011108	b0 0b		bcs $011115			bcs 	_FUPNoChange
.01110a	38		sec				sec 								; shift case
.01110b	e9 20 00	sbc #$0020			sbc 	#32
.01110e	e2 20		sep #$20			sep 	#$20 						; write back
.011110	99 00 00	sta $0000,y			sta 	$0000,y
.011113	c2 20		rep #$20			rep 	#$20
.011115					_FUPNoChange:
.011115	ca		dex				dex 								; do X times
.011116	d0 e1		bne $0110f9			bne 	_FUPLoop
.011118					_FUPExit:
.011118	fa		plx				plx 								; restore X
.011119	60		rts				rts
.01111a					Function_LOWER:
.01111a	20 c3 05	jsr $0105c3			jsr 	ResetTypeString 			; returns a string.
.01111d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.011120	48		pha				pha
.011121	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; close call.
.011124	20 03 06	jsr $010603			jsr		StringTempAllocate 			; allocate memory for it
.011127	68		pla				pla
.011128	20 3d 06	jsr $01063d			jsr 	StringCreateCopy 			; create a copy of it.
.01112b	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01112d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01112f	a8		tay				tay 								; address in Y
.011130	74 20		stz $20,x			stz 	EXSValueH+0,x
.011132	da		phx				phx 								; save X
.011133	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011135	29 ff 00	and #$00ff			and 	#$00FF
.011138	f0 20		beq $01115a			beq 	_FLOExit
.01113a	aa		tax				tax 								; put in X
.01113b					_FLOLoop:
.01113b	c8		iny				iny 								; increment and load character
.01113c	b9 00 00	lda $0000,y			lda 	$0000,y
.01113f	29 ff 00	and #$00ff			and 	#$00FF
.011142	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011145	90 10		bcc $011157			bcc 	_FLONoChange
.011147	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01114a	b0 0b		bcs $011157			bcs 	_FLONoChange
.01114c	18		clc				clc 								; shift case
.01114d	69 20 00	adc #$0020			adc 	#32
.011150	e2 20		sep #$20			sep 	#$20 						; write back
.011152	99 00 00	sta $0000,y			sta 	$0000,y
.011155	c2 20		rep #$20			rep 	#$20
.011157					_FLONoChange:
.011157	ca		dex				dex 								; do X times
.011158	d0 e1		bne $01113b			bne 	_FLOLoop
.01115a					_FLOExit:
.01115a	fa		plx				plx 								; restore X
.01115b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.01115c					Function_Let:
.01115c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01115e	48		pha				pha  								; save on stack for later.
.01115f	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.011162	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.011164	b0 1c		bcs $011182			bcs 	_FLetFound 					; skip if found.
.011166	68		pla				pla 								; get and push the first token again.
.011167	48		pha				pha
.011168	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.01116b	d0 57		bne $0111c4			bne 	_FLError					; arrays, so this causes an error.
.01116d	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01116f	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011172	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011175	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011177					_FLSkipToken:
.011177	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011179	e6 06		inc $06				inc 	DCodePtr
.01117b	e6 06		inc $06				inc 	DCodePtr
.01117d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011180	d0 f5		bne $011177			bne 	_FLSkipToken
.011182					_FLetFound:
.011182	68		pla				pla 								; get and save the first token.
.011183	48		pha				pha
.011184	a8		tay				tay 								; put it in Y
.011185	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011188	f0 07		beq $011191			beq 	_FLetNotArray
.01118a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.01118c	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.01118f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011191					_FLetNotArray:
.011191	7a		ply				ply 								; get the first token into Y
.011192	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011194	48		pha				pha
.011195	5a		phy				phy 								; save the first token on the stack.
.011196	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011199	20 6f 05	jsr $01056f			jsr 	ExpectToken
.01119c	68		pla				pla 								; restore the first token.
.01119d	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0111a0	d0 0f		bne $0111b1			bne 	_FLetString 				; skip if string.
.0111a2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.0111a5	7a		ply				ply 								; get address in Y
.0111a6	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0111a8	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0111ab	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0111ad	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0111b0	60		rts				rts
.0111b1					_FLetString:
.0111b1	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.0111b4	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0111b6	20 5e 06	jsr $01065e			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0111b9	7a		ply				ply 								; get address
.0111ba	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0111bd	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.0111c0	99 02 00	sta $0002,y			sta 	$0002,y
.0111c3	60		rts				rts
.0111c4					_FLError:
.0111c4	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0111c7	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0111cf	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.0111d7					Command_List:
.0111d7	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.0111da	20 03 06	jsr $010603		jsr 	StringTempAllocate
.0111dd	85 30		sta $30			sta 	DListBuffer						; save buffer.
.0111df	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.0111e1	64 2e		stz $2e			stz 	DIndent2
.0111e3	64 32		stz $32			stz 	DTemp4+0 						; low number
.0111e5	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0111e8	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0111ea	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0111ec	f0 28		beq $011216		beq 	_CLIList
.0111ee	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.0111f1	f0 23		beq $011216		beq 	_CLIList
.0111f3	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.0111f6	c0 00 00	cpy #$0000		cpy 	#0
.0111f9	d0 18		bne $011213		bne 	_CLIError
.0111fb	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0111fd	85 34		sta $34			sta 	DTemp4+2
.0111ff	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011201	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.011204	d0 10		bne $011216		bne 	_CLIList
.011206	20 92 05	jsr $010592		jsr 	ExpectComma 					; skip comma
.011209	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.01120c	85 34		sta $34			sta 	DTemp4+2
.01120e	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011211	f0 03		beq $011216		beq 	_CLIList
.011213					_CLIError:
.011213	82 49 f3	brl $01055f		brl 	SyntaxError
.011216					_CLIList:
.011216	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011219	18		clc			clc
.01121a	65 02		adc $02			adc 	DBaseAddress
.01121c	a8		tay			tay 									; put in Y
.01121d					_CLINextLine:
.01121d	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011220	f0 29		beq $01124b		beq 	_CLIExit
.011222	20 b3 13	jsr $0113b3		jsr 	ScanIndent  					; scan for formatting.
.011225	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011228	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.01122a	90 14		bcc $011240		bcc 	_CLIFollowLink
.01122c	c5 34		cmp $34			cmp 	DTemp4+2
.01122e	f0 02		beq $011232		beq 	_CLIShowLine
.011230	b0 0e		bcs $011240		bcs 	_CLIFollowLink
.011232					_CLIShowLine:
.011232	a5 30		lda $30			lda 	DListBuffer
.011234	20 4e 12	jsr $01124e		jsr 	Detokenise 						; detokenise it
.011237	5a		phy			phy
.011238	a8		tay			tay 									; print buffer out
.011239	20 e9 05	jsr $0105e9		jsr 	PrintBasicString
.01123c	20 88 1b	jsr $011b88		jsr 	HWNewLine
.01123f	7a		ply			ply 									; get address
.011240					_CLIFollowLink:
.011240	98		tya			tya 									; follow link
.011241	18		clc			clc
.011242	79 00 00	adc $0000,y		adc 	$0000,y
.011245	a8		tay			tay
.011246	20 a4 1b	jsr $011ba4		jsr 	HWCheckBreak 					; break key pressed.
.011249	f0 d2		beq $01121d		beq 	_CLINextLine
.01124b					_CLIExit:
.01124b	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01124d	60		rts			rts
.01124e					Detokenise:
.01124e	48		pha			pha
.01124f	da		phx			phx
.011250	5a		phy			phy
.011251	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011253	1a		inc a			inc 	a
.011254	85 1a		sta $1a			sta 	DCurrentTempString
.011256	64 1c		stz $1c			stz		DConstantShift
.011258	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.01125b	92 18		sta ($18)		sta 	(DStartTempString)
.01125d	5a		phy			phy 									; save Y
.01125e	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.011261	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011264	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011267	20 d4 0f	jsr $010fd4		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01126a	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01126c	c5 2e		cmp $2e			cmp 	DIndent2
.01126e	90 02		bcc $011272		bcc 	_DTKSmaller
.011270	a5 2e		lda $2e			lda 	DIndent2
.011272					_DTKSmaller:
.011272	0a		asl a			asl 	a
.011273	69 06 00	adc #$0006		adc 	#6
.011276	85 08		sta $08			sta 	DTemp1
.011278					_DTKPadLineNo:
.011278	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.01127b	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.01127e	b2 18		lda ($18)		lda 	(DStartTempString)
.011280	29 ff 00	and #$00ff		and 	#$00FF
.011283	c5 08		cmp $08			cmp 	DTemp1
.011285	d0 f1		bne $011278		bne 	_DTKPadLineNo
.011287	68		pla			pla 									; get pointer
.011288	18		clc			clc 									; point to start of line
.011289	69 04 00	adc #$0004		adc 	#4
.01128c	a8		tay			tay 									; put back in Y.
.01128d					_DTKMainLoop:
.01128d	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011290	d0 04		bne $011296		bne 	_DTKNotZero 					; if zero, return.
.011292	7a		ply			ply
.011293	fa		plx			plx
.011294	68		pla			pla
.011295	60		rts			rts
.011296					_DTKNotZero:
.011296	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011299	b0 1c		bcs $0112b7		bcs 	_DTKNotString
.01129b	5a		phy			phy										; save token address on stack.
.01129c	c8		iny			iny 									; skip first token
.01129d	c8		iny			iny
.01129e	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0112a1	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.0112a4	98		tya			tya 									; copy the string out.
.0112a5	20 3d 06	jsr $01063d		jsr 	StringCreateCopy
.0112a8	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0112ab	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.0112ae	68		pla			pla 									; get token, which is its own offset
.0112af	a8		tay			tay
.0112b0	18		clc			clc
.0112b1	79 00 00	adc $0000,y		adc 	$0000,y
.0112b4	a8		tay			tay
.0112b5	80 d6		bra $01128d		bra 	_DTKMainLoop
.0112b7					_DTKNotString:
.0112b7	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0112ba	b0 09		bcs $0112c5		bcs 	_DTKNotShift
.0112bc	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0112bf	85 1c		sta $1c			sta 	DConstantShift
.0112c1	c8		iny			iny 									; skip token.
.0112c2	c8		iny			iny
.0112c3	80 c8		bra $01128d		bra 	_DTKMainLoop
.0112c5					_DTKNotShift:
.0112c5	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.0112c8	b0 07		bcs $0112d1		bcs 	_DTKNotKeyword
.0112ca	c8		iny			iny 									; skip over token
.0112cb	c8		iny			iny
.0112cc	20 4b 13	jsr $01134b		jsr 	_DTKDecodeKeyword 				; decode it.
.0112cf	80 bc		bra $01128d		bra 	_DTKMainLoop
.0112d1					_DTKNotKeyword:
.0112d1	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0112d4	b0 18		bcs $0112ee		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0112d6	5a		phy			phy 									; save pointer
.0112d7	38		sec			sec  									; shift it in the range 0-32767
.0112d8	e9 00 40	sbc #$4000		sbc 	#$4000
.0112db	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0112dc	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0112de	6a		ror a			ror 	a 								; rotate that into the constant value
.0112df	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0112e1	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0112e4	20 d4 0f	jsr $010fd4		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0112e7	64 1c		stz $1c			stz 	DConstantShift
.0112e9	7a		ply			ply 									; restore pointer
.0112ea	c8		iny			iny 									; skip token.
.0112eb	c8		iny			iny
.0112ec	80 9f		bra $01128d		bra 	_DTKMainLoop
.0112ee					_DTKIdentifier:
.0112ee	48		pha			pha 									; save token for typing at end
.0112ef					_DTKILoop:
.0112ef	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0112f2	20 1b 13	jsr $01131b		jsr 	_DTKIDecodeToken 				; decode it.
.0112f5	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0112f8	c8		iny			iny 									; skip it
.0112f9	c8		iny			iny
.0112fa	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0112fd	d0 f0		bne $0112ef		bne 	_DTKILoop
.0112ff	68		pla			pla 									; add $( as required.
.011300	48		pha			pha 									; comes from the first token.
.011301	29 00 20	and #$2000		and 	#IDTypeMask
.011304	f0 06		beq $01130c		beq 	_DTKINotString
.011306	a9 24 00	lda #$0024		lda 	#"$"
.011309	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.01130c					_DTKINotString:
.01130c	68		pla			pla
.01130d	29 00 10	and #$1000		and 	#IDArrayMask
.011310	f0 06		beq $011318		beq 	_DTKINotArray
.011312	a9 28 00	lda #$0028		lda 	#"("
.011315	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.011318					_DTKINotArray:
.011318	82 72 ff	brl $01128d		brl 	_DTKMainLoop
.01131b					_DTKIDecodeToken:
.01131b	5a		phy			phy
.01131c	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01131f	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011322					_DTKIDivide:
.011322	38		sec			sec
.011323	e9 2d 00	sbc #$002d		sbc 	#45
.011326	c8		iny			iny
.011327	b0 f9		bcs $011322		bcs 	_DTKIDivide
.011329	69 2d 00	adc #$002d		adc 	#45
.01132c	20 35 13	jsr $011335		jsr 	_DTKIOutA 						; output low.
.01132f	98		tya			tya
.011330	20 35 13	jsr $011335		jsr 	_DTKIOutA 						; output high
.011333	7a		ply			ply
.011334	60		rts			rts
.011335					_DTKIOutA:
.011335	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011338	f0 10		beq $01134a		beq 	_DTKIOutExit
.01133a	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01133d	90 04		bcc $011343		bcc 	_DTKIOutAlpha
.01133f	38		sec			sec  									; adjust for 0-9
.011340	e9 4b 00	sbc #$004b		sbc 	#$4B
.011343					_DTKIOutAlpha:
.011343	18		clc			clc										; adjust for A-Z
.011344	69 60 00	adc #$0060		adc 	#96
.011347	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.01134a					_DTKIOutExit:
.01134a	60		rts			rts
.01134b					_DTKDecodeKeyword:
.01134b	48		pha			pha
.01134c	da		phx			phx
.01134d	5a		phy			phy
.01134e	a8		tay			tay 									; save token ID in Y
.01134f	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011352	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011355	48		pha			pha 									; save this flag on a stack
.011356	5a		phy			phy 									; save the token ID
.011357	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.01135a	d0 19		bne $011375		bne 	_DTKNotSpecial1
.01135c	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01135e	88		dey			dey
.01135f	b9 00 00	lda $0000,y		lda 	$0000,y
.011362	29 ff 00	and #$00ff		and 	#$00FF
.011365	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011368	f0 0b		beq $011375		beq 	_DTKNotSpecial1
.01136a	c9 3a 00	cmp #$003a		cmp 	#":"
.01136d	f0 06		beq $011375		beq 	_DTKNotSpecial1
.01136f	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011372	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.011375					_DTKNotSpecial1:
.011375	68		pla			pla
.011376	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011379	a8		tay			tay 									; into Y.
.01137a	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01137d					_DTKDWorkThrough:
.01137d	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01137e	f0 0f		beq $01138f		beq 	_DTKDFound
.011380	86 08		stx $08			stx 	DTemp1
.011382	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.011386	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011389	18		clc			clc
.01138a	65 08		adc $08			adc 	DTemp1
.01138c	aa		tax			tax
.01138d	80 ee		bra $01137d		bra 	_DTKDWorkThrough
.01138f					_DTKDFound:
.01138f	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.011393	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011396	3a		dec a			dec 	a
.011397	a8		tay			tay 									; put in Y
.011398					_DTKOut:
.011398	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.01139c	29 ff 00	and #$00ff		and 	#$00FF
.01139f	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.0113a2	e8		inx			inx
.0113a3	88		dey			dey
.0113a4	d0 f2		bne $011398		bne 	_DTKOut
.0113a6	68		pla			pla 									; trailing space.
.0113a7	d0 06		bne $0113af		bne 	_DTKNotSpecial2
.0113a9	a9 20 00	lda #$0020		lda 	#" "
.0113ac	20 2f 06	jsr $01062f		jsr 	StringWriteCharacter
.0113af					_DTKNotSpecial2:
.0113af	7a		ply			ply
.0113b0	fa		plx			plx
.0113b1	68		pla			pla
.0113b2	60		rts			rts
.0113b3					ScanIndent:
.0113b3	48		pha			pha
.0113b4	5a		phy			phy
.0113b5	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0113b7	85 2e		sta $2e			sta 	DIndent2
.0113b9	98		tya			tya
.0113ba	18		clc			clc 									; point to code.
.0113bb	69 04 00	adc #$0004		adc 	#4
.0113be	a8		tay			tay
.0113bf					_SILoop:
.0113bf	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0113c2	f0 35		beq $0113f9		beq 	_SIExit
.0113c4	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.0113c7	b0 08		bcs $0113d1		bcs 	_SICheckKeyword
.0113c9	98		tya			tya 									; skip string.
.0113ca	18		clc			clc
.0113cb	79 00 00	adc $0000,y		adc 	$0000,y
.0113ce	a8		tay			tay
.0113cf	80 ee		bra $0113bf		bra 	_SILoop
.0113d1					_SICheckKeyword:
.0113d1	29 00 e0	and #$e000		and 	#$E000
.0113d4	c9 00 20	cmp #$2000		cmp 	#$2000
.0113d7	f0 04		beq $0113dd		beq 	_SIFoundKeyword
.0113d9					_SIAdvance:
.0113d9	c8		iny			iny 									; if not, loop round.
.0113da	c8		iny			iny
.0113db	80 e2		bra $0113bf		bra 	_SILoop
.0113dd					_SIFoundKeyword:
.0113dd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0113e0	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0113e3	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0113e6	f0 0d		beq $0113f5		beq 	_SIKeyPlus
.0113e8	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0113eb	d0 ec		bne $0113d9		bne 	_SIAdvance
.0113ed	c6 2c		dec $2c			dec 	DIndent
.0113ef	10 e8		bpl $0113d9		bpl 	_SIAdvance
.0113f1	64 2c		stz $2c			stz 	DIndent
.0113f3	80 e4		bra $0113d9		bra 	_SIAdvance
.0113f5					_SIKeyPlus:
.0113f5	e6 2c		inc $2c			inc 	DIndent
.0113f7	80 e0		bra $0113d9		bra 	_SIAdvance
.0113f9					_SIExit:
.0113f9	7a		ply			ply
.0113fa	68		pla			pla
.0113fb	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.0113fc					Function_PRINT:
.0113fc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0113fe	f0 33		beq $011433			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011400	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011403	f0 2e		beq $011433			beq 	_FPRExitCR
.011405	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011408	f0 23		beq $01142d			beq 	_FPRSkipLoop
.01140a	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.01140d	f0 1b		beq $01142a			beq 	_FPRNewLine
.01140f	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.011412	f0 11		beq $011425			beq 	_FPRTab
.011414					_FPRExpression:
.011414	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011417	b0 06		bcs $01141f			bcs 	_FPRHaveString
.011419	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01141c	20 cc 0f	jsr $010fcc			jsr 	ConvertToString
.01141f					_FPRHaveString:
.01141f	a8		tay				tay 								; print the basic String.
.011420	20 e9 05	jsr $0105e9			jsr 	PrintBASICString
.011423	80 d7		bra $0113fc			bra 	Function_Print 				; and go round again.
.011425					_FPRTab:
.011425	20 9d 1b	jsr $011b9d			jsr 	HWTab
.011428	80 03		bra $01142d			bra 	_FPRSkipLoop
.01142a					_FPRNewLine:
.01142a	20 88 1b	jsr $011b88			jsr 	HWNewLine
.01142d					_FPRSkipLoop:
.01142d	e6 06		inc $06				inc 	DCodePtr
.01142f	e6 06		inc $06				inc 	DCodePtr
.011431	80 c9		bra $0113fc			bra 	Function_Print
.011433					_FPRExitCR:
.011433	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011435	88		dey				dey
.011436	88		dey				dey
.011437	b9 00 00	lda $0000,y			lda 	$0000,y
.01143a	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01143d	f0 08		beq $011447			beq 	_FPRExit
.01143f	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.011442	f0 03		beq $011447			beq 	_FPRExit
.011444	20 88 1b	jsr $011b88			jsr 	HWNewLine 					; print a new line.
.011447					_FPRExit:
.011447	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011448					Function_IF:
.011448	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.01144b	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01144d	05 08		ora $08				ora 	DTemp1
.01144f	a8		tay				tay 								; success flag in Y.
.011450	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011452	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.011455	d0 32		bne $011489			bne 	_FIFExtended 				; if so, go to the extended IF.
.011457	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011459	e6 06		inc $06				inc 	DCodePtr
.01145b	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01145e	f0 0f		beq $01146f			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011460	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011462	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011465	90 21		bcc $011488			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011467	c9 00 c0	cmp #$c000			cmp 	#$C000
.01146a	b0 1c		bcs $011488			bcs 	_FIFContinue
.01146c	4c fe 16	jmp $0116fe			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01146f					_FIFEndOfLine:
.01146f	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011471	f0 15		beq $011488			beq 	_FIFContinue 				; if done so, continue.
.011473	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011476	90 06		bcc $01147e			bcc 	_FIFStringConstant
.011478	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.01147a	e6 06		inc $06				inc 	DCodePtr
.01147c	80 f1		bra $01146f			bra 	_FIFEndOfLine
.01147e					_FIFStringConstant:
.01147e	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011481	18		clc				clc
.011482	65 06		adc $06				adc 	DCodePtr
.011484	85 06		sta $06				sta 	DCodePtr
.011486	80 e7		bra $01146f			bra 	_FIFEndOfLine
.011488					_FIFContinue:
.011488	60		rts				rts
.011489					_FIFExtended:
.011489	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.01148b	e6 2a		inc $2a				inc 	DStack
.01148d	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.011490	a6 2a		ldx $2a				ldx 	DStack
.011492	95 00		sta $00,x			sta 	$00,x
.011494	98		tya				tya 								; see if the test was passed.
.011495	f0 01		beq $011498			beq 	_FIXSkip 					; if zero then it has failed.
.011497	60		rts				rts 								; test passed, so continue executing
.011498					_FIXSkip:
.011498	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.01149b	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.01149e	20 fe 14	jsr $0114fe			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0114a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0114a3	e6 06		inc $06				inc 	DCodePtr
.0114a5	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0114a8	d0 04		bne $0114ae			bne 	_FIXNoThrow
.0114aa	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0114ac	c6 2a		dec $2a				dec 	DStack
.0114ae					_FIXNoThrow:
.0114ae	60		rts				rts
.0114af					Handler_ELSE:
.0114af	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0114b1	b5 00		lda $00,x			lda 	$00,x
.0114b3	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0114b6	d0 12		bne $0114ca			bne 	_HEBadStructure
.0114b8	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.0114bb	a2 00 00	ldx #$0000			ldx 	#$0000
.0114be	20 fe 14	jsr $0114fe			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0114c1	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0114c3	e6 06		inc $06				inc 	DCodePtr
.0114c5	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0114c7	c6 2a		dec $2a				dec 	DStack
.0114c9	60		rts				rts
.0114ca					_HEBadStructure:
.0114ca	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0114cd	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0114d5	68 6f 75 74 20 49 66 00
.0114dd					Handler_ENDIF:
.0114dd	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0114df	b5 00		lda $00,x			lda 	$00,x
.0114e1	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0114e4	d0 05		bne $0114eb			bne 	_HEIBadStructure
.0114e6	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0114e8	c6 2a		dec $2a				dec 	DStack
.0114ea	60		rts				rts
.0114eb					_HEIBadStructure:
.0114eb	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0114ee	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0114f6	68 6f 75 74 20 49 66 00
.0114fe					ScanForwardLevel:
.0114fe	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011500	86 0a		stx $0a				stx 	DTemp1+2
.011502	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011504	85 0c		sta $0c				sta 	DTemp2
.011506	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011509					_SFLLoop:
.011509	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01150c	d0 0d		bne $01151b			bne 	_SFLNoCheck 				; we're in a substructure.
.01150e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011510	f0 09		beq $01151b			beq 	_SFLNoCheck 				; don't check zero
.011512	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011514	f0 04		beq $01151a			beq 	_SFLFound
.011516	c5 0a		cmp $0a				cmp 	DTemp1+2
.011518	d0 01		bne $01151b			bne 	_SFLNoCheck
.01151a					_SFLFound:
.01151a	60		rts				rts
.01151b					_SFLNoCheck:
.01151b	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01151d	f0 4f		beq $01156e			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01151f	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011522	90 40		bcc $011564			bcc 	_SFLSkipString 				; then handle that.
.011524	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011526	e6 06		inc $06				inc 	DCodePtr
.011528	a8		tay				tay 								; put token in Y temporarily.
.011529	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01152c	c9 00 20	cmp #$2000			cmp 	#$2000
.01152f	d0 d8		bne $011509			bne 	_SFLLoop
.011531	98		tya				tya 								; get the token back.
.011532	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011535	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011538	f0 cf		beq $011509			beq 	_SFLLoop
.01153a	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01153d	90 ca		bcc $011509			bcc 	_SFLLoop
.01153f	e8		inx				inx 								; increment the level.
.011540	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011543	f0 c4		beq $011509			beq 	_SFLLoop
.011545	ca		dex				dex 								; decrement the level
.011546	ca		dex				dex 								; one overdoes the previous inx.
.011547	10 c0		bpl $011509			bpl 	_SFLLoop 					; if gone -ve then error.
.011549					_SFLError:
.011549	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.01154b	85 22		sta $22				sta 	DLineNumber
.01154d	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011550	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011558	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011564					_SFLSkipString:
.011564	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011567	18		clc				clc
.011568	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.01156a	85 06		sta $06				sta 	DCodePtr
.01156c	80 9b		bra $011509			bra 	_SFLLoop 					; go round again.
.01156e					_SFLNextLine:
.01156e	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011570	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011573	f0 d4		beq $011549			beq 	_SFLError 					; if zero, then there's no more code to search.
.011575	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011578	85 22		sta $22				sta 	DLineNumber
.01157a	18		clc				clc
.01157b	a5 06		lda $06				lda 	DCodePtr
.01157d	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011580	85 06		sta $06				sta 	DCodePtr
.011582	80 85		bra $011509			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.011584					Command_FOR:
.011584	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011586	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011589	d0 60		bne $0115eb			bne		_CFOBad
.01158b	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.01158e	b0 15		bcs $0115a5			bcs 	_CFOExists
.011590	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011592	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011595	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011598	48		pha				pha 								; save on stack
.011599					_CFOSkipToken:
.011599	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01159b	e6 06		inc $06				inc 	DCodePtr
.01159d	e6 06		inc $06				inc 	DCodePtr
.01159f	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0115a2	d0 f5		bne $011599			bne 	_CFOSkipToken
.0115a4	68		pla				pla 								; restore address
.0115a5					_CFOExists:
.0115a5	48		pha				pha 								; push variable address on stack
.0115a6	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0115a9	20 6f 05	jsr $01056f			jsr 	ExpectToken
.0115ac	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.0115af	bb		tyx				tyx 								; put high value in X
.0115b0	7a		ply				ply 								; address in Y
.0115b1	99 00 00	sta $0000,y			sta 	$0000,y
.0115b4	8a		txa				txa
.0115b5	99 02 00	sta $0002,y			sta 	$0002,y
.0115b8	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.0115bb	20 6f 05	jsr $01056f			jsr 	ExpectToken
.0115be	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0115c0	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0115c2	95 02		sta $02,x			sta 	$02,x
.0115c4	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0115c6	95 04		sta $04,x			sta 	$04,x
.0115c8	98		tya				tya 								; save variable address at +6
.0115c9	95 06		sta $06,x			sta 	$06,x
.0115cb	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.0115ce	95 08		sta $08,x			sta 	$08,x
.0115d0	8a		txa				txa 								; add 8 to stack position
.0115d1	18		clc				clc
.0115d2	69 08 00	adc #$0008			adc 	#8
.0115d5	85 2a		sta $2a				sta 	DStack
.0115d7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0115da	b2 06		lda ($06)			lda 	(DCodePtr)
.0115dc	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.0115df	d0 09		bne $0115ea			bne 	_CFONoStep
.0115e1	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.0115e4	20 6f 05	jsr $01056f			jsr 	ExpectToken
.0115e7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.0115ea					_CFONoStep:
.0115ea	60		rts				rts
.0115eb					_CFOBad:
.0115eb	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0115ee	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0115f6	76 61 72 69 61 62 6c 65 00
.0115ff					Command_NEXT:
.0115ff	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011601	b5 00		lda $00,x			lda 	$00,x
.011603	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011606	f0 14		beq $01161c			beq 	_CNXOk
.011608	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01160b	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011613	68 6f 75 74 20 46 6f 72 00
.01161c					_CNXOk:
.01161c	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01161e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011621	90 22		bcc $011645			bcc 	_CNXNoVariable
.011623	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.011626	90 08		bcc $011630			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011628	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.01162a	ca		dex				dex
.01162b	ca		dex				dex
.01162c	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01162e	f0 15		beq $011645			beq 	_CNXNoVariable 				; then continue
.011630					_CNXNextVar:
.011630	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011633	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01163b	20 76 61 72 69 61 62 6c 65 00
.011645					_CNXNoVariable:
.011645	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011647	48		pha				pha
.011648	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.01164a	38		sec				sec
.01164b	e9 08 00	sbc #$0008			sbc 	#8
.01164e	85 2a		sta $2a				sta 	DStack
.011650	aa		tax				tax 								; X points to the stack.
.011651	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011653	85 06		sta $06				sta 	DCodePtr
.011655	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.011658	5a		phy				phy 								; save the target on the stack
.011659	48		pha				pha
.01165a	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01165d	85 08		sta $08				sta 	DTemp1
.01165f	64 0a		stz $0a				stz 	DTemp1+2
.011661	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011663	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.011666	d0 0b		bne $011673			bne 	_CNXNoStep
.011668	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.01166a	e6 06		inc $06				inc 	DCodePtr
.01166c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.01166f	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011671	84 0a		sty $0a				sty 	DTemp1+2
.011673					_CNXNoStep:
.011673	68		pla				pla 								; save the Target in DTemp2
.011674	85 0c		sta $0c				sta 	DTemp2
.011676	68		pla				pla
.011677	85 0e		sta $0e				sta 	DTemp2+2
.011679	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.01167b	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01167d	a8		tay				tay
.01167e	18		clc				clc
.01167f	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011682	65 08		adc $08				adc 	DTemp1
.011684	99 00 00	sta $0000,y			sta 	$0000,y
.011687	b9 02 00	lda $0002,y			lda 	$0002,y
.01168a	65 0a		adc $0a				adc 	DTemp1+2
.01168c	99 02 00	sta $0002,y			sta 	$0002,y
.01168f	38		sec				sec
.011690	a5 0c		lda $0c				lda 	DTemp2
.011692	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011695	85 0c		sta $0c				sta 	DTemp2
.011697	a5 0e		lda $0e				lda 	DTemp2+2
.011699	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01169c	85 0e		sta $0e				sta 	DTemp2+2
.01169e	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0116a0	f0 0a		beq $0116ac			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0116a2	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0116a4	45 0a		eor $0a				eor 	DTemp1+2
.0116a6	10 04		bpl $0116ac			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0116a8	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0116a9	85 06		sta $06				sta 	DCodePtr
.0116ab	60		rts				rts
.0116ac					_CNXLoopAgain:
.0116ac	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0116ad	18		clc				clc
.0116ae	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0116b0	aa		tax				tax
.0116b1	69 08 00	adc #$0008			adc 	#8
.0116b4	85 2a		sta $2a				sta 	DStack
.0116b6	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0116b8	85 22		sta $22				sta 	DLineNumber
.0116ba	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.0116bb					Function_ONGOTO:
.0116bb	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.0116be	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0116c1	d0 25		bne $0116e8			bne 	_FOGoFail
.0116c3	c9 00 00	cmp #$0000			cmp 	#0
.0116c6	f0 20		beq $0116e8			beq 	_FOGoFail 					; we start with index = 1
.0116c8	48		pha				pha 								; save count on stack
.0116c9	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.0116cc	20 6f 05	jsr $01056f			jsr 	ExpectToken
.0116cf	fa		plx				plx 								; put count in X.
.0116d0					_FOGoLoop:
.0116d0	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0116d2	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0116d5	90 73		bcc $01174a			bcc 	FGOFail 					; if not, then we have an error.
.0116d7	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116da	b0 6e		bcs $01174a			bcs 	FGOFail
.0116dc	ca		dex				dex 								; subtract one, if done, call GOTO code
.0116dd	f0 1f		beq $0116fe			beq 	Function_GOTO
.0116df	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0116e1	e6 06		inc $06				inc 	DCodePtr
.0116e3	20 92 05	jsr $010592			jsr 	ExpectComma 				; expect a comma
.0116e6	80 e8		bra $0116d0			bra 	_FOGoLoop 					; and loop round.
.0116e8					_FOGoFail:
.0116e8	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0116eb	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0116f3	47 6f 74 6f 20 76 61 6c 75 65 00
.0116fe					Function_GOTO:
.0116fe	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011700	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011703	90 45		bcc $01174a			bcc 	FGOFail 					; we don't do calculate line numbers.
.011705	c9 00 c0	cmp #$c000			cmp 	#$C000
.011708	b0 40		bcs $01174a			bcs 	FGOFail
.01170a	38		sec				sec 								; convert to 0-32767
.01170b	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01170e	aa		tax				tax
.01170f	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011712	18		clc				clc
.011713	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011715	a8		tay				tay
.011716					_FGOSearch:
.011716	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011719	f0 18		beq $011733			beq 	_FGOUnknown
.01171b	8a		txa				txa 								; does it match line number ?
.01171c	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01171f	f0 08		beq $011729			beq 	_FGOFound 					; yes, then found.
.011721	98		tya				tya 								; no follow the link
.011722	18		clc				clc
.011723	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011726	a8		tay				tay
.011727	80 ed		bra $011716			bra 	_FGOSearch 					; and keep looking
.011729					_FGOFound:
.011729	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01172b	98		tya				tya 								; Y + 4 is the code pointer.
.01172c	18		clc				clc 								; (skipping link and line #)
.01172d	69 04 00	adc #$0004			adc 	#4
.011730	85 06		sta $06				sta 	DCodePtr
.011732	60		rts				rts									; and continue
.011733					_FGOUnknown:
.011733	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011736	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01173e	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.01174a					FGOFail:
.01174a	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01174d	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011755	20 4e 75 6d 62 65 72 00
.01175d					Function_GOSUB:
.01175d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01175f	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011761	18		clc				clc
.011762	69 02 00	adc #$0002			adc 	#2
.011765	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011767	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011769	95 04		sta $04,x			sta 	$04,x
.01176b	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.01176e	95 06		sta $06,x			sta 	$06,x
.011770	8a		txa				txa 								; advance stack by 6.
.011771	18		clc				clc
.011772	69 06 00	adc #$0006			adc 	#6
.011775	85 2a		sta $2a				sta 	DStack
.011777	80 85		bra $0116fe			bra 	Function_GOTO 				; and do a GOTO.
.011779					Function_RETURN:
.011779	a6 2a		ldx $2a				ldx 	DStack
.01177b	b5 00		lda $00,x			lda 	$00,x
.01177d	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011780	d0 11		bne $011793			bne 	_FRetFail
.011782	8a		txa				txa 								; unpick stack.
.011783	38		sec				sec
.011784	e9 06 00	sbc #$0006			sbc 	#6
.011787	85 2a		sta $2a				sta 	DStack
.011789	aa		tax				tax
.01178a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01178c	85 06		sta $06				sta 	DCodePtr
.01178e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011790	85 22		sta $22				sta 	DLineNumber
.011792	60		rts				rts
.011793					_FRetFail:
.011793	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011796	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01179e	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.0117ab					Function_REPEAT:
.0117ab	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0117ad	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0117af	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0117b1	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117b3	95 04		sta $04,x			sta 	$04,x
.0117b5	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.0117b8	95 06		sta $06,x			sta 	$06,x
.0117ba	8a		txa				txa 								; advance stack by 6.
.0117bb	18		clc				clc
.0117bc	69 06 00	adc #$0006			adc 	#6
.0117bf	85 2a		sta $2a				sta 	DStack
.0117c1	60		rts				rts
.0117c2					Function_UNTIL:
.0117c2	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0117c4	b5 00		lda $00,x			lda 	$00,x
.0117c6	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.0117c9	d0 26		bne $0117f1			bne 	_FUNFail
.0117cb	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.0117ce	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.0117d1	d0 15		bne $0117e8			bne 	_FUNExit
.0117d3	c9 00 00	cmp #$0000			cmp 	#0
.0117d6	d0 10		bne $0117e8			bne 	_FUNExit
.0117d8	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0117da	38		sec				sec
.0117db	e9 06 00	sbc #$0006			sbc 	#6
.0117de	aa		tax				tax
.0117df	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0117e1	85 06		sta $06				sta 	DCodePtr
.0117e3	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0117e5	85 22		sta $22				sta 	DLineNumber
.0117e7	60		rts				rts
.0117e8					_FUNExit:
.0117e8	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0117ea	38		sec				sec
.0117eb	e9 06 00	sbc #$0006			sbc 	#6
.0117ee	85 2a		sta $2a				sta 	DStack
.0117f0	60		rts				rts
.0117f1					_FUNFail:
.0117f1	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0117f4	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0117fc	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011809					Function_WHILE:
.011809	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.01180b	48		pha				pha 								; save on stack
.01180c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.01180f	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011812	d0 14		bne $011828			bne 	_FWHExecute
.011814	c9 00 00	cmp #$0000			cmp 	#0
.011817	d0 0f		bne $011828			bne 	_FWHExecute
.011819	68		pla				pla 								; throw away current instruction
.01181a	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.01181d	a2 00 00	ldx #$0000			ldx 	#0
.011820	20 fe 14	jsr $0114fe			jsr 	ScanForwardLevel 			; scan forward checking structures
.011823	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011825	e6 06		inc $06				inc 	DCodePtr
.011827	60		rts				rts
.011828					_FWHExecute:
.011828	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01182a	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.01182b	3a		dec a				dec 	a
.01182c	3a		dec a				dec 	a
.01182d	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01182f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011831	95 04		sta $04,x			sta 	$04,x
.011833	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.011836	95 06		sta $06,x			sta 	$06,x
.011838	8a		txa				txa 								; advance stack by 6.
.011839	18		clc				clc
.01183a	69 06 00	adc #$0006			adc 	#6
.01183d	85 2a		sta $2a				sta 	DStack
.01183f	60		rts				rts
.011840					Function_WEND:
.011840	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011842	b5 00		lda $00,x			lda 	$00,x
.011844	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.011847	d0 11		bne $01185a			bne 	_FWEFail
.011849	8a		txa				txa 								; unpick stack and always loop back.
.01184a	38		sec				sec 								; we do the check at the top.
.01184b	e9 06 00	sbc #$0006			sbc 	#6
.01184e	85 2a		sta $2a				sta 	DStack
.011850	aa		tax				tax
.011851	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011853	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011855	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011857	85 22		sta $22				sta 	DLineNumber
.011859	60		rts				rts
.01185a					_FWEFail:
.01185a	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01185d	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011865	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011870					Function_END:
.011870	02 00		cop #$00			cop 	#0
.011872					Function_RUN:
.011872	20 ee 18	jsr $0118ee			jsr 	Function_CLEAR 				; clear all variables.
.011875	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011877	18		clc				clc
.011878	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.01187b	80 0c		bra $011889			bra 	FRun_NextLineNumber
.01187d					RUNExecuteTokenBuffer:
.01187d	64 22		stz $22				stz 	DLineNumber					; zero line number
.01187f	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011882	18		clc				clc
.011883	65 02		adc $02				adc 	DBaseAddress
.011885	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011887	80 12		bra $01189b			bra 	FRun_NextInstruction
.011889					FRun_NextLineNumber:
.011889	a8		tay				tay 								; put in Y
.01188a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01188d	f0 e1		beq $011870			beq 	Function_END 				; if zero, off the end of the program, so END the program
.01188f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011892	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011894	98		tya				tya 								; get address back
.011895	18		clc				clc 								; skip over the link/line number
.011896	69 04 00	adc #$0004			adc 	#4
.011899	85 06		sta $06				sta 	DCodePtr
.01189b					FRun_NextInstruction:
.01189b	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.01189d	20 a4 1b	jsr $011ba4			jsr 	HWCheckBreak 				; break key pressed.
.0118a0	d0 40		bne $0118e2			bne 	_FRun_Break
.0118a2	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0118a4	f0 32		beq $0118d8			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0118a6	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.0118a9	f0 18		beq $0118c3			beq 	_FRun_Colon
.0118ab	a8		tay				tay 								; save in Y
.0118ac	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0118af	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0118b2	d0 15		bne $0118c9			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0118b4	98		tya				tya 								; get token back
.0118b5	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0118b8	0a		asl a				asl 	a 							; double it into X
.0118b9	aa		tax				tax
.0118ba	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0118bc	e6 06		inc $06				inc 	DCodePtr
.0118be	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0118c1	80 d8		bra $01189b			bra 	FRun_NextInstruction 		; do the following instruction.
.0118c3					_FRun_Colon:
.0118c3	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0118c5	e6 06		inc $06				inc 	DCodePtr
.0118c7	80 d2		bra $01189b			bra 	FRun_NextInstruction 		; do the following instruction.
.0118c9					_FRun_TryLET:
.0118c9	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.0118cb	c9 00 c0	cmp #$c000			cmp 	#$C000
.0118ce	90 05		bcc $0118d5			bcc		_FRunSyntax 				; no, must be syntax.
.0118d0	20 5c 11	jsr $01115c			jsr 	Function_LET 				; try as a LET.
.0118d3	80 c6		bra $01189b			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0118d5					_FRunSyntax:
.0118d5	82 87 ec	brl $01055f			brl 	SyntaxError
.0118d8					_FRun_EndInstruction:
.0118d8	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.0118da	f0 0f		beq $0118eb			beq 	_FRun_WarmStart
.0118dc	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.0118de	1a		inc a				inc 	a 							; go to link for next line
.0118df	1a		inc a				inc 	a
.0118e0	80 a7		bra $011889			bra 	FRun_NextLineNumber
.0118e2					_FRun_Break:
.0118e2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0118e5	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.0118eb					_FRun_WarmStart:
.0118eb	82 ed 02	brl $011bdb			brl 	WarmStart
.0118ee					Function_CLEAR:
.0118ee	20 fa 18	jsr $0118fa			jsr 	ClearVariablesPointersAndStacks
.0118f1	60		rts				rts
.0118f2					Function_STOP:
.0118f2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0118f5	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.0118fa					ClearVariablesPointersAndStacks:
.0118fa	a9 80 00	lda #$0080			lda 	#BASStack
.0118fd	85 2a		sta $2a				sta 	DStack
.0118ff	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011901	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011904	a9 00 00	lda #$0000			lda 	#$0000
.011907	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011909	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01190b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01190e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011910	20 39 19	jsr $011939			jsr 	FindCodeEnd 				; find where the program ends.
.011913	a8		tay				tay 								; Y points to it.
.011914	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011917	99 02 00	sta $0002,y			sta 	$0002,y
.01191a	99 04 00	sta $0004,y			sta 	$0004,y
.01191d	98		tya				tya 								; start of working memory up
.01191e	18		clc				clc
.01191f	69 06 00	adc #$0006			adc 	#6
.011922	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011925	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011927	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01192a					_FCLoop:
.01192a	a9 00 00	lda #$0000			lda 	#$0000
.01192d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01192f	c8		iny				iny
.011930	c8		iny				iny
.011931	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011934	d0 f4		bne $01192a			bne 	_FCLoop
.011936	64 16		stz $16				stz 	DTempStringPointer
.011938	60		rts				rts
.011939					FindCodeEnd:
.011939	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.01193c	18		clc				clc
.01193d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01193f	a8		tay				tay
.011940					_FCELoop:
.011940	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011943	f0 08		beq $01194d			beq 	_FCEExit
.011945	98		tya				tya 								; add offset
.011946	18		clc				clc
.011947	79 00 00	adc $0000,y			adc 	$0000,y
.01194a	a8		tay				tay
.01194b	80 f3		bra $011940			bra 	_FCELoop
.01194d					_FCEExit:
.01194d	98		tya				tya 								; return in A
.01194e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.01194f					Function_Dim:
.01194f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011951	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011954	f0 3b		beq $011991			beq		_FDIMNotArray 				; no, error.
.011956	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.011959	b0 41		bcs $01199c			bcs 	_FDIMExists 				; if it does, that's an error.
.01195b	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01195d	48		pha				pha
.01195e	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011960	48		pha				pha
.011961					_FDIMSkip:
.011961	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011963	e6 06		inc $06				inc 	DCodePtr
.011965	e6 06		inc $06				inc 	DCodePtr
.011967	29 00 08	and #$0800			and 	#IDContMask
.01196a	d0 f5		bne $011961			bne 	_FDIMSkip
.01196c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.01196f	20 89 05	jsr $010589			jsr 	ExpectRightBracket 			; check the ) following.
.011972	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011975	d0 3b		bne $0119b2			bne 	_FDIMSize
.011977	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.01197a	f0 36		beq $0119b2			beq 	_FDIMSize
.01197c	7a		ply				ply 								; restore HashTablePtr
.01197d	84 20		sty $20				sty 	DHashTablePtr
.01197f	7a		ply				ply 								; so now A is the high index, Y points to the token
.011980	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.011983	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011985	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.011988	d0 06		bne $011990			bne 	_FDIMExit
.01198a	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01198c	e6 06		inc $06				inc 	DCodePtr
.01198e	80 bf		bra $01194f			bra 	Function_DIM 				; and do another
.011990					_FDIMExit:
.011990	60		rts				rts
.011991					_FDIMNotArray:
.011991	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011994	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01199c					_FDIMExists:
.01199c	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>01199f	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0119a7	65 64 69 6d 65 6e 73 69 6f 6e 00
.0119b2					_FDIMSize:
.0119b2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>0119b5	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0119bd	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.0119c3					Function_COLLECT:
.0119c3	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0119c5	85 0c		sta $0c				sta 	DTemp2
.0119c7	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0119ca	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0119cc	85 0e		sta $0e				sta 	DTemp2+2
.0119ce	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0119d0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0119d2					_FCNextPass:
.0119d2	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0119d4	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0119d6	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0119d8	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0119db	18		clc				clc
.0119dc	65 02		adc $02				adc 	DBaseAddress
.0119de	a8		tay				tay 								; put in Y
.0119df	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0119e2					_FCO1:
.0119e2	20 08 1a	jsr $011a08			jsr  	COLLECTScanVariable 		; scan that one.
.0119e5	c8		iny				iny 	 							; go to next pointer
.0119e6	c8		iny				iny
.0119e7	ca		dex				dex
.0119e8	d0 f8		bne $0119e2			bne 	_FCO1 						; until done all 16.
.0119ea	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0119ed					_FCO2:
.0119ed	20 1c 1a	jsr $011a1c			jsr  	COLLECTScanArray 			; scan that one.
.0119f0	c8		iny				iny 	 							; go to next pointer
.0119f1	c8		iny				iny
.0119f2	ca		dex				dex
.0119f3	d0 f8		bne $0119ed			bne 	_FCO2 						; until done all 16.
.0119f5	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0119f7	f0 0e		beq $011a07			beq		_FCExit 					; if finished then exit.
.0119f9	48		pha				pha 								; save the target address
.0119fa	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0119fc	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0119fe	20 5e 06	jsr $01065e			jsr 	StringMakeConcrete 			; make the string concrete.
.011a01	7a		ply				ply 								; restore the string.
.011a02	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011a05	80 cb		bra $0119d2			bra		_FCNextPass
.011a07					_FCExit:
.011a07	60		rts				rts
.011a08					COLLECTScanVariable:
.011a08	da		phx				phx 								; save XY
.011a09	5a		phy				phy
.011a0a					_CSVLoop:
.011a0a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011a0d	f0 0a		beq $011a19			beq 	_CSVExit
.011a0f	a8		tay				tay 								; put new address into Y
.011a10	18		clc				clc 								; which is four on.
.011a11	69 04 00	adc #$0004			adc 	#4
.011a14	20 3d 1a	jsr $011a3d			jsr 	COLLECTCheck
.011a17	80 f1		bra $011a0a			bra 	_CSVLoop
.011a19					_CSVExit:
.011a19	7a		ply				ply
.011a1a	fa		plx				plx
.011a1b	60		rts				rts
.011a1c					COLLECTScanArray:
.011a1c	da		phx				phx 								; save XY
.011a1d	5a		phy				phy
.011a1e					_CSALoop:
.011a1e	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011a21	f0 17		beq $011a3a			beq 	_CSAExit
.011a23	a8		tay				tay 								; put new address in Y
.011a24	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011a27	aa		tax				tax
.011a28	e8		inx				inx									; +1 as one more data element.
.011a29	98		tya				tya 								; point A to first element, at +6
.011a2a	18		clc				clc
.011a2b	69 06 00	adc #$0006			adc 	#6
.011a2e					_CSADoAllStrings:
.011a2e	20 3d 1a	jsr $011a3d			jsr 	COLLECTCheck 				; collect check the first.
.011a31	1a		inc a				inc 	a 							; advance the pointer.
.011a32	1a		inc a				inc 	a
.011a33	1a		inc a				inc 	a
.011a34	1a		inc a				inc 	a
.011a35	ca		dex				dex
.011a36	d0 f6		bne $011a2e			bne 	_CSADoAllStrings 			; until all strings are done.
.011a38	80 e4		bra $011a1e			bra 	_CSALoop
.011a3a					_CSAExit:
.011a3a	7a		ply				ply
.011a3b	fa		plx				plx
.011a3c	60		rts				rts
.011a3d					COLLECTCheck:
.011a3d	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011a3f	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011a41	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011a43	90 0a		bcc $011a4f			bcc 	_COCExit
.011a45	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011a47	b0 06		bcs $011a4f			bcs 	_COCExit
.011a49	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011a4b	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011a4d	85 14		sta $14				sta 	DSignCount
.011a4f					_COCExit:
.011a4f	a5 0a		lda $0a				lda 	DTemp1+2
.011a51	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011a52					Command_POKE:
.011a52	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011a55	48		pha				pha	 								; save on stack
.011a56	5a		phy				phy
.011a57	20 92 05	jsr $010592			jsr 	ExpectComma 				; comma seperator.
.011a5a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011a5d	fa		plx				plx 								; pull address and store in DTemp1
.011a5e	86 0a		stx $0a				stx 	DTemp1+2
.011a60	fa		plx				plx
.011a61	86 08		stx $08				stx 	DTemp1+0
.011a63	e2 20		sep #$20			sep 	#$20 						; byte mode
.011a65	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011a67	c2 20		rep #$20			rep 	#$20 						; word mode
.011a69	60		rts				rts
.011a6a					Command_DOKE:
.011a6a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011a6d	48		pha				pha	 								; save on stack
.011a6e	5a		phy				phy
.011a6f	20 92 05	jsr $010592			jsr 	ExpectComma 				; comma seperator.
.011a72	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011a75	fa		plx				plx 								; pull address and store in DTemp1
.011a76	86 0a		stx $0a				stx 	DTemp1+2
.011a78	fa		plx				plx
.011a79	86 08		stx $08				stx 	DTemp1+0
.011a7b	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011a7d	60		rts				rts
.011a7e					Command_LOKE:
.011a7e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011a81	48		pha				pha	 								; save on stack
.011a82	5a		phy				phy
.011a83	20 92 05	jsr $010592			jsr 	ExpectComma 				; comma seperator.
.011a86	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011a89	fa		plx				plx 								; pull address and store in DTemp1
.011a8a	86 0a		stx $0a				stx 	DTemp1+2
.011a8c	fa		plx				plx
.011a8d	86 08		stx $08				stx 	DTemp1+0
.011a8f	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011a91	98		tya				tya
.011a92	a0 02 00	ldy #$0002			ldy 	#2
.011a95	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011a97	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011a98					Function_ASSERT:
.011a98	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.011a9b	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011a9d	05 08		ora $08				ora 	Dtemp1
.011a9f	f0 01		beq $011aa2			beq 	_FAssFail
.011aa1	60		rts				rts
.011aa2					_FAssFail:
.011aa2	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011aa5	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011aad	61 69 6c 65 64 00
.011ab3					Function_CLS:
.011ab3	20 0c 1b	jsr $011b0c			jsr 	HWClearScreen
.011ab6	60		rts				rts
.011ab7					Function_REM:
.011ab7	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011ab9	f0 0b		beq $011ac6			beq 	_FRemSyntax 				; if 0, syntax error
.011abb	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011abe	b0 06		bcs $011ac6			bcs 	_FRemSyntax
.011ac0	18		clc				clc 								; add to DCodePtr
.011ac1	65 06		adc $06				adc 	DCodePtr
.011ac3	85 06		sta $06				sta 	DCodePtr
.011ac5	60		rts				rts
.011ac6					_FRemSyntax:
.011ac6	82 96 ea	brl $01055f			brl 	SyntaxError
.011ac9					Function_LINK:
.011ac9	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.011acc	85 08		sta $08				sta 	DTemp1 						; target address
.011ace	84 0a		sty $0a				sty 	DTemp1+2
.011ad0	7b		tdc				tda 								; work out what the actual address is
.011ad1	18		clc				clc
.011ad2	69 08 00	adc #$0008			adc 	#DTemp1
.011ad5	8f 0a 1b 01	sta $011b0a			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011ad9	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011adb	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011ade	48		pha				pha
.011adf	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011ae2	aa		tax				tax
.011ae3	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011ae6	a8		tay				tay
.011ae7	68		pla				pla
.011ae8	22 09 1b 01	jsl $011b09			jsl 	_FLIExecuteIt
.011aec	5a		phy				phy 								; save Y
.011aed	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011aef	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011af2	8a		txa				txa
.011af3	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011af6	68		pla				pla
.011af7	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011afa	c8		iny				iny 								; point to their high bytes and clear them
.011afb	c8		iny				iny
.011afc	a9 00 00	lda #$0000			lda 	#0
.011aff	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011b02	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011b05	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011b08	60		rts				rts
.011b09					_FLIExecuteIt:
.011b09	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=$f8020					HWCursor = $F8020
=$f8010					HWKeyPressed = $F8010
=$f8000					HWBreakKey = $F8000
=$f0000					HWScreen = $F0000
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011b0c					HWClearScreen:
.011b0c	48		pha				pha
.011b0d	da		phx				phx
.011b0e	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011b11	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011b14	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b18	ca		dex				dex
.011b19	10 f6		bpl $011b11			bpl 	_CS0
.011b1b	a9 00 00	lda #$0000			lda 	#0
.011b1e	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b22	fa		plx				plx
.011b23	68		pla				pla
.011b24	60		rts				rts
.011b25					HWPrintChar:
.011b25	48		pha				pha
.011b26	da		phx				phx
.011b27	5a		phy				phy
.011b28	29 ff 00	and #$00ff			and 	#$00FF
.011b2b	c9 61 00	cmp #$0061			cmp 	#"a"
.011b2e	90 0c		bcc $011b3c			bcc 	_HWPCNotLC
.011b30	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011b33	b0 07		bcs $011b3c			bcs 	_HWPCNotLC
.011b35	38		sec				sec
.011b36	e9 20 00	sbc #$0020			sbc 	#32
.011b39	09 80 00	ora #$0080			ora 	#128
.011b3c					_HWPCNotLC:
.011b3c	29 bf 00	and #$00bf			and 	#$BF
.011b3f	48		pha				pha
.011b40	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011b44	aa		tax				tax
.011b45	68		pla				pla
.011b46	e2 20		sep #$20			sep 	#$20
.011b48	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b4c	c2 20		rep #$20			rep 	#$20
.011b4e	e8		inx				inx
.011b4f	8a		txa				txa
.011b50	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b54	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.011b57	d0 2b		bne $011b84			bne 	_HWNotEnd
.011b59	38		sec				sec
.011b5a	e9 40 00	sbc #$0040			sbc 	#sWidth
.011b5d	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011b61	a2 00 00	ldx #$0000			ldx 	#0
.011b64					_HWScrollUp:
.011b64	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011b68	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b6c	e8		inx				inx
.011b6d	e8		inx				inx
.011b6e	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011b71	d0 f1		bne $011b64			bne 	_HWScrollUp
.011b73	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))
.011b76					_HWBlank:
.011b76	a9 20 20	lda #$2020			lda 	#$2020
.011b79	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b7d	e8		inx				inx
.011b7e	e8		inx				inx
.011b7f	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011b82	d0 f2		bne $011b76			bne 	_HWBlank
.011b84					_HWNotEnd:
.011b84	7a		ply				ply
.011b85	fa		plx				plx
.011b86	68		pla				pla
.011b87	60		rts				rts
.011b88					HWNewLine:
.011b88	48		pha				pha
.011b89	da		phx				phx
.011b8a	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011b8d					HWMoveCursor:
.011b8d	a9 20 00	lda #$0020			lda 	#32
.011b90	20 25 1b	jsr $011b25			jsr 	HWPrintChar
.011b93	8a		txa				txa
.011b94	2f 20 80 0f	and $0f8020			and 	HWCursor
.011b98	d0 f3		bne $011b8d			bne 	HWMoveCursor
.011b9a	fa		plx				plx
.011b9b	68		pla				pla
.011b9c	60		rts				rts
.011b9d	48		pha		HWTab:	pha
.011b9e	da		phx				phx
.011b9f	a2 07 00	ldx #$0007			ldx 	#7
.011ba2	80 e9		bra $011b8d			bra 	HWMoveCursor
.011ba4					HWCheckBreak:
.011ba4	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011ba8	60		rts				rts
.011ba9					HWGetKey:
.011ba9	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011bad	d0 fa		bne $011ba9			bne 	HWGetKey
.011baf					_HWGKWait:
.011baf	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011bb3	f0 fa		beq $011baf			beq 	_HWGKWait
.011bb5	ea		nop				nop
.011bb6	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011bb7					SwitchBasicInstance:
.011bb7	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011bb9	20 0c 1b	jsr $011b0c			jsr 	HWClearScreen 						; clear screen
.011bbc	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011bbf	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011bc1	86 02		stx $02				stx		DBaseAddress
.011bc3	84 04		sty $04				sty 	DHighAddress
.011bc5	ba		tsx				tsx 										; save the current SP.
.011bc6	86 3a		stx $3a				stx 	DStack65816
.011bc8	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011bc9	48		pha				pha 										; then copy it into B.
.011bca	ab		plb				plb
.011bcb	ab		plb				plb
.011bcc	20 fa 18	jsr $0118fa			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011bcf	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011bd2	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011bd4	f0 05		beq $011bdb			beq 	WarmStart
.011bd6	3a		dec a				dec 	a 									; decrement zero.
.011bd7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bd9	80 14		bra $011bef			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011bdb					WarmStart:
.011bdb	a2 3b 1c	ldx #$1c3b			ldx 	#BasicPrompt & $FFFF
.011bde	20 cb 05	jsr $0105cb			jsr 	PrintROMMessage
.011be1					NextCommand:
.011be1	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011be3	9a		txs				txs
.011be4	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011be6	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011be9	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011beb	d0 4c		bne $011c39			bne 	ExitEmulator
.011bed	80 fe		bra $011bed	w1:		bra 	w1
.011bef					ExecuteTokenBuffer:
.011bef	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011bf2	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011bf4	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011bf7	90 27		bcc $011c20			bcc 	_ETBCommand
.011bf9	c9 00 c0	cmp #$c000			cmp 	#$C000
.011bfc	b0 22		bcs $011c20			bcs 	_ETBCommand
.011bfe	38		sec				sec
.011bff	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011c02	f0 1f		beq $011c23			beq 	_ETBError
.011c04	48		pha				pha
.011c05	20 64 04	jsr $010464			jsr 	LineDelete 							; delete the line, if it exists.
.011c08	20 fa 18	jsr $0118fa			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011c0b	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011c0e	18		clc				clc
.011c0f	65 02		adc $02				adc 	DBaseAddress
.011c11	a8		tay				tay 										; Y contains the code.
.011c12	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011c15	f0 ca		beq $011be1			beq 	NextCommand 						; no, next command.
.011c17	68		pla				pla 										; line number in A, code in Y.
.011c18	20 9f 04	jsr $01049f			jsr 	LineInsert 							; insert the line
.011c1b	20 fa 18	jsr $0118fa			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011c1e	80 c1		bra $011be1			bra 	NextCommand
.011c20					_ETBCommand:
.011c20	4c 7d 18	jmp $01187d			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011c23					_ETBError:
.011c23	20 23 05	jsr $010523			jsr 	ErrorHandler 						; call error routine
>011c26	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011c2e	61 76 65 20 6c 69 6e 65 20 30 00
.011c39					ExitEmulator:
.011c39	02 00		cop #$00			cop 	#0
.011c3b					BasicPrompt:
>011c3b	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 92 06	jsr $010692			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	da 42 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 2f 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 14 00 0a 00 43 3c 09 c0
>024208	06 22 01 40 29 38 06 10 40 4d 00 00 08 00 14 00
>024218	48 3a 00 00 08 00 1e 00 2e 3e 00 00 12 00 64 00
>024228	43 3c 09 c0 06 22 01 40 29 38 e7 43 00 00 1e 00
>024238	6e 00 35 3e 09 c0 23 32 09 c0 0c 26 09 c0 23 32
>024248	09 c0 0c 26 09 c0 0c 26 09 c0 00 00 0a 00 78 00
>024258	48 3a 09 c0 00 00 0c 00 7a 00 18 c0 06 22 04 40
>024268	00 00 0e 00 7b 00 41 3c 18 c0 05 22 00 40 00 00
>024278	10 00 7d 00 37 3e 8c 40 25 32 37 3e 8c 40 00 00
>024288	10 00 7f 00 18 c0 06 22 18 c0 0b 24 01 40 00 00
>024298	08 00 80 00 44 3a 00 00 08 00 81 00 2e 3e 00 00
>0242a8	08 00 82 00 30 3e 00 00 1c 00 8c 00 35 3e 10 00
>0242b8	0d 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21 23 32
>0242c8	18 c0 00 00 08 00 96 00 38 3e 00 00 00 00 ee ee
>0242d8	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0242e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2000 times (32000 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
