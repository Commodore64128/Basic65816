
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 15 22:12:57 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe ff	ldx #$fffe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 fc	lda #$fc00			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 61 17 01	jmp $011761			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	7e 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	8e 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	9e 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	e2 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	49 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	ae 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	2b 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	0d 07					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c8 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c8 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	49 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	55 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	d2 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	49 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	5a 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	6c 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	e3 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	c3 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	9f 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	89 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	fd 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	1d 0c					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	1d 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	55 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	89 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	b1 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	cb 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	e2 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	86 0d					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	44 0d					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	c5 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	5c 0a					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	ee 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	dd 0c					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8e 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8e 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8e 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8e 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8e 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8e 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8e 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8e 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	0c 17					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	c8 0d					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	ed 16					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	dc 14					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	de 14					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	49 15					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	45 15					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	a4 15					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	18 16					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	08 17					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	68 10					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	6a 13					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	c9 13					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	e5 13					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	27 13					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	1b 11					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	a7 16					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	bf 16					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	d3 16					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	43 0e					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	1e 17					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	17 14					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	75 14					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	b4 10					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	f0 11					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	ac 14					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	2e 14					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8e 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	49 11					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	6b 12					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100bc	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100c1	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c6	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100cb	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100d0	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d6	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100dc	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100e1	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e6	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100ec	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100f2	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f8	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>010100	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010108	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>01010f	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>010115	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>01011d	87 69 6e 73 74 72 28			 .text $87,"instr("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 74 6f				 .text $c3,"to"       ; token $3829
>010133	c5 73 74 65 70				 .text $c5,"step"     ; token $382a
>010138	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2b
>01013c	f4 6c 65 74				 .text $f4,"let"      ; token $3e2c
>010140	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2d
>010147	f4 65 6e 64				 .text $f4,"end"      ; token $3e2e
>01014b	f4 72 75 6e				 .text $f4,"run"      ; token $3e2f
>01014f	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e30
>010154	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e31
>01015a	f4 64 69 6d				 .text $f4,"dim"      ; token $3e32
>01015e	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e33
>010166	f4 63 6c 73				 .text $f4,"cls"      ; token $3e34
>01016a	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e35
>010170	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e36
>010175	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e37
>01017b	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e38
>010182	f3 6f 6e				 .text $f3,"on"       ; token $3e39
>010185	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e3a
>01018a	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3b
>01018f	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3c
>010194	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3d
>010199	f5 6c 69 73 74				 .text $f5,"list"     ; token $3e3e
>01019e	f5 6c 69 6e 6b				 .text $f5,"link"     ; token $3e3f
>0101a3	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c40
>0101aa	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c41
>0101b0	e3 69 66				 .text $e3,"if"       ; token $3c42
>0101b3	e4 66 6f 72				 .text $e4,"for"      ; token $3c43
>0101b7	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a44
>0101bc	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a45
>0101c2	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a46
>0101c7	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a47
>0101cd	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$fc00					DirectPage = $FC00
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 31 02	brl $01049f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 9f 04	jmp $01049f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0b 05	jsr $01050b			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 89 04	ldx #$0489			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0b 05	jsr $01050b			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 38 0c	jsr $010c38			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 d1 17	jsr $0117d1			jsr 	HWNewLine
.010487	80 fe		bra $010487	_EH1:	bra 	_EH1
>010489	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048e					IllegalToken:
.01048e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010491	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010499	54 6f 6b 65 6e 00
.01049f					SyntaxError:
.01049f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104aa	72 72 6f 72 00
.0104af					ExpectToken:
.0104af	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b1	d0 05		bne $0104b8			bne 	_CTKError					; error if not
.0104b3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b5	e6 06		inc $06				inc 	DCodePtr
.0104b7	60		rts				rts
.0104b8					_CTKError:
.0104b8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c3	74 6f 6b 65 6e 00
.0104c9					ExpectRightBracket:
.0104c9	48		pha				pha
.0104ca	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104cd	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d0	68		pla				pla
.0104d1	60		rts				rts
.0104d2					ExpectComma:
.0104d2	48		pha				pha
.0104d3	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d6	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d9	68		pla				pla
.0104da	60		rts				rts
.0104db					CheckBothNumeric:
.0104db	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104dd	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104df	30 01		bmi $0104e2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e1	60		rts				rts
.0104e2					_CBNFail:
.0104e2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ed	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fb					ResetTypeInteger:
.0104fb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fd	29 ff 7f	and #$7fff			and 	#$7FFF
.010500	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010502	60		rts				rts
.010503					ResetTypeString:
.010503	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010505	09 00 80	ora #$8000			ora 	#$8000
.010508	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050a	60		rts				rts
.01050b					PrintROMMessage:
.01050b	48		pha				pha
.01050c	da		phx				phx
.01050d					_PRMLoop:
.01050d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010511	29 ff 00	and #$00ff			and 	#$00FF
.010514	f0 06		beq $01051c			beq 	_PRMExit
.010516	20 91 17	jsr $011791			jsr 	HWPrintChar
.010519	e8		inx				inx
.01051a	80 f1		bra $01050d			bra 	_PRMLoop
.01051c					_PRMExit:
.01051c	fa		plx				plx
.01051d	68		pla				pla
.01051e	60		rts				rts
.01051f					PrintBASICString:
.01051f	48		pha				pha
.010520	da		phx				phx
.010521	5a		phy				phy
.010522	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010525	29 ff 00	and #$00ff			and 	#$00FF
.010528	f0 0b		beq $010535			beq 	_PBSExit 					; null string
.01052a	aa		tax				tax
.01052b					_PBSLoop:
.01052b	c8		iny				iny
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y
.01052f	20 91 17	jsr $011791			jsr 	HWPrintChar
.010532	ca		dex				dex
.010533	d0 f6		bne $01052b			bne 	_PBSLoop
.010535					_PBSExit:
.010535	7a		ply				ply
.010536	fa		plx				plx
.010537	68		pla				pla
.010538	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010539					StringTempAllocate:
.010539	48		pha				pha
.01053a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01053c	d0 09		bne $010547			bne 	_STANoReset
.01053e	5a		phy				phy 								; reset the temp string pointer.
.01053f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010542	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010544	85 16		sta $16				sta 	DTempStringPointer
.010546	7a		ply				ply
.010547					_STANoReset:
.010547	68		pla				pla 								; get length.
.010548	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01054b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01054e	18		clc				clc 								; this adds one, for the length.
.01054f	65 16		adc $16				adc 	DTempStringPointer
.010551	85 16		sta $16				sta 	DTempStringPointer
.010553	48		pha				pha 								; save start address
.010554	a9 00 00	lda #$0000			lda 	#$0000
.010557	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010559	92 16		sta ($16)			sta		(DTempStringPointer)
.01055b	c2 20		rep #$20			rep 	#$20
.01055d	68		pla				pla 								; restore start address
.01055e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010560	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010562	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010564	60		rts				rts
.010565					StringWriteCharacter:
.010565	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010567	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010569	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01056b	1a		inc a				inc 	a
.01056c	92 18		sta ($18)			sta 	(DStartTempString)
.01056e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010570	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010572	60		rts				rts
.010573					StringCreateCopy:
.010573	a8		tay				tay 								; put pointer to string in Y
.010574	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010577	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01057a	f0 17		beq $010593			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01057c	da		phx				phx 								; save X and put the character count in X
.01057d	aa		tax				tax
.01057e					_SCCCopy:
.01057e	c8		iny				iny 								; advance and read (first time skips length)
.01057f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010581	b9 00 00	lda $0000,y			lda 	$0000,y
.010584	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010586	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010588	1a		inc a				inc 	a
.010589	92 18		sta ($18)			sta 	(DStartTempString)
.01058b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01058d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01058f	ca		dex				dex 								; do X times
.010590	d0 ec		bne $01057e			bne 	_SCCCopy
.010592	fa		plx				plx
.010593					_SCCExit:
.010593	60		rts				rts
.010594					StringMakeConcrete:
.010594	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010597	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010599	90 0f		bcc $0105aa			bcc 	_SMCExit
.01059b	85 08		sta $08				sta 	DTemp1 						; source
.01059d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01059f	29 ff 00	and #$00ff			and 	#$00FF
.0105a2	d0 07		bne $0105ab			bne 	_SMCNonZero 				; if not "" skip.
.0105a4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a7	18		clc				clc 								; this reference is used for all empty strings.
.0105a8	65 02		adc $02				adc 	DBaseAddress
.0105aa					_SMCExit:
.0105aa	60		rts				rts
.0105ab					_SMCNonZero:
.0105ab	48		pha				pha 								; save on stack.
.0105ac	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105af	18		clc				clc
.0105b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105b3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105b5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105ba	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105bc					_SMCLoop:
.0105bc	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105be	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105c0	88		dey				dey 								; Y+1 times.
.0105c1	10 f9		bpl $0105bc			bpl 	_SMCLoop
.0105c3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105c5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105c8					Binary_Add:
.0105c8	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0105ca	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0105cc	30 12		bmi $0105e0		bmi 	_BATypeError
.0105ce	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105d0	30 3f		bmi $010611		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105d2	18		clc			clc 										; add the results
.0105d3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105d5	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105d7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105d9	b5 20		lda $20,x		lda		EXSValueH+0,x
.0105db	75 22		adc $22,x		adc 	EXSValueH+2,x
.0105dd	95 20		sta $20,x		sta 	EXSValueH+0,x
.0105df	60		rts			rts
.0105e0					_BATypeError:
.0105e0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0105e3	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105eb	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105fb	65 73 00
.0105fe					_BALengthError:
.0105fe	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010601	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010609	6f 6f 20 6c 6f 6e 67 00
.010611					_BAConcatenateString:
.010611	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010613	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010615	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010617	85 0c		sta $0c			sta 	DTemp2
.010619	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01061b	18		clc			clc 										; work out the total length
.01061c	b2 08		lda ($08)		lda 	(DTemp1)
.01061e	72 0c		adc ($0c)		adc 	(DTemp2)
.010620	b0 14		bcs $010636		bcs 	_BAConcatLengthError 				; string is too long.
.010622	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010624	20 39 05	jsr $010539		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010627	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010629	74 20		stz $20,x		stz 	EXSValueH+0,x
.01062b	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01062d	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010630	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010632	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010635	60		rts			rts
.010636					_BAConcatLengthError:
.010636	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010639	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010641	6f 6f 20 6c 6f 6e 67 00
.010649					Binary_Subtract:
.010649	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01064c	38		sec			sec
.01064d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01064f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010651	95 00		sta $00,x		sta 	EXSValueL+0,x
.010653	b5 20		lda $20,x		lda		EXSValueH+0,x
.010655	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010657	95 20		sta $20,x		sta 	EXSValueH+0,x
.010659	60		rts			rts
.01065a					Binary_ShiftRight:
.01065a	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01065d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01065f	29 3f 00	and #$003f		and 	#63
.010662	f0 07		beq $01066b		beq		_Binary_SRExit
.010664					_Binary_SRLoop:
.010664	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010666	76 00		ror $00,x		ror 	EXSValueL+0,x
.010668	3a		dec a			dec 	a
.010669	d0 f9		bne $010664		bne 	_Binary_SRLoop
.01066b					_Binary_SRExit:
.01066b	60		rts			rts
.01066c					Binary_ShiftLeft:
.01066c	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01066f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010671	29 3f 00	and #$003f		and 	#63
.010674	f0 07		beq $01067d		beq		_Binary_SLExit
.010676					_Binary_SLLoop:
.010676	16 00		asl $00,x		asl 	EXSValueL+0,x
.010678	36 20		rol $20,x		rol 	EXSValueH+0,x
.01067a	3a		dec a			dec 	a
.01067b	d0 f9		bne $010676		bne 	_Binary_SLLoop
.01067d					_Binary_SLExit:
.01067d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01067e					Binary_And:
.01067e	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010681	b5 00		lda $00,x		lda		EXSValueL+0,x
.010683	35 02		and $02,x		and 	EXSValueL+2,x
.010685	95 00		sta $00,x		sta 	EXSValueL+0,x
.010687	b5 20		lda $20,x		lda		EXSValueH+0,x
.010689	35 22		and $22,x		and 	EXSValueH+2,x
.01068b	95 20		sta $20,x		sta 	EXSValueH+0,x
.01068d	60		rts			rts
.01068e					Binary_Or:
.01068e	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010691	b5 00		lda $00,x		lda		EXSValueL+0,x
.010693	15 02		ora $02,x		ora 	EXSValueL+2,x
.010695	95 00		sta $00,x		sta 	EXSValueL+0,x
.010697	b5 20		lda $20,x		lda		EXSValueH+0,x
.010699	15 22		ora $22,x		ora 	EXSValueH+2,x
.01069b	95 20		sta $20,x		sta 	EXSValueH+0,x
.01069d	60		rts			rts
.01069e					Binary_Xor:
.01069e	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0106a1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0106a3	55 02		eor $02,x		eor 	EXSValueL+2,x
.0106a5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106a7	b5 20		lda $20,x		lda		EXSValueH+0,x
.0106a9	55 22		eor $22,x		eor 	EXSValueH+2,x
.0106ab	95 20		sta $20,x		sta 	EXSValueH+0,x
.0106ad	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0106ae					Binary_Equals:
.0106ae	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106b1	b0 0e		bcs $0106c1		bcs 	_BEString
.0106b3	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106b5	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106b7	d0 4f		bne $010708		bne 	Compare_Fail
.0106b9	b5 20		lda $20,x		lda 	EXSValueH,x
.0106bb	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0106bd	d0 49		bne $010708		bne 	Compare_Fail
.0106bf	80 3f		bra $010700		bra 	Compare_Succeed
.0106c1					_BEString:
.0106c1	09 00 00	ora #$0000		ora 	#$0000
.0106c4	f0 3a		beq $010700		beq 	Compare_Succeed
.0106c6	80 40		bra $010708		bra 	Compare_Fail
.0106c8					Binary_NotEquals:
.0106c8	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106cb	b0 0e		bcs $0106db		bcs 	_BNEString
.0106cd	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106cf	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106d1	d0 2d		bne $010700		bne 	Compare_Succeed
.0106d3	b5 20		lda $20,x		lda 	EXSValueH,x
.0106d5	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0106d7	d0 27		bne $010700		bne 	Compare_Succeed
.0106d9	80 2d		bra $010708		bra 	Compare_Fail
.0106db					_BNEString:
.0106db	09 00 00	ora #$0000		ora 	#$0000
.0106de	d0 20		bne $010700		bne 	Compare_Succeed
.0106e0	80 26		bra $010708		bra 	Compare_Fail
.0106e2					Binary_Less:
.0106e2	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106e5	b0 12		bcs $0106f9		bcs 	_BLString
.0106e7	38		sec			sec
.0106e8	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106ea	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ec	b5 20		lda $20,x		lda 	EXSValueH,x
.0106ee	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0106f0	50 03		bvc $0106f5		bvc 	*+5
.0106f2	49 00 80	eor #$8000		eor 	#$8000
.0106f5	30 09		bmi $010700		bmi 	Compare_Succeed
.0106f7	80 0f		bra $010708		bra 	Compare_Fail
.0106f9					_BLString:
.0106f9	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106fc	f0 02		beq $010700		beq 	Compare_Succeed
.0106fe	80 08		bra $010708		bra 	Compare_Fail
.010700					Compare_Succeed:
.010700	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010703	95 00		sta $00,x		sta 	EXSValueL,x
.010705	95 20		sta $20,x		sta 	EXSValueH,x
.010707	60		rts			rts
.010708					Compare_Fail:
.010708	74 00		stz $00,x		stz 	EXSValueL,x
.01070a	74 20		stz $20,x		stz 	EXSValueH,x
.01070c	60		rts			rts
.01070d					Binary_GreaterEqual:
.01070d	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010710	b0 12		bcs $010724		bcs 	_BGEString
.010712	38		sec			sec
.010713	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010715	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010717	b5 20		lda $20,x		lda 	EXSValueH,x
.010719	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01071b	50 03		bvc $010720		bvc 	*+5
.01071d	49 00 80	eor #$8000		eor 	#$8000
.010720	10 de		bpl $010700		bpl 	Compare_Succeed
.010722	80 e4		bra $010708		bra 	Compare_Fail
.010724					_BGEString:
.010724	09 00 00	ora #$0000		ora 	#$0000
.010727	10 d7		bpl $010700		bpl 	Compare_Succeed
.010729	80 dd		bra $010708		bra 	Compare_Fail
.01072b					Binary_LessEqual:
.01072b	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01072e	b0 12		bcs $010742		bcs 	_BLEString
.010730	18		clc			clc 									; numeric <= signed
.010731	b5 00		lda $00,x		lda 	EXSValueL,x
.010733	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010735	b5 20		lda $20,x		lda 	EXSValueH,x
.010737	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010739	50 03		bvc $01073e		bvc 	*+5
.01073b	49 00 80	eor #$8000		eor 	#$8000
.01073e	30 c0		bmi $010700		bmi 	Compare_Succeed
.010740	80 c6		bra $010708		bra 	Compare_Fail
.010742					_BLEString:
.010742	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010745	d0 b9		bne $010700		bne 	Compare_Succeed
.010747	80 bf		bra $010708		bra 	Compare_Fail
.010749					Binary_Greater:
.010749	20 67 07	jsr $010767		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01074c	b0 12		bcs $010760		bcs 	_BGString
.01074e	18		clc			clc 									; numeric > signed
.01074f	b5 00		lda $00,x		lda 	EXSValueL,x
.010751	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010753	b5 20		lda $20,x		lda 	EXSValueH,x
.010755	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010757	50 03		bvc $01075c		bvc 	*+5
.010759	49 00 80	eor #$8000		eor 	#$8000
.01075c	10 a2		bpl $010700		bpl 	Compare_Succeed
.01075e	80 a8		bra $010708		bra 	Compare_Fail
.010760					_BGString:
.010760	c9 01 00	cmp #$0001		cmp 	#$0001
.010763	f0 9b		beq $010700		beq 	Compare_Succeed
.010765	80 a1		bra $010708		bra 	Compare_Fail
.010767					CompareTypeCheck:
.010767	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010769	55 42		eor $42,x		eor 	EXSPrecType+2,x
.01076b	30 06		bmi $010773		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01076d	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01076f	30 1c		bmi $01078d		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010771	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010772	60		rts			rts
.010773					_CTCFail:
.010773	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010776	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01077e	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01078d					_CTCStringCompare:
.01078d	20 fb 04	jsr $0104fb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010790	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010792	85 08		sta $08			sta 	DTemp1
.010794	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010796	85 0c		sta $0c			sta 	DTemp2
.010798	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01079b	a8		tay			tay
.01079c	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01079e	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0107a0	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107a2	90 02		bcc $0107a6		bcc 	_CTCSmallest
.0107a4	b2 0c		lda ($0c)		lda 	(DTemp2)
.0107a6					_CTCSmallest:
.0107a6	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0107a8					_CTCCompare:
.0107a8	c8		iny			iny 									; look at next character (done first, first char is size)
.0107a9	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0107ab	30 16		bmi $0107c3		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0107ad	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0107af	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0107b1	f0 f5		beq $0107a8		beq 	_CTCCompare 					; if zero, try the next character.
.0107b3	b0 07		bcs $0107bc		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0107b5					_CTCLess:
.0107b5	c2 20		rep #$20		rep 	#$20
.0107b7	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107ba	80 14		bra $0107d0		bra 	_CTCExit
.0107bc					_CTCGreater:
.0107bc	c2 20		rep #$20		rep 	#$20
.0107be	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107c1	80 0d		bra $0107d0		bra 	_CTCExit
.0107c3					_CTCEqualSoFar:
.0107c3	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107c5	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107c7	90 ec		bcc $0107b5		bcc 	_CTCLess
.0107c9	d0 f1		bne $0107bc		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107cb	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107cd	a9 00 00	lda #$0000		lda 	#$0000
.0107d0					_CTCExit:
.0107d0	38		sec			sec 									; return with CS indicating string comparison.
.0107d1	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107d2					Binary_Divide:
.0107d2	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0107d5	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107d7	15 22		ora $22,x		ora	 	EXSValueH+2,x
.0107d9	d0 14		bne $0107ef		bne 	_BinaryDivide_Ok
.0107db	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0107de	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107e6	20 62 79 20 7a 65 72 6f 00
.0107ef					_BinaryDivide_Ok:
.0107ef	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107f1	64 0a		stz $0a			stz 	DTemp1+2
.0107f3	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107f5	5a		phy			phy 										; save Y (bit counter)
.0107f6	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107f8	10 07		bpl $010801		bpl 	_BinaryDivide_RightDone
.0107fa	e8		inx			inx
.0107fb	e8		inx			inx
.0107fc	20 37 08	jsr $010837		jsr 	Binary_DivNegate
.0107ff	ca		dex			dex
.010800	ca		dex			dex
.010801					_BinaryDivide_RightDone:
.010801	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010803	10 03		bpl $010808		bpl 	_BinaryDivide_LeftDone
.010805	20 37 08	jsr $010837		jsr 	Binary_DivNegate
.010808					_BinaryDivide_LeftDone:
.010808	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01080b					_BinaryDivide_Loop:
.01080b	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01080d	36 20		rol $20,x		rol 	EXSValueH+0,x
.01080f	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010811	26 0a		rol $0a			rol 	DTemp1+2
.010813	38		sec			sec											; calculate A-M
.010814	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010816	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010818	85 0c		sta $0c			sta 	DTemp2
.01081a	a5 0a		lda $0a			lda 	DTemp1+2
.01081c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01081e	90 08		bcc $010828		bcc 	_Binary_NoSubract 					; if A < M skip this
.010820	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010822	a5 0c		lda $0c			lda 	DTemp2
.010824	85 08		sta $08			sta 	DTemp1+0
.010826	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010828					_Binary_NoSubract:
.010828	88		dey			dey 										; do it 32 times.
.010829	d0 e0		bne $01080b		bne 	_BinaryDivide_Loop
.01082b					_BinaryDivide_Exit:
.01082b	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01082d	29 01 00	and #$0001		and 	#1
.010830	f0 03		beq $010835		beq 	_BinaryDivide_Exit2
.010832	20 37 08	jsr $010837		jsr 	Binary_DivNegate
.010835					_BinaryDivide_Exit2:
.010835	7a		ply			ply 										; restore Y
.010836	60		rts			rts
.010837					Binary_DivNegate:
.010837	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010839	38		sec			sec 										; negate the value at stack X.
.01083a	a9 00 00	lda #$0000		lda 	#$0000
.01083d	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01083f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010841	a9 00 00	lda #$0000		lda 	#$0000
.010844	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010846	95 20		sta $20,x		sta 	EXSValueH+0,x
.010848	60		rts			rts
.010849					Binary_Modulus:
.010849	20 d2 07	jsr $0107d2		jsr 	Binary_Divide 						; do the divide
.01084c	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01084e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010850	a5 0a		lda $0a			lda 	DTemp1+2
.010852	95 20		sta $20,x		sta 	EXSValueH+0,x
.010854	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010855					Binary_Multiply:
.010855	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010858	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01085a	85 08		sta $08			sta 	DTemp1
.01085c	b5 20		lda $20,x		lda 	EXSValueH+0,x
.01085e	85 0a		sta $0a			sta		DTemp1+2
.010860	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010862	74 20		stz $20,x		stz 	EXSValueH+0,x
.010864					_BinaryMultiply_Loop:
.010864	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010866	05 0a		ora $0a			ora 	DTemp1+2
.010868	f0 1e		beq $010888		beq 	_BinaryMultiply_Exit
.01086a	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01086c	29 01 00	and #$0001		and 	#1
.01086f	f0 0d		beq $01087e		beq 	_BinaryMultiply_NoAdd
.010871	18		clc			clc 										; add multiplicand to result.
.010872	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010874	75 02		adc $02,x		adc 	EXSValueL+2,x
.010876	95 00		sta $00,x		sta 	EXSValueL+0,x
.010878	b5 20		lda $20,x		lda 	EXSValueH+0,x
.01087a	75 22		adc $22,x		adc 	EXSValueH+2,x
.01087c	95 20		sta $20,x		sta 	EXSValueH+0,x
.01087e					_BinaryMultiply_NoAdd:
.01087e	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010880	66 08		ror $08			ror 	DTemp1
.010882	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010884	36 22		rol $22,x		rol 	EXSValueH+2,x
.010886	80 dc		bra $010864		bra 	_BinaryMultiply_Loop 				; go round again.
.010888					_BinaryMultiply_Exit:
.010888	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010889					Function_Len:
.010889	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.01088c	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.01088f	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010892	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010894	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010897	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01089a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01089c	74 20		stz $20,x			stz 	EXSValueH+0,x
.01089e	60		rts				rts
.01089f					Function_Abs:
.01089f	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.0108a2	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0108a5	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108a8	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0108aa	30 07		bmi $0108b3			bmi 	_FAbsNegative 				; negate it if negative
.0108ac	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0108ae	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0108b0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108b2	60		rts				rts
.0108b3					_FAbsNegative:
.0108b3	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0108b4	a9 00 00	lda #$0000			lda 	#0
.0108b7	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108b9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108bb	a9 00 00	lda #$0000			lda 	#0
.0108be	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0108c0	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108c2	60		rts				rts
.0108c3					Function_Sgn:
.0108c3	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns integer
.0108c6	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.0108c9	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108cc	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108ce	74 20		stz $20,x			stz 	EXSValueH+0,x
.0108d0	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108d2	30 07		bmi $0108db			bmi 	_FSgnNegative 				; set to -1 if signed
.0108d4	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108d6	f0 02		beq $0108da			beq 	_FSgnExit
.0108d8	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108da					_FSgnExit:
.0108da	60		rts				rts
.0108db					_FSgnNegative:
.0108db	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108de	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108e0	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108e2	60		rts				rts
.0108e3					Function_Random:
.0108e3	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108e6	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger
.0108e9	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108eb	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108ed	d0 0a		bne $0108f9			bne 	_Rnd_NotZero
.0108ef	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108f2	85 10		sta $10				sta 	DRandom
.0108f4	a9 ea 00	lda #$00ea			lda 	#$EA
.0108f7	85 12		sta $12				sta 	DRandom+2
.0108f9					_Rnd_NotZero:
.0108f9	20 04 09	jsr $010904			jsr 	_Rnd_Process 				; call randomiser twice
.0108fc	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108fe	20 04 09	jsr $010904			jsr 	_Rnd_Process
.010901	95 00		sta $00,x			sta 	EXSValueL+0,x
.010903	60		rts				rts
.010904					_Rnd_Process:
.010904	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010906	26 12		rol $12				rol 	DRandom+2
.010908	90 0e		bcc $010918			bcc 	_Rnd_Exit
.01090a	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01090c	49 54 d4	eor #$d454			eor 	#$D454
.01090f	85 10		sta $10				sta 	DRandom
.010911	a5 12		lda $12				lda 	DRandom+2
.010913	49 d5 55	eor #$55d5			eor 	#$55D5
.010916	85 12		sta $12				sta 	DRandom+2
.010918					_Rnd_Exit:
.010918	a5 10		lda $10				lda 	DRandom
.01091a	45 12		eor $12				eor 	DRandom+2
.01091c	60		rts				rts
.01091d					Function_Chr:
.01091d	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010920	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010923	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010926	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010929	d0 12		bne $01093d			bne 	_FCHBad
.01092b	48		pha				pha  								; save char # on stack
.01092c	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.01092f	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010932	68		pla				pla 								; restore character number
.010933	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010936	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010938	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01093a	74 20		stz $20,x			stz 	EXSValueH+0,x
.01093c	60		rts				rts
.01093d					_FCHBad:
.01093d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010940	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010948	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010955					Function_Asc:
.010955	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010958	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.01095b	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.01095e	a8		tay				tay 								; string address in Y
.01095f	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010962	29 ff 00	and #$00ff			and 	#$00FF
.010965	f0 0b		beq $010972			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010967	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.01096a	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.01096d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01096f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010971	60		rts				rts
.010972					_FASBad:
.010972	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010975	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>01097d	65 20 66 6f 72 20 61 73 63 28 29 00
.010989					Function_SPC:
.010989	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.01098c	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.01098f	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010992	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010995	d0 17		bne $0109ae			bne 	_FSPBad
.010997	48		pha				pha 								; save length
.010998	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate character space
.01099b	7a		ply				ply 								; get count in Y
.01099c	f0 09		beq $0109a7			beq 	_FSPExit 					; if zero, just empty string
.01099e					_FSPCopy:
.01099e	a9 20 00	lda #$0020			lda 	#" "						; space character
.0109a1	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.0109a4	88		dey				dey
.0109a5	d0 f7		bne $01099e			bne 	_FSPCopy	 				; do it Y times
.0109a7					_FSPExit:
.0109a7	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0109a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109ab	74 20		stz $20,x			stz 	EXSValueH+0,x
.0109ad	60		rts				rts
.0109ae					_FSPBad:
.0109ae	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0109b1	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109b9	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109c5					Function_LEFT:
.0109c5	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.0109c8	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109cb	48		pha				pha 								; save string on stack.
.0109cc	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.0109cf	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.0109d2	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109d5	d0 6d		bne $010a44			bne 	FNStringParameter
.0109d7	85 08		sta $08				sta 	DTemp1 						; save count.
.0109d9	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.0109dc	7a		ply				ply 								; Y points to string.
.0109dd	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109e0	29 ff 00	and #$00ff			and 	#$00FF
.0109e3	f0 52		beq $010a37			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109e5	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109e7	f0 55		beq $010a3e			beq 	FNStringY 					; return string in Y if current len = required len.
.0109e9	90 53		bcc $010a3e			bcc 	FNStringY 					; if current < required return whole thing.
.0109eb	c8		iny				iny 								; take from here - start of string
.0109ec	80 33		bra $010a21			bra 	FNDTemp1Characters
.0109ee					Function_RIGHT:
.0109ee	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.0109f1	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109f4	48		pha				pha 								; save string on stack.
.0109f5	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.0109f8	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.0109fb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109fe	d0 44		bne $010a44			bne 	FNStringParameter
.010a00	85 08		sta $08				sta 	DTemp1 						; save count.
.010a02	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010a05	7a		ply				ply 								; Y points to string.
.010a06	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010a09	29 ff 00	and #$00ff			and 	#$00FF
.010a0c	f0 29		beq $010a37			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010a0e	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010a10	f0 2c		beq $010a3e			beq 	FNStringY 					; return string in Y if current len = required len.
.010a12	90 2a		bcc $010a3e			bcc 	FNStringY 					; if current < required return whole thing.
.010a14	38		sec				sec 								; current-required is the number to skip
.010a15	e5 08		sbc $08				sbc 	DTemp1
.010a17	85 0a		sta $0a				sta 	DTemp1+2
.010a19	98		tya				tya
.010a1a	18		clc				clc
.010a1b	65 0a		adc $0a				adc 	DTemp1+2
.010a1d	a8		tay				tay
.010a1e	c8		iny				iny 								; +1 for the count.
.010a1f	80 00		bra $010a21			bra 	FNDTemp1Characters
.010a21					FNDTemp1Characters:
.010a21	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a23	f0 12		beq $010a37			beq 	FNStringEmpty 				; if zero, return empty string.
.010a25	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010a28	48		pha				pha 								; save the address
.010a29					_FND1Loop:
.010a29	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a2c	20 65 05	jsr $010565			jsr 	StringWriteCharacter
.010a2f	c8		iny				iny
.010a30	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a32	d0 f5		bne $010a29			bne 	_FND1Loop
.010a34	7a		ply				ply 								; string address in Y
.010a35	80 07		bra $010a3e			bra 	FNStringY
.010a37					FNStringEmpty:
.010a37	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a3a	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; put address of it in Y
.010a3d	a8		tay				tay
.010a3e					FNStringY:
.010a3e	98		tya				tya
.010a3f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a41	74 22		stz $22,x			stz 	EXSValueH+2,x
.010a43	60		rts				rts
.010a44					FNStringParameter:
.010a44	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010a47	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a4f	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010a5c					Function_MID:
.010a5c	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010a5f	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a62	48		pha				pha 								; save string on stack.
.010a63	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get offset (n)
.010a66	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010a69	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a6c	d0 d6		bne $010a44			bne 	FNStringParameter
.010a6e	c9 00 00	cmp #$0000			cmp 	#0
.010a71	f0 d1		beq $010a44			beq 	FNStringParameter 			; or zero
.010a73	48		pha				pha 								; save start position on stack.
.010a74	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010a77	85 08		sta $08				sta 	DTemp1
.010a79	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010a7b	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010a7e	d0 0e		bne $010a8e			bne 	_FMINoThird
.010a80	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010a82	e6 06		inc $06				inc 	DCodePtr
.010a84	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010a87	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a8a	d0 b8		bne $010a44			bne 	FNStringParameter
.010a8c	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010a8e					_FMINoThird:
.010a8e	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010a91	68		pla				pla 								; get offset position
.010a92	85 0c		sta $0c				sta 	DTemp2
.010a94	7a		ply				ply 								; get address of string in Y
.010a95	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010a98	29 ff 00	and #$00ff			and 	#$00FF
.010a9b	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010a9d	90 98		bcc $010a37			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010a9f	38		sec				sec 								; calculate number of characters left after
.010aa0	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010aa2	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010aa3	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010aa5	b0 02		bcs $010aa9			bcs 	_FMISufficient
.010aa7	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010aa9					_FMISufficient:
.010aa9	98		tya				tya 								; get address
.010aaa	18		clc				clc
.010aab	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010aad	a8		tay				tay 								; put in Y
.010aae	82 70 ff	brl $010a21			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010ab1					Function_Peek:
.010ab1	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ab4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ab7	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010aba	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010abc	84 0a		sty $0a				sty 	DTemp1+2
.010abe	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ac1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ac3	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010ac6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ac8	74 20		stz $20,x			stz 	EXSValueH+0,x
.010aca	60		rts				rts
.010acb					Function_Deek:
.010acb	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ace	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ad1	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010ad4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ad6	84 0a		sty $0a				sty 	DTemp1+2
.010ad8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010adb	b7 08		lda [$08],y			lda 	[DTemp1],y
.010add	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010adf	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ae1	60		rts				rts
.010ae2					Function_Leek:
.010ae2	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ae5	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ae8	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010aeb	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010aed	84 0a		sty $0a				sty 	DTemp1+2
.010aef	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010af2	b7 08		lda [$08],y			lda 	[DTemp1],y
.010af4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010af6	c8		iny				iny
.010af7	c8		iny				iny
.010af8	b7 08		lda [$08],y			lda 	[DTemp1],y
.010afa	95 20		sta $20,x			sta 	EXSValueH+0,x
.010afc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010afd					Function_VAL:
.010afd	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010b00	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b03	48		pha				pha 								; put string address on stack.
.010b04	20 14 0b	jsr $010b14			jsr 	VALGetBase 					; process , base (shared with STR$())
.010b07	7a		ply				ply 								; get string address back
.010b08	da		phx				phx 								; save X on stack
.010b09	aa		tax				tax 								; base in X
.010b0a	98		tya				tya 								; address in A
.010b0b	20 4e 0b	jsr $010b4e			jsr 	StringToInteger
.010b0e	fa		plx				plx 								; restore X
.010b0f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b11	94 20		sty $20,x			sty 	EXSValueH+0,x
.010b13	60		rts				rts
.010b14					VALGetBase:
.010b14	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010b16	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010b19	f0 07		beq $010b22			beq 	_VGBAlternate
.010b1b	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010b1e	a9 0a 00	lda #$000a			lda 	#10
.010b21	60		rts				rts
.010b22					_VGBAlternate:
.010b22	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; skip comma.
.010b25	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010b28	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010b2b	d0 0e		bne $010b3b			bne 	_VGBBadBase
.010b2d	c9 02 00	cmp #$0002			cmp 	#2
.010b30	90 09		bcc $010b3b			bcc 	_VGBBadBase
.010b32	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010b35	b0 04		bcs $010b3b			bcs 	_VGBBadBase
.010b37	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010b3a	60		rts				rts
.010b3b					_VGBBadBase:
.010b3b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010b3e	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010b46	65 72 20 42 61 73 65 00
.010b4e					StringToInteger:
.010b4e	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010b50	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010b52	29 ff 00	and #$00ff			and 	#$00FF
.010b55	85 26		sta $26				sta 	DTemp3+2
.010b57	f0 6e		beq $010bc7			beq 	_STIError 					; if length zero it's bad.
.010b59	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010b5b	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010b5d	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010b5f	64 0a		stz $0a				stz 	DTemp1+2
.010b61	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010b63	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010b66	48		pha				pha 								; push on stack
.010b67	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010b6a	d0 06		bne $010b72			bne 	_STILoop
.010b6c	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b6e	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b70	f0 55		beq $010bc7			beq 	_STIError 					; if only - then error.
.010b72					_STILoop:
.010b72	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b74	20 e6 0b	jsr $010be6			jsr 	MultiplyTemp1ByA
.010b77	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b79	29 ff 00	and #$00ff			and 	#$00FF
.010b7c	20 d7 0b	jsr $010bd7			jsr 	ConvertUpperCase	 		; make U/C
.010b7f	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b82	90 43		bcc $010bc7			bcc 	_STIError
.010b84	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b87	90 0e		bcc $010b97			bcc 	_STIOkay1
.010b89	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b8c	90 39		bcc $010bc7			bcc 	_STIError
.010b8e	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b91	b0 34		bcs $010bc7			bcs 	_STIError
.010b93	18		clc				clc 								; shift to correct range.
.010b94	69 09 00	adc #$0009			adc 	#9
.010b97					_STIOkay1:
.010b97	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b9a	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b9c	b0 29		bcs $010bc7			bcs 	_STIError
.010b9e	18		clc				clc 								; add A to DTemp1
.010b9f	65 08		adc $08				adc 	DTemp1
.010ba1	85 08		sta $08				sta 	DTemp1
.010ba3	90 02		bcc $010ba7			bcc 	_STINoCarry
.010ba5	e6 0a		inc $0a				inc 	DTemp1+2
.010ba7					_STINoCarry:
.010ba7	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010ba9	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010bab	d0 c5		bne $010b72			bne 	_STILoop 					; loop back.
.010bad	68		pla				pla 								; get optional minus bac
.010bae	c9 2d 00	cmp #$002d			cmp 	#"-"
.010bb1	d0 0f		bne $010bc2			bne 	_STINotNegative 			; handle the negative character
.010bb3	38		sec				sec 								; negate DTemp1
.010bb4	a9 00 00	lda #$0000			lda 	#0
.010bb7	e5 08		sbc $08				sbc 	DTemp1
.010bb9	85 08		sta $08				sta 	DTemp1
.010bbb	a9 00 00	lda #$0000			lda 	#0
.010bbe	e5 0a		sbc $0a				sbc 	DTemp1+2
.010bc0	85 0a		sta $0a				sta 	DTemp1+2
.010bc2					_STINotNegative:
.010bc2	a5 08		lda $08				lda 	DTemp1 						; get the result
.010bc4	a4 0a		ldy $0a				ldy 	DTemp1+2
.010bc6	60		rts				rts
.010bc7					_STIError:
.010bc7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010bca	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010bd2	74 61 6e 74 00
.010bd7					ConvertUpperCase:
.010bd7	c9 61 00	cmp #$0061			cmp 	#'a'
.010bda	90 09		bcc $010be5			bcc 	_CUCExit
.010bdc	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010bdf	b0 04		bcs $010be5			bcs 	_CUCExit
.010be1	38		sec				sec
.010be2	e9 20 00	sbc #$0020			sbc 	#32
.010be5					_CUCExit:
.010be5	60		rts				rts
.010be6					MultiplyTemp1ByA:
.010be6					_MTGeneral:
.010be6	da		phx				phx
.010be7	aa		tax				tax 								; multiplier in X
.010be8	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010bea	85 0c		sta $0c				sta 	DTemp2
.010bec	a5 0a		lda $0a				lda 	DTemp1+2
.010bee	85 0e		sta $0e				sta 	DTemp2+2
.010bf0	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010bf2	64 0a		stz $0a				stz 	DTemp1+2
.010bf4	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010bf7					_MTLoop:
.010bf7	8a		txa				txa 								; shift X right into C
.010bf8	4a		lsr a				lsr 	a
.010bf9	aa		tax				tax
.010bfa	90 10		bcc $010c0c			bcc 	_MTNoAdd
.010bfc	18		clc				clc
.010bfd	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010bff	65 0c		adc $0c				adc 	DTemp2
.010c01	85 08		sta $08				sta 	DTemp1
.010c03	a5 0a		lda $0a				lda 	DTemp1+2
.010c05	65 0e		adc $0e				adc 	DTemp2+2
.010c07	85 0a		sta $0a				sta 	DTemp1+2
.010c09	90 01		bcc $010c0c			bcc 	_MTNoAdd
.010c0b	c8		iny				iny
.010c0c					_MTNoAdd:
.010c0c	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010c0e	26 0e		rol $0e				rol 	DTemp2+2
.010c10	90 01		bcc $010c13			bcc 	_MTNoOverflow
.010c12	c8		iny				iny
.010c13					_MTNoOverflow:
.010c13	8a		txa				txa 								; until multiplier is zero.
.010c14	d0 e1		bne $010bf7			bne 	_MTLoop
.010c16	98		tya				tya
.010c17	18		clc				clc
.010c18	69 ff ff	adc #$ffff			adc 	#$FFFF
.010c1b	fa		plx				plx 								; restore X
.010c1c	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010c1d					Function_Str:
.010c1d	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010c20	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c23	48		pha				pha 								; save YA on the stack
.010c24	5a		phy				phy
.010c25	20 14 0b	jsr $010b14			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c28	85 14		sta $14				sta 	DSignCount
.010c2a	7a		ply				ply 								; YA is the number
.010c2b	68		pla				pla
.010c2c	da		phx				phx
.010c2d	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010c2f	20 38 0c	jsr $010c38			jsr 	ConvertToString 			; convert it to a string.
.010c32	fa		plx				plx 								; restore X
.010c33	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010c35	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c37	60		rts				rts
.010c38					ConvertToString:
.010c38	48		pha				pha
.010c39	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010c3c	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate space for return string.
.010c3f	68		pla				pla
.010c40					ConvertToStringAlreadyAllocated:
.010c40	da		phx				phx 								; save X (base)
.010c41	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010c43	84 26		sty $26				sty 	DTemp3+2
.010c45	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010c47	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010c49	10 15		bpl $010c60			bpl 	_CTSNotNegative
.010c4b	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010c4e	20 ca 0c	jsr $010cca			jsr 	CTSOutputA
.010c51	38		sec				sec 								; negate DTemp3 which is the number
.010c52	a9 00 00	lda #$0000			lda 	#0
.010c55	e5 24		sbc $24				sbc 	DTemp3
.010c57	85 24		sta $24				sta 	DTemp3
.010c59	a9 00 00	lda #$0000			lda 	#0
.010c5c	e5 26		sbc $26				sbc 	DTemp3+2
.010c5e	85 26		sta $26				sta 	DTemp3+2
.010c60					_CTSNotNegative:
.010c60	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010c63	48		pha				pha
.010c64	a9 00 00	lda #$0000			lda 	#0
.010c67	48		pha				pha
.010c68	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010c6a	85 08		sta $08				sta 	DTemp1
.010c6c	64 0a		stz $0a				stz 	DTemp1+2
.010c6e					_CTSMultiplySubtractor:
.010c6e	38		sec				sec 								; check number vs subtractor
.010c6f	a5 24		lda $24				lda 	DTemp3
.010c71	e5 08		sbc $08				sbc 	DTemp1
.010c73	a5 26		lda $26				lda 	DTemp3+2
.010c75	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c77	90 0f		bcc $010c88			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c79	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c7b	48		pha				pha
.010c7c	a5 0a		lda $0a				lda 	DTemp1+2
.010c7e	48		pha				pha
.010c7f	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c81	20 e6 0b	jsr $010be6			jsr 	MultiplyTemp1ByA
.010c84	b0 02		bcs $010c88			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c86	80 e6		bra $010c6e			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c88					_CTSScaledUp:
.010c88	7a		ply				ply 								; YA contains the previous divider.
.010c89	68		pla				pla
.010c8a	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c8d	d0 05		bne $010c94			bne 	_CTSHasDigit
.010c8f	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c92	f0 20		beq $010cb4			beq 	_CTSExit
.010c94					_CTSHasDigit:
.010c94	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c96	84 0e		sty $0e				sty 	DTemp2+2
.010c98	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c9b					_CTSSubLoop:
.010c9b	38		sec				sec 								; subtract subtractor from number
.010c9c	a5 24		lda $24				lda 	DTemp3
.010c9e	e5 0c		sbc $0c				sbc 	DTemp2
.010ca0	a8		tay				tay 								; intermediate in Y
.010ca1	a5 26		lda $26				lda 	DTemp3+2
.010ca3	e5 0e		sbc $0e				sbc 	DTemp2+2
.010ca5	90 07		bcc $010cae			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010ca7	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010ca9	84 24		sty $24				sty 	DTemp3
.010cab	e8		inx				inx 								; one more subtraction
.010cac	80 ed		bra $010c9b			bra 	_CTSSubLoop 				; try it again.
.010cae					_CTSFinishedSubtracting:
.010cae	8a		txa				txa 								; convert to ASCII.
.010caf	20 bd 0c	jsr $010cbd			jsr 	CTSOutputHexDigit 			; write that out.
.010cb2	80 d4		bra $010c88			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010cb4					_CTSExit:
.010cb4	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010cb6	20 bd 0c	jsr $010cbd			jsr 	CTSOutputHexDigit
.010cb9	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010cbb	fa		plx				plx 								; restore X.
.010cbc	60		rts				rts
.010cbd					CTSOutputHexDigit:
.010cbd	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010cc0	90 04		bcc $010cc6			bcc 	_CTSNotLetter
.010cc2	18		clc				clc
.010cc3	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010cc6					_CTSNotLetter:
.010cc6	18		clc				clc
.010cc7	69 30 00	adc #$0030			adc 	#48
.010cca					CTSOutputA:
.010cca	5a		phy				phy 								; save Y, set Y to current pointer
.010ccb	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010ccd	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010cd0	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010cd2	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010cd4	1a		inc a				inc 	a
.010cd5	92 18		sta ($18)			sta 	(DStartTempString)
.010cd7	c2 20		rep #$20			rep 	#$20
.010cd9	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010cdb	7a		ply				ply 								; restore Y and exit.
.010cdc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010cdd					Function_INSTR:
.010cdd	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns a integer
.010ce0	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010ce3	48		pha				pha 								; save string to search
.010ce4	20 d2 04	jsr $0104d2			jsr 	ExpectComma
.010ce7	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010cea	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010ced	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010cef	68		pla				pla
.010cf0	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010cf2	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010cf4	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010cf6	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010cf8	38		sec				sec
.010cf9	b2 0c		lda ($0c)			lda 	(DTemp2)
.010cfb	f2 08		sbc ($08)			sbc		(DTemp1)
.010cfd	c2 20		rep #$20			rep 	#$20
.010cff	90 2c		bcc $010d2d			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010d01	29 ff 00	and #$00ff			and 	#$00FF
.010d04	1a		inc a				inc 	a
.010d05	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010d07	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010d09	29 ff 00	and #$00ff			and 	#$00FF
.010d0c	f0 22		beq $010d30			beq 	_FINSError
.010d0e					_FINSLoop:
.010d0e	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010d10	1a		inc a				inc 	a
.010d11	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d13	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010d15	29 ff 00	and #$00ff			and 	#$00FF
.010d18	a8		tay				tay									; start comparing at index 1.
.010d19					_FINSCompare:
.010d19	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010d1b	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010d1d	29 ff 00	and #$00ff			and 	#$00FF
.010d20	d0 05		bne $010d27			bne 	_FINSNext
.010d22	88		dey				dey
.010d23	d0 f4		bne $010d19			bne 	_FINSCompare
.010d25	80 08		bra $010d2f			bra 	_FINSExit
.010d27					_FINSNext:
.010d27	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010d29	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010d2b	d0 e1		bne $010d0e			bne 	_FINSLoop
.010d2d					_FINSFail:
.010d2d	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010d2f					_FINSExit:
.010d2f	60		rts				rts
.010d30					_FINSError:
.010d30	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d33	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>010d3b	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010d44					Function_UPPER:
.010d44	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010d47	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010d4a	48		pha				pha
.010d4b	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010d4e	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010d51	68		pla				pla
.010d52	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010d55	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d57	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d59	a8		tay				tay 								; address in Y
.010d5a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d5c	da		phx				phx 								; save X
.010d5d	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d5f	29 ff 00	and #$00ff			and 	#$00FF
.010d62	f0 20		beq $010d84			beq 	_FUPExit
.010d64	aa		tax				tax 								; put in X
.010d65					_FUPLoop:
.010d65	c8		iny				iny 								; increment and load character
.010d66	b9 00 00	lda $0000,y			lda 	$0000,y
.010d69	29 ff 00	and #$00ff			and 	#$00FF
.010d6c	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010d6f	90 10		bcc $010d81			bcc 	_FUPNoChange
.010d71	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010d74	b0 0b		bcs $010d81			bcs 	_FUPNoChange
.010d76	38		sec				sec 								; shift case
.010d77	e9 20 00	sbc #$0020			sbc 	#32
.010d7a	e2 20		sep #$20			sep 	#$20 						; write back
.010d7c	99 00 00	sta $0000,y			sta 	$0000,y
.010d7f	c2 20		rep #$20			rep 	#$20
.010d81					_FUPNoChange:
.010d81	ca		dex				dex 								; do X times
.010d82	d0 e1		bne $010d65			bne 	_FUPLoop
.010d84					_FUPExit:
.010d84	fa		plx				plx 								; restore X
.010d85	60		rts				rts
.010d86					Function_LOWER:
.010d86	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010d89	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010d8c	48		pha				pha
.010d8d	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010d90	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010d93	68		pla				pla
.010d94	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010d97	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d99	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d9b	a8		tay				tay 								; address in Y
.010d9c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d9e	da		phx				phx 								; save X
.010d9f	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010da1	29 ff 00	and #$00ff			and 	#$00FF
.010da4	f0 20		beq $010dc6			beq 	_FLOExit
.010da6	aa		tax				tax 								; put in X
.010da7					_FLOLoop:
.010da7	c8		iny				iny 								; increment and load character
.010da8	b9 00 00	lda $0000,y			lda 	$0000,y
.010dab	29 ff 00	and #$00ff			and 	#$00FF
.010dae	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010db1	90 10		bcc $010dc3			bcc 	_FLONoChange
.010db3	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010db6	b0 0b		bcs $010dc3			bcs 	_FLONoChange
.010db8	18		clc				clc 								; shift case
.010db9	69 20 00	adc #$0020			adc 	#32
.010dbc	e2 20		sep #$20			sep 	#$20 						; write back
.010dbe	99 00 00	sta $0000,y			sta 	$0000,y
.010dc1	c2 20		rep #$20			rep 	#$20
.010dc3					_FLONoChange:
.010dc3	ca		dex				dex 								; do X times
.010dc4	d0 e1		bne $010da7			bne 	_FLOLoop
.010dc6					_FLOExit:
.010dc6	fa		plx				plx 								; restore X
.010dc7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010dc8					Function_Let:
.010dc8	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010dca	48		pha				pha  								; save on stack for later.
.010dcb	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.010dce	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010dd0	b0 1c		bcs $010dee			bcs 	_FLetFound 					; skip if found.
.010dd2	68		pla				pla 								; get and push the first token again.
.010dd3	48		pha				pha
.010dd4	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010dd7	d0 57		bne $010e30			bne 	_FLError					; arrays, so this causes an error.
.010dd9	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010ddb	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010dde	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.010de1	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010de3					_FLSkipToken:
.010de3	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010de5	e6 06		inc $06				inc 	DCodePtr
.010de7	e6 06		inc $06				inc 	DCodePtr
.010de9	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010dec	d0 f5		bne $010de3			bne 	_FLSkipToken
.010dee					_FLetFound:
.010dee	68		pla				pla 								; get and save the first token.
.010def	48		pha				pha
.010df0	a8		tay				tay 								; put it in Y
.010df1	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010df4	f0 07		beq $010dfd			beq 	_FLetNotArray
.010df6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010df8	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010dfb	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010dfd					_FLetNotArray:
.010dfd	7a		ply				ply 								; get the first token into Y
.010dfe	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010e00	48		pha				pha
.010e01	5a		phy				phy 								; save the first token on the stack.
.010e02	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010e05	20 af 04	jsr $0104af			jsr 	ExpectToken
.010e08	68		pla				pla 								; restore the first token.
.010e09	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010e0c	d0 0f		bne $010e1d			bne 	_FLetString 				; skip if string.
.010e0e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.010e11	7a		ply				ply 								; get address in Y
.010e12	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010e14	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010e17	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.010e19	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010e1c	60		rts				rts
.010e1d					_FLetString:
.010e1d	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.010e20	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010e22	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010e25	7a		ply				ply 								; get address
.010e26	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010e29	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010e2c	99 02 00	sta $0002,y			sta 	$0002,y
.010e2f	60		rts				rts
.010e30					_FLError:
.010e30	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e33	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010e3b	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.010e43					Command_List:
.010e43	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.010e46	20 39 05	jsr $010539		jsr 	StringTempAllocate
.010e49	85 30		sta $30			sta 	DListBuffer						; save buffer.
.010e4b	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.010e4d	64 2e		stz $2e			stz 	DIndent2
.010e4f	64 32		stz $32			stz 	DTemp4+0 						; low number
.010e51	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.010e54	85 34		sta $34			sta 	DTemp4+2 						; high number.
.010e56	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.010e58	f0 28		beq $010e82		beq 	_CLIList
.010e5a	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.010e5d	f0 23		beq $010e82		beq 	_CLIList
.010e5f	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.010e62	c0 00 00	cpy #$0000		cpy 	#0
.010e65	d0 18		bne $010e7f		bne 	_CLIError
.010e67	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.010e69	85 34		sta $34			sta 	DTemp4+2
.010e6b	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.010e6d	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.010e70	d0 10		bne $010e82		bne 	_CLIList
.010e72	20 d2 04	jsr $0104d2		jsr 	ExpectComma 					; skip comma
.010e75	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.010e78	85 34		sta $34			sta 	DTemp4+2
.010e7a	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.010e7d	f0 03		beq $010e82		beq 	_CLIList
.010e7f					_CLIError:
.010e7f	82 1d f6	brl $01049f		brl 	SyntaxError
.010e82					_CLIList:
.010e82	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.010e85	18		clc			clc
.010e86	65 02		adc $02			adc 	DBaseAddress
.010e88	a8		tay			tay 									; put in Y
.010e89					_CLINextLine:
.010e89	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.010e8c	f0 29		beq $010eb7		beq 	_CLIExit
.010e8e	20 1f 10	jsr $01101f		jsr 	ScanIndent  					; scan for formatting.
.010e91	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.010e94	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.010e96	90 14		bcc $010eac		bcc 	_CLIFollowLink
.010e98	c5 34		cmp $34			cmp 	DTemp4+2
.010e9a	f0 02		beq $010e9e		beq 	_CLIShowLine
.010e9c	b0 0e		bcs $010eac		bcs 	_CLIFollowLink
.010e9e					_CLIShowLine:
.010e9e	a5 30		lda $30			lda 	DListBuffer
.010ea0	20 ba 0e	jsr $010eba		jsr 	Detokenise 						; detokenise it
.010ea3	5a		phy			phy
.010ea4	a8		tay			tay 									; print buffer out
.010ea5	20 1f 05	jsr $01051f		jsr 	PrintBasicString
.010ea8	20 d1 17	jsr $0117d1		jsr 	HWNewLine
.010eab	7a		ply			ply 									; get address
.010eac					_CLIFollowLink:
.010eac	98		tya			tya 									; follow link
.010ead	18		clc			clc
.010eae	79 00 00	adc $0000,y		adc 	$0000,y
.010eb1	a8		tay			tay
.010eb2	20 eb 17	jsr $0117eb		jsr 	HWCheckBreak 					; break key pressed.
.010eb5	f0 d2		beq $010e89		beq 	_CLINextLine
.010eb7					_CLIExit:
.010eb7	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.010eb9	60		rts			rts
.010eba					Detokenise:
.010eba	48		pha			pha
.010ebb	da		phx			phx
.010ebc	5a		phy			phy
.010ebd	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.010ebf	1a		inc a			inc 	a
.010ec0	85 1a		sta $1a			sta 	DCurrentTempString
.010ec2	64 1c		stz $1c			stz		DConstantShift
.010ec4	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.010ec7	92 18		sta ($18)		sta 	(DStartTempString)
.010ec9	5a		phy			phy 									; save Y
.010eca	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.010ecd	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.010ed0	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.010ed3	20 40 0c	jsr $010c40		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010ed6	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.010ed8	c5 2e		cmp $2e			cmp 	DIndent2
.010eda	90 02		bcc $010ede		bcc 	_DTKSmaller
.010edc	a5 2e		lda $2e			lda 	DIndent2
.010ede					_DTKSmaller:
.010ede	0a		asl a			asl 	a
.010edf	69 06 00	adc #$0006		adc 	#6
.010ee2	85 08		sta $08			sta 	DTemp1
.010ee4					_DTKPadLineNo:
.010ee4	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.010ee7	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010eea	b2 18		lda ($18)		lda 	(DStartTempString)
.010eec	29 ff 00	and #$00ff		and 	#$00FF
.010eef	c5 08		cmp $08			cmp 	DTemp1
.010ef1	d0 f1		bne $010ee4		bne 	_DTKPadLineNo
.010ef3	68		pla			pla 									; get pointer
.010ef4	18		clc			clc 									; point to start of line
.010ef5	69 04 00	adc #$0004		adc 	#4
.010ef8	a8		tay			tay 									; put back in Y.
.010ef9					_DTKMainLoop:
.010ef9	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.010efc	d0 04		bne $010f02		bne 	_DTKNotZero 					; if zero, return.
.010efe	7a		ply			ply
.010eff	fa		plx			plx
.010f00	68		pla			pla
.010f01	60		rts			rts
.010f02					_DTKNotZero:
.010f02	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.010f05	b0 1c		bcs $010f23		bcs 	_DTKNotString
.010f07	5a		phy			phy										; save token address on stack.
.010f08	c8		iny			iny 									; skip first token
.010f09	c8		iny			iny
.010f0a	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.010f0d	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f10	98		tya			tya 									; copy the string out.
.010f11	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010f14	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.010f17	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f1a	68		pla			pla 									; get token, which is its own offset
.010f1b	a8		tay			tay
.010f1c	18		clc			clc
.010f1d	79 00 00	adc $0000,y		adc 	$0000,y
.010f20	a8		tay			tay
.010f21	80 d6		bra $010ef9		bra 	_DTKMainLoop
.010f23					_DTKNotString:
.010f23	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.010f26	b0 09		bcs $010f31		bcs 	_DTKNotShift
.010f28	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.010f2b	85 1c		sta $1c			sta 	DConstantShift
.010f2d	c8		iny			iny 									; skip token.
.010f2e	c8		iny			iny
.010f2f	80 c8		bra $010ef9		bra 	_DTKMainLoop
.010f31					_DTKNotShift:
.010f31	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.010f34	b0 07		bcs $010f3d		bcs 	_DTKNotKeyword
.010f36	c8		iny			iny 									; skip over token
.010f37	c8		iny			iny
.010f38	20 b7 0f	jsr $010fb7		jsr 	_DTKDecodeKeyword 				; decode it.
.010f3b	80 bc		bra $010ef9		bra 	_DTKMainLoop
.010f3d					_DTKNotKeyword:
.010f3d	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.010f40	b0 18		bcs $010f5a		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.010f42	5a		phy			phy 									; save pointer
.010f43	38		sec			sec  									; shift it in the range 0-32767
.010f44	e9 00 40	sbc #$4000		sbc 	#$4000
.010f47	0a		asl a			asl 	a 								; shift it left, losing bit 15
.010f48	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.010f4a	6a		ror a			ror 	a 								; rotate that into the constant value
.010f4b	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.010f4d	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.010f50	20 40 0c	jsr $010c40		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010f53	64 1c		stz $1c			stz 	DConstantShift
.010f55	7a		ply			ply 									; restore pointer
.010f56	c8		iny			iny 									; skip token.
.010f57	c8		iny			iny
.010f58	80 9f		bra $010ef9		bra 	_DTKMainLoop
.010f5a					_DTKIdentifier:
.010f5a	48		pha			pha 									; save token for typing at end
.010f5b					_DTKILoop:
.010f5b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.010f5e	20 87 0f	jsr $010f87		jsr 	_DTKIDecodeToken 				; decode it.
.010f61	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.010f64	c8		iny			iny 									; skip it
.010f65	c8		iny			iny
.010f66	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.010f69	d0 f0		bne $010f5b		bne 	_DTKILoop
.010f6b	68		pla			pla 									; add $( as required.
.010f6c	48		pha			pha 									; comes from the first token.
.010f6d	29 00 20	and #$2000		and 	#IDTypeMask
.010f70	f0 06		beq $010f78		beq 	_DTKINotString
.010f72	a9 24 00	lda #$0024		lda 	#"$"
.010f75	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f78					_DTKINotString:
.010f78	68		pla			pla
.010f79	29 00 10	and #$1000		and 	#IDArrayMask
.010f7c	f0 06		beq $010f84		beq 	_DTKINotArray
.010f7e	a9 28 00	lda #$0028		lda 	#"("
.010f81	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f84					_DTKINotArray:
.010f84	82 72 ff	brl $010ef9		brl 	_DTKMainLoop
.010f87					_DTKIDecodeToken:
.010f87	5a		phy			phy
.010f88	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.010f8b	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.010f8e					_DTKIDivide:
.010f8e	38		sec			sec
.010f8f	e9 2d 00	sbc #$002d		sbc 	#45
.010f92	c8		iny			iny
.010f93	b0 f9		bcs $010f8e		bcs 	_DTKIDivide
.010f95	69 2d 00	adc #$002d		adc 	#45
.010f98	20 a1 0f	jsr $010fa1		jsr 	_DTKIOutA 						; output low.
.010f9b	98		tya			tya
.010f9c	20 a1 0f	jsr $010fa1		jsr 	_DTKIOutA 						; output high
.010f9f	7a		ply			ply
.010fa0	60		rts			rts
.010fa1					_DTKIOutA:
.010fa1	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.010fa4	f0 10		beq $010fb6		beq 	_DTKIOutExit
.010fa6	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.010fa9	90 04		bcc $010faf		bcc 	_DTKIOutAlpha
.010fab	38		sec			sec  									; adjust for 0-9
.010fac	e9 4b 00	sbc #$004b		sbc 	#$4B
.010faf					_DTKIOutAlpha:
.010faf	18		clc			clc										; adjust for A-Z
.010fb0	69 60 00	adc #$0060		adc 	#96
.010fb3	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010fb6					_DTKIOutExit:
.010fb6	60		rts			rts
.010fb7					_DTKDecodeKeyword:
.010fb7	48		pha			pha
.010fb8	da		phx			phx
.010fb9	5a		phy			phy
.010fba	a8		tay			tay 									; save token ID in Y
.010fbb	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.010fbe	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.010fc1	48		pha			pha 									; save this flag on a stack
.010fc2	5a		phy			phy 									; save the token ID
.010fc3	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.010fc6	d0 19		bne $010fe1		bne 	_DTKNotSpecial1
.010fc8	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.010fca	88		dey			dey
.010fcb	b9 00 00	lda $0000,y		lda 	$0000,y
.010fce	29 ff 00	and #$00ff		and 	#$00FF
.010fd1	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.010fd4	f0 0b		beq $010fe1		beq 	_DTKNotSpecial1
.010fd6	c9 3a 00	cmp #$003a		cmp 	#":"
.010fd9	f0 06		beq $010fe1		beq 	_DTKNotSpecial1
.010fdb	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.010fde	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010fe1					_DTKNotSpecial1:
.010fe1	68		pla			pla
.010fe2	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.010fe5	a8		tay			tay 									; into Y.
.010fe6	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.010fe9					_DTKDWorkThrough:
.010fe9	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.010fea	f0 0f		beq $010ffb		beq 	_DTKDFound
.010fec	86 08		stx $08			stx 	DTemp1
.010fee	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.010ff2	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.010ff5	18		clc			clc
.010ff6	65 08		adc $08			adc 	DTemp1
.010ff8	aa		tax			tax
.010ff9	80 ee		bra $010fe9		bra 	_DTKDWorkThrough
.010ffb					_DTKDFound:
.010ffb	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.010fff	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011002	3a		dec a			dec 	a
.011003	a8		tay			tay 									; put in Y
.011004					_DTKOut:
.011004	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.011008	29 ff 00	and #$00ff		and 	#$00FF
.01100b	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01100e	e8		inx			inx
.01100f	88		dey			dey
.011010	d0 f2		bne $011004		bne 	_DTKOut
.011012	68		pla			pla 									; trailing space.
.011013	d0 06		bne $01101b		bne 	_DTKNotSpecial2
.011015	a9 20 00	lda #$0020		lda 	#" "
.011018	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01101b					_DTKNotSpecial2:
.01101b	7a		ply			ply
.01101c	fa		plx			plx
.01101d	68		pla			pla
.01101e	60		rts			rts
.01101f					ScanIndent:
.01101f	48		pha			pha
.011020	5a		phy			phy
.011021	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011023	85 2e		sta $2e			sta 	DIndent2
.011025	98		tya			tya
.011026	18		clc			clc 									; point to code.
.011027	69 04 00	adc #$0004		adc 	#4
.01102a	a8		tay			tay
.01102b					_SILoop:
.01102b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01102e	f0 35		beq $011065		beq 	_SIExit
.011030	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011033	b0 08		bcs $01103d		bcs 	_SICheckKeyword
.011035	98		tya			tya 									; skip string.
.011036	18		clc			clc
.011037	79 00 00	adc $0000,y		adc 	$0000,y
.01103a	a8		tay			tay
.01103b	80 ee		bra $01102b		bra 	_SILoop
.01103d					_SICheckKeyword:
.01103d	29 00 e0	and #$e000		and 	#$E000
.011040	c9 00 20	cmp #$2000		cmp 	#$2000
.011043	f0 04		beq $011049		beq 	_SIFoundKeyword
.011045					_SIAdvance:
.011045	c8		iny			iny 									; if not, loop round.
.011046	c8		iny			iny
.011047	80 e2		bra $01102b		bra 	_SILoop
.011049					_SIFoundKeyword:
.011049	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01104c	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01104f	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011052	f0 0d		beq $011061		beq 	_SIKeyPlus
.011054	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011057	d0 ec		bne $011045		bne 	_SIAdvance
.011059	c6 2c		dec $2c			dec 	DIndent
.01105b	10 e8		bpl $011045		bpl 	_SIAdvance
.01105d	64 2c		stz $2c			stz 	DIndent
.01105f	80 e4		bra $011045		bra 	_SIAdvance
.011061					_SIKeyPlus:
.011061	e6 2c		inc $2c			inc 	DIndent
.011063	80 e0		bra $011045		bra 	_SIAdvance
.011065					_SIExit:
.011065	7a		ply			ply
.011066	68		pla			pla
.011067	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.011068					Function_PRINT:
.011068	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01106a	f0 33		beq $01109f			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01106c	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.01106f	f0 2e		beq $01109f			beq 	_FPRExitCR
.011071	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011074	f0 23		beq $011099			beq 	_FPRSkipLoop
.011076	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.011079	f0 1b		beq $011096			beq 	_FPRNewLine
.01107b	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.01107e	f0 11		beq $011091			beq 	_FPRTab
.011080					_FPRExpression:
.011080	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011083	b0 06		bcs $01108b			bcs 	_FPRHaveString
.011085	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011088	20 38 0c	jsr $010c38			jsr 	ConvertToString
.01108b					_FPRHaveString:
.01108b	a8		tay				tay 								; print the basic String.
.01108c	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.01108f	80 d7		bra $011068			bra 	Function_Print 				; and go round again.
.011091					_FPRTab:
.011091	20 e4 17	jsr $0117e4			jsr 	HWTab
.011094	80 03		bra $011099			bra 	_FPRSkipLoop
.011096					_FPRNewLine:
.011096	20 d1 17	jsr $0117d1			jsr 	HWNewLine
.011099					_FPRSkipLoop:
.011099	e6 06		inc $06				inc 	DCodePtr
.01109b	e6 06		inc $06				inc 	DCodePtr
.01109d	80 c9		bra $011068			bra 	Function_Print
.01109f					_FPRExitCR:
.01109f	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0110a1	88		dey				dey
.0110a2	88		dey				dey
.0110a3	b9 00 00	lda $0000,y			lda 	$0000,y
.0110a6	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0110a9	f0 08		beq $0110b3			beq 	_FPRExit
.0110ab	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.0110ae	f0 03		beq $0110b3			beq 	_FPRExit
.0110b0	20 d1 17	jsr $0117d1			jsr 	HWNewLine 					; print a new line.
.0110b3					_FPRExit:
.0110b3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.0110b4					Function_IF:
.0110b4	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.0110b7	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0110b9	05 08		ora $08				ora 	DTemp1
.0110bb	a8		tay				tay 								; success flag in Y.
.0110bc	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0110be	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.0110c1	d0 32		bne $0110f5			bne 	_FIFExtended 				; if so, go to the extended IF.
.0110c3	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0110c5	e6 06		inc $06				inc 	DCodePtr
.0110c7	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0110ca	f0 0f		beq $0110db			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0110cc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0110ce	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0110d1	90 21		bcc $0110f4			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0110d3	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110d6	b0 1c		bcs $0110f4			bcs 	_FIFContinue
.0110d8	4c 6a 13	jmp $01136a			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0110db					_FIFEndOfLine:
.0110db	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0110dd	f0 15		beq $0110f4			beq 	_FIFContinue 				; if done so, continue.
.0110df	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0110e2	90 06		bcc $0110ea			bcc 	_FIFStringConstant
.0110e4	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0110e6	e6 06		inc $06				inc 	DCodePtr
.0110e8	80 f1		bra $0110db			bra 	_FIFEndOfLine
.0110ea					_FIFStringConstant:
.0110ea	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0110ed	18		clc				clc
.0110ee	65 06		adc $06				adc 	DCodePtr
.0110f0	85 06		sta $06				sta 	DCodePtr
.0110f2	80 e7		bra $0110db			bra 	_FIFEndOfLine
.0110f4					_FIFContinue:
.0110f4	60		rts				rts
.0110f5					_FIFExtended:
.0110f5	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0110f7	e6 2a		inc $2a				inc 	DStack
.0110f9	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.0110fc	a6 2a		ldx $2a				ldx 	DStack
.0110fe	95 00		sta $00,x			sta 	$00,x
.011100	98		tya				tya 								; see if the test was passed.
.011101	f0 01		beq $011104			beq 	_FIXSkip 					; if zero then it has failed.
.011103	60		rts				rts 								; test passed, so continue executing
.011104					_FIXSkip:
.011104	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011107	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.01110a	20 6a 11	jsr $01116a			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01110d	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01110f	e6 06		inc $06				inc 	DCodePtr
.011111	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011114	d0 04		bne $01111a			bne 	_FIXNoThrow
.011116	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011118	c6 2a		dec $2a				dec 	DStack
.01111a					_FIXNoThrow:
.01111a	60		rts				rts
.01111b					Handler_ELSE:
.01111b	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01111d	b5 00		lda $00,x			lda 	$00,x
.01111f	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011122	d0 12		bne $011136			bne 	_HEBadStructure
.011124	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.011127	a2 00 00	ldx #$0000			ldx 	#$0000
.01112a	20 6a 11	jsr $01116a			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01112d	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01112f	e6 06		inc $06				inc 	DCodePtr
.011131	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011133	c6 2a		dec $2a				dec 	DStack
.011135	60		rts				rts
.011136					_HEBadStructure:
.011136	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011139	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011141	68 6f 75 74 20 49 66 00
.011149					Handler_ENDIF:
.011149	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01114b	b5 00		lda $00,x			lda 	$00,x
.01114d	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011150	d0 05		bne $011157			bne 	_HEIBadStructure
.011152	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011154	c6 2a		dec $2a				dec 	DStack
.011156	60		rts				rts
.011157					_HEIBadStructure:
.011157	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01115a	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011162	68 6f 75 74 20 49 66 00
.01116a					ScanForwardLevel:
.01116a	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01116c	86 0a		stx $0a				stx 	DTemp1+2
.01116e	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011170	85 0c		sta $0c				sta 	DTemp2
.011172	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011175					_SFLLoop:
.011175	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011178	d0 0d		bne $011187			bne 	_SFLNoCheck 				; we're in a substructure.
.01117a	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01117c	f0 09		beq $011187			beq 	_SFLNoCheck 				; don't check zero
.01117e	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011180	f0 04		beq $011186			beq 	_SFLFound
.011182	c5 0a		cmp $0a				cmp 	DTemp1+2
.011184	d0 01		bne $011187			bne 	_SFLNoCheck
.011186					_SFLFound:
.011186	60		rts				rts
.011187					_SFLNoCheck:
.011187	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011189	f0 4f		beq $0111da			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01118b	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01118e	90 40		bcc $0111d0			bcc 	_SFLSkipString 				; then handle that.
.011190	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011192	e6 06		inc $06				inc 	DCodePtr
.011194	a8		tay				tay 								; put token in Y temporarily.
.011195	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011198	c9 00 20	cmp #$2000			cmp 	#$2000
.01119b	d0 d8		bne $011175			bne 	_SFLLoop
.01119d	98		tya				tya 								; get the token back.
.01119e	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0111a1	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0111a4	f0 cf		beq $011175			beq 	_SFLLoop
.0111a6	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0111a9	90 ca		bcc $011175			bcc 	_SFLLoop
.0111ab	e8		inx				inx 								; increment the level.
.0111ac	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0111af	f0 c4		beq $011175			beq 	_SFLLoop
.0111b1	ca		dex				dex 								; decrement the level
.0111b2	ca		dex				dex 								; one overdoes the previous inx.
.0111b3	10 c0		bpl $011175			bpl 	_SFLLoop 					; if gone -ve then error.
.0111b5					_SFLError:
.0111b5	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0111b7	85 22		sta $22				sta 	DLineNumber
.0111b9	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0111bc	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0111c4	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0111d0					_SFLSkipString:
.0111d0	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0111d3	18		clc				clc
.0111d4	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0111d6	85 06		sta $06				sta 	DCodePtr
.0111d8	80 9b		bra $011175			bra 	_SFLLoop 					; go round again.
.0111da					_SFLNextLine:
.0111da	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0111dc	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0111df	f0 d4		beq $0111b5			beq 	_SFLError 					; if zero, then there's no more code to search.
.0111e1	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0111e4	85 22		sta $22				sta 	DLineNumber
.0111e6	18		clc				clc
.0111e7	a5 06		lda $06				lda 	DCodePtr
.0111e9	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0111ec	85 06		sta $06				sta 	DCodePtr
.0111ee	80 85		bra $011175			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0111f0					Command_FOR:
.0111f0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0111f2	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0111f5	d0 60		bne $011257			bne		_CFOBad
.0111f7	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.0111fa	b0 15		bcs $011211			bcs 	_CFOExists
.0111fc	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111fe	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011201	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011204	48		pha				pha 								; save on stack
.011205					_CFOSkipToken:
.011205	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011207	e6 06		inc $06				inc 	DCodePtr
.011209	e6 06		inc $06				inc 	DCodePtr
.01120b	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01120e	d0 f5		bne $011205			bne 	_CFOSkipToken
.011210	68		pla				pla 								; restore address
.011211					_CFOExists:
.011211	48		pha				pha 								; push variable address on stack
.011212	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011215	20 af 04	jsr $0104af			jsr 	ExpectToken
.011218	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.01121b	bb		tyx				tyx 								; put high value in X
.01121c	7a		ply				ply 								; address in Y
.01121d	99 00 00	sta $0000,y			sta 	$0000,y
.011220	8a		txa				txa
.011221	99 02 00	sta $0002,y			sta 	$0002,y
.011224	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.011227	20 af 04	jsr $0104af			jsr 	ExpectToken
.01122a	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01122c	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01122e	95 02		sta $02,x			sta 	$02,x
.011230	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011232	95 04		sta $04,x			sta 	$04,x
.011234	98		tya				tya 								; save variable address at +6
.011235	95 06		sta $06,x			sta 	$06,x
.011237	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.01123a	95 08		sta $08,x			sta 	$08,x
.01123c	8a		txa				txa 								; add 8 to stack position
.01123d	18		clc				clc
.01123e	69 08 00	adc #$0008			adc 	#8
.011241	85 2a		sta $2a				sta 	DStack
.011243	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011246	b2 06		lda ($06)			lda 	(DCodePtr)
.011248	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.01124b	d0 09		bne $011256			bne 	_CFONoStep
.01124d	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.011250	20 af 04	jsr $0104af			jsr 	ExpectToken
.011253	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.011256					_CFONoStep:
.011256	60		rts				rts
.011257					_CFOBad:
.011257	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01125a	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011262	76 61 72 69 61 62 6c 65 00
.01126b					Command_NEXT:
.01126b	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01126d	b5 00		lda $00,x			lda 	$00,x
.01126f	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011272	f0 14		beq $011288			beq 	_CNXOk
.011274	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011277	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01127f	68 6f 75 74 20 46 6f 72 00
.011288					_CNXOk:
.011288	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01128a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01128d	90 22		bcc $0112b1			bcc 	_CNXNoVariable
.01128f	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.011292	90 08		bcc $01129c			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011294	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011296	ca		dex				dex
.011297	ca		dex				dex
.011298	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01129a	f0 15		beq $0112b1			beq 	_CNXNoVariable 				; then continue
.01129c					_CNXNextVar:
.01129c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01129f	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0112a7	20 76 61 72 69 61 62 6c 65 00
.0112b1					_CNXNoVariable:
.0112b1	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0112b3	48		pha				pha
.0112b4	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0112b6	38		sec				sec
.0112b7	e9 08 00	sbc #$0008			sbc 	#8
.0112ba	85 2a		sta $2a				sta 	DStack
.0112bc	aa		tax				tax 								; X points to the stack.
.0112bd	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0112bf	85 06		sta $06				sta 	DCodePtr
.0112c1	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.0112c4	5a		phy				phy 								; save the target on the stack
.0112c5	48		pha				pha
.0112c6	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0112c9	85 08		sta $08				sta 	DTemp1
.0112cb	64 0a		stz $0a				stz 	DTemp1+2
.0112cd	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0112cf	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.0112d2	d0 0b		bne $0112df			bne 	_CNXNoStep
.0112d4	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0112d6	e6 06		inc $06				inc 	DCodePtr
.0112d8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.0112db	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0112dd	84 0a		sty $0a				sty 	DTemp1+2
.0112df					_CNXNoStep:
.0112df	68		pla				pla 								; save the Target in DTemp2
.0112e0	85 0c		sta $0c				sta 	DTemp2
.0112e2	68		pla				pla
.0112e3	85 0e		sta $0e				sta 	DTemp2+2
.0112e5	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0112e7	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0112e9	a8		tay				tay
.0112ea	18		clc				clc
.0112eb	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0112ee	65 08		adc $08				adc 	DTemp1
.0112f0	99 00 00	sta $0000,y			sta 	$0000,y
.0112f3	b9 02 00	lda $0002,y			lda 	$0002,y
.0112f6	65 0a		adc $0a				adc 	DTemp1+2
.0112f8	99 02 00	sta $0002,y			sta 	$0002,y
.0112fb	38		sec				sec
.0112fc	a5 0c		lda $0c				lda 	DTemp2
.0112fe	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011301	85 0c		sta $0c				sta 	DTemp2
.011303	a5 0e		lda $0e				lda 	DTemp2+2
.011305	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011308	85 0e		sta $0e				sta 	DTemp2+2
.01130a	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01130c	f0 0a		beq $011318			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01130e	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011310	45 0a		eor $0a				eor 	DTemp1+2
.011312	10 04		bpl $011318			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011314	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011315	85 06		sta $06				sta 	DCodePtr
.011317	60		rts				rts
.011318					_CNXLoopAgain:
.011318	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011319	18		clc				clc
.01131a	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01131c	aa		tax				tax
.01131d	69 08 00	adc #$0008			adc 	#8
.011320	85 2a		sta $2a				sta 	DStack
.011322	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011324	85 22		sta $22				sta 	DLineNumber
.011326	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.011327					Function_ONGOTO:
.011327	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.01132a	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01132d	d0 25		bne $011354			bne 	_FOGoFail
.01132f	c9 00 00	cmp #$0000			cmp 	#0
.011332	f0 20		beq $011354			beq 	_FOGoFail 					; we start with index = 1
.011334	48		pha				pha 								; save count on stack
.011335	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011338	20 af 04	jsr $0104af			jsr 	ExpectToken
.01133b	fa		plx				plx 								; put count in X.
.01133c					_FOGoLoop:
.01133c	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01133e	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011341	90 73		bcc $0113b6			bcc 	FGOFail 					; if not, then we have an error.
.011343	c9 00 c0	cmp #$c000			cmp 	#$C000
.011346	b0 6e		bcs $0113b6			bcs 	FGOFail
.011348	ca		dex				dex 								; subtract one, if done, call GOTO code
.011349	f0 1f		beq $01136a			beq 	Function_GOTO
.01134b	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01134d	e6 06		inc $06				inc 	DCodePtr
.01134f	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; expect a comma
.011352	80 e8		bra $01133c			bra 	_FOGoLoop 					; and loop round.
.011354					_FOGoFail:
.011354	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011357	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01135f	47 6f 74 6f 20 76 61 6c 75 65 00
.01136a					Function_GOTO:
.01136a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01136c	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01136f	90 45		bcc $0113b6			bcc 	FGOFail 					; we don't do calculate line numbers.
.011371	c9 00 c0	cmp #$c000			cmp 	#$C000
.011374	b0 40		bcs $0113b6			bcs 	FGOFail
.011376	38		sec				sec 								; convert to 0-32767
.011377	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01137a	aa		tax				tax
.01137b	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.01137e	18		clc				clc
.01137f	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011381	a8		tay				tay
.011382					_FGOSearch:
.011382	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011385	f0 18		beq $01139f			beq 	_FGOUnknown
.011387	8a		txa				txa 								; does it match line number ?
.011388	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01138b	f0 08		beq $011395			beq 	_FGOFound 					; yes, then found.
.01138d	98		tya				tya 								; no follow the link
.01138e	18		clc				clc
.01138f	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011392	a8		tay				tay
.011393	80 ed		bra $011382			bra 	_FGOSearch 					; and keep looking
.011395					_FGOFound:
.011395	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011397	98		tya				tya 								; Y + 4 is the code pointer.
.011398	18		clc				clc 								; (skipping link and line #)
.011399	69 04 00	adc #$0004			adc 	#4
.01139c	85 06		sta $06				sta 	DCodePtr
.01139e	60		rts				rts									; and continue
.01139f					_FGOUnknown:
.01139f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113a2	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0113aa	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0113b6					FGOFail:
.0113b6	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113b9	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0113c1	20 4e 75 6d 62 65 72 00
.0113c9					Function_GOSUB:
.0113c9	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0113cb	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0113cd	18		clc				clc
.0113ce	69 02 00	adc #$0002			adc 	#2
.0113d1	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0113d3	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0113d5	95 04		sta $04,x			sta 	$04,x
.0113d7	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0113da	95 06		sta $06,x			sta 	$06,x
.0113dc	8a		txa				txa 								; advance stack by 6.
.0113dd	18		clc				clc
.0113de	69 06 00	adc #$0006			adc 	#6
.0113e1	85 2a		sta $2a				sta 	DStack
.0113e3	80 85		bra $01136a			bra 	Function_GOTO 				; and do a GOTO.
.0113e5					Function_RETURN:
.0113e5	a6 2a		ldx $2a				ldx 	DStack
.0113e7	b5 00		lda $00,x			lda 	$00,x
.0113e9	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0113ec	d0 11		bne $0113ff			bne 	_FRetFail
.0113ee	8a		txa				txa 								; unpick stack.
.0113ef	38		sec				sec
.0113f0	e9 06 00	sbc #$0006			sbc 	#6
.0113f3	85 2a		sta $2a				sta 	DStack
.0113f5	aa		tax				tax
.0113f6	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0113f8	85 06		sta $06				sta 	DCodePtr
.0113fa	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0113fc	85 22		sta $22				sta 	DLineNumber
.0113fe	60		rts				rts
.0113ff					_FRetFail:
.0113ff	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011402	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01140a	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011417					Function_REPEAT:
.011417	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011419	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01141b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01141d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01141f	95 04		sta $04,x			sta 	$04,x
.011421	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.011424	95 06		sta $06,x			sta 	$06,x
.011426	8a		txa				txa 								; advance stack by 6.
.011427	18		clc				clc
.011428	69 06 00	adc #$0006			adc 	#6
.01142b	85 2a		sta $2a				sta 	DStack
.01142d	60		rts				rts
.01142e					Function_UNTIL:
.01142e	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011430	b5 00		lda $00,x			lda 	$00,x
.011432	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.011435	d0 26		bne $01145d			bne 	_FUNFail
.011437	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.01143a	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01143d	d0 15		bne $011454			bne 	_FUNExit
.01143f	c9 00 00	cmp #$0000			cmp 	#0
.011442	d0 10		bne $011454			bne 	_FUNExit
.011444	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011446	38		sec				sec
.011447	e9 06 00	sbc #$0006			sbc 	#6
.01144a	aa		tax				tax
.01144b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01144d	85 06		sta $06				sta 	DCodePtr
.01144f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011451	85 22		sta $22				sta 	DLineNumber
.011453	60		rts				rts
.011454					_FUNExit:
.011454	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011456	38		sec				sec
.011457	e9 06 00	sbc #$0006			sbc 	#6
.01145a	85 2a		sta $2a				sta 	DStack
.01145c	60		rts				rts
.01145d					_FUNFail:
.01145d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011460	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011468	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011475					Function_WHILE:
.011475	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011477	48		pha				pha 								; save on stack
.011478	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.01147b	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.01147e	d0 14		bne $011494			bne 	_FWHExecute
.011480	c9 00 00	cmp #$0000			cmp 	#0
.011483	d0 0f		bne $011494			bne 	_FWHExecute
.011485	68		pla				pla 								; throw away current instruction
.011486	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.011489	a2 00 00	ldx #$0000			ldx 	#0
.01148c	20 6a 11	jsr $01116a			jsr 	ScanForwardLevel 			; scan forward checking structures
.01148f	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011491	e6 06		inc $06				inc 	DCodePtr
.011493	60		rts				rts
.011494					_FWHExecute:
.011494	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011496	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011497	3a		dec a				dec 	a
.011498	3a		dec a				dec 	a
.011499	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01149b	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01149d	95 04		sta $04,x			sta 	$04,x
.01149f	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.0114a2	95 06		sta $06,x			sta 	$06,x
.0114a4	8a		txa				txa 								; advance stack by 6.
.0114a5	18		clc				clc
.0114a6	69 06 00	adc #$0006			adc 	#6
.0114a9	85 2a		sta $2a				sta 	DStack
.0114ab	60		rts				rts
.0114ac					Function_WEND:
.0114ac	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.0114ae	b5 00		lda $00,x			lda 	$00,x
.0114b0	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.0114b3	d0 11		bne $0114c6			bne 	_FWEFail
.0114b5	8a		txa				txa 								; unpick stack and always loop back.
.0114b6	38		sec				sec 								; we do the check at the top.
.0114b7	e9 06 00	sbc #$0006			sbc 	#6
.0114ba	85 2a		sta $2a				sta 	DStack
.0114bc	aa		tax				tax
.0114bd	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0114bf	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0114c1	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0114c3	85 22		sta $22				sta 	DLineNumber
.0114c5	60		rts				rts
.0114c6					_FWEFail:
.0114c6	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114c9	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0114d1	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0114dc					Function_END:
.0114dc	02 00		cop #$00			cop 	#0
.0114de					Function_RUN:
.0114de	20 45 15	jsr $011545			jsr 	Function_CLEAR 				; clear all variables.
.0114e1	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0114e3	18		clc				clc
.0114e4	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0114e7					_FRun_NextLineNumber:
.0114e7	a8		tay				tay 								; put in Y
.0114e8	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0114eb	f0 ef		beq $0114dc			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0114ed	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0114f0	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0114f2	98		tya				tya 								; get address back
.0114f3	18		clc				clc 								; skip over the link/line number
.0114f4	69 04 00	adc #$0004			adc 	#4
.0114f7	85 06		sta $06				sta 	DCodePtr
.0114f9					_FRun_NextInstruction:
.0114f9	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0114fb	20 eb 17	jsr $0117eb			jsr 	HWCheckBreak 				; break key pressed.
.0114fe	d0 3c		bne $01153c			bne 	_FRun_Break
.011500	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011502	f0 32		beq $011536			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011504	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.011507	f0 18		beq $011521			beq 	_FRun_Colon
.011509	a8		tay				tay 								; save in Y
.01150a	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01150d	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011510	d0 15		bne $011527			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011512	98		tya				tya 								; get token back
.011513	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011516	0a		asl a				asl 	a 							; double it into X
.011517	aa		tax				tax
.011518	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01151a	e6 06		inc $06				inc 	DCodePtr
.01151c	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01151f	80 d8		bra $0114f9			bra 	_FRun_NextInstruction 		; do the following instruction.
.011521					_FRun_Colon:
.011521	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011523	e6 06		inc $06				inc 	DCodePtr
.011525	80 d2		bra $0114f9			bra 	_FRun_NextInstruction 		; do the following instruction.
.011527					_FRun_TryLET:
.011527	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011529	c9 00 c0	cmp #$c000			cmp 	#$C000
.01152c	90 05		bcc $011533			bcc		_FRunSyntax 				; no, must be syntax.
.01152e	20 c8 0d	jsr $010dc8			jsr 	Function_LET 				; try as a LET.
.011531	80 c6		bra $0114f9			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011533					_FRunSyntax:
.011533	82 69 ef	brl $01049f			brl 	SyntaxError
.011536					_FRun_EndInstruction:
.011536	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011538	1a		inc a				inc 	a 							; go to link for next line
.011539	1a		inc a				inc 	a
.01153a	80 ab		bra $0114e7			bra 	_FRun_NextLineNumber
.01153c					_FRun_Break:
.01153c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01153f	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011545					Function_CLEAR:
.011545	20 51 15	jsr $011551			jsr 	ClearVariablesPointersAndStacks
.011548	60		rts				rts
.011549					Function_STOP:
.011549	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01154c	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011551					ClearVariablesPointersAndStacks:
.011551	a9 80 00	lda #$0080			lda 	#BASStack
.011554	85 2a		sta $2a				sta 	DStack
.011556	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011558	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.01155b	a9 00 00	lda #$0000			lda 	#$0000
.01155e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011560	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011562	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011565	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011567	20 8e 15	jsr $01158e			jsr 	FindCodeEnd 				; find where the program ends.
.01156a	a8		tay				tay 								; Y points to it.
.01156b	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01156e	99 02 00	sta $0002,y			sta 	$0002,y
.011571	99 04 00	sta $0004,y			sta 	$0004,y
.011574	98		tya				tya 								; start of working memory up
.011575	18		clc				clc
.011576	69 06 00	adc #$0006			adc 	#6
.011579	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.01157c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01157e	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011581					_FCLoop:
.011581	a9 00 00	lda #$0000			lda 	#$0000
.011584	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011586	c8		iny				iny
.011587	c8		iny				iny
.011588	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.01158b	d0 f4		bne $011581			bne 	_FCLoop
.01158d	60		rts				rts
.01158e					FindCodeEnd:
.01158e	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.011591	18		clc				clc
.011592	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011594	a8		tay				tay
.011595					_FCELoop:
.011595	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011598	f0 08		beq $0115a2			beq 	_FCEExit
.01159a	98		tya				tya 								; add offset
.01159b	18		clc				clc
.01159c	79 00 00	adc $0000,y			adc 	$0000,y
.01159f	a8		tay				tay
.0115a0	80 f3		bra $011595			bra 	_FCELoop
.0115a2					_FCEExit:
.0115a2	98		tya				tya 								; return in A
.0115a3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.0115a4					Function_Dim:
.0115a4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0115a6	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0115a9	f0 3b		beq $0115e6			beq		_FDIMNotArray 				; no, error.
.0115ab	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.0115ae	b0 41		bcs $0115f1			bcs 	_FDIMExists 				; if it does, that's an error.
.0115b0	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0115b2	48		pha				pha
.0115b3	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0115b5	48		pha				pha
.0115b6					_FDIMSkip:
.0115b6	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0115b8	e6 06		inc $06				inc 	DCodePtr
.0115ba	e6 06		inc $06				inc 	DCodePtr
.0115bc	29 00 08	and #$0800			and 	#IDContMask
.0115bf	d0 f5		bne $0115b6			bne 	_FDIMSkip
.0115c1	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.0115c4	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check the ) following.
.0115c7	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0115ca	d0 3b		bne $011607			bne 	_FDIMSize
.0115cc	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0115cf	f0 36		beq $011607			beq 	_FDIMSize
.0115d1	7a		ply				ply 								; restore HashTablePtr
.0115d2	84 20		sty $20				sty 	DHashTablePtr
.0115d4	7a		ply				ply 								; so now A is the high index, Y points to the token
.0115d5	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.0115d8	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0115da	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.0115dd	d0 06		bne $0115e5			bne 	_FDIMExit
.0115df	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0115e1	e6 06		inc $06				inc 	DCodePtr
.0115e3	80 bf		bra $0115a4			bra 	Function_DIM 				; and do another
.0115e5					_FDIMExit:
.0115e5	60		rts				rts
.0115e6					_FDIMNotArray:
.0115e6	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115e9	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0115f1					_FDIMExists:
.0115f1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115f4	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0115fc	65 64 69 6d 65 6e 73 69 6f 6e 00
.011607					_FDIMSize:
.011607	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01160a	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011612	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011618					Function_COLLECT:
.011618	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.01161a	85 0c		sta $0c				sta 	DTemp2
.01161c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.01161f	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011621	85 0e		sta $0e				sta 	DTemp2+2
.011623	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011625	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011627					_FCNextPass:
.011627	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011629	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.01162b	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.01162d	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011630	18		clc				clc
.011631	65 02		adc $02				adc 	DBaseAddress
.011633	a8		tay				tay 								; put in Y
.011634	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011637					_FCO1:
.011637	20 5d 16	jsr $01165d			jsr  	COLLECTScanVariable 		; scan that one.
.01163a	c8		iny				iny 	 							; go to next pointer
.01163b	c8		iny				iny
.01163c	ca		dex				dex
.01163d	d0 f8		bne $011637			bne 	_FCO1 						; until done all 16.
.01163f	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011642					_FCO2:
.011642	20 71 16	jsr $011671			jsr  	COLLECTScanArray 			; scan that one.
.011645	c8		iny				iny 	 							; go to next pointer
.011646	c8		iny				iny
.011647	ca		dex				dex
.011648	d0 f8		bne $011642			bne 	_FCO2 						; until done all 16.
.01164a	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.01164c	f0 0e		beq $01165c			beq		_FCExit 					; if finished then exit.
.01164e	48		pha				pha 								; save the target address
.01164f	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011651	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011653	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make the string concrete.
.011656	7a		ply				ply 								; restore the string.
.011657	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.01165a	80 cb		bra $011627			bra		_FCNextPass
.01165c					_FCExit:
.01165c	60		rts				rts
.01165d					COLLECTScanVariable:
.01165d	da		phx				phx 								; save XY
.01165e	5a		phy				phy
.01165f					_CSVLoop:
.01165f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011662	f0 0a		beq $01166e			beq 	_CSVExit
.011664	a8		tay				tay 								; put new address into Y
.011665	18		clc				clc 								; which is four on.
.011666	69 04 00	adc #$0004			adc 	#4
.011669	20 92 16	jsr $011692			jsr 	COLLECTCheck
.01166c	80 f1		bra $01165f			bra 	_CSVLoop
.01166e					_CSVExit:
.01166e	7a		ply				ply
.01166f	fa		plx				plx
.011670	60		rts				rts
.011671					COLLECTScanArray:
.011671	da		phx				phx 								; save XY
.011672	5a		phy				phy
.011673					_CSALoop:
.011673	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011676	f0 17		beq $01168f			beq 	_CSAExit
.011678	a8		tay				tay 								; put new address in Y
.011679	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.01167c	aa		tax				tax
.01167d	e8		inx				inx									; +1 as one more data element.
.01167e	98		tya				tya 								; point A to first element, at +6
.01167f	18		clc				clc
.011680	69 06 00	adc #$0006			adc 	#6
.011683					_CSADoAllStrings:
.011683	20 92 16	jsr $011692			jsr 	COLLECTCheck 				; collect check the first.
.011686	1a		inc a				inc 	a 							; advance the pointer.
.011687	1a		inc a				inc 	a
.011688	1a		inc a				inc 	a
.011689	1a		inc a				inc 	a
.01168a	ca		dex				dex
.01168b	d0 f6		bne $011683			bne 	_CSADoAllStrings 			; until all strings are done.
.01168d	80 e4		bra $011673			bra 	_CSALoop
.01168f					_CSAExit:
.01168f	7a		ply				ply
.011690	fa		plx				plx
.011691	60		rts				rts
.011692					COLLECTCheck:
.011692	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011694	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011696	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011698	90 0a		bcc $0116a4			bcc 	_COCExit
.01169a	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.01169c	b0 06		bcs $0116a4			bcs 	_COCExit
.01169e	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0116a0	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0116a2	85 14		sta $14				sta 	DSignCount
.0116a4					_COCExit:
.0116a4	a5 0a		lda $0a				lda 	DTemp1+2
.0116a6	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.0116a7					Command_POKE:
.0116a7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116aa	48		pha				pha	 								; save on stack
.0116ab	5a		phy				phy
.0116ac	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116af	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116b2	fa		plx				plx 								; pull address and store in DTemp1
.0116b3	86 0a		stx $0a				stx 	DTemp1+2
.0116b5	fa		plx				plx
.0116b6	86 08		stx $08				stx 	DTemp1+0
.0116b8	e2 20		sep #$20			sep 	#$20 						; byte mode
.0116ba	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0116bc	c2 20		rep #$20			rep 	#$20 						; word mode
.0116be	60		rts				rts
.0116bf					Command_DOKE:
.0116bf	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116c2	48		pha				pha	 								; save on stack
.0116c3	5a		phy				phy
.0116c4	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116c7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116ca	fa		plx				plx 								; pull address and store in DTemp1
.0116cb	86 0a		stx $0a				stx 	DTemp1+2
.0116cd	fa		plx				plx
.0116ce	86 08		stx $08				stx 	DTemp1+0
.0116d0	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0116d2	60		rts				rts
.0116d3					Command_LOKE:
.0116d3	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116d6	48		pha				pha	 								; save on stack
.0116d7	5a		phy				phy
.0116d8	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116db	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116de	fa		plx				plx 								; pull address and store in DTemp1
.0116df	86 0a		stx $0a				stx 	DTemp1+2
.0116e1	fa		plx				plx
.0116e2	86 08		stx $08				stx 	DTemp1+0
.0116e4	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0116e6	98		tya				tya
.0116e7	a0 02 00	ldy #$0002			ldy 	#2
.0116ea	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0116ec	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0116ed					Function_ASSERT:
.0116ed	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.0116f0	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0116f2	05 08		ora $08				ora 	Dtemp1
.0116f4	f0 01		beq $0116f7			beq 	_FAssFail
.0116f6	60		rts				rts
.0116f7					_FAssFail:
.0116f7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116fa	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011702	61 69 6c 65 64 00
.011708					Function_CLS:
.011708	20 76 17	jsr $011776			jsr 	HWClearScreen
.01170b	60		rts				rts
.01170c					Function_REM:
.01170c	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01170e	f0 0b		beq $01171b			beq 	_FRemSyntax 				; if 0, syntax error
.011710	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011713	b0 06		bcs $01171b			bcs 	_FRemSyntax
.011715	18		clc				clc 								; add to DCodePtr
.011716	65 06		adc $06				adc 	DCodePtr
.011718	85 06		sta $06				sta 	DCodePtr
.01171a	60		rts				rts
.01171b					_FRemSyntax:
.01171b	82 81 ed	brl $01049f			brl 	SyntaxError
.01171e					Function_LINK:
.01171e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.011721	85 08		sta $08				sta 	DTemp1 						; target address
.011723	84 0a		sty $0a				sty 	DTemp1+2
.011725	7b		tdc				tda 								; work out what the actual address is
.011726	18		clc				clc
.011727	69 08 00	adc #$0008			adc 	#DTemp1
.01172a	8f 5f 17 01	sta $01175f			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.01172e	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011730	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011733	48		pha				pha
.011734	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011737	aa		tax				tax
.011738	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.01173b	a8		tay				tay
.01173c	68		pla				pla
.01173d	22 5e 17 01	jsl $01175e			jsl 	_FLIExecuteIt
.011741	5a		phy				phy 								; save Y
.011742	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011744	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011747	8a		txa				txa
.011748	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.01174b	68		pla				pla
.01174c	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.01174f	c8		iny				iny 								; point to their high bytes and clear them
.011750	c8		iny				iny
.011751	a9 00 00	lda #$0000			lda 	#0
.011754	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011757	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.01175a	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.01175d	60		rts				rts
.01175e					_FLIExecuteIt:
.01175e	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011761					SwitchBasicInstance:
.011761	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011763	20 76 17	jsr $011776			jsr 	HWClearScreen 						; clear screen
.011766	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011769	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01176b	86 02		stx $02				stx		DBaseAddress
.01176d	84 04		sty $04				sty 	DHighAddress
.01176f	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011770	48		pha				pha 										; then copy it into B.
.011771	ab		plb				plb
.011772	ab		plb				plb
.011773	4c de 14	jmp $0114de			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011776					HWClearScreen:
.011776	48		pha				pha
.011777	da		phx				phx
.011778	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01177b	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01177e	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011782	ca		dex				dex
.011783	10 f6		bpl $01177b			bpl 	_CS0
.011785	64 28		stz $28				stz 	DCursor
.011787	a9 66 20	lda #$2066			lda 	#$2000+HWCursorCharacter
.01178a	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01178e	fa		plx				plx
.01178f	68		pla				pla
.011790	60		rts				rts
.011791					HWPrintChar:
.011791	48		pha				pha
.011792	da		phx				phx
.011793	5a		phy				phy
.011794	29 ff 00	and #$00ff			and 	#$00FF
.011797	c9 61 00	cmp #$0061			cmp 	#"a"
.01179a	90 0c		bcc $0117a8			bcc 	_HWPCNotLC
.01179c	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01179f	b0 07		bcs $0117a8			bcs 	_HWPCNotLC
.0117a1	38		sec				sec
.0117a2	e9 20 00	sbc #$0020			sbc 	#32
.0117a5	09 80 00	ora #$0080			ora 	#128
.0117a8					_HWPCNotLC:
.0117a8	29 bf 00	and #$00bf			and 	#$BF
.0117ab	a6 28		ldx $28				ldx 	DCursor
.0117ad	e2 20		sep #$20			sep 	#$20
.0117af	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0117b3	c2 20		rep #$20			rep 	#$20
.0117b5	e8		inx				inx
.0117b6	8a		txa				txa
.0117b7	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.0117ba	d0 03		bne $0117bf			bne 	_HWNotEnd
.0117bc	a9 00 00	lda #$0000			lda 	#0
.0117bf					_HWNotEnd:
.0117bf	85 28		sta $28				sta 	DCursor
.0117c1	aa		tax				tax
.0117c2	a9 66 00	lda #$0066			lda 	#HWCursorCharacter
.0117c5	e2 20		sep #$20			sep 	#$20
.0117c7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0117cb	c2 20		rep #$20			rep 	#$20
.0117cd	7a		ply				ply
.0117ce	fa		plx				plx
.0117cf	68		pla				pla
.0117d0	60		rts				rts
.0117d1					HWNewLine:
.0117d1	48		pha				pha
.0117d2	da		phx				phx
.0117d3	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.0117d6					HWMoveCursor:
.0117d6	a9 20 00	lda #$0020			lda 	#32
.0117d9	20 91 17	jsr $011791			jsr 	HWPrintChar
.0117dc	8a		txa				txa
.0117dd	25 28		and $28				and 	DCursor
.0117df	d0 f5		bne $0117d6			bne 	HWMoveCursor
.0117e1	fa		plx				plx
.0117e2	68		pla				pla
.0117e3	60		rts				rts
.0117e4	48		pha		HWTab:	pha
.0117e5	da		phx				phx
.0117e6	a2 07 00	ldx #$0007			ldx 	#7
.0117e9	80 eb		bra $0117d6			bra 	HWMoveCursor
.0117eb					HWCheckBreak:
.0117eb	af 00 80 0f	lda $0f8000			lda 	$F8000
.0117ef	60		rts				rts
.0117f0					HWGetKey:
.0117f0	af 10 80 0f	lda $0f8010			lda 	$F8010
.0117f4	d0 fa		bne $0117f0			bne 	HWGetKey
.0117f6					_HWGKWait:
.0117f6	af 10 80 0f	lda $0f8010			lda 	$F8010
.0117fa	f0 fa		beq $0117f6			beq 	_HWGKWait
.0117fc	ea		nop				nop
.0117fd	60		rts				rts

;******  Return to file: ../source/start.asm

.020001	1a		inc a				inc 	a
.020002	e8		inx				inx
.020003	e8		inx				inx
.020004	88		dey				dey
.020005	6b		rtl				rtl
.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	7a b0 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 10 00 01 00 32 3e ff dd
>024108	74 d4 02 40 27 32 00 00 10 00 02 00 32 3e 59 de
>024118	26 d2 03 40 27 32 00 00 0e 00 03 00 32 3e 33 d6
>024128	05 40 27 32 00 00 0e 00 04 00 32 3e 16 d0 03 40
>024138	27 32 00 00 10 00 05 00 32 3e 0c de 0d d0 02 40
>024148	27 32 00 00 0e 00 06 00 32 3e 0a d6 02 40 27 32
>024158	00 00 0e 00 07 00 32 3e 02 f0 03 40 27 32 00 00
>024168	12 00 08 00 32 3e 81 fd 3d fd 11 f0 04 40 27 32
>024178	00 00 10 00 09 00 32 3e c8 fc 5c f6 04 40 27 32
>024188	00 00 10 00 0a 00 32 3e 2a fd 1b f6 06 40 27 32
>024198	00 00 10 00 0b 00 32 3e a1 fd 01 f0 04 40 27 32
>0241a8	00 00 0e 00 0c 00 32 3e 5f f5 04 40 27 32 00 00
>0241b8	16 00 0d 00 2c 3e c8 cc 2e cb 1a c0 06 22 0b 24
>0241c8	02 10 cc 67 00 00 16 00 0e 00 2c 3e a4 cd f9 c8
>0241d8	15 c0 06 22 0b 24 01 10 9c 55 00 00 10 00 0f 00
>0241e8	2c 3e e7 c5 06 22 05 10 28 b3 00 00 12 00 10 00
>0241f8	2c 3e 3e ce 08 c0 06 22 05 10 ec 58 00 00 12 00
>024208	11 00 2c 3e e5 c5 06 22 0b 24 04 10 46 97 00 00
>024218	0c 00 12 00 61 c6 06 22 7c 40 00 00 0e 00 13 00
>024228	0d c0 06 22 01 10 9d 69 00 00 10 00 14 00 2f c5
>024238	06 22 0b 24 04 10 9c 9b 00 00 12 00 15 00 06 ce
>024248	54 c9 1a c0 06 22 03 10 37 7a 00 00 10 00 16 00
>024258	f4 cc 04 c0 06 22 0b 24 91 40 00 00 0e 00 17 00
>024268	06 c0 06 22 0b 24 d0 b9 00 00 10 00 18 00 6d ce
>024278	1a c0 06 22 02 10 fb 7a 00 00 10 00 19 00 11 c0
>024288	06 22 0b 24 02 10 3b 53 00 00 12 00 1a 00 2c 3e
>024298	0b c0 06 22 0b 24 04 10 1d 74 00 00 14 00 1b 00
>0242a8	2c 3e d5 cc 35 c8 09 c0 06 22 0b 24 06 4d 00 00
>0242b8	10 00 1c 00 f8 cc 11 c1 06 22 04 10 45 96 00 00
>0242c8	10 00 1d 00 a7 c5 06 22 0b 24 01 10 af ad 00 00
>0242d8	0e 00 1e 00 6b ce 45 c0 06 22 92 40 00 00 0e 00
>0242e8	1f 00 2c 3e 29 c5 06 22 93 4c 00 00 10 00 20 00
>0242f8	3e ce 06 c0 06 22 01 10 ab 67 00 00 10 00 21 00
>024308	2c 3e 12 c0 06 22 02 10 d4 94 00 00 16 00 22 00
>024318	2c 3e 05 ce d4 c9 10 c0 06 22 0b 24 01 10 57 50
>024328	00 00 12 00 23 00 29 cd 3d c3 06 22 0b 24 01 10
>024338	74 60 00 00 0e 00 24 00 15 c0 06 22 0b 24 9e 40
>024348	00 00 10 00 25 00 e3 cd 07 c0 06 22 02 10 ef a1
>024358	00 00 12 00 26 00 2c 3e 5a ce 4d c1 06 22 04 10
>024368	51 83 00 00 12 00 27 00 2c 3e 67 c6 06 22 0b 24
>024378	03 10 52 85 00 00 12 00 28 00 2c 3e 6c c6 06 22
>024388	0b 24 01 10 42 63 00 00 12 00 29 00 2c 3e 28 ce
>024398	d6 c0 06 22 04 10 a0 7d 00 00 12 00 2a 00 2c 3e
>0243a8	f4 c4 06 22 0b 24 01 10 42 56 00 00 12 00 2b 00
>0243b8	2c 3e b9 c5 06 22 0b 24 04 10 8d 4f 00 00 14 00
>0243c8	2c 00 5b cd 4e ca 1b c0 06 22 0b 24 02 10 0e 86
>0243d8	00 00 14 00 2d 00 2c 3e c1 cc 62 c5 06 22 0b 24
>0243e8	03 10 ad 9f 00 00 14 00 2e 00 2c 3e d1 cd 5a ce
>0243f8	15 c0 06 22 03 10 c2 60 00 00 0c 00 2f 00 69 c6
>024408	06 22 c2 8e 00 00 0e 00 30 00 0a c0 06 22 0b 24
>024418	d2 65 00 00 10 00 31 00 2c 3e 0e c0 06 22 05 10
>024428	0c 85 00 00 12 00 32 00 2c 3e a3 c5 06 22 0b 24
>024438	04 10 c0 4c 00 00 10 00 33 00 2c 3e 5f c6 06 22
>024448	0b 24 6b 40 00 00 12 00 34 00 59 ce e1 c1 06 22
>024458	0b 24 01 10 9b 4d 00 00 16 00 35 00 2c 3e fd ed
>024468	17 e0 06 22 08 00 05 49 20 5a 51 4d 00 00 14 00
>024478	36 00 01 e0 06 22 0a 00 07 53 20 20 59 45 42 58
>024488	00 00 12 00 37 00 60 ed 83 e2 06 22 06 00 03 41
>024498	45 49 00 00 1c 00 38 00 2c 3e d4 ec 40 e2 06 22
>0244a8	0e 00 0a 58 49 55 20 4a 50 43 54 59 58 00 00 00
>0244b8	1a 00 39 00 2c 3e d8 ec 06 e0 06 22 0c 00 09 43
>0244c8	4e 42 49 20 56 52 5a 53 00 00 14 00 3a 00 2c 3e
>0244d8	ba e5 06 22 08 00 05 4d 46 20 53 58 00 00 18 00
>0244e8	3b 00 65 e6 06 22 0e 00 0a 58 42 4b 20 57 4b 20
>0244f8	52 49 52 00 00 00 12 00 3c 00 2b ed 0e e2 06 22
>024508	06 00 03 57 41 47 00 00 1c 00 3d 00 2c 3e b1 ed
>024518	b9 e0 06 22 0e 00 0a 56 44 43 55 56 59 20 59 45
>024528	44 00 00 00 16 00 3e 00 2c 3e cf ed 62 e0 06 22
>024538	08 00 05 55 20 56 41 49 00 00 16 00 3f 00 10 e6
>024548	06 22 0c 00 08 53 20 43 20 52 4b 46 45 00 00 00
>024558	14 00 40 00 2c 3e b7 ed 19 e0 06 22 06 00 02 48
>024568	45 00 00 00 1a 00 41 00 b8 ed 52 ec 1c e0 06 22
>024578	0c 00 09 4b 4d 52 5a 57 5a 20 58 49 00 00 0e 00
>024588	42 00 19 e0 06 22 04 00 00 00 00 00 1a 00 43 00
>024598	2c 3e 03 e0 06 22 0e 00 0a 4f 20 4b 4d 59 20 51
>0245a8	59 4c 41 00 00 00 10 00 44 00 06 ee 0e e0 06 22
>0245b8	04 00 00 00 00 00 16 00 45 00 0b e0 06 22 0c 00
>0245c8	09 45 43 42 57 56 4b 4b 48 43 00 00 1c 00 46 00
>0245d8	2c 3e 69 ee c1 e3 06 22 0e 00 0b 56 20 59 50 4f
>0245e8	58 4f 20 20 59 46 00 00 10 00 47 00 1a e0 06 22
>0245f8	06 00 03 4a 20 52 00 00 14 00 48 00 2c 3e 5c ed
>024608	5f e2 06 22 06 00 02 41 54 00 00 00 1c 00 49 00
>024618	e4 ed 53 ed 01 e0 06 22 0e 00 0a 4f 57 4b 57 20
>024628	20 42 47 47 42 00 00 00 18 00 4a 00 2c 3e 18 e0
>024638	06 22 0c 00 09 4d 50 4d 4a 20 45 48 43 48 00 00
>024648	18 00 4b 00 d6 ed d6 e4 06 22 0c 00 08 58 47 51
>024658	20 20 53 57 50 00 00 00 10 00 4c 00 4f ed 16 e4
>024668	06 22 04 00 00 00 00 00 16 00 4d 00 5b ed 01 e0
>024678	06 22 0a 00 06 44 20 4f 58 58 44 00 00 00 12 00
>024688	4e 00 2c 3e 56 ed 1c e1 06 22 04 00 01 58 00 00
>024698	1a 00 4f 00 2c 3e 2a ee 6b e6 06 22 0c 00 08 4b
>0246a8	20 41 52 20 58 4c 49 00 00 00 10 00 50 00 df ed
>0246b8	dd e4 06 22 04 00 01 54 00 00 1a 00 51 00 80 ed
>0246c8	72 eb 0f e0 06 22 0c 00 08 4a 49 56 54 46 41 48
>0246d8	4a 00 00 00 1a 00 52 00 2c 3e 2c ed 08 e0 06 22
>0246e8	0c 00 09 43 53 51 47 4f 59 41 47 51 00 00 18 00
>0246f8	53 00 2c 3e 2e ed 89 e1 06 22 0a 00 06 45 55 48
>024708	4c 54 59 00 00 00 12 00 54 00 2c 3e 56 ee 06 e0
>024718	06 22 04 00 00 00 00 00 18 00 55 00 57 e5 06 22
>024728	0e 00 0a 4d 59 48 20 48 20 50 45 20 51 00 00 00
>024738	1c 00 56 00 2c 3e cf ed 49 e9 0f e0 06 22 0c 00
>024748	09 4f 20 55 56 48 4b 20 43 5a 00 00 12 00 57 00
>024758	2f ed 07 e0 06 22 06 00 03 4f 57 4e 00 00 12 00
>024768	58 00 13 ee 1d ee 08 e0 06 22 04 00 00 00 00 00
>024778	16 00 59 00 48 ed 44 e1 06 22 0a 00 06 46 51 20
>024788	4f 55 5a 00 00 00 12 00 5a 00 d8 ec 44 e8 21 e0
>024798	06 22 04 00 01 4e 00 00 16 00 5b 00 2c 3e 89 ed
>0247a8	21 e0 06 22 08 00 05 58 49 45 5a 5a 00 00 12 00
>0247b8	5c 00 2c 3e 0d e6 06 22 06 00 02 52 47 00 00 00
>0247c8	34 00 5d 00 ff dd 74 d4 00 40 27 32 06 22 02 10
>0247d8	ff b9 25 32 ff dd 74 d4 01 40 27 32 06 22 03 10
>0247e8	f4 a8 25 32 ff dd 74 d4 02 40 27 32 06 22 05 10
>0247f8	65 b7 00 00 44 00 5e 00 59 de 26 d2 00 40 27 32
>024808	06 22 0b 24 03 10 70 43 25 32 59 de 26 d2 01 40
>024818	27 32 06 22 05 10 5b 4a 25 32 59 de 26 d2 02 40
>024828	27 32 06 22 0b 24 26 40 25 32 59 de 26 d2 03 40
>024838	27 32 06 22 a7 40 00 00 58 00 5f 00 33 d6 00 40
>024848	27 32 06 22 0b 24 01 10 3b 5d 25 32 33 d6 01 40
>024858	27 32 06 22 0b 24 02 40 25 32 33 d6 02 40 27 32
>024868	06 22 04 10 a4 6f 25 32 33 d6 03 40 27 32 06 22
>024878	05 10 b3 a8 25 32 33 d6 04 40 27 32 06 22 61 40
>024888	25 32 33 d6 05 40 27 32 06 22 03 10 51 5b 00 00
>024898	3e 00 60 00 16 d0 00 40 27 32 06 22 03 10 fd a7
>0248a8	25 32 16 d0 01 40 27 32 06 22 05 10 40 85 25 32
>0248b8	16 d0 02 40 27 32 06 22 0b 24 05 10 5b a3 25 32
>0248c8	16 d0 03 40 27 32 06 22 04 10 5e 9c 00 00 2e 00
>0248d8	61 00 0c de 0d d0 00 40 27 32 06 22 a4 40 25 32
>0248e8	0c de 0d d0 01 40 27 32 06 22 aa 40 25 32 0c de
>0248f8	0d d0 02 40 27 32 06 22 9e 40 00 00 2a 00 62 00
>024908	0a d6 00 40 27 32 06 22 41 40 25 32 0a d6 01 40
>024918	27 32 06 22 a1 40 25 32 0a d6 02 40 27 32 06 22
>024928	05 10 38 58 00 00 4e 00 63 00 02 f0 00 40 27 32
>024938	06 22 04 00 00 00 25 32 02 f0 01 40 27 32 06 22
>024948	06 00 03 44 4b 5a 25 32 02 f0 02 40 27 32 06 22
>024958	0e 00 0b 44 54 47 4e 4c 20 20 46 55 20 52 25 32
>024968	02 f0 03 40 27 32 06 22 0a 00 06 4a 20 50 4b 4d
>024978	57 00 00 00 7a 00 64 00 81 fd 3d fd 11 f0 00 40
>024988	27 32 06 22 04 00 01 51 25 32 81 fd 3d fd 11 f0
>024998	01 40 27 32 06 22 0c 00 08 49 4c 5a 50 44 20 48
>0249a8	49 00 25 32 81 fd 3d fd 11 f0 02 40 27 32 06 22
>0249b8	08 00 04 58 4e 4b 4d 00 25 32 81 fd 3d fd 11 f0
>0249c8	03 40 27 32 06 22 0a 00 07 54 55 50 58 42 45 59
>0249d8	25 32 81 fd 3d fd 11 f0 04 40 27 32 06 22 0e 00
>0249e8	0a 54 4c 53 47 54 4a 20 47 54 4a 00 00 00 66 00
>0249f8	65 00 c8 fc 5c f6 00 40 27 32 06 22 0a 00 06 54
>024a08	4f 55 55 52 47 00 25 32 c8 fc 5c f6 01 40 27 32
>024a18	06 22 0a 00 06 52 44 59 46 4b 44 00 25 32 c8 fc
>024a28	5c f6 02 40 27 32 06 22 06 00 02 4a 43 00 25 32
>024a38	c8 fc 5c f6 03 40 27 32 06 22 04 00 00 00 25 32
>024a48	c8 fc 5c f6 04 40 27 32 06 22 08 00 05 58 53 52
>024a58	44 44 00 00 90 00 66 00 2a fd 1b f6 00 40 27 32
>024a68	06 22 08 00 04 48 41 20 4d 00 25 32 2a fd 1b f6
>024a78	01 40 27 32 06 22 0c 00 08 48 44 55 55 4a 20 20
>024a88	53 00 25 32 2a fd 1b f6 02 40 27 32 06 22 0e 00
>024a98	0b 54 46 20 4b 4c 4a 20 56 49 4f 52 25 32 2a fd
>024aa8	1b f6 03 40 27 32 06 22 04 00 01 45 25 32 2a fd
>024ab8	1b f6 04 40 27 32 06 22 06 00 03 44 55 43 25 32
>024ac8	2a fd 1b f6 05 40 27 32 06 22 08 00 05 41 59 20
>024ad8	42 4a 25 32 2a fd 1b f6 06 40 27 32 06 22 04 00
>024ae8	00 00 00 00 6c 00 67 00 a1 fd 01 f0 00 40 27 32
>024af8	06 22 04 00 00 00 25 32 a1 fd 01 f0 01 40 27 32
>024b08	06 22 08 00 05 47 5a 5a 4d 4c 25 32 a1 fd 01 f0
>024b18	02 40 27 32 06 22 0e 00 0a 50 52 43 4d 41 4a 53
>024b28	56 4e 4a 00 25 32 a1 fd 01 f0 03 40 27 32 06 22
>024b38	04 00 01 49 25 32 a1 fd 01 f0 04 40 27 32 06 22
>024b48	0e 00 0a 4e 4a 43 55 20 53 59 53 4f 56 00 00 00
>024b58	66 00 68 00 5f f5 00 40 27 32 06 22 0c 00 08 49
>024b68	46 4a 4f 47 48 4b 4c 00 25 32 5f f5 01 40 27 32
>024b78	06 22 06 00 03 55 4e 4b 25 32 5f f5 02 40 27 32
>024b88	06 22 04 00 01 57 25 32 5f f5 03 40 27 32 06 22
>024b98	0e 00 0a 41 51 4e 4a 20 59 4e 42 59 4d 00 25 32
>024ba8	5f f5 04 40 27 32 06 22 0c 00 08 56 54 4e 20 58
>024bb8	20 46 49 00 00 00 12 00 69 00 2d 3e 13 30 69 c6
>024bc8	27 32 06 22 c2 8e 00 00 12 00 6a 00 2d 3e 12 30
>024bd8	c2 8e 27 32 06 22 01 40 00 00 14 00 6b 00 2d 3e
>024be8	14 30 b7 ed 19 e0 27 32 06 22 02 40 00 00 1c 00
>024bf8	6c 00 2d 3e 15 30 08 00 04 42 38 30 32 00 23 32
>024c08	0c 40 27 32 06 22 c2 8e 00 00 1c 00 6d 00 2d 3e
>024c18	16 30 c2 8e 23 32 0c 40 27 32 06 22 08 00 04 62
>024c28	38 30 32 00 00 00 1c 00 6e 00 2d 3e 1f 30 b7 ed
>024c38	19 e0 23 32 03 40 27 32 06 22 06 00 02 48 45 00
>024c48	00 00 1c 00 6f 00 2d 3e 21 30 b7 ed 19 e0 23 32
>024c58	03 40 27 32 06 22 06 00 02 48 45 00 00 00 20 00
>024c68	70 00 2d 3e 20 30 06 00 02 48 45 00 23 32 03 40
>024c78	23 32 02 40 27 32 06 22 04 00 00 00 00 00 22 00
>024c88	71 00 2d 3e 22 30 0a 00 07 54 55 50 58 42 45 59
>024c98	23 32 06 00 03 42 45 59 27 32 06 22 05 40 00 00
>024ca8	18 00 72 00 2d 3e 13 30 0b 24 01 10 9b 4d 27 32
>024cb8	06 22 01 10 9b 4d 00 00 18 00 73 00 2d 3e 12 30
>024cc8	0b 24 01 10 9b 4d 27 32 06 22 0b 24 01 40 00 00
>024cd8	1e 00 74 00 2d 3e 14 30 0e 00 0a 41 51 4e 4a 20
>024ce8	59 4e 42 59 4d 00 27 32 06 22 0a 40 00 00 24 00
>024cf8	75 00 2d 3e 15 30 0c 00 09 2d 32 30 33 31 32 31
>024d08	32 33 23 32 04 40 27 32 06 22 0b 24 01 10 9b 4d
>024d18	00 00 24 00 76 00 2d 3e 16 30 0b 24 01 10 9b 4d
>024d28	23 32 04 40 27 32 06 22 0c 00 09 2d 32 30 33 31
>024d38	32 31 32 33 00 00 22 00 77 00 2d 3e 1f 30 5f f5
>024d48	03 40 27 32 23 32 06 40 27 32 06 22 0a 00 06 41
>024d58	51 4e 4a 20 59 00 00 00 22 00 78 00 2d 3e 21 30
>024d68	5f f5 03 40 27 32 23 32 06 40 27 32 06 22 0a 00
>024d78	06 20 59 4e 42 59 4d 00 00 00 28 00 79 00 2d 3e
>024d88	20 30 0e 00 0a 41 51 4e 4a 20 59 4e 42 59 4d 00
>024d98	23 32 0a 40 23 32 03 40 27 32 06 22 04 00 01 4d
>024da8	00 00 20 00 7a 00 2d 3e 22 30 08 00 05 4d 46 20
>024db8	53 58 23 32 06 00 02 45 49 00 27 32 06 22 00 40
>024dc8	00 00 18 00 7b 00 2d 3e 13 30 0b 24 01 10 af ad
>024dd8	27 32 06 22 01 10 af ad 00 00 18 00 7c 00 2d 3e
>024de8	12 30 0b 24 01 10 af ad 27 32 06 22 0b 24 01 40
>024df8	00 00 16 00 7d 00 2d 3e 14 30 cf ed 49 e9 0f e0
>024e08	27 32 06 22 09 40 00 00 2c 00 7e 00 2d 3e 15 30
>024e18	14 00 11 2d 31 31 31 30 31 31 30 31 31 30 31 30
>024e28	31 31 31 31 23 32 02 40 27 32 06 22 0b 24 01 10
>024e38	af ad 00 00 2c 00 7f 00 2d 3e 16 30 0b 24 01 10
>024e48	af ad 23 32 02 40 27 32 06 22 14 00 11 2d 31 31
>024e58	31 30 31 31 30 31 31 30 31 30 31 31 31 31 00 00
>024e68	24 00 80 00 2d 3e 1f 30 0c 00 09 4f 20 55 56 48
>024e78	4b 20 43 5a 23 32 02 40 27 32 06 22 06 00 02 4f
>024e88	20 00 00 00 24 00 81 00 2d 3e 21 30 0c 00 09 4f
>024e98	20 55 56 48 4b 20 43 5a 23 32 02 40 27 32 06 22
>024ea8	06 00 02 43 5a 00 00 00 28 00 82 00 2d 3e 20 30
>024eb8	0c 00 09 4f 20 55 56 48 4b 20 43 5a 23 32 08 40
>024ec8	23 32 04 40 27 32 06 22 06 00 02 43 5a 00 00 00
>024ed8	1a 00 83 00 2d 3e 22 30 04 00 01 54 23 32 04 00
>024ee8	01 54 27 32 06 22 01 40 00 00 16 00 84 00 2d 3e
>024ef8	13 30 29 cd 3d c3 27 32 06 22 01 10 74 60 00 00
>024f08	18 00 85 00 2d 3e 12 30 0b 24 01 10 74 60 27 32
>024f18	06 22 0b 24 01 40 00 00 12 00 86 00 2d 3e 14 30
>024f28	0d e6 27 32 06 22 02 40 00 00 22 00 87 00 2d 3e
>024f38	15 30 0a 00 06 2d 36 32 33 31 30 00 23 32 09 40
>024f48	27 32 06 22 0b 24 01 10 74 60 00 00 22 00 88 00
>024f58	2d 3e 16 30 0b 24 01 10 74 60 23 32 09 40 27 32
>024f68	06 22 0a 00 06 2d 36 32 33 31 30 00 00 00 1a 00
>024f78	89 00 2d 3e 1f 30 0d e6 23 32 03 40 27 32 06 22
>024f88	06 00 02 52 47 00 00 00 1e 00 8a 00 2d 3e 21 30
>024f98	06 00 02 52 47 00 23 32 03 40 27 32 06 22 06 00
>024fa8	02 52 47 00 00 00 20 00 8b 00 2d 3e 20 30 06 00
>024fb8	02 52 47 00 23 32 01 40 23 32 01 40 27 32 06 22
>024fc8	04 00 01 52 00 00 1c 00 8c 00 2d 3e 22 30 06 00
>024fd8	02 52 47 00 23 32 04 00 01 52 27 32 06 22 01 40
>024fe8	00 00 14 00 8d 00 2d 3e 13 30 6c c6 27 32 06 22
>024ff8	01 10 42 63 00 00 14 00 8e 00 2d 3e 12 30 6c c6
>025008	27 32 06 22 0b 24 01 40 00 00 14 00 8f 00 2d 3e
>025018	14 30 06 ee 0e e0 27 32 06 22 00 40 00 00 22 00
>025028	90 00 2d 3e 15 30 0a 00 06 2d 31 36 30 33 43 00
>025038	23 32 0d 40 27 32 06 22 0b 24 01 10 42 63 00 00
>025048	22 00 91 00 2d 3e 16 30 0b 24 01 10 42 63 23 32
>025058	0d 40 27 32 06 22 0a 00 06 2d 31 36 30 33 63 00
>025068	00 00 1a 00 92 00 2d 3e 1f 30 06 ee 0e e0 23 32
>025078	01 40 27 32 06 22 04 00 00 00 00 00 1a 00 93 00
>025088	2d 3e 21 30 06 ee 0e e0 23 32 01 40 27 32 06 22
>025098	04 00 00 00 00 00 1e 00 94 00 2d 3e 20 30 04 00
>0250a8	00 00 23 32 02 40 23 32 00 40 27 32 06 22 04 00
>0250b8	00 00 00 00 1e 00 95 00 2d 3e 22 30 08 00 04 58
>0250c8	4e 4b 4d 00 23 32 04 00 01 4d 27 32 06 22 04 40
>0250d8	00 00 16 00 96 00 2d 3e 13 30 e3 cd 07 c0 27 32
>0250e8	06 22 02 10 ef a1 00 00 14 00 97 00 2d 3e 12 30
>0250f8	02 10 ef a1 27 32 06 22 01 40 00 00 18 00 98 00
>025108	2d 3e 14 30 a1 fd 01 f0 04 40 27 32 27 32 06 22
>025118	0a 40 00 00 1e 00 99 00 2d 3e 15 30 08 00 05 32
>025128	35 30 33 44 23 32 0e 40 27 32 06 22 02 10 ef a1
>025138	00 00 1e 00 9a 00 2d 3e 16 30 02 10 ef a1 23 32
>025148	0e 40 27 32 06 22 08 00 05 32 35 30 33 64 00 00
>025158	2c 00 9b 00 2d 3e 1f 30 0e 00 0a 4e 4a 43 55 20
>025168	53 59 53 4f 56 00 23 32 08 40 27 32 06 22 0c 00
>025178	08 4e 4a 43 55 20 53 59 53 00 00 00 2c 00 9c 00
>025188	2d 3e 21 30 0e 00 0a 4e 4a 43 55 20 53 59 53 4f
>025198	56 00 23 32 08 40 27 32 06 22 0c 00 08 43 55 20
>0251a8	53 59 53 4f 56 00 00 00 2a 00 9d 00 2d 3e 20 30
>0251b8	0e 00 0a 4e 4a 43 55 20 53 59 53 4f 56 00 23 32
>0251c8	05 40 23 32 03 40 27 32 06 22 06 00 03 20 53 59
>0251d8	00 00 1e 00 9e 00 2d 3e 22 30 08 00 05 49 20 5a
>0251e8	51 4d 23 32 04 00 01 51 27 32 06 22 04 40 00 00
>0251f8	14 00 9f 00 2d 3e 13 30 11 c0 27 32 06 22 02 10
>025208	3b 53 00 00 14 00 a0 00 2d 3e 12 30 11 c0 27 32
>025218	06 22 0b 24 01 40 00 00 14 00 a1 00 2d 3e 14 30
>025228	5b ed 01 e0 27 32 06 22 06 40 00 00 22 00 a2 00
>025238	2d 3e 15 30 0a 00 06 2d 32 36 30 42 43 00 23 32
>025248	0d 40 27 32 06 22 0b 24 02 10 3b 53 00 00 22 00
>025258	a3 00 2d 3e 16 30 0b 24 02 10 3b 53 23 32 0d 40
>025268	27 32 06 22 0a 00 06 2d 32 36 30 62 63 00 00 00
>025278	1e 00 a4 00 2d 3e 1f 30 5b ed 01 e0 23 32 04 40
>025288	27 32 06 22 08 00 04 44 20 4f 58 00 00 00 1e 00
>025298	a5 00 2d 3e 21 30 5b ed 01 e0 23 32 04 40 27 32
>0252a8	06 22 08 00 04 4f 58 58 44 00 00 00 24 00 a6 00
>0252b8	2d 3e 20 30 0a 00 06 44 20 4f 58 58 44 00 23 32
>0252c8	02 40 23 32 01 40 27 32 06 22 04 00 01 20 00 00
>0252d8	20 00 a7 00 2d 3e 22 30 08 00 05 55 20 56 41 49
>0252e8	23 32 06 00 03 56 41 49 27 32 06 22 03 40 00 00
>0252f8	16 00 a8 00 2d 3e 13 30 29 cd 3d c3 27 32 06 22
>025308	01 10 74 60 00 00 16 00 a9 00 2d 3e 12 30 29 cd
>025318	3d c3 27 32 06 22 0b 24 01 40 00 00 14 00 aa 00
>025328	2d 3e 14 30 69 ee c1 e3 27 32 06 22 0b 40 00 00
>025338	22 00 ab 00 2d 3e 15 30 0a 00 06 2d 36 32 33 31
>025348	30 00 23 32 09 40 27 32 06 22 0b 24 01 10 74 60
>025358	00 00 22 00 ac 00 2d 3e 16 30 0b 24 01 10 74 60
>025368	23 32 09 40 27 32 06 22 0a 00 06 2d 36 32 33 31
>025378	30 00 00 00 28 00 ad 00 2d 3e 1f 30 0e 00 0b 56
>025388	20 59 50 4f 58 4f 20 20 59 46 23 32 04 40 27 32
>025398	06 22 08 00 04 56 20 59 50 00 00 00 1e 00 ae 00
>0253a8	2d 3e 21 30 69 ee c1 e3 23 32 04 40 27 32 06 22
>0253b8	08 00 04 20 20 59 46 00 00 00 2a 00 af 00 2d 3e
>0253c8	20 30 0e 00 0b 56 20 59 50 4f 58 4f 20 20 59 46
>0253d8	23 32 0a 40 23 32 02 40 27 32 06 22 06 00 02 59
>0253e8	46 00 00 00 22 00 b0 00 2d 3e 22 30 0c 00 08 4b
>0253f8	20 41 52 20 58 4c 49 00 23 32 04 00 01 20 27 32
>025408	06 22 02 40 00 00 18 00 b1 00 2d 3e 13 30 a4 cd
>025418	f9 c8 15 c0 27 32 06 22 01 10 9c 55 00 00 18 00
>025428	b2 00 2d 3e 12 30 0b 24 01 10 9c 55 27 32 06 22
>025438	0b 24 01 40 00 00 16 00 b3 00 2d 3e 14 30 06 00
>025448	02 48 45 00 27 32 06 22 02 40 00 00 22 00 b4 00
>025458	2d 3e 15 30 0a 00 07 2d 32 31 36 34 34 33 23 32
>025468	07 40 27 32 06 22 0b 24 01 10 9c 55 00 00 22 00
>025478	b5 00 2d 3e 16 30 0b 24 01 10 9c 55 23 32 07 40
>025488	27 32 06 22 0a 00 07 2d 32 31 36 34 34 33 00 00
>025498	1e 00 b6 00 2d 3e 1f 30 06 00 02 48 45 00 23 32
>0254a8	04 40 27 32 06 22 06 00 02 48 45 00 00 00 1e 00
>0254b8	b7 00 2d 3e 21 30 06 00 02 48 45 00 23 32 04 40
>0254c8	27 32 06 22 06 00 02 48 45 00 00 00 22 00 b8 00
>0254d8	2d 3e 20 30 06 00 02 48 45 00 23 32 01 40 23 32
>0254e8	02 40 27 32 06 22 06 00 02 48 45 00 00 00 1e 00
>0254f8	b9 00 2d 3e 22 30 08 00 05 58 49 45 5a 5a 23 32
>025508	04 00 01 5a 27 32 06 22 04 40 00 00 14 00 ba 00
>025518	2d 3e 13 30 0b c0 27 32 06 22 04 10 1d 74 00 00
>025528	18 00 bb 00 2d 3e 12 30 0b 24 04 10 1d 74 27 32
>025538	06 22 0b 24 01 40 00 00 1e 00 bc 00 2d 3e 14 30
>025548	0e 00 0a 56 44 43 55 56 59 20 59 45 44 00 27 32
>025558	06 22 0a 40 00 00 28 00 bd 00 2d 3e 15 30 10 00
>025568	0c 2d 32 31 31 30 30 30 30 32 31 32 32 00 23 32
>025578	03 40 27 32 06 22 0b 24 04 10 1d 74 00 00 28 00
>025588	be 00 2d 3e 16 30 0b 24 04 10 1d 74 23 32 03 40
>025598	27 32 06 22 10 00 0c 2d 32 31 31 30 30 30 30 32
>0255a8	31 32 32 00 00 00 26 00 bf 00 2d 3e 1f 30 0e 00
>0255b8	0a 56 44 43 55 56 59 20 59 45 44 00 23 32 02 40
>0255c8	27 32 06 22 06 00 02 56 44 00 00 00 1c 00 c0 00
>0255d8	2d 3e 21 30 b1 ed b9 e0 23 32 02 40 27 32 06 22
>0255e8	06 00 02 45 44 00 00 00 28 00 c1 00 2d 3e 20 30
>0255f8	0e 00 0a 56 44 43 55 56 59 20 59 45 44 00 23 32
>025608	03 40 23 32 00 40 27 32 06 22 04 00 00 00 00 00
>025618	26 00 c2 00 2d 3e 22 30 0e 00 0b 56 20 59 50 4f
>025628	58 4f 20 20 59 46 23 32 06 00 02 56 20 00 27 32
>025638	06 22 01 40 00 00 16 00 c3 00 2d 3e 13 30 04 10
>025648	5e 9c 27 32 06 22 04 10 5e 9c 00 00 16 00 c4 00
>025658	2d 3e 12 30 16 d0 03 40 27 32 27 32 06 22 01 40
>025668	00 00 1c 00 c5 00 2d 3e 14 30 0c 00 08 58 47 51
>025678	20 20 53 57 50 00 27 32 06 22 08 40 00 00 1e 00
>025688	c6 00 2d 3e 15 30 08 00 05 37 35 36 35 32 23 32
>025698	0c 40 27 32 06 22 04 10 5e 9c 00 00 1e 00 c7 00
>0256a8	2d 3e 16 30 04 10 5e 9c 23 32 0c 40 27 32 06 22
>0256b8	08 00 05 37 35 36 35 32 00 00 24 00 c8 00 2d 3e
>0256c8	1f 30 0c 00 08 58 47 51 20 20 53 57 50 00 23 32
>0256d8	02 40 27 32 06 22 06 00 02 58 47 00 00 00 1c 00
>0256e8	c9 00 2d 3e 21 30 d6 ed d6 e4 23 32 02 40 27 32
>0256f8	06 22 06 00 02 57 50 00 00 00 28 00 ca 00 2d 3e
>025708	20 30 0c 00 08 58 47 51 20 20 53 57 50 00 23 32
>025718	01 40 23 32 03 40 27 32 06 22 06 00 03 58 47 51
>025728	00 00 24 00 cb 00 2d 3e 22 30 0c 00 09 4b 4d 52
>025738	5a 57 5a 20 58 49 23 32 06 00 02 52 5a 00 27 32
>025748	06 22 03 40 00 00 14 00 cc 00 2d 3e 13 30 0e c0
>025758	27 32 06 22 05 10 0c 85 00 00 14 00 cd 00 2d 3e
>025768	12 30 05 10 0c 85 27 32 06 22 01 40 00 00 1c 00
>025778	ce 00 2d 3e 14 30 0c 00 09 4b 4d 52 5a 57 5a 20
>025788	58 49 27 32 06 22 09 40 00 00 20 00 cf 00 2d 3e
>025798	15 30 0a 00 06 33 30 35 38 38 34 00 23 32 09 40
>0257a8	27 32 06 22 05 10 0c 85 00 00 20 00 d0 00 2d 3e
>0257b8	16 30 05 10 0c 85 23 32 09 40 27 32 06 22 0a 00
>0257c8	06 33 30 35 38 38 34 00 00 00 28 00 d1 00 2d 3e
>0257d8	1f 30 0c 00 09 4b 4d 52 5a 57 5a 20 58 49 23 32
>0257e8	06 40 27 32 06 22 0a 00 06 4b 4d 52 5a 57 5a 00
>0257f8	00 00 28 00 d2 00 2d 3e 21 30 0c 00 09 4b 4d 52
>025808	5a 57 5a 20 58 49 23 32 06 40 27 32 06 22 0a 00
>025818	06 5a 57 5a 20 58 49 00 00 00 28 00 d3 00 2d 3e
>025828	20 30 0c 00 09 4b 4d 52 5a 57 5a 20 58 49 23 32
>025838	05 40 23 32 03 40 27 32 06 22 06 00 03 57 5a 20
>025848	00 00 24 00 d4 00 2d 3e 22 30 0c 00 08 4b 20 41
>025858	52 20 58 4c 49 00 23 32 06 00 03 58 49 45 27 32
>025868	06 22 00 40 00 00 14 00 d5 00 2d 3e 13 30 67 c6
>025878	27 32 06 22 03 10 52 85 00 00 14 00 d6 00 2d 3e
>025888	12 30 67 c6 27 32 06 22 0b 24 01 40 00 00 14 00
>025898	d7 00 2d 3e 14 30 5c ed 5f e2 27 32 06 22 02 40
>0258a8	00 00 22 00 d8 00 2d 3e 15 30 0a 00 07 2d 36 36
>0258b8	32 32 32 34 23 32 07 40 27 32 06 22 0b 24 03 10
>0258c8	52 85 00 00 22 00 d9 00 2d 3e 16 30 0b 24 03 10
>0258d8	52 85 23 32 07 40 27 32 06 22 0a 00 07 2d 36 36
>0258e8	32 32 32 34 00 00 1c 00 da 00 2d 3e 1f 30 5c ed
>0258f8	5f e2 23 32 04 40 27 32 06 22 06 00 02 41 54 00
>025908	00 00 1c 00 db 00 2d 3e 21 30 5c ed 5f e2 23 32
>025918	04 40 27 32 06 22 06 00 02 41 54 00 00 00 20 00
>025928	dc 00 2d 3e 20 30 06 00 02 41 54 00 23 32 04 40
>025938	23 32 01 40 27 32 06 22 04 00 00 00 00 00 24 00
>025948	dd 00 2d 3e 22 30 0c 00 08 4b 20 41 52 20 58 4c
>025958	49 00 23 32 06 00 03 4b 20 41 27 32 06 22 01 40
>025968	00 00 18 00 de 00 2d 3e 13 30 0b 24 01 10 af ad
>025978	27 32 06 22 01 10 af ad 00 00 14 00 df 00 2d 3e
>025988	12 30 a7 c5 27 32 06 22 0b 24 01 40 00 00 14 00
>025998	e0 00 2d 3e 14 30 b7 ed 19 e0 27 32 06 22 02 40
>0259a8	00 00 22 00 e1 00 2d 3e 15 30 0a 00 06 2d 34 31
>0259b8	37 39 36 00 23 32 0b 40 27 32 06 22 0b 24 01 10
>0259c8	af ad 00 00 22 00 e2 00 2d 3e 16 30 0b 24 01 10
>0259d8	af ad 23 32 0b 40 27 32 06 22 0a 00 06 2d 34 31
>0259e8	37 39 36 00 00 00 1c 00 e3 00 2d 3e 1f 30 b7 ed
>0259f8	19 e0 23 32 03 40 27 32 06 22 06 00 02 48 45 00
>025a08	00 00 1e 00 e4 00 2d 3e 21 30 06 00 02 48 45 00
>025a18	23 32 03 40 27 32 06 22 06 00 02 48 45 00 00 00
>025a28	22 00 e5 00 2d 3e 20 30 06 00 02 48 45 00 23 32
>025a38	01 40 23 32 02 40 27 32 06 22 06 00 02 48 45 00
>025a48	00 00 22 00 e6 00 2d 3e 22 30 0c 00 09 4f 20 55
>025a58	56 48 4b 20 43 5a 23 32 04 00 01 51 27 32 06 22
>025a68	00 40 00 00 18 00 e7 00 2d 3e 13 30 5b cd 4e ca
>025a78	1b c0 27 32 06 22 02 10 0e 86 00 00 18 00 e8 00
>025a88	2d 3e 12 30 5b cd 4e ca 1b c0 27 32 06 22 0b 24
>025a98	01 40 00 00 14 00 e9 00 2d 3e 14 30 cf ed 62 e0
>025aa8	27 32 06 22 05 40 00 00 24 00 ea 00 2d 3e 15 30
>025ab8	0c 00 09 2d 31 30 31 33 32 33 34 30 23 32 05 40
>025ac8	27 32 06 22 0b 24 02 10 0e 86 00 00 24 00 eb 00
>025ad8	2d 3e 16 30 0b 24 02 10 0e 86 23 32 05 40 27 32
>025ae8	06 22 0c 00 09 2d 31 30 31 33 32 33 34 30 00 00
>025af8	1e 00 ec 00 2d 3e 1f 30 cf ed 62 e0 23 32 06 40
>025b08	27 32 06 22 08 00 05 55 20 56 41 49 00 00 22 00
>025b18	ed 00 2d 3e 21 30 08 00 05 55 20 56 41 49 23 32
>025b28	06 40 27 32 06 22 08 00 05 55 20 56 41 49 00 00
>025b38	22 00 ee 00 2d 3e 20 30 08 00 05 55 20 56 41 49
>025b48	23 32 04 40 23 32 00 40 27 32 06 22 04 00 00 00
>025b58	00 00 24 00 ef 00 2d 3e 22 30 0e 00 0a 4f 20 4b
>025b68	4d 59 20 51 59 4c 41 00 23 32 04 00 01 4c 27 32
>025b78	06 22 09 40 00 00 14 00 f0 00 2d 3e 13 30 0b 24
>025b88	6b 40 27 32 06 22 6b 40 00 00 16 00 f1 00 2d 3e
>025b98	12 30 0b 24 6b 40 27 32 06 22 0b 24 01 40 00 00
>025ba8	18 00 f2 00 2d 3e 14 30 08 00 05 49 20 5a 51 4d
>025bb8	27 32 06 22 05 40 00 00 1e 00 f3 00 2d 3e 15 30
>025bc8	08 00 04 2d 31 35 33 00 23 32 08 40 27 32 06 22
>025bd8	0b 24 6b 40 00 00 1e 00 f4 00 2d 3e 16 30 0b 24
>025be8	6b 40 23 32 08 40 27 32 06 22 08 00 04 2d 31 35
>025bf8	33 00 00 00 1c 00 f5 00 2d 3e 1f 30 fd ed 17 e0
>025c08	23 32 03 40 27 32 06 22 06 00 03 49 20 5a 00 00
>025c18	1c 00 f6 00 2d 3e 21 30 fd ed 17 e0 23 32 03 40
>025c28	27 32 06 22 06 00 03 5a 51 4d 00 00 22 00 f7 00
>025c38	2d 3e 20 30 08 00 05 49 20 5a 51 4d 23 32 04 40
>025c48	23 32 00 40 27 32 06 22 04 00 00 00 00 00 22 00
>025c58	f8 00 2d 3e 22 30 0c 00 08 53 20 43 20 52 4b 46
>025c68	45 00 23 32 04 00 01 49 27 32 06 22 00 40 00 00
>025c78	16 00 f9 00 2d 3e 13 30 05 10 ec 58 27 32 06 22
>025c88	05 10 ec 58 00 00 14 00 fa 00 2d 3e 12 30 3e ce
>025c98	08 c0 27 32 06 22 01 40 00 00 1a 00 fb 00 2d 3e
>025ca8	14 30 0a 00 07 53 20 20 59 45 42 58 27 32 06 22
>025cb8	07 40 00 00 20 00 fc 00 2d 3e 15 30 0a 00 06 31
>025cc8	30 36 39 38 36 00 23 32 0b 40 27 32 06 22 05 10
>025cd8	ec 58 00 00 20 00 fd 00 2d 3e 16 30 05 10 ec 58
>025ce8	23 32 0b 40 27 32 06 22 0a 00 06 31 30 36 39 38
>025cf8	36 00 00 00 1a 00 fe 00 2d 3e 1f 30 01 e0 23 32
>025d08	03 40 27 32 06 22 06 00 03 53 20 20 00 00 1a 00
>025d18	ff 00 2d 3e 21 30 01 e0 23 32 03 40 27 32 06 22
>025d28	06 00 03 45 42 58 00 00 26 00 00 01 2d 3e 20 30
>025d38	0a 00 07 53 20 20 59 45 42 58 23 32 01 40 23 32
>025d48	03 40 27 32 06 22 06 00 03 53 20 20 00 00 26 00
>025d58	01 01 2d 3e 22 30 0e 00 0a 4f 20 4b 4d 59 20 51
>025d68	59 4c 41 00 23 32 06 00 02 59 20 00 27 32 06 22
>025d78	05 40 00 00 12 00 02 01 2d 3e 13 30 0a c0 27 32
>025d88	06 22 d2 65 00 00 16 00 03 01 2d 3e 12 30 0b 24
>025d98	d2 65 27 32 06 22 0b 24 01 40 00 00 18 00 04 01
>025da8	2d 3e 14 30 2a fd 1b f6 00 40 27 32 27 32 06 22
>025db8	04 40 00 00 1e 00 05 01 2d 3e 15 30 08 00 05 2d
>025dc8	32 35 44 32 23 32 10 40 27 32 06 22 0b 24 d2 65
>025dd8	00 00 1e 00 06 01 2d 3e 16 30 0b 24 d2 65 23 32
>025de8	10 40 27 32 06 22 08 00 05 2d 32 35 64 32 00 00
>025df8	1e 00 07 01 2d 3e 1f 30 2a fd 1b f6 00 40 27 32
>025e08	23 32 00 40 27 32 06 22 04 00 00 00 00 00 1e 00
>025e18	08 01 2d 3e 21 30 08 00 04 48 41 20 4d 00 23 32
>025e28	00 40 27 32 06 22 04 00 00 00 00 00 22 00 09 01
>025e38	2d 3e 20 30 08 00 04 48 41 20 4d 00 23 32 06 40
>025e48	23 32 03 40 27 32 06 22 04 00 00 00 00 00 20 00
>025e58	0a 01 2d 3e 22 30 08 00 05 4d 46 20 53 58 23 32
>025e68	06 00 02 46 20 00 27 32 06 22 02 40 00 00 12 00
>025e78	0b 01 2d 3e 13 30 a7 40 27 32 06 22 a7 40 00 00
>025e88	18 00 0c 01 2d 3e 12 30 59 de 26 d2 03 40 27 32
>025e98	27 32 06 22 01 40 00 00 1c 00 0d 01 2d 3e 14 30
>025ea8	0c 00 08 53 20 43 20 52 4b 46 45 00 27 32 06 22
>025eb8	08 40 00 00 1a 00 0e 01 2d 3e 15 30 06 00 03 32
>025ec8	34 37 23 32 08 40 27 32 06 22 a7 40 00 00 1a 00
>025ed8	0f 01 2d 3e 16 30 a7 40 23 32 08 40 27 32 06 22
>025ee8	06 00 03 32 34 37 00 00 26 00 10 01 2d 3e 1f 30
>025ef8	0c 00 08 53 20 43 20 52 4b 46 45 00 23 32 04 40
>025f08	27 32 06 22 08 00 04 53 20 43 20 00 00 00 26 00
>025f18	11 01 2d 3e 21 30 0c 00 08 53 20 43 20 52 4b 46
>025f28	45 00 23 32 04 40 27 32 06 22 08 00 04 52 4b 46
>025f38	45 00 00 00 26 00 12 01 2d 3e 20 30 0c 00 08 53
>025f48	20 43 20 52 4b 46 45 00 23 32 07 40 23 32 01 40
>025f58	27 32 06 22 04 00 01 46 00 00 22 00 13 01 2d 3e
>025f68	22 30 0c 00 09 4f 20 55 56 48 4b 20 43 5a 23 32
>025f78	04 00 01 56 27 32 06 22 04 40 00 00 14 00 14 01
>025f88	2d 3e 13 30 0e c0 27 32 06 22 05 10 0c 85 00 00
>025f98	12 00 15 01 2d 3e 12 30 0e c0 27 32 06 22 01 40
>025fa8	00 00 1c 00 16 01 2d 3e 14 30 0c 00 09 4d 50 4d
>025fb8	4a 20 45 48 43 48 27 32 06 22 09 40 00 00 20 00
>025fc8	17 01 2d 3e 15 30 0a 00 07 31 33 35 34 31 32 36
>025fd8	23 32 07 40 27 32 06 22 05 10 0c 85 00 00 20 00
>025fe8	18 01 2d 3e 16 30 05 10 0c 85 23 32 07 40 27 32
>025ff8	06 22 0a 00 07 31 33 35 34 31 32 36 00 00 20 00
>026008	19 01 2d 3e 1f 30 18 e0 23 32 08 40 27 32 06 22
>026018	0c 00 08 4d 50 4d 4a 20 45 48 43 00 00 00 2a 00
>026028	1a 01 2d 3e 21 30 0c 00 09 4d 50 4d 4a 20 45 48
>026038	43 48 23 32 08 40 27 32 06 22 0c 00 08 50 4d 4a
>026048	20 45 48 43 48 00 00 00 26 00 1b 01 2d 3e 20 30
>026058	0c 00 09 4d 50 4d 4a 20 45 48 43 48 23 32 02 40
>026068	23 32 00 40 27 32 06 22 04 00 00 00 00 00 24 00
>026078	1c 01 2d 3e 22 30 0c 00 08 49 46 4a 4f 47 48 4b
>026088	4c 00 23 32 06 00 02 4b 4c 00 27 32 06 22 07 40
>026098	00 00 16 00 1d 01 2d 3e 13 30 05 10 65 b7 27 32
>0260a8	06 22 05 10 65 b7 00 00 18 00 1e 01 2d 3e 12 30
>0260b8	ff dd 74 d4 02 40 27 32 27 32 06 22 01 40 00 00
>0260c8	1e 00 1f 01 2d 3e 14 30 0e 00 0a 4d 59 48 20 48
>0260d8	20 50 45 20 51 00 27 32 06 22 0a 40 00 00 2c 00
>0260e8	20 01 2d 3e 15 30 16 00 12 31 30 31 31 31 31 30
>0260f8	31 31 31 30 31 31 30 30 31 30 31 00 23 32 02 40
>026108	27 32 06 22 05 10 65 b7 00 00 2c 00 21 01 2d 3e
>026118	16 30 05 10 65 b7 23 32 02 40 27 32 06 22 16 00
>026128	12 31 30 31 31 31 31 30 31 31 31 30 31 31 30 30
>026138	31 30 31 00 00 00 2a 00 22 01 2d 3e 1f 30 0e 00
>026148	0a 4d 59 48 20 48 20 50 45 20 51 00 23 32 06 40
>026158	27 32 06 22 0a 00 06 4d 59 48 20 48 20 00 00 00
>026168	1e 00 23 01 2d 3e 21 30 57 e5 23 32 06 40 27 32
>026178	06 22 0a 00 06 48 20 50 45 20 51 00 00 00 28 00
>026188	24 01 2d 3e 20 30 0e 00 0a 4d 59 48 20 48 20 50
>026198	45 20 51 00 23 32 02 40 23 32 00 40 27 32 06 22
>0261a8	04 00 00 00 00 00 24 00 25 01 2d 3e 22 30 0c 00
>0261b8	08 58 47 51 20 20 53 57 50 00 23 32 06 00 03 20
>0261c8	20 53 27 32 06 22 04 40 00 00 18 00 26 01 2d 3e
>0261d8	13 30 16 d0 02 40 27 32 27 32 06 22 05 10 5b a3
>0261e8	00 00 18 00 27 01 2d 3e 12 30 16 d0 02 40 27 32
>0261f8	27 32 06 22 0b 24 01 40 00 00 18 00 28 01 2d 3e
>026208	14 30 08 00 05 4d 46 20 53 58 27 32 06 22 05 40
>026218	00 00 22 00 29 01 2d 3e 15 30 0a 00 06 2d 36 38
>026228	31 43 38 00 23 32 0d 40 27 32 06 22 0b 24 05 10
>026238	5b a3 00 00 22 00 2a 01 2d 3e 16 30 0b 24 05 10
>026248	5b a3 23 32 0d 40 27 32 06 22 0a 00 06 2d 36 38
>026258	31 63 38 00 00 00 1c 00 2b 01 2d 3e 1f 30 ba e5
>026268	23 32 04 40 27 32 06 22 08 00 04 4d 46 20 53 00
>026278	00 00 22 00 2c 01 2d 3e 21 30 08 00 05 4d 46 20
>026288	53 58 23 32 04 40 27 32 06 22 08 00 04 46 20 53
>026298	58 00 00 00 22 00 2d 01 2d 3e 20 30 08 00 05 4d
>0262a8	46 20 53 58 23 32 02 40 23 32 00 40 27 32 06 22
>0262b8	04 00 00 00 00 00 24 00 2e 01 2d 3e 22 30 0e 00
>0262c8	0a 4d 59 48 20 48 20 50 45 20 51 00 23 32 04 00
>0262d8	01 48 27 32 06 22 03 40 00 00 18 00 2f 01 2d 3e
>0262e8	13 30 06 ce 54 c9 1a c0 27 32 06 22 03 10 37 7a
>0262f8	00 00 16 00 30 01 2d 3e 12 30 06 ce 54 c9 1a c0
>026308	27 32 06 22 01 40 00 00 14 00 31 01 2d 3e 14 30
>026318	b1 ed b9 e0 27 32 06 22 0a 40 00 00 1e 00 32 01
>026328	2d 3e 15 30 08 00 05 37 38 30 36 36 23 32 0b 40
>026338	27 32 06 22 03 10 37 7a 00 00 1e 00 33 01 2d 3e
>026348	16 30 03 10 37 7a 23 32 0b 40 27 32 06 22 08 00
>026358	05 37 38 30 36 36 00 00 28 00 34 01 2d 3e 1f 30
>026368	0e 00 0a 56 44 43 55 56 59 20 59 45 44 00 23 32
>026378	04 40 27 32 06 22 08 00 04 56 44 43 55 00 00 00
>026388	1e 00 35 01 2d 3e 21 30 b1 ed b9 e0 23 32 04 40
>026398	27 32 06 22 08 00 04 20 59 45 44 00 00 00 2e 00
>0263a8	36 01 2d 3e 20 30 0e 00 0a 56 44 43 55 56 59 20
>0263b8	59 45 44 00 23 32 02 40 23 32 06 40 27 32 06 22
>0263c8	0a 00 06 44 43 55 56 59 20 00 00 00 24 00 37 01
>0263d8	2d 3e 22 30 0c 00 08 48 44 55 55 4a 20 20 53 00
>0263e8	23 32 06 00 02 20 53 00 27 32 06 22 07 40 00 00
>0263f8	14 00 38 01 2d 3e 13 30 0e c0 27 32 06 22 05 10
>026408	0c 85 00 00 14 00 39 01 2d 3e 12 30 05 10 0c 85
>026418	27 32 06 22 01 40 00 00 1a 00 3a 01 2d 3e 14 30
>026428	0a 00 06 46 51 20 4f 55 5a 00 27 32 06 22 06 40
>026438	00 00 20 00 3b 01 2d 3e 15 30 0a 00 07 31 33 35
>026448	34 31 32 36 23 32 07 40 27 32 06 22 05 10 0c 85
>026458	00 00 20 00 3c 01 2d 3e 16 30 05 10 0c 85 23 32
>026468	07 40 27 32 06 22 0a 00 07 31 33 35 34 31 32 36
>026478	00 00 22 00 3d 01 2d 3e 1f 30 0a 00 06 46 51 20
>026488	4f 55 5a 00 23 32 03 40 27 32 06 22 06 00 03 46
>026498	51 20 00 00 22 00 3e 01 2d 3e 21 30 0a 00 06 46
>0264a8	51 20 4f 55 5a 00 23 32 03 40 27 32 06 22 06 00
>0264b8	03 4f 55 5a 00 00 24 00 3f 01 2d 3e 20 30 0a 00
>0264c8	06 46 51 20 4f 55 5a 00 23 32 07 40 23 32 00 40
>0264d8	27 32 06 22 04 00 00 00 00 00 1e 00 40 01 2d 3e
>0264e8	22 30 08 00 05 58 49 45 5a 5a 23 32 04 00 01 45
>0264f8	27 32 06 22 03 40 00 00 16 00 41 01 2d 3e 13 30
>026508	c1 cc 62 c5 27 32 06 22 03 10 ad 9f 00 00 16 00
>026518	42 01 2d 3e 12 30 c1 cc 62 c5 27 32 06 22 0b 24
>026528	01 40 00 00 12 00 43 01 2d 3e 14 30 10 e6 27 32
>026538	06 22 08 40 00 00 22 00 44 01 2d 3e 15 30 0a 00
>026548	06 2d 35 42 30 39 31 00 23 32 0c 40 27 32 06 22
>026558	0b 24 03 10 ad 9f 00 00 22 00 45 01 2d 3e 16 30
>026568	0b 24 03 10 ad 9f 23 32 0c 40 27 32 06 22 0a 00
>026578	06 2d 35 62 30 39 31 00 00 00 1e 00 46 01 2d 3e
>026588	1f 30 10 e6 23 32 07 40 27 32 06 22 0a 00 07 53
>026598	20 43 20 52 4b 46 00 00 1e 00 47 01 2d 3e 21 30
>0265a8	10 e6 23 32 07 40 27 32 06 22 0a 00 07 20 43 20
>0265b8	52 4b 46 45 00 00 2a 00 48 01 2d 3e 20 30 0c 00
>0265c8	08 53 20 43 20 52 4b 46 45 00 23 32 01 40 23 32
>0265d8	05 40 27 32 06 22 08 00 05 53 20 43 20 52 00 00
>0265e8	1e 00 49 01 2d 3e 22 30 08 00 05 4d 46 20 53 58
>0265f8	23 32 04 00 01 53 27 32 06 22 04 40 00 00 18 00
>026608	4a 01 2d 3e 13 30 a4 cd f9 c8 15 c0 27 32 06 22
>026618	01 10 9c 55 00 00 18 00 4b 01 2d 3e 12 30 0b 24
>026628	01 10 9c 55 27 32 06 22 0b 24 01 40 00 00 16 00
>026638	4c 01 2d 3e 14 30 06 00 03 4f 57 4e 27 32 06 22
>026648	03 40 00 00 20 00 4d 01 2d 3e 15 30 08 00 05 2d
>026658	39 35 39 43 23 32 10 40 27 32 06 22 0b 24 01 10
>026668	9c 55 00 00 20 00 4e 01 2d 3e 16 30 0b 24 01 10
>026678	9c 55 23 32 10 40 27 32 06 22 08 00 05 2d 39 35
>026688	39 63 00 00 1e 00 4f 01 2d 3e 1f 30 06 00 03 4f
>026698	57 4e 23 32 05 40 27 32 06 22 06 00 03 4f 57 4e
>0266a8	00 00 1c 00 50 01 2d 3e 21 30 2f ed 07 e0 23 32
>0266b8	05 40 27 32 06 22 06 00 03 4f 57 4e 00 00 20 00
>0266c8	51 01 2d 3e 20 30 06 00 03 4f 57 4e 23 32 02 40
>0266d8	23 32 01 40 27 32 06 22 04 00 01 57 00 00 20 00
>0266e8	52 01 2d 3e 22 30 0a 00 06 45 55 48 4c 54 59 00
>0266f8	23 32 04 00 01 5a 27 32 06 22 00 40 00 00 18 00
>026708	53 01 2d 3e 13 30 0b 24 03 10 52 85 27 32 06 22
>026718	03 10 52 85 00 00 18 00 54 01 2d 3e 12 30 0b 24
>026728	03 10 52 85 27 32 06 22 0b 24 01 40 00 00 18 00
>026738	55 01 2d 3e 14 30 08 00 05 49 20 5a 51 4d 27 32
>026748	06 22 05 40 00 00 22 00 56 01 2d 3e 15 30 0a 00
>026758	06 2d 35 37 31 41 41 00 23 32 0c 40 27 32 06 22
>026768	0b 24 03 10 52 85 00 00 22 00 57 01 2d 3e 16 30
>026778	0b 24 03 10 52 85 23 32 0c 40 27 32 06 22 0a 00
>026788	06 2d 35 37 31 61 61 00 00 00 1c 00 58 01 2d 3e
>026798	1f 30 fd ed 17 e0 23 32 03 40 27 32 06 22 06 00
>0267a8	03 49 20 5a 00 00 20 00 59 01 2d 3e 21 30 08 00
>0267b8	05 49 20 5a 51 4d 23 32 03 40 27 32 06 22 06 00
>0267c8	03 5a 51 4d 00 00 24 00 5a 01 2d 3e 20 30 08 00
>0267d8	05 49 20 5a 51 4d 23 32 02 40 23 32 02 40 27 32
>0267e8	06 22 06 00 02 20 5a 00 00 00 24 00 5b 01 2d 3e
>0267f8	22 30 0c 00 08 58 47 51 20 20 53 57 50 00 23 32
>026808	06 00 02 57 50 00 27 32 06 22 07 40 00 00 12 00
>026818	5c 01 2d 3e 13 30 29 c5 27 32 06 22 93 4c 00 00
>026828	12 00 5d 01 2d 3e 12 30 29 c5 27 32 06 22 01 40
>026838	00 00 14 00 5e 01 2d 3e 14 30 b1 ed b9 e0 27 32
>026848	06 22 0a 40 00 00 1c 00 5f 01 2d 3e 15 30 08 00
>026858	04 32 34 36 37 00 23 32 0b 40 27 32 06 22 93 4c
>026868	00 00 1c 00 60 01 2d 3e 16 30 93 4c 23 32 0b 40
>026878	27 32 06 22 08 00 04 32 34 36 37 00 00 00 2e 00
>026888	61 01 2d 3e 1f 30 0e 00 0a 56 44 43 55 56 59 20
>026898	59 45 44 00 23 32 0a 40 27 32 06 22 0e 00 0a 56
>0268a8	44 43 55 56 59 20 59 45 44 00 00 00 24 00 62 01
>0268b8	2d 3e 21 30 b1 ed b9 e0 23 32 0a 40 27 32 06 22
>0268c8	0e 00 0a 56 44 43 55 56 59 20 59 45 44 00 00 00
>0268d8	2a 00 63 01 2d 3e 20 30 0e 00 0a 56 44 43 55 56
>0268e8	59 20 59 45 44 00 23 32 02 40 23 32 03 40 27 32
>0268f8	06 22 06 00 03 44 43 55 00 00 24 00 64 01 2d 3e
>026908	22 30 0c 00 09 45 43 42 57 56 4b 4b 48 43 23 32
>026918	06 00 03 20 52 49 27 32 06 22 00 40 00 00 18 00
>026928	65 01 2d 3e 13 30 0b 24 03 10 52 85 27 32 06 22
>026938	03 10 52 85 00 00 14 00 66 01 2d 3e 12 30 67 c6
>026948	27 32 06 22 0b 24 01 40 00 00 14 00 67 01 2d 3e
>026958	14 30 4f ed 16 e4 27 32 06 22 00 40 00 00 22 00
>026968	68 01 2d 3e 15 30 0a 00 07 2d 33 34 32 35 32 32
>026978	23 32 08 40 27 32 06 22 0b 24 03 10 52 85 00 00
>026988	22 00 69 01 2d 3e 16 30 0b 24 03 10 52 85 23 32
>026998	08 40 27 32 06 22 0a 00 07 2d 33 34 32 35 32 32
>0269a8	00 00 1a 00 6a 01 2d 3e 1f 30 04 00 00 00 23 32
>0269b8	00 40 27 32 06 22 04 00 00 00 00 00 1a 00 6b 01
>0269c8	2d 3e 21 30 4f ed 16 e4 23 32 00 40 27 32 06 22
>0269d8	04 00 00 00 00 00 1e 00 6c 01 2d 3e 20 30 04 00
>0269e8	00 00 23 32 01 40 23 32 01 40 27 32 06 22 04 00
>0269f8	00 00 00 00 26 00 6d 01 2d 3e 22 30 0e 00 0a 56
>026a08	44 43 55 56 59 20 59 45 44 00 23 32 06 00 03 43
>026a18	55 56 27 32 06 22 03 40 00 00 18 00 6e 01 2d 3e
>026a28	13 30 0b 24 01 10 af ad 27 32 06 22 01 10 af ad
>026a38	00 00 14 00 6f 01 2d 3e 12 30 a7 c5 27 32 06 22
>026a48	0b 24 01 40 00 00 1a 00 70 01 2d 3e 14 30 0a 00
>026a58	06 45 55 48 4c 54 59 00 27 32 06 22 06 40 00 00
>026a68	22 00 71 01 2d 3e 15 30 0a 00 06 2d 32 31 39 30
>026a78	37 00 23 32 0d 40 27 32 06 22 0b 24 01 10 af ad
>026a88	00 00 22 00 72 01 2d 3e 16 30 0b 24 01 10 af ad
>026a98	23 32 0d 40 27 32 06 22 0a 00 06 2d 32 31 39 30
>026aa8	37 00 00 00 20 00 73 01 2d 3e 1f 30 2e ed 89 e1
>026ab8	23 32 07 40 27 32 06 22 0a 00 06 45 55 48 4c 54
>026ac8	59 00 00 00 26 00 74 01 2d 3e 21 30 0a 00 06 45
>026ad8	55 48 4c 54 59 00 23 32 07 40 27 32 06 22 0a 00
>026ae8	06 45 55 48 4c 54 59 00 00 00 26 00 75 01 2d 3e
>026af8	20 30 0a 00 06 45 55 48 4c 54 59 00 23 32 05 40
>026b08	23 32 03 40 27 32 06 22 06 00 02 54 59 00 00 00
>026b18	22 00 76 01 2d 3e 22 30 0a 00 07 53 20 20 59 45
>026b28	42 58 23 32 06 00 02 20 20 00 27 32 06 22 02 40
>026b38	00 00 14 00 77 01 2d 3e 13 30 0b 24 d0 b9 27 32
>026b48	06 22 d0 b9 00 00 14 00 78 01 2d 3e 12 30 06 c0
>026b58	27 32 06 22 0b 24 01 40 00 00 14 00 79 01 2d 3e
>026b68	14 30 2a ee 6b e6 27 32 06 22 08 40 00 00 20 00
>026b78	7a 01 2d 3e 15 30 0a 00 06 2d 37 34 37 32 30 00
>026b88	23 32 08 40 27 32 06 22 0b 24 d0 b9 00 00 20 00
>026b98	7b 01 2d 3e 16 30 0b 24 d0 b9 23 32 08 40 27 32
>026ba8	06 22 0a 00 06 2d 37 34 37 32 30 00 00 00 20 00
>026bb8	7c 01 2d 3e 1f 30 2a ee 6b e6 23 32 07 40 27 32
>026bc8	06 22 0a 00 07 4b 20 41 52 20 58 4c 00 00 20 00
>026bd8	7d 01 2d 3e 21 30 2a ee 6b e6 23 32 07 40 27 32
>026be8	06 22 0a 00 07 20 41 52 20 58 4c 49 00 00 28 00
>026bf8	7e 01 2d 3e 20 30 0c 00 08 4b 20 41 52 20 58 4c
>026c08	49 00 23 32 02 40 23 32 02 40 27 32 06 22 06 00
>026c18	02 20 41 00 00 00 22 00 7f 01 2d 3e 22 30 0a 00
>026c28	06 44 20 4f 58 58 44 00 23 32 06 00 02 44 20 00
>026c38	27 32 06 22 01 40 00 00 12 00 80 01 2d 3e 13 30
>026c48	0a c0 27 32 06 22 d2 65 00 00 14 00 81 01 2d 3e
>026c58	12 30 0a c0 27 32 06 22 0b 24 01 40 00 00 1e 00
>026c68	82 01 2d 3e 14 30 0e 00 0a 4f 57 4b 57 20 20 42
>026c78	47 47 42 00 27 32 06 22 0a 40 00 00 1e 00 83 01
>026c88	2d 3e 15 30 08 00 05 2d 39 36 38 32 23 32 0a 40
>026c98	27 32 06 22 0b 24 d2 65 00 00 1e 00 84 01 2d 3e
>026ca8	16 30 0b 24 d2 65 23 32 0a 40 27 32 06 22 08 00
>026cb8	05 2d 39 36 38 32 00 00 26 00 85 01 2d 3e 1f 30
>026cc8	0e 00 0a 4f 57 4b 57 20 20 42 47 47 42 00 23 32
>026cd8	03 40 27 32 06 22 06 00 03 4f 57 4b 00 00 1e 00
>026ce8	86 01 2d 3e 21 30 e4 ed 53 ed 01 e0 23 32 03 40
>026cf8	27 32 06 22 06 00 03 47 47 42 00 00 2c 00 87 01
>026d08	2d 3e 20 30 0e 00 0a 4f 57 4b 57 20 20 42 47 47
>026d18	42 00 23 32 03 40 23 32 05 40 27 32 06 22 08 00
>026d28	05 4b 57 20 20 42 00 00 1e 00 88 01 2d 3e 22 30
>026d38	06 00 03 57 41 47 23 32 06 00 03 58 49 45 27 32
>026d48	06 22 00 40 00 00 16 00 89 01 2d 3e 13 30 6d ce
>026d58	1a c0 27 32 06 22 02 10 fb 7a 00 00 14 00 8a 01
>026d68	2d 3e 12 30 6d ce 1a c0 27 32 06 22 01 40 00 00
>026d78	1a 00 8b 01 2d 3e 14 30 0a 00 07 53 20 20 59 45
>026d88	42 58 27 32 06 22 07 40 00 00 1e 00 8c 01 2d 3e
>026d98	15 30 08 00 05 38 30 36 33 35 23 32 0a 40 27 32
>026da8	06 22 02 10 fb 7a 00 00 1e 00 8d 01 2d 3e 16 30
>026db8	02 10 fb 7a 23 32 0a 40 27 32 06 22 08 00 05 38
>026dc8	30 36 33 35 00 00 1e 00 8e 01 2d 3e 1f 30 01 e0
>026dd8	23 32 09 40 27 32 06 22 0a 00 07 53 20 20 59 45
>026de8	42 58 00 00 26 00 8f 01 2d 3e 21 30 0a 00 07 53
>026df8	20 20 59 45 42 58 23 32 09 40 27 32 06 22 0a 00
>026e08	07 53 20 20 59 45 42 58 00 00 24 00 90 01 2d 3e
>026e18	20 30 0a 00 07 53 20 20 59 45 42 58 23 32 09 40
>026e28	23 32 04 40 27 32 06 22 04 00 00 00 00 00 20 00
>026e38	91 01 2d 3e 22 30 0a 00 06 45 55 48 4c 54 59 00
>026e48	23 32 04 00 01 54 27 32 06 22 05 40 00 00 18 00
>026e58	92 01 2d 3e 13 30 d1 cd 5a ce 15 c0 27 32 06 22
>026e68	03 10 c2 60 00 00 14 00 93 01 2d 3e 12 30 03 10
>026e78	c2 60 27 32 06 22 01 40 00 00 12 00 94 01 2d 3e
>026e88	14 30 01 e0 27 32 06 22 07 40 00 00 20 00 95 01
>026e98	2d 3e 15 30 0a 00 06 33 32 30 33 30 32 00 23 32
>026ea8	08 40 27 32 06 22 03 10 c2 60 00 00 20 00 96 01
>026eb8	2d 3e 16 30 03 10 c2 60 23 32 08 40 27 32 06 22
>026ec8	0a 00 06 33 32 30 33 30 32 00 00 00 26 00 97 01
>026ed8	2d 3e 1f 30 0a 00 07 53 20 20 59 45 42 58 23 32
>026ee8	09 40 27 32 06 22 0a 00 07 53 20 20 59 45 42 58
>026ef8	00 00 1e 00 98 01 2d 3e 21 30 01 e0 23 32 09 40
>026f08	27 32 06 22 0a 00 07 53 20 20 59 45 42 58 00 00
>026f18	26 00 99 01 2d 3e 20 30 0a 00 07 53 20 20 59 45
>026f28	42 58 23 32 01 40 23 32 02 40 27 32 06 22 06 00
>026f38	02 53 20 00 00 00 26 00 9a 01 2d 3e 22 30 0e 00
>026f48	0a 58 49 55 20 4a 50 43 54 59 58 00 23 32 06 00
>026f58	03 20 4a 50 27 32 06 22 04 40 00 00 14 00 9b 01
>026f68	2d 3e 13 30 0e c0 27 32 06 22 05 10 0c 85 00 00
>026f78	12 00 9c 01 2d 3e 12 30 0e c0 27 32 06 22 01 40
>026f88	00 00 1c 00 9d 01 2d 3e 14 30 0c 00 09 43 53 51
>026f98	47 4f 59 41 47 51 27 32 06 22 09 40 00 00 20 00
>026fa8	9e 01 2d 3e 15 30 0a 00 07 33 35 32 30 32 30 34
>026fb8	23 32 06 40 27 32 06 22 05 10 0c 85 00 00 20 00
>026fc8	9f 01 2d 3e 16 30 05 10 0c 85 23 32 06 40 27 32
>026fd8	06 22 0a 00 07 33 35 32 30 32 30 34 00 00 22 00
>026fe8	a0 01 2d 3e 1f 30 0c 00 09 43 53 51 47 4f 59 41
>026ff8	47 51 23 32 01 40 27 32 06 22 04 00 01 43 00 00
>027008	1a 00 a1 01 2d 3e 21 30 2c ed 08 e0 23 32 01 40
>027018	27 32 06 22 04 00 01 51 00 00 26 00 a2 01 2d 3e
>027028	20 30 0c 00 09 43 53 51 47 4f 59 41 47 51 23 32
>027038	04 40 23 32 01 40 27 32 06 22 04 00 01 47 00 00
>027048	24 00 a3 01 2d 3e 22 30 0c 00 08 4b 20 41 52 20
>027058	58 4c 49 00 23 32 06 00 02 4c 49 00 27 32 06 22
>027068	07 40 00 00 14 00 a4 01 2d 3e 13 30 0b 24 d0 b9
>027078	27 32 06 22 d0 b9 00 00 14 00 a5 01 2d 3e 12 30
>027088	06 c0 27 32 06 22 0b 24 01 40 00 00 12 00 a6 01
>027098	2d 3e 14 30 65 e6 27 32 06 22 0a 40 00 00 1e 00
>0270a8	a7 01 2d 3e 15 30 08 00 05 2d 42 35 31 36 23 32
>0270b8	0e 40 27 32 06 22 0b 24 d0 b9 00 00 1e 00 a8 01
>0270c8	2d 3e 16 30 0b 24 d0 b9 23 32 0e 40 27 32 06 22
>0270d8	08 00 05 2d 62 35 31 36 00 00 26 00 a9 01 2d 3e
>0270e8	1f 30 0e 00 0a 58 42 4b 20 57 4b 20 52 49 52 00
>0270f8	23 32 02 40 27 32 06 22 06 00 02 58 42 00 00 00
>027108	26 00 aa 01 2d 3e 21 30 0e 00 0a 58 42 4b 20 57
>027118	4b 20 52 49 52 00 23 32 02 40 27 32 06 22 06 00
>027128	02 49 52 00 00 00 2c 00 ab 01 2d 3e 20 30 0e 00
>027138	0a 58 42 4b 20 57 4b 20 52 49 52 00 23 32 06 40
>027148	23 32 05 40 27 32 06 22 08 00 05 4b 20 52 49 52
>027158	00 00 20 00 ac 01 2d 3e 22 30 08 00 05 47 5a 5a
>027168	4d 4c 23 32 06 00 02 4d 4c 00 27 32 06 22 04 40
>027178	00 00 18 00 ad 01 2d 3e 13 30 0b 24 01 10 42 63
>027188	27 32 06 22 01 10 42 63 00 00 18 00 ae 01 2d 3e
>027198	12 30 0b 24 01 10 42 63 27 32 06 22 0b 24 01 40
>0271a8	00 00 1a 00 af 01 2d 3e 14 30 0a 00 07 53 20 20
>0271b8	59 45 42 58 27 32 06 22 07 40 00 00 22 00 b0 01
>0271c8	2d 3e 15 30 0a 00 06 2d 32 30 32 32 41 00 23 32
>0271d8	0c 40 27 32 06 22 0b 24 01 10 42 63 00 00 22 00
>0271e8	b1 01 2d 3e 16 30 0b 24 01 10 42 63 23 32 0c 40
>0271f8	27 32 06 22 0a 00 06 2d 32 30 32 32 61 00 00 00
>027208	1e 00 b2 01 2d 3e 1f 30 01 e0 23 32 09 40 27 32
>027218	06 22 0a 00 07 53 20 20 59 45 42 58 00 00 26 00
>027228	b3 01 2d 3e 21 30 0a 00 07 53 20 20 59 45 42 58
>027238	23 32 09 40 27 32 06 22 0a 00 07 53 20 20 59 45
>027248	42 58 00 00 26 00 b4 01 2d 3e 20 30 0a 00 07 53
>027258	20 20 59 45 42 58 23 32 01 40 23 32 02 40 27 32
>027268	06 22 06 00 02 53 20 00 00 00 24 00 b5 01 2d 3e
>027278	22 30 0c 00 09 43 4e 42 49 20 56 52 5a 53 23 32
>027288	06 00 03 43 4e 42 27 32 06 22 01 40 00 00 18 00
>027298	b6 01 2d 3e 13 30 0b 24 02 10 0e 86 27 32 06 22
>0272a8	02 10 0e 86 00 00 18 00 b7 01 2d 3e 12 30 5b cd
>0272b8	4e ca 1b c0 27 32 06 22 0b 24 01 40 00 00 14 00
>0272c8	b8 01 2d 3e 14 30 fd ed 17 e0 27 32 06 22 05 40
>0272d8	00 00 22 00 b9 01 2d 3e 15 30 0a 00 06 2d 35 37
>0272e8	37 39 32 00 23 32 0b 40 27 32 06 22 0b 24 02 10
>0272f8	0e 86 00 00 22 00 ba 01 2d 3e 16 30 0b 24 02 10
>027308	0e 86 23 32 0b 40 27 32 06 22 0a 00 06 2d 35 37
>027318	37 39 32 00 00 00 1e 00 bb 01 2d 3e 1f 30 08 00
>027328	05 49 20 5a 51 4d 23 32 00 40 27 32 06 22 04 00
>027338	00 00 00 00 1e 00 bc 01 2d 3e 21 30 08 00 05 49
>027348	20 5a 51 4d 23 32 00 40 27 32 06 22 04 00 00 00
>027358	00 00 24 00 bd 01 2d 3e 20 30 08 00 05 49 20 5a
>027368	51 4d 23 32 04 40 23 32 02 40 27 32 06 22 06 00
>027378	02 51 4d 00 00 00 1c 00 be 01 2d 3e 22 30 06 00
>027388	03 4a 20 52 23 32 04 00 01 52 27 32 06 22 03 40
>027398	00 00 14 00 bf 01 2d 3e 13 30 2f c5 27 32 06 22
>0273a8	04 10 9c 9b 00 00 14 00 c0 01 2d 3e 12 30 2f c5
>0273b8	27 32 06 22 0b 24 01 40 00 00 14 00 c1 01 2d 3e
>0273c8	14 30 2f ed 07 e0 27 32 06 22 03 40 00 00 22 00
>0273d8	c2 01 2d 3e 15 30 0a 00 07 2d 32 35 34 38 36 33
>0273e8	23 32 09 40 27 32 06 22 0b 24 04 10 9c 9b 00 00
>0273f8	22 00 c3 01 2d 3e 16 30 0b 24 04 10 9c 9b 23 32
>027408	09 40 27 32 06 22 0a 00 07 2d 32 35 34 38 36 33
>027418	00 00 1a 00 c4 01 2d 3e 1f 30 2f ed 07 e0 23 32
>027428	01 40 27 32 06 22 04 00 01 4f 00 00 1a 00 c5 01
>027438	2d 3e 21 30 2f ed 07 e0 23 32 01 40 27 32 06 22
>027448	04 00 01 4e 00 00 20 00 c6 01 2d 3e 20 30 06 00
>027458	03 4f 57 4e 23 32 05 40 23 32 00 40 27 32 06 22
>027468	04 00 00 00 00 00 1e 00 c7 01 2d 3e 22 30 08 00
>027478	05 49 20 5a 51 4d 23 32 04 00 01 4e 27 32 06 22
>027488	00 40 00 00 18 00 c8 01 2d 3e 13 30 0b 24 01 10
>027498	9b 4d 27 32 06 22 01 10 9b 4d 00 00 18 00 c9 01
>0274a8	2d 3e 12 30 0b 24 01 10 9b 4d 27 32 06 22 0b 24
>0274b8	01 40 00 00 16 00 ca 01 2d 3e 14 30 13 ee 1d ee
>0274c8	08 e0 27 32 06 22 00 40 00 00 22 00 cb 01 2d 3e
>0274d8	15 30 0a 00 06 2d 31 33 36 36 37 00 23 32 0d 40
>0274e8	27 32 06 22 0b 24 01 10 9b 4d 00 00 22 00 cc 01
>0274f8	2d 3e 16 30 0b 24 01 10 9b 4d 23 32 0d 40 27 32
>027508	06 22 0a 00 06 2d 31 33 36 36 37 00 00 00 1c 00
>027518	cd 01 2d 3e 1f 30 13 ee 1d ee 08 e0 23 32 00 40
>027528	27 32 06 22 04 00 00 00 00 00 1a 00 ce 01 2d 3e
>027538	21 30 04 00 00 00 23 32 00 40 27 32 06 22 04 00
>027548	00 00 00 00 1e 00 cf 01 2d 3e 20 30 04 00 00 00
>027558	23 32 02 40 23 32 00 40 27 32 06 22 04 00 00 00
>027568	00 00 24 00 d0 01 2d 3e 22 30 0e 00 0a 56 44 43
>027578	55 56 59 20 59 45 44 00 23 32 04 00 01 56 27 32
>027588	06 22 01 40 00 00 18 00 d1 01 2d 3e 13 30 0b 24
>027598	02 10 0e 86 27 32 06 22 02 10 0e 86 00 00 18 00
>0275a8	d2 01 2d 3e 12 30 5b cd 4e ca 1b c0 27 32 06 22
>0275b8	0b 24 01 40 00 00 18 00 d3 01 2d 3e 14 30 08 00
>0275c8	05 58 49 45 5a 5a 27 32 06 22 05 40 00 00 2e 00
>0275d8	d4 01 2d 3e 15 30 16 00 12 2d 31 30 31 30 30 30
>0275e8	31 31 30 30 30 30 30 31 31 31 30 00 23 32 02 40
>0275f8	27 32 06 22 0b 24 02 10 0e 86 00 00 2e 00 d5 01
>027608	2d 3e 16 30 0b 24 02 10 0e 86 23 32 02 40 27 32
>027618	06 22 16 00 12 2d 31 30 31 30 30 30 31 31 30 30
>027628	30 30 30 31 31 31 30 00 00 00 20 00 d6 01 2d 3e
>027638	1f 30 08 00 05 58 49 45 5a 5a 23 32 03 40 27 32
>027648	06 22 06 00 03 58 49 45 00 00 20 00 d7 01 2d 3e
>027658	21 30 08 00 05 58 49 45 5a 5a 23 32 03 40 27 32
>027668	06 22 06 00 03 45 5a 5a 00 00 22 00 d8 01 2d 3e
>027678	20 30 08 00 05 58 49 45 5a 5a 23 32 05 40 23 32
>027688	02 40 27 32 06 22 04 00 01 5a 00 00 1a 00 d9 01
>027698	2d 3e 22 30 04 00 01 4e 23 32 04 00 01 4e 27 32
>0276a8	06 22 01 40 00 00 16 00 da 01 2d 3e 13 30 05 10
>0276b8	0c 85 27 32 06 22 05 10 0c 85 00 00 12 00 db 01
>0276c8	2d 3e 12 30 0e c0 27 32 06 22 01 40 00 00 14 00
>0276d8	dc 01 2d 3e 14 30 60 ed 83 e2 27 32 06 22 03 40
>0276e8	00 00 20 00 dd 01 2d 3e 15 30 0a 00 07 31 33 35
>0276f8	34 31 32 36 23 32 07 40 27 32 06 22 05 10 0c 85
>027708	00 00 20 00 de 01 2d 3e 16 30 05 10 0c 85 23 32
>027718	07 40 27 32 06 22 0a 00 07 31 33 35 34 31 32 36
>027728	00 00 1e 00 df 01 2d 3e 1f 30 06 00 03 41 45 49
>027738	23 32 03 40 27 32 06 22 06 00 03 41 45 49 00 00
>027748	1c 00 e0 01 2d 3e 21 30 60 ed 83 e2 23 32 03 40
>027758	27 32 06 22 06 00 03 41 45 49 00 00 20 00 e1 01
>027768	2d 3e 20 30 06 00 03 41 45 49 23 32 05 40 23 32
>027778	01 40 27 32 06 22 04 00 00 00 00 00 24 00 e2 01
>027788	2d 3e 22 30 0c 00 08 53 20 43 20 52 4b 46 45 00
>027798	23 32 06 00 03 52 4b 46 27 32 06 22 05 40 00 00
>0277a8	16 00 e3 01 2d 3e 13 30 e3 cd 07 c0 27 32 06 22
>0277b8	02 10 ef a1 00 00 14 00 e4 01 2d 3e 12 30 02 10
>0277c8	ef a1 27 32 06 22 01 40 00 00 14 00 e5 01 2d 3e
>0277d8	14 30 b7 ed 19 e0 27 32 06 22 02 40 00 00 1e 00
>0277e8	e6 01 2d 3e 15 30 08 00 05 39 30 36 30 37 23 32
>0277f8	0a 40 27 32 06 22 02 10 ef a1 00 00 1e 00 e7 01
>027808	2d 3e 16 30 02 10 ef a1 23 32 0a 40 27 32 06 22
>027818	08 00 05 39 30 36 30 37 00 00 1c 00 e8 01 2d 3e
>027828	1f 30 b7 ed 19 e0 23 32 02 40 27 32 06 22 06 00
>027838	02 48 45 00 00 00 1e 00 e9 01 2d 3e 21 30 06 00
>027848	02 48 45 00 23 32 02 40 27 32 06 22 06 00 02 48
>027858	45 00 00 00 20 00 ea 01 2d 3e 20 30 06 00 02 48
>027868	45 00 23 32 01 40 23 32 00 40 27 32 06 22 04 00
>027878	00 00 00 00 20 00 eb 01 2d 3e 22 30 0a 00 06 44
>027888	20 4f 58 58 44 00 23 32 04 00 01 44 27 32 06 22
>027898	01 40 00 00 18 00 ec 01 2d 3e 13 30 0b 24 01 10
>0278a8	57 50 27 32 06 22 01 10 57 50 00 00 18 00 ed 01
>0278b8	2d 3e 12 30 0b 24 01 10 57 50 27 32 06 22 0b 24
>0278c8	01 40 00 00 16 00 ee 01 2d 3e 14 30 06 00 03 41
>0278d8	45 49 27 32 06 22 03 40 00 00 20 00 ef 01 2d 3e
>0278e8	15 30 08 00 05 2d 41 45 33 36 23 32 0f 40 27 32
>0278f8	06 22 0b 24 01 10 57 50 00 00 20 00 f0 01 2d 3e
>027908	16 30 0b 24 01 10 57 50 23 32 0f 40 27 32 06 22
>027918	08 00 05 2d 61 65 33 36 00 00 1c 00 f1 01 2d 3e
>027928	1f 30 06 00 03 41 45 49 23 32 00 40 27 32 06 22
>027938	04 00 00 00 00 00 1a 00 f2 01 2d 3e 21 30 60 ed
>027948	83 e2 23 32 00 40 27 32 06 22 04 00 00 00 00 00
>027958	20 00 f3 01 2d 3e 20 30 06 00 03 41 45 49 23 32
>027968	05 40 23 32 01 40 27 32 06 22 04 00 00 00 00 00
>027978	20 00 f4 01 2d 3e 22 30 08 00 05 49 20 5a 51 4d
>027988	23 32 06 00 03 5a 51 4d 27 32 06 22 03 40 00 00
>027998	14 00 f5 01 2d 3e 13 30 6b ce 45 c0 27 32 06 22
>0279a8	92 40 00 00 12 00 f6 01 2d 3e 12 30 92 40 27 32
>0279b8	06 22 01 40 00 00 16 00 f7 01 2d 3e 14 30 06 00
>0279c8	02 41 54 00 27 32 06 22 02 40 00 00 1a 00 f8 01
>0279d8	2d 3e 15 30 06 00 03 31 37 32 23 32 09 40 27 32
>0279e8	06 22 92 40 00 00 1a 00 f9 01 2d 3e 16 30 92 40
>0279f8	23 32 09 40 27 32 06 22 06 00 03 31 37 32 00 00
>027a08	1c 00 fa 01 2d 3e 1f 30 5c ed 5f e2 23 32 02 40
>027a18	27 32 06 22 06 00 02 41 54 00 00 00 1e 00 fb 01
>027a28	2d 3e 21 30 06 00 02 41 54 00 23 32 02 40 27 32
>027a38	06 22 06 00 02 41 54 00 00 00 20 00 fc 01 2d 3e
>027a48	20 30 06 00 02 41 54 00 23 32 03 40 23 32 00 40
>027a58	27 32 06 22 04 00 00 00 00 00 26 00 fd 01 2d 3e
>027a68	22 30 0e 00 0a 58 42 4b 20 57 4b 20 52 49 52 00
>027a78	23 32 06 00 03 46 4b 44 27 32 06 22 00 40 00 00
>027a88	18 00 fe 01 2d 3e 13 30 05 ce d4 c9 10 c0 27 32
>027a98	06 22 01 10 57 50 00 00 18 00 ff 01 2d 3e 12 30
>027aa8	05 ce d4 c9 10 c0 27 32 06 22 0b 24 01 40 00 00
>027ab8	16 00 00 02 2d 3e 14 30 13 ee 1d ee 08 e0 27 32
>027ac8	06 22 00 40 00 00 22 00 01 02 2d 3e 15 30 0a 00
>027ad8	06 2d 35 35 36 31 36 00 23 32 09 40 27 32 06 22
>027ae8	0b 24 01 10 57 50 00 00 22 00 02 02 2d 3e 16 30
>027af8	0b 24 01 10 57 50 23 32 09 40 27 32 06 22 0a 00
>027b08	06 2d 35 35 36 31 36 00 00 00 1a 00 03 02 2d 3e
>027b18	1f 30 04 00 00 00 23 32 02 40 27 32 06 22 04 00
>027b28	00 00 00 00 1c 00 04 02 2d 3e 21 30 13 ee 1d ee
>027b38	08 e0 23 32 02 40 27 32 06 22 04 00 00 00 00 00
>027b48	1e 00 05 02 2d 3e 20 30 04 00 00 00 23 32 02 40
>027b58	23 32 00 40 27 32 06 22 04 00 00 00 00 00 20 00
>027b68	06 02 2d 3e 22 30 0a 00 06 44 20 4f 58 58 44 00
>027b78	23 32 04 00 01 58 27 32 06 22 04 40 00 00 18 00
>027b88	07 02 2d 3e 13 30 16 d0 03 40 27 32 27 32 06 22
>027b98	04 10 5e 9c 00 00 16 00 08 02 2d 3e 12 30 16 d0
>027ba8	03 40 27 32 27 32 06 22 01 40 00 00 12 00 09 02
>027bb8	2d 3e 14 30 03 e0 27 32 06 22 0a 40 00 00 1e 00
>027bc8	0a 02 2d 3e 15 30 08 00 05 35 35 35 36 35 23 32
>027bd8	0d 40 27 32 06 22 04 10 5e 9c 00 00 1e 00 0b 02
>027be8	2d 3e 16 30 04 10 5e 9c 23 32 0d 40 27 32 06 22
>027bf8	08 00 05 35 35 35 36 35 00 00 20 00 0c 02 2d 3e
>027c08	1f 30 03 e0 23 32 08 40 27 32 06 22 0c 00 08 4f
>027c18	20 4b 4d 59 20 51 59 00 00 00 20 00 0d 02 2d 3e
>027c28	21 30 03 e0 23 32 08 40 27 32 06 22 0c 00 08 4b
>027c38	4d 59 20 51 59 4c 41 00 00 00 28 00 0e 02 2d 3e
>027c48	20 30 0e 00 0a 4f 20 4b 4d 59 20 51 59 4c 41 00
>027c58	23 32 0c 40 23 32 00 40 27 32 06 22 04 00 00 00
>027c68	00 00 22 00 0f 02 2d 3e 22 30 0c 00 08 4b 20 41
>027c78	52 20 58 4c 49 00 23 32 04 00 01 4c 27 32 06 22
>027c88	07 40 00 00 14 00 10 02 2d 3e 13 30 f4 c4 27 32
>027c98	06 22 01 10 42 56 00 00 14 00 11 02 2d 3e 12 30
>027ca8	f4 c4 27 32 06 22 0b 24 01 40 00 00 18 00 12 02
>027cb8	2d 3e 14 30 a1 fd 01 f0 01 40 27 32 27 32 06 22
>027cc8	05 40 00 00 22 00 13 02 2d 3e 15 30 0a 00 06 2d
>027cd8	31 34 36 37 43 00 23 32 0d 40 27 32 06 22 0b 24
>027ce8	01 10 42 56 00 00 22 00 14 02 2d 3e 16 30 0b 24
>027cf8	01 10 42 56 23 32 0d 40 27 32 06 22 0a 00 06 2d
>027d08	31 34 36 37 63 00 00 00 1e 00 15 02 2d 3e 1f 30
>027d18	08 00 05 47 5a 5a 4d 4c 23 32 01 40 27 32 06 22
>027d28	04 00 01 47 00 00 1e 00 16 02 2d 3e 21 30 a1 fd
>027d38	01 f0 01 40 27 32 23 32 01 40 27 32 06 22 04 00
>027d48	01 4c 00 00 22 00 17 02 2d 3e 20 30 08 00 05 47
>027d58	5a 5a 4d 4c 23 32 05 40 23 32 01 40 27 32 06 22
>027d68	04 00 01 4c 00 00 1e 00 18 02 2d 3e 22 30 06 00
>027d78	03 57 41 47 23 32 06 00 02 4b 4d 00 27 32 06 22
>027d88	00 40 00 00 12 00 19 02 2d 3e 13 30 69 c6 27 32
>027d98	06 22 c2 8e 00 00 12 00 1a 02 2d 3e 12 30 69 c6
>027da8	27 32 06 22 01 40 00 00 18 00 1b 02 2d 3e 14 30
>027db8	08 00 05 4d 46 20 53 58 27 32 06 22 05 40 00 00
>027dc8	1c 00 1c 02 2d 3e 15 30 08 00 04 39 32 33 43 00
>027dd8	23 32 0d 40 27 32 06 22 c2 8e 00 00 1c 00 1d 02
>027de8	2d 3e 16 30 c2 8e 23 32 0d 40 27 32 06 22 08 00
>027df8	04 39 32 33 63 00 00 00 18 00 1e 02 2d 3e 1f 30
>027e08	ba e5 23 32 00 40 27 32 06 22 04 00 00 00 00 00
>027e18	1e 00 1f 02 2d 3e 21 30 08 00 05 4d 46 20 53 58
>027e28	23 32 00 40 27 32 06 22 04 00 00 00 00 00 22 00
>027e38	20 02 2d 3e 20 30 08 00 05 4d 46 20 53 58 23 32
>027e48	05 40 23 32 00 40 27 32 06 22 04 00 00 00 00 00
>027e58	22 00 21 02 2d 3e 22 30 0c 00 09 4b 4d 52 5a 57
>027e68	5a 20 58 49 23 32 04 00 01 20 27 32 06 22 07 40
>027e78	00 00 14 00 22 02 2d 3e 13 30 67 c6 27 32 06 22
>027e88	03 10 52 85 00 00 18 00 23 02 2d 3e 12 30 0b 24
>027e98	03 10 52 85 27 32 06 22 0b 24 01 40 00 00 18 00
>027ea8	24 02 2d 3e 14 30 08 00 05 55 20 56 41 49 27 32
>027eb8	06 22 05 40 00 00 26 00 25 02 2d 3e 15 30 0e 00
>027ec8	0a 2d 31 33 30 31 31 31 31 30 32 00 23 32 04 40
>027ed8	27 32 06 22 0b 24 03 10 52 85 00 00 26 00 26 02
>027ee8	2d 3e 16 30 0b 24 03 10 52 85 23 32 04 40 27 32
>027ef8	06 22 0e 00 0a 2d 31 33 30 31 31 31 31 30 32 00
>027f08	00 00 22 00 27 02 2d 3e 1f 30 08 00 05 55 20 56
>027f18	41 49 23 32 07 40 27 32 06 22 08 00 05 55 20 56
>027f28	41 49 00 00 22 00 28 02 2d 3e 21 30 08 00 05 55
>027f38	20 56 41 49 23 32 07 40 27 32 06 22 08 00 05 55
>027f48	20 56 41 49 00 00 22 00 29 02 2d 3e 20 30 08 00
>027f58	05 55 20 56 41 49 23 32 07 40 23 32 01 40 27 32
>027f68	06 22 04 00 00 00 00 00 20 00 2a 02 2d 3e 22 30
>027f78	0a 00 07 54 55 50 58 42 45 59 23 32 04 00 01 54
>027f88	27 32 06 22 01 40 00 00 16 00 2b 02 2d 3e 13 30
>027f98	59 ce e1 c1 27 32 06 22 01 10 9b 4d 00 00 16 00
>027fa8	2c 02 2d 3e 12 30 59 ce e1 c1 27 32 06 22 0b 24
>027fb8	01 40 00 00 18 00 2d 02 2d 3e 14 30 08 00 05 58
>027fc8	49 45 5a 5a 27 32 06 22 05 40 00 00 20 00 2e 02
>027fd8	2d 3e 15 30 08 00 05 2d 41 42 31 42 23 32 0f 40
>027fe8	27 32 06 22 0b 24 01 10 9b 4d 00 00 20 00 2f 02
>027ff8	2d 3e 16 30 0b 24 01 10 9b 4d 23 32 0f 40 27 32
>028008	06 22 08 00 05 2d 61 62 31 62 00 00 1e 00 30 02
>028018	2d 3e 1f 30 89 ed 21 e0 23 32 07 40 27 32 06 22
>028028	08 00 05 58 49 45 5a 5a 00 00 1e 00 31 02 2d 3e
>028038	21 30 89 ed 21 e0 23 32 07 40 27 32 06 22 08 00
>028048	05 58 49 45 5a 5a 00 00 24 00 32 02 2d 3e 20 30
>028058	08 00 05 58 49 45 5a 5a 23 32 03 40 23 32 02 40
>028068	27 32 06 22 06 00 02 45 5a 00 00 00 24 00 33 02
>028078	2d 3e 22 30 0e 00 0a 4f 20 4b 4d 59 20 51 59 4c
>028088	41 00 23 32 04 00 01 20 27 32 06 22 02 40 00 00
>028098	1a 00 34 02 2d 3e 13 30 59 de 26 d2 01 40 27 32
>0280a8	27 32 06 22 05 10 5b 4a 00 00 14 00 35 02 2d 3e
>0280b8	12 30 05 10 5b 4a 27 32 06 22 01 40 00 00 16 00
>0280c8	36 02 2d 3e 14 30 02 f0 02 40 27 32 27 32 06 22
>0280d8	0b 40 00 00 1e 00 37 02 2d 3e 15 30 08 00 05 38
>0280e8	30 34 32 33 23 32 0c 40 27 32 06 22 05 10 5b 4a
>0280f8	00 00 1e 00 38 02 2d 3e 16 30 05 10 5b 4a 23 32
>028108	0c 40 27 32 06 22 08 00 05 38 30 34 32 33 00 00
>028118	2e 00 39 02 2d 3e 1f 30 0e 00 0b 44 54 47 4e 4c
>028128	20 20 46 55 20 52 23 32 0b 40 27 32 06 22 0e 00
>028138	0b 44 54 47 4e 4c 20 20 46 55 20 52 00 00 26 00
>028148	3a 02 2d 3e 21 30 02 f0 02 40 27 32 23 32 0b 40
>028158	27 32 06 22 0e 00 0b 44 54 47 4e 4c 20 20 46 55
>028168	20 52 00 00 28 00 3b 02 2d 3e 20 30 0e 00 0b 44
>028178	54 47 4e 4c 20 20 46 55 20 52 23 32 01 40 23 32
>028188	00 40 27 32 06 22 04 00 00 00 00 00 20 00 3c 02
>028198	2d 3e 22 30 08 00 05 55 20 56 41 49 23 32 06 00
>0281a8	02 41 49 00 27 32 06 22 04 40 00 00 12 00 3d 02
>0281b8	2d 3e 13 30 7c 40 27 32 06 22 7c 40 00 00 12 00
>0281c8	3e 02 2d 3e 12 30 61 c6 27 32 06 22 01 40 00 00
>0281d8	1e 00 3f 02 2d 3e 14 30 0e 00 0b 56 20 59 50 4f
>0281e8	58 4f 20 20 59 46 27 32 06 22 0b 40 00 00 1c 00
>0281f8	40 02 2d 3e 15 30 08 00 05 31 31 31 32 31 23 32
>028208	03 40 27 32 06 22 7c 40 00 00 1c 00 41 02 2d 3e
>028218	16 30 7c 40 23 32 03 40 27 32 06 22 08 00 05 31
>028228	31 31 32 31 00 00 26 00 42 02 2d 3e 1f 30 0e 00
>028238	0b 56 20 59 50 4f 58 4f 20 20 59 46 23 32 02 40
>028248	27 32 06 22 06 00 02 56 20 00 00 00 1c 00 43 02
>028258	2d 3e 21 30 69 ee c1 e3 23 32 02 40 27 32 06 22
>028268	06 00 02 59 46 00 00 00 2c 00 44 02 2d 3e 20 30
>028278	0e 00 0b 56 20 59 50 4f 58 4f 20 20 59 46 23 32
>028288	04 40 23 32 05 40 27 32 06 22 08 00 05 50 4f 58
>028298	4f 20 00 00 1c 00 45 02 2d 3e 22 30 04 00 00 00
>0282a8	23 32 06 00 03 43 54 59 27 32 06 22 00 40 00 00
>0282b8	16 00 46 02 2d 3e 13 30 6d ce 1a c0 27 32 06 22
>0282c8	02 10 fb 7a 00 00 14 00 47 02 2d 3e 12 30 6d ce
>0282d8	1a c0 27 32 06 22 01 40 00 00 18 00 48 02 2d 3e
>0282e8	14 30 08 00 05 58 49 45 5a 5a 27 32 06 22 05 40
>0282f8	00 00 20 00 49 02 2d 3e 15 30 0a 00 07 31 34 32
>028308	31 31 35 31 23 32 06 40 27 32 06 22 02 10 fb 7a
>028318	00 00 20 00 4a 02 2d 3e 16 30 02 10 fb 7a 23 32
>028328	06 40 27 32 06 22 0a 00 07 31 34 32 31 31 35 31
>028338	00 00 1e 00 4b 02 2d 3e 1f 30 08 00 05 58 49 45
>028348	5a 5a 23 32 01 40 27 32 06 22 04 00 01 58 00 00
>028358	1a 00 4c 02 2d 3e 21 30 89 ed 21 e0 23 32 01 40
>028368	27 32 06 22 04 00 01 5a 00 00 22 00 4d 02 2d 3e
>028378	20 30 08 00 05 58 49 45 5a 5a 23 32 05 40 23 32
>028388	00 40 27 32 06 22 04 00 00 00 00 00 1c 00 4e 02
>028398	2d 3e 22 30 04 00 00 00 23 32 06 00 03 43 4e 42
>0283a8	27 32 06 22 00 40 00 00 16 00 4f 02 2d 3e 13 30
>0283b8	03 10 c2 60 27 32 06 22 03 10 c2 60 00 00 16 00
>0283c8	50 02 2d 3e 12 30 d1 cd 5a ce 15 c0 27 32 06 22
>0283d8	01 40 00 00 1c 00 51 02 2d 3e 14 30 0c 00 09 45
>0283e8	43 42 57 56 4b 4b 48 43 27 32 06 22 09 40 00 00
>0283f8	20 00 52 02 2d 3e 15 30 0a 00 07 32 31 34 31 35
>028408	33 34 23 32 06 40 27 32 06 22 03 10 c2 60 00 00
>028418	20 00 53 02 2d 3e 16 30 03 10 c2 60 23 32 06 40
>028428	27 32 06 22 0a 00 07 32 31 34 31 35 33 34 00 00
>028438	20 00 54 02 2d 3e 1f 30 0b e0 23 32 09 40 27 32
>028448	06 22 0c 00 09 45 43 42 57 56 4b 4b 48 43 00 00
>028458	2a 00 55 02 2d 3e 21 30 0c 00 09 45 43 42 57 56
>028468	4b 4b 48 43 23 32 09 40 27 32 06 22 0c 00 09 45
>028478	43 42 57 56 4b 4b 48 43 00 00 28 00 56 02 2d 3e
>028488	20 30 0c 00 09 45 43 42 57 56 4b 4b 48 43 23 32
>028498	02 40 23 32 03 40 27 32 06 22 06 00 03 43 42 57
>0284a8	00 00 24 00 57 02 2d 3e 22 30 0e 00 0a 4e 4a 43
>0284b8	55 20 53 59 53 4f 56 00 23 32 04 00 01 4f 27 32
>0284c8	06 22 09 40 00 00 16 00 58 02 2d 3e 13 30 d5 cc
>0284d8	35 c8 09 c0 27 32 06 22 06 4d 00 00 16 00 59 02
>0284e8	2d 3e 12 30 0b 24 06 4d 27 32 06 22 0b 24 01 40
>0284f8	00 00 16 00 5a 02 2d 3e 14 30 06 00 02 52 47 00
>028508	27 32 06 22 02 40 00 00 26 00 5b 02 2d 3e 15 30
>028518	10 00 0d 2d 31 31 30 31 30 30 30 30 30 31 31 30
>028528	23 32 02 40 27 32 06 22 0b 24 06 4d 00 00 26 00
>028538	5c 02 2d 3e 16 30 0b 24 06 4d 23 32 02 40 27 32
>028548	06 22 10 00 0d 2d 31 31 30 31 30 30 30 30 30 31
>028558	31 30 00 00 1c 00 5d 02 2d 3e 1f 30 06 00 02 52
>028568	47 00 23 32 00 40 27 32 06 22 04 00 00 00 00 00
>028578	18 00 5e 02 2d 3e 21 30 0d e6 23 32 00 40 27 32
>028588	06 22 04 00 00 00 00 00 20 00 5f 02 2d 3e 20 30
>028598	06 00 02 52 47 00 23 32 03 40 23 32 00 40 27 32
>0285a8	06 22 04 00 00 00 00 00 24 00 60 02 2d 3e 22 30
>0285b8	0c 00 08 4a 49 56 54 46 41 48 4a 00 23 32 06 00
>0285c8	02 48 4a 00 27 32 06 22 07 40 00 00 16 00 61 02
>0285d8	2d 3e 13 30 3e ce 08 c0 27 32 06 22 05 10 ec 58
>0285e8	00 00 14 00 62 02 2d 3e 12 30 3e ce 08 c0 27 32
>0285f8	06 22 01 40 00 00 14 00 63 02 2d 3e 14 30 89 ed
>028608	21 e0 27 32 06 22 05 40 00 00 22 00 64 02 2d 3e
>028618	15 30 0c 00 09 32 32 31 32 30 33 32 33 30 23 32
>028628	04 40 27 32 06 22 05 10 ec 58 00 00 22 00 65 02
>028638	2d 3e 16 30 05 10 ec 58 23 32 04 40 27 32 06 22
>028648	0c 00 09 32 32 31 32 30 33 32 33 30 00 00 1e 00
>028658	66 02 2d 3e 1f 30 89 ed 21 e0 23 32 05 40 27 32
>028668	06 22 08 00 05 58 49 45 5a 5a 00 00 1e 00 67 02
>028678	2d 3e 21 30 89 ed 21 e0 23 32 05 40 27 32 06 22
>028688	08 00 05 58 49 45 5a 5a 00 00 22 00 68 02 2d 3e
>028698	20 30 08 00 05 58 49 45 5a 5a 23 32 06 40 23 32
>0286a8	01 40 27 32 06 22 04 00 00 00 00 00 20 00 69 02
>0286b8	2d 3e 22 30 0a 00 06 46 51 20 4f 55 5a 00 23 32
>0286c8	04 00 01 5a 27 32 06 22 06 40 00 00 14 00 6a 02
>0286d8	2d 3e 13 30 67 c6 27 32 06 22 03 10 52 85 00 00
>0286e8	18 00 6b 02 2d 3e 12 30 0b 24 03 10 52 85 27 32
>0286f8	06 22 0b 24 01 40 00 00 14 00 6c 02 2d 3e 14 30
>028708	69 ee c1 e3 27 32 06 22 0b 40 00 00 26 00 6d 02
>028718	2d 3e 15 30 0e 00 0a 2d 31 33 30 31 31 31 31 30
>028728	32 00 23 32 04 40 27 32 06 22 0b 24 03 10 52 85
>028738	00 00 26 00 6e 02 2d 3e 16 30 0b 24 03 10 52 85
>028748	23 32 04 40 27 32 06 22 0e 00 0a 2d 31 33 30 31
>028758	31 31 31 30 32 00 00 00 2e 00 6f 02 2d 3e 1f 30
>028768	0e 00 0b 56 20 59 50 4f 58 4f 20 20 59 46 23 32
>028778	0c 40 27 32 06 22 0e 00 0b 56 20 59 50 4f 58 4f
>028788	20 20 59 46 00 00 2e 00 70 02 2d 3e 21 30 0e 00
>028798	0b 56 20 59 50 4f 58 4f 20 20 59 46 23 32 0c 40
>0287a8	27 32 06 22 0e 00 0b 56 20 59 50 4f 58 4f 20 20
>0287b8	59 46 00 00 28 00 71 02 2d 3e 20 30 0e 00 0b 56
>0287c8	20 59 50 4f 58 4f 20 20 59 46 23 32 08 40 23 32
>0287d8	01 40 27 32 06 22 04 00 01 20 00 00 1c 00 72 02
>0287e8	2d 3e 22 30 06 00 03 57 41 47 23 32 04 00 01 47
>0287f8	27 32 06 22 03 40 00 00 18 00 73 02 2d 3e 13 30
>028808	05 ce d4 c9 10 c0 27 32 06 22 01 10 57 50 00 00
>028818	18 00 74 02 2d 3e 12 30 0b 24 01 10 57 50 27 32
>028828	06 22 0b 24 01 40 00 00 12 00 75 02 2d 3e 14 30
>028838	0b e0 27 32 06 22 09 40 00 00 22 00 76 02 2d 3e
>028848	15 30 0a 00 06 2d 35 35 36 31 36 00 23 32 09 40
>028858	27 32 06 22 0b 24 01 10 57 50 00 00 22 00 77 02
>028868	2d 3e 16 30 0b 24 01 10 57 50 23 32 09 40 27 32
>028878	06 22 0a 00 06 2d 35 35 36 31 36 00 00 00 2a 00
>028888	78 02 2d 3e 1f 30 0c 00 09 45 43 42 57 56 4b 4b
>028898	48 43 23 32 0a 40 27 32 06 22 0c 00 09 45 43 42
>0288a8	57 56 4b 4b 48 43 00 00 20 00 79 02 2d 3e 21 30
>0288b8	0b e0 23 32 0a 40 27 32 06 22 0c 00 09 45 43 42
>0288c8	57 56 4b 4b 48 43 00 00 28 00 7a 02 2d 3e 20 30
>0288d8	0c 00 09 45 43 42 57 56 4b 4b 48 43 23 32 08 40
>0288e8	23 32 02 40 27 32 06 22 06 00 02 48 43 00 00 00
>0288f8	1a 00 7b 02 2d 3e 22 30 04 00 01 54 23 32 04 00
>028908	01 54 27 32 06 22 01 40 00 00 14 00 7c 02 2d 3e
>028918	13 30 a3 c5 27 32 06 22 04 10 c0 4c 00 00 18 00
>028928	7d 02 2d 3e 12 30 0b 24 04 10 c0 4c 27 32 06 22
>028938	0b 24 01 40 00 00 16 00 7e 02 2d 3e 14 30 06 00
>028948	02 41 54 00 27 32 06 22 02 40 00 00 22 00 7f 02
>028958	2d 3e 15 30 0a 00 07 2d 34 30 36 33 30 30 23 32
>028968	08 40 27 32 06 22 0b 24 04 10 c0 4c 00 00 22 00
>028978	80 02 2d 3e 16 30 0b 24 04 10 c0 4c 23 32 08 40
>028988	27 32 06 22 0a 00 07 2d 34 30 36 33 30 30 00 00
>028998	1c 00 81 02 2d 3e 1f 30 5c ed 5f e2 23 32 03 40
>0289a8	27 32 06 22 06 00 02 41 54 00 00 00 1e 00 82 02
>0289b8	2d 3e 21 30 06 00 02 41 54 00 23 32 03 40 27 32
>0289c8	06 22 06 00 02 41 54 00 00 00 20 00 83 02 2d 3e
>0289d8	20 30 06 00 02 41 54 00 23 32 04 40 23 32 00 40
>0289e8	27 32 06 22 04 00 00 00 00 00 22 00 84 02 2d 3e
>0289f8	22 30 0c 00 08 53 20 43 20 52 4b 46 45 00 23 32
>028a08	04 00 01 5a 27 32 06 22 00 40 00 00 14 00 85 02
>028a18	2d 3e 13 30 0b 24 6b 40 27 32 06 22 6b 40 00 00
>028a28	14 00 86 02 2d 3e 12 30 5f c6 27 32 06 22 0b 24
>028a38	01 40 00 00 14 00 87 02 2d 3e 14 30 04 00 00 00
>028a48	27 32 06 22 00 40 00 00 1e 00 88 02 2d 3e 15 30
>028a58	08 00 05 2d 31 32 32 33 23 32 04 40 27 32 06 22
>028a68	0b 24 6b 40 00 00 1e 00 89 02 2d 3e 16 30 0b 24
>028a78	6b 40 23 32 04 40 27 32 06 22 08 00 05 2d 31 32
>028a88	32 33 00 00 1a 00 8a 02 2d 3e 1f 30 56 ee 06 e0
>028a98	23 32 00 40 27 32 06 22 04 00 00 00 00 00 1a 00
>028aa8	8b 02 2d 3e 21 30 56 ee 06 e0 23 32 00 40 27 32
>028ab8	06 22 04 00 00 00 00 00 1e 00 8c 02 2d 3e 20 30
>028ac8	04 00 00 00 23 32 02 40 23 32 01 40 27 32 06 22
>028ad8	04 00 00 00 00 00 24 00 8d 02 2d 3e 22 30 0e 00
>028ae8	0a 4d 59 48 20 48 20 50 45 20 51 00 23 32 04 00
>028af8	01 4d 27 32 06 22 01 40 00 00 14 00 8e 02 2d 3e
>028b08	13 30 0e c0 27 32 06 22 05 10 0c 85 00 00 14 00
>028b18	8f 02 2d 3e 12 30 05 10 0c 85 27 32 06 22 01 40
>028b28	00 00 14 00 90 02 2d 3e 14 30 d8 ec 06 e0 27 32
>028b38	06 22 09 40 00 00 1e 00 91 02 2d 3e 15 30 08 00
>028b48	05 34 41 32 31 36 23 32 0e 40 27 32 06 22 05 10
>028b58	0c 85 00 00 1e 00 92 02 2d 3e 16 30 05 10 0c 85
>028b68	23 32 0e 40 27 32 06 22 08 00 05 34 61 32 31 36
>028b78	00 00 1a 00 93 02 2d 3e 1f 30 d8 ec 06 e0 23 32
>028b88	01 40 27 32 06 22 04 00 01 43 00 00 22 00 94 02
>028b98	2d 3e 21 30 0c 00 09 43 4e 42 49 20 56 52 5a 53
>028ba8	23 32 01 40 27 32 06 22 04 00 01 53 00 00 28 00
>028bb8	95 02 2d 3e 20 30 0c 00 09 43 4e 42 49 20 56 52
>028bc8	5a 53 23 32 03 40 23 32 03 40 27 32 06 22 06 00
>028bd8	03 42 49 20 00 00 26 00 96 02 2d 3e 22 30 0e 00
>028be8	0b 44 54 47 4e 4c 20 20 46 55 20 52 23 32 06 00
>028bf8	02 20 52 00 27 32 06 22 0a 40 00 00 16 00 97 02
>028c08	2d 3e 13 30 04 10 51 83 27 32 06 22 04 10 51 83
>028c18	00 00 14 00 98 02 2d 3e 12 30 04 10 51 83 27 32
>028c28	06 22 01 40 00 00 18 00 99 02 2d 3e 14 30 a1 fd
>028c38	01 f0 02 40 27 32 27 32 06 22 0a 40 00 00 20 00
>028c48	9a 02 2d 3e 15 30 0a 00 07 33 31 30 32 33 33 33
>028c58	23 32 06 40 27 32 06 22 04 10 51 83 00 00 20 00
>028c68	9b 02 2d 3e 16 30 04 10 51 83 23 32 06 40 27 32
>028c78	06 22 0a 00 07 33 31 30 32 33 33 33 00 00 20 00
>028c88	9c 02 2d 3e 1f 30 a1 fd 01 f0 02 40 27 32 23 32
>028c98	03 40 27 32 06 22 06 00 03 50 52 43 00 00 26 00
>028ca8	9d 02 2d 3e 21 30 0e 00 0a 50 52 43 4d 41 4a 53
>028cb8	56 4e 4a 00 23 32 03 40 27 32 06 22 06 00 03 56
>028cc8	4e 4a 00 00 28 00 9e 02 2d 3e 20 30 0e 00 0a 50
>028cd8	52 43 4d 41 4a 53 56 4e 4a 00 23 32 0a 40 23 32
>028ce8	03 40 27 32 06 22 04 00 01 4a 00 00 1c 00 9f 02
>028cf8	2d 3e 22 30 04 00 01 58 23 32 06 00 02 20 59 00
>028d08	27 32 06 22 00 40 00 00 14 00 a0 02 2d 3e 13 30
>028d18	0d c0 27 32 06 22 01 10 9d 69 00 00 14 00 a1 02
>028d28	2d 3e 12 30 01 10 9d 69 27 32 06 22 01 40 00 00
>028d38	1c 00 a2 02 2d 3e 14 30 0c 00 09 4d 50 4d 4a 20
>028d48	45 48 43 48 27 32 06 22 09 40 00 00 20 00 a3 02
>028d58	2d 3e 15 30 0a 00 06 32 34 30 34 31 30 00 23 32
>028d68	07 40 27 32 06 22 01 10 9d 69 00 00 20 00 a4 02
>028d78	2d 3e 16 30 01 10 9d 69 23 32 07 40 27 32 06 22
>028d88	0a 00 06 32 34 30 34 31 30 00 00 00 20 00 a5 02
>028d98	2d 3e 1f 30 18 e0 23 32 0a 40 27 32 06 22 0c 00
>028da8	09 4d 50 4d 4a 20 45 48 43 48 00 00 2a 00 a6 02
>028db8	2d 3e 21 30 0c 00 09 4d 50 4d 4a 20 45 48 43 48
>028dc8	23 32 0a 40 27 32 06 22 0c 00 09 4d 50 4d 4a 20
>028dd8	45 48 43 48 00 00 26 00 a7 02 2d 3e 20 30 0c 00
>028de8	09 4d 50 4d 4a 20 45 48 43 48 23 32 0a 40 23 32
>028df8	03 40 27 32 06 22 04 00 00 00 00 00 22 00 a8 02
>028e08	2d 3e 22 30 0c 00 09 45 43 42 57 56 4b 4b 48 43
>028e18	23 32 04 00 01 43 27 32 06 22 02 40 00 00 14 00
>028e28	a9 02 2d 3e 13 30 0b 24 02 40 27 32 06 22 02 40
>028e38	00 00 16 00 aa 02 2d 3e 12 30 0b 24 02 40 27 32
>028e48	06 22 0b 24 01 40 00 00 1e 00 ab 02 2d 3e 14 30
>028e58	0e 00 0a 4d 59 48 20 48 20 50 45 20 51 00 27 32
>028e68	06 22 0a 40 00 00 1c 00 ac 02 2d 3e 15 30 06 00
>028e78	02 2d 32 00 23 32 05 40 27 32 06 22 0b 24 02 40
>028e88	00 00 1c 00 ad 02 2d 3e 16 30 0b 24 02 40 23 32
>028e98	05 40 27 32 06 22 06 00 02 2d 32 00 00 00 18 00
>028ea8	ae 02 2d 3e 1f 30 57 e5 23 32 00 40 27 32 06 22
>028eb8	04 00 00 00 00 00 18 00 af 02 2d 3e 21 30 57 e5
>028ec8	23 32 00 40 27 32 06 22 04 00 00 00 00 00 2c 00
>028ed8	b0 02 2d 3e 20 30 0e 00 0a 4d 59 48 20 48 20 50
>028ee8	45 20 51 00 23 32 07 40 23 32 05 40 27 32 06 22
>028ef8	08 00 04 50 45 20 51 00 00 00 1e 00 b1 02 2d 3e
>028f08	22 30 08 00 05 4d 46 20 53 58 23 32 04 00 01 58
>028f18	27 32 06 22 05 40 00 00 18 00 b2 02 2d 3e 13 30
>028f28	0b 24 04 10 8d 4f 27 32 06 22 04 10 8d 4f 00 00
>028f38	18 00 b3 02 2d 3e 12 30 0b 24 04 10 8d 4f 27 32
>028f48	06 22 0b 24 01 40 00 00 14 00 b4 02 2d 3e 14 30
>028f58	b1 ed b9 e0 27 32 06 22 0a 40 00 00 22 00 b5 02
>028f68	2d 3e 15 30 0a 00 07 2d 32 32 35 32 32 38 23 32
>028f78	09 40 27 32 06 22 0b 24 04 10 8d 4f 00 00 22 00
>028f88	b6 02 2d 3e 16 30 0b 24 04 10 8d 4f 23 32 09 40
>028f98	27 32 06 22 0a 00 07 2d 32 32 35 32 32 38 00 00
>028fa8	20 00 b7 02 2d 3e 1f 30 b1 ed b9 e0 23 32 07 40
>028fb8	27 32 06 22 0a 00 07 56 44 43 55 56 59 20 00 00
>028fc8	20 00 b8 02 2d 3e 21 30 b1 ed b9 e0 23 32 07 40
>028fd8	27 32 06 22 0a 00 07 55 56 59 20 59 45 44 00 00
>028fe8	2c 00 b9 02 2d 3e 20 30 0e 00 0a 56 44 43 55 56
>028ff8	59 20 59 45 44 00 23 32 02 40 23 32 05 40 27 32
>029008	06 22 08 00 05 44 43 55 56 59 00 00 26 00 ba 02
>029018	2d 3e 22 30 0e 00 0b 56 20 59 50 4f 58 4f 20 20
>029028	59 46 23 32 06 00 02 20 59 00 27 32 06 22 02 40
>029038	00 00 12 00 bb 02 2d 3e 13 30 a4 40 27 32 06 22
>029048	a4 40 00 00 18 00 bc 02 2d 3e 12 30 0c de 0d d0
>029058	00 40 27 32 27 32 06 22 01 40 00 00 18 00 bd 02
>029068	2d 3e 14 30 c8 fc 5c f6 00 40 27 32 27 32 06 22
>029078	06 40 00 00 1c 00 be 02 2d 3e 15 30 08 00 05 32
>029088	30 30 30 32 23 32 03 40 27 32 06 22 a4 40 00 00
>029098	1c 00 bf 02 2d 3e 16 30 a4 40 23 32 03 40 27 32
>0290a8	06 22 08 00 05 32 30 30 30 32 00 00 1e 00 c0 02
>0290b8	2d 3e 1f 30 c8 fc 5c f6 00 40 27 32 23 32 01 40
>0290c8	27 32 06 22 04 00 01 54 00 00 20 00 c1 02 2d 3e
>0290d8	21 30 0a 00 06 54 4f 55 55 52 47 00 23 32 01 40
>0290e8	27 32 06 22 04 00 01 47 00 00 24 00 c2 02 2d 3e
>0290f8	20 30 0a 00 06 54 4f 55 55 52 47 00 23 32 05 40
>029108	23 32 00 40 27 32 06 22 04 00 00 00 00 00 1a 00
>029118	c3 02 2d 3e 22 30 04 00 01 4e 23 32 04 00 01 4e
>029128	27 32 06 22 01 40 00 00 16 00 c4 02 2d 3e 13 30
>029138	d5 cc 35 c8 09 c0 27 32 06 22 06 4d 00 00 18 00
>029148	c5 02 2d 3e 12 30 d5 cc 35 c8 09 c0 27 32 06 22
>029158	0b 24 01 40 00 00 1e 00 c6 02 2d 3e 14 30 0e 00
>029168	0b 56 20 59 50 4f 58 4f 20 20 59 46 27 32 06 22
>029178	0b 40 00 00 20 00 c7 02 2d 3e 15 30 0a 00 07 2d
>029188	33 31 30 30 31 32 23 32 04 40 27 32 06 22 0b 24
>029198	06 4d 00 00 20 00 c8 02 2d 3e 16 30 0b 24 06 4d
>0291a8	23 32 04 40 27 32 06 22 0a 00 07 2d 33 31 30 30
>0291b8	31 32 00 00 1c 00 c9 02 2d 3e 1f 30 69 ee c1 e3
>0291c8	23 32 02 40 27 32 06 22 06 00 02 56 20 00 00 00
>0291d8	1c 00 ca 02 2d 3e 21 30 69 ee c1 e3 23 32 02 40
>0291e8	27 32 06 22 06 00 02 59 46 00 00 00 28 00 cb 02
>0291f8	2d 3e 20 30 0e 00 0b 56 20 59 50 4f 58 4f 20 20
>029208	59 46 23 32 0b 40 23 32 01 40 27 32 06 22 04 00
>029218	01 46 00 00 26 00 cc 02 2d 3e 22 30 0e 00 0a 4d
>029228	59 48 20 48 20 50 45 20 51 00 23 32 06 00 03 48
>029238	20 50 27 32 06 22 05 40 00 00 14 00 cd 02 2d 3e
>029248	13 30 e7 c5 27 32 06 22 05 10 28 b3 00 00 12 00
>029258	ce 02 2d 3e 12 30 e7 c5 27 32 06 22 01 40 00 00
>029268	16 00 cf 02 2d 3e 14 30 06 00 03 4f 57 4e 27 32
>029278	06 22 03 40 00 00 26 00 d0 02 2d 3e 15 30 10 00
>029288	0c 31 30 30 32 31 31 30 31 32 30 30 30 00 23 32
>029298	03 40 27 32 06 22 05 10 28 b3 00 00 26 00 d1 02
>0292a8	2d 3e 16 30 05 10 28 b3 23 32 03 40 27 32 06 22
>0292b8	10 00 0c 31 30 30 32 31 31 30 31 32 30 30 30 00
>0292c8	00 00 1c 00 d2 02 2d 3e 1f 30 2f ed 07 e0 23 32
>0292d8	03 40 27 32 06 22 06 00 03 4f 57 4e 00 00 1e 00
>0292e8	d3 02 2d 3e 21 30 06 00 03 4f 57 4e 23 32 03 40
>0292f8	27 32 06 22 06 00 03 4f 57 4e 00 00 20 00 d4 02
>029308	2d 3e 20 30 06 00 03 4f 57 4e 23 32 01 40 23 32
>029318	01 40 27 32 06 22 04 00 01 4f 00 00 1a 00 d5 02
>029328	2d 3e 22 30 04 00 01 58 23 32 04 00 01 58 27 32
>029338	06 22 01 40 00 00 12 00 d6 02 2d 3e 13 30 7c 40
>029348	27 32 06 22 7c 40 00 00 12 00 d7 02 2d 3e 12 30
>029358	7c 40 27 32 06 22 01 40 00 00 18 00 d8 02 2d 3e
>029368	14 30 08 00 05 55 20 56 41 49 27 32 06 22 05 40
>029378	00 00 1a 00 d9 02 2d 3e 15 30 06 00 03 31 32 34
>029388	23 32 0a 40 27 32 06 22 7c 40 00 00 1a 00 da 02
>029398	2d 3e 16 30 7c 40 23 32 0a 40 27 32 06 22 06 00
>0293a8	03 31 32 34 00 00 1a 00 db 02 2d 3e 1f 30 cf ed
>0293b8	62 e0 23 32 01 40 27 32 06 22 04 00 01 55 00 00
>0293c8	1a 00 dc 02 2d 3e 21 30 cf ed 62 e0 23 32 01 40
>0293d8	27 32 06 22 04 00 01 49 00 00 22 00 dd 02 2d 3e
>0293e8	20 30 08 00 05 55 20 56 41 49 23 32 05 40 23 32
>0293f8	02 40 27 32 06 22 04 00 01 49 00 00 1c 00 de 02
>029408	2d 3e 22 30 06 00 02 52 47 00 23 32 04 00 01 47
>029418	27 32 06 22 02 40 00 00 16 00 df 02 2d 3e 13 30
>029428	02 10 fb 7a 27 32 06 22 02 10 fb 7a 00 00 14 00
>029438	e0 02 2d 3e 12 30 6d ce 1a c0 27 32 06 22 01 40
>029448	00 00 1a 00 e1 02 2d 3e 14 30 0a 00 07 53 20 20
>029458	59 45 42 58 27 32 06 22 07 40 00 00 1e 00 e2 02
>029468	2d 3e 15 30 08 00 05 32 41 39 31 39 23 32 0d 40
>029478	27 32 06 22 02 10 fb 7a 00 00 1e 00 e3 02 2d 3e
>029488	16 30 02 10 fb 7a 23 32 0d 40 27 32 06 22 08 00
>029498	05 32 61 39 31 39 00 00 24 00 e4 02 2d 3e 1f 30
>0294a8	0a 00 07 53 20 20 59 45 42 58 23 32 05 40 27 32
>0294b8	06 22 08 00 05 53 20 20 59 45 00 00 1c 00 e5 02
>0294c8	2d 3e 21 30 01 e0 23 32 05 40 27 32 06 22 08 00
>0294d8	05 20 59 45 42 58 00 00 26 00 e6 02 2d 3e 20 30
>0294e8	0a 00 07 53 20 20 59 45 42 58 23 32 05 40 23 32
>0294f8	03 40 27 32 06 22 06 00 03 45 42 58 00 00 22 00
>029508	e7 02 2d 3e 22 30 0c 00 09 43 53 51 47 4f 59 41
>029518	47 51 23 32 04 00 01 51 27 32 06 22 03 40 00 00
>029528	12 00 e8 02 2d 3e 13 30 93 4c 27 32 06 22 93 4c
>029538	00 00 12 00 e9 02 2d 3e 12 30 93 4c 27 32 06 22
>029548	01 40 00 00 1e 00 ea 02 2d 3e 14 30 0e 00 0a 50
>029558	52 43 4d 41 4a 53 56 4e 4a 00 27 32 06 22 0a 40
>029568	00 00 1c 00 eb 02 2d 3e 15 30 08 00 04 31 36 30
>029578	38 00 23 32 0d 40 27 32 06 22 93 4c 00 00 1c 00
>029588	ec 02 2d 3e 16 30 93 4c 23 32 0d 40 27 32 06 22
>029598	08 00 04 31 36 30 38 00 00 00 26 00 ed 02 2d 3e
>0295a8	1f 30 a1 fd 01 f0 02 40 27 32 23 32 09 40 27 32
>0295b8	06 22 0c 00 09 50 52 43 4d 41 4a 53 56 4e 00 00
>0295c8	26 00 ee 02 2d 3e 21 30 a1 fd 01 f0 02 40 27 32
>0295d8	23 32 09 40 27 32 06 22 0c 00 09 52 43 4d 41 4a
>0295e8	53 56 4e 4a 00 00 2a 00 ef 02 2d 3e 20 30 0e 00
>0295f8	0a 50 52 43 4d 41 4a 53 56 4e 4a 00 23 32 04 40
>029608	23 32 02 40 27 32 06 22 06 00 02 4d 41 00 00 00
>029618	24 00 f0 02 2d 3e 22 30 0e 00 0a 58 42 4b 20 57
>029628	4b 20 52 49 52 00 23 32 04 00 01 42 27 32 06 22
>029638	02 40 00 00 18 00 f1 02 2d 3e 13 30 0b 24 01 10
>029648	42 63 27 32 06 22 01 10 42 63 00 00 14 00 f2 02
>029658	2d 3e 12 30 6c c6 27 32 06 22 0b 24 01 40 00 00
>029668	18 00 f3 02 2d 3e 14 30 c8 fc 5c f6 04 40 27 32
>029678	27 32 06 22 05 40 00 00 2c 00 f4 02 2d 3e 15 30
>029688	14 00 11 2d 31 30 31 30 30 30 31 31 30 31 30 30
>029698	30 30 31 30 23 32 02 40 27 32 06 22 0b 24 01 10
>0296a8	42 63 00 00 2c 00 f5 02 2d 3e 16 30 0b 24 01 10
>0296b8	42 63 23 32 02 40 27 32 06 22 14 00 11 2d 31 30
>0296c8	31 30 30 30 31 31 30 31 30 30 30 30 31 30 00 00
>0296d8	1e 00 f6 02 2d 3e 1f 30 08 00 05 58 53 52 44 44
>0296e8	23 32 01 40 27 32 06 22 04 00 01 58 00 00 1e 00
>0296f8	f7 02 2d 3e 21 30 c8 fc 5c f6 04 40 27 32 23 32
>029708	01 40 27 32 06 22 04 00 01 44 00 00 22 00 f8 02
>029718	2d 3e 20 30 08 00 05 58 53 52 44 44 23 32 07 40
>029728	23 32 03 40 27 32 06 22 04 00 00 00 00 00 22 00
>029738	f9 02 2d 3e 22 30 0a 00 06 46 51 20 4f 55 5a 00
>029748	23 32 06 00 02 20 4d 00 27 32 06 22 00 40 00 00
>029758	12 00 fa 02 2d 3e 13 30 61 40 27 32 06 22 61 40
>029768	00 00 16 00 fb 02 2d 3e 12 30 33 d6 04 40 27 32
>029778	27 32 06 22 01 40 00 00 16 00 fc 02 2d 3e 14 30
>029788	e4 ed 53 ed 01 e0 27 32 06 22 0a 40 00 00 1c 00
>029798	fd 02 2d 3e 15 30 08 00 05 31 30 31 32 31 23 32
>0297a8	03 40 27 32 06 22 61 40 00 00 1c 00 fe 02 2d 3e
>0297b8	16 30 61 40 23 32 03 40 27 32 06 22 08 00 05 31
>0297c8	30 31 32 31 00 00 26 00 ff 02 2d 3e 1f 30 e4 ed
>0297d8	53 ed 01 e0 23 32 0a 40 27 32 06 22 0e 00 0a 4f
>0297e8	57 4b 57 20 20 42 47 47 42 00 00 00 26 00 00 03
>0297f8	2d 3e 21 30 e4 ed 53 ed 01 e0 23 32 0a 40 27 32
>029808	06 22 0e 00 0a 4f 57 4b 57 20 20 42 47 47 42 00
>029818	00 00 2a 00 01 03 2d 3e 20 30 0e 00 0a 4f 57 4b
>029828	57 20 20 42 47 47 42 00 23 32 06 40 23 32 03 40
>029838	27 32 06 22 06 00 03 20 42 47 00 00 22 00 02 03
>029848	2d 3e 22 30 0a 00 06 44 20 4f 58 58 44 00 23 32
>029858	06 00 02 58 44 00 27 32 06 22 05 40 00 00 12 00
>029868	03 03 2d 3e 13 30 0a c0 27 32 06 22 d2 65 00 00
>029878	16 00 04 03 2d 3e 12 30 0b 24 d2 65 27 32 06 22
>029888	0b 24 01 40 00 00 1c 00 05 03 2d 3e 14 30 0c 00
>029898	08 53 20 43 20 52 4b 46 45 00 27 32 06 22 08 40
>0298a8	00 00 1e 00 06 03 2d 3e 15 30 08 00 05 2d 32 35
>0298b8	44 32 23 32 10 40 27 32 06 22 0b 24 d2 65 00 00
>0298c8	1e 00 07 03 2d 3e 16 30 0b 24 d2 65 23 32 10 40
>0298d8	27 32 06 22 08 00 05 2d 32 35 64 32 00 00 1e 00
>0298e8	08 03 2d 3e 1f 30 10 e6 23 32 07 40 27 32 06 22
>0298f8	0a 00 07 53 20 43 20 52 4b 46 00 00 28 00 09 03
>029908	2d 3e 21 30 0c 00 08 53 20 43 20 52 4b 46 45 00
>029918	23 32 07 40 27 32 06 22 0a 00 07 20 43 20 52 4b
>029928	46 45 00 00 2a 00 0a 03 2d 3e 20 30 0c 00 08 53
>029938	20 43 20 52 4b 46 45 00 23 32 02 40 23 32 05 40
>029948	27 32 06 22 08 00 05 20 43 20 52 4b 00 00 24 00
>029958	0b 03 2d 3e 22 30 0e 00 0a 50 52 43 4d 41 4a 53
>029968	56 4e 4a 00 23 32 04 00 01 4e 27 32 06 22 09 40
>029978	00 00 12 00 0c 03 2d 3e 13 30 69 c6 27 32 06 22
>029988	c2 8e 00 00 12 00 0d 03 2d 3e 12 30 c2 8e 27 32
>029998	06 22 01 40 00 00 18 00 0e 03 2d 3e 14 30 08 00
>0299a8	05 49 20 5a 51 4d 27 32 06 22 05 40 00 00 1c 00
>0299b8	0f 03 2d 3e 15 30 08 00 05 34 37 33 30 32 23 32
>0299c8	08 40 27 32 06 22 c2 8e 00 00 1c 00 10 03 2d 3e
>0299d8	16 30 c2 8e 23 32 08 40 27 32 06 22 08 00 05 34
>0299e8	37 33 30 32 00 00 1e 00 11 03 2d 3e 1f 30 08 00
>0299f8	05 49 20 5a 51 4d 23 32 00 40 27 32 06 22 04 00
>029a08	00 00 00 00 1a 00 12 03 2d 3e 21 30 fd ed 17 e0
>029a18	23 32 00 40 27 32 06 22 04 00 00 00 00 00 22 00
>029a28	13 03 2d 3e 20 30 08 00 05 49 20 5a 51 4d 23 32
>029a38	03 40 23 32 01 40 27 32 06 22 04 00 01 5a 00 00
>029a48	20 00 14 03 2d 3e 22 30 08 00 05 4d 46 20 53 58
>029a58	23 32 06 00 03 4d 46 20 27 32 06 22 01 40 00 00
>029a68	14 00 15 03 2d 3e 13 30 0b 24 06 4d 27 32 06 22
>029a78	06 4d 00 00 16 00 16 03 2d 3e 12 30 0b 24 06 4d
>029a88	27 32 06 22 0b 24 01 40 00 00 14 00 17 03 2d 3e
>029a98	14 30 2e ed 89 e1 27 32 06 22 06 40 00 00 22 00
>029aa8	18 03 2d 3e 15 30 0c 00 09 2d 31 31 31 32 30 31
>029ab8	31 31 23 32 03 40 27 32 06 22 0b 24 06 4d 00 00
>029ac8	22 00 19 03 2d 3e 16 30 0b 24 06 4d 23 32 03 40
>029ad8	27 32 06 22 0c 00 09 2d 31 31 31 32 30 31 31 31
>029ae8	00 00 20 00 1a 03 2d 3e 1f 30 0a 00 06 45 55 48
>029af8	4c 54 59 00 23 32 00 40 27 32 06 22 04 00 00 00
>029b08	00 00 20 00 1b 03 2d 3e 21 30 0a 00 06 45 55 48
>029b18	4c 54 59 00 23 32 00 40 27 32 06 22 04 00 00 00
>029b28	00 00 24 00 1c 03 2d 3e 20 30 0a 00 06 45 55 48
>029b38	4c 54 59 00 23 32 07 40 23 32 01 40 27 32 06 22
>029b48	04 00 00 00 00 00 22 00 1d 03 2d 3e 22 30 0a 00
>029b58	06 54 4f 55 55 52 47 00 23 32 06 00 02 55 55 00
>029b68	27 32 06 22 03 40 00 00 14 00 1e 03 2d 3e 13 30
>029b78	0d c0 27 32 06 22 01 10 9d 69 00 00 12 00 1f 03
>029b88	2d 3e 12 30 0d c0 27 32 06 22 01 40 00 00 1e 00
>029b98	20 03 2d 3e 14 30 0e 00 0a 58 49 55 20 4a 50 43
>029ba8	54 59 58 00 27 32 06 22 0a 40 00 00 20 00 21 03
>029bb8	2d 3e 15 30 0a 00 06 35 33 33 30 30 35 00 23 32
>029bc8	06 40 27 32 06 22 01 10 9d 69 00 00 20 00 22 03
>029bd8	2d 3e 16 30 01 10 9d 69 23 32 06 40 27 32 06 22
>029be8	0a 00 06 35 33 33 30 30 35 00 00 00 2c 00 23 03
>029bf8	2d 3e 1f 30 0e 00 0a 58 49 55 20 4a 50 43 54 59
>029c08	58 00 23 32 09 40 27 32 06 22 0c 00 09 58 49 55
>029c18	20 4a 50 43 54 59 00 00 2c 00 24 03 2d 3e 21 30
>029c28	0e 00 0a 58 49 55 20 4a 50 43 54 59 58 00 23 32
>029c38	09 40 27 32 06 22 0c 00 09 49 55 20 4a 50 43 54
>029c48	59 58 00 00 2a 00 25 03 2d 3e 20 30 0e 00 0a 58
>029c58	49 55 20 4a 50 43 54 59 58 00 23 32 06 40 23 32
>029c68	03 40 27 32 06 22 06 00 03 50 43 54 00 00 1c 00
>029c78	26 03 2d 3e 22 30 06 00 03 57 41 47 23 32 04 00
>029c88	01 57 27 32 06 22 01 40 00 00 12 00 27 03 2d 3e
>029c98	13 30 06 c0 27 32 06 22 d0 b9 00 00 14 00 28 03
>029ca8	2d 3e 12 30 06 c0 27 32 06 22 0b 24 01 40 00 00
>029cb8	16 00 29 03 2d 3e 14 30 b8 ed 52 ec 1c e0 27 32
>029cc8	06 22 09 40 00 00 22 00 2a 03 2d 3e 15 30 0c 00
>029cd8	09 2d 31 33 32 31 33 31 30 30 23 32 04 40 27 32
>029ce8	06 22 0b 24 d0 b9 00 00 22 00 2b 03 2d 3e 16 30
>029cf8	0b 24 d0 b9 23 32 04 40 27 32 06 22 0c 00 09 2d
>029d08	31 33 32 31 33 31 30 30 00 00 24 00 2c 03 2d 3e
>029d18	1f 30 b8 ed 52 ec 1c e0 23 32 08 40 27 32 06 22
>029d28	0c 00 08 4b 4d 52 5a 57 5a 20 58 00 00 00 2a 00
>029d38	2d 03 2d 3e 21 30 0c 00 09 4b 4d 52 5a 57 5a 20
>029d48	58 49 23 32 08 40 27 32 06 22 0c 00 08 4d 52 5a
>029d58	57 5a 20 58 49 00 00 00 26 00 2e 03 2d 3e 20 30
>029d68	0c 00 09 4b 4d 52 5a 57 5a 20 58 49 23 32 06 40
>029d78	23 32 00 40 27 32 06 22 04 00 00 00 00 00 24 00
>029d88	2f 03 2d 3e 22 30 0c 00 08 4a 49 56 54 46 41 48
>029d98	4a 00 23 32 06 00 03 54 46 41 27 32 06 22 04 40
>029da8	00 00 18 00 30 03 2d 3e 13 30 0b 24 01 10 57 50
>029db8	27 32 06 22 01 10 57 50 00 00 18 00 31 03 2d 3e
>029dc8	12 30 05 ce d4 c9 10 c0 27 32 06 22 0b 24 01 40
>029dd8	00 00 1a 00 32 03 2d 3e 14 30 0a 00 07 54 55 50
>029de8	58 42 45 59 27 32 06 22 07 40 00 00 20 00 33 03
>029df8	2d 3e 15 30 08 00 05 2d 41 45 33 36 23 32 0f 40
>029e08	27 32 06 22 0b 24 01 10 57 50 00 00 20 00 34 03
>029e18	2d 3e 16 30 0b 24 01 10 57 50 23 32 0f 40 27 32
>029e28	06 22 08 00 05 2d 61 65 33 36 00 00 24 00 35 03
>029e38	2d 3e 1f 30 0a 00 07 54 55 50 58 42 45 59 23 32
>029e48	04 40 27 32 06 22 08 00 04 54 55 50 58 00 00 00
>029e58	24 00 36 03 2d 3e 21 30 0a 00 07 54 55 50 58 42
>029e68	45 59 23 32 04 40 27 32 06 22 08 00 04 58 42 45
>029e78	59 00 00 00 28 00 37 03 2d 3e 20 30 0a 00 07 54
>029e88	55 50 58 42 45 59 23 32 04 40 23 32 04 40 27 32
>029e98	06 22 08 00 04 58 42 45 59 00 00 00 24 00 38 03
>029ea8	2d 3e 22 30 0c 00 09 43 53 51 47 4f 59 41 47 51
>029eb8	23 32 06 00 02 51 47 00 27 32 06 22 03 40 00 00
>029ec8	16 00 39 03 2d 3e c8 cc 2e cb 1a c0 06 22 0b 24
>029ed8	02 10 cc 67 00 00 16 00 3a 03 2d 3e a4 cd f9 c8
>029ee8	15 c0 06 22 0b 24 01 10 9c 55 00 00 10 00 3b 03
>029ef8	2d 3e e7 c5 06 22 05 10 28 b3 00 00 12 00 3c 03
>029f08	2d 3e 3e ce 08 c0 06 22 05 10 ec 58 00 00 12 00
>029f18	3d 03 2d 3e e5 c5 06 22 0b 24 04 10 46 97 00 00
>029f28	0e 00 3e 03 2d 3e 61 c6 06 22 7c 40 00 00 10 00
>029f38	3f 03 2d 3e 0d c0 06 22 01 10 9d 69 00 00 12 00
>029f48	40 03 2d 3e 2f c5 06 22 0b 24 04 10 9c 9b 00 00
>029f58	14 00 41 03 2d 3e 06 ce 54 c9 1a c0 06 22 03 10
>029f68	37 7a 00 00 12 00 42 03 2d 3e f4 cc 04 c0 06 22
>029f78	0b 24 91 40 00 00 10 00 43 03 2d 3e 06 c0 06 22
>029f88	0b 24 d0 b9 00 00 12 00 44 03 2d 3e 6d ce 1a c0
>029f98	06 22 02 10 fb 7a 00 00 12 00 45 03 2d 3e 11 c0
>029fa8	06 22 0b 24 02 10 3b 53 00 00 12 00 46 03 2d 3e
>029fb8	0b c0 06 22 0b 24 04 10 1d 74 00 00 14 00 47 03
>029fc8	2d 3e d5 cc 35 c8 09 c0 06 22 0b 24 06 4d 00 00
>029fd8	12 00 48 03 2d 3e f8 cc 11 c1 06 22 04 10 45 96
>029fe8	00 00 12 00 49 03 2d 3e a7 c5 06 22 0b 24 01 10
>029ff8	af ad 00 00 10 00 4a 03 2d 3e 6b ce 45 c0 06 22
>02a008	92 40 00 00 0e 00 4b 03 2d 3e 29 c5 06 22 93 4c
>02a018	00 00 12 00 4c 03 2d 3e 3e ce 06 c0 06 22 01 10
>02a028	ab 67 00 00 10 00 4d 03 2d 3e 12 c0 06 22 02 10
>02a038	d4 94 00 00 16 00 4e 03 2d 3e 05 ce d4 c9 10 c0
>02a048	06 22 0b 24 01 10 57 50 00 00 14 00 4f 03 2d 3e
>02a058	29 cd 3d c3 06 22 0b 24 01 10 74 60 00 00 10 00
>02a068	50 03 2d 3e 15 c0 06 22 0b 24 9e 40 00 00 12 00
>02a078	51 03 2d 3e e3 cd 07 c0 06 22 02 10 ef a1 00 00
>02a088	12 00 52 03 2d 3e 5a ce 4d c1 06 22 04 10 51 83
>02a098	00 00 12 00 53 03 2d 3e 67 c6 06 22 0b 24 03 10
>02a0a8	52 85 00 00 12 00 54 03 2d 3e 6c c6 06 22 0b 24
>02a0b8	01 10 42 63 00 00 12 00 55 03 2d 3e 28 ce d6 c0
>02a0c8	06 22 04 10 a0 7d 00 00 12 00 56 03 2d 3e f4 c4
>02a0d8	06 22 0b 24 01 10 42 56 00 00 12 00 57 03 2d 3e
>02a0e8	b9 c5 06 22 0b 24 04 10 8d 4f 00 00 16 00 58 03
>02a0f8	2d 3e 5b cd 4e ca 1b c0 06 22 0b 24 02 10 0e 86
>02a108	00 00 14 00 59 03 2d 3e c1 cc 62 c5 06 22 0b 24
>02a118	03 10 ad 9f 00 00 14 00 5a 03 2d 3e d1 cd 5a ce
>02a128	15 c0 06 22 03 10 c2 60 00 00 0e 00 5b 03 2d 3e
>02a138	69 c6 06 22 c2 8e 00 00 10 00 5c 03 2d 3e 0a c0
>02a148	06 22 0b 24 d2 65 00 00 10 00 5d 03 2d 3e 0e c0
>02a158	06 22 05 10 0c 85 00 00 12 00 5e 03 2d 3e a3 c5
>02a168	06 22 0b 24 04 10 c0 4c 00 00 10 00 5f 03 2d 3e
>02a178	5f c6 06 22 0b 24 6b 40 00 00 14 00 60 03 2d 3e
>02a188	59 ce e1 c1 06 22 0b 24 01 10 9b 4d 00 00 16 00
>02a198	61 03 2d 3e fd ed 17 e0 06 22 08 00 05 49 20 5a
>02a1a8	51 4d 00 00 16 00 62 03 2d 3e 01 e0 06 22 0a 00
>02a1b8	07 53 20 20 59 45 42 58 00 00 14 00 63 03 2d 3e
>02a1c8	60 ed 83 e2 06 22 06 00 03 41 45 49 00 00 1c 00
>02a1d8	64 03 2d 3e d4 ec 40 e2 06 22 0e 00 0a 58 49 55
>02a1e8	20 4a 50 43 54 59 58 00 00 00 1a 00 65 03 2d 3e
>02a1f8	d8 ec 06 e0 06 22 0c 00 09 43 4e 42 49 20 56 52
>02a208	5a 53 00 00 14 00 66 03 2d 3e ba e5 06 22 08 00
>02a218	05 4d 46 20 53 58 00 00 1a 00 67 03 2d 3e 65 e6
>02a228	06 22 0e 00 0a 58 42 4b 20 57 4b 20 52 49 52 00
>02a238	00 00 14 00 68 03 2d 3e 2b ed 0e e2 06 22 06 00
>02a248	03 57 41 47 00 00 1c 00 69 03 2d 3e b1 ed b9 e0
>02a258	06 22 0e 00 0a 56 44 43 55 56 59 20 59 45 44 00
>02a268	00 00 16 00 6a 03 2d 3e cf ed 62 e0 06 22 08 00
>02a278	05 55 20 56 41 49 00 00 18 00 6b 03 2d 3e 10 e6
>02a288	06 22 0c 00 08 53 20 43 20 52 4b 46 45 00 00 00
>02a298	14 00 6c 03 2d 3e b7 ed 19 e0 06 22 06 00 02 48
>02a2a8	45 00 00 00 1c 00 6d 03 2d 3e b8 ed 52 ec 1c e0
>02a2b8	06 22 0c 00 09 4b 4d 52 5a 57 5a 20 58 49 00 00
>02a2c8	10 00 6e 03 2d 3e 19 e0 06 22 04 00 00 00 00 00
>02a2d8	1a 00 6f 03 2d 3e 03 e0 06 22 0e 00 0a 4f 20 4b
>02a2e8	4d 59 20 51 59 4c 41 00 00 00 12 00 70 03 2d 3e
>02a2f8	06 ee 0e e0 06 22 04 00 00 00 00 00 18 00 71 03
>02a308	2d 3e 0b e0 06 22 0c 00 09 45 43 42 57 56 4b 4b
>02a318	48 43 00 00 1c 00 72 03 2d 3e 69 ee c1 e3 06 22
>02a328	0e 00 0b 56 20 59 50 4f 58 4f 20 20 59 46 00 00
>02a338	12 00 73 03 2d 3e 1a e0 06 22 06 00 03 4a 20 52
>02a348	00 00 14 00 74 03 2d 3e 5c ed 5f e2 06 22 06 00
>02a358	02 41 54 00 00 00 1e 00 75 03 2d 3e e4 ed 53 ed
>02a368	01 e0 06 22 0e 00 0a 4f 57 4b 57 20 20 42 47 47
>02a378	42 00 00 00 18 00 76 03 2d 3e 18 e0 06 22 0c 00
>02a388	09 4d 50 4d 4a 20 45 48 43 48 00 00 1a 00 77 03
>02a398	2d 3e d6 ed d6 e4 06 22 0c 00 08 58 47 51 20 20
>02a3a8	53 57 50 00 00 00 12 00 78 03 2d 3e 4f ed 16 e4
>02a3b8	06 22 04 00 00 00 00 00 18 00 79 03 2d 3e 5b ed
>02a3c8	01 e0 06 22 0a 00 06 44 20 4f 58 58 44 00 00 00
>02a3d8	12 00 7a 03 2d 3e 56 ed 1c e1 06 22 04 00 01 58
>02a3e8	00 00 1a 00 7b 03 2d 3e 2a ee 6b e6 06 22 0c 00
>02a3f8	08 4b 20 41 52 20 58 4c 49 00 00 00 12 00 7c 03
>02a408	2d 3e df ed dd e4 06 22 04 00 01 54 00 00 1c 00
>02a418	7d 03 2d 3e 80 ed 72 eb 0f e0 06 22 0c 00 08 4a
>02a428	49 56 54 46 41 48 4a 00 00 00 1a 00 7e 03 2d 3e
>02a438	2c ed 08 e0 06 22 0c 00 09 43 53 51 47 4f 59 41
>02a448	47 51 00 00 18 00 7f 03 2d 3e 2e ed 89 e1 06 22
>02a458	0a 00 06 45 55 48 4c 54 59 00 00 00 12 00 80 03
>02a468	2d 3e 56 ee 06 e0 06 22 04 00 00 00 00 00 1a 00
>02a478	81 03 2d 3e 57 e5 06 22 0e 00 0a 4d 59 48 20 48
>02a488	20 50 45 20 51 00 00 00 1c 00 82 03 2d 3e cf ed
>02a498	49 e9 0f e0 06 22 0c 00 09 4f 20 55 56 48 4b 20
>02a4a8	43 5a 00 00 14 00 83 03 2d 3e 2f ed 07 e0 06 22
>02a4b8	06 00 03 4f 57 4e 00 00 14 00 84 03 2d 3e 13 ee
>02a4c8	1d ee 08 e0 06 22 04 00 00 00 00 00 18 00 85 03
>02a4d8	2d 3e 48 ed 44 e1 06 22 0a 00 06 46 51 20 4f 55
>02a4e8	5a 00 00 00 14 00 86 03 2d 3e d8 ec 44 e8 21 e0
>02a4f8	06 22 04 00 01 4e 00 00 16 00 87 03 2d 3e 89 ed
>02a508	21 e0 06 22 08 00 05 58 49 45 5a 5a 00 00 12 00
>02a518	88 03 2d 3e 0d e6 06 22 06 00 02 52 47 00 00 00
>02a528	3a 00 89 03 2d 3e ff dd 74 d4 00 40 27 32 06 22
>02a538	02 10 ff b9 25 32 2d 3e ff dd 74 d4 01 40 27 32
>02a548	06 22 03 10 f4 a8 25 32 2d 3e ff dd 74 d4 02 40
>02a558	27 32 06 22 05 10 65 b7 00 00 4c 00 8a 03 2d 3e
>02a568	59 de 26 d2 00 40 27 32 06 22 0b 24 03 10 70 43
>02a578	25 32 2d 3e 59 de 26 d2 01 40 27 32 06 22 05 10
>02a588	5b 4a 25 32 2d 3e 59 de 26 d2 02 40 27 32 06 22
>02a598	0b 24 26 40 25 32 2d 3e 59 de 26 d2 03 40 27 32
>02a5a8	06 22 a7 40 00 00 64 00 8b 03 2d 3e 33 d6 00 40
>02a5b8	27 32 06 22 0b 24 01 10 3b 5d 25 32 2d 3e 33 d6
>02a5c8	01 40 27 32 06 22 0b 24 02 40 25 32 2d 3e 33 d6
>02a5d8	02 40 27 32 06 22 04 10 a4 6f 25 32 2d 3e 33 d6
>02a5e8	03 40 27 32 06 22 05 10 b3 a8 25 32 2d 3e 33 d6
>02a5f8	04 40 27 32 06 22 61 40 25 32 2d 3e 33 d6 05 40
>02a608	27 32 06 22 03 10 51 5b 00 00 46 00 8c 03 2d 3e
>02a618	16 d0 00 40 27 32 06 22 03 10 fd a7 25 32 2d 3e
>02a628	16 d0 01 40 27 32 06 22 05 10 40 85 25 32 2d 3e
>02a638	16 d0 02 40 27 32 06 22 0b 24 05 10 5b a3 25 32
>02a648	2d 3e 16 d0 03 40 27 32 06 22 04 10 5e 9c 00 00
>02a658	34 00 8d 03 2d 3e 0c de 0d d0 00 40 27 32 06 22
>02a668	a4 40 25 32 2d 3e 0c de 0d d0 01 40 27 32 06 22
>02a678	aa 40 25 32 2d 3e 0c de 0d d0 02 40 27 32 06 22
>02a688	9e 40 00 00 30 00 8e 03 2d 3e 0a d6 00 40 27 32
>02a698	06 22 41 40 25 32 2d 3e 0a d6 01 40 27 32 06 22
>02a6a8	a1 40 25 32 2d 3e 0a d6 02 40 27 32 06 22 05 10
>02a6b8	38 58 00 00 56 00 8f 03 2d 3e 02 f0 00 40 27 32
>02a6c8	06 22 04 00 00 00 25 32 2d 3e 02 f0 01 40 27 32
>02a6d8	06 22 06 00 03 44 4b 5a 25 32 2d 3e 02 f0 02 40
>02a6e8	27 32 06 22 0e 00 0b 44 54 47 4e 4c 20 20 46 55
>02a6f8	20 52 25 32 2d 3e 02 f0 03 40 27 32 06 22 0a 00
>02a708	06 4a 20 50 4b 4d 57 00 00 00 84 00 90 03 2d 3e
>02a718	81 fd 3d fd 11 f0 00 40 27 32 06 22 04 00 01 51
>02a728	25 32 2d 3e 81 fd 3d fd 11 f0 01 40 27 32 06 22
>02a738	0c 00 08 49 4c 5a 50 44 20 48 49 00 25 32 2d 3e
>02a748	81 fd 3d fd 11 f0 02 40 27 32 06 22 08 00 04 58
>02a758	4e 4b 4d 00 25 32 2d 3e 81 fd 3d fd 11 f0 03 40
>02a768	27 32 06 22 0a 00 07 54 55 50 58 42 45 59 25 32
>02a778	2d 3e 81 fd 3d fd 11 f0 04 40 27 32 06 22 0e 00
>02a788	0a 54 4c 53 47 54 4a 20 47 54 4a 00 00 00 70 00
>02a798	91 03 2d 3e c8 fc 5c f6 00 40 27 32 06 22 0a 00
>02a7a8	06 54 4f 55 55 52 47 00 25 32 2d 3e c8 fc 5c f6
>02a7b8	01 40 27 32 06 22 0a 00 06 52 44 59 46 4b 44 00
>02a7c8	25 32 2d 3e c8 fc 5c f6 02 40 27 32 06 22 06 00
>02a7d8	02 4a 43 00 25 32 2d 3e c8 fc 5c f6 03 40 27 32
>02a7e8	06 22 04 00 00 00 25 32 2d 3e c8 fc 5c f6 04 40
>02a7f8	27 32 06 22 08 00 05 58 53 52 44 44 00 00 9e 00
>02a808	92 03 2d 3e 2a fd 1b f6 00 40 27 32 06 22 08 00
>02a818	04 48 41 20 4d 00 25 32 2d 3e 2a fd 1b f6 01 40
>02a828	27 32 06 22 0c 00 08 48 44 55 55 4a 20 20 53 00
>02a838	25 32 2d 3e 2a fd 1b f6 02 40 27 32 06 22 0e 00
>02a848	0b 54 46 20 4b 4c 4a 20 56 49 4f 52 25 32 2d 3e
>02a858	2a fd 1b f6 03 40 27 32 06 22 04 00 01 45 25 32
>02a868	2d 3e 2a fd 1b f6 04 40 27 32 06 22 06 00 03 44
>02a878	55 43 25 32 2d 3e 2a fd 1b f6 05 40 27 32 06 22
>02a888	08 00 05 41 59 20 42 4a 25 32 2d 3e 2a fd 1b f6
>02a898	06 40 27 32 06 22 04 00 00 00 00 00 76 00 93 03
>02a8a8	2d 3e a1 fd 01 f0 00 40 27 32 06 22 04 00 00 00
>02a8b8	25 32 2d 3e a1 fd 01 f0 01 40 27 32 06 22 08 00
>02a8c8	05 47 5a 5a 4d 4c 25 32 2d 3e a1 fd 01 f0 02 40
>02a8d8	27 32 06 22 0e 00 0a 50 52 43 4d 41 4a 53 56 4e
>02a8e8	4a 00 25 32 2d 3e a1 fd 01 f0 03 40 27 32 06 22
>02a8f8	04 00 01 49 25 32 2d 3e a1 fd 01 f0 04 40 27 32
>02a908	06 22 0e 00 0a 4e 4a 43 55 20 53 59 53 4f 56 00
>02a918	00 00 70 00 94 03 2d 3e 5f f5 00 40 27 32 06 22
>02a928	0c 00 08 49 46 4a 4f 47 48 4b 4c 00 25 32 2d 3e
>02a938	5f f5 01 40 27 32 06 22 06 00 03 55 4e 4b 25 32
>02a948	2d 3e 5f f5 02 40 27 32 06 22 04 00 01 57 25 32
>02a958	2d 3e 5f f5 03 40 27 32 06 22 0e 00 0a 41 51 4e
>02a968	4a 20 59 4e 42 59 4d 00 25 32 2d 3e 5f f5 04 40
>02a978	27 32 06 22 0c 00 08 56 54 4e 20 58 20 46 49 00
>02a988	00 00 14 00 95 03 2d 3e 18 30 04 00 01 20 27 32
>02a998	06 22 20 40 00 00 14 00 96 03 2d 3e 17 30 20 40
>02a9a8	27 32 06 22 04 00 01 20 00 00 1e 00 97 03 2d 3e
>02a9b8	1e 30 08 00 05 37 59 59 67 30 27 32 06 22 08 00
>02a9c8	05 37 59 59 47 30 00 00 1e 00 98 03 2d 3e 1d 30
>02a9d8	08 00 05 37 59 59 67 30 27 32 06 22 08 00 05 37
>02a9e8	79 79 67 30 00 00 14 00 99 03 2d 3e 18 30 04 00
>02a9f8	01 25 27 32 06 22 25 40 00 00 14 00 9a 03 2d 3e
>02aa08	17 30 25 40 27 32 06 22 04 00 01 25 00 00 1e 00
>02aa18	9b 03 2d 3e 1e 30 08 00 04 6c 6f 4e 4e 00 27 32
>02aa28	06 22 08 00 04 4c 4f 4e 4e 00 00 00 1e 00 9c 03
>02aa38	2d 3e 1d 30 08 00 04 6c 6f 4e 4e 00 27 32 06 22
>02aa48	08 00 04 6c 6f 6e 6e 00 00 00 14 00 9d 03 2d 3e
>02aa58	18 30 04 00 01 78 27 32 06 22 78 40 00 00 14 00
>02aa68	9e 03 2d 3e 17 30 78 40 27 32 06 22 04 00 01 78
>02aa78	00 00 1e 00 9f 03 2d 3e 1e 30 08 00 05 7a 7c 7a
>02aa88	73 57 27 32 06 22 08 00 05 5a 7c 5a 53 57 00 00
>02aa98	1e 00 a0 03 2d 3e 1d 30 08 00 05 7a 7c 7a 73 57
>02aaa8	27 32 06 22 08 00 05 7a 7c 7a 73 77 00 00 14 00
>02aab8	a1 03 2d 3e 18 30 04 00 01 54 27 32 06 22 54 40
>02aac8	00 00 14 00 a2 03 2d 3e 17 30 54 40 27 32 06 22
>02aad8	04 00 01 54 00 00 22 00 a3 03 2d 3e 1e 30 0a 00
>02aae8	07 45 62 30 3a 54 49 52 27 32 06 22 0a 00 07 45
>02aaf8	42 30 3a 54 49 52 00 00 22 00 a4 03 2d 3e 1d 30
>02ab08	0a 00 07 45 62 30 3a 54 49 52 27 32 06 22 0a 00
>02ab18	07 65 62 30 3a 74 69 72 00 00 14 00 a5 03 2d 3e
>02ab28	18 30 04 00 01 67 27 32 06 22 67 40 00 00 14 00
>02ab38	a6 03 2d 3e 17 30 67 40 27 32 06 22 04 00 01 67
>02ab48	00 00 22 00 a7 03 2d 3e 1e 30 0a 00 06 4a 32 3a
>02ab58	77 41 4a 00 27 32 06 22 0a 00 06 4a 32 3a 57 41
>02ab68	4a 00 00 00 22 00 a8 03 2d 3e 1d 30 0a 00 06 4a
>02ab78	32 3a 77 41 4a 00 27 32 06 22 0a 00 06 6a 32 3a
>02ab88	77 61 6a 00 00 00 14 00 a9 03 2d 3e 18 30 04 00
>02ab98	01 67 27 32 06 22 67 40 00 00 14 00 aa 03 2d 3e
>02aba8	17 30 67 40 27 32 06 22 04 00 01 67 00 00 1e 00
>02abb8	ab 03 2d 3e 1e 30 08 00 04 7d 45 46 6c 00 27 32
>02abc8	06 22 08 00 04 7d 45 46 4c 00 00 00 1e 00 ac 03
>02abd8	2d 3e 1d 30 08 00 04 7d 45 46 6c 00 27 32 06 22
>02abe8	08 00 04 7d 65 66 6c 00 00 00 14 00 ad 03 2d 3e
>02abf8	18 30 04 00 01 65 27 32 06 22 65 40 00 00 14 00
>02ac08	ae 03 2d 3e 17 30 65 40 27 32 06 22 04 00 01 65
>02ac18	00 00 22 00 af 03 2d 3e 1e 30 0a 00 06 49 75 3a
>02ac28	5e 76 39 00 27 32 06 22 0a 00 06 49 55 3a 5e 56
>02ac38	39 00 00 00 22 00 b0 03 2d 3e 1d 30 0a 00 06 49
>02ac48	75 3a 5e 76 39 00 27 32 06 22 0a 00 06 69 75 3a
>02ac58	5e 76 39 00 00 00 14 00 b1 03 2d 3e 18 30 04 00
>02ac68	01 69 27 32 06 22 69 40 00 00 14 00 b2 03 2d 3e
>02ac78	17 30 69 40 27 32 06 22 04 00 01 69 00 00 26 00
>02ac88	b3 03 2d 3e 1e 30 0c 00 08 66 78 65 6c 4e 52 4a
>02ac98	7b 00 27 32 06 22 0c 00 08 46 58 45 4c 4e 52 4a
>02aca8	7b 00 00 00 26 00 b4 03 2d 3e 1d 30 0c 00 08 66
>02acb8	78 65 6c 4e 52 4a 7b 00 27 32 06 22 0c 00 08 66
>02acc8	78 65 6c 6e 72 6a 7b 00 00 00 14 00 b5 03 2d 3e
>02acd8	18 30 04 00 01 57 27 32 06 22 57 40 00 00 14 00
>02ace8	b6 03 2d 3e 17 30 57 40 27 32 06 22 04 00 01 57
>02acf8	00 00 26 00 b7 03 2d 3e 1e 30 0c 00 08 42 3a 4b
>02ad08	3a 41 73 55 4a 00 27 32 06 22 0c 00 08 42 3a 4b
>02ad18	3a 41 53 55 4a 00 00 00 26 00 b8 03 2d 3e 1d 30
>02ad28	0c 00 08 42 3a 4b 3a 41 73 55 4a 00 27 32 06 22
>02ad38	0c 00 08 62 3a 6b 3a 61 73 75 6a 00 00 00 14 00
>02ad48	b9 03 2d 3e 18 30 04 00 01 3c 27 32 06 22 3c 40
>02ad58	00 00 14 00 ba 03 2d 3e 17 30 3c 40 27 32 06 22
>02ad68	04 00 01 3c 00 00 1a 00 bb 03 2d 3e 1e 30 06 00
>02ad78	03 41 55 3d 27 32 06 22 06 00 03 41 55 3d 00 00
>02ad88	1a 00 bc 03 2d 3e 1d 30 06 00 03 41 55 3d 27 32
>02ad98	06 22 06 00 03 61 75 3d 00 00 42 00 bd 03 2d 3e
>02ada8	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02adb8	23 32 02 40 27 32 06 22 22 00 1f 31 31 31 31 31
>02adc8	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31
>02add8	31 31 31 31 31 31 31 31 31 31 00 00 38 00 be 03
>02ade8	2d 3e 16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10
>02adf8	ff bf 23 32 03 40 27 32 06 22 18 00 14 31 32 31
>02ae08	31 32 31 32 32 32 31 32 31 31 30 32 30 32 31 30
>02ae18	31 00 00 00 34 00 bf 03 2d 3e 16 30 ff bf 0c 26
>02ae28	02 10 00 40 0a 24 01 10 ff bf 23 32 04 40 27 32
>02ae38	06 22 14 00 10 31 33 33 33 33 33 33 33 33 33 33
>02ae48	33 33 33 33 33 00 00 00 32 00 c0 03 2d 3e 16 30
>02ae58	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 23 32
>02ae68	05 40 27 32 06 22 12 00 0e 31 33 33 34 34 32 32
>02ae78	33 34 33 34 30 34 32 00 00 00 30 00 c1 03 2d 3e
>02ae88	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02ae98	23 32 06 40 27 32 06 22 10 00 0c 35 35 33 30 33
>02aea8	32 30 30 35 35 33 31 00 00 00 30 00 c2 03 2d 3e
>02aeb8	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02aec8	23 32 07 40 27 32 06 22 10 00 0c 31 30 34 31 33
>02aed8	34 32 31 31 31 36 31 00 00 00 2e 00 c3 03 2d 3e
>02aee8	16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf
>02aef8	23 32 08 40 27 32 06 22 0e 00 0b 31 37 37 37 37
>02af08	37 37 37 37 37 37 00 00 2e 00 c4 03 2d 3e 16 30
>02af18	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 23 32
>02af28	09 40 27 32 06 22 0e 00 0a 35 34 37 38 37 37 33
>02af38	36 37 31 00 00 00 2e 00 c5 03 2d 3e 16 30 ff bf
>02af48	0c 26 02 10 00 40 0a 24 01 10 ff bf 23 32 0a 40
>02af58	27 32 06 22 0e 00 0a 32 31 34 37 34 38 33 36 34
>02af68	37 00 00 00 2c 00 c6 03 2d 3e 16 30 ff bf 0c 26
>02af78	02 10 00 40 0a 24 01 10 ff bf 23 32 0b 40 27 32
>02af88	06 22 0c 00 09 61 30 32 32 32 30 32 38 31 00 00
>02af98	2c 00 c7 03 2d 3e 16 30 ff bf 0c 26 02 10 00 40
>02afa8	0a 24 01 10 ff bf 23 32 0c 40 27 32 06 22 0c 00
>02afb8	09 34 62 62 32 33 30 38 61 37 00 00 2c 00 c8 03
>02afc8	2d 3e 16 30 ff bf 0c 26 02 10 00 40 0a 24 01 10
>02afd8	ff bf 23 32 0d 40 27 32 06 22 0c 00 09 32 38 32
>02afe8	62 61 34 61 61 61 00 00 2c 00 c9 03 2d 3e 16 30
>02aff8	ff bf 0c 26 02 10 00 40 0a 24 01 10 ff bf 23 32
>02b008	0e 40 27 32 06 22 0c 00 09 31 36 35 32 63 61 39
>02b018	33 31 00 00 2c 00 ca 03 2d 3e 16 30 ff bf 0c 26
>02b028	02 10 00 40 0a 24 01 10 ff bf 23 32 0f 40 27 32
>02b038	06 22 0c 00 08 63 38 37 65 36 36 62 37 00 00 00
>02b048	2c 00 cb 03 2d 3e 16 30 ff bf 0c 26 02 10 00 40
>02b058	0a 24 01 10 ff bf 23 32 10 40 27 32 06 22 0c 00
>02b068	08 37 66 66 66 66 66 66 66 00 00 00 00 00 ee ee
>02b078	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>02b088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 246 times (3936 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
