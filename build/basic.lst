
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sun Jun 16 12:32:20 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f4	ldx #$f4fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c f5 18 01	jmp $0118f5			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	12 08					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	22 08					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	32 08					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	76 08					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	dd 08					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	42 08					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	bf 08					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	a1 08					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	5c 08					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	5c 07					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	dd 07					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e9 09					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	66 09					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	dd 09					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ee 07					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	00 08					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	77 0a					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	57 0a					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	33 0a					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	1d 0a					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	91 0c					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	b1 0d					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b1 0a					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e9 0a					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	1d 0b					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	45 0c					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	5f 0c					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	76 0c					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	1a 0f					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	d8 0e					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	59 0b					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	f0 0b					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	82 0b					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	71 0e					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8e 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8e 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8e 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8e 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8e 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8e 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8e 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8e 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	a0 18					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	5c 0f					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	81 18					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	70 16					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	72 16					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	dd 16					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	d9 16					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	38 17					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	ac 17					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	9c 18					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	fc 11					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	fe 14					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	5d 15					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	79 15					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	bb 14					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	af 12					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	3b 18					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	53 18					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	67 18					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	d7 0f					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	b2 18					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	ab 15					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	09 16					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	48 12					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	84 13					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	40 16					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	c2 15					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8e 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	dd 12					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	ff 13					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=608					TOKWorkSpace = EXSBase+EXSStackElements*3*2	; tokenised text goes here.
=1278					CPUStack = EXSBase+$300-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 31 02	brl $01049f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 9f 04	jmp $01049f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0b 05	jsr $01050b			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 89 04	ldx #$0489			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0b 05	jsr $01050b			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 cc 0d	jsr $010dcc			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 65 f0	jsr $01f065			jsr 	HWNewLine
.010487	80 fe		bra $010487	_EH1:	bra 	_EH1
>010489	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048e					IllegalToken:
.01048e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010491	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010499	54 6f 6b 65 6e 00
.01049f					SyntaxError:
.01049f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104aa	72 72 6f 72 00
.0104af					ExpectToken:
.0104af	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b1	d0 05		bne $0104b8			bne 	_CTKError					; error if not
.0104b3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b5	e6 06		inc $06				inc 	DCodePtr
.0104b7	60		rts				rts
.0104b8					_CTKError:
.0104b8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c3	74 6f 6b 65 6e 00
.0104c9					ExpectRightBracket:
.0104c9	48		pha				pha
.0104ca	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104cd	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d0	68		pla				pla
.0104d1	60		rts				rts
.0104d2					ExpectComma:
.0104d2	48		pha				pha
.0104d3	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d6	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d9	68		pla				pla
.0104da	60		rts				rts
.0104db					CheckBothNumeric:
.0104db	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104dd	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104df	30 01		bmi $0104e2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e1	60		rts				rts
.0104e2					_CBNFail:
.0104e2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ed	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fb					ResetTypeInteger:
.0104fb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fd	29 ff 7f	and #$7fff			and 	#$7FFF
.010500	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010502	60		rts				rts
.010503					ResetTypeString:
.010503	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010505	09 00 80	ora #$8000			ora 	#$8000
.010508	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050a	60		rts				rts
.01050b					PrintROMMessage:
.01050b	48		pha				pha
.01050c	da		phx				phx
.01050d					_PRMLoop:
.01050d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010511	29 ff 00	and #$00ff			and 	#$00FF
.010514	f0 06		beq $01051c			beq 	_PRMExit
.010516	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.010519	e8		inx				inx
.01051a	80 f1		bra $01050d			bra 	_PRMLoop
.01051c					_PRMExit:
.01051c	fa		plx				plx
.01051d	68		pla				pla
.01051e	60		rts				rts
.01051f					PrintBASICString:
.01051f	48		pha				pha
.010520	da		phx				phx
.010521	5a		phy				phy
.010522	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010525	29 ff 00	and #$00ff			and 	#$00FF
.010528	f0 0b		beq $010535			beq 	_PBSExit 					; null string
.01052a	aa		tax				tax
.01052b					_PBSLoop:
.01052b	c8		iny				iny
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y
.01052f	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.010532	ca		dex				dex
.010533	d0 f6		bne $01052b			bne 	_PBSLoop
.010535					_PBSExit:
.010535	7a		ply				ply
.010536	fa		plx				plx
.010537	68		pla				pla
.010538	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010539					StringTempAllocate:
.010539	48		pha				pha
.01053a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01053c	d0 09		bne $010547			bne 	_STANoReset
.01053e	5a		phy				phy 								; reset the temp string pointer.
.01053f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010542	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010544	85 16		sta $16				sta 	DTempStringPointer
.010546	7a		ply				ply
.010547					_STANoReset:
.010547	68		pla				pla 								; get length.
.010548	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01054b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01054e	18		clc				clc 								; this adds one, for the length.
.01054f	65 16		adc $16				adc 	DTempStringPointer
.010551	85 16		sta $16				sta 	DTempStringPointer
.010553	48		pha				pha 								; save start address
.010554	a9 00 00	lda #$0000			lda 	#$0000
.010557	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010559	92 16		sta ($16)			sta		(DTempStringPointer)
.01055b	c2 20		rep #$20			rep 	#$20
.01055d	68		pla				pla 								; restore start address
.01055e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010560	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010562	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010564	60		rts				rts
.010565					StringWriteCharacter:
.010565	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010567	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010569	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01056b	1a		inc a				inc 	a
.01056c	92 18		sta ($18)			sta 	(DStartTempString)
.01056e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010570	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010572	60		rts				rts
.010573					StringCreateCopy:
.010573	a8		tay				tay 								; put pointer to string in Y
.010574	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010577	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01057a	f0 17		beq $010593			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01057c	da		phx				phx 								; save X and put the character count in X
.01057d	aa		tax				tax
.01057e					_SCCCopy:
.01057e	c8		iny				iny 								; advance and read (first time skips length)
.01057f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010581	b9 00 00	lda $0000,y			lda 	$0000,y
.010584	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010586	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010588	1a		inc a				inc 	a
.010589	92 18		sta ($18)			sta 	(DStartTempString)
.01058b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01058d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01058f	ca		dex				dex 								; do X times
.010590	d0 ec		bne $01057e			bne 	_SCCCopy
.010592	fa		plx				plx
.010593					_SCCExit:
.010593	60		rts				rts
.010594					StringMakeConcrete:
.010594	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010597	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010599	90 0f		bcc $0105aa			bcc 	_SMCExit
.01059b	85 08		sta $08				sta 	DTemp1 						; source
.01059d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01059f	29 ff 00	and #$00ff			and 	#$00FF
.0105a2	d0 07		bne $0105ab			bne 	_SMCNonZero 				; if not "" skip.
.0105a4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a7	18		clc				clc 								; this reference is used for all empty strings.
.0105a8	65 02		adc $02				adc 	DBaseAddress
.0105aa					_SMCExit:
.0105aa	60		rts				rts
.0105ab					_SMCNonZero:
.0105ab	48		pha				pha 								; save on stack.
.0105ac	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105af	18		clc				clc
.0105b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105b3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105b5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105ba	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105bc					_SMCLoop:
.0105bc	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105be	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105c0	88		dey				dey 								; Y+1 times.
.0105c1	10 f9		bpl $0105bc			bpl 	_SMCLoop
.0105c3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105c5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.0105c8					Tokenise:
.0105c8	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0105ca	84 0a		sty $0a				sty 	DTemp1+2
.0105cc	a9 60 02	lda #$0260			lda 	#TOKWorkSpace 				; reset workspace pointer.
.0105cf	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0105d1	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0105d4	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0105d7					_TOKCap:
.0105d7	c8		iny				iny 								; go to next
.0105d8	b7 08		lda [$08],y			lda 	[DTemp1],y
.0105da	29 ff 00	and #$00ff			and 	#$00FF
.0105dd	f0 22		beq $010601			beq 	_TOKEndCap
.0105df	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0105e2	d0 01		bne $0105e5			bne 	_TOKNotQuote
.0105e4	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0105e5					_TOKNotQuote:
.0105e5	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0105e8	90 ed		bcc $0105d7			bcc 	_TOKCap
.0105ea	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0105ed	b0 e8		bcs $0105d7			bcs 	_TOKCap
.0105ef	8a		txa				txa 								; check if in quotes
.0105f0	4a		lsr a				lsr 	a
.0105f1	b0 e4		bcs $0105d7			bcs 	_TOKCap
.0105f3	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0105f5	38		sec				sec
.0105f6	e9 20 00	sbc #$0020			sbc 	#32
.0105f9	e2 20		sep #$20			sep 	#$20
.0105fb	97 08		sta [$08],y			sta 	[DTemp1],y
.0105fd	c2 20		rep #$20			rep 	#$20
.0105ff	80 d6		bra $0105d7			bra 	_TOKCap
.010601					_TOKEndCap:
.010601	c6 08		dec $08				dec 	DTemp1
.010603					_TOKMainNext:
.010603	e6 08		inc $08				inc 	DTemp1
.010605					_TOKMainLoop:
.010605	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010607	29 ff 00	and #$00ff			and 	#$00FF
.01060a	c9 20 00	cmp #$0020			cmp 	#32
.01060d	90 1d		bcc $01062c			bcc 	_TOKExit 					; 0-31 exit.
.01060f	f0 f2		beq $010603			beq 	_TOKMainNext 				; 32 (space) skip.
.010611	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010614	f0 1d		beq $010633			beq 	_TOKString
.010616	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010619	90 1d		bcc $010638			bcc 	_TOKPunctuation
.01061b	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.01061e	90 42		bcc $010662			bcc 	_TOKNumber
.010620	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010623	90 13		bcc $010638			bcc 	_TOKPunctuation
.010625	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010628	90 3d		bcc $010667			bcc 	_TOKIdentifier
.01062a	80 0c		bra $010638			bra 	_TOKPunctuation 			; 91-   punctuation.
.01062c					_TOKExit:
.01062c	a9 00 00	lda #$0000			lda 	#$0000
.01062f	20 69 06	jsr $010669			jsr 	TOKWriteToken
.010632	60		rts				rts
.010633					_TOKString:
.010633	20 f3 06	jsr $0106f3			jsr 	TOKQuotedString
.010636	80 cd		bra $010605			bra 	_TOKMainLoop
.010638					_TOKPunctuation:
.010638	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01063b	20 5a 07	jsr $01075a			jsr 	TOKKeywordSearch
.01063e	b0 1d		bcs $01065d			bcs 	_TOKFoundPunctuation
.010640	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010643	20 5a 07	jsr $01075a			jsr 	TOKKeywordSearch
.010646	b0 15		bcs $01065d			bcs 	_TOKFoundPunctuation
.010648	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01064b	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010653	61 72 73 65 20 6c 69 6e 65 00
.01065d					_TOKFoundPunctuation:
.01065d	20 69 06	jsr $010669			jsr 	TOKWriteToken 				; output the token and go round again.
.010660	80 a3		bra $010605			bra 	_TOKMainLoop
.010662					_TOKNumber:
.010662	20 74 06	jsr $010674			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010665	80 9e		bra $010605			bra 	_TOKMainLoop
.010667					_TOKIdentifier:
.010667	80 fe		bra $010667			bra 	_TOKIdentifier
.010669					TOKWriteToken:
.010669	da		phx				phx
.01066a	a6 0c		ldx $0c				ldx 	DTemp2						; address in DirectPage to write to.
.01066c	95 00		sta $00,x			sta 	$00,x 						; save it.
.01066e	e8		inx				inx 								; bump pointer and write back
.01066f	e8		inx				inx
.010670	86 0c		stx $0c				stx 	DTemp2
.010672	fa		plx				plx
.010673	60		rts				rts
.010674					TOKInteger:
.010674	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010676	64 26		stz $26				stz 	DTemp3+2
.010678					_TOKINLoop:
.010678	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01067a	48		pha				pha
.01067b	a5 24		lda $24				lda 	DTemp3
.01067d	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01067f	26 26		rol $26				rol 	DTemp3+2
.010681	06 24		asl $24				asl 	DTemp3
.010683	26 26		rol $26				rol 	DTemp3+2
.010685	18		clc				clc
.010686	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010688	85 24		sta $24				sta 	DTemp3
.01068a	68		pla				pla
.01068b	65 26		adc $26				adc 	DTemp3+2
.01068d	85 26		sta $26				sta 	DTemp3+2
.01068f	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010691	26 26		rol $26				rol 	DTemp3+2
.010693	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010695	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010698	d0 44		bne $0106de			bne 	_TOKINSize
.01069a	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01069c	29 0f 00	and #$000f			and 	#15
.01069f	18		clc				clc
.0106a0	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0106a2	85 24		sta $24				sta 	DTemp3
.0106a4	90 02		bcc $0106a8			bcc 	_TOKINNoCarry
.0106a6	e6 26		inc $26				inc 	DTemp3+2
.0106a8					_TOKINNoCarry:
.0106a8	e6 08		inc $08				inc 	DTemp1 						; look at next
.0106aa	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0106ac	29 ff 00	and #$00ff			and 	#$00FF
.0106af	c9 30 00	cmp #$0030			cmp 	#"0"
.0106b2	90 05		bcc $0106b9			bcc 	_TOKINGotInteger
.0106b4	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0106b7	90 bf		bcc $010678			bcc		_TOKINLoop
.0106b9					_TOKINGotInteger:
.0106b9	a5 24		lda $24				lda 	DTemp3 						; lower word
.0106bb	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0106be	18		clc				clc
.0106bf	69 00 40	adc #$4000			adc 	#$4000
.0106c2	48		pha				pha 								; save it.
.0106c3	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0106c5	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0106c7	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0106c9	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0106cc	b0 10		bcs $0106de			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0106ce	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0106d1	f0 06		beq $0106d9			beq 	_TOKINNoShift 				; don't need constant shift.
.0106d3	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0106d6	20 69 06	jsr $010669			jsr 	TOKWriteToken
.0106d9					_TOKINNoShift:
.0106d9	68		pla				pla 								; get lower its token
.0106da	20 69 06	jsr $010669			jsr 	TOKWriteToken 				; output it
.0106dd	60		rts				rts
.0106de					_TOKINSize:
.0106de	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0106e1	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0106e9	74 6f 6f 20 6c 61 72 67 65 00
.0106f3					TOKQuotedString:
.0106f3	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0106f5	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0106f7	85 32		sta $32				sta 	DTemp4
.0106f9	a5 0a		lda $0a				lda 	DTemp1+2
.0106fb	85 34		sta $34				sta 	DTemp4+2
.0106fd					_TOKQFindSize:
.0106fd	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0106ff	e6 08		inc $08				inc 	DTemp1
.010701	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.010704	f0 3b		beq $010741			beq 	_TOQImbalance 				; end of line, and no quote found.
.010706	c9 22 00	cmp #$0022			cmp 	#34
.010709	d0 f2		bne $0106fd			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.01070b	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.01070d	38		sec				sec
.01070e	e5 32		sbc $32				sbc 	DTemp4
.010710	3a		dec a				dec 	a 							; one less character for closing quote
.010711	85 26		sta $26				sta 	DTemp3+2
.010713	18		clc				clc
.010714	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010717	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.01071a	20 69 06	jsr $010669			jsr 	TOKWriteToken
.01071d	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.01071f	20 69 06	jsr $010669			jsr 	TOKWriteToken 				; effectively a byte-write.
.010722	c6 0c		dec $0c				dec 	DTemp2
.010724	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010726	f0 0f		beq $010737			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010728					_TOKQWriteString:
.010728	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01072a	29 ff 00	and #$00ff			and 	#$00FF
.01072d	20 69 06	jsr $010669			jsr 	TOKWriteToken 				; effectively a byte-write.
.010730	c6 0c		dec $0c				dec 	DTemp2
.010732	e6 32		inc $32				inc 	DTemp4 						; advance character
.010734	ca		dex				dex 								; do X times
.010735	d0 f1		bne $010728			bne 	_TOKQWriteString
.010737					_TOKQWriteEnd:
.010737	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010739	29 01 00	and #$0001			and 	#1
.01073c	f0 02		beq $010740			beq 	_TOKQExit
.01073e	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010740					_TOKQExit:
.010740	60		rts				rts
.010741					_TOQImbalance:
.010741	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010744	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01074c	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01075a					TOKKeywordSearch:
.01075a	18		clc				clc
.01075b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.01075c					Binary_Add:
.01075c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.01075e	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010760	30 12		bmi $010774		bmi 	_BATypeError
.010762	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010764	30 3f		bmi $0107a5		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010766	18		clc			clc 										; add the results
.010767	b5 00		lda $00,x		lda		EXSValueL+0,x
.010769	75 02		adc $02,x		adc 	EXSValueL+2,x
.01076b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01076d	b5 20		lda $20,x		lda		EXSValueH+0,x
.01076f	75 22		adc $22,x		adc 	EXSValueH+2,x
.010771	95 20		sta $20,x		sta 	EXSValueH+0,x
.010773	60		rts			rts
.010774					_BATypeError:
.010774	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010777	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01077f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01078f	65 73 00
.010792					_BALengthError:
.010792	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010795	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01079d	6f 6f 20 6c 6f 6e 67 00
.0107a5					_BAConcatenateString:
.0107a5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0107a7	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0107a9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0107ab	85 0c		sta $0c			sta 	DTemp2
.0107ad	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0107af	18		clc			clc 										; work out the total length
.0107b0	b2 08		lda ($08)		lda 	(DTemp1)
.0107b2	72 0c		adc ($0c)		adc 	(DTemp2)
.0107b4	b0 14		bcs $0107ca		bcs 	_BAConcatLengthError 				; string is too long.
.0107b6	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0107b8	20 39 05	jsr $010539		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0107bb	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0107bd	74 20		stz $20,x		stz 	EXSValueH+0,x
.0107bf	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0107c1	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0107c4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0107c6	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0107c9	60		rts			rts
.0107ca					_BAConcatLengthError:
.0107ca	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0107cd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0107d5	6f 6f 20 6c 6f 6e 67 00
.0107dd					Binary_Subtract:
.0107dd	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0107e0	38		sec			sec
.0107e1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0107e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0107e5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107e7	b5 20		lda $20,x		lda		EXSValueH+0,x
.0107e9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0107eb	95 20		sta $20,x		sta 	EXSValueH+0,x
.0107ed	60		rts			rts
.0107ee					Binary_ShiftRight:
.0107ee	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0107f1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0107f3	29 3f 00	and #$003f		and 	#63
.0107f6	f0 07		beq $0107ff		beq		_Binary_SRExit
.0107f8					_Binary_SRLoop:
.0107f8	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.0107fa	76 00		ror $00,x		ror 	EXSValueL+0,x
.0107fc	3a		dec a			dec 	a
.0107fd	d0 f9		bne $0107f8		bne 	_Binary_SRLoop
.0107ff					_Binary_SRExit:
.0107ff	60		rts			rts
.010800					Binary_ShiftLeft:
.010800	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010803	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010805	29 3f 00	and #$003f		and 	#63
.010808	f0 07		beq $010811		beq		_Binary_SLExit
.01080a					_Binary_SLLoop:
.01080a	16 00		asl $00,x		asl 	EXSValueL+0,x
.01080c	36 20		rol $20,x		rol 	EXSValueH+0,x
.01080e	3a		dec a			dec 	a
.01080f	d0 f9		bne $01080a		bne 	_Binary_SLLoop
.010811					_Binary_SLExit:
.010811	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010812					Binary_And:
.010812	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010815	b5 00		lda $00,x		lda		EXSValueL+0,x
.010817	35 02		and $02,x		and 	EXSValueL+2,x
.010819	95 00		sta $00,x		sta 	EXSValueL+0,x
.01081b	b5 20		lda $20,x		lda		EXSValueH+0,x
.01081d	35 22		and $22,x		and 	EXSValueH+2,x
.01081f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010821	60		rts			rts
.010822					Binary_Or:
.010822	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010825	b5 00		lda $00,x		lda		EXSValueL+0,x
.010827	15 02		ora $02,x		ora 	EXSValueL+2,x
.010829	95 00		sta $00,x		sta 	EXSValueL+0,x
.01082b	b5 20		lda $20,x		lda		EXSValueH+0,x
.01082d	15 22		ora $22,x		ora 	EXSValueH+2,x
.01082f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010831	60		rts			rts
.010832					Binary_Xor:
.010832	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010835	b5 00		lda $00,x		lda		EXSValueL+0,x
.010837	55 02		eor $02,x		eor 	EXSValueL+2,x
.010839	95 00		sta $00,x		sta 	EXSValueL+0,x
.01083b	b5 20		lda $20,x		lda		EXSValueH+0,x
.01083d	55 22		eor $22,x		eor 	EXSValueH+2,x
.01083f	95 20		sta $20,x		sta 	EXSValueH+0,x
.010841	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010842					Binary_Equals:
.010842	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010845	b0 0e		bcs $010855		bcs 	_BEString
.010847	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010849	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01084b	d0 4f		bne $01089c		bne 	Compare_Fail
.01084d	b5 20		lda $20,x		lda 	EXSValueH,x
.01084f	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010851	d0 49		bne $01089c		bne 	Compare_Fail
.010853	80 3f		bra $010894		bra 	Compare_Succeed
.010855					_BEString:
.010855	09 00 00	ora #$0000		ora 	#$0000
.010858	f0 3a		beq $010894		beq 	Compare_Succeed
.01085a	80 40		bra $01089c		bra 	Compare_Fail
.01085c					Binary_NotEquals:
.01085c	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01085f	b0 0e		bcs $01086f		bcs 	_BNEString
.010861	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010863	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010865	d0 2d		bne $010894		bne 	Compare_Succeed
.010867	b5 20		lda $20,x		lda 	EXSValueH,x
.010869	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.01086b	d0 27		bne $010894		bne 	Compare_Succeed
.01086d	80 2d		bra $01089c		bra 	Compare_Fail
.01086f					_BNEString:
.01086f	09 00 00	ora #$0000		ora 	#$0000
.010872	d0 20		bne $010894		bne 	Compare_Succeed
.010874	80 26		bra $01089c		bra 	Compare_Fail
.010876					Binary_Less:
.010876	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010879	b0 12		bcs $01088d		bcs 	_BLString
.01087b	38		sec			sec
.01087c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01087e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010880	b5 20		lda $20,x		lda 	EXSValueH,x
.010882	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010884	50 03		bvc $010889		bvc 	*+5
.010886	49 00 80	eor #$8000		eor 	#$8000
.010889	30 09		bmi $010894		bmi 	Compare_Succeed
.01088b	80 0f		bra $01089c		bra 	Compare_Fail
.01088d					_BLString:
.01088d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010890	f0 02		beq $010894		beq 	Compare_Succeed
.010892	80 08		bra $01089c		bra 	Compare_Fail
.010894					Compare_Succeed:
.010894	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010897	95 00		sta $00,x		sta 	EXSValueL,x
.010899	95 20		sta $20,x		sta 	EXSValueH,x
.01089b	60		rts			rts
.01089c					Compare_Fail:
.01089c	74 00		stz $00,x		stz 	EXSValueL,x
.01089e	74 20		stz $20,x		stz 	EXSValueH,x
.0108a0	60		rts			rts
.0108a1					Binary_GreaterEqual:
.0108a1	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0108a4	b0 12		bcs $0108b8		bcs 	_BGEString
.0108a6	38		sec			sec
.0108a7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0108a9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0108ab	b5 20		lda $20,x		lda 	EXSValueH,x
.0108ad	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0108af	50 03		bvc $0108b4		bvc 	*+5
.0108b1	49 00 80	eor #$8000		eor 	#$8000
.0108b4	10 de		bpl $010894		bpl 	Compare_Succeed
.0108b6	80 e4		bra $01089c		bra 	Compare_Fail
.0108b8					_BGEString:
.0108b8	09 00 00	ora #$0000		ora 	#$0000
.0108bb	10 d7		bpl $010894		bpl 	Compare_Succeed
.0108bd	80 dd		bra $01089c		bra 	Compare_Fail
.0108bf					Binary_LessEqual:
.0108bf	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0108c2	b0 12		bcs $0108d6		bcs 	_BLEString
.0108c4	18		clc			clc 									; numeric <= signed
.0108c5	b5 00		lda $00,x		lda 	EXSValueL,x
.0108c7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0108c9	b5 20		lda $20,x		lda 	EXSValueH,x
.0108cb	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0108cd	50 03		bvc $0108d2		bvc 	*+5
.0108cf	49 00 80	eor #$8000		eor 	#$8000
.0108d2	30 c0		bmi $010894		bmi 	Compare_Succeed
.0108d4	80 c6		bra $01089c		bra 	Compare_Fail
.0108d6					_BLEString:
.0108d6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0108d9	d0 b9		bne $010894		bne 	Compare_Succeed
.0108db	80 bf		bra $01089c		bra 	Compare_Fail
.0108dd					Binary_Greater:
.0108dd	20 fb 08	jsr $0108fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0108e0	b0 12		bcs $0108f4		bcs 	_BGString
.0108e2	18		clc			clc 									; numeric > signed
.0108e3	b5 00		lda $00,x		lda 	EXSValueL,x
.0108e5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0108e7	b5 20		lda $20,x		lda 	EXSValueH,x
.0108e9	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0108eb	50 03		bvc $0108f0		bvc 	*+5
.0108ed	49 00 80	eor #$8000		eor 	#$8000
.0108f0	10 a2		bpl $010894		bpl 	Compare_Succeed
.0108f2	80 a8		bra $01089c		bra 	Compare_Fail
.0108f4					_BGString:
.0108f4	c9 01 00	cmp #$0001		cmp 	#$0001
.0108f7	f0 9b		beq $010894		beq 	Compare_Succeed
.0108f9	80 a1		bra $01089c		bra 	Compare_Fail
.0108fb					CompareTypeCheck:
.0108fb	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0108fd	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0108ff	30 06		bmi $010907		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010901	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010903	30 1c		bmi $010921		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010905	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010906	60		rts			rts
.010907					_CTCFail:
.010907	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01090a	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010912	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010921					_CTCStringCompare:
.010921	20 fb 04	jsr $0104fb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010924	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010926	85 08		sta $08			sta 	DTemp1
.010928	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01092a	85 0c		sta $0c			sta 	DTemp2
.01092c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01092f	a8		tay			tay
.010930	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010932	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010934	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010936	90 02		bcc $01093a		bcc 	_CTCSmallest
.010938	b2 0c		lda ($0c)		lda 	(DTemp2)
.01093a					_CTCSmallest:
.01093a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01093c					_CTCCompare:
.01093c	c8		iny			iny 									; look at next character (done first, first char is size)
.01093d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01093f	30 16		bmi $010957		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010941	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010943	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010945	f0 f5		beq $01093c		beq 	_CTCCompare 					; if zero, try the next character.
.010947	b0 07		bcs $010950		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010949					_CTCLess:
.010949	c2 20		rep #$20		rep 	#$20
.01094b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01094e	80 14		bra $010964		bra 	_CTCExit
.010950					_CTCGreater:
.010950	c2 20		rep #$20		rep 	#$20
.010952	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010955	80 0d		bra $010964		bra 	_CTCExit
.010957					_CTCEqualSoFar:
.010957	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010959	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01095b	90 ec		bcc $010949		bcc 	_CTCLess
.01095d	d0 f1		bne $010950		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01095f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010961	a9 00 00	lda #$0000		lda 	#$0000
.010964					_CTCExit:
.010964	38		sec			sec 									; return with CS indicating string comparison.
.010965	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010966					Binary_Divide:
.010966	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010969	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01096b	15 22		ora $22,x		ora	 	EXSValueH+2,x
.01096d	d0 14		bne $010983		bne 	_BinaryDivide_Ok
.01096f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010972	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01097a	20 62 79 20 7a 65 72 6f 00
.010983					_BinaryDivide_Ok:
.010983	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010985	64 0a		stz $0a			stz 	DTemp1+2
.010987	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010989	5a		phy			phy 										; save Y (bit counter)
.01098a	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01098c	10 07		bpl $010995		bpl 	_BinaryDivide_RightDone
.01098e	e8		inx			inx
.01098f	e8		inx			inx
.010990	20 cb 09	jsr $0109cb		jsr 	Binary_DivNegate
.010993	ca		dex			dex
.010994	ca		dex			dex
.010995					_BinaryDivide_RightDone:
.010995	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010997	10 03		bpl $01099c		bpl 	_BinaryDivide_LeftDone
.010999	20 cb 09	jsr $0109cb		jsr 	Binary_DivNegate
.01099c					_BinaryDivide_LeftDone:
.01099c	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01099f					_BinaryDivide_Loop:
.01099f	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0109a1	36 20		rol $20,x		rol 	EXSValueH+0,x
.0109a3	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0109a5	26 0a		rol $0a			rol 	DTemp1+2
.0109a7	38		sec			sec											; calculate A-M
.0109a8	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0109aa	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109ac	85 0c		sta $0c			sta 	DTemp2
.0109ae	a5 0a		lda $0a			lda 	DTemp1+2
.0109b0	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109b2	90 08		bcc $0109bc		bcc 	_Binary_NoSubract 					; if A < M skip this
.0109b4	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0109b6	a5 0c		lda $0c			lda 	DTemp2
.0109b8	85 08		sta $08			sta 	DTemp1+0
.0109ba	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0109bc					_Binary_NoSubract:
.0109bc	88		dey			dey 										; do it 32 times.
.0109bd	d0 e0		bne $01099f		bne 	_BinaryDivide_Loop
.0109bf					_BinaryDivide_Exit:
.0109bf	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0109c1	29 01 00	and #$0001		and 	#1
.0109c4	f0 03		beq $0109c9		beq 	_BinaryDivide_Exit2
.0109c6	20 cb 09	jsr $0109cb		jsr 	Binary_DivNegate
.0109c9					_BinaryDivide_Exit2:
.0109c9	7a		ply			ply 										; restore Y
.0109ca	60		rts			rts
.0109cb					Binary_DivNegate:
.0109cb	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0109cd	38		sec			sec 										; negate the value at stack X.
.0109ce	a9 00 00	lda #$0000		lda 	#$0000
.0109d1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0109d3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109d5	a9 00 00	lda #$0000		lda 	#$0000
.0109d8	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.0109da	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109dc	60		rts			rts
.0109dd					Binary_Modulus:
.0109dd	20 66 09	jsr $010966		jsr 	Binary_Divide 						; do the divide
.0109e0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0109e2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109e4	a5 0a		lda $0a			lda 	DTemp1+2
.0109e6	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109e8	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0109e9					Binary_Multiply:
.0109e9	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0109ec	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0109ee	85 08		sta $08			sta 	DTemp1
.0109f0	b5 20		lda $20,x		lda 	EXSValueH+0,x
.0109f2	85 0a		sta $0a			sta		DTemp1+2
.0109f4	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0109f6	74 20		stz $20,x		stz 	EXSValueH+0,x
.0109f8					_BinaryMultiply_Loop:
.0109f8	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0109fa	05 0a		ora $0a			ora 	DTemp1+2
.0109fc	f0 1e		beq $010a1c		beq 	_BinaryMultiply_Exit
.0109fe	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010a00	29 01 00	and #$0001		and 	#1
.010a03	f0 0d		beq $010a12		beq 	_BinaryMultiply_NoAdd
.010a05	18		clc			clc 										; add multiplicand to result.
.010a06	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010a08	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a0a	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a0c	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010a0e	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a10	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a12					_BinaryMultiply_NoAdd:
.010a12	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010a14	66 08		ror $08			ror 	DTemp1
.010a16	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010a18	36 22		rol $22,x		rol 	EXSValueH+2,x
.010a1a	80 dc		bra $0109f8		bra 	_BinaryMultiply_Loop 				; go round again.
.010a1c					_BinaryMultiply_Exit:
.010a1c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010a1d					Function_Len:
.010a1d	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010a20	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a23	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010a26	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010a28	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010a2b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010a2e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010a30	74 20		stz $20,x			stz 	EXSValueH+0,x
.010a32	60		rts				rts
.010a33					Function_Abs:
.010a33	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010a36	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010a39	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010a3c	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010a3e	30 07		bmi $010a47			bmi 	_FAbsNegative 				; negate it if negative
.010a40	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010a42	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010a44	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a46	60		rts				rts
.010a47					_FAbsNegative:
.010a47	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010a48	a9 00 00	lda #$0000			lda 	#0
.010a4b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010a4d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a4f	a9 00 00	lda #$0000			lda 	#0
.010a52	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010a54	95 20		sta $20,x			sta 	EXSValueH+0,x
.010a56	60		rts				rts
.010a57					Function_Sgn:
.010a57	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns integer
.010a5a	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010a5d	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010a60	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010a62	74 20		stz $20,x			stz 	EXSValueH+0,x
.010a64	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010a66	30 07		bmi $010a6f			bmi 	_FSgnNegative 				; set to -1 if signed
.010a68	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010a6a	f0 02		beq $010a6e			beq 	_FSgnExit
.010a6c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010a6e					_FSgnExit:
.010a6e	60		rts				rts
.010a6f					_FSgnNegative:
.010a6f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010a72	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a74	95 20		sta $20,x			sta 	EXSValueH+0,x
.010a76	60		rts				rts
.010a77					Function_Random:
.010a77	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010a7a	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger
.010a7d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010a7f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010a81	d0 0a		bne $010a8d			bne 	_Rnd_NotZero
.010a83	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010a86	85 10		sta $10				sta 	DRandom
.010a88	a9 ea 00	lda #$00ea			lda 	#$EA
.010a8b	85 12		sta $12				sta 	DRandom+2
.010a8d					_Rnd_NotZero:
.010a8d	20 98 0a	jsr $010a98			jsr 	_Rnd_Process 				; call randomiser twice
.010a90	95 20		sta $20,x			sta 	EXSValueH+0,x
.010a92	20 98 0a	jsr $010a98			jsr 	_Rnd_Process
.010a95	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a97	60		rts				rts
.010a98					_Rnd_Process:
.010a98	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010a9a	26 12		rol $12				rol 	DRandom+2
.010a9c	90 0e		bcc $010aac			bcc 	_Rnd_Exit
.010a9e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010aa0	49 54 d4	eor #$d454			eor 	#$D454
.010aa3	85 10		sta $10				sta 	DRandom
.010aa5	a5 12		lda $12				lda 	DRandom+2
.010aa7	49 d5 55	eor #$55d5			eor 	#$55D5
.010aaa	85 12		sta $12				sta 	DRandom+2
.010aac					_Rnd_Exit:
.010aac	a5 10		lda $10				lda 	DRandom
.010aae	45 12		eor $12				eor 	DRandom+2
.010ab0	60		rts				rts
.010ab1					Function_Chr:
.010ab1	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010ab4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010ab7	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010aba	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010abd	d0 12		bne $010ad1			bne 	_FCHBad
.010abf	48		pha				pha  								; save char # on stack
.010ac0	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010ac3	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010ac6	68		pla				pla 								; restore character number
.010ac7	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010aca	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010acc	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010ace	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ad0	60		rts				rts
.010ad1					_FCHBad:
.010ad1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010ad4	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010adc	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010ae9					Function_Asc:
.010ae9	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010aec	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010aef	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010af2	a8		tay				tay 								; string address in Y
.010af3	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010af6	29 ff 00	and #$00ff			and 	#$00FF
.010af9	f0 0b		beq $010b06			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010afb	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010afe	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010b01	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010b03	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b05	60		rts				rts
.010b06					_FASBad:
.010b06	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010b09	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010b11	65 20 66 6f 72 20 61 73 63 28 29 00
.010b1d					Function_SPC:
.010b1d	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010b20	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010b23	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b26	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010b29	d0 17		bne $010b42			bne 	_FSPBad
.010b2b	48		pha				pha 								; save length
.010b2c	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate character space
.010b2f	7a		ply				ply 								; get count in Y
.010b30	f0 09		beq $010b3b			beq 	_FSPExit 					; if zero, just empty string
.010b32					_FSPCopy:
.010b32	a9 20 00	lda #$0020			lda 	#" "						; space character
.010b35	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010b38	88		dey				dey
.010b39	d0 f7		bne $010b32			bne 	_FSPCopy	 				; do it Y times
.010b3b					_FSPExit:
.010b3b	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010b3d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b3f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b41	60		rts				rts
.010b42					_FSPBad:
.010b42	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010b45	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010b4d	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010b59					Function_LEFT:
.010b59	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010b5c	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b5f	48		pha				pha 								; save string on stack.
.010b60	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010b63	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010b66	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010b69	d0 6d		bne $010bd8			bne 	FNStringParameter
.010b6b	85 08		sta $08				sta 	DTemp1 						; save count.
.010b6d	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010b70	7a		ply				ply 								; Y points to string.
.010b71	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010b74	29 ff 00	and #$00ff			and 	#$00FF
.010b77	f0 52		beq $010bcb			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010b79	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010b7b	f0 55		beq $010bd2			beq 	FNStringY 					; return string in Y if current len = required len.
.010b7d	90 53		bcc $010bd2			bcc 	FNStringY 					; if current < required return whole thing.
.010b7f	c8		iny				iny 								; take from here - start of string
.010b80	80 33		bra $010bb5			bra 	FNDTemp1Characters
.010b82					Function_RIGHT:
.010b82	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010b85	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b88	48		pha				pha 								; save string on stack.
.010b89	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010b8c	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010b8f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010b92	d0 44		bne $010bd8			bne 	FNStringParameter
.010b94	85 08		sta $08				sta 	DTemp1 						; save count.
.010b96	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010b99	7a		ply				ply 								; Y points to string.
.010b9a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010b9d	29 ff 00	and #$00ff			and 	#$00FF
.010ba0	f0 29		beq $010bcb			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ba2	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ba4	f0 2c		beq $010bd2			beq 	FNStringY 					; return string in Y if current len = required len.
.010ba6	90 2a		bcc $010bd2			bcc 	FNStringY 					; if current < required return whole thing.
.010ba8	38		sec				sec 								; current-required is the number to skip
.010ba9	e5 08		sbc $08				sbc 	DTemp1
.010bab	85 0a		sta $0a				sta 	DTemp1+2
.010bad	98		tya				tya
.010bae	18		clc				clc
.010baf	65 0a		adc $0a				adc 	DTemp1+2
.010bb1	a8		tay				tay
.010bb2	c8		iny				iny 								; +1 for the count.
.010bb3	80 00		bra $010bb5			bra 	FNDTemp1Characters
.010bb5					FNDTemp1Characters:
.010bb5	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010bb7	f0 12		beq $010bcb			beq 	FNStringEmpty 				; if zero, return empty string.
.010bb9	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010bbc	48		pha				pha 								; save the address
.010bbd					_FND1Loop:
.010bbd	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010bc0	20 65 05	jsr $010565			jsr 	StringWriteCharacter
.010bc3	c8		iny				iny
.010bc4	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010bc6	d0 f5		bne $010bbd			bne 	_FND1Loop
.010bc8	7a		ply				ply 								; string address in Y
.010bc9	80 07		bra $010bd2			bra 	FNStringY
.010bcb					FNStringEmpty:
.010bcb	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010bce	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; put address of it in Y
.010bd1	a8		tay				tay
.010bd2					FNStringY:
.010bd2	98		tya				tya
.010bd3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bd5	74 22		stz $22,x			stz 	EXSValueH+2,x
.010bd7	60		rts				rts
.010bd8					FNStringParameter:
.010bd8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010bdb	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010be3	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010bf0					Function_MID:
.010bf0	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010bf3	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010bf6	48		pha				pha 								; save string on stack.
.010bf7	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get offset (n)
.010bfa	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010bfd	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010c00	d0 d6		bne $010bd8			bne 	FNStringParameter
.010c02	c9 00 00	cmp #$0000			cmp 	#0
.010c05	f0 d1		beq $010bd8			beq 	FNStringParameter 			; or zero
.010c07	48		pha				pha 								; save start position on stack.
.010c08	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010c0b	85 08		sta $08				sta 	DTemp1
.010c0d	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010c0f	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010c12	d0 0e		bne $010c22			bne 	_FMINoThird
.010c14	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010c16	e6 06		inc $06				inc 	DCodePtr
.010c18	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010c1b	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010c1e	d0 b8		bne $010bd8			bne 	FNStringParameter
.010c20	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010c22					_FMINoThird:
.010c22	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010c25	68		pla				pla 								; get offset position
.010c26	85 0c		sta $0c				sta 	DTemp2
.010c28	7a		ply				ply 								; get address of string in Y
.010c29	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010c2c	29 ff 00	and #$00ff			and 	#$00FF
.010c2f	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010c31	90 98		bcc $010bcb			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010c33	38		sec				sec 								; calculate number of characters left after
.010c34	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010c36	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010c37	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010c39	b0 02		bcs $010c3d			bcs 	_FMISufficient
.010c3b	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010c3d					_FMISufficient:
.010c3d	98		tya				tya 								; get address
.010c3e	18		clc				clc
.010c3f	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010c41	a8		tay				tay 								; put in Y
.010c42	82 70 ff	brl $010bb5			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010c45					Function_Peek:
.010c45	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010c48	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c4b	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010c4e	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010c50	84 0a		sty $0a				sty 	DTemp1+2
.010c52	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010c55	b7 08		lda [$08],y			lda 	[DTemp1],y
.010c57	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010c5a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010c5c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c5e	60		rts				rts
.010c5f					Function_Deek:
.010c5f	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010c62	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c65	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010c68	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010c6a	84 0a		sty $0a				sty 	DTemp1+2
.010c6c	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010c6f	b7 08		lda [$08],y			lda 	[DTemp1],y
.010c71	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010c73	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c75	60		rts				rts
.010c76					Function_Leek:
.010c76	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010c79	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c7c	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010c7f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010c81	84 0a		sty $0a				sty 	DTemp1+2
.010c83	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010c86	b7 08		lda [$08],y			lda 	[DTemp1],y
.010c88	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010c8a	c8		iny				iny
.010c8b	c8		iny				iny
.010c8c	b7 08		lda [$08],y			lda 	[DTemp1],y
.010c8e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c90	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010c91					Function_VAL:
.010c91	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010c94	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c97	48		pha				pha 								; put string address on stack.
.010c98	20 a8 0c	jsr $010ca8			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c9b	7a		ply				ply 								; get string address back
.010c9c	da		phx				phx 								; save X on stack
.010c9d	aa		tax				tax 								; base in X
.010c9e	98		tya				tya 								; address in A
.010c9f	20 e2 0c	jsr $010ce2			jsr 	StringToInteger
.010ca2	fa		plx				plx 								; restore X
.010ca3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ca5	94 20		sty $20,x			sty 	EXSValueH+0,x
.010ca7	60		rts				rts
.010ca8					VALGetBase:
.010ca8	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010caa	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010cad	f0 07		beq $010cb6			beq 	_VGBAlternate
.010caf	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010cb2	a9 0a 00	lda #$000a			lda 	#10
.010cb5	60		rts				rts
.010cb6					_VGBAlternate:
.010cb6	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; skip comma.
.010cb9	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010cbc	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010cbf	d0 0e		bne $010ccf			bne 	_VGBBadBase
.010cc1	c9 02 00	cmp #$0002			cmp 	#2
.010cc4	90 09		bcc $010ccf			bcc 	_VGBBadBase
.010cc6	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010cc9	b0 04		bcs $010ccf			bcs 	_VGBBadBase
.010ccb	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010cce	60		rts				rts
.010ccf					_VGBBadBase:
.010ccf	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010cd2	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010cda	65 72 20 42 61 73 65 00
.010ce2					StringToInteger:
.010ce2	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010ce4	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ce6	29 ff 00	and #$00ff			and 	#$00FF
.010ce9	85 26		sta $26				sta 	DTemp3+2
.010ceb	f0 6e		beq $010d5b			beq 	_STIError 					; if length zero it's bad.
.010ced	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010cef	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010cf1	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010cf3	64 0a		stz $0a				stz 	DTemp1+2
.010cf5	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010cf7	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010cfa	48		pha				pha 								; push on stack
.010cfb	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010cfe	d0 06		bne $010d06			bne 	_STILoop
.010d00	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010d02	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010d04	f0 55		beq $010d5b			beq 	_STIError 					; if only - then error.
.010d06					_STILoop:
.010d06	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010d08	20 7a 0d	jsr $010d7a			jsr 	MultiplyTemp1ByA
.010d0b	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010d0d	29 ff 00	and #$00ff			and 	#$00FF
.010d10	20 6b 0d	jsr $010d6b			jsr 	ConvertUpperCase	 		; make U/C
.010d13	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010d16	90 43		bcc $010d5b			bcc 	_STIError
.010d18	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010d1b	90 0e		bcc $010d2b			bcc 	_STIOkay1
.010d1d	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010d20	90 39		bcc $010d5b			bcc 	_STIError
.010d22	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010d25	b0 34		bcs $010d5b			bcs 	_STIError
.010d27	18		clc				clc 								; shift to correct range.
.010d28	69 09 00	adc #$0009			adc 	#9
.010d2b					_STIOkay1:
.010d2b	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010d2e	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010d30	b0 29		bcs $010d5b			bcs 	_STIError
.010d32	18		clc				clc 								; add A to DTemp1
.010d33	65 08		adc $08				adc 	DTemp1
.010d35	85 08		sta $08				sta 	DTemp1
.010d37	90 02		bcc $010d3b			bcc 	_STINoCarry
.010d39	e6 0a		inc $0a				inc 	DTemp1+2
.010d3b					_STINoCarry:
.010d3b	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010d3d	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010d3f	d0 c5		bne $010d06			bne 	_STILoop 					; loop back.
.010d41	68		pla				pla 								; get optional minus bac
.010d42	c9 2d 00	cmp #$002d			cmp 	#"-"
.010d45	d0 0f		bne $010d56			bne 	_STINotNegative 			; handle the negative character
.010d47	38		sec				sec 								; negate DTemp1
.010d48	a9 00 00	lda #$0000			lda 	#0
.010d4b	e5 08		sbc $08				sbc 	DTemp1
.010d4d	85 08		sta $08				sta 	DTemp1
.010d4f	a9 00 00	lda #$0000			lda 	#0
.010d52	e5 0a		sbc $0a				sbc 	DTemp1+2
.010d54	85 0a		sta $0a				sta 	DTemp1+2
.010d56					_STINotNegative:
.010d56	a5 08		lda $08				lda 	DTemp1 						; get the result
.010d58	a4 0a		ldy $0a				ldy 	DTemp1+2
.010d5a	60		rts				rts
.010d5b					_STIError:
.010d5b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d5e	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010d66	74 61 6e 74 00
.010d6b					ConvertUpperCase:
.010d6b	c9 61 00	cmp #$0061			cmp 	#'a'
.010d6e	90 09		bcc $010d79			bcc 	_CUCExit
.010d70	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010d73	b0 04		bcs $010d79			bcs 	_CUCExit
.010d75	38		sec				sec
.010d76	e9 20 00	sbc #$0020			sbc 	#32
.010d79					_CUCExit:
.010d79	60		rts				rts
.010d7a					MultiplyTemp1ByA:
.010d7a					_MTGeneral:
.010d7a	da		phx				phx
.010d7b	aa		tax				tax 								; multiplier in X
.010d7c	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010d7e	85 0c		sta $0c				sta 	DTemp2
.010d80	a5 0a		lda $0a				lda 	DTemp1+2
.010d82	85 0e		sta $0e				sta 	DTemp2+2
.010d84	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010d86	64 0a		stz $0a				stz 	DTemp1+2
.010d88	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010d8b					_MTLoop:
.010d8b	8a		txa				txa 								; shift X right into C
.010d8c	4a		lsr a				lsr 	a
.010d8d	aa		tax				tax
.010d8e	90 10		bcc $010da0			bcc 	_MTNoAdd
.010d90	18		clc				clc
.010d91	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010d93	65 0c		adc $0c				adc 	DTemp2
.010d95	85 08		sta $08				sta 	DTemp1
.010d97	a5 0a		lda $0a				lda 	DTemp1+2
.010d99	65 0e		adc $0e				adc 	DTemp2+2
.010d9b	85 0a		sta $0a				sta 	DTemp1+2
.010d9d	90 01		bcc $010da0			bcc 	_MTNoAdd
.010d9f	c8		iny				iny
.010da0					_MTNoAdd:
.010da0	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010da2	26 0e		rol $0e				rol 	DTemp2+2
.010da4	90 01		bcc $010da7			bcc 	_MTNoOverflow
.010da6	c8		iny				iny
.010da7					_MTNoOverflow:
.010da7	8a		txa				txa 								; until multiplier is zero.
.010da8	d0 e1		bne $010d8b			bne 	_MTLoop
.010daa	98		tya				tya
.010dab	18		clc				clc
.010dac	69 ff ff	adc #$ffff			adc 	#$FFFF
.010daf	fa		plx				plx 								; restore X
.010db0	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010db1					Function_Str:
.010db1	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010db4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010db7	48		pha				pha 								; save YA on the stack
.010db8	5a		phy				phy
.010db9	20 a8 0c	jsr $010ca8			jsr 	VALGetBase 					; process , base (shared with STR$())
.010dbc	85 14		sta $14				sta 	DSignCount
.010dbe	7a		ply				ply 								; YA is the number
.010dbf	68		pla				pla
.010dc0	da		phx				phx
.010dc1	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010dc3	20 cc 0d	jsr $010dcc			jsr 	ConvertToString 			; convert it to a string.
.010dc6	fa		plx				plx 								; restore X
.010dc7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010dc9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dcb	60		rts				rts
.010dcc					ConvertToString:
.010dcc	48		pha				pha
.010dcd	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010dd0	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate space for return string.
.010dd3	68		pla				pla
.010dd4					ConvertToStringAlreadyAllocated:
.010dd4	da		phx				phx 								; save X (base)
.010dd5	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010dd7	84 26		sty $26				sty 	DTemp3+2
.010dd9	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010ddb	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010ddd	10 15		bpl $010df4			bpl 	_CTSNotNegative
.010ddf	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010de2	20 5e 0e	jsr $010e5e			jsr 	CTSOutputA
.010de5	38		sec				sec 								; negate DTemp3 which is the number
.010de6	a9 00 00	lda #$0000			lda 	#0
.010de9	e5 24		sbc $24				sbc 	DTemp3
.010deb	85 24		sta $24				sta 	DTemp3
.010ded	a9 00 00	lda #$0000			lda 	#0
.010df0	e5 26		sbc $26				sbc 	DTemp3+2
.010df2	85 26		sta $26				sta 	DTemp3+2
.010df4					_CTSNotNegative:
.010df4	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010df7	48		pha				pha
.010df8	a9 00 00	lda #$0000			lda 	#0
.010dfb	48		pha				pha
.010dfc	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010dfe	85 08		sta $08				sta 	DTemp1
.010e00	64 0a		stz $0a				stz 	DTemp1+2
.010e02					_CTSMultiplySubtractor:
.010e02	38		sec				sec 								; check number vs subtractor
.010e03	a5 24		lda $24				lda 	DTemp3
.010e05	e5 08		sbc $08				sbc 	DTemp1
.010e07	a5 26		lda $26				lda 	DTemp3+2
.010e09	e5 0a		sbc $0a				sbc 	DTemp1+2
.010e0b	90 0f		bcc $010e1c			bcc		_CTSScaledUp 				; if >= then scaled up.
.010e0d	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010e0f	48		pha				pha
.010e10	a5 0a		lda $0a				lda 	DTemp1+2
.010e12	48		pha				pha
.010e13	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010e15	20 7a 0d	jsr $010d7a			jsr 	MultiplyTemp1ByA
.010e18	b0 02		bcs $010e1c			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010e1a	80 e6		bra $010e02			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010e1c					_CTSScaledUp:
.010e1c	7a		ply				ply 								; YA contains the previous divider.
.010e1d	68		pla				pla
.010e1e	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010e21	d0 05		bne $010e28			bne 	_CTSHasDigit
.010e23	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010e26	f0 20		beq $010e48			beq 	_CTSExit
.010e28					_CTSHasDigit:
.010e28	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010e2a	84 0e		sty $0e				sty 	DTemp2+2
.010e2c	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010e2f					_CTSSubLoop:
.010e2f	38		sec				sec 								; subtract subtractor from number
.010e30	a5 24		lda $24				lda 	DTemp3
.010e32	e5 0c		sbc $0c				sbc 	DTemp2
.010e34	a8		tay				tay 								; intermediate in Y
.010e35	a5 26		lda $26				lda 	DTemp3+2
.010e37	e5 0e		sbc $0e				sbc 	DTemp2+2
.010e39	90 07		bcc $010e42			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010e3b	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010e3d	84 24		sty $24				sty 	DTemp3
.010e3f	e8		inx				inx 								; one more subtraction
.010e40	80 ed		bra $010e2f			bra 	_CTSSubLoop 				; try it again.
.010e42					_CTSFinishedSubtracting:
.010e42	8a		txa				txa 								; convert to ASCII.
.010e43	20 51 0e	jsr $010e51			jsr 	CTSOutputHexDigit 			; write that out.
.010e46	80 d4		bra $010e1c			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010e48					_CTSExit:
.010e48	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010e4a	20 51 0e	jsr $010e51			jsr 	CTSOutputHexDigit
.010e4d	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010e4f	fa		plx				plx 								; restore X.
.010e50	60		rts				rts
.010e51					CTSOutputHexDigit:
.010e51	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010e54	90 04		bcc $010e5a			bcc 	_CTSNotLetter
.010e56	18		clc				clc
.010e57	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010e5a					_CTSNotLetter:
.010e5a	18		clc				clc
.010e5b	69 30 00	adc #$0030			adc 	#48
.010e5e					CTSOutputA:
.010e5e	5a		phy				phy 								; save Y, set Y to current pointer
.010e5f	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010e61	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010e64	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010e66	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010e68	1a		inc a				inc 	a
.010e69	92 18		sta ($18)			sta 	(DStartTempString)
.010e6b	c2 20		rep #$20			rep 	#$20
.010e6d	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010e6f	7a		ply				ply 								; restore Y and exit.
.010e70	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010e71					Function_INSTR:
.010e71	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns a integer
.010e74	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010e77	48		pha				pha 								; save string to search
.010e78	20 d2 04	jsr $0104d2			jsr 	ExpectComma
.010e7b	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010e7e	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010e81	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010e83	68		pla				pla
.010e84	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010e86	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010e88	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010e8a	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010e8c	38		sec				sec
.010e8d	b2 0c		lda ($0c)			lda 	(DTemp2)
.010e8f	f2 08		sbc ($08)			sbc		(DTemp1)
.010e91	c2 20		rep #$20			rep 	#$20
.010e93	90 2c		bcc $010ec1			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010e95	29 ff 00	and #$00ff			and 	#$00FF
.010e98	1a		inc a				inc 	a
.010e99	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010e9b	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010e9d	29 ff 00	and #$00ff			and 	#$00FF
.010ea0	f0 22		beq $010ec4			beq 	_FINSError
.010ea2					_FINSLoop:
.010ea2	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010ea4	1a		inc a				inc 	a
.010ea5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ea7	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010ea9	29 ff 00	and #$00ff			and 	#$00FF
.010eac	a8		tay				tay									; start comparing at index 1.
.010ead					_FINSCompare:
.010ead	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010eaf	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010eb1	29 ff 00	and #$00ff			and 	#$00FF
.010eb4	d0 05		bne $010ebb			bne 	_FINSNext
.010eb6	88		dey				dey
.010eb7	d0 f4		bne $010ead			bne 	_FINSCompare
.010eb9	80 08		bra $010ec3			bra 	_FINSExit
.010ebb					_FINSNext:
.010ebb	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010ebd	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010ebf	d0 e1		bne $010ea2			bne 	_FINSLoop
.010ec1					_FINSFail:
.010ec1	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010ec3					_FINSExit:
.010ec3	60		rts				rts
.010ec4					_FINSError:
.010ec4	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010ec7	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>010ecf	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010ed8					Function_UPPER:
.010ed8	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010edb	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010ede	48		pha				pha
.010edf	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010ee2	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010ee5	68		pla				pla
.010ee6	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010ee9	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010eeb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010eed	a8		tay				tay 								; address in Y
.010eee	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ef0	da		phx				phx 								; save X
.010ef1	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010ef3	29 ff 00	and #$00ff			and 	#$00FF
.010ef6	f0 20		beq $010f18			beq 	_FUPExit
.010ef8	aa		tax				tax 								; put in X
.010ef9					_FUPLoop:
.010ef9	c8		iny				iny 								; increment and load character
.010efa	b9 00 00	lda $0000,y			lda 	$0000,y
.010efd	29 ff 00	and #$00ff			and 	#$00FF
.010f00	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010f03	90 10		bcc $010f15			bcc 	_FUPNoChange
.010f05	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010f08	b0 0b		bcs $010f15			bcs 	_FUPNoChange
.010f0a	38		sec				sec 								; shift case
.010f0b	e9 20 00	sbc #$0020			sbc 	#32
.010f0e	e2 20		sep #$20			sep 	#$20 						; write back
.010f10	99 00 00	sta $0000,y			sta 	$0000,y
.010f13	c2 20		rep #$20			rep 	#$20
.010f15					_FUPNoChange:
.010f15	ca		dex				dex 								; do X times
.010f16	d0 e1		bne $010ef9			bne 	_FUPLoop
.010f18					_FUPExit:
.010f18	fa		plx				plx 								; restore X
.010f19	60		rts				rts
.010f1a					Function_LOWER:
.010f1a	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010f1d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010f20	48		pha				pha
.010f21	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010f24	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010f27	68		pla				pla
.010f28	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010f2b	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010f2d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f2f	a8		tay				tay 								; address in Y
.010f30	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f32	da		phx				phx 								; save X
.010f33	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010f35	29 ff 00	and #$00ff			and 	#$00FF
.010f38	f0 20		beq $010f5a			beq 	_FLOExit
.010f3a	aa		tax				tax 								; put in X
.010f3b					_FLOLoop:
.010f3b	c8		iny				iny 								; increment and load character
.010f3c	b9 00 00	lda $0000,y			lda 	$0000,y
.010f3f	29 ff 00	and #$00ff			and 	#$00FF
.010f42	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010f45	90 10		bcc $010f57			bcc 	_FLONoChange
.010f47	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010f4a	b0 0b		bcs $010f57			bcs 	_FLONoChange
.010f4c	18		clc				clc 								; shift case
.010f4d	69 20 00	adc #$0020			adc 	#32
.010f50	e2 20		sep #$20			sep 	#$20 						; write back
.010f52	99 00 00	sta $0000,y			sta 	$0000,y
.010f55	c2 20		rep #$20			rep 	#$20
.010f57					_FLONoChange:
.010f57	ca		dex				dex 								; do X times
.010f58	d0 e1		bne $010f3b			bne 	_FLOLoop
.010f5a					_FLOExit:
.010f5a	fa		plx				plx 								; restore X
.010f5b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010f5c					Function_Let:
.010f5c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010f5e	48		pha				pha  								; save on stack for later.
.010f5f	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.010f62	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010f64	b0 1c		bcs $010f82			bcs 	_FLetFound 					; skip if found.
.010f66	68		pla				pla 								; get and push the first token again.
.010f67	48		pha				pha
.010f68	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010f6b	d0 57		bne $010fc4			bne 	_FLError					; arrays, so this causes an error.
.010f6d	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010f6f	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010f72	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.010f75	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010f77					_FLSkipToken:
.010f77	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010f79	e6 06		inc $06				inc 	DCodePtr
.010f7b	e6 06		inc $06				inc 	DCodePtr
.010f7d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010f80	d0 f5		bne $010f77			bne 	_FLSkipToken
.010f82					_FLetFound:
.010f82	68		pla				pla 								; get and save the first token.
.010f83	48		pha				pha
.010f84	a8		tay				tay 								; put it in Y
.010f85	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010f88	f0 07		beq $010f91			beq 	_FLetNotArray
.010f8a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010f8c	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010f8f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010f91					_FLetNotArray:
.010f91	7a		ply				ply 								; get the first token into Y
.010f92	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010f94	48		pha				pha
.010f95	5a		phy				phy 								; save the first token on the stack.
.010f96	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010f99	20 af 04	jsr $0104af			jsr 	ExpectToken
.010f9c	68		pla				pla 								; restore the first token.
.010f9d	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010fa0	d0 0f		bne $010fb1			bne 	_FLetString 				; skip if string.
.010fa2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.010fa5	7a		ply				ply 								; get address in Y
.010fa6	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010fa8	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010fab	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.010fad	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010fb0	60		rts				rts
.010fb1					_FLetString:
.010fb1	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.010fb4	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010fb6	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010fb9	7a		ply				ply 								; get address
.010fba	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010fbd	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010fc0	99 02 00	sta $0002,y			sta 	$0002,y
.010fc3	60		rts				rts
.010fc4					_FLError:
.010fc4	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010fc7	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010fcf	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.010fd7					Command_List:
.010fd7	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.010fda	20 39 05	jsr $010539		jsr 	StringTempAllocate
.010fdd	85 30		sta $30			sta 	DListBuffer						; save buffer.
.010fdf	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.010fe1	64 2e		stz $2e			stz 	DIndent2
.010fe3	64 32		stz $32			stz 	DTemp4+0 						; low number
.010fe5	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.010fe8	85 34		sta $34			sta 	DTemp4+2 						; high number.
.010fea	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.010fec	f0 28		beq $011016		beq 	_CLIList
.010fee	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.010ff1	f0 23		beq $011016		beq 	_CLIList
.010ff3	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.010ff6	c0 00 00	cpy #$0000		cpy 	#0
.010ff9	d0 18		bne $011013		bne 	_CLIError
.010ffb	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.010ffd	85 34		sta $34			sta 	DTemp4+2
.010fff	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011001	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.011004	d0 10		bne $011016		bne 	_CLIList
.011006	20 d2 04	jsr $0104d2		jsr 	ExpectComma 					; skip comma
.011009	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.01100c	85 34		sta $34			sta 	DTemp4+2
.01100e	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011011	f0 03		beq $011016		beq 	_CLIList
.011013					_CLIError:
.011013	82 89 f4	brl $01049f		brl 	SyntaxError
.011016					_CLIList:
.011016	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.011019	18		clc			clc
.01101a	65 02		adc $02			adc 	DBaseAddress
.01101c	a8		tay			tay 									; put in Y
.01101d					_CLINextLine:
.01101d	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011020	f0 29		beq $01104b		beq 	_CLIExit
.011022	20 b3 11	jsr $0111b3		jsr 	ScanIndent  					; scan for formatting.
.011025	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011028	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.01102a	90 14		bcc $011040		bcc 	_CLIFollowLink
.01102c	c5 34		cmp $34			cmp 	DTemp4+2
.01102e	f0 02		beq $011032		beq 	_CLIShowLine
.011030	b0 0e		bcs $011040		bcs 	_CLIFollowLink
.011032					_CLIShowLine:
.011032	a5 30		lda $30			lda 	DListBuffer
.011034	20 4e 10	jsr $01104e		jsr 	Detokenise 						; detokenise it
.011037	5a		phy			phy
.011038	a8		tay			tay 									; print buffer out
.011039	20 1f 05	jsr $01051f		jsr 	PrintBasicString
.01103c	20 65 f0	jsr $01f065		jsr 	HWNewLine
.01103f	7a		ply			ply 									; get address
.011040					_CLIFollowLink:
.011040	98		tya			tya 									; follow link
.011041	18		clc			clc
.011042	79 00 00	adc $0000,y		adc 	$0000,y
.011045	a8		tay			tay
.011046	20 7f f0	jsr $01f07f		jsr 	HWCheckBreak 					; break key pressed.
.011049	f0 d2		beq $01101d		beq 	_CLINextLine
.01104b					_CLIExit:
.01104b	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01104d	60		rts			rts
.01104e					Detokenise:
.01104e	48		pha			pha
.01104f	da		phx			phx
.011050	5a		phy			phy
.011051	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011053	1a		inc a			inc 	a
.011054	85 1a		sta $1a			sta 	DCurrentTempString
.011056	64 1c		stz $1c			stz		DConstantShift
.011058	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.01105b	92 18		sta ($18)		sta 	(DStartTempString)
.01105d	5a		phy			phy 									; save Y
.01105e	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.011061	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.011064	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011067	20 d4 0d	jsr $010dd4		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01106a	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.01106c	c5 2e		cmp $2e			cmp 	DIndent2
.01106e	90 02		bcc $011072		bcc 	_DTKSmaller
.011070	a5 2e		lda $2e			lda 	DIndent2
.011072					_DTKSmaller:
.011072	0a		asl a			asl 	a
.011073	69 06 00	adc #$0006		adc 	#6
.011076	85 08		sta $08			sta 	DTemp1
.011078					_DTKPadLineNo:
.011078	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.01107b	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01107e	b2 18		lda ($18)		lda 	(DStartTempString)
.011080	29 ff 00	and #$00ff		and 	#$00FF
.011083	c5 08		cmp $08			cmp 	DTemp1
.011085	d0 f1		bne $011078		bne 	_DTKPadLineNo
.011087	68		pla			pla 									; get pointer
.011088	18		clc			clc 									; point to start of line
.011089	69 04 00	adc #$0004		adc 	#4
.01108c	a8		tay			tay 									; put back in Y.
.01108d					_DTKMainLoop:
.01108d	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011090	d0 04		bne $011096		bne 	_DTKNotZero 					; if zero, return.
.011092	7a		ply			ply
.011093	fa		plx			plx
.011094	68		pla			pla
.011095	60		rts			rts
.011096					_DTKNotZero:
.011096	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011099	b0 1c		bcs $0110b7		bcs 	_DTKNotString
.01109b	5a		phy			phy										; save token address on stack.
.01109c	c8		iny			iny 									; skip first token
.01109d	c8		iny			iny
.01109e	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0110a1	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0110a4	98		tya			tya 									; copy the string out.
.0110a5	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0110a8	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0110ab	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0110ae	68		pla			pla 									; get token, which is its own offset
.0110af	a8		tay			tay
.0110b0	18		clc			clc
.0110b1	79 00 00	adc $0000,y		adc 	$0000,y
.0110b4	a8		tay			tay
.0110b5	80 d6		bra $01108d		bra 	_DTKMainLoop
.0110b7					_DTKNotString:
.0110b7	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0110ba	b0 09		bcs $0110c5		bcs 	_DTKNotShift
.0110bc	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0110bf	85 1c		sta $1c			sta 	DConstantShift
.0110c1	c8		iny			iny 									; skip token.
.0110c2	c8		iny			iny
.0110c3	80 c8		bra $01108d		bra 	_DTKMainLoop
.0110c5					_DTKNotShift:
.0110c5	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.0110c8	b0 07		bcs $0110d1		bcs 	_DTKNotKeyword
.0110ca	c8		iny			iny 									; skip over token
.0110cb	c8		iny			iny
.0110cc	20 4b 11	jsr $01114b		jsr 	_DTKDecodeKeyword 				; decode it.
.0110cf	80 bc		bra $01108d		bra 	_DTKMainLoop
.0110d1					_DTKNotKeyword:
.0110d1	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.0110d4	b0 18		bcs $0110ee		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.0110d6	5a		phy			phy 									; save pointer
.0110d7	38		sec			sec  									; shift it in the range 0-32767
.0110d8	e9 00 40	sbc #$4000		sbc 	#$4000
.0110db	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0110dc	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0110de	6a		ror a			ror 	a 								; rotate that into the constant value
.0110df	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0110e1	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0110e4	20 d4 0d	jsr $010dd4		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0110e7	64 1c		stz $1c			stz 	DConstantShift
.0110e9	7a		ply			ply 									; restore pointer
.0110ea	c8		iny			iny 									; skip token.
.0110eb	c8		iny			iny
.0110ec	80 9f		bra $01108d		bra 	_DTKMainLoop
.0110ee					_DTKIdentifier:
.0110ee	48		pha			pha 									; save token for typing at end
.0110ef					_DTKILoop:
.0110ef	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0110f2	20 1b 11	jsr $01111b		jsr 	_DTKIDecodeToken 				; decode it.
.0110f5	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0110f8	c8		iny			iny 									; skip it
.0110f9	c8		iny			iny
.0110fa	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0110fd	d0 f0		bne $0110ef		bne 	_DTKILoop
.0110ff	68		pla			pla 									; add $( as required.
.011100	48		pha			pha 									; comes from the first token.
.011101	29 00 20	and #$2000		and 	#IDTypeMask
.011104	f0 06		beq $01110c		beq 	_DTKINotString
.011106	a9 24 00	lda #$0024		lda 	#"$"
.011109	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01110c					_DTKINotString:
.01110c	68		pla			pla
.01110d	29 00 10	and #$1000		and 	#IDArrayMask
.011110	f0 06		beq $011118		beq 	_DTKINotArray
.011112	a9 28 00	lda #$0028		lda 	#"("
.011115	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011118					_DTKINotArray:
.011118	82 72 ff	brl $01108d		brl 	_DTKMainLoop
.01111b					_DTKIDecodeToken:
.01111b	5a		phy			phy
.01111c	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01111f	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011122					_DTKIDivide:
.011122	38		sec			sec
.011123	e9 2d 00	sbc #$002d		sbc 	#45
.011126	c8		iny			iny
.011127	b0 f9		bcs $011122		bcs 	_DTKIDivide
.011129	69 2d 00	adc #$002d		adc 	#45
.01112c	20 35 11	jsr $011135		jsr 	_DTKIOutA 						; output low.
.01112f	98		tya			tya
.011130	20 35 11	jsr $011135		jsr 	_DTKIOutA 						; output high
.011133	7a		ply			ply
.011134	60		rts			rts
.011135					_DTKIOutA:
.011135	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011138	f0 10		beq $01114a		beq 	_DTKIOutExit
.01113a	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01113d	90 04		bcc $011143		bcc 	_DTKIOutAlpha
.01113f	38		sec			sec  									; adjust for 0-9
.011140	e9 4b 00	sbc #$004b		sbc 	#$4B
.011143					_DTKIOutAlpha:
.011143	18		clc			clc										; adjust for A-Z
.011144	69 60 00	adc #$0060		adc 	#96
.011147	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01114a					_DTKIOutExit:
.01114a	60		rts			rts
.01114b					_DTKDecodeKeyword:
.01114b	48		pha			pha
.01114c	da		phx			phx
.01114d	5a		phy			phy
.01114e	a8		tay			tay 									; save token ID in Y
.01114f	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011152	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011155	48		pha			pha 									; save this flag on a stack
.011156	5a		phy			phy 									; save the token ID
.011157	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.01115a	d0 19		bne $011175		bne 	_DTKNotSpecial1
.01115c	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01115e	88		dey			dey
.01115f	b9 00 00	lda $0000,y		lda 	$0000,y
.011162	29 ff 00	and #$00ff		and 	#$00FF
.011165	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011168	f0 0b		beq $011175		beq 	_DTKNotSpecial1
.01116a	c9 3a 00	cmp #$003a		cmp 	#":"
.01116d	f0 06		beq $011175		beq 	_DTKNotSpecial1
.01116f	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011172	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011175					_DTKNotSpecial1:
.011175	68		pla			pla
.011176	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011179	a8		tay			tay 									; into Y.
.01117a	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01117d					_DTKDWorkThrough:
.01117d	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01117e	f0 0f		beq $01118f		beq 	_DTKDFound
.011180	86 08		stx $08			stx 	DTemp1
.011182	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.011186	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011189	18		clc			clc
.01118a	65 08		adc $08			adc 	DTemp1
.01118c	aa		tax			tax
.01118d	80 ee		bra $01117d		bra 	_DTKDWorkThrough
.01118f					_DTKDFound:
.01118f	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.011193	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011196	3a		dec a			dec 	a
.011197	a8		tay			tay 									; put in Y
.011198					_DTKOut:
.011198	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.01119c	29 ff 00	and #$00ff		and 	#$00FF
.01119f	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111a2	e8		inx			inx
.0111a3	88		dey			dey
.0111a4	d0 f2		bne $011198		bne 	_DTKOut
.0111a6	68		pla			pla 									; trailing space.
.0111a7	d0 06		bne $0111af		bne 	_DTKNotSpecial2
.0111a9	a9 20 00	lda #$0020		lda 	#" "
.0111ac	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111af					_DTKNotSpecial2:
.0111af	7a		ply			ply
.0111b0	fa		plx			plx
.0111b1	68		pla			pla
.0111b2	60		rts			rts
.0111b3					ScanIndent:
.0111b3	48		pha			pha
.0111b4	5a		phy			phy
.0111b5	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0111b7	85 2e		sta $2e			sta 	DIndent2
.0111b9	98		tya			tya
.0111ba	18		clc			clc 									; point to code.
.0111bb	69 04 00	adc #$0004		adc 	#4
.0111be	a8		tay			tay
.0111bf					_SILoop:
.0111bf	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0111c2	f0 35		beq $0111f9		beq 	_SIExit
.0111c4	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.0111c7	b0 08		bcs $0111d1		bcs 	_SICheckKeyword
.0111c9	98		tya			tya 									; skip string.
.0111ca	18		clc			clc
.0111cb	79 00 00	adc $0000,y		adc 	$0000,y
.0111ce	a8		tay			tay
.0111cf	80 ee		bra $0111bf		bra 	_SILoop
.0111d1					_SICheckKeyword:
.0111d1	29 00 e0	and #$e000		and 	#$E000
.0111d4	c9 00 20	cmp #$2000		cmp 	#$2000
.0111d7	f0 04		beq $0111dd		beq 	_SIFoundKeyword
.0111d9					_SIAdvance:
.0111d9	c8		iny			iny 									; if not, loop round.
.0111da	c8		iny			iny
.0111db	80 e2		bra $0111bf		bra 	_SILoop
.0111dd					_SIFoundKeyword:
.0111dd	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0111e0	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0111e3	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0111e6	f0 0d		beq $0111f5		beq 	_SIKeyPlus
.0111e8	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0111eb	d0 ec		bne $0111d9		bne 	_SIAdvance
.0111ed	c6 2c		dec $2c			dec 	DIndent
.0111ef	10 e8		bpl $0111d9		bpl 	_SIAdvance
.0111f1	64 2c		stz $2c			stz 	DIndent
.0111f3	80 e4		bra $0111d9		bra 	_SIAdvance
.0111f5					_SIKeyPlus:
.0111f5	e6 2c		inc $2c			inc 	DIndent
.0111f7	80 e0		bra $0111d9		bra 	_SIAdvance
.0111f9					_SIExit:
.0111f9	7a		ply			ply
.0111fa	68		pla			pla
.0111fb	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.0111fc					Function_PRINT:
.0111fc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0111fe	f0 33		beq $011233			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011200	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011203	f0 2e		beq $011233			beq 	_FPRExitCR
.011205	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011208	f0 23		beq $01122d			beq 	_FPRSkipLoop
.01120a	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.01120d	f0 1b		beq $01122a			beq 	_FPRNewLine
.01120f	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.011212	f0 11		beq $011225			beq 	_FPRTab
.011214					_FPRExpression:
.011214	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011217	b0 06		bcs $01121f			bcs 	_FPRHaveString
.011219	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01121c	20 cc 0d	jsr $010dcc			jsr 	ConvertToString
.01121f					_FPRHaveString:
.01121f	a8		tay				tay 								; print the basic String.
.011220	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.011223	80 d7		bra $0111fc			bra 	Function_Print 				; and go round again.
.011225					_FPRTab:
.011225	20 78 f0	jsr $01f078			jsr 	HWTab
.011228	80 03		bra $01122d			bra 	_FPRSkipLoop
.01122a					_FPRNewLine:
.01122a	20 65 f0	jsr $01f065			jsr 	HWNewLine
.01122d					_FPRSkipLoop:
.01122d	e6 06		inc $06				inc 	DCodePtr
.01122f	e6 06		inc $06				inc 	DCodePtr
.011231	80 c9		bra $0111fc			bra 	Function_Print
.011233					_FPRExitCR:
.011233	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011235	88		dey				dey
.011236	88		dey				dey
.011237	b9 00 00	lda $0000,y			lda 	$0000,y
.01123a	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01123d	f0 08		beq $011247			beq 	_FPRExit
.01123f	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.011242	f0 03		beq $011247			beq 	_FPRExit
.011244	20 65 f0	jsr $01f065			jsr 	HWNewLine 					; print a new line.
.011247					_FPRExit:
.011247	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011248					Function_IF:
.011248	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.01124b	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01124d	05 08		ora $08				ora 	DTemp1
.01124f	a8		tay				tay 								; success flag in Y.
.011250	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011252	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.011255	d0 32		bne $011289			bne 	_FIFExtended 				; if so, go to the extended IF.
.011257	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011259	e6 06		inc $06				inc 	DCodePtr
.01125b	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01125e	f0 0f		beq $01126f			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011260	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011262	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011265	90 21		bcc $011288			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011267	c9 00 c0	cmp #$c000			cmp 	#$C000
.01126a	b0 1c		bcs $011288			bcs 	_FIFContinue
.01126c	4c fe 14	jmp $0114fe			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01126f					_FIFEndOfLine:
.01126f	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011271	f0 15		beq $011288			beq 	_FIFContinue 				; if done so, continue.
.011273	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011276	90 06		bcc $01127e			bcc 	_FIFStringConstant
.011278	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.01127a	e6 06		inc $06				inc 	DCodePtr
.01127c	80 f1		bra $01126f			bra 	_FIFEndOfLine
.01127e					_FIFStringConstant:
.01127e	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011281	18		clc				clc
.011282	65 06		adc $06				adc 	DCodePtr
.011284	85 06		sta $06				sta 	DCodePtr
.011286	80 e7		bra $01126f			bra 	_FIFEndOfLine
.011288					_FIFContinue:
.011288	60		rts				rts
.011289					_FIFExtended:
.011289	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.01128b	e6 2a		inc $2a				inc 	DStack
.01128d	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.011290	a6 2a		ldx $2a				ldx 	DStack
.011292	95 00		sta $00,x			sta 	$00,x
.011294	98		tya				tya 								; see if the test was passed.
.011295	f0 01		beq $011298			beq 	_FIXSkip 					; if zero then it has failed.
.011297	60		rts				rts 								; test passed, so continue executing
.011298					_FIXSkip:
.011298	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.01129b	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.01129e	20 fe 12	jsr $0112fe			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0112a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0112a3	e6 06		inc $06				inc 	DCodePtr
.0112a5	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0112a8	d0 04		bne $0112ae			bne 	_FIXNoThrow
.0112aa	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0112ac	c6 2a		dec $2a				dec 	DStack
.0112ae					_FIXNoThrow:
.0112ae	60		rts				rts
.0112af					Handler_ELSE:
.0112af	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0112b1	b5 00		lda $00,x			lda 	$00,x
.0112b3	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0112b6	d0 12		bne $0112ca			bne 	_HEBadStructure
.0112b8	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.0112bb	a2 00 00	ldx #$0000			ldx 	#$0000
.0112be	20 fe 12	jsr $0112fe			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0112c1	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0112c3	e6 06		inc $06				inc 	DCodePtr
.0112c5	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0112c7	c6 2a		dec $2a				dec 	DStack
.0112c9	60		rts				rts
.0112ca					_HEBadStructure:
.0112ca	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0112cd	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0112d5	68 6f 75 74 20 49 66 00
.0112dd					Handler_ENDIF:
.0112dd	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0112df	b5 00		lda $00,x			lda 	$00,x
.0112e1	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0112e4	d0 05		bne $0112eb			bne 	_HEIBadStructure
.0112e6	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0112e8	c6 2a		dec $2a				dec 	DStack
.0112ea	60		rts				rts
.0112eb					_HEIBadStructure:
.0112eb	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0112ee	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0112f6	68 6f 75 74 20 49 66 00
.0112fe					ScanForwardLevel:
.0112fe	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011300	86 0a		stx $0a				stx 	DTemp1+2
.011302	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011304	85 0c		sta $0c				sta 	DTemp2
.011306	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011309					_SFLLoop:
.011309	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01130c	d0 0d		bne $01131b			bne 	_SFLNoCheck 				; we're in a substructure.
.01130e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011310	f0 09		beq $01131b			beq 	_SFLNoCheck 				; don't check zero
.011312	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011314	f0 04		beq $01131a			beq 	_SFLFound
.011316	c5 0a		cmp $0a				cmp 	DTemp1+2
.011318	d0 01		bne $01131b			bne 	_SFLNoCheck
.01131a					_SFLFound:
.01131a	60		rts				rts
.01131b					_SFLNoCheck:
.01131b	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01131d	f0 4f		beq $01136e			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01131f	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011322	90 40		bcc $011364			bcc 	_SFLSkipString 				; then handle that.
.011324	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011326	e6 06		inc $06				inc 	DCodePtr
.011328	a8		tay				tay 								; put token in Y temporarily.
.011329	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01132c	c9 00 20	cmp #$2000			cmp 	#$2000
.01132f	d0 d8		bne $011309			bne 	_SFLLoop
.011331	98		tya				tya 								; get the token back.
.011332	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011335	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011338	f0 cf		beq $011309			beq 	_SFLLoop
.01133a	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01133d	90 ca		bcc $011309			bcc 	_SFLLoop
.01133f	e8		inx				inx 								; increment the level.
.011340	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011343	f0 c4		beq $011309			beq 	_SFLLoop
.011345	ca		dex				dex 								; decrement the level
.011346	ca		dex				dex 								; one overdoes the previous inx.
.011347	10 c0		bpl $011309			bpl 	_SFLLoop 					; if gone -ve then error.
.011349					_SFLError:
.011349	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.01134b	85 22		sta $22				sta 	DLineNumber
.01134d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011350	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011358	65 20 69 6d 62 61 6c 61 6e 63 65 00
.011364					_SFLSkipString:
.011364	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011367	18		clc				clc
.011368	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.01136a	85 06		sta $06				sta 	DCodePtr
.01136c	80 9b		bra $011309			bra 	_SFLLoop 					; go round again.
.01136e					_SFLNextLine:
.01136e	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011370	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011373	f0 d4		beq $011349			beq 	_SFLError 					; if zero, then there's no more code to search.
.011375	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011378	85 22		sta $22				sta 	DLineNumber
.01137a	18		clc				clc
.01137b	a5 06		lda $06				lda 	DCodePtr
.01137d	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011380	85 06		sta $06				sta 	DCodePtr
.011382	80 85		bra $011309			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.011384					Command_FOR:
.011384	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011386	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011389	d0 60		bne $0113eb			bne		_CFOBad
.01138b	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.01138e	b0 15		bcs $0113a5			bcs 	_CFOExists
.011390	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011392	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011395	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011398	48		pha				pha 								; save on stack
.011399					_CFOSkipToken:
.011399	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01139b	e6 06		inc $06				inc 	DCodePtr
.01139d	e6 06		inc $06				inc 	DCodePtr
.01139f	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0113a2	d0 f5		bne $011399			bne 	_CFOSkipToken
.0113a4	68		pla				pla 								; restore address
.0113a5					_CFOExists:
.0113a5	48		pha				pha 								; push variable address on stack
.0113a6	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0113a9	20 af 04	jsr $0104af			jsr 	ExpectToken
.0113ac	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.0113af	bb		tyx				tyx 								; put high value in X
.0113b0	7a		ply				ply 								; address in Y
.0113b1	99 00 00	sta $0000,y			sta 	$0000,y
.0113b4	8a		txa				txa
.0113b5	99 02 00	sta $0002,y			sta 	$0002,y
.0113b8	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.0113bb	20 af 04	jsr $0104af			jsr 	ExpectToken
.0113be	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0113c0	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0113c2	95 02		sta $02,x			sta 	$02,x
.0113c4	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0113c6	95 04		sta $04,x			sta 	$04,x
.0113c8	98		tya				tya 								; save variable address at +6
.0113c9	95 06		sta $06,x			sta 	$06,x
.0113cb	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.0113ce	95 08		sta $08,x			sta 	$08,x
.0113d0	8a		txa				txa 								; add 8 to stack position
.0113d1	18		clc				clc
.0113d2	69 08 00	adc #$0008			adc 	#8
.0113d5	85 2a		sta $2a				sta 	DStack
.0113d7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0113da	b2 06		lda ($06)			lda 	(DCodePtr)
.0113dc	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.0113df	d0 09		bne $0113ea			bne 	_CFONoStep
.0113e1	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.0113e4	20 af 04	jsr $0104af			jsr 	ExpectToken
.0113e7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.0113ea					_CFONoStep:
.0113ea	60		rts				rts
.0113eb					_CFOBad:
.0113eb	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113ee	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0113f6	76 61 72 69 61 62 6c 65 00
.0113ff					Command_NEXT:
.0113ff	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011401	b5 00		lda $00,x			lda 	$00,x
.011403	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011406	f0 14		beq $01141c			beq 	_CNXOk
.011408	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01140b	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011413	68 6f 75 74 20 46 6f 72 00
.01141c					_CNXOk:
.01141c	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01141e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011421	90 22		bcc $011445			bcc 	_CNXNoVariable
.011423	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.011426	90 08		bcc $011430			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011428	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.01142a	ca		dex				dex
.01142b	ca		dex				dex
.01142c	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01142e	f0 15		beq $011445			beq 	_CNXNoVariable 				; then continue
.011430					_CNXNextVar:
.011430	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011433	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01143b	20 76 61 72 69 61 62 6c 65 00
.011445					_CNXNoVariable:
.011445	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011447	48		pha				pha
.011448	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.01144a	38		sec				sec
.01144b	e9 08 00	sbc #$0008			sbc 	#8
.01144e	85 2a		sta $2a				sta 	DStack
.011450	aa		tax				tax 								; X points to the stack.
.011451	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011453	85 06		sta $06				sta 	DCodePtr
.011455	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.011458	5a		phy				phy 								; save the target on the stack
.011459	48		pha				pha
.01145a	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01145d	85 08		sta $08				sta 	DTemp1
.01145f	64 0a		stz $0a				stz 	DTemp1+2
.011461	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011463	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.011466	d0 0b		bne $011473			bne 	_CNXNoStep
.011468	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.01146a	e6 06		inc $06				inc 	DCodePtr
.01146c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.01146f	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.011471	84 0a		sty $0a				sty 	DTemp1+2
.011473					_CNXNoStep:
.011473	68		pla				pla 								; save the Target in DTemp2
.011474	85 0c		sta $0c				sta 	DTemp2
.011476	68		pla				pla
.011477	85 0e		sta $0e				sta 	DTemp2+2
.011479	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.01147b	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.01147d	a8		tay				tay
.01147e	18		clc				clc
.01147f	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011482	65 08		adc $08				adc 	DTemp1
.011484	99 00 00	sta $0000,y			sta 	$0000,y
.011487	b9 02 00	lda $0002,y			lda 	$0002,y
.01148a	65 0a		adc $0a				adc 	DTemp1+2
.01148c	99 02 00	sta $0002,y			sta 	$0002,y
.01148f	38		sec				sec
.011490	a5 0c		lda $0c				lda 	DTemp2
.011492	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011495	85 0c		sta $0c				sta 	DTemp2
.011497	a5 0e		lda $0e				lda 	DTemp2+2
.011499	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01149c	85 0e		sta $0e				sta 	DTemp2+2
.01149e	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0114a0	f0 0a		beq $0114ac			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0114a2	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0114a4	45 0a		eor $0a				eor 	DTemp1+2
.0114a6	10 04		bpl $0114ac			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0114a8	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0114a9	85 06		sta $06				sta 	DCodePtr
.0114ab	60		rts				rts
.0114ac					_CNXLoopAgain:
.0114ac	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0114ad	18		clc				clc
.0114ae	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0114b0	aa		tax				tax
.0114b1	69 08 00	adc #$0008			adc 	#8
.0114b4	85 2a		sta $2a				sta 	DStack
.0114b6	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0114b8	85 22		sta $22				sta 	DLineNumber
.0114ba	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.0114bb					Function_ONGOTO:
.0114bb	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.0114be	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0114c1	d0 25		bne $0114e8			bne 	_FOGoFail
.0114c3	c9 00 00	cmp #$0000			cmp 	#0
.0114c6	f0 20		beq $0114e8			beq 	_FOGoFail 					; we start with index = 1
.0114c8	48		pha				pha 								; save count on stack
.0114c9	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.0114cc	20 af 04	jsr $0104af			jsr 	ExpectToken
.0114cf	fa		plx				plx 								; put count in X.
.0114d0					_FOGoLoop:
.0114d0	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.0114d2	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0114d5	90 73		bcc $01154a			bcc 	FGOFail 					; if not, then we have an error.
.0114d7	c9 00 c0	cmp #$c000			cmp 	#$C000
.0114da	b0 6e		bcs $01154a			bcs 	FGOFail
.0114dc	ca		dex				dex 								; subtract one, if done, call GOTO code
.0114dd	f0 1f		beq $0114fe			beq 	Function_GOTO
.0114df	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0114e1	e6 06		inc $06				inc 	DCodePtr
.0114e3	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; expect a comma
.0114e6	80 e8		bra $0114d0			bra 	_FOGoLoop 					; and loop round.
.0114e8					_FOGoFail:
.0114e8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114eb	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0114f3	47 6f 74 6f 20 76 61 6c 75 65 00
.0114fe					Function_GOTO:
.0114fe	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011500	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011503	90 45		bcc $01154a			bcc 	FGOFail 					; we don't do calculate line numbers.
.011505	c9 00 c0	cmp #$c000			cmp 	#$C000
.011508	b0 40		bcs $01154a			bcs 	FGOFail
.01150a	38		sec				sec 								; convert to 0-32767
.01150b	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01150e	aa		tax				tax
.01150f	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.011512	18		clc				clc
.011513	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011515	a8		tay				tay
.011516					_FGOSearch:
.011516	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011519	f0 18		beq $011533			beq 	_FGOUnknown
.01151b	8a		txa				txa 								; does it match line number ?
.01151c	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01151f	f0 08		beq $011529			beq 	_FGOFound 					; yes, then found.
.011521	98		tya				tya 								; no follow the link
.011522	18		clc				clc
.011523	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011526	a8		tay				tay
.011527	80 ed		bra $011516			bra 	_FGOSearch 					; and keep looking
.011529					_FGOFound:
.011529	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01152b	98		tya				tya 								; Y + 4 is the code pointer.
.01152c	18		clc				clc 								; (skipping link and line #)
.01152d	69 04 00	adc #$0004			adc 	#4
.011530	85 06		sta $06				sta 	DCodePtr
.011532	60		rts				rts									; and continue
.011533					_FGOUnknown:
.011533	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011536	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01153e	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.01154a					FGOFail:
.01154a	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01154d	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011555	20 4e 75 6d 62 65 72 00
.01155d					Function_GOSUB:
.01155d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01155f	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011561	18		clc				clc
.011562	69 02 00	adc #$0002			adc 	#2
.011565	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011567	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011569	95 04		sta $04,x			sta 	$04,x
.01156b	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.01156e	95 06		sta $06,x			sta 	$06,x
.011570	8a		txa				txa 								; advance stack by 6.
.011571	18		clc				clc
.011572	69 06 00	adc #$0006			adc 	#6
.011575	85 2a		sta $2a				sta 	DStack
.011577	80 85		bra $0114fe			bra 	Function_GOTO 				; and do a GOTO.
.011579					Function_RETURN:
.011579	a6 2a		ldx $2a				ldx 	DStack
.01157b	b5 00		lda $00,x			lda 	$00,x
.01157d	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011580	d0 11		bne $011593			bne 	_FRetFail
.011582	8a		txa				txa 								; unpick stack.
.011583	38		sec				sec
.011584	e9 06 00	sbc #$0006			sbc 	#6
.011587	85 2a		sta $2a				sta 	DStack
.011589	aa		tax				tax
.01158a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01158c	85 06		sta $06				sta 	DCodePtr
.01158e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011590	85 22		sta $22				sta 	DLineNumber
.011592	60		rts				rts
.011593					_FRetFail:
.011593	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011596	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01159e	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0115ab					Function_REPEAT:
.0115ab	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0115ad	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0115af	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0115b1	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0115b3	95 04		sta $04,x			sta 	$04,x
.0115b5	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.0115b8	95 06		sta $06,x			sta 	$06,x
.0115ba	8a		txa				txa 								; advance stack by 6.
.0115bb	18		clc				clc
.0115bc	69 06 00	adc #$0006			adc 	#6
.0115bf	85 2a		sta $2a				sta 	DStack
.0115c1	60		rts				rts
.0115c2					Function_UNTIL:
.0115c2	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0115c4	b5 00		lda $00,x			lda 	$00,x
.0115c6	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.0115c9	d0 26		bne $0115f1			bne 	_FUNFail
.0115cb	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.0115ce	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.0115d1	d0 15		bne $0115e8			bne 	_FUNExit
.0115d3	c9 00 00	cmp #$0000			cmp 	#0
.0115d6	d0 10		bne $0115e8			bne 	_FUNExit
.0115d8	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0115da	38		sec				sec
.0115db	e9 06 00	sbc #$0006			sbc 	#6
.0115de	aa		tax				tax
.0115df	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0115e1	85 06		sta $06				sta 	DCodePtr
.0115e3	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0115e5	85 22		sta $22				sta 	DLineNumber
.0115e7	60		rts				rts
.0115e8					_FUNExit:
.0115e8	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0115ea	38		sec				sec
.0115eb	e9 06 00	sbc #$0006			sbc 	#6
.0115ee	85 2a		sta $2a				sta 	DStack
.0115f0	60		rts				rts
.0115f1					_FUNFail:
.0115f1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115f4	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0115fc	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011609					Function_WHILE:
.011609	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.01160b	48		pha				pha 								; save on stack
.01160c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.01160f	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011612	d0 14		bne $011628			bne 	_FWHExecute
.011614	c9 00 00	cmp #$0000			cmp 	#0
.011617	d0 0f		bne $011628			bne 	_FWHExecute
.011619	68		pla				pla 								; throw away current instruction
.01161a	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.01161d	a2 00 00	ldx #$0000			ldx 	#0
.011620	20 fe 12	jsr $0112fe			jsr 	ScanForwardLevel 			; scan forward checking structures
.011623	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011625	e6 06		inc $06				inc 	DCodePtr
.011627	60		rts				rts
.011628					_FWHExecute:
.011628	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01162a	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.01162b	3a		dec a				dec 	a
.01162c	3a		dec a				dec 	a
.01162d	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01162f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011631	95 04		sta $04,x			sta 	$04,x
.011633	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.011636	95 06		sta $06,x			sta 	$06,x
.011638	8a		txa				txa 								; advance stack by 6.
.011639	18		clc				clc
.01163a	69 06 00	adc #$0006			adc 	#6
.01163d	85 2a		sta $2a				sta 	DStack
.01163f	60		rts				rts
.011640					Function_WEND:
.011640	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011642	b5 00		lda $00,x			lda 	$00,x
.011644	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.011647	d0 11		bne $01165a			bne 	_FWEFail
.011649	8a		txa				txa 								; unpick stack and always loop back.
.01164a	38		sec				sec 								; we do the check at the top.
.01164b	e9 06 00	sbc #$0006			sbc 	#6
.01164e	85 2a		sta $2a				sta 	DStack
.011650	aa		tax				tax
.011651	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011653	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011655	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011657	85 22		sta $22				sta 	DLineNumber
.011659	60		rts				rts
.01165a					_FWEFail:
.01165a	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01165d	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011665	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011670					Function_END:
.011670	02 00		cop #$00			cop 	#0
.011672					Function_RUN:
.011672	20 d9 16	jsr $0116d9			jsr 	Function_CLEAR 				; clear all variables.
.011675	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011677	18		clc				clc
.011678	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.01167b					_FRun_NextLineNumber:
.01167b	a8		tay				tay 								; put in Y
.01167c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01167f	f0 ef		beq $011670			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011681	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011684	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011686	98		tya				tya 								; get address back
.011687	18		clc				clc 								; skip over the link/line number
.011688	69 04 00	adc #$0004			adc 	#4
.01168b	85 06		sta $06				sta 	DCodePtr
.01168d					_FRun_NextInstruction:
.01168d	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.01168f	20 7f f0	jsr $01f07f			jsr 	HWCheckBreak 				; break key pressed.
.011692	d0 3c		bne $0116d0			bne 	_FRun_Break
.011694	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011696	f0 32		beq $0116ca			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011698	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.01169b	f0 18		beq $0116b5			beq 	_FRun_Colon
.01169d	a8		tay				tay 								; save in Y
.01169e	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0116a1	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0116a4	d0 15		bne $0116bb			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0116a6	98		tya				tya 								; get token back
.0116a7	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0116aa	0a		asl a				asl 	a 							; double it into X
.0116ab	aa		tax				tax
.0116ac	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0116ae	e6 06		inc $06				inc 	DCodePtr
.0116b0	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0116b3	80 d8		bra $01168d			bra 	_FRun_NextInstruction 		; do the following instruction.
.0116b5					_FRun_Colon:
.0116b5	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0116b7	e6 06		inc $06				inc 	DCodePtr
.0116b9	80 d2		bra $01168d			bra 	_FRun_NextInstruction 		; do the following instruction.
.0116bb					_FRun_TryLET:
.0116bb	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.0116bd	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116c0	90 05		bcc $0116c7			bcc		_FRunSyntax 				; no, must be syntax.
.0116c2	20 5c 0f	jsr $010f5c			jsr 	Function_LET 				; try as a LET.
.0116c5	80 c6		bra $01168d			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0116c7					_FRunSyntax:
.0116c7	82 d5 ed	brl $01049f			brl 	SyntaxError
.0116ca					_FRun_EndInstruction:
.0116ca	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.0116cc	1a		inc a				inc 	a 							; go to link for next line
.0116cd	1a		inc a				inc 	a
.0116ce	80 ab		bra $01167b			bra 	_FRun_NextLineNumber
.0116d0					_FRun_Break:
.0116d0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116d3	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.0116d9					Function_CLEAR:
.0116d9	20 e5 16	jsr $0116e5			jsr 	ClearVariablesPointersAndStacks
.0116dc	60		rts				rts
.0116dd					Function_STOP:
.0116dd	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116e0	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.0116e5					ClearVariablesPointersAndStacks:
.0116e5	a9 80 00	lda #$0080			lda 	#BASStack
.0116e8	85 2a		sta $2a				sta 	DStack
.0116ea	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.0116ec	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.0116ef	a9 00 00	lda #$0000			lda 	#$0000
.0116f2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0116f4	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0116f6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0116f9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0116fb	20 22 17	jsr $011722			jsr 	FindCodeEnd 				; find where the program ends.
.0116fe	a8		tay				tay 								; Y points to it.
.0116ff	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011702	99 02 00	sta $0002,y			sta 	$0002,y
.011705	99 04 00	sta $0004,y			sta 	$0004,y
.011708	98		tya				tya 								; start of working memory up
.011709	18		clc				clc
.01170a	69 06 00	adc #$0006			adc 	#6
.01170d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011710	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011712	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011715					_FCLoop:
.011715	a9 00 00	lda #$0000			lda 	#$0000
.011718	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01171a	c8		iny				iny
.01171b	c8		iny				iny
.01171c	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.01171f	d0 f4		bne $011715			bne 	_FCLoop
.011721	60		rts				rts
.011722					FindCodeEnd:
.011722	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.011725	18		clc				clc
.011726	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011728	a8		tay				tay
.011729					_FCELoop:
.011729	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.01172c	f0 08		beq $011736			beq 	_FCEExit
.01172e	98		tya				tya 								; add offset
.01172f	18		clc				clc
.011730	79 00 00	adc $0000,y			adc 	$0000,y
.011733	a8		tay				tay
.011734	80 f3		bra $011729			bra 	_FCELoop
.011736					_FCEExit:
.011736	98		tya				tya 								; return in A
.011737	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011738					Function_Dim:
.011738	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01173a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01173d	f0 3b		beq $01177a			beq		_FDIMNotArray 				; no, error.
.01173f	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.011742	b0 41		bcs $011785			bcs 	_FDIMExists 				; if it does, that's an error.
.011744	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011746	48		pha				pha
.011747	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011749	48		pha				pha
.01174a					_FDIMSkip:
.01174a	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.01174c	e6 06		inc $06				inc 	DCodePtr
.01174e	e6 06		inc $06				inc 	DCodePtr
.011750	29 00 08	and #$0800			and 	#IDContMask
.011753	d0 f5		bne $01174a			bne 	_FDIMSkip
.011755	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.011758	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check the ) following.
.01175b	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.01175e	d0 3b		bne $01179b			bne 	_FDIMSize
.011760	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011763	f0 36		beq $01179b			beq 	_FDIMSize
.011765	7a		ply				ply 								; restore HashTablePtr
.011766	84 20		sty $20				sty 	DHashTablePtr
.011768	7a		ply				ply 								; so now A is the high index, Y points to the token
.011769	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.01176c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.01176e	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.011771	d0 06		bne $011779			bne 	_FDIMExit
.011773	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011775	e6 06		inc $06				inc 	DCodePtr
.011777	80 bf		bra $011738			bra 	Function_DIM 				; and do another
.011779					_FDIMExit:
.011779	60		rts				rts
.01177a					_FDIMNotArray:
.01177a	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01177d	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011785					_FDIMExists:
.011785	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011788	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011790	65 64 69 6d 65 6e 73 69 6f 6e 00
.01179b					_FDIMSize:
.01179b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01179e	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0117a6	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.0117ac					Function_COLLECT:
.0117ac	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0117ae	85 0c		sta $0c				sta 	DTemp2
.0117b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0117b3	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0117b5	85 0e		sta $0e				sta 	DTemp2+2
.0117b7	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0117b9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0117bb					_FCNextPass:
.0117bb	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0117bd	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0117bf	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0117c1	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0117c4	18		clc				clc
.0117c5	65 02		adc $02				adc 	DBaseAddress
.0117c7	a8		tay				tay 								; put in Y
.0117c8	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0117cb					_FCO1:
.0117cb	20 f1 17	jsr $0117f1			jsr  	COLLECTScanVariable 		; scan that one.
.0117ce	c8		iny				iny 	 							; go to next pointer
.0117cf	c8		iny				iny
.0117d0	ca		dex				dex
.0117d1	d0 f8		bne $0117cb			bne 	_FCO1 						; until done all 16.
.0117d3	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0117d6					_FCO2:
.0117d6	20 05 18	jsr $011805			jsr  	COLLECTScanArray 			; scan that one.
.0117d9	c8		iny				iny 	 							; go to next pointer
.0117da	c8		iny				iny
.0117db	ca		dex				dex
.0117dc	d0 f8		bne $0117d6			bne 	_FCO2 						; until done all 16.
.0117de	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0117e0	f0 0e		beq $0117f0			beq		_FCExit 					; if finished then exit.
.0117e2	48		pha				pha 								; save the target address
.0117e3	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0117e5	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0117e7	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make the string concrete.
.0117ea	7a		ply				ply 								; restore the string.
.0117eb	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.0117ee	80 cb		bra $0117bb			bra		_FCNextPass
.0117f0					_FCExit:
.0117f0	60		rts				rts
.0117f1					COLLECTScanVariable:
.0117f1	da		phx				phx 								; save XY
.0117f2	5a		phy				phy
.0117f3					_CSVLoop:
.0117f3	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0117f6	f0 0a		beq $011802			beq 	_CSVExit
.0117f8	a8		tay				tay 								; put new address into Y
.0117f9	18		clc				clc 								; which is four on.
.0117fa	69 04 00	adc #$0004			adc 	#4
.0117fd	20 26 18	jsr $011826			jsr 	COLLECTCheck
.011800	80 f1		bra $0117f3			bra 	_CSVLoop
.011802					_CSVExit:
.011802	7a		ply				ply
.011803	fa		plx				plx
.011804	60		rts				rts
.011805					COLLECTScanArray:
.011805	da		phx				phx 								; save XY
.011806	5a		phy				phy
.011807					_CSALoop:
.011807	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01180a	f0 17		beq $011823			beq 	_CSAExit
.01180c	a8		tay				tay 								; put new address in Y
.01180d	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011810	aa		tax				tax
.011811	e8		inx				inx									; +1 as one more data element.
.011812	98		tya				tya 								; point A to first element, at +6
.011813	18		clc				clc
.011814	69 06 00	adc #$0006			adc 	#6
.011817					_CSADoAllStrings:
.011817	20 26 18	jsr $011826			jsr 	COLLECTCheck 				; collect check the first.
.01181a	1a		inc a				inc 	a 							; advance the pointer.
.01181b	1a		inc a				inc 	a
.01181c	1a		inc a				inc 	a
.01181d	1a		inc a				inc 	a
.01181e	ca		dex				dex
.01181f	d0 f6		bne $011817			bne 	_CSADoAllStrings 			; until all strings are done.
.011821	80 e4		bra $011807			bra 	_CSALoop
.011823					_CSAExit:
.011823	7a		ply				ply
.011824	fa		plx				plx
.011825	60		rts				rts
.011826					COLLECTCheck:
.011826	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011828	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.01182a	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.01182c	90 0a		bcc $011838			bcc 	_COCExit
.01182e	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011830	b0 06		bcs $011838			bcs 	_COCExit
.011832	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011834	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011836	85 14		sta $14				sta 	DSignCount
.011838					_COCExit:
.011838	a5 0a		lda $0a				lda 	DTemp1+2
.01183a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.01183b					Command_POKE:
.01183b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.01183e	48		pha				pha	 								; save on stack
.01183f	5a		phy				phy
.011840	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.011843	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011846	fa		plx				plx 								; pull address and store in DTemp1
.011847	86 0a		stx $0a				stx 	DTemp1+2
.011849	fa		plx				plx
.01184a	86 08		stx $08				stx 	DTemp1+0
.01184c	e2 20		sep #$20			sep 	#$20 						; byte mode
.01184e	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011850	c2 20		rep #$20			rep 	#$20 						; word mode
.011852	60		rts				rts
.011853					Command_DOKE:
.011853	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011856	48		pha				pha	 								; save on stack
.011857	5a		phy				phy
.011858	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.01185b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.01185e	fa		plx				plx 								; pull address and store in DTemp1
.01185f	86 0a		stx $0a				stx 	DTemp1+2
.011861	fa		plx				plx
.011862	86 08		stx $08				stx 	DTemp1+0
.011864	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011866	60		rts				rts
.011867					Command_LOKE:
.011867	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.01186a	48		pha				pha	 								; save on stack
.01186b	5a		phy				phy
.01186c	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.01186f	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011872	fa		plx				plx 								; pull address and store in DTemp1
.011873	86 0a		stx $0a				stx 	DTemp1+2
.011875	fa		plx				plx
.011876	86 08		stx $08				stx 	DTemp1+0
.011878	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.01187a	98		tya				tya
.01187b	a0 02 00	ldy #$0002			ldy 	#2
.01187e	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011880	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.011881					Function_ASSERT:
.011881	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.011884	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011886	05 08		ora $08				ora 	Dtemp1
.011888	f0 01		beq $01188b			beq 	_FAssFail
.01188a	60		rts				rts
.01188b					_FAssFail:
.01188b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01188e	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011896	61 69 6c 65 64 00
.01189c					Function_CLS:
.01189c	20 0a f0	jsr $01f00a			jsr 	HWClearScreen
.01189f	60		rts				rts
.0118a0					Function_REM:
.0118a0	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0118a2	f0 0b		beq $0118af			beq 	_FRemSyntax 				; if 0, syntax error
.0118a4	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0118a7	b0 06		bcs $0118af			bcs 	_FRemSyntax
.0118a9	18		clc				clc 								; add to DCodePtr
.0118aa	65 06		adc $06				adc 	DCodePtr
.0118ac	85 06		sta $06				sta 	DCodePtr
.0118ae	60		rts				rts
.0118af					_FRemSyntax:
.0118af	82 ed eb	brl $01049f			brl 	SyntaxError
.0118b2					Function_LINK:
.0118b2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.0118b5	85 08		sta $08				sta 	DTemp1 						; target address
.0118b7	84 0a		sty $0a				sty 	DTemp1+2
.0118b9	7b		tdc				tda 								; work out what the actual address is
.0118ba	18		clc				clc
.0118bb	69 08 00	adc #$0008			adc 	#DTemp1
.0118be	8f f3 18 01	sta $0118f3			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.0118c2	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.0118c4	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.0118c7	48		pha				pha
.0118c8	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.0118cb	aa		tax				tax
.0118cc	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.0118cf	a8		tay				tay
.0118d0	68		pla				pla
.0118d1	22 f2 18 01	jsl $0118f2			jsl 	_FLIExecuteIt
.0118d5	5a		phy				phy 								; save Y
.0118d6	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.0118d8	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.0118db	8a		txa				txa
.0118dc	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.0118df	68		pla				pla
.0118e0	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.0118e3	c8		iny				iny 								; point to their high bytes and clear them
.0118e4	c8		iny				iny
.0118e5	a9 00 00	lda #$0000			lda 	#0
.0118e8	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.0118eb	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.0118ee	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.0118f1	60		rts				rts
.0118f2					_FLIExecuteIt:
.0118f2	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0118f5					SwitchBasicInstance:
.0118f5	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0118f7	20 0a f0	jsr $01f00a			jsr 	HWClearScreen 						; clear screen
.0118fa	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0118fd	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0118ff	86 02		stx $02				stx		DBaseAddress
.011901	84 04		sty $04				sty 	DHighAddress
.011903	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011904	48		pha				pha 										; then copy it into B.
.011905	ab		plb				plb
.011906	ab		plb				plb
.011907	4c 72 16	jmp $011672			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.01f000	a0 02 00	ldy #$0002			ldy 	#TTest >> 16 						; code called for testing.
.01f003	a9 00 00	lda #$0000			lda 	#TTest & $FFFF
.01f006	20 c8 05	jsr $0105c8			jsr 	Tokenise
.01f009	6b		rtl				rtl

;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.01f00a					HWClearScreen:
.01f00a	48		pha				pha
.01f00b	da		phx				phx
.01f00c	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01f00f	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01f012	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f016	ca		dex				dex
.01f017	10 f6		bpl $01f00f			bpl 	_CS0
.01f019	64 28		stz $28				stz 	DCursor
.01f01b	a9 66 20	lda #$2066			lda 	#$2000+HWCursorCharacter
.01f01e	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01f022	fa		plx				plx
.01f023	68		pla				pla
.01f024	60		rts				rts
.01f025					HWPrintChar:
.01f025	48		pha				pha
.01f026	da		phx				phx
.01f027	5a		phy				phy
.01f028	29 ff 00	and #$00ff			and 	#$00FF
.01f02b	c9 61 00	cmp #$0061			cmp 	#"a"
.01f02e	90 0c		bcc $01f03c			bcc 	_HWPCNotLC
.01f030	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01f033	b0 07		bcs $01f03c			bcs 	_HWPCNotLC
.01f035	38		sec				sec
.01f036	e9 20 00	sbc #$0020			sbc 	#32
.01f039	09 80 00	ora #$0080			ora 	#128
.01f03c					_HWPCNotLC:
.01f03c	29 bf 00	and #$00bf			and 	#$BF
.01f03f	a6 28		ldx $28				ldx 	DCursor
.01f041	e2 20		sep #$20			sep 	#$20
.01f043	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f047	c2 20		rep #$20			rep 	#$20
.01f049	e8		inx				inx
.01f04a	8a		txa				txa
.01f04b	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.01f04e	d0 03		bne $01f053			bne 	_HWNotEnd
.01f050	a9 00 00	lda #$0000			lda 	#0
.01f053					_HWNotEnd:
.01f053	85 28		sta $28				sta 	DCursor
.01f055	aa		tax				tax
.01f056	a9 66 00	lda #$0066			lda 	#HWCursorCharacter
.01f059	e2 20		sep #$20			sep 	#$20
.01f05b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f05f	c2 20		rep #$20			rep 	#$20
.01f061	7a		ply				ply
.01f062	fa		plx				plx
.01f063	68		pla				pla
.01f064	60		rts				rts
.01f065					HWNewLine:
.01f065	48		pha				pha
.01f066	da		phx				phx
.01f067	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01f06a					HWMoveCursor:
.01f06a	a9 20 00	lda #$0020			lda 	#32
.01f06d	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.01f070	8a		txa				txa
.01f071	25 28		and $28				and 	DCursor
.01f073	d0 f5		bne $01f06a			bne 	HWMoveCursor
.01f075	fa		plx				plx
.01f076	68		pla				pla
.01f077	60		rts				rts
.01f078	48		pha		HWTab:	pha
.01f079	da		phx				phx
.01f07a	a2 07 00	ldx #$0007			ldx 	#7
.01f07d	80 eb		bra $01f06a			bra 	HWMoveCursor
.01f07f					HWCheckBreak:
.01f07f	af 00 80 0f	lda $0f8000			lda 	$F8000
.01f083	60		rts				rts
.01f084					HWGetKey:
.01f084	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f088	d0 fa		bne $01f084			bne 	HWGetKey
.01f08a					_HWGKWait:
.01f08a	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f08e	f0 fa		beq $01f08a			beq 	_HWGKWait
.01f090	ea		nop				nop
.01f091	60		rts				rts

;******  Return to file: ../source/start.asm

>020000	34 32 20 20 34 30 39 36		TTest:	.text '42  40960 "quoTed" "" "x"  >= * aBcD',0
>020008	30 20 22 71 75 6f 54 65 64 22 20 22 22 20 22 78
>020018	22 20 20 3e 3d 20 2a 20 61 42 63 44 00
.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	74 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 26 00 01 00 01 c0 06 22
>024108	63 40 25 32 18 c0 06 22 2a 40 25 32 19 c0 06 22
>024118	26 40 25 32 3e 3e 01 40 23 32 05 40 00 00 1e 00
>024128	02 00 35 3e 0a 00 06 42 65 66 6f 72 65 00 23 32
>024138	01 c0 23 32 18 c0 23 32 19 c0 00 00 3e 00 03 00
>024148	3f 3e 02 10 00 40 0a 24 0f 40 0c 26 00 50 25 32
>024158	2b 3e 26 00 23 54 68 69 73 20 69 73 20 69 6e 20
>024168	74 68 65 20 73 74 61 72 74 2e 61 73 6d 20 72 6f
>024178	75 74 69 6e 65 20 3a 29 00 00 1c 00 04 00 35 3e
>024188	08 00 05 41 66 74 65 72 23 32 01 c0 23 32 18 c0
>024198	23 32 19 c0 00 00 14 00 09 00 3e 3e 64 40 23 32
>0241a8	85 40 25 32 36 3e aa 40 00 00 12 00 0b 00 43 3c
>0241b8	09 c0 06 22 01 40 29 38 0f 67 00 00 0a 00 0d 00
>0241c8	48 3a 09 c0 00 00 0c 00 14 00 18 c0 06 22 00 40
>0241d8	00 00 08 00 32 00 40 3c 00 00 08 00 3c 00 35 3e
>0241e8	00 00 0e 00 46 00 45 3a 18 c0 06 22 00 40 00 00
>0241f8	12 00 50 00 43 3c 09 c0 06 22 01 40 29 38 05 40
>024208	00 00 0c 00 5a 00 01 c0 06 22 09 c0 00 00 0a 00
>024218	5f 00 48 3a 09 c0 00 00 08 00 61 00 40 3c 00 00
>024228	16 00 64 00 42 3c 26 32 18 c0 01 20 01 40 27 32
>024238	06 22 00 40 00 00 16 00 6e 00 35 3e 18 c0 23 32
>024248	08 00 04 45 76 65 6e 00 23 32 00 00 0e 00 70 00
>024258	42 3c 18 c0 05 22 05 40 00 00 0e 00 76 00 35 3e
>024268	06 00 02 3e 35 00 00 00 08 00 77 00 3a 3e 00 00
>024278	0e 00 78 00 35 3e 06 00 03 3c 3d 35 00 00 08 00
>024288	81 00 47 3a 00 00 22 00 82 00 42 3c 18 c0 06 22
>024298	08 40 46 3a 35 3e 10 00 0c 49 74 27 73 20 65 69
>0242a8	67 68 74 20 21 00 00 00 08 00 85 00 3a 3e 00 00
>0242b8	14 00 86 00 35 3e 18 c0 23 32 06 00 03 6f 64 64
>0242c8	23 32 00 00 0c 00 87 00 19 c0 06 22 18 c0 00 00
>0242d8	30 00 88 00 40 3c 25 32 35 3e 19 c0 24 32 04 00
>0242e8	01 20 24 32 25 32 19 c0 06 22 19 c0 0b 24 01 40
>0242f8	25 32 45 3a 19 c0 06 22 00 40 25 32 35 3e 00 00
>024308	08 00 8c 00 47 3a 00 00 10 00 96 00 18 c0 06 22
>024318	18 c0 0a 24 01 40 00 00 0e 00 a0 00 45 3a 18 c0
>024328	05 22 0a 40 00 00 12 00 aa 00 43 3c 09 c0 06 22
>024338	00 40 29 38 ff 40 00 00 1c 00 c8 00 3b 3e 1e 10
>024348	00 40 0a 24 09 c0 0a 24 40 40 0c 26 18 40 23 32
>024358	09 c0 00 00 0a 00 d2 00 48 3a 09 c0 00 00 08 00
>024368	ac 2b 30 3e 00 00 00 00 ee ee ee ee 00 00 00 00
>024378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1991 times (31856 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
