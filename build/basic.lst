
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Mon Jun 17 16:15:21 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 35 1b 01	jmp $011b35			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	cc 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	90 09					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	a0 09					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	b0 09					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	f4 09					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	5b 0a					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	c0 09					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	3d 0a					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	1f 0a					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	da 09					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	da 08					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	5b 09					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	67 0b					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	e4 0a					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	5b 0b					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	6c 09					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	7e 09					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	f5 0b					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	d5 0b					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	b1 0b					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	9b 0b					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	0f 0e					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	2f 0f					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	2f 0c					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	67 0c					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	9b 0c					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	c3 0d					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	dd 0d					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	f4 0d					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	98 10					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	56 10					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	d7 0c					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	6e 0d					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	00 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	ef 0f					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	cc 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	cc 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	cc 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	cc 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	cc 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	cc 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	cc 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	cc 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	35 1a					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	da 10					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	16 1a					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	ee 17					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	f0 17					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	70 18					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	6c 18					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	cd 18					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	41 19					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	31 1a					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	7a 13					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	7c 16					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	db 16					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	f7 16					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	39 16					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	2d 14					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	d0 19					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	e8 19					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	fc 19					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	55 11					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	47 1a					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	29 17					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	87 17					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	c6 13					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	02 15					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	be 17					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	40 17					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	cc 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	5b 14					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	7d 15					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 6f 02	brl $0104dd			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c dd 04	jmp $0104dd			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.010464					LineDelete:
.010464	aa		tax				tax 	 							; this is the one we're looking for ....
.010465	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.010467	18		clc				clc
.010468	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.01046b	a8		tay				tay
.01046c					_LDLoop:
.01046c	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.01046f	f0 2d		beq $01049e			beq 	_LDExit						; exit if zero.
.010471	8a		txa				txa 								; found a match
.010472	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010475	f0 08		beq $01047f			beq		_LDFound
.010477	98		tya				tya 								; follow the link.
.010478	18		clc				clc
.010479	79 00 00	adc $0000,y			adc 	$0000,y
.01047c	a8		tay				tay
.01047d	80 ed		bra $01046c			bra 	_LDLoop
.01047f					_LDFound:
.01047f	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.010481	98		tya				tya
.010482	18		clc				clc
.010483	79 00 00	adc $0000,y			adc 	$0000,y
.010486	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.010488	20 b7 18	jsr $0118b7			jsr 	FindCodeEnd 				; find the end of the code.
.01048b	38		sec				sec
.01048c	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.01048e	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.01048f	1a		inc a				inc 	a
.010490	aa		tax				tax
.010491	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.010494	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.010496	91 08		sta ($08),y			sta 	(DTemp1),y
.010498	c8		iny				iny
.010499	c8		iny				iny
.01049a	ca		dex				dex
.01049b	ca		dex				dex
.01049c	d0 f6		bne $010494			bne 	_LDCopy
.01049e					_LDExit:
.01049e	60		rts				rts
.01049f					LineInsert:
.01049f	80 fe		bra $01049f			bra 	LineInsert

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.0104a1					ErrorHandler:
.0104a1	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0104a3	fa		plx				plx 								; address of error message -1
.0104a4	e8		inx				inx 								; error message.
.0104a5	20 49 05	jsr $010549			jsr 	PrintROMMessage 			; print message in ROM
.0104a8	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0104aa	f0 15		beq $0104c1			beq 	_EHEndMessage
.0104ac	a2 c7 04	ldx #$04c7			ldx 	#_EHAt & $FFFF 				; print " at "
.0104af	20 49 05	jsr $010549			jsr 	PrintROMMessage
.0104b2	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0104b4	a0 00 00	ldy #$0000			ldy 	#0
.0104b7	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0104ba	20 4a 0f	jsr $010f4a			jsr 	ConvertToString 			; convert and print it.
.0104bd	a8		tay				tay
.0104be	20 67 05	jsr $010567			jsr 	PrintBASICString
.0104c1					_EHEndMessage:
.0104c1	20 06 1b	jsr $011b06			jsr 	HWNewLine
.0104c4	4c 5f 1b	jmp $011b5f			jmp 	NextCommand 				; get next command.
>0104c7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0104cc					IllegalToken:
.0104cc	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0104cf	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0104d7	54 6f 6b 65 6e 00
.0104dd					SyntaxError:
.0104dd	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0104e0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104e8	72 72 6f 72 00
.0104ed					ExpectToken:
.0104ed	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104ef	d0 05		bne $0104f6			bne 	_CTKError					; error if not
.0104f1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104f3	e6 06		inc $06				inc 	DCodePtr
.0104f5	60		rts				rts
.0104f6					_CTKError:
.0104f6	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0104f9	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010501	74 6f 6b 65 6e 00
.010507					ExpectRightBracket:
.010507	48		pha				pha
.010508	a9 27 32	lda #$3227			lda 	#rparenTokenID
.01050b	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.01050e	68		pla				pla
.01050f	60		rts				rts
.010510					ExpectComma:
.010510	48		pha				pha
.010511	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010514	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.010517	68		pla				pla
.010518	60		rts				rts
.010519					CheckBothNumeric:
.010519	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01051b	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01051d	30 01		bmi $010520			bmi 	_CBNFail 					; need to both be zero in bit 15
.01051f	60		rts				rts
.010520					_CBNFail:
.010520	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010523	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01052b	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010539					ResetTypeInteger:
.010539	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01053b	29 ff 7f	and #$7fff			and 	#$7FFF
.01053e	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010540	60		rts				rts
.010541					ResetTypeString:
.010541	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010543	09 00 80	ora #$8000			ora 	#$8000
.010546	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010548	60		rts				rts
.010549					PrintROMMessage:
.010549	48		pha				pha
.01054a	da		phx				phx
.01054b					_PRMLoop:
.01054b	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01054f	29 ff 00	and #$00ff			and 	#$00FF
.010552	f0 10		beq $010564			beq 	_PRMExit
.010554	c9 0d 00	cmp #$000d			cmp 	#13
.010557	d0 05		bne $01055e			bne 	_PRMChar
.010559	20 06 1b	jsr $011b06			jsr 	HWNewLine
.01055c	80 03		bra $010561			bra 	_PRMNext
.01055e					_PRMChar:
.01055e	20 a3 1a	jsr $011aa3			jsr 	HWPrintChar
.010561					_PRMNext:
.010561	e8		inx				inx
.010562	80 e7		bra $01054b			bra 	_PRMLoop
.010564					_PRMExit:
.010564	fa		plx				plx
.010565	68		pla				pla
.010566	60		rts				rts
.010567					PrintBASICString:
.010567	48		pha				pha
.010568	da		phx				phx
.010569	5a		phy				phy
.01056a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01056d	29 ff 00	and #$00ff			and 	#$00FF
.010570	f0 0b		beq $01057d			beq 	_PBSExit 					; null string
.010572	aa		tax				tax
.010573					_PBSLoop:
.010573	c8		iny				iny
.010574	b9 00 00	lda $0000,y			lda 	$0000,y
.010577	20 a3 1a	jsr $011aa3			jsr 	HWPrintChar
.01057a	ca		dex				dex
.01057b	d0 f6		bne $010573			bne 	_PBSLoop
.01057d					_PBSExit:
.01057d	7a		ply				ply
.01057e	fa		plx				plx
.01057f	68		pla				pla
.010580	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringutils.asm

.010581					StringTempAllocate:
.010581	48		pha				pha
.010582	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010584	d0 09		bne $01058f			bne 	_STANoReset
.010586	5a		phy				phy 								; reset the temp string pointer.
.010587	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01058a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01058c	85 16		sta $16				sta 	DTempStringPointer
.01058e	7a		ply				ply
.01058f					_STANoReset:
.01058f	68		pla				pla 								; get length.
.010590	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010593	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010596	18		clc				clc 								; this adds one, for the length.
.010597	65 16		adc $16				adc 	DTempStringPointer
.010599	85 16		sta $16				sta 	DTempStringPointer
.01059b	48		pha				pha 								; save start address
.01059c	a9 00 00	lda #$0000			lda 	#$0000
.01059f	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0105a1	92 16		sta ($16)			sta		(DTempStringPointer)
.0105a3	c2 20		rep #$20			rep 	#$20
.0105a5	68		pla				pla 								; restore start address
.0105a6	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.0105a8	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0105aa	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0105ac	60		rts				rts
.0105ad					StringWriteCharacter:
.0105ad	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.0105af	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.0105b1	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.0105b3	1a		inc a				inc 	a
.0105b4	92 18		sta ($18)			sta 	(DStartTempString)
.0105b6	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.0105b8	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.0105ba	60		rts				rts
.0105bb					StringCreateCopy:
.0105bb	a8		tay				tay 								; put pointer to string in Y
.0105bc	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0105bf	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0105c2	f0 17		beq $0105db			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.0105c4	da		phx				phx 								; save X and put the character count in X
.0105c5	aa		tax				tax
.0105c6					_SCCCopy:
.0105c6	c8		iny				iny 								; advance and read (first time skips length)
.0105c7	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0105c9	b9 00 00	lda $0000,y			lda 	$0000,y
.0105cc	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0105ce	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0105d0	1a		inc a				inc 	a
.0105d1	92 18		sta ($18)			sta 	(DStartTempString)
.0105d3	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0105d5	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0105d7	ca		dex				dex 								; do X times
.0105d8	d0 ec		bne $0105c6			bne 	_SCCCopy
.0105da	fa		plx				plx
.0105db					_SCCExit:
.0105db	60		rts				rts
.0105dc					StringMakeConcrete:
.0105dc	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0105df	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0105e1	90 0f		bcc $0105f2			bcc 	_SMCExit
.0105e3	85 08		sta $08				sta 	DTemp1 						; source
.0105e5	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0105e7	29 ff 00	and #$00ff			and 	#$00FF
.0105ea	d0 07		bne $0105f3			bne 	_SMCNonZero 				; if not "" skip.
.0105ec	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105ef	18		clc				clc 								; this reference is used for all empty strings.
.0105f0	65 02		adc $02				adc 	DBaseAddress
.0105f2					_SMCExit:
.0105f2	60		rts				rts
.0105f3					_SMCNonZero:
.0105f3	48		pha				pha 								; save on stack.
.0105f4	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105f7	18		clc				clc
.0105f8	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105fb	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105fd	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105ff	85 0c		sta $0c				sta 	DTemp2 						; target
.010601	7a		ply				ply 								; get length copy from here until Y goes -ve
.010602	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010604					_SMCLoop:
.010604	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.010606	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010608	88		dey				dey 								; Y+1 times.
.010609	10 f9		bpl $010604			bpl 	_SMCLoop
.01060b	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01060d	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01060f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.010610					Tokenise:
.010610	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010612	84 0a		sty $0a				sty 	DTemp1+2
.010614	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010617	18		clc				clc
.010618	65 02		adc $02				adc 	DBaseAddress
.01061a	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01061c	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.01061f	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.010622					_TOKCap:
.010622	c8		iny				iny 								; go to next
.010623	b7 08		lda [$08],y			lda 	[DTemp1],y
.010625	29 ff 00	and #$00ff			and 	#$00FF
.010628	f0 22		beq $01064c			beq 	_TOKEndCap
.01062a	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.01062d	d0 01		bne $010630			bne 	_TOKNotQuote
.01062f	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.010630					_TOKNotQuote:
.010630	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.010633	90 ed		bcc $010622			bcc 	_TOKCap
.010635	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010638	b0 e8		bcs $010622			bcs 	_TOKCap
.01063a	8a		txa				txa 								; check if in quotes
.01063b	4a		lsr a				lsr 	a
.01063c	b0 e4		bcs $010622			bcs 	_TOKCap
.01063e	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.010640	38		sec				sec
.010641	e9 20 00	sbc #$0020			sbc 	#32
.010644	e2 20		sep #$20			sep 	#$20
.010646	97 08		sta [$08],y			sta 	[DTemp1],y
.010648	c2 20		rep #$20			rep 	#$20
.01064a	80 d6		bra $010622			bra 	_TOKCap
.01064c					_TOKEndCap:
.01064c	c6 08		dec $08				dec 	DTemp1
.01064e					_TOKMainNext:
.01064e	e6 08		inc $08				inc 	DTemp1
.010650					_TOKMainLoop:
.010650	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010652	29 ff 00	and #$00ff			and 	#$00FF
.010655	c9 20 00	cmp #$0020			cmp 	#32
.010658	90 1d		bcc $010677			bcc 	_TOKExit 					; 0-31 exit.
.01065a	f0 f2		beq $01064e			beq 	_TOKMainNext 				; 32 (space) skip.
.01065c	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.01065f	f0 1d		beq $01067e			beq 	_TOKString
.010661	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010664	90 1d		bcc $010683			bcc 	_TOKPunctuation
.010666	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.010669	90 42		bcc $0106ad			bcc 	_TOKNumber
.01066b	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.01066e	90 13		bcc $010683			bcc 	_TOKPunctuation
.010670	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010673	90 3d		bcc $0106b2			bcc 	_TOKIdentifier
.010675	80 0c		bra $010683			bra 	_TOKPunctuation 			; 91-   punctuation.
.010677					_TOKExit:
.010677	a9 00 00	lda #$0000			lda 	#$0000
.01067a	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken
.01067d	60		rts				rts
.01067e					_TOKString:
.01067e	20 55 07	jsr $010755			jsr 	TOKQuotedString
.010681	80 cd		bra $010650			bra 	_TOKMainLoop
.010683					_TOKPunctuation:
.010683	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010686	20 bc 07	jsr $0107bc			jsr 	TOKKeywordSearch
.010689	b0 1d		bcs $0106a8			bcs 	_TOKFoundPunctuation
.01068b	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.01068e	20 bc 07	jsr $0107bc			jsr 	TOKKeywordSearch
.010691	b0 15		bcs $0106a8			bcs 	_TOKFoundPunctuation
.010693	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010696	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01069e	61 72 73 65 20 6c 69 6e 65 00
.0106a8					_TOKFoundPunctuation:
.0106a8	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; output the token and go round again.
.0106ab	80 a3		bra $010650			bra 	_TOKMainLoop
.0106ad					_TOKNumber:
.0106ad	20 d6 06	jsr $0106d6			jsr 	TOKInteger 					; tokenise integer out of the token text.
.0106b0	80 9e		bra $010650			bra 	_TOKMainLoop
.0106b2					_TOKIdentifier:
.0106b2	20 17 08	jsr $010817			jsr 	TOKIdentifier
.0106b5	80 99		bra $010650			bra 	_TOKMainLoop
.0106b7					TOKWriteToken:
.0106b7	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.0106b9	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.0106bb	e6 0c		inc $0c				inc 	DTemp2
.0106bd	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.0106bf	29 ff 00	and #$00ff			and 	#$00FF
.0106c2	f0 01		beq $0106c5			beq 	_TOKWriteOverflow
.0106c4	60		rts				rts
.0106c5					_TOKWriteOverflow:
.0106c5	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0106c8	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>0106d0	20 6c 6f 6e 67 00
.0106d6					TOKInteger:
.0106d6	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.0106d8	64 26		stz $26				stz 	DTemp3+2
.0106da					_TOKINLoop:
.0106da	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.0106dc	48		pha				pha
.0106dd	a5 24		lda $24				lda 	DTemp3
.0106df	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.0106e1	26 26		rol $26				rol 	DTemp3+2
.0106e3	06 24		asl $24				asl 	DTemp3
.0106e5	26 26		rol $26				rol 	DTemp3+2
.0106e7	18		clc				clc
.0106e8	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0106ea	85 24		sta $24				sta 	DTemp3
.0106ec	68		pla				pla
.0106ed	65 26		adc $26				adc 	DTemp3+2
.0106ef	85 26		sta $26				sta 	DTemp3+2
.0106f1	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0106f3	26 26		rol $26				rol 	DTemp3+2
.0106f5	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0106f7	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0106fa	d0 44		bne $010740			bne 	_TOKINSize
.0106fc	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0106fe	29 0f 00	and #$000f			and 	#15
.010701	18		clc				clc
.010702	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010704	85 24		sta $24				sta 	DTemp3
.010706	90 02		bcc $01070a			bcc 	_TOKINNoCarry
.010708	e6 26		inc $26				inc 	DTemp3+2
.01070a					_TOKINNoCarry:
.01070a	e6 08		inc $08				inc 	DTemp1 						; look at next
.01070c	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01070e	29 ff 00	and #$00ff			and 	#$00FF
.010711	c9 30 00	cmp #$0030			cmp 	#"0"
.010714	90 05		bcc $01071b			bcc 	_TOKINGotInteger
.010716	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010719	90 bf		bcc $0106da			bcc		_TOKINLoop
.01071b					_TOKINGotInteger:
.01071b	a5 24		lda $24				lda 	DTemp3 						; lower word
.01071d	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.010720	18		clc				clc
.010721	69 00 40	adc #$4000			adc 	#$4000
.010724	48		pha				pha 								; save it.
.010725	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.010727	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.010729	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.01072b	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.01072e	b0 10		bcs $010740			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.010730	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.010733	f0 06		beq $01073b			beq 	_TOKINNoShift 				; don't need constant shift.
.010735	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.010738	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken
.01073b					_TOKINNoShift:
.01073b	68		pla				pla 								; get lower its token
.01073c	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; output it
.01073f	60		rts				rts
.010740					_TOKINSize:
.010740	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010743	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>01074b	74 6f 6f 20 6c 61 72 67 65 00
.010755					TOKQuotedString:
.010755	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.010757	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.010759	85 32		sta $32				sta 	DTemp4
.01075b	a5 0a		lda $0a				lda 	DTemp1+2
.01075d	85 34		sta $34				sta 	DTemp4+2
.01075f					_TOKQFindSize:
.01075f	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010761	e6 08		inc $08				inc 	DTemp1
.010763	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.010766	f0 3b		beq $0107a3			beq 	_TOQImbalance 				; end of line, and no quote found.
.010768	c9 22 00	cmp #$0022			cmp 	#34
.01076b	d0 f2		bne $01075f			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.01076d	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.01076f	38		sec				sec
.010770	e5 32		sbc $32				sbc 	DTemp4
.010772	3a		dec a				dec 	a 							; one less character for closing quote
.010773	85 26		sta $26				sta 	DTemp3+2
.010775	18		clc				clc
.010776	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010779	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.01077c	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken
.01077f	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010781	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; effectively a byte-write.
.010784	c6 0c		dec $0c				dec 	DTemp2
.010786	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010788	f0 0f		beq $010799			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.01078a					_TOKQWriteString:
.01078a	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01078c	29 ff 00	and #$00ff			and 	#$00FF
.01078f	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; effectively a byte-write.
.010792	c6 0c		dec $0c				dec 	DTemp2
.010794	e6 32		inc $32				inc 	DTemp4 						; advance character
.010796	ca		dex				dex 								; do X times
.010797	d0 f1		bne $01078a			bne 	_TOKQWriteString
.010799					_TOKQWriteEnd:
.010799	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01079b	29 01 00	and #$0001			and 	#1
.01079e	f0 02		beq $0107a2			beq 	_TOKQExit
.0107a0	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.0107a2					_TOKQExit:
.0107a2	60		rts				rts
.0107a3					_TOQImbalance:
.0107a3	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0107a6	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>0107ae	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.0107bc					TOKKeywordSearch:
.0107bc	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.0107be	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.0107c1	85 34		sta $34				sta 	DTemp4+2
.0107c3	a2 00 00	ldx #$0000			ldx 	#0
.0107c6					_TOKScan:
.0107c6	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; read the first byte
.0107ca	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.0107cd	f0 46		beq $010815			beq 	_TOKFail 					; if zero then we have failed.
.0107cf	3a		dec a				dec 	a 							; -1 gives the length.
.0107d0	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.0107d2	d0 2f		bne $010803			bne 	_TOKNext 					; no, then skip to next token.
.0107d4	da		phx				phx 								; save X
.0107d5	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.0107d8					_TOKCompare:
.0107d8	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.0107da	5f 93 00 01	eor $010093,x			eor 	TokenText+1,x
.0107de	29 ff 00	and #$00ff			and 	#$00FF
.0107e1	d0 1f		bne $010802			bne 	_TOKPopNext 				; if different, pop and goto next.
.0107e3	e8		inx				inx 								; bump X and Y.
.0107e4	c8		iny				iny
.0107e5	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.0107e7	d0 ef		bne $0107d8			bne 	_TOKCompare
.0107e9	98		tya				tya 								; add length to the text pointer
.0107ea	18		clc				clc
.0107eb	65 08		adc $08				adc 	DTemp1
.0107ed	85 08		sta $08				sta 	DTemp1
.0107ef	fa		plx				plx 								; restore X.
.0107f0	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the type/token bit.
.0107f4	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0107f7	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0107f8	4a		lsr a				lsr		a
.0107f9	4a		lsr a				lsr 	a
.0107fa	eb		xba				xba
.0107fb	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0107fd	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.010800	38		sec				sec
.010801	60		rts				rts
.010802					_TOKPopNext:
.010802	fa		plx				plx 								; restore X.
.010803					_TOKNext:
.010803	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the token skip again.
.010807	29 0f 00	and #$000f			and 	#$000F
.01080a	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01080c	8a		txa				txa
.01080d	18		clc				clc
.01080e	65 14		adc $14				adc 	DSignCount
.010810	aa		tax				tax
.010811	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010813	80 b1		bra $0107c6			bra 	_TOKScan
.010815					_TOKFail:
.010815	18		clc				clc
.010816	60		rts				rts
.010817					TOKIdentifier:
.010817	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010819	85 24		sta $24				sta 	DTemp3
.01081b					_TOKIFindLength:
.01081b	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01081d	a7 08		lda [$08]			lda 	[DTemp1]
.01081f	29 ff 00	and #$00ff			and 	#$00FF
.010822	20 c2 08	jsr $0108c2			jsr 	TOKIsIdentifierCharacter
.010825	b0 f4		bcs $01081b			bcs 	_TOKIFindLength
.010827	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.010829	38		sec				sec
.01082a	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.01082c	85 36		sta $36				sta 	DTemp5
.01082e	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.010830	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.010833	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.010835	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010837	29 ff 00	and #$00ff			and 	#$00FF
.01083a	c9 24 00	cmp #$0024			cmp 	#"$"
.01083d	d0 0b		bne $01084a			bne 	_TOKINotString
.01083f	e6 08		inc $08				inc 	DTemp1 						; skip $
.010841	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010843	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.010845	09 00 20	ora #$2000			ora 	#IDTypeMask
.010848	85 26		sta $26				sta 	DTemp3+2
.01084a					_TOKINotString:
.01084a	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.01084c	29 ff 00	and #$00ff			and 	#$00FF
.01084f	c9 28 00	cmp #$0028			cmp 	#"("
.010852	d0 0b		bne $01085f			bne 	_TOKINotArray
.010854	e6 08		inc $08				inc 	DTemp1 						; skip (
.010856	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010858	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01085a	09 00 10	ora #$1000			ora 	#IDArrayMask
.01085d	85 26		sta $26				sta 	DTemp3+2
.01085f					_TOKINotArray:
.01085f	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010861	85 08		sta $08				sta 	DTemp1
.010863	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.010865	20 bc 07	jsr $0107bc			jsr 	TOKKeywordSearch
.010868	90 04		bcc $01086e			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.01086a	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; if CS write token and exit.
.01086d	60		rts				rts
.01086e					_TOKIIdentifier:
.01086e	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010870	e6 08		inc $08				inc 	DTemp1
.010872	20 ae 08	jsr $0108ae			jsr		_TOKIToConstant 			; convert to range 0-35
.010875	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.010877	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010879	f0 1d		beq $010898			beq 	_TOKINoSecond
.01087b	48		pha				pha 								; save current on stack.
.01087c	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.01087e	e6 08		inc $08				inc 	DTemp1
.010880	20 ae 08	jsr $0108ae			jsr		_TOKIToConstant 			; convert to range 0-35
.010883	85 14		sta $14				sta 	DSignCount 					; save it.
.010885	0a		asl a				asl 	a 							; x 4
.010886	0a		asl a				asl 	a
.010887	65 14		adc $14				adc 	DSignCount 					; x 5
.010889	0a		asl a				asl 	a 							; x 10
.01088a	65 14		adc $14				adc 	DSignCount 					; x 11
.01088c	0a		asl a				asl 	a 							; x 22
.01088d	0a		asl a				asl 	a 							; x 44
.01088e	65 14		adc $14				adc 	DSignCount 					; x 45
.010890	85 14		sta $14				sta 	DSignCount
.010892	68		pla				pla 								; get old token and add x 45
.010893	18		clc				clc
.010894	65 14		adc $14				adc 	DSignCount
.010896	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010898					_TOKINoSecond:
.010898	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.01089a	f0 03		beq $01089f			beq 	_TOKINotLast				; if yes
.01089c	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.01089f					_TOKINotLast:
.01089f	20 b7 06	jsr $0106b7			jsr 	TOKWriteToken 				; output the token
.0108a2	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.0108a4	d0 c8		bne $01086e			bne 	_TOKIIdentifier
.0108a6					_TOKIOut:
.0108a6	a5 24		lda $24				lda 	DTemp3 						; get original start position
.0108a8	18		clc				clc
.0108a9	65 38		adc $38				adc 	DTemp5+2					; add overall length
.0108ab	85 08		sta $08				sta 	DTemp1 						; this is the end position
.0108ad	60		rts				rts
.0108ae					_TOKIToConstant:
.0108ae	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.0108b1	c9 41 00	cmp #$0041			cmp 	#65
.0108b4	90 04		bcc $0108ba			bcc 	_TOKITInteger
.0108b6	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.0108b9	60		rts				rts
.0108ba					_TOKITInteger:
.0108ba	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.0108bd	18		clc				clc
.0108be	69 1b 00	adc #$001b			adc 	#27
.0108c1	60		rts				rts
.0108c2					TOKIsIdentifierCharacter:
.0108c2	c9 30 00	cmp #$0030			cmp 	#"0"
.0108c5	90 0f		bcc $0108d6			bcc 	_TOKIIFail
.0108c7	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0108ca	90 0c		bcc $0108d8			bcc 	_TOKIIOk
.0108cc	c9 41 00	cmp #$0041			cmp 	#"A"
.0108cf	90 05		bcc $0108d6			bcc 	_TOKIIFail
.0108d1	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0108d4	90 02		bcc $0108d8			bcc 	_TOKIIOk
.0108d6					_TOKIIFail:
.0108d6	18		clc				clc
.0108d7	60		rts				rts
.0108d8					_TOKIIOk:
.0108d8	38		sec				sec
.0108d9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0108da					Binary_Add:
.0108da	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0108dc	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0108de	30 12		bmi $0108f2		bmi 	_BATypeError
.0108e0	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0108e2	30 3f		bmi $010923		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0108e4	18		clc			clc 										; add the results
.0108e5	b5 00		lda $00,x		lda		EXSValueL+0,x
.0108e7	75 02		adc $02,x		adc 	EXSValueL+2,x
.0108e9	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108eb	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108ed	75 22		adc $22,x		adc 	EXSValueH+2,x
.0108ef	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108f1	60		rts			rts
.0108f2					_BATypeError:
.0108f2	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0108f5	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0108fd	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01090d	65 73 00
.010910					_BALengthError:
.010910	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010913	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01091b	6f 6f 20 6c 6f 6e 67 00
.010923					_BAConcatenateString:
.010923	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010925	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010927	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010929	85 0c		sta $0c			sta 	DTemp2
.01092b	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01092d	18		clc			clc 										; work out the total length
.01092e	b2 08		lda ($08)		lda 	(DTemp1)
.010930	72 0c		adc ($0c)		adc 	(DTemp2)
.010932	b0 14		bcs $010948		bcs 	_BAConcatLengthError 				; string is too long.
.010934	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010936	20 81 05	jsr $010581		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010939	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.01093b	74 20		stz $20,x		stz 	EXSValueH+0,x
.01093d	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01093f	20 bb 05	jsr $0105bb		jsr 	StringCreateCopy
.010942	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010944	20 bb 05	jsr $0105bb		jsr 	StringCreateCopy
.010947	60		rts			rts
.010948					_BAConcatLengthError:
.010948	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01094b	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010953	6f 6f 20 6c 6f 6e 67 00
.01095b					Binary_Subtract:
.01095b	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.01095e	38		sec			sec
.01095f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010961	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010963	95 00		sta $00,x		sta 	EXSValueL+0,x
.010965	b5 20		lda $20,x		lda		EXSValueH+0,x
.010967	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010969	95 20		sta $20,x		sta 	EXSValueH+0,x
.01096b	60		rts			rts
.01096c					Binary_ShiftRight:
.01096c	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.01096f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010971	29 3f 00	and #$003f		and 	#63
.010974	f0 07		beq $01097d		beq		_Binary_SRExit
.010976					_Binary_SRLoop:
.010976	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010978	76 00		ror $00,x		ror 	EXSValueL+0,x
.01097a	3a		dec a			dec 	a
.01097b	d0 f9		bne $010976		bne 	_Binary_SRLoop
.01097d					_Binary_SRExit:
.01097d	60		rts			rts
.01097e					Binary_ShiftLeft:
.01097e	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.010981	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010983	29 3f 00	and #$003f		and 	#63
.010986	f0 07		beq $01098f		beq		_Binary_SLExit
.010988					_Binary_SLLoop:
.010988	16 00		asl $00,x		asl 	EXSValueL+0,x
.01098a	36 20		rol $20,x		rol 	EXSValueH+0,x
.01098c	3a		dec a			dec 	a
.01098d	d0 f9		bne $010988		bne 	_Binary_SLLoop
.01098f					_Binary_SLExit:
.01098f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010990					Binary_And:
.010990	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.010993	b5 00		lda $00,x		lda		EXSValueL+0,x
.010995	35 02		and $02,x		and 	EXSValueL+2,x
.010997	95 00		sta $00,x		sta 	EXSValueL+0,x
.010999	b5 20		lda $20,x		lda		EXSValueH+0,x
.01099b	35 22		and $22,x		and 	EXSValueH+2,x
.01099d	95 20		sta $20,x		sta 	EXSValueH+0,x
.01099f	60		rts			rts
.0109a0					Binary_Or:
.0109a0	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.0109a3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109a5	15 02		ora $02,x		ora 	EXSValueL+2,x
.0109a7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109a9	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109ab	15 22		ora $22,x		ora 	EXSValueH+2,x
.0109ad	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109af	60		rts			rts
.0109b0					Binary_Xor:
.0109b0	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.0109b3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109b5	55 02		eor $02,x		eor 	EXSValueL+2,x
.0109b7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109b9	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109bb	55 22		eor $22,x		eor 	EXSValueH+2,x
.0109bd	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109bf	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.0109c0					Binary_Equals:
.0109c0	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109c3	b0 0e		bcs $0109d3		bcs 	_BEString
.0109c5	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0109c7	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0109c9	d0 4f		bne $010a1a		bne 	Compare_Fail
.0109cb	b5 20		lda $20,x		lda 	EXSValueH,x
.0109cd	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0109cf	d0 49		bne $010a1a		bne 	Compare_Fail
.0109d1	80 3f		bra $010a12		bra 	Compare_Succeed
.0109d3					_BEString:
.0109d3	09 00 00	ora #$0000		ora 	#$0000
.0109d6	f0 3a		beq $010a12		beq 	Compare_Succeed
.0109d8	80 40		bra $010a1a		bra 	Compare_Fail
.0109da					Binary_NotEquals:
.0109da	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109dd	b0 0e		bcs $0109ed		bcs 	_BNEString
.0109df	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0109e1	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0109e3	d0 2d		bne $010a12		bne 	Compare_Succeed
.0109e5	b5 20		lda $20,x		lda 	EXSValueH,x
.0109e7	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0109e9	d0 27		bne $010a12		bne 	Compare_Succeed
.0109eb	80 2d		bra $010a1a		bra 	Compare_Fail
.0109ed					_BNEString:
.0109ed	09 00 00	ora #$0000		ora 	#$0000
.0109f0	d0 20		bne $010a12		bne 	Compare_Succeed
.0109f2	80 26		bra $010a1a		bra 	Compare_Fail
.0109f4					Binary_Less:
.0109f4	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109f7	b0 12		bcs $010a0b		bcs 	_BLString
.0109f9	38		sec			sec
.0109fa	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0109fc	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109fe	b5 20		lda $20,x		lda 	EXSValueH,x
.010a00	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a02	50 03		bvc $010a07		bvc 	*+5
.010a04	49 00 80	eor #$8000		eor 	#$8000
.010a07	30 09		bmi $010a12		bmi 	Compare_Succeed
.010a09	80 0f		bra $010a1a		bra 	Compare_Fail
.010a0b					_BLString:
.010a0b	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010a0e	f0 02		beq $010a12		beq 	Compare_Succeed
.010a10	80 08		bra $010a1a		bra 	Compare_Fail
.010a12					Compare_Succeed:
.010a12	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010a15	95 00		sta $00,x		sta 	EXSValueL,x
.010a17	95 20		sta $20,x		sta 	EXSValueH,x
.010a19	60		rts			rts
.010a1a					Compare_Fail:
.010a1a	74 00		stz $00,x		stz 	EXSValueL,x
.010a1c	74 20		stz $20,x		stz 	EXSValueH,x
.010a1e	60		rts			rts
.010a1f					Binary_GreaterEqual:
.010a1f	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a22	b0 12		bcs $010a36		bcs 	_BGEString
.010a24	38		sec			sec
.010a25	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010a27	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a29	b5 20		lda $20,x		lda 	EXSValueH,x
.010a2b	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a2d	50 03		bvc $010a32		bvc 	*+5
.010a2f	49 00 80	eor #$8000		eor 	#$8000
.010a32	10 de		bpl $010a12		bpl 	Compare_Succeed
.010a34	80 e4		bra $010a1a		bra 	Compare_Fail
.010a36					_BGEString:
.010a36	09 00 00	ora #$0000		ora 	#$0000
.010a39	10 d7		bpl $010a12		bpl 	Compare_Succeed
.010a3b	80 dd		bra $010a1a		bra 	Compare_Fail
.010a3d					Binary_LessEqual:
.010a3d	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a40	b0 12		bcs $010a54		bcs 	_BLEString
.010a42	18		clc			clc 									; numeric <= signed
.010a43	b5 00		lda $00,x		lda 	EXSValueL,x
.010a45	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a47	b5 20		lda $20,x		lda 	EXSValueH,x
.010a49	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a4b	50 03		bvc $010a50		bvc 	*+5
.010a4d	49 00 80	eor #$8000		eor 	#$8000
.010a50	30 c0		bmi $010a12		bmi 	Compare_Succeed
.010a52	80 c6		bra $010a1a		bra 	Compare_Fail
.010a54					_BLEString:
.010a54	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010a57	d0 b9		bne $010a12		bne 	Compare_Succeed
.010a59	80 bf		bra $010a1a		bra 	Compare_Fail
.010a5b					Binary_Greater:
.010a5b	20 79 0a	jsr $010a79		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a5e	b0 12		bcs $010a72		bcs 	_BGString
.010a60	18		clc			clc 									; numeric > signed
.010a61	b5 00		lda $00,x		lda 	EXSValueL,x
.010a63	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a65	b5 20		lda $20,x		lda 	EXSValueH,x
.010a67	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a69	50 03		bvc $010a6e		bvc 	*+5
.010a6b	49 00 80	eor #$8000		eor 	#$8000
.010a6e	10 a2		bpl $010a12		bpl 	Compare_Succeed
.010a70	80 a8		bra $010a1a		bra 	Compare_Fail
.010a72					_BGString:
.010a72	c9 01 00	cmp #$0001		cmp 	#$0001
.010a75	f0 9b		beq $010a12		beq 	Compare_Succeed
.010a77	80 a1		bra $010a1a		bra 	Compare_Fail
.010a79					CompareTypeCheck:
.010a79	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010a7b	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a7d	30 06		bmi $010a85		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010a7f	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010a81	30 1c		bmi $010a9f		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010a83	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010a84	60		rts			rts
.010a85					_CTCFail:
.010a85	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010a88	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010a90	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010a9f					_CTCStringCompare:
.010a9f	20 39 05	jsr $010539		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010aa2	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010aa4	85 08		sta $08			sta 	DTemp1
.010aa6	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010aa8	85 0c		sta $0c			sta 	DTemp2
.010aaa	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010aad	a8		tay			tay
.010aae	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010ab0	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010ab2	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010ab4	90 02		bcc $010ab8		bcc 	_CTCSmallest
.010ab6	b2 0c		lda ($0c)		lda 	(DTemp2)
.010ab8					_CTCSmallest:
.010ab8	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010aba					_CTCCompare:
.010aba	c8		iny			iny 									; look at next character (done first, first char is size)
.010abb	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010abd	30 16		bmi $010ad5		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010abf	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010ac1	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010ac3	f0 f5		beq $010aba		beq 	_CTCCompare 					; if zero, try the next character.
.010ac5	b0 07		bcs $010ace		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010ac7					_CTCLess:
.010ac7	c2 20		rep #$20		rep 	#$20
.010ac9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010acc	80 14		bra $010ae2		bra 	_CTCExit
.010ace					_CTCGreater:
.010ace	c2 20		rep #$20		rep 	#$20
.010ad0	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010ad3	80 0d		bra $010ae2		bra 	_CTCExit
.010ad5					_CTCEqualSoFar:
.010ad5	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010ad7	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010ad9	90 ec		bcc $010ac7		bcc 	_CTCLess
.010adb	d0 f1		bne $010ace		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010add	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010adf	a9 00 00	lda #$0000		lda 	#$0000
.010ae2					_CTCExit:
.010ae2	38		sec			sec 									; return with CS indicating string comparison.
.010ae3	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010ae4					Binary_Divide:
.010ae4	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.010ae7	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010ae9	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010aeb	d0 14		bne $010b01		bne 	_BinaryDivide_Ok
.010aed	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010af0	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010af8	20 62 79 20 7a 65 72 6f 00
.010b01					_BinaryDivide_Ok:
.010b01	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010b03	64 0a		stz $0a			stz 	DTemp1+2
.010b05	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010b07	5a		phy			phy 										; save Y (bit counter)
.010b08	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010b0a	10 07		bpl $010b13		bpl 	_BinaryDivide_RightDone
.010b0c	e8		inx			inx
.010b0d	e8		inx			inx
.010b0e	20 49 0b	jsr $010b49		jsr 	Binary_DivNegate
.010b11	ca		dex			dex
.010b12	ca		dex			dex
.010b13					_BinaryDivide_RightDone:
.010b13	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010b15	10 03		bpl $010b1a		bpl 	_BinaryDivide_LeftDone
.010b17	20 49 0b	jsr $010b49		jsr 	Binary_DivNegate
.010b1a					_BinaryDivide_LeftDone:
.010b1a	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010b1d					_BinaryDivide_Loop:
.010b1d	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010b1f	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b21	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010b23	26 0a		rol $0a			rol 	DTemp1+2
.010b25	38		sec			sec											; calculate A-M
.010b26	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010b28	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b2a	85 0c		sta $0c			sta 	DTemp2
.010b2c	a5 0a		lda $0a			lda 	DTemp1+2
.010b2e	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b30	90 08		bcc $010b3a		bcc 	_Binary_NoSubract 					; if A < M skip this
.010b32	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010b34	a5 0c		lda $0c			lda 	DTemp2
.010b36	85 08		sta $08			sta 	DTemp1+0
.010b38	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010b3a					_Binary_NoSubract:
.010b3a	88		dey			dey 										; do it 32 times.
.010b3b	d0 e0		bne $010b1d		bne 	_BinaryDivide_Loop
.010b3d					_BinaryDivide_Exit:
.010b3d	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010b3f	29 01 00	and #$0001		and 	#1
.010b42	f0 03		beq $010b47		beq 	_BinaryDivide_Exit2
.010b44	20 49 0b	jsr $010b49		jsr 	Binary_DivNegate
.010b47					_BinaryDivide_Exit2:
.010b47	7a		ply			ply 										; restore Y
.010b48	60		rts			rts
.010b49					Binary_DivNegate:
.010b49	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010b4b	38		sec			sec 										; negate the value at stack X.
.010b4c	a9 00 00	lda #$0000		lda 	#$0000
.010b4f	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010b51	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b53	a9 00 00	lda #$0000		lda 	#$0000
.010b56	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010b58	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b5a	60		rts			rts
.010b5b					Binary_Modulus:
.010b5b	20 e4 0a	jsr $010ae4		jsr 	Binary_Divide 						; do the divide
.010b5e	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010b60	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b62	a5 0a		lda $0a			lda 	DTemp1+2
.010b64	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b66	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010b67					Binary_Multiply:
.010b67	20 19 05	jsr $010519		jsr 	CheckBothNumeric 					; check both values are numeric
.010b6a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010b6c	85 08		sta $08			sta 	DTemp1
.010b6e	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b70	85 0a		sta $0a			sta		DTemp1+2
.010b72	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010b74	74 20		stz $20,x		stz 	EXSValueH+0,x
.010b76					_BinaryMultiply_Loop:
.010b76	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010b78	05 0a		ora $0a			ora 	DTemp1+2
.010b7a	f0 1e		beq $010b9a		beq 	_BinaryMultiply_Exit
.010b7c	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010b7e	29 01 00	and #$0001		and 	#1
.010b81	f0 0d		beq $010b90		beq 	_BinaryMultiply_NoAdd
.010b83	18		clc			clc 										; add multiplicand to result.
.010b84	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010b86	75 02		adc $02,x		adc 	EXSValueL+2,x
.010b88	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b8a	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b8c	75 22		adc $22,x		adc 	EXSValueH+2,x
.010b8e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b90					_BinaryMultiply_NoAdd:
.010b90	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010b92	66 08		ror $08			ror 	DTemp1
.010b94	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010b96	36 22		rol $22,x		rol 	EXSValueH+2,x
.010b98	80 dc		bra $010b76		bra 	_BinaryMultiply_Loop 				; go round again.
.010b9a					_BinaryMultiply_Exit:
.010b9a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010b9b					Function_Len:
.010b9b	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010b9e	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ba1	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010ba4	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010ba6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010ba9	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010bac	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010bae	74 20		stz $20,x			stz 	EXSValueH+0,x
.010bb0	60		rts				rts
.010bb1					Function_Abs:
.010bb1	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010bb4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010bb7	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010bba	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010bbc	30 07		bmi $010bc5			bmi 	_FAbsNegative 				; negate it if negative
.010bbe	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010bc0	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010bc2	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bc4	60		rts				rts
.010bc5					_FAbsNegative:
.010bc5	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010bc6	a9 00 00	lda #$0000			lda 	#0
.010bc9	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010bcb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bcd	a9 00 00	lda #$0000			lda 	#0
.010bd0	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010bd2	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bd4	60		rts				rts
.010bd5					Function_Sgn:
.010bd5	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns integer
.010bd8	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010bdb	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010bde	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010be0	74 20		stz $20,x			stz 	EXSValueH+0,x
.010be2	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010be4	30 07		bmi $010bed			bmi 	_FSgnNegative 				; set to -1 if signed
.010be6	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010be8	f0 02		beq $010bec			beq 	_FSgnExit
.010bea	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010bec					_FSgnExit:
.010bec	60		rts				rts
.010bed					_FSgnNegative:
.010bed	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010bf0	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bf2	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bf4	60		rts				rts
.010bf5					Function_Random:
.010bf5	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010bf8	20 39 05	jsr $010539			jsr 	ResetTypeInteger
.010bfb	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010bfd	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010bff	d0 0a		bne $010c0b			bne 	_Rnd_NotZero
.010c01	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010c04	85 10		sta $10				sta 	DRandom
.010c06	a9 ea 00	lda #$00ea			lda 	#$EA
.010c09	85 12		sta $12				sta 	DRandom+2
.010c0b					_Rnd_NotZero:
.010c0b	20 16 0c	jsr $010c16			jsr 	_Rnd_Process 				; call randomiser twice
.010c0e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c10	20 16 0c	jsr $010c16			jsr 	_Rnd_Process
.010c13	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c15	60		rts				rts
.010c16					_Rnd_Process:
.010c16	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010c18	26 12		rol $12				rol 	DRandom+2
.010c1a	90 0e		bcc $010c2a			bcc 	_Rnd_Exit
.010c1c	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010c1e	49 54 d4	eor #$d454			eor 	#$D454
.010c21	85 10		sta $10				sta 	DRandom
.010c23	a5 12		lda $12				lda 	DRandom+2
.010c25	49 d5 55	eor #$55d5			eor 	#$55D5
.010c28	85 12		sta $12				sta 	DRandom+2
.010c2a					_Rnd_Exit:
.010c2a	a5 10		lda $10				lda 	DRandom
.010c2c	45 12		eor $12				eor 	DRandom+2
.010c2e	60		rts				rts
.010c2f					Function_Chr:
.010c2f	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string
.010c32	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010c35	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010c38	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010c3b	d0 12		bne $010c4f			bne 	_FCHBad
.010c3d	48		pha				pha  								; save char # on stack
.010c3e	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010c41	20 81 05	jsr $010581			jsr 	StringTempAllocate
.010c44	68		pla				pla 								; restore character number
.010c45	20 ad 05	jsr $0105ad			jsr 	StringWriteCharacter 		; write it out.
.010c48	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010c4a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c4c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c4e	60		rts				rts
.010c4f					_FCHBad:
.010c4f	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010c52	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010c5a	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010c67					Function_Asc:
.010c67	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010c6a	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010c6d	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010c70	a8		tay				tay 								; string address in Y
.010c71	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010c74	29 ff 00	and #$00ff			and 	#$00FF
.010c77	f0 0b		beq $010c84			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010c79	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010c7c	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010c7f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c81	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c83	60		rts				rts
.010c84					_FASBad:
.010c84	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010c87	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010c8f	65 20 66 6f 72 20 61 73 63 28 29 00
.010c9b					Function_SPC:
.010c9b	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string
.010c9e	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010ca1	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010ca4	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010ca7	d0 17		bne $010cc0			bne 	_FSPBad
.010ca9	48		pha				pha 								; save length
.010caa	20 81 05	jsr $010581			jsr 	StringTempAllocate 			; allocate character space
.010cad	7a		ply				ply 								; get count in Y
.010cae	f0 09		beq $010cb9			beq 	_FSPExit 					; if zero, just empty string
.010cb0					_FSPCopy:
.010cb0	a9 20 00	lda #$0020			lda 	#" "						; space character
.010cb3	20 ad 05	jsr $0105ad			jsr 	StringWriteCharacter 		; write it out.
.010cb6	88		dey				dey
.010cb7	d0 f7		bne $010cb0			bne 	_FSPCopy	 				; do it Y times
.010cb9					_FSPExit:
.010cb9	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010cbb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cbd	74 20		stz $20,x			stz 	EXSValueH+0,x
.010cbf	60		rts				rts
.010cc0					_FSPBad:
.010cc0	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010cc3	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010ccb	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010cd7					Function_LEFT:
.010cd7	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.010cda	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010cdd	48		pha				pha 								; save string on stack.
.010cde	20 10 05	jsr $010510			jsr 	ExpectComma 				; get count
.010ce1	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010ce4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ce7	d0 6d		bne $010d56			bne 	FNStringParameter
.010ce9	85 08		sta $08				sta 	DTemp1 						; save count.
.010ceb	20 07 05	jsr $010507			jsr 	ExpectRightBracket
.010cee	7a		ply				ply 								; Y points to string.
.010cef	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010cf2	29 ff 00	and #$00ff			and 	#$00FF
.010cf5	f0 52		beq $010d49			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010cf7	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010cf9	f0 55		beq $010d50			beq 	FNStringY 					; return string in Y if current len = required len.
.010cfb	90 53		bcc $010d50			bcc 	FNStringY 					; if current < required return whole thing.
.010cfd	c8		iny				iny 								; take from here - start of string
.010cfe	80 33		bra $010d33			bra 	FNDTemp1Characters
.010d00					Function_RIGHT:
.010d00	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.010d03	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d06	48		pha				pha 								; save string on stack.
.010d07	20 10 05	jsr $010510			jsr 	ExpectComma 				; get count
.010d0a	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d0d	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d10	d0 44		bne $010d56			bne 	FNStringParameter
.010d12	85 08		sta $08				sta 	DTemp1 						; save count.
.010d14	20 07 05	jsr $010507			jsr 	ExpectRightBracket
.010d17	7a		ply				ply 								; Y points to string.
.010d18	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010d1b	29 ff 00	and #$00ff			and 	#$00FF
.010d1e	f0 29		beq $010d49			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010d20	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010d22	f0 2c		beq $010d50			beq 	FNStringY 					; return string in Y if current len = required len.
.010d24	90 2a		bcc $010d50			bcc 	FNStringY 					; if current < required return whole thing.
.010d26	38		sec				sec 								; current-required is the number to skip
.010d27	e5 08		sbc $08				sbc 	DTemp1
.010d29	85 0a		sta $0a				sta 	DTemp1+2
.010d2b	98		tya				tya
.010d2c	18		clc				clc
.010d2d	65 0a		adc $0a				adc 	DTemp1+2
.010d2f	a8		tay				tay
.010d30	c8		iny				iny 								; +1 for the count.
.010d31	80 00		bra $010d33			bra 	FNDTemp1Characters
.010d33					FNDTemp1Characters:
.010d33	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010d35	f0 12		beq $010d49			beq 	FNStringEmpty 				; if zero, return empty string.
.010d37	20 81 05	jsr $010581			jsr 	StringTempAllocate
.010d3a	48		pha				pha 								; save the address
.010d3b					_FND1Loop:
.010d3b	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010d3e	20 ad 05	jsr $0105ad			jsr 	StringWriteCharacter
.010d41	c8		iny				iny
.010d42	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010d44	d0 f5		bne $010d3b			bne 	_FND1Loop
.010d46	7a		ply				ply 								; string address in Y
.010d47	80 07		bra $010d50			bra 	FNStringY
.010d49					FNStringEmpty:
.010d49	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010d4c	20 81 05	jsr $010581			jsr 	StringTempAllocate 			; put address of it in Y
.010d4f	a8		tay				tay
.010d50					FNStringY:
.010d50	98		tya				tya
.010d51	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d53	74 22		stz $22,x			stz 	EXSValueH+2,x
.010d55	60		rts				rts
.010d56					FNStringParameter:
.010d56	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010d59	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010d61	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010d6e					Function_MID:
.010d6e	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.010d71	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d74	48		pha				pha 								; save string on stack.
.010d75	20 10 05	jsr $010510			jsr 	ExpectComma 				; get offset (n)
.010d78	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d7b	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d7e	d0 d6		bne $010d56			bne 	FNStringParameter
.010d80	c9 00 00	cmp #$0000			cmp 	#0
.010d83	f0 d1		beq $010d56			beq 	FNStringParameter 			; or zero
.010d85	48		pha				pha 								; save start position on stack.
.010d86	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010d89	85 08		sta $08				sta 	DTemp1
.010d8b	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010d8d	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010d90	d0 0e		bne $010da0			bne 	_FMINoThird
.010d92	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010d94	e6 06		inc $06				inc 	DCodePtr
.010d96	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010d99	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d9c	d0 b8		bne $010d56			bne 	FNStringParameter
.010d9e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010da0					_FMINoThird:
.010da0	20 07 05	jsr $010507			jsr 	ExpectRightBracket
.010da3	68		pla				pla 								; get offset position
.010da4	85 0c		sta $0c				sta 	DTemp2
.010da6	7a		ply				ply 								; get address of string in Y
.010da7	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010daa	29 ff 00	and #$00ff			and 	#$00FF
.010dad	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010daf	90 98		bcc $010d49			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010db1	38		sec				sec 								; calculate number of characters left after
.010db2	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010db4	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010db5	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010db7	b0 02		bcs $010dbb			bcs 	_FMISufficient
.010db9	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010dbb					_FMISufficient:
.010dbb	98		tya				tya 								; get address
.010dbc	18		clc				clc
.010dbd	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010dbf	a8		tay				tay 								; put in Y
.010dc0	82 70 ff	brl $010d33			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010dc3					Function_Peek:
.010dc3	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010dc6	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010dc9	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010dcc	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010dce	84 0a		sty $0a				sty 	DTemp1+2
.010dd0	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010dd3	b7 08		lda [$08],y			lda 	[DTemp1],y
.010dd5	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010dd8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010dda	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ddc	60		rts				rts
.010ddd					Function_Deek:
.010ddd	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010de0	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010de3	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010de6	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010de8	84 0a		sty $0a				sty 	DTemp1+2
.010dea	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ded	b7 08		lda [$08],y			lda 	[DTemp1],y
.010def	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010df1	74 20		stz $20,x			stz 	EXSValueH+0,x
.010df3	60		rts				rts
.010df4					Function_Leek:
.010df4	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010df7	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010dfa	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check )
.010dfd	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010dff	84 0a		sty $0a				sty 	DTemp1+2
.010e01	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010e04	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e06	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010e08	c8		iny				iny
.010e09	c8		iny				iny
.010e0a	b7 08		lda [$08],y			lda 	[DTemp1],y
.010e0c	95 20		sta $20,x			sta 	EXSValueH+0,x
.010e0e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010e0f					Function_VAL:
.010e0f	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns an integer
.010e12	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e15	48		pha				pha 								; put string address on stack.
.010e16	20 26 0e	jsr $010e26			jsr 	VALGetBase 					; process , base (shared with STR$())
.010e19	7a		ply				ply 								; get string address back
.010e1a	da		phx				phx 								; save X on stack
.010e1b	aa		tax				tax 								; base in X
.010e1c	98		tya				tya 								; address in A
.010e1d	20 60 0e	jsr $010e60			jsr 	StringToInteger
.010e20	fa		plx				plx 								; restore X
.010e21	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e23	94 20		sty $20,x			sty 	EXSValueH+0,x
.010e25	60		rts				rts
.010e26					VALGetBase:
.010e26	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010e28	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010e2b	f0 07		beq $010e34			beq 	_VGBAlternate
.010e2d	20 07 05	jsr $010507			jsr 	ExpectRightBracket			; expect ), and return 10.
.010e30	a9 0a 00	lda #$000a			lda 	#10
.010e33	60		rts				rts
.010e34					_VGBAlternate:
.010e34	20 10 05	jsr $010510			jsr 	ExpectComma 				; skip comma.
.010e37	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010e3a	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010e3d	d0 0e		bne $010e4d			bne 	_VGBBadBase
.010e3f	c9 02 00	cmp #$0002			cmp 	#2
.010e42	90 09		bcc $010e4d			bcc 	_VGBBadBase
.010e44	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010e47	b0 04		bcs $010e4d			bcs 	_VGBBadBase
.010e49	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; get right bracket and return.
.010e4c	60		rts				rts
.010e4d					_VGBBadBase:
.010e4d	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010e50	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010e58	65 72 20 42 61 73 65 00
.010e60					StringToInteger:
.010e60	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010e62	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010e64	29 ff 00	and #$00ff			and 	#$00FF
.010e67	85 26		sta $26				sta 	DTemp3+2
.010e69	f0 6e		beq $010ed9			beq 	_STIError 					; if length zero it's bad.
.010e6b	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010e6d	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010e6f	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010e71	64 0a		stz $0a				stz 	DTemp1+2
.010e73	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010e75	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010e78	48		pha				pha 								; push on stack
.010e79	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010e7c	d0 06		bne $010e84			bne 	_STILoop
.010e7e	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010e80	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010e82	f0 55		beq $010ed9			beq 	_STIError 					; if only - then error.
.010e84					_STILoop:
.010e84	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010e86	20 f8 0e	jsr $010ef8			jsr 	MultiplyTemp1ByA
.010e89	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010e8b	29 ff 00	and #$00ff			and 	#$00FF
.010e8e	20 e9 0e	jsr $010ee9			jsr 	ConvertUpperCase	 		; make U/C
.010e91	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010e94	90 43		bcc $010ed9			bcc 	_STIError
.010e96	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010e99	90 0e		bcc $010ea9			bcc 	_STIOkay1
.010e9b	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010e9e	90 39		bcc $010ed9			bcc 	_STIError
.010ea0	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010ea3	b0 34		bcs $010ed9			bcs 	_STIError
.010ea5	18		clc				clc 								; shift to correct range.
.010ea6	69 09 00	adc #$0009			adc 	#9
.010ea9					_STIOkay1:
.010ea9	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010eac	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010eae	b0 29		bcs $010ed9			bcs 	_STIError
.010eb0	18		clc				clc 								; add A to DTemp1
.010eb1	65 08		adc $08				adc 	DTemp1
.010eb3	85 08		sta $08				sta 	DTemp1
.010eb5	90 02		bcc $010eb9			bcc 	_STINoCarry
.010eb7	e6 0a		inc $0a				inc 	DTemp1+2
.010eb9					_STINoCarry:
.010eb9	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010ebb	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010ebd	d0 c5		bne $010e84			bne 	_STILoop 					; loop back.
.010ebf	68		pla				pla 								; get optional minus bac
.010ec0	c9 2d 00	cmp #$002d			cmp 	#"-"
.010ec3	d0 0f		bne $010ed4			bne 	_STINotNegative 			; handle the negative character
.010ec5	38		sec				sec 								; negate DTemp1
.010ec6	a9 00 00	lda #$0000			lda 	#0
.010ec9	e5 08		sbc $08				sbc 	DTemp1
.010ecb	85 08		sta $08				sta 	DTemp1
.010ecd	a9 00 00	lda #$0000			lda 	#0
.010ed0	e5 0a		sbc $0a				sbc 	DTemp1+2
.010ed2	85 0a		sta $0a				sta 	DTemp1+2
.010ed4					_STINotNegative:
.010ed4	a5 08		lda $08				lda 	DTemp1 						; get the result
.010ed6	a4 0a		ldy $0a				ldy 	DTemp1+2
.010ed8	60		rts				rts
.010ed9					_STIError:
.010ed9	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>010edc	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010ee4	74 61 6e 74 00
.010ee9					ConvertUpperCase:
.010ee9	c9 61 00	cmp #$0061			cmp 	#'a'
.010eec	90 09		bcc $010ef7			bcc 	_CUCExit
.010eee	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010ef1	b0 04		bcs $010ef7			bcs 	_CUCExit
.010ef3	38		sec				sec
.010ef4	e9 20 00	sbc #$0020			sbc 	#32
.010ef7					_CUCExit:
.010ef7	60		rts				rts
.010ef8					MultiplyTemp1ByA:
.010ef8					_MTGeneral:
.010ef8	da		phx				phx
.010ef9	aa		tax				tax 								; multiplier in X
.010efa	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010efc	85 0c		sta $0c				sta 	DTemp2
.010efe	a5 0a		lda $0a				lda 	DTemp1+2
.010f00	85 0e		sta $0e				sta 	DTemp2+2
.010f02	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010f04	64 0a		stz $0a				stz 	DTemp1+2
.010f06	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010f09					_MTLoop:
.010f09	8a		txa				txa 								; shift X right into C
.010f0a	4a		lsr a				lsr 	a
.010f0b	aa		tax				tax
.010f0c	90 10		bcc $010f1e			bcc 	_MTNoAdd
.010f0e	18		clc				clc
.010f0f	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010f11	65 0c		adc $0c				adc 	DTemp2
.010f13	85 08		sta $08				sta 	DTemp1
.010f15	a5 0a		lda $0a				lda 	DTemp1+2
.010f17	65 0e		adc $0e				adc 	DTemp2+2
.010f19	85 0a		sta $0a				sta 	DTemp1+2
.010f1b	90 01		bcc $010f1e			bcc 	_MTNoAdd
.010f1d	c8		iny				iny
.010f1e					_MTNoAdd:
.010f1e	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010f20	26 0e		rol $0e				rol 	DTemp2+2
.010f22	90 01		bcc $010f25			bcc 	_MTNoOverflow
.010f24	c8		iny				iny
.010f25					_MTNoOverflow:
.010f25	8a		txa				txa 								; until multiplier is zero.
.010f26	d0 e1		bne $010f09			bne 	_MTLoop
.010f28	98		tya				tya
.010f29	18		clc				clc
.010f2a	69 ff ff	adc #$ffff			adc 	#$FFFF
.010f2d	fa		plx				plx 								; restore X
.010f2e	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010f2f					Function_Str:
.010f2f	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.010f32	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f35	48		pha				pha 								; save YA on the stack
.010f36	5a		phy				phy
.010f37	20 26 0e	jsr $010e26			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f3a	85 14		sta $14				sta 	DSignCount
.010f3c	7a		ply				ply 								; YA is the number
.010f3d	68		pla				pla
.010f3e	da		phx				phx
.010f3f	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010f41	20 4a 0f	jsr $010f4a			jsr 	ConvertToString 			; convert it to a string.
.010f44	fa		plx				plx 								; restore X
.010f45	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010f47	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f49	60		rts				rts
.010f4a					ConvertToString:
.010f4a	48		pha				pha
.010f4b	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010f4e	20 81 05	jsr $010581			jsr 	StringTempAllocate 			; allocate space for return string.
.010f51	68		pla				pla
.010f52					ConvertToStringAlreadyAllocated:
.010f52	da		phx				phx 								; save X (base)
.010f53	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010f55	84 26		sty $26				sty 	DTemp3+2
.010f57	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010f59	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010f5b	10 15		bpl $010f72			bpl 	_CTSNotNegative
.010f5d	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010f60	20 dc 0f	jsr $010fdc			jsr 	CTSOutputA
.010f63	38		sec				sec 								; negate DTemp3 which is the number
.010f64	a9 00 00	lda #$0000			lda 	#0
.010f67	e5 24		sbc $24				sbc 	DTemp3
.010f69	85 24		sta $24				sta 	DTemp3
.010f6b	a9 00 00	lda #$0000			lda 	#0
.010f6e	e5 26		sbc $26				sbc 	DTemp3+2
.010f70	85 26		sta $26				sta 	DTemp3+2
.010f72					_CTSNotNegative:
.010f72	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010f75	48		pha				pha
.010f76	a9 00 00	lda #$0000			lda 	#0
.010f79	48		pha				pha
.010f7a	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010f7c	85 08		sta $08				sta 	DTemp1
.010f7e	64 0a		stz $0a				stz 	DTemp1+2
.010f80					_CTSMultiplySubtractor:
.010f80	38		sec				sec 								; check number vs subtractor
.010f81	a5 24		lda $24				lda 	DTemp3
.010f83	e5 08		sbc $08				sbc 	DTemp1
.010f85	a5 26		lda $26				lda 	DTemp3+2
.010f87	e5 0a		sbc $0a				sbc 	DTemp1+2
.010f89	90 0f		bcc $010f9a			bcc		_CTSScaledUp 				; if >= then scaled up.
.010f8b	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010f8d	48		pha				pha
.010f8e	a5 0a		lda $0a				lda 	DTemp1+2
.010f90	48		pha				pha
.010f91	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010f93	20 f8 0e	jsr $010ef8			jsr 	MultiplyTemp1ByA
.010f96	b0 02		bcs $010f9a			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010f98	80 e6		bra $010f80			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010f9a					_CTSScaledUp:
.010f9a	7a		ply				ply 								; YA contains the previous divider.
.010f9b	68		pla				pla
.010f9c	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010f9f	d0 05		bne $010fa6			bne 	_CTSHasDigit
.010fa1	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010fa4	f0 20		beq $010fc6			beq 	_CTSExit
.010fa6					_CTSHasDigit:
.010fa6	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010fa8	84 0e		sty $0e				sty 	DTemp2+2
.010faa	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010fad					_CTSSubLoop:
.010fad	38		sec				sec 								; subtract subtractor from number
.010fae	a5 24		lda $24				lda 	DTemp3
.010fb0	e5 0c		sbc $0c				sbc 	DTemp2
.010fb2	a8		tay				tay 								; intermediate in Y
.010fb3	a5 26		lda $26				lda 	DTemp3+2
.010fb5	e5 0e		sbc $0e				sbc 	DTemp2+2
.010fb7	90 07		bcc $010fc0			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010fb9	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010fbb	84 24		sty $24				sty 	DTemp3
.010fbd	e8		inx				inx 								; one more subtraction
.010fbe	80 ed		bra $010fad			bra 	_CTSSubLoop 				; try it again.
.010fc0					_CTSFinishedSubtracting:
.010fc0	8a		txa				txa 								; convert to ASCII.
.010fc1	20 cf 0f	jsr $010fcf			jsr 	CTSOutputHexDigit 			; write that out.
.010fc4	80 d4		bra $010f9a			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010fc6					_CTSExit:
.010fc6	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010fc8	20 cf 0f	jsr $010fcf			jsr 	CTSOutputHexDigit
.010fcb	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010fcd	fa		plx				plx 								; restore X.
.010fce	60		rts				rts
.010fcf					CTSOutputHexDigit:
.010fcf	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010fd2	90 04		bcc $010fd8			bcc 	_CTSNotLetter
.010fd4	18		clc				clc
.010fd5	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010fd8					_CTSNotLetter:
.010fd8	18		clc				clc
.010fd9	69 30 00	adc #$0030			adc 	#48
.010fdc					CTSOutputA:
.010fdc	5a		phy				phy 								; save Y, set Y to current pointer
.010fdd	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010fdf	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010fe2	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010fe4	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010fe6	1a		inc a				inc 	a
.010fe7	92 18		sta ($18)			sta 	(DStartTempString)
.010fe9	c2 20		rep #$20			rep 	#$20
.010feb	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010fed	7a		ply				ply 								; restore Y and exit.
.010fee	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.010fef					Function_INSTR:
.010fef	20 39 05	jsr $010539			jsr 	ResetTypeInteger 			; returns a integer
.010ff2	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010ff5	48		pha				pha 								; save string to search
.010ff6	20 10 05	jsr $010510			jsr 	ExpectComma
.010ff9	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010ffc	20 07 05	jsr $010507			jsr 	ExpectRightBracket
.010fff	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.011001	68		pla				pla
.011002	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011004	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011006	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011008	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.01100a	38		sec				sec
.01100b	b2 0c		lda ($0c)			lda 	(DTemp2)
.01100d	f2 08		sbc ($08)			sbc		(DTemp1)
.01100f	c2 20		rep #$20			rep 	#$20
.011011	90 2c		bcc $01103f			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.011013	29 ff 00	and #$00ff			and 	#$00FF
.011016	1a		inc a				inc 	a
.011017	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.011019	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.01101b	29 ff 00	and #$00ff			and 	#$00FF
.01101e	f0 22		beq $011042			beq 	_FINSError
.011020					_FINSLoop:
.011020	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.011022	1a		inc a				inc 	a
.011023	95 00		sta $00,x			sta 	EXSValueL+0,x
.011025	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.011027	29 ff 00	and #$00ff			and 	#$00FF
.01102a	a8		tay				tay									; start comparing at index 1.
.01102b					_FINSCompare:
.01102b	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.01102d	51 0c		eor ($0c),y			eor 	(DTemp2),y
.01102f	29 ff 00	and #$00ff			and 	#$00FF
.011032	d0 05		bne $011039			bne 	_FINSNext
.011034	88		dey				dey
.011035	d0 f4		bne $01102b			bne 	_FINSCompare
.011037	80 08		bra $011041			bra 	_FINSExit
.011039					_FINSNext:
.011039	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.01103b	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.01103d	d0 e1		bne $011020			bne 	_FINSLoop
.01103f					_FINSFail:
.01103f	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.011041					_FINSExit:
.011041	60		rts				rts
.011042					_FINSError:
.011042	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011045	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>01104d	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.011056					Function_UPPER:
.011056	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.011059	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.01105c	48		pha				pha
.01105d	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; close call.
.011060	20 81 05	jsr $010581			jsr		StringTempAllocate 			; allocate memory for it
.011063	68		pla				pla
.011064	20 bb 05	jsr $0105bb			jsr 	StringCreateCopy 			; create a copy of it.
.011067	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011069	95 00		sta $00,x			sta 	EXSValueL+0,x
.01106b	a8		tay				tay 								; address in Y
.01106c	74 20		stz $20,x			stz 	EXSValueH+0,x
.01106e	da		phx				phx 								; save X
.01106f	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011071	29 ff 00	and #$00ff			and 	#$00FF
.011074	f0 20		beq $011096			beq 	_FUPExit
.011076	aa		tax				tax 								; put in X
.011077					_FUPLoop:
.011077	c8		iny				iny 								; increment and load character
.011078	b9 00 00	lda $0000,y			lda 	$0000,y
.01107b	29 ff 00	and #$00ff			and 	#$00FF
.01107e	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011081	90 10		bcc $011093			bcc 	_FUPNoChange
.011083	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011086	b0 0b		bcs $011093			bcs 	_FUPNoChange
.011088	38		sec				sec 								; shift case
.011089	e9 20 00	sbc #$0020			sbc 	#32
.01108c	e2 20		sep #$20			sep 	#$20 						; write back
.01108e	99 00 00	sta $0000,y			sta 	$0000,y
.011091	c2 20		rep #$20			rep 	#$20
.011093					_FUPNoChange:
.011093	ca		dex				dex 								; do X times
.011094	d0 e1		bne $011077			bne 	_FUPLoop
.011096					_FUPExit:
.011096	fa		plx				plx 								; restore X
.011097	60		rts				rts
.011098					Function_LOWER:
.011098	20 41 05	jsr $010541			jsr 	ResetTypeString 			; returns a string.
.01109b	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.01109e	48		pha				pha
.01109f	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; close call.
.0110a2	20 81 05	jsr $010581			jsr		StringTempAllocate 			; allocate memory for it
.0110a5	68		pla				pla
.0110a6	20 bb 05	jsr $0105bb			jsr 	StringCreateCopy 			; create a copy of it.
.0110a9	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0110ab	95 00		sta $00,x			sta 	EXSValueL+0,x
.0110ad	a8		tay				tay 								; address in Y
.0110ae	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110b0	da		phx				phx 								; save X
.0110b1	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0110b3	29 ff 00	and #$00ff			and 	#$00FF
.0110b6	f0 20		beq $0110d8			beq 	_FLOExit
.0110b8	aa		tax				tax 								; put in X
.0110b9					_FLOLoop:
.0110b9	c8		iny				iny 								; increment and load character
.0110ba	b9 00 00	lda $0000,y			lda 	$0000,y
.0110bd	29 ff 00	and #$00ff			and 	#$00FF
.0110c0	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.0110c3	90 10		bcc $0110d5			bcc 	_FLONoChange
.0110c5	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.0110c8	b0 0b		bcs $0110d5			bcs 	_FLONoChange
.0110ca	18		clc				clc 								; shift case
.0110cb	69 20 00	adc #$0020			adc 	#32
.0110ce	e2 20		sep #$20			sep 	#$20 						; write back
.0110d0	99 00 00	sta $0000,y			sta 	$0000,y
.0110d3	c2 20		rep #$20			rep 	#$20
.0110d5					_FLONoChange:
.0110d5	ca		dex				dex 								; do X times
.0110d6	d0 e1		bne $0110b9			bne 	_FLOLoop
.0110d8					_FLOExit:
.0110d8	fa		plx				plx 								; restore X
.0110d9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0110da					Function_Let:
.0110da	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0110dc	48		pha				pha  								; save on stack for later.
.0110dd	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.0110e0	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0110e2	b0 1c		bcs $011100			bcs 	_FLetFound 					; skip if found.
.0110e4	68		pla				pla 								; get and push the first token again.
.0110e5	48		pha				pha
.0110e6	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0110e9	d0 57		bne $011142			bne 	_FLError					; arrays, so this causes an error.
.0110eb	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0110ed	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0110f0	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.0110f3	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0110f5					_FLSkipToken:
.0110f5	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0110f7	e6 06		inc $06				inc 	DCodePtr
.0110f9	e6 06		inc $06				inc 	DCodePtr
.0110fb	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0110fe	d0 f5		bne $0110f5			bne 	_FLSkipToken
.011100					_FLetFound:
.011100	68		pla				pla 								; get and save the first token.
.011101	48		pha				pha
.011102	a8		tay				tay 								; put it in Y
.011103	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011106	f0 07		beq $01110f			beq 	_FLetNotArray
.011108	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.01110a	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.01110d	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01110f					_FLetNotArray:
.01110f	7a		ply				ply 								; get the first token into Y
.011110	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.011112	48		pha				pha
.011113	5a		phy				phy 								; save the first token on the stack.
.011114	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011117	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.01111a	68		pla				pla 								; restore the first token.
.01111b	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.01111e	d0 0f		bne $01112f			bne 	_FLetString 				; skip if string.
.011120	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.011123	7a		ply				ply 								; get address in Y
.011124	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.011126	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011129	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.01112b	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.01112e	60		rts				rts
.01112f					_FLetString:
.01112f	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.011132	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.011134	20 dc 05	jsr $0105dc			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.011137	7a		ply				ply 								; get address
.011138	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.01113b	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.01113e	99 02 00	sta $0002,y			sta 	$0002,y
.011141	60		rts				rts
.011142					_FLError:
.011142	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011145	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>01114d	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.011155					Command_List:
.011155	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011158	20 81 05	jsr $010581		jsr 	StringTempAllocate
.01115b	85 30		sta $30			sta 	DListBuffer						; save buffer.
.01115d	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01115f	64 2e		stz $2e			stz 	DIndent2
.011161	64 32		stz $32			stz 	DTemp4+0 						; low number
.011163	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011166	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011168	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.01116a	f0 28		beq $011194		beq 	_CLIList
.01116c	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.01116f	f0 23		beq $011194		beq 	_CLIList
.011171	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.011174	c0 00 00	cpy #$0000		cpy 	#0
.011177	d0 18		bne $011191		bne 	_CLIError
.011179	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01117b	85 34		sta $34			sta 	DTemp4+2
.01117d	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01117f	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.011182	d0 10		bne $011194		bne 	_CLIList
.011184	20 10 05	jsr $010510		jsr 	ExpectComma 					; skip comma
.011187	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.01118a	85 34		sta $34			sta 	DTemp4+2
.01118c	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.01118f	f0 03		beq $011194		beq 	_CLIList
.011191					_CLIError:
.011191	82 49 f3	brl $0104dd		brl 	SyntaxError
.011194					_CLIList:
.011194	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011197	18		clc			clc
.011198	65 02		adc $02			adc 	DBaseAddress
.01119a	a8		tay			tay 									; put in Y
.01119b					_CLINextLine:
.01119b	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.01119e	f0 29		beq $0111c9		beq 	_CLIExit
.0111a0	20 31 13	jsr $011331		jsr 	ScanIndent  					; scan for formatting.
.0111a3	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0111a6	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0111a8	90 14		bcc $0111be		bcc 	_CLIFollowLink
.0111aa	c5 34		cmp $34			cmp 	DTemp4+2
.0111ac	f0 02		beq $0111b0		beq 	_CLIShowLine
.0111ae	b0 0e		bcs $0111be		bcs 	_CLIFollowLink
.0111b0					_CLIShowLine:
.0111b0	a5 30		lda $30			lda 	DListBuffer
.0111b2	20 cc 11	jsr $0111cc		jsr 	Detokenise 						; detokenise it
.0111b5	5a		phy			phy
.0111b6	a8		tay			tay 									; print buffer out
.0111b7	20 67 05	jsr $010567		jsr 	PrintBasicString
.0111ba	20 06 1b	jsr $011b06		jsr 	HWNewLine
.0111bd	7a		ply			ply 									; get address
.0111be					_CLIFollowLink:
.0111be	98		tya			tya 									; follow link
.0111bf	18		clc			clc
.0111c0	79 00 00	adc $0000,y		adc 	$0000,y
.0111c3	a8		tay			tay
.0111c4	20 22 1b	jsr $011b22		jsr 	HWCheckBreak 					; break key pressed.
.0111c7	f0 d2		beq $01119b		beq 	_CLINextLine
.0111c9					_CLIExit:
.0111c9	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0111cb	60		rts			rts
.0111cc					Detokenise:
.0111cc	48		pha			pha
.0111cd	da		phx			phx
.0111ce	5a		phy			phy
.0111cf	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0111d1	1a		inc a			inc 	a
.0111d2	85 1a		sta $1a			sta 	DCurrentTempString
.0111d4	64 1c		stz $1c			stz		DConstantShift
.0111d6	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0111d9	92 18		sta ($18)		sta 	(DStartTempString)
.0111db	5a		phy			phy 									; save Y
.0111dc	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0111df	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0111e2	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0111e5	20 52 0f	jsr $010f52		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0111e8	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0111ea	c5 2e		cmp $2e			cmp 	DIndent2
.0111ec	90 02		bcc $0111f0		bcc 	_DTKSmaller
.0111ee	a5 2e		lda $2e			lda 	DIndent2
.0111f0					_DTKSmaller:
.0111f0	0a		asl a			asl 	a
.0111f1	69 06 00	adc #$0006		adc 	#6
.0111f4	85 08		sta $08			sta 	DTemp1
.0111f6					_DTKPadLineNo:
.0111f6	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0111f9	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.0111fc	b2 18		lda ($18)		lda 	(DStartTempString)
.0111fe	29 ff 00	and #$00ff		and 	#$00FF
.011201	c5 08		cmp $08			cmp 	DTemp1
.011203	d0 f1		bne $0111f6		bne 	_DTKPadLineNo
.011205	68		pla			pla 									; get pointer
.011206	18		clc			clc 									; point to start of line
.011207	69 04 00	adc #$0004		adc 	#4
.01120a	a8		tay			tay 									; put back in Y.
.01120b					_DTKMainLoop:
.01120b	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01120e	d0 04		bne $011214		bne 	_DTKNotZero 					; if zero, return.
.011210	7a		ply			ply
.011211	fa		plx			plx
.011212	68		pla			pla
.011213	60		rts			rts
.011214					_DTKNotZero:
.011214	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011217	b0 1c		bcs $011235		bcs 	_DTKNotString
.011219	5a		phy			phy										; save token address on stack.
.01121a	c8		iny			iny 									; skip first token
.01121b	c8		iny			iny
.01121c	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01121f	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.011222	98		tya			tya 									; copy the string out.
.011223	20 bb 05	jsr $0105bb		jsr 	StringCreateCopy
.011226	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011229	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.01122c	68		pla			pla 									; get token, which is its own offset
.01122d	a8		tay			tay
.01122e	18		clc			clc
.01122f	79 00 00	adc $0000,y		adc 	$0000,y
.011232	a8		tay			tay
.011233	80 d6		bra $01120b		bra 	_DTKMainLoop
.011235					_DTKNotString:
.011235	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011238	b0 09		bcs $011243		bcs 	_DTKNotShift
.01123a	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01123d	85 1c		sta $1c			sta 	DConstantShift
.01123f	c8		iny			iny 									; skip token.
.011240	c8		iny			iny
.011241	80 c8		bra $01120b		bra 	_DTKMainLoop
.011243					_DTKNotShift:
.011243	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011246	b0 07		bcs $01124f		bcs 	_DTKNotKeyword
.011248	c8		iny			iny 									; skip over token
.011249	c8		iny			iny
.01124a	20 c9 12	jsr $0112c9		jsr 	_DTKDecodeKeyword 				; decode it.
.01124d	80 bc		bra $01120b		bra 	_DTKMainLoop
.01124f					_DTKNotKeyword:
.01124f	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011252	b0 18		bcs $01126c		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011254	5a		phy			phy 									; save pointer
.011255	38		sec			sec  									; shift it in the range 0-32767
.011256	e9 00 40	sbc #$4000		sbc 	#$4000
.011259	0a		asl a			asl 	a 								; shift it left, losing bit 15
.01125a	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01125c	6a		ror a			ror 	a 								; rotate that into the constant value
.01125d	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01125f	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011262	20 52 0f	jsr $010f52		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011265	64 1c		stz $1c			stz 	DConstantShift
.011267	7a		ply			ply 									; restore pointer
.011268	c8		iny			iny 									; skip token.
.011269	c8		iny			iny
.01126a	80 9f		bra $01120b		bra 	_DTKMainLoop
.01126c					_DTKIdentifier:
.01126c	48		pha			pha 									; save token for typing at end
.01126d					_DTKILoop:
.01126d	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011270	20 99 12	jsr $011299		jsr 	_DTKIDecodeToken 				; decode it.
.011273	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011276	c8		iny			iny 									; skip it
.011277	c8		iny			iny
.011278	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01127b	d0 f0		bne $01126d		bne 	_DTKILoop
.01127d	68		pla			pla 									; add $( as required.
.01127e	48		pha			pha 									; comes from the first token.
.01127f	29 00 20	and #$2000		and 	#IDTypeMask
.011282	f0 06		beq $01128a		beq 	_DTKINotString
.011284	a9 24 00	lda #$0024		lda 	#"$"
.011287	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.01128a					_DTKINotString:
.01128a	68		pla			pla
.01128b	29 00 10	and #$1000		and 	#IDArrayMask
.01128e	f0 06		beq $011296		beq 	_DTKINotArray
.011290	a9 28 00	lda #$0028		lda 	#"("
.011293	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.011296					_DTKINotArray:
.011296	82 72 ff	brl $01120b		brl 	_DTKMainLoop
.011299					_DTKIDecodeToken:
.011299	5a		phy			phy
.01129a	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01129d	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0112a0					_DTKIDivide:
.0112a0	38		sec			sec
.0112a1	e9 2d 00	sbc #$002d		sbc 	#45
.0112a4	c8		iny			iny
.0112a5	b0 f9		bcs $0112a0		bcs 	_DTKIDivide
.0112a7	69 2d 00	adc #$002d		adc 	#45
.0112aa	20 b3 12	jsr $0112b3		jsr 	_DTKIOutA 						; output low.
.0112ad	98		tya			tya
.0112ae	20 b3 12	jsr $0112b3		jsr 	_DTKIOutA 						; output high
.0112b1	7a		ply			ply
.0112b2	60		rts			rts
.0112b3					_DTKIOutA:
.0112b3	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0112b6	f0 10		beq $0112c8		beq 	_DTKIOutExit
.0112b8	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0112bb	90 04		bcc $0112c1		bcc 	_DTKIOutAlpha
.0112bd	38		sec			sec  									; adjust for 0-9
.0112be	e9 4b 00	sbc #$004b		sbc 	#$4B
.0112c1					_DTKIOutAlpha:
.0112c1	18		clc			clc										; adjust for A-Z
.0112c2	69 60 00	adc #$0060		adc 	#96
.0112c5	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.0112c8					_DTKIOutExit:
.0112c8	60		rts			rts
.0112c9					_DTKDecodeKeyword:
.0112c9	48		pha			pha
.0112ca	da		phx			phx
.0112cb	5a		phy			phy
.0112cc	a8		tay			tay 									; save token ID in Y
.0112cd	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0112d0	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0112d3	48		pha			pha 									; save this flag on a stack
.0112d4	5a		phy			phy 									; save the token ID
.0112d5	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0112d8	d0 19		bne $0112f3		bne 	_DTKNotSpecial1
.0112da	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0112dc	88		dey			dey
.0112dd	b9 00 00	lda $0000,y		lda 	$0000,y
.0112e0	29 ff 00	and #$00ff		and 	#$00FF
.0112e3	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0112e6	f0 0b		beq $0112f3		beq 	_DTKNotSpecial1
.0112e8	c9 3a 00	cmp #$003a		cmp 	#":"
.0112eb	f0 06		beq $0112f3		beq 	_DTKNotSpecial1
.0112ed	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0112f0	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.0112f3					_DTKNotSpecial1:
.0112f3	68		pla			pla
.0112f4	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0112f7	a8		tay			tay 									; into Y.
.0112f8	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0112fb					_DTKDWorkThrough:
.0112fb	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0112fc	f0 0f		beq $01130d		beq 	_DTKDFound
.0112fe	86 08		stx $08			stx 	DTemp1
.011300	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.011304	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011307	18		clc			clc
.011308	65 08		adc $08			adc 	DTemp1
.01130a	aa		tax			tax
.01130b	80 ee		bra $0112fb		bra 	_DTKDWorkThrough
.01130d					_DTKDFound:
.01130d	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.011311	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011314	3a		dec a			dec 	a
.011315	a8		tay			tay 									; put in Y
.011316					_DTKOut:
.011316	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.01131a	29 ff 00	and #$00ff		and 	#$00FF
.01131d	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.011320	e8		inx			inx
.011321	88		dey			dey
.011322	d0 f2		bne $011316		bne 	_DTKOut
.011324	68		pla			pla 									; trailing space.
.011325	d0 06		bne $01132d		bne 	_DTKNotSpecial2
.011327	a9 20 00	lda #$0020		lda 	#" "
.01132a	20 ad 05	jsr $0105ad		jsr 	StringWriteCharacter
.01132d					_DTKNotSpecial2:
.01132d	7a		ply			ply
.01132e	fa		plx			plx
.01132f	68		pla			pla
.011330	60		rts			rts
.011331					ScanIndent:
.011331	48		pha			pha
.011332	5a		phy			phy
.011333	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011335	85 2e		sta $2e			sta 	DIndent2
.011337	98		tya			tya
.011338	18		clc			clc 									; point to code.
.011339	69 04 00	adc #$0004		adc 	#4
.01133c	a8		tay			tay
.01133d					_SILoop:
.01133d	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011340	f0 35		beq $011377		beq 	_SIExit
.011342	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011345	b0 08		bcs $01134f		bcs 	_SICheckKeyword
.011347	98		tya			tya 									; skip string.
.011348	18		clc			clc
.011349	79 00 00	adc $0000,y		adc 	$0000,y
.01134c	a8		tay			tay
.01134d	80 ee		bra $01133d		bra 	_SILoop
.01134f					_SICheckKeyword:
.01134f	29 00 e0	and #$e000		and 	#$E000
.011352	c9 00 20	cmp #$2000		cmp 	#$2000
.011355	f0 04		beq $01135b		beq 	_SIFoundKeyword
.011357					_SIAdvance:
.011357	c8		iny			iny 									; if not, loop round.
.011358	c8		iny			iny
.011359	80 e2		bra $01133d		bra 	_SILoop
.01135b					_SIFoundKeyword:
.01135b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01135e	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011361	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011364	f0 0d		beq $011373		beq 	_SIKeyPlus
.011366	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011369	d0 ec		bne $011357		bne 	_SIAdvance
.01136b	c6 2c		dec $2c			dec 	DIndent
.01136d	10 e8		bpl $011357		bpl 	_SIAdvance
.01136f	64 2c		stz $2c			stz 	DIndent
.011371	80 e4		bra $011357		bra 	_SIAdvance
.011373					_SIKeyPlus:
.011373	e6 2c		inc $2c			inc 	DIndent
.011375	80 e0		bra $011357		bra 	_SIAdvance
.011377					_SIExit:
.011377	7a		ply			ply
.011378	68		pla			pla
.011379	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.01137a					Function_PRINT:
.01137a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01137c	f0 33		beq $0113b1			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01137e	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011381	f0 2e		beq $0113b1			beq 	_FPRExitCR
.011383	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011386	f0 23		beq $0113ab			beq 	_FPRSkipLoop
.011388	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.01138b	f0 1b		beq $0113a8			beq 	_FPRNewLine
.01138d	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.011390	f0 11		beq $0113a3			beq 	_FPRTab
.011392					_FPRExpression:
.011392	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011395	b0 06		bcs $01139d			bcs 	_FPRHaveString
.011397	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01139a	20 4a 0f	jsr $010f4a			jsr 	ConvertToString
.01139d					_FPRHaveString:
.01139d	a8		tay				tay 								; print the basic String.
.01139e	20 67 05	jsr $010567			jsr 	PrintBASICString
.0113a1	80 d7		bra $01137a			bra 	Function_Print 				; and go round again.
.0113a3					_FPRTab:
.0113a3	20 1b 1b	jsr $011b1b			jsr 	HWTab
.0113a6	80 03		bra $0113ab			bra 	_FPRSkipLoop
.0113a8					_FPRNewLine:
.0113a8	20 06 1b	jsr $011b06			jsr 	HWNewLine
.0113ab					_FPRSkipLoop:
.0113ab	e6 06		inc $06				inc 	DCodePtr
.0113ad	e6 06		inc $06				inc 	DCodePtr
.0113af	80 c9		bra $01137a			bra 	Function_Print
.0113b1					_FPRExitCR:
.0113b1	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0113b3	88		dey				dey
.0113b4	88		dey				dey
.0113b5	b9 00 00	lda $0000,y			lda 	$0000,y
.0113b8	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0113bb	f0 08		beq $0113c5			beq 	_FPRExit
.0113bd	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.0113c0	f0 03		beq $0113c5			beq 	_FPRExit
.0113c2	20 06 1b	jsr $011b06			jsr 	HWNewLine 					; print a new line.
.0113c5					_FPRExit:
.0113c5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0113c6					Function_IF:
.0113c6	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.0113c9	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0113cb	05 08		ora $08				ora 	DTemp1
.0113cd	a8		tay				tay 								; success flag in Y.
.0113ce	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0113d0	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.0113d3	d0 32		bne $011407			bne 	_FIFExtended 				; if so, go to the extended IF.
.0113d5	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0113d7	e6 06		inc $06				inc 	DCodePtr
.0113d9	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0113dc	f0 0f		beq $0113ed			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0113de	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0113e0	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0113e3	90 21		bcc $011406			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0113e5	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113e8	b0 1c		bcs $011406			bcs 	_FIFContinue
.0113ea	4c 7c 16	jmp $01167c			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0113ed					_FIFEndOfLine:
.0113ed	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0113ef	f0 15		beq $011406			beq 	_FIFContinue 				; if done so, continue.
.0113f1	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0113f4	90 06		bcc $0113fc			bcc 	_FIFStringConstant
.0113f6	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0113f8	e6 06		inc $06				inc 	DCodePtr
.0113fa	80 f1		bra $0113ed			bra 	_FIFEndOfLine
.0113fc					_FIFStringConstant:
.0113fc	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0113ff	18		clc				clc
.011400	65 06		adc $06				adc 	DCodePtr
.011402	85 06		sta $06				sta 	DCodePtr
.011404	80 e7		bra $0113ed			bra 	_FIFEndOfLine
.011406					_FIFContinue:
.011406	60		rts				rts
.011407					_FIFExtended:
.011407	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011409	e6 2a		inc $2a				inc 	DStack
.01140b	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.01140e	a6 2a		ldx $2a				ldx 	DStack
.011410	95 00		sta $00,x			sta 	$00,x
.011412	98		tya				tya 								; see if the test was passed.
.011413	f0 01		beq $011416			beq 	_FIXSkip 					; if zero then it has failed.
.011415	60		rts				rts 								; test passed, so continue executing
.011416					_FIXSkip:
.011416	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011419	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.01141c	20 7c 14	jsr $01147c			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01141f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011421	e6 06		inc $06				inc 	DCodePtr
.011423	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011426	d0 04		bne $01142c			bne 	_FIXNoThrow
.011428	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01142a	c6 2a		dec $2a				dec 	DStack
.01142c					_FIXNoThrow:
.01142c	60		rts				rts
.01142d					Handler_ELSE:
.01142d	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01142f	b5 00		lda $00,x			lda 	$00,x
.011431	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011434	d0 12		bne $011448			bne 	_HEBadStructure
.011436	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.011439	a2 00 00	ldx #$0000			ldx 	#$0000
.01143c	20 7c 14	jsr $01147c			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01143f	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011441	e6 06		inc $06				inc 	DCodePtr
.011443	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011445	c6 2a		dec $2a				dec 	DStack
.011447	60		rts				rts
.011448					_HEBadStructure:
.011448	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01144b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011453	68 6f 75 74 20 49 66 00
.01145b					Handler_ENDIF:
.01145b	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01145d	b5 00		lda $00,x			lda 	$00,x
.01145f	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011462	d0 05		bne $011469			bne 	_HEIBadStructure
.011464	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011466	c6 2a		dec $2a				dec 	DStack
.011468	60		rts				rts
.011469					_HEIBadStructure:
.011469	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01146c	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011474	68 6f 75 74 20 49 66 00
.01147c					ScanForwardLevel:
.01147c	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01147e	86 0a		stx $0a				stx 	DTemp1+2
.011480	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011482	85 0c		sta $0c				sta 	DTemp2
.011484	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011487					_SFLLoop:
.011487	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01148a	d0 0d		bne $011499			bne 	_SFLNoCheck 				; we're in a substructure.
.01148c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01148e	f0 09		beq $011499			beq 	_SFLNoCheck 				; don't check zero
.011490	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011492	f0 04		beq $011498			beq 	_SFLFound
.011494	c5 0a		cmp $0a				cmp 	DTemp1+2
.011496	d0 01		bne $011499			bne 	_SFLNoCheck
.011498					_SFLFound:
.011498	60		rts				rts
.011499					_SFLNoCheck:
.011499	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01149b	f0 4f		beq $0114ec			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01149d	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0114a0	90 40		bcc $0114e2			bcc 	_SFLSkipString 				; then handle that.
.0114a2	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0114a4	e6 06		inc $06				inc 	DCodePtr
.0114a6	a8		tay				tay 								; put token in Y temporarily.
.0114a7	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0114aa	c9 00 20	cmp #$2000			cmp 	#$2000
.0114ad	d0 d8		bne $011487			bne 	_SFLLoop
.0114af	98		tya				tya 								; get the token back.
.0114b0	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0114b3	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0114b6	f0 cf		beq $011487			beq 	_SFLLoop
.0114b8	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0114bb	90 ca		bcc $011487			bcc 	_SFLLoop
.0114bd	e8		inx				inx 								; increment the level.
.0114be	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0114c1	f0 c4		beq $011487			beq 	_SFLLoop
.0114c3	ca		dex				dex 								; decrement the level
.0114c4	ca		dex				dex 								; one overdoes the previous inx.
.0114c5	10 c0		bpl $011487			bpl 	_SFLLoop 					; if gone -ve then error.
.0114c7					_SFLError:
.0114c7	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0114c9	85 22		sta $22				sta 	DLineNumber
.0114cb	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0114ce	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0114d6	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0114e2					_SFLSkipString:
.0114e2	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0114e5	18		clc				clc
.0114e6	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0114e8	85 06		sta $06				sta 	DCodePtr
.0114ea	80 9b		bra $011487			bra 	_SFLLoop 					; go round again.
.0114ec					_SFLNextLine:
.0114ec	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0114ee	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0114f1	f0 d4		beq $0114c7			beq 	_SFLError 					; if zero, then there's no more code to search.
.0114f3	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0114f6	85 22		sta $22				sta 	DLineNumber
.0114f8	18		clc				clc
.0114f9	a5 06		lda $06				lda 	DCodePtr
.0114fb	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0114fe	85 06		sta $06				sta 	DCodePtr
.011500	80 85		bra $011487			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.011502					Command_FOR:
.011502	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011504	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011507	d0 60		bne $011569			bne		_CFOBad
.011509	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.01150c	b0 15		bcs $011523			bcs 	_CFOExists
.01150e	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011510	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011513	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011516	48		pha				pha 								; save on stack
.011517					_CFOSkipToken:
.011517	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011519	e6 06		inc $06				inc 	DCodePtr
.01151b	e6 06		inc $06				inc 	DCodePtr
.01151d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011520	d0 f5		bne $011517			bne 	_CFOSkipToken
.011522	68		pla				pla 								; restore address
.011523					_CFOExists:
.011523	48		pha				pha 								; push variable address on stack
.011524	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011527	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.01152a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.01152d	bb		tyx				tyx 								; put high value in X
.01152e	7a		ply				ply 								; address in Y
.01152f	99 00 00	sta $0000,y			sta 	$0000,y
.011532	8a		txa				txa
.011533	99 02 00	sta $0002,y			sta 	$0002,y
.011536	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.011539	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.01153c	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01153e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011540	95 02		sta $02,x			sta 	$02,x
.011542	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011544	95 04		sta $04,x			sta 	$04,x
.011546	98		tya				tya 								; save variable address at +6
.011547	95 06		sta $06,x			sta 	$06,x
.011549	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.01154c	95 08		sta $08,x			sta 	$08,x
.01154e	8a		txa				txa 								; add 8 to stack position
.01154f	18		clc				clc
.011550	69 08 00	adc #$0008			adc 	#8
.011553	85 2a		sta $2a				sta 	DStack
.011555	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011558	b2 06		lda ($06)			lda 	(DCodePtr)
.01155a	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.01155d	d0 09		bne $011568			bne 	_CFONoStep
.01155f	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.011562	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.011565	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.011568					_CFONoStep:
.011568	60		rts				rts
.011569					_CFOBad:
.011569	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01156c	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011574	76 61 72 69 61 62 6c 65 00
.01157d					Command_NEXT:
.01157d	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01157f	b5 00		lda $00,x			lda 	$00,x
.011581	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011584	f0 14		beq $01159a			beq 	_CNXOk
.011586	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011589	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011591	68 6f 75 74 20 46 6f 72 00
.01159a					_CNXOk:
.01159a	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01159c	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01159f	90 22		bcc $0115c3			bcc 	_CNXNoVariable
.0115a1	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.0115a4	90 08		bcc $0115ae			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0115a6	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0115a8	ca		dex				dex
.0115a9	ca		dex				dex
.0115aa	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0115ac	f0 15		beq $0115c3			beq 	_CNXNoVariable 				; then continue
.0115ae					_CNXNextVar:
.0115ae	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0115b1	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0115b9	20 76 61 72 69 61 62 6c 65 00
.0115c3					_CNXNoVariable:
.0115c3	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0115c5	48		pha				pha
.0115c6	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0115c8	38		sec				sec
.0115c9	e9 08 00	sbc #$0008			sbc 	#8
.0115cc	85 2a		sta $2a				sta 	DStack
.0115ce	aa		tax				tax 								; X points to the stack.
.0115cf	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0115d1	85 06		sta $06				sta 	DCodePtr
.0115d3	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.0115d6	5a		phy				phy 								; save the target on the stack
.0115d7	48		pha				pha
.0115d8	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0115db	85 08		sta $08				sta 	DTemp1
.0115dd	64 0a		stz $0a				stz 	DTemp1+2
.0115df	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0115e1	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.0115e4	d0 0b		bne $0115f1			bne 	_CNXNoStep
.0115e6	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0115e8	e6 06		inc $06				inc 	DCodePtr
.0115ea	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.0115ed	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0115ef	84 0a		sty $0a				sty 	DTemp1+2
.0115f1					_CNXNoStep:
.0115f1	68		pla				pla 								; save the Target in DTemp2
.0115f2	85 0c		sta $0c				sta 	DTemp2
.0115f4	68		pla				pla
.0115f5	85 0e		sta $0e				sta 	DTemp2+2
.0115f7	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0115f9	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0115fb	a8		tay				tay
.0115fc	18		clc				clc
.0115fd	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011600	65 08		adc $08				adc 	DTemp1
.011602	99 00 00	sta $0000,y			sta 	$0000,y
.011605	b9 02 00	lda $0002,y			lda 	$0002,y
.011608	65 0a		adc $0a				adc 	DTemp1+2
.01160a	99 02 00	sta $0002,y			sta 	$0002,y
.01160d	38		sec				sec
.01160e	a5 0c		lda $0c				lda 	DTemp2
.011610	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011613	85 0c		sta $0c				sta 	DTemp2
.011615	a5 0e		lda $0e				lda 	DTemp2+2
.011617	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01161a	85 0e		sta $0e				sta 	DTemp2+2
.01161c	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01161e	f0 0a		beq $01162a			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011620	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011622	45 0a		eor $0a				eor 	DTemp1+2
.011624	10 04		bpl $01162a			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011626	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011627	85 06		sta $06				sta 	DCodePtr
.011629	60		rts				rts
.01162a					_CNXLoopAgain:
.01162a	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01162b	18		clc				clc
.01162c	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01162e	aa		tax				tax
.01162f	69 08 00	adc #$0008			adc 	#8
.011632	85 2a		sta $2a				sta 	DStack
.011634	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011636	85 22		sta $22				sta 	DLineNumber
.011638	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011639					Function_ONGOTO:
.011639	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.01163c	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01163f	d0 25		bne $011666			bne 	_FOGoFail
.011641	c9 00 00	cmp #$0000			cmp 	#0
.011644	f0 20		beq $011666			beq 	_FOGoFail 					; we start with index = 1
.011646	48		pha				pha 								; save count on stack
.011647	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.01164a	20 ed 04	jsr $0104ed			jsr 	ExpectToken
.01164d	fa		plx				plx 								; put count in X.
.01164e					_FOGoLoop:
.01164e	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011650	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011653	90 73		bcc $0116c8			bcc 	FGOFail 					; if not, then we have an error.
.011655	c9 00 c0	cmp #$c000			cmp 	#$C000
.011658	b0 6e		bcs $0116c8			bcs 	FGOFail
.01165a	ca		dex				dex 								; subtract one, if done, call GOTO code
.01165b	f0 1f		beq $01167c			beq 	Function_GOTO
.01165d	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01165f	e6 06		inc $06				inc 	DCodePtr
.011661	20 10 05	jsr $010510			jsr 	ExpectComma 				; expect a comma
.011664	80 e8		bra $01164e			bra 	_FOGoLoop 					; and loop round.
.011666					_FOGoFail:
.011666	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011669	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011671	47 6f 74 6f 20 76 61 6c 75 65 00
.01167c					Function_GOTO:
.01167c	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01167e	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011681	90 45		bcc $0116c8			bcc 	FGOFail 					; we don't do calculate line numbers.
.011683	c9 00 c0	cmp #$c000			cmp 	#$C000
.011686	b0 40		bcs $0116c8			bcs 	FGOFail
.011688	38		sec				sec 								; convert to 0-32767
.011689	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01168c	aa		tax				tax
.01168d	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011690	18		clc				clc
.011691	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011693	a8		tay				tay
.011694					_FGOSearch:
.011694	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011697	f0 18		beq $0116b1			beq 	_FGOUnknown
.011699	8a		txa				txa 								; does it match line number ?
.01169a	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01169d	f0 08		beq $0116a7			beq 	_FGOFound 					; yes, then found.
.01169f	98		tya				tya 								; no follow the link
.0116a0	18		clc				clc
.0116a1	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0116a4	a8		tay				tay
.0116a5	80 ed		bra $011694			bra 	_FGOSearch 					; and keep looking
.0116a7					_FGOFound:
.0116a7	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0116a9	98		tya				tya 								; Y + 4 is the code pointer.
.0116aa	18		clc				clc 								; (skipping link and line #)
.0116ab	69 04 00	adc #$0004			adc 	#4
.0116ae	85 06		sta $06				sta 	DCodePtr
.0116b0	60		rts				rts									; and continue
.0116b1					_FGOUnknown:
.0116b1	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0116b4	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0116bc	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0116c8					FGOFail:
.0116c8	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0116cb	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0116d3	20 4e 75 6d 62 65 72 00
.0116db					Function_GOSUB:
.0116db	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0116dd	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0116df	18		clc				clc
.0116e0	69 02 00	adc #$0002			adc 	#2
.0116e3	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0116e5	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0116e7	95 04		sta $04,x			sta 	$04,x
.0116e9	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0116ec	95 06		sta $06,x			sta 	$06,x
.0116ee	8a		txa				txa 								; advance stack by 6.
.0116ef	18		clc				clc
.0116f0	69 06 00	adc #$0006			adc 	#6
.0116f3	85 2a		sta $2a				sta 	DStack
.0116f5	80 85		bra $01167c			bra 	Function_GOTO 				; and do a GOTO.
.0116f7					Function_RETURN:
.0116f7	a6 2a		ldx $2a				ldx 	DStack
.0116f9	b5 00		lda $00,x			lda 	$00,x
.0116fb	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0116fe	d0 11		bne $011711			bne 	_FRetFail
.011700	8a		txa				txa 								; unpick stack.
.011701	38		sec				sec
.011702	e9 06 00	sbc #$0006			sbc 	#6
.011705	85 2a		sta $2a				sta 	DStack
.011707	aa		tax				tax
.011708	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01170a	85 06		sta $06				sta 	DCodePtr
.01170c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01170e	85 22		sta $22				sta 	DLineNumber
.011710	60		rts				rts
.011711					_FRetFail:
.011711	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011714	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01171c	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011729					Function_REPEAT:
.011729	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01172b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01172d	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01172f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011731	95 04		sta $04,x			sta 	$04,x
.011733	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.011736	95 06		sta $06,x			sta 	$06,x
.011738	8a		txa				txa 								; advance stack by 6.
.011739	18		clc				clc
.01173a	69 06 00	adc #$0006			adc 	#6
.01173d	85 2a		sta $2a				sta 	DStack
.01173f	60		rts				rts
.011740					Function_UNTIL:
.011740	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011742	b5 00		lda $00,x			lda 	$00,x
.011744	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.011747	d0 26		bne $01176f			bne 	_FUNFail
.011749	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.01174c	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01174f	d0 15		bne $011766			bne 	_FUNExit
.011751	c9 00 00	cmp #$0000			cmp 	#0
.011754	d0 10		bne $011766			bne 	_FUNExit
.011756	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011758	38		sec				sec
.011759	e9 06 00	sbc #$0006			sbc 	#6
.01175c	aa		tax				tax
.01175d	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01175f	85 06		sta $06				sta 	DCodePtr
.011761	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011763	85 22		sta $22				sta 	DLineNumber
.011765	60		rts				rts
.011766					_FUNExit:
.011766	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011768	38		sec				sec
.011769	e9 06 00	sbc #$0006			sbc 	#6
.01176c	85 2a		sta $2a				sta 	DStack
.01176e	60		rts				rts
.01176f					_FUNFail:
.01176f	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011772	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>01177a	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011787					Function_WHILE:
.011787	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011789	48		pha				pha 								; save on stack
.01178a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.01178d	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011790	d0 14		bne $0117a6			bne 	_FWHExecute
.011792	c9 00 00	cmp #$0000			cmp 	#0
.011795	d0 0f		bne $0117a6			bne 	_FWHExecute
.011797	68		pla				pla 								; throw away current instruction
.011798	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.01179b	a2 00 00	ldx #$0000			ldx 	#0
.01179e	20 7c 14	jsr $01147c			jsr 	ScanForwardLevel 			; scan forward checking structures
.0117a1	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0117a3	e6 06		inc $06				inc 	DCodePtr
.0117a5	60		rts				rts
.0117a6					_FWHExecute:
.0117a6	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0117a8	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0117a9	3a		dec a				dec 	a
.0117aa	3a		dec a				dec 	a
.0117ab	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0117ad	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117af	95 04		sta $04,x			sta 	$04,x
.0117b1	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.0117b4	95 06		sta $06,x			sta 	$06,x
.0117b6	8a		txa				txa 								; advance stack by 6.
.0117b7	18		clc				clc
.0117b8	69 06 00	adc #$0006			adc 	#6
.0117bb	85 2a		sta $2a				sta 	DStack
.0117bd	60		rts				rts
.0117be					Function_WEND:
.0117be	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.0117c0	b5 00		lda $00,x			lda 	$00,x
.0117c2	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.0117c5	d0 11		bne $0117d8			bne 	_FWEFail
.0117c7	8a		txa				txa 								; unpick stack and always loop back.
.0117c8	38		sec				sec 								; we do the check at the top.
.0117c9	e9 06 00	sbc #$0006			sbc 	#6
.0117cc	85 2a		sta $2a				sta 	DStack
.0117ce	aa		tax				tax
.0117cf	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0117d1	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0117d3	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0117d5	85 22		sta $22				sta 	DLineNumber
.0117d7	60		rts				rts
.0117d8					_FWEFail:
.0117d8	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>0117db	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0117e3	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.0117ee					Function_END:
.0117ee	02 00		cop #$00			cop 	#0
.0117f0					Function_RUN:
.0117f0	20 6c 18	jsr $01186c			jsr 	Function_CLEAR 				; clear all variables.
.0117f3	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0117f5	18		clc				clc
.0117f6	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.0117f9	80 0c		bra $011807			bra 	FRun_NextLineNumber
.0117fb					RUNExecuteTokenBuffer:
.0117fb	64 22		stz $22				stz 	DLineNumber					; zero line number
.0117fd	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011800	18		clc				clc
.011801	65 02		adc $02				adc 	DBaseAddress
.011803	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011805	80 12		bra $011819			bra 	FRun_NextInstruction
.011807					FRun_NextLineNumber:
.011807	a8		tay				tay 								; put in Y
.011808	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01180b	f0 e1		beq $0117ee			beq 	Function_END 				; if zero, off the end of the program, so END the program
.01180d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011810	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011812	98		tya				tya 								; get address back
.011813	18		clc				clc 								; skip over the link/line number
.011814	69 04 00	adc #$0004			adc 	#4
.011817	85 06		sta $06				sta 	DCodePtr
.011819					FRun_NextInstruction:
.011819	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.01181b	20 22 1b	jsr $011b22			jsr 	HWCheckBreak 				; break key pressed.
.01181e	d0 40		bne $011860			bne 	_FRun_Break
.011820	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011822	f0 32		beq $011856			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011824	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.011827	f0 18		beq $011841			beq 	_FRun_Colon
.011829	a8		tay				tay 								; save in Y
.01182a	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01182d	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011830	d0 15		bne $011847			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011832	98		tya				tya 								; get token back
.011833	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011836	0a		asl a				asl 	a 							; double it into X
.011837	aa		tax				tax
.011838	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01183a	e6 06		inc $06				inc 	DCodePtr
.01183c	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01183f	80 d8		bra $011819			bra 	FRun_NextInstruction 		; do the following instruction.
.011841					_FRun_Colon:
.011841	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011843	e6 06		inc $06				inc 	DCodePtr
.011845	80 d2		bra $011819			bra 	FRun_NextInstruction 		; do the following instruction.
.011847					_FRun_TryLET:
.011847	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011849	c9 00 c0	cmp #$c000			cmp 	#$C000
.01184c	90 05		bcc $011853			bcc		_FRunSyntax 				; no, must be syntax.
.01184e	20 da 10	jsr $0110da			jsr 	Function_LET 				; try as a LET.
.011851	80 c6		bra $011819			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011853					_FRunSyntax:
.011853	82 87 ec	brl $0104dd			brl 	SyntaxError
.011856					_FRun_EndInstruction:
.011856	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011858	f0 0f		beq $011869			beq 	_FRun_WarmStart
.01185a	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01185c	1a		inc a				inc 	a 							; go to link for next line
.01185d	1a		inc a				inc 	a
.01185e	80 a7		bra $011807			bra 	FRun_NextLineNumber
.011860					_FRun_Break:
.011860	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011863	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011869					_FRun_WarmStart:
.011869	82 ed 02	brl $011b59			brl 	WarmStart
.01186c					Function_CLEAR:
.01186c	20 78 18	jsr $011878			jsr 	ClearVariablesPointersAndStacks
.01186f	60		rts				rts
.011870					Function_STOP:
.011870	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011873	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011878					ClearVariablesPointersAndStacks:
.011878	a9 80 00	lda #$0080			lda 	#BASStack
.01187b	85 2a		sta $2a				sta 	DStack
.01187d	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.01187f	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011882	a9 00 00	lda #$0000			lda 	#$0000
.011885	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011887	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011889	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01188c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01188e	20 b7 18	jsr $0118b7			jsr 	FindCodeEnd 				; find where the program ends.
.011891	a8		tay				tay 								; Y points to it.
.011892	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011895	99 02 00	sta $0002,y			sta 	$0002,y
.011898	99 04 00	sta $0004,y			sta 	$0004,y
.01189b	98		tya				tya 								; start of working memory up
.01189c	18		clc				clc
.01189d	69 06 00	adc #$0006			adc 	#6
.0118a0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0118a3	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0118a5	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0118a8					_FCLoop:
.0118a8	a9 00 00	lda #$0000			lda 	#$0000
.0118ab	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0118ad	c8		iny				iny
.0118ae	c8		iny				iny
.0118af	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0118b2	d0 f4		bne $0118a8			bne 	_FCLoop
.0118b4	64 16		stz $16				stz 	DTempStringPointer
.0118b6	60		rts				rts
.0118b7					FindCodeEnd:
.0118b7	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.0118ba	18		clc				clc
.0118bb	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0118bd	a8		tay				tay
.0118be					_FCELoop:
.0118be	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0118c1	f0 08		beq $0118cb			beq 	_FCEExit
.0118c3	98		tya				tya 								; add offset
.0118c4	18		clc				clc
.0118c5	79 00 00	adc $0000,y			adc 	$0000,y
.0118c8	a8		tay				tay
.0118c9	80 f3		bra $0118be			bra 	_FCELoop
.0118cb					_FCEExit:
.0118cb	98		tya				tya 								; return in A
.0118cc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0118cd					Function_Dim:
.0118cd	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0118cf	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0118d2	f0 3b		beq $01190f			beq		_FDIMNotArray 				; no, error.
.0118d4	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.0118d7	b0 41		bcs $01191a			bcs 	_FDIMExists 				; if it does, that's an error.
.0118d9	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0118db	48		pha				pha
.0118dc	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0118de	48		pha				pha
.0118df					_FDIMSkip:
.0118df	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0118e1	e6 06		inc $06				inc 	DCodePtr
.0118e3	e6 06		inc $06				inc 	DCodePtr
.0118e5	29 00 08	and #$0800			and 	#IDContMask
.0118e8	d0 f5		bne $0118df			bne 	_FDIMSkip
.0118ea	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.0118ed	20 07 05	jsr $010507			jsr 	ExpectRightBracket 			; check the ) following.
.0118f0	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0118f3	d0 3b		bne $011930			bne 	_FDIMSize
.0118f5	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0118f8	f0 36		beq $011930			beq 	_FDIMSize
.0118fa	7a		ply				ply 								; restore HashTablePtr
.0118fb	84 20		sty $20				sty 	DHashTablePtr
.0118fd	7a		ply				ply 								; so now A is the high index, Y points to the token
.0118fe	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.011901	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011903	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.011906	d0 06		bne $01190e			bne 	_FDIMExit
.011908	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01190a	e6 06		inc $06				inc 	DCodePtr
.01190c	80 bf		bra $0118cd			bra 	Function_DIM 				; and do another
.01190e					_FDIMExit:
.01190e	60		rts				rts
.01190f					_FDIMNotArray:
.01190f	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011912	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01191a					_FDIMExists:
.01191a	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>01191d	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011925	65 64 69 6d 65 6e 73 69 6f 6e 00
.011930					_FDIMSize:
.011930	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011933	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01193b	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.011941					Function_COLLECT:
.011941	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011943	85 0c		sta $0c				sta 	DTemp2
.011945	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011948	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.01194a	85 0e		sta $0e				sta 	DTemp2+2
.01194c	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.01194e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011950					_FCNextPass:
.011950	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011952	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011954	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011956	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011959	18		clc				clc
.01195a	65 02		adc $02				adc 	DBaseAddress
.01195c	a8		tay				tay 								; put in Y
.01195d	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011960					_FCO1:
.011960	20 86 19	jsr $011986			jsr  	COLLECTScanVariable 		; scan that one.
.011963	c8		iny				iny 	 							; go to next pointer
.011964	c8		iny				iny
.011965	ca		dex				dex
.011966	d0 f8		bne $011960			bne 	_FCO1 						; until done all 16.
.011968	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01196b					_FCO2:
.01196b	20 9a 19	jsr $01199a			jsr  	COLLECTScanArray 			; scan that one.
.01196e	c8		iny				iny 	 							; go to next pointer
.01196f	c8		iny				iny
.011970	ca		dex				dex
.011971	d0 f8		bne $01196b			bne 	_FCO2 						; until done all 16.
.011973	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011975	f0 0e		beq $011985			beq		_FCExit 					; if finished then exit.
.011977	48		pha				pha 								; save the target address
.011978	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01197a	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01197c	20 dc 05	jsr $0105dc			jsr 	StringMakeConcrete 			; make the string concrete.
.01197f	7a		ply				ply 								; restore the string.
.011980	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011983	80 cb		bra $011950			bra		_FCNextPass
.011985					_FCExit:
.011985	60		rts				rts
.011986					COLLECTScanVariable:
.011986	da		phx				phx 								; save XY
.011987	5a		phy				phy
.011988					_CSVLoop:
.011988	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01198b	f0 0a		beq $011997			beq 	_CSVExit
.01198d	a8		tay				tay 								; put new address into Y
.01198e	18		clc				clc 								; which is four on.
.01198f	69 04 00	adc #$0004			adc 	#4
.011992	20 bb 19	jsr $0119bb			jsr 	COLLECTCheck
.011995	80 f1		bra $011988			bra 	_CSVLoop
.011997					_CSVExit:
.011997	7a		ply				ply
.011998	fa		plx				plx
.011999	60		rts				rts
.01199a					COLLECTScanArray:
.01199a	da		phx				phx 								; save XY
.01199b	5a		phy				phy
.01199c					_CSALoop:
.01199c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01199f	f0 17		beq $0119b8			beq 	_CSAExit
.0119a1	a8		tay				tay 								; put new address in Y
.0119a2	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.0119a5	aa		tax				tax
.0119a6	e8		inx				inx									; +1 as one more data element.
.0119a7	98		tya				tya 								; point A to first element, at +6
.0119a8	18		clc				clc
.0119a9	69 06 00	adc #$0006			adc 	#6
.0119ac					_CSADoAllStrings:
.0119ac	20 bb 19	jsr $0119bb			jsr 	COLLECTCheck 				; collect check the first.
.0119af	1a		inc a				inc 	a 							; advance the pointer.
.0119b0	1a		inc a				inc 	a
.0119b1	1a		inc a				inc 	a
.0119b2	1a		inc a				inc 	a
.0119b3	ca		dex				dex
.0119b4	d0 f6		bne $0119ac			bne 	_CSADoAllStrings 			; until all strings are done.
.0119b6	80 e4		bra $01199c			bra 	_CSALoop
.0119b8					_CSAExit:
.0119b8	7a		ply				ply
.0119b9	fa		plx				plx
.0119ba	60		rts				rts
.0119bb					COLLECTCheck:
.0119bb	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.0119bd	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.0119bf	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.0119c1	90 0a		bcc $0119cd			bcc 	_COCExit
.0119c3	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.0119c5	b0 06		bcs $0119cd			bcs 	_COCExit
.0119c7	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0119c9	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0119cb	85 14		sta $14				sta 	DSignCount
.0119cd					_COCExit:
.0119cd	a5 0a		lda $0a				lda 	DTemp1+2
.0119cf	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.0119d0					Command_POKE:
.0119d0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119d3	48		pha				pha	 								; save on stack
.0119d4	5a		phy				phy
.0119d5	20 10 05	jsr $010510			jsr 	ExpectComma 				; comma seperator.
.0119d8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0119db	fa		plx				plx 								; pull address and store in DTemp1
.0119dc	86 0a		stx $0a				stx 	DTemp1+2
.0119de	fa		plx				plx
.0119df	86 08		stx $08				stx 	DTemp1+0
.0119e1	e2 20		sep #$20			sep 	#$20 						; byte mode
.0119e3	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0119e5	c2 20		rep #$20			rep 	#$20 						; word mode
.0119e7	60		rts				rts
.0119e8					Command_DOKE:
.0119e8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119eb	48		pha				pha	 								; save on stack
.0119ec	5a		phy				phy
.0119ed	20 10 05	jsr $010510			jsr 	ExpectComma 				; comma seperator.
.0119f0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0119f3	fa		plx				plx 								; pull address and store in DTemp1
.0119f4	86 0a		stx $0a				stx 	DTemp1+2
.0119f6	fa		plx				plx
.0119f7	86 08		stx $08				stx 	DTemp1+0
.0119f9	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0119fb	60		rts				rts
.0119fc					Command_LOKE:
.0119fc	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119ff	48		pha				pha	 								; save on stack
.011a00	5a		phy				phy
.011a01	20 10 05	jsr $010510			jsr 	ExpectComma 				; comma seperator.
.011a04	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011a07	fa		plx				plx 								; pull address and store in DTemp1
.011a08	86 0a		stx $0a				stx 	DTemp1+2
.011a0a	fa		plx				plx
.011a0b	86 08		stx $08				stx 	DTemp1+0
.011a0d	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011a0f	98		tya				tya
.011a10	a0 02 00	ldy #$0002			ldy 	#2
.011a13	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011a15	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011a16					Function_ASSERT:
.011a16	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.011a19	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011a1b	05 08		ora $08				ora 	Dtemp1
.011a1d	f0 01		beq $011a20			beq 	_FAssFail
.011a1f	60		rts				rts
.011a20					_FAssFail:
.011a20	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011a23	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011a2b	61 69 6c 65 64 00
.011a31					Function_CLS:
.011a31	20 8a 1a	jsr $011a8a			jsr 	HWClearScreen
.011a34	60		rts				rts
.011a35					Function_REM:
.011a35	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011a37	f0 0b		beq $011a44			beq 	_FRemSyntax 				; if 0, syntax error
.011a39	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011a3c	b0 06		bcs $011a44			bcs 	_FRemSyntax
.011a3e	18		clc				clc 								; add to DCodePtr
.011a3f	65 06		adc $06				adc 	DCodePtr
.011a41	85 06		sta $06				sta 	DCodePtr
.011a43	60		rts				rts
.011a44					_FRemSyntax:
.011a44	82 96 ea	brl $0104dd			brl 	SyntaxError
.011a47					Function_LINK:
.011a47	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.011a4a	85 08		sta $08				sta 	DTemp1 						; target address
.011a4c	84 0a		sty $0a				sty 	DTemp1+2
.011a4e	7b		tdc				tda 								; work out what the actual address is
.011a4f	18		clc				clc
.011a50	69 08 00	adc #$0008			adc 	#DTemp1
.011a53	8f 88 1a 01	sta $011a88			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011a57	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011a59	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011a5c	48		pha				pha
.011a5d	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011a60	aa		tax				tax
.011a61	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011a64	a8		tay				tay
.011a65	68		pla				pla
.011a66	22 87 1a 01	jsl $011a87			jsl 	_FLIExecuteIt
.011a6a	5a		phy				phy 								; save Y
.011a6b	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011a6d	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a70	8a		txa				txa
.011a71	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a74	68		pla				pla
.011a75	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a78	c8		iny				iny 								; point to their high bytes and clear them
.011a79	c8		iny				iny
.011a7a	a9 00 00	lda #$0000			lda 	#0
.011a7d	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a80	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a83	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a86	60		rts				rts
.011a87					_FLIExecuteIt:
.011a87	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=$f8020					HWCursor = $F8020
=$f8010					HWKeyPressed = $F8010
=$f8000					HWBreakKey = $F8000
=$f0000					HWScreen = $F0000
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011a8a					HWClearScreen:
.011a8a	48		pha				pha
.011a8b	da		phx				phx
.011a8c	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011a8f	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011a92	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a96	ca		dex				dex
.011a97	10 f6		bpl $011a8f			bpl 	_CS0
.011a99	a9 00 00	lda #$0000			lda 	#0
.011a9c	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011aa0	fa		plx				plx
.011aa1	68		pla				pla
.011aa2	60		rts				rts
.011aa3					HWPrintChar:
.011aa3	48		pha				pha
.011aa4	da		phx				phx
.011aa5	5a		phy				phy
.011aa6	29 ff 00	and #$00ff			and 	#$00FF
.011aa9	c9 61 00	cmp #$0061			cmp 	#"a"
.011aac	90 0c		bcc $011aba			bcc 	_HWPCNotLC
.011aae	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011ab1	b0 07		bcs $011aba			bcs 	_HWPCNotLC
.011ab3	38		sec				sec
.011ab4	e9 20 00	sbc #$0020			sbc 	#32
.011ab7	09 80 00	ora #$0080			ora 	#128
.011aba					_HWPCNotLC:
.011aba	29 bf 00	and #$00bf			and 	#$BF
.011abd	48		pha				pha
.011abe	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011ac2	aa		tax				tax
.011ac3	68		pla				pla
.011ac4	e2 20		sep #$20			sep 	#$20
.011ac6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011aca	c2 20		rep #$20			rep 	#$20
.011acc	e8		inx				inx
.011acd	8a		txa				txa
.011ace	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011ad2	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.011ad5	d0 2b		bne $011b02			bne 	_HWNotEnd
.011ad7	38		sec				sec
.011ad8	e9 40 00	sbc #$0040			sbc 	#sWidth
.011adb	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011adf	a2 00 00	ldx #$0000			ldx 	#0
.011ae2					_HWScrollUp:
.011ae2	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011ae6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011aea	e8		inx				inx
.011aeb	e8		inx				inx
.011aec	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011aef	d0 f1		bne $011ae2			bne 	_HWScrollUp
.011af1	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))
.011af4					_HWBlank:
.011af4	a9 20 20	lda #$2020			lda 	#$2020
.011af7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011afb	e8		inx				inx
.011afc	e8		inx				inx
.011afd	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011b00	d0 f2		bne $011af4			bne 	_HWBlank
.011b02					_HWNotEnd:
.011b02	7a		ply				ply
.011b03	fa		plx				plx
.011b04	68		pla				pla
.011b05	60		rts				rts
.011b06					HWNewLine:
.011b06	48		pha				pha
.011b07	da		phx				phx
.011b08	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011b0b					HWMoveCursor:
.011b0b	a9 20 00	lda #$0020			lda 	#32
.011b0e	20 a3 1a	jsr $011aa3			jsr 	HWPrintChar
.011b11	8a		txa				txa
.011b12	2f 20 80 0f	and $0f8020			and 	HWCursor
.011b16	d0 f3		bne $011b0b			bne 	HWMoveCursor
.011b18	fa		plx				plx
.011b19	68		pla				pla
.011b1a	60		rts				rts
.011b1b	48		pha		HWTab:	pha
.011b1c	da		phx				phx
.011b1d	a2 07 00	ldx #$0007			ldx 	#7
.011b20	80 e9		bra $011b0b			bra 	HWMoveCursor
.011b22					HWCheckBreak:
.011b22	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011b26	60		rts				rts
.011b27					HWGetKey:
.011b27	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011b2b	d0 fa		bne $011b27			bne 	HWGetKey
.011b2d					_HWGKWait:
.011b2d	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011b31	f0 fa		beq $011b2d			beq 	_HWGKWait
.011b33	ea		nop				nop
.011b34	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011b35					SwitchBasicInstance:
.011b35	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011b37	20 8a 1a	jsr $011a8a			jsr 	HWClearScreen 						; clear screen
.011b3a	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011b3d	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011b3f	86 02		stx $02				stx		DBaseAddress
.011b41	84 04		sty $04				sty 	DHighAddress
.011b43	ba		tsx				tsx 										; save the current SP.
.011b44	86 3a		stx $3a				stx 	DStack65816
.011b46	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011b47	48		pha				pha 										; then copy it into B.
.011b48	ab		plb				plb
.011b49	ab		plb				plb
.011b4a	20 78 18	jsr $011878			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011b4d	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011b50	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011b52	f0 05		beq $011b59			beq 	WarmStart
.011b54	3a		dec a				dec 	a 									; decrement zero.
.011b55	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b57	80 14		bra $011b6d			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011b59					WarmStart:
.011b59	a2 b9 1b	ldx #$1bb9			ldx 	#BasicPrompt & $FFFF
.011b5c	20 49 05	jsr $010549			jsr 	PrintROMMessage
.011b5f					NextCommand:
.011b5f	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011b61	9a		txs				txs
.011b62	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011b64	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011b67	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011b69	d0 4c		bne $011bb7			bne 	ExitEmulator
.011b6b	80 fe		bra $011b6b	w1:		bra 	w1
.011b6d					ExecuteTokenBuffer:
.011b6d	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011b70	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011b72	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011b75	90 27		bcc $011b9e			bcc 	_ETBCommand
.011b77	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b7a	b0 22		bcs $011b9e			bcs 	_ETBCommand
.011b7c	38		sec				sec
.011b7d	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011b80	f0 1f		beq $011ba1			beq 	_ETBError
.011b82	48		pha				pha
.011b83	20 64 04	jsr $010464			jsr 	LineDelete 							; delete the line, if it exists.
.011b86	20 78 18	jsr $011878			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011b89	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011b8c	18		clc				clc
.011b8d	65 02		adc $02				adc 	DBaseAddress
.011b8f	a8		tay				tay 										; Y contains the code.
.011b90	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011b93	f0 ca		beq $011b5f			beq 	NextCommand 						; no, next command.
.011b95	68		pla				pla 										; line number in A, code in Y.
.011b96	20 9f 04	jsr $01049f			jsr 	LineInsert 							; insert the line
.011b99	20 78 18	jsr $011878			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011b9c	80 c1		bra $011b5f			bra 	NextCommand
.011b9e					_ETBCommand:
.011b9e	4c fb 17	jmp $0117fb			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011ba1					_ETBError:
.011ba1	20 a1 04	jsr $0104a1			jsr 	ErrorHandler 						; call error routine
>011ba4	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011bac	61 76 65 20 6c 69 6e 65 20 30 00
.011bb7					ExitEmulator:
.011bb7	02 00		cop #$00			cop 	#0
.011bb9					BasicPrompt:
>011bb9	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 10 06	jsr $010610			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	ae 42 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 2f 3e 25 32 30 3e 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 64 00 43 3c 09 c0
>024208	06 22 01 40 29 38 63 40 00 00 1e 00 6e 00 35 3e
>024218	09 c0 23 32 09 c0 0c 26 09 c0 23 32 09 c0 0c 26
>024228	09 c0 0c 26 09 c0 00 00 0a 00 78 00 48 3a 09 c0
>024238	00 00 0c 00 7a 00 18 c0 06 22 04 40 00 00 0e 00
>024248	7b 00 41 3c 18 c0 05 22 00 40 00 00 10 00 7d 00
>024258	37 3e 8c 40 25 32 37 3e 8c 40 00 00 10 00 7f 00
>024268	18 c0 06 22 18 c0 0b 24 01 40 00 00 08 00 80 00
>024278	44 3a 00 00 08 00 82 00 30 3e 00 00 1c 00 8c 00
>024288	35 3e 10 00 0d 48 65 6c 6c 6f 2c 20 77 6f 72 6c
>024298	64 21 23 32 18 c0 00 00 08 00 96 00 38 3e 00 00
>0242a8	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>0242b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2003 times (32048 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
