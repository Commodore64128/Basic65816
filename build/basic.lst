
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 22 09:14:06 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 8e 1e 01	jmp $011e8e			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_NullString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	bb 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	1c 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	2c 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	3c 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	80 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	e7 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	4c 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	c9 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	ab 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	66 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	66 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	e7 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	f3 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	70 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	e7 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	f8 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	0a 0b					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	81 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	61 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	3d 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	27 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a9 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	c9 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	bb 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	f3 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	27 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	5d 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	77 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	8e 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	32 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	f0 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	71 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	08 0f					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	9a 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	89 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	63 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	bb 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	bb 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	bb 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	bb 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	bb 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	bb 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	bb 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	bb 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	c2 1c					.word Command_REM              & $FFFF ; token $3e2c "rem"
>01005a	74 12					.word Command_Let              & $FFFF ; token $3e2d "let"
>01005c	a3 1c					.word Command_ASSERT           & $FFFF ; token $3e2e "assert"
>01005e	f1 1a					.word Command_END              & $FFFF ; token $3e2f "end"
>010060	f4 1a					.word Command_RUN              & $FFFF ; token $3e30 "run"
>010062	83 1b					.word Command_STOP             & $FFFF ; token $3e31 "stop"
>010064	7f 1b					.word Command_CLEAR            & $FFFF ; token $3e32 "clear"
>010066	dc 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	be 1c					.word Command_CLS              & $FFFF ; token $3e34 "cls"
>01006a	8c 16					.word Command_PRINT            & $FFFF ; token $3e35 "print"
>01006c	7f 19					.word Command_GOTO             & $FFFF ; token $3e36 "goto"
>01006e	de 19					.word Command_GOSUB            & $FFFF ; token $3e37 "gosub"
>010070	fa 19					.word Command_RETURN           & $FFFF ; token $3e38 "return"
>010072	3c 19					.word Command_ONGOTO           & $FFFF ; token $3e39 "on"
>010074	3f 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	5d 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	75 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	89 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	54 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	d9 1c					.word Command_LINK             & $FFFF ; token $3e3f "link"
>010080	70 1b					.word Command_NEW              & $FFFF ; token $3e40 "new"
>010082	eb 12					.word Command_PROC             & $FFFF ; token $3e41 "proc"
>010084	9e 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	1c 1d					.word Command_VDU              & $FFFF ; token $3e43 "vdu"
>010088	2c 1a					.word Command_REPEAT           & $FFFF ; token $3c44 "repeat"
>01008a	8a 1a					.word Command_WHILE            & $FFFF ; token $3c45 "while"
>01008c	d8 16					.word Command_IF               & $FFFF ; token $3c46 "if"
>01008e	14 18					.word Command_FOR              & $FFFF ; token $3c47 "for"
>010090	bb 05					.word IllegalToken             & $FFFF ; token $3c48 "defproc"
>010092	c1 1a					.word Command_WEND             & $FFFF ; token $3a49 "wend"
>010094	43 1a					.word Command_UNTIL            & $FFFF ; token $3a4a "until"
>010096	bb 05					.word IllegalToken             & $FFFF ; token $3a4b "then"
>010098	6d 17					.word Handler_ENDIF            & $FFFF ; token $3a4c "endif"
>01009a	80 18					.word Command_NEXT             & $FFFF ; token $3a4d "next"
>01009c	62 13					.word Command_ENDPROC          & $FFFF ; token $3a4e "endproc"
.01009e					TokenText:
>01009e	02 26					 .text $02,"&"        ; token $2001
>0100a0	02 7c					 .text $02,"|"        ; token $2002
>0100a2	02 5e					 .text $02,"^"        ; token $2003
>0100a4	12 3c					 .text $12,"<"        ; token $2204
>0100a6	12 3e					 .text $12,">"        ; token $2205
>0100a8	12 3d					 .text $12,"="        ; token $2206
>0100aa	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ad	13 3e 3d				 .text $13,">="       ; token $2208
>0100b0	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b3	22 2b					 .text $22,"+"        ; token $240a
>0100b5	22 2d					 .text $22,"-"        ; token $240b
>0100b7	32 2a					 .text $32,"*"        ; token $260c
>0100b9	32 2f					 .text $32,"/"        ; token $260d
>0100bb	32 25					 .text $32,"%"        ; token $260e
>0100bd	33 3e 3e				 .text $33,">>"       ; token $260f
>0100c0	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c3	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c8	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cd	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d2	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d7	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100dc	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e2	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e8	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100ed	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f2	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f8	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fe	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010104	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010c	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010114	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01011b	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010121	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010129	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010130	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010137	92 2c					 .text $92,","        ; token $3224
>010139	92 3b					 .text $92,";"        ; token $3225
>01013b	92 3a					 .text $92,":"        ; token $3226
>01013d	92 28					 .text $92,"("        ; token $3227
>01013f	92 29					 .text $92,")"        ; token $3228
>010141	92 27					 .text $92,"'"        ; token $3229
>010143	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010146	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>01014b	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014f	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010153	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>01015a	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015e	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010162	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010167	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016d	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010171	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010175	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>01017b	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010180	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010186	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018d	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010190	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010195	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01019a	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019f	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a4	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a9	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ae	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b2	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b7	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bd	f4 56 44 55				 .text $f4,"VDU"      ; token $3e43
>0101c1	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c44
>0101c8	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c45
>0101ce	e3 49 46				 .text $e3,"IF"       ; token $3c46
>0101d1	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c47
>0101d5	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c48
>0101dd	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a49
>0101e2	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a4a
>0101e8	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4b
>0101ed	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4c
>0101f3	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4d
>0101f8	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4e
>010200	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3e43					vduTokenID                       = $3e43
=$3c44					repeatTokenID                    = $3c44
=$3c45					whileTokenID                     = $3c45
=$3c46					ifTokenID                        = $3c46
=$3c47					forTokenID                       = $3c47
=$3c48					defprocTokenID                   = $3c48
=$3a49					wendTokenID                      = $3a49
=$3a4a					untilTokenID                     = $3a4a
=$3a4b					thenTokenID                      = $3a4b
=$3a4c					endifTokenID                     = $3a4c
=$3a4d					nextTokenID                      = $3a4d
=$3a4e					endprocTokenID                   = $3a4e

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010201					Evaluate:
.010201	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.010204	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010207					EvaluateLevel:
.010207	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.01020a	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01020c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01020e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010211	b0 79		bcs $01028c			bcs 	_ELVariable
.010213	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010216	b0 16		bcs $01022e			bcs 	_ELConstant
.010218	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01021b	90 7f		bcc $01029c			bcc 	_ELStringConstant
.01021d	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010220	90 03		bcc $010225			bcc 	_ELConstantShift
.010222	82 94 00	brl $0102b9			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010225					_ELConstantShift:
.010225	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010228	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01022a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01022c	e6 06		inc $06				inc 	DCodePtr
.01022e					_ELConstant:
.01022e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010230	38		sec				sec  								; shift it in the range 0-32767
.010231	e9 00 40	sbc #$4000			sbc 	#$4000
.010234	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010235	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010237	6a		ror a				ror 	a 							; rotate that into the constant value
.010238	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01023a	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01023c	95 20		sta $20,x			sta 	EXSValueH+0,x
.01023e	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010240	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010242	e6 06		inc $06				inc 	DCodePtr
.010244					_ELGotAtom:
.010244	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010246	a8		tay				tay 								; save in Y
.010247	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01024a	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01024d	d0 35		bne $010284			bne 	_ELExit
.01024f	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010256	98		tya				tya 								; get the keyword token back
.010257	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01025a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01025c	90 26		bcc $010284			bcc 	_ELExit 					; precedence too low, then exit.
.01025e	5a		phy				phy 								; save the binary operator on the stack
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	18		clc				clc 								; try the next level up
.010264	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010267	e8		inx				inx 								; calculate the RHS at the next stack level.
.010268	e8		inx				inx
.010269	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01026c	ca		dex				dex
.01026d	ca		dex				dex
.01026e	7a		ply				ply 								; get operator token back into Y
.01026f					_ELExecuteY:
.01026f	98		tya				tya
.010270	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010273	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010274	9b		txy				txy 								; save X in Y
.010275	aa		tax				tax 								; double keyword ID in X
.010276	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01027a	bb		tyx				tyx 								; restore X.
.01027b	8f 80 02 01	sta $010280			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01027f					_ELCallRoutine:
.01027f	20 7f 02	jsr $01027f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010282	80 c0		bra $010244			bra 	_ELGotAtom 					; go round operator level again.
.010284	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010286	0a		asl a				asl 	a
.010287	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010289	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01028b	60		rts				rts
.01028c					_ELVariable:
.01028c	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.01028e	20 4d 03	jsr $01034d			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010291	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010293	94 20		sty $20,x			sty 	EXSValueH+0,x
.010295	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010297	80 ab		bra $010244			bra 	_ELGotAtom
.010299					_ELSyntax
.010299	82 30 03	brl $0105cc			brl 	SyntaxError
.01029c					_ELStringConstant:
.01029c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01029f	f0 f8		beq $010299			beq 	_ELSyntax
.0102a1	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0102a3	1a		inc a				inc 	a
.0102a4	1a		inc a				inc 	a
.0102a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a9	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102ab	18		clc				clc 								; add to string constant.
.0102ac	65 06		adc $06				adc 	DCodePtr
.0102ae	85 06		sta $06				sta 	DCodePtr
.0102b0	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102b2	09 00 80	ora #$8000			ora 	#$8000
.0102b5	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b7	80 8b		bra $010244			bra 	_ELGotAtom
.0102b9					_ELUnaryKeyword:
.0102b9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102bb	a8		tay				tay 								; put the token in Y.
.0102bc	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102be	e6 06		inc $06				inc 	DCodePtr
.0102c0	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102c3	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c6	f0 a7		beq $01026f			beq 	_ELExecuteY					; go back and execute it
.0102c8	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102cb	d0 11		bne $0102de			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102cd	20 04 03	jsr $010304			jsr 	EvaluateNext 				; evaluate the expression
.0102d0	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102d3					_ELCopy:
.0102d3	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102d5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d7	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102db	82 66 ff	brl $010244			brl 	_ELGotAtom 					; and continue.
.0102de					_ELUnaryOperator:
.0102de	5a		phy				phy 								; save the operator on the stack.
.0102df	e8		inx				inx 								; this is like evaluate next
.0102e0	e8		inx				inx
.0102e1	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102e4	20 07 02	jsr $010207			jsr 	EvaluateLevel
.0102e7	ca		dex				dex 								; unwind the stack.
.0102e8	ca		dex				dex
.0102e9	68		pla				pla 								; restore the unary operator.
.0102ea	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102ed	f0 03		beq $0102f2			beq 	_ELMinus
.0102ef	4c cc 05	jmp $0105cc			jmp 	SyntaxError
.0102f2					_ELMinus:
.0102f2	38		sec				sec 								; do the negation calculation.
.0102f3	a9 00 00	lda #$0000			lda 	#0
.0102f6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102fa	a9 00 00	lda #$0000			lda 	#0
.0102fd	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102ff	95 20		sta $20,x			sta 	EXSValueH+0,x
.010301	82 40 ff	brl $010244			brl 	_ELGotAtom					; and continue.
.010304					EvaluateNext:
.010304	e8		inx				inx
.010305	e8		inx				inx
.010306	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010309	20 07 02	jsr $010207			jsr 	EvaluateLevel
.01030c	ca		dex				dex
.01030d	ca		dex				dex
.01030e	60		rts				rts
.01030f					EvaluateInteger:
.01030f	20 01 02	jsr $010201			jsr 	Evaluate
.010312	b0 01		bcs $010315			bcs 	EIType
.010314	60		rts				rts
.010315					EIType:
.010315	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010318	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010320	78 70 65 63 74 65 64 00
.010328					EvaluateNextInteger:
.010328	20 04 03	jsr $010304			jsr 	EvaluateNext
.01032b	b0 e8		bcs $010315			bcs 	EIType
.01032d	60		rts				rts
.01032e					EvaluateString:
.01032e	20 01 02	jsr $010201			jsr 	Evaluate
.010331	90 01		bcc $010334			bcc 	ESType
.010333	60		rts				rts
.010334					ESType:
.010334	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010337	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01033f	78 70 65 63 74 65 64 00
.010347					EvaluateNextString:
.010347	20 04 03	jsr $010304			jsr 	EvaluateNext
.01034a	90 e8		bcc $010334			bcc 	ESType
.01034c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01034d					VariableAccessExpression:
.01034d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01034f	48		pha				pha
.010350	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find the variables
.010353	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010355	90 31		bcc $010388			bcc 	_VANError 					; not found, so report an error.
.010357	68		pla				pla 								; get and save that first token
.010358	48		pha				pha 								; we use it for typing.
.010359	a8		tay				tay 								; put first token in Y.
.01035a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01035d	f0 07		beq $010366			beq 	_VANNotArray
.01035f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010361	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.010364	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010366					_VANNotArray:
.010366	68		pla				pla 								; get the token back.
.010367	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01036a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01036d	f0 0a		beq $010379			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036f	18		clc				clc 								; returning a number, read high data word
.010370	a0 02 00	ldy #$0002			ldy 	#2
.010373	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010375	a8		tay				tay 								; put A into Y (this is the high byte)
.010376	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010378	60		rts				rts
.010379					_VANIsString:
.010379	a0 00 00	ldy #$0000			ldy 	#0 							; load string into YA
.01037c	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.01037e	d0 06		bne $010386			bne 	_VANNotEmptyString
.010380	a9 0c 00	lda #$000c			lda 	#Block_NullString 			; if value is $0000 then return the empty string
.010383	18		clc				clc
.010384	65 02		adc $02				adc 	DBaseAddress
.010386					_VANNotEmptyString:
.010386	38		sec				sec
.010387	60		rts				rts
.010388					_VANError:
.010388	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01038b	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010393	20 75 6e 6b 6e 6f 77 6e 00
.01039c					VariableFind:
.01039c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01039e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a1	90 5c		bcc $0103ff			bcc 	_VFError
.0103a3	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103a6	b0 11		bcs $0103b9			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103a8	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103ab	3a		dec a				dec 	a 							; now 0-25
.0103ac	0a		asl a				asl 	a 							; x 4 and clear carry
.0103ad	0a		asl a				asl 	a
.0103ae	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b1	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b3	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103b5	e6 06		inc $06				inc 	DCodePtr
.0103b7	38		sec				sec 								; return with carry set.
.0103b8	60		rts				rts
.0103b9					_VFSlowVariable:
.0103b9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103bb	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103be	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103bf	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103c0	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c3	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103c5	85 08		sta $08				sta 	DTemp1
.0103c7	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103c9	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103cc	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103cd	65 08		adc $08				adc 	DTemp1
.0103cf	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d3					_VFNext:
.0103d3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103d5	f0 26		beq $0103fd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103d7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103d9	a8		tay				tay 								; read the address of the name at $0002,y
.0103da	b9 02 00	lda $0002,y			lda 	$0002,y
.0103dd	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103df	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103e2					_VFCompare:
.0103e2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103e4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103e6	d0 eb		bne $0103d3			bne 	_VFNext 					; if not, go to the next one.
.0103e8	c8		iny				iny 								; advance token pointer
.0103e9	c8		iny				iny
.0103ea	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103ed	d0 f3		bne $0103e2			bne 	_VFCompare
.0103ef	98		tya				tya 								; this is the length of the word.
.0103f0	18		clc				clc 								; so we add it to the code pointer
.0103f1	65 06		adc $06				adc 	DCodePtr
.0103f3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103f5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103f7	18		clc				clc 								; four on is the actual data
.0103f8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103fb	38		sec				sec 								; return with CS indicating success
.0103fc	60		rts				rts
.0103fd					_VFFail:
.0103fd	18		clc				clc
.0103fe	60		rts				rts
.0103ff					_VFError:
.0103ff	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010402	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01040a	76 61 72 69 61 62 6c 65 00
.010413					VariableSubscript:
.010413	48		pha				pha		 							; save variable address on stack.
.010414	20 28 03	jsr $010328			jsr		EvaluateNextInteger 		; get the subscript
.010417	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; skip right bracket.
.01041a	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01041d	d0 10		bne $01042f			bne 	_VANSubscript
.01041f	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010421	f0 02		beq $010425			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010423	b0 0a		bcs $01042f			bcs 	_VANSubscript
.010425					_VANSubOkay:
.010425	0a		asl a				asl 	a 							; double lsword
.010426	0a		asl a				asl 	a 							; and again, also clears carry.
.010427	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010429	68		pla				pla 								; restore DVariablePtr
.01042a	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.01042b	1a		inc a				inc 	a
.01042c	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01042e	60		rts				rts
.01042f					_VANSubscript:
.01042f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010432	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>01043a	79 20 53 75 62 73 63 72 69 70 74 00
.010446					VariableCreateNew:
.010446	48		pha				pha 								; save count.
.010447	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010448	0a		asl a				asl 	a 							; 2 x # items.
.010449	0a		asl a				asl 	a 							; 4 x # items.
.01044a					_VCNotSingle:
.01044a	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01044c	b2 06		lda ($06)			lda 	(DCodePtr) 					; get first token.
.01044e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010451	f0 04		beq $010457			beq 	_VCNotArray
.010453	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010455	e6 08		inc $08				inc 	DTemp1
.010457					_VCNotArray:
.010457	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01045a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01045c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045e	18		clc				clc 								; add 4 for link and name words
.01045f	69 04 00	adc #$0004			adc 	#4
.010462	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010464	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010466	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010468					_VCErase:
.010468	a9 00 00	lda #$0000			lda 	#$0000 						; clear that word to empty string/zero.
.01046b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046e	c8		iny				iny
.01046f	c8		iny				iny
.010470	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010472	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010474	d0 f2		bne $010468			bne 	_VCErase
.010476	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010478	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01047a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01047d	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010480	18		clc				clc
.010481	65 02		adc $02				adc 	DBaseAddress
.010483	85 08		sta $08				sta 	DTemp1
.010485	a5 06		lda $06				lda 	DCodePtr 					; get the address of the token.
.010487	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010489	b0 03		bcs $01048e			bcs 	_VCDontClone 				; because the variable being created has its identifier
.01048b	20 ac 04	jsr $0104ac			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.01048e					_VCDontClone:
.01048e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010491	68		pla				pla 								; restore count and store (if nonzero)
.010492	f0 03		beq $010497			beq 	_VCNotArray2
.010494	99 04 00	sta $0004,y			sta 	$0004,y
.010497					_VCNotArray2:
.010497	98		tya				tya 								; update the head link
.010498	92 20		sta ($20)			sta 	(DHashTablePtr)
.01049a	18		clc				clc 								; advance pointer to the data bit.
.01049b	69 04 00	adc #$0004			adc 	#4
.01049e	48		pha				pha 								; save on stack.
.01049f					_VCSkipToken:
.01049f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0104a1	e6 06		inc $06				inc 	DCodePtr
.0104a3	e6 06		inc $06				inc 	DCodePtr
.0104a5	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0104a8	d0 f5		bne $01049f			bne 	_VCSkipToken
.0104aa							l
.0104aa	68		pla				pla 								; restore data address
.0104ab	60		rts				rts 								; and done.
.0104ac					VCCloneIdentifier:
.0104ac	da		phx				phx 								; save XY
.0104ad	5a		phy				phy
.0104ae	aa		tax				tax 								; identifier address in Y.
.0104af	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104b2	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104b4	48		pha				pha
.0104b5					_VCCloneLoop:
.0104b5	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104b8	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ba	48		pha				pha 								; save on stack
.0104bb	1a		inc a				inc 	a 							; space for one token.
.0104bc	1a		inc a				inc 	a
.0104bd	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104bf	7a		ply				ply 								; address of word in Y
.0104c0	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104c3	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104c6	e8		inx				inx 								; advance the token pointer
.0104c7	e8		inx				inx
.0104c8	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104cb	d0 e8		bne $0104b5			bne 	_VCCloneLoop
.0104cd	68		pla				pla 								; restore start address
.0104ce	7a		ply				ply 								; and the others
.0104cf	fa		plx				plx
.0104d0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/editline.asm

.0104d1					LineDelete:
.0104d1	aa		tax				tax 	 							; this is the one we're looking for ....
.0104d2	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104d4	18		clc				clc
.0104d5	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104d8	a8		tay				tay
.0104d9					_LDLoop:
.0104d9	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104dc	f0 2d		beq $01050b			beq 	_LDExit						; exit if zero ; line does not exist
.0104de	8a		txa				txa 								; found a match
.0104df	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104e2	f0 08		beq $0104ec			beq		_LDFound
.0104e4	98		tya				tya 								; follow the link.
.0104e5	18		clc				clc
.0104e6	79 00 00	adc $0000,y			adc 	$0000,y
.0104e9	a8		tay				tay
.0104ea	80 ed		bra $0104d9			bra 	_LDLoop
.0104ec					_LDFound:
.0104ec	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104ee	98		tya				tya 								; follow link to next.
.0104ef	18		clc				clc
.0104f0	79 00 00	adc $0000,y			adc 	$0000,y
.0104f3	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104f5	20 c6 1b	jsr $011bc6			jsr 	FindCodeEnd 				; find the end of the code.
.0104f8	38		sec				sec
.0104f9	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104fb	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104fc	1a		inc a				inc 	a
.0104fd	aa		tax				tax
.0104fe	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.010501	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.010503	91 08		sta ($08),y			sta 	(DTemp1),y
.010505	c8		iny				iny
.010506	c8		iny				iny
.010507	ca		dex				dex
.010508	ca		dex				dex
.010509	d0 f6		bne $010501			bne 	_LDCopy
.01050b					_LDExit:
.01050b	60		rts				rts
.01050c					LineInsert:
.01050c	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.01050e	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010510	a0 00 00	ldy #$0000			ldy 	#0
.010513					_LIFindLength:
.010513	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010515	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010518	f0 10		beq $01052a			beq 	_LIFindEnd
.01051a	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01051d	90 04		bcc $010523			bcc 	_LIQString
.01051f	c8		iny				iny 								; otherwise just skip it.
.010520	c8		iny				iny
.010521	80 f0		bra $010513			bra 	_LIFindLength
.010523					_LIQString:
.010523	98		tya				tya 								; skip quoted strings
.010524	18		clc				clc
.010525	71 08		adc ($08),y			adc 	(DTemp1),y
.010527	a8		tay				tay
.010528	80 e9		bra $010513			bra 	_LIFindLength
.01052a					_LIFindEnd:
.01052a	98		tya				tya 								; the tokens in the line
.01052b	18		clc				clc
.01052c	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01052f	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010531	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010534	18		clc				clc
.010535	65 02		adc $02				adc 	DBaseAddress
.010537	a8		tay				tay
.010538					_LIFindInsertPoint:
.010538	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01053b	f0 0f		beq $01054c			beq		_LIFoundInsertPoint
.01053d	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010540	c5 0c		cmp $0c				cmp 	DTemp2
.010542	b0 08		bcs $01054c			bcs 	_LIFoundInsertPoint
.010544	98		tya				tya 								; if < go to the next line.
.010545	18		clc				clc
.010546	79 00 00	adc $0000,y			adc 	$0000,y
.010549	a8		tay				tay
.01054a	80 ec		bra $010538			bra 	_LIFindInsertPoint
.01054c					_LIFoundInsertPoint:
.01054c	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01054e	20 c6 1b	jsr $011bc6			jsr 	FindCodeEnd 				; get the end of the code.
.010551	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010553	18		clc				clc
.010554	65 24		adc $24				adc 	DTemp3
.010556	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010558					_LICopyMove:
.010558	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01055a	92 34		sta ($34)			sta 	(DTemp4+2)
.01055c	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01055e	c5 36		cmp $36				cmp 	DTemp5
.010560	f0 0a		beq $01056c			beq 	_LICopyMoveOver
.010562	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010564	c6 32		dec $32				dec 	DTemp4
.010566	c6 34		dec $34				dec 	DTemp4+2
.010568	c6 34		dec $34				dec 	DTemp4+2
.01056a	80 ec		bra $010558			bra 	_LICopyMove
.01056c					_LICopyMoveOver:
.01056c	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01056e	92 36		sta ($36)			sta 	(DTemp5)
.010570	a0 02 00	ldy #$0002			ldy 	#2
.010573	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010575	91 36		sta ($36),y			sta 	(DTemp5),y
.010577	a0 04 00	ldy #$0004			ldy 	#4
.01057a					_LICopyTokens:
.01057a	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01057c	91 36		sta ($36),y			sta 	(DTemp5),y
.01057e	c8		iny				iny
.01057f	c8		iny				iny
.010580	e6 08		inc $08				inc 	DTemp1
.010582	e6 08		inc $08				inc 	DTemp1
.010584	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010586	c6 24		dec $24				dec 	DTemp3
.010588	a5 24		lda $24				lda 	DTemp3
.01058a	c9 04 00	cmp #$0004			cmp 	#4
.01058d	d0 eb		bne $01057a			bne 	_LICopyTokens
.01058f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010590					ErrorHandler:
.010590	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010592	fa		plx				plx 								; address of error message -1
.010593	e8		inx				inx 								; error message.
.010594	20 38 06	jsr $010638			jsr 	PrintROMMessage 			; print message in ROM
.010597	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010599	f0 15		beq $0105b0			beq 	_EHEndMessage
.01059b	a2 b6 05	ldx #$05b6			ldx 	#_EHAt & $FFFF 				; print " at "
.01059e	20 38 06	jsr $010638			jsr 	PrintROMMessage
.0105a1	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0105a3	a0 00 00	ldy #$0000			ldy 	#0
.0105a6	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105a9	20 e4 10	jsr $0110e4			jsr 	ConvertToString 			; convert and print it.
.0105ac	a8		tay				tay
.0105ad	20 56 06	jsr $010656			jsr 	PrintBASICString
.0105b0					_EHEndMessage:
.0105b0	20 b4 1d	jsr $011db4			jsr 	HWNewLine
.0105b3	4c b8 1e	jmp $011eb8			jmp 	NextCommand 				; get next command.
>0105b6	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105bb					IllegalToken:
.0105bb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105be	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105c6	54 6f 6b 65 6e 00
.0105cc					SyntaxError:
.0105cc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105cf	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105d7	72 72 6f 72 00
.0105dc					ExpectToken:
.0105dc	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105de	d0 05		bne $0105e5			bne 	_CTKError					; error if not
.0105e0	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105e2	e6 06		inc $06				inc 	DCodePtr
.0105e4	60		rts				rts
.0105e5					_CTKError:
.0105e5	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0105e8	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105f0	74 6f 6b 65 6e 00
.0105f6					ExpectRightBracket:
.0105f6	48		pha				pha
.0105f7	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105fa	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.0105fd	68		pla				pla
.0105fe	60		rts				rts
.0105ff					ExpectComma:
.0105ff	48		pha				pha
.010600	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010603	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.010606	68		pla				pla
.010607	60		rts				rts
.010608					CheckBothNumeric:
.010608	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01060a	15 42		ora $42,x			ora 	EXSPrecType+2,x
.01060c	30 01		bmi $01060f			bmi 	_CBNFail 					; need to both be zero in bit 15
.01060e	60		rts				rts
.01060f					_CBNFail:
.01060f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010612	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01061a	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010628					ResetTypeInteger:
.010628	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01062a	29 ff 7f	and #$7fff			and 	#$7FFF
.01062d	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01062f	60		rts				rts
.010630					ResetTypeString:
.010630	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010632	09 00 80	ora #$8000			ora 	#$8000
.010635	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010637	60		rts				rts
.010638					PrintROMMessage:
.010638	48		pha				pha
.010639	da		phx				phx
.01063a					_PRMLoop:
.01063a	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01063e	29 ff 00	and #$00ff			and 	#$00FF
.010641	f0 10		beq $010653			beq 	_PRMExit
.010643	c9 0d 00	cmp #$000d			cmp 	#13
.010646	d0 05		bne $01064d			bne 	_PRMChar
.010648	20 b4 1d	jsr $011db4			jsr 	HWNewLine
.01064b	80 03		bra $010650			bra 	_PRMNext
.01064d					_PRMChar:
.01064d	20 63 1d	jsr $011d63			jsr 	HWPrintChar
.010650					_PRMNext:
.010650	e8		inx				inx
.010651	80 e7		bra $01063a			bra 	_PRMLoop
.010653					_PRMExit:
.010653	fa		plx				plx
.010654	68		pla				pla
.010655	60		rts				rts
.010656					PrintBASICString:
.010656	48		pha				pha
.010657	da		phx				phx
.010658	5a		phy				phy
.010659	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01065c	29 ff 00	and #$00ff			and 	#$00FF
.01065f	f0 0b		beq $01066c			beq 	_PBSExit 					; null string
.010661	aa		tax				tax
.010662					_PBSLoop:
.010662	c8		iny				iny
.010663	b9 00 00	lda $0000,y			lda 	$0000,y
.010666	20 63 1d	jsr $011d63			jsr 	HWPrintChar
.010669	ca		dex				dex
.01066a	d0 f6		bne $010662			bne 	_PBSLoop
.01066c					_PBSExit:
.01066c	7a		ply				ply
.01066d	fa		plx				plx
.01066e	68		pla				pla
.01066f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringconcrete.asm

.010670					StringResetPermanent:
.010670	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010672	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.010673	3a		dec a				dec 	a 							; at the top of memory.
.010674	a8		tay				tay
.010675	48		pha				pha
.010676	a9 00 00	lda #$0000			lda 	#$0000
.010679	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.01067c	68		pla				pla
.01067d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the first link.
.010680	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010682	60		rts				rts
.010683					StringReassign:
.010683	da		phx				phx 								; save X
.010684	bb		tyx				tyx 								; save the pointer to the current value into X.
.010685	a8		tay				tay 								; put address of the new string in Y
.010686	bd 00 00	lda $0000,x			lda 	@w$0000,x					; address of the old string in A
.010689	20 2b 07	jsr $01072b			jsr 	StringRelease 				; release the old string
.01068c	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; get length
.01068f	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.010692	d0 03		bne $010697			bne 	_SRAContent
.010694	82 71 00	brl $010708			brl 	_SRAEmpty 					; if zero, return empty address.
.010697					_SRAContent:
.010697	5a		phy				phy 								; save the new string address on stack
.010698	7a		ply				ply 								; restore and save the new string address
.010699	5a		phy				phy
.01069a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.01069d	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.0106a0	1a		inc a				inc 	a 							; we want one more, for the length byte.
.0106a1	85 36		sta $36				sta 	DTemp5 						; the length required is stored in DTemp5.
.0106a3	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.0106a6	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106a8	a8		tay				tay
.0106a9					_SRACheckUnused:
.0106a9	b9 00 00	lda $0000,y			lda 	$0000,y 					; this is the offset/size to the next (actually offset is 2 more)
.0106ac	f0 22		beq $0106d0			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106ae	10 0f		bpl $0106bf			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106b0	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size of this bhunk.
.0106b3	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106b5	90 08		bcc $0106bf			bcc 	_SRACheckNext 				; too small, go and look at the next block.
.0106b7	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with bit 15 cleared.
.0106ba	98		tya				tya 								; A is the address of the link
.0106bb	1a		inc a				inc 	a 							; add 2, to make this the address of the data space associated
.0106bc	1a		inc a				inc 	a 							; with it.
.0106bd	80 26		bra $0106e5			bra 	_SRACopyA 					; go and copy it there.
.0106bf					_SRACheckNext:
.0106bf	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15 out, this is the size of the block.
.0106c2	29 ff 7f	and #$7fff			and 	#$7FFF
.0106c5	85 38		sta $38				sta 	DTemp5+2 					; save it in temporary space.
.0106c7	98		tya				tya 								; add to the offset to the current address
.0106c8	18		clc				clc
.0106c9	65 38		adc $38				adc 	DTemp5+2
.0106cb	1a		inc a				inc 	a 							; add 2 more for the link itself, the link is 2 less than the offset.
.0106cc	1a		inc a				inc 	a
.0106cd	a8		tay				tay 								; put it in Y, go check that one.
.0106ce	80 d9		bra $0106a9			bra 	_SRACheckUnused
.0106d0					_SRAAllocate:
.0106d0	7a		ply				ply 								; get the new string address back.
.0106d1	5a		phy				phy 								; push it back on the stack.
.0106d2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106d5	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106d8	1a		inc a				inc 	a
.0106d9	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106da	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106dd	90 03		bcc $0106e2			bcc 	_SRANoCarry 				; can't do more than this.
.0106df	a9 ff 00	lda #$00ff			lda 	#255
.0106e2					_SRANoCarry:
.0106e2	20 10 07	jsr $010710			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106e5					_SRACopyA:
.0106e5	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106e8	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106eb	aa		tax				tax 								; where we are copying to.
.0106ec	7a		ply				ply 								; where we're coming from.
.0106ed	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106f0	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106f3	1a		inc a				inc 	a
.0106f4	85 36		sta $36				sta 	DTemp5 						; save counter.
.0106f6	e2 20		sep #$20			sep 	#$20
.0106f8					_SRACopy:
.0106f8	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.0106fb	9d 00 00	sta $0000,x			sta 	@W$0000,x
.0106fe	c8		iny				iny
.0106ff	e8		inx				inx
.010700	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.010702	d0 f4		bne $0106f8			bne 	_SRACopy
.010704	c2 20		rep #$20			rep 	#$20
.010706	fa		plx				plx 								; restore X and exit.
.010707	60		rts				rts
.010708					_SRAEmpty:
.010708	9e 00 00	stz $0000,x			stz 	@w$0000,x
.01070b	9e 02 00	stz $0002,x			stz 	@w$0002,x
.01070e	fa		plx				plx
.01070f	60		rts				rts
.010710					StringAllocateSpace:
.010710	da		phx				phx									; save XY
.010711	5a		phy				phy
.010712	48		pha				pha 								; save the length.
.010713	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.010714	1a		inc a				inc 	a
.010715	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.010718	38		sec				sec 								; add 1 (2's complement)
.010719	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01071c	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01071e	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.010720	a8		tay				tay 								; put in Y
.010721	68		pla				pla 								; restore the length
.010722	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.010725	98		tya				tya 								; get the address back
.010726	1a		inc a				inc 	a 							; skip over the link
.010727	1a		inc a				inc 	a
.010728	7a		ply				ply									; restore YX and exit.
.010729	fa		plx				plx
.01072a	60		rts				rts
.01072b					StringRelease:
.01072b	5a		phy				phy									; save Y
.01072c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.01072f	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it
.010731	90 0c		bcc $01073f			bcc 	_SASNoRelease
.010733	a8		tay				tay 								; the address of the old string
.010734	88		dey				dey 								; point to the link.
.010735	88		dey				dey
.010736	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.010739	09 00 80	ora #$8000			ora 	#$8000
.01073c	99 00 00	sta $0000,y			sta 	@w$0000,y
.01073f					_SASNoRelease:
.01073f	7a		ply				ply
.010740	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringtemp.asm

.010741					StringTempAllocate:
.010741	48		pha				pha
.010742	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010744	d0 09		bne $01074f			bne 	_STANoReset
.010746	5a		phy				phy 								; reset the temp string pointer.
.010747	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01074a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01074c	85 16		sta $16				sta 	DTempStringPointer
.01074e	7a		ply				ply
.01074f					_STANoReset:
.01074f	68		pla				pla 								; get length.
.010750	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010753	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010756	18		clc				clc 								; this adds one, for the length.
.010757	65 16		adc $16				adc 	DTempStringPointer
.010759	85 16		sta $16				sta 	DTempStringPointer
.01075b	48		pha				pha 								; save start address
.01075c	a9 00 00	lda #$0000			lda 	#$0000
.01075f	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010761	92 16		sta ($16)			sta		(DTempStringPointer)
.010763	c2 20		rep #$20			rep 	#$20
.010765	68		pla				pla 								; restore start address
.010766	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010768	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01076a	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01076c	60		rts				rts
.01076d					StringWriteCharacter:
.01076d	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.01076f	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010771	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010773	1a		inc a				inc 	a
.010774	92 18		sta ($18)			sta 	(DStartTempString)
.010776	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010778	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01077a	60		rts				rts
.01077b					StringCreateCopy:
.01077b	a8		tay				tay 								; put pointer to string in Y
.01077c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01077f	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010782	f0 17		beq $01079b			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010784	da		phx				phx 								; save X and put the character count in X
.010785	aa		tax				tax
.010786					_SCCCopy:
.010786	c8		iny				iny 								; advance and read (first time skips length)
.010787	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010789	b9 00 00	lda $0000,y			lda 	$0000,y
.01078c	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01078e	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010790	1a		inc a				inc 	a
.010791	92 18		sta ($18)			sta 	(DStartTempString)
.010793	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010795	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010797	ca		dex				dex 								; do X times
.010798	d0 ec		bne $010786			bne 	_SCCCopy
.01079a	fa		plx				plx
.01079b					_SCCExit:
.01079b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.01079c					Tokenise:
.01079c	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.01079e	84 0a		sty $0a				sty 	DTemp1+2
.0107a0	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0107a3	18		clc				clc
.0107a4	65 02		adc $02				adc 	DBaseAddress
.0107a6	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0107a8	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0107ab	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0107ae					_TOKCap:
.0107ae	c8		iny				iny 								; go to next
.0107af	b7 08		lda [$08],y			lda 	[DTemp1],y
.0107b1	29 ff 00	and #$00ff			and 	#$00FF
.0107b4	f0 22		beq $0107d8			beq 	_TOKEndCap
.0107b6	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107b9	d0 01		bne $0107bc			bne 	_TOKNotQuote
.0107bb	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107bc					_TOKNotQuote:
.0107bc	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107bf	90 ed		bcc $0107ae			bcc 	_TOKCap
.0107c1	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107c4	b0 e8		bcs $0107ae			bcs 	_TOKCap
.0107c6	8a		txa				txa 								; check if in quotes
.0107c7	4a		lsr a				lsr 	a
.0107c8	b0 e4		bcs $0107ae			bcs 	_TOKCap
.0107ca	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107cc	38		sec				sec
.0107cd	e9 20 00	sbc #$0020			sbc 	#32
.0107d0	e2 20		sep #$20			sep 	#$20
.0107d2	97 08		sta [$08],y			sta 	[DTemp1],y
.0107d4	c2 20		rep #$20			rep 	#$20
.0107d6	80 d6		bra $0107ae			bra 	_TOKCap
.0107d8					_TOKEndCap:
.0107d8	c6 08		dec $08				dec 	DTemp1
.0107da					_TOKMainNext:
.0107da	e6 08		inc $08				inc 	DTemp1
.0107dc					_TOKMainLoop:
.0107dc	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107de	29 ff 00	and #$00ff			and 	#$00FF
.0107e1	c9 20 00	cmp #$0020			cmp 	#32
.0107e4	90 1d		bcc $010803			bcc 	_TOKExit 					; 0-31 exit.
.0107e6	f0 f2		beq $0107da			beq 	_TOKMainNext 				; 32 (space) skip.
.0107e8	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107eb	f0 1d		beq $01080a			beq 	_TOKString
.0107ed	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107f0	90 1d		bcc $01080f			bcc 	_TOKPunctuation
.0107f2	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107f5	90 42		bcc $010839			bcc 	_TOKNumber
.0107f7	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107fa	90 13		bcc $01080f			bcc 	_TOKPunctuation
.0107fc	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107ff	90 3d		bcc $01083e			bcc 	_TOKIdentifier
.010801	80 0c		bra $01080f			bra 	_TOKPunctuation 			; 91-   punctuation.
.010803					_TOKExit:
.010803	a9 00 00	lda #$0000			lda 	#$0000
.010806	20 43 08	jsr $010843			jsr 	TOKWriteToken
.010809	60		rts				rts
.01080a					_TOKString:
.01080a	20 e1 08	jsr $0108e1			jsr 	TOKQuotedString
.01080d	80 cd		bra $0107dc			bra 	_TOKMainLoop
.01080f					_TOKPunctuation:
.01080f	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010812	20 48 09	jsr $010948			jsr 	TOKKeywordSearch
.010815	b0 1d		bcs $010834			bcs 	_TOKFoundPunctuation
.010817	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.01081a	20 48 09	jsr $010948			jsr 	TOKKeywordSearch
.01081d	b0 15		bcs $010834			bcs 	_TOKFoundPunctuation
.01081f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010822	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01082a	61 72 73 65 20 6c 69 6e 65 00
.010834					_TOKFoundPunctuation:
.010834	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; output the token and go round again.
.010837	80 a3		bra $0107dc			bra 	_TOKMainLoop
.010839					_TOKNumber:
.010839	20 62 08	jsr $010862			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01083c	80 9e		bra $0107dc			bra 	_TOKMainLoop
.01083e					_TOKIdentifier:
.01083e	20 a3 09	jsr $0109a3			jsr 	TOKIdentifier
.010841	80 99		bra $0107dc			bra 	_TOKMainLoop
.010843					TOKWriteToken:
.010843	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010845	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010847	e6 0c		inc $0c				inc 	DTemp2
.010849	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01084b	29 ff 00	and #$00ff			and 	#$00FF
.01084e	f0 01		beq $010851			beq 	_TOKWriteOverflow
.010850	60		rts				rts
.010851					_TOKWriteOverflow:
.010851	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010854	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01085c	20 6c 6f 6e 67 00
.010862					TOKInteger:
.010862	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010864	64 26		stz $26				stz 	DTemp3+2
.010866					_TOKINLoop:
.010866	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010868	48		pha				pha
.010869	a5 24		lda $24				lda 	DTemp3
.01086b	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01086d	26 26		rol $26				rol 	DTemp3+2
.01086f	06 24		asl $24				asl 	DTemp3
.010871	26 26		rol $26				rol 	DTemp3+2
.010873	18		clc				clc
.010874	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010876	85 24		sta $24				sta 	DTemp3
.010878	68		pla				pla
.010879	65 26		adc $26				adc 	DTemp3+2
.01087b	85 26		sta $26				sta 	DTemp3+2
.01087d	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.01087f	26 26		rol $26				rol 	DTemp3+2
.010881	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010883	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010886	d0 44		bne $0108cc			bne 	_TOKINSize
.010888	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01088a	29 0f 00	and #$000f			and 	#15
.01088d	18		clc				clc
.01088e	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010890	85 24		sta $24				sta 	DTemp3
.010892	90 02		bcc $010896			bcc 	_TOKINNoCarry
.010894	e6 26		inc $26				inc 	DTemp3+2
.010896					_TOKINNoCarry:
.010896	e6 08		inc $08				inc 	DTemp1 						; look at next
.010898	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01089a	29 ff 00	and #$00ff			and 	#$00FF
.01089d	c9 30 00	cmp #$0030			cmp 	#"0"
.0108a0	90 05		bcc $0108a7			bcc 	_TOKINGotInteger
.0108a2	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0108a5	90 bf		bcc $010866			bcc		_TOKINLoop
.0108a7					_TOKINGotInteger:
.0108a7	a5 24		lda $24				lda 	DTemp3 						; lower word
.0108a9	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0108ac	18		clc				clc
.0108ad	69 00 40	adc #$4000			adc 	#$4000
.0108b0	48		pha				pha 								; save it.
.0108b1	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108b3	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108b5	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108b7	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108ba	b0 10		bcs $0108cc			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108bc	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108bf	f0 06		beq $0108c7			beq 	_TOKINNoShift 				; don't need constant shift.
.0108c1	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108c4	20 43 08	jsr $010843			jsr 	TOKWriteToken
.0108c7					_TOKINNoShift:
.0108c7	68		pla				pla 								; get lower its token
.0108c8	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; output it
.0108cb	60		rts				rts
.0108cc					_TOKINSize:
.0108cc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0108cf	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108d7	74 6f 6f 20 6c 61 72 67 65 00
.0108e1					TOKQuotedString:
.0108e1	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108e3	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108e5	85 32		sta $32				sta 	DTemp4
.0108e7	a5 0a		lda $0a				lda 	DTemp1+2
.0108e9	85 34		sta $34				sta 	DTemp4+2
.0108eb					_TOKQFindSize:
.0108eb	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108ed	e6 08		inc $08				inc 	DTemp1
.0108ef	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108f2	f0 3b		beq $01092f			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108f4	c9 22 00	cmp #$0022			cmp 	#34
.0108f7	d0 f2		bne $0108eb			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108f9	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108fb	38		sec				sec
.0108fc	e5 32		sbc $32				sbc 	DTemp4
.0108fe	3a		dec a				dec 	a 							; one less character for closing quote
.0108ff	85 26		sta $26				sta 	DTemp3+2
.010901	18		clc				clc
.010902	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010905	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010908	20 43 08	jsr $010843			jsr 	TOKWriteToken
.01090b	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.01090d	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; effectively a byte-write.
.010910	c6 0c		dec $0c				dec 	DTemp2
.010912	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010914	f0 0f		beq $010925			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010916					_TOKQWriteString:
.010916	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010918	29 ff 00	and #$00ff			and 	#$00FF
.01091b	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; effectively a byte-write.
.01091e	c6 0c		dec $0c				dec 	DTemp2
.010920	e6 32		inc $32				inc 	DTemp4 						; advance character
.010922	ca		dex				dex 								; do X times
.010923	d0 f1		bne $010916			bne 	_TOKQWriteString
.010925					_TOKQWriteEnd:
.010925	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010927	29 01 00	and #$0001			and 	#1
.01092a	f0 02		beq $01092e			beq 	_TOKQExit
.01092c	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01092e					_TOKQExit:
.01092e	60		rts				rts
.01092f					_TOQImbalance:
.01092f	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010932	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01093a	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010948					TOKKeywordSearch:
.010948	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01094a	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01094d	85 34		sta $34				sta 	DTemp4+2
.01094f	a2 00 00	ldx #$0000			ldx 	#0
.010952					_TOKScan:
.010952	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; read the first byte
.010956	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010959	f0 46		beq $0109a1			beq 	_TOKFail 					; if zero then we have failed.
.01095b	3a		dec a				dec 	a 							; -1 gives the length.
.01095c	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01095e	d0 2f		bne $01098f			bne 	_TOKNext 					; no, then skip to next token.
.010960	da		phx				phx 								; save X
.010961	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010964					_TOKCompare:
.010964	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010966	5f 9f 00 01	eor $01009f,x			eor 	TokenText+1,x
.01096a	29 ff 00	and #$00ff			and 	#$00FF
.01096d	d0 1f		bne $01098e			bne 	_TOKPopNext 				; if different, pop and goto next.
.01096f	e8		inx				inx 								; bump X and Y.
.010970	c8		iny				iny
.010971	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010973	d0 ef		bne $010964			bne 	_TOKCompare
.010975	98		tya				tya 								; add length to the text pointer
.010976	18		clc				clc
.010977	65 08		adc $08				adc 	DTemp1
.010979	85 08		sta $08				sta 	DTemp1
.01097b	fa		plx				plx 								; restore X.
.01097c	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the type/token bit.
.010980	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010983	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010984	4a		lsr a				lsr		a
.010985	4a		lsr a				lsr 	a
.010986	eb		xba				xba
.010987	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010989	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01098c	38		sec				sec
.01098d	60		rts				rts
.01098e					_TOKPopNext:
.01098e	fa		plx				plx 								; restore X.
.01098f					_TOKNext:
.01098f	bf 9e 00 01	lda $01009e,x			lda 	TokenText,x 				; get the token skip again.
.010993	29 0f 00	and #$000f			and 	#$000F
.010996	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.010998	8a		txa				txa
.010999	18		clc				clc
.01099a	65 14		adc $14				adc 	DSignCount
.01099c	aa		tax				tax
.01099d	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.01099f	80 b1		bra $010952			bra 	_TOKScan
.0109a1					_TOKFail:
.0109a1	18		clc				clc
.0109a2	60		rts				rts
.0109a3					TOKIdentifier:
.0109a3	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0109a5	85 24		sta $24				sta 	DTemp3
.0109a7					_TOKIFindLength:
.0109a7	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0109a9	a7 08		lda [$08]			lda 	[DTemp1]
.0109ab	29 ff 00	and #$00ff			and 	#$00FF
.0109ae	20 4e 0a	jsr $010a4e			jsr 	TOKIsIdentifierCharacter
.0109b1	b0 f4		bcs $0109a7			bcs 	_TOKIFindLength
.0109b3	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109b5	38		sec				sec
.0109b6	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109b8	85 36		sta $36				sta 	DTemp5
.0109ba	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109bc	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109bf	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109c1	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109c3	29 ff 00	and #$00ff			and 	#$00FF
.0109c6	c9 24 00	cmp #$0024			cmp 	#"$"
.0109c9	d0 0b		bne $0109d6			bne 	_TOKINotString
.0109cb	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109cd	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109cf	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109d1	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109d4	85 26		sta $26				sta 	DTemp3+2
.0109d6					_TOKINotString:
.0109d6	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109d8	29 ff 00	and #$00ff			and 	#$00FF
.0109db	c9 28 00	cmp #$0028			cmp 	#"("
.0109de	d0 0b		bne $0109eb			bne 	_TOKINotArray
.0109e0	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109e2	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109e4	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109e6	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109e9	85 26		sta $26				sta 	DTemp3+2
.0109eb					_TOKINotArray:
.0109eb	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109ed	85 08		sta $08				sta 	DTemp1
.0109ef	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109f1	20 48 09	jsr $010948			jsr 	TOKKeywordSearch
.0109f4	90 04		bcc $0109fa			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109f6	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109f9	60		rts				rts
.0109fa					_TOKIIdentifier:
.0109fa	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109fc	e6 08		inc $08				inc 	DTemp1
.0109fe	20 3a 0a	jsr $010a3a			jsr		_TOKIToConstant 			; convert to range 0-35
.010a01	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.010a03	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010a05	f0 1d		beq $010a24			beq 	_TOKINoSecond
.010a07	48		pha				pha 								; save current on stack.
.010a08	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010a0a	e6 08		inc $08				inc 	DTemp1
.010a0c	20 3a 0a	jsr $010a3a			jsr		_TOKIToConstant 			; convert to range 0-35
.010a0f	85 14		sta $14				sta 	DSignCount 					; save it.
.010a11	0a		asl a				asl 	a 							; x 4
.010a12	0a		asl a				asl 	a
.010a13	65 14		adc $14				adc 	DSignCount 					; x 5
.010a15	0a		asl a				asl 	a 							; x 10
.010a16	65 14		adc $14				adc 	DSignCount 					; x 11
.010a18	0a		asl a				asl 	a 							; x 22
.010a19	0a		asl a				asl 	a 							; x 44
.010a1a	65 14		adc $14				adc 	DSignCount 					; x 45
.010a1c	85 14		sta $14				sta 	DSignCount
.010a1e	68		pla				pla 								; get old token and add x 45
.010a1f	18		clc				clc
.010a20	65 14		adc $14				adc 	DSignCount
.010a22	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a24					_TOKINoSecond:
.010a24	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a26	f0 03		beq $010a2b			beq 	_TOKINotLast				; if yes
.010a28	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a2b					_TOKINotLast:
.010a2b	20 43 08	jsr $010843			jsr 	TOKWriteToken 				; output the token
.010a2e	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a30	d0 c8		bne $0109fa			bne 	_TOKIIdentifier
.010a32					_TOKIOut:
.010a32	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a34	18		clc				clc
.010a35	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a37	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a39	60		rts				rts
.010a3a					_TOKIToConstant:
.010a3a	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a3d	c9 41 00	cmp #$0041			cmp 	#65
.010a40	90 04		bcc $010a46			bcc 	_TOKITInteger
.010a42	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a45	60		rts				rts
.010a46					_TOKITInteger:
.010a46	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a49	18		clc				clc
.010a4a	69 1b 00	adc #$001b			adc 	#27
.010a4d	60		rts				rts
.010a4e					TOKIsIdentifierCharacter:
.010a4e	c9 30 00	cmp #$0030			cmp 	#"0"
.010a51	90 0f		bcc $010a62			bcc 	_TOKIIFail
.010a53	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a56	90 0c		bcc $010a64			bcc 	_TOKIIOk
.010a58	c9 41 00	cmp #$0041			cmp 	#"A"
.010a5b	90 05		bcc $010a62			bcc 	_TOKIIFail
.010a5d	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a60	90 02		bcc $010a64			bcc 	_TOKIIOk
.010a62					_TOKIIFail:
.010a62	18		clc				clc
.010a63	60		rts				rts
.010a64					_TOKIIOk:
.010a64	38		sec				sec
.010a65	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010a66					Binary_Add:
.010a66	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a68	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a6a	30 12		bmi $010a7e		bmi 	_BATypeError
.010a6c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a6e	30 3f		bmi $010aaf		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a70	18		clc			clc 										; add the results
.010a71	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a73	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a75	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a77	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a79	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a7b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a7d	60		rts			rts
.010a7e					_BATypeError:
.010a7e	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010a81	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a89	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a99	65 73 00
.010a9c					_BALengthError:
.010a9c	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010a9f	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010aa7	6f 6f 20 6c 6f 6e 67 00
.010aaf					_BAConcatenateString:
.010aaf	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010ab1	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010ab3	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ab5	85 0c		sta $0c			sta 	DTemp2
.010ab7	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010ab9	18		clc			clc 										; work out the total length
.010aba	b2 08		lda ($08)		lda 	(DTemp1)
.010abc	72 0c		adc ($0c)		adc 	(DTemp2)
.010abe	b0 14		bcs $010ad4		bcs 	_BAConcatLengthError 				; string is too long.
.010ac0	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010ac2	20 41 07	jsr $010741		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010ac5	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010ac7	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ac9	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010acb	20 7b 07	jsr $01077b		jsr 	StringCreateCopy
.010ace	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010ad0	20 7b 07	jsr $01077b		jsr 	StringCreateCopy
.010ad3	60		rts			rts
.010ad4					_BAConcatLengthError:
.010ad4	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010ad7	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010adf	6f 6f 20 6c 6f 6e 67 00
.010ae7					Binary_Subtract:
.010ae7	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010aea	38		sec			sec
.010aeb	b5 00		lda $00,x		lda		EXSValueL+0,x
.010aed	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010aef	95 00		sta $00,x		sta 	EXSValueL+0,x
.010af1	b5 20		lda $20,x		lda		EXSValueH+0,x
.010af3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010af5	95 20		sta $20,x		sta 	EXSValueH+0,x
.010af7	60		rts			rts
.010af8					Binary_ShiftRight:
.010af8	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010afb	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010afd	29 3f 00	and #$003f		and 	#63
.010b00	f0 07		beq $010b09		beq		_Binary_SRExit
.010b02					_Binary_SRLoop:
.010b02	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010b04	76 00		ror $00,x		ror 	EXSValueL+0,x
.010b06	3a		dec a			dec 	a
.010b07	d0 f9		bne $010b02		bne 	_Binary_SRLoop
.010b09					_Binary_SRExit:
.010b09	60		rts			rts
.010b0a					Binary_ShiftLeft:
.010b0a	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010b0d	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b0f	29 3f 00	and #$003f		and 	#63
.010b12	f0 07		beq $010b1b		beq		_Binary_SLExit
.010b14					_Binary_SLLoop:
.010b14	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b16	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b18	3a		dec a			dec 	a
.010b19	d0 f9		bne $010b14		bne 	_Binary_SLLoop
.010b1b					_Binary_SLExit:
.010b1b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010b1c					Binary_And:
.010b1c	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010b1f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b21	35 02		and $02,x		and 	EXSValueL+2,x
.010b23	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b25	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b27	35 22		and $22,x		and 	EXSValueH+2,x
.010b29	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b2b	60		rts			rts
.010b2c					Binary_Or:
.010b2c	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010b2f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b31	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b33	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b35	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b37	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b39	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b3b	60		rts			rts
.010b3c					Binary_Xor:
.010b3c	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010b3f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b41	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b43	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b45	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b47	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b49	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b4b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010b4c					Binary_Equals:
.010b4c	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b4f	b0 0e		bcs $010b5f		bcs 	_BEString
.010b51	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b53	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b55	d0 4f		bne $010ba6		bne 	Compare_Fail
.010b57	b5 20		lda $20,x		lda 	EXSValueH,x
.010b59	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b5b	d0 49		bne $010ba6		bne 	Compare_Fail
.010b5d	80 3f		bra $010b9e		bra 	Compare_Succeed
.010b5f					_BEString:
.010b5f	09 00 00	ora #$0000		ora 	#$0000
.010b62	f0 3a		beq $010b9e		beq 	Compare_Succeed
.010b64	80 40		bra $010ba6		bra 	Compare_Fail
.010b66					Binary_NotEquals:
.010b66	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b69	b0 0e		bcs $010b79		bcs 	_BNEString
.010b6b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b6d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b6f	d0 2d		bne $010b9e		bne 	Compare_Succeed
.010b71	b5 20		lda $20,x		lda 	EXSValueH,x
.010b73	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b75	d0 27		bne $010b9e		bne 	Compare_Succeed
.010b77	80 2d		bra $010ba6		bra 	Compare_Fail
.010b79					_BNEString:
.010b79	09 00 00	ora #$0000		ora 	#$0000
.010b7c	d0 20		bne $010b9e		bne 	Compare_Succeed
.010b7e	80 26		bra $010ba6		bra 	Compare_Fail
.010b80					Binary_Less:
.010b80	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b83	b0 12		bcs $010b97		bcs 	_BLString
.010b85	38		sec			sec
.010b86	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b88	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b8a	b5 20		lda $20,x		lda 	EXSValueH,x
.010b8c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b8e	50 03		bvc $010b93		bvc 	*+5
.010b90	49 00 80	eor #$8000		eor 	#$8000
.010b93	30 09		bmi $010b9e		bmi 	Compare_Succeed
.010b95	80 0f		bra $010ba6		bra 	Compare_Fail
.010b97					_BLString:
.010b97	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b9a	f0 02		beq $010b9e		beq 	Compare_Succeed
.010b9c	80 08		bra $010ba6		bra 	Compare_Fail
.010b9e					Compare_Succeed:
.010b9e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010ba1	95 00		sta $00,x		sta 	EXSValueL,x
.010ba3	95 20		sta $20,x		sta 	EXSValueH,x
.010ba5	60		rts			rts
.010ba6					Compare_Fail:
.010ba6	74 00		stz $00,x		stz 	EXSValueL,x
.010ba8	74 20		stz $20,x		stz 	EXSValueH,x
.010baa	60		rts			rts
.010bab					Binary_GreaterEqual:
.010bab	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bae	b0 12		bcs $010bc2		bcs 	_BGEString
.010bb0	38		sec			sec
.010bb1	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010bb3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bb5	b5 20		lda $20,x		lda 	EXSValueH,x
.010bb7	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bb9	50 03		bvc $010bbe		bvc 	*+5
.010bbb	49 00 80	eor #$8000		eor 	#$8000
.010bbe	10 de		bpl $010b9e		bpl 	Compare_Succeed
.010bc0	80 e4		bra $010ba6		bra 	Compare_Fail
.010bc2					_BGEString:
.010bc2	09 00 00	ora #$0000		ora 	#$0000
.010bc5	10 d7		bpl $010b9e		bpl 	Compare_Succeed
.010bc7	80 dd		bra $010ba6		bra 	Compare_Fail
.010bc9					Binary_LessEqual:
.010bc9	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bcc	b0 12		bcs $010be0		bcs 	_BLEString
.010bce	18		clc			clc 									; numeric <= signed
.010bcf	b5 00		lda $00,x		lda 	EXSValueL,x
.010bd1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bd3	b5 20		lda $20,x		lda 	EXSValueH,x
.010bd5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bd7	50 03		bvc $010bdc		bvc 	*+5
.010bd9	49 00 80	eor #$8000		eor 	#$8000
.010bdc	30 c0		bmi $010b9e		bmi 	Compare_Succeed
.010bde	80 c6		bra $010ba6		bra 	Compare_Fail
.010be0					_BLEString:
.010be0	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010be3	d0 b9		bne $010b9e		bne 	Compare_Succeed
.010be5	80 bf		bra $010ba6		bra 	Compare_Fail
.010be7					Binary_Greater:
.010be7	20 05 0c	jsr $010c05		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bea	b0 12		bcs $010bfe		bcs 	_BGString
.010bec	18		clc			clc 									; numeric > signed
.010bed	b5 00		lda $00,x		lda 	EXSValueL,x
.010bef	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bf1	b5 20		lda $20,x		lda 	EXSValueH,x
.010bf3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bf5	50 03		bvc $010bfa		bvc 	*+5
.010bf7	49 00 80	eor #$8000		eor 	#$8000
.010bfa	10 a2		bpl $010b9e		bpl 	Compare_Succeed
.010bfc	80 a8		bra $010ba6		bra 	Compare_Fail
.010bfe					_BGString:
.010bfe	c9 01 00	cmp #$0001		cmp 	#$0001
.010c01	f0 9b		beq $010b9e		beq 	Compare_Succeed
.010c03	80 a1		bra $010ba6		bra 	Compare_Fail
.010c05					CompareTypeCheck:
.010c05	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010c07	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010c09	30 06		bmi $010c11		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010c0b	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010c0d	30 1c		bmi $010c2b		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010c0f	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010c10	60		rts			rts
.010c11					_CTCFail:
.010c11	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010c14	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c1c	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c2b					_CTCStringCompare:
.010c2b	20 28 06	jsr $010628		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c2e	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c30	85 08		sta $08			sta 	DTemp1
.010c32	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c34	85 0c		sta $0c			sta 	DTemp2
.010c36	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c39	a8		tay			tay
.010c3a	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c3c	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c3e	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c40	90 02		bcc $010c44		bcc 	_CTCSmallest
.010c42	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c44					_CTCSmallest:
.010c44	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c46					_CTCCompare:
.010c46	c8		iny			iny 									; look at next character (done first, first char is size)
.010c47	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c49	30 16		bmi $010c61		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c4b	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c4d	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c4f	f0 f5		beq $010c46		beq 	_CTCCompare 					; if zero, try the next character.
.010c51	b0 07		bcs $010c5a		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c53					_CTCLess:
.010c53	c2 20		rep #$20		rep 	#$20
.010c55	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c58	80 14		bra $010c6e		bra 	_CTCExit
.010c5a					_CTCGreater:
.010c5a	c2 20		rep #$20		rep 	#$20
.010c5c	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c5f	80 0d		bra $010c6e		bra 	_CTCExit
.010c61					_CTCEqualSoFar:
.010c61	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c63	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c65	90 ec		bcc $010c53		bcc 	_CTCLess
.010c67	d0 f1		bne $010c5a		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c69	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c6b	a9 00 00	lda #$0000		lda 	#$0000
.010c6e					_CTCExit:
.010c6e	38		sec			sec 									; return with CS indicating string comparison.
.010c6f	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010c70					Binary_Divide:
.010c70	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010c73	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c75	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c77	d0 14		bne $010c8d		bne 	_BinaryDivide_Ok
.010c79	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010c7c	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c84	20 62 79 20 7a 65 72 6f 00
.010c8d					_BinaryDivide_Ok:
.010c8d	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c8f	64 0a		stz $0a			stz 	DTemp1+2
.010c91	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c93	5a		phy			phy 										; save Y (bit counter)
.010c94	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c96	10 07		bpl $010c9f		bpl 	_BinaryDivide_RightDone
.010c98	e8		inx			inx
.010c99	e8		inx			inx
.010c9a	20 d5 0c	jsr $010cd5		jsr 	Binary_DivNegate
.010c9d	ca		dex			dex
.010c9e	ca		dex			dex
.010c9f					_BinaryDivide_RightDone:
.010c9f	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010ca1	10 03		bpl $010ca6		bpl 	_BinaryDivide_LeftDone
.010ca3	20 d5 0c	jsr $010cd5		jsr 	Binary_DivNegate
.010ca6					_BinaryDivide_LeftDone:
.010ca6	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010ca9					_BinaryDivide_Loop:
.010ca9	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010cab	36 20		rol $20,x		rol 	EXSValueH+0,x
.010cad	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010caf	26 0a		rol $0a			rol 	DTemp1+2
.010cb1	38		sec			sec											; calculate A-M
.010cb2	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010cb4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010cb6	85 0c		sta $0c			sta 	DTemp2
.010cb8	a5 0a		lda $0a			lda 	DTemp1+2
.010cba	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010cbc	90 08		bcc $010cc6		bcc 	_Binary_NoSubract 					; if A < M skip this
.010cbe	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010cc0	a5 0c		lda $0c			lda 	DTemp2
.010cc2	85 08		sta $08			sta 	DTemp1+0
.010cc4	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cc6					_Binary_NoSubract:
.010cc6	88		dey			dey 										; do it 32 times.
.010cc7	d0 e0		bne $010ca9		bne 	_BinaryDivide_Loop
.010cc9					_BinaryDivide_Exit:
.010cc9	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010ccb	29 01 00	and #$0001		and 	#1
.010cce	f0 03		beq $010cd3		beq 	_BinaryDivide_Exit2
.010cd0	20 d5 0c	jsr $010cd5		jsr 	Binary_DivNegate
.010cd3					_BinaryDivide_Exit2:
.010cd3	7a		ply			ply 										; restore Y
.010cd4	60		rts			rts
.010cd5					Binary_DivNegate:
.010cd5	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cd7	38		sec			sec 										; negate the value at stack X.
.010cd8	a9 00 00	lda #$0000		lda 	#$0000
.010cdb	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cdd	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cdf	a9 00 00	lda #$0000		lda 	#$0000
.010ce2	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010ce4	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ce6	60		rts			rts
.010ce7					Binary_Modulus:
.010ce7	20 70 0c	jsr $010c70		jsr 	Binary_Divide 						; do the divide
.010cea	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cec	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cee	a5 0a		lda $0a			lda 	DTemp1+2
.010cf0	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cf2	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010cf3					Binary_Multiply:
.010cf3	20 08 06	jsr $010608		jsr 	CheckBothNumeric 					; check both values are numeric
.010cf6	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cf8	85 08		sta $08			sta 	DTemp1
.010cfa	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cfc	85 0a		sta $0a			sta		DTemp1+2
.010cfe	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010d00	74 20		stz $20,x		stz 	EXSValueH+0,x
.010d02					_BinaryMultiply_Loop:
.010d02	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010d04	05 0a		ora $0a			ora 	DTemp1+2
.010d06	f0 1e		beq $010d26		beq 	_BinaryMultiply_Exit
.010d08	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010d0a	29 01 00	and #$0001		and 	#1
.010d0d	f0 0d		beq $010d1c		beq 	_BinaryMultiply_NoAdd
.010d0f	18		clc			clc 										; add multiplicand to result.
.010d10	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d12	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d14	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d16	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d18	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d1a	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d1c					_BinaryMultiply_NoAdd:
.010d1c	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d1e	66 08		ror $08			ror 	DTemp1
.010d20	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d22	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d24	80 dc		bra $010d02		bra 	_BinaryMultiply_Loop 				; go round again.
.010d26					_BinaryMultiply_Exit:
.010d26	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010d27					Function_Len:
.010d27	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010d2a	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d2d	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010d30	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d32	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d35	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d38	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d3a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d3c	60		rts				rts
.010d3d					Function_Abs:
.010d3d	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010d40	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d43	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010d46	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d48	30 07		bmi $010d51			bmi 	_FAbsNegative 				; negate it if negative
.010d4a	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d4c	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d4e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d50	60		rts				rts
.010d51					_FAbsNegative:
.010d51	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d52	a9 00 00	lda #$0000			lda 	#0
.010d55	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d57	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d59	a9 00 00	lda #$0000			lda 	#0
.010d5c	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d5e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d60	60		rts				rts
.010d61					Function_Sgn:
.010d61	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns integer
.010d64	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get an integer
.010d67	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010d6a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d6c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d6e	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d70	30 07		bmi $010d79			bmi 	_FSgnNegative 				; set to -1 if signed
.010d72	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d74	f0 02		beq $010d78			beq 	_FSgnExit
.010d76	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d78					_FSgnExit:
.010d78	60		rts				rts
.010d79					_FSgnNegative:
.010d79	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d7c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d7e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d80	60		rts				rts
.010d81					Function_Random:
.010d81	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010d84	20 28 06	jsr $010628			jsr 	ResetTypeInteger
.010d87	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d89	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d8b	d0 0a		bne $010d97			bne 	_Rnd_NotZero
.010d8d	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d90	85 10		sta $10				sta 	DRandom
.010d92	a9 ea 00	lda #$00ea			lda 	#$EA
.010d95	85 12		sta $12				sta 	DRandom+2
.010d97					_Rnd_NotZero:
.010d97	20 a2 0d	jsr $010da2			jsr 	_Rnd_Process 				; call randomiser twice
.010d9a	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d9c	20 a2 0d	jsr $010da2			jsr 	_Rnd_Process
.010d9f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010da1	60		rts				rts
.010da2					_Rnd_Process:
.010da2	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010da4	26 12		rol $12				rol 	DRandom+2
.010da6	90 0e		bcc $010db6			bcc 	_Rnd_Exit
.010da8	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010daa	49 54 d4	eor #$d454			eor 	#$D454
.010dad	85 10		sta $10				sta 	DRandom
.010daf	a5 12		lda $12				lda 	DRandom+2
.010db1	49 d5 55	eor #$55d5			eor 	#$55D5
.010db4	85 12		sta $12				sta 	DRandom+2
.010db6					_Rnd_Exit:
.010db6	a5 10		lda $10				lda 	DRandom
.010db8	45 12		eor $12				eor 	DRandom+2
.010dba	60		rts				rts
.010dbb					Function_Chr:
.010dbb	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string
.010dbe	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer
.010dc1	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010dc4	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dc7	d0 12		bne $010ddb			bne 	_FCHBad
.010dc9	48		pha				pha  								; save char # on stack
.010dca	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dcd	20 41 07	jsr $010741			jsr 	StringTempAllocate
.010dd0	68		pla				pla 								; restore character number
.010dd1	20 6d 07	jsr $01076d			jsr 	StringWriteCharacter 		; write it out.
.010dd4	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dd6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dd8	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dda	60		rts				rts
.010ddb					_FCHBad:
.010ddb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010dde	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010de6	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010df3					Function_Asc:
.010df3	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010df6	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get string
.010df9	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010dfc	a8		tay				tay 								; string address in Y
.010dfd	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010e00	29 ff 00	and #$00ff			and 	#$00FF
.010e03	f0 0b		beq $010e10			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010e05	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010e08	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010e0b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010e0d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e0f	60		rts				rts
.010e10					_FASBad:
.010e10	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010e13	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e1b	65 20 66 6f 72 20 61 73 63 28 29 00
.010e27					Function_SPC:
.010e27	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string
.010e2a	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e2d	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010e30	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e33	d0 17		bne $010e4c			bne 	_FSPBad
.010e35	48		pha				pha 								; save length
.010e36	20 41 07	jsr $010741			jsr 	StringTempAllocate 			; allocate character space
.010e39	7a		ply				ply 								; get count in Y
.010e3a	f0 09		beq $010e45			beq 	_FSPExit 					; if zero, just empty string
.010e3c					_FSPCopy:
.010e3c	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e3f	20 6d 07	jsr $01076d			jsr 	StringWriteCharacter 		; write it out.
.010e42	88		dey				dey
.010e43	d0 f7		bne $010e3c			bne 	_FSPCopy	 				; do it Y times
.010e45					_FSPExit:
.010e45	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e47	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e49	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e4b	60		rts				rts
.010e4c					_FSPBad:
.010e4c	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010e4f	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e57	65 20 66 6f 72 20 73 70 63 28 29 00
.010e63					Function_Inkey:
.010e63	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010e66	20 28 06	jsr $010628			jsr 	ResetTypeInteger
.010e69	20 d5 1d	jsr $011dd5			jsr 	HWInkey 					; read current key
.010e6c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e6e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e70	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010e71					Function_LEFT:
.010e71	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.010e74	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e77	48		pha				pha 								; save string on stack.
.010e78	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; get count
.010e7b	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010e7e	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e81	d0 6d		bne $010ef0			bne 	FNStringParameter
.010e83	85 08		sta $08				sta 	DTemp1 						; save count.
.010e85	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket
.010e88	7a		ply				ply 								; Y points to string.
.010e89	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e8c	29 ff 00	and #$00ff			and 	#$00FF
.010e8f	f0 52		beq $010ee3			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e91	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e93	f0 55		beq $010eea			beq 	FNStringY 					; return string in Y if current len = required len.
.010e95	90 53		bcc $010eea			bcc 	FNStringY 					; if current < required return whole thing.
.010e97	c8		iny				iny 								; take from here - start of string
.010e98	80 33		bra $010ecd			bra 	FNDTemp1Characters
.010e9a					Function_RIGHT:
.010e9a	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.010e9d	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ea0	48		pha				pha 								; save string on stack.
.010ea1	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; get count
.010ea4	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010ea7	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010eaa	d0 44		bne $010ef0			bne 	FNStringParameter
.010eac	85 08		sta $08				sta 	DTemp1 						; save count.
.010eae	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket
.010eb1	7a		ply				ply 								; Y points to string.
.010eb2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010eb5	29 ff 00	and #$00ff			and 	#$00FF
.010eb8	f0 29		beq $010ee3			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010eba	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ebc	f0 2c		beq $010eea			beq 	FNStringY 					; return string in Y if current len = required len.
.010ebe	90 2a		bcc $010eea			bcc 	FNStringY 					; if current < required return whole thing.
.010ec0	38		sec				sec 								; current-required is the number to skip
.010ec1	e5 08		sbc $08				sbc 	DTemp1
.010ec3	85 0a		sta $0a				sta 	DTemp1+2
.010ec5	98		tya				tya
.010ec6	18		clc				clc
.010ec7	65 0a		adc $0a				adc 	DTemp1+2
.010ec9	a8		tay				tay
.010eca	c8		iny				iny 								; +1 for the count.
.010ecb	80 00		bra $010ecd			bra 	FNDTemp1Characters
.010ecd					FNDTemp1Characters:
.010ecd	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ecf	f0 12		beq $010ee3			beq 	FNStringEmpty 				; if zero, return empty string.
.010ed1	20 41 07	jsr $010741			jsr 	StringTempAllocate
.010ed4	48		pha				pha 								; save the address
.010ed5					_FND1Loop:
.010ed5	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ed8	20 6d 07	jsr $01076d			jsr 	StringWriteCharacter
.010edb	c8		iny				iny
.010edc	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ede	d0 f5		bne $010ed5			bne 	_FND1Loop
.010ee0	7a		ply				ply 								; string address in Y
.010ee1	80 07		bra $010eea			bra 	FNStringY
.010ee3					FNStringEmpty:
.010ee3	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ee6	20 41 07	jsr $010741			jsr 	StringTempAllocate 			; put address of it in Y
.010ee9	a8		tay				tay
.010eea					FNStringY:
.010eea	98		tya				tya
.010eeb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010eed	74 22		stz $22,x			stz 	EXSValueH+2,x
.010eef	60		rts				rts
.010ef0					FNStringParameter:
.010ef0	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010ef3	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010efb	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010f08					Function_MID:
.010f08	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.010f0b	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f0e	48		pha				pha 								; save string on stack.
.010f0f	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; get offset (n)
.010f12	20 28 03	jsr $010328			jsr 	EvaluateNextInteger
.010f15	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f18	d0 d6		bne $010ef0			bne 	FNStringParameter
.010f1a	c9 00 00	cmp #$0000			cmp 	#0
.010f1d	f0 d1		beq $010ef0			beq 	FNStringParameter 			; or zero
.010f1f	48		pha				pha 								; save start position on stack.
.010f20	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f23	85 08		sta $08				sta 	DTemp1
.010f25	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f27	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f2a	d0 0e		bne $010f3a			bne 	_FMINoThird
.010f2c	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f2e	e6 06		inc $06				inc 	DCodePtr
.010f30	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f33	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f36	d0 b8		bne $010ef0			bne 	FNStringParameter
.010f38	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f3a					_FMINoThird:
.010f3a	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket
.010f3d	68		pla				pla 								; get offset position
.010f3e	85 0c		sta $0c				sta 	DTemp2
.010f40	7a		ply				ply 								; get address of string in Y
.010f41	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f44	29 ff 00	and #$00ff			and 	#$00FF
.010f47	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f49	90 98		bcc $010ee3			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f4b	38		sec				sec 								; calculate number of characters left after
.010f4c	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f4e	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f4f	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f51	b0 02		bcs $010f55			bcs 	_FMISufficient
.010f53	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f55					_FMISufficient:
.010f55	98		tya				tya 								; get address
.010f56	18		clc				clc
.010f57	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f59	a8		tay				tay 								; put in Y
.010f5a	82 70 ff	brl $010ecd			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010f5d					Function_Peek:
.010f5d	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010f60	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f63	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010f66	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f68	84 0a		sty $0a				sty 	DTemp1+2
.010f6a	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f6d	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f6f	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f72	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f74	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f76	60		rts				rts
.010f77					Function_Deek:
.010f77	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010f7a	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f7d	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010f80	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f82	84 0a		sty $0a				sty 	DTemp1+2
.010f84	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f87	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f89	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f8b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f8d	60		rts				rts
.010f8e					Function_Leek:
.010f8e	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010f91	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f94	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check )
.010f97	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f99	84 0a		sty $0a				sty 	DTemp1+2
.010f9b	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f9e	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fa0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010fa2	c8		iny				iny
.010fa3	c8		iny				iny
.010fa4	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fa6	95 20		sta $20,x			sta 	EXSValueH+0,x
.010fa8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010fa9					Function_VAL:
.010fa9	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns an integer
.010fac	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; get the value you are absoluting
.010faf	48		pha				pha 								; put string address on stack.
.010fb0	20 c0 0f	jsr $010fc0			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fb3	7a		ply				ply 								; get string address back
.010fb4	da		phx				phx 								; save X on stack
.010fb5	aa		tax				tax 								; base in X
.010fb6	98		tya				tya 								; address in A
.010fb7	20 fa 0f	jsr $010ffa			jsr 	StringToInteger
.010fba	fa		plx				plx 								; restore X
.010fbb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fbd	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fbf	60		rts				rts
.010fc0					VALGetBase:
.010fc0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fc2	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fc5	f0 07		beq $010fce			beq 	_VGBAlternate
.010fc7	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fca	a9 0a 00	lda #$000a			lda 	#10
.010fcd	60		rts				rts
.010fce					_VGBAlternate:
.010fce	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; skip comma.
.010fd1	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get base
.010fd4	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fd7	d0 0e		bne $010fe7			bne 	_VGBBadBase
.010fd9	c9 02 00	cmp #$0002			cmp 	#2
.010fdc	90 09		bcc $010fe7			bcc 	_VGBBadBase
.010fde	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fe1	b0 04		bcs $010fe7			bcs 	_VGBBadBase
.010fe3	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fe6	60		rts				rts
.010fe7					_VGBBadBase:
.010fe7	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>010fea	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010ff2	65 72 20 42 61 73 65 00
.010ffa					StringToInteger:
.010ffa	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010ffc	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ffe	29 ff 00	and #$00ff			and 	#$00FF
.011001	85 26		sta $26				sta 	DTemp3+2
.011003	f0 6e		beq $011073			beq 	_STIError 					; if length zero it's bad.
.011005	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.011007	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.011009	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.01100b	64 0a		stz $0a				stz 	DTemp1+2
.01100d	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01100f	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.011012	48		pha				pha 								; push on stack
.011013	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011016	d0 06		bne $01101e			bne 	_STILoop
.011018	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01101a	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01101c	f0 55		beq $011073			beq 	_STIError 					; if only - then error.
.01101e					_STILoop:
.01101e	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.011020	20 92 10	jsr $011092			jsr 	MultiplyTemp1ByA
.011023	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011025	29 ff 00	and #$00ff			and 	#$00FF
.011028	20 83 10	jsr $011083			jsr 	ConvertUpperCase	 		; make U/C
.01102b	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.01102e	90 43		bcc $011073			bcc 	_STIError
.011030	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011033	90 0e		bcc $011043			bcc 	_STIOkay1
.011035	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011038	90 39		bcc $011073			bcc 	_STIError
.01103a	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01103d	b0 34		bcs $011073			bcs 	_STIError
.01103f	18		clc				clc 								; shift to correct range.
.011040	69 09 00	adc #$0009			adc 	#9
.011043					_STIOkay1:
.011043	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011046	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011048	b0 29		bcs $011073			bcs 	_STIError
.01104a	18		clc				clc 								; add A to DTemp1
.01104b	65 08		adc $08				adc 	DTemp1
.01104d	85 08		sta $08				sta 	DTemp1
.01104f	90 02		bcc $011053			bcc 	_STINoCarry
.011051	e6 0a		inc $0a				inc 	DTemp1+2
.011053					_STINoCarry:
.011053	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011055	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011057	d0 c5		bne $01101e			bne 	_STILoop 					; loop back.
.011059	68		pla				pla 								; get optional minus bac
.01105a	c9 2d 00	cmp #$002d			cmp 	#"-"
.01105d	d0 0f		bne $01106e			bne 	_STINotNegative 			; handle the negative character
.01105f	38		sec				sec 								; negate DTemp1
.011060	a9 00 00	lda #$0000			lda 	#0
.011063	e5 08		sbc $08				sbc 	DTemp1
.011065	85 08		sta $08				sta 	DTemp1
.011067	a9 00 00	lda #$0000			lda 	#0
.01106a	e5 0a		sbc $0a				sbc 	DTemp1+2
.01106c	85 0a		sta $0a				sta 	DTemp1+2
.01106e					_STINotNegative:
.01106e	a5 08		lda $08				lda 	DTemp1 						; get the result
.011070	a4 0a		ldy $0a				ldy 	DTemp1+2
.011072	60		rts				rts
.011073					_STIError:
.011073	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011076	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01107e	74 61 6e 74 00
.011083					ConvertUpperCase:
.011083	c9 61 00	cmp #$0061			cmp 	#'a'
.011086	90 09		bcc $011091			bcc 	_CUCExit
.011088	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01108b	b0 04		bcs $011091			bcs 	_CUCExit
.01108d	38		sec				sec
.01108e	e9 20 00	sbc #$0020			sbc 	#32
.011091					_CUCExit:
.011091	60		rts				rts
.011092					MultiplyTemp1ByA:
.011092					_MTGeneral:
.011092	da		phx				phx
.011093	aa		tax				tax 								; multiplier in X
.011094	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011096	85 0c		sta $0c				sta 	DTemp2
.011098	a5 0a		lda $0a				lda 	DTemp1+2
.01109a	85 0e		sta $0e				sta 	DTemp2+2
.01109c	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.01109e	64 0a		stz $0a				stz 	DTemp1+2
.0110a0	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.0110a3					_MTLoop:
.0110a3	8a		txa				txa 								; shift X right into C
.0110a4	4a		lsr a				lsr 	a
.0110a5	aa		tax				tax
.0110a6	90 10		bcc $0110b8			bcc 	_MTNoAdd
.0110a8	18		clc				clc
.0110a9	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0110ab	65 0c		adc $0c				adc 	DTemp2
.0110ad	85 08		sta $08				sta 	DTemp1
.0110af	a5 0a		lda $0a				lda 	DTemp1+2
.0110b1	65 0e		adc $0e				adc 	DTemp2+2
.0110b3	85 0a		sta $0a				sta 	DTemp1+2
.0110b5	90 01		bcc $0110b8			bcc 	_MTNoAdd
.0110b7	c8		iny				iny
.0110b8					_MTNoAdd:
.0110b8	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110ba	26 0e		rol $0e				rol 	DTemp2+2
.0110bc	90 01		bcc $0110bf			bcc 	_MTNoOverflow
.0110be	c8		iny				iny
.0110bf					_MTNoOverflow:
.0110bf	8a		txa				txa 								; until multiplier is zero.
.0110c0	d0 e1		bne $0110a3			bne 	_MTLoop
.0110c2	98		tya				tya
.0110c3	18		clc				clc
.0110c4	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110c7	fa		plx				plx 								; restore X
.0110c8	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.0110c9					Function_Str:
.0110c9	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.0110cc	20 28 03	jsr $010328			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110cf	48		pha				pha 								; save YA on the stack
.0110d0	5a		phy				phy
.0110d1	20 c0 0f	jsr $010fc0			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110d4	85 14		sta $14				sta 	DSignCount
.0110d6	7a		ply				ply 								; YA is the number
.0110d7	68		pla				pla
.0110d8	da		phx				phx
.0110d9	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110db	20 e4 10	jsr $0110e4			jsr 	ConvertToString 			; convert it to a string.
.0110de	fa		plx				plx 								; restore X
.0110df	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110e1	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110e3	60		rts				rts
.0110e4					ConvertToString:
.0110e4	48		pha				pha
.0110e5	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110e8	20 41 07	jsr $010741			jsr 	StringTempAllocate 			; allocate space for return string.
.0110eb	68		pla				pla
.0110ec					ConvertToStringAlreadyAllocated:
.0110ec	da		phx				phx 								; save X (base)
.0110ed	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110ef	84 26		sty $26				sty 	DTemp3+2
.0110f1	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110f3	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110f5	10 15		bpl $01110c			bpl 	_CTSNotNegative
.0110f7	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110fa	20 76 11	jsr $011176			jsr 	CTSOutputA
.0110fd	38		sec				sec 								; negate DTemp3 which is the number
.0110fe	a9 00 00	lda #$0000			lda 	#0
.011101	e5 24		sbc $24				sbc 	DTemp3
.011103	85 24		sta $24				sta 	DTemp3
.011105	a9 00 00	lda #$0000			lda 	#0
.011108	e5 26		sbc $26				sbc 	DTemp3+2
.01110a	85 26		sta $26				sta 	DTemp3+2
.01110c					_CTSNotNegative:
.01110c	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.01110f	48		pha				pha
.011110	a9 00 00	lda #$0000			lda 	#0
.011113	48		pha				pha
.011114	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011116	85 08		sta $08				sta 	DTemp1
.011118	64 0a		stz $0a				stz 	DTemp1+2
.01111a					_CTSMultiplySubtractor:
.01111a	38		sec				sec 								; check number vs subtractor
.01111b	a5 24		lda $24				lda 	DTemp3
.01111d	e5 08		sbc $08				sbc 	DTemp1
.01111f	a5 26		lda $26				lda 	DTemp3+2
.011121	e5 0a		sbc $0a				sbc 	DTemp1+2
.011123	90 0f		bcc $011134			bcc		_CTSScaledUp 				; if >= then scaled up.
.011125	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011127	48		pha				pha
.011128	a5 0a		lda $0a				lda 	DTemp1+2
.01112a	48		pha				pha
.01112b	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01112d	20 92 10	jsr $011092			jsr 	MultiplyTemp1ByA
.011130	b0 02		bcs $011134			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011132	80 e6		bra $01111a			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011134					_CTSScaledUp:
.011134	7a		ply				ply 								; YA contains the previous divider.
.011135	68		pla				pla
.011136	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011139	d0 05		bne $011140			bne 	_CTSHasDigit
.01113b	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01113e	f0 20		beq $011160			beq 	_CTSExit
.011140					_CTSHasDigit:
.011140	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011142	84 0e		sty $0e				sty 	DTemp2+2
.011144	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011147					_CTSSubLoop:
.011147	38		sec				sec 								; subtract subtractor from number
.011148	a5 24		lda $24				lda 	DTemp3
.01114a	e5 0c		sbc $0c				sbc 	DTemp2
.01114c	a8		tay				tay 								; intermediate in Y
.01114d	a5 26		lda $26				lda 	DTemp3+2
.01114f	e5 0e		sbc $0e				sbc 	DTemp2+2
.011151	90 07		bcc $01115a			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011153	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011155	84 24		sty $24				sty 	DTemp3
.011157	e8		inx				inx 								; one more subtraction
.011158	80 ed		bra $011147			bra 	_CTSSubLoop 				; try it again.
.01115a					_CTSFinishedSubtracting:
.01115a	8a		txa				txa 								; convert to ASCII.
.01115b	20 69 11	jsr $011169			jsr 	CTSOutputHexDigit 			; write that out.
.01115e	80 d4		bra $011134			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011160					_CTSExit:
.011160	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011162	20 69 11	jsr $011169			jsr 	CTSOutputHexDigit
.011165	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011167	fa		plx				plx 								; restore X.
.011168	60		rts				rts
.011169					CTSOutputHexDigit:
.011169	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01116c	90 04		bcc $011172			bcc 	_CTSNotLetter
.01116e	18		clc				clc
.01116f	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011172					_CTSNotLetter:
.011172	18		clc				clc
.011173	69 30 00	adc #$0030			adc 	#48
.011176					CTSOutputA:
.011176	5a		phy				phy 								; save Y, set Y to current pointer
.011177	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011179	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01117c	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01117e	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011180	1a		inc a				inc 	a
.011181	92 18		sta ($18)			sta 	(DStartTempString)
.011183	c2 20		rep #$20			rep 	#$20
.011185	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011187	7a		ply				ply 								; restore Y and exit.
.011188	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.011189					Function_INSTR:
.011189	20 28 06	jsr $010628			jsr 	ResetTypeInteger 			; returns a integer
.01118c	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.01118f	48		pha				pha 								; save string to search
.011190	20 ff 05	jsr $0105ff			jsr 	ExpectComma
.011193	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; string to search for
.011196	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket
.011199	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.01119b	68		pla				pla
.01119c	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.01119e	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0111a0	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0111a2	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0111a4	38		sec				sec
.0111a5	b2 0c		lda ($0c)			lda 	(DTemp2)
.0111a7	f2 08		sbc ($08)			sbc		(DTemp1)
.0111a9	c2 20		rep #$20			rep 	#$20
.0111ab	90 2c		bcc $0111d9			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0111ad	29 ff 00	and #$00ff			and 	#$00FF
.0111b0	1a		inc a				inc 	a
.0111b1	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111b3	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111b5	29 ff 00	and #$00ff			and 	#$00FF
.0111b8	f0 22		beq $0111dc			beq 	_FINSError
.0111ba					_FINSLoop:
.0111ba	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111bc	1a		inc a				inc 	a
.0111bd	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111bf	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111c1	29 ff 00	and #$00ff			and 	#$00FF
.0111c4	a8		tay				tay									; start comparing at index 1.
.0111c5					_FINSCompare:
.0111c5	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111c7	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111c9	29 ff 00	and #$00ff			and 	#$00FF
.0111cc	d0 05		bne $0111d3			bne 	_FINSNext
.0111ce	88		dey				dey
.0111cf	d0 f4		bne $0111c5			bne 	_FINSCompare
.0111d1	80 08		bra $0111db			bra 	_FINSExit
.0111d3					_FINSNext:
.0111d3	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111d5	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111d7	d0 e1		bne $0111ba			bne 	_FINSLoop
.0111d9					_FINSFail:
.0111d9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111db					_FINSExit:
.0111db	60		rts				rts
.0111dc					_FINSError:
.0111dc	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0111df	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111e7	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.0111f0					Function_UPPER:
.0111f0	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.0111f3	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.0111f6	48		pha				pha
.0111f7	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; close call.
.0111fa	20 41 07	jsr $010741			jsr		StringTempAllocate 			; allocate memory for it
.0111fd	68		pla				pla
.0111fe	20 7b 07	jsr $01077b			jsr 	StringCreateCopy 			; create a copy of it.
.011201	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011203	95 00		sta $00,x			sta 	EXSValueL+0,x
.011205	a8		tay				tay 								; address in Y
.011206	74 20		stz $20,x			stz 	EXSValueH+0,x
.011208	da		phx				phx 								; save X
.011209	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01120b	29 ff 00	and #$00ff			and 	#$00FF
.01120e	f0 20		beq $011230			beq 	_FUPExit
.011210	aa		tax				tax 								; put in X
.011211					_FUPLoop:
.011211	c8		iny				iny 								; increment and load character
.011212	b9 00 00	lda $0000,y			lda 	$0000,y
.011215	29 ff 00	and #$00ff			and 	#$00FF
.011218	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.01121b	90 10		bcc $01122d			bcc 	_FUPNoChange
.01121d	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011220	b0 0b		bcs $01122d			bcs 	_FUPNoChange
.011222	38		sec				sec 								; shift case
.011223	e9 20 00	sbc #$0020			sbc 	#32
.011226	e2 20		sep #$20			sep 	#$20 						; write back
.011228	99 00 00	sta $0000,y			sta 	$0000,y
.01122b	c2 20		rep #$20			rep 	#$20
.01122d					_FUPNoChange:
.01122d	ca		dex				dex 								; do X times
.01122e	d0 e1		bne $011211			bne 	_FUPLoop
.011230					_FUPExit:
.011230	fa		plx				plx 								; restore X
.011231	60		rts				rts
.011232					Function_LOWER:
.011232	20 30 06	jsr $010630			jsr 	ResetTypeString 			; returns a string.
.011235	20 47 03	jsr $010347			jsr 	EvaluateNextString 			; evaluate a string.
.011238	48		pha				pha
.011239	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; close call.
.01123c	20 41 07	jsr $010741			jsr		StringTempAllocate 			; allocate memory for it
.01123f	68		pla				pla
.011240	20 7b 07	jsr $01077b			jsr 	StringCreateCopy 			; create a copy of it.
.011243	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011245	95 00		sta $00,x			sta 	EXSValueL+0,x
.011247	a8		tay				tay 								; address in Y
.011248	74 20		stz $20,x			stz 	EXSValueH+0,x
.01124a	da		phx				phx 								; save X
.01124b	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01124d	29 ff 00	and #$00ff			and 	#$00FF
.011250	f0 20		beq $011272			beq 	_FLOExit
.011252	aa		tax				tax 								; put in X
.011253					_FLOLoop:
.011253	c8		iny				iny 								; increment and load character
.011254	b9 00 00	lda $0000,y			lda 	$0000,y
.011257	29 ff 00	and #$00ff			and 	#$00FF
.01125a	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01125d	90 10		bcc $01126f			bcc 	_FLONoChange
.01125f	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011262	b0 0b		bcs $01126f			bcs 	_FLONoChange
.011264	18		clc				clc 								; shift case
.011265	69 20 00	adc #$0020			adc 	#32
.011268	e2 20		sep #$20			sep 	#$20 						; write back
.01126a	99 00 00	sta $0000,y			sta 	$0000,y
.01126d	c2 20		rep #$20			rep 	#$20
.01126f					_FLONoChange:
.01126f	ca		dex				dex 								; do X times
.011270	d0 e1		bne $011253			bne 	_FLOLoop
.011272					_FLOExit:
.011272	fa		plx				plx 								; restore X
.011273	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.011274					Command_Let:
.011274	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011276	48		pha				pha  								; save on stack for later.
.011277	20 9c 03	jsr $01039c			jsr 	VariableFind 				; find the variable
.01127a	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01127c	b0 0f		bcs $01128d			bcs 	_FLetFound 					; skip if found.
.01127e	68		pla				pla 								; get and push the first token again.
.01127f	48		pha				pha
.011280	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011283	d0 53		bne $0112d8			bne 	_FLError					; arrays, so this causes an error.
.011285	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.011288	20 46 04	jsr $010446			jsr 	VariableCreateNew 			; create it.
.01128b	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01128d					_FLetFound:
.01128d	68		pla				pla 								; get and save the first token.
.01128e	48		pha				pha
.01128f	a8		tay				tay 								; put it in Y
.011290	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011293	f0 07		beq $01129c			beq 	_FLetNotArray
.011295	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011297	20 13 04	jsr $010413			jsr 	VariableSubscript			; index calculation
.01129a	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01129c					_FLetNotArray:
.01129c	7a		ply				ply 								; get the first token into Y
.01129d	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01129f	48		pha				pha
.0112a0	5a		phy				phy 								; save the first token on the stack.
.0112a1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0112a4	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112a6	d0 23		bne $0112cb			bne 	_FLetMissingEquals
.0112a8	e6 06		inc $06				inc 	DCodePtr
.0112aa	e6 06		inc $06				inc 	DCodePtr
.0112ac	68		pla				pla 								; restore the first token.
.0112ad	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112b0	d0 0f		bne $0112c1			bne 	_FLetString 				; skip if string.
.0112b2	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get an integer
.0112b5	7a		ply				ply 								; get address in Y
.0112b6	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112b8	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112bb	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112bd	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112c0	60		rts				rts
.0112c1					_FLetString:
.0112c1	20 2e 03	jsr $01032e			jsr 	EvaluateString 				; get a string.
.0112c4	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112c6	7a		ply				ply 								; get address we are overwriting.
.0112c7	20 83 06	jsr $010683			jsr 	StringReassign 				; reassign that address
.0112ca	60		rts				rts
.0112cb					_FLetMissingEquals:
.0112cb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0112ce	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112d6	3d 00
.0112d8					_FLError:
.0112d8	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0112db	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112e3	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/procedure.asm

.0112eb					Command_PROC:
.0112eb	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112ee	18		clc				clc
.0112ef	65 02		adc $02				adc 	DBaseAddress
.0112f1	aa		tax				tax 								; X is used to track it
.0112f2					_FPROLoop:
.0112f2	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112f5	f0 56		beq $01134d			beq 	_FPROUnknown
.0112f7	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112fa	c9 48 3c	cmp #$3c48			cmp 	#defprocTokenID
.0112fd	f0 08		beq $011307			beq 	_FPROFoundDefProc
.0112ff					_FPRONext:
.0112ff	8a		txa				txa 								; follow the link.
.011300	18		clc				clc
.011301	7d 00 00	adc $0000,x			adc 	@w$0000,x
.011304	aa		tax				tax
.011305	80 eb		bra $0112f2			bra 	_FPROLoop
.011307					_FPROFoundDefProc:
.011307	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.01130a	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01130c	d0 f1		bne $0112ff			bne 	_FPRONext
.01130e	8a		txa				txa 								; DTemp1 points to the token.
.01130f	18		clc				clc
.011310	69 06 00	adc #$0006			adc 	#6
.011313	85 08		sta $08				sta 	DTemp1
.011315	a0 00 00	ldy #$0000			ldy 	#0
.011318					_FPROCompare:
.011318	b1 08		lda ($08),y			lda 	(DTemp1),y
.01131a	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01131c	d0 e1		bne $0112ff			bne 	_FPRONext 					; fails, different
.01131e	c8		iny				iny
.01131f	c8		iny				iny
.011320	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011323	d0 f3		bne $011318			bne 	_FPROCompare
.011325	98		tya				tya 								; this is the offset to the next element
.011326	18		clc				clc
.011327	65 08		adc $08				adc 	DTemp1
.011329	48		pha				pha 								; push the next command on the stack
.01132a	da		phx				phx 								; push the record address on the stack.
.01132b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01132d	98		tya				tya 								; work out the return address
.01132e	18		clc				clc
.01132f	65 06		adc $06				adc 	DCodePtr
.011331	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011333	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011335	95 04		sta $04,x			sta 	$04,x
.011337	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.01133a	95 06		sta $06,x			sta 	$06,x
.01133c	8a		txa				txa 								; advance stack by 6.
.01133d	18		clc				clc
.01133e	69 06 00	adc #$0006			adc 	#6
.011341	85 2a		sta $2a				sta 	DStack
.011343	7a		ply				ply 								; line record address
.011344	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011347	85 22		sta $22				sta 	DLineNumber
.011349	68		pla				pla 								; next command
.01134a	85 06		sta $06				sta 	DCodePtr
.01134c	60		rts				rts
.01134d					_FPROUnknown:
.01134d	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011350	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011358	70 72 6f 63 65 64 75 72 65 00
.011362					Command_ENDPROC:
.011362	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.011364	b5 00		lda $00,x			lda 	$00,x
.011366	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.011369	b0 2e		bcs $011399			bcs 	_FENPUnstack
.01136b	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.01136e	d0 11		bne $011381			bne 	_FENPFail
.011370	8a		txa				txa 								; unpick stack.
.011371	38		sec				sec
.011372	e9 06 00	sbc #$0006			sbc 	#6
.011375	85 2a		sta $2a				sta 	DStack
.011377	aa		tax				tax
.011378	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01137a	85 06		sta $06				sta 	DCodePtr
.01137c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01137e	85 22		sta $22				sta 	DLineNumber
.011380	60		rts				rts
.011381					_FENPFail:
.011381	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011384	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>01138c	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.011399					_FENPUnstack:
.011399	20 2d 14	jsr $01142d			jsr 	LocalRestore 				; restore off the stack.
.01139c	80 c4		bra $011362			bra 	Command_ENDPROC

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/local.asm

.01139e					Command_LOCAL:
.01139e	20 c8 13	jsr $0113c8			jsr 	LocalProcessVariable 		; make one variable 'local'
.0113a1	90 0e		bcc $0113b1			bcc 	_CLOFail
.0113a3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.0113a5	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113a8	d0 06		bne $0113b0			bne 	_CLOExit
.0113aa	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113ac	e6 06		inc $06				inc 	DCodePtr
.0113ae	80 ee		bra $01139e			bra 	Command_Local
.0113b0					_CLOExit:
.0113b0	60		rts				rts
.0113b1					_CLOFail:
.0113b1	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0113b4	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113bc	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113c8					LocalProcessVariable:
.0113c8	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113ca	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113cd	90 49		bcc $011418			bcc 	_LPVFail
.0113cf	29 00 10	and #$1000			and 	#IDArrayMask
.0113d2	d0 44		bne $011418			bne 	_LPVFail
.0113d4	b2 06		lda ($06)			lda 	(DCodePtr) 					; save the type on the stack.
.0113d6	48		pha				pha
.0113d7	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find the variable
.0113da	b0 06		bcs $0113e2			bcs 	_LPVFound 					; if found, A points to the data.
.0113dc	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.0113df	20 46 04	jsr $010446			jsr 	VariableCreateNew			; create it.
.0113e2					_LPVFound:
.0113e2	a8		tay				tay 								; address in Y
.0113e3	a6 2a		ldx $2a				ldx 	DStack 						; stack pointer in X
.0113e5	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.0113e7	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.0113ea	95 04		sta $04,x			sta 	$04,x
.0113ec	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.0113ef	95 06		sta $06,x			sta 	$06,x
.0113f1	a9 00 00	lda #$0000			lda 	#$0000 						; clear the old value
.0113f4	99 00 00	sta $0000,y			sta 	$0000,y
.0113f7	99 02 00	sta $0002,y			sta 	$0002,y
.0113fa	68		pla				pla
.0113fb	29 00 e0	and #$e000			and 	#$C000+IDTypeMask 			; $C000 if number, $E000 if string.
.0113fe	95 08		sta $08,x			sta 	$08,x						; save offset 6
.011400	c9 00 c0	cmp #$c000			cmp 	#$C000
.011403	f0 09		beq $01140e			beq 	_LPVNotString
.011405	a9 00 00	lda #$0000			lda 	#0
.011408	99 00 00	sta $0000,y			sta 	$0000,y 					; make it an empty string.
.01140b	99 02 00	sta $0002,y			sta 	$0002,y
.01140e					_LPVNotString:
.01140e	8a		txa				txa
.01140f	18		clc				clc
.011410	69 08 00	adc #$0008			adc 	#8
.011413	85 2a		sta $2a				sta 	DStack
.011415	38		sec				sec
.011416	98		tya				tya 								; return the data address.
.011417	60		rts				rts
.011418					_LPVFail:
.011418	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01141b	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>011423	6c 20 43 6f 6d 6d 61 6e 64 00
.01142d					LocalRestore:
.01142d	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.01142f	38		sec				sec
.011430	e9 08 00	sbc #$0008			sbc 	#8
.011433	85 2a		sta $2a				sta 	DStack
.011435	aa		tax				tax
.011436	b5 08		lda $08,x			lda 	$08,x 						; look at type.
.011438	c9 00 c0	cmp #$c000			cmp 	#$C000
.01143b	f0 09		beq $011446			beq 	_LRRestore					; skip if number.
.01143d	b5 02		lda $02,x			lda 	$02,x 						; release the string that was there if any.
.01143f	a8		tay				tay
.011440	b9 00 00	lda $0000,y			lda 	$0000,y
.011443	20 2b 07	jsr $01072b			jsr 	StringRelease
.011446					_LRRestore:
.011446	b5 02		lda $02,x			lda 	$02,x 						; restore a string.
.011448	a8		tay				tay
.011449	b5 04		lda $04,x			lda 	$04,x
.01144b	99 00 00	sta $0000,y			sta 	$0000,y
.01144e	b5 06		lda $06,x			lda 	$06,x
.011450	99 02 00	sta $0002,y			sta 	$0002,y
.011453	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.011454					Command_List:
.011454	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011457	20 41 07	jsr $010741		jsr 	StringTempAllocate
.01145a	85 30		sta $30			sta 	DListBuffer						; save buffer.
.01145c	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.01145e	64 2e		stz $2e			stz 	DIndent2
.011460	64 32		stz $32			stz 	DTemp4+0 						; low number
.011462	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011465	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011467	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011469	f0 3b		beq $0114a6		beq 	_CLIList
.01146b	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01146e	f0 36		beq $0114a6		beq 	_CLIList
.011470	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.011473	f0 13		beq $011488		beq 	_CLIComma
.011475	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; yes, first number
.011478	c0 00 00	cpy #$0000		cpy 	#0
.01147b	d0 21		bne $01149e		bne 	_CLIError
.01147d	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01147f	85 34		sta $34			sta 	DTemp4+2
.011481	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011483	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011486	d0 1e		bne $0114a6		bne 	_CLIList
.011488					_CLIComma:
.011488	20 ff 05	jsr $0105ff		jsr 	ExpectComma 					; skip comma
.01148b	b2 06		lda ($06)		lda 	(DCodePtr)
.01148d	f0 12		beq $0114a1		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.01148f	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011492	f0 0d		beq $0114a1		beq 	_CLIToEnd
.011494	20 28 03	jsr $010328		jsr 	EvaluateNextInteger 			; get end line.
.011497	85 34		sta $34			sta 	DTemp4+2
.011499	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.01149c	f0 08		beq $0114a6		beq 	_CLIList
.01149e					_CLIError:
.01149e	82 2b f1	brl $0105cc		brl 	SyntaxError
.0114a1					_CLIToEnd:
.0114a1	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0114a4	85 34		sta $34			sta 	DTemp4+2
.0114a6					_CLIList:
.0114a6	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114a9	18		clc			clc
.0114aa	65 02		adc $02			adc 	DBaseAddress
.0114ac	a8		tay			tay 									; put in Y
.0114ad					_CLINextLine:
.0114ad	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114b0	f0 29		beq $0114db		beq 	_CLIExit
.0114b2	20 43 16	jsr $011643		jsr 	ScanIndent  					; scan for formatting.
.0114b5	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114b8	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114ba	90 14		bcc $0114d0		bcc 	_CLIFollowLink
.0114bc	c5 34		cmp $34			cmp 	DTemp4+2
.0114be	f0 02		beq $0114c2		beq 	_CLIShowLine
.0114c0	b0 0e		bcs $0114d0		bcs 	_CLIFollowLink
.0114c2					_CLIShowLine:
.0114c2	a5 30		lda $30			lda 	DListBuffer
.0114c4	20 de 14	jsr $0114de		jsr 	Detokenise 						; detokenise it
.0114c7	5a		phy			phy
.0114c8	a8		tay			tay 									; print buffer out
.0114c9	20 56 06	jsr $010656		jsr 	PrintBasicString
.0114cc	20 b4 1d	jsr $011db4		jsr 	HWNewLine
.0114cf	7a		ply			ply 									; get address
.0114d0					_CLIFollowLink:
.0114d0	98		tya			tya 									; follow link
.0114d1	18		clc			clc
.0114d2	79 00 00	adc $0000,y		adc 	$0000,y
.0114d5	a8		tay			tay
.0114d6	20 d0 1d	jsr $011dd0		jsr 	HWCheckBreak 					; break key pressed.
.0114d9	f0 d2		beq $0114ad		beq 	_CLINextLine
.0114db					_CLIExit:
.0114db	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114dd	60		rts			rts
.0114de					Detokenise:
.0114de	48		pha			pha
.0114df	da		phx			phx
.0114e0	5a		phy			phy
.0114e1	85 18		sta $18			sta 	DStartTempString 				; set the temp Command pointers to this buffer
.0114e3	1a		inc a			inc 	a
.0114e4	85 1a		sta $1a			sta 	DCurrentTempString
.0114e6	64 1c		stz $1c			stz		DConstantShift
.0114e8	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114eb	92 18		sta ($18)		sta 	(DStartTempString)
.0114ed	5a		phy			phy 									; save Y
.0114ee	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0114f1	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0114f4	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114f7	20 ec 10	jsr $0110ec		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114fa	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0114fc	c5 2e		cmp $2e			cmp 	DIndent2
.0114fe	90 02		bcc $011502		bcc 	_DTKSmaller
.011500	a5 2e		lda $2e			lda 	DIndent2
.011502					_DTKSmaller:
.011502	0a		asl a			asl 	a
.011503	69 06 00	adc #$0006		adc 	#6
.011506	85 08		sta $08			sta 	DTemp1
.011508					_DTKPadLineNo:
.011508	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.01150b	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.01150e	b2 18		lda ($18)		lda 	(DStartTempString)
.011510	29 ff 00	and #$00ff		and 	#$00FF
.011513	c5 08		cmp $08			cmp 	DTemp1
.011515	d0 f1		bne $011508		bne 	_DTKPadLineNo
.011517	68		pla			pla 									; get pointer
.011518	18		clc			clc 									; point to start of line
.011519	69 04 00	adc #$0004		adc 	#4
.01151c	a8		tay			tay 									; put back in Y.
.01151d					_DTKMainLoop:
.01151d	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011520	d0 04		bne $011526		bne 	_DTKNotZero 					; if zero, return.
.011522	7a		ply			ply
.011523	fa		plx			plx
.011524	68		pla			pla
.011525	60		rts			rts
.011526					_DTKNotZero:
.011526	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011529	b0 1c		bcs $011547		bcs 	_DTKNotString
.01152b	5a		phy			phy										; save token address on stack.
.01152c	c8		iny			iny 									; skip first token
.01152d	c8		iny			iny
.01152e	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.011531	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.011534	98		tya			tya 									; copy the string out.
.011535	20 7b 07	jsr $01077b		jsr 	StringCreateCopy
.011538	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.01153b	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.01153e	68		pla			pla 									; get token, which is its own offset
.01153f	a8		tay			tay
.011540	18		clc			clc
.011541	79 00 00	adc $0000,y		adc 	$0000,y
.011544	a8		tay			tay
.011545	80 d6		bra $01151d		bra 	_DTKMainLoop
.011547					_DTKNotString:
.011547	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.01154a	b0 09		bcs $011555		bcs 	_DTKNotShift
.01154c	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01154f	85 1c		sta $1c			sta 	DConstantShift
.011551	c8		iny			iny 									; skip token.
.011552	c8		iny			iny
.011553	80 c8		bra $01151d		bra 	_DTKMainLoop
.011555					_DTKNotShift:
.011555	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011558	b0 07		bcs $011561		bcs 	_DTKNotKeyword
.01155a	c8		iny			iny 									; skip over token
.01155b	c8		iny			iny
.01155c	20 db 15	jsr $0115db		jsr 	_DTKDecodeKeyword 				; decode it.
.01155f	80 bc		bra $01151d		bra 	_DTKMainLoop
.011561					_DTKNotKeyword:
.011561	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011564	b0 18		bcs $01157e		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011566	5a		phy			phy 									; save pointer
.011567	38		sec			sec  									; shift it in the range 0-32767
.011568	e9 00 40	sbc #$4000		sbc 	#$4000
.01156b	0a		asl a			asl 	a 								; shift it left, losing bit 15
.01156c	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01156e	6a		ror a			ror 	a 								; rotate that into the constant value
.01156f	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011571	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011574	20 ec 10	jsr $0110ec		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011577	64 1c		stz $1c			stz 	DConstantShift
.011579	7a		ply			ply 									; restore pointer
.01157a	c8		iny			iny 									; skip token.
.01157b	c8		iny			iny
.01157c	80 9f		bra $01151d		bra 	_DTKMainLoop
.01157e					_DTKIdentifier:
.01157e	48		pha			pha 									; save token for typing at end
.01157f					_DTKILoop:
.01157f	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011582	20 ab 15	jsr $0115ab		jsr 	_DTKIDecodeToken 				; decode it.
.011585	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011588	c8		iny			iny 									; skip it
.011589	c8		iny			iny
.01158a	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01158d	d0 f0		bne $01157f		bne 	_DTKILoop
.01158f	68		pla			pla 									; add $( as required.
.011590	48		pha			pha 									; comes from the first token.
.011591	29 00 20	and #$2000		and 	#IDTypeMask
.011594	f0 06		beq $01159c		beq 	_DTKINotString
.011596	a9 24 00	lda #$0024		lda 	#"$"
.011599	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.01159c					_DTKINotString:
.01159c	68		pla			pla
.01159d	29 00 10	and #$1000		and 	#IDArrayMask
.0115a0	f0 06		beq $0115a8		beq 	_DTKINotArray
.0115a2	a9 28 00	lda #$0028		lda 	#"("
.0115a5	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.0115a8					_DTKINotArray:
.0115a8	82 72 ff	brl $01151d		brl 	_DTKMainLoop
.0115ab					_DTKIDecodeToken:
.0115ab	5a		phy			phy
.0115ac	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115af	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115b2					_DTKIDivide:
.0115b2	38		sec			sec
.0115b3	e9 2d 00	sbc #$002d		sbc 	#45
.0115b6	c8		iny			iny
.0115b7	b0 f9		bcs $0115b2		bcs 	_DTKIDivide
.0115b9	69 2d 00	adc #$002d		adc 	#45
.0115bc	20 c5 15	jsr $0115c5		jsr 	_DTKIOutA 						; output low.
.0115bf	98		tya			tya
.0115c0	20 c5 15	jsr $0115c5		jsr 	_DTKIOutA 						; output high
.0115c3	7a		ply			ply
.0115c4	60		rts			rts
.0115c5					_DTKIOutA:
.0115c5	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115c8	f0 10		beq $0115da		beq 	_DTKIOutExit
.0115ca	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115cd	90 04		bcc $0115d3		bcc 	_DTKIOutAlpha
.0115cf	38		sec			sec  									; adjust for 0-9
.0115d0	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115d3					_DTKIOutAlpha:
.0115d3	18		clc			clc										; adjust for A-Z
.0115d4	69 60 00	adc #$0060		adc 	#96
.0115d7	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.0115da					_DTKIOutExit:
.0115da	60		rts			rts
.0115db					_DTKDecodeKeyword:
.0115db	48		pha			pha
.0115dc	da		phx			phx
.0115dd	5a		phy			phy
.0115de	a8		tay			tay 									; save token ID in Y
.0115df	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115e2	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115e5	48		pha			pha 									; save this flag on a stack
.0115e6	5a		phy			phy 									; save the token ID
.0115e7	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115ea	d0 19		bne $011605		bne 	_DTKNotSpecial1
.0115ec	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115ee	88		dey			dey
.0115ef	b9 00 00	lda $0000,y		lda 	$0000,y
.0115f2	29 ff 00	and #$00ff		and 	#$00FF
.0115f5	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0115f8	f0 0b		beq $011605		beq 	_DTKNotSpecial1
.0115fa	c9 3a 00	cmp #$003a		cmp 	#":"
.0115fd	f0 06		beq $011605		beq 	_DTKNotSpecial1
.0115ff	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.011602	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.011605					_DTKNotSpecial1:
.011605	68		pla			pla
.011606	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011609	a8		tay			tay 									; into Y.
.01160a	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.01160d					_DTKDWorkThrough:
.01160d	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.01160e	f0 0f		beq $01161f		beq 	_DTKDFound
.011610	86 08		stx $08			stx 	DTemp1
.011612	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; read the type/skip byte.
.011616	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011619	18		clc			clc
.01161a	65 08		adc $08			adc 	DTemp1
.01161c	aa		tax			tax
.01161d	80 ee		bra $01160d		bra 	_DTKDWorkThrough
.01161f					_DTKDFound:
.01161f	bf 9e 00 01	lda $01009e,x		lda 	TokenText,x 					; get skip
.011623	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011626	3a		dec a			dec 	a
.011627	a8		tay			tay 									; put in Y
.011628					_DTKOut:
.011628	bf 9f 00 01	lda $01009f,x		lda 	TokenText+1,x 					; output it.
.01162c	29 ff 00	and #$00ff		and 	#$00FF
.01162f					_DTKNotLC:
.01162f	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.011632	e8		inx			inx
.011633	88		dey			dey
.011634	d0 f2		bne $011628		bne 	_DTKOut
.011636	68		pla			pla 									; trailing space.
.011637	d0 06		bne $01163f		bne 	_DTKNotSpecial2
.011639	a9 20 00	lda #$0020		lda 	#" "
.01163c	20 6d 07	jsr $01076d		jsr 	StringWriteCharacter
.01163f					_DTKNotSpecial2:
.01163f	7a		ply			ply
.011640	fa		plx			plx
.011641	68		pla			pla
.011642	60		rts			rts
.011643					ScanIndent:
.011643	48		pha			pha
.011644	5a		phy			phy
.011645	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011647	85 2e		sta $2e			sta 	DIndent2
.011649	98		tya			tya
.01164a	18		clc			clc 									; point to code.
.01164b	69 04 00	adc #$0004		adc 	#4
.01164e	a8		tay			tay
.01164f					_SILoop:
.01164f	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011652	f0 35		beq $011689		beq 	_SIExit
.011654	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011657	b0 08		bcs $011661		bcs 	_SICheckKeyword
.011659	98		tya			tya 									; skip string.
.01165a	18		clc			clc
.01165b	79 00 00	adc $0000,y		adc 	$0000,y
.01165e	a8		tay			tay
.01165f	80 ee		bra $01164f		bra 	_SILoop
.011661					_SICheckKeyword:
.011661	29 00 e0	and #$e000		and 	#$E000
.011664	c9 00 20	cmp #$2000		cmp 	#$2000
.011667	f0 04		beq $01166d		beq 	_SIFoundKeyword
.011669					_SIAdvance:
.011669	c8		iny			iny 									; if not, loop round.
.01166a	c8		iny			iny
.01166b	80 e2		bra $01164f		bra 	_SILoop
.01166d					_SIFoundKeyword:
.01166d	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011670	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011673	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011676	f0 0d		beq $011685		beq 	_SIKeyPlus
.011678	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.01167b	d0 ec		bne $011669		bne 	_SIAdvance
.01167d	c6 2c		dec $2c			dec 	DIndent
.01167f	10 e8		bpl $011669		bpl 	_SIAdvance
.011681	64 2c		stz $2c			stz 	DIndent
.011683	80 e4		bra $011669		bra 	_SIAdvance
.011685					_SIKeyPlus:
.011685	e6 2c		inc $2c			inc 	DIndent
.011687	80 e0		bra $011669		bra 	_SIAdvance
.011689					_SIExit:
.011689	7a		ply			ply
.01168a	68		pla			pla
.01168b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.01168c					Command_PRINT:
.01168c	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01168e	f0 33		beq $0116c3			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011690	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.011693	f0 2e		beq $0116c3			beq 	_FPRExitCR
.011695	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011698	f0 23		beq $0116bd			beq 	_FPRSkipLoop
.01169a	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.01169d	f0 1b		beq $0116ba			beq 	_FPRNewLine
.01169f	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0116a2	f0 11		beq $0116b5			beq 	_FPRTab
.0116a4					_FPRExpression:
.0116a4	20 01 02	jsr $010201			jsr 	Evaluate 					; evaluate a string or integer.
.0116a7	b0 06		bcs $0116af			bcs 	_FPRHaveString
.0116a9	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116ac	20 e4 10	jsr $0110e4			jsr 	ConvertToString
.0116af					_FPRHaveString:
.0116af	a8		tay				tay 								; print the basic String.
.0116b0	20 56 06	jsr $010656			jsr 	PrintBASICString
.0116b3	80 d7		bra $01168c			bra 	Command_Print 				; and go round again.
.0116b5					_FPRTab:
.0116b5	20 c9 1d	jsr $011dc9			jsr 	HWTab
.0116b8	80 03		bra $0116bd			bra 	_FPRSkipLoop
.0116ba					_FPRNewLine:
.0116ba	20 b4 1d	jsr $011db4			jsr 	HWNewLine
.0116bd					_FPRSkipLoop:
.0116bd	e6 06		inc $06				inc 	DCodePtr
.0116bf	e6 06		inc $06				inc 	DCodePtr
.0116c1	80 c9		bra $01168c			bra 	Command_Print
.0116c3					_FPRExitCR:
.0116c3	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116c5	88		dey				dey
.0116c6	88		dey				dey
.0116c7	b9 00 00	lda $0000,y			lda 	$0000,y
.0116ca	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116cd	f0 08		beq $0116d7			beq 	_FPRExit
.0116cf	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116d2	f0 03		beq $0116d7			beq 	_FPRExit
.0116d4	20 b4 1d	jsr $011db4			jsr 	HWNewLine 					; print a new line.
.0116d7					_FPRExit:
.0116d7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.0116d8					Command_IF:
.0116d8	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; check success.
.0116db	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116dd	05 08		ora $08				ora 	DTemp1
.0116df	a8		tay				tay 								; success flag in Y.
.0116e0	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116e2	c9 4b 3a	cmp #$3a4b			cmp 	#thenTokenID
.0116e5	d0 32		bne $011719			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116e7	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116e9	e6 06		inc $06				inc 	DCodePtr
.0116eb	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116ee	f0 0f		beq $0116ff			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0116f0	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0116f2	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116f5	90 21		bcc $011718			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116f7	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116fa	b0 1c		bcs $011718			bcs 	_FIFContinue
.0116fc	4c 7f 19	jmp $01197f			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0116ff					_FIFEndOfLine:
.0116ff	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.011701	f0 15		beq $011718			beq 	_FIFContinue 				; if done so, continue.
.011703	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011706	90 06		bcc $01170e			bcc 	_FIFStringConstant
.011708	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.01170a	e6 06		inc $06				inc 	DCodePtr
.01170c	80 f1		bra $0116ff			bra 	_FIFEndOfLine
.01170e					_FIFStringConstant:
.01170e	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.011711	18		clc				clc
.011712	65 06		adc $06				adc 	DCodePtr
.011714	85 06		sta $06				sta 	DCodePtr
.011716	80 e7		bra $0116ff			bra 	_FIFEndOfLine
.011718					_FIFContinue:
.011718	60		rts				rts
.011719					_FIFExtended:
.011719	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.01171b	e6 2a		inc $2a				inc 	DStack
.01171d	a9 46 3c	lda #$3c46			lda 	#ifTokenID
.011720	a6 2a		ldx $2a				ldx 	DStack
.011722	95 00		sta $00,x			sta 	$00,x
.011724	98		tya				tya 								; see if the test was passed.
.011725	f0 01		beq $011728			beq 	_FIXSkip 					; if zero then it has failed.
.011727	60		rts				rts 								; test passed, so continue executing
.011728					_FIXSkip:
.011728	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.01172b	a2 4c 3a	ldx #$3a4c			ldx 	#endifTokenID 				; at the same level.
.01172e	20 8e 17	jsr $01178e			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.011731	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011733	e6 06		inc $06				inc 	DCodePtr
.011735	c9 4c 3a	cmp #$3a4c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011738	d0 04		bne $01173e			bne 	_FIXNoThrow
.01173a	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01173c	c6 2a		dec $2a				dec 	DStack
.01173e					_FIXNoThrow:
.01173e	60		rts				rts
.01173f					Handler_ELSE:
.01173f	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011741	b5 00		lda $00,x			lda 	$00,x
.011743	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.011746	d0 12		bne $01175a			bne 	_HEBadStructure
.011748	a9 4c 3a	lda #$3a4c			lda 	#endifTokenID 				; only searching one token.
.01174b	a2 00 00	ldx #$0000			ldx 	#$0000
.01174e	20 8e 17	jsr $01178e			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011751	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011753	e6 06		inc $06				inc 	DCodePtr
.011755	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011757	c6 2a		dec $2a				dec 	DStack
.011759	60		rts				rts
.01175a					_HEBadStructure:
.01175a	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01175d	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011765	68 6f 75 74 20 49 66 00
.01176d					Handler_ENDIF:
.01176d	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01176f	b5 00		lda $00,x			lda 	$00,x
.011771	c9 46 3c	cmp #$3c46			cmp 	#ifTokenID
.011774	d0 05		bne $01177b			bne 	_HEIBadStructure
.011776	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011778	c6 2a		dec $2a				dec 	DStack
.01177a	60		rts				rts
.01177b					_HEIBadStructure:
.01177b	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01177e	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011786	68 6f 75 74 20 49 66 00
.01178e					ScanForwardLevel:
.01178e	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011790	86 0a		stx $0a				stx 	DTemp1+2
.011792	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011794	85 0c		sta $0c				sta 	DTemp2
.011796	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011799					_SFLLoop:
.011799	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01179c	d0 0d		bne $0117ab			bne 	_SFLNoCheck 				; we're in a substructure.
.01179e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0117a0	f0 09		beq $0117ab			beq 	_SFLNoCheck 				; don't check zero
.0117a2	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0117a4	f0 04		beq $0117aa			beq 	_SFLFound
.0117a6	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117a8	d0 01		bne $0117ab			bne 	_SFLNoCheck
.0117aa					_SFLFound:
.0117aa	60		rts				rts
.0117ab					_SFLNoCheck:
.0117ab	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117ad	f0 4f		beq $0117fe			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117af	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117b2	90 40		bcc $0117f4			bcc 	_SFLSkipString 				; then handle that.
.0117b4	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117b6	e6 06		inc $06				inc 	DCodePtr
.0117b8	a8		tay				tay 								; put token in Y temporarily.
.0117b9	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117bc	c9 00 20	cmp #$2000			cmp 	#$2000
.0117bf	d0 d8		bne $011799			bne 	_SFLLoop
.0117c1	98		tya				tya 								; get the token back.
.0117c2	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117c5	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117c8	f0 cf		beq $011799			beq 	_SFLLoop
.0117ca	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117cd	90 ca		bcc $011799			bcc 	_SFLLoop
.0117cf	e8		inx				inx 								; increment the level.
.0117d0	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117d3	f0 c4		beq $011799			beq 	_SFLLoop
.0117d5	ca		dex				dex 								; decrement the level
.0117d6	ca		dex				dex 								; one overdoes the previous inx.
.0117d7	10 c0		bpl $011799			bpl 	_SFLLoop 					; if gone -ve then error.
.0117d9					_SFLError:
.0117d9	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117db	85 22		sta $22				sta 	DLineNumber
.0117dd	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0117e0	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117e8	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0117f4					_SFLSkipString:
.0117f4	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117f7	18		clc				clc
.0117f8	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0117fa	85 06		sta $06				sta 	DCodePtr
.0117fc	80 9b		bra $011799			bra 	_SFLLoop 					; go round again.
.0117fe					_SFLNextLine:
.0117fe	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011800	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.011803	f0 d4		beq $0117d9			beq 	_SFLError 					; if zero, then there's no more code to search.
.011805	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011808	85 22		sta $22				sta 	DLineNumber
.01180a	18		clc				clc
.01180b	a5 06		lda $06				lda 	DCodePtr
.01180d	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011810	85 06		sta $06				sta 	DCodePtr
.011812	80 85		bra $011799			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.011814					Command_FOR:
.011814	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011816	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011819	d0 51		bne $01186c			bne		_CFOBad
.01181b	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find variable
.01181e	b0 06		bcs $011826			bcs 	_CFOExists
.011820	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011823	20 46 04	jsr $010446			jsr 	VariableCreateNew			; create it and skip token.
.011826					_CFOExists:
.011826	48		pha				pha 								; push variable address on stack
.011827	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.01182a	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.01182d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the start value
.011830	bb		tyx				tyx 								; put high value in X
.011831	7a		ply				ply 								; address of for variable in Y
.011832	99 00 00	sta $0000,y			sta 	$0000,y
.011835	8a		txa				txa
.011836	99 02 00	sta $0002,y			sta 	$0002,y
.011839	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.01183c	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.01183f	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011841	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011843	95 02		sta $02,x			sta 	$02,x
.011845	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011847	95 04		sta $04,x			sta 	$04,x
.011849	98		tya				tya 								; save variable address at +6
.01184a	95 06		sta $06,x			sta 	$06,x
.01184c	a9 47 3c	lda #$3c47			lda 	#forTokenID 				; save for token at +8
.01184f	95 08		sta $08,x			sta 	$08,x
.011851	8a		txa				txa 								; add 8 to stack position
.011852	18		clc				clc
.011853	69 08 00	adc #$0008			adc 	#8
.011856	85 2a		sta $2a				sta 	DStack
.011858	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.01185b	b2 06		lda ($06)			lda 	(DCodePtr)
.01185d	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.011860	d0 09		bne $01186b			bne 	_CFONoStep
.011862	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.011865	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.011868	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; and whatever the step is.
.01186b					_CFONoStep:
.01186b	60		rts				rts
.01186c					_CFOBad:
.01186c	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01186f	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011877	76 61 72 69 61 62 6c 65 00
.011880					Command_NEXT:
.011880	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011882	b5 00		lda $00,x			lda 	$00,x
.011884	c9 47 3c	cmp #$3c47			cmp 	#forTokenID 				; if not FOR then error
.011887	f0 14		beq $01189d			beq 	_CNXOk
.011889	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01188c	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011894	68 6f 75 74 20 46 6f 72 00
.01189d					_CNXOk:
.01189d	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01189f	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0118a2	90 22		bcc $0118c6			bcc 	_CNXNoVariable
.0118a4	20 9c 03	jsr $01039c			jsr 	VariableFind 				; get address of variable.
.0118a7	90 08		bcc $0118b1			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118a9	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118ab	ca		dex				dex
.0118ac	ca		dex				dex
.0118ad	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118af	f0 15		beq $0118c6			beq 	_CNXNoVariable 				; then continue
.0118b1					_CNXNextVar:
.0118b1	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0118b4	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118bc	20 76 61 72 69 61 62 6c 65 00
.0118c6					_CNXNoVariable:
.0118c6	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118c8	48		pha				pha
.0118c9	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118cb	38		sec				sec
.0118cc	e9 08 00	sbc #$0008			sbc 	#8
.0118cf	85 2a		sta $2a				sta 	DStack
.0118d1	aa		tax				tax 								; X points to the stack.
.0118d2	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118d4	85 06		sta $06				sta 	DCodePtr
.0118d6	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; this is the target constant
.0118d9	5a		phy				phy 								; save the target on the stack
.0118da	48		pha				pha
.0118db	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118de	85 08		sta $08				sta 	DTemp1
.0118e0	64 0a		stz $0a				stz 	DTemp1+2
.0118e2	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118e4	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118e7	d0 0b		bne $0118f4			bne 	_CNXNoStep
.0118e9	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0118eb	e6 06		inc $06				inc 	DCodePtr
.0118ed	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; work out the step.
.0118f0	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0118f2	84 0a		sty $0a				sty 	DTemp1+2
.0118f4					_CNXNoStep:
.0118f4	68		pla				pla 								; save the Target in DTemp2
.0118f5	85 0c		sta $0c				sta 	DTemp2
.0118f7	68		pla				pla
.0118f8	85 0e		sta $0e				sta 	DTemp2+2
.0118fa	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0118fc	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0118fe	a8		tay				tay
.0118ff	18		clc				clc
.011900	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.011903	65 08		adc $08				adc 	DTemp1
.011905	99 00 00	sta $0000,y			sta 	$0000,y
.011908	b9 02 00	lda $0002,y			lda 	$0002,y
.01190b	65 0a		adc $0a				adc 	DTemp1+2
.01190d	99 02 00	sta $0002,y			sta 	$0002,y
.011910	38		sec				sec
.011911	a5 0c		lda $0c				lda 	DTemp2
.011913	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011916	85 0c		sta $0c				sta 	DTemp2
.011918	a5 0e		lda $0e				lda 	DTemp2+2
.01191a	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01191d	85 0e		sta $0e				sta 	DTemp2+2
.01191f	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011921	f0 0a		beq $01192d			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011923	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011925	45 0a		eor $0a				eor 	DTemp1+2
.011927	10 04		bpl $01192d			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011929	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.01192a	85 06		sta $06				sta 	DCodePtr
.01192c	60		rts				rts
.01192d					_CNXLoopAgain:
.01192d	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01192e	18		clc				clc
.01192f	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011931	aa		tax				tax
.011932	69 08 00	adc #$0008			adc 	#8
.011935	85 2a		sta $2a				sta 	DStack
.011937	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011939	85 22		sta $22				sta 	DLineNumber
.01193b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.01193c					Command_ONGOTO:
.01193c	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; on what GOTO :)
.01193f	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011942	d0 25		bne $011969			bne 	_FOGoFail
.011944	c9 00 00	cmp #$0000			cmp 	#0
.011947	f0 20		beq $011969			beq 	_FOGoFail 					; we start with index = 1
.011949	48		pha				pha 								; save count on stack
.01194a	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.01194d	20 dc 05	jsr $0105dc			jsr 	ExpectToken
.011950	fa		plx				plx 								; put count in X.
.011951					_FOGoLoop:
.011951	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011953	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011956	90 73		bcc $0119cb			bcc 	FGOFail 					; if not, then we have an error.
.011958	c9 00 c0	cmp #$c000			cmp 	#$C000
.01195b	b0 6e		bcs $0119cb			bcs 	FGOFail
.01195d	ca		dex				dex 								; subtract one, if done, call GOTO code
.01195e	f0 1f		beq $01197f			beq 	Command_GOTO
.011960	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011962	e6 06		inc $06				inc 	DCodePtr
.011964	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; expect a comma
.011967	80 e8		bra $011951			bra 	_FOGoLoop 					; and loop round.
.011969					_FOGoFail:
.011969	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>01196c	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011974	47 6f 74 6f 20 76 61 6c 75 65 00
.01197f					Command_GOTO:
.01197f	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011981	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011984	90 45		bcc $0119cb			bcc 	FGOFail 					; we don't do calculate line numbers.
.011986	c9 00 c0	cmp #$c000			cmp 	#$C000
.011989	b0 40		bcs $0119cb			bcs 	FGOFail
.01198b	38		sec				sec 								; convert to 0-32767
.01198c	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01198f	aa		tax				tax
.011990	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011993	18		clc				clc
.011994	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011996	a8		tay				tay
.011997					_FGOSearch:
.011997	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01199a	f0 18		beq $0119b4			beq 	_FGOUnknown
.01199c	8a		txa				txa 								; does it match line number ?
.01199d	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0119a0	f0 08		beq $0119aa			beq 	_FGOFound 					; yes, then found.
.0119a2	98		tya				tya 								; no follow the link
.0119a3	18		clc				clc
.0119a4	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119a7	a8		tay				tay
.0119a8	80 ed		bra $011997			bra 	_FGOSearch 					; and keep looking
.0119aa					_FGOFound:
.0119aa	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119ac	98		tya				tya 								; Y + 4 is the code pointer.
.0119ad	18		clc				clc 								; (skipping link and line #)
.0119ae	69 04 00	adc #$0004			adc 	#4
.0119b1	85 06		sta $06				sta 	DCodePtr
.0119b3	60		rts				rts									; and continue
.0119b4					_FGOUnknown:
.0119b4	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0119b7	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119bf	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119cb					FGOFail:
.0119cb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>0119ce	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119d6	20 4e 75 6d 62 65 72 00
.0119de					Command_GOSUB:
.0119de	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119e0	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119e2	18		clc				clc
.0119e3	69 02 00	adc #$0002			adc 	#2
.0119e6	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119e8	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119ea	95 04		sta $04,x			sta 	$04,x
.0119ec	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119ef	95 06		sta $06,x			sta 	$06,x
.0119f1	8a		txa				txa 								; advance stack by 6.
.0119f2	18		clc				clc
.0119f3	69 06 00	adc #$0006			adc 	#6
.0119f6	85 2a		sta $2a				sta 	DStack
.0119f8	80 85		bra $01197f			bra 	Command_GOTO 				; and do a GOTO.
.0119fa					Command_RETURN:
.0119fa	a6 2a		ldx $2a				ldx 	DStack
.0119fc	b5 00		lda $00,x			lda 	$00,x
.0119fe	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011a01	d0 11		bne $011a14			bne 	_FRetFail
.011a03	8a		txa				txa 								; unpick stack.
.011a04	38		sec				sec
.011a05	e9 06 00	sbc #$0006			sbc 	#6
.011a08	85 2a		sta $2a				sta 	DStack
.011a0a	aa		tax				tax
.011a0b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a0d	85 06		sta $06				sta 	DCodePtr
.011a0f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a11	85 22		sta $22				sta 	DLineNumber
.011a13	60		rts				rts
.011a14					_FRetFail:
.011a14	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011a17	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a1f	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011a2c					Command_REPEAT:
.011a2c	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a2e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a30	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a32	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a34	95 04		sta $04,x			sta 	$04,x
.011a36	a9 44 3c	lda #$3c44			lda 	#repeatTokenID 				; save repeat token at +6
.011a39	95 06		sta $06,x			sta 	$06,x
.011a3b	8a		txa				txa 								; advance stack by 6.
.011a3c	18		clc				clc
.011a3d	69 06 00	adc #$0006			adc 	#6
.011a40	85 2a		sta $2a				sta 	DStack
.011a42	60		rts				rts
.011a43					Command_UNTIL:
.011a43	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a45	b5 00		lda $00,x			lda 	$00,x
.011a47	c9 44 3c	cmp #$3c44			cmp 	#repeatTokenID
.011a4a	d0 26		bne $011a72			bne 	_FUNFail
.011a4c	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; .... until what.
.011a4f	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a52	d0 15		bne $011a69			bne 	_FUNExit
.011a54	c9 00 00	cmp #$0000			cmp 	#0
.011a57	d0 10		bne $011a69			bne 	_FUNExit
.011a59	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a5b	38		sec				sec
.011a5c	e9 06 00	sbc #$0006			sbc 	#6
.011a5f	aa		tax				tax
.011a60	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a62	85 06		sta $06				sta 	DCodePtr
.011a64	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a66	85 22		sta $22				sta 	DLineNumber
.011a68	60		rts				rts
.011a69					_FUNExit:
.011a69	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a6b	38		sec				sec
.011a6c	e9 06 00	sbc #$0006			sbc 	#6
.011a6f	85 2a		sta $2a				sta 	DStack
.011a71	60		rts				rts
.011a72					_FUNFail:
.011a72	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011a75	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a7d	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011a8a					Command_WHILE:
.011a8a	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a8c	48		pha				pha 								; save on stack
.011a8d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; while what.
.011a90	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a93	d0 14		bne $011aa9			bne 	_FWHExecute
.011a95	c9 00 00	cmp #$0000			cmp 	#0
.011a98	d0 0f		bne $011aa9			bne 	_FWHExecute
.011a9a	68		pla				pla 								; throw away current instruction
.011a9b	a9 49 3a	lda #$3a49			lda 	#wendTokenID 				; skip to WEND
.011a9e	a2 00 00	ldx #$0000			ldx 	#0
.011aa1	20 8e 17	jsr $01178e			jsr 	ScanForwardLevel 			; scan forward checking structures
.011aa4	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011aa6	e6 06		inc $06				inc 	DCodePtr
.011aa8	60		rts				rts
.011aa9					_FWHExecute:
.011aa9	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011aab	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011aac	3a		dec a				dec 	a
.011aad	3a		dec a				dec 	a
.011aae	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011ab0	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011ab2	95 04		sta $04,x			sta 	$04,x
.011ab4	a9 45 3c	lda #$3c45			lda 	#whileTokenID 				; save while token at +6
.011ab7	95 06		sta $06,x			sta 	$06,x
.011ab9	8a		txa				txa 								; advance stack by 6.
.011aba	18		clc				clc
.011abb	69 06 00	adc #$0006			adc 	#6
.011abe	85 2a		sta $2a				sta 	DStack
.011ac0	60		rts				rts
.011ac1					Command_WEND:
.011ac1	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011ac3	b5 00		lda $00,x			lda 	$00,x
.011ac5	c9 45 3c	cmp #$3c45			cmp 	#whileTokenID
.011ac8	d0 11		bne $011adb			bne 	_FWEFail
.011aca	8a		txa				txa 								; unpick stack and always loop back.
.011acb	38		sec				sec 								; we do the check at the top.
.011acc	e9 06 00	sbc #$0006			sbc 	#6
.011acf	85 2a		sta $2a				sta 	DStack
.011ad1	aa		tax				tax
.011ad2	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011ad4	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011ad6	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011ad8	85 22		sta $22				sta 	DLineNumber
.011ada	60		rts				rts
.011adb					_FWEFail:
.011adb	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011ade	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011ae6	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011af1					Command_END:
.011af1	4c b2 1e	jmp $011eb2			jmp 	WarmStart
.011af4					Command_RUN:
.011af4	20 7f 1b	jsr $011b7f			jsr 	Command_CLEAR 				; clear all variables.
.011af7	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011af9	18		clc				clc
.011afa	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011afd	80 0c		bra $011b0b			bra 	FRun_NextLineNumber
.011aff					RUNExecuteTokenBuffer:
.011aff	64 22		stz $22				stz 	DLineNumber					; zero line number
.011b01	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011b04	18		clc				clc
.011b05	65 02		adc $02				adc 	DBaseAddress
.011b07	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b09	80 12		bra $011b1d			bra 	FRun_NextInstruction
.011b0b					FRun_NextLineNumber:
.011b0b	a8		tay				tay 								; put in Y
.011b0c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b0f	f0 e0		beq $011af1			beq 	Command_END 				; if zero, off the end of the program, so END the program
.011b11	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b14	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b16	98		tya				tya 								; get address back
.011b17	18		clc				clc 								; skip over the link/line number
.011b18	69 04 00	adc #$0004			adc 	#4
.011b1b	85 06		sta $06				sta 	DCodePtr
.011b1d					FRun_NextInstruction:
.011b1d	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b1f	20 d0 1d	jsr $011dd0			jsr 	HWCheckBreak 				; break key pressed.
.011b22	d0 40		bne $011b64			bne 	_FRun_Break
.011b24	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b26	f0 32		beq $011b5a			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b28	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b2b	f0 18		beq $011b45			beq 	_FRun_Colon
.011b2d	a8		tay				tay 								; save in Y
.011b2e	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b31	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b34	d0 15		bne $011b4b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b36	98		tya				tya 								; get token back
.011b37	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b3a	0a		asl a				asl 	a 							; double it into X
.011b3b	aa		tax				tax
.011b3c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b3e	e6 06		inc $06				inc 	DCodePtr
.011b40	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b43	80 d8		bra $011b1d			bra 	FRun_NextInstruction 		; do the following instruction.
.011b45					_FRun_Colon:
.011b45	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b47	e6 06		inc $06				inc 	DCodePtr
.011b49	80 d2		bra $011b1d			bra 	FRun_NextInstruction 		; do the following instruction.
.011b4b					_FRun_TryLET:
.011b4b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b4d	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b50	90 05		bcc $011b57			bcc		_FRunSyntax 				; no, must be syntax.
.011b52	20 74 12	jsr $011274			jsr 	Command_LET 				; try as a LET.
.011b55	80 c6		bra $011b1d			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b57					_FRunSyntax:
.011b57	82 72 ea	brl $0105cc			brl 	SyntaxError
.011b5a					_FRun_EndInstruction:
.011b5a	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b5c	f0 0f		beq $011b6d			beq 	_FRun_WarmStart
.011b5e	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b60	1a		inc a				inc 	a 							; go to link for next line
.011b61	1a		inc a				inc 	a
.011b62	80 a7		bra $011b0b			bra 	FRun_NextLineNumber
.011b64					_FRun_Break:
.011b64	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011b67	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b6d					_FRun_WarmStart:
.011b6d	82 42 03	brl $011eb2			brl 	WarmStart
.011b70					Command_NEW:
.011b70	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b73	18		clc				clc
.011b74	65 02		adc $02				adc 	DBaseAddress
.011b76	a8		tay				tay
.011b77	a9 00 00	lda #$0000			lda 	#$0000
.011b7a	99 00 00	sta $0000,y			sta 	$0000,y
.011b7d	80 00		bra $011b7f			bra 	Command_Clear
.011b7f					Command_CLEAR:
.011b7f	20 8b 1b	jsr $011b8b			jsr 	ClearVariablesPointersAndStacks
.011b82	60		rts				rts
.011b83					Command_STOP:
.011b83	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011b86	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b8b					ClearVariablesPointersAndStacks:
.011b8b	a9 80 00	lda #$0080			lda 	#BASStack
.011b8e	85 2a		sta $2a				sta 	DStack
.011b90	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b92	a0 0c 00	ldy #$000c			ldy 	#Block_NullString
.011b95	a9 00 00	lda #$0000			lda 	#$0000
.011b98	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b9a	20 c6 1b	jsr $011bc6			jsr 	FindCodeEnd 				; find where the program ends.
.011b9d	a8		tay				tay 								; Y points to it.
.011b9e	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011ba1	99 02 00	sta $0002,y			sta 	$0002,y
.011ba4	99 04 00	sta $0004,y			sta 	$0004,y
.011ba7	98		tya				tya 								; start of working memory up
.011ba8	18		clc				clc
.011ba9	69 06 00	adc #$0006			adc 	#6
.011bac	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011baf	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bb1	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bb4					_FCLoop:
.011bb4	a9 00 00	lda #$0000			lda 	#$0000
.011bb7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bb9	c8		iny				iny
.011bba	c8		iny				iny
.011bbb	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bbe	d0 f4		bne $011bb4			bne 	_FCLoop
.011bc0	64 16		stz $16				stz 	DTempStringPointer
.011bc2	20 70 06	jsr $010670			jsr 	StringResetPermanent
.011bc5	60		rts				rts
.011bc6					FindCodeEnd:
.011bc6	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011bc9	18		clc				clc
.011bca	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011bcc	a8		tay				tay
.011bcd					_FCELoop:
.011bcd	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011bd0	f0 08		beq $011bda			beq 	_FCEExit
.011bd2	98		tya				tya 								; add offset
.011bd3	18		clc				clc
.011bd4	79 00 00	adc $0000,y			adc 	$0000,y
.011bd7	a8		tay				tay
.011bd8	80 f3		bra $011bcd			bra 	_FCELoop
.011bda					_FCEExit:
.011bda	98		tya				tya 								; return in A
.011bdb	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011bdc					Function_Dim:
.011bdc	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bde	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011be1	f0 48		beq $011c2b			beq		_FDIMNotArray 				; no, error.
.011be3	20 9c 03	jsr $01039c			jsr 	VariableFind 				; try to find it.
.011be6	b0 4e		bcs $011c36			bcs 	_FDIMExists 				; if it does, that's an error.
.011be8	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011bea	48		pha				pha
.011beb	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011bed	48		pha				pha
.011bee					_FDIMSkip:
.011bee	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token, so we can evaluate the array size.
.011bf0	e6 06		inc $06				inc 	DCodePtr
.011bf2	e6 06		inc $06				inc 	DCodePtr
.011bf4	29 00 08	and #$0800			and 	#IDContMask
.011bf7	d0 f5		bne $011bee			bne 	_FDIMSkip
.011bf9	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; evaluate the size
.011bfc	20 f6 05	jsr $0105f6			jsr 	ExpectRightBracket 			; check the ) following.
.011bff	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011c02	d0 48		bne $011c4c			bne 	_FDIMSize
.011c04	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c07	f0 43		beq $011c4c			beq 	_FDIMSize
.011c09	7a		ply				ply 								; restore HashTablePtr for the array variable.
.011c0a	84 20		sty $20				sty 	DHashTablePtr
.011c0c	7a		ply				ply 								; restore DCodePtr to point to the identifier.
.011c0d	84 06		sty $06				sty 	DCodePtr
.011c0f	20 46 04	jsr $010446			jsr 	VariableCreateNew 			; create the variable.
.011c12					_FDIMFindRight:
.011c12	b2 06		lda ($06)			lda 	(DCodePtr)
.011c14	e6 06		inc $06				inc 	DCodePtr
.011c16	e6 06		inc $06				inc 	DCodePtr
.011c18	c9 28 32	cmp #$3228			cmp 	#rParenTokenID
.011c1b	d0 f5		bne $011c12			bne 	_FDIMFindRight
.011c1d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c1f	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c22	d0 06		bne $011c2a			bne 	_FDIMExit
.011c24	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c26	e6 06		inc $06				inc 	DCodePtr
.011c28	80 b2		bra $011bdc			bra 	Function_DIM 				; and do another
.011c2a					_FDIMExit:
.011c2a	60		rts				rts
.011c2b					_FDIMNotArray:
.011c2b	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011c2e	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c36					_FDIMExists:
.011c36	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011c39	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c41	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c4c					_FDIMSize:
.011c4c	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011c4f	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c57	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011c5d					Command_POKE:
.011c5d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c60	48		pha				pha	 								; save on stack
.011c61	5a		phy				phy
.011c62	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; comma seperator.
.011c65	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c68	fa		plx				plx 								; pull address and store in DTemp1
.011c69	86 0a		stx $0a				stx 	DTemp1+2
.011c6b	fa		plx				plx
.011c6c	86 08		stx $08				stx 	DTemp1+0
.011c6e	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c70	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c72	c2 20		rep #$20			rep 	#$20 						; word mode
.011c74	60		rts				rts
.011c75					Command_DOKE:
.011c75	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c78	48		pha				pha	 								; save on stack
.011c79	5a		phy				phy
.011c7a	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; comma seperator.
.011c7d	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c80	fa		plx				plx 								; pull address and store in DTemp1
.011c81	86 0a		stx $0a				stx 	DTemp1+2
.011c83	fa		plx				plx
.011c84	86 08		stx $08				stx 	DTemp1+0
.011c86	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c88	60		rts				rts
.011c89					Command_LOKE:
.011c89	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; address
.011c8c	48		pha				pha	 								; save on stack
.011c8d	5a		phy				phy
.011c8e	20 ff 05	jsr $0105ff			jsr 	ExpectComma 				; comma seperator.
.011c91	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; data
.011c94	fa		plx				plx 								; pull address and store in DTemp1
.011c95	86 0a		stx $0a				stx 	DTemp1+2
.011c97	fa		plx				plx
.011c98	86 08		stx $08				stx 	DTemp1+0
.011c9a	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c9c	98		tya				tya
.011c9d	a0 02 00	ldy #$0002			ldy 	#2
.011ca0	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011ca2	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.011ca3					Command_ASSERT:
.011ca3	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; something that returns an integer.
.011ca6	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011ca8	05 08		ora $08				ora 	Dtemp1
.011caa	f0 01		beq $011cad			beq 	_FAssFail
.011cac	60		rts				rts
.011cad					_FAssFail:
.011cad	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011cb0	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011cb8	61 69 6c 65 64 00
.011cbe					Command_CLS:
.011cbe	20 4a 1d	jsr $011d4a			jsr 	HWClearScreen
.011cc1	60		rts				rts
.011cc2					Command_REM:
.011cc2	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cc4	f0 0f		beq $011cd5			beq 	_FRemExit 					; no comment present
.011cc6	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cc9	f0 0a		beq $011cd5			beq 	_FRemExit 					; no comment present
.011ccb	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011cce	b0 06		bcs $011cd6			bcs 	_FRemSyntax
.011cd0	18		clc				clc 								; add to DCodePtr
.011cd1	65 06		adc $06				adc 	DCodePtr
.011cd3	85 06		sta $06				sta 	DCodePtr
.011cd5					_FRemExit:
.011cd5	60		rts				rts
.011cd6					_FRemSyntax:
.011cd6	82 f3 e8	brl $0105cc			brl 	SyntaxError
.011cd9					Command_LINK:
.011cd9	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; call address same page.
.011cdc	85 08		sta $08				sta 	DTemp1 						; target address
.011cde	84 0a		sty $0a				sty 	DTemp1+2
.011ce0	7b		tdc				tda 								; work out what the actual address is
.011ce1	18		clc				clc
.011ce2	69 08 00	adc #$0008			adc 	#DTemp1
.011ce5	8f 1a 1d 01	sta $011d1a			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011ce9	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011ceb	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011cee	48		pha				pha
.011cef	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011cf2	aa		tax				tax
.011cf3	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011cf6	a8		tay				tay
.011cf7	68		pla				pla
.011cf8	22 19 1d 01	jsl $011d19			jsl 	_FLIExecuteIt
.011cfc	5a		phy				phy 								; save Y
.011cfd	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cff	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d02	8a		txa				txa
.011d03	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d06	68		pla				pla
.011d07	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d0a	c8		iny				iny 								; point to their high bytes and clear them
.011d0b	c8		iny				iny
.011d0c	a9 00 00	lda #$0000			lda 	#0
.011d0f	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d12	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d15	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d18	60		rts				rts
.011d19					_FLIExecuteIt:
.011d19	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.
.011d1c					Command_VDU:
.011d1c	20 0f 03	jsr $01030f			jsr 	EvaluateInteger 			; get integer to YA.
.011d1f	a8		tay				tay 								; put into Y
.011d20	29 ff 00	and #$00ff			and 	#$00FF 						; mask out LSB
.011d23	20 63 1d	jsr $011d63			jsr 	HWPrintChar 				; print the LSB.
.011d26	b2 06		lda ($06)			lda 	(DCodePtr)
.011d28	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if , goto next
.011d2b	f0 0e		beq $011d3b			beq 	_CVDUNext
.011d2d	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; if ; print MSB and goto next
.011d30	f0 01		beq $011d33			beq 	_CVDUHighByte
.011d32					_CVDUExit:
.011d32	60		rts				rts
.011d33					_CVDUHighByte:
.011d33	98		tya				tya 								; get back.
.011d34	eb		xba				xba 								; byte swap
.011d35	29 ff 00	and #$00ff			and 	#$00FF 						; mask and print
.011d38	20 63 1d	jsr $011d63			jsr 	HWPrintChar
.011d3b					_CVDUNext:
.011d3b	e6 06		inc $06				inc 	DCodePtr 					; skip , ;
.011d3d	e6 06		inc $06				inc 	DCodePtr
.011d3f	b2 06		lda ($06)			lda 	(DCodePtr)					; continue ?
.011d41	f0 ef		beq $011d32			beq		_CVDUExit
.011d43	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011d46	f0 ea		beq $011d32			beq 	_CVDUExit
.011d48	80 d2		bra $011d1c			bra 	Command_VDU

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d4a					HWClearScreen:
.011d4a	48		pha				pha
.011d4b	da		phx				phx
.011d4c	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d4f	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d52	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d56	ca		dex				dex
.011d57	10 f6		bpl $011d4f			bpl 	_CS0
.011d59	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d5c	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d60	fa		plx				plx
.011d61	68		pla				pla
.011d62	60		rts				rts
.011d63					HWPrintChar:
.011d63	48		pha				pha
.011d64	da		phx				phx
.011d65	5a		phy				phy
.011d66	48		pha				pha 								; cursor position -> X
.011d67	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d6b	aa		tax				tax
.011d6c	68		pla				pla
.011d6d	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d70	f0 08		beq $011d7a			beq 	_HWPCNoWrite
.011d72	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d74	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d78	c2 20		rep #$20			rep 	#$20
.011d7a					_HWPCNoWrite:
.011d7a	e8		inx				inx 								; bump cursor position.
.011d7b	8a		txa				txa
.011d7c	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d80	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d83	d0 2b		bne $011db0			bne 	_HWNotEnd
.011d85	38		sec				sec 	 							; back up one line
.011d86	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d89	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d8d	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d90					_HWScrollUp:
.011d90	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d94	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d98	e8		inx				inx
.011d99	e8		inx				inx
.011d9a	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d9d	d0 f1		bne $011d90			bne 	_HWScrollUp
.011d9f	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011da2					_HWBlank:
.011da2	a9 20 20	lda #$2020			lda 	#$2020
.011da5	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011da9	e8		inx				inx
.011daa	e8		inx				inx
.011dab	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011dae	d0 f2		bne $011da2			bne 	_HWBlank
.011db0					_HWNotEnd:
.011db0	7a		ply				ply
.011db1	fa		plx				plx
.011db2	68		pla				pla
.011db3	60		rts				rts
.011db4					HWNewLine:
.011db4	48		pha				pha
.011db5	da		phx				phx
.011db6	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011db9					HWMoveCursor:
.011db9	a9 ff ff	lda #$ffff			lda 	#-1
.011dbc	20 63 1d	jsr $011d63			jsr 	HWPrintChar
.011dbf	8a		txa				txa
.011dc0	2f 20 80 0f	and $0f8020			and 	HWCursor
.011dc4	d0 f3		bne $011db9			bne 	HWMoveCursor
.011dc6	fa		plx				plx
.011dc7	68		pla				pla
.011dc8	60		rts				rts
.011dc9	48		pha		HWTab:	pha
.011dca	da		phx				phx
.011dcb	a2 07 00	ldx #$0007			ldx 	#7
.011dce	80 e9		bra $011db9			bra 	HWMoveCursor
.011dd0					HWCheckBreak:
.011dd0	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011dd4	60		rts				rts
.011dd5					HWInkey:
.011dd5	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011dd9	60		rts				rts
.011dda					HWInputLine:
.011dda	20 d5 1d	jsr $011dd5			jsr 	HWInkey 					; get a keystroke.
.011ddd	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011de1	f0 f7		beq $011dda			beq 	HWInputLine
.011de3					_HWILWait:
.011de3	20 d5 1d	jsr $011dd5			jsr 	HWInkey
.011de6	c9 00 00	cmp #$0000			cmp		#0
.011de9	f0 f8		beq $011de3			beq 	_HWILWait
.011deb	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011def	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011df2	90 2f		bcc $011e23			bcc 	_HWILControl
.011df4	20 63 1d	jsr $011d63			jsr 	HWPrintChar 				; print out.
.011df7	80 e1		bra $011dda			bra 	HWInputLine 				; loop back.
.011df9					_HWILBackSpace:
.011df9	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011dfd	f0 db		beq $011dda			beq 	HWInputLine
.011dff	aa		tax				tax
.011e00	ca		dex				dex
.011e01	a9 20 00	lda #$0020			lda 	#" "
.011e04	e2 20		sep #$20			sep 	#$20
.011e06	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011e0a	c2 20		rep #$20			rep 	#$20
.011e0c	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e0f					_HWILMove:
.011e0f	8a		txa				txa
.011e10	18		clc				clc
.011e11	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011e15	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011e18	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011e1c	80 bc		bra $011dda			bra 	HWInputLine
.011e1e					_HWILClear:
.011e1e	20 4a 1d	jsr $011d4a			jsr 	HWClearScreen
.011e21	80 b7		bra $011dda			bra 	HWInputLine
.011e23					_HWILControl:
.011e23	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011e26	f0 60		beq $011e88			beq 	_HWILTab
.011e28	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011e2b	f0 cc		beq $011df9			beq 	_HWILBackSpace
.011e2d	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011e30	c9 17 00	cmp #$0017			cmp 	#23
.011e33	f0 da		beq $011e0f			beq 	_HWILMove
.011e35	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e38	c9 13 00	cmp #$0013			cmp 	#19
.011e3b	f0 d2		beq $011e0f			beq 	_HWILMove
.011e3d	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e40	c9 01 00	cmp #$0001			cmp 	#1
.011e43	f0 ca		beq $011e0f			beq 	_HWILMove
.011e45	a2 01 00	ldx #$0001			ldx 	#1
.011e48	c9 04 00	cmp #$0004			cmp 	#4
.011e4b	f0 c2		beq $011e0f			beq 	_HWILMove
.011e4d	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e50	f0 cc		beq $011e1e			beq 	_HWILClear
.011e52	c9 0d 00	cmp #$000d			cmp 	#13
.011e55	d0 83		bne $011dda			bne 	HWInputLine
.011e57	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e5b	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e5e	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e60	a9 0f 00	lda #$000f			lda 	#$000F
.011e63	85 0a		sta $0a				sta 	DTemp1+2
.011e65	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e68					_HWILCopy:
.011e68	bb		tyx				tyx
.011e69	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e6b	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e6f	c8		iny				iny
.011e70	c8		iny				iny
.011e71	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e74	d0 f2		bne $011e68			bne 	_HWILCopy
.011e76	a9 00 00	lda #$0000			lda 	#0
.011e79	bb		tyx				tyx
.011e7a	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e7e	20 b4 1d	jsr $011db4			jsr 	HWNewLine 					; next line.
.011e81	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e84	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e87	60		rts				rts
.011e88					_HWILTab:
.011e88	20 c9 1d	jsr $011dc9			jsr 	HWTab
.011e8b	82 4c ff	brl $011dda			brl 	HWInputLine

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e8e					SwitchBasicInstance:
.011e8e	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e90	20 4a 1d	jsr $011d4a			jsr 	HWClearScreen 						; clear screen
.011e93	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e96	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e98	86 02		stx $02				stx		DBaseAddress
.011e9a	84 04		sty $04				sty 	DHighAddress
.011e9c	ba		tsx				tsx 										; save the current SP.
.011e9d	86 3a		stx $3a				stx 	DStack65816
.011e9f	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011ea0	48		pha				pha 										; then copy it into B.
.011ea1	ab		plb				plb
.011ea2	ab		plb				plb
.011ea3	20 8b 1b	jsr $011b8b			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ea6	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011ea9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011eab	f0 05		beq $011eb2			beq 	WarmStart
.011ead	3a		dec a				dec 	a 									; decrement zero.
.011eae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011eb0	80 18		bra $011eca			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011eb2					WarmStart:
.011eb2	a2 18 1f	ldx #$1f18			ldx 	#BasicPrompt & $FFFF
.011eb5	20 38 06	jsr $010638			jsr 	PrintROMMessage
.011eb8					NextCommand:
.011eb8	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011eba	9a		txs				txs
.011ebb	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011ebd	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011ec0	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011ec2	d0 52		bne $011f16			bne 	ExitEmulator
.011ec4	20 da 1d	jsr $011dda			jsr 	HWInputLine 						; read line to YA.
.011ec7	20 9c 07	jsr $01079c			jsr 	Tokenise 							; tokenise it.
.011eca					ExecuteTokenBuffer:
.011eca	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011ecd	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011ecf	f0 e7		beq $011eb8			beq 	NextCommand 						; nothing.
.011ed1	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011ed4	90 27		bcc $011efd			bcc 	_ETBCommand
.011ed6	c9 00 c0	cmp #$c000			cmp 	#$C000
.011ed9	b0 22		bcs $011efd			bcs 	_ETBCommand
.011edb	38		sec				sec
.011edc	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011edf	f0 1f		beq $011f00			beq 	_ETBError
.011ee1	48		pha				pha
.011ee2	20 d1 04	jsr $0104d1			jsr 	LineDelete 							; delete the line, if it exists.
.011ee5	20 8b 1b	jsr $011b8b			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ee8	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011eeb	18		clc				clc
.011eec	65 02		adc $02				adc 	DBaseAddress
.011eee	a8		tay				tay 										; Y contains the code.
.011eef	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ef2	f0 c4		beq $011eb8			beq 	NextCommand 						; no, next command.
.011ef4	68		pla				pla 										; line number in A, code in Y.
.011ef5	20 0c 05	jsr $01050c			jsr 	LineInsert 							; insert the line
.011ef8	20 8b 1b	jsr $011b8b			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011efb	80 bb		bra $011eb8			bra 	NextCommand
.011efd					_ETBCommand:
.011efd	4c ff 1a	jmp $011aff			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011f00					_ETBError:
.011f00	20 90 05	jsr $010590			jsr 	ErrorHandler 						; call error routine
>011f03	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011f0b	61 76 65 20 6c 69 6e 65 20 30 00
.011f16					ExitEmulator:
.011f16	02 00		cop #$00			cop 	#0
.011f18					BasicPrompt:
>011f18	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 9c 07	jsr $01079c			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	28 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 29 times (464 bytes)...
>0241f8	00 00 00 00 00 00 00 00 0c 00 14 00 18 c0 06 22
>024208	00 40 00 00 08 00 32 00 44 3c 00 00 16 00 64 00
>024218	46 3c 27 32 18 c0 01 20 01 40 28 32 06 22 00 40
>024228	00 00 16 00 6e 00 35 3e 18 c0 24 32 08 00 04 45
>024238	76 65 6e 00 24 32 00 00 0e 00 70 00 46 3c 18 c0
>024248	05 22 05 40 00 00 0e 00 76 00 35 3e 06 00 02 3e
>024258	35 00 00 00 08 00 77 00 3a 3e 00 00 0e 00 78 00
>024268	35 3e 06 00 03 3c 3d 35 00 00 08 00 81 00 4c 3a
>024278	00 00 08 00 82 00 3a 3e 00 00 14 00 86 00 35 3e
>024288	18 c0 24 32 06 00 03 6f 64 64 24 32 00 00 0c 00
>024298	87 00 19 c0 06 22 18 c0 00 00 30 00 88 00 44 3c
>0242a8	26 32 35 3e 19 c0 25 32 04 00 01 20 25 32 26 32
>0242b8	19 c0 06 22 19 c0 0b 24 01 40 26 32 4a 3a 19 c0
>0242c8	06 22 00 40 26 32 35 3e 00 00 08 00 8c 00 4c 3a
>0242d8	00 00 10 00 96 00 18 c0 06 22 18 c0 0a 24 01 40
>0242e8	00 00 0e 00 a0 00 4a 3a 18 c0 05 22 0a 40 00 00
>0242f8	22 00 aa 00 47 3c 09 c0 06 22 01 40 2a 38 05 40
>024308	2b 38 02 40 26 32 35 3e 09 c0 26 32 4d 3a 09 c0
>024318	00 00 08 00 b4 00 31 3e 00 00 00 00 ee ee ee ee
>024328	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1996 times (31936 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
