
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 18:59:17 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 2f 10 01	jmp $01102f			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	05 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	d8 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	e8 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	f8 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	3c 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	a3 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	08 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	85 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	67 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	22 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	22 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	a3 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	af 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	2c 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	a3 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	b4 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	c6 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	3d 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	1d 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	f9 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	e3 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	77 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	cc 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	05 04					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	05 04					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	05 04					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	05 04					.word IllegalToken             & $FFFF ; token $321a "("
>010036	05 04					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	05 04					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	05 04					.word IllegalToken             & $FFFF ; token $321d "to"
>01003c	05 04					.word IllegalToken             & $FFFF ; token $321e "step"
>01003e	1c 10					.word Function_REM             & $FFFF ; token $3e1f "rem"
>010040	88 0a					.word Function_Let             & $FFFF ; token $3e20 "let"
>010042	fd 0f					.word Function_ASSERT          & $FFFF ; token $3e21 "assert"
>010044	40 0e					.word Function_END             & $FFFF ; token $3e22 "end"
>010046	42 0e					.word Function_RUN             & $FFFF ; token $3e23 "run"
>010048	9e 0e					.word Function_STOP            & $FFFF ; token $3e24 "stop"
>01004a	9a 0e					.word Function_CLEAR           & $FFFF ; token $3e25 "clear"
>01004c	f9 0e					.word Function_Dim             & $FFFF ; token $3e26 "dim"
>01004e	6d 0f					.word Function_COLLECT         & $FFFF ; token $3e27 "collect"
>010050	18 10					.word Function_CLS             & $FFFF ; token $3e28 "cls"
>010052	03 0b					.word Function_PRINT           & $FFFF ; token $3e29 "print"
>010054	ce 0c					.word Function_GOTO            & $FFFF ; token $3e2a "goto"
>010056	2d 0d					.word Function_GOSUB           & $FFFF ; token $3e2b "gosub"
>010058	49 0d					.word Function_RETURN          & $FFFF ; token $3e2c "return"
>01005a	8b 0c					.word Function_ONGOTO          & $FFFF ; token $3e2d "on"
>01005c	b6 0b					.word Handler_ELSE             & $FFFF ; token $3e2e "else"
>01005e	7b 0d					.word Function_REPEAT          & $FFFF ; token $3c2f "repeat"
>010060	d9 0d					.word Function_WHILE           & $FFFF ; token $3c30 "while"
>010062	4f 0b					.word Function_IF              & $FFFF ; token $3c31 "if"
>010064	05 04					.word IllegalToken             & $FFFF ; token $3c32 "for"
>010066	10 0e					.word Function_WEND            & $FFFF ; token $3a33 "wend"
>010068	92 0d					.word Function_UNTIL           & $FFFF ; token $3a34 "until"
>01006a	05 04					.word IllegalToken             & $FFFF ; token $3a35 "then"
>01006c	e4 0b					.word Handler_ENDIF            & $FFFF ; token $3a36 "endif"
>01006e	05 04					.word IllegalToken             & $FFFF ; token $3a37 "next"
.010070					TokenText:
>010070	02 26					 .text $02,"&"        ; token $2001
>010072	02 7c					 .text $02,"|"        ; token $2002
>010074	02 5e					 .text $02,"^"        ; token $2003
>010076	12 3c					 .text $12,"<"        ; token $2204
>010078	12 3e					 .text $12,">"        ; token $2205
>01007a	12 3d					 .text $12,"="        ; token $2206
>01007c	13 3c 3d				 .text $13,"<="       ; token $2207
>01007f	13 3e 3d				 .text $13,">="       ; token $2208
>010082	13 3c 3e				 .text $13,"<>"       ; token $2209
>010085	22 2b					 .text $22,"+"        ; token $240a
>010087	22 2d					 .text $22,"-"        ; token $240b
>010089	32 2a					 .text $32,"*"        ; token $260c
>01008b	32 2f					 .text $32,"/"        ; token $260d
>01008d	32 25					 .text $32,"%"        ; token $260e
>01008f	33 3e 3e				 .text $33,">>"       ; token $260f
>010092	33 3c 3c				 .text $33,"<<"       ; token $2610
>010095	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>01009a	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01009f	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100a4	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100a9	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ae	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100b4	92 2c					 .text $92,","        ; token $3217
>0100b6	92 3b					 .text $92,";"        ; token $3218
>0100b8	92 3a					 .text $92,":"        ; token $3219
>0100ba	92 28					 .text $92,"("        ; token $321a
>0100bc	92 29					 .text $92,")"        ; token $321b
>0100be	92 27					 .text $92,"'"        ; token $321c
>0100c0	93 74 6f				 .text $93,"to"       ; token $321d
>0100c3	95 73 74 65 70				 .text $95,"step"     ; token $321e
>0100c8	f4 72 65 6d				 .text $f4,"rem"      ; token $3e1f
>0100cc	f4 6c 65 74				 .text $f4,"let"      ; token $3e20
>0100d0	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e21
>0100d7	f4 65 6e 64				 .text $f4,"end"      ; token $3e22
>0100db	f4 72 75 6e				 .text $f4,"run"      ; token $3e23
>0100df	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e24
>0100e4	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e25
>0100ea	f4 64 69 6d				 .text $f4,"dim"      ; token $3e26
>0100ee	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e27
>0100f6	f4 63 6c 73				 .text $f4,"cls"      ; token $3e28
>0100fa	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e29
>010100	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e2a
>010105	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e2b
>01010b	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e2c
>010112	f3 6f 6e				 .text $f3,"on"       ; token $3e2d
>010115	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e2e
>01011a	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c2f
>010121	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c30
>010127	e3 69 66				 .text $e3,"if"       ; token $3c31
>01012a	e4 66 6f 72				 .text $e4,"for"      ; token $3c32
>01012e	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a33
>010133	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a34
>010139	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a35
>01013e	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a36
>010144	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a37
>010149	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$321d					toTokenID                        = $321d
=$321e					stepTokenID                      = $321e
=$3e1f					remTokenID                       = $3e1f
=$3e20					letTokenID                       = $3e20
=$3e21					assertTokenID                    = $3e21
=$3e22					endTokenID                       = $3e22
=$3e23					runTokenID                       = $3e23
=$3e24					stopTokenID                      = $3e24
=$3e25					clearTokenID                     = $3e25
=$3e26					dimTokenID                       = $3e26
=$3e27					collectTokenID                   = $3e27
=$3e28					clsTokenID                       = $3e28
=$3e29					printTokenID                     = $3e29
=$3e2a					gotoTokenID                      = $3e2a
=$3e2b					gosubTokenID                     = $3e2b
=$3e2c					returnTokenID                    = $3e2c
=$3e2d					onTokenID                        = $3e2d
=$3e2e					elseTokenID                      = $3e2e
=$3c2f					repeatTokenID                    = $3c2f
=$3c30					whileTokenID                     = $3c30
=$3c31					ifTokenID                        = $3c31
=$3c32					forTokenID                       = $3c32
=$3a33					wendTokenID                      = $3a33
=$3a34					untilTokenID                     = $3a34
=$3a35					thenTokenID                      = $3a35
=$3a36					endifTokenID                     = $3a36
=$3a37					nextTokenID                      = $3a37

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.01014a					Evaluate:
.01014a	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.01014d	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010150					EvaluateLevel:
.010150	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010153	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010155	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010157	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01015a	b0 79		bcs $0101d5			bcs 	_ELVariable
.01015c	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01015f	b0 16		bcs $010177			bcs 	_ELConstant
.010161	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010164	90 7f		bcc $0101e5			bcc 	_ELStringConstant
.010166	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010169	90 03		bcc $01016e			bcc 	_ELConstantShift
.01016b	82 94 00	brl $010202			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01016e					_ELConstantShift:
.01016e	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010171	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010173	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010175	e6 06		inc $06				inc 	DCodePtr
.010177					_ELConstant:
.010177	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010179	38		sec				sec  								; shift it in the range 0-32767
.01017a	e9 00 40	sbc #$4000			sbc 	#$4000
.01017d	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01017e	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010180	6a		ror a				ror 	a 							; rotate that into the constant value
.010181	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010183	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010185	95 10		sta $10,x			sta 	EXSValueH+0,x
.010187	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010189	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01018b	e6 06		inc $06				inc 	DCodePtr
.01018d					_ELGotAtom:
.01018d	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.01018f	a8		tay				tay 								; save in Y
.010190	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010193	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010196	d0 35		bne $0101cd			bne 	_ELExit
.010198	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01019a	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01019d	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.01019f	98		tya				tya 								; get the keyword token back
.0101a0	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101a3	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0101a5	90 26		bcc $0101cd			bcc 	_ELExit 					; precedence too low, then exit.
.0101a7	5a		phy				phy 								; save the binary operator on the stack
.0101a8	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0101aa	e6 06		inc $06				inc 	DCodePtr
.0101ac	18		clc				clc 								; try the next level up
.0101ad	69 00 02	adc #$0200			adc 	#1 << TokenShift
.0101b0	e8		inx				inx 								; calculate the RHS at the next stack level.
.0101b1	e8		inx				inx
.0101b2	20 50 01	jsr $010150			jsr 	EvaluateLevel
.0101b5	ca		dex				dex
.0101b6	ca		dex				dex
.0101b7	7a		ply				ply 								; get operator token back into Y
.0101b8					_ELExecuteY:
.0101b8	98		tya				tya
.0101b9	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101bc	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.0101bd	9b		txy				txy 								; save X in Y
.0101be	aa		tax				tax 								; double keyword ID in X
.0101bf	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.0101c3	bb		tyx				tyx 								; restore X.
.0101c4	8f c9 01 01	sta $0101c9			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.0101c8					_ELCallRoutine:
.0101c8	20 c8 01	jsr $0101c8			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.0101cb	80 c0		bra $01018d			bra 	_ELGotAtom 					; go round operator level again.
.0101cd	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.0101cf	0a		asl a				asl 	a
.0101d0	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.0101d2	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.0101d4	60		rts				rts
.0101d5					_ELVariable:
.0101d5	16 20		asl $20,x			asl 	EXSPrecType+0,x
.0101d7	20 96 02	jsr $010296			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.0101da	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.0101dc	94 10		sty $10,x			sty 	EXSValueH+0,x
.0101de	76 20		ror $20,x			ror 	EXSPrecType+0,x
.0101e0	80 ab		bra $01018d			bra 	_ELGotAtom
.0101e2					_ELSyntax
.0101e2	82 31 02	brl $010416			brl 	SyntaxError
.0101e5					_ELStringConstant:
.0101e5	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.0101e8	f0 f8		beq $0101e2			beq 	_ELSyntax
.0101ea	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0101ec	1a		inc a				inc 	a
.0101ed	1a		inc a				inc 	a
.0101ee	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101f0	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101f2	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101f4	18		clc				clc 								; add to string constant.
.0101f5	65 06		adc $06				adc 	DCodePtr
.0101f7	85 06		sta $06				sta 	DCodePtr
.0101f9	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101fb	09 00 80	ora #$8000			ora 	#$8000
.0101fe	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010200	80 8b		bra $01018d			bra 	_ELGotAtom
.010202					_ELUnaryKeyword:
.010202	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010204	a8		tay				tay 								; put the token in Y.
.010205	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010207	e6 06		inc $06				inc 	DCodePtr
.010209	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01020c	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.01020f	f0 a7		beq $0101b8			beq 	_ELExecuteY					; go back and execute it
.010211	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.010214	d0 11		bne $010227			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010216	20 4d 02	jsr $01024d			jsr 	EvaluateNext 				; evaluate the expression
.010219	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; consume the right bracket.
.01021c					_ELCopy:
.01021c	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01021e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010220	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010222	95 10		sta $10,x			sta 	EXSValueH+0,x
.010224	82 66 ff	brl $01018d			brl 	_ELGotAtom 					; and continue.
.010227					_ELUnaryOperator:
.010227	5a		phy				phy 								; save the operator on the stack.
.010228	e8		inx				inx 								; this is like evaluate next
.010229	e8		inx				inx
.01022a	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01022d	20 50 01	jsr $010150			jsr 	EvaluateLevel
.010230	ca		dex				dex 								; unwind the stack.
.010231	ca		dex				dex
.010232	68		pla				pla 								; restore the unary operator.
.010233	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010236	f0 03		beq $01023b			beq 	_ELMinus
.010238	4c 16 04	jmp $010416			jmp 	SyntaxError
.01023b					_ELMinus:
.01023b	38		sec				sec 								; do the negation calculation.
.01023c	a9 00 00	lda #$0000			lda 	#0
.01023f	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010241	95 00		sta $00,x			sta 	EXSValueL+0,x
.010243	a9 00 00	lda #$0000			lda 	#0
.010246	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010248	95 10		sta $10,x			sta 	EXSValueH+0,x
.01024a	82 40 ff	brl $01018d			brl 	_ELGotAtom					; and continue.
.01024d					EvaluateNext:
.01024d	e8		inx				inx
.01024e	e8		inx				inx
.01024f	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010252	20 50 01	jsr $010150			jsr 	EvaluateLevel
.010255	ca		dex				dex
.010256	ca		dex				dex
.010257	60		rts				rts
.010258					EvaluateInteger:
.010258	20 4a 01	jsr $01014a			jsr 	Evaluate
.01025b	b0 01		bcs $01025e			bcs 	EIType
.01025d	60		rts				rts
.01025e					EIType:
.01025e	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010261	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010269	78 70 65 63 74 65 64 00
.010271					EvaluateNextInteger:
.010271	20 4d 02	jsr $01024d			jsr 	EvaluateNext
.010274	b0 e8		bcs $01025e			bcs 	EIType
.010276	60		rts				rts
.010277					EvaluateString:
.010277	20 4a 01	jsr $01014a			jsr 	Evaluate
.01027a	90 01		bcc $01027d			bcc 	ESType
.01027c	60		rts				rts
.01027d					ESType:
.01027d	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010280	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010288	78 70 65 63 74 65 64 00
.010290					EvaluateNextString:
.010290	20 4d 02	jsr $01024d			jsr 	EvaluateNext
.010293	90 e8		bcc $01027d			bcc 	ESType
.010295	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010296					VariableAccessExpression:
.010296	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010298	48		pha				pha
.010299	20 d7 02	jsr $0102d7			jsr 	VariableFind 				; try to find the variables
.01029c	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01029e	90 23		bcc $0102c3			bcc 	_VANError
.0102a0	68		pla				pla 								; get and save that first token
.0102a1	48		pha				pha
.0102a2	a8		tay				tay 								; put first token in Y.
.0102a3	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102a6	f0 07		beq $0102af			beq 	_VANNotArray
.0102a8	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.0102aa	20 4e 03	jsr $01034e			jsr 	VariableSubscript			; index calculation
.0102ad	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0102af					_VANNotArray:
.0102af	68		pla				pla 								; get the token back.
.0102b0	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.0102b3	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.0102b6	38		sec				sec 								; set up return string.
.0102b7	f0 06		beq $0102bf			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.0102b9	18		clc				clc 								; returning a number, read high data word
.0102ba	a0 02 00	ldy #$0002			ldy 	#2
.0102bd	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.0102bf					_VANLoadLower:
.0102bf	a8		tay				tay 								; put A into Y (this is the high byte)
.0102c0	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.0102c2	60		rts				rts
.0102c3					_VANError:
.0102c3	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>0102c6	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>0102ce	20 75 6e 6b 6e 6f 77 6e 00
.0102d7					VariableFind:
.0102d7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0102d9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0102dc	90 5c		bcc $01033a			bcc 	_VFError
.0102de	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0102e1	b0 11		bcs $0102f4			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0102e3	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0102e6	3a		dec a				dec 	a 							; now 0-25
.0102e7	0a		asl a				asl 	a 							; x 4 and clear carry
.0102e8	0a		asl a				asl 	a
.0102e9	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0102ec	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102ee	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102f0	e6 06		inc $06				inc 	DCodePtr
.0102f2	38		sec				sec 								; return with carry set.
.0102f3	60		rts				rts
.0102f4					_VFSlowVariable:
.0102f4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102f6	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102f9	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102fa	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102fb	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102fe	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010300	85 08		sta $08				sta 	DTemp1
.010302	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010304	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010307	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010308	65 08		adc $08				adc 	DTemp1
.01030a	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01030c	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01030e					_VFNext:
.01030e	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010310	f0 26		beq $010338			beq 	_VFFail 					; if zero, then it's the end of the list.
.010312	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010314	a8		tay				tay 								; read the address of the name at $0002,y
.010315	b9 02 00	lda $0002,y			lda 	$0002,y
.010318	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01031a	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01031d					_VFCompare:
.01031d	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.01031f	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010321	d0 eb		bne $01030e			bne 	_VFNext 					; if not, go to the next one.
.010323	c8		iny				iny 								; advance token pointer
.010324	c8		iny				iny
.010325	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010328	d0 f3		bne $01031d			bne 	_VFCompare
.01032a	98		tya				tya 								; this is the length of the word.
.01032b	18		clc				clc 								; so we add it to the code pointer
.01032c	65 06		adc $06				adc 	DCodePtr
.01032e	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010330	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010332	18		clc				clc 								; four on is the actual data
.010333	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010336	38		sec				sec 								; return with CS indicating success
.010337	60		rts				rts
.010338					_VFFail:
.010338	18		clc				clc
.010339	60		rts				rts
.01033a					_VFError:
.01033a	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01033d	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010345	76 61 72 69 61 62 6c 65 00
.01034e					VariableSubscript:
.01034e	48		pha				pha		 							; save variable address on stack.
.01034f	20 71 02	jsr $010271			jsr		EvaluateNextInteger 		; get the subscript
.010352	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; skip right bracket.
.010355	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010358	d0 10		bne $01036a			bne 	_VANSubscript
.01035a	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01035c	f0 02		beq $010360			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01035e	b0 0a		bcs $01036a			bcs 	_VANSubscript
.010360					_VANSubOkay:
.010360	0a		asl a				asl 	a 							; double lsword
.010361	0a		asl a				asl 	a 							; and again, also clears carry.
.010362	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010364	68		pla				pla 								; restore DVariablePtr
.010365	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010366	1a		inc a				inc 	a
.010367	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010369	60		rts				rts
.01036a					_VANSubscript:
.01036a	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01036d	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010375	79 20 53 75 62 73 63 72 69 70 74 00
.010381					VariableCreate:
.010381	48		pha				pha 								; save count.
.010382	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010385	29 00 20	and #$2000			and 	#IDTypeMask
.010388	f0 06		beq $010390			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01038a	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01038d	18		clc				clc
.01038e	65 02		adc $02				adc 	DBaseAddress
.010390					_VCIsInteger:
.010390	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010392	68		pla				pla 								; restore count
.010393	48		pha				pha
.010394	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010395	0a		asl a				asl 	a 							; 2 x # items.
.010396	0a		asl a				asl 	a 							; 4 x # items.
.010397					_VCNotSingle:
.010397	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010399	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01039c	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01039f	f0 04		beq $0103a5			beq 	_VCNotArray
.0103a1	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.0103a3	e6 08		inc $08				inc 	DTemp1
.0103a5					_VCNotArray:
.0103a5	5a		phy				phy 								; save address of token on stack.
.0103a6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0103a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.0103ab	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103ad	18		clc				clc 								; add 4 for link and name.
.0103ae	69 04 00	adc #$0004			adc 	#4
.0103b1	65 08		adc $08				adc 	DTemp1 						; add memory required
.0103b3	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.0103b5	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.0103b7					_VCErase:
.0103b7	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103b9	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103bc	c8		iny				iny
.0103bd	c8		iny				iny
.0103be	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.0103c0	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.0103c2	d0 f3		bne $0103b7			bne 	_VCErase
.0103c4	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.0103c6	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.0103c8	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.0103cb	68		pla				pla 								; restore the token address
.0103cc	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0103cf	68		pla				pla 								; restore count and store.
.0103d0	99 04 00	sta $0004,y			sta 	$0004,y
.0103d3					_VCNotArray2:
.0103d3	98		tya				tya 								; update the head link
.0103d4	92 20		sta ($20)			sta 	(DHashTablePtr)
.0103d6	18		clc				clc 								; advance pointer to the data bit.
.0103d7	69 04 00	adc #$0004			adc 	#4
.0103da	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.0103db					ErrorHandler:
.0103db	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0103dd	fa		plx				plx 								; address of error message -1
.0103de	e8		inx				inx 								; error message.
.0103df	20 82 04	jsr $010482			jsr 	PrintROMMessage 			; print message in ROM
.0103e2	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0103e4	f0 15		beq $0103fb			beq 	_EHEndMessage
.0103e6	a2 00 04	ldx #$0400			ldx 	#_EHAt & $FFFF 				; print " at "
.0103e9	20 82 04	jsr $010482			jsr 	PrintROMMessage
.0103ec	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103ee	a0 00 00	ldy #$0000			ldy 	#0
.0103f1	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103f4	20 e7 09	jsr $0109e7			jsr 	ConvertToString 			; convert and print it.
.0103f7	a8		tay				tay
.0103f8	20 96 04	jsr $010496			jsr 	PrintBASICString
.0103fb					_EHEndMessage:
.0103fb	20 81 10	jsr $011081			jsr 	HWNewLine
.0103fe	80 fe		bra $0103fe	_EH1:	bra 	_EH1
>010400	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010405					IllegalToken:
.010405	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010408	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010410	54 6f 6b 65 6e 00
.010416					SyntaxError:
.010416	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010419	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010421	72 72 6f 72 00
.010426					ExpectToken:
.010426	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010428	d0 05		bne $01042f			bne 	_CTKError					; error if not
.01042a	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01042c	e6 06		inc $06				inc 	DCodePtr
.01042e	60		rts				rts
.01042f					_CTKError:
.01042f	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010432	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01043a	74 6f 6b 65 6e 00
.010440					ExpectRightBracket:
.010440	48		pha				pha
.010441	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.010444	20 26 04	jsr $010426			jsr 	ExpectToken
.010447	68		pla				pla
.010448	60		rts				rts
.010449					ExpectComma:
.010449	48		pha				pha
.01044a	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01044d	20 26 04	jsr $010426			jsr 	ExpectToken
.010450	68		pla				pla
.010451	60		rts				rts
.010452					CheckBothNumeric:
.010452	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010454	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010456	30 01		bmi $010459			bmi 	_CBNFail 					; need to both be zero in bit 15
.010458	60		rts				rts
.010459					_CBNFail:
.010459	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01045c	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010464	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010472					ResetTypeInteger:
.010472	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010474	29 ff 7f	and #$7fff			and 	#$7FFF
.010477	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010479	60		rts				rts
.01047a					ResetTypeString:
.01047a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01047c	09 00 80	ora #$8000			ora 	#$8000
.01047f	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010481	60		rts				rts
.010482					PrintROMMessage:
.010482	48		pha				pha
.010483	da		phx				phx
.010484					_PRMLoop:
.010484	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010488	29 ff 00	and #$00ff			and 	#$00FF
.01048b	f0 06		beq $010493			beq 	_PRMExit
.01048d	20 5f 10	jsr $01105f			jsr 	HWPrintChar
.010490	e8		inx				inx
.010491	80 f1		bra $010484			bra 	_PRMLoop
.010493					_PRMExit:
.010493	fa		plx				plx
.010494	68		pla				pla
.010495	60		rts				rts
.010496					PrintBASICString:
.010496	48		pha				pha
.010497	da		phx				phx
.010498	5a		phy				phy
.010499	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01049c	29 ff 00	and #$00ff			and 	#$00FF
.01049f	f0 0b		beq $0104ac			beq 	_PBSExit 					; null string
.0104a1	aa		tax				tax
.0104a2					_PBSLoop:
.0104a2	c8		iny				iny
.0104a3	b9 00 00	lda $0000,y			lda 	$0000,y
.0104a6	20 5f 10	jsr $01105f			jsr 	HWPrintChar
.0104a9	ca		dex				dex
.0104aa	d0 f6		bne $0104a2			bne 	_PBSLoop
.0104ac					_PBSExit:
.0104ac	7a		ply				ply
.0104ad	fa		plx				plx
.0104ae	68		pla				pla
.0104af	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.0104b0					StringTempAllocate:
.0104b0	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0104b3	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0104b6	18		clc				clc 								; this adds one, for the length.
.0104b7	65 16		adc $16				adc 	DTempStringPointer
.0104b9	85 16		sta $16				sta 	DTempStringPointer
.0104bb	48		pha				pha
.0104bc	a9 00 00	lda #$0000			lda 	#$0000
.0104bf	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0104c1	92 16		sta ($16)			sta		(DTempStringPointer)
.0104c3	c2 20		rep #$20			rep 	#$20
.0104c5	68		pla				pla
.0104c6	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0104c8	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0104ca	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0104cc	60		rts				rts
.0104cd					StringCreateCopy:
.0104cd	a8		tay				tay 								; put pointer to string in Y
.0104ce	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0104d1	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0104d4	f0 17		beq $0104ed			beq 	_SCCExit 					; do nothing if length zero.
.0104d6	da		phx				phx 								; save X and put the character count in X
.0104d7	aa		tax				tax
.0104d8					_SCCCopy:
.0104d8	c8		iny				iny 								; advance and read (first time skips length)
.0104d9	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0104db	b9 00 00	lda $0000,y			lda 	$0000,y
.0104de	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0104e0	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0104e2	1a		inc a				inc 	a
.0104e3	92 18		sta ($18)			sta 	(DStartTempString)
.0104e5	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0104e7	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0104e9	ca		dex				dex 								; do X times
.0104ea	d0 ec		bne $0104d8			bne 	_SCCCopy
.0104ec	fa		plx				plx
.0104ed					_SCCExit:
.0104ed	60		rts				rts
.0104ee					StringMakeConcrete:
.0104ee	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104f1	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104f3	90 0f		bcc $010504			bcc 	_SMCExit
.0104f5	85 08		sta $08				sta 	DTemp1 						; source
.0104f7	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104f9	29 ff 00	and #$00ff			and 	#$00FF
.0104fc	d0 07		bne $010505			bne 	_SMCNonZero 				; if not "" skip.
.0104fe	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010501	18		clc				clc
.010502	65 02		adc $02				adc 	DBaseAddress
.010504					_SMCExit:
.010504	60		rts				rts
.010505					_SMCNonZero:
.010505	48		pha				pha 								; save on stack.
.010506	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010509	18		clc				clc
.01050a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01050d	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01050f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010511	85 0c		sta $0c				sta 	DTemp2 						; target
.010513	7a		ply				ply 								; get length copy from here until Y goes -ve
.010514	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010516					_SMCLoop:
.010516	b1 08		lda ($08),y			lda 	(DTemp1),y
.010518	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01051a	88		dey				dey
.01051b	10 f9		bpl $010516			bpl 	_SMCLoop
.01051d	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01051f	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010521	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010522					Binary_Add:
.010522	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010524	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010526	30 12		bmi $01053a		bmi 	_BATypeError
.010528	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01052a	30 3f		bmi $01056b		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01052c	18		clc			clc
.01052d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01052f	75 02		adc $02,x		adc 	EXSValueL+2,x
.010531	95 00		sta $00,x		sta 	EXSValueL+0,x
.010533	b5 10		lda $10,x		lda		EXSValueH+0,x
.010535	75 12		adc $12,x		adc 	EXSValueH+2,x
.010537	95 10		sta $10,x		sta 	EXSValueH+0,x
.010539	60		rts			rts
.01053a					_BATypeError:
.01053a	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01053d	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010545	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010555	65 73 00
.010558					_BALengthError:
.010558	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01055b	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010563	6f 6f 20 6c 6f 6e 67 00
.01056b					_BAConcatenateString:
.01056b	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01056d	85 08		sta $08			sta 	DTemp1
.01056f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010571	85 0c		sta $0c			sta 	DTemp2
.010573	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010575	18		clc			clc 										; work out the total length
.010576	b2 08		lda ($08)		lda 	(DTemp1)
.010578	72 0c		adc ($0c)		adc 	(DTemp2)
.01057a	b0 14		bcs $010590		bcs 	_BAConcatLengthError 				; string is too long.
.01057c	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01057e	20 b0 04	jsr $0104b0		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010581	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010583	74 10		stz $10,x		stz 	EXSValueH+0,x
.010585	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010587	20 cd 04	jsr $0104cd		jsr 	StringCreateCopy
.01058a	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01058c	20 cd 04	jsr $0104cd		jsr 	StringCreateCopy
.01058f	60		rts			rts
.010590					_BAConcatLengthError:
.010590	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010593	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01059b	6f 6f 20 6c 6f 6e 67 00
.0105a3					Binary_Subtract:
.0105a3	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105a6	38		sec			sec
.0105a7	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105ab	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105ad	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105af	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105b1	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105b3	60		rts			rts
.0105b4					Binary_ShiftRight:
.0105b4	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105b7	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105b9	29 3f 00	and #$003f		and 	#63
.0105bc	f0 07		beq $0105c5		beq		_Binary_SRExit
.0105be					_Binary_SRLoop:
.0105be	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0105c0	76 00		ror $00,x		ror 	EXSValueL+0,x
.0105c2	3a		dec a			dec 	a
.0105c3	d0 f9		bne $0105be		bne 	_Binary_SRLoop
.0105c5					_Binary_SRExit:
.0105c5	60		rts			rts
.0105c6					Binary_ShiftLeft:
.0105c6	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105c9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105cb	29 3f 00	and #$003f		and 	#63
.0105ce	f0 07		beq $0105d7		beq		_Binary_SLExit
.0105d0					_Binary_SLLoop:
.0105d0	16 00		asl $00,x		asl 	EXSValueL+0,x
.0105d2	36 10		rol $10,x		rol 	EXSValueH+0,x
.0105d4	3a		dec a			dec 	a
.0105d5	d0 f9		bne $0105d0		bne 	_Binary_SLLoop
.0105d7					_Binary_SLExit:
.0105d7	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.0105d8					Binary_And:
.0105d8	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105db	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105dd	35 02		and $02,x		and 	EXSValueL+2,x
.0105df	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105e1	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105e3	35 12		and $12,x		and 	EXSValueH+2,x
.0105e5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105e7	60		rts			rts
.0105e8					Binary_Or:
.0105e8	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105eb	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105ed	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105ef	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105f1	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105f3	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105f5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105f7	60		rts			rts
.0105f8					Binary_Xor:
.0105f8	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0105fb	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105fd	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105ff	95 00		sta $00,x		sta 	EXSValueL+0,x
.010601	b5 10		lda $10,x		lda		EXSValueH+0,x
.010603	55 12		eor $12,x		eor 	EXSValueH+2,x
.010605	95 10		sta $10,x		sta 	EXSValueH+0,x
.010607	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010608					Binary_Equals:
.010608	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01060b	b0 0e		bcs $01061b		bcs 	_BEString
.01060d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01060f	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010611	d0 4f		bne $010662		bne 	Compare_Fail
.010613	b5 10		lda $10,x		lda 	EXSValueH,x
.010615	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010617	d0 49		bne $010662		bne 	Compare_Fail
.010619	80 3f		bra $01065a		bra 	Compare_Succeed
.01061b					_BEString:
.01061b	09 00 00	ora #$0000		ora 	#$0000
.01061e	f0 3a		beq $01065a		beq 	Compare_Succeed
.010620	80 40		bra $010662		bra 	Compare_Fail
.010622					Binary_NotEquals:
.010622	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010625	b0 0e		bcs $010635		bcs 	_BNEString
.010627	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010629	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01062b	d0 2d		bne $01065a		bne 	Compare_Succeed
.01062d	b5 10		lda $10,x		lda 	EXSValueH,x
.01062f	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010631	d0 27		bne $01065a		bne 	Compare_Succeed
.010633	80 2d		bra $010662		bra 	Compare_Fail
.010635					_BNEString:
.010635	09 00 00	ora #$0000		ora 	#$0000
.010638	d0 20		bne $01065a		bne 	Compare_Succeed
.01063a	80 26		bra $010662		bra 	Compare_Fail
.01063c					Binary_Less:
.01063c	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01063f	b0 12		bcs $010653		bcs 	_BLString
.010641	38		sec			sec
.010642	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010644	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010646	b5 10		lda $10,x		lda 	EXSValueH,x
.010648	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01064a	50 03		bvc $01064f		bvc 	*+5
.01064c	49 00 80	eor #$8000		eor 	#$8000
.01064f	30 09		bmi $01065a		bmi 	Compare_Succeed
.010651	80 0f		bra $010662		bra 	Compare_Fail
.010653					_BLString:
.010653	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010656	f0 02		beq $01065a		beq 	Compare_Succeed
.010658	80 08		bra $010662		bra 	Compare_Fail
.01065a					Compare_Succeed:
.01065a	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01065d	95 00		sta $00,x		sta 	EXSValueL,x
.01065f	95 10		sta $10,x		sta 	EXSValueH,x
.010661	60		rts			rts
.010662					Compare_Fail:
.010662	74 00		stz $00,x		stz 	EXSValueL,x
.010664	74 10		stz $10,x		stz 	EXSValueH,x
.010666	60		rts			rts
.010667					Binary_GreaterEqual:
.010667	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01066a	b0 12		bcs $01067e		bcs 	_BGEString
.01066c	38		sec			sec
.01066d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01066f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010671	b5 10		lda $10,x		lda 	EXSValueH,x
.010673	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010675	50 03		bvc $01067a		bvc 	*+5
.010677	49 00 80	eor #$8000		eor 	#$8000
.01067a	10 de		bpl $01065a		bpl 	Compare_Succeed
.01067c	80 e4		bra $010662		bra 	Compare_Fail
.01067e					_BGEString:
.01067e	09 00 00	ora #$0000		ora 	#$0000
.010681	10 d7		bpl $01065a		bpl 	Compare_Succeed
.010683	80 dd		bra $010662		bra 	Compare_Fail
.010685					Binary_LessEqual:
.010685	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010688	b0 12		bcs $01069c		bcs 	_BLEString
.01068a	18		clc			clc 									; numeric <= signed
.01068b	b5 00		lda $00,x		lda 	EXSValueL,x
.01068d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01068f	b5 10		lda $10,x		lda 	EXSValueH,x
.010691	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010693	50 03		bvc $010698		bvc 	*+5
.010695	49 00 80	eor #$8000		eor 	#$8000
.010698	30 c0		bmi $01065a		bmi 	Compare_Succeed
.01069a	80 c6		bra $010662		bra 	Compare_Fail
.01069c					_BLEString:
.01069c	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01069f	d0 b9		bne $01065a		bne 	Compare_Succeed
.0106a1	80 bf		bra $010662		bra 	Compare_Fail
.0106a3					Binary_Greater:
.0106a3	20 c1 06	jsr $0106c1		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106a6	b0 12		bcs $0106ba		bcs 	_BGString
.0106a8	18		clc			clc 									; numeric > signed
.0106a9	b5 00		lda $00,x		lda 	EXSValueL,x
.0106ab	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ad	b5 10		lda $10,x		lda 	EXSValueH,x
.0106af	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106b1	50 03		bvc $0106b6		bvc 	*+5
.0106b3	49 00 80	eor #$8000		eor 	#$8000
.0106b6	10 a2		bpl $01065a		bpl 	Compare_Succeed
.0106b8	80 a8		bra $010662		bra 	Compare_Fail
.0106ba					_BGString:
.0106ba	c9 01 00	cmp #$0001		cmp 	#$0001
.0106bd	f0 9b		beq $01065a		beq 	Compare_Succeed
.0106bf	80 a1		bra $010662		bra 	Compare_Fail
.0106c1					CompareTypeCheck:
.0106c1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0106c3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0106c5	30 06		bmi $0106cd		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0106c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0106c9	30 1c		bmi $0106e7		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0106cb	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0106cc	60		rts			rts
.0106cd					_CTCFail:
.0106cd	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>0106d0	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0106d8	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0106e7					_CTCStringCompare:
.0106e7	20 72 04	jsr $010472		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0106ea	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0106ec	85 08		sta $08			sta 	DTemp1
.0106ee	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106f0	85 0c		sta $0c			sta 	DTemp2
.0106f2	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106f5	a8		tay			tay
.0106f6	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106f8	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106fa	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106fc	90 02		bcc $010700		bcc 	_CTCSmallest
.0106fe	b2 0c		lda ($0c)		lda 	(DTemp2)
.010700					_CTCSmallest:
.010700	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010702					_CTCCompare:
.010702	c8		iny			iny 									; look at next character (done first, first char is size)
.010703	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010705	30 16		bmi $01071d		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010707	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010709	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01070b	f0 f5		beq $010702		beq 	_CTCCompare 					; if zero, try the next character.
.01070d	b0 07		bcs $010716		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01070f					_CTCLess:
.01070f	c2 20		rep #$20		rep 	#$20
.010711	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010714	80 14		bra $01072a		bra 	_CTCExit
.010716					_CTCGreater:
.010716	c2 20		rep #$20		rep 	#$20
.010718	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01071b	80 0d		bra $01072a		bra 	_CTCExit
.01071d					_CTCEqualSoFar:
.01071d	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01071f	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010721	90 ec		bcc $01070f		bcc 	_CTCLess
.010723	d0 f1		bne $010716		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010725	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010727	a9 00 00	lda #$0000		lda 	#$0000
.01072a					_CTCExit:
.01072a	38		sec			sec 									; return with CS indicating string comparison.
.01072b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.01072c					Binary_Divide:
.01072c	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.01072f	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010731	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010733	d0 14		bne $010749		bne 	_BinaryDivide_Ok
.010735	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010738	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010740	20 62 79 20 7a 65 72 6f 00
.010749					_BinaryDivide_Ok:
.010749	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.01074b	64 0a		stz $0a			stz 	DTemp1+2
.01074d	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01074f	5a		phy			phy 										; save Y (bit counter)
.010750	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010752	10 07		bpl $01075b		bpl 	_BinaryDivide_RightDone
.010754	e8		inx			inx
.010755	e8		inx			inx
.010756	20 91 07	jsr $010791		jsr 	Binary_DivNegate
.010759	ca		dex			dex
.01075a	ca		dex			dex
.01075b					_BinaryDivide_RightDone:
.01075b	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01075d	10 03		bpl $010762		bpl 	_BinaryDivide_LeftDone
.01075f	20 91 07	jsr $010791		jsr 	Binary_DivNegate
.010762					_BinaryDivide_LeftDone:
.010762	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010765					_BinaryDivide_Loop:
.010765	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010767	36 10		rol $10,x		rol 	EXSValueH+0,x
.010769	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01076b	26 0a		rol $0a			rol 	DTemp1+2
.01076d	38		sec			sec											; calculate A-M
.01076e	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010770	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010772	85 0c		sta $0c			sta 	DTemp2
.010774	a5 0a		lda $0a			lda 	DTemp1+2
.010776	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010778	90 08		bcc $010782		bcc 	_Binary_NoSubract 					; if A < M skip this
.01077a	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01077c	a5 0c		lda $0c			lda 	DTemp2
.01077e	85 08		sta $08			sta 	DTemp1+0
.010780	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010782					_Binary_NoSubract:
.010782	88		dey			dey 										; do it 32 times.
.010783	d0 e0		bne $010765		bne 	_BinaryDivide_Loop
.010785					_BinaryDivide_Exit:
.010785	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010787	29 01 00	and #$0001		and 	#1
.01078a	f0 03		beq $01078f		beq 	_BinaryDivide_Exit2
.01078c	20 91 07	jsr $010791		jsr 	Binary_DivNegate
.01078f					_BinaryDivide_Exit2:
.01078f	7a		ply			ply 										; restore Y
.010790	60		rts			rts
.010791					Binary_DivNegate:
.010791	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010793	38		sec			sec 										; negate the value at stack X.
.010794	a9 00 00	lda #$0000		lda 	#$0000
.010797	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010799	95 00		sta $00,x		sta 	EXSValueL+0,x
.01079b	a9 00 00	lda #$0000		lda 	#$0000
.01079e	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0107a0	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107a2	60		rts			rts
.0107a3					Binary_Modulus:
.0107a3	20 2c 07	jsr $01072c		jsr 	Binary_Divide 						; do the divide
.0107a6	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0107a8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107aa	a5 0a		lda $0a			lda 	DTemp1+2
.0107ac	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107ae	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.0107af					Binary_Multiply:
.0107af	20 52 04	jsr $010452		jsr 	CheckBothNumeric 					; check both values are numeric
.0107b2	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0107b4	85 08		sta $08			sta 	DTemp1
.0107b6	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107b8	85 0a		sta $0a			sta		DTemp1+2
.0107ba	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0107bc	74 10		stz $10,x		stz 	EXSValueH+0,x
.0107be					_BinaryMultiply_Loop:
.0107be	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0107c0	05 0a		ora $0a			ora 	DTemp1+2
.0107c2	f0 1e		beq $0107e2		beq 	_BinaryMultiply_Exit
.0107c4	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0107c6	29 01 00	and #$0001		and 	#1
.0107c9	f0 0d		beq $0107d8		beq 	_BinaryMultiply_NoAdd
.0107cb	18		clc			clc 										; add multiplicand to result.
.0107cc	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0107ce	75 02		adc $02,x		adc 	EXSValueL+2,x
.0107d0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107d2	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107d4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0107d6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107d8					_BinaryMultiply_NoAdd:
.0107d8	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0107da	66 08		ror $08			ror 	DTemp1
.0107dc	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0107de	36 12		rol $12,x		rol 	EXSValueH+2,x
.0107e0	80 dc		bra $0107be		bra 	_BinaryMultiply_Loop 				; go round again.
.0107e2					_BinaryMultiply_Exit:
.0107e2	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0107e3					Function_Len:
.0107e3	20 72 04	jsr $010472			jsr 	ResetTypeInteger 			; returns an integer
.0107e6	20 90 02	jsr $010290			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107e9	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; check )
.0107ec	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107ee	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107f1	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107f4	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107f6	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107f8	60		rts				rts
.0107f9					Function_Abs:
.0107f9	20 72 04	jsr $010472			jsr 	ResetTypeInteger 			; returns an integer
.0107fc	20 71 02	jsr $010271			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107ff	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; check )
.010802	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010804	30 07		bmi $01080d			bmi 	_FAbsNegative 				; negate it if negative
.010806	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010808	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01080a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01080c	60		rts				rts
.01080d					_FAbsNegative:
.01080d	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01080e	a9 00 00	lda #$0000			lda 	#0
.010811	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010813	95 00		sta $00,x			sta 	EXSValueL+0,x
.010815	a9 00 00	lda #$0000			lda 	#0
.010818	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01081a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01081c	60		rts				rts
.01081d					Function_Sgn:
.01081d	20 72 04	jsr $010472			jsr 	ResetTypeInteger 			; returns integer
.010820	20 71 02	jsr $010271			jsr 	EvaluateNextInteger 		; get an integer
.010823	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; check )
.010826	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010828	74 10		stz $10,x			stz 	EXSValueH+0,x
.01082a	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.01082c	30 07		bmi $010835			bmi 	_FSgnNegative 				; set to -1 if signed
.01082e	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010830	f0 02		beq $010834			beq 	_FSgnExit
.010832	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010834					_FSgnExit:
.010834	60		rts				rts
.010835					_FSgnNegative:
.010835	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010838	95 00		sta $00,x			sta 	EXSValueL+0,x
.01083a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01083c	60		rts				rts
.01083d					Function_Random:
.01083d	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; check )
.010840	20 72 04	jsr $010472			jsr 	ResetTypeInteger
.010843	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010845	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010847	d0 0a		bne $010853			bne 	_Rnd_NotZero
.010849	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01084c	85 10		sta $10				sta 	DRandom
.01084e	a9 ea 00	lda #$00ea			lda 	#$EA
.010851	85 12		sta $12				sta 	DRandom+2
.010853					_Rnd_NotZero:
.010853	20 5e 08	jsr $01085e			jsr 	_Rnd_Process 				; call randomiser twice
.010856	95 10		sta $10,x			sta 	EXSValueH+0,x
.010858	20 5e 08	jsr $01085e			jsr 	_Rnd_Process
.01085b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01085d	60		rts				rts
.01085e					_Rnd_Process:
.01085e	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010860	26 12		rol $12				rol 	DRandom+2
.010862	90 0e		bcc $010872			bcc 	_Rnd_Exit
.010864	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010866	49 54 d4	eor #$d454			eor 	#$D454
.010869	85 10		sta $10				sta 	DRandom
.01086b	a5 12		lda $12				lda 	DRandom+2
.01086d	49 d5 55	eor #$55d5			eor 	#$55D5
.010870	85 12		sta $12				sta 	DRandom+2
.010872					_Rnd_Exit:
.010872	a5 10		lda $10				lda 	DRandom
.010874	45 12		eor $12				eor 	DRandom+2
.010876	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010877					Function_VAL:
.010877	20 72 04	jsr $010472			jsr 	ResetTypeInteger 			; returns an integer
.01087a	20 90 02	jsr $010290			jsr 	EvaluateNextString 			; get the value you are absoluting
.01087d	48		pha				pha 								; put string address on stack.
.01087e	20 8e 08	jsr $01088e			jsr 	VALGetBase 					; process , base (shared with STR$())
.010881	7a		ply				ply 								; get string address back
.010882	da		phx				phx 								; save X on stack
.010883	aa		tax				tax 								; base in X
.010884	98		tya				tya 								; address in A
.010885	20 c8 08	jsr $0108c8			jsr 	StringToInteger
.010888	fa		plx				plx 								; restore X
.010889	95 00		sta $00,x			sta 	EXSValueL+0,x
.01088b	94 10		sty $10,x			sty 	EXSValueH+0,x
.01088d	60		rts				rts
.01088e					VALGetBase:
.01088e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010890	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010893	f0 07		beq $01089c			beq 	_VGBAlternate
.010895	20 40 04	jsr $010440			jsr 	ExpectRightBracket			; expect ), and return 10.
.010898	a9 0a 00	lda #$000a			lda 	#10
.01089b	60		rts				rts
.01089c					_VGBAlternate:
.01089c	20 49 04	jsr $010449			jsr 	ExpectComma 				; skip comma.
.01089f	20 71 02	jsr $010271			jsr 	EvaluateNextInteger 		; get base
.0108a2	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0108a5	d0 0e		bne $0108b5			bne 	_VGBBadBase
.0108a7	c9 02 00	cmp #$0002			cmp 	#2
.0108aa	90 09		bcc $0108b5			bcc 	_VGBBadBase
.0108ac	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0108af	b0 04		bcs $0108b5			bcs 	_VGBBadBase
.0108b1	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; get right bracket and return.
.0108b4	60		rts				rts
.0108b5					_VGBBadBase:
.0108b5	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>0108b8	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0108c0	65 72 20 42 61 73 65 00
.0108c8					StringToInteger:
.0108c8	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.0108ca	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.0108cc	29 ff 00	and #$00ff			and 	#$00FF
.0108cf	85 26		sta $26				sta 	DTemp3+2
.0108d1	f0 6e		beq $010941			beq 	_STIError 					; if length zero it's bad.
.0108d3	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.0108d5	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.0108d7	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.0108d9	64 0a		stz $0a				stz 	DTemp1+2
.0108db	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.0108dd	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.0108e0	48		pha				pha 								; push on stack
.0108e1	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.0108e4	d0 06		bne $0108ec			bne 	_STILoop
.0108e6	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.0108e8	c6 26		dec $26				dec 	DTemp3+2					; dec count
.0108ea	f0 55		beq $010941			beq 	_STIError 					; if only - then error.
.0108ec					_STILoop:
.0108ec	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.0108ee	20 60 09	jsr $010960			jsr 	MultiplyTemp1ByA
.0108f1	b2 24		lda ($24)			lda 	(DTemp3)
.0108f3	29 ff 00	and #$00ff			and 	#$00FF
.0108f6	20 51 09	jsr $010951			jsr 	ConvertUpperCase
.0108f9	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108fc	90 43		bcc $010941			bcc 	_STIError
.0108fe	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010901	90 0e		bcc $010911			bcc 	_STIOkay1
.010903	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010906	90 39		bcc $010941			bcc 	_STIError
.010908	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01090b	b0 34		bcs $010941			bcs 	_STIError
.01090d	18		clc				clc 								; shift to correct range.
.01090e	69 09 00	adc #$0009			adc 	#9
.010911					_STIOkay1:
.010911	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010914	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010916	b0 29		bcs $010941			bcs 	_STIError
.010918	18		clc				clc 								; add A to DTemp1
.010919	65 08		adc $08				adc 	DTemp1
.01091b	85 08		sta $08				sta 	DTemp1
.01091d	90 02		bcc $010921			bcc 	_STINoCarry
.01091f	e6 0a		inc $0a				inc 	DTemp1+2
.010921					_STINoCarry:
.010921	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010923	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010925	d0 c5		bne $0108ec			bne 	_STILoop 					; loop back.
.010927	68		pla				pla 								; get optional minus bac
.010928	c9 2d 00	cmp #$002d			cmp 	#"-"
.01092b	d0 0f		bne $01093c			bne 	_STINotNegative 			; handle the negative character
.01092d	38		sec				sec 								; negate DTemp1
.01092e	a9 00 00	lda #$0000			lda 	#0
.010931	e5 08		sbc $08				sbc 	DTemp1
.010933	85 08		sta $08				sta 	DTemp1
.010935	a9 00 00	lda #$0000			lda 	#0
.010938	e5 0a		sbc $0a				sbc 	DTemp1+2
.01093a	85 0a		sta $0a				sta 	DTemp1+2
.01093c					_STINotNegative:
.01093c	a5 08		lda $08				lda 	DTemp1 						; get the result
.01093e	a4 0a		ldy $0a				ldy 	DTemp1+2
.010940	60		rts				rts
.010941					_STIError:
.010941	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010944	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01094c	74 61 6e 74 00
.010951					ConvertUpperCase:
.010951	c9 61 00	cmp #$0061			cmp 	#'a'
.010954	90 09		bcc $01095f			bcc 	_CUCExit
.010956	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010959	b0 04		bcs $01095f			bcs 	_CUCExit
.01095b	38		sec				sec
.01095c	e9 20 00	sbc #$0020			sbc 	#32
.01095f					_CUCExit:
.01095f	60		rts				rts
.010960					MultiplyTemp1ByA:
.010960	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010963	f0 56		beq $0109bb			beq 	_MT1_16
.010965	c9 0a 00	cmp #$000a			cmp 	#10
.010968	f0 33		beq $01099d			beq 	_MT1_10
.01096a	c9 08 00	cmp #$0008			cmp 	#8
.01096d	f0 50		beq $0109bf			beq 	_MT1_8
.01096f	c9 02 00	cmp #$0002			cmp 	#2
.010972	f0 53		beq $0109c7			beq 	_MT1_2
.010974					_MTGeneral:
.010974	da		phx				phx
.010975	aa		tax				tax 								; multiplier in X
.010976	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010978	85 0c		sta $0c				sta 	DTemp2
.01097a	a5 0a		lda $0a				lda 	DTemp1+2
.01097c	85 0e		sta $0e				sta 	DTemp2+2
.01097e	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010980	64 0a		stz $0a				stz 	DTemp1+2
.010982					_MTLoop:
.010982	8a		txa				txa 								; shift X right into C
.010983	4a		lsr a				lsr 	a
.010984	aa		tax				tax
.010985	90 0d		bcc $010994			bcc 	_MTNoAdd
.010987	18		clc				clc
.010988	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01098a	65 0c		adc $0c				adc 	DTemp2
.01098c	85 08		sta $08				sta 	DTemp1
.01098e	a5 0a		lda $0a				lda 	DTemp1+2
.010990	65 0e		adc $0e				adc 	DTemp2+2
.010992	85 0a		sta $0a				sta 	DTemp1+2
.010994					_MTNoAdd:
.010994	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010996	26 0e		rol $0e				rol 	DTemp2+2
.010998	8a		txa				txa 								; until multiplier is zero.
.010999	d0 e7		bne $010982			bne 	_MTLoop
.01099b					_MTGExit:
.01099b	fa		plx				plx 								; restore X
.01099c	60		rts				rts 								; and exit
.01099d					_MT1_10:
.01099d	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.01099f	48		pha				pha
.0109a0	a5 08		lda $08				lda 	DTemp1
.0109a2	48		pha				pha
.0109a3	06 08		asl $08				asl 	DTemp1						; x 4
.0109a5	26 0a		rol $0a				rol 	DTemp1+2
.0109a7	06 08		asl $08				asl 	DTemp1
.0109a9	26 0a		rol $0a				rol 	DTemp1+2
.0109ab	68		pla				pla 								; add saved value, x 5
.0109ac	18		clc				clc
.0109ad	65 08		adc $08				adc 	DTemp1
.0109af	85 08		sta $08				sta 	DTemp1
.0109b1	68		pla				pla
.0109b2	65 0a		adc $0a				adc 	DTemp1+2
.0109b4	85 0a		sta $0a				sta 	DTemp1+2
.0109b6	06 08		asl $08				asl 	DTemp1
.0109b8	26 0a		rol $0a				rol 	DTemp1+2
.0109ba	60		rts				rts
.0109bb					_MT1_16:
.0109bb	06 08		asl $08				asl 	DTemp1
.0109bd	26 0a		rol $0a				rol 	DTemp1+2
.0109bf					_MT1_8:
.0109bf	06 08		asl $08				asl 	DTemp1
.0109c1	26 0a		rol $0a				rol 	DTemp1+2
.0109c3					_MT1_4:
.0109c3	06 08		asl $08				asl 	DTemp1
.0109c5	26 0a		rol $0a				rol 	DTemp1+2
.0109c7					_MT1_2
.0109c7	06 08		asl $08				asl 	DTemp1
.0109c9	26 0a		rol $0a				rol 	DTemp1+2
.0109cb	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.0109cc					Function_Str:
.0109cc	20 7a 04	jsr $01047a			jsr 	ResetTypeString 			; returns a string.
.0109cf	20 71 02	jsr $010271			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0109d2	48		pha				pha 								; save YA on the stack
.0109d3	5a		phy				phy
.0109d4	20 8e 08	jsr $01088e			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109d7	85 14		sta $14				sta 	DSignCount
.0109d9	7a		ply				ply 								; YA is the number
.0109da	68		pla				pla
.0109db	da		phx				phx
.0109dc	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0109de	20 e7 09	jsr $0109e7			jsr 	ConvertToString 			; convert it to a string.
.0109e1	fa		plx				plx 								; restore X
.0109e2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0109e4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109e6	60		rts				rts
.0109e7					ConvertToString:
.0109e7	da		phx				phx 								; save X
.0109e8	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0109ea	84 26		sty $26				sty 	DTemp3+2
.0109ec	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0109ee	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109f1	20 b0 04	jsr $0104b0			jsr 	StringTempAllocate 			; allocate space for return string.
.0109f4	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109f6	10 15		bpl $010a0d			bpl 	_CTSNotNegative
.0109f8	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109fb	20 75 0a	jsr $010a75			jsr 	CTSOutputA
.0109fe	38		sec				sec 								; negate DTemp3
.0109ff	a9 00 00	lda #$0000			lda 	#0
.010a02	e5 24		sbc $24				sbc 	DTemp3
.010a04	85 24		sta $24				sta 	DTemp3
.010a06	a9 00 00	lda #$0000			lda 	#0
.010a09	e5 26		sbc $26				sbc 	DTemp3+2
.010a0b	85 26		sta $26				sta 	DTemp3+2
.010a0d					_CTSNotNegative:
.010a0d	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.010a10	48		pha				pha
.010a11	a9 00 00	lda #$0000			lda 	#0
.010a14	48		pha				pha
.010a15	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.010a17	85 08		sta $08				sta 	DTemp1
.010a19	64 0a		stz $0a				stz 	DTemp1+2
.010a1b					_CTSMultiplySubtractor:
.010a1b	38		sec				sec
.010a1c	a5 24		lda $24				lda 	DTemp3
.010a1e	e5 08		sbc $08				sbc 	DTemp1
.010a20	a5 26		lda $26				lda 	DTemp3+2
.010a22	e5 0a		sbc $0a				sbc 	DTemp1+2
.010a24	90 0d		bcc $010a33			bcc		_CTSScaledUp 				; if >= then scaled up.
.010a26	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010a28	48		pha				pha
.010a29	a5 0a		lda $0a				lda 	DTemp1+2
.010a2b	48		pha				pha
.010a2c	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010a2e	20 60 09	jsr $010960			jsr 	MultiplyTemp1ByA
.010a31	80 e8		bra $010a1b			bra 	_CTSMultiplySubtractor
.010a33					_CTSScaledUp:
.010a33	7a		ply				ply 								; YA contains the previous divider.
.010a34	68		pla				pla
.010a35	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010a38	d0 05		bne $010a3f			bne 	_CTSHasDigit
.010a3a	c9 01 00	cmp #$0001			cmp 	#1 							;
.010a3d	f0 20		beq $010a5f			beq 	_CTSExit
.010a3f					_CTSHasDigit:
.010a3f	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010a41	84 0e		sty $0e				sty 	DTemp2+2
.010a43	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010a46					_CTSSubLoop:
.010a46	38		sec				sec 								; subtract subtractor from number
.010a47	a5 24		lda $24				lda 	DTemp3
.010a49	e5 0c		sbc $0c				sbc 	DTemp2
.010a4b	a8		tay				tay 								; intermediate in Y
.010a4c	a5 26		lda $26				lda 	DTemp3+2
.010a4e	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a50	90 07		bcc $010a59			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a52	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a54	84 24		sty $24				sty 	DTemp3
.010a56	e8		inx				inx 								; one more subtraction
.010a57	80 ed		bra $010a46			bra 	_CTSSubLoop 				; try it again.
.010a59					_CTSFinishedSubtracting:
.010a59	8a		txa				txa 								; convert to ASCII.
.010a5a	20 68 0a	jsr $010a68			jsr 	CTSOutputHexDigit 			; write that out.
.010a5d	80 d4		bra $010a33			bra 	_CTSScaledUp
.010a5f					_CTSExit:
.010a5f	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a61	20 68 0a	jsr $010a68			jsr 	CTSOutputHexDigit
.010a64	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a66	fa		plx				plx 								; restore X.
.010a67	60		rts				rts
.010a68					CTSOutputHexDigit:
.010a68	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a6b	90 04		bcc $010a71			bcc 	_CTSNotLetter
.010a6d	18		clc				clc
.010a6e	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a71					_CTSNotLetter:
.010a71	18		clc				clc
.010a72	69 30 00	adc #$0030			adc 	#48
.010a75					CTSOutputA:
.010a75	5a		phy				phy 								; save Y, set Y to current pointer
.010a76	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a78	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a7b	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a7d	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a7f	1a		inc a				inc 	a
.010a80	92 18		sta ($18)			sta 	(DStartTempString)
.010a82	c2 20		rep #$20			rep 	#$20
.010a84	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a86	7a		ply				ply 								; restore Y and exit.
.010a87	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a88					Function_Let:
.010a88	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a8a	48		pha				pha
.010a8b	20 d7 02	jsr $0102d7			jsr 	VariableFind 				; find the variable
.010a8e	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a90	b0 1c		bcs $010aae			bcs 	_FLetFound 					; skip if found.
.010a92	68		pla				pla 								; get and push the first token again.
.010a93	48		pha				pha
.010a94	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a97	d0 57		bne $010af0			bne 	_FLError					; arrays, so this causes an error.
.010a99	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a9b	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a9e	20 81 03	jsr $010381			jsr 	VariableCreate 				; create it.
.010aa1	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010aa3					_FLSkipToken:
.010aa3	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010aa5	e6 06		inc $06				inc 	DCodePtr
.010aa7	e6 06		inc $06				inc 	DCodePtr
.010aa9	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010aac	d0 f5		bne $010aa3			bne 	_FLSkipToken
.010aae					_FLetFound:
.010aae	68		pla				pla 								; get and save the first token.
.010aaf	48		pha				pha
.010ab0	a8		tay				tay 								; put it in Y
.010ab1	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010ab4	f0 07		beq $010abd			beq 	_FLetNotArray
.010ab6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010ab8	20 4e 03	jsr $01034e			jsr 	VariableSubscript			; index calculation
.010abb	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010abd					_FLetNotArray:
.010abd	7a		ply				ply 								; get the first token into Y
.010abe	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010ac0	48		pha				pha
.010ac1	5a		phy				phy 								; save the first token on the stack.
.010ac2	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010ac5	20 26 04	jsr $010426			jsr 	ExpectToken
.010ac8	68		pla				pla 								; restore the first token.
.010ac9	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010acc	d0 0f		bne $010add			bne 	_FLetString 				; skip if string.
.010ace	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; get an integer
.010ad1	7a		ply				ply 								; get address in Y
.010ad2	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010ad4	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010ad7	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010ad9	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010adc	60		rts				rts
.010add					_FLetString:
.010add	20 77 02	jsr $010277			jsr 	EvaluateString 				; get a string.
.010ae0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010ae2	20 ee 04	jsr $0104ee			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010ae5	7a		ply				ply 								; get address
.010ae6	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010ae9	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010aec	99 02 00	sta $0002,y			sta 	$0002,y
.010aef	60		rts				rts
.010af0					_FLError:
.010af0	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010af3	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010afb	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010b03					Function_PRINT:
.010b03	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010b05	f0 33		beq $010b3a			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010b07	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010b0a	f0 2e		beq $010b3a			beq 	_FPRExitCR
.010b0c	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010b0f	f0 23		beq $010b34			beq 	_FPRSkipLoop
.010b11	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010b14	f0 1b		beq $010b31			beq 	_FPRNewLine
.010b16	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010b19	f0 11		beq $010b2c			beq 	_FPRTab
.010b1b					_FPRExpression:
.010b1b	20 4a 01	jsr $01014a			jsr 	Evaluate 					; evaluate a string or integer.
.010b1e	b0 06		bcs $010b26			bcs 	_FPRHaveString
.010b20	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010b23	20 e7 09	jsr $0109e7			jsr 	ConvertToString
.010b26					_FPRHaveString:
.010b26	a8		tay				tay 								; print the basic String.
.010b27	20 96 04	jsr $010496			jsr 	PrintBASICString
.010b2a	80 d7		bra $010b03			bra 	Function_Print 				; and go round again.
.010b2c					_FPRTab:
.010b2c	20 94 10	jsr $011094			jsr 	HWTab
.010b2f	80 03		bra $010b34			bra 	_FPRSkipLoop
.010b31					_FPRNewLine:
.010b31	20 81 10	jsr $011081			jsr 	HWNewLine
.010b34					_FPRSkipLoop:
.010b34	e6 06		inc $06				inc 	DCodePtr
.010b36	e6 06		inc $06				inc 	DCodePtr
.010b38	80 c9		bra $010b03			bra 	Function_Print
.010b3a					_FPRExitCR:
.010b3a	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010b3c	88		dey				dey
.010b3d	88		dey				dey
.010b3e	b9 00 00	lda $0000,y			lda 	$0000,y
.010b41	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010b44	f0 08		beq $010b4e			beq 	_FPRExit
.010b46	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010b49	f0 03		beq $010b4e			beq 	_FPRExit
.010b4b	20 81 10	jsr $011081			jsr 	HWNewLine 					; print a new line.
.010b4e					_FPRExit:
.010b4e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.010b4f					Function_IF:
.010b4f	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; check success.
.010b52	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010b54	05 08		ora $08				ora 	DTemp1
.010b56	a8		tay				tay 								; success flag in Y.
.010b57	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010b59	c9 35 3a	cmp #$3a35			cmp 	#thenTokenID
.010b5c	d0 32		bne $010b90			bne 	_FIFExtended 				; if so, go to the extended IF.
.010b5e	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010b60	e6 06		inc $06				inc 	DCodePtr
.010b62	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010b65	f0 0f		beq $010b76			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010b67	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010b69	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010b6c	90 21		bcc $010b8f			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010b6e	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b71	b0 1c		bcs $010b8f			bcs 	_FIFContinue
.010b73	4c ce 0c	jmp $010cce			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010b76					_FIFEndOfLine:
.010b76	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010b78	f0 15		beq $010b8f			beq 	_FIFContinue 				; if done so, continue.
.010b7a	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010b7d	90 06		bcc $010b85			bcc 	_FIFStringConstant
.010b7f	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010b81	e6 06		inc $06				inc 	DCodePtr
.010b83	80 f1		bra $010b76			bra 	_FIFEndOfLine
.010b85					_FIFStringConstant:
.010b85	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010b88	18		clc				clc
.010b89	65 06		adc $06				adc 	DCodePtr
.010b8b	85 06		sta $06				sta 	DCodePtr
.010b8d	80 e7		bra $010b76			bra 	_FIFEndOfLine
.010b8f					_FIFContinue:
.010b8f	60		rts				rts
.010b90					_FIFExtended:
.010b90	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010b92	e6 2a		inc $2a				inc 	DStack
.010b94	a9 31 3c	lda #$3c31			lda 	#ifTokenID
.010b97	a6 2a		ldx $2a				ldx 	DStack
.010b99	95 00		sta $00,x			sta 	$00,x
.010b9b	98		tya				tya 								; see if the test was passed.
.010b9c	f0 01		beq $010b9f			beq 	_FIXSkip 					; if zero then it has failed.
.010b9e	60		rts				rts 								; test passed, so continue executing
.010b9f					_FIXSkip:
.010b9f	a9 2e 3e	lda #$3e2e			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010ba2	a2 36 3a	ldx #$3a36			ldx 	#endifTokenID 				; at the same level.
.010ba5	20 05 0c	jsr $010c05			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010ba8	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010baa	e6 06		inc $06				inc 	DCodePtr
.010bac	c9 36 3a	cmp #$3a36			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010baf	d0 04		bne $010bb5			bne 	_FIXNoThrow
.010bb1	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010bb3	c6 2a		dec $2a				dec 	DStack
.010bb5					_FIXNoThrow:
.010bb5	60		rts				rts
.010bb6					Handler_ELSE:
.010bb6	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010bb8	b5 00		lda $00,x			lda 	$00,x
.010bba	c9 31 3c	cmp #$3c31			cmp 	#ifTokenID
.010bbd	d0 12		bne $010bd1			bne 	_HEBadStructure
.010bbf	a9 36 3a	lda #$3a36			lda 	#endifTokenID 				; only searching one token.
.010bc2	a2 00 00	ldx #$0000			ldx 	#$0000
.010bc5	20 05 0c	jsr $010c05			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010bc8	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010bca	e6 06		inc $06				inc 	DCodePtr
.010bcc	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010bce	c6 2a		dec $2a				dec 	DStack
.010bd0	60		rts				rts
.010bd1					_HEBadStructure:
.010bd1	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010bd4	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010bdc	68 6f 75 74 20 49 66 00
.010be4					Handler_ENDIF:
.010be4	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010be6	b5 00		lda $00,x			lda 	$00,x
.010be8	c9 31 3c	cmp #$3c31			cmp 	#ifTokenID
.010beb	d0 05		bne $010bf2			bne 	_HEIBadStructure
.010bed	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010bef	c6 2a		dec $2a				dec 	DStack
.010bf1	60		rts				rts
.010bf2					_HEIBadStructure:
.010bf2	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010bf5	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010bfd	68 6f 75 74 20 49 66 00
.010c05					ScanForwardLevel:
.010c05	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010c07	86 0a		stx $0a				stx 	DTemp1+2
.010c09	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010c0b	85 0c		sta $0c				sta 	DTemp2
.010c0d	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010c10					_SFLLoop:
.010c10	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010c13	d0 0d		bne $010c22			bne 	_SFLNoCheck
.010c15	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010c17	f0 09		beq $010c22			beq 	_SFLNoCheck 				; don't check zero
.010c19	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010c1b	f0 04		beq $010c21			beq 	_SFLFound
.010c1d	c5 0a		cmp $0a				cmp 	DTemp1+2
.010c1f	d0 01		bne $010c22			bne 	_SFLNoCheck
.010c21					_SFLFound:
.010c21	60		rts				rts
.010c22					_SFLNoCheck:
.010c22	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010c24	f0 4f		beq $010c75			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010c26	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010c29	90 40		bcc $010c6b			bcc 	_SFLSkipString 				; then handle that.
.010c2b	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010c2d	e6 06		inc $06				inc 	DCodePtr
.010c2f	a8		tay				tay 								; put token in Y temporarily.
.010c30	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010c33	c9 00 20	cmp #$2000			cmp 	#$2000
.010c36	d0 d8		bne $010c10			bne 	_SFLLoop
.010c38	98		tya				tya 								; get the token back.
.010c39	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010c3c	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010c3f	f0 cf		beq $010c10			beq 	_SFLLoop
.010c41	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010c44	90 ca		bcc $010c10			bcc 	_SFLLoop
.010c46	e8		inx				inx 								; increment the level.
.010c47	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010c4a	f0 c4		beq $010c10			beq 	_SFLLoop
.010c4c	ca		dex				dex 								; decrement the level
.010c4d	ca		dex				dex 								; one overdoes the previous inx.
.010c4e	10 c0		bpl $010c10			bpl 	_SFLLoop 					; if gone -ve then error.
.010c50					_SFLError:
.010c50	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010c52	85 22		sta $22				sta 	DLineNumber
.010c54	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010c57	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010c5f	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010c6b					_SFLSkipString:
.010c6b	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010c6e	18		clc				clc
.010c6f	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010c71	85 06		sta $06				sta 	DCodePtr
.010c73	80 9b		bra $010c10			bra 	_SFLLoop 					; go round again.
.010c75					_SFLNextLine:
.010c75	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010c77	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010c7a	f0 d4		beq $010c50			beq 	_SFLError 					; if zero, then there's no more code to search.
.010c7c	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010c7f	85 22		sta $22				sta 	DLineNumber
.010c81	18		clc				clc
.010c82	a5 06		lda $06				lda 	DCodePtr
.010c84	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010c87	85 06		sta $06				sta 	DCodePtr
.010c89	80 85		bra $010c10			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010c8b					Function_ONGOTO:
.010c8b	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; on what GOTO :)
.010c8e	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010c91	d0 25		bne $010cb8			bne 	_FOGoFail
.010c93	c9 00 00	cmp #$0000			cmp 	#0
.010c96	f0 20		beq $010cb8			beq 	_FOGoFail 					; we start with index = 1
.010c98	48		pha				pha 								; save count.
.010c99	a9 2a 3e	lda #$3e2a			lda 	#gotoTokenID 				; expect GOTO
.010c9c	20 26 04	jsr $010426			jsr 	ExpectToken
.010c9f	fa		plx				plx 								; put count in X.
.010ca0					_FOGoLoop:
.010ca0	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010ca2	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010ca5	90 73		bcc $010d1a			bcc 	FGOFail
.010ca7	c9 00 c0	cmp #$c000			cmp 	#$C000
.010caa	b0 6e		bcs $010d1a			bcs 	FGOFail
.010cac	ca		dex				dex 								; subtract one, if done, call GOTO code
.010cad	f0 1f		beq $010cce			beq 	Function_GOTO
.010caf	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010cb1	e6 06		inc $06				inc 	DCodePtr
.010cb3	20 49 04	jsr $010449			jsr 	ExpectComma 				; expect a comma
.010cb6	80 e8		bra $010ca0			bra 	_FOGoLoop 					; and loop round.
.010cb8					_FOGoFail:
.010cb8	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010cbb	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010cc3	47 6f 74 6f 20 76 61 6c 75 65 00
.010cce					Function_GOTO:
.010cce	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010cd0	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010cd3	90 45		bcc $010d1a			bcc 	FGOFail
.010cd5	c9 00 c0	cmp #$c000			cmp 	#$C000
.010cd8	b0 40		bcs $010d1a			bcs 	FGOFail
.010cda	38		sec				sec 								; convert to 0-32767
.010cdb	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010cde	aa		tax				tax
.010cdf	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010ce2	18		clc				clc
.010ce3	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010ce5	a8		tay				tay
.010ce6					_FGOSearch:
.010ce6	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010ce9	f0 18		beq $010d03			beq 	_FGOUnknown
.010ceb	8a		txa				txa 								; does it match line number.
.010cec	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010cef	f0 08		beq $010cf9			beq 	_FGOFound 					; yes, then found.
.010cf1	98		tya				tya 								; no follow the link
.010cf2	18		clc				clc
.010cf3	79 00 00	adc $0000,y			adc 	$0000,y
.010cf6	a8		tay				tay
.010cf7	80 ed		bra $010ce6			bra 	_FGOSearch
.010cf9					_FGOFound:
.010cf9	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010cfb	98		tya				tya 								; Y + 4 is the code pointer.
.010cfc	18		clc				clc
.010cfd	69 04 00	adc #$0004			adc 	#4
.010d00	85 06		sta $06				sta 	DCodePtr
.010d02	60		rts				rts									; and continue
.010d03					_FGOUnknown:
.010d03	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010d06	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010d0e	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010d1a					FGOFail:
.010d1a	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010d1d	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010d25	20 4e 75 6d 62 65 72 00
.010d2d					Function_GOSUB:
.010d2d	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010d2f	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010d31	18		clc				clc
.010d32	69 02 00	adc #$0002			adc 	#2
.010d35	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010d37	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010d39	95 04		sta $04,x			sta 	$04,x
.010d3b	a9 2b 3e	lda #$3e2b			lda 	#gosubTokenID 				; save gosub token at +6
.010d3e	95 06		sta $06,x			sta 	$06,x
.010d40	8a		txa				txa 								; advance stack by 6.
.010d41	18		clc				clc
.010d42	69 06 00	adc #$0006			adc 	#6
.010d45	85 2a		sta $2a				sta 	DStack
.010d47	80 85		bra $010cce			bra 	Function_GOTO 				; and do a GOTO.
.010d49					Function_RETURN:
.010d49	a6 2a		ldx $2a				ldx 	DStack
.010d4b	b5 00		lda $00,x			lda 	$00,x
.010d4d	c9 2b 3e	cmp #$3e2b			cmp 	#gosubTokenID 				; check top token.
.010d50	d0 11		bne $010d63			bne 	_FRetFail
.010d52	8a		txa				txa 								; unpick stack.
.010d53	38		sec				sec
.010d54	e9 06 00	sbc #$0006			sbc 	#6
.010d57	85 2a		sta $2a				sta 	DStack
.010d59	aa		tax				tax
.010d5a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010d5c	85 06		sta $06				sta 	DCodePtr
.010d5e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010d60	85 22		sta $22				sta 	DLineNumber
.010d62	60		rts				rts
.010d63					_FRetFail:
.010d63	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010d66	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010d6e	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.010d7b					Function_REPEAT:
.010d7b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010d7d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010d7f	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010d81	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010d83	95 04		sta $04,x			sta 	$04,x
.010d85	a9 2f 3c	lda #$3c2f			lda 	#repeatTokenID 				; save repeat token at +6
.010d88	95 06		sta $06,x			sta 	$06,x
.010d8a	8a		txa				txa 								; advance stack by 6.
.010d8b	18		clc				clc
.010d8c	69 06 00	adc #$0006			adc 	#6
.010d8f	85 2a		sta $2a				sta 	DStack
.010d91	60		rts				rts
.010d92					Function_UNTIL:
.010d92	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010d94	b5 00		lda $00,x			lda 	$00,x
.010d96	c9 2f 3c	cmp #$3c2f			cmp 	#repeatTokenID
.010d99	d0 26		bne $010dc1			bne 	_FUNFail
.010d9b	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; .... until what.
.010d9e	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010da1	d0 15		bne $010db8			bne 	_FUNExit
.010da3	c9 00 00	cmp #$0000			cmp 	#0
.010da6	d0 10		bne $010db8			bne 	_FUNExit
.010da8	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010daa	38		sec				sec
.010dab	e9 06 00	sbc #$0006			sbc 	#6
.010dae	aa		tax				tax
.010daf	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010db1	85 06		sta $06				sta 	DCodePtr
.010db3	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010db5	85 22		sta $22				sta 	DLineNumber
.010db7	60		rts				rts
.010db8					_FUNExit:
.010db8	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010dba	38		sec				sec
.010dbb	e9 06 00	sbc #$0006			sbc 	#6
.010dbe	85 2a		sta $2a				sta 	DStack
.010dc0	60		rts				rts
.010dc1					_FUNFail:
.010dc1	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010dc4	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010dcc	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.010dd9					Function_WHILE:
.010dd9	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.010ddb	48		pha				pha 								; save on stack
.010ddc	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; .... until what.
.010ddf	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.010de2	d0 14		bne $010df8			bne 	_FWHExecute
.010de4	c9 00 00	cmp #$0000			cmp 	#0
.010de7	d0 0f		bne $010df8			bne 	_FWHExecute
.010de9	68		pla				pla 								; throw away current instruction
.010dea	a9 33 3a	lda #$3a33			lda 	#wendTokenID 				; skip to WEND
.010ded	a2 00 00	ldx #$0000			ldx 	#0
.010df0	20 05 0c	jsr $010c05			jsr 	ScanForwardLevel
.010df3	e6 06		inc $06				inc 	DCodePtr 					; and skip over that
.010df5	e6 06		inc $06				inc 	DCodePtr
.010df7	60		rts				rts
.010df8					_FWHExecute:
.010df8	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010dfa	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.010dfb	3a		dec a				dec 	a
.010dfc	3a		dec a				dec 	a
.010dfd	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010dff	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e01	95 04		sta $04,x			sta 	$04,x
.010e03	a9 30 3c	lda #$3c30			lda 	#whileTokenID 				; save while token at +6
.010e06	95 06		sta $06,x			sta 	$06,x
.010e08	8a		txa				txa 								; advance stack by 6.
.010e09	18		clc				clc
.010e0a	69 06 00	adc #$0006			adc 	#6
.010e0d	85 2a		sta $2a				sta 	DStack
.010e0f	60		rts				rts
.010e10					Function_WEND:
.010e10	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.010e12	b5 00		lda $00,x			lda 	$00,x
.010e14	c9 30 3c	cmp #$3c30			cmp 	#whileTokenID
.010e17	d0 11		bne $010e2a			bne 	_FWEFail
.010e19	8a		txa				txa 								; unpick stack and always loop back.
.010e1a	38		sec				sec
.010e1b	e9 06 00	sbc #$0006			sbc 	#6
.010e1e	85 2a		sta $2a				sta 	DStack
.010e20	aa		tax				tax
.010e21	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010e23	85 06		sta $06				sta 	DCodePtr
.010e25	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010e27	85 22		sta $22				sta 	DLineNumber
.010e29	60		rts				rts
.010e2a					_FWEFail:
.010e2a	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010e2d	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>010e35	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010e40					Function_END:
.010e40	02 00		cop #$00			cop 	#0
.010e42					Function_RUN:
.010e42	20 9a 0e	jsr $010e9a			jsr 	Function_CLEAR 				; clear all variables.
.010e45	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010e47	18		clc				clc
.010e48	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010e4b					_FRun_NextLineNumber:
.010e4b	a8		tay				tay 								; put in Y
.010e4c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010e4f	f0 ef		beq $010e40			beq 	Function_END 				; if zero, off the end of the program
.010e51	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010e54	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010e56	98		tya				tya 								; get address back
.010e57	18		clc				clc 								; skip over the link/line number
.010e58	69 04 00	adc #$0004			adc 	#4
.010e5b	85 06		sta $06				sta 	DCodePtr
.010e5d					_FRun_NextInstruction:
.010e5d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010e60	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010e62	38		sec				sec
.010e63	e9 00 01	sbc #$0100			sbc 	#256
.010e66	85 16		sta $16				sta 	DTempStringPointer
.010e68	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010e6a	f0 28		beq $010e94			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010e6c	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010e6f	f0 18		beq $010e89			beq 	_FRun_Colon
.010e71	a8		tay				tay 								; save in Y
.010e72	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010e75	c9 00 20	cmp #$2000			cmp 	#$2000
.010e78	d0 15		bne $010e8f			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010e7a	98		tya				tya 								; get token back
.010e7b	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010e7e	0a		asl a				asl 	a 							; double it into X
.010e7f	aa		tax				tax
.010e80	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010e82	e6 06		inc $06				inc 	DCodePtr
.010e84	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010e87	80 d4		bra $010e5d			bra 	_FRun_NextInstruction 		; do the following instruction.
.010e89					_FRun_Colon:
.010e89	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010e8b	e6 06		inc $06				inc 	DCodePtr
.010e8d	80 ce		bra $010e5d			bra 	_FRun_NextInstruction 		; do the following instruction.
.010e8f					_FRun_TryLET:
.010e8f	20 88 0a	jsr $010a88			jsr 	Function_LET 				; try as a LET.
.010e92	80 c9		bra $010e5d			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010e94					_FRun_EndInstruction:
.010e94	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010e96	1a		inc a				inc 	a 							; go to link for next line
.010e97	1a		inc a				inc 	a
.010e98	80 b1		bra $010e4b			bra 	_FRun_NextLineNumber
.010e9a					Function_CLEAR:
.010e9a	20 a6 0e	jsr $010ea6			jsr 	ClearVariablesPointersAndStacks
.010e9d	60		rts				rts
.010e9e					Function_STOP:
.010e9e	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010ea1	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010ea6					ClearVariablesPointersAndStacks:
.010ea6	a9 80 00	lda #$0080			lda 	#BASStack
.010ea9	85 2a		sta $2a				sta 	DStack
.010eab	64 80		stz $80				stz 	BASStack
.010ead	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010eb0	a9 00 00	lda #$0000			lda 	#$0000
.010eb3	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010eb5	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010eb7	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010eba	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ebc	20 e3 0e	jsr $010ee3			jsr 	FindCodeEnd 				; find where the program ends.
.010ebf	a8		tay				tay 								; Y points to it.
.010ec0	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010ec3	99 02 00	sta $0002,y			sta 	$0002,y
.010ec6	99 04 00	sta $0004,y			sta 	$0004,y
.010ec9	98		tya				tya 								; start of working memory up
.010eca	18		clc				clc
.010ecb	69 06 00	adc #$0006			adc 	#6
.010ece	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010ed1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ed3	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010ed6					_FCLoop:
.010ed6	a9 00 00	lda #$0000			lda 	#$0000
.010ed9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010edb	c8		iny				iny
.010edc	c8		iny				iny
.010edd	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010ee0	d0 f4		bne $010ed6			bne 	_FCLoop
.010ee2	60		rts				rts
.010ee3					FindCodeEnd:
.010ee3	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010ee6	18		clc				clc
.010ee7	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010ee9	a8		tay				tay
.010eea					_FCELoop:
.010eea	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010eed	f0 08		beq $010ef7			beq 	_FCEExit
.010eef	98		tya				tya 								; add offset
.010ef0	18		clc				clc
.010ef1	79 00 00	adc $0000,y			adc 	$0000,y
.010ef4	a8		tay				tay
.010ef5	80 f3		bra $010eea			bra 	_FCELoop
.010ef7					_FCEExit:
.010ef7	98		tya				tya 								; return in A
.010ef8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010ef9					Function_Dim:
.010ef9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010efb	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010efe	f0 3b		beq $010f3b			beq		_FDIMNotArray 				; no, error.
.010f00	20 d7 02	jsr $0102d7			jsr 	VariableFind 				; try to find it.
.010f03	b0 41		bcs $010f46			bcs 	_FDIMExists 				; if it does, that's an error.
.010f05	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010f07	48		pha				pha
.010f08	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010f0a	48		pha				pha
.010f0b					_FDIMSkip:
.010f0b	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010f0d	e6 06		inc $06				inc 	DCodePtr
.010f0f	e6 06		inc $06				inc 	DCodePtr
.010f11	29 00 08	and #$0800			and 	#IDContMask
.010f14	d0 f5		bne $010f0b			bne 	_FDIMSkip
.010f16	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; evaluate the size
.010f19	20 40 04	jsr $010440			jsr 	ExpectRightBracket 			; check the ) following.
.010f1c	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010f1f	d0 3b		bne $010f5c			bne 	_FDIMSize
.010f21	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010f24	f0 36		beq $010f5c			beq 	_FDIMSize
.010f26	7a		ply				ply 								; restore HashTablePtr
.010f27	84 20		sty $20				sty 	DHashTablePtr
.010f29	7a		ply				ply 								; so now A is the high index, Y points to the token
.010f2a	20 81 03	jsr $010381			jsr 	VariableCreate 				; create the variable.
.010f2d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010f2f	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010f32	d0 06		bne $010f3a			bne 	_FDIMExit
.010f34	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010f36	e6 06		inc $06				inc 	DCodePtr
.010f38	80 bf		bra $010ef9			bra 	Function_DIM 				; and do another
.010f3a					_FDIMExit:
.010f3a	60		rts				rts
.010f3b					_FDIMNotArray:
.010f3b	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010f3e	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010f46					_FDIMExists:
.010f46	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010f49	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010f51	65 64 69 6d 65 6e 73 69 6f 6e 00
.010f5c					_FDIMSize:
.010f5c	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>010f5f	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010f67	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010f6d					Function_COLLECT:
.010f6d	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010f6f	85 0c		sta $0c				sta 	DTemp2
.010f71	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010f74	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010f76	85 0e		sta $0e				sta 	DTemp2+2
.010f78	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010f7a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010f7c					_FCNextPass:
.010f7c	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010f7e	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010f80	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010f82	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010f85	18		clc				clc
.010f86	65 02		adc $02				adc 	DBaseAddress
.010f88	a8		tay				tay 								; put in Y
.010f89	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010f8c					_FCO1:
.010f8c	20 b2 0f	jsr $010fb2			jsr  	COLLECTScanVariable 		; scan that one.
.010f8f	c8		iny				iny 	 							; go to next pointer
.010f90	c8		iny				iny
.010f91	ca		dex				dex
.010f92	d0 f8		bne $010f8c			bne 	_FCO1 						; until done all 16.
.010f94	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010f97					_FCO2:
.010f97	20 c6 0f	jsr $010fc6			jsr  	COLLECTScanArray 			; scan that one.
.010f9a	c8		iny				iny 	 							; go to next pointer
.010f9b	c8		iny				iny
.010f9c	ca		dex				dex
.010f9d	d0 f8		bne $010f97			bne 	_FCO2 						; until done all 16.
.010f9f	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010fa1	f0 0e		beq $010fb1			beq		_FCExit 					; if finished then exit.
.010fa3	48		pha				pha 								; save the target address
.010fa4	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010fa6	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010fa8	20 ee 04	jsr $0104ee			jsr 	StringMakeConcrete 			; make the string concrete.
.010fab	7a		ply				ply 								; restore the string.
.010fac	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010faf	80 cb		bra $010f7c			bra		_FCNextPass
.010fb1					_FCExit:
.010fb1	60		rts				rts
.010fb2					COLLECTScanVariable:
.010fb2	da		phx				phx 								; save XY
.010fb3	5a		phy				phy
.010fb4					_CSVLoop:
.010fb4	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010fb7	f0 0a		beq $010fc3			beq 	_CSVExit
.010fb9	a8		tay				tay 								; put new address into Y
.010fba	18		clc				clc 								; which is four on.
.010fbb	69 04 00	adc #$0004			adc 	#4
.010fbe	20 e7 0f	jsr $010fe7			jsr 	COLLECTCheck
.010fc1	80 f1		bra $010fb4			bra 	_CSVLoop
.010fc3					_CSVExit:
.010fc3	7a		ply				ply
.010fc4	fa		plx				plx
.010fc5	60		rts				rts
.010fc6					COLLECTScanArray:
.010fc6	da		phx				phx 								; save XY
.010fc7	5a		phy				phy
.010fc8					_CSALoop:
.010fc8	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010fcb	f0 17		beq $010fe4			beq 	_CSAExit
.010fcd	a8		tay				tay 								; put new address in Y
.010fce	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010fd1	aa		tax				tax
.010fd2	e8		inx				inx									; +1 as one more data element.
.010fd3	98		tya				tya 								; point A to first element, at +6
.010fd4	18		clc				clc
.010fd5	69 06 00	adc #$0006			adc 	#6
.010fd8					_CSADoAllStrings:
.010fd8	20 e7 0f	jsr $010fe7			jsr 	COLLECTCheck 				; collect check the first.
.010fdb	1a		inc a				inc 	a 							; advance the pointer.
.010fdc	1a		inc a				inc 	a
.010fdd	1a		inc a				inc 	a
.010fde	1a		inc a				inc 	a
.010fdf	ca		dex				dex
.010fe0	d0 f6		bne $010fd8			bne 	_CSADoAllStrings 			; until all strings are done.
.010fe2	80 e4		bra $010fc8			bra 	_CSALoop
.010fe4					_CSAExit:
.010fe4	7a		ply				ply
.010fe5	fa		plx				plx
.010fe6	60		rts				rts
.010fe7					COLLECTCheck:
.010fe7	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010fe9	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010feb	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010fed	90 0a		bcc $010ff9			bcc 	_COCExit
.010fef	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010ff1	b0 06		bcs $010ff9			bcs 	_COCExit
.010ff3	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010ff5	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010ff7	85 14		sta $14				sta 	DSignCount
.010ff9					_COCExit:
.010ff9	a5 0a		lda $0a				lda 	DTemp1+2
.010ffb	60		rts				rts
.010ffc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010ffd					Function_ASSERT:
.010ffd	20 58 02	jsr $010258			jsr 	EvaluateInteger 			; something that returns an integer.
.011000	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011002	05 08		ora $08				ora 	Dtemp1
.011004	f0 01		beq $011007			beq 	_FAssFail
.011006	60		rts				rts
.011007					_FAssFail:
.011007	20 db 03	jsr $0103db			jsr 	ErrorHandler 						; call error routine
>01100a	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011012	61 69 6c 65 64 00
.011018					Function_CLS:
.011018	20 44 10	jsr $011044			jsr 	HWClearScreen
.01101b	60		rts				rts
.01101c					Function_REM:
.01101c	ea		nop				nop
.01101d	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01101f	f0 0b		beq $01102c			beq 	_FRemSyntax 				; if 0, syntax error
.011021	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011024	b0 06		bcs $01102c			bcs 	_FRemSyntax
.011026	18		clc				clc 								; add to DCodePtr
.011027	65 06		adc $06				adc 	DCodePtr
.011029	85 06		sta $06				sta 	DCodePtr
.01102b	60		rts				rts
.01102c					_FRemSyntax:
.01102c	82 e7 f3	brl $010416			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.01102f					SwitchBasicInstance:
.01102f	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011031	20 44 10	jsr $011044			jsr 	HWClearScreen 						; clear screen
.011034	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011037	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011039	86 02		stx $02				stx		DBaseAddress
.01103b	84 04		sty $04				sty 	DHighAddress
.01103d	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01103e	48		pha				pha 										; then copy it into B.
.01103f	ab		plb				plb
.011040	ab		plb				plb
.011041	4c 42 0e	jmp $010e42			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.011044					HWClearScreen:
.011044	48		pha				pha
.011045	da		phx				phx
.011046	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011049	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01104c	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011050	ca		dex				dex
.011051	10 f6		bpl $011049			bpl 	_CS0
.011053	64 28		stz $28				stz 	DCursor
.011055	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011058	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01105c	fa		plx				plx
.01105d	68		pla				pla
.01105e	60		rts				rts
.01105f					HWPrintChar:
.01105f	48		pha				pha
.011060	da		phx				phx
.011061	a6 28		ldx $28				ldx 	DCursor
.011063	e2 20		sep #$20			sep 	#$20
.011065	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011069	c2 20		rep #$20			rep 	#$20
.01106b	e8		inx				inx
.01106c	8a		txa				txa
.01106d	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011070	85 28		sta $28				sta 	DCursor
.011072	aa		tax				tax
.011073	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.011076	e2 20		sep #$20			sep 	#$20
.011078	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01107c	c2 20		rep #$20			rep 	#$20
.01107e	fa		plx				plx
.01107f	68		pla				pla
.011080	60		rts				rts
.011081					HWNewLine:
.011081	48		pha				pha
.011082	da		phx				phx
.011083	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011086					HWMoveCursor:
.011086	a9 20 00	lda #$0020			lda 	#32
.011089	20 5f 10	jsr $01105f			jsr 	HWPrintChar
.01108c	8a		txa				txa
.01108d	25 28		and $28				and 	DCursor
.01108f	d0 f5		bne $011086			bne 	HWMoveCursor
.011091	fa		plx				plx
.011092	68		pla				pla
.011093	60		rts				rts
.011094	48		pha		HWTab:	pha
.011095	da		phx				phx
.011096	a2 07 00	ldx #$0007			ldx 	#7
.011099	80 eb		bra $011086			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	9c 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 0a 00 19 c0 06 22
>024108	05 40 00 00 0e 00 0f 00 30 3c 19 c0 04 22 28 40
>024118	00 00 0c 00 14 00 18 c0 06 22 19 c0 00 00 0e 00
>024128	1e 00 30 3c 18 c0 05 22 00 40 00 00 12 00 28 00
>024138	29 3e 18 c0 18 32 04 00 01 20 18 32 00 00 10 00
>024148	32 00 18 c0 06 22 18 c0 0b 24 01 40 00 00 08 00
>024158	3c 00 33 3a 00 00 0c 00 41 00 29 3e 11 30 1b 32
>024168	00 00 10 00 42 00 19 c0 06 22 19 c0 0a 24 05 40
>024178	00 00 08 00 44 00 33 3a 00 00 14 00 46 00 29 3e
>024188	08 00 04 44 6f 6e 65 00 19 32 24 3e 00 00 00 00
>024198	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>0241a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2020 times (32320 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
