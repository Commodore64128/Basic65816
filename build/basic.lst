
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 19 19:47:19 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 0d 1e 01	jmp $011e0d			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	ac 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	ec 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	fc 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	0c 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	50 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	b7 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	1c 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	99 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	7b 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	36 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	36 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	b7 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	c3 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	40 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	b7 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	c8 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	da 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	51 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	31 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	0d 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	f7 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	79 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	99 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	8b 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	c3 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	f7 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	2d 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	47 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	5e 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	02 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	c0 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	41 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	d8 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	6a 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	59 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	33 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	ac 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	ac 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	ac 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	ac 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	ac 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	ac 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	ac 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	ac 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	6f 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	44 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	50 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	ab 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	ae 1a					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	3d 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	39 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	96 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	6b 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	37 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	39 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	98 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	b4 19					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	f6 18					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	ea 16					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	0a 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	22 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	36 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	ff 13					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	86 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	2a 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	c8 12					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	8e 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	e6 19					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	44 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	83 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	bf 17					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	ac 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	7b 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	fd 19					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	ac 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	18 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	3a 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	3f 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 27 03	brl $0105bd			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c bd 05	jmp $0105bd			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 23		bcc $010374			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	38		sec				sec 								; set up return string.
.010368	f0 06		beq $010370			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036a	18		clc				clc 								; returning a number, read high data word
.01036b	a0 02 00	ldy #$0002			ldy 	#2
.01036e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010370					_VANLoadLower:
.010370	a8		tay				tay 								; put A into Y (this is the high byte)
.010371	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010373	60		rts				rts
.010374					_VANError:
.010374	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010377	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01037f	20 75 6e 6b 6e 6f 77 6e 00
.010388					VariableFind:
.010388	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01038a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01038d	90 5c		bcc $0103eb			bcc 	_VFError
.01038f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010392	b0 11		bcs $0103a5			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010394	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010397	3a		dec a				dec 	a 							; now 0-25
.010398	0a		asl a				asl 	a 							; x 4 and clear carry
.010399	0a		asl a				asl 	a
.01039a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01039d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.01039f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103a1	e6 06		inc $06				inc 	DCodePtr
.0103a3	38		sec				sec 								; return with carry set.
.0103a4	60		rts				rts
.0103a5					_VFSlowVariable:
.0103a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103a7	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103aa	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103ab	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103ac	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103af	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103b1	85 08		sta $08				sta 	DTemp1
.0103b3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103b5	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103b8	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103b9	65 08		adc $08				adc 	DTemp1
.0103bb	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103bd	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103bf					_VFNext:
.0103bf	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103c1	f0 26		beq $0103e9			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103c3	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103c5	a8		tay				tay 								; read the address of the name at $0002,y
.0103c6	b9 02 00	lda $0002,y			lda 	$0002,y
.0103c9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103cb	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103ce					_VFCompare:
.0103ce	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103d0	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103d2	d0 eb		bne $0103bf			bne 	_VFNext 					; if not, go to the next one.
.0103d4	c8		iny				iny 								; advance token pointer
.0103d5	c8		iny				iny
.0103d6	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103d9	d0 f3		bne $0103ce			bne 	_VFCompare
.0103db	98		tya				tya 								; this is the length of the word.
.0103dc	18		clc				clc 								; so we add it to the code pointer
.0103dd	65 06		adc $06				adc 	DCodePtr
.0103df	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103e1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103e3	18		clc				clc 								; four on is the actual data
.0103e4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103e7	38		sec				sec 								; return with CS indicating success
.0103e8	60		rts				rts
.0103e9					_VFFail:
.0103e9	18		clc				clc
.0103ea	60		rts				rts
.0103eb					_VFError:
.0103eb	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0103ee	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103f6	76 61 72 69 61 62 6c 65 00
.0103ff					VariableSubscript:
.0103ff	48		pha				pha		 							; save variable address on stack.
.010400	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.010403	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; skip right bracket.
.010406	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010409	d0 10		bne $01041b			bne 	_VANSubscript
.01040b	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01040d	f0 02		beq $010411			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01040f	b0 0a		bcs $01041b			bcs 	_VANSubscript
.010411					_VANSubOkay:
.010411	0a		asl a				asl 	a 							; double lsword
.010412	0a		asl a				asl 	a 							; and again, also clears carry.
.010413	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010415	68		pla				pla 								; restore DVariablePtr
.010416	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010417	1a		inc a				inc 	a
.010418	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01041a	60		rts				rts
.01041b					_VANSubscript:
.01041b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01041e	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010426	79 20 53 75 62 73 63 72 69 70 74 00
.010432					VariableCreate:
.010432	48		pha				pha 								; save count.
.010433	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010436	29 00 20	and #$2000			and 	#IDTypeMask
.010439	f0 06		beq $010441			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01043b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01043e	18		clc				clc 								; which is guaranteed by have a 0 length.
.01043f	65 02		adc $02				adc 	DBaseAddress
.010441					_VCIsInteger:
.010441	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010443	68		pla				pla 								; restore count
.010444	48		pha				pha
.010445	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010446	0a		asl a				asl 	a 							; 2 x # items.
.010447	0a		asl a				asl 	a 							; 4 x # items.
.010448					_VCNotSingle:
.010448	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01044a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01044d	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010450	f0 04		beq $010456			beq 	_VCNotArray
.010452	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010454	e6 08		inc $08				inc 	DTemp1
.010456					_VCNotArray:
.010456	5a		phy				phy 								; save address of first token on stack.
.010457	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01045a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01045c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045e	18		clc				clc 								; add 4 for link and name words
.01045f	69 04 00	adc #$0004			adc 	#4
.010462	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010464	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010466	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010468					_VCErase:
.010468	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01046a	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046d	c8		iny				iny
.01046e	c8		iny				iny
.01046f	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010471	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010473	d0 f3		bne $010468			bne 	_VCErase
.010475	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010477	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010479	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01047c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.01047f	18		clc				clc
.010480	65 02		adc $02				adc 	DBaseAddress
.010482	85 08		sta $08				sta 	DTemp1
.010484	68		pla				pla 								; restore the token address
.010485	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010487	b0 03		bcs $01048c			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010489	20 9d 04	jsr $01049d			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.01048c					_VCDontClone:
.01048c	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01048f	68		pla				pla 								; restore count and store (if nonzero)
.010490	f0 03		beq $010495			beq 	_VCNotArray2
.010492	99 04 00	sta $0004,y			sta 	$0004,y
.010495					_VCNotArray2:
.010495	98		tya				tya 								; update the head link
.010496	92 20		sta ($20)			sta 	(DHashTablePtr)
.010498	18		clc				clc 								; advance pointer to the data bit.
.010499	69 04 00	adc #$0004			adc 	#4
.01049c	60		rts				rts 								; and done.
.01049d					VCCloneIdentifier:
.01049d	da		phx				phx 								; save XY
.01049e	5a		phy				phy
.01049f	aa		tax				tax 								; identifier address in Y.
.0104a0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a5	48		pha				pha
.0104a6					_VCCloneLoop:
.0104a6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ab	48		pha				pha 								; save on stack
.0104ac	1a		inc a				inc 	a 							; space for one token.
.0104ad	1a		inc a				inc 	a
.0104ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b0	7a		ply				ply 								; address of word in Y
.0104b1	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b4	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b7	e8		inx				inx 								; advance the token pointer
.0104b8	e8		inx				inx
.0104b9	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104bc	d0 e8		bne $0104a6			bne 	_VCCloneLoop
.0104be	68		pla				pla 								; restore start address
.0104bf	7a		ply				ply 								; and the others
.0104c0	fa		plx				plx
.0104c1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104c2					LineDelete:
.0104c2	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c3	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c5	18		clc				clc
.0104c6	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c9	a8		tay				tay
.0104ca					_LDLoop:
.0104ca	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104cd	f0 2d		beq $0104fc			beq 	_LDExit						; exit if zero ; line does not exist
.0104cf	8a		txa				txa 								; found a match
.0104d0	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d3	f0 08		beq $0104dd			beq		_LDFound
.0104d5	98		tya				tya 								; follow the link.
.0104d6	18		clc				clc
.0104d7	79 00 00	adc $0000,y			adc 	$0000,y
.0104da	a8		tay				tay
.0104db	80 ed		bra $0104ca			bra 	_LDLoop
.0104dd					_LDFound:
.0104dd	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104df	98		tya				tya 								; follow link to next.
.0104e0	18		clc				clc
.0104e1	79 00 00	adc $0000,y			adc 	$0000,y
.0104e4	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e6	20 80 1b	jsr $011b80			jsr 	FindCodeEnd 				; find the end of the code.
.0104e9	38		sec				sec
.0104ea	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104ec	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104ed	1a		inc a				inc 	a
.0104ee	aa		tax				tax
.0104ef	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104f2	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f4	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f6	c8		iny				iny
.0104f7	c8		iny				iny
.0104f8	ca		dex				dex
.0104f9	ca		dex				dex
.0104fa	d0 f6		bne $0104f2			bne 	_LDCopy
.0104fc					_LDExit:
.0104fc	60		rts				rts
.0104fd					LineInsert:
.0104fd	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104ff	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010501	a0 00 00	ldy #$0000			ldy 	#0
.010504					_LIFindLength:
.010504	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010506	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010509	f0 10		beq $01051b			beq 	_LIFindEnd
.01050b	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050e	90 04		bcc $010514			bcc 	_LIQString
.010510	c8		iny				iny 								; otherwise just skip it.
.010511	c8		iny				iny
.010512	80 f0		bra $010504			bra 	_LIFindLength
.010514					_LIQString:
.010514	98		tya				tya 								; skip quoted strings
.010515	18		clc				clc
.010516	71 08		adc ($08),y			adc 	(DTemp1),y
.010518	a8		tay				tay
.010519	80 e9		bra $010504			bra 	_LIFindLength
.01051b					_LIFindEnd:
.01051b	98		tya				tya 								; the tokens in the line
.01051c	18		clc				clc
.01051d	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010520	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010522	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010525	18		clc				clc
.010526	65 02		adc $02				adc 	DBaseAddress
.010528	a8		tay				tay
.010529					_LIFindInsertPoint:
.010529	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01052c	f0 0f		beq $01053d			beq		_LIFoundInsertPoint
.01052e	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010531	c5 0c		cmp $0c				cmp 	DTemp2
.010533	b0 08		bcs $01053d			bcs 	_LIFoundInsertPoint
.010535	98		tya				tya 								; if < go to the next line.
.010536	18		clc				clc
.010537	79 00 00	adc $0000,y			adc 	$0000,y
.01053a	a8		tay				tay
.01053b	80 ec		bra $010529			bra 	_LIFindInsertPoint
.01053d					_LIFoundInsertPoint:
.01053d	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053f	20 80 1b	jsr $011b80			jsr 	FindCodeEnd 				; get the end of the code.
.010542	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010544	18		clc				clc
.010545	65 24		adc $24				adc 	DTemp3
.010547	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010549					_LICopyMove:
.010549	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01054b	92 34		sta ($34)			sta 	(DTemp4+2)
.01054d	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054f	c5 36		cmp $36				cmp 	DTemp5
.010551	f0 0a		beq $01055d			beq 	_LICopyMoveOver
.010553	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010555	c6 32		dec $32				dec 	DTemp4
.010557	c6 34		dec $34				dec 	DTemp4+2
.010559	c6 34		dec $34				dec 	DTemp4+2
.01055b	80 ec		bra $010549			bra 	_LICopyMove
.01055d					_LICopyMoveOver:
.01055d	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055f	92 36		sta ($36)			sta 	(DTemp5)
.010561	a0 02 00	ldy #$0002			ldy 	#2
.010564	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010566	91 36		sta ($36),y			sta 	(DTemp5),y
.010568	a0 04 00	ldy #$0004			ldy 	#4
.01056b					_LICopyTokens:
.01056b	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056d	91 36		sta ($36),y			sta 	(DTemp5),y
.01056f	c8		iny				iny
.010570	c8		iny				iny
.010571	e6 08		inc $08				inc 	DTemp1
.010573	e6 08		inc $08				inc 	DTemp1
.010575	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010577	c6 24		dec $24				dec 	DTemp3
.010579	a5 24		lda $24				lda 	DTemp3
.01057b	c9 04 00	cmp #$0004			cmp 	#4
.01057e	d0 eb		bne $01056b			bne 	_LICopyTokens
.010580	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.010581					ErrorHandler:
.010581	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010583	fa		plx				plx 								; address of error message -1
.010584	e8		inx				inx 								; error message.
.010585	20 29 06	jsr $010629			jsr 	PrintROMMessage 			; print message in ROM
.010588	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01058a	f0 15		beq $0105a1			beq 	_EHEndMessage
.01058c	a2 a7 05	ldx #$05a7			ldx 	#_EHAt & $FFFF 				; print " at "
.01058f	20 29 06	jsr $010629			jsr 	PrintROMMessage
.010592	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010594	a0 00 00	ldy #$0000			ldy 	#0
.010597	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01059a	20 b4 10	jsr $0110b4			jsr 	ConvertToString 			; convert and print it.
.01059d	a8		tay				tay
.01059e	20 47 06	jsr $010647			jsr 	PrintBASICString
.0105a1					_EHEndMessage:
.0105a1	20 33 1d	jsr $011d33			jsr 	HWNewLine
.0105a4	4c 37 1e	jmp $011e37			jmp 	NextCommand 				; get next command.
>0105a7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105ac					IllegalToken:
.0105ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105af	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b7	54 6f 6b 65 6e 00
.0105bd					SyntaxError:
.0105bd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105c0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c8	72 72 6f 72 00
.0105cd					ExpectToken:
.0105cd	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105cf	d0 05		bne $0105d6			bne 	_CTKError					; error if not
.0105d1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105d3	e6 06		inc $06				inc 	DCodePtr
.0105d5	60		rts				rts
.0105d6					_CTKError:
.0105d6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105d9	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105e1	74 6f 6b 65 6e 00
.0105e7					ExpectRightBracket:
.0105e7	48		pha				pha
.0105e8	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105eb	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0105ee	68		pla				pla
.0105ef	60		rts				rts
.0105f0					ExpectComma:
.0105f0	48		pha				pha
.0105f1	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105f4	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0105f7	68		pla				pla
.0105f8	60		rts				rts
.0105f9					CheckBothNumeric:
.0105f9	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105fb	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105fd	30 01		bmi $010600			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105ff	60		rts				rts
.010600					_CBNFail:
.010600	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010603	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01060b	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010619					ResetTypeInteger:
.010619	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01061b	29 ff 7f	and #$7fff			and 	#$7FFF
.01061e	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010620	60		rts				rts
.010621					ResetTypeString:
.010621	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010623	09 00 80	ora #$8000			ora 	#$8000
.010626	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010628	60		rts				rts
.010629					PrintROMMessage:
.010629	48		pha				pha
.01062a	da		phx				phx
.01062b					_PRMLoop:
.01062b	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01062f	29 ff 00	and #$00ff			and 	#$00FF
.010632	f0 10		beq $010644			beq 	_PRMExit
.010634	c9 0d 00	cmp #$000d			cmp 	#13
.010637	d0 05		bne $01063e			bne 	_PRMChar
.010639	20 33 1d	jsr $011d33			jsr 	HWNewLine
.01063c	80 03		bra $010641			bra 	_PRMNext
.01063e					_PRMChar:
.01063e	20 e2 1c	jsr $011ce2			jsr 	HWPrintChar
.010641					_PRMNext:
.010641	e8		inx				inx
.010642	80 e7		bra $01062b			bra 	_PRMLoop
.010644					_PRMExit:
.010644	fa		plx				plx
.010645	68		pla				pla
.010646	60		rts				rts
.010647					PrintBASICString:
.010647	48		pha				pha
.010648	da		phx				phx
.010649	5a		phy				phy
.01064a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01064d	29 ff 00	and #$00ff			and 	#$00FF
.010650	f0 0b		beq $01065d			beq 	_PBSExit 					; null string
.010652	aa		tax				tax
.010653					_PBSLoop:
.010653	c8		iny				iny
.010654	b9 00 00	lda $0000,y			lda 	$0000,y
.010657	20 e2 1c	jsr $011ce2			jsr 	HWPrintChar
.01065a	ca		dex				dex
.01065b	d0 f6		bne $010653			bne 	_PBSLoop
.01065d					_PBSExit:
.01065d	7a		ply				ply
.01065e	fa		plx				plx
.01065f	68		pla				pla
.010660	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.010661					StringResetPermanent:
.010661	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010663	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.010664	3a		dec a				dec 	a
.010665	a8		tay				tay
.010666	48		pha				pha
.010667	a9 00 00	lda #$0000			lda 	#$0000
.01066a	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.01066d	68		pla				pla
.01066e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the start of the link
.010671	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010673	60		rts				rts
.010674					StringReassign:
.010674	da		phx				phx 								; save X.
.010675	bb		tyx				tyx 								; save the pointer to the current on X.
.010676	48		pha				pha 								; save the new string address on stack
.010677	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; address of the old string in A
.01067a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.01067d	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it first.
.01067f	90 0e		bcc $01068f			bcc 	_SRANoRelease
.010681	bc 00 00	ldy $0000,x			ldy 	@w$0000,x 					; the address of the old string
.010684	88		dey				dey 								; point to the link.
.010685	88		dey				dey
.010686	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.010689	09 00 80	ora #$8000			ora 	#$8000
.01068c	99 00 00	sta $0000,y			sta 	@w$0000,y
.01068f					_SRANoRelease:
.01068f	7a		ply				ply 								; restore and save the new string address
.010690	5a		phy				phy
.010691	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.010694	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.010697	1a		inc a				inc 	a 							; we want one more, for the length byte.
.010698	85 36		sta $36				sta 	DTemp5
.01069a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.01069d	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01069f	a8		tay				tay
.0106a0					_SRACheckUnused:
.0106a0	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset to next
.0106a3	f0 22		beq $0106c7			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106a5	10 0f		bpl $0106b6			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106a7	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size.
.0106aa	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106ac	90 08		bcc $0106b6			bcc 	_SRACheckNext 				; too small.
.0106ae	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with the bit cleared.
.0106b1	98		tya				tya 								; A is the address of the link
.0106b2	1a		inc a				inc 	a 							; add 2, it's the data.
.0106b3	1a		inc a				inc 	a
.0106b4	80 1d		bra $0106d3			bra 	_SRACopyA 					; copy there.
.0106b6					_SRACheckNext:
.0106b6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15
.0106b9	29 ff 7f	and #$7fff			and 	#$7FFF
.0106bc	85 38		sta $38				sta 	DTemp5+2 					; save it
.0106be	98		tya				tya 								; add to Y
.0106bf	18		clc				clc
.0106c0	65 38		adc $38				adc 	DTemp5+2
.0106c2	1a		inc a				inc 	a 							; add 2 more for the link itself
.0106c3	1a		inc a				inc 	a
.0106c4	a8		tay				tay
.0106c5	80 d9		bra $0106a0			bra 	_SRACheckUnused
.0106c7					_SRAAllocate:
.0106c7	7a		ply				ply 								; get the new string address back.
.0106c8	5a		phy				phy 								; push it back on the stack.
.0106c9	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106cc	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106cf	1a		inc a				inc 	a
.0106d0	20 f6 06	jsr $0106f6			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106d3					_SRACopyA:
.0106d3	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106d6	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106d9	aa		tax				tax 								; where we are copying to.
.0106da	7a		ply				ply 								; where we're coming from.
.0106db	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106de	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106e1	1a		inc a				inc 	a
.0106e2	85 36		sta $36				sta 	DTemp5 						; save counter.
.0106e4					_SRACopy:
.0106e4	e2 20		sep #$20			sep 	#$20
.0106e6	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.0106e9	9d 00 00	sta $0000,x			sta 	@W$0000,x
.0106ec	c2 20		rep #$20			rep 	#$20
.0106ee	c8		iny				iny
.0106ef	e8		inx				inx
.0106f0	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.0106f2	d0 f0		bne $0106e4			bne 	_SRACopy
.0106f4	fa		plx				plx 								; restore X and exit.
.0106f5	60		rts				rts
.0106f6					StringAllocateSpace:
.0106f6	da		phx				phx									; save XY
.0106f7	5a		phy				phy
.0106f8	48		pha				pha 								; save the length.
.0106f9	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.0106fa	1a		inc a				inc 	a
.0106fb	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.0106fe	38		sec				sec 								; add 1 (2's complement)
.0106ff	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010702	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010704	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.010706	a8		tay				tay 								; put in Y
.010707	68		pla				pla 								; restore the length
.010708	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.01070b	98		tya				tya 								; get the address back
.01070c	1a		inc a				inc 	a 							; skip over the link
.01070d	1a		inc a				inc 	a
.01070e	7a		ply				ply									; restore YX and exit.
.01070f	fa		plx				plx
.010710	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.010711					StringTempAllocate:
.010711	48		pha				pha
.010712	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010714	d0 09		bne $01071f			bne 	_STANoReset
.010716	5a		phy				phy 								; reset the temp string pointer.
.010717	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01071a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01071c	85 16		sta $16				sta 	DTempStringPointer
.01071e	7a		ply				ply
.01071f					_STANoReset:
.01071f	68		pla				pla 								; get length.
.010720	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010723	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010726	18		clc				clc 								; this adds one, for the length.
.010727	65 16		adc $16				adc 	DTempStringPointer
.010729	85 16		sta $16				sta 	DTempStringPointer
.01072b	48		pha				pha 								; save start address
.01072c	a9 00 00	lda #$0000			lda 	#$0000
.01072f	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010731	92 16		sta ($16)			sta		(DTempStringPointer)
.010733	c2 20		rep #$20			rep 	#$20
.010735	68		pla				pla 								; restore start address
.010736	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010738	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01073a	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01073c	60		rts				rts
.01073d					StringWriteCharacter:
.01073d	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.01073f	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010741	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010743	1a		inc a				inc 	a
.010744	92 18		sta ($18)			sta 	(DStartTempString)
.010746	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010748	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01074a	60		rts				rts
.01074b					StringCreateCopy:
.01074b	a8		tay				tay 								; put pointer to string in Y
.01074c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01074f	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010752	f0 17		beq $01076b			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010754	da		phx				phx 								; save X and put the character count in X
.010755	aa		tax				tax
.010756					_SCCCopy:
.010756	c8		iny				iny 								; advance and read (first time skips length)
.010757	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010759	b9 00 00	lda $0000,y			lda 	$0000,y
.01075c	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01075e	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010760	1a		inc a				inc 	a
.010761	92 18		sta ($18)			sta 	(DStartTempString)
.010763	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010765	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010767	ca		dex				dex 								; do X times
.010768	d0 ec		bne $010756			bne 	_SCCCopy
.01076a	fa		plx				plx
.01076b					_SCCExit:
.01076b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.01076c					Tokenise:
.01076c	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.01076e	84 0a		sty $0a				sty 	DTemp1+2
.010770	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010773	18		clc				clc
.010774	65 02		adc $02				adc 	DBaseAddress
.010776	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.010778	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.01077b	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.01077e					_TOKCap:
.01077e	c8		iny				iny 								; go to next
.01077f	b7 08		lda [$08],y			lda 	[DTemp1],y
.010781	29 ff 00	and #$00ff			and 	#$00FF
.010784	f0 22		beq $0107a8			beq 	_TOKEndCap
.010786	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.010789	d0 01		bne $01078c			bne 	_TOKNotQuote
.01078b	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.01078c					_TOKNotQuote:
.01078c	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.01078f	90 ed		bcc $01077e			bcc 	_TOKCap
.010791	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010794	b0 e8		bcs $01077e			bcs 	_TOKCap
.010796	8a		txa				txa 								; check if in quotes
.010797	4a		lsr a				lsr 	a
.010798	b0 e4		bcs $01077e			bcs 	_TOKCap
.01079a	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.01079c	38		sec				sec
.01079d	e9 20 00	sbc #$0020			sbc 	#32
.0107a0	e2 20		sep #$20			sep 	#$20
.0107a2	97 08		sta [$08],y			sta 	[DTemp1],y
.0107a4	c2 20		rep #$20			rep 	#$20
.0107a6	80 d6		bra $01077e			bra 	_TOKCap
.0107a8					_TOKEndCap:
.0107a8	c6 08		dec $08				dec 	DTemp1
.0107aa					_TOKMainNext:
.0107aa	e6 08		inc $08				inc 	DTemp1
.0107ac					_TOKMainLoop:
.0107ac	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107ae	29 ff 00	and #$00ff			and 	#$00FF
.0107b1	c9 20 00	cmp #$0020			cmp 	#32
.0107b4	90 1d		bcc $0107d3			bcc 	_TOKExit 					; 0-31 exit.
.0107b6	f0 f2		beq $0107aa			beq 	_TOKMainNext 				; 32 (space) skip.
.0107b8	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107bb	f0 1d		beq $0107da			beq 	_TOKString
.0107bd	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107c0	90 1d		bcc $0107df			bcc 	_TOKPunctuation
.0107c2	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107c5	90 42		bcc $010809			bcc 	_TOKNumber
.0107c7	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107ca	90 13		bcc $0107df			bcc 	_TOKPunctuation
.0107cc	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107cf	90 3d		bcc $01080e			bcc 	_TOKIdentifier
.0107d1	80 0c		bra $0107df			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107d3					_TOKExit:
.0107d3	a9 00 00	lda #$0000			lda 	#$0000
.0107d6	20 13 08	jsr $010813			jsr 	TOKWriteToken
.0107d9	60		rts				rts
.0107da					_TOKString:
.0107da	20 b1 08	jsr $0108b1			jsr 	TOKQuotedString
.0107dd	80 cd		bra $0107ac			bra 	_TOKMainLoop
.0107df					_TOKPunctuation:
.0107df	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.0107e2	20 18 09	jsr $010918			jsr 	TOKKeywordSearch
.0107e5	b0 1d		bcs $010804			bcs 	_TOKFoundPunctuation
.0107e7	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.0107ea	20 18 09	jsr $010918			jsr 	TOKKeywordSearch
.0107ed	b0 15		bcs $010804			bcs 	_TOKFoundPunctuation
.0107ef	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0107f2	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>0107fa	61 72 73 65 20 6c 69 6e 65 00
.010804					_TOKFoundPunctuation:
.010804	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; output the token and go round again.
.010807	80 a3		bra $0107ac			bra 	_TOKMainLoop
.010809					_TOKNumber:
.010809	20 32 08	jsr $010832			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01080c	80 9e		bra $0107ac			bra 	_TOKMainLoop
.01080e					_TOKIdentifier:
.01080e	20 73 09	jsr $010973			jsr 	TOKIdentifier
.010811	80 99		bra $0107ac			bra 	_TOKMainLoop
.010813					TOKWriteToken:
.010813	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010815	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010817	e6 0c		inc $0c				inc 	DTemp2
.010819	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01081b	29 ff 00	and #$00ff			and 	#$00FF
.01081e	f0 01		beq $010821			beq 	_TOKWriteOverflow
.010820	60		rts				rts
.010821					_TOKWriteOverflow:
.010821	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010824	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01082c	20 6c 6f 6e 67 00
.010832					TOKInteger:
.010832	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010834	64 26		stz $26				stz 	DTemp3+2
.010836					_TOKINLoop:
.010836	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010838	48		pha				pha
.010839	a5 24		lda $24				lda 	DTemp3
.01083b	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01083d	26 26		rol $26				rol 	DTemp3+2
.01083f	06 24		asl $24				asl 	DTemp3
.010841	26 26		rol $26				rol 	DTemp3+2
.010843	18		clc				clc
.010844	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010846	85 24		sta $24				sta 	DTemp3
.010848	68		pla				pla
.010849	65 26		adc $26				adc 	DTemp3+2
.01084b	85 26		sta $26				sta 	DTemp3+2
.01084d	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.01084f	26 26		rol $26				rol 	DTemp3+2
.010851	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010853	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010856	d0 44		bne $01089c			bne 	_TOKINSize
.010858	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01085a	29 0f 00	and #$000f			and 	#15
.01085d	18		clc				clc
.01085e	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010860	85 24		sta $24				sta 	DTemp3
.010862	90 02		bcc $010866			bcc 	_TOKINNoCarry
.010864	e6 26		inc $26				inc 	DTemp3+2
.010866					_TOKINNoCarry:
.010866	e6 08		inc $08				inc 	DTemp1 						; look at next
.010868	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01086a	29 ff 00	and #$00ff			and 	#$00FF
.01086d	c9 30 00	cmp #$0030			cmp 	#"0"
.010870	90 05		bcc $010877			bcc 	_TOKINGotInteger
.010872	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010875	90 bf		bcc $010836			bcc		_TOKINLoop
.010877					_TOKINGotInteger:
.010877	a5 24		lda $24				lda 	DTemp3 						; lower word
.010879	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.01087c	18		clc				clc
.01087d	69 00 40	adc #$4000			adc 	#$4000
.010880	48		pha				pha 								; save it.
.010881	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.010883	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.010885	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.010887	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.01088a	b0 10		bcs $01089c			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.01088c	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.01088f	f0 06		beq $010897			beq 	_TOKINNoShift 				; don't need constant shift.
.010891	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.010894	20 13 08	jsr $010813			jsr 	TOKWriteToken
.010897					_TOKINNoShift:
.010897	68		pla				pla 								; get lower its token
.010898	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; output it
.01089b	60		rts				rts
.01089c					_TOKINSize:
.01089c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01089f	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108a7	74 6f 6f 20 6c 61 72 67 65 00
.0108b1					TOKQuotedString:
.0108b1	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108b3	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108b5	85 32		sta $32				sta 	DTemp4
.0108b7	a5 0a		lda $0a				lda 	DTemp1+2
.0108b9	85 34		sta $34				sta 	DTemp4+2
.0108bb					_TOKQFindSize:
.0108bb	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108bd	e6 08		inc $08				inc 	DTemp1
.0108bf	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108c2	f0 3b		beq $0108ff			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108c4	c9 22 00	cmp #$0022			cmp 	#34
.0108c7	d0 f2		bne $0108bb			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108c9	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108cb	38		sec				sec
.0108cc	e5 32		sbc $32				sbc 	DTemp4
.0108ce	3a		dec a				dec 	a 							; one less character for closing quote
.0108cf	85 26		sta $26				sta 	DTemp3+2
.0108d1	18		clc				clc
.0108d2	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108d5	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108d8	20 13 08	jsr $010813			jsr 	TOKWriteToken
.0108db	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.0108dd	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108e0	c6 0c		dec $0c				dec 	DTemp2
.0108e2	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.0108e4	f0 0f		beq $0108f5			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.0108e6					_TOKQWriteString:
.0108e6	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.0108e8	29 ff 00	and #$00ff			and 	#$00FF
.0108eb	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; effectively a byte-write.
.0108ee	c6 0c		dec $0c				dec 	DTemp2
.0108f0	e6 32		inc $32				inc 	DTemp4 						; advance character
.0108f2	ca		dex				dex 								; do X times
.0108f3	d0 f1		bne $0108e6			bne 	_TOKQWriteString
.0108f5					_TOKQWriteEnd:
.0108f5	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.0108f7	29 01 00	and #$0001			and 	#1
.0108fa	f0 02		beq $0108fe			beq 	_TOKQExit
.0108fc	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.0108fe					_TOKQExit:
.0108fe	60		rts				rts
.0108ff					_TOQImbalance:
.0108ff	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010902	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01090a	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010918					TOKKeywordSearch:
.010918	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01091a	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01091d	85 34		sta $34				sta 	DTemp4+2
.01091f	a2 00 00	ldx #$0000			ldx 	#0
.010922					_TOKScan:
.010922	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010926	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010929	f0 46		beq $010971			beq 	_TOKFail 					; if zero then we have failed.
.01092b	3a		dec a				dec 	a 							; -1 gives the length.
.01092c	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01092e	d0 2f		bne $01095f			bne 	_TOKNext 					; no, then skip to next token.
.010930	da		phx				phx 								; save X
.010931	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010934					_TOKCompare:
.010934	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010936	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.01093a	29 ff 00	and #$00ff			and 	#$00FF
.01093d	d0 1f		bne $01095e			bne 	_TOKPopNext 				; if different, pop and goto next.
.01093f	e8		inx				inx 								; bump X and Y.
.010940	c8		iny				iny
.010941	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010943	d0 ef		bne $010934			bne 	_TOKCompare
.010945	98		tya				tya 								; add length to the text pointer
.010946	18		clc				clc
.010947	65 08		adc $08				adc 	DTemp1
.010949	85 08		sta $08				sta 	DTemp1
.01094b	fa		plx				plx 								; restore X.
.01094c	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.010950	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010953	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010954	4a		lsr a				lsr		a
.010955	4a		lsr a				lsr 	a
.010956	eb		xba				xba
.010957	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.010959	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01095c	38		sec				sec
.01095d	60		rts				rts
.01095e					_TOKPopNext:
.01095e	fa		plx				plx 								; restore X.
.01095f					_TOKNext:
.01095f	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.010963	29 0f 00	and #$000f			and 	#$000F
.010966	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.010968	8a		txa				txa
.010969	18		clc				clc
.01096a	65 14		adc $14				adc 	DSignCount
.01096c	aa		tax				tax
.01096d	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.01096f	80 b1		bra $010922			bra 	_TOKScan
.010971					_TOKFail:
.010971	18		clc				clc
.010972	60		rts				rts
.010973					TOKIdentifier:
.010973	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010975	85 24		sta $24				sta 	DTemp3
.010977					_TOKIFindLength:
.010977	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.010979	a7 08		lda [$08]			lda 	[DTemp1]
.01097b	29 ff 00	and #$00ff			and 	#$00FF
.01097e	20 1e 0a	jsr $010a1e			jsr 	TOKIsIdentifierCharacter
.010981	b0 f4		bcs $010977			bcs 	_TOKIFindLength
.010983	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.010985	38		sec				sec
.010986	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.010988	85 36		sta $36				sta 	DTemp5
.01098a	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.01098c	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.01098f	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.010991	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010993	29 ff 00	and #$00ff			and 	#$00FF
.010996	c9 24 00	cmp #$0024			cmp 	#"$"
.010999	d0 0b		bne $0109a6			bne 	_TOKINotString
.01099b	e6 08		inc $08				inc 	DTemp1 						; skip $
.01099d	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.01099f	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109a1	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109a4	85 26		sta $26				sta 	DTemp3+2
.0109a6					_TOKINotString:
.0109a6	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109a8	29 ff 00	and #$00ff			and 	#$00FF
.0109ab	c9 28 00	cmp #$0028			cmp 	#"("
.0109ae	d0 0b		bne $0109bb			bne 	_TOKINotArray
.0109b0	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109b2	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109b4	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109b6	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109b9	85 26		sta $26				sta 	DTemp3+2
.0109bb					_TOKINotArray:
.0109bb	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109bd	85 08		sta $08				sta 	DTemp1
.0109bf	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109c1	20 18 09	jsr $010918			jsr 	TOKKeywordSearch
.0109c4	90 04		bcc $0109ca			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109c6	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109c9	60		rts				rts
.0109ca					_TOKIIdentifier:
.0109ca	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109cc	e6 08		inc $08				inc 	DTemp1
.0109ce	20 0a 0a	jsr $010a0a			jsr		_TOKIToConstant 			; convert to range 0-35
.0109d1	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109d3	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109d5	f0 1d		beq $0109f4			beq 	_TOKINoSecond
.0109d7	48		pha				pha 								; save current on stack.
.0109d8	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109da	e6 08		inc $08				inc 	DTemp1
.0109dc	20 0a 0a	jsr $010a0a			jsr		_TOKIToConstant 			; convert to range 0-35
.0109df	85 14		sta $14				sta 	DSignCount 					; save it.
.0109e1	0a		asl a				asl 	a 							; x 4
.0109e2	0a		asl a				asl 	a
.0109e3	65 14		adc $14				adc 	DSignCount 					; x 5
.0109e5	0a		asl a				asl 	a 							; x 10
.0109e6	65 14		adc $14				adc 	DSignCount 					; x 11
.0109e8	0a		asl a				asl 	a 							; x 22
.0109e9	0a		asl a				asl 	a 							; x 44
.0109ea	65 14		adc $14				adc 	DSignCount 					; x 45
.0109ec	85 14		sta $14				sta 	DSignCount
.0109ee	68		pla				pla 								; get old token and add x 45
.0109ef	18		clc				clc
.0109f0	65 14		adc $14				adc 	DSignCount
.0109f2	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.0109f4					_TOKINoSecond:
.0109f4	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.0109f6	f0 03		beq $0109fb			beq 	_TOKINotLast				; if yes
.0109f8	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.0109fb					_TOKINotLast:
.0109fb	20 13 08	jsr $010813			jsr 	TOKWriteToken 				; output the token
.0109fe	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a00	d0 c8		bne $0109ca			bne 	_TOKIIdentifier
.010a02					_TOKIOut:
.010a02	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a04	18		clc				clc
.010a05	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a07	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a09	60		rts				rts
.010a0a					_TOKIToConstant:
.010a0a	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a0d	c9 41 00	cmp #$0041			cmp 	#65
.010a10	90 04		bcc $010a16			bcc 	_TOKITInteger
.010a12	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a15	60		rts				rts
.010a16					_TOKITInteger:
.010a16	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a19	18		clc				clc
.010a1a	69 1b 00	adc #$001b			adc 	#27
.010a1d	60		rts				rts
.010a1e					TOKIsIdentifierCharacter:
.010a1e	c9 30 00	cmp #$0030			cmp 	#"0"
.010a21	90 0f		bcc $010a32			bcc 	_TOKIIFail
.010a23	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a26	90 0c		bcc $010a34			bcc 	_TOKIIOk
.010a28	c9 41 00	cmp #$0041			cmp 	#"A"
.010a2b	90 05		bcc $010a32			bcc 	_TOKIIFail
.010a2d	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a30	90 02		bcc $010a34			bcc 	_TOKIIOk
.010a32					_TOKIIFail:
.010a32	18		clc				clc
.010a33	60		rts				rts
.010a34					_TOKIIOk:
.010a34	38		sec				sec
.010a35	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a36					Binary_Add:
.010a36	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a38	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a3a	30 12		bmi $010a4e		bmi 	_BATypeError
.010a3c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a3e	30 3f		bmi $010a7f		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a40	18		clc			clc 										; add the results
.010a41	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a43	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a45	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a47	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a49	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a4b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a4d	60		rts			rts
.010a4e					_BATypeError:
.010a4e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a51	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a59	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a69	65 73 00
.010a6c					_BALengthError:
.010a6c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a6f	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a77	6f 6f 20 6c 6f 6e 67 00
.010a7f					_BAConcatenateString:
.010a7f	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010a81	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010a83	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a85	85 0c		sta $0c			sta 	DTemp2
.010a87	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010a89	18		clc			clc 										; work out the total length
.010a8a	b2 08		lda ($08)		lda 	(DTemp1)
.010a8c	72 0c		adc ($0c)		adc 	(DTemp2)
.010a8e	b0 14		bcs $010aa4		bcs 	_BAConcatLengthError 				; string is too long.
.010a90	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010a92	20 11 07	jsr $010711		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010a95	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010a97	74 20		stz $20,x		stz 	EXSValueH+0,x
.010a99	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010a9b	20 4b 07	jsr $01074b		jsr 	StringCreateCopy
.010a9e	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010aa0	20 4b 07	jsr $01074b		jsr 	StringCreateCopy
.010aa3	60		rts			rts
.010aa4					_BAConcatLengthError:
.010aa4	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010aa7	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010aaf	6f 6f 20 6c 6f 6e 67 00
.010ab7					Binary_Subtract:
.010ab7	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010aba	38		sec			sec
.010abb	b5 00		lda $00,x		lda		EXSValueL+0,x
.010abd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010abf	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ac1	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ac3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ac5	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ac7	60		rts			rts
.010ac8					Binary_ShiftRight:
.010ac8	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010acb	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010acd	29 3f 00	and #$003f		and 	#63
.010ad0	f0 07		beq $010ad9		beq		_Binary_SRExit
.010ad2					_Binary_SRLoop:
.010ad2	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010ad4	76 00		ror $00,x		ror 	EXSValueL+0,x
.010ad6	3a		dec a			dec 	a
.010ad7	d0 f9		bne $010ad2		bne 	_Binary_SRLoop
.010ad9					_Binary_SRExit:
.010ad9	60		rts			rts
.010ada					Binary_ShiftLeft:
.010ada	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010add	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010adf	29 3f 00	and #$003f		and 	#63
.010ae2	f0 07		beq $010aeb		beq		_Binary_SLExit
.010ae4					_Binary_SLLoop:
.010ae4	16 00		asl $00,x		asl 	EXSValueL+0,x
.010ae6	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ae8	3a		dec a			dec 	a
.010ae9	d0 f9		bne $010ae4		bne 	_Binary_SLLoop
.010aeb					_Binary_SLExit:
.010aeb	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010aec					Binary_And:
.010aec	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010aef	b5 00		lda $00,x		lda		EXSValueL+0,x
.010af1	35 02		and $02,x		and 	EXSValueL+2,x
.010af3	95 00		sta $00,x		sta 	EXSValueL+0,x
.010af5	b5 20		lda $20,x		lda		EXSValueH+0,x
.010af7	35 22		and $22,x		and 	EXSValueH+2,x
.010af9	95 20		sta $20,x		sta 	EXSValueH+0,x
.010afb	60		rts			rts
.010afc					Binary_Or:
.010afc	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010aff	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b01	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b03	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b05	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b07	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b09	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b0b	60		rts			rts
.010b0c					Binary_Xor:
.010b0c	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010b0f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b11	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b13	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b15	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b17	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b19	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b1b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b1c					Binary_Equals:
.010b1c	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b1f	b0 0e		bcs $010b2f		bcs 	_BEString
.010b21	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b23	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b25	d0 4f		bne $010b76		bne 	Compare_Fail
.010b27	b5 20		lda $20,x		lda 	EXSValueH,x
.010b29	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b2b	d0 49		bne $010b76		bne 	Compare_Fail
.010b2d	80 3f		bra $010b6e		bra 	Compare_Succeed
.010b2f					_BEString:
.010b2f	09 00 00	ora #$0000		ora 	#$0000
.010b32	f0 3a		beq $010b6e		beq 	Compare_Succeed
.010b34	80 40		bra $010b76		bra 	Compare_Fail
.010b36					Binary_NotEquals:
.010b36	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b39	b0 0e		bcs $010b49		bcs 	_BNEString
.010b3b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b3d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b3f	d0 2d		bne $010b6e		bne 	Compare_Succeed
.010b41	b5 20		lda $20,x		lda 	EXSValueH,x
.010b43	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b45	d0 27		bne $010b6e		bne 	Compare_Succeed
.010b47	80 2d		bra $010b76		bra 	Compare_Fail
.010b49					_BNEString:
.010b49	09 00 00	ora #$0000		ora 	#$0000
.010b4c	d0 20		bne $010b6e		bne 	Compare_Succeed
.010b4e	80 26		bra $010b76		bra 	Compare_Fail
.010b50					Binary_Less:
.010b50	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b53	b0 12		bcs $010b67		bcs 	_BLString
.010b55	38		sec			sec
.010b56	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b58	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b5a	b5 20		lda $20,x		lda 	EXSValueH,x
.010b5c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b5e	50 03		bvc $010b63		bvc 	*+5
.010b60	49 00 80	eor #$8000		eor 	#$8000
.010b63	30 09		bmi $010b6e		bmi 	Compare_Succeed
.010b65	80 0f		bra $010b76		bra 	Compare_Fail
.010b67					_BLString:
.010b67	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b6a	f0 02		beq $010b6e		beq 	Compare_Succeed
.010b6c	80 08		bra $010b76		bra 	Compare_Fail
.010b6e					Compare_Succeed:
.010b6e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b71	95 00		sta $00,x		sta 	EXSValueL,x
.010b73	95 20		sta $20,x		sta 	EXSValueH,x
.010b75	60		rts			rts
.010b76					Compare_Fail:
.010b76	74 00		stz $00,x		stz 	EXSValueL,x
.010b78	74 20		stz $20,x		stz 	EXSValueH,x
.010b7a	60		rts			rts
.010b7b					Binary_GreaterEqual:
.010b7b	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b7e	b0 12		bcs $010b92		bcs 	_BGEString
.010b80	38		sec			sec
.010b81	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010b83	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b85	b5 20		lda $20,x		lda 	EXSValueH,x
.010b87	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b89	50 03		bvc $010b8e		bvc 	*+5
.010b8b	49 00 80	eor #$8000		eor 	#$8000
.010b8e	10 de		bpl $010b6e		bpl 	Compare_Succeed
.010b90	80 e4		bra $010b76		bra 	Compare_Fail
.010b92					_BGEString:
.010b92	09 00 00	ora #$0000		ora 	#$0000
.010b95	10 d7		bpl $010b6e		bpl 	Compare_Succeed
.010b97	80 dd		bra $010b76		bra 	Compare_Fail
.010b99					Binary_LessEqual:
.010b99	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b9c	b0 12		bcs $010bb0		bcs 	_BLEString
.010b9e	18		clc			clc 									; numeric <= signed
.010b9f	b5 00		lda $00,x		lda 	EXSValueL,x
.010ba1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ba3	b5 20		lda $20,x		lda 	EXSValueH,x
.010ba5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ba7	50 03		bvc $010bac		bvc 	*+5
.010ba9	49 00 80	eor #$8000		eor 	#$8000
.010bac	30 c0		bmi $010b6e		bmi 	Compare_Succeed
.010bae	80 c6		bra $010b76		bra 	Compare_Fail
.010bb0					_BLEString:
.010bb0	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bb3	d0 b9		bne $010b6e		bne 	Compare_Succeed
.010bb5	80 bf		bra $010b76		bra 	Compare_Fail
.010bb7					Binary_Greater:
.010bb7	20 d5 0b	jsr $010bd5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bba	b0 12		bcs $010bce		bcs 	_BGString
.010bbc	18		clc			clc 									; numeric > signed
.010bbd	b5 00		lda $00,x		lda 	EXSValueL,x
.010bbf	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc1	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bc5	50 03		bvc $010bca		bvc 	*+5
.010bc7	49 00 80	eor #$8000		eor 	#$8000
.010bca	10 a2		bpl $010b6e		bpl 	Compare_Succeed
.010bcc	80 a8		bra $010b76		bra 	Compare_Fail
.010bce					_BGString:
.010bce	c9 01 00	cmp #$0001		cmp 	#$0001
.010bd1	f0 9b		beq $010b6e		beq 	Compare_Succeed
.010bd3	80 a1		bra $010b76		bra 	Compare_Fail
.010bd5					CompareTypeCheck:
.010bd5	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010bd7	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010bd9	30 06		bmi $010be1		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010bdb	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010bdd	30 1c		bmi $010bfb		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010bdf	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010be0	60		rts			rts
.010be1					_CTCFail:
.010be1	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010be4	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010bec	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010bfb					_CTCStringCompare:
.010bfb	20 19 06	jsr $010619		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010bfe	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c00	85 08		sta $08			sta 	DTemp1
.010c02	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c04	85 0c		sta $0c			sta 	DTemp2
.010c06	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c09	a8		tay			tay
.010c0a	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c0c	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c0e	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c10	90 02		bcc $010c14		bcc 	_CTCSmallest
.010c12	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c14					_CTCSmallest:
.010c14	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c16					_CTCCompare:
.010c16	c8		iny			iny 									; look at next character (done first, first char is size)
.010c17	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c19	30 16		bmi $010c31		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c1b	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c1d	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c1f	f0 f5		beq $010c16		beq 	_CTCCompare 					; if zero, try the next character.
.010c21	b0 07		bcs $010c2a		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c23					_CTCLess:
.010c23	c2 20		rep #$20		rep 	#$20
.010c25	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c28	80 14		bra $010c3e		bra 	_CTCExit
.010c2a					_CTCGreater:
.010c2a	c2 20		rep #$20		rep 	#$20
.010c2c	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c2f	80 0d		bra $010c3e		bra 	_CTCExit
.010c31					_CTCEqualSoFar:
.010c31	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c33	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c35	90 ec		bcc $010c23		bcc 	_CTCLess
.010c37	d0 f1		bne $010c2a		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c39	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c3b	a9 00 00	lda #$0000		lda 	#$0000
.010c3e					_CTCExit:
.010c3e	38		sec			sec 									; return with CS indicating string comparison.
.010c3f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c40					Binary_Divide:
.010c40	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010c43	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c45	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c47	d0 14		bne $010c5d		bne 	_BinaryDivide_Ok
.010c49	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010c4c	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c54	20 62 79 20 7a 65 72 6f 00
.010c5d					_BinaryDivide_Ok:
.010c5d	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c5f	64 0a		stz $0a			stz 	DTemp1+2
.010c61	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c63	5a		phy			phy 										; save Y (bit counter)
.010c64	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c66	10 07		bpl $010c6f		bpl 	_BinaryDivide_RightDone
.010c68	e8		inx			inx
.010c69	e8		inx			inx
.010c6a	20 a5 0c	jsr $010ca5		jsr 	Binary_DivNegate
.010c6d	ca		dex			dex
.010c6e	ca		dex			dex
.010c6f					_BinaryDivide_RightDone:
.010c6f	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c71	10 03		bpl $010c76		bpl 	_BinaryDivide_LeftDone
.010c73	20 a5 0c	jsr $010ca5		jsr 	Binary_DivNegate
.010c76					_BinaryDivide_LeftDone:
.010c76	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c79					_BinaryDivide_Loop:
.010c79	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c7b	36 20		rol $20,x		rol 	EXSValueH+0,x
.010c7d	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010c7f	26 0a		rol $0a			rol 	DTemp1+2
.010c81	38		sec			sec											; calculate A-M
.010c82	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010c84	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c86	85 0c		sta $0c			sta 	DTemp2
.010c88	a5 0a		lda $0a			lda 	DTemp1+2
.010c8a	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c8c	90 08		bcc $010c96		bcc 	_Binary_NoSubract 					; if A < M skip this
.010c8e	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010c90	a5 0c		lda $0c			lda 	DTemp2
.010c92	85 08		sta $08			sta 	DTemp1+0
.010c94	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010c96					_Binary_NoSubract:
.010c96	88		dey			dey 										; do it 32 times.
.010c97	d0 e0		bne $010c79		bne 	_BinaryDivide_Loop
.010c99					_BinaryDivide_Exit:
.010c99	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010c9b	29 01 00	and #$0001		and 	#1
.010c9e	f0 03		beq $010ca3		beq 	_BinaryDivide_Exit2
.010ca0	20 a5 0c	jsr $010ca5		jsr 	Binary_DivNegate
.010ca3					_BinaryDivide_Exit2:
.010ca3	7a		ply			ply 										; restore Y
.010ca4	60		rts			rts
.010ca5					Binary_DivNegate:
.010ca5	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010ca7	38		sec			sec 										; negate the value at stack X.
.010ca8	a9 00 00	lda #$0000		lda 	#$0000
.010cab	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cad	95 00		sta $00,x		sta 	EXSValueL+0,x
.010caf	a9 00 00	lda #$0000		lda 	#$0000
.010cb2	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cb4	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cb6	60		rts			rts
.010cb7					Binary_Modulus:
.010cb7	20 40 0c	jsr $010c40		jsr 	Binary_Divide 						; do the divide
.010cba	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cbc	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cbe	a5 0a		lda $0a			lda 	DTemp1+2
.010cc0	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cc2	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010cc3					Binary_Multiply:
.010cc3	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010cc6	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010cc8	85 08		sta $08			sta 	DTemp1
.010cca	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010ccc	85 0a		sta $0a			sta		DTemp1+2
.010cce	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010cd0	74 20		stz $20,x		stz 	EXSValueH+0,x
.010cd2					_BinaryMultiply_Loop:
.010cd2	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010cd4	05 0a		ora $0a			ora 	DTemp1+2
.010cd6	f0 1e		beq $010cf6		beq 	_BinaryMultiply_Exit
.010cd8	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010cda	29 01 00	and #$0001		and 	#1
.010cdd	f0 0d		beq $010cec		beq 	_BinaryMultiply_NoAdd
.010cdf	18		clc			clc 										; add multiplicand to result.
.010ce0	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010ce2	75 02		adc $02,x		adc 	EXSValueL+2,x
.010ce4	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ce6	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010ce8	75 22		adc $22,x		adc 	EXSValueH+2,x
.010cea	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cec					_BinaryMultiply_NoAdd:
.010cec	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010cee	66 08		ror $08			ror 	DTemp1
.010cf0	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010cf2	36 22		rol $22,x		rol 	EXSValueH+2,x
.010cf4	80 dc		bra $010cd2		bra 	_BinaryMultiply_Loop 				; go round again.
.010cf6					_BinaryMultiply_Exit:
.010cf6	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010cf7					Function_Len:
.010cf7	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010cfa	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010cfd	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d00	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d02	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d05	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d08	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d0a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d0c	60		rts				rts
.010d0d					Function_Abs:
.010d0d	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010d10	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d13	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d16	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d18	30 07		bmi $010d21			bmi 	_FAbsNegative 				; negate it if negative
.010d1a	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d1c	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d1e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d20	60		rts				rts
.010d21					_FAbsNegative:
.010d21	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d22	a9 00 00	lda #$0000			lda 	#0
.010d25	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d27	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d29	a9 00 00	lda #$0000			lda 	#0
.010d2c	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d2e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d30	60		rts				rts
.010d31					Function_Sgn:
.010d31	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns integer
.010d34	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d37	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d3a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d3c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d3e	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d40	30 07		bmi $010d49			bmi 	_FSgnNegative 				; set to -1 if signed
.010d42	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d44	f0 02		beq $010d48			beq 	_FSgnExit
.010d46	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d48					_FSgnExit:
.010d48	60		rts				rts
.010d49					_FSgnNegative:
.010d49	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d4c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d4e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d50	60		rts				rts
.010d51					Function_Random:
.010d51	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d54	20 19 06	jsr $010619			jsr 	ResetTypeInteger
.010d57	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d59	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d5b	d0 0a		bne $010d67			bne 	_Rnd_NotZero
.010d5d	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d60	85 10		sta $10				sta 	DRandom
.010d62	a9 ea 00	lda #$00ea			lda 	#$EA
.010d65	85 12		sta $12				sta 	DRandom+2
.010d67					_Rnd_NotZero:
.010d67	20 72 0d	jsr $010d72			jsr 	_Rnd_Process 				; call randomiser twice
.010d6a	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d6c	20 72 0d	jsr $010d72			jsr 	_Rnd_Process
.010d6f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d71	60		rts				rts
.010d72					_Rnd_Process:
.010d72	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d74	26 12		rol $12				rol 	DRandom+2
.010d76	90 0e		bcc $010d86			bcc 	_Rnd_Exit
.010d78	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d7a	49 54 d4	eor #$d454			eor 	#$D454
.010d7d	85 10		sta $10				sta 	DRandom
.010d7f	a5 12		lda $12				lda 	DRandom+2
.010d81	49 d5 55	eor #$55d5			eor 	#$55D5
.010d84	85 12		sta $12				sta 	DRandom+2
.010d86					_Rnd_Exit:
.010d86	a5 10		lda $10				lda 	DRandom
.010d88	45 12		eor $12				eor 	DRandom+2
.010d8a	60		rts				rts
.010d8b					Function_Chr:
.010d8b	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string
.010d8e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010d91	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d94	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d97	d0 12		bne $010dab			bne 	_FCHBad
.010d99	48		pha				pha  								; save char # on stack
.010d9a	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010d9d	20 11 07	jsr $010711			jsr 	StringTempAllocate
.010da0	68		pla				pla 								; restore character number
.010da1	20 3d 07	jsr $01073d			jsr 	StringWriteCharacter 		; write it out.
.010da4	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010da6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010da8	74 20		stz $20,x			stz 	EXSValueH+0,x
.010daa	60		rts				rts
.010dab					_FCHBad:
.010dab	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010dae	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010db6	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010dc3					Function_Asc:
.010dc3	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010dc6	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010dc9	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010dcc	a8		tay				tay 								; string address in Y
.010dcd	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010dd0	29 ff 00	and #$00ff			and 	#$00FF
.010dd3	f0 0b		beq $010de0			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010dd5	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010dd8	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010ddb	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010ddd	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ddf	60		rts				rts
.010de0					_FASBad:
.010de0	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010de3	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010deb	65 20 66 6f 72 20 61 73 63 28 29 00
.010df7					Function_SPC:
.010df7	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string
.010dfa	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010dfd	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010e00	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e03	d0 17		bne $010e1c			bne 	_FSPBad
.010e05	48		pha				pha 								; save length
.010e06	20 11 07	jsr $010711			jsr 	StringTempAllocate 			; allocate character space
.010e09	7a		ply				ply 								; get count in Y
.010e0a	f0 09		beq $010e15			beq 	_FSPExit 					; if zero, just empty string
.010e0c					_FSPCopy:
.010e0c	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e0f	20 3d 07	jsr $01073d			jsr 	StringWriteCharacter 		; write it out.
.010e12	88		dey				dey
.010e13	d0 f7		bne $010e0c			bne 	_FSPCopy	 				; do it Y times
.010e15					_FSPExit:
.010e15	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e17	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e19	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e1b	60		rts				rts
.010e1c					_FSPBad:
.010e1c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010e1f	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e27	65 20 66 6f 72 20 73 70 63 28 29 00
.010e33					Function_Inkey:
.010e33	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010e36	20 19 06	jsr $010619			jsr 	ResetTypeInteger
.010e39	20 54 1d	jsr $011d54			jsr 	HWInkey 					; read current key
.010e3c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e3e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e40	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e41					Function_LEFT:
.010e41	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010e44	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e47	48		pha				pha 								; save string on stack.
.010e48	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get count
.010e4b	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e4e	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e51	d0 6d		bne $010ec0			bne 	FNStringParameter
.010e53	85 08		sta $08				sta 	DTemp1 						; save count.
.010e55	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010e58	7a		ply				ply 								; Y points to string.
.010e59	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e5c	29 ff 00	and #$00ff			and 	#$00FF
.010e5f	f0 52		beq $010eb3			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e61	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e63	f0 55		beq $010eba			beq 	FNStringY 					; return string in Y if current len = required len.
.010e65	90 53		bcc $010eba			bcc 	FNStringY 					; if current < required return whole thing.
.010e67	c8		iny				iny 								; take from here - start of string
.010e68	80 33		bra $010e9d			bra 	FNDTemp1Characters
.010e6a					Function_RIGHT:
.010e6a	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010e6d	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e70	48		pha				pha 								; save string on stack.
.010e71	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get count
.010e74	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e77	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e7a	d0 44		bne $010ec0			bne 	FNStringParameter
.010e7c	85 08		sta $08				sta 	DTemp1 						; save count.
.010e7e	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010e81	7a		ply				ply 								; Y points to string.
.010e82	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e85	29 ff 00	and #$00ff			and 	#$00FF
.010e88	f0 29		beq $010eb3			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e8a	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e8c	f0 2c		beq $010eba			beq 	FNStringY 					; return string in Y if current len = required len.
.010e8e	90 2a		bcc $010eba			bcc 	FNStringY 					; if current < required return whole thing.
.010e90	38		sec				sec 								; current-required is the number to skip
.010e91	e5 08		sbc $08				sbc 	DTemp1
.010e93	85 0a		sta $0a				sta 	DTemp1+2
.010e95	98		tya				tya
.010e96	18		clc				clc
.010e97	65 0a		adc $0a				adc 	DTemp1+2
.010e99	a8		tay				tay
.010e9a	c8		iny				iny 								; +1 for the count.
.010e9b	80 00		bra $010e9d			bra 	FNDTemp1Characters
.010e9d					FNDTemp1Characters:
.010e9d	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010e9f	f0 12		beq $010eb3			beq 	FNStringEmpty 				; if zero, return empty string.
.010ea1	20 11 07	jsr $010711			jsr 	StringTempAllocate
.010ea4	48		pha				pha 								; save the address
.010ea5					_FND1Loop:
.010ea5	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ea8	20 3d 07	jsr $01073d			jsr 	StringWriteCharacter
.010eab	c8		iny				iny
.010eac	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010eae	d0 f5		bne $010ea5			bne 	_FND1Loop
.010eb0	7a		ply				ply 								; string address in Y
.010eb1	80 07		bra $010eba			bra 	FNStringY
.010eb3					FNStringEmpty:
.010eb3	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010eb6	20 11 07	jsr $010711			jsr 	StringTempAllocate 			; put address of it in Y
.010eb9	a8		tay				tay
.010eba					FNStringY:
.010eba	98		tya				tya
.010ebb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ebd	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ebf	60		rts				rts
.010ec0					FNStringParameter:
.010ec0	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010ec3	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010ecb	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010ed8					Function_MID:
.010ed8	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010edb	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ede	48		pha				pha 								; save string on stack.
.010edf	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get offset (n)
.010ee2	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010ee5	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ee8	d0 d6		bne $010ec0			bne 	FNStringParameter
.010eea	c9 00 00	cmp #$0000			cmp 	#0
.010eed	f0 d1		beq $010ec0			beq 	FNStringParameter 			; or zero
.010eef	48		pha				pha 								; save start position on stack.
.010ef0	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010ef3	85 08		sta $08				sta 	DTemp1
.010ef5	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010ef7	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010efa	d0 0e		bne $010f0a			bne 	_FMINoThird
.010efc	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010efe	e6 06		inc $06				inc 	DCodePtr
.010f00	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f03	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f06	d0 b8		bne $010ec0			bne 	FNStringParameter
.010f08	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f0a					_FMINoThird:
.010f0a	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010f0d	68		pla				pla 								; get offset position
.010f0e	85 0c		sta $0c				sta 	DTemp2
.010f10	7a		ply				ply 								; get address of string in Y
.010f11	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f14	29 ff 00	and #$00ff			and 	#$00FF
.010f17	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f19	90 98		bcc $010eb3			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f1b	38		sec				sec 								; calculate number of characters left after
.010f1c	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f1e	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f1f	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f21	b0 02		bcs $010f25			bcs 	_FMISufficient
.010f23	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f25					_FMISufficient:
.010f25	98		tya				tya 								; get address
.010f26	18		clc				clc
.010f27	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f29	a8		tay				tay 								; put in Y
.010f2a	82 70 ff	brl $010e9d			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f2d					Function_Peek:
.010f2d	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f30	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f33	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f36	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f38	84 0a		sty $0a				sty 	DTemp1+2
.010f3a	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f3d	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f3f	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f42	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f44	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f46	60		rts				rts
.010f47					Function_Deek:
.010f47	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f4a	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f4d	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f50	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f52	84 0a		sty $0a				sty 	DTemp1+2
.010f54	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f57	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f59	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f5b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f5d	60		rts				rts
.010f5e					Function_Leek:
.010f5e	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f61	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f64	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f67	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f69	84 0a		sty $0a				sty 	DTemp1+2
.010f6b	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f6e	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f70	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f72	c8		iny				iny
.010f73	c8		iny				iny
.010f74	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f76	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f78	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010f79					Function_VAL:
.010f79	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f7c	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f7f	48		pha				pha 								; put string address on stack.
.010f80	20 90 0f	jsr $010f90			jsr 	VALGetBase 					; process , base (shared with STR$())
.010f83	7a		ply				ply 								; get string address back
.010f84	da		phx				phx 								; save X on stack
.010f85	aa		tax				tax 								; base in X
.010f86	98		tya				tya 								; address in A
.010f87	20 ca 0f	jsr $010fca			jsr 	StringToInteger
.010f8a	fa		plx				plx 								; restore X
.010f8b	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f8d	94 20		sty $20,x			sty 	EXSValueH+0,x
.010f8f	60		rts				rts
.010f90					VALGetBase:
.010f90	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010f92	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010f95	f0 07		beq $010f9e			beq 	_VGBAlternate
.010f97	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket			; expect ), and return 10.
.010f9a	a9 0a 00	lda #$000a			lda 	#10
.010f9d	60		rts				rts
.010f9e					_VGBAlternate:
.010f9e	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; skip comma.
.010fa1	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fa4	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fa7	d0 0e		bne $010fb7			bne 	_VGBBadBase
.010fa9	c9 02 00	cmp #$0002			cmp 	#2
.010fac	90 09		bcc $010fb7			bcc 	_VGBBadBase
.010fae	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fb1	b0 04		bcs $010fb7			bcs 	_VGBBadBase
.010fb3	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fb6	60		rts				rts
.010fb7					_VGBBadBase:
.010fb7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010fba	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fc2	65 72 20 42 61 73 65 00
.010fca					StringToInteger:
.010fca	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fcc	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010fce	29 ff 00	and #$00ff			and 	#$00FF
.010fd1	85 26		sta $26				sta 	DTemp3+2
.010fd3	f0 6e		beq $011043			beq 	_STIError 					; if length zero it's bad.
.010fd5	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010fd7	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010fd9	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010fdb	64 0a		stz $0a				stz 	DTemp1+2
.010fdd	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010fdf	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010fe2	48		pha				pha 								; push on stack
.010fe3	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010fe6	d0 06		bne $010fee			bne 	_STILoop
.010fe8	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010fea	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010fec	f0 55		beq $011043			beq 	_STIError 					; if only - then error.
.010fee					_STILoop:
.010fee	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010ff0	20 62 10	jsr $011062			jsr 	MultiplyTemp1ByA
.010ff3	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010ff5	29 ff 00	and #$00ff			and 	#$00FF
.010ff8	20 53 10	jsr $011053			jsr 	ConvertUpperCase	 		; make U/C
.010ffb	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010ffe	90 43		bcc $011043			bcc 	_STIError
.011000	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011003	90 0e		bcc $011013			bcc 	_STIOkay1
.011005	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011008	90 39		bcc $011043			bcc 	_STIError
.01100a	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01100d	b0 34		bcs $011043			bcs 	_STIError
.01100f	18		clc				clc 								; shift to correct range.
.011010	69 09 00	adc #$0009			adc 	#9
.011013					_STIOkay1:
.011013	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011016	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011018	b0 29		bcs $011043			bcs 	_STIError
.01101a	18		clc				clc 								; add A to DTemp1
.01101b	65 08		adc $08				adc 	DTemp1
.01101d	85 08		sta $08				sta 	DTemp1
.01101f	90 02		bcc $011023			bcc 	_STINoCarry
.011021	e6 0a		inc $0a				inc 	DTemp1+2
.011023					_STINoCarry:
.011023	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011025	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011027	d0 c5		bne $010fee			bne 	_STILoop 					; loop back.
.011029	68		pla				pla 								; get optional minus bac
.01102a	c9 2d 00	cmp #$002d			cmp 	#"-"
.01102d	d0 0f		bne $01103e			bne 	_STINotNegative 			; handle the negative character
.01102f	38		sec				sec 								; negate DTemp1
.011030	a9 00 00	lda #$0000			lda 	#0
.011033	e5 08		sbc $08				sbc 	DTemp1
.011035	85 08		sta $08				sta 	DTemp1
.011037	a9 00 00	lda #$0000			lda 	#0
.01103a	e5 0a		sbc $0a				sbc 	DTemp1+2
.01103c	85 0a		sta $0a				sta 	DTemp1+2
.01103e					_STINotNegative:
.01103e	a5 08		lda $08				lda 	DTemp1 						; get the result
.011040	a4 0a		ldy $0a				ldy 	DTemp1+2
.011042	60		rts				rts
.011043					_STIError:
.011043	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011046	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01104e	74 61 6e 74 00
.011053					ConvertUpperCase:
.011053	c9 61 00	cmp #$0061			cmp 	#'a'
.011056	90 09		bcc $011061			bcc 	_CUCExit
.011058	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01105b	b0 04		bcs $011061			bcs 	_CUCExit
.01105d	38		sec				sec
.01105e	e9 20 00	sbc #$0020			sbc 	#32
.011061					_CUCExit:
.011061	60		rts				rts
.011062					MultiplyTemp1ByA:
.011062					_MTGeneral:
.011062	da		phx				phx
.011063	aa		tax				tax 								; multiplier in X
.011064	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011066	85 0c		sta $0c				sta 	DTemp2
.011068	a5 0a		lda $0a				lda 	DTemp1+2
.01106a	85 0e		sta $0e				sta 	DTemp2+2
.01106c	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.01106e	64 0a		stz $0a				stz 	DTemp1+2
.011070	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011073					_MTLoop:
.011073	8a		txa				txa 								; shift X right into C
.011074	4a		lsr a				lsr 	a
.011075	aa		tax				tax
.011076	90 10		bcc $011088			bcc 	_MTNoAdd
.011078	18		clc				clc
.011079	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01107b	65 0c		adc $0c				adc 	DTemp2
.01107d	85 08		sta $08				sta 	DTemp1
.01107f	a5 0a		lda $0a				lda 	DTemp1+2
.011081	65 0e		adc $0e				adc 	DTemp2+2
.011083	85 0a		sta $0a				sta 	DTemp1+2
.011085	90 01		bcc $011088			bcc 	_MTNoAdd
.011087	c8		iny				iny
.011088					_MTNoAdd:
.011088	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01108a	26 0e		rol $0e				rol 	DTemp2+2
.01108c	90 01		bcc $01108f			bcc 	_MTNoOverflow
.01108e	c8		iny				iny
.01108f					_MTNoOverflow:
.01108f	8a		txa				txa 								; until multiplier is zero.
.011090	d0 e1		bne $011073			bne 	_MTLoop
.011092	98		tya				tya
.011093	18		clc				clc
.011094	69 ff ff	adc #$ffff			adc 	#$FFFF
.011097	fa		plx				plx 								; restore X
.011098	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.011099					Function_Str:
.011099	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.01109c	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01109f	48		pha				pha 								; save YA on the stack
.0110a0	5a		phy				phy
.0110a1	20 90 0f	jsr $010f90			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110a4	85 14		sta $14				sta 	DSignCount
.0110a6	7a		ply				ply 								; YA is the number
.0110a7	68		pla				pla
.0110a8	da		phx				phx
.0110a9	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110ab	20 b4 10	jsr $0110b4			jsr 	ConvertToString 			; convert it to a string.
.0110ae	fa		plx				plx 								; restore X
.0110af	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110b1	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110b3	60		rts				rts
.0110b4					ConvertToString:
.0110b4	48		pha				pha
.0110b5	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110b8	20 11 07	jsr $010711			jsr 	StringTempAllocate 			; allocate space for return string.
.0110bb	68		pla				pla
.0110bc					ConvertToStringAlreadyAllocated:
.0110bc	da		phx				phx 								; save X (base)
.0110bd	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110bf	84 26		sty $26				sty 	DTemp3+2
.0110c1	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110c3	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110c5	10 15		bpl $0110dc			bpl 	_CTSNotNegative
.0110c7	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110ca	20 46 11	jsr $011146			jsr 	CTSOutputA
.0110cd	38		sec				sec 								; negate DTemp3 which is the number
.0110ce	a9 00 00	lda #$0000			lda 	#0
.0110d1	e5 24		sbc $24				sbc 	DTemp3
.0110d3	85 24		sta $24				sta 	DTemp3
.0110d5	a9 00 00	lda #$0000			lda 	#0
.0110d8	e5 26		sbc $26				sbc 	DTemp3+2
.0110da	85 26		sta $26				sta 	DTemp3+2
.0110dc					_CTSNotNegative:
.0110dc	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.0110df	48		pha				pha
.0110e0	a9 00 00	lda #$0000			lda 	#0
.0110e3	48		pha				pha
.0110e4	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.0110e6	85 08		sta $08				sta 	DTemp1
.0110e8	64 0a		stz $0a				stz 	DTemp1+2
.0110ea					_CTSMultiplySubtractor:
.0110ea	38		sec				sec 								; check number vs subtractor
.0110eb	a5 24		lda $24				lda 	DTemp3
.0110ed	e5 08		sbc $08				sbc 	DTemp1
.0110ef	a5 26		lda $26				lda 	DTemp3+2
.0110f1	e5 0a		sbc $0a				sbc 	DTemp1+2
.0110f3	90 0f		bcc $011104			bcc		_CTSScaledUp 				; if >= then scaled up.
.0110f5	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0110f7	48		pha				pha
.0110f8	a5 0a		lda $0a				lda 	DTemp1+2
.0110fa	48		pha				pha
.0110fb	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0110fd	20 62 10	jsr $011062			jsr 	MultiplyTemp1ByA
.011100	b0 02		bcs $011104			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011102	80 e6		bra $0110ea			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011104					_CTSScaledUp:
.011104	7a		ply				ply 								; YA contains the previous divider.
.011105	68		pla				pla
.011106	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011109	d0 05		bne $011110			bne 	_CTSHasDigit
.01110b	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01110e	f0 20		beq $011130			beq 	_CTSExit
.011110					_CTSHasDigit:
.011110	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011112	84 0e		sty $0e				sty 	DTemp2+2
.011114	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011117					_CTSSubLoop:
.011117	38		sec				sec 								; subtract subtractor from number
.011118	a5 24		lda $24				lda 	DTemp3
.01111a	e5 0c		sbc $0c				sbc 	DTemp2
.01111c	a8		tay				tay 								; intermediate in Y
.01111d	a5 26		lda $26				lda 	DTemp3+2
.01111f	e5 0e		sbc $0e				sbc 	DTemp2+2
.011121	90 07		bcc $01112a			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011123	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011125	84 24		sty $24				sty 	DTemp3
.011127	e8		inx				inx 								; one more subtraction
.011128	80 ed		bra $011117			bra 	_CTSSubLoop 				; try it again.
.01112a					_CTSFinishedSubtracting:
.01112a	8a		txa				txa 								; convert to ASCII.
.01112b	20 39 11	jsr $011139			jsr 	CTSOutputHexDigit 			; write that out.
.01112e	80 d4		bra $011104			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011130					_CTSExit:
.011130	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011132	20 39 11	jsr $011139			jsr 	CTSOutputHexDigit
.011135	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011137	fa		plx				plx 								; restore X.
.011138	60		rts				rts
.011139					CTSOutputHexDigit:
.011139	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01113c	90 04		bcc $011142			bcc 	_CTSNotLetter
.01113e	18		clc				clc
.01113f	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011142					_CTSNotLetter:
.011142	18		clc				clc
.011143	69 30 00	adc #$0030			adc 	#48
.011146					CTSOutputA:
.011146	5a		phy				phy 								; save Y, set Y to current pointer
.011147	a4 1a		ldy $1a				ldy 	DCurrentTempString
.011149	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01114c	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01114e	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011150	1a		inc a				inc 	a
.011151	92 18		sta ($18)			sta 	(DStartTempString)
.011153	c2 20		rep #$20			rep 	#$20
.011155	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011157	7a		ply				ply 								; restore Y and exit.
.011158	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.011159					Function_INSTR:
.011159	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns a integer
.01115c	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.01115f	48		pha				pha 								; save string to search
.011160	20 f0 05	jsr $0105f0			jsr 	ExpectComma
.011163	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.011166	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.011169	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.01116b	68		pla				pla
.01116c	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.01116e	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011170	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011172	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011174	38		sec				sec
.011175	b2 0c		lda ($0c)			lda 	(DTemp2)
.011177	f2 08		sbc ($08)			sbc		(DTemp1)
.011179	c2 20		rep #$20			rep 	#$20
.01117b	90 2c		bcc $0111a9			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.01117d	29 ff 00	and #$00ff			and 	#$00FF
.011180	1a		inc a				inc 	a
.011181	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.011183	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.011185	29 ff 00	and #$00ff			and 	#$00FF
.011188	f0 22		beq $0111ac			beq 	_FINSError
.01118a					_FINSLoop:
.01118a	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.01118c	1a		inc a				inc 	a
.01118d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01118f	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.011191	29 ff 00	and #$00ff			and 	#$00FF
.011194	a8		tay				tay									; start comparing at index 1.
.011195					_FINSCompare:
.011195	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.011197	51 0c		eor ($0c),y			eor 	(DTemp2),y
.011199	29 ff 00	and #$00ff			and 	#$00FF
.01119c	d0 05		bne $0111a3			bne 	_FINSNext
.01119e	88		dey				dey
.01119f	d0 f4		bne $011195			bne 	_FINSCompare
.0111a1	80 08		bra $0111ab			bra 	_FINSExit
.0111a3					_FINSNext:
.0111a3	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111a5	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111a7	d0 e1		bne $01118a			bne 	_FINSLoop
.0111a9					_FINSFail:
.0111a9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111ab					_FINSExit:
.0111ab	60		rts				rts
.0111ac					_FINSError:
.0111ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0111af	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111b7	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0111c0					Function_UPPER:
.0111c0	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.0111c3	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0111c6	48		pha				pha
.0111c7	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; close call.
.0111ca	20 11 07	jsr $010711			jsr		StringTempAllocate 			; allocate memory for it
.0111cd	68		pla				pla
.0111ce	20 4b 07	jsr $01074b			jsr 	StringCreateCopy 			; create a copy of it.
.0111d1	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111d3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111d5	a8		tay				tay 								; address in Y
.0111d6	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111d8	da		phx				phx 								; save X
.0111d9	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111db	29 ff 00	and #$00ff			and 	#$00FF
.0111de	f0 20		beq $011200			beq 	_FUPExit
.0111e0	aa		tax				tax 								; put in X
.0111e1					_FUPLoop:
.0111e1	c8		iny				iny 								; increment and load character
.0111e2	b9 00 00	lda $0000,y			lda 	$0000,y
.0111e5	29 ff 00	and #$00ff			and 	#$00FF
.0111e8	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.0111eb	90 10		bcc $0111fd			bcc 	_FUPNoChange
.0111ed	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0111f0	b0 0b		bcs $0111fd			bcs 	_FUPNoChange
.0111f2	38		sec				sec 								; shift case
.0111f3	e9 20 00	sbc #$0020			sbc 	#32
.0111f6	e2 20		sep #$20			sep 	#$20 						; write back
.0111f8	99 00 00	sta $0000,y			sta 	$0000,y
.0111fb	c2 20		rep #$20			rep 	#$20
.0111fd					_FUPNoChange:
.0111fd	ca		dex				dex 								; do X times
.0111fe	d0 e1		bne $0111e1			bne 	_FUPLoop
.011200					_FUPExit:
.011200	fa		plx				plx 								; restore X
.011201	60		rts				rts
.011202					Function_LOWER:
.011202	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.011205	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011208	48		pha				pha
.011209	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; close call.
.01120c	20 11 07	jsr $010711			jsr		StringTempAllocate 			; allocate memory for it
.01120f	68		pla				pla
.011210	20 4b 07	jsr $01074b			jsr 	StringCreateCopy 			; create a copy of it.
.011213	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011215	95 00		sta $00,x			sta 	EXSValueL+0,x
.011217	a8		tay				tay 								; address in Y
.011218	74 20		stz $20,x			stz 	EXSValueH+0,x
.01121a	da		phx				phx 								; save X
.01121b	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01121d	29 ff 00	and #$00ff			and 	#$00FF
.011220	f0 20		beq $011242			beq 	_FLOExit
.011222	aa		tax				tax 								; put in X
.011223					_FLOLoop:
.011223	c8		iny				iny 								; increment and load character
.011224	b9 00 00	lda $0000,y			lda 	$0000,y
.011227	29 ff 00	and #$00ff			and 	#$00FF
.01122a	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01122d	90 10		bcc $01123f			bcc 	_FLONoChange
.01122f	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011232	b0 0b		bcs $01123f			bcs 	_FLONoChange
.011234	18		clc				clc 								; shift case
.011235	69 20 00	adc #$0020			adc 	#32
.011238	e2 20		sep #$20			sep 	#$20 						; write back
.01123a	99 00 00	sta $0000,y			sta 	$0000,y
.01123d	c2 20		rep #$20			rep 	#$20
.01123f					_FLONoChange:
.01123f	ca		dex				dex 								; do X times
.011240	d0 e1		bne $011223			bne 	_FLOLoop
.011242					_FLOExit:
.011242	fa		plx				plx 								; restore X
.011243	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011244					Function_Let:
.011244	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011246	48		pha				pha  								; save on stack for later.
.011247	20 88 03	jsr $010388			jsr 	VariableFind 				; find the variable
.01124a	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01124c	b0 1c		bcs $01126a			bcs 	_FLetFound 					; skip if found.
.01124e	68		pla				pla 								; get and push the first token again.
.01124f	48		pha				pha
.011250	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011253	d0 60		bne $0112b5			bne 	_FLError					; arrays, so this causes an error.
.011255	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011257	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.01125a	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.01125d	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.01125f					_FLSkipToken:
.01125f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011261	e6 06		inc $06				inc 	DCodePtr
.011263	e6 06		inc $06				inc 	DCodePtr
.011265	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011268	d0 f5		bne $01125f			bne 	_FLSkipToken
.01126a					_FLetFound:
.01126a	68		pla				pla 								; get and save the first token.
.01126b	48		pha				pha
.01126c	a8		tay				tay 								; put it in Y
.01126d	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011270	f0 07		beq $011279			beq 	_FLetNotArray
.011272	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011274	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.011277	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.011279					_FLetNotArray:
.011279	7a		ply				ply 								; get the first token into Y
.01127a	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01127c	48		pha				pha
.01127d	5a		phy				phy 								; save the first token on the stack.
.01127e	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011281	d2 06		cmp ($06)			cmp 	(DCodePtr)
.011283	d0 23		bne $0112a8			bne 	_FLetMissingEquals
.011285	e6 06		inc $06				inc 	DCodePtr
.011287	e6 06		inc $06				inc 	DCodePtr
.011289	68		pla				pla 								; restore the first token.
.01128a	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.01128d	d0 0f		bne $01129e			bne 	_FLetString 				; skip if string.
.01128f	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.011292	7a		ply				ply 								; get address in Y
.011293	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.011295	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011298	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.01129a	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.01129d	60		rts				rts
.01129e					_FLetString:
.01129e	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112a1	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112a3	7a		ply				ply 								; get address we are overwriting.
.0112a4	20 74 06	jsr $010674			jsr 	StringReassign 				; reassign that address
.0112a7	60		rts				rts
.0112a8					_FLetMissingEquals:
.0112a8	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112ab	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112b3	3d 00
.0112b5					_FLError:
.0112b5	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112b8	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112c0	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.0112c8					Function_PROC:
.0112c8	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112cb	18		clc				clc
.0112cc	65 02		adc $02				adc 	DBaseAddress
.0112ce	aa		tax				tax 								; X is used to track it
.0112cf					_FPROLoop:
.0112cf	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112d2	f0 56		beq $01132a			beq 	_FPROUnknown
.0112d4	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112d7	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.0112da	f0 08		beq $0112e4			beq 	_FPROFoundDefProc
.0112dc					_FPRONext:
.0112dc	8a		txa				txa 								; follow the link.
.0112dd	18		clc				clc
.0112de	7d 00 00	adc $0000,x			adc 	@w$0000,x
.0112e1	aa		tax				tax
.0112e2	80 eb		bra $0112cf			bra 	_FPROLoop
.0112e4					_FPROFoundDefProc:
.0112e4	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.0112e7	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112e9	d0 f1		bne $0112dc			bne 	_FPRONext
.0112eb	8a		txa				txa 								; DTemp1 points to the token.
.0112ec	18		clc				clc
.0112ed	69 06 00	adc #$0006			adc 	#6
.0112f0	85 08		sta $08				sta 	DTemp1
.0112f2	a0 00 00	ldy #$0000			ldy 	#0
.0112f5					_FPROCompare:
.0112f5	b1 08		lda ($08),y			lda 	(DTemp1),y
.0112f7	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0112f9	d0 e1		bne $0112dc			bne 	_FPRONext 					; fails, different
.0112fb	c8		iny				iny
.0112fc	c8		iny				iny
.0112fd	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011300	d0 f3		bne $0112f5			bne 	_FPROCompare
.011302	98		tya				tya 								; this is the offset to the next element
.011303	18		clc				clc
.011304	65 08		adc $08				adc 	DTemp1
.011306	48		pha				pha 								; push the next command on the stack
.011307	da		phx				phx 								; push the record address on the stack.
.011308	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01130a	98		tya				tya 								; work out the return address
.01130b	18		clc				clc
.01130c	65 06		adc $06				adc 	DCodePtr
.01130e	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011310	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011312	95 04		sta $04,x			sta 	$04,x
.011314	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011317	95 06		sta $06,x			sta 	$06,x
.011319	8a		txa				txa 								; advance stack by 6.
.01131a	18		clc				clc
.01131b	69 06 00	adc #$0006			adc 	#6
.01131e	85 2a		sta $2a				sta 	DStack
.011320	7a		ply				ply 								; line record address
.011321	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011324	85 22		sta $22				sta 	DLineNumber
.011326	68		pla				pla 								; next command
.011327	85 06		sta $06				sta 	DCodePtr
.011329	60		rts				rts
.01132a					_FPROUnknown:
.01132a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01132d	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011335	70 72 6f 63 65 64 75 72 65 00
.01133f					Function_ENDPROC:
.01133f	a6 2a		ldx $2a				ldx 	DStack
.011341	b5 00		lda $00,x			lda 	$00,x
.011343	c9 00 c0	cmp #$c000			cmp 	#$C000 						; is it a local/parameter ?
.011346	b0 2e		bcs $011376			bcs 	_FENPPopLocal
.011348	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.01134b	d0 11		bne $01135e			bne 	_FENPFail
.01134d	8a		txa				txa 								; unpick stack.
.01134e	38		sec				sec
.01134f	e9 06 00	sbc #$0006			sbc 	#6
.011352	85 2a		sta $2a				sta 	DStack
.011354	aa		tax				tax
.011355	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011357	85 06		sta $06				sta 	DCodePtr
.011359	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01135b	85 22		sta $22				sta 	DLineNumber
.01135d	60		rts				rts
.01135e					_FENPFail:
.01135e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011361	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011369	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.011376					_FENPPopLocal:
.011376	a5 2a		lda $2a				lda 	DStack 						; wind stack down.
.011378	38		sec				sec
.011379	e9 08 00	sbc #$0008			sbc 	#8
.01137c	85 2a		sta $2a				sta 	DStack
.01137e	aa		tax				tax
.01137f	b5 02		lda $02,x			lda 	$02,x 						; get address
.011381	a8		tay				tay
.011382	b5 04		lda $04,x			lda 	$04,x 						; copy data
.011384	99 00 00	sta $0000,y			sta 	$0000,y
.011387	b5 06		lda $06,x			lda 	$06,x
.011389	99 02 00	sta $0002,y			sta 	$0002,y
.01138c	80 b1		bra $01133f			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.01138e					Command_LOCAL:
.01138e	20 b8 13	jsr $0113b8			jsr 	LocalProcessVariable 		; make one variable 'local'
.011391	90 0e		bcc $0113a1			bcc 	_CLOFail
.011393	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.011395	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.011398	d0 06		bne $0113a0			bne 	_CLOExit
.01139a	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.01139c	e6 06		inc $06				inc 	DCodePtr
.01139e	80 ee		bra $01138e			bra 	Command_Local
.0113a0					_CLOExit:
.0113a0	60		rts				rts
.0113a1					_CLOFail:
.0113a1	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0113a4	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113ac	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113b8					LocalProcessVariable:
.0113b8	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113ba	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113bd	90 3e		bcc $0113fd			bcc 	_LPVFail
.0113bf	29 00 10	and #$1000			and 	#IDArrayMask
.0113c2	d0 39		bne $0113fd			bne 	_LPVFail
.0113c4	b2 06		lda ($06)			lda 	(DCodePtr)
.0113c6	29 00 e0	and #$e000			and 	#$E000
.0113c9	48		pha				pha
.0113ca	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variable
.0113cd	b0 13		bcs $0113e2			bcs 	_LPVFound 					; if found, A points to the data.
.0113cf	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0113d1	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.0113d4	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.0113d7					_LPVSkipToken:
.0113d7	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0113d9	e6 06		inc $06				inc 	DCodePtr
.0113db	e6 06		inc $06				inc 	DCodePtr
.0113dd	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0113e0	d0 f5		bne $0113d7			bne 	_LPVSkipToken
.0113e2					_LPVFound:
.0113e2	a8		tay				tay 								; data pointer in Y
.0113e3	a6 2a		ldx $2a				ldx 	DStack
.0113e5	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.0113e7	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.0113ea	95 04		sta $04,x			sta 	$04,x
.0113ec	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.0113ef	95 06		sta $06,x			sta 	$06,x
.0113f1	68		pla				pla 								; get the type header
.0113f2	95 08		sta $08,x			sta 	$08,x 						; update the BASIC stack.
.0113f4	8a		txa				txa
.0113f5	18		clc				clc
.0113f6	69 08 00	adc #$0008			adc 	#8
.0113f9	85 2a		sta $2a				sta 	DStack
.0113fb	38		sec				sec
.0113fc	60		rts				rts
.0113fd					_LPVFail:
.0113fd	18		clc				clc
.0113fe	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.0113ff					Command_List:
.0113ff	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011402	20 11 07	jsr $010711		jsr 	StringTempAllocate
.011405	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011407	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011409	64 2e		stz $2e			stz 	DIndent2
.01140b	64 32		stz $32			stz 	DTemp4+0 						; low number
.01140d	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011410	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011412	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011414	f0 3b		beq $011451		beq 	_CLIList
.011416	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011419	f0 36		beq $011451		beq 	_CLIList
.01141b	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01141e	f0 13		beq $011433		beq 	_CLIComma
.011420	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.011423	c0 00 00	cpy #$0000		cpy 	#0
.011426	d0 21		bne $011449		bne 	_CLIError
.011428	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01142a	85 34		sta $34			sta 	DTemp4+2
.01142c	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01142e	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.011431	d0 1e		bne $011451		bne 	_CLIList
.011433					_CLIComma:
.011433	20 f0 05	jsr $0105f0		jsr 	ExpectComma 					; skip comma
.011436	b2 06		lda ($06)		lda 	(DCodePtr)
.011438	f0 12		beq $01144c		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.01143a	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01143d	f0 0d		beq $01144c		beq 	_CLIToEnd
.01143f	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.011442	85 34		sta $34			sta 	DTemp4+2
.011444	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011447	f0 08		beq $011451		beq 	_CLIList
.011449					_CLIError:
.011449	82 71 f1	brl $0105bd		brl 	SyntaxError
.01144c					_CLIToEnd:
.01144c	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01144f	85 34		sta $34			sta 	DTemp4+2
.011451					_CLIList:
.011451	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011454	18		clc			clc
.011455	65 02		adc $02			adc 	DBaseAddress
.011457	a8		tay			tay 									; put in Y
.011458					_CLINextLine:
.011458	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.01145b	f0 29		beq $011486		beq 	_CLIExit
.01145d	20 ee 15	jsr $0115ee		jsr 	ScanIndent  					; scan for formatting.
.011460	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011463	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011465	90 14		bcc $01147b		bcc 	_CLIFollowLink
.011467	c5 34		cmp $34			cmp 	DTemp4+2
.011469	f0 02		beq $01146d		beq 	_CLIShowLine
.01146b	b0 0e		bcs $01147b		bcs 	_CLIFollowLink
.01146d					_CLIShowLine:
.01146d	a5 30		lda $30			lda 	DListBuffer
.01146f	20 89 14	jsr $011489		jsr 	Detokenise 						; detokenise it
.011472	5a		phy			phy
.011473	a8		tay			tay 									; print buffer out
.011474	20 47 06	jsr $010647		jsr 	PrintBasicString
.011477	20 33 1d	jsr $011d33		jsr 	HWNewLine
.01147a	7a		ply			ply 									; get address
.01147b					_CLIFollowLink:
.01147b	98		tya			tya 									; follow link
.01147c	18		clc			clc
.01147d	79 00 00	adc $0000,y		adc 	$0000,y
.011480	a8		tay			tay
.011481	20 4f 1d	jsr $011d4f		jsr 	HWCheckBreak 					; break key pressed.
.011484	f0 d2		beq $011458		beq 	_CLINextLine
.011486					_CLIExit:
.011486	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.011488	60		rts			rts
.011489					Detokenise:
.011489	48		pha			pha
.01148a	da		phx			phx
.01148b	5a		phy			phy
.01148c	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.01148e	1a		inc a			inc 	a
.01148f	85 1a		sta $1a			sta 	DCurrentTempString
.011491	64 1c		stz $1c			stz		DConstantShift
.011493	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011496	92 18		sta ($18)		sta 	(DStartTempString)
.011498	5a		phy			phy 									; save Y
.011499	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01149c	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.01149f	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114a2	20 bc 10	jsr $0110bc		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114a5	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0114a7	c5 2e		cmp $2e			cmp 	DIndent2
.0114a9	90 02		bcc $0114ad		bcc 	_DTKSmaller
.0114ab	a5 2e		lda $2e			lda 	DIndent2
.0114ad					_DTKSmaller:
.0114ad	0a		asl a			asl 	a
.0114ae	69 06 00	adc #$0006		adc 	#6
.0114b1	85 08		sta $08			sta 	DTemp1
.0114b3					_DTKPadLineNo:
.0114b3	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0114b6	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0114b9	b2 18		lda ($18)		lda 	(DStartTempString)
.0114bb	29 ff 00	and #$00ff		and 	#$00FF
.0114be	c5 08		cmp $08			cmp 	DTemp1
.0114c0	d0 f1		bne $0114b3		bne 	_DTKPadLineNo
.0114c2	68		pla			pla 									; get pointer
.0114c3	18		clc			clc 									; point to start of line
.0114c4	69 04 00	adc #$0004		adc 	#4
.0114c7	a8		tay			tay 									; put back in Y.
.0114c8					_DTKMainLoop:
.0114c8	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.0114cb	d0 04		bne $0114d1		bne 	_DTKNotZero 					; if zero, return.
.0114cd	7a		ply			ply
.0114ce	fa		plx			plx
.0114cf	68		pla			pla
.0114d0	60		rts			rts
.0114d1					_DTKNotZero:
.0114d1	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.0114d4	b0 1c		bcs $0114f2		bcs 	_DTKNotString
.0114d6	5a		phy			phy										; save token address on stack.
.0114d7	c8		iny			iny 									; skip first token
.0114d8	c8		iny			iny
.0114d9	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0114dc	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0114df	98		tya			tya 									; copy the string out.
.0114e0	20 4b 07	jsr $01074b		jsr 	StringCreateCopy
.0114e3	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0114e6	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0114e9	68		pla			pla 									; get token, which is its own offset
.0114ea	a8		tay			tay
.0114eb	18		clc			clc
.0114ec	79 00 00	adc $0000,y		adc 	$0000,y
.0114ef	a8		tay			tay
.0114f0	80 d6		bra $0114c8		bra 	_DTKMainLoop
.0114f2					_DTKNotString:
.0114f2	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0114f5	b0 09		bcs $011500		bcs 	_DTKNotShift
.0114f7	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0114fa	85 1c		sta $1c			sta 	DConstantShift
.0114fc	c8		iny			iny 									; skip token.
.0114fd	c8		iny			iny
.0114fe	80 c8		bra $0114c8		bra 	_DTKMainLoop
.011500					_DTKNotShift:
.011500	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011503	b0 07		bcs $01150c		bcs 	_DTKNotKeyword
.011505	c8		iny			iny 									; skip over token
.011506	c8		iny			iny
.011507	20 86 15	jsr $011586		jsr 	_DTKDecodeKeyword 				; decode it.
.01150a	80 bc		bra $0114c8		bra 	_DTKMainLoop
.01150c					_DTKNotKeyword:
.01150c	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01150f	b0 18		bcs $011529		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011511	5a		phy			phy 									; save pointer
.011512	38		sec			sec  									; shift it in the range 0-32767
.011513	e9 00 40	sbc #$4000		sbc 	#$4000
.011516	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011517	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011519	6a		ror a			ror 	a 								; rotate that into the constant value
.01151a	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01151c	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01151f	20 bc 10	jsr $0110bc		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011522	64 1c		stz $1c			stz 	DConstantShift
.011524	7a		ply			ply 									; restore pointer
.011525	c8		iny			iny 									; skip token.
.011526	c8		iny			iny
.011527	80 9f		bra $0114c8		bra 	_DTKMainLoop
.011529					_DTKIdentifier:
.011529	48		pha			pha 									; save token for typing at end
.01152a					_DTKILoop:
.01152a	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01152d	20 56 15	jsr $011556		jsr 	_DTKIDecodeToken 				; decode it.
.011530	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011533	c8		iny			iny 									; skip it
.011534	c8		iny			iny
.011535	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011538	d0 f0		bne $01152a		bne 	_DTKILoop
.01153a	68		pla			pla 									; add $( as required.
.01153b	48		pha			pha 									; comes from the first token.
.01153c	29 00 20	and #$2000		and 	#IDTypeMask
.01153f	f0 06		beq $011547		beq 	_DTKINotString
.011541	a9 24 00	lda #$0024		lda 	#"$"
.011544	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.011547					_DTKINotString:
.011547	68		pla			pla
.011548	29 00 10	and #$1000		and 	#IDArrayMask
.01154b	f0 06		beq $011553		beq 	_DTKINotArray
.01154d	a9 28 00	lda #$0028		lda 	#"("
.011550	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.011553					_DTKINotArray:
.011553	82 72 ff	brl $0114c8		brl 	_DTKMainLoop
.011556					_DTKIDecodeToken:
.011556	5a		phy			phy
.011557	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.01155a	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.01155d					_DTKIDivide:
.01155d	38		sec			sec
.01155e	e9 2d 00	sbc #$002d		sbc 	#45
.011561	c8		iny			iny
.011562	b0 f9		bcs $01155d		bcs 	_DTKIDivide
.011564	69 2d 00	adc #$002d		adc 	#45
.011567	20 70 15	jsr $011570		jsr 	_DTKIOutA 						; output low.
.01156a	98		tya			tya
.01156b	20 70 15	jsr $011570		jsr 	_DTKIOutA 						; output high
.01156e	7a		ply			ply
.01156f	60		rts			rts
.011570					_DTKIOutA:
.011570	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011573	f0 10		beq $011585		beq 	_DTKIOutExit
.011575	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.011578	90 04		bcc $01157e		bcc 	_DTKIOutAlpha
.01157a	38		sec			sec  									; adjust for 0-9
.01157b	e9 4b 00	sbc #$004b		sbc 	#$4B
.01157e					_DTKIOutAlpha:
.01157e	18		clc			clc										; adjust for A-Z
.01157f	69 60 00	adc #$0060		adc 	#96
.011582	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.011585					_DTKIOutExit:
.011585	60		rts			rts
.011586					_DTKDecodeKeyword:
.011586	48		pha			pha
.011587	da		phx			phx
.011588	5a		phy			phy
.011589	a8		tay			tay 									; save token ID in Y
.01158a	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.01158d	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011590	48		pha			pha 									; save this flag on a stack
.011591	5a		phy			phy 									; save the token ID
.011592	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011595	d0 19		bne $0115b0		bne 	_DTKNotSpecial1
.011597	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.011599	88		dey			dey
.01159a	b9 00 00	lda $0000,y		lda 	$0000,y
.01159d	29 ff 00	and #$00ff		and 	#$00FF
.0115a0	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0115a3	f0 0b		beq $0115b0		beq 	_DTKNotSpecial1
.0115a5	c9 3a 00	cmp #$003a		cmp 	#":"
.0115a8	f0 06		beq $0115b0		beq 	_DTKNotSpecial1
.0115aa	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0115ad	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0115b0					_DTKNotSpecial1:
.0115b0	68		pla			pla
.0115b1	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0115b4	a8		tay			tay 									; into Y.
.0115b5	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0115b8					_DTKDWorkThrough:
.0115b8	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0115b9	f0 0f		beq $0115ca		beq 	_DTKDFound
.0115bb	86 08		stx $08			stx 	DTemp1
.0115bd	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.0115c1	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0115c4	18		clc			clc
.0115c5	65 08		adc $08			adc 	DTemp1
.0115c7	aa		tax			tax
.0115c8	80 ee		bra $0115b8		bra 	_DTKDWorkThrough
.0115ca					_DTKDFound:
.0115ca	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.0115ce	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0115d1	3a		dec a			dec 	a
.0115d2	a8		tay			tay 									; put in Y
.0115d3					_DTKOut:
.0115d3	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.0115d7	29 ff 00	and #$00ff		and 	#$00FF
.0115da					_DTKNotLC:
.0115da	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0115dd	e8		inx			inx
.0115de	88		dey			dey
.0115df	d0 f2		bne $0115d3		bne 	_DTKOut
.0115e1	68		pla			pla 									; trailing space.
.0115e2	d0 06		bne $0115ea		bne 	_DTKNotSpecial2
.0115e4	a9 20 00	lda #$0020		lda 	#" "
.0115e7	20 3d 07	jsr $01073d		jsr 	StringWriteCharacter
.0115ea					_DTKNotSpecial2:
.0115ea	7a		ply			ply
.0115eb	fa		plx			plx
.0115ec	68		pla			pla
.0115ed	60		rts			rts
.0115ee					ScanIndent:
.0115ee	48		pha			pha
.0115ef	5a		phy			phy
.0115f0	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0115f2	85 2e		sta $2e			sta 	DIndent2
.0115f4	98		tya			tya
.0115f5	18		clc			clc 									; point to code.
.0115f6	69 04 00	adc #$0004		adc 	#4
.0115f9	a8		tay			tay
.0115fa					_SILoop:
.0115fa	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0115fd	f0 35		beq $011634		beq 	_SIExit
.0115ff	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011602	b0 08		bcs $01160c		bcs 	_SICheckKeyword
.011604	98		tya			tya 									; skip string.
.011605	18		clc			clc
.011606	79 00 00	adc $0000,y		adc 	$0000,y
.011609	a8		tay			tay
.01160a	80 ee		bra $0115fa		bra 	_SILoop
.01160c					_SICheckKeyword:
.01160c	29 00 e0	and #$e000		and 	#$E000
.01160f	c9 00 20	cmp #$2000		cmp 	#$2000
.011612	f0 04		beq $011618		beq 	_SIFoundKeyword
.011614					_SIAdvance:
.011614	c8		iny			iny 									; if not, loop round.
.011615	c8		iny			iny
.011616	80 e2		bra $0115fa		bra 	_SILoop
.011618					_SIFoundKeyword:
.011618	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01161b	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01161e	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011621	f0 0d		beq $011630		beq 	_SIKeyPlus
.011623	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011626	d0 ec		bne $011614		bne 	_SIAdvance
.011628	c6 2c		dec $2c			dec 	DIndent
.01162a	10 e8		bpl $011614		bpl 	_SIAdvance
.01162c	64 2c		stz $2c			stz 	DIndent
.01162e	80 e4		bra $011614		bra 	_SIAdvance
.011630					_SIKeyPlus:
.011630	e6 2c		inc $2c			inc 	DIndent
.011632	80 e0		bra $011614		bra 	_SIAdvance
.011634					_SIExit:
.011634	7a		ply			ply
.011635	68		pla			pla
.011636	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011637					Function_PRINT:
.011637	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011639	f0 33		beq $01166e			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01163b	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.01163e	f0 2e		beq $01166e			beq 	_FPRExitCR
.011640	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011643	f0 23		beq $011668			beq 	_FPRSkipLoop
.011645	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.011648	f0 1b		beq $011665			beq 	_FPRNewLine
.01164a	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.01164d	f0 11		beq $011660			beq 	_FPRTab
.01164f					_FPRExpression:
.01164f	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.011652	b0 06		bcs $01165a			bcs 	_FPRHaveString
.011654	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011657	20 b4 10	jsr $0110b4			jsr 	ConvertToString
.01165a					_FPRHaveString:
.01165a	a8		tay				tay 								; print the basic String.
.01165b	20 47 06	jsr $010647			jsr 	PrintBASICString
.01165e	80 d7		bra $011637			bra 	Function_Print 				; and go round again.
.011660					_FPRTab:
.011660	20 48 1d	jsr $011d48			jsr 	HWTab
.011663	80 03		bra $011668			bra 	_FPRSkipLoop
.011665					_FPRNewLine:
.011665	20 33 1d	jsr $011d33			jsr 	HWNewLine
.011668					_FPRSkipLoop:
.011668	e6 06		inc $06				inc 	DCodePtr
.01166a	e6 06		inc $06				inc 	DCodePtr
.01166c	80 c9		bra $011637			bra 	Function_Print
.01166e					_FPRExitCR:
.01166e	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011670	88		dey				dey
.011671	88		dey				dey
.011672	b9 00 00	lda $0000,y			lda 	$0000,y
.011675	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.011678	f0 08		beq $011682			beq 	_FPRExit
.01167a	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.01167d	f0 03		beq $011682			beq 	_FPRExit
.01167f	20 33 1d	jsr $011d33			jsr 	HWNewLine 					; print a new line.
.011682					_FPRExit:
.011682	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011683					Function_IF:
.011683	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.011686	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011688	05 08		ora $08				ora 	DTemp1
.01168a	a8		tay				tay 								; success flag in Y.
.01168b	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.01168d	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.011690	d0 32		bne $0116c4			bne 	_FIFExtended 				; if so, go to the extended IF.
.011692	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011694	e6 06		inc $06				inc 	DCodePtr
.011696	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.011699	f0 0f		beq $0116aa			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01169b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.01169d	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116a0	90 21		bcc $0116c3			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116a2	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116a5	b0 1c		bcs $0116c3			bcs 	_FIFContinue
.0116a7	4c 39 19	jmp $011939			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0116aa					_FIFEndOfLine:
.0116aa	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0116ac	f0 15		beq $0116c3			beq 	_FIFContinue 				; if done so, continue.
.0116ae	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0116b1	90 06		bcc $0116b9			bcc 	_FIFStringConstant
.0116b3	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0116b5	e6 06		inc $06				inc 	DCodePtr
.0116b7	80 f1		bra $0116aa			bra 	_FIFEndOfLine
.0116b9					_FIFStringConstant:
.0116b9	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0116bc	18		clc				clc
.0116bd	65 06		adc $06				adc 	DCodePtr
.0116bf	85 06		sta $06				sta 	DCodePtr
.0116c1	80 e7		bra $0116aa			bra 	_FIFEndOfLine
.0116c3					_FIFContinue:
.0116c3	60		rts				rts
.0116c4					_FIFExtended:
.0116c4	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0116c6	e6 2a		inc $2a				inc 	DStack
.0116c8	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.0116cb	a6 2a		ldx $2a				ldx 	DStack
.0116cd	95 00		sta $00,x			sta 	$00,x
.0116cf	98		tya				tya 								; see if the test was passed.
.0116d0	f0 01		beq $0116d3			beq 	_FIXSkip 					; if zero then it has failed.
.0116d2	60		rts				rts 								; test passed, so continue executing
.0116d3					_FIXSkip:
.0116d3	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0116d6	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.0116d9	20 39 17	jsr $011739			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0116dc	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0116de	e6 06		inc $06				inc 	DCodePtr
.0116e0	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0116e3	d0 04		bne $0116e9			bne 	_FIXNoThrow
.0116e5	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0116e7	c6 2a		dec $2a				dec 	DStack
.0116e9					_FIXNoThrow:
.0116e9	60		rts				rts
.0116ea					Handler_ELSE:
.0116ea	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0116ec	b5 00		lda $00,x			lda 	$00,x
.0116ee	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.0116f1	d0 12		bne $011705			bne 	_HEBadStructure
.0116f3	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.0116f6	a2 00 00	ldx #$0000			ldx 	#$0000
.0116f9	20 39 17	jsr $011739			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0116fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0116fe	e6 06		inc $06				inc 	DCodePtr
.011700	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011702	c6 2a		dec $2a				dec 	DStack
.011704	60		rts				rts
.011705					_HEBadStructure:
.011705	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011708	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011710	68 6f 75 74 20 49 66 00
.011718					Handler_ENDIF:
.011718	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01171a	b5 00		lda $00,x			lda 	$00,x
.01171c	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01171f	d0 05		bne $011726			bne 	_HEIBadStructure
.011721	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011723	c6 2a		dec $2a				dec 	DStack
.011725	60		rts				rts
.011726					_HEIBadStructure:
.011726	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011729	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011731	68 6f 75 74 20 49 66 00
.011739					ScanForwardLevel:
.011739	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01173b	86 0a		stx $0a				stx 	DTemp1+2
.01173d	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01173f	85 0c		sta $0c				sta 	DTemp2
.011741	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011744					_SFLLoop:
.011744	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011747	d0 0d		bne $011756			bne 	_SFLNoCheck 				; we're in a substructure.
.011749	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01174b	f0 09		beq $011756			beq 	_SFLNoCheck 				; don't check zero
.01174d	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01174f	f0 04		beq $011755			beq 	_SFLFound
.011751	c5 0a		cmp $0a				cmp 	DTemp1+2
.011753	d0 01		bne $011756			bne 	_SFLNoCheck
.011755					_SFLFound:
.011755	60		rts				rts
.011756					_SFLNoCheck:
.011756	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011758	f0 4f		beq $0117a9			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01175a	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01175d	90 40		bcc $01179f			bcc 	_SFLSkipString 				; then handle that.
.01175f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011761	e6 06		inc $06				inc 	DCodePtr
.011763	a8		tay				tay 								; put token in Y temporarily.
.011764	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011767	c9 00 20	cmp #$2000			cmp 	#$2000
.01176a	d0 d8		bne $011744			bne 	_SFLLoop
.01176c	98		tya				tya 								; get the token back.
.01176d	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011770	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011773	f0 cf		beq $011744			beq 	_SFLLoop
.011775	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011778	90 ca		bcc $011744			bcc 	_SFLLoop
.01177a	e8		inx				inx 								; increment the level.
.01177b	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.01177e	f0 c4		beq $011744			beq 	_SFLLoop
.011780	ca		dex				dex 								; decrement the level
.011781	ca		dex				dex 								; one overdoes the previous inx.
.011782	10 c0		bpl $011744			bpl 	_SFLLoop 					; if gone -ve then error.
.011784					_SFLError:
.011784	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011786	85 22		sta $22				sta 	DLineNumber
.011788	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01178b	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011793	65 20 69 6d 62 61 6c 61 6e 63 65 00
.01179f					_SFLSkipString:
.01179f	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117a2	18		clc				clc
.0117a3	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0117a5	85 06		sta $06				sta 	DCodePtr
.0117a7	80 9b		bra $011744			bra 	_SFLLoop 					; go round again.
.0117a9					_SFLNextLine:
.0117a9	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0117ab	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0117ae	f0 d4		beq $011784			beq 	_SFLError 					; if zero, then there's no more code to search.
.0117b0	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0117b3	85 22		sta $22				sta 	DLineNumber
.0117b5	18		clc				clc
.0117b6	a5 06		lda $06				lda 	DCodePtr
.0117b8	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0117bb	85 06		sta $06				sta 	DCodePtr
.0117bd	80 85		bra $011744			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.0117bf					Command_FOR:
.0117bf	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0117c1	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0117c4	d0 60		bne $011826			bne		_CFOBad
.0117c6	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find variable
.0117c9	b0 15		bcs $0117e0			bcs 	_CFOExists
.0117cb	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0117cd	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0117d0	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.0117d3	48		pha				pha 								; save on stack
.0117d4					_CFOSkipToken:
.0117d4	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0117d6	e6 06		inc $06				inc 	DCodePtr
.0117d8	e6 06		inc $06				inc 	DCodePtr
.0117da	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0117dd	d0 f5		bne $0117d4			bne 	_CFOSkipToken
.0117df	68		pla				pla 								; restore address
.0117e0					_CFOExists:
.0117e0	48		pha				pha 								; push variable address on stack
.0117e1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0117e4	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0117e7	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.0117ea	bb		tyx				tyx 								; put high value in X
.0117eb	7a		ply				ply 								; address in Y
.0117ec	99 00 00	sta $0000,y			sta 	$0000,y
.0117ef	8a		txa				txa
.0117f0	99 02 00	sta $0002,y			sta 	$0002,y
.0117f3	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.0117f6	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0117f9	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0117fb	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0117fd	95 02		sta $02,x			sta 	$02,x
.0117ff	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011801	95 04		sta $04,x			sta 	$04,x
.011803	98		tya				tya 								; save variable address at +6
.011804	95 06		sta $06,x			sta 	$06,x
.011806	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.011809	95 08		sta $08,x			sta 	$08,x
.01180b	8a		txa				txa 								; add 8 to stack position
.01180c	18		clc				clc
.01180d	69 08 00	adc #$0008			adc 	#8
.011810	85 2a		sta $2a				sta 	DStack
.011812	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011815	b2 06		lda ($06)			lda 	(DCodePtr)
.011817	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01181a	d0 09		bne $011825			bne 	_CFONoStep
.01181c	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01181f	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.011822	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.011825					_CFONoStep:
.011825	60		rts				rts
.011826					_CFOBad:
.011826	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011829	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011831	76 61 72 69 61 62 6c 65 00
.01183a					Command_NEXT:
.01183a	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01183c	b5 00		lda $00,x			lda 	$00,x
.01183e	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.011841	f0 14		beq $011857			beq 	_CNXOk
.011843	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011846	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01184e	68 6f 75 74 20 46 6f 72 00
.011857					_CNXOk:
.011857	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011859	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01185c	90 22		bcc $011880			bcc 	_CNXNoVariable
.01185e	20 88 03	jsr $010388			jsr 	VariableFind 				; get address of variable.
.011861	90 08		bcc $01186b			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011863	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011865	ca		dex				dex
.011866	ca		dex				dex
.011867	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.011869	f0 15		beq $011880			beq 	_CNXNoVariable 				; then continue
.01186b					_CNXNextVar:
.01186b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01186e	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011876	20 76 61 72 69 61 62 6c 65 00
.011880					_CNXNoVariable:
.011880	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011882	48		pha				pha
.011883	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011885	38		sec				sec
.011886	e9 08 00	sbc #$0008			sbc 	#8
.011889	85 2a		sta $2a				sta 	DStack
.01188b	aa		tax				tax 								; X points to the stack.
.01188c	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01188e	85 06		sta $06				sta 	DCodePtr
.011890	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.011893	5a		phy				phy 								; save the target on the stack
.011894	48		pha				pha
.011895	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011898	85 08		sta $08				sta 	DTemp1
.01189a	64 0a		stz $0a				stz 	DTemp1+2
.01189c	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01189e	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118a1	d0 0b		bne $0118ae			bne 	_CNXNoStep
.0118a3	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0118a5	e6 06		inc $06				inc 	DCodePtr
.0118a7	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.0118aa	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0118ac	84 0a		sty $0a				sty 	DTemp1+2
.0118ae					_CNXNoStep:
.0118ae	68		pla				pla 								; save the Target in DTemp2
.0118af	85 0c		sta $0c				sta 	DTemp2
.0118b1	68		pla				pla
.0118b2	85 0e		sta $0e				sta 	DTemp2+2
.0118b4	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0118b6	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0118b8	a8		tay				tay
.0118b9	18		clc				clc
.0118ba	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0118bd	65 08		adc $08				adc 	DTemp1
.0118bf	99 00 00	sta $0000,y			sta 	$0000,y
.0118c2	b9 02 00	lda $0002,y			lda 	$0002,y
.0118c5	65 0a		adc $0a				adc 	DTemp1+2
.0118c7	99 02 00	sta $0002,y			sta 	$0002,y
.0118ca	38		sec				sec
.0118cb	a5 0c		lda $0c				lda 	DTemp2
.0118cd	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0118d0	85 0c		sta $0c				sta 	DTemp2
.0118d2	a5 0e		lda $0e				lda 	DTemp2+2
.0118d4	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0118d7	85 0e		sta $0e				sta 	DTemp2+2
.0118d9	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0118db	f0 0a		beq $0118e7			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0118dd	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0118df	45 0a		eor $0a				eor 	DTemp1+2
.0118e1	10 04		bpl $0118e7			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0118e3	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0118e4	85 06		sta $06				sta 	DCodePtr
.0118e6	60		rts				rts
.0118e7					_CNXLoopAgain:
.0118e7	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0118e8	18		clc				clc
.0118e9	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0118eb	aa		tax				tax
.0118ec	69 08 00	adc #$0008			adc 	#8
.0118ef	85 2a		sta $2a				sta 	DStack
.0118f1	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0118f3	85 22		sta $22				sta 	DLineNumber
.0118f5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.0118f6					Function_ONGOTO:
.0118f6	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.0118f9	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0118fc	d0 25		bne $011923			bne 	_FOGoFail
.0118fe	c9 00 00	cmp #$0000			cmp 	#0
.011901	f0 20		beq $011923			beq 	_FOGoFail 					; we start with index = 1
.011903	48		pha				pha 								; save count on stack
.011904	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011907	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.01190a	fa		plx				plx 								; put count in X.
.01190b					_FOGoLoop:
.01190b	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01190d	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011910	90 73		bcc $011985			bcc 	FGOFail 					; if not, then we have an error.
.011912	c9 00 c0	cmp #$c000			cmp 	#$C000
.011915	b0 6e		bcs $011985			bcs 	FGOFail
.011917	ca		dex				dex 								; subtract one, if done, call GOTO code
.011918	f0 1f		beq $011939			beq 	Function_GOTO
.01191a	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01191c	e6 06		inc $06				inc 	DCodePtr
.01191e	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; expect a comma
.011921	80 e8		bra $01190b			bra 	_FOGoLoop 					; and loop round.
.011923					_FOGoFail:
.011923	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011926	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01192e	47 6f 74 6f 20 76 61 6c 75 65 00
.011939					Function_GOTO:
.011939	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01193b	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01193e	90 45		bcc $011985			bcc 	FGOFail 					; we don't do calculate line numbers.
.011940	c9 00 c0	cmp #$c000			cmp 	#$C000
.011943	b0 40		bcs $011985			bcs 	FGOFail
.011945	38		sec				sec 								; convert to 0-32767
.011946	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011949	aa		tax				tax
.01194a	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.01194d	18		clc				clc
.01194e	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011950	a8		tay				tay
.011951					_FGOSearch:
.011951	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011954	f0 18		beq $01196e			beq 	_FGOUnknown
.011956	8a		txa				txa 								; does it match line number ?
.011957	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01195a	f0 08		beq $011964			beq 	_FGOFound 					; yes, then found.
.01195c	98		tya				tya 								; no follow the link
.01195d	18		clc				clc
.01195e	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011961	a8		tay				tay
.011962	80 ed		bra $011951			bra 	_FGOSearch 					; and keep looking
.011964					_FGOFound:
.011964	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011966	98		tya				tya 								; Y + 4 is the code pointer.
.011967	18		clc				clc 								; (skipping link and line #)
.011968	69 04 00	adc #$0004			adc 	#4
.01196b	85 06		sta $06				sta 	DCodePtr
.01196d	60		rts				rts									; and continue
.01196e					_FGOUnknown:
.01196e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011971	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011979	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011985					FGOFail:
.011985	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011988	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011990	20 4e 75 6d 62 65 72 00
.011998					Function_GOSUB:
.011998	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01199a	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01199c	18		clc				clc
.01199d	69 02 00	adc #$0002			adc 	#2
.0119a0	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119a2	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119a4	95 04		sta $04,x			sta 	$04,x
.0119a6	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119a9	95 06		sta $06,x			sta 	$06,x
.0119ab	8a		txa				txa 								; advance stack by 6.
.0119ac	18		clc				clc
.0119ad	69 06 00	adc #$0006			adc 	#6
.0119b0	85 2a		sta $2a				sta 	DStack
.0119b2	80 85		bra $011939			bra 	Function_GOTO 				; and do a GOTO.
.0119b4					Function_RETURN:
.0119b4	a6 2a		ldx $2a				ldx 	DStack
.0119b6	b5 00		lda $00,x			lda 	$00,x
.0119b8	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0119bb	d0 11		bne $0119ce			bne 	_FRetFail
.0119bd	8a		txa				txa 								; unpick stack.
.0119be	38		sec				sec
.0119bf	e9 06 00	sbc #$0006			sbc 	#6
.0119c2	85 2a		sta $2a				sta 	DStack
.0119c4	aa		tax				tax
.0119c5	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119c7	85 06		sta $06				sta 	DCodePtr
.0119c9	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119cb	85 22		sta $22				sta 	DLineNumber
.0119cd	60		rts				rts
.0119ce					_FRetFail:
.0119ce	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119d1	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0119d9	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.0119e6					Function_REPEAT:
.0119e6	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119e8	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0119ea	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119ec	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119ee	95 04		sta $04,x			sta 	$04,x
.0119f0	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.0119f3	95 06		sta $06,x			sta 	$06,x
.0119f5	8a		txa				txa 								; advance stack by 6.
.0119f6	18		clc				clc
.0119f7	69 06 00	adc #$0006			adc 	#6
.0119fa	85 2a		sta $2a				sta 	DStack
.0119fc	60		rts				rts
.0119fd					Function_UNTIL:
.0119fd	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0119ff	b5 00		lda $00,x			lda 	$00,x
.011a01	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a04	d0 26		bne $011a2c			bne 	_FUNFail
.011a06	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a09	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a0c	d0 15		bne $011a23			bne 	_FUNExit
.011a0e	c9 00 00	cmp #$0000			cmp 	#0
.011a11	d0 10		bne $011a23			bne 	_FUNExit
.011a13	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a15	38		sec				sec
.011a16	e9 06 00	sbc #$0006			sbc 	#6
.011a19	aa		tax				tax
.011a1a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a1c	85 06		sta $06				sta 	DCodePtr
.011a1e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a20	85 22		sta $22				sta 	DLineNumber
.011a22	60		rts				rts
.011a23					_FUNExit:
.011a23	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a25	38		sec				sec
.011a26	e9 06 00	sbc #$0006			sbc 	#6
.011a29	85 2a		sta $2a				sta 	DStack
.011a2b	60		rts				rts
.011a2c					_FUNFail:
.011a2c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a2f	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a37	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011a44					Function_WHILE:
.011a44	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a46	48		pha				pha 								; save on stack
.011a47	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011a4a	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a4d	d0 14		bne $011a63			bne 	_FWHExecute
.011a4f	c9 00 00	cmp #$0000			cmp 	#0
.011a52	d0 0f		bne $011a63			bne 	_FWHExecute
.011a54	68		pla				pla 								; throw away current instruction
.011a55	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011a58	a2 00 00	ldx #$0000			ldx 	#0
.011a5b	20 39 17	jsr $011739			jsr 	ScanForwardLevel 			; scan forward checking structures
.011a5e	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011a60	e6 06		inc $06				inc 	DCodePtr
.011a62	60		rts				rts
.011a63					_FWHExecute:
.011a63	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a65	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011a66	3a		dec a				dec 	a
.011a67	3a		dec a				dec 	a
.011a68	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a6a	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a6c	95 04		sta $04,x			sta 	$04,x
.011a6e	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011a71	95 06		sta $06,x			sta 	$06,x
.011a73	8a		txa				txa 								; advance stack by 6.
.011a74	18		clc				clc
.011a75	69 06 00	adc #$0006			adc 	#6
.011a78	85 2a		sta $2a				sta 	DStack
.011a7a	60		rts				rts
.011a7b					Function_WEND:
.011a7b	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011a7d	b5 00		lda $00,x			lda 	$00,x
.011a7f	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011a82	d0 11		bne $011a95			bne 	_FWEFail
.011a84	8a		txa				txa 								; unpick stack and always loop back.
.011a85	38		sec				sec 								; we do the check at the top.
.011a86	e9 06 00	sbc #$0006			sbc 	#6
.011a89	85 2a		sta $2a				sta 	DStack
.011a8b	aa		tax				tax
.011a8c	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a8e	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011a90	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a92	85 22		sta $22				sta 	DLineNumber
.011a94	60		rts				rts
.011a95					_FWEFail:
.011a95	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a98	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011aa0	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011aab					Function_END:
.011aab	4c 31 1e	jmp $011e31			jmp 	WarmStart
.011aae					Function_RUN:
.011aae	20 39 1b	jsr $011b39			jsr 	Function_CLEAR 				; clear all variables.
.011ab1	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011ab3	18		clc				clc
.011ab4	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011ab7	80 0c		bra $011ac5			bra 	FRun_NextLineNumber
.011ab9					RUNExecuteTokenBuffer:
.011ab9	64 22		stz $22				stz 	DLineNumber					; zero line number
.011abb	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011abe	18		clc				clc
.011abf	65 02		adc $02				adc 	DBaseAddress
.011ac1	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011ac3	80 12		bra $011ad7			bra 	FRun_NextInstruction
.011ac5					FRun_NextLineNumber:
.011ac5	a8		tay				tay 								; put in Y
.011ac6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011ac9	f0 e0		beq $011aab			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011acb	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011ace	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011ad0	98		tya				tya 								; get address back
.011ad1	18		clc				clc 								; skip over the link/line number
.011ad2	69 04 00	adc #$0004			adc 	#4
.011ad5	85 06		sta $06				sta 	DCodePtr
.011ad7					FRun_NextInstruction:
.011ad7	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011ad9	20 4f 1d	jsr $011d4f			jsr 	HWCheckBreak 				; break key pressed.
.011adc	d0 40		bne $011b1e			bne 	_FRun_Break
.011ade	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011ae0	f0 32		beq $011b14			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011ae2	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011ae5	f0 18		beq $011aff			beq 	_FRun_Colon
.011ae7	a8		tay				tay 								; save in Y
.011ae8	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011aeb	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011aee	d0 15		bne $011b05			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011af0	98		tya				tya 								; get token back
.011af1	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011af4	0a		asl a				asl 	a 							; double it into X
.011af5	aa		tax				tax
.011af6	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011af8	e6 06		inc $06				inc 	DCodePtr
.011afa	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011afd	80 d8		bra $011ad7			bra 	FRun_NextInstruction 		; do the following instruction.
.011aff					_FRun_Colon:
.011aff	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b01	e6 06		inc $06				inc 	DCodePtr
.011b03	80 d2		bra $011ad7			bra 	FRun_NextInstruction 		; do the following instruction.
.011b05					_FRun_TryLET:
.011b05	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b07	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b0a	90 05		bcc $011b11			bcc		_FRunSyntax 				; no, must be syntax.
.011b0c	20 44 12	jsr $011244			jsr 	Function_LET 				; try as a LET.
.011b0f	80 c6		bra $011ad7			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b11					_FRunSyntax:
.011b11	82 a9 ea	brl $0105bd			brl 	SyntaxError
.011b14					_FRun_EndInstruction:
.011b14	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b16	f0 0f		beq $011b27			beq 	_FRun_WarmStart
.011b18	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b1a	1a		inc a				inc 	a 							; go to link for next line
.011b1b	1a		inc a				inc 	a
.011b1c	80 a7		bra $011ac5			bra 	FRun_NextLineNumber
.011b1e					_FRun_Break:
.011b1e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b21	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b27					_FRun_WarmStart:
.011b27	82 07 03	brl $011e31			brl 	WarmStart
.011b2a					Function_NEW:
.011b2a	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b2d	18		clc				clc
.011b2e	65 02		adc $02				adc 	DBaseAddress
.011b30	a8		tay				tay
.011b31	a9 00 00	lda #$0000			lda 	#$0000
.011b34	99 00 00	sta $0000,y			sta 	$0000,y
.011b37	80 00		bra $011b39			bra 	Function_Clear
.011b39					Function_CLEAR:
.011b39	20 45 1b	jsr $011b45			jsr 	ClearVariablesPointersAndStacks
.011b3c	60		rts				rts
.011b3d					Function_STOP:
.011b3d	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b40	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b45					ClearVariablesPointersAndStacks:
.011b45	a9 80 00	lda #$0080			lda 	#BASStack
.011b48	85 2a		sta $2a				sta 	DStack
.011b4a	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b4c	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011b4f	a9 00 00	lda #$0000			lda 	#$0000
.011b52	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b54	20 80 1b	jsr $011b80			jsr 	FindCodeEnd 				; find where the program ends.
.011b57	a8		tay				tay 								; Y points to it.
.011b58	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011b5b	99 02 00	sta $0002,y			sta 	$0002,y
.011b5e	99 04 00	sta $0004,y			sta 	$0004,y
.011b61	98		tya				tya 								; start of working memory up
.011b62	18		clc				clc
.011b63	69 06 00	adc #$0006			adc 	#6
.011b66	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011b69	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b6b	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b6e					_FCLoop:
.011b6e	a9 00 00	lda #$0000			lda 	#$0000
.011b71	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b73	c8		iny				iny
.011b74	c8		iny				iny
.011b75	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011b78	d0 f4		bne $011b6e			bne 	_FCLoop
.011b7a	64 16		stz $16				stz 	DTempStringPointer
.011b7c	20 61 06	jsr $010661			jsr 	StringResetPermanent
.011b7f	60		rts				rts
.011b80					FindCodeEnd:
.011b80	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011b83	18		clc				clc
.011b84	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011b86	a8		tay				tay
.011b87					_FCELoop:
.011b87	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011b8a	f0 08		beq $011b94			beq 	_FCEExit
.011b8c	98		tya				tya 								; add offset
.011b8d	18		clc				clc
.011b8e	79 00 00	adc $0000,y			adc 	$0000,y
.011b91	a8		tay				tay
.011b92	80 f3		bra $011b87			bra 	_FCELoop
.011b94					_FCEExit:
.011b94	98		tya				tya 								; return in A
.011b95	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011b96					Function_Dim:
.011b96	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011b98	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011b9b	f0 3b		beq $011bd8			beq		_FDIMNotArray 				; no, error.
.011b9d	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find it.
.011ba0	b0 41		bcs $011be3			bcs 	_FDIMExists 				; if it does, that's an error.
.011ba2	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011ba4	48		pha				pha
.011ba5	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011ba7	48		pha				pha
.011ba8					_FDIMSkip:
.011ba8	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011baa	e6 06		inc $06				inc 	DCodePtr
.011bac	e6 06		inc $06				inc 	DCodePtr
.011bae	29 00 08	and #$0800			and 	#IDContMask
.011bb1	d0 f5		bne $011ba8			bne 	_FDIMSkip
.011bb3	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011bb6	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check the ) following.
.011bb9	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011bbc	d0 3b		bne $011bf9			bne 	_FDIMSize
.011bbe	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011bc1	f0 36		beq $011bf9			beq 	_FDIMSize
.011bc3	7a		ply				ply 								; restore HashTablePtr
.011bc4	84 20		sty $20				sty 	DHashTablePtr
.011bc6	7a		ply				ply 								; so now A is the high index, Y points to the token
.011bc7	20 32 04	jsr $010432			jsr 	VariableCreate 				; create the variable.
.011bca	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011bcc	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011bcf	d0 06		bne $011bd7			bne 	_FDIMExit
.011bd1	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011bd3	e6 06		inc $06				inc 	DCodePtr
.011bd5	80 bf		bra $011b96			bra 	Function_DIM 				; and do another
.011bd7					_FDIMExit:
.011bd7	60		rts				rts
.011bd8					_FDIMNotArray:
.011bd8	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011bdb	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011be3					_FDIMExists:
.011be3	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011be6	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011bee	65 64 69 6d 65 6e 73 69 6f 6e 00
.011bf9					_FDIMSize:
.011bf9	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011bfc	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c04	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c0a					Command_POKE:
.011c0a	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c0d	48		pha				pha	 								; save on stack
.011c0e	5a		phy				phy
.011c0f	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c12	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c15	fa		plx				plx 								; pull address and store in DTemp1
.011c16	86 0a		stx $0a				stx 	DTemp1+2
.011c18	fa		plx				plx
.011c19	86 08		stx $08				stx 	DTemp1+0
.011c1b	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c1d	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c1f	c2 20		rep #$20			rep 	#$20 						; word mode
.011c21	60		rts				rts
.011c22					Command_DOKE:
.011c22	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c25	48		pha				pha	 								; save on stack
.011c26	5a		phy				phy
.011c27	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c2a	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c2d	fa		plx				plx 								; pull address and store in DTemp1
.011c2e	86 0a		stx $0a				stx 	DTemp1+2
.011c30	fa		plx				plx
.011c31	86 08		stx $08				stx 	DTemp1+0
.011c33	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c35	60		rts				rts
.011c36					Command_LOKE:
.011c36	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c39	48		pha				pha	 								; save on stack
.011c3a	5a		phy				phy
.011c3b	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c3e	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c41	fa		plx				plx 								; pull address and store in DTemp1
.011c42	86 0a		stx $0a				stx 	DTemp1+2
.011c44	fa		plx				plx
.011c45	86 08		stx $08				stx 	DTemp1+0
.011c47	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c49	98		tya				tya
.011c4a	a0 02 00	ldy #$0002			ldy 	#2
.011c4d	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c4f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011c50					Function_ASSERT:
.011c50	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011c53	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011c55	05 08		ora $08				ora 	Dtemp1
.011c57	f0 01		beq $011c5a			beq 	_FAssFail
.011c59	60		rts				rts
.011c5a					_FAssFail:
.011c5a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c5d	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011c65	61 69 6c 65 64 00
.011c6b					Function_CLS:
.011c6b	20 c9 1c	jsr $011cc9			jsr 	HWClearScreen
.011c6e	60		rts				rts
.011c6f					Function_REM:
.011c6f	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c71	f0 0f		beq $011c82			beq 	_FRemExit 					; no comment present
.011c73	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011c76	f0 0a		beq $011c82			beq 	_FRemExit 					; no comment present
.011c78	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011c7b	b0 06		bcs $011c83			bcs 	_FRemSyntax
.011c7d	18		clc				clc 								; add to DCodePtr
.011c7e	65 06		adc $06				adc 	DCodePtr
.011c80	85 06		sta $06				sta 	DCodePtr
.011c82					_FRemExit:
.011c82	60		rts				rts
.011c83					_FRemSyntax:
.011c83	82 37 e9	brl $0105bd			brl 	SyntaxError
.011c86					Function_LINK:
.011c86	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011c89	85 08		sta $08				sta 	DTemp1 						; target address
.011c8b	84 0a		sty $0a				sty 	DTemp1+2
.011c8d	7b		tdc				tda 								; work out what the actual address is
.011c8e	18		clc				clc
.011c8f	69 08 00	adc #$0008			adc 	#DTemp1
.011c92	8f c7 1c 01	sta $011cc7			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011c96	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011c98	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011c9b	48		pha				pha
.011c9c	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011c9f	aa		tax				tax
.011ca0	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011ca3	a8		tay				tay
.011ca4	68		pla				pla
.011ca5	22 c6 1c 01	jsl $011cc6			jsl 	_FLIExecuteIt
.011ca9	5a		phy				phy 								; save Y
.011caa	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cac	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011caf	8a		txa				txa
.011cb0	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011cb3	68		pla				pla
.011cb4	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011cb7	c8		iny				iny 								; point to their high bytes and clear them
.011cb8	c8		iny				iny
.011cb9	a9 00 00	lda #$0000			lda 	#0
.011cbc	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011cbf	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011cc2	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011cc5	60		rts				rts
.011cc6					_FLIExecuteIt:
.011cc6	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011cc9					HWClearScreen:
.011cc9	48		pha				pha
.011cca	da		phx				phx
.011ccb	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011cce	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011cd1	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cd5	ca		dex				dex
.011cd6	10 f6		bpl $011cce			bpl 	_CS0
.011cd8	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011cdb	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011cdf	fa		plx				plx
.011ce0	68		pla				pla
.011ce1	60		rts				rts
.011ce2					HWPrintChar:
.011ce2	48		pha				pha
.011ce3	da		phx				phx
.011ce4	5a		phy				phy
.011ce5	48		pha				pha 								; cursor position -> X
.011ce6	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011cea	aa		tax				tax
.011ceb	68		pla				pla
.011cec	c9 ff ff	cmp #$ffff			cmp 	#-1
.011cef	f0 08		beq $011cf9			beq 	_HWPCNoWrite
.011cf1	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011cf3	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011cf7	c2 20		rep #$20			rep 	#$20
.011cf9					_HWPCNoWrite:
.011cf9	e8		inx				inx 								; bump cursor position.
.011cfa	8a		txa				txa
.011cfb	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011cff	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d02	d0 2b		bne $011d2f			bne 	_HWNotEnd
.011d04	38		sec				sec 	 							; back up one line
.011d05	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d08	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d0c	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d0f					_HWScrollUp:
.011d0f	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d13	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d17	e8		inx				inx
.011d18	e8		inx				inx
.011d19	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d1c	d0 f1		bne $011d0f			bne 	_HWScrollUp
.011d1e	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d21					_HWBlank:
.011d21	a9 20 20	lda #$2020			lda 	#$2020
.011d24	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d28	e8		inx				inx
.011d29	e8		inx				inx
.011d2a	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d2d	d0 f2		bne $011d21			bne 	_HWBlank
.011d2f					_HWNotEnd:
.011d2f	7a		ply				ply
.011d30	fa		plx				plx
.011d31	68		pla				pla
.011d32	60		rts				rts
.011d33					HWNewLine:
.011d33	48		pha				pha
.011d34	da		phx				phx
.011d35	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d38					HWMoveCursor:
.011d38	a9 ff ff	lda #$ffff			lda 	#-1
.011d3b	20 e2 1c	jsr $011ce2			jsr 	HWPrintChar
.011d3e	8a		txa				txa
.011d3f	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d43	d0 f3		bne $011d38			bne 	HWMoveCursor
.011d45	fa		plx				plx
.011d46	68		pla				pla
.011d47	60		rts				rts
.011d48	48		pha		HWTab:	pha
.011d49	da		phx				phx
.011d4a	a2 07 00	ldx #$0007			ldx 	#7
.011d4d	80 e9		bra $011d38			bra 	HWMoveCursor
.011d4f					HWCheckBreak:
.011d4f	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011d53	60		rts				rts
.011d54					HWInkey:
.011d54	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011d58	60		rts				rts
.011d59					HWInputLine:
.011d59	20 54 1d	jsr $011d54			jsr 	HWInkey 					; get a keystroke.
.011d5c	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011d60	f0 f7		beq $011d59			beq 	HWInputLine
.011d62					_HWILWait:
.011d62	20 54 1d	jsr $011d54			jsr 	HWInkey
.011d65	c9 00 00	cmp #$0000			cmp		#0
.011d68	f0 f8		beq $011d62			beq 	_HWILWait
.011d6a	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d6e	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d71	90 2f		bcc $011da2			bcc 	_HWILControl
.011d73	20 e2 1c	jsr $011ce2			jsr 	HWPrintChar 				; print out.
.011d76	80 e1		bra $011d59			bra 	HWInputLine 				; loop back.
.011d78					_HWILBackSpace:
.011d78	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d7c	f0 db		beq $011d59			beq 	HWInputLine
.011d7e	aa		tax				tax
.011d7f	ca		dex				dex
.011d80	a9 20 00	lda #$0020			lda 	#" "
.011d83	e2 20		sep #$20			sep 	#$20
.011d85	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d89	c2 20		rep #$20			rep 	#$20
.011d8b	a2 ff ff	ldx #$ffff			ldx 	#-1
.011d8e					_HWILMove:
.011d8e	8a		txa				txa
.011d8f	18		clc				clc
.011d90	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011d94	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011d97	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d9b	80 bc		bra $011d59			bra 	HWInputLine
.011d9d					_HWILClear:
.011d9d	20 c9 1c	jsr $011cc9			jsr 	HWClearScreen
.011da0	80 b7		bra $011d59			bra 	HWInputLine
.011da2					_HWILControl:
.011da2	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011da5	f0 60		beq $011e07			beq 	_HWILTab
.011da7	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011daa	f0 cc		beq $011d78			beq 	_HWILBackSpace
.011dac	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011daf	c9 17 00	cmp #$0017			cmp 	#23
.011db2	f0 da		beq $011d8e			beq 	_HWILMove
.011db4	a2 40 00	ldx #$0040			ldx 	#sWidth
.011db7	c9 13 00	cmp #$0013			cmp 	#19
.011dba	f0 d2		beq $011d8e			beq 	_HWILMove
.011dbc	a2 ff ff	ldx #$ffff			ldx 	#-1
.011dbf	c9 01 00	cmp #$0001			cmp 	#1
.011dc2	f0 ca		beq $011d8e			beq 	_HWILMove
.011dc4	a2 01 00	ldx #$0001			ldx 	#1
.011dc7	c9 04 00	cmp #$0004			cmp 	#4
.011dca	f0 c2		beq $011d8e			beq 	_HWILMove
.011dcc	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011dcf	f0 cc		beq $011d9d			beq 	_HWILClear
.011dd1	c9 0d 00	cmp #$000d			cmp 	#13
.011dd4	d0 83		bne $011d59			bne 	HWInputLine
.011dd6	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011dda	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011ddd	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011ddf	a9 0f 00	lda #$000f			lda 	#$000F
.011de2	85 0a		sta $0a				sta 	DTemp1+2
.011de4	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011de7					_HWILCopy:
.011de7	bb		tyx				tyx
.011de8	b7 08		lda [$08],y			lda 	[DTemp1],y
.011dea	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011dee	c8		iny				iny
.011def	c8		iny				iny
.011df0	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011df3	d0 f2		bne $011de7			bne 	_HWILCopy
.011df5	a9 00 00	lda #$0000			lda 	#0
.011df8	bb		tyx				tyx
.011df9	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011dfd	20 33 1d	jsr $011d33			jsr 	HWNewLine 					; next line.
.011e00	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e03	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e06	60		rts				rts
.011e07					_HWILTab:
.011e07	20 48 1d	jsr $011d48			jsr 	HWTab
.011e0a	82 4c ff	brl $011d59			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e0d					SwitchBasicInstance:
.011e0d	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e0f	20 c9 1c	jsr $011cc9			jsr 	HWClearScreen 						; clear screen
.011e12	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e15	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e17	86 02		stx $02				stx		DBaseAddress
.011e19	84 04		sty $04				sty 	DHighAddress
.011e1b	ba		tsx				tsx 										; save the current SP.
.011e1c	86 3a		stx $3a				stx 	DStack65816
.011e1e	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e1f	48		pha				pha 										; then copy it into B.
.011e20	ab		plb				plb
.011e21	ab		plb				plb
.011e22	20 45 1b	jsr $011b45			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e25	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e28	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e2a	f0 05		beq $011e31			beq 	WarmStart
.011e2c	3a		dec a				dec 	a 									; decrement zero.
.011e2d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e2f	80 18		bra $011e49			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e31					WarmStart:
.011e31	a2 97 1e	ldx #$1e97			ldx 	#BasicPrompt & $FFFF
.011e34	20 29 06	jsr $010629			jsr 	PrintROMMessage
.011e37					NextCommand:
.011e37	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e39	9a		txs				txs
.011e3a	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e3c	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e3f	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e41	d0 52		bne $011e95			bne 	ExitEmulator
.011e43	20 59 1d	jsr $011d59			jsr 	HWInputLine 						; read line to YA.
.011e46	20 6c 07	jsr $01076c			jsr 	Tokenise 							; tokenise it.
.011e49					ExecuteTokenBuffer:
.011e49	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e4c	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e4e	f0 e7		beq $011e37			beq 	NextCommand 						; nothing.
.011e50	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011e53	90 27		bcc $011e7c			bcc 	_ETBCommand
.011e55	c9 00 c0	cmp #$c000			cmp 	#$C000
.011e58	b0 22		bcs $011e7c			bcs 	_ETBCommand
.011e5a	38		sec				sec
.011e5b	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011e5e	f0 1f		beq $011e7f			beq 	_ETBError
.011e60	48		pha				pha
.011e61	20 c2 04	jsr $0104c2			jsr 	LineDelete 							; delete the line, if it exists.
.011e64	20 45 1b	jsr $011b45			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e67	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011e6a	18		clc				clc
.011e6b	65 02		adc $02				adc 	DBaseAddress
.011e6d	a8		tay				tay 										; Y contains the code.
.011e6e	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e71	f0 c4		beq $011e37			beq 	NextCommand 						; no, next command.
.011e73	68		pla				pla 										; line number in A, code in Y.
.011e74	20 fd 04	jsr $0104fd			jsr 	LineInsert 							; insert the line
.011e77	20 45 1b	jsr $011b45			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e7a	80 bb		bra $011e37			bra 	NextCommand
.011e7c					_ETBCommand:
.011e7c	4c b9 1a	jmp $011ab9			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011e7f					_ETBError:
.011e7f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011e82	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011e8a	61 76 65 20 6c 69 6e 65 20 30 00
.011e95					ExitEmulator:
.011e95	02 00		cop #$00			cop 	#0
.011e97					BasicPrompt:
>011e97	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 6c 07	jsr $01076c			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	12 66 00 c0 00 00 02 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 01 00 33 3e 3e de
>024208	f9 d8 24 d0 03 40 28 32 00 00 12 00 02 00 33 3e
>024218	3b de b9 d8 13 d0 04 40 28 32 00 00 0e 00 03 00
>024228	33 3e 0f d0 03 40 28 32 00 00 10 00 04 00 33 3e
>024238	f6 dc 08 d0 04 40 28 32 00 00 10 00 05 00 33 3e
>024248	c2 dc 1d d0 04 40 28 32 00 00 10 00 06 00 33 3e
>024258	5f dd 14 d0 03 40 28 32 00 00 0e 00 07 00 33 3e
>024268	25 d5 06 40 28 32 00 00 10 00 08 00 33 3e a6 dd
>024278	0e d0 02 40 28 32 00 00 10 00 09 00 33 3e 0a de
>024288	01 d1 06 40 28 32 00 00 10 00 0a 00 33 3e ed dc
>024298	03 d0 02 40 28 32 00 00 10 00 0b 00 33 3e 3d fe
>0242a8	87 f3 02 40 28 32 00 00 10 00 0c 00 33 3e fb fc
>0242b8	3b f5 04 40 28 32 00 00 10 00 0d 00 33 3e 65 fe
>0242c8	17 f0 04 40 28 32 00 00 10 00 0e 00 33 3e ae fd
>0242d8	6b f4 04 40 28 32 00 00 12 00 0f 00 33 3e d7 fc
>0242e8	19 f9 15 f0 06 40 28 32 00 00 10 00 10 00 33 3e
>0242f8	31 fe 90 f3 06 40 28 32 00 00 12 00 11 00 33 3e
>024308	1d fd 64 f8 23 f0 06 40 28 32 00 00 0e 00 12 00
>024318	33 3e b3 f5 02 40 28 32 00 00 10 00 13 00 33 3e
>024328	f8 fc 02 f0 04 40 28 32 00 00 12 00 14 00 33 3e
>024338	30 fd 1a fc 05 f0 03 40 28 32 00 00 12 00 15 00
>024348	33 cd 10 c0 06 22 0b 24 03 10 a9 7e 00 00 10 00
>024358	16 00 19 c0 06 22 0b 24 01 10 b9 80 00 00 10 00
>024368	17 00 c4 cc 6a c6 06 22 0b 24 b2 40 00 00 16 00
>024378	18 00 2d 3e d7 cd 8e cb 10 c0 06 22 0b 24 04 10
>024388	4e 83 00 00 12 00 19 00 2d 3e 08 ce 78 c8 1d c0
>024398	06 22 54 40 00 00 10 00 1a 00 2d 3e 02 c0 06 22
>0243a8	01 10 30 52 00 00 10 00 1b 00 2d 3e 56 c5 06 22
>0243b8	05 10 c5 b4 00 00 16 00 1c 00 2d 3e 2f cd 19 cb
>0243c8	0c c0 06 22 0b 24 05 10 0c aa 00 00 10 00 1d 00
>0243d8	d3 cd 1b c1 06 22 0b 24 03 40 00 00 14 00 1e 00
>0243e8	2d 3e 3c ce e0 c5 06 22 0b 24 02 10 c9 45 00 00
>0243f8	12 00 1f 00 b7 cd 3b ca 0e c0 06 22 05 10 0c 6d
>024408	00 00 10 00 20 00 5f cd 69 c4 06 22 0b 24 a3 85
>024418	00 00 10 00 21 00 80 cd 23 c0 06 22 0b 24 65 40
>024428	00 00 0e 00 22 00 4c c5 06 22 01 10 d9 74 00 00
>024438	10 00 23 00 2d 3e ba cd 03 c0 06 22 ab 40 00 00
>024448	14 00 24 00 2d 3e 35 ce df c2 06 22 0b 24 03 10
>024458	05 b1 00 00 16 00 25 00 2d 3e c8 cc 43 cc 04 c0
>024468	06 22 0b 24 05 10 51 5d 00 00 0c 00 26 00 c0 c4
>024478	06 22 35 40 00 00 0e 00 27 00 62 c6 06 22 03 10
>024488	ea 56 00 00 12 00 28 00 2d 3e f6 cc a1 c1 06 22
>024498	01 10 46 8a 00 00 12 00 29 00 4b cd 08 c0 06 22
>0244a8	0b 24 03 10 5a b2 00 00 10 00 2a 00 2d 3e 17 c0
>0244b8	06 22 0b 24 21 40 00 00 10 00 2b 00 2d 3e d9 cc
>0244c8	14 c0 06 22 25 40 00 00 10 00 2c 00 2d 3e 60 c5
>0244d8	06 22 01 10 a5 b4 00 00 10 00 2d 00 2d 3e f7 c4
>0244e8	06 22 0b 24 3e 40 00 00 10 00 2e 00 c8 c4 06 22
>0244f8	0b 24 04 10 bd 7f 00 00 12 00 2f 00 02 cd 15 c0
>024508	06 22 0b 24 02 10 0b b4 00 00 14 00 30 00 2d 3e
>024518	b1 cd 05 c3 06 22 0b 24 01 10 dd 66 00 00 10 00
>024528	31 00 2d 3e 64 ce de c4 06 22 68 40 00 00 10 00
>024538	32 00 2d 3e f8 cc 1a c0 06 22 67 40 00 00 10 00
>024548	33 00 07 c0 06 22 0b 24 02 10 a9 66 00 00 12 00
>024558	34 00 2d 3e 28 cd c1 c8 1d c0 06 22 91 ba 00 00
>024568	10 00 35 00 2d 3e 0b c0 06 22 03 10 5a 7d 00 00
>024578	12 00 36 00 7d cd 21 c0 06 22 0b 24 01 10 0d a5
>024588	00 00 12 00 37 00 2d 3e 32 ce 21 c0 06 22 01 10
>024598	6d 4c 00 00 10 00 38 00 1a c0 06 22 0b 24 02 10
>0245a8	18 92 00 00 14 00 39 00 2d 3e 0d ce 14 c9 1b c0
>0245b8	06 22 0b 24 69 40 00 00 12 00 3a 00 2d 3e 28 c5
>0245c8	06 22 0b 24 01 10 f8 ab 00 00 14 00 3b 00 2d 3e
>0245d8	ba cd 69 c9 22 c0 06 22 0b 24 73 40 00 00 10 00
>0245e8	3c 00 2d 3e 16 c0 06 22 0b 24 43 40 00 00 0e 00
>0245f8	3d 00 cd c4 06 22 03 10 25 79 00 00 12 00 3e 00
>024608	2d 3e 14 c0 06 22 0b 24 05 10 d7 9c 00 00 10 00
>024618	3f 00 2d 3e d0 c5 06 22 0b 24 42 90 00 00 0e 00
>024628	40 00 6b ce 5b c5 06 22 2e 7a 00 00 12 00 41 00
>024638	c9 cc ae cd 0f c0 06 22 02 10 9e 89 00 00 10 00
>024648	42 00 5a cd 9f c1 06 22 0b 24 af 9b 00 00 10 00
>024658	43 00 53 cd 30 c6 06 22 0b 24 4f 40 00 00 10 00
>024668	44 00 ba c5 06 22 0b 24 05 10 8c 85 00 00 14 00
>024678	45 00 cc cc 1a c9 0a c0 06 22 0b 24 02 10 59 9e
>024688	00 00 0e 00 46 00 3b c6 06 22 0b 24 2b aa 00 00
>024698	12 00 47 00 60 ce 90 cb 15 c0 06 22 0b 24 a1 40
>0246a8	00 00 10 00 48 00 1f cd b9 c1 06 22 05 10 5a aa
>0246b8	00 00 10 00 49 00 10 ce 09 cb 16 c0 06 22 07 40
>0246c8	00 00 0e 00 4a 00 2d 3e 2f c5 06 22 fd 81 00 00
>0246d8	12 00 4b 00 2f ce 82 ca 17 c0 06 22 0b 24 af 40
>0246e8	00 00 0e 00 4c 00 12 c0 06 22 02 10 e5 b2 00 00
>0246f8	10 00 4d 00 55 ce a2 c0 06 22 0b 24 02 40 00 00
>024708	10 00 4e 00 2d 3e 11 c0 06 22 02 10 6d bd 00 00
>024718	12 00 4f 00 6d ce f0 c4 06 22 0b 24 03 10 69 61
>024728	00 00 12 00 50 00 2d 3e 6a c6 06 22 0b 24 02 10
>024738	53 92 00 00 12 00 51 00 2d 3e 77 ed a9 e5 06 22
>024748	04 00 00 00 00 00 1a 00 52 00 f9 ec 21 e0 06 22
>024758	0e 00 0a 58 55 50 48 43 20 48 41 20 48 00 00 00
>024768	14 00 53 00 2d 3e ed ec c3 e4 06 22 06 00 02 4b
>024778	4b 00 00 00 16 00 54 00 2d 3e 57 ed 99 ea 21 e0
>024788	06 22 06 00 03 4c 4d 4c 00 00 12 00 55 00 11 e0
>024798	06 22 08 00 04 43 54 54 50 00 00 00 18 00 56 00
>0247a8	54 ed 11 e0 06 22 0c 00 09 41 20 45 20 42 42 4a
>0247b8	49 5a 00 00 12 00 57 00 2d 3e 1c ed 17 e0 06 22
>0247c8	04 00 00 00 00 00 14 00 58 00 5b e5 06 22 0a 00
>0247d8	07 57 53 44 57 5a 4b 4f 00 00 18 00 59 00 a3 ed
>0247e8	bd e2 06 22 0c 00 08 57 58 49 20 20 52 56 54 00
>0247f8	00 00 1e 00 5a 00 2d 3e d1 ed 10 ec 18 e0 06 22
>024808	0e 00 0b 52 57 45 58 5a 55 50 41 49 20 52 00 00
>024818	1e 00 5b 00 2d 3e 03 ed 84 ec 22 e0 06 22 0e 00
>024828	0a 49 20 20 52 41 20 58 46 58 4c 00 00 00 18 00
>024838	5c 00 23 ed 79 e2 06 22 0c 00 08 41 59 56 20 5a
>024848	49 20 48 00 00 00 14 00 5d 00 2d 3e 59 e6 06 22
>024858	08 00 05 50 20 43 47 49 00 00 14 00 5e 00 2d 3e
>024868	ff ec 01 e0 06 22 06 00 02 4f 53 00 00 00 10 00
>024878	5f 00 2d 3e b1 e5 06 22 04 00 01 46 00 00 1e 00
>024888	60 00 2d 3e 5b ed 5a ec 1f e0 06 22 0e 00 0a 57
>024898	53 59 49 51 5a 55 44 20 56 00 00 00 1a 00 61 00
>0248a8	2d 3e 2e e5 06 22 0e 00 0a 47 48 20 59 55 44 51
>0248b8	5a 20 42 00 00 00 10 00 62 00 4d ed 5b e3 06 22
>0248c8	04 00 01 54 00 00 1a 00 63 00 2d 3e 54 ed bf ea
>0248d8	14 e0 06 22 0a 00 06 54 42 54 59 41 51 00 00 00
>0248e8	1a 00 64 00 2d 3e 09 e0 06 22 0e 00 0a 43 4a 20
>0248f8	4f 48 59 4d 57 58 50 00 00 00 18 00 65 00 2d 3e
>024908	40 ee 36 ea 21 e0 06 22 08 00 05 50 50 4e 48 47
>024918	00 00 1a 00 66 00 2d 3e ed ec 06 e0 06 22 0c 00
>024928	09 4d 44 4a 20 20 48 4a 59 53 00 00 1c 00 67 00
>024938	2d 3e d8 ed 00 ea 1b e0 06 22 0c 00 09 4d 50 58
>024948	5a 53 59 4d 20 44 00 00 14 00 68 00 2d 3e 87 ed
>024958	25 e4 06 22 06 00 02 43 50 00 00 00 18 00 69 00
>024968	2d 3e 8a ed 10 e0 06 22 0a 00 07 42 50 51 59 4d
>024978	5a 41 00 00 16 00 6a 00 01 e0 06 22 0c 00 08 51
>024988	47 58 4a 20 41 41 43 00 00 00 1e 00 6b 00 2d 3e
>024998	36 ee ed e8 0e e0 06 22 0e 00 0a 46 52 51 58 41
>0249a8	4a 48 4e 53 46 00 00 00 14 00 6c 00 2d 3e dc ed
>0249b8	10 e0 06 22 06 00 02 57 45 00 00 00 14 00 6d 00
>0249c8	2a e5 06 22 0a 00 07 55 59 44 49 4c 20 42 00 00
>0249d8	10 00 6e 00 d2 e5 06 22 06 00 03 45 57 44 00 00
>0249e8	1a 00 6f 00 2d 3e 10 e0 06 22 0e 00 0a 45 20 52
>0249f8	20 20 50 47 4c 4b 55 00 00 00 12 00 70 00 3c ee
>024a08	9d e8 16 e0 06 22 04 00 01 56 00 00 16 00 71 00
>024a18	d3 e4 06 22 0c 00 08 47 58 45 5a 20 41 52 58 00
>024a28	00 00 16 00 72 00 ce ec 8f eb 04 e0 06 22 08 00
>024a38	05 46 48 53 54 4b 00 00 1c 00 73 00 2d 3e 84 ed
>024a48	20 e0 06 22 0e 00 0b 41 20 20 20 42 20 20 48 20
>024a58	47 54 00 00 14 00 74 00 2d 3e 34 ee 40 e1 06 22
>024a68	06 00 03 5a 43 4a 00 00 10 00 75 00 2a e6 06 22
>024a78	06 00 03 49 20 53 00 00 10 00 76 00 25 e5 06 22
>024a88	06 00 03 42 20 49 00 00 16 00 77 00 07 e0 06 22
>024a98	0c 00 09 4b 4d 54 20 56 20 44 4d 4c 00 00 1e 00
>024aa8	78 00 2d 3e 8b ed f0 e9 1b e0 06 22 0e 00 0a 4c
>024ab8	44 20 48 20 4d 45 20 44 4e 00 00 00 16 00 79 00
>024ac8	2d 3e c9 ec d0 eb 19 e0 06 22 06 00 02 52 51 00
>024ad8	00 00 16 00 7a 00 2d 3e 16 e0 06 22 0a 00 07 52
>024ae8	20 47 20 46 20 4f 00 00 18 00 7b 00 2d 3e 60 e5
>024af8	06 22 0c 00 09 5a 48 48 4e 20 44 48 45 52 00 00
>024b08	12 00 7c 00 cc ec 86 ec 1a e0 06 22 04 00 00 00
>024b18	00 00 18 00 7d 00 0b e0 06 22 0e 00 0a 4f 56 50
>024b28	20 42 41 20 4d 52 52 00 00 00 12 00 7e 00 2d 3e
>024b38	ca ec 16 e0 06 22 04 00 00 00 00 00 16 00 7f 00
>024b48	d4 ed 1c e0 06 22 0a 00 06 57 44 54 20 4a 59 00
>024b58	00 00 1c 00 80 00 2d 3e 5a ee ce ed 0d e0 06 22
>024b68	0c 00 09 50 51 46 59 58 20 4b 20 55 00 00 12 00
>024b78	81 00 2d 3e 6d e6 06 22 06 00 03 43 4e 49 00 00
>024b88	14 00 82 00 75 ed e0 ec 09 e0 06 22 06 00 03 4d
>024b98	20 4a 00 00 16 00 83 00 2d 3e f8 ec 20 e0 06 22
>024ba8	08 00 04 4a 4d 5a 4c 00 00 00 1a 00 84 00 b0 ed
>024bb8	06 e0 06 22 0e 00 0a 57 59 42 5a 47 4d 48 4f 4d
>024bc8	47 00 00 00 1a 00 85 00 2d 3e e6 ed 51 e0 06 22
>024bd8	0c 00 09 50 4c 20 4b 59 54 4b 4a 56 00 00 18 00
>024be8	86 00 01 ee 06 e0 06 22 0c 00 08 54 42 48 45 57
>024bf8	4a 4f 41 00 00 00 14 00 87 00 f0 ec f3 e4 06 22
>024c08	08 00 04 49 53 51 4e 00 00 00 12 00 88 00 2d 3e
>024c18	d1 e4 06 22 06 00 02 4a 56 00 00 00 18 00 89 00
>024c28	5e ed ef e0 06 22 0c 00 08 48 48 54 58 20 20 52
>024c38	55 00 00 00 10 00 8a 00 2d 3e 0e e0 06 22 04 00
>024c48	01 50 00 00 18 00 8b 00 2d 3e 03 ed 88 ea 1f e0
>024c58	06 22 08 00 05 4a 44 55 5a 44 00 00 1c 00 8c 00
>024c68	aa ed 01 e9 10 e0 06 22 0e 00 0a 4c 20 50 4e 57
>024c78	4e 51 51 42 4a 00 00 00 4c 00 8d 00 3e de f9 d8
>024c88	24 d0 00 40 28 32 06 22 0e 40 26 32 3e de f9 d8
>024c98	24 d0 01 40 28 32 06 22 02 10 46 71 26 32 3e de
>024ca8	f9 d8 24 d0 02 40 28 32 06 22 01 10 cc 5f 26 32
>024cb8	3e de f9 d8 24 d0 03 40 28 32 06 22 0b 24 05 10
>024cc8	5a 75 00 00 5a 00 8e 00 3b de b9 d8 13 d0 00 40
>024cd8	28 32 06 22 a0 40 26 32 3b de b9 d8 13 d0 01 40
>024ce8	28 32 06 22 0b 24 01 10 74 57 26 32 3b de b9 d8
>024cf8	13 d0 02 40 28 32 06 22 ad 40 26 32 3b de b9 d8
>024d08	13 d0 03 40 28 32 06 22 01 10 68 ac 26 32 3b de
>024d18	b9 d8 13 d0 04 40 28 32 06 22 aa 40 00 00 40 00
>024d28	8f 00 0f d0 00 40 28 32 06 22 0b 24 02 10 34 44
>024d38	26 32 0f d0 01 40 28 32 06 22 01 10 20 7e 26 32
>024d48	0f d0 02 40 28 32 06 22 05 10 b9 53 26 32 0f d0
>024d58	03 40 28 32 06 22 0b 24 01 10 03 93 00 00 58 00
>024d68	90 00 f6 dc 08 d0 00 40 28 32 06 22 0b 24 01 10
>024d78	3a 8e 26 32 f6 dc 08 d0 01 40 28 32 06 22 0b 24
>024d88	04 10 9d 88 26 32 f6 dc 08 d0 02 40 28 32 06 22
>024d98	0b 24 04 10 d2 ae 26 32 f6 dc 08 d0 03 40 28 32
>024da8	06 22 73 40 26 32 f6 dc 08 d0 04 40 28 32 06 22
>024db8	0b 24 0e 87 00 00 58 00 91 00 c2 dc 1d d0 00 40
>024dc8	28 32 06 22 0b 24 02 10 e4 7c 26 32 c2 dc 1d d0
>024dd8	01 40 28 32 06 22 01 10 37 59 26 32 c2 dc 1d d0
>024de8	02 40 28 32 06 22 01 10 11 8f 26 32 c2 dc 1d d0
>024df8	03 40 28 32 06 22 02 10 35 44 26 32 c2 dc 1d d0
>024e08	04 40 28 32 06 22 0b 24 01 10 f0 b2 00 00 42 00
>024e18	92 00 5f dd 14 d0 00 40 28 32 06 22 a9 40 26 32
>024e28	5f dd 14 d0 01 40 28 32 06 22 39 40 26 32 5f dd
>024e38	14 d0 02 40 28 32 06 22 0b 24 04 10 8f 57 26 32
>024e48	5f dd 14 d0 03 40 28 32 06 22 02 10 8a 74 00 00
>024e58	64 00 93 00 25 d5 00 40 28 32 06 22 03 10 bf 45
>024e68	26 32 25 d5 01 40 28 32 06 22 93 40 26 32 25 d5
>024e78	02 40 28 32 06 22 05 10 a8 66 26 32 25 d5 03 40
>024e88	28 32 06 22 05 10 0d 54 26 32 25 d5 04 40 28 32
>024e98	06 22 20 40 26 32 25 d5 05 40 28 32 06 22 0b 24
>024ea8	04 10 b5 82 26 32 25 d5 06 40 28 32 06 22 0b 24
>024eb8	1f 8c 00 00 34 00 94 00 a6 dd 0e d0 00 40 28 32
>024ec8	06 22 0b 24 05 10 6c b7 26 32 a6 dd 0e d0 01 40
>024ed8	28 32 06 22 05 10 ff 91 26 32 a6 dd 0e d0 02 40
>024ee8	28 32 06 22 49 40 00 00 76 00 95 00 0a de 01 d1
>024ef8	00 40 28 32 06 22 01 10 5a 9b 26 32 0a de 01 d1
>024f08	01 40 28 32 06 22 01 10 9e b0 26 32 0a de 01 d1
>024f18	02 40 28 32 06 22 05 10 c8 7a 26 32 0a de 01 d1
>024f28	03 40 28 32 06 22 0b 24 03 10 e8 b2 26 32 0a de
>024f38	01 d1 04 40 28 32 06 22 03 10 9b 77 26 32 0a de
>024f48	01 d1 05 40 28 32 06 22 1f 40 26 32 0a de 01 d1
>024f58	06 40 28 32 06 22 0b 24 01 10 f0 9c 00 00 36 00
>024f68	96 00 ed dc 03 d0 00 40 28 32 06 22 01 10 44 55
>024f78	26 32 ed dc 03 d0 01 40 28 32 06 22 0b 24 41 40
>024f88	26 32 ed dc 03 d0 02 40 28 32 06 22 0b 24 04 10
>024f98	5c b6 00 00 4a 00 97 00 3d fe 87 f3 00 40 28 32
>024fa8	06 22 0e 00 0b 48 53 4d 20 4a 49 55 20 47 54 4c
>024fb8	26 32 3d fe 87 f3 01 40 28 32 06 22 0e 00 0b 46
>024fc8	41 43 42 58 52 4a 20 46 58 51 26 32 3d fe 87 f3
>024fd8	02 40 28 32 06 22 06 00 03 4c 43 47 00 00 6c 00
>024fe8	98 00 fb fc 3b f5 00 40 28 32 06 22 04 00 01 57
>024ff8	26 32 fb fc 3b f5 01 40 28 32 06 22 0a 00 07 53
>025008	41 20 20 20 47 4c 26 32 fb fc 3b f5 02 40 28 32
>025018	06 22 06 00 03 4d 4a 48 26 32 fb fc 3b f5 03 40
>025028	28 32 06 22 0e 00 0a 4a 57 43 4e 57 50 20 53 20
>025038	4a 00 26 32 fb fc 3b f5 04 40 28 32 06 22 0a 00
>025048	07 58 45 44 57 20 59 43 00 00 78 00 99 00 65 fe
>025058	17 f0 00 40 28 32 06 22 0a 00 06 4a 42 51 59 53
>025068	4b 00 26 32 65 fe 17 f0 01 40 28 32 06 22 0a 00
>025078	06 52 4d 44 4f 48 48 00 26 32 65 fe 17 f0 02 40
>025088	28 32 06 22 0c 00 09 4c 53 4f 51 47 4e 20 46 4b
>025098	26 32 65 fe 17 f0 03 40 28 32 06 22 0c 00 08 50
>0250a8	51 20 55 4b 20 52 59 00 26 32 65 fe 17 f0 04 40
>0250b8	28 32 06 22 0c 00 09 4e 44 55 53 20 49 56 44 4b
>0250c8	00 00 72 00 9a 00 ae fd 6b f4 00 40 28 32 06 22
>0250d8	0e 00 0a 52 56 48 41 5a 41 48 56 42 4f 00 26 32
>0250e8	ae fd 6b f4 01 40 28 32 06 22 0c 00 09 41 20 20
>0250f8	53 5a 54 56 20 45 26 32 ae fd 6b f4 02 40 28 32
>025108	06 22 06 00 03 4b 42 5a 26 32 ae fd 6b f4 03 40
>025118	28 32 06 22 0a 00 06 47 4d 42 50 20 50 00 26 32
>025128	ae fd 6b f4 04 40 28 32 06 22 08 00 05 58 20 20
>025138	20 41 00 00 9a 00 9b 00 d7 fc 19 f9 15 f0 00 40
>025148	28 32 06 22 04 00 00 00 26 32 d7 fc 19 f9 15 f0
>025158	01 40 28 32 06 22 0e 00 0b 55 20 4f 46 50 20 4f
>025168	56 49 4d 46 26 32 d7 fc 19 f9 15 f0 02 40 28 32
>025178	06 22 06 00 02 49 42 00 26 32 d7 fc 19 f9 15 f0
>025188	03 40 28 32 06 22 0c 00 09 43 55 58 5a 20 48 47
>025198	4d 4b 26 32 d7 fc 19 f9 15 f0 04 40 28 32 06 22
>0251a8	06 00 03 4d 49 52 26 32 d7 fc 19 f9 15 f0 05 40
>0251b8	28 32 06 22 06 00 02 46 5a 00 26 32 d7 fc 19 f9
>0251c8	15 f0 06 40 28 32 06 22 04 00 00 00 00 00 88 00
>0251d8	9c 00 31 fe 90 f3 00 40 28 32 06 22 04 00 01 56
>0251e8	26 32 31 fe 90 f3 01 40 28 32 06 22 0a 00 07 59
>0251f8	20 4a 42 58 4b 4e 26 32 31 fe 90 f3 02 40 28 32
>025208	06 22 08 00 04 53 57 20 45 00 26 32 31 fe 90 f3
>025218	03 40 28 32 06 22 04 00 00 00 26 32 31 fe 90 f3
>025228	04 40 28 32 06 22 08 00 04 42 52 4c 48 00 26 32
>025238	31 fe 90 f3 05 40 28 32 06 22 0a 00 07 56 41 4c
>025248	46 57 20 53 26 32 31 fe 90 f3 06 40 28 32 06 22
>025258	04 00 01 53 00 00 a0 00 9d 00 1d fd 64 f8 23 f0
>025268	00 40 28 32 06 22 0e 00 0a 42 4d 41 41 52 44 42
>025278	49 55 49 00 26 32 1d fd 64 f8 23 f0 01 40 28 32
>025288	06 22 0e 00 0a 4d 4b 41 56 4f 55 20 4e 51 4e 00
>025298	26 32 1d fd 64 f8 23 f0 02 40 28 32 06 22 04 00
>0252a8	01 56 26 32 1d fd 64 f8 23 f0 03 40 28 32 06 22
>0252b8	08 00 04 50 4b 5a 46 00 26 32 1d fd 64 f8 23 f0
>0252c8	04 40 28 32 06 22 06 00 02 41 4c 00 26 32 1d fd
>0252d8	64 f8 23 f0 05 40 28 32 06 22 04 00 00 00 26 32
>0252e8	1d fd 64 f8 23 f0 06 40 28 32 06 22 08 00 05 49
>0252f8	20 20 4a 56 00 00 48 00 9e 00 b3 f5 00 40 28 32
>025308	06 22 0c 00 09 52 43 44 42 42 44 51 4b 4c 26 32
>025318	b3 f5 01 40 28 32 06 22 0e 00 0a 56 44 46 54 45
>025328	45 41 5a 20 41 00 26 32 b3 f5 02 40 28 32 06 22
>025338	0c 00 09 42 4a 50 4a 4e 44 20 20 48 00 00 70 00
>025348	9f 00 f8 fc 02 f0 00 40 28 32 06 22 0a 00 06 52
>025358	43 5a 47 48 48 00 26 32 f8 fc 02 f0 01 40 28 32
>025368	06 22 06 00 03 51 41 57 26 32 f8 fc 02 f0 02 40
>025378	28 32 06 22 08 00 05 50 57 20 20 45 26 32 f8 fc
>025388	02 f0 03 40 28 32 06 22 0e 00 0a 54 4f 56 56 4a
>025398	57 57 4c 58 59 00 26 32 f8 fc 02 f0 04 40 28 32
>0253a8	06 22 0a 00 06 49 4d 53 42 54 4f 00 00 00 58 00
>0253b8	a0 00 30 fd 1a fc 05 f0 00 40 28 32 06 22 04 00
>0253c8	00 00 26 32 30 fd 1a fc 05 f0 01 40 28 32 06 22
>0253d8	0c 00 08 4e 20 4c 56 53 20 54 47 00 26 32 30 fd
>0253e8	1a fc 05 f0 02 40 28 32 06 22 06 00 02 50 4d 00
>0253f8	26 32 30 fd 1a fc 05 f0 03 40 28 32 06 22 06 00
>025408	03 58 4f 58 00 00 14 00 a1 00 2e 3e 33 cd 10 c0
>025418	06 22 0b 24 03 10 a9 7e 00 00 12 00 a2 00 2e 3e
>025428	19 c0 06 22 0b 24 01 10 b9 80 00 00 12 00 a3 00
>025438	2e 3e c4 cc 6a c6 06 22 0b 24 b2 40 00 00 16 00
>025448	a4 00 2e 3e d7 cd 8e cb 10 c0 06 22 0b 24 04 10
>025458	4e 83 00 00 12 00 a5 00 2e 3e 08 ce 78 c8 1d c0
>025468	06 22 54 40 00 00 10 00 a6 00 2e 3e 02 c0 06 22
>025478	01 10 30 52 00 00 10 00 a7 00 2e 3e 56 c5 06 22
>025488	05 10 c5 b4 00 00 16 00 a8 00 2e 3e 2f cd 19 cb
>025498	0c c0 06 22 0b 24 05 10 0c aa 00 00 12 00 a9 00
>0254a8	2e 3e d3 cd 1b c1 06 22 0b 24 03 40 00 00 14 00
>0254b8	aa 00 2e 3e 3c ce e0 c5 06 22 0b 24 02 10 c9 45
>0254c8	00 00 14 00 ab 00 2e 3e b7 cd 3b ca 0e c0 06 22
>0254d8	05 10 0c 6d 00 00 12 00 ac 00 2e 3e 5f cd 69 c4
>0254e8	06 22 0b 24 a3 85 00 00 12 00 ad 00 2e 3e 80 cd
>0254f8	23 c0 06 22 0b 24 65 40 00 00 10 00 ae 00 2e 3e
>025508	4c c5 06 22 01 10 d9 74 00 00 10 00 af 00 2e 3e
>025518	ba cd 03 c0 06 22 ab 40 00 00 14 00 b0 00 2e 3e
>025528	35 ce df c2 06 22 0b 24 03 10 05 b1 00 00 16 00
>025538	b1 00 2e 3e c8 cc 43 cc 04 c0 06 22 0b 24 05 10
>025548	51 5d 00 00 0e 00 b2 00 2e 3e c0 c4 06 22 35 40
>025558	00 00 10 00 b3 00 2e 3e 62 c6 06 22 03 10 ea 56
>025568	00 00 12 00 b4 00 2e 3e f6 cc a1 c1 06 22 01 10
>025578	46 8a 00 00 14 00 b5 00 2e 3e 4b cd 08 c0 06 22
>025588	0b 24 03 10 5a b2 00 00 10 00 b6 00 2e 3e 17 c0
>025598	06 22 0b 24 21 40 00 00 10 00 b7 00 2e 3e d9 cc
>0255a8	14 c0 06 22 25 40 00 00 10 00 b8 00 2e 3e 60 c5
>0255b8	06 22 01 10 a5 b4 00 00 10 00 b9 00 2e 3e f7 c4
>0255c8	06 22 0b 24 3e 40 00 00 12 00 ba 00 2e 3e c8 c4
>0255d8	06 22 0b 24 04 10 bd 7f 00 00 14 00 bb 00 2e 3e
>0255e8	02 cd 15 c0 06 22 0b 24 02 10 0b b4 00 00 14 00
>0255f8	bc 00 2e 3e b1 cd 05 c3 06 22 0b 24 01 10 dd 66
>025608	00 00 10 00 bd 00 2e 3e 64 ce de c4 06 22 68 40
>025618	00 00 10 00 be 00 2e 3e f8 cc 1a c0 06 22 67 40
>025628	00 00 12 00 bf 00 2e 3e 07 c0 06 22 0b 24 02 10
>025638	a9 66 00 00 12 00 c0 00 2e 3e 28 cd c1 c8 1d c0
>025648	06 22 91 ba 00 00 10 00 c1 00 2e 3e 0b c0 06 22
>025658	03 10 5a 7d 00 00 14 00 c2 00 2e 3e 7d cd 21 c0
>025668	06 22 0b 24 01 10 0d a5 00 00 12 00 c3 00 2e 3e
>025678	32 ce 21 c0 06 22 01 10 6d 4c 00 00 12 00 c4 00
>025688	2e 3e 1a c0 06 22 0b 24 02 10 18 92 00 00 14 00
>025698	c5 00 2e 3e 0d ce 14 c9 1b c0 06 22 0b 24 69 40
>0256a8	00 00 12 00 c6 00 2e 3e 28 c5 06 22 0b 24 01 10
>0256b8	f8 ab 00 00 14 00 c7 00 2e 3e ba cd 69 c9 22 c0
>0256c8	06 22 0b 24 73 40 00 00 10 00 c8 00 2e 3e 16 c0
>0256d8	06 22 0b 24 43 40 00 00 10 00 c9 00 2e 3e cd c4
>0256e8	06 22 03 10 25 79 00 00 12 00 ca 00 2e 3e 14 c0
>0256f8	06 22 0b 24 05 10 d7 9c 00 00 10 00 cb 00 2e 3e
>025708	d0 c5 06 22 0b 24 42 90 00 00 10 00 cc 00 2e 3e
>025718	6b ce 5b c5 06 22 2e 7a 00 00 14 00 cd 00 2e 3e
>025728	c9 cc ae cd 0f c0 06 22 02 10 9e 89 00 00 12 00
>025738	ce 00 2e 3e 5a cd 9f c1 06 22 0b 24 af 9b 00 00
>025748	12 00 cf 00 2e 3e 53 cd 30 c6 06 22 0b 24 4f 40
>025758	00 00 12 00 d0 00 2e 3e ba c5 06 22 0b 24 05 10
>025768	8c 85 00 00 16 00 d1 00 2e 3e cc cc 1a c9 0a c0
>025778	06 22 0b 24 02 10 59 9e 00 00 10 00 d2 00 2e 3e
>025788	3b c6 06 22 0b 24 2b aa 00 00 14 00 d3 00 2e 3e
>025798	60 ce 90 cb 15 c0 06 22 0b 24 a1 40 00 00 12 00
>0257a8	d4 00 2e 3e 1f cd b9 c1 06 22 05 10 5a aa 00 00
>0257b8	12 00 d5 00 2e 3e 10 ce 09 cb 16 c0 06 22 07 40
>0257c8	00 00 0e 00 d6 00 2e 3e 2f c5 06 22 fd 81 00 00
>0257d8	14 00 d7 00 2e 3e 2f ce 82 ca 17 c0 06 22 0b 24
>0257e8	af 40 00 00 10 00 d8 00 2e 3e 12 c0 06 22 02 10
>0257f8	e5 b2 00 00 12 00 d9 00 2e 3e 55 ce a2 c0 06 22
>025808	0b 24 02 40 00 00 10 00 da 00 2e 3e 11 c0 06 22
>025818	02 10 6d bd 00 00 14 00 db 00 2e 3e 6d ce f0 c4
>025828	06 22 0b 24 03 10 69 61 00 00 12 00 dc 00 2e 3e
>025838	6a c6 06 22 0b 24 02 10 53 92 00 00 12 00 dd 00
>025848	2e 3e 77 ed a9 e5 06 22 04 00 00 00 00 00 1c 00
>025858	de 00 2e 3e f9 ec 21 e0 06 22 0e 00 0a 58 55 50
>025868	48 43 20 48 41 20 48 00 00 00 14 00 df 00 2e 3e
>025878	ed ec c3 e4 06 22 06 00 02 4b 4b 00 00 00 16 00
>025888	e0 00 2e 3e 57 ed 99 ea 21 e0 06 22 06 00 03 4c
>025898	4d 4c 00 00 14 00 e1 00 2e 3e 11 e0 06 22 08 00
>0258a8	04 43 54 54 50 00 00 00 1a 00 e2 00 2e 3e 54 ed
>0258b8	11 e0 06 22 0c 00 09 41 20 45 20 42 42 4a 49 5a
>0258c8	00 00 12 00 e3 00 2e 3e 1c ed 17 e0 06 22 04 00
>0258d8	00 00 00 00 16 00 e4 00 2e 3e 5b e5 06 22 0a 00
>0258e8	07 57 53 44 57 5a 4b 4f 00 00 1a 00 e5 00 2e 3e
>0258f8	a3 ed bd e2 06 22 0c 00 08 57 58 49 20 20 52 56
>025908	54 00 00 00 1e 00 e6 00 2e 3e d1 ed 10 ec 18 e0
>025918	06 22 0e 00 0b 52 57 45 58 5a 55 50 41 49 20 52
>025928	00 00 1e 00 e7 00 2e 3e 03 ed 84 ec 22 e0 06 22
>025938	0e 00 0a 49 20 20 52 41 20 58 46 58 4c 00 00 00
>025948	1a 00 e8 00 2e 3e 23 ed 79 e2 06 22 0c 00 08 41
>025958	59 56 20 5a 49 20 48 00 00 00 14 00 e9 00 2e 3e
>025968	59 e6 06 22 08 00 05 50 20 43 47 49 00 00 14 00
>025978	ea 00 2e 3e ff ec 01 e0 06 22 06 00 02 4f 53 00
>025988	00 00 10 00 eb 00 2e 3e b1 e5 06 22 04 00 01 46
>025998	00 00 1e 00 ec 00 2e 3e 5b ed 5a ec 1f e0 06 22
>0259a8	0e 00 0a 57 53 59 49 51 5a 55 44 20 56 00 00 00
>0259b8	1a 00 ed 00 2e 3e 2e e5 06 22 0e 00 0a 47 48 20
>0259c8	59 55 44 51 5a 20 42 00 00 00 12 00 ee 00 2e 3e
>0259d8	4d ed 5b e3 06 22 04 00 01 54 00 00 1a 00 ef 00
>0259e8	2e 3e 54 ed bf ea 14 e0 06 22 0a 00 06 54 42 54
>0259f8	59 41 51 00 00 00 1a 00 f0 00 2e 3e 09 e0 06 22
>025a08	0e 00 0a 43 4a 20 4f 48 59 4d 57 58 50 00 00 00
>025a18	18 00 f1 00 2e 3e 40 ee 36 ea 21 e0 06 22 08 00
>025a28	05 50 50 4e 48 47 00 00 1a 00 f2 00 2e 3e ed ec
>025a38	06 e0 06 22 0c 00 09 4d 44 4a 20 20 48 4a 59 53
>025a48	00 00 1c 00 f3 00 2e 3e d8 ed 00 ea 1b e0 06 22
>025a58	0c 00 09 4d 50 58 5a 53 59 4d 20 44 00 00 14 00
>025a68	f4 00 2e 3e 87 ed 25 e4 06 22 06 00 02 43 50 00
>025a78	00 00 18 00 f5 00 2e 3e 8a ed 10 e0 06 22 0a 00
>025a88	07 42 50 51 59 4d 5a 41 00 00 18 00 f6 00 2e 3e
>025a98	01 e0 06 22 0c 00 08 51 47 58 4a 20 41 41 43 00
>025aa8	00 00 1e 00 f7 00 2e 3e 36 ee ed e8 0e e0 06 22
>025ab8	0e 00 0a 46 52 51 58 41 4a 48 4e 53 46 00 00 00
>025ac8	14 00 f8 00 2e 3e dc ed 10 e0 06 22 06 00 02 57
>025ad8	45 00 00 00 16 00 f9 00 2e 3e 2a e5 06 22 0a 00
>025ae8	07 55 59 44 49 4c 20 42 00 00 12 00 fa 00 2e 3e
>025af8	d2 e5 06 22 06 00 03 45 57 44 00 00 1a 00 fb 00
>025b08	2e 3e 10 e0 06 22 0e 00 0a 45 20 52 20 20 50 47
>025b18	4c 4b 55 00 00 00 14 00 fc 00 2e 3e 3c ee 9d e8
>025b28	16 e0 06 22 04 00 01 56 00 00 18 00 fd 00 2e 3e
>025b38	d3 e4 06 22 0c 00 08 47 58 45 5a 20 41 52 58 00
>025b48	00 00 18 00 fe 00 2e 3e ce ec 8f eb 04 e0 06 22
>025b58	08 00 05 46 48 53 54 4b 00 00 1c 00 ff 00 2e 3e
>025b68	84 ed 20 e0 06 22 0e 00 0b 41 20 20 20 42 20 20
>025b78	48 20 47 54 00 00 14 00 00 01 2e 3e 34 ee 40 e1
>025b88	06 22 06 00 03 5a 43 4a 00 00 12 00 01 01 2e 3e
>025b98	2a e6 06 22 06 00 03 49 20 53 00 00 12 00 02 01
>025ba8	2e 3e 25 e5 06 22 06 00 03 42 20 49 00 00 18 00
>025bb8	03 01 2e 3e 07 e0 06 22 0c 00 09 4b 4d 54 20 56
>025bc8	20 44 4d 4c 00 00 1e 00 04 01 2e 3e 8b ed f0 e9
>025bd8	1b e0 06 22 0e 00 0a 4c 44 20 48 20 4d 45 20 44
>025be8	4e 00 00 00 16 00 05 01 2e 3e c9 ec d0 eb 19 e0
>025bf8	06 22 06 00 02 52 51 00 00 00 16 00 06 01 2e 3e
>025c08	16 e0 06 22 0a 00 07 52 20 47 20 46 20 4f 00 00
>025c18	18 00 07 01 2e 3e 60 e5 06 22 0c 00 09 5a 48 48
>025c28	4e 20 44 48 45 52 00 00 14 00 08 01 2e 3e cc ec
>025c38	86 ec 1a e0 06 22 04 00 00 00 00 00 1a 00 09 01
>025c48	2e 3e 0b e0 06 22 0e 00 0a 4f 56 50 20 42 41 20
>025c58	4d 52 52 00 00 00 12 00 0a 01 2e 3e ca ec 16 e0
>025c68	06 22 04 00 00 00 00 00 18 00 0b 01 2e 3e d4 ed
>025c78	1c e0 06 22 0a 00 06 57 44 54 20 4a 59 00 00 00
>025c88	1c 00 0c 01 2e 3e 5a ee ce ed 0d e0 06 22 0c 00
>025c98	09 50 51 46 59 58 20 4b 20 55 00 00 12 00 0d 01
>025ca8	2e 3e 6d e6 06 22 06 00 03 43 4e 49 00 00 16 00
>025cb8	0e 01 2e 3e 75 ed e0 ec 09 e0 06 22 06 00 03 4d
>025cc8	20 4a 00 00 16 00 0f 01 2e 3e f8 ec 20 e0 06 22
>025cd8	08 00 04 4a 4d 5a 4c 00 00 00 1c 00 10 01 2e 3e
>025ce8	b0 ed 06 e0 06 22 0e 00 0a 57 59 42 5a 47 4d 48
>025cf8	4f 4d 47 00 00 00 1a 00 11 01 2e 3e e6 ed 51 e0
>025d08	06 22 0c 00 09 50 4c 20 4b 59 54 4b 4a 56 00 00
>025d18	1a 00 12 01 2e 3e 01 ee 06 e0 06 22 0c 00 08 54
>025d28	42 48 45 57 4a 4f 41 00 00 00 16 00 13 01 2e 3e
>025d38	f0 ec f3 e4 06 22 08 00 04 49 53 51 4e 00 00 00
>025d48	12 00 14 01 2e 3e d1 e4 06 22 06 00 02 4a 56 00
>025d58	00 00 1a 00 15 01 2e 3e 5e ed ef e0 06 22 0c 00
>025d68	08 48 48 54 58 20 20 52 55 00 00 00 10 00 16 01
>025d78	2e 3e 0e e0 06 22 04 00 01 50 00 00 18 00 17 01
>025d88	2e 3e 03 ed 88 ea 1f e0 06 22 08 00 05 4a 44 55
>025d98	5a 44 00 00 1e 00 18 01 2e 3e aa ed 01 e9 10 e0
>025da8	06 22 0e 00 0a 4c 20 50 4e 57 4e 51 51 42 4a 00
>025db8	00 00 54 00 19 01 2e 3e 3e de f9 d8 24 d0 00 40
>025dc8	28 32 06 22 0e 40 26 32 2e 3e 3e de f9 d8 24 d0
>025dd8	01 40 28 32 06 22 02 10 46 71 26 32 2e 3e 3e de
>025de8	f9 d8 24 d0 02 40 28 32 06 22 01 10 cc 5f 26 32
>025df8	2e 3e 3e de f9 d8 24 d0 03 40 28 32 06 22 0b 24
>025e08	05 10 5a 75 00 00 64 00 1a 01 2e 3e 3b de b9 d8
>025e18	13 d0 00 40 28 32 06 22 a0 40 26 32 2e 3e 3b de
>025e28	b9 d8 13 d0 01 40 28 32 06 22 0b 24 01 10 74 57
>025e38	26 32 2e 3e 3b de b9 d8 13 d0 02 40 28 32 06 22
>025e48	ad 40 26 32 2e 3e 3b de b9 d8 13 d0 03 40 28 32
>025e58	06 22 01 10 68 ac 26 32 2e 3e 3b de b9 d8 13 d0
>025e68	04 40 28 32 06 22 aa 40 00 00 48 00 1b 01 2e 3e
>025e78	0f d0 00 40 28 32 06 22 0b 24 02 10 34 44 26 32
>025e88	2e 3e 0f d0 01 40 28 32 06 22 01 10 20 7e 26 32
>025e98	2e 3e 0f d0 02 40 28 32 06 22 05 10 b9 53 26 32
>025ea8	2e 3e 0f d0 03 40 28 32 06 22 0b 24 01 10 03 93
>025eb8	00 00 62 00 1c 01 2e 3e f6 dc 08 d0 00 40 28 32
>025ec8	06 22 0b 24 01 10 3a 8e 26 32 2e 3e f6 dc 08 d0
>025ed8	01 40 28 32 06 22 0b 24 04 10 9d 88 26 32 2e 3e
>025ee8	f6 dc 08 d0 02 40 28 32 06 22 0b 24 04 10 d2 ae
>025ef8	26 32 2e 3e f6 dc 08 d0 03 40 28 32 06 22 73 40
>025f08	26 32 2e 3e f6 dc 08 d0 04 40 28 32 06 22 0b 24
>025f18	0e 87 00 00 62 00 1d 01 2e 3e c2 dc 1d d0 00 40
>025f28	28 32 06 22 0b 24 02 10 e4 7c 26 32 2e 3e c2 dc
>025f38	1d d0 01 40 28 32 06 22 01 10 37 59 26 32 2e 3e
>025f48	c2 dc 1d d0 02 40 28 32 06 22 01 10 11 8f 26 32
>025f58	2e 3e c2 dc 1d d0 03 40 28 32 06 22 02 10 35 44
>025f68	26 32 2e 3e c2 dc 1d d0 04 40 28 32 06 22 0b 24
>025f78	01 10 f0 b2 00 00 4a 00 1e 01 2e 3e 5f dd 14 d0
>025f88	00 40 28 32 06 22 a9 40 26 32 2e 3e 5f dd 14 d0
>025f98	01 40 28 32 06 22 39 40 26 32 2e 3e 5f dd 14 d0
>025fa8	02 40 28 32 06 22 0b 24 04 10 8f 57 26 32 2e 3e
>025fb8	5f dd 14 d0 03 40 28 32 06 22 02 10 8a 74 00 00
>025fc8	72 00 1f 01 2e 3e 25 d5 00 40 28 32 06 22 03 10
>025fd8	bf 45 26 32 2e 3e 25 d5 01 40 28 32 06 22 93 40
>025fe8	26 32 2e 3e 25 d5 02 40 28 32 06 22 05 10 a8 66
>025ff8	26 32 2e 3e 25 d5 03 40 28 32 06 22 05 10 0d 54
>026008	26 32 2e 3e 25 d5 04 40 28 32 06 22 20 40 26 32
>026018	2e 3e 25 d5 05 40 28 32 06 22 0b 24 04 10 b5 82
>026028	26 32 2e 3e 25 d5 06 40 28 32 06 22 0b 24 1f 8c
>026038	00 00 3a 00 20 01 2e 3e a6 dd 0e d0 00 40 28 32
>026048	06 22 0b 24 05 10 6c b7 26 32 2e 3e a6 dd 0e d0
>026058	01 40 28 32 06 22 05 10 ff 91 26 32 2e 3e a6 dd
>026068	0e d0 02 40 28 32 06 22 49 40 00 00 84 00 21 01
>026078	2e 3e 0a de 01 d1 00 40 28 32 06 22 01 10 5a 9b
>026088	26 32 2e 3e 0a de 01 d1 01 40 28 32 06 22 01 10
>026098	9e b0 26 32 2e 3e 0a de 01 d1 02 40 28 32 06 22
>0260a8	05 10 c8 7a 26 32 2e 3e 0a de 01 d1 03 40 28 32
>0260b8	06 22 0b 24 03 10 e8 b2 26 32 2e 3e 0a de 01 d1
>0260c8	04 40 28 32 06 22 03 10 9b 77 26 32 2e 3e 0a de
>0260d8	01 d1 05 40 28 32 06 22 1f 40 26 32 2e 3e 0a de
>0260e8	01 d1 06 40 28 32 06 22 0b 24 01 10 f0 9c 00 00
>0260f8	3c 00 22 01 2e 3e ed dc 03 d0 00 40 28 32 06 22
>026108	01 10 44 55 26 32 2e 3e ed dc 03 d0 01 40 28 32
>026118	06 22 0b 24 41 40 26 32 2e 3e ed dc 03 d0 02 40
>026128	28 32 06 22 0b 24 04 10 5c b6 00 00 50 00 23 01
>026138	2e 3e 3d fe 87 f3 00 40 28 32 06 22 0e 00 0b 48
>026148	53 4d 20 4a 49 55 20 47 54 4c 26 32 2e 3e 3d fe
>026158	87 f3 01 40 28 32 06 22 0e 00 0b 46 41 43 42 58
>026168	52 4a 20 46 58 51 26 32 2e 3e 3d fe 87 f3 02 40
>026178	28 32 06 22 06 00 03 4c 43 47 00 00 76 00 24 01
>026188	2e 3e fb fc 3b f5 00 40 28 32 06 22 04 00 01 57
>026198	26 32 2e 3e fb fc 3b f5 01 40 28 32 06 22 0a 00
>0261a8	07 53 41 20 20 20 47 4c 26 32 2e 3e fb fc 3b f5
>0261b8	02 40 28 32 06 22 06 00 03 4d 4a 48 26 32 2e 3e
>0261c8	fb fc 3b f5 03 40 28 32 06 22 0e 00 0a 4a 57 43
>0261d8	4e 57 50 20 53 20 4a 00 26 32 2e 3e fb fc 3b f5
>0261e8	04 40 28 32 06 22 0a 00 07 58 45 44 57 20 59 43
>0261f8	00 00 82 00 25 01 2e 3e 65 fe 17 f0 00 40 28 32
>026208	06 22 0a 00 06 4a 42 51 59 53 4b 00 26 32 2e 3e
>026218	65 fe 17 f0 01 40 28 32 06 22 0a 00 06 52 4d 44
>026228	4f 48 48 00 26 32 2e 3e 65 fe 17 f0 02 40 28 32
>026238	06 22 0c 00 09 4c 53 4f 51 47 4e 20 46 4b 26 32
>026248	2e 3e 65 fe 17 f0 03 40 28 32 06 22 0c 00 08 50
>026258	51 20 55 4b 20 52 59 00 26 32 2e 3e 65 fe 17 f0
>026268	04 40 28 32 06 22 0c 00 09 4e 44 55 53 20 49 56
>026278	44 4b 00 00 7c 00 26 01 2e 3e ae fd 6b f4 00 40
>026288	28 32 06 22 0e 00 0a 52 56 48 41 5a 41 48 56 42
>026298	4f 00 26 32 2e 3e ae fd 6b f4 01 40 28 32 06 22
>0262a8	0c 00 09 41 20 20 53 5a 54 56 20 45 26 32 2e 3e
>0262b8	ae fd 6b f4 02 40 28 32 06 22 06 00 03 4b 42 5a
>0262c8	26 32 2e 3e ae fd 6b f4 03 40 28 32 06 22 0a 00
>0262d8	06 47 4d 42 50 20 50 00 26 32 2e 3e ae fd 6b f4
>0262e8	04 40 28 32 06 22 08 00 05 58 20 20 20 41 00 00
>0262f8	a8 00 27 01 2e 3e d7 fc 19 f9 15 f0 00 40 28 32
>026308	06 22 04 00 00 00 26 32 2e 3e d7 fc 19 f9 15 f0
>026318	01 40 28 32 06 22 0e 00 0b 55 20 4f 46 50 20 4f
>026328	56 49 4d 46 26 32 2e 3e d7 fc 19 f9 15 f0 02 40
>026338	28 32 06 22 06 00 02 49 42 00 26 32 2e 3e d7 fc
>026348	19 f9 15 f0 03 40 28 32 06 22 0c 00 09 43 55 58
>026358	5a 20 48 47 4d 4b 26 32 2e 3e d7 fc 19 f9 15 f0
>026368	04 40 28 32 06 22 06 00 03 4d 49 52 26 32 2e 3e
>026378	d7 fc 19 f9 15 f0 05 40 28 32 06 22 06 00 02 46
>026388	5a 00 26 32 2e 3e d7 fc 19 f9 15 f0 06 40 28 32
>026398	06 22 04 00 00 00 00 00 96 00 28 01 2e 3e 31 fe
>0263a8	90 f3 00 40 28 32 06 22 04 00 01 56 26 32 2e 3e
>0263b8	31 fe 90 f3 01 40 28 32 06 22 0a 00 07 59 20 4a
>0263c8	42 58 4b 4e 26 32 2e 3e 31 fe 90 f3 02 40 28 32
>0263d8	06 22 08 00 04 53 57 20 45 00 26 32 2e 3e 31 fe
>0263e8	90 f3 03 40 28 32 06 22 04 00 00 00 26 32 2e 3e
>0263f8	31 fe 90 f3 04 40 28 32 06 22 08 00 04 42 52 4c
>026408	48 00 26 32 2e 3e 31 fe 90 f3 05 40 28 32 06 22
>026418	0a 00 07 56 41 4c 46 57 20 53 26 32 2e 3e 31 fe
>026428	90 f3 06 40 28 32 06 22 04 00 01 53 00 00 ae 00
>026438	29 01 2e 3e 1d fd 64 f8 23 f0 00 40 28 32 06 22
>026448	0e 00 0a 42 4d 41 41 52 44 42 49 55 49 00 26 32
>026458	2e 3e 1d fd 64 f8 23 f0 01 40 28 32 06 22 0e 00
>026468	0a 4d 4b 41 56 4f 55 20 4e 51 4e 00 26 32 2e 3e
>026478	1d fd 64 f8 23 f0 02 40 28 32 06 22 04 00 01 56
>026488	26 32 2e 3e 1d fd 64 f8 23 f0 03 40 28 32 06 22
>026498	08 00 04 50 4b 5a 46 00 26 32 2e 3e 1d fd 64 f8
>0264a8	23 f0 04 40 28 32 06 22 06 00 02 41 4c 00 26 32
>0264b8	2e 3e 1d fd 64 f8 23 f0 05 40 28 32 06 22 04 00
>0264c8	00 00 26 32 2e 3e 1d fd 64 f8 23 f0 06 40 28 32
>0264d8	06 22 08 00 05 49 20 20 4a 56 00 00 4e 00 2a 01
>0264e8	2e 3e b3 f5 00 40 28 32 06 22 0c 00 09 52 43 44
>0264f8	42 42 44 51 4b 4c 26 32 2e 3e b3 f5 01 40 28 32
>026508	06 22 0e 00 0a 56 44 46 54 45 45 41 5a 20 41 00
>026518	26 32 2e 3e b3 f5 02 40 28 32 06 22 0c 00 09 42
>026528	4a 50 4a 4e 44 20 20 48 00 00 7a 00 2b 01 2e 3e
>026538	f8 fc 02 f0 00 40 28 32 06 22 0a 00 06 52 43 5a
>026548	47 48 48 00 26 32 2e 3e f8 fc 02 f0 01 40 28 32
>026558	06 22 06 00 03 51 41 57 26 32 2e 3e f8 fc 02 f0
>026568	02 40 28 32 06 22 08 00 05 50 57 20 20 45 26 32
>026578	2e 3e f8 fc 02 f0 03 40 28 32 06 22 0e 00 0a 54
>026588	4f 56 56 4a 57 57 4c 58 59 00 26 32 2e 3e f8 fc
>026598	02 f0 04 40 28 32 06 22 0a 00 06 49 4d 53 42 54
>0265a8	4f 00 00 00 60 00 2c 01 2e 3e 30 fd 1a fc 05 f0
>0265b8	00 40 28 32 06 22 04 00 00 00 26 32 2e 3e 30 fd
>0265c8	1a fc 05 f0 01 40 28 32 06 22 0c 00 08 4e 20 4c
>0265d8	56 53 20 54 47 00 26 32 2e 3e 30 fd 1a fc 05 f0
>0265e8	02 40 28 32 06 22 06 00 02 50 4d 00 26 32 2e 3e
>0265f8	30 fd 1a fc 05 f0 03 40 28 32 06 22 06 00 03 58
>026608	4f 58 00 00 00 00 ee ee ee ee 00 00 00 00 00 00
>026618	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1437 times (22992 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
