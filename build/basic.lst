
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Thu Jun 20 13:59:09 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 8d 1e 01	jmp $011e8d			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	c6 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	2d 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	3d 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	4d 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	91 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	f8 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	5d 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	da 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	bc 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	77 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	77 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	f8 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	04 0d					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	81 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	f8 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	09 0b					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	1b 0b					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	92 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	72 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	4e 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	38 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	ba 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	da 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	cc 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	04 0e					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	38 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	6e 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	88 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	9f 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	43 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	01 12					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	82 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	19 0f					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	ab 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	9a 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	74 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	c6 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	c6 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	c6 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	c6 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	c6 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	c6 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	c6 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	c6 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	ef 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	85 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	d0 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	2b 1b					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	2e 1b					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	bd 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	b9 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	16 1c					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	eb 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	b7 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	b9 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	18 1a					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	34 1a					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	76 19					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	6a 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	8a 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	a2 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	b6 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	7f 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	06 1d					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	aa 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	09 13					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	bc 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	66 1a					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	c4 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	03 17					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	3f 18					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	c6 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	fb 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	7d 1a					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	c6 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	98 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	ba 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	80 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 41 03	brl $0105d7			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c d7 05	jmp $0105d7			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 3d		bcc $01038e			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 19 04	jsr $010419			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	f0 0a		beq $010373			beq 	_VANIsString 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010369	18		clc				clc 								; returning a number, read high data word
.01036a	a0 02 00	ldy #$0002			ldy 	#2
.01036d	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01036f	a8		tay				tay 								; put A into Y (this is the high byte)
.010370	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010372	60		rts				rts
.010373					_VANIsString:
.010373	b2 1e		lda ($1e)			lda 	(DVariablePtr)
.010375	f0 05		beq $01037c			beq 	_VANNull
.010377	a0 00 00	ldy #$0000			ldy 	#0
.01037a	38		sec				sec
.01037b	60		rts				rts
.01037c					_VANNull:
.01037c	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01037f	53 74 72 69 6e 67 20 69				.text 	"String is NULL",$00 								; with this message
>010387	73 20 4e 55 4c 4c 00
.01038e					_VANError:
.01038e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010391	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010399	20 75 6e 6b 6e 6f 77 6e 00
.0103a2					VariableFind:
.0103a2	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0103a4	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0103a7	90 5c		bcc $010405			bcc 	_VFError
.0103a9	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0103ac	b0 11		bcs $0103bf			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0103ae	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0103b1	3a		dec a				dec 	a 							; now 0-25
.0103b2	0a		asl a				asl 	a 							; x 4 and clear carry
.0103b3	0a		asl a				asl 	a
.0103b4	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0103b7	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.0103b9	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103bb	e6 06		inc $06				inc 	DCodePtr
.0103bd	38		sec				sec 								; return with carry set.
.0103be	60		rts				rts
.0103bf					_VFSlowVariable:
.0103bf	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103c1	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103c4	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103c5	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103c6	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103c9	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103cb	85 08		sta $08				sta 	DTemp1
.0103cd	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103cf	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103d2	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103d3	65 08		adc $08				adc 	DTemp1
.0103d5	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103d7	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103d9					_VFNext:
.0103d9	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103db	f0 26		beq $010403			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103dd	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103df	a8		tay				tay 								; read the address of the name at $0002,y
.0103e0	b9 02 00	lda $0002,y			lda 	$0002,y
.0103e3	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103e5	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103e8					_VFCompare:
.0103e8	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103ea	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103ec	d0 eb		bne $0103d9			bne 	_VFNext 					; if not, go to the next one.
.0103ee	c8		iny				iny 								; advance token pointer
.0103ef	c8		iny				iny
.0103f0	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103f3	d0 f3		bne $0103e8			bne 	_VFCompare
.0103f5	98		tya				tya 								; this is the length of the word.
.0103f6	18		clc				clc 								; so we add it to the code pointer
.0103f7	65 06		adc $06				adc 	DCodePtr
.0103f9	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103fb	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103fd	18		clc				clc 								; four on is the actual data
.0103fe	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010401	38		sec				sec 								; return with CS indicating success
.010402	60		rts				rts
.010403					_VFFail:
.010403	18		clc				clc
.010404	60		rts				rts
.010405					_VFError:
.010405	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010408	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010410	76 61 72 69 61 62 6c 65 00
.010419					VariableSubscript:
.010419	48		pha				pha		 							; save variable address on stack.
.01041a	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.01041d	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; skip right bracket.
.010420	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010423	d0 10		bne $010435			bne 	_VANSubscript
.010425	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010427	f0 02		beq $01042b			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010429	b0 0a		bcs $010435			bcs 	_VANSubscript
.01042b					_VANSubOkay:
.01042b	0a		asl a				asl 	a 							; double lsword
.01042c	0a		asl a				asl 	a 							; and again, also clears carry.
.01042d	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.01042f	68		pla				pla 								; restore DVariablePtr
.010430	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010431	1a		inc a				inc 	a
.010432	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010434	60		rts				rts
.010435					_VANSubscript:
.010435	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010438	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010440	79 20 53 75 62 73 63 72 69 70 74 00
.01044c					VariableCreate:
.01044c	48		pha				pha 								; save count.
.01044d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010450	29 00 20	and #$2000			and 	#IDTypeMask
.010453	f0 06		beq $01045b			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010455	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010458	18		clc				clc 								; which is guaranteed by have a 0 length.
.010459	65 02		adc $02				adc 	DBaseAddress
.01045b					_VCIsInteger:
.01045b	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01045d	68		pla				pla 								; restore count
.01045e	48		pha				pha
.01045f	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010460	0a		asl a				asl 	a 							; 2 x # items.
.010461	0a		asl a				asl 	a 							; 4 x # items.
.010462					_VCNotSingle:
.010462	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010464	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010467	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01046a	f0 04		beq $010470			beq 	_VCNotArray
.01046c	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01046e	e6 08		inc $08				inc 	DTemp1
.010470					_VCNotArray:
.010470	5a		phy				phy 								; save address of first token on stack.
.010471	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010474	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010476	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010478	18		clc				clc 								; add 4 for link and name words
.010479	69 04 00	adc #$0004			adc 	#4
.01047c	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01047e	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010480	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010482					_VCErase:
.010482	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010484	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010487	c8		iny				iny
.010488	c8		iny				iny
.010489	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01048b	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01048d	d0 f3		bne $010482			bne 	_VCErase
.01048f	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010491	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010493	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010496	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010499	18		clc				clc
.01049a	65 02		adc $02				adc 	DBaseAddress
.01049c	85 08		sta $08				sta 	DTemp1
.01049e	68		pla				pla 								; restore the token address
.01049f	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.0104a1	b0 03		bcs $0104a6			bcs 	_VCDontClone 				; because the variable being created has its identifier
.0104a3	20 b7 04	jsr $0104b7			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.0104a6					_VCDontClone:
.0104a6	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0104a9	68		pla				pla 								; restore count and store (if nonzero)
.0104aa	f0 03		beq $0104af			beq 	_VCNotArray2
.0104ac	99 04 00	sta $0004,y			sta 	$0004,y
.0104af					_VCNotArray2:
.0104af	98		tya				tya 								; update the head link
.0104b0	92 20		sta ($20)			sta 	(DHashTablePtr)
.0104b2	18		clc				clc 								; advance pointer to the data bit.
.0104b3	69 04 00	adc #$0004			adc 	#4
.0104b6	60		rts				rts 								; and done.
.0104b7					VCCloneIdentifier:
.0104b7	da		phx				phx 								; save XY
.0104b8	5a		phy				phy
.0104b9	aa		tax				tax 								; identifier address in Y.
.0104ba	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104bd	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104bf	48		pha				pha
.0104c0					_VCCloneLoop:
.0104c0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104c3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104c5	48		pha				pha 								; save on stack
.0104c6	1a		inc a				inc 	a 							; space for one token.
.0104c7	1a		inc a				inc 	a
.0104c8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104ca	7a		ply				ply 								; address of word in Y
.0104cb	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104ce	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104d1	e8		inx				inx 								; advance the token pointer
.0104d2	e8		inx				inx
.0104d3	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104d6	d0 e8		bne $0104c0			bne 	_VCCloneLoop
.0104d8	68		pla				pla 								; restore start address
.0104d9	7a		ply				ply 								; and the others
.0104da	fa		plx				plx
.0104db	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104dc					LineDelete:
.0104dc	aa		tax				tax 	 							; this is the one we're looking for ....
.0104dd	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104df	18		clc				clc
.0104e0	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104e3	a8		tay				tay
.0104e4					_LDLoop:
.0104e4	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104e7	f0 2d		beq $010516			beq 	_LDExit						; exit if zero ; line does not exist
.0104e9	8a		txa				txa 								; found a match
.0104ea	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104ed	f0 08		beq $0104f7			beq		_LDFound
.0104ef	98		tya				tya 								; follow the link.
.0104f0	18		clc				clc
.0104f1	79 00 00	adc $0000,y			adc 	$0000,y
.0104f4	a8		tay				tay
.0104f5	80 ed		bra $0104e4			bra 	_LDLoop
.0104f7					_LDFound:
.0104f7	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104f9	98		tya				tya 								; follow link to next.
.0104fa	18		clc				clc
.0104fb	79 00 00	adc $0000,y			adc 	$0000,y
.0104fe	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.010500	20 00 1c	jsr $011c00			jsr 	FindCodeEnd 				; find the end of the code.
.010503	38		sec				sec
.010504	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.010506	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.010507	1a		inc a				inc 	a
.010508	aa		tax				tax
.010509	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.01050c	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.01050e	91 08		sta ($08),y			sta 	(DTemp1),y
.010510	c8		iny				iny
.010511	c8		iny				iny
.010512	ca		dex				dex
.010513	ca		dex				dex
.010514	d0 f6		bne $01050c			bne 	_LDCopy
.010516					_LDExit:
.010516	60		rts				rts
.010517					LineInsert:
.010517	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.010519	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.01051b	a0 00 00	ldy #$0000			ldy 	#0
.01051e					_LIFindLength:
.01051e	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010520	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010523	f0 10		beq $010535			beq 	_LIFindEnd
.010525	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.010528	90 04		bcc $01052e			bcc 	_LIQString
.01052a	c8		iny				iny 								; otherwise just skip it.
.01052b	c8		iny				iny
.01052c	80 f0		bra $01051e			bra 	_LIFindLength
.01052e					_LIQString:
.01052e	98		tya				tya 								; skip quoted strings
.01052f	18		clc				clc
.010530	71 08		adc ($08),y			adc 	(DTemp1),y
.010532	a8		tay				tay
.010533	80 e9		bra $01051e			bra 	_LIFindLength
.010535					_LIFindEnd:
.010535	98		tya				tya 								; the tokens in the line
.010536	18		clc				clc
.010537	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.01053a	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.01053c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.01053f	18		clc				clc
.010540	65 02		adc $02				adc 	DBaseAddress
.010542	a8		tay				tay
.010543					_LIFindInsertPoint:
.010543	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010546	f0 0f		beq $010557			beq		_LIFoundInsertPoint
.010548	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.01054b	c5 0c		cmp $0c				cmp 	DTemp2
.01054d	b0 08		bcs $010557			bcs 	_LIFoundInsertPoint
.01054f	98		tya				tya 								; if < go to the next line.
.010550	18		clc				clc
.010551	79 00 00	adc $0000,y			adc 	$0000,y
.010554	a8		tay				tay
.010555	80 ec		bra $010543			bra 	_LIFindInsertPoint
.010557					_LIFoundInsertPoint:
.010557	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.010559	20 00 1c	jsr $011c00			jsr 	FindCodeEnd 				; get the end of the code.
.01055c	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.01055e	18		clc				clc
.01055f	65 24		adc $24				adc 	DTemp3
.010561	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010563					_LICopyMove:
.010563	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010565	92 34		sta ($34)			sta 	(DTemp4+2)
.010567	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.010569	c5 36		cmp $36				cmp 	DTemp5
.01056b	f0 0a		beq $010577			beq 	_LICopyMoveOver
.01056d	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.01056f	c6 32		dec $32				dec 	DTemp4
.010571	c6 34		dec $34				dec 	DTemp4+2
.010573	c6 34		dec $34				dec 	DTemp4+2
.010575	80 ec		bra $010563			bra 	_LICopyMove
.010577					_LICopyMoveOver:
.010577	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010579	92 36		sta ($36)			sta 	(DTemp5)
.01057b	a0 02 00	ldy #$0002			ldy 	#2
.01057e	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010580	91 36		sta ($36),y			sta 	(DTemp5),y
.010582	a0 04 00	ldy #$0004			ldy 	#4
.010585					_LICopyTokens:
.010585	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010587	91 36		sta ($36),y			sta 	(DTemp5),y
.010589	c8		iny				iny
.01058a	c8		iny				iny
.01058b	e6 08		inc $08				inc 	DTemp1
.01058d	e6 08		inc $08				inc 	DTemp1
.01058f	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010591	c6 24		dec $24				dec 	DTemp3
.010593	a5 24		lda $24				lda 	DTemp3
.010595	c9 04 00	cmp #$0004			cmp 	#4
.010598	d0 eb		bne $010585			bne 	_LICopyTokens
.01059a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.01059b					ErrorHandler:
.01059b	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01059d	fa		plx				plx 								; address of error message -1
.01059e	e8		inx				inx 								; error message.
.01059f	20 43 06	jsr $010643			jsr 	PrintROMMessage 			; print message in ROM
.0105a2	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0105a4	f0 15		beq $0105bb			beq 	_EHEndMessage
.0105a6	a2 c1 05	ldx #$05c1			ldx 	#_EHAt & $FFFF 				; print " at "
.0105a9	20 43 06	jsr $010643			jsr 	PrintROMMessage
.0105ac	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0105ae	a0 00 00	ldy #$0000			ldy 	#0
.0105b1	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0105b4	20 f5 10	jsr $0110f5			jsr 	ConvertToString 			; convert and print it.
.0105b7	a8		tay				tay
.0105b8	20 61 06	jsr $010661			jsr 	PrintBASICString
.0105bb					_EHEndMessage:
.0105bb	20 b3 1d	jsr $011db3			jsr 	HWNewLine
.0105be	4c b7 1e	jmp $011eb7			jmp 	NextCommand 				; get next command.
>0105c1	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105c6					IllegalToken:
.0105c6	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105c9	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105d1	54 6f 6b 65 6e 00
.0105d7					SyntaxError:
.0105d7	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105da	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105e2	72 72 6f 72 00
.0105e7					ExpectToken:
.0105e7	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105e9	d0 05		bne $0105f0			bne 	_CTKError					; error if not
.0105eb	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105ed	e6 06		inc $06				inc 	DCodePtr
.0105ef	60		rts				rts
.0105f0					_CTKError:
.0105f0	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0105f3	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105fb	74 6f 6b 65 6e 00
.010601					ExpectRightBracket:
.010601	48		pha				pha
.010602	a9 28 32	lda #$3228			lda 	#rparenTokenID
.010605	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.010608	68		pla				pla
.010609	60		rts				rts
.01060a					ExpectComma:
.01060a	48		pha				pha
.01060b	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01060e	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.010611	68		pla				pla
.010612	60		rts				rts
.010613					CheckBothNumeric:
.010613	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010615	15 42		ora $42,x			ora 	EXSPrecType+2,x
.010617	30 01		bmi $01061a			bmi 	_CBNFail 					; need to both be zero in bit 15
.010619	60		rts				rts
.01061a					_CBNFail:
.01061a	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01061d	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010625	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010633					ResetTypeInteger:
.010633	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010635	29 ff 7f	and #$7fff			and 	#$7FFF
.010638	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01063a	60		rts				rts
.01063b					ResetTypeString:
.01063b	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01063d	09 00 80	ora #$8000			ora 	#$8000
.010640	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010642	60		rts				rts
.010643					PrintROMMessage:
.010643	48		pha				pha
.010644	da		phx				phx
.010645					_PRMLoop:
.010645	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010649	29 ff 00	and #$00ff			and 	#$00FF
.01064c	f0 10		beq $01065e			beq 	_PRMExit
.01064e	c9 0d 00	cmp #$000d			cmp 	#13
.010651	d0 05		bne $010658			bne 	_PRMChar
.010653	20 b3 1d	jsr $011db3			jsr 	HWNewLine
.010656	80 03		bra $01065b			bra 	_PRMNext
.010658					_PRMChar:
.010658	20 62 1d	jsr $011d62			jsr 	HWPrintChar
.01065b					_PRMNext:
.01065b	e8		inx				inx
.01065c	80 e7		bra $010645			bra 	_PRMLoop
.01065e					_PRMExit:
.01065e	fa		plx				plx
.01065f	68		pla				pla
.010660	60		rts				rts
.010661					PrintBASICString:
.010661	48		pha				pha
.010662	da		phx				phx
.010663	5a		phy				phy
.010664	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010667	29 ff 00	and #$00ff			and 	#$00FF
.01066a	f0 0b		beq $010677			beq 	_PBSExit 					; null string
.01066c	aa		tax				tax
.01066d					_PBSLoop:
.01066d	c8		iny				iny
.01066e	b9 00 00	lda $0000,y			lda 	$0000,y
.010671	20 62 1d	jsr $011d62			jsr 	HWPrintChar
.010674	ca		dex				dex
.010675	d0 f6		bne $01066d			bne 	_PBSLoop
.010677					_PBSExit:
.010677	7a		ply				ply
.010678	fa		plx				plx
.010679	68		pla				pla
.01067a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.01067b					StringResetPermanent:
.01067b	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.01067d	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.01067e	3a		dec a				dec 	a
.01067f	a8		tay				tay
.010680	48		pha				pha
.010681	a9 00 00	lda #$0000			lda 	#$0000
.010684	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.010687	68		pla				pla
.010688	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the start of the link
.01068b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01068d	60		rts				rts
.01068e					StringReassign:
.01068e	da		phx				phx 								; save X.
.01068f	bb		tyx				tyx 								; save the pointer to the current on X.
.010690	a8		tay				tay 								; get length of new string.
.010691	bd 00 00	lda $0000,x			lda 	@w$0000,x					; address of the old string in A
.010694	20 3c 07	jsr $01073c			jsr 	StringRelease 				; release the old string
.010697	b9 00 00	lda $0000,y			lda 	@w$0000,y
.01069a	29 ff 00	and #$00ff			and 	#$00FF
.01069d	d0 03		bne $0106a2			bne 	_SRAContent
.01069f	82 71 00	brl $010713			brl 	_SRAEmpty 					; if zero, return empty address.
.0106a2					_SRAContent:
.0106a2	5a		phy				phy 								; save the new string address on stack
.0106a3	7a		ply				ply 								; restore and save the new string address
.0106a4	5a		phy				phy
.0106a5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.0106a8	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.0106ab	1a		inc a				inc 	a 							; we want one more, for the length byte.
.0106ac	85 36		sta $36				sta 	DTemp5
.0106ae	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.0106b1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106b3	a8		tay				tay
.0106b4					_SRACheckUnused:
.0106b4	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset to next
.0106b7	f0 22		beq $0106db			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106b9	10 0f		bpl $0106ca			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106bb	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size.
.0106be	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106c0	90 08		bcc $0106ca			bcc 	_SRACheckNext 				; too small.
.0106c2	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with the bit cleared.
.0106c5	98		tya				tya 								; A is the address of the link
.0106c6	1a		inc a				inc 	a 							; add 2, it's the data.
.0106c7	1a		inc a				inc 	a
.0106c8	80 26		bra $0106f0			bra 	_SRACopyA 					; copy there.
.0106ca					_SRACheckNext:
.0106ca	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15
.0106cd	29 ff 7f	and #$7fff			and 	#$7FFF
.0106d0	85 38		sta $38				sta 	DTemp5+2 					; save it
.0106d2	98		tya				tya 								; add to Y
.0106d3	18		clc				clc
.0106d4	65 38		adc $38				adc 	DTemp5+2
.0106d6	1a		inc a				inc 	a 							; add 2 more for the link itself
.0106d7	1a		inc a				inc 	a
.0106d8	a8		tay				tay
.0106d9	80 d9		bra $0106b4			bra 	_SRACheckUnused
.0106db					_SRAAllocate:
.0106db	7a		ply				ply 								; get the new string address back.
.0106dc	5a		phy				phy 								; push it back on the stack.
.0106dd	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106e0	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106e3	1a		inc a				inc 	a
.0106e4	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106e5	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106e8	90 03		bcc $0106ed			bcc 	_SRANoCarry
.0106ea	a9 ff 00	lda #$00ff			lda 	#255
.0106ed					_SRANoCarry:
.0106ed	20 21 07	jsr $010721			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106f0					_SRACopyA:
.0106f0	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106f3	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106f6	aa		tax				tax 								; where we are copying to.
.0106f7	7a		ply				ply 								; where we're coming from.
.0106f8	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106fb	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106fe	1a		inc a				inc 	a
.0106ff	85 36		sta $36				sta 	DTemp5 						; save counter.
.010701					_SRACopy:
.010701	e2 20		sep #$20			sep 	#$20
.010703	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.010706	9d 00 00	sta $0000,x			sta 	@W$0000,x
.010709	c2 20		rep #$20			rep 	#$20
.01070b	c8		iny				iny
.01070c	e8		inx				inx
.01070d	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.01070f	d0 f0		bne $010701			bne 	_SRACopy
.010711	fa		plx				plx 								; restore X and exit.
.010712	60		rts				rts
.010713					_SRAEmpty:
.010713	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010716	18		clc				clc 								; which is guaranteed by have a 0 length.
.010717	65 02		adc $02				adc 	DBaseAddress
.010719	9d 00 00	sta $0000,x			sta 	@w$0000,x
.01071c	9e 02 00	stz $0002,x			stz 	@w$0002,x
.01071f	fa		plx				plx
.010720	60		rts				rts
.010721					StringAllocateSpace:
.010721	da		phx				phx									; save XY
.010722	5a		phy				phy
.010723	48		pha				pha 								; save the length.
.010724	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.010725	1a		inc a				inc 	a
.010726	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.010729	38		sec				sec 								; add 1 (2's complement)
.01072a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01072d	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01072f	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.010731	a8		tay				tay 								; put in Y
.010732	68		pla				pla 								; restore the length
.010733	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.010736	98		tya				tya 								; get the address back
.010737	1a		inc a				inc 	a 							; skip over the link
.010738	1a		inc a				inc 	a
.010739	7a		ply				ply									; restore YX and exit.
.01073a	fa		plx				plx
.01073b	60		rts				rts
.01073c					StringRelease:
.01073c	5a		phy				phy
.01073d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.010740	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it first.
.010742	90 0c		bcc $010750			bcc 	_SASNoRelease
.010744	a8		tay				tay 								; the address of the old string
.010745	88		dey				dey 								; point to the link.
.010746	88		dey				dey
.010747	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.01074a	09 00 80	ora #$8000			ora 	#$8000
.01074d	99 00 00	sta $0000,y			sta 	@w$0000,y
.010750					_SASNoRelease:
.010750	7a		ply				ply
.010751	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.010752					StringTempAllocate:
.010752	48		pha				pha
.010753	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010755	d0 09		bne $010760			bne 	_STANoReset
.010757	5a		phy				phy 								; reset the temp string pointer.
.010758	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01075b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01075d	85 16		sta $16				sta 	DTempStringPointer
.01075f	7a		ply				ply
.010760					_STANoReset:
.010760	68		pla				pla 								; get length.
.010761	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010764	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010767	18		clc				clc 								; this adds one, for the length.
.010768	65 16		adc $16				adc 	DTempStringPointer
.01076a	85 16		sta $16				sta 	DTempStringPointer
.01076c	48		pha				pha 								; save start address
.01076d	a9 00 00	lda #$0000			lda 	#$0000
.010770	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010772	92 16		sta ($16)			sta		(DTempStringPointer)
.010774	c2 20		rep #$20			rep 	#$20
.010776	68		pla				pla 								; restore start address
.010777	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010779	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01077b	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01077d	60		rts				rts
.01077e					StringWriteCharacter:
.01077e	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010780	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010782	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010784	1a		inc a				inc 	a
.010785	92 18		sta ($18)			sta 	(DStartTempString)
.010787	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010789	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01078b	60		rts				rts
.01078c					StringCreateCopy:
.01078c	a8		tay				tay 								; put pointer to string in Y
.01078d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010790	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010793	f0 17		beq $0107ac			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010795	da		phx				phx 								; save X and put the character count in X
.010796	aa		tax				tax
.010797					_SCCCopy:
.010797	c8		iny				iny 								; advance and read (first time skips length)
.010798	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01079a	b9 00 00	lda $0000,y			lda 	$0000,y
.01079d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01079f	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0107a1	1a		inc a				inc 	a
.0107a2	92 18		sta ($18)			sta 	(DStartTempString)
.0107a4	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0107a6	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0107a8	ca		dex				dex 								; do X times
.0107a9	d0 ec		bne $010797			bne 	_SCCCopy
.0107ab	fa		plx				plx
.0107ac					_SCCExit:
.0107ac	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.0107ad					Tokenise:
.0107ad	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0107af	84 0a		sty $0a				sty 	DTemp1+2
.0107b1	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0107b4	18		clc				clc
.0107b5	65 02		adc $02				adc 	DBaseAddress
.0107b7	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0107b9	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0107bc	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0107bf					_TOKCap:
.0107bf	c8		iny				iny 								; go to next
.0107c0	b7 08		lda [$08],y			lda 	[DTemp1],y
.0107c2	29 ff 00	and #$00ff			and 	#$00FF
.0107c5	f0 22		beq $0107e9			beq 	_TOKEndCap
.0107c7	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107ca	d0 01		bne $0107cd			bne 	_TOKNotQuote
.0107cc	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107cd					_TOKNotQuote:
.0107cd	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107d0	90 ed		bcc $0107bf			bcc 	_TOKCap
.0107d2	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107d5	b0 e8		bcs $0107bf			bcs 	_TOKCap
.0107d7	8a		txa				txa 								; check if in quotes
.0107d8	4a		lsr a				lsr 	a
.0107d9	b0 e4		bcs $0107bf			bcs 	_TOKCap
.0107db	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107dd	38		sec				sec
.0107de	e9 20 00	sbc #$0020			sbc 	#32
.0107e1	e2 20		sep #$20			sep 	#$20
.0107e3	97 08		sta [$08],y			sta 	[DTemp1],y
.0107e5	c2 20		rep #$20			rep 	#$20
.0107e7	80 d6		bra $0107bf			bra 	_TOKCap
.0107e9					_TOKEndCap:
.0107e9	c6 08		dec $08				dec 	DTemp1
.0107eb					_TOKMainNext:
.0107eb	e6 08		inc $08				inc 	DTemp1
.0107ed					_TOKMainLoop:
.0107ed	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107ef	29 ff 00	and #$00ff			and 	#$00FF
.0107f2	c9 20 00	cmp #$0020			cmp 	#32
.0107f5	90 1d		bcc $010814			bcc 	_TOKExit 					; 0-31 exit.
.0107f7	f0 f2		beq $0107eb			beq 	_TOKMainNext 				; 32 (space) skip.
.0107f9	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107fc	f0 1d		beq $01081b			beq 	_TOKString
.0107fe	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010801	90 1d		bcc $010820			bcc 	_TOKPunctuation
.010803	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.010806	90 42		bcc $01084a			bcc 	_TOKNumber
.010808	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.01080b	90 13		bcc $010820			bcc 	_TOKPunctuation
.01080d	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010810	90 3d		bcc $01084f			bcc 	_TOKIdentifier
.010812	80 0c		bra $010820			bra 	_TOKPunctuation 			; 91-   punctuation.
.010814					_TOKExit:
.010814	a9 00 00	lda #$0000			lda 	#$0000
.010817	20 54 08	jsr $010854			jsr 	TOKWriteToken
.01081a	60		rts				rts
.01081b					_TOKString:
.01081b	20 f2 08	jsr $0108f2			jsr 	TOKQuotedString
.01081e	80 cd		bra $0107ed			bra 	_TOKMainLoop
.010820					_TOKPunctuation:
.010820	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010823	20 59 09	jsr $010959			jsr 	TOKKeywordSearch
.010826	b0 1d		bcs $010845			bcs 	_TOKFoundPunctuation
.010828	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.01082b	20 59 09	jsr $010959			jsr 	TOKKeywordSearch
.01082e	b0 15		bcs $010845			bcs 	_TOKFoundPunctuation
.010830	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010833	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01083b	61 72 73 65 20 6c 69 6e 65 00
.010845					_TOKFoundPunctuation:
.010845	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; output the token and go round again.
.010848	80 a3		bra $0107ed			bra 	_TOKMainLoop
.01084a					_TOKNumber:
.01084a	20 73 08	jsr $010873			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01084d	80 9e		bra $0107ed			bra 	_TOKMainLoop
.01084f					_TOKIdentifier:
.01084f	20 b4 09	jsr $0109b4			jsr 	TOKIdentifier
.010852	80 99		bra $0107ed			bra 	_TOKMainLoop
.010854					TOKWriteToken:
.010854	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010856	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010858	e6 0c		inc $0c				inc 	DTemp2
.01085a	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01085c	29 ff 00	and #$00ff			and 	#$00FF
.01085f	f0 01		beq $010862			beq 	_TOKWriteOverflow
.010861	60		rts				rts
.010862					_TOKWriteOverflow:
.010862	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010865	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01086d	20 6c 6f 6e 67 00
.010873					TOKInteger:
.010873	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010875	64 26		stz $26				stz 	DTemp3+2
.010877					_TOKINLoop:
.010877	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010879	48		pha				pha
.01087a	a5 24		lda $24				lda 	DTemp3
.01087c	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.01087e	26 26		rol $26				rol 	DTemp3+2
.010880	06 24		asl $24				asl 	DTemp3
.010882	26 26		rol $26				rol 	DTemp3+2
.010884	18		clc				clc
.010885	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010887	85 24		sta $24				sta 	DTemp3
.010889	68		pla				pla
.01088a	65 26		adc $26				adc 	DTemp3+2
.01088c	85 26		sta $26				sta 	DTemp3+2
.01088e	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010890	26 26		rol $26				rol 	DTemp3+2
.010892	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010894	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010897	d0 44		bne $0108dd			bne 	_TOKINSize
.010899	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01089b	29 0f 00	and #$000f			and 	#15
.01089e	18		clc				clc
.01089f	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0108a1	85 24		sta $24				sta 	DTemp3
.0108a3	90 02		bcc $0108a7			bcc 	_TOKINNoCarry
.0108a5	e6 26		inc $26				inc 	DTemp3+2
.0108a7					_TOKINNoCarry:
.0108a7	e6 08		inc $08				inc 	DTemp1 						; look at next
.0108a9	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0108ab	29 ff 00	and #$00ff			and 	#$00FF
.0108ae	c9 30 00	cmp #$0030			cmp 	#"0"
.0108b1	90 05		bcc $0108b8			bcc 	_TOKINGotInteger
.0108b3	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0108b6	90 bf		bcc $010877			bcc		_TOKINLoop
.0108b8					_TOKINGotInteger:
.0108b8	a5 24		lda $24				lda 	DTemp3 						; lower word
.0108ba	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0108bd	18		clc				clc
.0108be	69 00 40	adc #$4000			adc 	#$4000
.0108c1	48		pha				pha 								; save it.
.0108c2	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108c4	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108c6	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108c8	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108cb	b0 10		bcs $0108dd			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108cd	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108d0	f0 06		beq $0108d8			beq 	_TOKINNoShift 				; don't need constant shift.
.0108d2	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108d5	20 54 08	jsr $010854			jsr 	TOKWriteToken
.0108d8					_TOKINNoShift:
.0108d8	68		pla				pla 								; get lower its token
.0108d9	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; output it
.0108dc	60		rts				rts
.0108dd					_TOKINSize:
.0108dd	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0108e0	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108e8	74 6f 6f 20 6c 61 72 67 65 00
.0108f2					TOKQuotedString:
.0108f2	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108f4	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108f6	85 32		sta $32				sta 	DTemp4
.0108f8	a5 0a		lda $0a				lda 	DTemp1+2
.0108fa	85 34		sta $34				sta 	DTemp4+2
.0108fc					_TOKQFindSize:
.0108fc	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108fe	e6 08		inc $08				inc 	DTemp1
.010900	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.010903	f0 3b		beq $010940			beq 	_TOQImbalance 				; end of line, and no quote found.
.010905	c9 22 00	cmp #$0022			cmp 	#34
.010908	d0 f2		bne $0108fc			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.01090a	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.01090c	38		sec				sec
.01090d	e5 32		sbc $32				sbc 	DTemp4
.01090f	3a		dec a				dec 	a 							; one less character for closing quote
.010910	85 26		sta $26				sta 	DTemp3+2
.010912	18		clc				clc
.010913	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010916	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010919	20 54 08	jsr $010854			jsr 	TOKWriteToken
.01091c	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.01091e	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; effectively a byte-write.
.010921	c6 0c		dec $0c				dec 	DTemp2
.010923	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010925	f0 0f		beq $010936			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010927					_TOKQWriteString:
.010927	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010929	29 ff 00	and #$00ff			and 	#$00FF
.01092c	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; effectively a byte-write.
.01092f	c6 0c		dec $0c				dec 	DTemp2
.010931	e6 32		inc $32				inc 	DTemp4 						; advance character
.010933	ca		dex				dex 								; do X times
.010934	d0 f1		bne $010927			bne 	_TOKQWriteString
.010936					_TOKQWriteEnd:
.010936	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010938	29 01 00	and #$0001			and 	#1
.01093b	f0 02		beq $01093f			beq 	_TOKQExit
.01093d	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01093f					_TOKQExit:
.01093f	60		rts				rts
.010940					_TOQImbalance:
.010940	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010943	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01094b	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010959					TOKKeywordSearch:
.010959	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01095b	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.01095e	85 34		sta $34				sta 	DTemp4+2
.010960	a2 00 00	ldx #$0000			ldx 	#0
.010963					_TOKScan:
.010963	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010967	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01096a	f0 46		beq $0109b2			beq 	_TOKFail 					; if zero then we have failed.
.01096c	3a		dec a				dec 	a 							; -1 gives the length.
.01096d	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01096f	d0 2f		bne $0109a0			bne 	_TOKNext 					; no, then skip to next token.
.010971	da		phx				phx 								; save X
.010972	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010975					_TOKCompare:
.010975	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010977	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.01097b	29 ff 00	and #$00ff			and 	#$00FF
.01097e	d0 1f		bne $01099f			bne 	_TOKPopNext 				; if different, pop and goto next.
.010980	e8		inx				inx 								; bump X and Y.
.010981	c8		iny				iny
.010982	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010984	d0 ef		bne $010975			bne 	_TOKCompare
.010986	98		tya				tya 								; add length to the text pointer
.010987	18		clc				clc
.010988	65 08		adc $08				adc 	DTemp1
.01098a	85 08		sta $08				sta 	DTemp1
.01098c	fa		plx				plx 								; restore X.
.01098d	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.010991	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010994	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010995	4a		lsr a				lsr		a
.010996	4a		lsr a				lsr 	a
.010997	eb		xba				xba
.010998	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01099a	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01099d	38		sec				sec
.01099e	60		rts				rts
.01099f					_TOKPopNext:
.01099f	fa		plx				plx 								; restore X.
.0109a0					_TOKNext:
.0109a0	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.0109a4	29 0f 00	and #$000f			and 	#$000F
.0109a7	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0109a9	8a		txa				txa
.0109aa	18		clc				clc
.0109ab	65 14		adc $14				adc 	DSignCount
.0109ad	aa		tax				tax
.0109ae	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0109b0	80 b1		bra $010963			bra 	_TOKScan
.0109b2					_TOKFail:
.0109b2	18		clc				clc
.0109b3	60		rts				rts
.0109b4					TOKIdentifier:
.0109b4	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0109b6	85 24		sta $24				sta 	DTemp3
.0109b8					_TOKIFindLength:
.0109b8	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0109ba	a7 08		lda [$08]			lda 	[DTemp1]
.0109bc	29 ff 00	and #$00ff			and 	#$00FF
.0109bf	20 5f 0a	jsr $010a5f			jsr 	TOKIsIdentifierCharacter
.0109c2	b0 f4		bcs $0109b8			bcs 	_TOKIFindLength
.0109c4	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109c6	38		sec				sec
.0109c7	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109c9	85 36		sta $36				sta 	DTemp5
.0109cb	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109cd	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109d0	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109d2	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109d4	29 ff 00	and #$00ff			and 	#$00FF
.0109d7	c9 24 00	cmp #$0024			cmp 	#"$"
.0109da	d0 0b		bne $0109e7			bne 	_TOKINotString
.0109dc	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109de	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109e0	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109e2	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109e5	85 26		sta $26				sta 	DTemp3+2
.0109e7					_TOKINotString:
.0109e7	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109e9	29 ff 00	and #$00ff			and 	#$00FF
.0109ec	c9 28 00	cmp #$0028			cmp 	#"("
.0109ef	d0 0b		bne $0109fc			bne 	_TOKINotArray
.0109f1	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109f3	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109f5	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109f7	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109fa	85 26		sta $26				sta 	DTemp3+2
.0109fc					_TOKINotArray:
.0109fc	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109fe	85 08		sta $08				sta 	DTemp1
.010a00	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.010a02	20 59 09	jsr $010959			jsr 	TOKKeywordSearch
.010a05	90 04		bcc $010a0b			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010a07	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; if CS write token and exit.
.010a0a	60		rts				rts
.010a0b					_TOKIIdentifier:
.010a0b	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010a0d	e6 08		inc $08				inc 	DTemp1
.010a0f	20 4b 0a	jsr $010a4b			jsr		_TOKIToConstant 			; convert to range 0-35
.010a12	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.010a14	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010a16	f0 1d		beq $010a35			beq 	_TOKINoSecond
.010a18	48		pha				pha 								; save current on stack.
.010a19	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010a1b	e6 08		inc $08				inc 	DTemp1
.010a1d	20 4b 0a	jsr $010a4b			jsr		_TOKIToConstant 			; convert to range 0-35
.010a20	85 14		sta $14				sta 	DSignCount 					; save it.
.010a22	0a		asl a				asl 	a 							; x 4
.010a23	0a		asl a				asl 	a
.010a24	65 14		adc $14				adc 	DSignCount 					; x 5
.010a26	0a		asl a				asl 	a 							; x 10
.010a27	65 14		adc $14				adc 	DSignCount 					; x 11
.010a29	0a		asl a				asl 	a 							; x 22
.010a2a	0a		asl a				asl 	a 							; x 44
.010a2b	65 14		adc $14				adc 	DSignCount 					; x 45
.010a2d	85 14		sta $14				sta 	DSignCount
.010a2f	68		pla				pla 								; get old token and add x 45
.010a30	18		clc				clc
.010a31	65 14		adc $14				adc 	DSignCount
.010a33	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a35					_TOKINoSecond:
.010a35	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a37	f0 03		beq $010a3c			beq 	_TOKINotLast				; if yes
.010a39	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a3c					_TOKINotLast:
.010a3c	20 54 08	jsr $010854			jsr 	TOKWriteToken 				; output the token
.010a3f	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a41	d0 c8		bne $010a0b			bne 	_TOKIIdentifier
.010a43					_TOKIOut:
.010a43	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a45	18		clc				clc
.010a46	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a48	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a4a	60		rts				rts
.010a4b					_TOKIToConstant:
.010a4b	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a4e	c9 41 00	cmp #$0041			cmp 	#65
.010a51	90 04		bcc $010a57			bcc 	_TOKITInteger
.010a53	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a56	60		rts				rts
.010a57					_TOKITInteger:
.010a57	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a5a	18		clc				clc
.010a5b	69 1b 00	adc #$001b			adc 	#27
.010a5e	60		rts				rts
.010a5f					TOKIsIdentifierCharacter:
.010a5f	c9 30 00	cmp #$0030			cmp 	#"0"
.010a62	90 0f		bcc $010a73			bcc 	_TOKIIFail
.010a64	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a67	90 0c		bcc $010a75			bcc 	_TOKIIOk
.010a69	c9 41 00	cmp #$0041			cmp 	#"A"
.010a6c	90 05		bcc $010a73			bcc 	_TOKIIFail
.010a6e	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a71	90 02		bcc $010a75			bcc 	_TOKIIOk
.010a73					_TOKIIFail:
.010a73	18		clc				clc
.010a74	60		rts				rts
.010a75					_TOKIIOk:
.010a75	38		sec				sec
.010a76	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a77					Binary_Add:
.010a77	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a79	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a7b	30 12		bmi $010a8f		bmi 	_BATypeError
.010a7d	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a7f	30 3f		bmi $010ac0		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a81	18		clc			clc 										; add the results
.010a82	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a84	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a86	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a88	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a8a	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a8c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a8e	60		rts			rts
.010a8f					_BATypeError:
.010a8f	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010a92	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a9a	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010aaa	65 73 00
.010aad					_BALengthError:
.010aad	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010ab0	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ab8	6f 6f 20 6c 6f 6e 67 00
.010ac0					_BAConcatenateString:
.010ac0	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010ac2	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010ac4	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010ac6	85 0c		sta $0c			sta 	DTemp2
.010ac8	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010aca	18		clc			clc 										; work out the total length
.010acb	b2 08		lda ($08)		lda 	(DTemp1)
.010acd	72 0c		adc ($0c)		adc 	(DTemp2)
.010acf	b0 14		bcs $010ae5		bcs 	_BAConcatLengthError 				; string is too long.
.010ad1	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010ad3	20 52 07	jsr $010752		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010ad6	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010ad8	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ada	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010adc	20 8c 07	jsr $01078c		jsr 	StringCreateCopy
.010adf	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010ae1	20 8c 07	jsr $01078c		jsr 	StringCreateCopy
.010ae4	60		rts			rts
.010ae5					_BAConcatLengthError:
.010ae5	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010ae8	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010af0	6f 6f 20 6c 6f 6e 67 00
.010af8					Binary_Subtract:
.010af8	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010afb	38		sec			sec
.010afc	b5 00		lda $00,x		lda		EXSValueL+0,x
.010afe	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b00	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b02	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b04	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b06	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b08	60		rts			rts
.010b09					Binary_ShiftRight:
.010b09	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b0c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b0e	29 3f 00	and #$003f		and 	#63
.010b11	f0 07		beq $010b1a		beq		_Binary_SRExit
.010b13					_Binary_SRLoop:
.010b13	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010b15	76 00		ror $00,x		ror 	EXSValueL+0,x
.010b17	3a		dec a			dec 	a
.010b18	d0 f9		bne $010b13		bne 	_Binary_SRLoop
.010b1a					_Binary_SRExit:
.010b1a	60		rts			rts
.010b1b					Binary_ShiftLeft:
.010b1b	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b1e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b20	29 3f 00	and #$003f		and 	#63
.010b23	f0 07		beq $010b2c		beq		_Binary_SLExit
.010b25					_Binary_SLLoop:
.010b25	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b27	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b29	3a		dec a			dec 	a
.010b2a	d0 f9		bne $010b25		bne 	_Binary_SLLoop
.010b2c					_Binary_SLExit:
.010b2c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010b2d					Binary_And:
.010b2d	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b30	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b32	35 02		and $02,x		and 	EXSValueL+2,x
.010b34	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b36	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b38	35 22		and $22,x		and 	EXSValueH+2,x
.010b3a	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b3c	60		rts			rts
.010b3d					Binary_Or:
.010b3d	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b40	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b42	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b44	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b46	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b48	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b4a	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b4c	60		rts			rts
.010b4d					Binary_Xor:
.010b4d	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010b50	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b52	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b54	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b56	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b58	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b5a	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b5c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b5d					Binary_Equals:
.010b5d	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b60	b0 0e		bcs $010b70		bcs 	_BEString
.010b62	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b64	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b66	d0 4f		bne $010bb7		bne 	Compare_Fail
.010b68	b5 20		lda $20,x		lda 	EXSValueH,x
.010b6a	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b6c	d0 49		bne $010bb7		bne 	Compare_Fail
.010b6e	80 3f		bra $010baf		bra 	Compare_Succeed
.010b70					_BEString:
.010b70	09 00 00	ora #$0000		ora 	#$0000
.010b73	f0 3a		beq $010baf		beq 	Compare_Succeed
.010b75	80 40		bra $010bb7		bra 	Compare_Fail
.010b77					Binary_NotEquals:
.010b77	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b7a	b0 0e		bcs $010b8a		bcs 	_BNEString
.010b7c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b7e	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b80	d0 2d		bne $010baf		bne 	Compare_Succeed
.010b82	b5 20		lda $20,x		lda 	EXSValueH,x
.010b84	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b86	d0 27		bne $010baf		bne 	Compare_Succeed
.010b88	80 2d		bra $010bb7		bra 	Compare_Fail
.010b8a					_BNEString:
.010b8a	09 00 00	ora #$0000		ora 	#$0000
.010b8d	d0 20		bne $010baf		bne 	Compare_Succeed
.010b8f	80 26		bra $010bb7		bra 	Compare_Fail
.010b91					Binary_Less:
.010b91	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b94	b0 12		bcs $010ba8		bcs 	_BLString
.010b96	38		sec			sec
.010b97	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b99	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b9b	b5 20		lda $20,x		lda 	EXSValueH,x
.010b9d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b9f	50 03		bvc $010ba4		bvc 	*+5
.010ba1	49 00 80	eor #$8000		eor 	#$8000
.010ba4	30 09		bmi $010baf		bmi 	Compare_Succeed
.010ba6	80 0f		bra $010bb7		bra 	Compare_Fail
.010ba8					_BLString:
.010ba8	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010bab	f0 02		beq $010baf		beq 	Compare_Succeed
.010bad	80 08		bra $010bb7		bra 	Compare_Fail
.010baf					Compare_Succeed:
.010baf	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010bb2	95 00		sta $00,x		sta 	EXSValueL,x
.010bb4	95 20		sta $20,x		sta 	EXSValueH,x
.010bb6	60		rts			rts
.010bb7					Compare_Fail:
.010bb7	74 00		stz $00,x		stz 	EXSValueL,x
.010bb9	74 20		stz $20,x		stz 	EXSValueH,x
.010bbb	60		rts			rts
.010bbc					Binary_GreaterEqual:
.010bbc	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bbf	b0 12		bcs $010bd3		bcs 	_BGEString
.010bc1	38		sec			sec
.010bc2	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010bc4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc6	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bca	50 03		bvc $010bcf		bvc 	*+5
.010bcc	49 00 80	eor #$8000		eor 	#$8000
.010bcf	10 de		bpl $010baf		bpl 	Compare_Succeed
.010bd1	80 e4		bra $010bb7		bra 	Compare_Fail
.010bd3					_BGEString:
.010bd3	09 00 00	ora #$0000		ora 	#$0000
.010bd6	10 d7		bpl $010baf		bpl 	Compare_Succeed
.010bd8	80 dd		bra $010bb7		bra 	Compare_Fail
.010bda					Binary_LessEqual:
.010bda	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bdd	b0 12		bcs $010bf1		bcs 	_BLEString
.010bdf	18		clc			clc 									; numeric <= signed
.010be0	b5 00		lda $00,x		lda 	EXSValueL,x
.010be2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010be4	b5 20		lda $20,x		lda 	EXSValueH,x
.010be6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010be8	50 03		bvc $010bed		bvc 	*+5
.010bea	49 00 80	eor #$8000		eor 	#$8000
.010bed	30 c0		bmi $010baf		bmi 	Compare_Succeed
.010bef	80 c6		bra $010bb7		bra 	Compare_Fail
.010bf1					_BLEString:
.010bf1	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bf4	d0 b9		bne $010baf		bne 	Compare_Succeed
.010bf6	80 bf		bra $010bb7		bra 	Compare_Fail
.010bf8					Binary_Greater:
.010bf8	20 16 0c	jsr $010c16		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bfb	b0 12		bcs $010c0f		bcs 	_BGString
.010bfd	18		clc			clc 									; numeric > signed
.010bfe	b5 00		lda $00,x		lda 	EXSValueL,x
.010c00	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010c02	b5 20		lda $20,x		lda 	EXSValueH,x
.010c04	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010c06	50 03		bvc $010c0b		bvc 	*+5
.010c08	49 00 80	eor #$8000		eor 	#$8000
.010c0b	10 a2		bpl $010baf		bpl 	Compare_Succeed
.010c0d	80 a8		bra $010bb7		bra 	Compare_Fail
.010c0f					_BGString:
.010c0f	c9 01 00	cmp #$0001		cmp 	#$0001
.010c12	f0 9b		beq $010baf		beq 	Compare_Succeed
.010c14	80 a1		bra $010bb7		bra 	Compare_Fail
.010c16					CompareTypeCheck:
.010c16	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010c18	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010c1a	30 06		bmi $010c22		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010c1c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010c1e	30 1c		bmi $010c3c		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010c20	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010c21	60		rts			rts
.010c22					_CTCFail:
.010c22	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010c25	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c2d	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c3c					_CTCStringCompare:
.010c3c	20 33 06	jsr $010633		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c3f	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c41	85 08		sta $08			sta 	DTemp1
.010c43	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c45	85 0c		sta $0c			sta 	DTemp2
.010c47	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c4a	a8		tay			tay
.010c4b	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c4d	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c4f	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c51	90 02		bcc $010c55		bcc 	_CTCSmallest
.010c53	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c55					_CTCSmallest:
.010c55	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c57					_CTCCompare:
.010c57	c8		iny			iny 									; look at next character (done first, first char is size)
.010c58	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c5a	30 16		bmi $010c72		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c5c	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c5e	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c60	f0 f5		beq $010c57		beq 	_CTCCompare 					; if zero, try the next character.
.010c62	b0 07		bcs $010c6b		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c64					_CTCLess:
.010c64	c2 20		rep #$20		rep 	#$20
.010c66	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c69	80 14		bra $010c7f		bra 	_CTCExit
.010c6b					_CTCGreater:
.010c6b	c2 20		rep #$20		rep 	#$20
.010c6d	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c70	80 0d		bra $010c7f		bra 	_CTCExit
.010c72					_CTCEqualSoFar:
.010c72	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c74	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c76	90 ec		bcc $010c64		bcc 	_CTCLess
.010c78	d0 f1		bne $010c6b		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c7a	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c7c	a9 00 00	lda #$0000		lda 	#$0000
.010c7f					_CTCExit:
.010c7f	38		sec			sec 									; return with CS indicating string comparison.
.010c80	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c81					Binary_Divide:
.010c81	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010c84	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c86	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c88	d0 14		bne $010c9e		bne 	_BinaryDivide_Ok
.010c8a	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010c8d	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c95	20 62 79 20 7a 65 72 6f 00
.010c9e					_BinaryDivide_Ok:
.010c9e	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010ca0	64 0a		stz $0a			stz 	DTemp1+2
.010ca2	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010ca4	5a		phy			phy 										; save Y (bit counter)
.010ca5	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010ca7	10 07		bpl $010cb0		bpl 	_BinaryDivide_RightDone
.010ca9	e8		inx			inx
.010caa	e8		inx			inx
.010cab	20 e6 0c	jsr $010ce6		jsr 	Binary_DivNegate
.010cae	ca		dex			dex
.010caf	ca		dex			dex
.010cb0					_BinaryDivide_RightDone:
.010cb0	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010cb2	10 03		bpl $010cb7		bpl 	_BinaryDivide_LeftDone
.010cb4	20 e6 0c	jsr $010ce6		jsr 	Binary_DivNegate
.010cb7					_BinaryDivide_LeftDone:
.010cb7	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010cba					_BinaryDivide_Loop:
.010cba	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010cbc	36 20		rol $20,x		rol 	EXSValueH+0,x
.010cbe	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010cc0	26 0a		rol $0a			rol 	DTemp1+2
.010cc2	38		sec			sec											; calculate A-M
.010cc3	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010cc5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010cc7	85 0c		sta $0c			sta 	DTemp2
.010cc9	a5 0a		lda $0a			lda 	DTemp1+2
.010ccb	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ccd	90 08		bcc $010cd7		bcc 	_Binary_NoSubract 					; if A < M skip this
.010ccf	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010cd1	a5 0c		lda $0c			lda 	DTemp2
.010cd3	85 08		sta $08			sta 	DTemp1+0
.010cd5	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cd7					_Binary_NoSubract:
.010cd7	88		dey			dey 										; do it 32 times.
.010cd8	d0 e0		bne $010cba		bne 	_BinaryDivide_Loop
.010cda					_BinaryDivide_Exit:
.010cda	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cdc	29 01 00	and #$0001		and 	#1
.010cdf	f0 03		beq $010ce4		beq 	_BinaryDivide_Exit2
.010ce1	20 e6 0c	jsr $010ce6		jsr 	Binary_DivNegate
.010ce4					_BinaryDivide_Exit2:
.010ce4	7a		ply			ply 										; restore Y
.010ce5	60		rts			rts
.010ce6					Binary_DivNegate:
.010ce6	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010ce8	38		sec			sec 										; negate the value at stack X.
.010ce9	a9 00 00	lda #$0000		lda 	#$0000
.010cec	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cee	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cf0	a9 00 00	lda #$0000		lda 	#$0000
.010cf3	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cf5	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cf7	60		rts			rts
.010cf8					Binary_Modulus:
.010cf8	20 81 0c	jsr $010c81		jsr 	Binary_Divide 						; do the divide
.010cfb	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cfd	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cff	a5 0a		lda $0a			lda 	DTemp1+2
.010d01	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d03	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010d04					Binary_Multiply:
.010d04	20 13 06	jsr $010613		jsr 	CheckBothNumeric 					; check both values are numeric
.010d07	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010d09	85 08		sta $08			sta 	DTemp1
.010d0b	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d0d	85 0a		sta $0a			sta		DTemp1+2
.010d0f	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010d11	74 20		stz $20,x		stz 	EXSValueH+0,x
.010d13					_BinaryMultiply_Loop:
.010d13	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010d15	05 0a		ora $0a			ora 	DTemp1+2
.010d17	f0 1e		beq $010d37		beq 	_BinaryMultiply_Exit
.010d19	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010d1b	29 01 00	and #$0001		and 	#1
.010d1e	f0 0d		beq $010d2d		beq 	_BinaryMultiply_NoAdd
.010d20	18		clc			clc 										; add multiplicand to result.
.010d21	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d23	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d25	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d27	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d29	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d2b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d2d					_BinaryMultiply_NoAdd:
.010d2d	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d2f	66 08		ror $08			ror 	DTemp1
.010d31	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d33	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d35	80 dc		bra $010d13		bra 	_BinaryMultiply_Loop 				; go round again.
.010d37					_BinaryMultiply_Exit:
.010d37	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010d38					Function_Len:
.010d38	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010d3b	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d3e	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d41	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d43	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d46	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d49	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d4b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d4d	60		rts				rts
.010d4e					Function_Abs:
.010d4e	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010d51	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d54	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d57	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d59	30 07		bmi $010d62			bmi 	_FAbsNegative 				; negate it if negative
.010d5b	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d5d	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d5f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d61	60		rts				rts
.010d62					_FAbsNegative:
.010d62	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d63	a9 00 00	lda #$0000			lda 	#0
.010d66	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d68	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d6a	a9 00 00	lda #$0000			lda 	#0
.010d6d	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d6f	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d71	60		rts				rts
.010d72					Function_Sgn:
.010d72	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns integer
.010d75	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d78	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d7b	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d7d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d7f	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d81	30 07		bmi $010d8a			bmi 	_FSgnNegative 				; set to -1 if signed
.010d83	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d85	f0 02		beq $010d89			beq 	_FSgnExit
.010d87	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d89					_FSgnExit:
.010d89	60		rts				rts
.010d8a					_FSgnNegative:
.010d8a	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d8d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d8f	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d91	60		rts				rts
.010d92					Function_Random:
.010d92	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010d95	20 33 06	jsr $010633			jsr 	ResetTypeInteger
.010d98	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d9a	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d9c	d0 0a		bne $010da8			bne 	_Rnd_NotZero
.010d9e	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010da1	85 10		sta $10				sta 	DRandom
.010da3	a9 ea 00	lda #$00ea			lda 	#$EA
.010da6	85 12		sta $12				sta 	DRandom+2
.010da8					_Rnd_NotZero:
.010da8	20 b3 0d	jsr $010db3			jsr 	_Rnd_Process 				; call randomiser twice
.010dab	95 20		sta $20,x			sta 	EXSValueH+0,x
.010dad	20 b3 0d	jsr $010db3			jsr 	_Rnd_Process
.010db0	95 00		sta $00,x			sta 	EXSValueL+0,x
.010db2	60		rts				rts
.010db3					_Rnd_Process:
.010db3	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010db5	26 12		rol $12				rol 	DRandom+2
.010db7	90 0e		bcc $010dc7			bcc 	_Rnd_Exit
.010db9	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010dbb	49 54 d4	eor #$d454			eor 	#$D454
.010dbe	85 10		sta $10				sta 	DRandom
.010dc0	a5 12		lda $12				lda 	DRandom+2
.010dc2	49 d5 55	eor #$55d5			eor 	#$55D5
.010dc5	85 12		sta $12				sta 	DRandom+2
.010dc7					_Rnd_Exit:
.010dc7	a5 10		lda $10				lda 	DRandom
.010dc9	45 12		eor $12				eor 	DRandom+2
.010dcb	60		rts				rts
.010dcc					Function_Chr:
.010dcc	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string
.010dcf	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010dd2	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010dd5	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dd8	d0 12		bne $010dec			bne 	_FCHBad
.010dda	48		pha				pha  								; save char # on stack
.010ddb	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dde	20 52 07	jsr $010752			jsr 	StringTempAllocate
.010de1	68		pla				pla 								; restore character number
.010de2	20 7e 07	jsr $01077e			jsr 	StringWriteCharacter 		; write it out.
.010de5	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010de7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010de9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010deb	60		rts				rts
.010dec					_FCHBad:
.010dec	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010def	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010df7	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010e04					Function_Asc:
.010e04	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010e07	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010e0a	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e0d	a8		tay				tay 								; string address in Y
.010e0e	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010e11	29 ff 00	and #$00ff			and 	#$00FF
.010e14	f0 0b		beq $010e21			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010e16	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010e19	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010e1c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010e1e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e20	60		rts				rts
.010e21					_FASBad:
.010e21	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010e24	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e2c	65 20 66 6f 72 20 61 73 63 28 29 00
.010e38					Function_SPC:
.010e38	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string
.010e3b	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e3e	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e41	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e44	d0 17		bne $010e5d			bne 	_FSPBad
.010e46	48		pha				pha 								; save length
.010e47	20 52 07	jsr $010752			jsr 	StringTempAllocate 			; allocate character space
.010e4a	7a		ply				ply 								; get count in Y
.010e4b	f0 09		beq $010e56			beq 	_FSPExit 					; if zero, just empty string
.010e4d					_FSPCopy:
.010e4d	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e50	20 7e 07	jsr $01077e			jsr 	StringWriteCharacter 		; write it out.
.010e53	88		dey				dey
.010e54	d0 f7		bne $010e4d			bne 	_FSPCopy	 				; do it Y times
.010e56					_FSPExit:
.010e56	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e58	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e5a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e5c	60		rts				rts
.010e5d					_FSPBad:
.010e5d	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010e60	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e68	65 20 66 6f 72 20 73 70 63 28 29 00
.010e74					Function_Inkey:
.010e74	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010e77	20 33 06	jsr $010633			jsr 	ResetTypeInteger
.010e7a	20 d4 1d	jsr $011dd4			jsr 	HWInkey 					; read current key
.010e7d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e7f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e81	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e82					Function_LEFT:
.010e82	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010e85	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e88	48		pha				pha 								; save string on stack.
.010e89	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get count
.010e8c	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e8f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e92	d0 6d		bne $010f01			bne 	FNStringParameter
.010e94	85 08		sta $08				sta 	DTemp1 						; save count.
.010e96	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010e99	7a		ply				ply 								; Y points to string.
.010e9a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e9d	29 ff 00	and #$00ff			and 	#$00FF
.010ea0	f0 52		beq $010ef4			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ea2	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ea4	f0 55		beq $010efb			beq 	FNStringY 					; return string in Y if current len = required len.
.010ea6	90 53		bcc $010efb			bcc 	FNStringY 					; if current < required return whole thing.
.010ea8	c8		iny				iny 								; take from here - start of string
.010ea9	80 33		bra $010ede			bra 	FNDTemp1Characters
.010eab					Function_RIGHT:
.010eab	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010eae	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010eb1	48		pha				pha 								; save string on stack.
.010eb2	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get count
.010eb5	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010eb8	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ebb	d0 44		bne $010f01			bne 	FNStringParameter
.010ebd	85 08		sta $08				sta 	DTemp1 						; save count.
.010ebf	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010ec2	7a		ply				ply 								; Y points to string.
.010ec3	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010ec6	29 ff 00	and #$00ff			and 	#$00FF
.010ec9	f0 29		beq $010ef4			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ecb	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ecd	f0 2c		beq $010efb			beq 	FNStringY 					; return string in Y if current len = required len.
.010ecf	90 2a		bcc $010efb			bcc 	FNStringY 					; if current < required return whole thing.
.010ed1	38		sec				sec 								; current-required is the number to skip
.010ed2	e5 08		sbc $08				sbc 	DTemp1
.010ed4	85 0a		sta $0a				sta 	DTemp1+2
.010ed6	98		tya				tya
.010ed7	18		clc				clc
.010ed8	65 0a		adc $0a				adc 	DTemp1+2
.010eda	a8		tay				tay
.010edb	c8		iny				iny 								; +1 for the count.
.010edc	80 00		bra $010ede			bra 	FNDTemp1Characters
.010ede					FNDTemp1Characters:
.010ede	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ee0	f0 12		beq $010ef4			beq 	FNStringEmpty 				; if zero, return empty string.
.010ee2	20 52 07	jsr $010752			jsr 	StringTempAllocate
.010ee5	48		pha				pha 								; save the address
.010ee6					_FND1Loop:
.010ee6	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ee9	20 7e 07	jsr $01077e			jsr 	StringWriteCharacter
.010eec	c8		iny				iny
.010eed	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010eef	d0 f5		bne $010ee6			bne 	_FND1Loop
.010ef1	7a		ply				ply 								; string address in Y
.010ef2	80 07		bra $010efb			bra 	FNStringY
.010ef4					FNStringEmpty:
.010ef4	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ef7	20 52 07	jsr $010752			jsr 	StringTempAllocate 			; put address of it in Y
.010efa	a8		tay				tay
.010efb					FNStringY:
.010efb	98		tya				tya
.010efc	95 00		sta $00,x			sta 	EXSValueL+0,x
.010efe	74 22		stz $22,x			stz 	EXSValueH+2,x
.010f00	60		rts				rts
.010f01					FNStringParameter:
.010f01	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010f04	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010f0c	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010f19					Function_MID:
.010f19	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.010f1c	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f1f	48		pha				pha 								; save string on stack.
.010f20	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; get offset (n)
.010f23	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010f26	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f29	d0 d6		bne $010f01			bne 	FNStringParameter
.010f2b	c9 00 00	cmp #$0000			cmp 	#0
.010f2e	f0 d1		beq $010f01			beq 	FNStringParameter 			; or zero
.010f30	48		pha				pha 								; save start position on stack.
.010f31	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f34	85 08		sta $08				sta 	DTemp1
.010f36	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f38	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f3b	d0 0e		bne $010f4b			bne 	_FMINoThird
.010f3d	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f3f	e6 06		inc $06				inc 	DCodePtr
.010f41	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f44	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f47	d0 b8		bne $010f01			bne 	FNStringParameter
.010f49	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f4b					_FMINoThird:
.010f4b	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.010f4e	68		pla				pla 								; get offset position
.010f4f	85 0c		sta $0c				sta 	DTemp2
.010f51	7a		ply				ply 								; get address of string in Y
.010f52	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f55	29 ff 00	and #$00ff			and 	#$00FF
.010f58	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f5a	90 98		bcc $010ef4			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f5c	38		sec				sec 								; calculate number of characters left after
.010f5d	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f5f	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f60	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f62	b0 02		bcs $010f66			bcs 	_FMISufficient
.010f64	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f66					_FMISufficient:
.010f66	98		tya				tya 								; get address
.010f67	18		clc				clc
.010f68	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f6a	a8		tay				tay 								; put in Y
.010f6b	82 70 ff	brl $010ede			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f6e					Function_Peek:
.010f6e	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010f71	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f74	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010f77	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f79	84 0a		sty $0a				sty 	DTemp1+2
.010f7b	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f7e	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f80	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f83	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f85	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f87	60		rts				rts
.010f88					Function_Deek:
.010f88	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010f8b	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f8e	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010f91	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f93	84 0a		sty $0a				sty 	DTemp1+2
.010f95	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f98	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f9a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f9c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f9e	60		rts				rts
.010f9f					Function_Leek:
.010f9f	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010fa2	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010fa5	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check )
.010fa8	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010faa	84 0a		sty $0a				sty 	DTemp1+2
.010fac	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010faf	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fb1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010fb3	c8		iny				iny
.010fb4	c8		iny				iny
.010fb5	b7 08		lda [$08],y			lda 	[DTemp1],y
.010fb7	95 20		sta $20,x			sta 	EXSValueH+0,x
.010fb9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010fba					Function_VAL:
.010fba	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns an integer
.010fbd	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010fc0	48		pha				pha 								; put string address on stack.
.010fc1	20 d1 0f	jsr $010fd1			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fc4	7a		ply				ply 								; get string address back
.010fc5	da		phx				phx 								; save X on stack
.010fc6	aa		tax				tax 								; base in X
.010fc7	98		tya				tya 								; address in A
.010fc8	20 0b 10	jsr $01100b			jsr 	StringToInteger
.010fcb	fa		plx				plx 								; restore X
.010fcc	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fce	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fd0	60		rts				rts
.010fd1					VALGetBase:
.010fd1	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fd3	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fd6	f0 07		beq $010fdf			beq 	_VGBAlternate
.010fd8	20 01 06	jsr $010601			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fdb	a9 0a 00	lda #$000a			lda 	#10
.010fde	60		rts				rts
.010fdf					_VGBAlternate:
.010fdf	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; skip comma.
.010fe2	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fe5	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fe8	d0 0e		bne $010ff8			bne 	_VGBBadBase
.010fea	c9 02 00	cmp #$0002			cmp 	#2
.010fed	90 09		bcc $010ff8			bcc 	_VGBBadBase
.010fef	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010ff2	b0 04		bcs $010ff8			bcs 	_VGBBadBase
.010ff4	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; get right bracket and return.
.010ff7	60		rts				rts
.010ff8					_VGBBadBase:
.010ff8	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>010ffb	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>011003	65 72 20 42 61 73 65 00
.01100b					StringToInteger:
.01100b	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.01100d	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.01100f	29 ff 00	and #$00ff			and 	#$00FF
.011012	85 26		sta $26				sta 	DTemp3+2
.011014	f0 6e		beq $011084			beq 	_STIError 					; if length zero it's bad.
.011016	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.011018	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.01101a	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.01101c	64 0a		stz $0a				stz 	DTemp1+2
.01101e	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.011020	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.011023	48		pha				pha 								; push on stack
.011024	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011027	d0 06		bne $01102f			bne 	_STILoop
.011029	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01102b	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01102d	f0 55		beq $011084			beq 	_STIError 					; if only - then error.
.01102f					_STILoop:
.01102f	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.011031	20 a3 10	jsr $0110a3			jsr 	MultiplyTemp1ByA
.011034	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011036	29 ff 00	and #$00ff			and 	#$00FF
.011039	20 94 10	jsr $011094			jsr 	ConvertUpperCase	 		; make U/C
.01103c	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.01103f	90 43		bcc $011084			bcc 	_STIError
.011041	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011044	90 0e		bcc $011054			bcc 	_STIOkay1
.011046	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.011049	90 39		bcc $011084			bcc 	_STIError
.01104b	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01104e	b0 34		bcs $011084			bcs 	_STIError
.011050	18		clc				clc 								; shift to correct range.
.011051	69 09 00	adc #$0009			adc 	#9
.011054					_STIOkay1:
.011054	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011057	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.011059	b0 29		bcs $011084			bcs 	_STIError
.01105b	18		clc				clc 								; add A to DTemp1
.01105c	65 08		adc $08				adc 	DTemp1
.01105e	85 08		sta $08				sta 	DTemp1
.011060	90 02		bcc $011064			bcc 	_STINoCarry
.011062	e6 0a		inc $0a				inc 	DTemp1+2
.011064					_STINoCarry:
.011064	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011066	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.011068	d0 c5		bne $01102f			bne 	_STILoop 					; loop back.
.01106a	68		pla				pla 								; get optional minus bac
.01106b	c9 2d 00	cmp #$002d			cmp 	#"-"
.01106e	d0 0f		bne $01107f			bne 	_STINotNegative 			; handle the negative character
.011070	38		sec				sec 								; negate DTemp1
.011071	a9 00 00	lda #$0000			lda 	#0
.011074	e5 08		sbc $08				sbc 	DTemp1
.011076	85 08		sta $08				sta 	DTemp1
.011078	a9 00 00	lda #$0000			lda 	#0
.01107b	e5 0a		sbc $0a				sbc 	DTemp1+2
.01107d	85 0a		sta $0a				sta 	DTemp1+2
.01107f					_STINotNegative:
.01107f	a5 08		lda $08				lda 	DTemp1 						; get the result
.011081	a4 0a		ldy $0a				ldy 	DTemp1+2
.011083	60		rts				rts
.011084					_STIError:
.011084	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011087	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01108f	74 61 6e 74 00
.011094					ConvertUpperCase:
.011094	c9 61 00	cmp #$0061			cmp 	#'a'
.011097	90 09		bcc $0110a2			bcc 	_CUCExit
.011099	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01109c	b0 04		bcs $0110a2			bcs 	_CUCExit
.01109e	38		sec				sec
.01109f	e9 20 00	sbc #$0020			sbc 	#32
.0110a2					_CUCExit:
.0110a2	60		rts				rts
.0110a3					MultiplyTemp1ByA:
.0110a3					_MTGeneral:
.0110a3	da		phx				phx
.0110a4	aa		tax				tax 								; multiplier in X
.0110a5	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0110a7	85 0c		sta $0c				sta 	DTemp2
.0110a9	a5 0a		lda $0a				lda 	DTemp1+2
.0110ab	85 0e		sta $0e				sta 	DTemp2+2
.0110ad	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.0110af	64 0a		stz $0a				stz 	DTemp1+2
.0110b1	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.0110b4					_MTLoop:
.0110b4	8a		txa				txa 								; shift X right into C
.0110b5	4a		lsr a				lsr 	a
.0110b6	aa		tax				tax
.0110b7	90 10		bcc $0110c9			bcc 	_MTNoAdd
.0110b9	18		clc				clc
.0110ba	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0110bc	65 0c		adc $0c				adc 	DTemp2
.0110be	85 08		sta $08				sta 	DTemp1
.0110c0	a5 0a		lda $0a				lda 	DTemp1+2
.0110c2	65 0e		adc $0e				adc 	DTemp2+2
.0110c4	85 0a		sta $0a				sta 	DTemp1+2
.0110c6	90 01		bcc $0110c9			bcc 	_MTNoAdd
.0110c8	c8		iny				iny
.0110c9					_MTNoAdd:
.0110c9	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110cb	26 0e		rol $0e				rol 	DTemp2+2
.0110cd	90 01		bcc $0110d0			bcc 	_MTNoOverflow
.0110cf	c8		iny				iny
.0110d0					_MTNoOverflow:
.0110d0	8a		txa				txa 								; until multiplier is zero.
.0110d1	d0 e1		bne $0110b4			bne 	_MTLoop
.0110d3	98		tya				tya
.0110d4	18		clc				clc
.0110d5	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110d8	fa		plx				plx 								; restore X
.0110d9	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.0110da					Function_Str:
.0110da	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.0110dd	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110e0	48		pha				pha 								; save YA on the stack
.0110e1	5a		phy				phy
.0110e2	20 d1 0f	jsr $010fd1			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110e5	85 14		sta $14				sta 	DSignCount
.0110e7	7a		ply				ply 								; YA is the number
.0110e8	68		pla				pla
.0110e9	da		phx				phx
.0110ea	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110ec	20 f5 10	jsr $0110f5			jsr 	ConvertToString 			; convert it to a string.
.0110ef	fa		plx				plx 								; restore X
.0110f0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110f2	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110f4	60		rts				rts
.0110f5					ConvertToString:
.0110f5	48		pha				pha
.0110f6	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110f9	20 52 07	jsr $010752			jsr 	StringTempAllocate 			; allocate space for return string.
.0110fc	68		pla				pla
.0110fd					ConvertToStringAlreadyAllocated:
.0110fd	da		phx				phx 								; save X (base)
.0110fe	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.011100	84 26		sty $26				sty 	DTemp3+2
.011102	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.011104	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.011106	10 15		bpl $01111d			bpl 	_CTSNotNegative
.011108	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.01110b	20 87 11	jsr $011187			jsr 	CTSOutputA
.01110e	38		sec				sec 								; negate DTemp3 which is the number
.01110f	a9 00 00	lda #$0000			lda 	#0
.011112	e5 24		sbc $24				sbc 	DTemp3
.011114	85 24		sta $24				sta 	DTemp3
.011116	a9 00 00	lda #$0000			lda 	#0
.011119	e5 26		sbc $26				sbc 	DTemp3+2
.01111b	85 26		sta $26				sta 	DTemp3+2
.01111d					_CTSNotNegative:
.01111d	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.011120	48		pha				pha
.011121	a9 00 00	lda #$0000			lda 	#0
.011124	48		pha				pha
.011125	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011127	85 08		sta $08				sta 	DTemp1
.011129	64 0a		stz $0a				stz 	DTemp1+2
.01112b					_CTSMultiplySubtractor:
.01112b	38		sec				sec 								; check number vs subtractor
.01112c	a5 24		lda $24				lda 	DTemp3
.01112e	e5 08		sbc $08				sbc 	DTemp1
.011130	a5 26		lda $26				lda 	DTemp3+2
.011132	e5 0a		sbc $0a				sbc 	DTemp1+2
.011134	90 0f		bcc $011145			bcc		_CTSScaledUp 				; if >= then scaled up.
.011136	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011138	48		pha				pha
.011139	a5 0a		lda $0a				lda 	DTemp1+2
.01113b	48		pha				pha
.01113c	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.01113e	20 a3 10	jsr $0110a3			jsr 	MultiplyTemp1ByA
.011141	b0 02		bcs $011145			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011143	80 e6		bra $01112b			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011145					_CTSScaledUp:
.011145	7a		ply				ply 								; YA contains the previous divider.
.011146	68		pla				pla
.011147	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01114a	d0 05		bne $011151			bne 	_CTSHasDigit
.01114c	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.01114f	f0 20		beq $011171			beq 	_CTSExit
.011151					_CTSHasDigit:
.011151	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011153	84 0e		sty $0e				sty 	DTemp2+2
.011155	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011158					_CTSSubLoop:
.011158	38		sec				sec 								; subtract subtractor from number
.011159	a5 24		lda $24				lda 	DTemp3
.01115b	e5 0c		sbc $0c				sbc 	DTemp2
.01115d	a8		tay				tay 								; intermediate in Y
.01115e	a5 26		lda $26				lda 	DTemp3+2
.011160	e5 0e		sbc $0e				sbc 	DTemp2+2
.011162	90 07		bcc $01116b			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011164	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011166	84 24		sty $24				sty 	DTemp3
.011168	e8		inx				inx 								; one more subtraction
.011169	80 ed		bra $011158			bra 	_CTSSubLoop 				; try it again.
.01116b					_CTSFinishedSubtracting:
.01116b	8a		txa				txa 								; convert to ASCII.
.01116c	20 7a 11	jsr $01117a			jsr 	CTSOutputHexDigit 			; write that out.
.01116f	80 d4		bra $011145			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011171					_CTSExit:
.011171	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011173	20 7a 11	jsr $01117a			jsr 	CTSOutputHexDigit
.011176	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.011178	fa		plx				plx 								; restore X.
.011179	60		rts				rts
.01117a					CTSOutputHexDigit:
.01117a	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01117d	90 04		bcc $011183			bcc 	_CTSNotLetter
.01117f	18		clc				clc
.011180	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011183					_CTSNotLetter:
.011183	18		clc				clc
.011184	69 30 00	adc #$0030			adc 	#48
.011187					CTSOutputA:
.011187	5a		phy				phy 								; save Y, set Y to current pointer
.011188	a4 1a		ldy $1a				ldy 	DCurrentTempString
.01118a	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01118d	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.01118f	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011191	1a		inc a				inc 	a
.011192	92 18		sta ($18)			sta 	(DStartTempString)
.011194	c2 20		rep #$20			rep 	#$20
.011196	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.011198	7a		ply				ply 								; restore Y and exit.
.011199	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.01119a					Function_INSTR:
.01119a	20 33 06	jsr $010633			jsr 	ResetTypeInteger 			; returns a integer
.01119d	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0111a0	48		pha				pha 								; save string to search
.0111a1	20 0a 06	jsr $01060a			jsr 	ExpectComma
.0111a4	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.0111a7	20 01 06	jsr $010601			jsr 	ExpectRightBracket
.0111aa	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.0111ac	68		pla				pla
.0111ad	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.0111af	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0111b1	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0111b3	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0111b5	38		sec				sec
.0111b6	b2 0c		lda ($0c)			lda 	(DTemp2)
.0111b8	f2 08		sbc ($08)			sbc		(DTemp1)
.0111ba	c2 20		rep #$20			rep 	#$20
.0111bc	90 2c		bcc $0111ea			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0111be	29 ff 00	and #$00ff			and 	#$00FF
.0111c1	1a		inc a				inc 	a
.0111c2	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111c4	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111c6	29 ff 00	and #$00ff			and 	#$00FF
.0111c9	f0 22		beq $0111ed			beq 	_FINSError
.0111cb					_FINSLoop:
.0111cb	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111cd	1a		inc a				inc 	a
.0111ce	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111d0	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111d2	29 ff 00	and #$00ff			and 	#$00FF
.0111d5	a8		tay				tay									; start comparing at index 1.
.0111d6					_FINSCompare:
.0111d6	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111d8	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111da	29 ff 00	and #$00ff			and 	#$00FF
.0111dd	d0 05		bne $0111e4			bne 	_FINSNext
.0111df	88		dey				dey
.0111e0	d0 f4		bne $0111d6			bne 	_FINSCompare
.0111e2	80 08		bra $0111ec			bra 	_FINSExit
.0111e4					_FINSNext:
.0111e4	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111e6	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111e8	d0 e1		bne $0111cb			bne 	_FINSLoop
.0111ea					_FINSFail:
.0111ea	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111ec					_FINSExit:
.0111ec	60		rts				rts
.0111ed					_FINSError:
.0111ed	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0111f0	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111f8	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.011201					Function_UPPER:
.011201	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.011204	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011207	48		pha				pha
.011208	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; close call.
.01120b	20 52 07	jsr $010752			jsr		StringTempAllocate 			; allocate memory for it
.01120e	68		pla				pla
.01120f	20 8c 07	jsr $01078c			jsr 	StringCreateCopy 			; create a copy of it.
.011212	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011214	95 00		sta $00,x			sta 	EXSValueL+0,x
.011216	a8		tay				tay 								; address in Y
.011217	74 20		stz $20,x			stz 	EXSValueH+0,x
.011219	da		phx				phx 								; save X
.01121a	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01121c	29 ff 00	and #$00ff			and 	#$00FF
.01121f	f0 20		beq $011241			beq 	_FUPExit
.011221	aa		tax				tax 								; put in X
.011222					_FUPLoop:
.011222	c8		iny				iny 								; increment and load character
.011223	b9 00 00	lda $0000,y			lda 	$0000,y
.011226	29 ff 00	and #$00ff			and 	#$00FF
.011229	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.01122c	90 10		bcc $01123e			bcc 	_FUPNoChange
.01122e	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011231	b0 0b		bcs $01123e			bcs 	_FUPNoChange
.011233	38		sec				sec 								; shift case
.011234	e9 20 00	sbc #$0020			sbc 	#32
.011237	e2 20		sep #$20			sep 	#$20 						; write back
.011239	99 00 00	sta $0000,y			sta 	$0000,y
.01123c	c2 20		rep #$20			rep 	#$20
.01123e					_FUPNoChange:
.01123e	ca		dex				dex 								; do X times
.01123f	d0 e1		bne $011222			bne 	_FUPLoop
.011241					_FUPExit:
.011241	fa		plx				plx 								; restore X
.011242	60		rts				rts
.011243					Function_LOWER:
.011243	20 3b 06	jsr $01063b			jsr 	ResetTypeString 			; returns a string.
.011246	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011249	48		pha				pha
.01124a	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; close call.
.01124d	20 52 07	jsr $010752			jsr		StringTempAllocate 			; allocate memory for it
.011250	68		pla				pla
.011251	20 8c 07	jsr $01078c			jsr 	StringCreateCopy 			; create a copy of it.
.011254	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011256	95 00		sta $00,x			sta 	EXSValueL+0,x
.011258	a8		tay				tay 								; address in Y
.011259	74 20		stz $20,x			stz 	EXSValueH+0,x
.01125b	da		phx				phx 								; save X
.01125c	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01125e	29 ff 00	and #$00ff			and 	#$00FF
.011261	f0 20		beq $011283			beq 	_FLOExit
.011263	aa		tax				tax 								; put in X
.011264					_FLOLoop:
.011264	c8		iny				iny 								; increment and load character
.011265	b9 00 00	lda $0000,y			lda 	$0000,y
.011268	29 ff 00	and #$00ff			and 	#$00FF
.01126b	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01126e	90 10		bcc $011280			bcc 	_FLONoChange
.011270	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011273	b0 0b		bcs $011280			bcs 	_FLONoChange
.011275	18		clc				clc 								; shift case
.011276	69 20 00	adc #$0020			adc 	#32
.011279	e2 20		sep #$20			sep 	#$20 						; write back
.01127b	99 00 00	sta $0000,y			sta 	$0000,y
.01127e	c2 20		rep #$20			rep 	#$20
.011280					_FLONoChange:
.011280	ca		dex				dex 								; do X times
.011281	d0 e1		bne $011264			bne 	_FLOLoop
.011283					_FLOExit:
.011283	fa		plx				plx 								; restore X
.011284	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011285					Function_Let:
.011285	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011287	48		pha				pha  								; save on stack for later.
.011288	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; find the variable
.01128b	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01128d	b0 1c		bcs $0112ab			bcs 	_FLetFound 					; skip if found.
.01128f	68		pla				pla 								; get and push the first token again.
.011290	48		pha				pha
.011291	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011294	d0 60		bne $0112f6			bne 	_FLError					; arrays, so this causes an error.
.011296	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011298	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.01129b	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.01129e	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0112a0					_FLSkipToken:
.0112a0	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0112a2	e6 06		inc $06				inc 	DCodePtr
.0112a4	e6 06		inc $06				inc 	DCodePtr
.0112a6	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0112a9	d0 f5		bne $0112a0			bne 	_FLSkipToken
.0112ab					_FLetFound:
.0112ab	68		pla				pla 								; get and save the first token.
.0112ac	48		pha				pha
.0112ad	a8		tay				tay 								; put it in Y
.0112ae	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0112b1	f0 07		beq $0112ba			beq 	_FLetNotArray
.0112b3	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0112b5	20 19 04	jsr $010419			jsr 	VariableSubscript			; index calculation
.0112b8	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0112ba					_FLetNotArray:
.0112ba	7a		ply				ply 								; get the first token into Y
.0112bb	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0112bd	48		pha				pha
.0112be	5a		phy				phy 								; save the first token on the stack.
.0112bf	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0112c2	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112c4	d0 23		bne $0112e9			bne 	_FLetMissingEquals
.0112c6	e6 06		inc $06				inc 	DCodePtr
.0112c8	e6 06		inc $06				inc 	DCodePtr
.0112ca	68		pla				pla 								; restore the first token.
.0112cb	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112ce	d0 0f		bne $0112df			bne 	_FLetString 				; skip if string.
.0112d0	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.0112d3	7a		ply				ply 								; get address in Y
.0112d4	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112d6	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112d9	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112db	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112de	60		rts				rts
.0112df					_FLetString:
.0112df	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112e2	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112e4	7a		ply				ply 								; get address we are overwriting.
.0112e5	20 8e 06	jsr $01068e			jsr 	StringReassign 				; reassign that address
.0112e8	60		rts				rts
.0112e9					_FLetMissingEquals:
.0112e9	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0112ec	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112f4	3d 00
.0112f6					_FLError:
.0112f6	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0112f9	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011301	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.011309					Function_PROC:
.011309	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.01130c	18		clc				clc
.01130d	65 02		adc $02				adc 	DBaseAddress
.01130f	aa		tax				tax 								; X is used to track it
.011310					_FPROLoop:
.011310	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.011313	f0 56		beq $01136b			beq 	_FPROUnknown
.011315	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.011318	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.01131b	f0 08		beq $011325			beq 	_FPROFoundDefProc
.01131d					_FPRONext:
.01131d	8a		txa				txa 								; follow the link.
.01131e	18		clc				clc
.01131f	7d 00 00	adc $0000,x			adc 	@w$0000,x
.011322	aa		tax				tax
.011323	80 eb		bra $011310			bra 	_FPROLoop
.011325					_FPROFoundDefProc:
.011325	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.011328	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01132a	d0 f1		bne $01131d			bne 	_FPRONext
.01132c	8a		txa				txa 								; DTemp1 points to the token.
.01132d	18		clc				clc
.01132e	69 06 00	adc #$0006			adc 	#6
.011331	85 08		sta $08				sta 	DTemp1
.011333	a0 00 00	ldy #$0000			ldy 	#0
.011336					_FPROCompare:
.011336	b1 08		lda ($08),y			lda 	(DTemp1),y
.011338	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01133a	d0 e1		bne $01131d			bne 	_FPRONext 					; fails, different
.01133c	c8		iny				iny
.01133d	c8		iny				iny
.01133e	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011341	d0 f3		bne $011336			bne 	_FPROCompare
.011343	98		tya				tya 								; this is the offset to the next element
.011344	18		clc				clc
.011345	65 08		adc $08				adc 	DTemp1
.011347	48		pha				pha 								; push the next command on the stack
.011348	da		phx				phx 								; push the record address on the stack.
.011349	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01134b	98		tya				tya 								; work out the return address
.01134c	18		clc				clc
.01134d	65 06		adc $06				adc 	DCodePtr
.01134f	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011351	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011353	95 04		sta $04,x			sta 	$04,x
.011355	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011358	95 06		sta $06,x			sta 	$06,x
.01135a	8a		txa				txa 								; advance stack by 6.
.01135b	18		clc				clc
.01135c	69 06 00	adc #$0006			adc 	#6
.01135f	85 2a		sta $2a				sta 	DStack
.011361	7a		ply				ply 								; line record address
.011362	b9 02 00	lda $0002,y			lda 	$0002,y 					; get line number
.011365	85 22		sta $22				sta 	DLineNumber
.011367	68		pla				pla 								; next command
.011368	85 06		sta $06				sta 	DCodePtr
.01136a	60		rts				rts
.01136b					_FPROUnknown:
.01136b	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01136e	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011376	70 72 6f 63 65 64 75 72 65 00
.011380					Function_ENDPROC:
.011380	a6 2a		ldx $2a				ldx 	DStack						; what's on the top of the stack.
.011382	b5 00		lda $00,x			lda 	$00,x
.011384	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if local unstack a local
.011387	b0 2e		bcs $0113b7			bcs 	_FENPUnstack
.011389	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.01138c	d0 11		bne $01139f			bne 	_FENPFail
.01138e	8a		txa				txa 								; unpick stack.
.01138f	38		sec				sec
.011390	e9 06 00	sbc #$0006			sbc 	#6
.011393	85 2a		sta $2a				sta 	DStack
.011395	aa		tax				tax
.011396	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011398	85 06		sta $06				sta 	DCodePtr
.01139a	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01139c	85 22		sta $22				sta 	DLineNumber
.01139e	60		rts				rts
.01139f					_FENPFail:
.01139f	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0113a2	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>0113aa	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.0113b7					_FENPUnstack:
.0113b7	20 58 14	jsr $011458			jsr 	LocalRestore 				; restore off the stack.
.0113ba	80 c4		bra $011380			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.0113bc					Command_LOCAL:
.0113bc	20 e6 13	jsr $0113e6			jsr 	LocalProcessVariable 		; make one variable 'local'
.0113bf	90 0e		bcc $0113cf			bcc 	_CLOFail
.0113c1	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.0113c3	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113c6	d0 06		bne $0113ce			bne 	_CLOExit
.0113c8	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113ca	e6 06		inc $06				inc 	DCodePtr
.0113cc	80 ee		bra $0113bc			bra 	Command_Local
.0113ce					_CLOExit:
.0113ce	60		rts				rts
.0113cf					_CLOFail:
.0113cf	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0113d2	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113da	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113e6					LocalProcessVariable:
.0113e6	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113e8	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113eb	90 56		bcc $011443			bcc 	_LPVFail
.0113ed	29 00 10	and #$1000			and 	#IDArrayMask
.0113f0	d0 51		bne $011443			bne 	_LPVFail
.0113f2	b2 06		lda ($06)			lda 	(DCodePtr) 					; save the type on the stack.
.0113f4	48		pha				pha
.0113f5	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find the variable
.0113f8	b0 13		bcs $01140d			bcs 	_LPVFound 					; if found, A points to the data.
.0113fa	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0113fc	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.0113ff	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.011402					_LPVSkipToken:
.011402	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011404	e6 06		inc $06				inc 	DCodePtr
.011406	e6 06		inc $06				inc 	DCodePtr
.011408	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01140b	d0 f5		bne $011402			bne 	_LPVSkipToken
.01140d					_LPVFound:
.01140d	a8		tay				tay 								; address in Y
.01140e	a6 2a		ldx $2a				ldx 	DStack 						; stack pointer in X
.011410	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.011412	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.011415	95 04		sta $04,x			sta 	$04,x
.011417	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.01141a	95 06		sta $06,x			sta 	$06,x
.01141c	a9 00 00	lda #$0000			lda 	#$0000 						; clear the old value
.01141f	99 00 00	sta $0000,y			sta 	$0000,y
.011422	99 02 00	sta $0002,y			sta 	$0002,y
.011425	68		pla				pla
.011426	29 00 e0	and #$e000			and 	#$C000+IDTypeMask 			; $C000 if number, $E000 if string.
.011429	95 08		sta $08,x			sta 	$08,x						; save offset 6
.01142b	c9 00 c0	cmp #$c000			cmp 	#$C000
.01142e	f0 09		beq $011439			beq 	_LPVNotString
.011430	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.011433	18		clc				clc 								; which is guaranteed by have a 0 length.
.011434	65 02		adc $02				adc 	DBaseAddress
.011436	99 00 00	sta $0000,y			sta 	$0000,y 					; make it an empty string.
.011439					_LPVNotString:
.011439	8a		txa				txa
.01143a	18		clc				clc
.01143b	69 08 00	adc #$0008			adc 	#8
.01143e	85 2a		sta $2a				sta 	DStack
.011440	38		sec				sec
.011441	98		tya				tya 								; return the data address.
.011442	60		rts				rts
.011443					_LPVFail:
.011443	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011446	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Command",$00 								; with this message
>01144e	6c 20 43 6f 6d 6d 61 6e 64 00
.011458					LocalRestore:
.011458	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.01145a	38		sec				sec
.01145b	e9 08 00	sbc #$0008			sbc 	#8
.01145e	85 2a		sta $2a				sta 	DStack
.011460	aa		tax				tax
.011461	b5 08		lda $08,x			lda 	$08,x 						; look at type.
.011463	c9 00 c0	cmp #$c000			cmp 	#$C000
.011466	f0 09		beq $011471			beq 	_LRRestore					; skip if number.
.011468	b5 02		lda $02,x			lda 	$02,x 						; release the string that was there if any.
.01146a	a8		tay				tay
.01146b	b9 00 00	lda $0000,y			lda 	$0000,y
.01146e	20 3c 07	jsr $01073c			jsr 	StringRelease
.011471					_LRRestore:
.011471	b5 02		lda $02,x			lda 	$02,x 						; restore a string.
.011473	a8		tay				tay
.011474	b5 04		lda $04,x			lda 	$04,x
.011476	99 00 00	sta $0000,y			sta 	$0000,y
.011479	b5 06		lda $06,x			lda 	$06,x
.01147b	99 02 00	sta $0002,y			sta 	$0002,y
.01147e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.01147f					Command_List:
.01147f	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011482	20 52 07	jsr $010752		jsr 	StringTempAllocate
.011485	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011487	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011489	64 2e		stz $2e			stz 	DIndent2
.01148b	64 32		stz $32			stz 	DTemp4+0 						; low number
.01148d	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011490	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011492	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011494	f0 3b		beq $0114d1		beq 	_CLIList
.011496	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011499	f0 36		beq $0114d1		beq 	_CLIList
.01149b	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01149e	f0 13		beq $0114b3		beq 	_CLIComma
.0114a0	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.0114a3	c0 00 00	cpy #$0000		cpy 	#0
.0114a6	d0 21		bne $0114c9		bne 	_CLIError
.0114a8	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0114aa	85 34		sta $34			sta 	DTemp4+2
.0114ac	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.0114ae	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.0114b1	d0 1e		bne $0114d1		bne 	_CLIList
.0114b3					_CLIComma:
.0114b3	20 0a 06	jsr $01060a		jsr 	ExpectComma 					; skip comma
.0114b6	b2 06		lda ($06)		lda 	(DCodePtr)
.0114b8	f0 12		beq $0114cc		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.0114ba	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.0114bd	f0 0d		beq $0114cc		beq 	_CLIToEnd
.0114bf	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.0114c2	85 34		sta $34			sta 	DTemp4+2
.0114c4	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0114c7	f0 08		beq $0114d1		beq 	_CLIList
.0114c9					_CLIError:
.0114c9	82 0b f1	brl $0105d7		brl 	SyntaxError
.0114cc					_CLIToEnd:
.0114cc	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0114cf	85 34		sta $34			sta 	DTemp4+2
.0114d1					_CLIList:
.0114d1	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.0114d4	18		clc			clc
.0114d5	65 02		adc $02			adc 	DBaseAddress
.0114d7	a8		tay			tay 									; put in Y
.0114d8					_CLINextLine:
.0114d8	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0114db	f0 29		beq $011506		beq 	_CLIExit
.0114dd	20 6e 16	jsr $01166e		jsr 	ScanIndent  					; scan for formatting.
.0114e0	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0114e3	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0114e5	90 14		bcc $0114fb		bcc 	_CLIFollowLink
.0114e7	c5 34		cmp $34			cmp 	DTemp4+2
.0114e9	f0 02		beq $0114ed		beq 	_CLIShowLine
.0114eb	b0 0e		bcs $0114fb		bcs 	_CLIFollowLink
.0114ed					_CLIShowLine:
.0114ed	a5 30		lda $30			lda 	DListBuffer
.0114ef	20 09 15	jsr $011509		jsr 	Detokenise 						; detokenise it
.0114f2	5a		phy			phy
.0114f3	a8		tay			tay 									; print buffer out
.0114f4	20 61 06	jsr $010661		jsr 	PrintBasicString
.0114f7	20 b3 1d	jsr $011db3		jsr 	HWNewLine
.0114fa	7a		ply			ply 									; get address
.0114fb					_CLIFollowLink:
.0114fb	98		tya			tya 									; follow link
.0114fc	18		clc			clc
.0114fd	79 00 00	adc $0000,y		adc 	$0000,y
.011500	a8		tay			tay
.011501	20 cf 1d	jsr $011dcf		jsr 	HWCheckBreak 					; break key pressed.
.011504	f0 d2		beq $0114d8		beq 	_CLINextLine
.011506					_CLIExit:
.011506	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.011508	60		rts			rts
.011509					Detokenise:
.011509	48		pha			pha
.01150a	da		phx			phx
.01150b	5a		phy			phy
.01150c	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.01150e	1a		inc a			inc 	a
.01150f	85 1a		sta $1a			sta 	DCurrentTempString
.011511	64 1c		stz $1c			stz		DConstantShift
.011513	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011516	92 18		sta ($18)		sta 	(DStartTempString)
.011518	5a		phy			phy 									; save Y
.011519	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01151c	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.01151f	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011522	20 fd 10	jsr $0110fd		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011525	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.011527	c5 2e		cmp $2e			cmp 	DIndent2
.011529	90 02		bcc $01152d		bcc 	_DTKSmaller
.01152b	a5 2e		lda $2e			lda 	DIndent2
.01152d					_DTKSmaller:
.01152d	0a		asl a			asl 	a
.01152e	69 06 00	adc #$0006		adc 	#6
.011531	85 08		sta $08			sta 	DTemp1
.011533					_DTKPadLineNo:
.011533	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011536	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.011539	b2 18		lda ($18)		lda 	(DStartTempString)
.01153b	29 ff 00	and #$00ff		and 	#$00FF
.01153e	c5 08		cmp $08			cmp 	DTemp1
.011540	d0 f1		bne $011533		bne 	_DTKPadLineNo
.011542	68		pla			pla 									; get pointer
.011543	18		clc			clc 									; point to start of line
.011544	69 04 00	adc #$0004		adc 	#4
.011547	a8		tay			tay 									; put back in Y.
.011548					_DTKMainLoop:
.011548	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.01154b	d0 04		bne $011551		bne 	_DTKNotZero 					; if zero, return.
.01154d	7a		ply			ply
.01154e	fa		plx			plx
.01154f	68		pla			pla
.011550	60		rts			rts
.011551					_DTKNotZero:
.011551	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011554	b0 1c		bcs $011572		bcs 	_DTKNotString
.011556	5a		phy			phy										; save token address on stack.
.011557	c8		iny			iny 									; skip first token
.011558	c8		iny			iny
.011559	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01155c	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.01155f	98		tya			tya 									; copy the string out.
.011560	20 8c 07	jsr $01078c		jsr 	StringCreateCopy
.011563	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011566	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.011569	68		pla			pla 									; get token, which is its own offset
.01156a	a8		tay			tay
.01156b	18		clc			clc
.01156c	79 00 00	adc $0000,y		adc 	$0000,y
.01156f	a8		tay			tay
.011570	80 d6		bra $011548		bra 	_DTKMainLoop
.011572					_DTKNotString:
.011572	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011575	b0 09		bcs $011580		bcs 	_DTKNotShift
.011577	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.01157a	85 1c		sta $1c			sta 	DConstantShift
.01157c	c8		iny			iny 									; skip token.
.01157d	c8		iny			iny
.01157e	80 c8		bra $011548		bra 	_DTKMainLoop
.011580					_DTKNotShift:
.011580	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011583	b0 07		bcs $01158c		bcs 	_DTKNotKeyword
.011585	c8		iny			iny 									; skip over token
.011586	c8		iny			iny
.011587	20 06 16	jsr $011606		jsr 	_DTKDecodeKeyword 				; decode it.
.01158a	80 bc		bra $011548		bra 	_DTKMainLoop
.01158c					_DTKNotKeyword:
.01158c	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01158f	b0 18		bcs $0115a9		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011591	5a		phy			phy 									; save pointer
.011592	38		sec			sec  									; shift it in the range 0-32767
.011593	e9 00 40	sbc #$4000		sbc 	#$4000
.011596	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011597	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011599	6a		ror a			ror 	a 								; rotate that into the constant value
.01159a	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01159c	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01159f	20 fd 10	jsr $0110fd		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0115a2	64 1c		stz $1c			stz 	DConstantShift
.0115a4	7a		ply			ply 									; restore pointer
.0115a5	c8		iny			iny 									; skip token.
.0115a6	c8		iny			iny
.0115a7	80 9f		bra $011548		bra 	_DTKMainLoop
.0115a9					_DTKIdentifier:
.0115a9	48		pha			pha 									; save token for typing at end
.0115aa					_DTKILoop:
.0115aa	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0115ad	20 d6 15	jsr $0115d6		jsr 	_DTKIDecodeToken 				; decode it.
.0115b0	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0115b3	c8		iny			iny 									; skip it
.0115b4	c8		iny			iny
.0115b5	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0115b8	d0 f0		bne $0115aa		bne 	_DTKILoop
.0115ba	68		pla			pla 									; add $( as required.
.0115bb	48		pha			pha 									; comes from the first token.
.0115bc	29 00 20	and #$2000		and 	#IDTypeMask
.0115bf	f0 06		beq $0115c7		beq 	_DTKINotString
.0115c1	a9 24 00	lda #$0024		lda 	#"$"
.0115c4	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.0115c7					_DTKINotString:
.0115c7	68		pla			pla
.0115c8	29 00 10	and #$1000		and 	#IDArrayMask
.0115cb	f0 06		beq $0115d3		beq 	_DTKINotArray
.0115cd	a9 28 00	lda #$0028		lda 	#"("
.0115d0	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.0115d3					_DTKINotArray:
.0115d3	82 72 ff	brl $011548		brl 	_DTKMainLoop
.0115d6					_DTKIDecodeToken:
.0115d6	5a		phy			phy
.0115d7	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0115da	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0115dd					_DTKIDivide:
.0115dd	38		sec			sec
.0115de	e9 2d 00	sbc #$002d		sbc 	#45
.0115e1	c8		iny			iny
.0115e2	b0 f9		bcs $0115dd		bcs 	_DTKIDivide
.0115e4	69 2d 00	adc #$002d		adc 	#45
.0115e7	20 f0 15	jsr $0115f0		jsr 	_DTKIOutA 						; output low.
.0115ea	98		tya			tya
.0115eb	20 f0 15	jsr $0115f0		jsr 	_DTKIOutA 						; output high
.0115ee	7a		ply			ply
.0115ef	60		rts			rts
.0115f0					_DTKIOutA:
.0115f0	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115f3	f0 10		beq $011605		beq 	_DTKIOutExit
.0115f5	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115f8	90 04		bcc $0115fe		bcc 	_DTKIOutAlpha
.0115fa	38		sec			sec  									; adjust for 0-9
.0115fb	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115fe					_DTKIOutAlpha:
.0115fe	18		clc			clc										; adjust for A-Z
.0115ff	69 60 00	adc #$0060		adc 	#96
.011602	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.011605					_DTKIOutExit:
.011605	60		rts			rts
.011606					_DTKDecodeKeyword:
.011606	48		pha			pha
.011607	da		phx			phx
.011608	5a		phy			phy
.011609	a8		tay			tay 									; save token ID in Y
.01160a	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.01160d	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011610	48		pha			pha 									; save this flag on a stack
.011611	5a		phy			phy 									; save the token ID
.011612	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011615	d0 19		bne $011630		bne 	_DTKNotSpecial1
.011617	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.011619	88		dey			dey
.01161a	b9 00 00	lda $0000,y		lda 	$0000,y
.01161d	29 ff 00	and #$00ff		and 	#$00FF
.011620	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011623	f0 0b		beq $011630		beq 	_DTKNotSpecial1
.011625	c9 3a 00	cmp #$003a		cmp 	#":"
.011628	f0 06		beq $011630		beq 	_DTKNotSpecial1
.01162a	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.01162d	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.011630					_DTKNotSpecial1:
.011630	68		pla			pla
.011631	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011634	a8		tay			tay 									; into Y.
.011635	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.011638					_DTKDWorkThrough:
.011638	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.011639	f0 0f		beq $01164a		beq 	_DTKDFound
.01163b	86 08		stx $08			stx 	DTemp1
.01163d	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.011641	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011644	18		clc			clc
.011645	65 08		adc $08			adc 	DTemp1
.011647	aa		tax			tax
.011648	80 ee		bra $011638		bra 	_DTKDWorkThrough
.01164a					_DTKDFound:
.01164a	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.01164e	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011651	3a		dec a			dec 	a
.011652	a8		tay			tay 									; put in Y
.011653					_DTKOut:
.011653	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.011657	29 ff 00	and #$00ff		and 	#$00FF
.01165a					_DTKNotLC:
.01165a	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.01165d	e8		inx			inx
.01165e	88		dey			dey
.01165f	d0 f2		bne $011653		bne 	_DTKOut
.011661	68		pla			pla 									; trailing space.
.011662	d0 06		bne $01166a		bne 	_DTKNotSpecial2
.011664	a9 20 00	lda #$0020		lda 	#" "
.011667	20 7e 07	jsr $01077e		jsr 	StringWriteCharacter
.01166a					_DTKNotSpecial2:
.01166a	7a		ply			ply
.01166b	fa		plx			plx
.01166c	68		pla			pla
.01166d	60		rts			rts
.01166e					ScanIndent:
.01166e	48		pha			pha
.01166f	5a		phy			phy
.011670	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011672	85 2e		sta $2e			sta 	DIndent2
.011674	98		tya			tya
.011675	18		clc			clc 									; point to code.
.011676	69 04 00	adc #$0004		adc 	#4
.011679	a8		tay			tay
.01167a					_SILoop:
.01167a	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01167d	f0 35		beq $0116b4		beq 	_SIExit
.01167f	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011682	b0 08		bcs $01168c		bcs 	_SICheckKeyword
.011684	98		tya			tya 									; skip string.
.011685	18		clc			clc
.011686	79 00 00	adc $0000,y		adc 	$0000,y
.011689	a8		tay			tay
.01168a	80 ee		bra $01167a		bra 	_SILoop
.01168c					_SICheckKeyword:
.01168c	29 00 e0	and #$e000		and 	#$E000
.01168f	c9 00 20	cmp #$2000		cmp 	#$2000
.011692	f0 04		beq $011698		beq 	_SIFoundKeyword
.011694					_SIAdvance:
.011694	c8		iny			iny 									; if not, loop round.
.011695	c8		iny			iny
.011696	80 e2		bra $01167a		bra 	_SILoop
.011698					_SIFoundKeyword:
.011698	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01169b	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01169e	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0116a1	f0 0d		beq $0116b0		beq 	_SIKeyPlus
.0116a3	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0116a6	d0 ec		bne $011694		bne 	_SIAdvance
.0116a8	c6 2c		dec $2c			dec 	DIndent
.0116aa	10 e8		bpl $011694		bpl 	_SIAdvance
.0116ac	64 2c		stz $2c			stz 	DIndent
.0116ae	80 e4		bra $011694		bra 	_SIAdvance
.0116b0					_SIKeyPlus:
.0116b0	e6 2c		inc $2c			inc 	DIndent
.0116b2	80 e0		bra $011694		bra 	_SIAdvance
.0116b4					_SIExit:
.0116b4	7a		ply			ply
.0116b5	68		pla			pla
.0116b6	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.0116b7					Function_PRINT:
.0116b7	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0116b9	f0 33		beq $0116ee			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0116bb	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.0116be	f0 2e		beq $0116ee			beq 	_FPRExitCR
.0116c0	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.0116c3	f0 23		beq $0116e8			beq 	_FPRSkipLoop
.0116c5	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.0116c8	f0 1b		beq $0116e5			beq 	_FPRNewLine
.0116ca	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.0116cd	f0 11		beq $0116e0			beq 	_FPRTab
.0116cf					_FPRExpression:
.0116cf	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.0116d2	b0 06		bcs $0116da			bcs 	_FPRHaveString
.0116d4	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0116d7	20 f5 10	jsr $0110f5			jsr 	ConvertToString
.0116da					_FPRHaveString:
.0116da	a8		tay				tay 								; print the basic String.
.0116db	20 61 06	jsr $010661			jsr 	PrintBASICString
.0116de	80 d7		bra $0116b7			bra 	Function_Print 				; and go round again.
.0116e0					_FPRTab:
.0116e0	20 c8 1d	jsr $011dc8			jsr 	HWTab
.0116e3	80 03		bra $0116e8			bra 	_FPRSkipLoop
.0116e5					_FPRNewLine:
.0116e5	20 b3 1d	jsr $011db3			jsr 	HWNewLine
.0116e8					_FPRSkipLoop:
.0116e8	e6 06		inc $06				inc 	DCodePtr
.0116ea	e6 06		inc $06				inc 	DCodePtr
.0116ec	80 c9		bra $0116b7			bra 	Function_Print
.0116ee					_FPRExitCR:
.0116ee	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0116f0	88		dey				dey
.0116f1	88		dey				dey
.0116f2	b9 00 00	lda $0000,y			lda 	$0000,y
.0116f5	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116f8	f0 08		beq $011702			beq 	_FPRExit
.0116fa	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116fd	f0 03		beq $011702			beq 	_FPRExit
.0116ff	20 b3 1d	jsr $011db3			jsr 	HWNewLine 					; print a new line.
.011702					_FPRExit:
.011702	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.011703					Function_IF:
.011703	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.011706	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011708	05 08		ora $08				ora 	DTemp1
.01170a	a8		tay				tay 								; success flag in Y.
.01170b	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.01170d	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.011710	d0 32		bne $011744			bne 	_FIFExtended 				; if so, go to the extended IF.
.011712	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011714	e6 06		inc $06				inc 	DCodePtr
.011716	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.011719	f0 0f		beq $01172a			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.01171b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.01171d	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.011720	90 21		bcc $011743			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011722	c9 00 c0	cmp #$c000			cmp 	#$C000
.011725	b0 1c		bcs $011743			bcs 	_FIFContinue
.011727	4c b9 19	jmp $0119b9			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.01172a					_FIFEndOfLine:
.01172a	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.01172c	f0 15		beq $011743			beq 	_FIFContinue 				; if done so, continue.
.01172e	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.011731	90 06		bcc $011739			bcc 	_FIFStringConstant
.011733	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011735	e6 06		inc $06				inc 	DCodePtr
.011737	80 f1		bra $01172a			bra 	_FIFEndOfLine
.011739					_FIFStringConstant:
.011739	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01173c	18		clc				clc
.01173d	65 06		adc $06				adc 	DCodePtr
.01173f	85 06		sta $06				sta 	DCodePtr
.011741	80 e7		bra $01172a			bra 	_FIFEndOfLine
.011743					_FIFContinue:
.011743	60		rts				rts
.011744					_FIFExtended:
.011744	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011746	e6 2a		inc $2a				inc 	DStack
.011748	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.01174b	a6 2a		ldx $2a				ldx 	DStack
.01174d	95 00		sta $00,x			sta 	$00,x
.01174f	98		tya				tya 								; see if the test was passed.
.011750	f0 01		beq $011753			beq 	_FIXSkip 					; if zero then it has failed.
.011752	60		rts				rts 								; test passed, so continue executing
.011753					_FIXSkip:
.011753	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011756	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.011759	20 b9 17	jsr $0117b9			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01175c	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01175e	e6 06		inc $06				inc 	DCodePtr
.011760	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011763	d0 04		bne $011769			bne 	_FIXNoThrow
.011765	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011767	c6 2a		dec $2a				dec 	DStack
.011769					_FIXNoThrow:
.011769	60		rts				rts
.01176a					Handler_ELSE:
.01176a	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01176c	b5 00		lda $00,x			lda 	$00,x
.01176e	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.011771	d0 12		bne $011785			bne 	_HEBadStructure
.011773	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011776	a2 00 00	ldx #$0000			ldx 	#$0000
.011779	20 b9 17	jsr $0117b9			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01177c	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01177e	e6 06		inc $06				inc 	DCodePtr
.011780	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011782	c6 2a		dec $2a				dec 	DStack
.011784	60		rts				rts
.011785					_HEBadStructure:
.011785	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011788	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011790	68 6f 75 74 20 49 66 00
.011798					Handler_ENDIF:
.011798	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01179a	b5 00		lda $00,x			lda 	$00,x
.01179c	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01179f	d0 05		bne $0117a6			bne 	_HEIBadStructure
.0117a1	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0117a3	c6 2a		dec $2a				dec 	DStack
.0117a5	60		rts				rts
.0117a6					_HEIBadStructure:
.0117a6	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0117a9	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0117b1	68 6f 75 74 20 49 66 00
.0117b9					ScanForwardLevel:
.0117b9	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0117bb	86 0a		stx $0a				stx 	DTemp1+2
.0117bd	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.0117bf	85 0c		sta $0c				sta 	DTemp2
.0117c1	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0117c4					_SFLLoop:
.0117c4	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0117c7	d0 0d		bne $0117d6			bne 	_SFLNoCheck 				; we're in a substructure.
.0117c9	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0117cb	f0 09		beq $0117d6			beq 	_SFLNoCheck 				; don't check zero
.0117cd	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0117cf	f0 04		beq $0117d5			beq 	_SFLFound
.0117d1	c5 0a		cmp $0a				cmp 	DTemp1+2
.0117d3	d0 01		bne $0117d6			bne 	_SFLNoCheck
.0117d5					_SFLFound:
.0117d5	60		rts				rts
.0117d6					_SFLNoCheck:
.0117d6	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0117d8	f0 4f		beq $011829			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0117da	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0117dd	90 40		bcc $01181f			bcc 	_SFLSkipString 				; then handle that.
.0117df	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0117e1	e6 06		inc $06				inc 	DCodePtr
.0117e3	a8		tay				tay 								; put token in Y temporarily.
.0117e4	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0117e7	c9 00 20	cmp #$2000			cmp 	#$2000
.0117ea	d0 d8		bne $0117c4			bne 	_SFLLoop
.0117ec	98		tya				tya 								; get the token back.
.0117ed	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0117f0	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117f3	f0 cf		beq $0117c4			beq 	_SFLLoop
.0117f5	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117f8	90 ca		bcc $0117c4			bcc 	_SFLLoop
.0117fa	e8		inx				inx 								; increment the level.
.0117fb	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117fe	f0 c4		beq $0117c4			beq 	_SFLLoop
.011800	ca		dex				dex 								; decrement the level
.011801	ca		dex				dex 								; one overdoes the previous inx.
.011802	10 c0		bpl $0117c4			bpl 	_SFLLoop 					; if gone -ve then error.
.011804					_SFLError:
.011804	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011806	85 22		sta $22				sta 	DLineNumber
.011808	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>01180b	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011813	65 20 69 6d 62 61 6c 61 6e 63 65 00
.01181f					_SFLSkipString:
.01181f	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011822	18		clc				clc
.011823	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011825	85 06		sta $06				sta 	DCodePtr
.011827	80 9b		bra $0117c4			bra 	_SFLLoop 					; go round again.
.011829					_SFLNextLine:
.011829	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.01182b	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.01182e	f0 d4		beq $011804			beq 	_SFLError 					; if zero, then there's no more code to search.
.011830	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011833	85 22		sta $22				sta 	DLineNumber
.011835	18		clc				clc
.011836	a5 06		lda $06				lda 	DCodePtr
.011838	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.01183b	85 06		sta $06				sta 	DCodePtr
.01183d	80 85		bra $0117c4			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.01183f					Command_FOR:
.01183f	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.011841	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011844	d0 60		bne $0118a6			bne		_CFOBad
.011846	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find variable
.011849	b0 15		bcs $011860			bcs 	_CFOExists
.01184b	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01184d	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011850	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create it.
.011853	48		pha				pha 								; save on stack
.011854					_CFOSkipToken:
.011854	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011856	e6 06		inc $06				inc 	DCodePtr
.011858	e6 06		inc $06				inc 	DCodePtr
.01185a	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01185d	d0 f5		bne $011854			bne 	_CFOSkipToken
.01185f	68		pla				pla 								; restore address
.011860					_CFOExists:
.011860	48		pha				pha 								; push variable address on stack
.011861	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011864	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.011867	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.01186a	bb		tyx				tyx 								; put high value in X
.01186b	7a		ply				ply 								; address in Y
.01186c	99 00 00	sta $0000,y			sta 	$0000,y
.01186f	8a		txa				txa
.011870	99 02 00	sta $0002,y			sta 	$0002,y
.011873	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011876	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.011879	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01187b	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01187d	95 02		sta $02,x			sta 	$02,x
.01187f	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011881	95 04		sta $04,x			sta 	$04,x
.011883	98		tya				tya 								; save variable address at +6
.011884	95 06		sta $06,x			sta 	$06,x
.011886	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.011889	95 08		sta $08,x			sta 	$08,x
.01188b	8a		txa				txa 								; add 8 to stack position
.01188c	18		clc				clc
.01188d	69 08 00	adc #$0008			adc 	#8
.011890	85 2a		sta $2a				sta 	DStack
.011892	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011895	b2 06		lda ($06)			lda 	(DCodePtr)
.011897	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.01189a	d0 09		bne $0118a5			bne 	_CFONoStep
.01189c	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01189f	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.0118a2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.0118a5					_CFONoStep:
.0118a5	60		rts				rts
.0118a6					_CFOBad:
.0118a6	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0118a9	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0118b1	76 61 72 69 61 62 6c 65 00
.0118ba					Command_NEXT:
.0118ba	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.0118bc	b5 00		lda $00,x			lda 	$00,x
.0118be	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.0118c1	f0 14		beq $0118d7			beq 	_CNXOk
.0118c3	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0118c6	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0118ce	68 6f 75 74 20 46 6f 72 00
.0118d7					_CNXOk:
.0118d7	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0118d9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0118dc	90 22		bcc $011900			bcc 	_CNXNoVariable
.0118de	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; get address of variable.
.0118e1	90 08		bcc $0118eb			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0118e3	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0118e5	ca		dex				dex
.0118e6	ca		dex				dex
.0118e7	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0118e9	f0 15		beq $011900			beq 	_CNXNoVariable 				; then continue
.0118eb					_CNXNextVar:
.0118eb	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0118ee	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118f6	20 76 61 72 69 61 62 6c 65 00
.011900					_CNXNoVariable:
.011900	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011902	48		pha				pha
.011903	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011905	38		sec				sec
.011906	e9 08 00	sbc #$0008			sbc 	#8
.011909	85 2a		sta $2a				sta 	DStack
.01190b	aa		tax				tax 								; X points to the stack.
.01190c	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01190e	85 06		sta $06				sta 	DCodePtr
.011910	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.011913	5a		phy				phy 								; save the target on the stack
.011914	48		pha				pha
.011915	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011918	85 08		sta $08				sta 	DTemp1
.01191a	64 0a		stz $0a				stz 	DTemp1+2
.01191c	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01191e	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.011921	d0 0b		bne $01192e			bne 	_CNXNoStep
.011923	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011925	e6 06		inc $06				inc 	DCodePtr
.011927	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.01192a	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.01192c	84 0a		sty $0a				sty 	DTemp1+2
.01192e					_CNXNoStep:
.01192e	68		pla				pla 								; save the Target in DTemp2
.01192f	85 0c		sta $0c				sta 	DTemp2
.011931	68		pla				pla
.011932	85 0e		sta $0e				sta 	DTemp2+2
.011934	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011936	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.011938	a8		tay				tay
.011939	18		clc				clc
.01193a	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.01193d	65 08		adc $08				adc 	DTemp1
.01193f	99 00 00	sta $0000,y			sta 	$0000,y
.011942	b9 02 00	lda $0002,y			lda 	$0002,y
.011945	65 0a		adc $0a				adc 	DTemp1+2
.011947	99 02 00	sta $0002,y			sta 	$0002,y
.01194a	38		sec				sec
.01194b	a5 0c		lda $0c				lda 	DTemp2
.01194d	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011950	85 0c		sta $0c				sta 	DTemp2
.011952	a5 0e		lda $0e				lda 	DTemp2+2
.011954	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011957	85 0e		sta $0e				sta 	DTemp2+2
.011959	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01195b	f0 0a		beq $011967			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01195d	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01195f	45 0a		eor $0a				eor 	DTemp1+2
.011961	10 04		bpl $011967			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011963	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011964	85 06		sta $06				sta 	DCodePtr
.011966	60		rts				rts
.011967					_CNXLoopAgain:
.011967	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011968	18		clc				clc
.011969	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01196b	aa		tax				tax
.01196c	69 08 00	adc #$0008			adc 	#8
.01196f	85 2a		sta $2a				sta 	DStack
.011971	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011973	85 22		sta $22				sta 	DLineNumber
.011975	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011976					Function_ONGOTO:
.011976	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.011979	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01197c	d0 25		bne $0119a3			bne 	_FOGoFail
.01197e	c9 00 00	cmp #$0000			cmp 	#0
.011981	f0 20		beq $0119a3			beq 	_FOGoFail 					; we start with index = 1
.011983	48		pha				pha 								; save count on stack
.011984	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011987	20 e7 05	jsr $0105e7			jsr 	ExpectToken
.01198a	fa		plx				plx 								; put count in X.
.01198b					_FOGoLoop:
.01198b	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01198d	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011990	90 73		bcc $011a05			bcc 	FGOFail 					; if not, then we have an error.
.011992	c9 00 c0	cmp #$c000			cmp 	#$C000
.011995	b0 6e		bcs $011a05			bcs 	FGOFail
.011997	ca		dex				dex 								; subtract one, if done, call GOTO code
.011998	f0 1f		beq $0119b9			beq 	Function_GOTO
.01199a	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01199c	e6 06		inc $06				inc 	DCodePtr
.01199e	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; expect a comma
.0119a1	80 e8		bra $01198b			bra 	_FOGoLoop 					; and loop round.
.0119a3					_FOGoFail:
.0119a3	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0119a6	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0119ae	47 6f 74 6f 20 76 61 6c 75 65 00
.0119b9					Function_GOTO:
.0119b9	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0119bb	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0119be	90 45		bcc $011a05			bcc 	FGOFail 					; we don't do calculate line numbers.
.0119c0	c9 00 c0	cmp #$c000			cmp 	#$C000
.0119c3	b0 40		bcs $011a05			bcs 	FGOFail
.0119c5	38		sec				sec 								; convert to 0-32767
.0119c6	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0119c9	aa		tax				tax
.0119ca	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.0119cd	18		clc				clc
.0119ce	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0119d0	a8		tay				tay
.0119d1					_FGOSearch:
.0119d1	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0119d4	f0 18		beq $0119ee			beq 	_FGOUnknown
.0119d6	8a		txa				txa 								; does it match line number ?
.0119d7	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0119da	f0 08		beq $0119e4			beq 	_FGOFound 					; yes, then found.
.0119dc	98		tya				tya 								; no follow the link
.0119dd	18		clc				clc
.0119de	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0119e1	a8		tay				tay
.0119e2	80 ed		bra $0119d1			bra 	_FGOSearch 					; and keep looking
.0119e4					_FGOFound:
.0119e4	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0119e6	98		tya				tya 								; Y + 4 is the code pointer.
.0119e7	18		clc				clc 								; (skipping link and line #)
.0119e8	69 04 00	adc #$0004			adc 	#4
.0119eb	85 06		sta $06				sta 	DCodePtr
.0119ed	60		rts				rts									; and continue
.0119ee					_FGOUnknown:
.0119ee	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>0119f1	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119f9	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011a05					FGOFail:
.011a05	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011a08	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011a10	20 4e 75 6d 62 65 72 00
.011a18					Function_GOSUB:
.011a18	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a1a	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011a1c	18		clc				clc
.011a1d	69 02 00	adc #$0002			adc 	#2
.011a20	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a22	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a24	95 04		sta $04,x			sta 	$04,x
.011a26	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.011a29	95 06		sta $06,x			sta 	$06,x
.011a2b	8a		txa				txa 								; advance stack by 6.
.011a2c	18		clc				clc
.011a2d	69 06 00	adc #$0006			adc 	#6
.011a30	85 2a		sta $2a				sta 	DStack
.011a32	80 85		bra $0119b9			bra 	Function_GOTO 				; and do a GOTO.
.011a34					Function_RETURN:
.011a34	a6 2a		ldx $2a				ldx 	DStack
.011a36	b5 00		lda $00,x			lda 	$00,x
.011a38	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011a3b	d0 11		bne $011a4e			bne 	_FRetFail
.011a3d	8a		txa				txa 								; unpick stack.
.011a3e	38		sec				sec
.011a3f	e9 06 00	sbc #$0006			sbc 	#6
.011a42	85 2a		sta $2a				sta 	DStack
.011a44	aa		tax				tax
.011a45	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a47	85 06		sta $06				sta 	DCodePtr
.011a49	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a4b	85 22		sta $22				sta 	DLineNumber
.011a4d	60		rts				rts
.011a4e					_FRetFail:
.011a4e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011a51	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a59	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011a66					Function_REPEAT:
.011a66	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a68	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a6a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a6c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a6e	95 04		sta $04,x			sta 	$04,x
.011a70	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011a73	95 06		sta $06,x			sta 	$06,x
.011a75	8a		txa				txa 								; advance stack by 6.
.011a76	18		clc				clc
.011a77	69 06 00	adc #$0006			adc 	#6
.011a7a	85 2a		sta $2a				sta 	DStack
.011a7c	60		rts				rts
.011a7d					Function_UNTIL:
.011a7d	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a7f	b5 00		lda $00,x			lda 	$00,x
.011a81	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a84	d0 26		bne $011aac			bne 	_FUNFail
.011a86	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a89	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a8c	d0 15		bne $011aa3			bne 	_FUNExit
.011a8e	c9 00 00	cmp #$0000			cmp 	#0
.011a91	d0 10		bne $011aa3			bne 	_FUNExit
.011a93	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a95	38		sec				sec
.011a96	e9 06 00	sbc #$0006			sbc 	#6
.011a99	aa		tax				tax
.011a9a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a9c	85 06		sta $06				sta 	DCodePtr
.011a9e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011aa0	85 22		sta $22				sta 	DLineNumber
.011aa2	60		rts				rts
.011aa3					_FUNExit:
.011aa3	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011aa5	38		sec				sec
.011aa6	e9 06 00	sbc #$0006			sbc 	#6
.011aa9	85 2a		sta $2a				sta 	DStack
.011aab	60		rts				rts
.011aac					_FUNFail:
.011aac	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011aaf	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011ab7	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011ac4					Function_WHILE:
.011ac4	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011ac6	48		pha				pha 								; save on stack
.011ac7	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011aca	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011acd	d0 14		bne $011ae3			bne 	_FWHExecute
.011acf	c9 00 00	cmp #$0000			cmp 	#0
.011ad2	d0 0f		bne $011ae3			bne 	_FWHExecute
.011ad4	68		pla				pla 								; throw away current instruction
.011ad5	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011ad8	a2 00 00	ldx #$0000			ldx 	#0
.011adb	20 b9 17	jsr $0117b9			jsr 	ScanForwardLevel 			; scan forward checking structures
.011ade	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011ae0	e6 06		inc $06				inc 	DCodePtr
.011ae2	60		rts				rts
.011ae3					_FWHExecute:
.011ae3	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011ae5	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011ae6	3a		dec a				dec 	a
.011ae7	3a		dec a				dec 	a
.011ae8	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011aea	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011aec	95 04		sta $04,x			sta 	$04,x
.011aee	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011af1	95 06		sta $06,x			sta 	$06,x
.011af3	8a		txa				txa 								; advance stack by 6.
.011af4	18		clc				clc
.011af5	69 06 00	adc #$0006			adc 	#6
.011af8	85 2a		sta $2a				sta 	DStack
.011afa	60		rts				rts
.011afb					Function_WEND:
.011afb	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011afd	b5 00		lda $00,x			lda 	$00,x
.011aff	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011b02	d0 11		bne $011b15			bne 	_FWEFail
.011b04	8a		txa				txa 								; unpick stack and always loop back.
.011b05	38		sec				sec 								; we do the check at the top.
.011b06	e9 06 00	sbc #$0006			sbc 	#6
.011b09	85 2a		sta $2a				sta 	DStack
.011b0b	aa		tax				tax
.011b0c	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011b0e	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011b10	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011b12	85 22		sta $22				sta 	DLineNumber
.011b14	60		rts				rts
.011b15					_FWEFail:
.011b15	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011b18	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011b20	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011b2b					Function_END:
.011b2b	4c b1 1e	jmp $011eb1			jmp 	WarmStart
.011b2e					Function_RUN:
.011b2e	20 b9 1b	jsr $011bb9			jsr 	Function_CLEAR 				; clear all variables.
.011b31	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011b33	18		clc				clc
.011b34	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011b37	80 0c		bra $011b45			bra 	FRun_NextLineNumber
.011b39					RUNExecuteTokenBuffer:
.011b39	64 22		stz $22				stz 	DLineNumber					; zero line number
.011b3b	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011b3e	18		clc				clc
.011b3f	65 02		adc $02				adc 	DBaseAddress
.011b41	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011b43	80 12		bra $011b57			bra 	FRun_NextInstruction
.011b45					FRun_NextLineNumber:
.011b45	a8		tay				tay 								; put in Y
.011b46	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011b49	f0 e0		beq $011b2b			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011b4b	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011b4e	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011b50	98		tya				tya 								; get address back
.011b51	18		clc				clc 								; skip over the link/line number
.011b52	69 04 00	adc #$0004			adc 	#4
.011b55	85 06		sta $06				sta 	DCodePtr
.011b57					FRun_NextInstruction:
.011b57	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b59	20 cf 1d	jsr $011dcf			jsr 	HWCheckBreak 				; break key pressed.
.011b5c	d0 40		bne $011b9e			bne 	_FRun_Break
.011b5e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b60	f0 32		beq $011b94			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b62	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b65	f0 18		beq $011b7f			beq 	_FRun_Colon
.011b67	a8		tay				tay 								; save in Y
.011b68	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b6b	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b6e	d0 15		bne $011b85			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b70	98		tya				tya 								; get token back
.011b71	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b74	0a		asl a				asl 	a 							; double it into X
.011b75	aa		tax				tax
.011b76	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b78	e6 06		inc $06				inc 	DCodePtr
.011b7a	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b7d	80 d8		bra $011b57			bra 	FRun_NextInstruction 		; do the following instruction.
.011b7f					_FRun_Colon:
.011b7f	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b81	e6 06		inc $06				inc 	DCodePtr
.011b83	80 d2		bra $011b57			bra 	FRun_NextInstruction 		; do the following instruction.
.011b85					_FRun_TryLET:
.011b85	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b87	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b8a	90 05		bcc $011b91			bcc		_FRunSyntax 				; no, must be syntax.
.011b8c	20 85 12	jsr $011285			jsr 	Function_LET 				; try as a LET.
.011b8f	80 c6		bra $011b57			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b91					_FRunSyntax:
.011b91	82 43 ea	brl $0105d7			brl 	SyntaxError
.011b94					_FRun_EndInstruction:
.011b94	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b96	f0 0f		beq $011ba7			beq 	_FRun_WarmStart
.011b98	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b9a	1a		inc a				inc 	a 							; go to link for next line
.011b9b	1a		inc a				inc 	a
.011b9c	80 a7		bra $011b45			bra 	FRun_NextLineNumber
.011b9e					_FRun_Break:
.011b9e	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011ba1	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011ba7					_FRun_WarmStart:
.011ba7	82 07 03	brl $011eb1			brl 	WarmStart
.011baa					Function_NEW:
.011baa	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011bad	18		clc				clc
.011bae	65 02		adc $02				adc 	DBaseAddress
.011bb0	a8		tay				tay
.011bb1	a9 00 00	lda #$0000			lda 	#$0000
.011bb4	99 00 00	sta $0000,y			sta 	$0000,y
.011bb7	80 00		bra $011bb9			bra 	Function_Clear
.011bb9					Function_CLEAR:
.011bb9	20 c5 1b	jsr $011bc5			jsr 	ClearVariablesPointersAndStacks
.011bbc	60		rts				rts
.011bbd					Function_STOP:
.011bbd	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011bc0	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011bc5					ClearVariablesPointersAndStacks:
.011bc5	a9 80 00	lda #$0080			lda 	#BASStack
.011bc8	85 2a		sta $2a				sta 	DStack
.011bca	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011bcc	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011bcf	a9 00 00	lda #$0000			lda 	#$0000
.011bd2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bd4	20 00 1c	jsr $011c00			jsr 	FindCodeEnd 				; find where the program ends.
.011bd7	a8		tay				tay 								; Y points to it.
.011bd8	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011bdb	99 02 00	sta $0002,y			sta 	$0002,y
.011bde	99 04 00	sta $0004,y			sta 	$0004,y
.011be1	98		tya				tya 								; start of working memory up
.011be2	18		clc				clc
.011be3	69 06 00	adc #$0006			adc 	#6
.011be6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011be9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011beb	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011bee					_FCLoop:
.011bee	a9 00 00	lda #$0000			lda 	#$0000
.011bf1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011bf3	c8		iny				iny
.011bf4	c8		iny				iny
.011bf5	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011bf8	d0 f4		bne $011bee			bne 	_FCLoop
.011bfa	64 16		stz $16				stz 	DTempStringPointer
.011bfc	20 7b 06	jsr $01067b			jsr 	StringResetPermanent
.011bff	60		rts				rts
.011c00					FindCodeEnd:
.011c00	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011c03	18		clc				clc
.011c04	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011c06	a8		tay				tay
.011c07					_FCELoop:
.011c07	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011c0a	f0 08		beq $011c14			beq 	_FCEExit
.011c0c	98		tya				tya 								; add offset
.011c0d	18		clc				clc
.011c0e	79 00 00	adc $0000,y			adc 	$0000,y
.011c11	a8		tay				tay
.011c12	80 f3		bra $011c07			bra 	_FCELoop
.011c14					_FCEExit:
.011c14	98		tya				tya 								; return in A
.011c15	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011c16					Function_Dim:
.011c16	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011c18	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011c1b	f0 3b		beq $011c58			beq		_FDIMNotArray 				; no, error.
.011c1d	20 a2 03	jsr $0103a2			jsr 	VariableFind 				; try to find it.
.011c20	b0 41		bcs $011c63			bcs 	_FDIMExists 				; if it does, that's an error.
.011c22	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011c24	48		pha				pha
.011c25	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011c27	48		pha				pha
.011c28					_FDIMSkip:
.011c28	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011c2a	e6 06		inc $06				inc 	DCodePtr
.011c2c	e6 06		inc $06				inc 	DCodePtr
.011c2e	29 00 08	and #$0800			and 	#IDContMask
.011c31	d0 f5		bne $011c28			bne 	_FDIMSkip
.011c33	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011c36	20 01 06	jsr $010601			jsr 	ExpectRightBracket 			; check the ) following.
.011c39	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011c3c	d0 3b		bne $011c79			bne 	_FDIMSize
.011c3e	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011c41	f0 36		beq $011c79			beq 	_FDIMSize
.011c43	7a		ply				ply 								; restore HashTablePtr
.011c44	84 20		sty $20				sty 	DHashTablePtr
.011c46	7a		ply				ply 								; so now A is the high index, Y points to the token
.011c47	20 4c 04	jsr $01044c			jsr 	VariableCreate 				; create the variable.
.011c4a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011c4c	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011c4f	d0 06		bne $011c57			bne 	_FDIMExit
.011c51	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c53	e6 06		inc $06				inc 	DCodePtr
.011c55	80 bf		bra $011c16			bra 	Function_DIM 				; and do another
.011c57					_FDIMExit:
.011c57	60		rts				rts
.011c58					_FDIMNotArray:
.011c58	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c5b	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c63					_FDIMExists:
.011c63	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c66	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c6e	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c79					_FDIMSize:
.011c79	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011c7c	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c84	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c8a					Command_POKE:
.011c8a	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c8d	48		pha				pha	 								; save on stack
.011c8e	5a		phy				phy
.011c8f	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011c92	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c95	fa		plx				plx 								; pull address and store in DTemp1
.011c96	86 0a		stx $0a				stx 	DTemp1+2
.011c98	fa		plx				plx
.011c99	86 08		stx $08				stx 	DTemp1+0
.011c9b	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c9d	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c9f	c2 20		rep #$20			rep 	#$20 						; word mode
.011ca1	60		rts				rts
.011ca2					Command_DOKE:
.011ca2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011ca5	48		pha				pha	 								; save on stack
.011ca6	5a		phy				phy
.011ca7	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011caa	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011cad	fa		plx				plx 								; pull address and store in DTemp1
.011cae	86 0a		stx $0a				stx 	DTemp1+2
.011cb0	fa		plx				plx
.011cb1	86 08		stx $08				stx 	DTemp1+0
.011cb3	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011cb5	60		rts				rts
.011cb6					Command_LOKE:
.011cb6	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011cb9	48		pha				pha	 								; save on stack
.011cba	5a		phy				phy
.011cbb	20 0a 06	jsr $01060a			jsr 	ExpectComma 				; comma seperator.
.011cbe	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011cc1	fa		plx				plx 								; pull address and store in DTemp1
.011cc2	86 0a		stx $0a				stx 	DTemp1+2
.011cc4	fa		plx				plx
.011cc5	86 08		stx $08				stx 	DTemp1+0
.011cc7	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011cc9	98		tya				tya
.011cca	a0 02 00	ldy #$0002			ldy 	#2
.011ccd	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011ccf	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011cd0					Function_ASSERT:
.011cd0	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011cd3	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011cd5	05 08		ora $08				ora 	Dtemp1
.011cd7	f0 01		beq $011cda			beq 	_FAssFail
.011cd9	60		rts				rts
.011cda					_FAssFail:
.011cda	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011cdd	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011ce5	61 69 6c 65 64 00
.011ceb					Function_CLS:
.011ceb	20 49 1d	jsr $011d49			jsr 	HWClearScreen
.011cee	60		rts				rts
.011cef					Function_REM:
.011cef	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011cf1	f0 0f		beq $011d02			beq 	_FRemExit 					; no comment present
.011cf3	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011cf6	f0 0a		beq $011d02			beq 	_FRemExit 					; no comment present
.011cf8	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011cfb	b0 06		bcs $011d03			bcs 	_FRemSyntax
.011cfd	18		clc				clc 								; add to DCodePtr
.011cfe	65 06		adc $06				adc 	DCodePtr
.011d00	85 06		sta $06				sta 	DCodePtr
.011d02					_FRemExit:
.011d02	60		rts				rts
.011d03					_FRemSyntax:
.011d03	82 d1 e8	brl $0105d7			brl 	SyntaxError
.011d06					Function_LINK:
.011d06	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011d09	85 08		sta $08				sta 	DTemp1 						; target address
.011d0b	84 0a		sty $0a				sty 	DTemp1+2
.011d0d	7b		tdc				tda 								; work out what the actual address is
.011d0e	18		clc				clc
.011d0f	69 08 00	adc #$0008			adc 	#DTemp1
.011d12	8f 47 1d 01	sta $011d47			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011d16	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011d18	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011d1b	48		pha				pha
.011d1c	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011d1f	aa		tax				tax
.011d20	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011d23	a8		tay				tay
.011d24	68		pla				pla
.011d25	22 46 1d 01	jsl $011d46			jsl 	_FLIExecuteIt
.011d29	5a		phy				phy 								; save Y
.011d2a	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011d2c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d2f	8a		txa				txa
.011d30	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d33	68		pla				pla
.011d34	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d37	c8		iny				iny 								; point to their high bytes and clear them
.011d38	c8		iny				iny
.011d39	a9 00 00	lda #$0000			lda 	#0
.011d3c	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011d3f	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011d42	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011d45	60		rts				rts
.011d46					_FLIExecuteIt:
.011d46	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011d49					HWClearScreen:
.011d49	48		pha				pha
.011d4a	da		phx				phx
.011d4b	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011d4e	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011d51	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d55	ca		dex				dex
.011d56	10 f6		bpl $011d4e			bpl 	_CS0
.011d58	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d5b	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d5f	fa		plx				plx
.011d60	68		pla				pla
.011d61	60		rts				rts
.011d62					HWPrintChar:
.011d62	48		pha				pha
.011d63	da		phx				phx
.011d64	5a		phy				phy
.011d65	48		pha				pha 								; cursor position -> X
.011d66	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d6a	aa		tax				tax
.011d6b	68		pla				pla
.011d6c	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d6f	f0 08		beq $011d79			beq 	_HWPCNoWrite
.011d71	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d73	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d77	c2 20		rep #$20			rep 	#$20
.011d79					_HWPCNoWrite:
.011d79	e8		inx				inx 								; bump cursor position.
.011d7a	8a		txa				txa
.011d7b	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d7f	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d82	d0 2b		bne $011daf			bne 	_HWNotEnd
.011d84	38		sec				sec 	 							; back up one line
.011d85	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d88	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d8c	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d8f					_HWScrollUp:
.011d8f	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d93	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d97	e8		inx				inx
.011d98	e8		inx				inx
.011d99	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d9c	d0 f1		bne $011d8f			bne 	_HWScrollUp
.011d9e	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011da1					_HWBlank:
.011da1	a9 20 20	lda #$2020			lda 	#$2020
.011da4	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011da8	e8		inx				inx
.011da9	e8		inx				inx
.011daa	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011dad	d0 f2		bne $011da1			bne 	_HWBlank
.011daf					_HWNotEnd:
.011daf	7a		ply				ply
.011db0	fa		plx				plx
.011db1	68		pla				pla
.011db2	60		rts				rts
.011db3					HWNewLine:
.011db3	48		pha				pha
.011db4	da		phx				phx
.011db5	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011db8					HWMoveCursor:
.011db8	a9 ff ff	lda #$ffff			lda 	#-1
.011dbb	20 62 1d	jsr $011d62			jsr 	HWPrintChar
.011dbe	8a		txa				txa
.011dbf	2f 20 80 0f	and $0f8020			and 	HWCursor
.011dc3	d0 f3		bne $011db8			bne 	HWMoveCursor
.011dc5	fa		plx				plx
.011dc6	68		pla				pla
.011dc7	60		rts				rts
.011dc8	48		pha		HWTab:	pha
.011dc9	da		phx				phx
.011dca	a2 07 00	ldx #$0007			ldx 	#7
.011dcd	80 e9		bra $011db8			bra 	HWMoveCursor
.011dcf					HWCheckBreak:
.011dcf	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011dd3	60		rts				rts
.011dd4					HWInkey:
.011dd4	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011dd8	60		rts				rts
.011dd9					HWInputLine:
.011dd9	20 d4 1d	jsr $011dd4			jsr 	HWInkey 					; get a keystroke.
.011ddc	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011de0	f0 f7		beq $011dd9			beq 	HWInputLine
.011de2					_HWILWait:
.011de2	20 d4 1d	jsr $011dd4			jsr 	HWInkey
.011de5	c9 00 00	cmp #$0000			cmp		#0
.011de8	f0 f8		beq $011de2			beq 	_HWILWait
.011dea	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011dee	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011df1	90 2f		bcc $011e22			bcc 	_HWILControl
.011df3	20 62 1d	jsr $011d62			jsr 	HWPrintChar 				; print out.
.011df6	80 e1		bra $011dd9			bra 	HWInputLine 				; loop back.
.011df8					_HWILBackSpace:
.011df8	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011dfc	f0 db		beq $011dd9			beq 	HWInputLine
.011dfe	aa		tax				tax
.011dff	ca		dex				dex
.011e00	a9 20 00	lda #$0020			lda 	#" "
.011e03	e2 20		sep #$20			sep 	#$20
.011e05	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011e09	c2 20		rep #$20			rep 	#$20
.011e0b	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e0e					_HWILMove:
.011e0e	8a		txa				txa
.011e0f	18		clc				clc
.011e10	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011e14	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011e17	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011e1b	80 bc		bra $011dd9			bra 	HWInputLine
.011e1d					_HWILClear:
.011e1d	20 49 1d	jsr $011d49			jsr 	HWClearScreen
.011e20	80 b7		bra $011dd9			bra 	HWInputLine
.011e22					_HWILControl:
.011e22	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011e25	f0 60		beq $011e87			beq 	_HWILTab
.011e27	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011e2a	f0 cc		beq $011df8			beq 	_HWILBackSpace
.011e2c	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011e2f	c9 17 00	cmp #$0017			cmp 	#23
.011e32	f0 da		beq $011e0e			beq 	_HWILMove
.011e34	a2 40 00	ldx #$0040			ldx 	#sWidth
.011e37	c9 13 00	cmp #$0013			cmp 	#19
.011e3a	f0 d2		beq $011e0e			beq 	_HWILMove
.011e3c	a2 ff ff	ldx #$ffff			ldx 	#-1
.011e3f	c9 01 00	cmp #$0001			cmp 	#1
.011e42	f0 ca		beq $011e0e			beq 	_HWILMove
.011e44	a2 01 00	ldx #$0001			ldx 	#1
.011e47	c9 04 00	cmp #$0004			cmp 	#4
.011e4a	f0 c2		beq $011e0e			beq 	_HWILMove
.011e4c	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011e4f	f0 cc		beq $011e1d			beq 	_HWILClear
.011e51	c9 0d 00	cmp #$000d			cmp 	#13
.011e54	d0 83		bne $011dd9			bne 	HWInputLine
.011e56	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e5a	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e5d	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e5f	a9 0f 00	lda #$000f			lda 	#$000F
.011e62	85 0a		sta $0a				sta 	DTemp1+2
.011e64	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e67					_HWILCopy:
.011e67	bb		tyx				tyx
.011e68	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e6a	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e6e	c8		iny				iny
.011e6f	c8		iny				iny
.011e70	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e73	d0 f2		bne $011e67			bne 	_HWILCopy
.011e75	a9 00 00	lda #$0000			lda 	#0
.011e78	bb		tyx				tyx
.011e79	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e7d	20 b3 1d	jsr $011db3			jsr 	HWNewLine 					; next line.
.011e80	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e83	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e86	60		rts				rts
.011e87					_HWILTab:
.011e87	20 c8 1d	jsr $011dc8			jsr 	HWTab
.011e8a	82 4c ff	brl $011dd9			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e8d					SwitchBasicInstance:
.011e8d	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e8f	20 49 1d	jsr $011d49			jsr 	HWClearScreen 						; clear screen
.011e92	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e95	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e97	86 02		stx $02				stx		DBaseAddress
.011e99	84 04		sty $04				sty 	DHighAddress
.011e9b	ba		tsx				tsx 										; save the current SP.
.011e9c	86 3a		stx $3a				stx 	DStack65816
.011e9e	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e9f	48		pha				pha 										; then copy it into B.
.011ea0	ab		plb				plb
.011ea1	ab		plb				plb
.011ea2	20 c5 1b	jsr $011bc5			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ea5	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011ea8	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011eaa	f0 05		beq $011eb1			beq 	WarmStart
.011eac	3a		dec a				dec 	a 									; decrement zero.
.011ead	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011eaf	80 18		bra $011ec9			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011eb1					WarmStart:
.011eb1	a2 17 1f	ldx #$1f17			ldx 	#BasicPrompt & $FFFF
.011eb4	20 43 06	jsr $010643			jsr 	PrintROMMessage
.011eb7					NextCommand:
.011eb7	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011eb9	9a		txs				txs
.011eba	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011ebc	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011ebf	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011ec1	d0 52		bne $011f15			bne 	ExitEmulator
.011ec3	20 d9 1d	jsr $011dd9			jsr 	HWInputLine 						; read line to YA.
.011ec6	20 ad 07	jsr $0107ad			jsr 	Tokenise 							; tokenise it.
.011ec9					ExecuteTokenBuffer:
.011ec9	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011ecc	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011ece	f0 e7		beq $011eb7			beq 	NextCommand 						; nothing.
.011ed0	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011ed3	90 27		bcc $011efc			bcc 	_ETBCommand
.011ed5	c9 00 c0	cmp #$c000			cmp 	#$C000
.011ed8	b0 22		bcs $011efc			bcs 	_ETBCommand
.011eda	38		sec				sec
.011edb	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011ede	f0 1f		beq $011eff			beq 	_ETBError
.011ee0	48		pha				pha
.011ee1	20 dc 04	jsr $0104dc			jsr 	LineDelete 							; delete the line, if it exists.
.011ee4	20 c5 1b	jsr $011bc5			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ee7	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011eea	18		clc				clc
.011eeb	65 02		adc $02				adc 	DBaseAddress
.011eed	a8		tay				tay 										; Y contains the code.
.011eee	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011ef1	f0 c4		beq $011eb7			beq 	NextCommand 						; no, next command.
.011ef3	68		pla				pla 										; line number in A, code in Y.
.011ef4	20 17 05	jsr $010517			jsr 	LineInsert 							; insert the line
.011ef7	20 c5 1b	jsr $011bc5			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011efa	80 bb		bra $011eb7			bra 	NextCommand
.011efc					_ETBCommand:
.011efc	4c 39 1b	jmp $011b39			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011eff					_ETBError:
.011eff	20 9b 05	jsr $01059b			jsr 	ErrorHandler 						; call error routine
>011f02	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011f0a	61 76 65 20 6c 69 6e 65 20 30 00
.011f15					ExitEmulator:
.011f15	02 00		cop #$00			cop 	#0
.011f17					BasicPrompt:
>011f17	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 ad 07	jsr $0107ad			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	9e 43 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 e8 03 ed e4 06 22
>024208	08 00 05 4f 75 74 65 72 00 00 0c 00 f2 03 fa c4
>024218	06 22 2a 40 00 00 18 00 fc 03 35 3e 08 00 05 4f
>024228	75 74 65 72 24 32 fa c4 24 32 ed e4 00 00 12 00
>024238	00 04 46 3c 09 c0 06 22 01 40 2a 38 64 40 00 00
>024248	0e 00 06 04 41 3e 7f ca ef c8 fe c4 00 00 18 00
>024258	10 04 35 3e 08 00 05 4f 75 74 65 72 24 32 fa c4
>024268	24 32 ed e4 00 00 0a 00 15 04 4c 3a 09 c0 00 00
>024278	0e 00 1a 04 41 3e 7f ca ef c8 fe c4 00 00 18 00
>024288	24 04 35 3e 08 00 05 4f 75 74 65 72 24 32 fa c4
>024298	24 32 ed e4 00 00 08 00 2e 04 2f 3e 00 00 08 00
>0242a8	38 04 2c 3e 00 00 0e 00 d0 07 47 3c 7f ca ef c8
>0242b8	fe c4 00 00 0e 00 da 07 42 3e fa c4 24 32 ed e4
>0242c8	00 00 1e 00 df 07 fa c4 06 22 63 40 26 32 ed e4
>0242d8	06 22 0c 00 08 49 6e 6e 65 72 31 2e 2e 00 00 00
>0242e8	1a 00 e4 07 35 3e 0a 00 06 49 6e 6e 65 72 31 00
>0242f8	24 32 fa c4 24 32 ed e4 00 00 0e 00 ee 07 41 3e
>024308	7f ca ef c8 2b c5 00 00 1a 00 f3 07 35 3e 0a 00
>024318	06 49 6e 6e 65 72 31 00 24 32 fa c4 24 32 ed e4
>024328	00 00 08 00 f8 07 4d 3a 00 00 08 00 02 08 2c 3e
>024338	00 00 0e 00 b8 0b 47 3c 7f ca ef c8 2b c5 00 00
>024348	0e 00 c2 0b 42 3e fa c4 24 32 ed e4 00 00 20 00
>024358	cc 0b fa c4 06 22 0b 24 01 40 26 32 01 e0 06 22
>024368	0c 00 09 49 4e 4e 45 52 20 32 20 21 00 00 1a 00
>024378	d6 0b 35 3e 0a 00 06 69 6e 6e 65 72 32 00 24 32
>024388	fa c4 24 32 01 e0 00 00 08 00 e0 0b 4d 3a 00 00
>024398	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>0243a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1988 times (31808 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
