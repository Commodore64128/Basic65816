
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 11 17:20:01 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c d9 09 01	jmp $0109d9		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	68 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	05 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	15 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	25 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	69 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d0 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	35 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	b2 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	94 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	4f 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	4f 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d0 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	dc 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	59 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d0 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	e1 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	f3 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	6a 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	4a 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	26 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	10 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	68 03					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	68 03					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	68 03					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	68 03					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	68 03					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	a1 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	be 09					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	16 08					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	18 08					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	70 08					.word Function_CLEAR           & $FFFF ; token $3e1e "clear"
>01003e	bc 08					.word Function_Dim             & $FFFF ; token $3e1f "dim"
>010040	30 09					.word Function_COLLECT         & $FFFF ; token $3e20 "collect"
>010042	68 03					.word IllegalToken             & $FFFF ; token $3c21 "while"
>010044	68 03					.word IllegalToken             & $FFFF ; token $3a22 "wend"
.010046					TokenText:
>010046	02 26					 .text $02,"&"        ; token $2001
>010048	02 7c					 .text $02,"|"        ; token $2002
>01004a	02 5e					 .text $02,"^"        ; token $2003
>01004c	12 3c					 .text $12,"<"        ; token $2204
>01004e	12 3e					 .text $12,">"        ; token $2205
>010050	12 3d					 .text $12,"="        ; token $2206
>010052	13 3c 3d				 .text $13,"<="       ; token $2207
>010055	13 3e 3d				 .text $13,">="       ; token $2208
>010058	13 3c 3e				 .text $13,"<>"       ; token $2209
>01005b	22 2b					 .text $22,"+"        ; token $240a
>01005d	22 2d					 .text $22,"-"        ; token $240b
>01005f	32 2a					 .text $32,"*"        ; token $260c
>010061	32 2f					 .text $32,"/"        ; token $260d
>010063	32 25					 .text $32,"%"        ; token $260e
>010065	33 3e 3e				 .text $33,">>"       ; token $260f
>010068	33 3c 3c				 .text $33,"<<"       ; token $2610
>01006b	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010071	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010076	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01007b	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010080	92 2c					 .text $92,","        ; token $3215
>010082	92 3b					 .text $92,";"        ; token $3216
>010084	92 3a					 .text $92,":"        ; token $3217
>010086	92 28					 .text $92,"("        ; token $3218
>010088	92 29					 .text $92,")"        ; token $3219
>01008a	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>01008e	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>010095	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010099	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>01009d	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1e
>0100a3	f4 64 69 6d				 .text $f4,"dim"      ; token $3e1f
>0100a7	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e20
>0100af	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c21
>0100b5	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a22
>0100ba	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3e1e					clearTokenID                     = $3e1e
=$3e1f					dimTokenID                       = $3e1f
=$3e20					collectTokenID                   = $3e20
=$3c21					whileTokenID                     = $3c21
=$3a22					wendTokenID                      = $3a22

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100bb					Evaluate:
.0100bb	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100be	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100c1					EvaluateLevel:
.0100c1	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100c4	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100c6	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100c8	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100cb	b0 79		bcs $010146			bcs 	_ELVariable
.0100cd	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100d0	b0 16		bcs $0100e8			bcs 	_ELConstant
.0100d2	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100d5	90 7f		bcc $010156			bcc 	_ELStringConstant
.0100d7	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100da	90 03		bcc $0100df			bcc 	_ELConstantShift
.0100dc	82 94 00	brl $010173			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100df					_ELConstantShift:
.0100df	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100e2	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100e4	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100e6	e6 06		inc $06				inc 	DCodePtr
.0100e8					_ELConstant:
.0100e8	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100ea	38		sec				sec  								; shift it in the range 0-32767
.0100eb	e9 00 40	sbc #$4000			sbc 	#$4000
.0100ee	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100ef	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100f1	6a		ror a				ror 	a 							; rotate that into the constant value
.0100f2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100f4	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100f6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100f8	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100fa	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100fc	e6 06		inc $06				inc 	DCodePtr
.0100fe					_ELGotAtom:
.0100fe	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010100	a8		tay				tay 								; save in Y
.010101	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010104	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010107	d0 35		bne $01013e			bne 	_ELExit
.010109	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01010b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01010e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010110	98		tya				tya 								; get the keyword token back
.010111	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010114	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010116	90 26		bcc $01013e			bcc 	_ELExit 					; precedence too low, then exit.
.010118	5a		phy				phy 								; save the binary operator on the stack
.010119	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01011b	e6 06		inc $06				inc 	DCodePtr
.01011d	18		clc				clc 								; try the next level up
.01011e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010121	e8		inx				inx 								; calculate the RHS at the next stack level.
.010122	e8		inx				inx
.010123	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.010126	ca		dex				dex
.010127	ca		dex				dex
.010128	7a		ply				ply 								; get operator token back into Y
.010129					_ELExecuteY:
.010129	98		tya				tya
.01012a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01012d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01012e	9b		txy				txy 								; save X in Y
.01012f	aa		tax				tax 								; double keyword ID in X
.010130	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010134	bb		tyx				tyx 								; restore X.
.010135	8f 3a 01 01	sta $01013a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010139					_ELCallRoutine:
.010139	20 39 01	jsr $010139			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01013c	80 c0		bra $0100fe			bra 	_ELGotAtom 					; go round operator level again.
.01013e	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010140	0a		asl a				asl 	a
.010141	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010143	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010145	60		rts				rts
.010146					_ELVariable:
.010146	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010148	20 07 02	jsr $010207			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01014b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01014d	94 10		sty $10,x			sty 	EXSValueH+0,x
.01014f	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010151	80 ab		bra $0100fe			bra 	_ELGotAtom
.010153					_ELSyntax
.010153	82 23 02	brl $010379			brl 	SyntaxError
.010156					_ELStringConstant:
.010156	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010159	f0 f8		beq $010153			beq 	_ELSyntax
.01015b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01015d	1a		inc a				inc 	a
.01015e	1a		inc a				inc 	a
.01015f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010161	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010163	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010165	18		clc				clc 								; add to string constant.
.010166	65 06		adc $06				adc 	DCodePtr
.010168	85 06		sta $06				sta 	DCodePtr
.01016a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01016c	09 00 80	ora #$8000			ora 	#$8000
.01016f	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010171	80 8b		bra $0100fe			bra 	_ELGotAtom
.010173					_ELUnaryKeyword:
.010173	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010175	a8		tay				tay 								; put the token in Y.
.010176	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010178	e6 06		inc $06				inc 	DCodePtr
.01017a	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01017d	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010180	f0 a7		beq $010129			beq 	_ELExecuteY					; go back and execute it
.010182	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.010185	d0 11		bne $010198			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010187	20 be 01	jsr $0101be			jsr 	EvaluateNext 				; evaluate the expression
.01018a	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; consume the right bracket.
.01018d					_ELCopy:
.01018d	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01018f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010191	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010193	95 10		sta $10,x			sta 	EXSValueH+0,x
.010195	82 66 ff	brl $0100fe			brl 	_ELGotAtom 					; and continue.
.010198					_ELUnaryOperator:
.010198	5a		phy				phy 								; save the operator on the stack.
.010199	e8		inx				inx 								; this is like evaluate next
.01019a	e8		inx				inx
.01019b	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01019e	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.0101a1	ca		dex				dex 								; unwind the stack.
.0101a2	ca		dex				dex
.0101a3	68		pla				pla 								; restore the unary operator.
.0101a4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101a7	f0 03		beq $0101ac			beq 	_ELMinus
.0101a9	4c 79 03	jmp $010379			jmp 	SyntaxError
.0101ac					_ELMinus:
.0101ac	38		sec				sec 								; do the negation calculation.
.0101ad	a9 00 00	lda #$0000			lda 	#0
.0101b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101b4	a9 00 00	lda #$0000			lda 	#0
.0101b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101bb	82 40 ff	brl $0100fe			brl 	_ELGotAtom					; and continue.
.0101be					EvaluateNext:
.0101be	e8		inx				inx
.0101bf	e8		inx				inx
.0101c0	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101c3	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.0101c6	ca		dex				dex
.0101c7	ca		dex				dex
.0101c8	60		rts				rts
.0101c9					EvaluateInteger:
.0101c9	20 bb 00	jsr $0100bb			jsr 	Evaluate
.0101cc	b0 01		bcs $0101cf			bcs 	EIType
.0101ce	60		rts				rts
.0101cf					EIType:
.0101cf	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0101d2	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101da	78 70 65 63 74 65 64 00
.0101e2					EvaluateNextInteger:
.0101e2	20 be 01	jsr $0101be			jsr 	EvaluateNext
.0101e5	b0 e8		bcs $0101cf			bcs 	EIType
.0101e7	60		rts				rts
.0101e8					EvaluateString:
.0101e8	20 bb 00	jsr $0100bb			jsr 	Evaluate
.0101eb	90 01		bcc $0101ee			bcc 	ESType
.0101ed	60		rts				rts
.0101ee					ESType:
.0101ee	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0101f1	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101f9	78 70 65 63 74 65 64 00
.010201					EvaluateNextString:
.010201	20 be 01	jsr $0101be			jsr 	EvaluateNext
.010204	90 e8		bcc $0101ee			bcc 	ESType
.010206	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010207					VariableAccessExpression:
.010207	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010209	48		pha				pha
.01020a	20 48 02	jsr $010248			jsr 	VariableFind 				; try to find the variables
.01020d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01020f	90 23		bcc $010234			bcc 	_VANError
.010211	68		pla				pla 								; get and save that first token
.010212	48		pha				pha
.010213	a8		tay				tay 								; put first token in Y.
.010214	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010217	f0 07		beq $010220			beq 	_VANNotArray
.010219	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.01021b	20 bf 02	jsr $0102bf			jsr 	VariableSubscript			; index calculation
.01021e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010220					_VANNotArray:
.010220	68		pla				pla 								; get the token back.
.010221	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010224	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010227	38		sec				sec 								; set up return string.
.010228	f0 06		beq $010230			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01022a	18		clc				clc 								; returning a number, read high data word
.01022b	a0 02 00	ldy #$0002			ldy 	#2
.01022e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010230					_VANLoadLower:
.010230	a8		tay				tay 								; put A into Y (this is the high byte)
.010231	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010233	60		rts				rts
.010234					_VANError:
.010234	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010237	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01023f	20 75 6e 6b 6e 6f 77 6e 00
.010248					VariableFind:
.010248	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01024a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01024d	90 5c		bcc $0102ab			bcc 	_VFError
.01024f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010252	b0 11		bcs $010265			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010254	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010257	3a		dec a				dec 	a 							; now 0-25
.010258	0a		asl a				asl 	a 							; x 4 and clear carry
.010259	0a		asl a				asl 	a
.01025a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01025d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	38		sec				sec 								; return with carry set.
.010264	60		rts				rts
.010265					_VFSlowVariable:
.010265	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010267	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.01026a	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01026b	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01026c	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.01026f	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010271	85 08		sta $08				sta 	DTemp1
.010273	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010275	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010278	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010279	65 08		adc $08				adc 	DTemp1
.01027b	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01027d	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01027f					_VFNext:
.01027f	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010281	f0 26		beq $0102a9			beq 	_VFFail 					; if zero, then it's the end of the list.
.010283	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010285	a8		tay				tay 								; read the address of the name at $0002,y
.010286	b9 02 00	lda $0002,y			lda 	$0002,y
.010289	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01028b	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01028e					_VFCompare:
.01028e	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010290	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010292	d0 eb		bne $01027f			bne 	_VFNext 					; if not, go to the next one.
.010294	c8		iny				iny 								; advance token pointer
.010295	c8		iny				iny
.010296	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010299	d0 f3		bne $01028e			bne 	_VFCompare
.01029b	98		tya				tya 								; this is the length of the word.
.01029c	18		clc				clc 								; so we add it to the code pointer
.01029d	65 06		adc $06				adc 	DCodePtr
.01029f	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102a1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102a3	18		clc				clc 								; four on is the actual data
.0102a4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102a7	38		sec				sec 								; return with CS indicating success
.0102a8	60		rts				rts
.0102a9					_VFFail:
.0102a9	18		clc				clc
.0102aa	60		rts				rts
.0102ab					_VFError:
.0102ab	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0102ae	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102b6	76 61 72 69 61 62 6c 65 00
.0102bf					VariableSubscript:
.0102bf	5a		phy				phy 								; save token on stack
.0102c0	48		pha				pha		 							; save variable address on stack.
.0102c1	20 e2 01	jsr $0101e2			jsr		EvaluateNextInteger 		; get the subscript
.0102c4	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; skip right bracket.
.0102c7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102ca	d0 1d		bne $0102e9			bne 	_VANSubscript
.0102cc	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102ce	f0 02		beq $0102d2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102d0	b0 17		bcs $0102e9			bcs 	_VANSubscript
.0102d2					_VANSubOkay:
.0102d2	0a		asl a				asl 	a 							; double lsword
.0102d3	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102d5	68		pla				pla 								; restore DVariablePtr
.0102d6	85 1e		sta $1e				sta 	DVariablePtr
.0102d8	68		pla				pla 								; get and save that first token
.0102d9	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102dc	d0 02		bne $0102e0			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102de	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102e0					_VANNotString
.0102e0	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102e2	18		clc				clc 								; add 2 to get it past the high subscript
.0102e3	69 02 00	adc #$0002			adc 	#2
.0102e6	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102e8	60		rts				rts
.0102e9					_VANSubscript:
.0102e9	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0102ec	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102f4	79 20 53 75 62 73 63 72 69 70 74 00
.010300					VariableCreate:
.010300	48		pha				pha 								; save count.
.010301	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010304	29 00 20	and #$2000			and 	#IDTypeMask
.010307	f0 06		beq $01030f			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010309	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01030c	18		clc				clc
.01030d	65 02		adc $02				adc 	DBaseAddress
.01030f					_VCIsInteger:
.01030f	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010311	68		pla				pla 								; restore count
.010312	48		pha				pha
.010313	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010314	0a		asl a				asl 	a 							; 2 x # items.
.010315					_VCNotSingle:
.010315	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010317	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01031a	48		pha				pha 								; save on stack
.01031b	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.01031e	d0 02		bne $010322			bne 	_VCString
.010320	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010322					_VCString:
.010322	68		pla				pla 								; restore first token.
.010323	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010326	f0 04		beq $01032c			beq 	_VCNotArray
.010328	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01032a	e6 08		inc $08				inc 	DTemp1
.01032c					_VCNotArray:
.01032c	5a		phy				phy 								; save address of token on stack.
.01032d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010330	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010332	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010334	18		clc				clc 								; add 4 for link and name.
.010335	69 04 00	adc #$0004			adc 	#4
.010338	65 08		adc $08				adc 	DTemp1 						; add memory required
.01033a	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01033c	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01033e					_VCErase:
.01033e	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010340	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010343	c8		iny				iny
.010344	c8		iny				iny
.010345	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010347	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010349	d0 f3		bne $01033e			bne 	_VCErase
.01034b	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01034d	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01034f	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010352	68		pla				pla 								; restore the token address
.010353	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010356	68		pla				pla 								; restore count and store.
.010357	99 04 00	sta $0004,y			sta 	$0004,y
.01035a					_VCNotArray2:
.01035a	98		tya				tya 								; update the head link
.01035b	92 20		sta ($20)			sta 	(DHashTablePtr)
.01035d	18		clc				clc 								; advance pointer to the data bit.
.01035e	69 04 00	adc #$0004			adc 	#4
.010361	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010362					ErrorHandler:
.010362	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010364	fa		plx				plx 								; address of error message -1
.010365	ea		nop				nop
.010366	80 fe		bra $010366	_EH1:	bra 	_EH1
.010368					IllegalToken:
.010368	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01036b	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010373	54 6f 6b 65 6e 00
.010379					SyntaxError:
.010379	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01037c	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010384	72 72 6f 72 00
.010389					ExpectToken:
.010389	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01038b	d0 05		bne $010392			bne 	_CTKError					; error if not
.01038d	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01038f	e6 06		inc $06				inc 	DCodePtr
.010391	60		rts				rts
.010392					_CTKError:
.010392	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010395	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01039d	74 6f 6b 65 6e 00
.0103a3					ExpectRightBracket:
.0103a3	48		pha				pha
.0103a4	a9 19 32	lda #$3219			lda 	#rparenTokenID
.0103a7	20 89 03	jsr $010389			jsr 	ExpectToken
.0103aa	68		pla				pla
.0103ab	60		rts				rts
.0103ac					ExpectComma:
.0103ac	48		pha				pha
.0103ad	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103b0	20 89 03	jsr $010389			jsr 	ExpectToken
.0103b3	68		pla				pla
.0103b4	60		rts				rts
.0103b5					CheckBothNumeric:
.0103b5	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103b7	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103b9	30 01		bmi $0103bc			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103bb	60		rts				rts
.0103bc					_CBNFail:
.0103bc	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0103bf	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103c7	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103d5					ResetTypeInteger:
.0103d5	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103d7	29 ff 7f	and #$7fff			and 	#$7FFF
.0103da	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103dc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103dd					StringTempAllocate:
.0103dd	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103e0	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103e3	18		clc				clc 								; this adds one, for the length.
.0103e4	65 16		adc $16				adc 	DTempStringPointer
.0103e6	85 16		sta $16				sta 	DTempStringPointer
.0103e8	48		pha				pha
.0103e9	a9 00 00	lda #$0000			lda 	#$0000
.0103ec	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103ee	92 16		sta ($16)			sta		(DTempStringPointer)
.0103f0	c2 20		rep #$20			rep 	#$20
.0103f2	68		pla				pla
.0103f3	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103f5	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103f7	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0103f9	60		rts				rts
.0103fa					StringCreateCopy:
.0103fa	a8		tay				tay 								; put pointer to string in Y
.0103fb	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0103fe	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010401	f0 17		beq $01041a			beq 	_SCCExit 					; do nothing if length zero.
.010403	da		phx				phx 								; save X and put the character count in X
.010404	aa		tax				tax
.010405					_SCCCopy:
.010405	c8		iny				iny 								; advance and read (first time skips length)
.010406	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010408	b9 00 00	lda $0000,y			lda 	$0000,y
.01040b	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01040d	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01040f	1a		inc a				inc 	a
.010410	92 18		sta ($18)			sta 	(DStartTempString)
.010412	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010414	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010416	ca		dex				dex 								; do X times
.010417	d0 ec		bne $010405			bne 	_SCCCopy
.010419	fa		plx				plx
.01041a					_SCCExit:
.01041a	60		rts				rts
.01041b					StringMakeConcrete:
.01041b	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01041e	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010420	90 0f		bcc $010431			bcc 	_SMCExit
.010422	85 08		sta $08				sta 	DTemp1 						; source
.010424	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010426	29 ff 00	and #$00ff			and 	#$00FF
.010429	d0 07		bne $010432			bne 	_SMCNonZero 				; if not "" skip.
.01042b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01042e	18		clc				clc
.01042f	65 02		adc $02				adc 	DBaseAddress
.010431					_SMCExit:
.010431	60		rts				rts
.010432					_SMCNonZero:
.010432	48		pha				pha 								; save on stack.
.010433	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010436	18		clc				clc
.010437	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01043a	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01043e	85 0c		sta $0c				sta 	DTemp2 						; target
.010440	7a		ply				ply 								; get length copy from here until Y goes -ve
.010441	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010443					_SMCLoop:
.010443	b1 08		lda ($08),y			lda 	(DTemp1),y
.010445	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010447	88		dey				dey
.010448	10 f9		bpl $010443			bpl 	_SMCLoop
.01044a	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01044c	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01044e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01044f					Binary_Add:
.01044f	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010451	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010453	30 12		bmi $010467		bmi 	_BATypeError
.010455	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010457	30 3f		bmi $010498		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010459	18		clc			clc
.01045a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01045c	75 02		adc $02,x		adc 	EXSValueL+2,x
.01045e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010460	b5 10		lda $10,x		lda		EXSValueH+0,x
.010462	75 12		adc $12,x		adc 	EXSValueH+2,x
.010464	95 10		sta $10,x		sta 	EXSValueH+0,x
.010466	60		rts			rts
.010467					_BATypeError:
.010467	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01046a	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010472	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010482	65 73 00
.010485					_BALengthError:
.010485	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010488	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010490	6f 6f 20 6c 6f 6e 67 00
.010498					_BAConcatenateString:
.010498	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01049a	85 08		sta $08			sta 	DTemp1
.01049c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01049e	85 0c		sta $0c			sta 	DTemp2
.0104a0	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0104a2	18		clc			clc 										; work out the total length
.0104a3	b2 08		lda ($08)		lda 	(DTemp1)
.0104a5	72 0c		adc ($0c)		adc 	(DTemp2)
.0104a7	b0 14		bcs $0104bd		bcs 	_BAConcatLengthError 				; string is too long.
.0104a9	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0104ab	20 dd 03	jsr $0103dd		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0104ae	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0104b0	74 10		stz $10,x		stz 	EXSValueH+0,x
.0104b2	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0104b4	20 fa 03	jsr $0103fa		jsr 	StringCreateCopy
.0104b7	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0104b9	20 fa 03	jsr $0103fa		jsr 	StringCreateCopy
.0104bc	60		rts			rts
.0104bd					_BAConcatLengthError:
.0104bd	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0104c0	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104c8	6f 6f 20 6c 6f 6e 67 00
.0104d0					Binary_Subtract:
.0104d0	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104d3	38		sec			sec
.0104d4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104d6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104d8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104da	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104dc	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104de	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104e0	60		rts			rts
.0104e1					Binary_ShiftRight:
.0104e1	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104e4	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104e6	29 3f 00	and #$003f		and 	#63
.0104e9	f0 07		beq $0104f2		beq		_Binary_SRExit
.0104eb					_Binary_SRLoop:
.0104eb	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104ed	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104ef	3a		dec a			dec 	a
.0104f0	d0 f9		bne $0104eb		bne 	_Binary_SRLoop
.0104f2					_Binary_SRExit:
.0104f2	60		rts			rts
.0104f3					Binary_ShiftLeft:
.0104f3	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104f6	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104f8	29 3f 00	and #$003f		and 	#63
.0104fb	f0 07		beq $010504		beq		_Binary_SLExit
.0104fd					_Binary_SLLoop:
.0104fd	16 00		asl $00,x		asl 	EXSValueL+0,x
.0104ff	36 10		rol $10,x		rol 	EXSValueH+0,x
.010501	3a		dec a			dec 	a
.010502	d0 f9		bne $0104fd		bne 	_Binary_SLLoop
.010504					_Binary_SLExit:
.010504	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010505					Binary_And:
.010505	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010508	b5 00		lda $00,x		lda		EXSValueL+0,x
.01050a	35 02		and $02,x		and 	EXSValueL+2,x
.01050c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01050e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010510	35 12		and $12,x		and 	EXSValueH+2,x
.010512	95 10		sta $10,x		sta 	EXSValueH+0,x
.010514	60		rts			rts
.010515					Binary_Or:
.010515	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010518	b5 00		lda $00,x		lda		EXSValueL+0,x
.01051a	15 02		ora $02,x		ora 	EXSValueL+2,x
.01051c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01051e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010520	15 12		ora $12,x		ora 	EXSValueH+2,x
.010522	95 10		sta $10,x		sta 	EXSValueH+0,x
.010524	60		rts			rts
.010525					Binary_Xor:
.010525	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010528	b5 00		lda $00,x		lda		EXSValueL+0,x
.01052a	55 02		eor $02,x		eor 	EXSValueL+2,x
.01052c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01052e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010530	55 12		eor $12,x		eor 	EXSValueH+2,x
.010532	95 10		sta $10,x		sta 	EXSValueH+0,x
.010534	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010535					Binary_Equals:
.010535	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010538	b0 0e		bcs $010548		bcs 	_BEString
.01053a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01053c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01053e	d0 4f		bne $01058f		bne 	Compare_Fail
.010540	b5 10		lda $10,x		lda 	EXSValueH,x
.010542	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010544	d0 49		bne $01058f		bne 	Compare_Fail
.010546	80 3f		bra $010587		bra 	Compare_Succeed
.010548					_BEString:
.010548	09 00 00	ora #$0000		ora 	#$0000
.01054b	f0 3a		beq $010587		beq 	Compare_Succeed
.01054d	80 40		bra $01058f		bra 	Compare_Fail
.01054f					Binary_NotEquals:
.01054f	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010552	b0 0e		bcs $010562		bcs 	_BNEString
.010554	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010556	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010558	d0 2d		bne $010587		bne 	Compare_Succeed
.01055a	b5 10		lda $10,x		lda 	EXSValueH,x
.01055c	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01055e	d0 27		bne $010587		bne 	Compare_Succeed
.010560	80 2d		bra $01058f		bra 	Compare_Fail
.010562					_BNEString:
.010562	09 00 00	ora #$0000		ora 	#$0000
.010565	d0 20		bne $010587		bne 	Compare_Succeed
.010567	80 26		bra $01058f		bra 	Compare_Fail
.010569					Binary_Less:
.010569	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01056c	b0 12		bcs $010580		bcs 	_BLString
.01056e	38		sec			sec
.01056f	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010571	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010573	b5 10		lda $10,x		lda 	EXSValueH,x
.010575	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010577	50 03		bvc $01057c		bvc 	*+5
.010579	49 00 80	eor #$8000		eor 	#$8000
.01057c	30 09		bmi $010587		bmi 	Compare_Succeed
.01057e	80 0f		bra $01058f		bra 	Compare_Fail
.010580					_BLString:
.010580	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010583	f0 02		beq $010587		beq 	Compare_Succeed
.010585	80 08		bra $01058f		bra 	Compare_Fail
.010587					Compare_Succeed:
.010587	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01058a	95 00		sta $00,x		sta 	EXSValueL,x
.01058c	95 10		sta $10,x		sta 	EXSValueH,x
.01058e	60		rts			rts
.01058f					Compare_Fail:
.01058f	74 00		stz $00,x		stz 	EXSValueL,x
.010591	74 10		stz $10,x		stz 	EXSValueH,x
.010593	60		rts			rts
.010594					Binary_GreaterEqual:
.010594	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010597	b0 12		bcs $0105ab		bcs 	_BGEString
.010599	38		sec			sec
.01059a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01059c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01059e	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a0	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a2	50 03		bvc $0105a7		bvc 	*+5
.0105a4	49 00 80	eor #$8000		eor 	#$8000
.0105a7	10 de		bpl $010587		bpl 	Compare_Succeed
.0105a9	80 e4		bra $01058f		bra 	Compare_Fail
.0105ab					_BGEString:
.0105ab	09 00 00	ora #$0000		ora 	#$0000
.0105ae	10 d7		bpl $010587		bpl 	Compare_Succeed
.0105b0	80 dd		bra $01058f		bra 	Compare_Fail
.0105b2					Binary_LessEqual:
.0105b2	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105b5	b0 12		bcs $0105c9		bcs 	_BLEString
.0105b7	18		clc			clc 									; numeric <= signed
.0105b8	b5 00		lda $00,x		lda 	EXSValueL,x
.0105ba	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105bc	b5 10		lda $10,x		lda 	EXSValueH,x
.0105be	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105c0	50 03		bvc $0105c5		bvc 	*+5
.0105c2	49 00 80	eor #$8000		eor 	#$8000
.0105c5	30 c0		bmi $010587		bmi 	Compare_Succeed
.0105c7	80 c6		bra $01058f		bra 	Compare_Fail
.0105c9					_BLEString:
.0105c9	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105cc	d0 b9		bne $010587		bne 	Compare_Succeed
.0105ce	80 bf		bra $01058f		bra 	Compare_Fail
.0105d0					Binary_Greater:
.0105d0	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d3	b0 12		bcs $0105e7		bcs 	_BGString
.0105d5	18		clc			clc 									; numeric > signed
.0105d6	b5 00		lda $00,x		lda 	EXSValueL,x
.0105d8	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105da	b5 10		lda $10,x		lda 	EXSValueH,x
.0105dc	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105de	50 03		bvc $0105e3		bvc 	*+5
.0105e0	49 00 80	eor #$8000		eor 	#$8000
.0105e3	10 a2		bpl $010587		bpl 	Compare_Succeed
.0105e5	80 a8		bra $01058f		bra 	Compare_Fail
.0105e7					_BGString:
.0105e7	c9 01 00	cmp #$0001		cmp 	#$0001
.0105ea	f0 9b		beq $010587		beq 	Compare_Succeed
.0105ec	80 a1		bra $01058f		bra 	Compare_Fail
.0105ee					CompareTypeCheck:
.0105ee	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105f0	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105f2	30 06		bmi $0105fa		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105f4	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105f6	30 1c		bmi $010614		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105f8	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0105f9	60		rts			rts
.0105fa					_CTCFail:
.0105fa	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0105fd	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010605	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010614					_CTCStringCompare:
.010614	20 d5 03	jsr $0103d5		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010617	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010619	85 08		sta $08			sta 	DTemp1
.01061b	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01061d	85 0c		sta $0c			sta 	DTemp2
.01061f	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010622	a8		tay			tay
.010623	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010625	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010627	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010629	90 02		bcc $01062d		bcc 	_CTCSmallest
.01062b	b2 0c		lda ($0c)		lda 	(DTemp2)
.01062d					_CTCSmallest:
.01062d	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01062f					_CTCCompare:
.01062f	c8		iny			iny 									; look at next character (done first, first char is size)
.010630	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010632	30 16		bmi $01064a		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010634	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010636	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010638	f0 f5		beq $01062f		beq 	_CTCCompare 					; if zero, try the next character.
.01063a	b0 07		bcs $010643		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01063c					_CTCLess:
.01063c	c2 20		rep #$20		rep 	#$20
.01063e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010641	80 14		bra $010657		bra 	_CTCExit
.010643					_CTCGreater:
.010643	c2 20		rep #$20		rep 	#$20
.010645	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010648	80 0d		bra $010657		bra 	_CTCExit
.01064a					_CTCEqualSoFar:
.01064a	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01064c	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01064e	90 ec		bcc $01063c		bcc 	_CTCLess
.010650	d0 f1		bne $010643		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010652	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010654	a9 00 00	lda #$0000		lda 	#$0000
.010657					_CTCExit:
.010657	38		sec			sec 									; return with CS indicating string comparison.
.010658	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010659					Binary_Divide:
.010659	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.01065c	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01065e	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010660	d0 14		bne $010676		bne 	_BinaryDivide_Ok
.010662	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010665	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01066d	20 62 79 20 7a 65 72 6f 00
.010676					_BinaryDivide_Ok:
.010676	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010678	64 0a		stz $0a			stz 	DTemp1+2
.01067a	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01067c	5a		phy			phy 										; save Y (bit counter)
.01067d	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01067f	10 07		bpl $010688		bpl 	_BinaryDivide_RightDone
.010681	e8		inx			inx
.010682	e8		inx			inx
.010683	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.010686	ca		dex			dex
.010687	ca		dex			dex
.010688					_BinaryDivide_RightDone:
.010688	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01068a	10 03		bpl $01068f		bpl 	_BinaryDivide_LeftDone
.01068c	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.01068f					_BinaryDivide_LeftDone:
.01068f	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010692					_BinaryDivide_Loop:
.010692	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010694	36 10		rol $10,x		rol 	EXSValueH+0,x
.010696	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010698	26 0a		rol $0a			rol 	DTemp1+2
.01069a	38		sec			sec											; calculate A-M
.01069b	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01069d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01069f	85 0c		sta $0c			sta 	DTemp2
.0106a1	a5 0a		lda $0a			lda 	DTemp1+2
.0106a3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106a5	90 08		bcc $0106af		bcc 	_Binary_NoSubract 					; if A < M skip this
.0106a7	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0106a9	a5 0c		lda $0c			lda 	DTemp2
.0106ab	85 08		sta $08			sta 	DTemp1+0
.0106ad	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0106af					_Binary_NoSubract:
.0106af	88		dey			dey 										; do it 32 times.
.0106b0	d0 e0		bne $010692		bne 	_BinaryDivide_Loop
.0106b2					_BinaryDivide_Exit:
.0106b2	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0106b4	29 01 00	and #$0001		and 	#1
.0106b7	f0 03		beq $0106bc		beq 	_BinaryDivide_Exit2
.0106b9	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.0106bc					_BinaryDivide_Exit2:
.0106bc	7a		ply			ply 										; restore Y
.0106bd	60		rts			rts
.0106be					Binary_DivNegate:
.0106be	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106c0	38		sec			sec 										; negate the value at stack X.
.0106c1	a9 00 00	lda #$0000		lda 	#$0000
.0106c4	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106c6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106c8	a9 00 00	lda #$0000		lda 	#$0000
.0106cb	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106cd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106cf	60		rts			rts
.0106d0					Binary_Modulus:
.0106d0	20 59 06	jsr $010659		jsr 	Binary_Divide 						; do the divide
.0106d3	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106d5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106d7	a5 0a		lda $0a			lda 	DTemp1+2
.0106d9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106db	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106dc					Binary_Multiply:
.0106dc	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0106df	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106e1	85 08		sta $08			sta 	DTemp1
.0106e3	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106e5	85 0a		sta $0a			sta		DTemp1+2
.0106e7	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106e9	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106eb					_BinaryMultiply_Loop:
.0106eb	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106ed	05 0a		ora $0a			ora 	DTemp1+2
.0106ef	f0 1e		beq $01070f		beq 	_BinaryMultiply_Exit
.0106f1	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106f3	29 01 00	and #$0001		and 	#1
.0106f6	f0 0d		beq $010705		beq 	_BinaryMultiply_NoAdd
.0106f8	18		clc			clc 										; add multiplicand to result.
.0106f9	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0106fb	75 02		adc $02,x		adc 	EXSValueL+2,x
.0106fd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106ff	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010701	75 12		adc $12,x		adc 	EXSValueH+2,x
.010703	95 10		sta $10,x		sta 	EXSValueH+0,x
.010705					_BinaryMultiply_NoAdd:
.010705	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010707	66 08		ror $08			ror 	DTemp1
.010709	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01070b	36 12		rol $12,x		rol 	EXSValueH+2,x
.01070d	80 dc		bra $0106eb		bra 	_BinaryMultiply_Loop 				; go round again.
.01070f					_BinaryMultiply_Exit:
.01070f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010710					Function_Len:
.010710	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns an integer
.010713	20 01 02	jsr $010201			jsr 	EvaluateNextString 			; get the value you are absoluting
.010716	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.010719	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01071b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01071e	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010721	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010723	74 10		stz $10,x			stz 	EXSValueH+0,x
.010725	60		rts				rts
.010726					Function_Abs:
.010726	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns an integer
.010729	20 e2 01	jsr $0101e2			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01072c	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.01072f	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010731	30 07		bmi $01073a			bmi 	_FAbsNegative 				; negate it if negative
.010733	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010735	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010737	95 00		sta $00,x			sta 	EXSValueL+0,x
.010739	60		rts				rts
.01073a					_FAbsNegative:
.01073a	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01073b	a9 00 00	lda #$0000			lda 	#0
.01073e	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010740	95 00		sta $00,x			sta 	EXSValueL+0,x
.010742	a9 00 00	lda #$0000			lda 	#0
.010745	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010747	95 10		sta $10,x			sta 	EXSValueH+0,x
.010749	60		rts				rts
.01074a					Function_Sgn:
.01074a	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns integer
.01074d	20 e2 01	jsr $0101e2			jsr 	EvaluateNextInteger 		; get an integer
.010750	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.010753	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010755	74 10		stz $10,x			stz 	EXSValueH+0,x
.010757	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010759	30 07		bmi $010762			bmi 	_FSgnNegative 				; set to -1 if signed
.01075b	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01075d	f0 02		beq $010761			beq 	_FSgnExit
.01075f	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010761					_FSgnExit:
.010761	60		rts				rts
.010762					_FSgnNegative:
.010762	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010765	95 00		sta $00,x			sta 	EXSValueL+0,x
.010767	95 10		sta $10,x			sta 	EXSValueH+0,x
.010769	60		rts				rts
.01076a					Function_Random:
.01076a	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger
.01076d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01076f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010771	d0 0a		bne $01077d			bne 	_Rnd_NotZero
.010773	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010776	85 10		sta $10				sta 	DRandom
.010778	a9 ea 00	lda #$00ea			lda 	#$EA
.01077b	85 12		sta $12				sta 	DRandom+2
.01077d					_Rnd_NotZero:
.01077d	20 88 07	jsr $010788			jsr 	_Rnd_Process 				; call randomiser twice
.010780	95 10		sta $10,x			sta 	EXSValueH+0,x
.010782	20 88 07	jsr $010788			jsr 	_Rnd_Process
.010785	95 00		sta $00,x			sta 	EXSValueL+0,x
.010787	60		rts				rts
.010788					_Rnd_Process:
.010788	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01078a	26 12		rol $12				rol 	DRandom+2
.01078c	90 0e		bcc $01079c			bcc 	_Rnd_Exit
.01078e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010790	49 54 d4	eor #$d454			eor 	#$D454
.010793	85 10		sta $10				sta 	DRandom
.010795	a5 12		lda $12				lda 	DRandom+2
.010797	49 d5 55	eor #$55d5			eor 	#$55D5
.01079a	85 12		sta $12				sta 	DRandom+2
.01079c					_Rnd_Exit:
.01079c	a5 10		lda $10				lda 	DRandom
.01079e	45 12		eor $12				eor 	DRandom+2
.0107a0	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0107a1					Function_Let:
.0107a1	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0107a3	48		pha				pha
.0107a4	20 48 02	jsr $010248			jsr 	VariableFind 				; find the variable
.0107a7	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0107a9	b0 1c		bcs $0107c7			bcs 	_FLetFound 					; skip if found.
.0107ab	68		pla				pla 								; get and push the first token again.
.0107ac	48		pha				pha
.0107ad	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.0107b0	d0 51		bne $010803			bne 	_FLError					; arrays, so this causes an error.
.0107b2	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0107b4	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0107b7	20 00 03	jsr $010300			jsr 	VariableCreate 				; create it.
.0107ba	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0107bc					_FLSkipToken:
.0107bc	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0107be	e6 06		inc $06				inc 	DCodePtr
.0107c0	e6 06		inc $06				inc 	DCodePtr
.0107c2	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0107c5	d0 f5		bne $0107bc			bne 	_FLSkipToken
.0107c7					_FLetFound:
.0107c7	68		pla				pla 								; get and save the first token.
.0107c8	48		pha				pha
.0107c9	a8		tay				tay 								; put it in Y
.0107ca	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0107cd	f0 07		beq $0107d6			beq 	_FLetNotArray
.0107cf	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0107d1	20 bf 02	jsr $0102bf			jsr 	VariableSubscript			; index calculation
.0107d4	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0107d6					_FLetNotArray:
.0107d6	7a		ply				ply 								; get the first token into Y
.0107d7	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0107d9	48		pha				pha
.0107da	5a		phy				phy 								; save the first token on the stack.
.0107db	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0107de	20 89 03	jsr $010389			jsr 	ExpectToken
.0107e1	68		pla				pla 								; restore the first token.
.0107e2	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0107e5	d0 0f		bne $0107f6			bne 	_FLetString 				; skip if string.
.0107e7	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; get an integer
.0107ea	7a		ply				ply 								; get address in Y
.0107eb	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0107ed	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107f0	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.0107f2	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0107f5	60		rts				rts
.0107f6					_FLetString:
.0107f6	20 e8 01	jsr $0101e8			jsr 	EvaluateString 				; get a string.
.0107f9	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0107fb	20 1b 04	jsr $01041b			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0107fe	7a		ply				ply 								; get address
.0107ff	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010802	60		rts				rts
.010803					_FLError:
.010803	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010806	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>01080e	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010816					Function_END:
.010816	02 00		cop #$00			cop 	#0
.010818					Function_RUN:
.010818	20 70 08	jsr $010870			jsr 	Function_CLEAR 				; clear all variables.
.01081b	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.01081d	18		clc				clc
.01081e	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010821					_FRun_NextLineNumber:
.010821	a8		tay				tay 								; put in Y
.010822	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010825	f0 ef		beq $010816			beq 	Function_END 				; if zero, off the end of the program
.010827	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01082a	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01082c	98		tya				tya 								; get address back
.01082d	18		clc				clc 								; skip over the link/line number
.01082e	69 04 00	adc #$0004			adc 	#4
.010831	85 06		sta $06				sta 	DCodePtr
.010833					_FRun_NextInstruction:
.010833	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010836	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010838	38		sec				sec
.010839	e9 00 01	sbc #$0100			sbc 	#256
.01083c	85 16		sta $16				sta 	DTempStringPointer
.01083e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010840	f0 28		beq $01086a			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010842	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.010845	f0 18		beq $01085f			beq 	_FRun_Colon
.010847	a8		tay				tay 								; save in Y
.010848	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.01084b	c9 00 20	cmp #$2000			cmp 	#$2000
.01084e	d0 15		bne $010865			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010850	98		tya				tya 								; get token back
.010851	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010854	0a		asl a				asl 	a 							; double it into X
.010855	aa		tax				tax
.010856	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010858	e6 06		inc $06				inc 	DCodePtr
.01085a	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01085d	80 d4		bra $010833			bra 	_FRun_NextInstruction 		; do the following instruction.
.01085f					_FRun_Colon:
.01085f	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010861	e6 06		inc $06				inc 	DCodePtr
.010863	80 ce		bra $010833			bra 	_FRun_NextInstruction 		; do the following instruction.
.010865					_FRun_TryLET:
.010865	20 a1 07	jsr $0107a1			jsr 	Function_LET 				; try as a LET.
.010868	80 c9		bra $010833			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.01086a					_FRun_EndInstruction:
.01086a	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01086c	1a		inc a				inc 	a 							; go to link for next line
.01086d	1a		inc a				inc 	a
.01086e	80 b1		bra $010821			bra 	_FRun_NextLineNumber
.010870					Function_CLEAR:
.010870	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.010873	a9 00 00	lda #$0000			lda 	#$0000
.010876	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010878	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01087a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01087d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01087f	20 a6 08	jsr $0108a6			jsr 	FindCodeEnd 				; find where the program ends.
.010882	a8		tay				tay 								; Y points to it.
.010883	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010886	99 02 00	sta $0002,y			sta 	$0002,y
.010889	99 04 00	sta $0004,y			sta 	$0004,y
.01088c	98		tya				tya 								; start of working memory up
.01088d	18		clc				clc
.01088e	69 06 00	adc #$0006			adc 	#6
.010891	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010894	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010896	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010899					_FCLoop:
.010899	a9 00 00	lda #$0000			lda 	#$0000
.01089c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01089e	c8		iny				iny
.01089f	c8		iny				iny
.0108a0	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0108a3	d0 f4		bne $010899			bne 	_FCLoop
.0108a5	60		rts				rts
.0108a6					FindCodeEnd:
.0108a6	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.0108a9	18		clc				clc
.0108aa	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0108ac	a8		tay				tay
.0108ad					_FCELoop:
.0108ad	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0108b0	f0 08		beq $0108ba			beq 	_FCEExit
.0108b2	98		tya				tya 								; add offset
.0108b3	18		clc				clc
.0108b4	79 00 00	adc $0000,y			adc 	$0000,y
.0108b7	a8		tay				tay
.0108b8	80 f3		bra $0108ad			bra 	_FCELoop
.0108ba					_FCEExit:
.0108ba	98		tya				tya 								; return in A
.0108bb	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0108bc					Function_Dim:
.0108bc	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0108be	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0108c1	f0 3b		beq $0108fe			beq		_FDIMNotArray 				; no, error.
.0108c3	20 48 02	jsr $010248			jsr 	VariableFind 				; try to find it.
.0108c6	b0 41		bcs $010909			bcs 	_FDIMExists 				; if it does, that's an error.
.0108c8	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0108ca	48		pha				pha
.0108cb	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0108cd	48		pha				pha
.0108ce					_FDIMSkip:
.0108ce	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0108d0	e6 06		inc $06				inc 	DCodePtr
.0108d2	e6 06		inc $06				inc 	DCodePtr
.0108d4	29 00 08	and #$0800			and 	#IDContMask
.0108d7	d0 f5		bne $0108ce			bne 	_FDIMSkip
.0108d9	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; evaluate the size
.0108dc	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check the ) following.
.0108df	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0108e2	d0 3b		bne $01091f			bne 	_FDIMSize
.0108e4	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0108e7	f0 36		beq $01091f			beq 	_FDIMSize
.0108e9	7a		ply				ply 								; restore HashTablePtr
.0108ea	84 20		sty $20				sty 	DHashTablePtr
.0108ec	7a		ply				ply 								; so now A is the high index, Y points to the token
.0108ed	20 00 03	jsr $010300			jsr 	VariableCreate 				; create the variable.
.0108f0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0108f2	c9 15 32	cmp #$3215			cmp 	#commaTokenID 				; if not a comma, exit
.0108f5	d0 06		bne $0108fd			bne 	_FDIMExit
.0108f7	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0108f9	e6 06		inc $06				inc 	DCodePtr
.0108fb	80 bf		bra $0108bc			bra 	Function_DIM 				; and do another
.0108fd					_FDIMExit:
.0108fd	60		rts				rts
.0108fe					_FDIMNotArray:
.0108fe	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010901	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010909					_FDIMExists:
.010909	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01090c	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010914	65 64 69 6d 65 6e 73 69 6f 6e 00
.01091f					_FDIMSize:
.01091f	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010922	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01092a	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010930					Function_COLLECT:
.010930	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010932	85 0c		sta $0c				sta 	DTemp2
.010934	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010937	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010939	85 0e		sta $0e				sta 	DTemp2+2
.01093b	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.01093d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01093f					_FCNextPass:
.01093f	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010941	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010943	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010945	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010948	18		clc				clc
.010949	65 02		adc $02				adc 	DBaseAddress
.01094b	a8		tay				tay 								; put in Y
.01094c	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01094f					_FCO1:
.01094f	20 75 09	jsr $010975			jsr  	COLLECTScanVariable 		; scan that one.
.010952	c8		iny				iny 	 							; go to next pointer
.010953	c8		iny				iny
.010954	ca		dex				dex
.010955	d0 f8		bne $01094f			bne 	_FCO1 						; until done all 16.
.010957	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01095a					_FCO2:
.01095a	20 89 09	jsr $010989			jsr  	COLLECTScanArray 			; scan that one.
.01095d	c8		iny				iny 	 							; go to next pointer
.01095e	c8		iny				iny
.01095f	ca		dex				dex
.010960	d0 f8		bne $01095a			bne 	_FCO2 						; until done all 16.
.010962	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010964	f0 0e		beq $010974			beq		_FCExit 					; if finished then exit.
.010966	48		pha				pha 								; save the target address
.010967	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010969	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01096b	20 1b 04	jsr $01041b			jsr 	StringMakeConcrete 			; make the string concrete.
.01096e	7a		ply				ply 								; restore the string.
.01096f	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010972	80 cb		bra $01093f			bra		_FCNextPass
.010974					_FCExit:
.010974	60		rts				rts
.010975					COLLECTScanVariable:
.010975	da		phx				phx 								; save XY
.010976	5a		phy				phy
.010977					_CSVLoop:
.010977	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01097a	f0 0a		beq $010986			beq 	_CSVExit
.01097c	a8		tay				tay 								; put new address into Y
.01097d	18		clc				clc 								; which is four on.
.01097e	69 04 00	adc #$0004			adc 	#4
.010981	20 a8 09	jsr $0109a8			jsr 	COLLECTCheck
.010984	80 f1		bra $010977			bra 	_CSVLoop
.010986					_CSVExit:
.010986	7a		ply				ply
.010987	fa		plx				plx
.010988	60		rts				rts
.010989					COLLECTScanArray:
.010989	da		phx				phx 								; save XY
.01098a	5a		phy				phy
.01098b					_CSALoop:
.01098b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01098e	f0 15		beq $0109a5			beq 	_CSAExit
.010990	a8		tay				tay 								; put new address in Y
.010991	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010994	aa		tax				tax
.010995	e8		inx				inx									; +1 as one more data element.
.010996	98		tya				tya 								; point A to first element, at +6
.010997	18		clc				clc
.010998	69 06 00	adc #$0006			adc 	#6
.01099b					_CSADoAllStrings:
.01099b	20 a8 09	jsr $0109a8			jsr 	COLLECTCheck 				; collect check the first.
.01099e	1a		inc a				inc 	a 							; advance the pointer.
.01099f	1a		inc a				inc 	a
.0109a0	ca		dex				dex
.0109a1	d0 f8		bne $01099b			bne 	_CSADoAllStrings 			; until all strings are done.
.0109a3	80 e6		bra $01098b			bra 	_CSALoop
.0109a5					_CSAExit:
.0109a5	7a		ply				ply
.0109a6	fa		plx				plx
.0109a7	60		rts				rts
.0109a8					COLLECTCheck:
.0109a8	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.0109aa	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.0109ac	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.0109ae	90 0a		bcc $0109ba			bcc 	_COCExit
.0109b0	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.0109b2	b0 06		bcs $0109ba			bcs 	_COCExit
.0109b4	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0109b6	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0109b8	85 14		sta $14				sta 	DSignCount
.0109ba					_COCExit:
.0109ba	a5 0a		lda $0a				lda 	DTemp1+2
.0109bc	60		rts				rts
.0109bd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.0109be					Function_ASSERT:
.0109be	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; something that returns an integer.
.0109c1	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0109c3	05 08		ora $08				ora 	Dtemp1
.0109c5	f0 01		beq $0109c8			beq 	_FAssFail
.0109c7	60		rts				rts
.0109c8					_FAssFail:
.0109c8	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0109cb	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0109d3	61 69 6c 65 64 00

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0109d9					SwitchBasicInstance:
.0109d9	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0109db	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0109de	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0109e0	86 02		stx $02				stx		DBaseAddress
.0109e2	84 04		sty $04				sty 	DHighAddress
.0109e4	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0109e5	48		pha				pha 										; then copy it into B.
.0109e6	ab		plb				plb
.0109e7	ab		plb				plb
.0109e8	4c 18 08	jmp $010818			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	3c b3 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 10 00 01 00 1f 3e ce dc
>024108	1d d0 03 40 19 32 00 00 10 00 02 00 1f 3e 2c dd
>024118	1c d0 03 40 19 32 00 00 10 00 03 00 1f 3e cf dc
>024128	72 d0 04 40 19 32 00 00 10 00 04 00 1f 3e fc dd
>024138	02 d0 05 40 19 32 00 00 0e 00 05 00 1f 3e 04 d5
>024148	02 40 19 32 00 00 0e 00 06 00 1f 3e e7 d5 03 40
>024158	19 32 00 00 0e 00 07 00 1f 3e 51 d5 03 40 19 32
>024168	00 00 10 00 08 00 1f 3e b4 dd 4e d1 03 40 19 32
>024178	00 00 10 00 09 00 1f 3e ca dc 0d d2 05 40 19 32
>024188	00 00 10 00 0a 00 1f 3e d3 dc 0a d0 03 40 19 32
>024198	00 00 10 00 0b 00 05 ce 3e c4 06 22 02 10 a6 ad
>0241a8	00 00 16 00 0c 00 1a 3e b9 cd 82 ca 07 c0 06 22
>0241b8	0b 24 02 10 01 48 00 00 10 00 0d 00 1a 3e a8 cd
>0241c8	15 c0 06 22 d2 a3 00 00 12 00 0e 00 1a 3e 39 ce
>0241d8	12 c0 06 22 05 10 c4 ad 00 00 16 00 0f 00 1a 3e
>0241e8	b8 cd 2c cd 16 c0 06 22 0b 24 01 10 61 83 00 00
>0241f8	12 00 10 00 06 ce 23 c0 06 22 0b 24 02 10 44 61
>024208	00 00 12 00 11 00 1a 3e 87 cd 0a c0 06 22 04 10
>024218	e3 86 00 00 12 00 12 00 5e ce 98 c3 06 22 0b 24
>024228	04 10 e4 90 00 00 10 00 13 00 b4 cd ff c9 16 c0
>024238	06 22 71 40 00 00 12 00 14 00 1a 3e 53 c5 06 22
>024248	0b 24 04 10 7b 6e 00 00 0e 00 15 00 1a 3e 1a c0
>024258	06 22 68 40 00 00 12 00 16 00 1a 3e e0 c5 06 22
>024268	0b 24 01 10 b5 a3 00 00 12 00 17 00 2c cd 48 cb
>024278	1d c0 06 22 04 10 30 5f 00 00 10 00 18 00 1a 3e
>024288	12 ce 1a c0 06 22 69 40 00 00 16 00 19 00 1a 3e
>024298	1b cd d1 cd 21 c0 06 22 0b 24 01 10 51 7e 00 00
>0242a8	12 00 1a 00 1a 3e c7 cc 99 c3 06 22 0b 24 17 99
>0242b8	00 00 0e 00 1b 00 03 c0 06 22 05 10 25 4e 00 00
>0242c8	12 00 1c 00 1a 3e 15 c0 06 22 0b 24 05 10 c6 88
>0242d8	00 00 10 00 1d 00 d4 cd 24 c0 06 22 02 10 68 5b
>0242e8	00 00 12 00 1e 00 1a 3e d8 c4 06 22 0b 24 02 10
>0242f8	ba a1 00 00 14 00 1f 00 1a 3e c5 cc 07 c0 06 22
>024308	0b 24 04 10 38 9b 00 00 0e 00 20 00 cf c5 06 22
>024318	0b 24 64 40 00 00 10 00 21 00 1a 3e 31 c6 06 22
>024328	01 10 cb 63 00 00 0e 00 22 00 39 c6 06 22 04 10
>024338	d8 47 00 00 14 00 23 00 1a 3e d0 cd 39 ca 03 c0
>024348	06 22 01 10 e4 41 00 00 12 00 24 00 1a 3e 06 c0
>024358	06 22 0b 24 03 10 25 97 00 00 0e 00 25 00 1a 3e
>024368	f0 c4 06 22 14 40 00 00 14 00 26 00 1a 3e f3 cc
>024378	dd c4 06 22 0b 24 04 10 a4 a3 00 00 12 00 27 00
>024388	1a 3e 3a ce 4c c8 24 c0 06 22 76 40 00 00 0e 00
>024398	28 00 1a 3e 0e c0 06 22 74 40 00 00 16 00 29 00
>0243a8	1a 3e 28 ce 4b cc 18 c0 06 22 0b 24 03 10 1c 91
>0243b8	00 00 14 00 2a 00 29 ce f9 c8 14 c0 06 22 0b 24
>0243c8	05 10 9e 40 00 00 10 00 2b 00 5d cd 41 c3 06 22
>0243d8	05 10 58 82 00 00 12 00 2c 00 1a 3e 2c cd fd c1
>0243e8	06 22 05 10 55 af 00 00 14 00 2d 00 1a 3e d1 cd
>0243f8	8c c2 06 22 0b 24 01 10 5b 4a 00 00 10 00 2e 00
>024408	1a 3e 05 c0 06 22 04 10 1a 73 00 00 10 00 2f 00
>024418	1a 3e 5c c5 06 22 0b 24 a9 40 00 00 14 00 30 00
>024428	56 ce c7 c9 1e c0 06 22 0b 24 05 10 bd 84 00 00
>024438	10 00 31 00 86 cd a8 cb 1e c0 06 22 7c 40 00 00
>024448	10 00 32 00 cb cc 50 ca 12 c0 06 22 7f 9f 00 00
>024458	12 00 33 00 1a 3e d0 cd 85 c2 06 22 0b 24 d3 48
>024468	00 00 10 00 34 00 55 ce 88 c2 06 22 01 10 66 aa
>024478	00 00 14 00 35 00 1a 3e 88 cd 3d c8 13 c0 06 22
>024488	03 10 62 a9 00 00 16 00 36 00 1a 3e a7 cd e8 c8
>024498	0a c0 06 22 0b 24 05 10 43 a9 00 00 16 00 37 00
>0244a8	1a 3e 32 ce dd ca 0c c0 06 22 0b 24 02 10 3e a6
>0244b8	00 00 12 00 38 00 1a 3e 49 c5 06 22 0b 24 06 10
>0244c8	00 45 00 00 14 00 39 00 1a 3e 7f cd 18 c0 06 22
>0244d8	0b 24 01 10 45 60 00 00 14 00 3a 00 1a 3e 04 cd
>0244e8	c0 ca 13 c0 06 22 04 10 ec 77 00 00 12 00 3b 00
>0244f8	1a 3e 10 c0 06 22 0b 24 06 10 77 43 00 00 12 00
>024508	3c 00 5a cd 1d c4 06 22 0b 24 04 10 ae 60 00 00
>024518	0e 00 3d 00 18 c0 06 22 04 10 e3 8e 00 00 12 00
>024528	3e 00 2e cd 7b cd 16 c0 06 22 0b 24 66 40 00 00
>024538	16 00 3f 00 1a 3e cc cc d2 cd 1d c0 06 22 0b 24
>024548	05 10 ac a8 00 00 0e 00 40 00 dc cd 21 c2 06 22
>024558	34 40 00 00 10 00 41 00 1a 3e 88 cd 01 c0 06 22
>024568	18 40 00 00 10 00 42 00 f6 c4 06 22 0b 24 02 10
>024578	cf b0 00 00 10 00 43 00 1a 3e e1 c5 06 22 01 10
>024588	48 aa 00 00 10 00 44 00 1a 3e f9 cc 77 c3 06 22
>024598	86 a4 00 00 12 00 45 00 e1 cd 7a cd 17 c0 06 22
>0245a8	0b 24 be 40 00 00 10 00 46 00 1a 3e 21 c5 06 22
>0245b8	0b 24 09 40 00 00 44 00 47 00 ce dc 1d d0 00 40
>0245c8	19 32 06 22 0b 24 05 10 e1 70 17 32 ce dc 1d d0
>0245d8	01 40 19 32 06 22 11 40 17 32 ce dc 1d d0 02 40
>0245e8	19 32 06 22 0b 24 ae 40 17 32 ce dc 1d d0 03 40
>0245f8	19 32 06 22 02 10 a5 9d 00 00 44 00 48 00 2c dd
>024608	1c d0 00 40 19 32 06 22 0b 24 02 10 4d b6 17 32
>024618	2c dd 1c d0 01 40 19 32 06 22 03 10 8b 41 17 32
>024628	2c dd 1c d0 02 40 19 32 06 22 01 10 70 5e 17 32
>024638	2c dd 1c d0 03 40 19 32 06 22 6a 40 00 00 4e 00
>024648	49 00 cf dc 72 d0 00 40 19 32 06 22 82 40 17 32
>024658	cf dc 72 d0 01 40 19 32 06 22 02 10 4b af 17 32
>024668	cf dc 72 d0 02 40 19 32 06 22 54 40 17 32 cf dc
>024678	72 d0 03 40 19 32 06 22 0b 24 5e 40 17 32 cf dc
>024688	72 d0 04 40 19 32 06 22 57 40 00 00 68 00 4a 00
>024698	fc dd 02 d0 00 40 19 32 06 22 0b 24 01 10 65 59
>0246a8	17 32 fc dd 02 d0 01 40 19 32 06 22 0b 24 03 10
>0246b8	8a 7e 17 32 fc dd 02 d0 02 40 19 32 06 22 c3 40
>0246c8	17 32 fc dd 02 d0 03 40 19 32 06 22 0b 24 87 40
>0246d8	17 32 fc dd 02 d0 04 40 19 32 06 22 0b 24 01 10
>0246e8	88 55 17 32 fc dd 02 d0 05 40 19 32 06 22 01 10
>0246f8	67 53 00 00 2c 00 4b 00 04 d5 00 40 19 32 06 22
>024708	05 10 dc a0 17 32 04 d5 01 40 19 32 06 22 0b 24
>024718	47 40 17 32 04 d5 02 40 19 32 06 22 0b 89 00 00
>024728	3c 00 4c 00 e7 d5 00 40 19 32 06 22 96 bc 17 32
>024738	e7 d5 01 40 19 32 06 22 0b 24 02 10 fb ad 17 32
>024748	e7 d5 02 40 19 32 06 22 04 10 4d b3 17 32 e7 d5
>024758	03 40 19 32 06 22 0b 24 11 7e 00 00 3e 00 4d 00
>024768	51 d5 00 40 19 32 06 22 04 10 9e 9a 17 32 51 d5
>024778	01 40 19 32 06 22 04 10 0c 82 17 32 51 d5 02 40
>024788	19 32 06 22 02 10 75 46 17 32 51 d5 03 40 19 32
>024798	06 22 0b 24 03 10 3d 83 00 00 46 00 4e 00 b4 dd
>0247a8	4e d1 00 40 19 32 06 22 03 10 de bd 17 32 b4 dd
>0247b8	4e d1 01 40 19 32 06 22 0b 24 05 10 4f 71 17 32
>0247c8	b4 dd 4e d1 02 40 19 32 06 22 0b 24 e9 99 17 32
>0247d8	b4 dd 4e d1 03 40 19 32 06 22 04 10 0c bd 00 00
>0247e8	62 00 4f 00 ca dc 0d d2 00 40 19 32 06 22 04 10
>0247f8	18 8d 17 32 ca dc 0d d2 01 40 19 32 06 22 31 40
>024808	17 32 ca dc 0d d2 02 40 19 32 06 22 0b 24 02 10
>024818	5f be 17 32 ca dc 0d d2 03 40 19 32 06 22 43 40
>024828	17 32 ca dc 0d d2 04 40 19 32 06 22 02 10 f7 85
>024838	17 32 ca dc 0d d2 05 40 19 32 06 22 03 10 51 a5
>024848	00 00 44 00 50 00 d3 dc 0a d0 00 40 19 32 06 22
>024858	0b 24 6a 81 17 32 d3 dc 0a d0 01 40 19 32 06 22
>024868	0b 24 02 10 ac 72 17 32 d3 dc 0a d0 02 40 19 32
>024878	06 22 03 10 bf a4 17 32 d3 dc 0a d0 03 40 19 32
>024888	06 22 0b 40 00 00 18 00 51 00 1b 3e 18 32 01 10
>024898	48 aa 0d 26 57 40 19 32 06 22 b1 42 00 00 1a 00
>0248a8	52 00 1b 3e 18 32 1a c0 0d 26 cb cc 50 ca 12 c0
>0248b8	19 32 06 22 00 40 00 00 20 00 53 00 1b 3e 18 32
>0248c8	fc dd 02 d0 00 40 19 32 0c 26 14 40 19 32 06 22
>0248d8	0b 24 17 10 e4 bb 00 00 1c 00 54 00 1b 3e 18 32
>0248e8	0b 24 17 99 0c 26 14 40 19 32 06 22 0b 24 0d 10
>0248f8	cc b5 00 00 1c 00 55 00 1b 3e 18 32 0b 24 64 40
>024908	0c 26 39 c6 19 32 06 22 0b 24 96 11 60 50 00 00
>024918	1e 00 56 00 1b 3e 18 32 0b 24 01 10 61 83 0c 26
>024928	71 40 19 32 06 22 0b 24 ac 10 d1 7d 00 00 24 00
>024938	57 00 1b 3e 18 32 cf dc 72 d0 02 40 19 32 0a 24
>024948	ca dc 0d d2 05 40 19 32 19 32 06 22 03 10 a5 a5
>024958	00 00 1a 00 58 00 1b 3e 18 32 cf c5 0d 26 0b 24
>024968	03 10 25 97 19 32 06 22 00 40 00 00 1a 00 59 00
>024978	1b 3e 18 32 0b 24 d3 48 0a 24 18 40 19 32 06 22
>024988	0b 24 bb 48 00 00 1a 00 5a 00 1b 3e 18 32 7f 9f
>024998	0c 26 21 c5 19 32 06 22 0b 24 06 10 77 9b 00 00
>0249a8	16 00 5b 00 1b 3e 18 32 14 40 0d 26 71 40 19 32
>0249b8	06 22 00 40 00 00 1a 00 5c 00 1b 3e 18 32 05 10
>0249c8	58 82 0c 26 71 40 19 32 06 22 6f 12 d8 88 00 00
>0249d8	1e 00 5d 00 1b 3e 18 32 b4 cd ff c9 16 c0 02 20
>0249e8	05 10 58 82 19 32 06 22 05 10 79 82 00 00 20 00
>0249f8	5e 00 1b 3e 18 32 29 ce f9 c8 14 c0 01 20 ca dc
>024a08	0d d2 01 40 19 32 19 32 06 22 20 40 00 00 1a 00
>024a18	5f 00 1b 3e 18 32 29 ce f9 c8 14 c0 01 20 69 40
>024a28	19 32 06 22 60 40 00 00 1a 00 60 00 1b 3e 18 32
>024a38	76 40 0b 24 5a cd 1d c4 19 32 06 22 04 10 24 61
>024a48	00 00 1e 00 61 00 1b 3e 18 32 3a ce 4c c8 24 c0
>024a58	02 20 0b 24 a9 40 19 32 06 22 0b 24 89 40 00 00
>024a68	1e 00 62 00 1b 3e 18 32 5d cd 41 c3 0b 24 2e cd
>024a78	7b cd 16 c0 19 32 06 22 05 10 be 82 00 00 18 00
>024a88	63 00 1b 3e 18 32 14 40 01 20 04 10 30 5f 19 32
>024a98	06 22 10 40 00 00 1c 00 64 00 1b 3e 18 32 18 40
>024aa8	02 20 7f cd 18 c0 19 32 06 22 0b 24 01 10 45 60
>024ab8	00 00 1e 00 65 00 1b 3e 18 32 0b 24 01 10 45 60
>024ac8	03 20 0b 24 d3 48 19 32 06 22 01 10 96 68 00 00
>024ad8	1e 00 66 00 1b 3e 18 32 d1 cd 8c c2 0d 26 86 cd
>024ae8	a8 cb 1e c0 19 32 06 22 0b 24 1d 41 00 00 1c 00
>024af8	67 00 1b 3e 18 32 12 ce 1a c0 0c 26 05 10 c4 ad
>024b08	19 32 06 22 67 12 64 45 00 00 1c 00 68 00 1b 3e
>024b18	18 32 88 cd 01 c0 0a 24 05 10 c4 ad 19 32 06 22
>024b28	05 10 dc ad 00 00 1c 00 69 00 1b 3e 18 32 2e cd
>024b38	7b cd 16 c0 0d 26 04 10 9e 9a 19 32 06 22 00 40
>024b48	00 00 1a 00 6a 00 1b 3e 18 32 0b 40 01 20 0b 24
>024b58	05 10 c6 88 19 32 06 22 0a 40 00 00 1a 00 6b 00
>024b68	1b 3e 18 32 0e c0 0d 26 0b 24 09 40 19 32 06 22
>024b78	0b 24 0c 40 00 00 1a 00 6c 00 1b 3e 18 32 76 40
>024b88	0c 26 04 10 0c 82 19 32 06 22 14 12 88 b1 00 00
>024b98	22 00 6d 00 1b 3e 18 32 2e cd 7b cd 16 c0 0a 24
>024ba8	0b 24 01 10 b5 a3 19 32 06 22 0b 24 01 10 1b a4
>024bb8	00 00 20 00 6e 00 1b 3e 18 32 2c dd 1c d0 03 40
>024bc8	19 32 0c 26 01 10 e4 41 19 32 06 22 6b 10 68 88
>024bd8	00 00 1e 00 6f 00 1b 3e 18 32 3a ce 4c c8 24 c0
>024be8	0d 26 04 cd c0 ca 13 c0 19 32 06 22 00 40 00 00
>024bf8	1e 00 70 00 1b 3e 18 32 87 cd 0a c0 03 20 86 cd
>024c08	a8 cb 1e c0 19 32 06 22 04 10 9f 86 00 00 1c 00
>024c18	71 00 1b 3e 18 32 88 cd 01 c0 0b 24 e7 d5 03 40
>024c28	19 32 19 32 06 22 29 7e 00 00 20 00 72 00 1b 3e
>024c38	18 32 0b 24 04 10 ae 60 02 20 88 cd 01 c0 19 32
>024c48	06 22 0b 24 04 10 a6 60 00 00 1a 00 73 00 1b 3e
>024c58	18 32 05 ce 3e c4 01 20 88 cd 01 c0 19 32 06 22
>024c68	00 40 00 00 1c 00 74 00 1b 3e 18 32 cf c5 0c 26
>024c78	01 10 67 53 19 32 06 22 0b 24 73 10 3c 54 00 00
>024c88	16 00 75 00 1b 3e 18 32 76 40 02 20 18 40 19 32
>024c98	06 22 7e 40 00 00 18 00 76 00 1b 3e 18 32 1a c0
>024ca8	01 20 5e ce 98 c3 19 32 06 22 08 40 00 00 1c 00
>024cb8	77 00 1b 3e 18 32 c5 cc 07 c0 0a 24 74 40 19 32
>024cc8	06 22 0b 24 04 10 c4 9a 00 00 1a 00 78 00 1b 3e
>024cd8	18 32 05 10 25 4e 0c 26 69 40 19 32 06 22 18 12
>024ce8	2d 8d 00 00 1a 00 79 00 1b 3e 18 32 21 c5 0d 26
>024cf8	e1 cd 7a cd 17 c0 19 32 06 22 00 40 00 00 1e 00
>024d08	7a 00 1b 3e 18 32 0b 24 01 10 51 7e 02 20 71 40
>024d18	19 32 06 22 0b 24 01 10 01 7e 00 00 20 00 7b 00
>024d28	1b 3e 18 32 0b 24 04 10 7b 6e 0c 26 e1 cd 7a cd
>024d38	17 c0 19 32 06 22 3c 13 4a bf 00 00 20 00 7c 00
>024d48	1b 3e 18 32 05 10 c4 ad 0a 24 ca dc 0d d2 01 40
>024d58	19 32 19 32 06 22 05 10 f5 ad 00 00 1a 00 7d 00
>024d68	1b 3e 18 32 0b 24 64 40 03 20 d8 c4 19 32 06 22
>024d78	02 10 da a1 00 00 1a 00 7e 00 1b 3e 18 32 c7 cc
>024d88	99 c3 03 20 f0 c4 19 32 06 22 0b 24 03 99 00 00
>024d98	1c 00 7f 00 1b 3e 18 32 1a c0 0b 24 05 10 55 af
>024da8	19 32 06 22 0b 24 05 10 ed ae 00 00 1c 00 80 00
>024db8	1b 3e 18 32 5c c5 02 20 0b 24 02 10 3e a6 19 32
>024dc8	06 22 0b 24 29 40 00 00 1c 00 81 00 1b 3e 18 32
>024dd8	1a c0 03 20 f3 cc dd c4 19 32 06 22 0b 24 04 10
>024de8	cc a3 00 00 1c 00 82 00 1b 3e 18 32 68 40 0b 24
>024df8	0b 24 01 10 61 83 19 32 06 22 01 10 c9 83 00 00
>024e08	1c 00 83 00 1b 3e 18 32 39 ce 12 c0 0a 24 0b 24
>024e18	66 40 19 32 06 22 05 10 5e ad 00 00 1e 00 84 00
>024e28	1b 3e 18 32 0b 24 be 40 03 20 04 10 30 5f 19 32
>024e38	06 22 0b 24 04 10 8e 5f 00 00 1a 00 85 00 1b 3e
>024e48	18 32 0b 24 17 99 03 20 1a c0 19 32 06 22 0b 24
>024e58	7f 99 00 00 18 00 86 00 1b 3e 18 32 18 c0 0a 24
>024e68	14 40 19 32 06 22 04 10 f7 8e 00 00 1e 00 87 00
>024e78	1b 3e 18 32 0b 24 64 40 02 20 0b 24 05 10 c6 88
>024e88	19 32 06 22 0b 24 42 40 00 00 1a 00 88 00 1b 3e
>024e98	18 32 dc cd 21 c2 0a 24 cf c5 19 32 06 22 0b 24
>024ea8	30 40 00 00 1a 00 89 00 1b 3e 18 32 0b 24 05 10
>024eb8	c6 88 01 20 76 40 19 32 06 22 32 40 00 00 1e 00
>024ec8	8a 00 1b 3e 18 32 cf dc 72 d0 02 40 19 32 0d 26
>024ed8	7f cd 18 c0 19 32 06 22 00 40 00 00 20 00 8b 00
>024ee8	1b 3e 18 32 2c dd 1c d0 03 40 19 32 02 20 0b 24
>024ef8	11 7e 19 32 06 22 0b 24 11 7e 00 00 1c 00 8c 00
>024f08	1b 3e 18 32 01 10 cb 63 01 20 0b 24 09 40 19 32
>024f18	06 22 01 10 c3 63 00 00 1a 00 8d 00 1b 3e 18 32
>024f28	0b 24 02 10 ba a1 0d 26 21 c5 19 32 06 22 4d 67
>024f38	00 00 1c 00 8e 00 1b 3e 18 32 ca dc 0d d2 02 40
>024f48	19 32 0d 26 5c c5 19 32 06 22 43 42 00 00 1c 00
>024f58	8f 00 1b 3e 18 32 76 40 02 20 f3 cc dd c4 19 32
>024f68	06 22 0b 24 04 10 82 a3 00 00 1a 00 90 00 1b 3e
>024f78	18 32 dc cd 21 c2 03 20 39 c6 19 32 06 22 04 10
>024f88	ec 47 00 00 18 00 91 00 1b 3e 18 32 39 c6 03 20
>024f98	54 40 19 32 06 22 04 10 8c 47 00 00 18 00 92 00
>024fa8	1b 3e 18 32 18 c0 02 20 0b 40 19 32 06 22 04 10
>024fb8	eb 8e 00 00 1a 00 93 00 1b 3e 18 32 0b 24 a9 40
>024fc8	03 20 7c 40 19 32 06 22 0b 24 d5 40 00 00 1e 00
>024fd8	94 00 1b 3e 18 32 0b 24 04 10 38 9b 0a 24 74 40
>024fe8	19 32 06 22 0b 24 04 10 c4 9a 00 00 1c 00 95 00
>024ff8	1b 3e 18 32 0b 24 03 10 25 97 0d 26 0b 24 a9 40
>025008	19 32 06 22 c9 42 00 00 1a 00 96 00 1b 3e 18 32
>025018	06 c0 0c 26 76 40 19 32 06 22 0b 24 b2 11 0e 6b
>025028	00 00 1c 00 97 00 1b 3e 18 32 21 c5 0c 26 04 10
>025038	e3 8e 19 32 06 22 0b 24 29 10 fb 85 00 00 1a 00
>025048	98 00 1b 3e 18 32 f6 c4 0a 24 68 40 19 32 06 22
>025058	0b 24 02 10 67 b0 00 00 1c 00 99 00 1b 3e 18 32
>025068	15 c0 03 20 dc cd 21 c2 19 32 06 22 0b 24 05 10
>025078	f2 88 00 00 20 00 9a 00 1b 3e 18 32 f6 c4 03 20
>025088	cf dc 72 d0 02 40 19 32 19 32 06 22 0b 24 02 10
>025098	9b b0 00 00 1c 00 9b 00 1b 3e 18 32 0b 24 09 40
>0250a8	02 20 01 10 66 aa 19 32 06 22 0b 24 09 40 00 00
>0250b8	18 00 9c 00 1b 3e 18 32 69 40 0b 24 e0 c5 19 32
>0250c8	06 22 01 10 1e a4 00 00 1e 00 9d 00 1b 3e 18 32
>0250d8	88 cd 3d c8 13 c0 0b 24 0b 24 a9 40 19 32 06 22
>0250e8	03 10 0b aa 00 00 1e 00 9e 00 1b 3e 18 32 2c cd
>0250f8	48 cb 1d c0 0d 26 0b 24 a9 40 19 32 06 22 0b 24
>025108	36 43 00 00 1c 00 9f 00 1b 3e 18 32 04 10 18 8d
>025118	0d 26 3a ce 4c c8 24 c0 19 32 06 22 fe 44 00 00
>025128	1c 00 a0 00 1b 3e 18 32 0b 24 5e 40 0c 26 31 c6
>025138	19 32 06 22 0b 24 78 10 8a 64 00 00 1a 00 a1 00
>025148	1b 3e 18 32 1a c0 0a 24 f6 c4 19 32 06 22 0b 24
>025158	02 10 67 b0 00 00 1e 00 a2 00 1b 3e 18 32 88 cd
>025168	01 c0 0a 24 e1 cd 7a cd 17 c0 19 32 06 22 0b 24
>025178	a6 40 00 00 18 00 a3 00 1b 3e 18 32 86 a4 01 20
>025188	0b 24 be 40 19 32 06 22 02 a4 00 00 1e 00 a4 00
>025198	1b 3e 18 32 cc cc d2 cd 1d c0 03 20 31 40 19 32
>0251a8	06 22 0b 24 05 10 9b a8 00 00 1a 00 a5 00 1b 3e
>0251b8	18 32 12 ce 1a c0 01 20 c7 cc 99 c3 19 32 06 22
>0251c8	69 40 00 00 1a 00 a6 00 1b 3e 18 32 02 10 68 5b
>0251d8	02 20 f0 c4 19 32 06 22 02 10 7c 5b 00 00 20 00
>0251e8	a7 00 1b 3e 18 32 cf dc 72 d0 00 40 19 32 02 20
>0251f8	01 10 48 aa 19 32 06 22 01 10 ca aa 00 00 18 00
>025208	a8 00 1b 3e 18 32 5c c5 0c 26 18 40 19 32 06 22
>025218	0b 24 d8 4f 00 00 1c 00 a9 00 1b 3e 18 32 e1 cd
>025228	7a cd 17 c0 03 20 54 40 19 32 06 22 0b 24 ea 40
>025238	00 00 1c 00 aa 00 1b 3e 18 32 04 cd c0 ca 13 c0
>025248	0a 24 71 40 19 32 06 22 04 10 5d 78 00 00 24 00
>025258	ab 00 1b 3e 18 32 ce dc 1d d0 02 40 19 32 01 20
>025268	0b 24 05 10 4f 71 19 32 06 22 0b 24 05 10 f0 71
>025278	00 00 1a 00 ac 00 1b 3e 18 32 31 40 02 20 06 c0
>025288	19 32 06 22 0b 24 03 10 05 97 00 00 1c 00 ad 00
>025298	1b 3e 18 32 0b 24 02 10 4d b6 03 20 cf c5 19 32
>0252a8	06 22 02 10 2f b6 00 00 1c 00 ae 00 1b 3e 18 32
>0252b8	88 cd 01 c0 0d 26 04 d5 02 40 19 32 19 32 06 22
>0252c8	00 40 00 00 1c 00 af 00 1b 3e 18 32 69 40 0a 24
>0252d8	d1 cd 8c c2 19 32 06 22 0b 24 01 10 f2 49 00 00
>0252e8	1e 00 b0 00 1b 3e 18 32 0b 24 06 10 77 43 03 20
>0252f8	57 40 19 32 06 22 0b 24 06 10 22 43 00 00 1c 00
>025308	b1 00 1b 3e 18 32 88 cd 01 c0 0c 26 0b 24 64 40
>025318	19 32 06 22 0b 24 60 49 00 00 16 00 b2 00 1b 3e
>025328	18 32 0b 89 0d 26 82 40 19 32 06 22 8f 40 00 00
>025338	1a 00 b3 00 1b 3e 18 32 04 10 d8 47 0b 24 71 40
>025348	19 32 06 22 04 10 67 47 00 00 1c 00 b4 00 1b 3e
>025358	18 32 5d cd 41 c3 0d 26 0b 24 64 40 19 32 06 22
>025368	0b 24 10 47 00 00 1e 00 b5 00 1b 3e 18 32 c5 cc
>025378	07 c0 0b 24 0b 24 09 40 19 32 06 22 0b 24 04 10
>025388	2f 9b 00 00 1c 00 b6 00 1b 3e 18 32 0b 24 04 10
>025398	38 9b 03 20 5c c5 19 32 06 22 04 10 9f 9b 00 00
>0253a8	20 00 b7 00 1b 3e 18 32 d0 cd 39 ca 03 c0 0c 26
>0253b8	b4 cd ff c9 16 c0 19 32 06 22 72 10 a4 95 00 00
>0253c8	1c 00 b8 00 1b 3e 18 32 cb cc 50 ca 12 c0 0b 24
>0253d8	12 ce 1a c0 19 32 06 22 16 9f 00 00 1a 00 b9 00
>0253e8	1b 3e 18 32 02 10 a5 9d 0a 24 f0 c4 19 32 06 22
>0253f8	02 10 b9 9d 00 00 1e 00 ba 00 1b 3e 18 32 cf dc
>025408	72 d0 00 40 19 32 0b 24 f6 c4 19 32 06 22 02 10
>025418	51 b1 00 00 1e 00 bb 00 1b 3e 18 32 5c c5 0a 24
>025428	ca dc 0d d2 04 40 19 32 19 32 06 22 02 10 4e 85
>025438	00 00 18 00 bc 00 1b 3e 18 32 03 c0 0c 26 74 40
>025448	19 32 06 22 50 12 c4 a8 00 00 1e 00 bd 00 1b 3e
>025458	18 32 86 cd a8 cb 1e c0 03 20 05 10 55 af 19 32
>025468	06 22 05 10 29 af 00 00 1c 00 be 00 1b 3e 18 32
>025478	74 40 03 20 04 cd c0 ca 13 c0 19 32 06 22 04 10
>025488	98 77 00 00 1e 00 bf 00 1b 3e 18 32 28 ce 4b cc
>025498	18 c0 02 20 f0 c4 19 32 06 22 0b 24 03 10 0c 91
>0254a8	00 00 20 00 c0 00 1b 3e 18 32 0b 24 05 10 e1 70
>0254b8	0a 24 dc cd 21 c2 19 32 06 22 0b 24 05 10 ad 70
>0254c8	00 00 1c 00 c1 00 1b 3e 18 32 d3 dc 0a d0 03 40
>0254d8	19 32 03 20 86 a4 19 32 06 22 8d a4 00 00 1e 00
>0254e8	c2 00 1b 3e 18 32 0b 24 02 10 44 61 0c 26 68 40
>0254f8	19 32 06 22 0b 24 eb 10 a0 43 00 00 1c 00 c3 00
>025508	1b 3e 18 32 5a cd 1d c4 0a 24 6a 40 19 32 06 22
>025518	0b 24 04 10 44 60 00 00 1c 00 c4 00 1b 3e 18 32
>025528	5c c5 0b 24 a7 cd e8 c8 0a c0 19 32 06 22 05 10
>025538	9a a8 00 00 1a 00 c5 00 1b 3e 18 32 0b 24 02 10
>025548	01 48 01 20 11 40 19 32 06 22 11 40 00 00 1c 00
>025558	c6 00 1b 3e 18 32 0b 24 01 10 51 7e 0d 26 68 40
>025568	19 32 06 22 0b 24 d4 41 00 00 1a 00 c7 00 1b 3e
>025578	18 32 10 c0 0c 26 68 40 19 32 06 22 0b 24 72 12
>025588	58 a8 00 00 18 00 c8 00 1b 3e 18 32 74 40 0b 24
>025598	d2 a3 19 32 06 22 0b 24 5e a3 00 00 1c 00 c9 00
>0255a8	1b 3e 18 32 74 40 0b 24 01 10 66 aa 19 32 06 22
>0255b8	0b 24 01 10 f2 a9 00 00 18 00 ca 00 1b 3e 18 32
>0255c8	0e c0 01 20 04 10 1a 73 19 32 06 22 10 40 00 00
>0255d8	1a 00 cb 00 1b 3e 18 32 a8 cd 15 c0 01 20 0b 24
>0255e8	66 40 19 32 06 22 92 a3 00 00 1e 00 cc 00 1b 3e
>0255f8	18 32 3a ce 4c c8 24 c0 03 20 04 10 d8 47 19 32
>025608	06 22 04 10 ae 47 00 00 1a 00 cd 00 1b 3e 18 32
>025618	34 40 02 20 05 10 25 4e 19 32 06 22 05 10 35 4e
>025628	00 00 20 00 ce 00 1b 3e 18 32 ce dc 1d d0 01 40
>025638	19 32 01 20 0b 24 03 10 1c 91 19 32 06 22 00 40
>025648	00 00 1e 00 cf 00 1b 3e 18 32 76 40 02 20 0b 24
>025658	01 10 45 60 19 32 06 22 0b 24 01 10 01 60 00 00
>025668	1c 00 d0 00 1b 3e 18 32 2e cd 7b cd 16 c0 03 20
>025678	0b 24 09 40 19 32 06 22 6d 40 00 00 1c 00 d1 00
>025688	1b 3e 18 32 cf c5 02 20 1b cd d1 cd 21 c0 19 32
>025698	06 22 0b 24 41 40 00 00 16 00 d2 00 1b 3e 18 32
>0256a8	21 c5 0a 24 74 40 19 32 06 22 6b 40 00 00 1e 00
>0256b8	d3 00 1b 3e 18 32 68 40 03 20 0b 24 02 10 4d b6
>0256c8	19 32 06 22 0b 24 02 10 25 b6 00 00 24 00 d4 00
>0256d8	1b 3e 18 32 0b 24 01 10 51 7e 0b 24 ca dc 0d d2
>0256e8	03 40 19 32 19 32 06 22 0b 24 01 10 94 7e 00 00
>0256f8	16 00 d5 00 1b 3e 18 32 57 40 01 20 21 c5 19 32
>025708	06 22 57 40 00 00 20 00 d6 00 1b 3e 18 32 0b 24
>025718	04 10 7b 6e 0b 24 0b 24 09 40 19 32 06 22 0b 24
>025728	04 10 72 6e 00 00 1a 00 d7 00 1b 3e 18 32 34 40
>025738	03 20 f6 c4 19 32 06 22 0b 24 02 10 fb b0 00 00
>025748	1a 00 d8 00 1b 3e 18 32 21 c5 0d 26 cc cc d2 cd
>025758	1d c0 19 32 06 22 00 40 00 00 1a 00 d9 00 1b 3e
>025768	18 32 06 ce 23 c0 0d 26 43 40 19 32 06 22 0b 24
>025778	51 44 00 00 1c 00 da 00 1b 3e 18 32 74 40 0b 24
>025788	04 10 e3 86 19 32 06 22 0b 24 04 10 6f 86 00 00
>025798	18 00 db 00 1b 3e 18 32 1a c0 0c 26 18 c0 19 32
>0257a8	06 22 e0 11 38 4c 00 00 1e 00 dc 00 1b 3e 18 32
>0257b8	7c 40 02 20 b9 cd 82 ca 07 c0 19 32 06 22 0b 24
>0257c8	02 10 01 48 00 00 1e 00 dd 00 1b 3e 18 32 0e c0
>0257d8	02 20 0b 24 04 10 ae 60 19 32 06 22 0b 24 04 10
>0257e8	8a 60 00 00 20 00 de 00 1b 3e 18 32 88 cd 01 c0
>0257f8	0c 26 0b 24 04 10 a4 a3 19 32 06 22 0b 24 72 10
>025808	60 97 00 00 1a 00 df 00 1b 3e 18 32 1a c0 0d 26
>025818	04 d5 02 40 19 32 19 32 06 22 00 40 00 00 1a 00
>025828	e0 00 1b 3e 18 32 0b 24 a9 40 0c 26 34 40 19 32
>025838	06 22 0b 24 54 62 00 00 18 00 e1 00 1b 3e 18 32
>025848	e1 c5 02 20 74 40 19 32 06 22 01 10 7c aa 00 00
>025858	1e 00 e2 00 1b 3e 18 32 74 40 03 20 0b 24 03 10
>025868	1c 91 19 32 06 22 0b 24 03 10 70 91 00 00 20 00
>025878	e3 00 1b 3e 18 32 04 10 d8 47 0a 24 cf dc 72 d0
>025888	03 40 19 32 19 32 06 22 04 10 7a 47 00 00 22 00
>025898	e4 00 1b 3e 18 32 0b 24 05 10 c6 88 0c 26 b4 cd
>0258a8	ff c9 16 c0 19 32 06 22 0b 24 75 12 66 5f 00 00
>0258b8	1e 00 e5 00 1b 3e 18 32 d3 dc 0a d0 01 40 19 32
>0258c8	0d 26 76 40 19 32 06 22 0b 24 99 42 00 00 18 00
>0258d8	e6 00 1b 3e 18 32 5c c5 03 20 f0 c4 19 32 06 22
>0258e8	0b 24 bd 40 00 00 1c 00 e7 00 1b 3e 18 32 06 ce
>0258f8	23 c0 0a 24 14 40 19 32 06 22 0b 24 02 10 30 61
>025908	00 00 20 00 e8 00 1b 3e 18 32 0b 24 04 10 a4 a3
>025918	0c 26 88 cd 01 c0 19 32 06 22 0b 24 72 10 60 97
>025928	00 00 1c 00 e9 00 1b 3e 18 32 ca dc 0d d2 03 40
>025938	19 32 01 20 e0 c5 19 32 06 22 43 40 00 00 20 00
>025948	ea 00 1b 3e 18 32 0b 24 02 10 01 48 02 20 12 ce
>025958	1a c0 19 32 06 22 0b 24 02 10 01 48 00 00 1e 00
>025968	eb 00 1b 3e 18 32 d2 a3 02 20 cf dc 72 d0 03 40
>025978	19 32 19 32 06 22 0b 24 0e 40 00 00 1e 00 ec 00
>025988	1b 3e 18 32 0b 24 02 10 01 48 0c 26 0b 40 19 32
>025998	06 22 0b 24 16 10 0b 98 00 00 16 00 ed 00 1b 3e
>0259a8	18 32 34 40 01 20 f6 c4 19 32 06 22 30 40 00 00
>0259b8	20 00 ee 00 1b 3e 18 32 0b 24 be 40 0a 24 0b 24
>0259c8	01 10 61 83 19 32 06 22 0b 24 01 10 1f 84 00 00
>0259d8	20 00 ef 00 1b 3e 18 32 88 cd 01 c0 0c 26 0b 24
>0259e8	02 10 4d b6 19 32 06 22 0b 24 46 10 38 57 00 00
>0259f8	1e 00 f0 00 1b 3e 18 32 cf dc 72 d0 03 40 19 32
>025a08	0b 24 0e c0 19 32 06 22 0b 24 d2 40 00 00 18 00
>025a18	f1 00 1b 3e 18 32 dc cd 21 c2 0a 24 68 40 19 32
>025a28	06 22 9c 40 00 00 22 00 f2 00 1b 3e 18 32 ca dc
>025a38	0d d2 03 40 19 32 0b 24 0b 24 03 10 25 97 19 32
>025a48	06 22 03 10 68 97 00 00 1c 00 f3 00 1b 3e 18 32
>025a58	e1 cd 7a cd 17 c0 03 20 0b 24 47 40 19 32 06 22
>025a68	fb 40 00 00 1e 00 f4 00 1b 3e 18 32 b4 cd ff c9
>025a78	16 c0 0c 26 04 10 e3 8e 19 32 06 22 09 12 33 92
>025a88	00 00 20 00 f5 00 1b 3e 18 32 56 ce c7 c9 1e c0
>025a98	0a 24 0b 24 ae 40 19 32 06 22 0b 24 05 10 6b 85
>025aa8	00 00 1a 00 f6 00 1b 3e 18 32 82 40 0c 26 e0 c5
>025ab8	19 32 06 22 0b 24 e7 10 ea 61 00 00 20 00 f7 00
>025ac8	1b 3e 18 32 2e cd 7b cd 16 c0 03 20 29 ce f9 c8
>025ad8	14 c0 19 32 06 22 05 10 f8 40 00 00 1e 00 f8 00
>025ae8	1b 3e 18 32 e1 c5 0a 24 ca dc 0d d2 01 40 19 32
>025af8	19 32 06 22 01 10 79 aa 00 00 18 00 f9 00 1b 3e
>025b08	18 32 18 c0 03 20 76 40 19 32 06 22 04 10 95 8e
>025b18	00 00 1a 00 fa 00 1b 3e 18 32 28 ce 4b cc 18 c0
>025b28	01 20 18 40 19 32 06 22 00 40 00 00 1e 00 fb 00
>025b38	1b 3e 18 32 21 c5 03 20 ce dc 1d d0 00 40 19 32
>025b48	19 32 06 22 05 10 e8 70 00 00 18 00 fc 00 1b 3e
>025b58	18 32 34 40 0a 24 dc cd 21 c2 19 32 06 22 68 40
>025b68	00 00 1c 00 fd 00 1b 3e 18 32 04 10 ec 77 0a 24
>025b78	0b 24 be 40 19 32 06 22 04 10 2e 77 00 00 1c 00
>025b88	fe 00 1b 3e 18 32 d0 cd 39 ca 03 c0 03 20 11 40
>025b98	19 32 06 22 01 10 f5 41 00 00 1c 00 ff 00 1b 3e
>025ba8	18 32 0b 24 06 10 77 43 0d 26 0b 24 64 40 19 32
>025bb8	06 22 b6 47 00 00 1e 00 00 01 1b 3e 18 32 05 c0
>025bc8	01 20 ce dc 1d d0 02 40 19 32 19 32 06 22 04 10
>025bd8	12 73 00 00 1c 00 01 01 1b 3e 18 32 0b 24 66 40
>025be8	01 20 04 d5 02 40 19 32 19 32 06 22 0a 89 00 00
>025bf8	20 00 02 01 1b 3e 18 32 04 10 e3 8e 0b 24 fc dd
>025c08	02 d0 02 40 19 32 19 32 06 22 04 10 20 8e 00 00
>025c18	1e 00 03 01 1b 3e 18 32 0b 24 be 40 0b 24 29 ce
>025c28	f9 c8 14 c0 19 32 06 22 04 10 e0 bf 00 00 1a 00
>025c38	04 01 1b 3e 18 32 1a c0 0a 24 0b 24 17 99 19 32
>025c48	06 22 0b 24 af 98 00 00 16 00 05 01 1b 3e 18 32
>025c58	34 40 0a 24 21 c5 19 32 06 22 2b 40 00 00 20 00
>025c68	06 01 1b 3e 18 32 cc cc d2 cd 1d c0 0b 24 0b 24
>025c78	47 40 19 32 06 22 0b 24 05 10 65 a8 00 00 22 00
>025c88	07 01 1b 3e 18 32 e1 cd 7a cd 17 c0 01 20 0b 24
>025c98	05 10 9e 40 19 32 06 22 0b 24 05 10 be 40 00 00
>025ca8	20 00 08 01 1b 3e 18 32 0b 24 be 40 0b 24 88 cd
>025cb8	3d c8 13 c0 19 32 06 22 0b 24 03 10 20 aa 00 00
>025cc8	22 00 09 01 1b 3e 18 32 2c dd 1c d0 03 40 19 32
>025cd8	0b 24 86 cd a8 cb 1e c0 19 32 06 22 0b 24 12 40
>025ce8	00 00 1a 00 0a 01 1b 3e 18 32 05 10 c4 ad 0b 24
>025cf8	5c c5 19 32 06 22 05 10 6d ae 00 00 1a 00 0b 01
>025d08	1b 3e 18 32 05 10 58 82 02 20 0e c0 19 32 06 22
>025d18	05 10 7c 82 00 00 1a 00 0c 01 1b 3e 18 32 0b 24
>025d28	ae 40 02 20 39 c6 19 32 06 22 0b 24 26 40 00 00
>025d38	1a 00 0d 01 1b 3e 18 32 0b 24 be 40 02 20 15 c0
>025d48	19 32 06 22 0b 24 86 40 00 00 1e 00 0e 01 1b 3e
>025d58	18 32 0b 24 17 99 0b 24 e1 cd 7a cd 17 c0 19 32
>025d68	06 22 0b 24 59 98 00 00 1a 00 0f 01 1b 3e 18 32
>025d78	68 40 0c 26 d8 c4 19 32 06 22 0b 24 1f 11 90 73
>025d88	00 00 1e 00 10 01 1b 3e 18 32 05 10 55 af 0b 24
>025d98	b4 cd ff c9 16 c0 19 32 06 22 05 10 e4 ae 00 00
>025da8	22 00 11 01 1b 3e 18 32 cf dc 72 d0 03 40 19 32
>025db8	0b 24 04 10 0c 82 19 32 06 22 0b 24 04 10 6a 82
>025dc8	00 00 1c 00 12 01 1b 3e 18 32 d0 cd 85 c2 02 20
>025dd8	a8 cd 15 c0 19 32 06 22 0b 24 01 48 00 00 18 00
>025de8	13 01 1b 3e 18 32 7f 9f 0c 26 0e c0 19 32 06 22
>025df8	56 10 8c 85 00 00 1c 00 14 01 1b 3e 18 32 fc dd
>025e08	02 d0 02 40 19 32 0d 26 e1 c5 19 32 06 22 00 40
>025e18	00 00 20 00 15 01 1b 3e 18 32 0b 24 a9 40 0a 24
>025e28	e7 d5 01 40 19 32 19 32 06 22 0b 24 02 10 a4 ae
>025e38	00 00 1e 00 16 01 1b 3e 18 32 1b cd d1 cd 21 c0
>025e48	03 20 0b 40 19 32 06 22 0b 24 01 10 5c 7e 00 00
>025e58	1a 00 17 01 1b 3e 18 32 e0 c5 0c 26 0b 24 d3 48
>025e68	19 32 06 22 b2 1f 2f 96 00 00 1c 00 18 01 1b 3e
>025e78	18 32 31 c6 0c 26 0b 24 a9 40 19 32 06 22 0b 24
>025e88	d8 10 03 61 00 00 1a 00 19 01 1b 3e 18 32 3a ce
>025e98	4c c8 24 c0 03 20 14 40 19 32 06 22 62 40 00 00
>025ea8	1e 00 1a 01 1b 3e 18 32 04 10 30 5f 0c 26 0b 24
>025eb8	be 40 19 32 06 22 0b 24 26 13 a0 65 00 00 1c 00
>025ec8	1b 01 1b 3e 18 32 12 ce 1a c0 0a 24 05 ce 3e c4
>025ed8	19 32 06 22 02 10 0f ae 00 00 1a 00 1c 01 1b 3e
>025ee8	18 32 74 40 03 20 01 10 48 aa 19 32 06 22 01 10
>025ef8	3c aa 00 00 1a 00 1d 01 1b 3e 18 32 1a c0 03 20
>025f08	04 10 30 5f 19 32 06 22 04 10 58 5f 00 00 18 00
>025f18	1e 01 1b 3e 18 32 10 c0 0d 26 1a c0 19 32 06 22
>025f28	0b 24 6a 47 00 00 1e 00 1f 01 1b 3e 18 32 0b 24
>025f38	17 99 0d 26 86 cd a8 cb 1e c0 19 32 06 22 0b 24
>025f48	b7 40 00 00 20 00 20 01 1b 3e 18 32 0b 24 a9 40
>025f58	01 20 0b 24 06 10 77 43 19 32 06 22 0b 24 06 10
>025f68	ff 43 00 00 20 00 21 01 1b 3e 18 32 2e cd 7b cd
>025f78	16 c0 0d 26 fc dd 02 d0 04 40 19 32 19 32 06 22
>025f88	00 40 00 00 1c 00 22 01 1b 3e 18 32 2c dd 1c d0
>025f98	03 40 19 32 01 20 7c 40 19 32 06 22 68 40 00 00
>025fa8	18 00 23 01 1b 3e 18 32 71 40 0d 26 87 cd 0a c0
>025fb8	19 32 06 22 00 40 00 00 18 00 24 01 1b 3e 18 32
>025fc8	96 bc 01 20 0b 24 87 40 19 32 06 22 10 bc 00 00
>025fd8	1a 00 25 01 1b 3e 18 32 18 40 0a 24 49 c5 19 32
>025fe8	06 22 0b 24 06 10 e8 44 00 00 1c 00 26 01 1b 3e
>025ff8	18 32 0b 24 17 99 0c 26 0e c0 19 32 06 22 0b 24
>026008	50 10 6c 9e 00 00 22 00 27 01 1b 3e 18 32 1b cd
>026018	d1 cd 21 c0 0a 24 3a ce 4c c8 24 c0 19 32 06 22
>026028	0b 24 01 10 db 7d 00 00 1e 00 28 01 1b 3e 18 32
>026038	01 10 48 aa 03 20 0b 24 a9 40 19 32 06 22 0b 24
>026048	01 10 e1 aa 00 00 1e 00 29 01 1b 3e 18 32 02 10
>026058	a6 ad 0c 26 3a ce 4c c8 24 c0 19 32 06 22 51 11
>026068	84 4a 00 00 1c 00 2a 01 1b 3e 18 32 39 ce 12 c0
>026078	01 20 0b 24 5e 40 19 32 06 22 05 10 80 ad 00 00
>026088	16 00 2b 01 1b 3e 18 32 11 40 01 20 f6 c4 19 32
>026098	06 22 11 40 00 00 22 00 2c 01 1b 3e 18 32 0b 24
>0260a8	06 10 00 45 0b 24 2e cd 7b cd 16 c0 19 32 06 22
>0260b8	0b 24 06 10 9a 44 00 00 22 00 2d 01 1b 3e 18 32
>0260c8	3a ce 4c c8 24 c0 03 20 a7 cd e8 c8 0a c0 19 32
>0260d8	06 22 0b 24 05 10 35 a9 00 00 1a 00 2e 01 1b 3e
>0260e8	18 32 0b 24 be 40 03 20 68 40 19 32 06 22 0b 24
>0260f8	d6 40 00 00 1c 00 2f 01 1b 3e 18 32 f0 c4 0c 26
>026108	2c cd 48 cb 1d c0 19 32 06 22 54 10 c0 af 00 00
>026118	18 00 30 01 1b 3e 18 32 04 10 e3 8e 0d 26 71 40
>026128	19 32 06 22 3a 45 00 00 22 00 31 01 1b 3e 18 32
>026138	cf dc 72 d0 03 40 19 32 02 20 0b 24 05 10 43 a9
>026148	19 32 06 22 0b 24 41 40 00 00 20 00 32 01 1b 3e
>026158	18 32 05 10 58 82 02 20 cf dc 72 d0 03 40 19 32
>026168	19 32 06 22 0b 24 06 40 00 00 1e 00 33 01 1b 3e
>026178	18 32 69 40 02 20 0b 24 06 10 00 45 19 32 06 22
>026188	0b 24 06 10 97 44 00 00 1c 00 34 01 1b 3e 18 32
>026198	fc dd 02 d0 02 40 19 32 0d 26 53 c5 19 32 06 22
>0261a8	00 40 00 00 1c 00 35 01 1b 3e 18 32 02 10 f7 85
>0261b8	01 20 0b 24 66 40 19 32 06 22 02 10 92 85 00 00
>0261c8	18 00 36 01 1b 3e 18 32 0b 24 ae 40 0d 26 7f 9f
>0261d8	19 32 06 22 00 40 00 00 1c 00 37 01 1b 3e 18 32
>0261e8	0b 24 11 7e 01 20 0b 24 be 40 19 32 06 22 0b 24
>0261f8	be 7e 00 00 20 00 38 01 1b 3e 18 32 b4 cd ff c9
>026208	16 c0 03 20 2e cd 7b cd 16 c0 19 32 06 22 0b 24
>026218	15 40 00 00 1e 00 39 01 1b 3e 18 32 68 40 02 20
>026228	0b 24 03 10 25 97 19 32 06 22 0b 24 03 10 05 97
>026238	00 00 1e 00 3a 01 1b 3e 18 32 dc cd 21 c2 0b 24
>026248	28 ce 4b cc 18 c0 19 32 06 22 03 10 50 91 00 00
>026258	22 00 3b 01 1b 3e 18 32 04 d5 01 40 19 32 03 20
>026268	fc dd 02 d0 02 40 19 32 19 32 06 22 0b 24 86 40
>026278	00 00 18 00 3c 01 1b 3e 18 32 69 40 01 20 39 ce
>026288	12 c0 19 32 06 22 40 40 00 00 20 00 3d 01 1b 3e
>026298	18 32 0b 24 04 10 ae 60 0c 26 2e cd 7b cd 16 c0
>0262a8	19 32 06 22 b2 11 54 45 00 00 22 00 3e 01 1b 3e
>0262b8	18 32 04 d5 01 40 19 32 01 20 56 ce c7 c9 1e c0
>0262c8	19 32 06 22 0b 24 05 10 ff 84 00 00 20 00 3f 01
>0262d8	1b 3e 18 32 0b 24 02 10 3e a6 01 20 0b 24 be 40
>0262e8	19 32 06 22 0b 24 02 10 be a6 00 00 18 00 40 01
>0262f8	1b 3e 18 32 5c c5 02 20 06 c0 19 32 06 22 0b 24
>026308	21 40 00 00 18 00 41 01 1b 3e 18 32 14 40 0c 26
>026318	88 cd 01 c0 19 32 06 22 e0 41 00 00 1a 00 42 01
>026328	1b 3e 18 32 69 40 0d 26 56 ce c7 c9 1e c0 19 32
>026338	06 22 00 40 00 00 20 00 43 01 1b 3e 18 32 d0 cd
>026348	39 ca 03 c0 03 20 0b 24 a9 40 19 32 06 22 0b 24
>026358	01 10 4d 41 00 00 18 00 44 01 1b 3e 18 32 18 40
>026368	02 20 a8 cd 15 c0 19 32 06 22 da a3 00 00 1a 00
>026378	45 01 1b 3e 18 32 06 c0 0b 24 14 40 19 32 06 22
>026388	0b 24 03 10 39 97 00 00 18 00 46 01 1b 3e 18 32
>026398	21 c5 02 20 d8 c4 19 32 06 22 0b 24 09 40 00 00
>0263a8	1a 00 47 01 1b 3e 18 32 34 40 0a 24 01 10 66 aa
>0263b8	19 32 06 22 01 10 9a aa 00 00 1a 00 48 01 1b 3e
>0263c8	18 32 2c cd fd c1 0b 24 21 c5 19 32 06 22 05 10
>0263d8	5e af 00 00 1c 00 49 01 1b 3e 18 32 0b 24 05 10
>0263e8	c6 88 0d 26 69 40 19 32 06 22 0b 24 c9 46 00 00
>0263f8	1e 00 4a 01 1b 3e 18 32 0b 24 64 40 0b 24 01 10
>026408	66 aa 19 32 06 22 0b 24 01 10 ca aa 00 00 1e 00
>026418	4b 01 1b 3e 18 32 05 10 c4 ad 02 20 3a ce 4c c8
>026428	24 c0 19 32 06 22 05 10 f6 ad 00 00 1c 00 4c 01
>026438	1b 3e 18 32 cf c5 0c 26 0b 24 05 10 43 a9 19 32
>026448	06 22 46 12 2c 5e 00 00 1a 00 4d 01 1b 3e 18 32
>026458	7c 40 03 20 05 10 25 4e 19 32 06 22 05 10 59 4e
>026468	00 00 1a 00 4e 01 1b 3e 18 32 03 10 62 a9 0a 24
>026478	c3 40 19 32 06 22 03 10 25 aa 00 00 1e 00 4f 01
>026488	1b 3e 18 32 a7 cd e8 c8 0a c0 0c 26 c3 40 19 32
>026498	06 22 0b 24 6f 14 09 6e 00 00 1e 00 50 01 1b 3e
>0264a8	18 32 04 d5 01 40 19 32 0a 24 10 c0 19 32 06 22
>0264b8	0b 24 06 10 be 43 00 00 1a 00 51 01 1b 3e 18 32
>0264c8	0b 24 be 40 0a 24 14 40 19 32 06 22 0b 24 aa 40
>0264d8	00 00 16 00 52 01 1b 3e 18 32 14 40 0d 26 53 c5
>0264e8	19 32 06 22 00 40 00 00 20 00 53 01 1b 3e 18 32
>0264f8	04 10 4d b3 0a 24 ce dc 1d d0 01 40 19 32 19 32
>026508	06 22 04 10 5e b3 00 00 1c 00 54 01 1b 3e 18 32
>026518	a7 cd e8 c8 0a c0 02 20 5c c5 19 32 06 22 0b 24
>026528	01 40 00 00 18 00 55 01 1b 3e 18 32 0b 24 47 40
>026538	01 20 18 40 19 32 06 22 18 40 00 00 20 00 56 01
>026548	1b 3e 18 32 0b 24 01 10 b5 a3 0a 24 12 ce 1a c0
>026558	19 32 06 22 0b 24 01 10 4c a3 00 00 1c 00 57 01
>026568	1b 3e 18 32 a8 cd 15 c0 02 20 86 cd a8 cb 1e c0
>026578	19 32 06 22 fe a3 00 00 1c 00 58 01 1b 3e 18 32
>026588	68 40 03 20 06 ce 23 c0 19 32 06 22 0b 24 02 10
>026598	2c 61 00 00 1a 00 59 01 1b 3e 18 32 68 40 0c 26
>0265a8	02 10 68 5b 19 32 06 22 e6 10 40 62 00 00 1a 00
>0265b8	5a 01 1b 3e 18 32 7c 40 02 20 01 10 67 53 19 32
>0265c8	06 22 01 10 7f 53 00 00 22 00 5b 01 1b 3e 18 32
>0265d8	86 cd a8 cb 1e c0 03 20 32 ce dd ca 0c c0 19 32
>0265e8	06 22 0b 24 02 10 42 a6 00 00 16 00 5c 01 1b 3e
>0265f8	18 32 69 40 02 20 57 40 19 32 06 22 7f 40 00 00
>026608	1a 00 5d 01 1b 3e 18 32 c3 40 01 20 e7 d5 02 40
>026618	19 32 19 32 06 22 41 40 00 00 20 00 5e 01 1b 3e
>026628	18 32 0b 24 05 10 43 a9 03 20 e1 cd 7a cd 17 c0
>026638	19 32 06 22 05 10 ff a9 00 00 1e 00 5f 01 1b 3e
>026648	18 32 32 ce dd ca 0c c0 0b 24 18 40 19 32 06 22
>026658	0b 24 02 10 56 a6 00 00 1e 00 60 01 1b 3e 18 32
>026668	05 10 55 af 03 20 86 cd a8 cb 1e c0 19 32 06 22
>026678	05 10 29 af 00 00 18 00 61 01 1b 3e 18 32 d2 a3
>026688	0a 24 d0 cd 85 c2 19 32 06 22 ff 9a 00 00 18 00
>026698	62 01 1b 3e 18 32 cf c5 0d 26 04 10 4d b3 19 32
>0266a8	06 22 00 40 00 00 1e 00 63 01 1b 3e 18 32 2e cd
>0266b8	7b cd 16 c0 0a 24 49 c5 19 32 06 22 0b 24 06 10
>0266c8	66 45 00 00 20 00 64 01 1b 3e 18 32 d0 cd 85 c2
>0266d8	0d 26 ca dc 0d d2 03 40 19 32 19 32 06 22 0b 24
>0266e8	21 40 00 00 1c 00 65 01 1b 3e 18 32 5c c5 0c 26
>0266f8	0b 24 04 10 e4 90 19 32 06 22 0e 13 84 a6 00 00
>026708	1c 00 66 01 1b 3e 18 32 5e ce 98 c3 0a 24 71 40
>026718	19 32 06 22 0b 24 04 10 73 90 00 00 18 00 67 01
>026728	1b 3e 18 32 0b 24 5e 40 0d 26 31 c6 19 32 06 22
>026738	00 40 00 00 22 00 68 01 1b 3e 18 32 2e cd 7b cd
>026748	16 c0 01 20 0b 24 03 10 1c 91 19 32 06 22 0b 24
>026758	03 10 80 91 00 00 1e 00 69 01 1b 3e 18 32 c5 cc
>026768	07 c0 0c 26 88 cd 01 c0 19 32 06 22 0b 24 71 10
>026778	40 4d 00 00 20 00 6a 01 1b 3e 18 32 7f cd 18 c0
>026788	0c 26 3a ce 4c c8 24 c0 19 32 06 22 0b 24 93 10
>026798	ce 9f 00 00 1c 00 6b 01 1b 3e 18 32 0b 24 09 40
>0267a8	0d 26 04 d5 02 40 19 32 19 32 06 22 00 40 00 00
>0267b8	1c 00 6c 01 1b 3e 18 32 d1 cd 8c c2 0a 24 18 40
>0267c8	19 32 06 22 0b 24 01 10 43 4a 00 00 1a 00 6d 01
>0267d8	1b 3e 18 32 f9 cc 77 c3 0c 26 34 40 19 32 06 22
>0267e8	28 10 38 ab 00 00 22 00 6e 01 1b 3e 18 32 2e cd
>0267f8	7b cd 16 c0 02 20 ca dc 0d d2 01 40 19 32 19 32
>026808	06 22 0b 24 45 40 00 00 1e 00 6f 01 1b 3e 18 32
>026818	0b 24 04 10 38 9b 03 20 76 40 19 32 06 22 0b 24
>026828	04 10 42 9b 00 00 18 00 70 01 1b 3e 18 32 68 40
>026838	0b 24 53 c5 19 32 06 22 04 10 e3 6e 00 00 1c 00
>026848	71 01 1b 3e 18 32 43 40 02 20 06 ce 23 c0 19 32
>026858	06 22 0b 24 02 10 01 61 00 00 1e 00 72 01 1b 3e
>026868	18 32 88 cd 01 c0 0d 26 fc dd 02 d0 04 40 19 32
>026878	19 32 06 22 00 40 00 00 16 00 73 01 1b 3e 18 32
>026888	68 40 03 20 34 40 19 32 06 22 5c 40 00 00 1c 00
>026898	74 01 1b 3e 18 32 0b 24 64 40 03 20 88 cd 01 c0
>0268a8	19 32 06 22 0b 24 7c 40 00 00 1c 00 75 01 1b 3e
>0268b8	18 32 0b 24 ae 40 0c 26 5e ce 98 c3 19 32 06 22
>0268c8	25 13 f8 ba 00 00 1e 00 76 01 1b 3e 18 32 0b 24
>0268d8	02 10 cf b0 03 20 74 40 19 32 06 22 0b 24 02 10
>0268e8	bb b0 00 00 20 00 77 01 1b 3e 18 32 ca dc 0d d2
>0268f8	01 40 19 32 0d 26 04 cd c0 ca 13 c0 19 32 06 22
>026908	00 40 00 00 18 00 78 01 1b 3e 18 32 21 c5 02 20
>026918	d8 c4 19 32 06 22 0b 24 09 40 00 00 1c 00 79 01
>026928	1b 3e 18 32 2e cd 7b cd 16 c0 0d 26 0b 24 64 40
>026938	19 32 06 22 01 40 00 00 1e 00 7a 01 1b 3e 18 32
>026948	3a ce 4c c8 24 c0 02 20 49 c5 19 32 06 22 0b 24
>026958	06 10 8a 44 00 00 1c 00 7b 01 1b 3e 18 32 01 10
>026968	e4 41 03 20 dc cd 21 c2 19 32 06 22 01 10 d0 41
>026978	00 00 1a 00 7c 01 1b 3e 18 32 a8 cd 15 c0 0b 24
>026988	0b 24 a9 40 19 32 06 22 7b a4 00 00 20 00 7d 01
>026998	1b 3e 18 32 32 ce dd ca 0c c0 0a 24 12 ce 1a c0
>0269a8	19 32 06 22 0b 24 02 10 d5 a5 00 00 1c 00 7e 01
>0269b8	1b 3e 18 32 68 40 0b 24 04 10 e3 86 19 32 06 22
>0269c8	0b 24 04 10 7b 86 00 00 20 00 7f 01 1b 3e 18 32
>0269d8	cf dc 72 d0 04 40 19 32 0a 24 03 10 bf a4 19 32
>0269e8	06 22 03 10 16 a5 00 00 1a 00 80 01 1b 3e 18 32
>0269f8	71 40 0b 24 7f cd 18 c0 19 32 06 22 01 10 b6 60
>026a08	00 00 1c 00 81 01 1b 3e 18 32 d2 a3 03 20 ce dc
>026a18	1d d0 01 40 19 32 19 32 06 22 c3 a3 00 00 1a 00
>026a28	82 01 1b 3e 18 32 0b 24 be 40 0d 26 1a c0 19 32
>026a38	06 22 0b 24 01 40 00 00 1e 00 83 01 1b 3e 18 32
>026a48	b8 cd 2c cd 16 c0 0d 26 e1 cd 7a cd 17 c0 19 32
>026a58	06 22 07 41 00 00 22 00 84 01 1b 3e 18 32 3a ce
>026a68	4c c8 24 c0 0a 24 29 ce f9 c8 14 c0 19 32 06 22
>026a78	0b 24 05 10 28 40 00 00 1e 00 85 01 1b 3e 18 32
>026a88	04 10 18 8d 03 20 86 cd a8 cb 1e c0 19 32 06 22
>026a98	04 10 64 8d 00 00 16 00 86 01 1b 3e 18 32 71 40
>026aa8	01 20 31 c6 19 32 06 22 41 40 00 00 16 00 87 01
>026ab8	1b 3e 18 32 76 40 01 20 69 40 19 32 06 22 60 40
>026ac8	00 00 1e 00 88 01 1b 3e 18 32 0b 24 be 40 0c 26
>026ad8	0b 24 05 10 c6 88 19 32 06 22 22 14 f4 42 00 00
>026ae8	1c 00 89 01 1b 3e 18 32 0b 24 64 40 0c 26 c5 cc
>026af8	07 c0 19 32 06 22 d7 11 e0 61 00 00 1c 00 8a 01
>026b08	1b 3e 18 32 55 ce 88 c2 0a 24 0b 24 a9 40 19 32
>026b18	06 22 01 10 bd a9 00 00 1a 00 8b 01 1b 3e 18 32
>026b28	f6 c4 02 20 18 40 19 32 06 22 0b 24 02 10 c7 b0
>026b38	00 00 16 00 8c 01 1b 3e 18 32 82 40 0d 26 1a c0
>026b48	19 32 06 22 01 40 00 00 1e 00 8d 01 1b 3e 18 32
>026b58	32 ce dd ca 0c c0 03 20 14 40 19 32 06 22 0b 24
>026b68	02 10 2a a6 00 00 1a 00 8e 01 1b 3e 18 32 34 40
>026b78	01 20 0b 24 03 10 25 97 19 32 06 22 10 40 00 00
>026b88	22 00 8f 01 1b 3e 18 32 86 cd a8 cb 1e c0 0c 26
>026b98	0b 24 01 10 88 55 19 32 06 22 0b 24 90 10 e0 ad
>026ba8	00 00 18 00 90 01 1b 3e 18 32 01 10 67 53 01 20
>026bb8	11 40 19 32 06 22 01 40 00 00 1e 00 91 01 1b 3e
>026bc8	18 32 0b 24 04 10 a4 a3 0c 26 76 40 19 32 06 22
>026bd8	0b 24 33 12 98 ad 00 00 16 00 92 01 1b 3e 18 32
>026be8	76 40 0a 24 34 40 19 32 06 22 aa 40 00 00 16 00
>026bf8	93 01 1b 3e 18 32 69 40 03 20 86 a4 19 32 06 22
>026c08	ef a4 00 00 1e 00 94 01 1b 3e 18 32 7f cd 18 c0
>026c18	0a 24 88 cd 01 c0 19 32 06 22 0b 24 01 10 2d 60
>026c28	00 00 1a 00 95 01 1b 3e 18 32 68 40 03 20 05 10
>026c38	25 4e 19 32 06 22 05 10 4d 4e 00 00 1c 00 96 01
>026c48	1b 3e 18 32 0b 24 e9 99 0a 24 0b 24 be 40 19 32
>026c58	06 22 0b 24 a7 9a 00 00 1a 00 97 01 1b 3e 18 32
>026c68	74 40 0c 26 5d cd 41 c3 19 32 06 22 80 12 e0 4f
>026c78	00 00 1a 00 98 01 1b 3e 18 32 0b 24 64 40 0d 26
>026c88	f0 c4 19 32 06 22 0b 24 05 40 00 00 1a 00 99 01
>026c98	1b 3e 18 32 04 10 d8 47 0a 24 cf c5 19 32 06 22
>026ca8	04 10 74 47 00 00 20 00 9a 01 1b 3e 18 32 b4 cd
>026cb8	ff c9 16 c0 0d 26 d3 dc 0a d0 02 40 19 32 19 32
>026cc8	06 22 00 40 00 00 24 00 9b 01 1b 3e 18 32 32 ce
>026cd8	dd ca 0c c0 0a 24 cf dc 72 d0 02 40 19 32 19 32
>026ce8	06 22 0b 24 02 10 ea a5 00 00 22 00 9c 01 1b 3e
>026cf8	18 32 ce dc 1d d0 02 40 19 32 0b 24 0b 24 02 10
>026d08	cf b0 19 32 06 22 02 10 21 b0 00 00 20 00 9d 01
>026d18	1b 3e 18 32 0b 24 05 10 bd 84 03 20 dc cd 21 c2
>026d28	19 32 06 22 0b 24 05 10 89 84 00 00 1c 00 9e 01
>026d38	1b 3e 18 32 04 d5 00 40 19 32 03 20 34 40 19 32
>026d48	06 22 05 10 e8 a0 00 00 1c 00 9f 01 1b 3e 18 32
>026d58	0b 24 66 40 0c 26 03 c0 19 32 06 22 0b 24 09 12
>026d68	be 62 00 00 1c 00 a0 01 1b 3e 18 32 0b 24 47 40
>026d78	02 20 05 ce 3e c4 19 32 06 22 0b 24 41 40 00 00
>026d88	16 00 a1 01 1b 3e 18 32 76 40 0c 26 71 40 19 32
>026d98	06 22 16 74 00 00 24 00 a2 01 1b 3e 18 32 0b 24
>026da8	03 10 25 97 0c 26 2c dd 1c d0 03 40 19 32 19 32
>026db8	06 22 0b 24 86 11 52 55 00 00 1e 00 a3 01 1b 3e
>026dc8	18 32 0b 24 03 10 1c 91 03 20 69 40 19 32 06 22
>026dd8	0b 24 03 10 73 91 00 00 1c 00 a4 01 1b 3e 18 32
>026de8	0b 24 04 10 e4 90 0c 26 cf c5 19 32 06 22 cf 11
>026df8	10 59 00 00 18 00 a5 01 1b 3e 18 32 f6 c4 0d 26
>026e08	0b 24 a9 40 19 32 06 22 2e 42 00 00 20 00 a6 01
>026e18	1b 3e 18 32 d8 c4 03 20 cf dc 72 d0 02 40 19 32
>026e28	19 32 06 22 0b 24 02 10 ee a1 00 00 1c 00 a7 01
>026e38	1b 3e 18 32 5c c5 0c 26 0b 24 01 10 51 7e 19 32
>026e48	06 22 fb 10 79 63 00 00 1c 00 a8 01 1b 3e 18 32
>026e58	0b 24 d3 48 0c 26 0b 24 64 40 19 32 06 22 06 10
>026e68	6c b2 00 00 16 00 a9 01 1b 3e 18 32 69 40 0d 26
>026e78	54 40 19 32 06 22 01 40 00 00 1c 00 aa 01 1b 3e
>026e88	18 32 34 40 03 20 7f cd 18 c0 19 32 06 22 0b 24
>026e98	01 10 71 60 00 00 1a 00 ab 01 1b 3e 18 32 04 10
>026ea8	e3 8e 02 20 74 40 19 32 06 22 04 10 f7 8e 00 00
>026eb8	1a 00 ac 01 1b 3e 18 32 05 ce 3e c4 02 20 69 40
>026ec8	19 32 06 22 02 10 ef ad 00 00 1e 00 ad 01 1b 3e
>026ed8	18 32 0b 24 05 10 43 a9 02 20 0e c0 19 32 06 22
>026ee8	0b 24 05 10 03 a9 00 00 1e 00 ae 01 1b 3e 18 32
>026ef8	0b 24 01 10 5b 4a 0d 26 12 ce 1a c0 19 32 06 22
>026f08	0b 24 51 41 00 00 18 00 af 01 1b 3e 18 32 14 40
>026f18	0c 26 5c c5 19 32 06 22 0b 24 34 4d 00 00 1a 00
>026f28	b0 01 1b 3e 18 32 05 10 c4 ad 0c 26 1a c0 19 32
>026f38	06 22 61 12 a0 57 00 00 16 00 b1 01 1b 3e 18 32
>026f48	10 c0 01 20 68 40 19 32 06 22 08 40 00 00 1e 00
>026f58	b2 01 1b 3e 18 32 1b cd d1 cd 21 c0 0b 24 14 40
>026f68	19 32 06 22 0b 24 01 10 65 7e 00 00 1c 00 b3 01
>026f78	1b 3e 18 32 d4 cd 24 c0 0d 26 0b 24 66 40 19 32
>026f88	06 22 0b 24 c7 42 00 00 1e 00 b4 01 1b 3e 18 32
>026f98	d4 cd 24 c0 0a 24 3a ce 4c c8 24 c0 19 32 06 22
>026fa8	02 10 de 5b 00 00 18 00 b5 01 1b 3e 18 32 01 10
>026fb8	cb 63 01 20 14 40 19 32 06 22 00 40 00 00 24 00
>026fc8	b6 01 1b 3e 18 32 2c dd 1c d0 03 40 19 32 0c 26
>026fd8	0b 24 05 10 4f 71 19 32 06 22 0b 24 3a 12 b6 aa
>026fe8	00 00 1a 00 b7 01 1b 3e 18 32 d0 cd 85 c2 03 20
>026ff8	e0 c5 19 32 06 22 01 10 66 ab 00 00 1e 00 b8 01
>027008	1b 3e 18 32 28 ce 4b cc 18 c0 03 20 0b 24 66 40
>027018	19 32 06 22 03 10 7e 91 00 00 1e 00 b9 01 1b 3e
>027028	18 32 b4 cd ff c9 16 c0 0d 26 3a ce 4c c8 24 c0
>027038	19 32 06 22 00 40 00 00 1e 00 ba 01 1b 3e 18 32
>027048	0b 24 01 10 5b 4a 0b 24 34 40 19 32 06 22 0b 24
>027058	01 10 8f 4a 00 00 20 00 bb 01 1b 3e 18 32 d0 cd
>027068	85 c2 0b 24 ca dc 0d d2 03 40 19 32 19 32 06 22
>027078	0b 24 16 49 00 00 1a 00 bc 01 1b 3e 18 32 d2 a3
>027088	02 20 3a ce 4c c8 24 c0 19 32 06 22 f6 a3 00 00
>027098	22 00 bd 01 1b 3e 18 32 b4 cd ff c9 16 c0 0a 24
>0270a8	0b 24 03 10 1c 91 19 32 06 22 0b 24 03 10 ab 90
>0270b8	00 00 1a 00 be 01 1b 3e 18 32 0b 24 d3 48 0a 24
>0270c8	68 40 19 32 06 22 0b 24 6b 48 00 00 1e 00 bf 01
>0270d8	1b 3e 18 32 fc dd 02 d0 02 40 19 32 01 20 0b 24
>0270e8	be 40 19 32 06 22 42 40 00 00 1a 00 c0 01 1b 3e
>0270f8	18 32 cf c5 03 20 2e cd 7b cd 16 c0 19 32 06 22
>027108	06 40 00 00 18 00 c1 01 1b 3e 18 32 a8 cd 15 c0
>027118	01 20 71 40 19 32 06 22 50 40 00 00 1e 00 c2 01
>027128	1b 3e 18 32 0b 24 02 10 44 61 03 20 14 40 19 32
>027138	06 22 0b 24 02 10 58 61 00 00 20 00 c3 01 1b 3e
>027148	18 32 0b 24 d3 48 0c 26 d0 cd 39 ca 03 c0 19 32
>027158	06 22 0b 24 f4 18 ec 6e 00 00 1e 00 c4 01 1b 3e
>027168	18 32 cf c5 01 20 0b 24 02 10 4d b6 19 32 06 22
>027178	0b 24 02 10 70 b6 00 00 16 00 c5 01 1b 3e 18 32
>027188	34 40 03 20 7c 40 19 32 06 22 48 40 00 00 1e 00
>027198	c6 01 1b 3e 18 32 cc cc d2 cd 1d c0 0c 26 0b 24
>0271a8	a9 40 19 32 06 22 d7 13 8c 59 00 00 20 00 c7 01
>0271b8	1b 3e 18 32 dc cd 21 c2 0a 24 0b 24 06 10 00 45
>0271c8	19 32 06 22 0b 24 06 10 cc 44 00 00 20 00 c8 01
>0271d8	1b 3e 18 32 88 cd 01 c0 03 20 0b 24 04 10 ae 60
>0271e8	19 32 06 22 0b 24 04 10 b6 60 00 00 1a 00 c9 01
>0271f8	1b 3e 18 32 0b 24 17 99 03 20 68 40 19 32 06 22
>027208	0b 24 7f 99 00 00 1a 00 ca 01 1b 3e 18 32 0b 24
>027218	64 40 0d 26 55 ce 88 c2 19 32 06 22 00 40 00 00
>027228	20 00 cb 01 1b 3e 18 32 0b 24 02 10 fb ad 03 20
>027238	e1 cd 7a cd 17 c0 19 32 06 22 02 10 47 ad 00 00
>027248	1e 00 cc 01 1b 3e 18 32 04 10 ec 77 0c 26 0b 24
>027258	be 40 19 32 06 22 0b 24 4b 13 28 41 00 00 24 00
>027268	cd 01 1b 3e 18 32 cf dc 72 d0 04 40 19 32 03 20
>027278	b9 cd 82 ca 07 c0 19 32 06 22 0b 24 02 10 58 48
>027288	00 00 1c 00 ce 01 1b 3e 18 32 34 40 0b 24 0b 24
>027298	03 10 1c 91 19 32 06 22 03 10 50 91 00 00 1e 00
>0272a8	cf 01 1b 3e 18 32 0b 24 11 7e 0b 24 04 d5 01 40
>0272b8	19 32 19 32 06 22 0b 24 ca 7d 00 00 20 00 d0 01
>0272c8	1b 3e 18 32 b4 cd ff c9 16 c0 02 20 06 ce 23 c0
>0272d8	19 32 06 22 0b 24 02 10 03 61 00 00 1a 00 d1 01
>0272e8	1b 3e 18 32 05 10 dc a0 0b 24 18 40 19 32 06 22
>0272f8	05 10 c4 a0 00 00 20 00 d2 01 1b 3e 18 32 ce dc
>027308	1d d0 02 40 19 32 0c 26 0b 24 17 99 19 32 06 22
>027318	79 10 a2 4d 00 00 1e 00 d3 01 1b 3e 18 32 34 40
>027328	03 20 29 ce f9 c8 14 c0 19 32 06 22 0b 24 05 10
>027338	aa 40 00 00 1a 00 d4 01 1b 3e 18 32 0b 24 01 10
>027348	51 7e 0d 26 21 c5 19 32 06 22 25 55 00 00 18 00
>027358	d5 01 1b 3e 18 32 01 10 cb 63 01 20 1a c0 19 32
>027368	06 22 48 40 00 00 20 00 d6 01 1b 3e 18 32 0b 24
>027378	01 10 51 7e 0b 24 0b 24 d3 48 19 32 06 22 0b 24
>027388	01 10 7e 75 00 00 18 00 d7 01 1b 3e 18 32 14 40
>027398	01 20 03 10 8b 41 19 32 06 22 00 40 00 00 1e 00
>0273a8	d8 01 1b 3e 18 32 1a c0 0c 26 0b 24 01 10 45 60
>0273b8	19 32 06 22 0b 24 82 10 08 5c 00 00 20 00 d9 01
>0273c8	1b 3e 18 32 88 cd 01 c0 02 20 0b 24 01 10 b5 a3
>0273d8	19 32 06 22 0b 24 01 10 a5 a3 00 00 1a 00 da 01
>0273e8	1b 3e 18 32 7f 9f 0b 24 b4 cd ff c9 16 c0 19 32
>0273f8	06 22 0e 9f 00 00 20 00 db 01 1b 3e 18 32 0b 24
>027408	04 10 e4 90 0d 26 86 cd a8 cb 1e c0 19 32 06 22
>027418	0b 24 c8 44 00 00 20 00 dc 01 1b 3e 18 32 04 10
>027428	1a 73 0c 26 e1 cd 7a cd 17 c0 19 32 06 22 0b 24
>027438	43 13 4c ad 00 00 22 00 dd 01 1b 3e 18 32 fc dd
>027448	02 d0 03 40 19 32 03 20 0b 24 05 10 ac a8 19 32
>027458	06 22 05 10 2d a8 00 00 1e 00 de 01 1b 3e 18 32
>027468	ca dc 0d d2 01 40 19 32 0b 24 1a c0 19 32 06 22
>027478	0b 24 37 40 00 00 20 00 df 01 1b 3e 18 32 04 d5
>027488	01 40 19 32 0c 26 b4 cd ff c9 16 c0 19 32 06 22
>027498	0b 24 57 5f 00 00 1a 00 e0 01 1b 3e 18 32 02 10
>0274a8	68 5b 0c 26 74 40 19 32 06 22 00 11 20 ab 00 00
>0274b8	1c 00 e1 01 1b 3e 18 32 71 40 0b 24 04 10 ec 77
>0274c8	19 32 06 22 0b 24 04 10 7b 77 00 00 18 00 e2 01
>0274d8	1b 3e 18 32 86 a4 0b 24 0b 24 64 40 19 32 06 22
>0274e8	ea a4 00 00 1e 00 e3 01 1b 3e 18 32 04 10 1a 73
>0274f8	0a 24 04 d5 01 40 19 32 19 32 06 22 04 10 d3 72
>027508	00 00 1a 00 e4 01 1b 3e 18 32 68 40 0d 26 04 cd
>027518	c0 ca 13 c0 19 32 06 22 00 40 00 00 1a 00 e5 01
>027528	1b 3e 18 32 04 10 1a 73 0c 26 0e c0 19 32 06 22
>027538	fe 11 c8 67 00 00 1e 00 e6 01 1b 3e 18 32 b4 cd
>027548	ff c9 16 c0 03 20 02 10 68 5b 19 32 06 22 02 10
>027558	19 5b 00 00 16 00 e7 01 1b 3e 18 32 71 40 0d 26
>027568	69 40 19 32 06 22 01 40 00 00 20 00 e8 01 1b 3e
>027578	18 32 0b 24 05 10 43 a9 0a 24 0b 24 a9 40 19 32
>027588	06 22 0b 24 05 10 ec a9 00 00 1e 00 e9 01 1b 3e
>027598	18 32 0b 24 09 40 03 20 04 10 30 5f 19 32 06 22
>0275a8	0b 24 04 10 39 5f 00 00 20 00 ea 01 1b 3e 18 32
>0275b8	2e cd 7b cd 16 c0 02 20 56 ce c7 c9 1e c0 19 32
>0275c8	06 22 0b 24 25 40 00 00 16 00 eb 01 1b 3e 18 32
>0275d8	86 a4 01 20 14 40 19 32 06 22 04 40 00 00 1c 00
>0275e8	ec 01 1b 3e 18 32 28 ce 4b cc 18 c0 01 20 12 ce
>0275f8	1a c0 19 32 06 22 60 40 00 00 1e 00 ed 01 1b 3e
>027608	18 32 d3 dc 0a d0 03 40 19 32 02 20 dc cd 21 c2
>027618	19 32 06 22 3f 40 00 00 1e 00 ee 01 1b 3e 18 32
>027628	cf dc 72 d0 03 40 19 32 0c 26 69 40 19 32 06 22
>027638	0b 24 8e 66 00 00 20 00 ef 01 1b 3e 18 32 cf dc
>027648	72 d0 00 40 19 32 01 20 56 ce c7 c9 1e c0 19 32
>027658	06 22 02 40 00 00 1c 00 f0 01 1b 3e 18 32 21 c5
>027668	03 20 04 10 0c 82 19 32 06 22 0b 24 04 10 05 82
>027678	00 00 1e 00 f1 01 1b 3e 18 32 0b 24 be 40 03 20
>027688	d4 cd 24 c0 19 32 06 22 0b 24 02 10 d6 5b 00 00
>027698	20 00 f2 01 1b 3e 18 32 04 10 d8 47 0c 26 ca dc
>0276a8	0d d2 03 40 19 32 19 32 06 22 10 11 88 4d 00 00
>0276b8	1e 00 f3 01 1b 3e 18 32 b8 cd 2c cd 16 c0 0a 24
>0276c8	74 40 19 32 06 22 0b 24 01 10 ed 82 00 00 1c 00
>0276d8	f4 01 1b 3e 18 32 32 ce dd ca 0c c0 0d 26 68 40
>0276e8	19 32 06 22 0b 24 71 43 00 00 1e 00 f5 01 1b 3e
>0276f8	18 32 03 10 de bd 0c 26 0b 24 be 40 19 32 06 22
>027708	0b 24 f4 12 c4 aa 00 00 22 00 f6 01 1b 3e 18 32
>027718	0b 24 05 10 9e 40 0c 26 3a ce 4c c8 24 c0 19 32
>027728	06 22 0b 24 4e 12 d4 88 00 00 1c 00 f7 01 1b 3e
>027738	18 32 14 40 0a 24 06 ce 23 c0 19 32 06 22 0b 24
>027748	02 10 30 61 00 00 1c 00 f8 01 1b 3e 18 32 c5 cc
>027758	07 c0 0b 24 1a c0 19 32 06 22 0b 24 04 10 a0 9b
>027768	00 00 1a 00 f9 01 1b 3e 18 32 04 10 d8 47 02 20
>027778	68 40 19 32 06 22 04 10 f8 47 00 00 1c 00 fa 01
>027788	1b 3e 18 32 0b 24 e9 99 0c 26 1a c0 19 32 06 22
>027798	0b 24 49 10 a8 46 00 00 1a 00 fb 01 1b 3e 18 32
>0277a8	03 c0 03 20 21 c5 19 32 06 22 0b 24 05 10 2e 4e
>0277b8	00 00 18 00 fc 01 1b 3e 18 32 0e c0 01 20 06 ce
>0277c8	23 c0 19 32 06 22 34 40 00 00 1c 00 fd 01 1b 3e
>0277d8	18 32 0b 24 02 10 3e a6 0d 26 69 40 19 32 06 22
>0277e8	0b 24 69 43 00 00 24 00 fe 01 1b 3e 18 32 0b 24
>0277f8	02 10 cf b0 0a 24 ca dc 0d d2 03 40 19 32 19 32
>027808	06 22 0b 24 02 10 8c b0 00 00 1a 00 ff 01 1b 3e
>027818	18 32 88 cd 01 c0 01 20 87 cd 0a c0 19 32 06 22
>027828	00 40 00 00 18 00 00 02 1b 3e 18 32 88 cd 01 c0
>027838	0d 26 15 c0 19 32 06 22 00 40 00 00 1e 00 01 02
>027848	1b 3e 18 32 51 d5 02 40 19 32 01 20 0b 24 09 40
>027858	19 32 06 22 02 10 75 46 00 00 1c 00 02 02 1b 3e
>027868	18 32 f0 c4 0b 24 0b 24 03 10 1c 91 19 32 06 22
>027878	03 10 30 91 00 00 18 00 03 02 1b 3e 18 32 76 40
>027888	01 20 04 10 30 5f 19 32 06 22 30 40 00 00 1c 00
>027898	04 02 1b 3e 18 32 88 cd 01 c0 02 20 04 10 9e 9a
>0278a8	19 32 06 22 04 10 9e 9a 00 00 18 00 05 02 1b 3e
>0278b8	18 32 12 ce 1a c0 0c 26 68 40 19 32 06 22 a8 6a
>0278c8	00 00 18 00 06 02 1b 3e 18 32 a8 cd 15 c0 02 20
>0278d8	0e c0 19 32 06 22 f6 a3 00 00 1a 00 07 02 1b 3e
>0278e8	18 32 5d cd 41 c3 0c 26 54 40 19 32 06 22 cf 11
>0278f8	e0 84 00 00 22 00 08 02 1b 3e 18 32 2e cd 7b cd
>027908	16 c0 01 20 0b 24 05 10 bd 84 19 32 06 22 0b 24
>027918	05 10 fe 84 00 00 1a 00 09 02 1b 3e 18 32 f0 c4
>027928	0c 26 05 10 55 af 19 32 06 22 75 10 a4 72 00 00
>027938	1c 00 0a 02 1b 3e 18 32 5c c5 0a 24 2c cd 48 cb
>027948	1d c0 19 32 06 22 04 10 87 5e 00 00 22 00 0b 02
>027958	1b 3e 18 32 ce dc 1d d0 02 40 19 32 01 20 c5 cc
>027968	07 c0 19 32 06 22 0b 24 04 10 c0 9b 00 00 1c 00
>027978	0c 02 1b 3e 18 32 06 c0 01 20 0b 24 47 40 19 32
>027988	06 22 0b 24 03 10 67 97 00 00 22 00 0d 02 1b 3e
>027998	18 32 fc dd 02 d0 01 40 19 32 03 20 dc cd 21 c2
>0279a8	19 32 06 22 0b 24 03 10 be 7e 00 00 1e 00 0e 02
>0279b8	1b 3e 18 32 88 cd 01 c0 03 20 04 d5 01 40 19 32
>0279c8	19 32 06 22 0b 24 5f 40 00 00 20 00 0f 02 1b 3e
>0279d8	18 32 0b 24 04 10 a4 a3 0b 24 0b 24 64 40 19 32
>0279e8	06 22 0b 24 04 10 40 a3 00 00 1a 00 10 02 1b 3e
>0279f8	18 32 04 10 ec 77 03 20 18 40 19 32 06 22 04 10
>027a08	f4 77 00 00 1c 00 11 02 1b 3e 18 32 28 ce 4b cc
>027a18	18 c0 0d 26 57 40 19 32 06 22 0b 24 58 45 00 00
>027a28	1a 00 12 02 1b 3e 18 32 0b 24 47 40 01 20 18 c0
>027a38	19 32 06 22 04 10 a1 8e 00 00 1e 00 13 02 1b 3e
>027a48	18 32 0b 24 64 40 03 20 04 10 e3 8e 19 32 06 22
>027a58	0b 24 04 10 81 8e 00 00 1c 00 14 02 1b 3e 18 32
>027a68	dc cd 21 c2 01 20 e1 cd 7a cd 17 c0 19 32 06 22
>027a78	00 40 00 00 1a 00 15 02 1b 3e 18 32 cf c5 0a 24
>027a88	02 10 a6 ad 19 32 06 22 02 10 42 ad 00 00 1c 00
>027a98	16 02 1b 3e 18 32 0b 24 be 40 0b 24 e1 cd 7a cd
>027aa8	17 c0 19 32 06 22 00 40 00 00 1e 00 17 02 1b 3e
>027ab8	18 32 0b 24 09 40 02 20 29 ce f9 c8 14 c0 19 32
>027ac8	06 22 0b 24 09 40 00 00 1e 00 18 02 1b 3e 18 32
>027ad8	0b 24 11 7e 0c 26 e1 cd 7a cd 17 c0 19 32 06 22
>027ae8	5c 10 9e 50 00 00 1c 00 19 02 1b 3e 18 32 0b 24
>027af8	06 10 00 45 0d 26 18 40 19 32 06 22 0b 24 35 60
>027b08	00 00 1e 00 1a 02 1b 3e 18 32 b8 cd 2c cd 16 c0
>027b18	0c 26 74 40 19 32 06 22 0b 24 b1 10 f4 47 00 00
>027b28	1e 00 1b 02 1b 3e 18 32 5c c5 0b 24 d0 cd 39 ca
>027b38	03 c0 19 32 06 22 0b 24 01 10 8d 42 00 00 1a 00
>027b48	1c 02 1b 3e 18 32 05 10 c4 ad 03 20 57 40 19 32
>027b58	06 22 05 10 93 ad 00 00 1e 00 1d 02 1b 3e 18 32
>027b68	b8 cd 2c cd 16 c0 0a 24 74 40 19 32 06 22 0b 24
>027b78	01 10 ed 82 00 00 1c 00 1e 02 1b 3e 18 32 0b 24
>027b88	04 10 7b 6e 0d 26 71 40 19 32 06 22 0b 24 f1 44
>027b98	00 00 1c 00 1f 02 1b 3e 18 32 0b 24 be 40 0d 26
>027ba8	b9 cd 82 ca 07 c0 19 32 06 22 00 40 00 00 20 00
>027bb8	20 02 1b 3e 18 32 f3 cc dd c4 0b 24 b4 cd ff c9
>027bc8	16 c0 19 32 06 22 0b 24 04 10 15 a4 00 00 1c 00
>027bd8	21 02 1b 3e 18 32 0b 24 01 10 45 60 0d 26 18 40
>027be8	19 32 06 22 0b 24 ad 46 00 00 1c 00 22 02 1b 3e
>027bf8	18 32 0b 24 64 40 02 20 39 ce 12 c0 19 32 06 22
>027c08	0b 24 24 40 00 00 18 00 23 02 1b 3e 18 32 43 40
>027c18	0d 26 05 10 dc a0 19 32 06 22 00 40 00 00 20 00
>027c28	24 02 1b 3e 18 32 2e cd 7b cd 16 c0 0c 26 0b 24
>027c38	04 10 a4 a3 19 32 06 22 e7 11 58 73 00 00 20 00
>027c48	25 02 1b 3e 18 32 ca dc 0d d2 03 40 19 32 0b 24
>027c58	d1 cd 8c c2 19 32 06 22 01 10 9e 4a 00 00 1e 00
>027c68	26 02 1b 3e 18 32 2e cd 7b cd 16 c0 01 20 0b 24
>027c78	be 40 19 32 06 22 0b 24 fe 40 00 00 16 00 27 02
>027c88	1b 3e 18 32 1a c0 01 20 21 c5 19 32 06 22 60 40
>027c98	00 00 1c 00 28 02 1b 3e 18 32 b4 cd ff c9 16 c0
>027ca8	0d 26 04 10 d8 47 19 32 06 22 00 40 00 00 20 00
>027cb8	29 02 1b 3e 18 32 ca dc 0d d2 02 40 19 32 02 20
>027cc8	76 40 19 32 06 22 0b 24 02 10 09 be 00 00 20 00
>027cd8	2a 02 1b 3e 18 32 0b 24 01 10 b5 a3 0b 24 dc cd
>027ce8	21 c2 19 32 06 22 0b 24 01 10 e9 a3 00 00 16 00
>027cf8	2b 02 1b 3e 18 32 69 40 01 20 69 40 19 32 06 22
>027d08	69 40 00 00 1a 00 2c 02 1b 3e 18 32 0b 24 04 10
>027d18	7b 6e 01 20 71 40 19 32 06 22 01 40 00 00 18 00
>027d28	2d 02 1b 3e 18 32 f9 cc 77 c3 0d 26 f0 c4 19 32
>027d38	06 22 06 45 00 00 18 00 2e 02 1b 3e 18 32 54 40
>027d48	01 20 d4 cd 24 c0 19 32 06 22 40 40 00 00 1e 00
>027d58	2f 02 1b 3e 18 32 69 40 0c 26 0b 24 05 10 43 a9
>027d68	19 32 06 22 0b 24 63 12 7b 6c 00 00 1e 00 30 02
>027d78	1b 3e 18 32 14 40 02 20 0b 24 04 10 a4 a3 19 32
>027d88	06 22 0b 24 04 10 a4 a3 00 00 1c 00 31 02 1b 3e
>027d98	18 32 21 c5 0c 26 d4 cd 24 c0 19 32 06 22 0b 24
>027da8	13 10 a8 b6 00 00 1e 00 32 02 1b 3e 18 32 3a ce
>027db8	4c c8 24 c0 0d 26 2c cd 48 cb 1d c0 19 32 06 22
>027dc8	00 40 00 00 1a 00 33 02 1b 3e 18 32 82 40 03 20
>027dd8	55 ce 88 c2 19 32 06 22 01 10 e4 aa 00 00 18 00
>027de8	34 02 1b 3e 18 32 14 40 01 20 04 10 e3 8e 19 32
>027df8	06 22 00 40 00 00 20 00 35 02 1b 3e 18 32 2e cd
>027e08	7b cd 16 c0 0b 24 cb cc 50 ca 12 c0 19 32 06 22
>027e18	0b 24 e5 9f 00 00 1a 00 36 02 1b 3e 18 32 7c 40
>027e28	0c 26 05 10 58 82 19 32 06 22 ac 12 a0 62 00 00
>027e38	1c 00 37 02 1b 3e 18 32 0b 24 09 40 01 20 0b 24
>027e48	a9 40 19 32 06 22 0b 24 a9 40 00 00 1c 00 38 02
>027e58	1b 3e 18 32 06 ce 23 c0 0d 26 dc cd 21 c2 19 32
>027e68	06 22 0b 24 90 45 00 00 1e 00 39 02 1b 3e 18 32
>027e78	76 40 03 20 0b 24 02 10 cf b0 19 32 06 22 0b 24
>027e88	02 10 b9 b0 00 00 1e 00 3a 02 1b 3e 18 32 a7 cd
>027e98	e8 c8 0a c0 0b 24 34 40 19 32 06 22 0b 24 05 10
>027ea8	77 a9 00 00 1a 00 3b 02 1b 3e 18 32 06 c0 0c 26
>027eb8	14 40 19 32 06 22 0b 24 49 10 e4 8e 00 00 20 00
>027ec8	3c 02 1b 3e 18 32 0b 24 03 10 1c 91 03 20 12 ce
>027ed8	1a c0 19 32 06 22 0b 24 03 10 73 91 00 00 1a 00
>027ee8	3d 02 1b 3e 18 32 0b 40 01 20 b9 cd 82 ca 07 c0
>027ef8	19 32 06 22 0b 40 00 00 1c 00 3e 02 1b 3e 18 32
>027f08	39 c6 02 20 b4 cd ff c9 16 c0 19 32 06 22 04 10
>027f18	f9 47 00 00 1e 00 3f 02 1b 3e 18 32 0b 24 05 10
>027f28	c6 88 0b 24 71 40 19 32 06 22 0b 24 05 10 37 89
>027f38	00 00 20 00 40 02 1b 3e 18 32 01 10 cb 63 0b 24
>027f48	cf dc 72 d0 02 40 19 32 19 32 06 22 01 10 77 63
>027f58	00 00 1a 00 41 02 1b 3e 18 32 0b 24 66 40 02 20
>027f68	06 c0 19 32 06 22 0b 24 25 40 00 00 1e 00 42 02
>027f78	1b 3e 18 32 0b 24 03 10 1c 91 02 20 68 40 19 32
>027f88	06 22 0b 24 03 10 14 91 00 00 1e 00 43 02 1b 3e
>027f98	18 32 0b 24 02 10 4d b6 0c 26 76 40 19 32 06 22
>027fa8	0b 24 59 11 7e 47 00 00 1e 00 44 02 1b 3e 18 32
>027fb8	14 40 0c 26 e7 d5 01 40 19 32 19 32 06 22 0b 24
>027fc8	39 10 9c 57 00 00 22 00 45 02 1b 3e 18 32 b4 cd
>027fd8	ff c9 16 c0 02 20 a7 cd e8 c8 0a c0 19 32 06 22
>027fe8	0b 24 05 10 03 a9 00 00 22 00 46 02 1b 3e 18 32
>027ff8	0b 24 04 10 a4 a3 0c 26 86 cd a8 cb 1e c0 19 32
>028008	06 22 0b 24 50 12 70 83 00 00 1e 00 47 02 1b 3e
>028018	18 32 0b 24 01 10 45 60 0a 24 f0 c4 19 32 06 22
>028028	0b 24 01 10 31 60 00 00 1e 00 48 02 1b 3e 18 32
>028038	e1 cd 7a cd 17 c0 02 20 88 cd 01 c0 19 32 06 22
>028048	0b 24 a6 40 00 00 22 00 49 02 1b 3e 18 32 0b 24
>028058	01 10 51 7e 01 20 e1 cd 7a cd 17 c0 19 32 06 22
>028068	0b 24 01 10 fe 7e 00 00 1e 00 4a 02 1b 3e 18 32
>028078	86 cd a8 cb 1e c0 02 20 86 cd a8 cb 1e c0 19 32
>028088	06 22 7c 40 00 00 18 00 4b 02 1b 3e 18 32 0e c0
>028098	0c 26 39 c6 19 32 06 22 d7 11 e0 4d 00 00 18 00
>0280a8	4c 02 1b 3e 18 32 31 40 0d 26 7f cd 18 c0 19 32
>0280b8	06 22 00 40 00 00 20 00 4d 02 1b 3e 18 32 0b 24
>0280c8	87 40 01 20 0b 24 06 10 77 43 19 32 06 22 0b 24
>0280d8	06 10 f7 43 00 00 1a 00 4e 02 1b 3e 18 32 54 40
>0280e8	01 20 04 d5 02 40 19 32 19 32 06 22 00 40 00 00
>0280f8	1c 00 4f 02 1b 3e 18 32 01 10 e4 41 01 20 3a ce
>028108	4c c8 24 c0 19 32 06 22 64 40 00 00 22 00 50 02
>028118	1b 3e 18 32 e1 cd 7a cd 17 c0 0b 24 51 d5 02 40
>028128	19 32 19 32 06 22 0b 24 02 10 33 47 00 00 1e 00
>028138	51 02 1b 3e 18 32 0b 24 a9 40 0c 26 03 10 62 a9
>028148	19 32 06 22 0b 24 86 12 b2 51 00 00 1e 00 52 02
>028158	1b 3e 18 32 86 cd a8 cb 1e c0 0a 24 39 ce 12 c0
>028168	19 32 06 22 05 10 40 ae 00 00 1c 00 53 02 1b 3e
>028178	18 32 05 10 55 af 0b 24 0b 24 09 40 19 32 06 22
>028188	05 10 5e af 00 00 1e 00 54 02 1b 3e 18 32 0b 24
>028198	be 40 02 20 0b 24 02 10 44 61 19 32 06 22 0b 24
>0281a8	02 40 00 00 1a 00 55 02 1b 3e 18 32 5a cd 1d c4
>0281b8	0c 26 5c c5 19 32 06 22 cf 12 de 52 00 00 20 00
>0281c8	56 02 1b 3e 18 32 b4 dd 4e d1 01 40 19 32 03 20
>0281d8	11 40 19 32 06 22 0b 24 05 10 60 71 00 00 1e 00
>0281e8	57 02 1b 3e 18 32 c7 cc 99 c3 02 20 86 cd a8 cb
>0281f8	1e c0 19 32 06 22 0b 24 03 99 00 00 1e 00 58 02
>028208	1b 3e 18 32 32 ce dd ca 0c c0 02 20 76 40 19 32
>028218	06 22 0b 24 02 10 0a a6 00 00 20 00 59 02 1b 3e
>028228	18 32 b4 dd 4e d1 02 40 19 32 01 20 0b 24 66 40
>028238	19 32 06 22 0b 24 ee 99 00 00 20 00 5a 02 1b 3e
>028248	18 32 0b 24 87 40 01 20 0b 24 03 10 1c 91 19 32
>028258	06 22 0b 24 03 10 a0 91 00 00 1c 00 5b 02 1b 3e
>028268	18 32 02 10 68 5b 0a 24 0b 24 a9 40 19 32 06 22
>028278	02 10 bf 5a 00 00 1e 00 5c 02 1b 3e 18 32 86 cd
>028288	a8 cb 1e c0 03 20 c7 cc 99 c3 19 32 06 22 0b 24
>028298	6b 99 00 00 1e 00 5d 02 1b 3e 18 32 0b 24 05 10
>0282a8	e1 70 0d 26 12 ce 1a c0 19 32 06 22 0b 24 8f 46
>0282b8	00 00 1e 00 5e 02 1b 3e 18 32 68 40 0a 24 0b 24
>0282c8	06 10 00 45 19 32 06 22 0b 24 06 10 98 44 00 00
>0282d8	20 00 5f 02 1b 3e 18 32 5a cd 1d c4 0c 26 86 cd
>0282e8	a8 cb 1e c0 19 32 06 22 0b 24 0f 12 48 94 00 00
>0282f8	20 00 60 02 1b 3e 18 32 0b 24 17 99 0d 26 ca dc
>028308	0d d2 01 40 19 32 19 32 06 22 0b 24 d1 41 00 00
>028318	1c 00 61 02 1b 3e 18 32 d0 cd 39 ca 03 c0 0b 24
>028328	cf c5 19 32 06 22 01 10 48 42 00 00 1c 00 62 02
>028338	1b 3e 18 32 5d cd 41 c3 01 20 0b 24 a9 40 19 32
>028348	06 22 05 10 50 82 00 00 1e 00 63 02 1b 3e 18 32
>028358	d3 dc 0a d0 03 40 19 32 0b 24 f6 c4 19 32 06 22
>028368	02 10 da b0 00 00 1c 00 64 02 1b 3e 18 32 dc cd
>028378	21 c2 01 20 e1 cd 7a cd 17 c0 19 32 06 22 00 40
>028388	00 00 1e 00 65 02 1b 3e 18 32 0b 24 04 10 a4 a3
>028398	0c 26 0e c0 19 32 06 22 0b 24 2a 12 50 66 00 00
>0283a8	1a 00 66 02 1b 3e 18 32 2c cd fd c1 0a 24 18 40
>0283b8	19 32 06 22 05 10 6d af 00 00 1a 00 67 02 1b 3e
>0283c8	18 32 0b 24 09 40 03 20 d0 cd 85 c2 19 32 06 22
>0283d8	da 48 00 00 1c 00 68 02 1b 3e 18 32 5c c5 0b 24
>0283e8	01 10 66 aa 19 32 06 22 0b 24 01 10 0f ab 00 00
>0283f8	22 00 69 02 1b 3e 18 32 28 ce 4b cc 18 c0 0a 24
>028408	e1 cd 7a cd 17 c0 19 32 06 22 0b 24 03 10 da 91
>028418	00 00 1e 00 6a 02 1b 3e 18 32 76 40 0b 24 51 d5
>028428	02 40 19 32 19 32 06 22 0b 24 02 10 ff 45 00 00
>028438	1c 00 6b 02 1b 3e 18 32 04 10 e3 8e 0c 26 dc cd
>028448	21 c2 19 32 06 22 f0 10 1c 46 00 00 1e 00 6c 02
>028458	1b 3e 18 32 0b 24 64 40 02 20 0b 24 05 10 c6 88
>028468	19 32 06 22 0b 24 42 40 00 00 1e 00 6d 02 1b 3e
>028478	18 32 f0 c4 0a 24 b8 cd 2c cd 16 c0 19 32 06 22
>028488	0b 24 01 10 4d 83 00 00 1e 00 6e 02 1b 3e 18 32
>028498	1b cd d1 cd 21 c0 0a 24 14 40 19 32 06 22 0b 24
>0284a8	01 10 3d 7e 00 00 1e 00 6f 02 1b 3e 18 32 0b 24
>0284b8	05 10 bd 84 0c 26 0e c0 19 32 06 22 0b 24 82 12
>0284c8	a4 65 00 00 1e 00 70 02 1b 3e 18 32 15 c0 03 20
>0284d8	3a ce 4c c8 24 c0 19 32 06 22 0b 24 05 10 b4 88
>0284e8	00 00 1e 00 71 02 1b 3e 18 32 b4 cd ff c9 16 c0
>0284f8	02 20 02 10 68 5b 19 32 06 22 02 10 79 5b 00 00
>028508	1e 00 72 02 1b 3e 18 32 0b 24 66 40 0c 26 3a ce
>028518	4c c8 24 c0 19 32 06 22 0b 24 04 6f 00 00 1c 00
>028528	73 02 1b 3e 18 32 0b 24 02 10 4d b6 0d 26 0b 24
>028538	66 40 19 32 06 22 ab 43 00 00 1a 00 74 02 1b 3e
>028548	18 32 5c c5 0a 24 0b 24 64 40 19 32 06 22 0b 24
>028558	0d 41 00 00 20 00 75 02 1b 3e 18 32 0b 24 04 10
>028568	a4 a3 0a 24 0b 24 a9 40 19 32 06 22 0b 24 04 10
>028578	4d a4 00 00 1c 00 76 02 1b 3e 18 32 69 40 0b 24
>028588	04 10 d8 47 19 32 06 22 0b 24 04 10 6f 47 00 00
>028598	16 00 77 02 1b 3e 18 32 7c 40 02 20 1a c0 19 32
>0285a8	06 22 7c 40 00 00 1a 00 78 02 1b 3e 18 32 04 10
>0285b8	d8 47 0b 24 21 c5 19 32 06 22 04 10 e1 47 00 00
>0285c8	1a 00 79 02 1b 3e 18 32 03 10 bf a4 0a 24 5c c5
>0285d8	19 32 06 22 03 10 16 a4 00 00 20 00 7a 02 1b 3e
>0285e8	18 32 fc dd 02 d0 03 40 19 32 0c 26 5a cd 1d c4
>0285f8	19 32 06 22 3e 12 c2 7b 00 00 1a 00 7b 02 1b 3e
>028608	18 32 0b 24 be 40 02 20 86 a4 19 32 06 22 0b 24
>028618	3a 40 00 00 20 00 7c 02 1b 3e 18 32 0b 24 03 10
>028628	25 97 0a 24 12 ce 1a c0 19 32 06 22 0b 24 03 10
>028638	bc 96 00 00 1e 00 7d 02 1b 3e 18 32 cb cc 50 ca
>028648	12 c0 03 20 0b 24 09 40 19 32 06 22 0b 24 78 9f
>028658	00 00 1e 00 7e 02 1b 3e 18 32 74 40 02 20 0b 24
>028668	03 10 1c 91 19 32 06 22 0b 24 03 10 0c 91 00 00
>028678	1c 00 7f 02 1b 3e 18 32 3a ce 4c c8 24 c0 0b 24
>028688	0b 24 09 40 19 32 06 22 7f 40 00 00 16 00 80 02
>028698	1b 3e 18 32 69 40 0c 26 1a c0 19 32 06 22 a8 6a
>0286a8	00 00 22 00 81 02 1b 3e 18 32 0b 24 02 10 5f be
>0286b8	03 20 b4 cd ff c9 16 c0 19 32 06 22 0b 24 02 10
>0286c8	30 be 00 00 18 00 82 02 1b 3e 18 32 7c 40 0a 24
>0286d8	05 c0 19 32 06 22 04 10 96 73 00 00 1a 00 83 02
>0286e8	1b 3e 18 32 43 40 01 20 28 ce 4b cc 18 c0 19 32
>0286f8	06 22 40 40 00 00 1c 00 84 02 1b 3e 18 32 21 c5
>028708	0c 26 04 10 30 5f 19 32 06 22 0b 24 26 10 b0 58
>028718	00 00 20 00 85 02 1b 3e 18 32 d8 c4 0b 24 ce dc
>028728	1d d0 02 40 19 32 19 32 06 22 0b 24 02 10 0c a1
>028738	00 00 1a 00 86 02 1b 3e 18 32 0b 24 6a 81 0a 24
>028748	1a c0 19 32 06 22 0b 24 02 81 00 00 1e 00 87 02
>028758	1b 3e 18 32 88 cd 3d c8 13 c0 0b 24 12 ce 1a c0
>028768	19 32 06 22 03 10 f9 a8 00 00 1c 00 88 02 1b 3e
>028778	18 32 0b 24 02 10 cf b0 01 20 12 ce 1a c0 19 32
>028788	06 22 21 40 00 00 16 00 89 02 1b 3e 18 32 74 40
>028798	0a 24 cf c5 19 32 06 22 10 40 00 00 20 00 8a 02
>0287a8	1b 3e 18 32 d3 dc 0a d0 03 40 19 32 01 20 0b 24
>0287b8	01 10 61 83 19 32 06 22 0b 40 00 00 1c 00 8b 02
>0287c8	1b 3e 18 32 05 ce 3e c4 0a 24 0b 24 09 40 19 32
>0287d8	06 22 02 10 9d ad 00 00 18 00 8c 02 1b 3e 18 32
>0287e8	21 c5 02 20 15 c0 19 32 06 22 0b 24 01 40 00 00
>0287f8	1c 00 8d 02 1b 3e 18 32 0b 24 a9 40 0b 24 39 c6
>028808	19 32 06 22 0b 24 04 10 81 48 00 00 1a 00 8e 02
>028818	1b 3e 18 32 0b 24 be 40 0d 26 76 40 19 32 06 22
>028828	0b 24 01 40 00 00 1c 00 8f 02 1b 3e 18 32 0b 24
>028838	02 10 3e a6 0d 26 0b 24 ae 40 19 32 06 22 0f 42
>028848	00 00 1a 00 90 02 1b 3e 18 32 02 10 68 5b 0a 24
>028858	76 40 19 32 06 22 02 10 de 5b 00 00 20 00 91 02
>028868	1b 3e 18 32 88 cd 01 c0 03 20 32 ce dd ca 0c c0
>028878	19 32 06 22 0b 24 02 10 26 a6 00 00 1e 00 92 02
>028888	1b 3e 18 32 88 cd 01 c0 0b 24 5d cd 41 c3 19 32
>028898	06 22 0b 24 05 10 40 82 00 00 20 00 93 02 1b 3e
>0288a8	18 32 0b 24 06 10 77 43 0b 24 88 cd 01 c0 19 32
>0288b8	06 22 0b 24 06 10 8f 43 00 00 1c 00 94 02 1b 3e
>0288c8	18 32 b4 cd ff c9 16 c0 0b 24 c7 cc 99 c3 19 32
>0288d8	06 22 88 99 00 00 1c 00 95 02 1b 3e 18 32 14 40
>0288e8	0c 26 d0 cd 85 c2 19 32 06 22 0b 24 01 10 7c 70
>0288f8	00 00 1e 00 96 02 1b 3e 18 32 01 10 48 aa 0c 26
>028908	0b 24 87 40 19 32 06 22 0b 24 f7 10 f8 4b 00 00
>028918	1e 00 97 02 1b 3e 18 32 0b 24 02 10 44 61 02 20
>028928	0b 24 64 40 19 32 06 22 0b 24 44 40 00 00 1a 00
>028938	98 02 1b 3e 18 32 f0 c4 01 20 cb cc 50 ca 12 c0
>028948	19 32 06 22 14 40 00 00 1e 00 99 02 1b 3e 18 32
>028958	0b 24 05 10 ac a8 03 20 68 40 19 32 06 22 0b 24
>028968	05 10 c4 a8 00 00 1c 00 9a 02 1b 3e 18 32 0b 24
>028978	02 10 3e a6 0c 26 cf c5 19 32 06 22 17 11 38 b0
>028988	00 00 18 00 9b 02 1b 3e 18 32 71 40 01 20 0b 24
>028998	66 40 19 32 06 22 10 40 00 00 1a 00 9c 02 1b 3e
>0289a8	18 32 7c 40 03 20 04 10 ec 77 19 32 06 22 04 10
>0289b8	90 77 00 00 1e 00 9d 02 1b 3e 18 32 86 cd a8 cb
>0289c8	1e c0 0c 26 d8 c4 19 32 06 22 0b 24 56 11 18 96
>0289d8	00 00 1e 00 9e 02 1b 3e 18 32 0b 24 05 10 9e 40
>0289e8	0b 24 7c 40 19 32 06 22 0b 24 05 10 1a 41 00 00
>0289f8	16 00 9f 02 1b 3e 18 32 53 c5 01 20 f0 c4 19 32
>028a08	06 22 04 40 00 00 16 00 a0 02 1b 3e 18 32 86 a4
>028a18	0a 24 14 40 19 32 06 22 9a a4 00 00 1e 00 a1 02
>028a28	1b 3e 18 32 b9 cd 82 ca 07 c0 0a 24 f0 c4 19 32
>028a38	06 22 0b 24 02 10 ed 47 00 00 1e 00 a2 02 1b 3e
>028a48	18 32 68 40 0a 24 0b 24 02 10 fb ad 19 32 06 22
>028a58	0b 24 02 10 93 ad 00 00 1e 00 a3 02 1b 3e 18 32
>028a68	12 ce 1a c0 0b 24 0b 24 05 10 bd 84 19 32 06 22
>028a78	05 10 26 85 00 00 1a 00 a4 02 1b 3e 18 32 71 40
>028a88	02 20 f6 c4 19 32 06 22 0b 24 02 10 8f b0 00 00
>028a98	1e 00 a5 02 1b 3e 18 32 0b 24 06 10 77 43 0c 26
>028aa8	7c 40 19 32 06 22 0b 24 eb 12 a4 6d 00 00 16 00
>028ab8	a6 02 1b 3e 18 32 74 40 0d 26 86 a4 19 32 06 22
>028ac8	00 40 00 00 20 00 a7 02 1b 3e 18 32 0b 24 a9 40
>028ad8	01 20 0b 24 04 10 7b 6e 19 32 06 22 0b 24 04 10
>028ae8	fb 6e 00 00 20 00 a8 02 1b 3e 18 32 e1 cd 7a cd
>028af8	17 c0 0c 26 0b 24 02 10 44 61 19 32 06 22 ad 11
>028b08	78 70 00 00 1e 00 a9 02 1b 3e 18 32 ca dc 0d d2
>028b18	01 40 19 32 0d 26 87 cd 0a c0 19 32 06 22 00 40
>028b28	00 00 18 00 aa 02 1b 3e 18 32 18 40 01 20 02 10
>028b38	f7 85 19 32 06 22 10 40 00 00 1e 00 ab 02 1b 3e
>028b48	18 32 0b 24 6a 81 03 20 86 cd a8 cb 1e c0 19 32
>028b58	06 22 0b 24 16 81 00 00 1e 00 ac 02 1b 3e 18 32
>028b68	0b 24 06 10 77 43 0a 24 f0 c4 19 32 06 22 0b 24
>028b78	06 10 63 43 00 00 1a 00 ad 02 1b 3e 18 32 04 10
>028b88	4d b3 03 20 1a c0 19 32 06 22 04 10 25 b3 00 00
>028b98	18 00 ae 02 1b 3e 18 32 14 40 0d 26 39 ce 12 c0
>028ba8	19 32 06 22 00 40 00 00 24 00 af 02 1b 3e 18 32
>028bb8	2c dd 1c d0 03 40 19 32 03 20 0b 24 05 10 ac a8
>028bc8	19 32 06 22 0b 24 05 10 c2 a8 00 00 18 00 b0 02
>028bd8	1b 3e 18 32 05 10 55 af 0d 26 68 40 19 32 06 22
>028be8	39 47 00 00 1c 00 b1 02 1b 3e 18 32 7c 40 0a 24
>028bf8	2c cd 48 cb 1d c0 19 32 06 22 04 10 ac 5f 00 00
>028c08	20 00 b2 02 1b 3e 18 32 0b 24 be 40 01 20 0b 24
>028c18	02 10 3e a6 19 32 06 22 0b 24 02 10 be a6 00 00
>028c28	1e 00 b3 02 1b 3e 18 32 0b 24 02 10 cf b0 02 20
>028c38	0b 24 ae 40 19 32 06 22 0b 24 8d 40 00 00 1e 00
>028c48	b4 02 1b 3e 18 32 7c 40 0c 26 0b 24 01 10 61 83
>028c58	19 32 06 22 0b 24 bd 10 fc 62 00 00 1e 00 b5 02
>028c68	1b 3e 18 32 0b 24 01 10 45 60 0c 26 71 40 19 32
>028c78	06 22 0b 24 8d 10 75 7e 00 00 16 00 b6 02 1b 3e
>028c88	18 32 f0 c4 0d 26 7c 40 19 32 06 22 00 40 00 00
>028c98	1a 00 b7 02 1b 3e 18 32 f0 c4 02 20 04 10 d8 47
>028ca8	19 32 06 22 04 10 dc 47 00 00 1e 00 b8 02 1b 3e
>028cb8	18 32 d0 cd 85 c2 03 20 0b 24 01 10 45 60 19 32
>028cc8	06 22 01 10 96 68 00 00 18 00 b9 02 1b 3e 18 32
>028cd8	7c 40 0c 26 0b 89 19 32 06 22 46 10 54 a1 00 00
>028ce8	22 00 ba 02 1b 3e 18 32 cf dc 72 d0 03 40 19 32
>028cf8	0c 26 0b 24 05 10 43 a9 19 32 06 22 23 12 9a 66
>028d08	00 00 1a 00 bb 02 1b 3e 18 32 69 40 0c 26 01 10
>028d18	48 aa 19 32 06 22 c0 10 88 57 00 00 20 00 bc 02
>028d28	1b 3e 18 32 3a ce 4c c8 24 c0 0b 24 0b 24 04 10
>028d38	a4 a3 19 32 06 22 04 10 1a a4 00 00 1a 00 bd 02
>028d48	1b 3e 18 32 10 c0 03 20 0b 40 19 32 06 22 0b 24
>028d58	06 10 7e 43 00 00 16 00 be 02 1b 3e 18 32 7f 9f
>028d68	02 20 57 40 19 32 06 22 7f 9f 00 00 16 00 bf 02
>028d78	1b 3e 18 32 0e c0 0d 26 18 c0 19 32 06 22 00 40
>028d88	00 00 20 00 c0 02 1b 3e 18 32 0b 24 09 40 0a 24
>028d98	0b 24 03 10 25 97 19 32 06 22 0b 24 03 10 2e 97
>028da8	00 00 22 00 c1 02 1b 3e 18 32 3a ce 4c c8 24 c0
>028db8	02 20 0b 24 05 10 43 a9 19 32 06 22 0b 24 05 10
>028dc8	01 a9 00 00 1e 00 c2 02 1b 3e 18 32 3a ce 4c c8
>028dd8	24 c0 0b 24 2e cd 7b cd 16 c0 19 32 06 22 dc 40
>028de8	00 00 1a 00 c3 02 1b 3e 18 32 0b 24 09 40 0d 26
>028df8	05 10 c4 ad 19 32 06 22 00 40 00 00 20 00 c4 02
>028e08	1b 3e 18 32 e1 cd 7a cd 17 c0 0c 26 e1 cd 7a cd
>028e18	17 c0 19 32 06 22 01 10 04 4d 00 00 1a 00 c5 02
>028e28	1b 3e 18 32 71 40 0a 24 04 d5 01 40 19 32 19 32
>028e38	06 22 2a 40 00 00 20 00 c6 02 1b 3e 18 32 0b 24
>028e48	04 10 7b 6e 01 20 0b 24 09 40 19 32 06 22 0b 24
>028e58	04 10 7b 6e 00 00 18 00 c7 02 1b 3e 18 32 31 c6
>028e68	0d 26 dc cd 21 c2 19 32 06 22 26 43 00 00 18 00
>028e78	c8 02 1b 3e 18 32 39 c6 0a 24 34 40 19 32 06 22
>028e88	04 10 0c 48 00 00 1e 00 c9 02 1b 3e 18 32 e1 cd
>028e98	7a cd 17 c0 01 20 cb cc 50 ca 12 c0 19 32 06 22
>028ea8	42 9f 00 00 1e 00 ca 02 1b 3e 18 32 0b 24 05 10
>028eb8	e1 70 0b 24 71 40 19 32 06 22 0b 24 05 10 52 71
>028ec8	00 00 20 00 cb 02 1b 3e 18 32 0b 24 87 40 01 20
>028ed8	0b 24 04 10 e4 90 19 32 06 22 0b 24 04 10 e8 90
>028ee8	00 00 1a 00 cc 02 1b 3e 18 32 04 10 ec 77 0c 26
>028ef8	71 40 19 32 06 22 f5 11 2c 6f 00 00 16 00 cd 02
>028f08	1b 3e 18 32 7f 9f 0a 24 68 40 19 32 06 22 e7 9f
>028f18	00 00 1a 00 ce 02 1b 3e 18 32 0b 24 d3 48 0b 24
>028f28	14 40 19 32 06 22 0b 24 e7 48 00 00 1c 00 cf 02
>028f38	1b 3e 18 32 f3 cc dd c4 02 20 71 40 19 32 06 22
>028f48	0b 24 04 10 83 a3 00 00 18 00 d0 02 1b 3e 18 32
>028f58	68 40 01 20 f9 cc 77 c3 19 32 06 22 00 40 00 00
>028f68	1a 00 d1 02 1b 3e 18 32 86 a4 01 20 86 cd a8 cb
>028f78	1e c0 19 32 06 22 04 40 00 00 1e 00 d2 02 1b 3e
>028f88	18 32 0b 24 66 40 0b 24 0b 24 05 10 9e 40 19 32
>028f98	06 22 05 10 38 40 00 00 1c 00 d3 02 1b 3e 18 32
>028fa8	f0 c4 0b 24 04 10 ec 77 19 32 06 22 0b 24 04 10
>028fb8	d8 77 00 00 1e 00 d4 02 1b 3e 18 32 2c dd 1c d0
>028fc8	03 40 19 32 0b 24 53 c5 19 32 06 22 04 10 e5 6e
>028fd8	00 00 1a 00 d5 02 1b 3e 18 32 cf c5 03 20 e1 c5
>028fe8	19 32 06 22 0b 24 01 10 2c aa 00 00 20 00 d6 02
>028ff8	1b 3e 18 32 12 ce 1a c0 0a 24 0b 24 02 10 ba a1
>029008	19 32 06 22 0b 24 02 10 51 a1 00 00 16 00 d7 02
>029018	1b 3e 18 32 14 40 0b 24 cf c5 19 32 06 22 78 40
>029028	00 00 1a 00 d8 02 1b 3e 18 32 18 40 0c 26 f9 cc
>029038	77 c3 19 32 06 22 12 10 90 ac 00 00 1a 00 d9 02
>029048	1b 3e 18 32 d2 a3 02 20 0b 24 d3 48 19 32 06 22
>029058	0b 24 01 48 00 00 1c 00 da 02 1b 3e 18 32 21 c5
>029068	0b 24 0b 24 06 10 00 45 19 32 06 22 06 10 f7 44
>029078	00 00 1e 00 db 02 1b 3e 18 32 0b 24 47 40 0c 26
>029088	f9 cc 77 c3 19 32 06 22 0b 24 37 10 2a a1 00 00
>029098	1e 00 dc 02 1b 3e 18 32 fc dd 02 d0 05 40 19 32
>0290a8	03 20 76 40 19 32 06 22 01 10 11 53 00 00 18 00
>0290b8	dd 02 1b 3e 18 32 e1 c5 0c 26 0e c0 19 32 06 22
>0290c8	d4 10 a0 68 00 00 1e 00 de 02 1b 3e 18 32 3a ce
>0290d8	4c c8 24 c0 01 20 a7 cd e8 c8 0a c0 19 32 06 22
>0290e8	34 40 00 00 20 00 df 02 1b 3e 18 32 0b 24 05 10
>0290f8	4f 71 01 20 0b 24 64 40 19 32 06 22 0b 24 05 10
>029108	70 71 00 00 1a 00 e0 02 1b 3e 18 32 f6 c4 02 20
>029118	0b 24 87 40 19 32 06 22 0b 24 87 40 00 00 1a 00
>029128	e1 02 1b 3e 18 32 39 c6 0b 24 0b 24 a9 40 19 32
>029138	06 22 04 10 81 48 00 00 1a 00 e2 02 1b 3e 18 32
>029148	74 40 0d 26 d0 cd 39 ca 03 c0 19 32 06 22 00 40
>029158	00 00 1a 00 e3 02 1b 3e 18 32 74 40 03 20 02 10
>029168	68 5b 19 32 06 22 02 10 1c 5b 00 00 18 00 e4 02
>029178	1b 3e 18 32 cf c5 03 20 74 40 19 32 06 22 0b 24
>029188	18 40 00 00 1e 00 e5 02 1b 3e 18 32 28 ce 4b cc
>029198	18 c0 0b 24 1a c0 19 32 06 22 0b 24 03 10 84 91
>0291a8	00 00 1a 00 e6 02 1b 3e 18 32 0b 24 09 40 0c 26
>0291b8	53 c5 19 32 06 22 27 10 53 62 00 00 1a 00 e7 02
>0291c8	1b 3e 18 32 34 40 01 20 0b 24 01 10 51 7e 19 32
>0291d8	06 22 24 40 00 00 1e 00 e8 02 1b 3e 18 32 04 10
>0291e8	e3 86 02 20 b4 cd ff c9 16 c0 19 32 06 22 04 10
>0291f8	f3 86 00 00 1a 00 e9 02 1b 3e 18 32 05 10 58 82
>029208	0c 26 0e c0 19 32 06 22 80 12 e0 4f 00 00 1c 00
>029218	ea 02 1b 3e 18 32 b4 cd ff c9 16 c0 0d 26 a8 cd
>029228	15 c0 19 32 06 22 00 40 00 00 1e 00 eb 02 1b 3e
>029238	18 32 ca dc 0d d2 04 40 19 32 03 20 11 40 19 32
>029248	06 22 02 10 e6 85 00 00 1a 00 ec 02 1b 3e 18 32
>029258	0b 24 ae 40 0b 24 69 40 19 32 06 22 0b 24 17 41
>029268	00 00 1c 00 ed 02 1b 3e 18 32 0b 24 5e 40 0c 26
>029278	0b 24 17 99 19 32 06 22 41 10 72 76 00 00 1e 00
>029288	ee 02 1b 3e 18 32 7c 40 0b 24 51 d5 02 40 19 32
>029298	19 32 06 22 0b 24 02 10 f9 45 00 00 1e 00 ef 02
>0292a8	1b 3e 18 32 0b 24 02 10 3e a6 03 20 6a 40 19 32
>0292b8	06 22 0b 24 02 10 58 a6 00 00 1c 00 f0 02 1b 3e
>0292c8	18 32 0b 24 05 10 9e 40 0d 26 0b 24 be 40 19 32
>0292d8	06 22 5f 43 00 00 16 00 f1 02 1b 3e 18 32 69 40
>0292e8	01 20 43 40 19 32 06 22 41 40 00 00 20 00 f2 02
>0292f8	1b 3e 18 32 d3 dc 0a d0 03 40 19 32 0d 26 cc cc
>029308	d2 cd 1d c0 19 32 06 22 00 40 00 00 1a 00 f3 02
>029318	1b 3e 18 32 0b 24 09 40 0d 26 01 10 e4 41 19 32
>029328	06 22 00 40 00 00 1a 00 f4 02 1b 3e 18 32 04 cd
>029338	c0 ca 13 c0 01 20 1a c0 19 32 06 22 68 40 00 00
>029348	24 00 f5 02 1b 3e 18 32 86 cd a8 cb 1e c0 0a 24
>029358	d3 dc 0a d0 01 40 19 32 19 32 06 22 0b 24 02 10
>029368	30 72 00 00 18 00 f6 02 1b 3e 18 32 5c c5 02 20
>029378	14 40 19 32 06 22 0b 24 a9 40 00 00 1e 00 f7 02
>029388	1b 3e 18 32 0b 24 a9 40 0a 24 5e ce 98 c3 19 32
>029398	06 22 0b 24 04 10 8d 91 00 00 1e 00 f8 02 1b 3e
>0293a8	18 32 87 cd 0a c0 02 20 2e cd 7b cd 16 c0 19 32
>0293b8	06 22 0b 24 05 40 00 00 18 00 f9 02 1b 3e 18 32
>0293c8	53 c5 0c 26 cf c5 19 32 06 22 b4 11 0c 68 00 00
>0293d8	20 00 fa 02 1b 3e 18 32 b9 cd 82 ca 07 c0 0d 26
>0293e8	3a ce 4c c8 24 c0 19 32 06 22 0b 24 3c 42 00 00
>0293f8	1e 00 fb 02 1b 3e 18 32 e7 d5 01 40 19 32 0c 26
>029408	34 40 19 32 06 22 0b 24 94 10 fc 96 00 00 18 00
>029418	fc 02 1b 3e 18 32 f0 c4 0b 24 0b 24 be 40 19 32
>029428	06 22 d2 40 00 00 1a 00 fd 02 1b 3e 18 32 88 cd
>029438	01 c0 0b 24 69 40 19 32 06 22 0b 24 51 40 00 00
>029448	18 00 fe 02 1b 3e 18 32 14 40 0b 24 0b 24 87 40
>029458	19 32 06 22 9b 40 00 00 18 00 ff 02 1b 3e 18 32
>029468	34 40 01 20 04 10 e3 86 19 32 06 22 20 40 00 00
>029478	22 00 00 03 1b 3e 18 32 0b 24 05 10 bd 84 02 20
>029488	ce dc 1d d0 02 40 19 32 19 32 06 22 0b 24 ad 40
>029498	00 00 18 00 01 03 1b 3e 18 32 69 40 0d 26 a8 cd
>0294a8	15 c0 19 32 06 22 00 40 00 00 1a 00 02 03 1b 3e
>0294b8	18 32 a8 cd 15 c0 0d 26 88 cd 01 c0 19 32 06 22
>0294c8	28 44 00 00 22 00 03 03 1b 3e 18 32 2e cd 7b cd
>0294d8	16 c0 01 20 0b 24 01 10 61 83 19 32 06 22 0b 24
>0294e8	01 10 66 83 00 00 1e 00 04 03 1b 3e 18 32 0b 24
>0294f8	02 10 4d b6 0a 24 21 c5 19 32 06 22 0b 24 02 10
>029508	56 b6 00 00 18 00 05 03 1b 3e 18 32 0b 24 a9 40
>029518	01 20 76 40 19 32 06 22 56 40 00 00 1e 00 06 03
>029528	1b 3e 18 32 7c 40 02 20 0b 24 05 10 c6 88 19 32
>029538	06 22 0b 24 05 10 82 88 00 00 1e 00 07 03 1b 3e
>029548	18 32 88 cd 3d c8 13 c0 02 20 dc cd 21 c2 19 32
>029558	06 22 03 10 76 a9 00 00 1c 00 08 03 1b 3e 18 32
>029568	b9 cd 82 ca 07 c0 0d 26 0b 24 64 40 19 32 06 22
>029578	a3 42 00 00 1a 00 09 03 1b 3e 18 32 01 10 48 aa
>029588	0c 26 18 40 19 32 06 22 2b 10 c0 b6 00 00 18 00
>029598	0a 03 1b 3e 18 32 7c 40 01 20 c7 cc 99 c3 19 32
>0295a8	06 22 68 40 00 00 20 00 0b 03 1b 3e 18 32 f6 c4
>0295b8	03 20 ca dc 0d d2 03 40 19 32 19 32 06 22 0b 24
>0295c8	02 10 8e b0 00 00 20 00 0c 03 1b 3e 18 32 cf dc
>0295d8	72 d0 02 40 19 32 01 20 0b 24 01 10 b5 a3 19 32
>0295e8	06 22 40 40 00 00 18 00 0d 03 1b 3e 18 32 1a c0
>0295f8	0b 24 0b 24 d3 48 19 32 06 22 3b 49 00 00 1a 00
>029608	0e 03 1b 3e 18 32 74 40 0b 24 5e ce 98 c3 19 32
>029618	06 22 04 10 58 91 00 00 20 00 0f 03 1b 3e 18 32
>029628	2e cd 7b cd 16 c0 02 20 b4 cd ff c9 16 c0 19 32
>029638	06 22 0b 24 05 40 00 00 1c 00 10 03 1b 3e 18 32
>029648	05 10 25 4e 0b 24 88 cd 01 c0 19 32 06 22 05 10
>029658	0d 4e 00 00 1a 00 11 03 1b 3e 18 32 0b 24 a9 40
>029668	0b 24 0b 24 be 40 19 32 06 22 15 40 00 00 1a 00
>029678	12 03 1b 3e 18 32 b4 cd ff c9 16 c0 0a 24 74 40
>029688	19 32 06 22 e5 40 00 00 1e 00 13 03 1b 3e 18 32
>029698	0b 24 64 40 0c 26 86 cd a8 cb 1e c0 19 32 06 22
>0296a8	0b 24 70 70 00 00 18 00 14 03 1b 3e 18 32 49 c5
>0296b8	01 20 12 ce 1a c0 19 32 06 22 00 40 00 00 1e 00
>0296c8	15 03 1b 3e 18 32 04 10 d8 47 02 20 3a ce 4c c8
>0296d8	24 c0 19 32 06 22 04 10 fe 47 00 00 1e 00 16 03
>0296e8	1b 3e 18 32 04 10 e3 86 0d 26 cf dc 72 d0 00 40
>0296f8	19 32 19 32 06 22 7b 44 00 00 20 00 17 03 1b 3e
>029708	18 32 b8 cd 2c cd 16 c0 03 20 12 ce 1a c0 19 32
>029718	06 22 0b 24 01 10 0a 83 00 00 1c 00 18 03 1b 3e
>029728	18 32 0b 24 66 40 01 20 86 cd a8 cb 1e c0 19 32
>029738	06 22 18 40 00 00 1a 00 19 03 1b 3e 18 32 7f 9f
>029748	0a 24 e1 cd 7a cd 17 c0 19 32 06 22 c1 9e 00 00
>029758	1e 00 1a 03 1b 3e 18 32 0b 24 be 40 03 20 0b 24
>029768	02 10 cf b0 19 32 06 22 02 10 73 b0 00 00 1a 00
>029778	1b 03 1b 3e 18 32 5d cd 41 c3 0a 24 69 40 19 32
>029788	06 22 05 10 c1 82 00 00 20 00 1c 03 1b 3e 18 32
>029798	ce dc 1d d0 03 40 19 32 0d 26 b4 cd ff c9 16 c0
>0297a8	19 32 06 22 18 43 00 00 1a 00 1d 03 1b 3e 18 32
>0297b8	14 40 0c 26 a8 cd 15 c0 19 32 06 22 0f 10 68 8c
>0297c8	00 00 20 00 1e 03 1b 3e 18 32 0b 24 a9 40 0c 26
>0297d8	2c cd 48 cb 1d c0 19 32 06 22 0b 24 cd 12 b0 56
>0297e8	00 00 20 00 1f 03 1b 3e 18 32 b4 dd 4e d1 03 40
>0297f8	19 32 0a 24 0b 24 a9 40 19 32 06 22 04 10 63 bc
>029808	00 00 18 00 20 03 1b 3e 18 32 7f 9f 0c 26 6a 40
>029818	19 32 06 22 4f 10 96 4a 00 00 1e 00 21 03 1b 3e
>029828	18 32 0b 24 05 10 ac a8 0a 24 21 c5 19 32 06 22
>029838	0b 24 05 10 b5 a8 00 00 20 00 22 03 1b 3e 18 32
>029848	0b 24 01 10 b5 a3 0b 24 d0 cd 85 c2 19 32 06 22
>029858	0b 24 01 10 e2 9a 00 00 1a 00 23 03 1b 3e 18 32
>029868	43 40 0d 26 28 ce 4b cc 18 c0 19 32 06 22 00 40
>029878	00 00 1e 00 24 03 1b 3e 18 32 7f cd 18 c0 01 20
>029888	0b 24 a9 40 19 32 06 22 0b 24 01 10 ed 60 00 00
>029898	16 00 25 03 1b 3e 18 32 cf c5 03 20 5c c5 19 32
>0298a8	06 22 cb 40 00 00 1c 00 26 03 1b 3e 18 32 0b 24
>0298b8	66 40 0d 26 0b 24 02 10 01 48 19 32 06 22 00 40
>0298c8	00 00 1a 00 27 03 1b 3e 18 32 cb cc 50 ca 12 c0
>0298d8	0a 24 7c 40 19 32 06 22 fb 9f 00 00 1a 00 28 03
>0298e8	1b 3e 18 32 c7 cc 99 c3 0d 26 76 40 19 32 06 22
>0298f8	0b 24 c1 40 00 00 1a 00 29 03 1b 3e 18 32 2e cd
>029908	7b cd 16 c0 0d 26 e0 c5 19 32 06 22 00 40 00 00
>029918	20 00 2a 03 1b 3e 18 32 04 d5 00 40 19 32 0b 24
>029928	3a ce 4c c8 24 c0 19 32 06 22 05 10 66 a0 00 00
>029938	20 00 2b 03 1b 3e 18 32 88 cd 3d c8 13 c0 03 20
>029948	0b 24 66 40 19 32 06 22 0b 24 03 10 08 a9 00 00
>029958	20 00 2c 03 1b 3e 18 32 86 cd a8 cb 1e c0 01 20
>029968	d3 dc 0a d0 03 40 19 32 19 32 06 22 08 40 00 00
>029978	1e 00 2d 03 1b 3e 18 32 0b 24 06 10 77 43 01 20
>029988	b4 cd ff c9 16 c0 19 32 06 22 01 40 00 00 1e 00
>029998	2e 03 1b 3e 18 32 0b 24 01 10 5b 4a 01 20 3a ce
>0299a8	4c c8 24 c0 19 32 06 22 24 40 00 00 1c 00 2f 03
>0299b8	1b 3e 18 32 11 40 0c 26 04 cd c0 ca 13 c0 19 32
>0299c8	06 22 4b 10 ac 76 00 00 22 00 30 03 1b 3e 18 32
>0299d8	fc dd 02 d0 02 40 19 32 0b 24 01 10 67 53 19 32
>0299e8	06 22 0b 24 01 10 a4 52 00 00 20 00 31 03 1b 3e
>0299f8	18 32 32 ce dd ca 0c c0 01 20 0b 24 be 40 19 32
>029a08	06 22 0b 24 02 10 be a6 00 00 18 00 32 03 1b 3e
>029a18	18 32 5c c5 0b 24 34 40 19 32 06 22 0b 24 dd 40
>029a28	00 00 1a 00 33 03 1b 3e 18 32 f3 cc dd c4 0d 26
>029a38	0e c0 19 32 06 22 0b 24 45 45 00 00 1a 00 34 03
>029a48	1b 3e 18 32 53 c5 02 20 68 40 19 32 06 22 0b 24
>029a58	04 10 13 6e 00 00 1e 00 35 03 1b 3e 18 32 04 10
>029a68	d8 47 0a 24 04 d5 01 40 19 32 19 32 06 22 04 10
>029a78	91 47 00 00 1e 00 36 03 1b 3e 18 32 71 40 02 20
>029a88	0b 24 03 10 25 97 19 32 06 22 0b 24 03 10 05 97
>029a98	00 00 1a 00 37 03 1b 3e 18 32 34 40 0d 26 e7 d5
>029aa8	02 40 19 32 19 32 06 22 00 40 00 00 1e 00 38 03
>029ab8	1b 3e 18 32 0b 24 04 10 e4 90 0b 24 68 40 19 32
>029ac8	06 22 0b 24 04 10 4c 91 00 00 18 00 39 03 1b 3e
>029ad8	18 32 87 cd 0a c0 01 20 11 40 19 32 06 22 01 40
>029ae8	00 00 18 00 3a 03 1b 3e 18 32 0b 89 0b 24 0b 24
>029af8	be 40 19 32 06 22 c9 89 00 00 1c 00 3b 03 1b 3e
>029b08	18 32 d3 dc 0a d0 03 40 19 32 02 20 31 40 19 32
>029b18	06 22 3b 40 00 00 1e 00 3c 03 1b 3e 18 32 c5 cc
>029b28	07 c0 02 20 2e cd 7b cd 16 c0 19 32 06 22 0b 24
>029b38	26 40 00 00 1c 00 3d 03 1b 3e 18 32 7c 40 0a 24
>029b48	e7 d5 03 40 19 32 19 32 06 22 0b 24 95 7d 00 00
>029b58	20 00 3e 03 1b 3e 18 32 2e cd 7b cd 16 c0 03 20
>029b68	05 ce 3e c4 19 32 06 22 0b 24 02 10 c4 ad 00 00
>029b78	1e 00 3f 03 1b 3e 18 32 b4 dd 4e d1 01 40 19 32
>029b88	01 20 88 cd 01 c0 19 32 06 22 10 40 00 00 22 00
>029b98	40 03 1b 3e 18 32 86 cd a8 cb 1e c0 03 20 0b 24
>029ba8	02 10 3e a6 19 32 06 22 0b 24 02 10 42 a6 00 00
>029bb8	1c 00 41 03 1b 3e 18 32 0b 24 64 40 0a 24 0b 24
>029bc8	d3 48 19 32 06 22 0b 24 37 49 00 00 18 00 42 03
>029bd8	1b 3e 18 32 5c c5 0d 26 01 10 66 aa 19 32 06 22
>029be8	00 40 00 00 1e 00 43 03 1b 3e 18 32 2e cd 7b cd
>029bf8	16 c0 0d 26 0b 24 01 10 61 83 19 32 06 22 00 40
>029c08	00 00 18 00 44 03 1b 3e 18 32 10 c0 0d 26 14 40
>029c18	19 32 06 22 0b 24 92 66 00 00 1e 00 45 03 1b 3e
>029c28	18 32 86 cd a8 cb 1e c0 03 20 03 10 62 a9 19 32
>029c38	06 22 03 10 1e a9 00 00 16 00 46 03 1b 3e 18 32
>029c48	43 40 0d 26 d8 c4 19 32 06 22 00 40 00 00 1a 00
>029c58	47 03 1b 3e 18 32 57 40 02 20 87 cd 0a c0 19 32
>029c68	06 22 04 10 f7 86 00 00 1a 00 48 03 1b 3e 18 32
>029c78	76 40 02 20 04 10 e3 8e 19 32 06 22 04 10 f7 8e
>029c88	00 00 1c 00 49 03 1b 3e 18 32 76 40 02 20 88 cd
>029c98	3d c8 13 c0 19 32 06 22 03 10 76 a9 00 00 16 00
>029ca8	4a 03 1b 3e 18 32 34 40 02 20 1a c0 19 32 06 22
>029cb8	7c 40 00 00 20 00 4b 03 1b 3e 18 32 2c dd 1c d0
>029cc8	00 40 19 32 0b 24 68 40 19 32 06 22 0b 24 02 10
>029cd8	b5 b6 00 00 1a 00 4c 03 1b 3e 18 32 1a c0 03 20
>029ce8	c7 cc 99 c3 19 32 06 22 0b 24 7f 99 00 00 1c 00
>029cf8	4d 03 1b 3e 18 32 f3 cc dd c4 0a 24 cf c5 19 32
>029d08	06 22 0b 24 04 10 08 a4 00 00 1e 00 4e 03 1b 3e
>029d18	18 32 cf c5 0b 24 ce dc 1d d0 01 40 19 32 19 32
>029d28	06 22 0b 24 75 40 00 00 16 00 4f 03 1b 3e 18 32
>029d38	f6 c4 01 20 34 40 19 32 06 22 30 40 00 00 1a 00
>029d48	50 03 1b 3e 18 32 04 cd c0 ca 13 c0 0d 26 14 40
>029d58	19 32 06 22 65 5c 00 00 18 00 51 03 1b 3e 18 32
>029d68	0b 24 64 40 01 20 68 40 19 32 06 22 08 40 00 00
>029d78	1e 00 52 03 1b 3e 18 32 74 40 02 20 0b 24 05 10
>029d88	c6 88 19 32 06 22 0b 24 05 10 82 88 00 00 1a 00
>029d98	53 03 1b 3e 18 32 0b 24 47 40 0b 24 15 c0 19 32
>029da8	06 22 05 10 7f 88 00 00 1e 00 54 03 1b 3e 18 32
>029db8	43 40 03 20 0b 24 04 10 e4 90 19 32 06 22 0b 24
>029dc8	04 10 a1 90 00 00 24 00 55 03 1b 3e 18 32 0b 24
>029dd8	05 10 4f 71 02 20 cf dc 72 d0 02 40 19 32 19 32
>029de8	06 22 0b 24 05 10 0b 71 00 00 1a 00 56 03 1b 3e
>029df8	18 32 01 10 66 aa 0a 24 54 40 19 32 06 22 01 10
>029e08	ba aa 00 00 1e 00 57 03 1b 3e 18 32 0b 24 02 10
>029e18	3e a6 0c 26 0b 24 a9 40 19 32 06 22 d8 11 ee be
>029e28	00 00 22 00 58 03 1b 3e 18 32 86 cd a8 cb 1e c0
>029e38	0a 24 0b 24 01 10 45 60 19 32 06 22 0b 24 01 10
>029e48	c9 5f 00 00 1c 00 59 03 1b 3e 18 32 01 10 e4 41
>029e58	03 20 12 ce 1a c0 19 32 06 22 01 10 8d 41 00 00
>029e68	1e 00 5a 03 1b 3e 18 32 2c cd 48 cb 1d c0 0c 26
>029e78	5c c5 19 32 06 22 0b 24 cd 12 b0 56 00 00 1a 00
>029e88	5b 03 1b 3e 18 32 34 40 0c 26 04 10 e3 8e 19 32
>029e98	06 22 f0 10 1c 46 00 00 1e 00 5c 03 1b 3e 18 32
>029ea8	7c 40 03 20 0b 24 04 10 a4 a3 19 32 06 22 0b 24
>029eb8	04 10 e0 a3 00 00 1c 00 5d 03 1b 3e 18 32 d0 cd
>029ec8	85 c2 0b 24 d1 cd 8c c2 19 32 06 22 01 10 88 41
>029ed8	00 00 18 00 5e 03 1b 3e 18 32 12 ce 1a c0 03 20
>029ee8	69 40 19 32 06 22 00 40 00 00 1a 00 5f 03 1b 3e
>029ef8	18 32 7c 40 02 20 04 10 d8 47 19 32 06 22 04 10
>029f08	fc 47 00 00 20 00 60 03 1b 3e 18 32 3a ce 4c c8
>029f18	24 c0 0a 24 88 cd 3d c8 13 c0 19 32 06 22 03 10
>029f28	d8 a9 00 00 18 00 61 03 1b 3e 18 32 03 c0 0d 26
>029f38	cf c5 19 32 06 22 0b 24 8a 46 00 00 1a 00 62 03
>029f48	1b 3e 18 32 88 cd 01 c0 01 20 88 cd 01 c0 19 32
>029f58	06 22 18 40 00 00 1a 00 63 03 1b 3e 18 32 82 40
>029f68	0d 26 04 cd c0 ca 13 c0 19 32 06 22 00 40 00 00
>029f78	22 00 64 03 1b 3e 18 32 c5 cc 07 c0 0a 24 cf dc
>029f88	72 d0 03 40 19 32 19 32 06 22 0b 24 04 10 96 9b
>029f98	00 00 1c 00 65 03 1b 3e 18 32 0b 24 01 10 5b 4a
>029fa8	0d 26 f0 c4 19 32 06 22 0b 24 ea 46 00 00 1a 00
>029fb8	66 03 1b 3e 18 32 68 40 0c 26 03 10 62 a9 19 32
>029fc8	06 22 8d 11 d0 8f 00 00 1e 00 67 03 1b 3e 18 32
>029fd8	0b 24 01 10 61 83 01 20 5c c5 19 32 06 22 0b 24
>029fe8	01 10 e9 83 00 00 1a 00 68 03 1b 3e 18 32 0b 24
>029ff8	e9 99 0d 26 71 40 19 32 06 22 0b 24 cb 40 00 00
>02a008	1a 00 69 03 1b 3e 18 32 05 ce 3e c4 01 20 5c c5
>02a018	19 32 06 22 02 10 06 ad 00 00 1e 00 6a 03 1b 3e
>02a028	18 32 e7 d5 02 40 19 32 02 20 88 cd 01 c0 19 32
>02a038	06 22 04 10 5d b3 00 00 1e 00 6b 03 1b 3e 18 32
>02a048	86 cd a8 cb 1e c0 01 20 cb cc 50 ca 12 c0 19 32
>02a058	06 22 7c 40 00 00 1c 00 6c 03 1b 3e 18 32 88 cd
>02a068	01 c0 01 20 2e cd 7b cd 16 c0 19 32 06 22 18 40
>02a078	00 00 20 00 6d 03 1b 3e 18 32 88 cd 3d c8 13 c0
>02a088	0c 26 3a ce 4c c8 24 c0 19 32 06 22 c3 11 2c 53
>02a098	00 00 1c 00 6e 03 1b 3e 18 32 53 c5 03 20 88 cd
>02a0a8	01 c0 19 32 06 22 0b 24 04 10 63 6e 00 00 1a 00
>02a0b8	6f 03 1b 3e 18 32 76 40 02 20 01 10 66 aa 19 32
>02a0c8	06 22 01 10 76 aa 00 00 1a 00 70 03 1b 3e 18 32
>02a0d8	06 c0 0a 24 71 40 19 32 06 22 0b 24 03 10 b4 96
>02a0e8	00 00 1e 00 71 03 1b 3e 18 32 0b 24 05 10 9e 40
>02a0f8	01 20 5c c5 19 32 06 22 0b 24 05 10 be 40 00 00
>02a108	16 00 72 03 1b 3e 18 32 14 40 01 20 18 40 19 32
>02a118	06 22 10 40 00 00 1a 00 73 03 1b 3e 18 32 0b 24
>02a128	66 40 0c 26 0b 24 a9 40 19 32 06 22 56 83 00 00
>02a138	1c 00 74 03 1b 3e 18 32 0b 24 64 40 0d 26 0b 24
>02a148	02 10 ac 72 19 32 06 22 00 40 00 00 20 00 75 03
>02a158	1b 3e 18 32 05 10 25 4e 02 20 d3 dc 0a d0 03 40
>02a168	19 32 19 32 06 22 05 10 2f 4e 00 00 1c 00 76 03
>02a178	1b 3e 18 32 0b 24 be 40 0c 26 dc cd 21 c2 19 32
>02a188	06 22 0b 24 98 66 00 00 1c 00 77 03 1b 3e 18 32
>02a198	a8 cd 15 c0 0b 24 3a ce 4c c8 24 c0 19 32 06 22
>02a1a8	5c a3 00 00 1a 00 78 03 1b 3e 18 32 0e c0 0c 26
>02a1b8	39 ce 12 c0 19 32 06 22 a7 12 d0 7c 00 00 1e 00
>02a1c8	79 03 1b 3e 18 32 86 cd a8 cb 1e c0 0d 26 04 cd
>02a1d8	c0 ca 13 c0 19 32 06 22 00 40 00 00 1a 00 7a 03
>02a1e8	1b 3e 18 32 69 40 0a 24 04 10 0c 82 19 32 06 22
>02a1f8	04 10 75 82 00 00 18 00 7b 03 1b 3e 18 32 dc cd
>02a208	21 c2 03 20 6a 40 19 32 06 22 5e 40 00 00 18 00
>02a218	7c 03 1b 3e 18 32 21 c5 02 20 06 c0 19 32 06 22
>02a228	0b 24 01 40 00 00 1a 00 7d 03 1b 3e 18 32 f0 c4
>02a238	03 20 0b 24 d3 48 19 32 06 22 0b 24 c7 48 00 00
>02a248	1c 00 7e 03 1b 3e 18 32 06 ce 23 c0 0b 24 1a c0
>02a258	19 32 06 22 0b 24 02 10 ac 61 00 00 16 00 7f 03
>02a268	1b 3e 18 32 68 40 0d 26 14 40 19 32 06 22 05 40
>02a278	00 00 1a 00 80 03 1b 3e 18 32 04 10 30 5f 01 20
>02a288	21 c5 19 32 06 22 04 10 30 5f 00 00 1a 00 81 03
>02a298	1b 3e 18 32 68 40 03 20 0b 24 47 40 19 32 06 22
>02a2a8	0b 24 2f 40 00 00 1a 00 82 03 1b 3e 18 32 e0 c5
>02a2b8	0c 26 43 40 19 32 06 22 0b 24 77 10 5f 58 00 00
>02a2c8	1a 00 83 03 1b 3e 18 32 53 c5 0b 24 c3 40 19 32
>02a2d8	06 22 0b 24 04 10 3e 6f 00 00 1e 00 84 03 1b 3e
>02a2e8	18 32 0b 24 be 40 01 20 88 cd 3d c8 13 c0 19 32
>02a2f8	06 22 03 10 42 a9 00 00 1e 00 85 03 1b 3e 18 32
>02a308	fc dd 02 d0 05 40 19 32 0d 26 88 cd 01 c0 19 32
>02a318	06 22 24 46 00 00 1e 00 86 03 1b 3e 18 32 34 40
>02a328	0c 26 b9 cd 82 ca 07 c0 19 32 06 22 0b 24 6b 10
>02a338	34 60 00 00 1a 00 87 03 1b 3e 18 32 04 10 0c bd
>02a348	03 20 14 40 19 32 06 22 04 10 18 bd 00 00 1a 00
>02a358	88 03 1b 3e 18 32 f0 c4 0b 24 18 c0 19 32 06 22
>02a368	0b 24 04 10 cf 8e 00 00 1a 00 89 03 1b 3e 18 32
>02a378	03 10 62 a9 03 20 71 40 19 32 06 22 03 10 13 a9
>02a388	00 00 1c 00 8a 03 1b 3e 18 32 0b 24 64 40 01 20
>02a398	01 10 e4 41 19 32 06 22 01 10 84 41 00 00 1c 00
>02a3a8	8b 03 1b 3e 18 32 02 10 a6 ad 0d 26 0b 24 66 40
>02a3b8	19 32 06 22 0b 24 95 43 00 00 1a 00 8c 03 1b 3e
>02a3c8	18 32 0b 24 a9 40 0d 26 04 10 d8 47 19 32 06 22
>02a3d8	00 40 00 00 1c 00 8d 03 1b 3e 18 32 0b 24 a9 40
>02a3e8	0c 26 96 bc 19 32 06 22 0b 24 a4 10 06 7f 00 00
>02a3f8	1e 00 8e 03 1b 3e 18 32 0b 24 66 40 0b 24 04 10
>02a408	e3 86 19 32 06 22 0b 24 04 10 49 87 00 00 18 00
>02a418	8f 03 1b 3e 18 32 5c c5 0b 24 0b 24 a9 40 19 32
>02a428	06 22 00 40 00 00 1e 00 90 03 1b 3e 18 32 c7 cc
>02a438	99 c3 02 20 e1 cd 7a cd 17 c0 19 32 06 22 0b 24
>02a448	15 40 00 00 1a 00 91 03 1b 3e 18 32 d8 c4 02 20
>02a458	0b 24 be 40 19 32 06 22 0b 24 ba 40 00 00 1a 00
>02a468	92 03 1b 3e 18 32 7c 40 02 20 0b 24 17 99 19 32
>02a478	06 22 0b 24 03 99 00 00 16 00 93 03 1b 3e 18 32
>02a488	cf c5 0d 26 03 c0 19 32 06 22 00 40 00 00 18 00
>02a498	94 03 1b 3e 18 32 04 10 d8 47 01 20 31 40 19 32
>02a4a8	06 22 10 40 00 00 20 00 95 03 1b 3e 18 32 0b 24
>02a4b8	02 10 01 48 02 20 2e cd 7b cd 16 c0 19 32 06 22
>02a4c8	0b 24 01 40 00 00 1e 00 96 03 1b 3e 18 32 0b 24
>02a4d8	64 40 0b 24 0b 24 03 10 1c 91 19 32 06 22 03 10
>02a4e8	b8 90 00 00 1c 00 97 03 1b 3e 18 32 0b 24 03 10
>02a4f8	25 97 0d 26 69 40 19 32 06 22 0b 24 7c 44 00 00
>02a508	1e 00 98 03 1b 3e 18 32 0b 24 a9 40 03 20 0b 24
>02a518	02 10 cf b0 19 32 06 22 02 10 66 b0 00 00 1e 00
>02a528	99 03 1b 3e 18 32 0b 24 01 10 61 83 03 20 0b 24
>02a538	66 40 19 32 06 22 01 10 05 83 00 00 1c 00 9a 03
>02a548	1b 3e 18 32 86 cd a8 cb 1e c0 0d 26 55 ce 88 c2
>02a558	19 32 06 22 00 40 00 00 1e 00 9b 03 1b 3e 18 32
>02a568	0e c0 02 20 0b 24 01 10 45 60 19 32 06 22 0b 24
>02a578	01 10 01 60 00 00 1a 00 9c 03 1b 3e 18 32 04 10
>02a588	1a 73 0c 26 7c 40 19 32 06 22 21 12 98 80 00 00
>02a598	18 00 9d 03 1b 3e 18 32 cf c5 03 20 34 40 19 32
>02a5a8	06 22 0b 24 58 40 00 00 1a 00 9e 03 1b 3e 18 32
>02a5b8	0b 24 d3 48 0b 24 e0 c5 19 32 06 22 01 10 e2 9a
>02a5c8	00 00 1e 00 9f 03 1b 3e 18 32 5d cd 41 c3 0c 26
>02a5d8	0b 24 a9 40 19 32 06 22 0b 24 a4 13 18 8c 00 00
>02a5e8	1e 00 a0 03 1b 3e 18 32 0b 24 09 40 0b 24 e7 d5
>02a5f8	00 40 19 32 19 32 06 22 0b 24 9f bc 00 00 1e 00
>02a608	a1 03 1b 3e 18 32 3a ce 4c c8 24 c0 0d 26 0b 24
>02a618	01 10 65 59 19 32 06 22 00 40 00 00 1e 00 a2 03
>02a628	1b 3e 18 32 dc cd 21 c2 0b 24 01 10 70 5e 19 32
>02a638	06 22 0b 24 01 10 3c 5e 00 00 1c 00 a3 03 1b 3e
>02a648	18 32 53 c5 0b 24 0b 24 a9 40 19 32 06 22 0b 24
>02a658	04 10 d2 6d 00 00 16 00 a4 03 1b 3e 18 32 34 40
>02a668	0d 26 34 40 19 32 06 22 01 40 00 00 1c 00 a5 03
>02a678	1b 3e 18 32 06 ce 23 c0 0a 24 0e c0 19 32 06 22
>02a688	0b 24 02 10 d0 60 00 00 1c 00 a6 03 1b 3e 18 32
>02a698	0b 24 64 40 01 20 86 cd a8 cb 1e c0 19 32 06 22
>02a6a8	1c 40 00 00 1a 00 a7 03 1b 3e 18 32 04 10 1a 73
>02a6b8	01 20 dc cd 21 c2 19 32 06 22 10 40 00 00 1e 00
>02a6c8	a8 03 1b 3e 18 32 69 40 02 20 0b 24 04 10 38 9b
>02a6d8	19 32 06 22 0b 24 04 10 17 9b 00 00 20 00 a9 03
>02a6e8	1b 3e 18 32 28 ce 4b cc 18 c0 0c 26 e1 cd 7a cd
>02a6f8	17 c0 19 32 06 22 b2 12 c8 72 00 00 20 00 aa 03
>02a708	1b 3e 18 32 0b 24 64 40 03 20 51 d5 01 40 19 32
>02a718	19 32 06 22 0b 24 04 10 70 82 00 00 18 00 ab 03
>02a728	1b 3e 18 32 76 40 0b 24 86 a4 19 32 06 22 0b 24
>02a738	10 a4 00 00 1a 00 ac 03 1b 3e 18 32 0b 24 6a 81
>02a748	0a 24 54 40 19 32 06 22 0b 24 16 81 00 00 1e 00
>02a758	ad 03 1b 3e 18 32 0b 24 d3 48 0c 26 1b cd d1 cd
>02a768	21 c0 19 32 06 22 1e 1d c3 a4 00 00 16 00 ae 03
>02a778	1b 3e 18 32 7f 9f 0d 26 f0 c4 19 32 06 22 c6 44
>02a788	00 00 20 00 af 03 1b 3e 18 32 e1 cd 7a cd 17 c0
>02a798	03 20 0b 24 02 10 cf b0 19 32 06 22 02 10 73 b0
>02a7a8	00 00 16 00 b0 03 1b 3e 18 32 06 c0 0d 26 21 c5
>02a7b8	19 32 06 22 59 74 00 00 1c 00 b1 03 1b 3e 18 32
>02a7c8	0b 24 47 40 01 20 03 10 62 a9 19 32 06 22 03 10
>02a7d8	20 a9 00 00 1a 00 b2 03 1b 3e 18 32 2c cd 48 cb
>02a7e8	1d c0 0d 26 69 40 19 32 06 22 2c 45 00 00 22 00
>02a7f8	b3 03 1b 3e 18 32 0b 24 05 10 9e 40 03 20 b4 cd
>02a808	ff c9 16 c0 19 32 06 22 0b 24 05 10 ed 40 00 00
>02a818	1c 00 b4 03 1b 3e 18 32 5e ce 98 c3 0a 24 6a 40
>02a828	19 32 06 22 0b 24 04 10 7a 90 00 00 22 00 b5 03
>02a838	1b 3e 18 32 d3 dc 0a d0 02 40 19 32 03 20 0b 24
>02a848	5e 40 19 32 06 22 0b 24 03 10 e3 a4 00 00 16 00
>02a858	b6 03 1b 3e 18 32 76 40 0d 26 71 40 19 32 06 22
>02a868	01 40 00 00 1e 00 b7 03 1b 3e 18 32 0b 24 04 10
>02a878	a4 a3 0b 24 7c 40 19 32 06 22 0b 24 04 10 20 a4
>02a888	00 00 1c 00 b8 03 1b 3e 18 32 c5 cc 07 c0 01 20
>02a898	cf c5 19 32 06 22 0b 24 04 10 78 9b 00 00 1a 00
>02a8a8	b9 03 1b 3e 18 32 0b 24 66 40 03 20 7f 9f 19 32
>02a8b8	06 22 0b 24 1b 9f 00 00 24 00 ba 03 1b 3e 18 32
>02a8c8	0b 24 04 10 a4 a3 0c 26 2c dd 1c d0 03 40 19 32
>02a8d8	19 32 06 22 0b 24 fa 11 e8 81 00 00 1c 00 bb 03
>02a8e8	1b 3e 18 32 0b 24 04 10 ae 60 02 20 5c c5 19 32
>02a8f8	06 22 0b 24 a9 40 00 00 1e 00 bc 03 1b 3e 18 32
>02a908	b8 cd 2c cd 16 c0 0b 24 1a c0 19 32 06 22 0b 24
>02a918	01 10 c9 83 00 00 18 00 bd 03 1b 3e 18 32 12 ce
>02a928	1a c0 01 20 31 c6 19 32 06 22 49 40 00 00 1e 00
>02a938	be 03 1b 3e 18 32 0b 24 06 10 00 45 01 20 3a ce
>02a948	4c c8 24 c0 19 32 06 22 00 40 00 00 1a 00 bf 03
>02a958	1b 3e 18 32 0b 24 be 40 0c 26 0b 24 a9 40 19 32
>02a968	06 22 6e bd 00 00 1c 00 c0 03 1b 3e 18 32 31 c6
>02a978	0d 26 e1 cd 7a cd 17 c0 19 32 06 22 0b 24 dc 40
>02a988	00 00 1e 00 c1 03 1b 3e 18 32 fc dd 02 d0 02 40
>02a998	19 32 0d 26 04 10 ec 77 19 32 06 22 00 40 00 00
>02a9a8	1c 00 c2 03 1b 3e 18 32 5d cd 41 c3 0d 26 3a ce
>02a9b8	4c c8 24 c0 19 32 06 22 fc 45 00 00 1c 00 c3 03
>02a9c8	1b 3e 18 32 04 10 1a 73 02 20 88 cd 01 c0 19 32
>02a9d8	06 22 04 10 1a 73 00 00 1a 00 c4 03 1b 3e 18 32
>02a9e8	3a ce 4c c8 24 c0 02 20 11 40 19 32 06 22 77 40
>02a9f8	00 00 1c 00 c5 03 1b 3e 18 32 76 40 0d 26 ca dc
>02aa08	0d d2 04 40 19 32 19 32 06 22 00 40 00 00 1c 00
>02aa18	c6 03 1b 3e 18 32 01 10 66 aa 02 20 0b 24 64 40
>02aa28	19 32 06 22 0b 24 02 40 00 00 16 00 c7 03 1b 3e
>02aa38	18 32 31 c6 0d 26 74 40 19 32 06 22 69 41 00 00
>02aa48	20 00 c8 03 1b 3e 18 32 e1 cd 7a cd 17 c0 0c 26
>02aa58	55 ce 88 c2 19 32 06 22 0b 24 5b 11 b4 b7 00 00
>02aa68	1c 00 c9 03 1b 3e 18 32 76 40 0a 24 7f cd 18 c0
>02aa78	19 32 06 22 0b 24 01 10 cf 5f 00 00 1e 00 ca 03
>02aa88	1b 3e 18 32 0b 24 02 10 01 48 0d 26 2e cd 7b cd
>02aa98	16 c0 19 32 06 22 96 42 00 00 1a 00 cb 03 1b 3e
>02aaa8	18 32 05 ce 3e c4 0a 24 21 c5 19 32 06 22 02 10
>02aab8	9d ad 00 00 1e 00 cc 03 1b 3e 18 32 04 cd c0 ca
>02aac8	13 c0 02 20 0b 24 be 40 19 32 06 22 0b 24 12 40
>02aad8	00 00 1a 00 cd 03 1b 3e 18 32 21 c5 01 20 02 10
>02aae8	a5 9d 19 32 06 22 02 10 a5 9d 00 00 20 00 ce 03
>02aaf8	1b 3e 18 32 0b 24 01 10 51 7e 0c 26 12 ce 1a c0
>02ab08	19 32 06 22 0b 24 9c 10 39 4f 00 00 1c 00 cf 03
>02ab18	1b 3e 18 32 04 10 e3 86 0b 24 0b 24 a9 40 19 32
>02ab28	06 22 04 10 8c 87 00 00 1e 00 d0 03 1b 3e 18 32
>02ab38	b8 cd 2c cd 16 c0 0a 24 74 40 19 32 06 22 0b 24
>02ab48	01 10 ed 82 00 00 1c 00 d1 03 1b 3e 18 32 1a c0
>02ab58	01 20 d3 dc 0a d0 02 40 19 32 19 32 06 22 28 40
>02ab68	00 00 1e 00 d2 03 1b 3e 18 32 2e cd 7b cd 16 c0
>02ab78	02 20 04 10 e3 8e 19 32 06 22 0b 24 05 40 00 00
>02ab88	1a 00 d3 03 1b 3e 18 32 14 40 03 20 04 10 30 5f
>02ab98	19 32 06 22 04 10 24 5f 00 00 1e 00 d4 03 1b 3e
>02aba8	18 32 34 40 0a 24 cc cc d2 cd 1d c0 19 32 06 22
>02abb8	0b 24 05 10 78 a8 00 00 12 00 d5 03 1b 3e 05 ce
>02abc8	3e c4 06 22 02 10 a6 ad 00 00 16 00 d6 03 1b 3e
>02abd8	b9 cd 82 ca 07 c0 06 22 0b 24 02 10 01 48 00 00
>02abe8	10 00 d7 03 1b 3e a8 cd 15 c0 06 22 d2 a3 00 00
>02abf8	12 00 d8 03 1b 3e 39 ce 12 c0 06 22 05 10 c4 ad
>02ac08	00 00 16 00 d9 03 1b 3e b8 cd 2c cd 16 c0 06 22
>02ac18	0b 24 01 10 61 83 00 00 14 00 da 03 1b 3e 06 ce
>02ac28	23 c0 06 22 0b 24 02 10 44 61 00 00 12 00 db 03
>02ac38	1b 3e 87 cd 0a c0 06 22 04 10 e3 86 00 00 14 00
>02ac48	dc 03 1b 3e 5e ce 98 c3 06 22 0b 24 04 10 e4 90
>02ac58	00 00 12 00 dd 03 1b 3e b4 cd ff c9 16 c0 06 22
>02ac68	71 40 00 00 12 00 de 03 1b 3e 53 c5 06 22 0b 24
>02ac78	04 10 7b 6e 00 00 0e 00 df 03 1b 3e 1a c0 06 22
>02ac88	68 40 00 00 12 00 e0 03 1b 3e e0 c5 06 22 0b 24
>02ac98	01 10 b5 a3 00 00 14 00 e1 03 1b 3e 2c cd 48 cb
>02aca8	1d c0 06 22 04 10 30 5f 00 00 10 00 e2 03 1b 3e
>02acb8	12 ce 1a c0 06 22 69 40 00 00 16 00 e3 03 1b 3e
>02acc8	1b cd d1 cd 21 c0 06 22 0b 24 01 10 51 7e 00 00
>02acd8	12 00 e4 03 1b 3e c7 cc 99 c3 06 22 0b 24 17 99
>02ace8	00 00 10 00 e5 03 1b 3e 03 c0 06 22 05 10 25 4e
>02acf8	00 00 12 00 e6 03 1b 3e 15 c0 06 22 0b 24 05 10
>02ad08	c6 88 00 00 12 00 e7 03 1b 3e d4 cd 24 c0 06 22
>02ad18	02 10 68 5b 00 00 12 00 e8 03 1b 3e d8 c4 06 22
>02ad28	0b 24 02 10 ba a1 00 00 14 00 e9 03 1b 3e c5 cc
>02ad38	07 c0 06 22 0b 24 04 10 38 9b 00 00 10 00 ea 03
>02ad48	1b 3e cf c5 06 22 0b 24 64 40 00 00 10 00 eb 03
>02ad58	1b 3e 31 c6 06 22 01 10 cb 63 00 00 10 00 ec 03
>02ad68	1b 3e 39 c6 06 22 04 10 d8 47 00 00 14 00 ed 03
>02ad78	1b 3e d0 cd 39 ca 03 c0 06 22 01 10 e4 41 00 00
>02ad88	12 00 ee 03 1b 3e 06 c0 06 22 0b 24 03 10 25 97
>02ad98	00 00 0e 00 ef 03 1b 3e f0 c4 06 22 14 40 00 00
>02ada8	14 00 f0 03 1b 3e f3 cc dd c4 06 22 0b 24 04 10
>02adb8	a4 a3 00 00 12 00 f1 03 1b 3e 3a ce 4c c8 24 c0
>02adc8	06 22 76 40 00 00 0e 00 f2 03 1b 3e 0e c0 06 22
>02add8	74 40 00 00 16 00 f3 03 1b 3e 28 ce 4b cc 18 c0
>02ade8	06 22 0b 24 03 10 1c 91 00 00 16 00 f4 03 1b 3e
>02adf8	29 ce f9 c8 14 c0 06 22 0b 24 05 10 9e 40 00 00
>02ae08	12 00 f5 03 1b 3e 5d cd 41 c3 06 22 05 10 58 82
>02ae18	00 00 12 00 f6 03 1b 3e 2c cd fd c1 06 22 05 10
>02ae28	55 af 00 00 14 00 f7 03 1b 3e d1 cd 8c c2 06 22
>02ae38	0b 24 01 10 5b 4a 00 00 10 00 f8 03 1b 3e 05 c0
>02ae48	06 22 04 10 1a 73 00 00 10 00 f9 03 1b 3e 5c c5
>02ae58	06 22 0b 24 a9 40 00 00 16 00 fa 03 1b 3e 56 ce
>02ae68	c7 c9 1e c0 06 22 0b 24 05 10 bd 84 00 00 12 00
>02ae78	fb 03 1b 3e 86 cd a8 cb 1e c0 06 22 7c 40 00 00
>02ae88	12 00 fc 03 1b 3e cb cc 50 ca 12 c0 06 22 7f 9f
>02ae98	00 00 12 00 fd 03 1b 3e d0 cd 85 c2 06 22 0b 24
>02aea8	d3 48 00 00 12 00 fe 03 1b 3e 55 ce 88 c2 06 22
>02aeb8	01 10 66 aa 00 00 14 00 ff 03 1b 3e 88 cd 3d c8
>02aec8	13 c0 06 22 03 10 62 a9 00 00 16 00 00 04 1b 3e
>02aed8	a7 cd e8 c8 0a c0 06 22 0b 24 05 10 43 a9 00 00
>02aee8	16 00 01 04 1b 3e 32 ce dd ca 0c c0 06 22 0b 24
>02aef8	02 10 3e a6 00 00 12 00 02 04 1b 3e 49 c5 06 22
>02af08	0b 24 06 10 00 45 00 00 14 00 03 04 1b 3e 7f cd
>02af18	18 c0 06 22 0b 24 01 10 45 60 00 00 14 00 04 04
>02af28	1b 3e 04 cd c0 ca 13 c0 06 22 04 10 ec 77 00 00
>02af38	12 00 05 04 1b 3e 10 c0 06 22 0b 24 06 10 77 43
>02af48	00 00 14 00 06 04 1b 3e 5a cd 1d c4 06 22 0b 24
>02af58	04 10 ae 60 00 00 10 00 07 04 1b 3e 18 c0 06 22
>02af68	04 10 e3 8e 00 00 14 00 08 04 1b 3e 2e cd 7b cd
>02af78	16 c0 06 22 0b 24 66 40 00 00 16 00 09 04 1b 3e
>02af88	cc cc d2 cd 1d c0 06 22 0b 24 05 10 ac a8 00 00
>02af98	10 00 0a 04 1b 3e dc cd 21 c2 06 22 34 40 00 00
>02afa8	10 00 0b 04 1b 3e 88 cd 01 c0 06 22 18 40 00 00
>02afb8	12 00 0c 04 1b 3e f6 c4 06 22 0b 24 02 10 cf b0
>02afc8	00 00 10 00 0d 04 1b 3e e1 c5 06 22 01 10 48 aa
>02afd8	00 00 10 00 0e 04 1b 3e f9 cc 77 c3 06 22 86 a4
>02afe8	00 00 14 00 0f 04 1b 3e e1 cd 7a cd 17 c0 06 22
>02aff8	0b 24 be 40 00 00 10 00 10 04 1b 3e 21 c5 06 22
>02b008	0b 24 09 40 00 00 4c 00 11 04 1b 3e ce dc 1d d0
>02b018	00 40 19 32 06 22 0b 24 05 10 e1 70 17 32 1b 3e
>02b028	ce dc 1d d0 01 40 19 32 06 22 11 40 17 32 1b 3e
>02b038	ce dc 1d d0 02 40 19 32 06 22 0b 24 ae 40 17 32
>02b048	1b 3e ce dc 1d d0 03 40 19 32 06 22 02 10 a5 9d
>02b058	00 00 4c 00 12 04 1b 3e 2c dd 1c d0 00 40 19 32
>02b068	06 22 0b 24 02 10 4d b6 17 32 1b 3e 2c dd 1c d0
>02b078	01 40 19 32 06 22 03 10 8b 41 17 32 1b 3e 2c dd
>02b088	1c d0 02 40 19 32 06 22 01 10 70 5e 17 32 1b 3e
>02b098	2c dd 1c d0 03 40 19 32 06 22 6a 40 00 00 58 00
>02b0a8	13 04 1b 3e cf dc 72 d0 00 40 19 32 06 22 82 40
>02b0b8	17 32 1b 3e cf dc 72 d0 01 40 19 32 06 22 02 10
>02b0c8	4b af 17 32 1b 3e cf dc 72 d0 02 40 19 32 06 22
>02b0d8	54 40 17 32 1b 3e cf dc 72 d0 03 40 19 32 06 22
>02b0e8	0b 24 5e 40 17 32 1b 3e cf dc 72 d0 04 40 19 32
>02b0f8	06 22 57 40 00 00 74 00 14 04 1b 3e fc dd 02 d0
>02b108	00 40 19 32 06 22 0b 24 01 10 65 59 17 32 1b 3e
>02b118	fc dd 02 d0 01 40 19 32 06 22 0b 24 03 10 8a 7e
>02b128	17 32 1b 3e fc dd 02 d0 02 40 19 32 06 22 c3 40
>02b138	17 32 1b 3e fc dd 02 d0 03 40 19 32 06 22 0b 24
>02b148	87 40 17 32 1b 3e fc dd 02 d0 04 40 19 32 06 22
>02b158	0b 24 01 10 88 55 17 32 1b 3e fc dd 02 d0 05 40
>02b168	19 32 06 22 01 10 67 53 00 00 32 00 15 04 1b 3e
>02b178	04 d5 00 40 19 32 06 22 05 10 dc a0 17 32 1b 3e
>02b188	04 d5 01 40 19 32 06 22 0b 24 47 40 17 32 1b 3e
>02b198	04 d5 02 40 19 32 06 22 0b 89 00 00 44 00 16 04
>02b1a8	1b 3e e7 d5 00 40 19 32 06 22 96 bc 17 32 1b 3e
>02b1b8	e7 d5 01 40 19 32 06 22 0b 24 02 10 fb ad 17 32
>02b1c8	1b 3e e7 d5 02 40 19 32 06 22 04 10 4d b3 17 32
>02b1d8	1b 3e e7 d5 03 40 19 32 06 22 0b 24 11 7e 00 00
>02b1e8	46 00 17 04 1b 3e 51 d5 00 40 19 32 06 22 04 10
>02b1f8	9e 9a 17 32 1b 3e 51 d5 01 40 19 32 06 22 04 10
>02b208	0c 82 17 32 1b 3e 51 d5 02 40 19 32 06 22 02 10
>02b218	75 46 17 32 1b 3e 51 d5 03 40 19 32 06 22 0b 24
>02b228	03 10 3d 83 00 00 4e 00 18 04 1b 3e b4 dd 4e d1
>02b238	00 40 19 32 06 22 03 10 de bd 17 32 1b 3e b4 dd
>02b248	4e d1 01 40 19 32 06 22 0b 24 05 10 4f 71 17 32
>02b258	1b 3e b4 dd 4e d1 02 40 19 32 06 22 0b 24 e9 99
>02b268	17 32 1b 3e b4 dd 4e d1 03 40 19 32 06 22 04 10
>02b278	0c bd 00 00 6e 00 19 04 1b 3e ca dc 0d d2 00 40
>02b288	19 32 06 22 04 10 18 8d 17 32 1b 3e ca dc 0d d2
>02b298	01 40 19 32 06 22 31 40 17 32 1b 3e ca dc 0d d2
>02b2a8	02 40 19 32 06 22 0b 24 02 10 5f be 17 32 1b 3e
>02b2b8	ca dc 0d d2 03 40 19 32 06 22 43 40 17 32 1b 3e
>02b2c8	ca dc 0d d2 04 40 19 32 06 22 02 10 f7 85 17 32
>02b2d8	1b 3e ca dc 0d d2 05 40 19 32 06 22 03 10 51 a5
>02b2e8	00 00 4c 00 1a 04 1b 3e d3 dc 0a d0 00 40 19 32
>02b2f8	06 22 0b 24 6a 81 17 32 1b 3e d3 dc 0a d0 01 40
>02b308	19 32 06 22 0b 24 02 10 ac 72 17 32 1b 3e d3 dc
>02b318	0a d0 02 40 19 32 06 22 03 10 bf a4 17 32 1b 3e
>02b328	d3 dc 0a d0 03 40 19 32 06 22 0b 40 00 00 00 00
>02b338	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>02b348	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 202 times (3232 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
