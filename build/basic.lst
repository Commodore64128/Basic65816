
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 12 11:45:19 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c b9 0c 01	jmp $010cb9			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	b1 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	84 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	94 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	a4 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	e8 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	4f 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	b4 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	31 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	13 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	ce 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	ce 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	4f 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	5b 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	d8 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	4f 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	60 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	72 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	e9 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	c9 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	a5 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	8f 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	20 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	75 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b1 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	b1 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	b1 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	b1 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	b1 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	b1 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	31 0a					.word Function_Let             & $FFFF ; token $3e1d "let"
>01003c	9a 0c					.word Function_ASSERT          & $FFFF ; token $3e1e "assert"
>01003e	f2 0a					.word Function_END             & $FFFF ; token $3e1f "end"
>010040	f4 0a					.word Function_RUN             & $FFFF ; token $3e20 "run"
>010042	4c 0b					.word Function_CLEAR           & $FFFF ; token $3e21 "clear"
>010044	98 0b					.word Function_Dim             & $FFFF ; token $3e22 "dim"
>010046	0c 0c					.word Function_COLLECT         & $FFFF ; token $3e23 "collect"
>010048	b5 0c					.word Function_CLS             & $FFFF ; token $3e24 "cls"
>01004a	a6 0a					.word Function_PRINT           & $FFFF ; token $3e25 "print"
>01004c	a6 0a					.word Function_PRINTALT        & $FFFF ; token $3e26 "?"
>01004e	b1 03					.word IllegalToken             & $FFFF ; token $3c27 "while"
>010050	b1 03					.word IllegalToken             & $FFFF ; token $3a28 "wend"
.010052					TokenText:
>010052	02 26					 .text $02,"&"        ; token $2001
>010054	02 7c					 .text $02,"|"        ; token $2002
>010056	02 5e					 .text $02,"^"        ; token $2003
>010058	12 3c					 .text $12,"<"        ; token $2204
>01005a	12 3e					 .text $12,">"        ; token $2205
>01005c	12 3d					 .text $12,"="        ; token $2206
>01005e	13 3c 3d				 .text $13,"<="       ; token $2207
>010061	13 3e 3d				 .text $13,">="       ; token $2208
>010064	13 3c 3e				 .text $13,"<>"       ; token $2209
>010067	22 2b					 .text $22,"+"        ; token $240a
>010069	22 2d					 .text $22,"-"        ; token $240b
>01006b	32 2a					 .text $32,"*"        ; token $260c
>01006d	32 2f					 .text $32,"/"        ; token $260d
>01006f	32 25					 .text $32,"%"        ; token $260e
>010071	33 3e 3e				 .text $33,">>"       ; token $260f
>010074	33 3c 3c				 .text $33,"<<"       ; token $2610
>010077	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01007d	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010082	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010087	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01008c	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010091	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>010097	92 2c					 .text $92,","        ; token $3217
>010099	92 3b					 .text $92,";"        ; token $3218
>01009b	92 3a					 .text $92,":"        ; token $3219
>01009d	92 28					 .text $92,"("        ; token $321a
>01009f	92 29					 .text $92,")"        ; token $321b
>0100a1	92 27					 .text $92,"'"        ; token $321c
>0100a3	f4 6c 65 74				 .text $f4,"let"      ; token $3e1d
>0100a7	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1e
>0100ae	f4 65 6e 64				 .text $f4,"end"      ; token $3e1f
>0100b2	f4 72 75 6e				 .text $f4,"run"      ; token $3e20
>0100b6	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e21
>0100bc	f4 64 69 6d				 .text $f4,"dim"      ; token $3e22
>0100c0	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e23
>0100c8	f4 63 6c 73				 .text $f4,"cls"      ; token $3e24
>0100cc	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e25
>0100d2	f2 3f					 .text $f2,"?"        ; token $3e26
>0100d4	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c27
>0100da	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a28
>0100df	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					letTokenID                       = $3e1d
=$3e1e					assertTokenID                    = $3e1e
=$3e1f					endTokenID                       = $3e1f
=$3e20					runTokenID                       = $3e20
=$3e21					clearTokenID                     = $3e21
=$3e22					dimTokenID                       = $3e22
=$3e23					collectTokenID                   = $3e23
=$3e24					clsTokenID                       = $3e24
=$3e25					printTokenID                     = $3e25
=$3e26					questionTokenID                  = $3e26
=$3c27					whileTokenID                     = $3c27
=$3a28					wendTokenID                      = $3a28

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100e0					Evaluate:
.0100e0	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100e3	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100e6					EvaluateLevel:
.0100e6	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100e9	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100eb	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100ed	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100f0	b0 79		bcs $01016b			bcs 	_ELVariable
.0100f2	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100f5	b0 16		bcs $01010d			bcs 	_ELConstant
.0100f7	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100fa	90 7f		bcc $01017b			bcc 	_ELStringConstant
.0100fc	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100ff	90 03		bcc $010104			bcc 	_ELConstantShift
.010101	82 94 00	brl $010198			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010104					_ELConstantShift:
.010104	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010107	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010109	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01010b	e6 06		inc $06				inc 	DCodePtr
.01010d					_ELConstant:
.01010d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01010f	38		sec				sec  								; shift it in the range 0-32767
.010110	e9 00 40	sbc #$4000			sbc 	#$4000
.010113	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010114	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010116	6a		ror a				ror 	a 							; rotate that into the constant value
.010117	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010119	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01011b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01011d	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01011f	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010121	e6 06		inc $06				inc 	DCodePtr
.010123					_ELGotAtom:
.010123	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010125	a8		tay				tay 								; save in Y
.010126	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010129	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01012c	d0 35		bne $010163			bne 	_ELExit
.01012e	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010130	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010133	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010135	98		tya				tya 								; get the keyword token back
.010136	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010139	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01013b	90 26		bcc $010163			bcc 	_ELExit 					; precedence too low, then exit.
.01013d	5a		phy				phy 								; save the binary operator on the stack
.01013e	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010140	e6 06		inc $06				inc 	DCodePtr
.010142	18		clc				clc 								; try the next level up
.010143	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010146	e8		inx				inx 								; calculate the RHS at the next stack level.
.010147	e8		inx				inx
.010148	20 e6 00	jsr $0100e6			jsr 	EvaluateLevel
.01014b	ca		dex				dex
.01014c	ca		dex				dex
.01014d	7a		ply				ply 								; get operator token back into Y
.01014e					_ELExecuteY:
.01014e	98		tya				tya
.01014f	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010152	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010153	9b		txy				txy 								; save X in Y
.010154	aa		tax				tax 								; double keyword ID in X
.010155	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010159	bb		tyx				tyx 								; restore X.
.01015a	8f 5f 01 01	sta $01015f			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01015e					_ELCallRoutine:
.01015e	20 5e 01	jsr $01015e			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010161	80 c0		bra $010123			bra 	_ELGotAtom 					; go round operator level again.
.010163	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010165	0a		asl a				asl 	a
.010166	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010168	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01016a	60		rts				rts
.01016b					_ELVariable:
.01016b	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01016d	20 2c 02	jsr $01022c			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010170	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010172	94 10		sty $10,x			sty 	EXSValueH+0,x
.010174	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010176	80 ab		bra $010123			bra 	_ELGotAtom
.010178					_ELSyntax
.010178	82 47 02	brl $0103c2			brl 	SyntaxError
.01017b					_ELStringConstant:
.01017b	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01017e	f0 f8		beq $010178			beq 	_ELSyntax
.010180	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010182	1a		inc a				inc 	a
.010183	1a		inc a				inc 	a
.010184	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010186	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010188	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01018a	18		clc				clc 								; add to string constant.
.01018b	65 06		adc $06				adc 	DCodePtr
.01018d	85 06		sta $06				sta 	DCodePtr
.01018f	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010191	09 00 80	ora #$8000			ora 	#$8000
.010194	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010196	80 8b		bra $010123			bra 	_ELGotAtom
.010198					_ELUnaryKeyword:
.010198	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01019a	a8		tay				tay 								; put the token in Y.
.01019b	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01019d	e6 06		inc $06				inc 	DCodePtr
.01019f	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101a2	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101a5	f0 a7		beq $01014e			beq 	_ELExecuteY					; go back and execute it
.0101a7	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101aa	d0 11		bne $0101bd			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101ac	20 e3 01	jsr $0101e3			jsr 	EvaluateNext 				; evaluate the expression
.0101af	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101b2					_ELCopy:
.0101b2	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101b4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101b6	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101b8	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101ba	82 66 ff	brl $010123			brl 	_ELGotAtom 					; and continue.
.0101bd					_ELUnaryOperator:
.0101bd	5a		phy				phy 								; save the operator on the stack.
.0101be	e8		inx				inx 								; this is like evaluate next
.0101bf	e8		inx				inx
.0101c0	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101c3	20 e6 00	jsr $0100e6			jsr 	EvaluateLevel
.0101c6	ca		dex				dex 								; unwind the stack.
.0101c7	ca		dex				dex
.0101c8	68		pla				pla 								; restore the unary operator.
.0101c9	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101cc	f0 03		beq $0101d1			beq 	_ELMinus
.0101ce	4c c2 03	jmp $0103c2			jmp 	SyntaxError
.0101d1					_ELMinus:
.0101d1	38		sec				sec 								; do the negation calculation.
.0101d2	a9 00 00	lda #$0000			lda 	#0
.0101d5	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101d7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101d9	a9 00 00	lda #$0000			lda 	#0
.0101dc	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101de	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101e0	82 40 ff	brl $010123			brl 	_ELGotAtom					; and continue.
.0101e3					EvaluateNext:
.0101e3	e8		inx				inx
.0101e4	e8		inx				inx
.0101e5	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101e8	20 e6 00	jsr $0100e6			jsr 	EvaluateLevel
.0101eb	ca		dex				dex
.0101ec	ca		dex				dex
.0101ed	60		rts				rts
.0101ee					EvaluateInteger:
.0101ee	20 e0 00	jsr $0100e0			jsr 	Evaluate
.0101f1	b0 01		bcs $0101f4			bcs 	EIType
.0101f3	60		rts				rts
.0101f4					EIType:
.0101f4	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0101f7	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101ff	78 70 65 63 74 65 64 00
.010207					EvaluateNextInteger:
.010207	20 e3 01	jsr $0101e3			jsr 	EvaluateNext
.01020a	b0 e8		bcs $0101f4			bcs 	EIType
.01020c	60		rts				rts
.01020d					EvaluateString:
.01020d	20 e0 00	jsr $0100e0			jsr 	Evaluate
.010210	90 01		bcc $010213			bcc 	ESType
.010212	60		rts				rts
.010213					ESType:
.010213	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010216	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01021e	78 70 65 63 74 65 64 00
.010226					EvaluateNextString:
.010226	20 e3 01	jsr $0101e3			jsr 	EvaluateNext
.010229	90 e8		bcc $010213			bcc 	ESType
.01022b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01022c					VariableAccessExpression:
.01022c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01022e	48		pha				pha
.01022f	20 6d 02	jsr $01026d			jsr 	VariableFind 				; try to find the variables
.010232	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010234	90 23		bcc $010259			bcc 	_VANError
.010236	68		pla				pla 								; get and save that first token
.010237	48		pha				pha
.010238	a8		tay				tay 								; put first token in Y.
.010239	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01023c	f0 07		beq $010245			beq 	_VANNotArray
.01023e	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010240	20 e4 02	jsr $0102e4			jsr 	VariableSubscript			; index calculation
.010243	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010245					_VANNotArray:
.010245	68		pla				pla 								; get the token back.
.010246	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010249	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01024c	38		sec				sec 								; set up return string.
.01024d	f0 06		beq $010255			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01024f	18		clc				clc 								; returning a number, read high data word
.010250	a0 02 00	ldy #$0002			ldy 	#2
.010253	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010255					_VANLoadLower:
.010255	a8		tay				tay 								; put A into Y (this is the high byte)
.010256	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010258	60		rts				rts
.010259					_VANError:
.010259	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>01025c	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010264	20 75 6e 6b 6e 6f 77 6e 00
.01026d					VariableFind:
.01026d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01026f	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010272	90 5c		bcc $0102d0			bcc 	_VFError
.010274	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010277	b0 11		bcs $01028a			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010279	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01027c	3a		dec a				dec 	a 							; now 0-25
.01027d	0a		asl a				asl 	a 							; x 4 and clear carry
.01027e	0a		asl a				asl 	a
.01027f	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010282	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010284	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010286	e6 06		inc $06				inc 	DCodePtr
.010288	38		sec				sec 								; return with carry set.
.010289	60		rts				rts
.01028a					_VFSlowVariable:
.01028a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01028c	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.01028f	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010290	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010291	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010294	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010296	85 08		sta $08				sta 	DTemp1
.010298	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01029a	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01029d	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01029e	65 08		adc $08				adc 	DTemp1
.0102a0	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102a2	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102a4					_VFNext:
.0102a4	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102a6	f0 26		beq $0102ce			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102a8	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102aa	a8		tay				tay 								; read the address of the name at $0002,y
.0102ab	b9 02 00	lda $0002,y			lda 	$0002,y
.0102ae	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102b0	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102b3					_VFCompare:
.0102b3	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102b5	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102b7	d0 eb		bne $0102a4			bne 	_VFNext 					; if not, go to the next one.
.0102b9	c8		iny				iny 								; advance token pointer
.0102ba	c8		iny				iny
.0102bb	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102be	d0 f3		bne $0102b3			bne 	_VFCompare
.0102c0	98		tya				tya 								; this is the length of the word.
.0102c1	18		clc				clc 								; so we add it to the code pointer
.0102c2	65 06		adc $06				adc 	DCodePtr
.0102c4	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102c6	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102c8	18		clc				clc 								; four on is the actual data
.0102c9	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102cc	38		sec				sec 								; return with CS indicating success
.0102cd	60		rts				rts
.0102ce					_VFFail:
.0102ce	18		clc				clc
.0102cf	60		rts				rts
.0102d0					_VFError:
.0102d0	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0102d3	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102db	76 61 72 69 61 62 6c 65 00
.0102e4					VariableSubscript:
.0102e4	5a		phy				phy 								; save token on stack
.0102e5	48		pha				pha		 							; save variable address on stack.
.0102e6	20 07 02	jsr $010207			jsr		EvaluateNextInteger 		; get the subscript
.0102e9	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; skip right bracket.
.0102ec	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102ef	d0 1d		bne $01030e			bne 	_VANSubscript
.0102f1	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102f3	f0 02		beq $0102f7			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102f5	b0 17		bcs $01030e			bcs 	_VANSubscript
.0102f7					_VANSubOkay:
.0102f7	0a		asl a				asl 	a 							; double lsword
.0102f8	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102fa	68		pla				pla 								; restore DVariablePtr
.0102fb	85 1e		sta $1e				sta 	DVariablePtr
.0102fd	68		pla				pla 								; get and save that first token
.0102fe	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.010301	d0 02		bne $010305			bne 	_VANNotString  				; if not, i.e. it is an integeer
.010303	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.010305					_VANNotString
.010305	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.010307	18		clc				clc 								; add 2 to get it past the high subscript
.010308	69 02 00	adc #$0002			adc 	#2
.01030b	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01030d	60		rts				rts
.01030e					_VANSubscript:
.01030e	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010311	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010319	79 20 53 75 62 73 63 72 69 70 74 00
.010325					VariableCreate:
.010325	48		pha				pha 								; save count.
.010326	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010329	29 00 20	and #$2000			and 	#IDTypeMask
.01032c	f0 06		beq $010334			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01032e	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010331	18		clc				clc
.010332	65 02		adc $02				adc 	DBaseAddress
.010334					_VCIsInteger:
.010334	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010336	68		pla				pla 								; restore count
.010337	48		pha				pha
.010338	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010339	0a		asl a				asl 	a 							; 2 x # items.
.01033a					_VCNotSingle:
.01033a	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01033c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01033f	48		pha				pha 								; save on stack
.010340	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010343	d0 02		bne $010347			bne 	_VCString
.010345	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010347					_VCString:
.010347	68		pla				pla 								; restore first token.
.010348	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01034b	f0 04		beq $010351			beq 	_VCNotArray
.01034d	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01034f	e6 08		inc $08				inc 	DTemp1
.010351					_VCNotArray:
.010351	5a		phy				phy 								; save address of token on stack.
.010352	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010355	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010357	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010359	18		clc				clc 								; add 4 for link and name.
.01035a	69 04 00	adc #$0004			adc 	#4
.01035d	65 08		adc $08				adc 	DTemp1 						; add memory required
.01035f	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010361	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010363					_VCErase:
.010363	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010365	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010368	c8		iny				iny
.010369	c8		iny				iny
.01036a	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01036c	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.01036e	d0 f3		bne $010363			bne 	_VCErase
.010370	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010372	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010374	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010377	68		pla				pla 								; restore the token address
.010378	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01037b	68		pla				pla 								; restore count and store.
.01037c	99 04 00	sta $0004,y			sta 	$0004,y
.01037f					_VCNotArray2:
.01037f	98		tya				tya 								; update the head link
.010380	92 20		sta ($20)			sta 	(DHashTablePtr)
.010382	18		clc				clc 								; advance pointer to the data bit.
.010383	69 04 00	adc #$0004			adc 	#4
.010386	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010387					ErrorHandler:
.010387	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010389	fa		plx				plx 								; address of error message -1
.01038a	e8		inx				inx 								; error message.
.01038b	20 2e 04	jsr $01042e			jsr 	PrintROMMessage 			; print message in ROM
.01038e	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010390	f0 15		beq $0103a7			beq 	_EHEndMessage
.010392	a2 ac 03	ldx #$03ac			ldx 	#_EHAt & $FFFF 				; print " at "
.010395	20 2e 04	jsr $01042e			jsr 	PrintROMMessage
.010398	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01039a	a0 00 00	ldy #$0000			ldy 	#0
.01039d	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103a0	20 90 09	jsr $010990			jsr 	ConvertToString 			; convert and print it.
.0103a3	a8		tay				tay
.0103a4	20 42 04	jsr $010442			jsr 	PrintBASICString
.0103a7					_EHEndMessage:
.0103a7	20 0b 0d	jsr $010d0b			jsr 	HWNewLine
.0103aa	80 fe		bra $0103aa	_EH1:	bra 	_EH1
>0103ac	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103b1					IllegalToken:
.0103b1	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0103b4	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103bc	54 6f 6b 65 6e 00
.0103c2					SyntaxError:
.0103c2	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0103c5	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103cd	72 72 6f 72 00
.0103d2					ExpectToken:
.0103d2	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103d4	d0 05		bne $0103db			bne 	_CTKError					; error if not
.0103d6	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103d8	e6 06		inc $06				inc 	DCodePtr
.0103da	60		rts				rts
.0103db					_CTKError:
.0103db	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0103de	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103e6	74 6f 6b 65 6e 00
.0103ec					ExpectRightBracket:
.0103ec	48		pha				pha
.0103ed	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.0103f0	20 d2 03	jsr $0103d2			jsr 	ExpectToken
.0103f3	68		pla				pla
.0103f4	60		rts				rts
.0103f5					ExpectComma:
.0103f5	48		pha				pha
.0103f6	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103f9	20 d2 03	jsr $0103d2			jsr 	ExpectToken
.0103fc	68		pla				pla
.0103fd	60		rts				rts
.0103fe					CheckBothNumeric:
.0103fe	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010400	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010402	30 01		bmi $010405			bmi 	_CBNFail 					; need to both be zero in bit 15
.010404	60		rts				rts
.010405					_CBNFail:
.010405	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010408	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010410	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.01041e					ResetTypeInteger:
.01041e	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010420	29 ff 7f	and #$7fff			and 	#$7FFF
.010423	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010425	60		rts				rts
.010426					ResetTypeString:
.010426	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010428	09 00 80	ora #$8000			ora 	#$8000
.01042b	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01042d	60		rts				rts
.01042e					PrintROMMessage:
.01042e	48		pha				pha
.01042f	da		phx				phx
.010430					_PRMLoop:
.010430	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010434	29 ff 00	and #$00ff			and 	#$00FF
.010437	f0 06		beq $01043f			beq 	_PRMExit
.010439	20 e9 0c	jsr $010ce9			jsr 	HWPrintChar
.01043c	e8		inx				inx
.01043d	80 f1		bra $010430			bra 	_PRMLoop
.01043f					_PRMExit:
.01043f	fa		plx				plx
.010440	68		pla				pla
.010441	60		rts				rts
.010442					PrintBASICString:
.010442	48		pha				pha
.010443	da		phx				phx
.010444	5a		phy				phy
.010445	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010448	29 ff 00	and #$00ff			and 	#$00FF
.01044b	f0 0b		beq $010458			beq 	_PBSExit 					; null string
.01044d	aa		tax				tax
.01044e					_PBSLoop:
.01044e	c8		iny				iny
.01044f	b9 00 00	lda $0000,y			lda 	$0000,y
.010452	20 e9 0c	jsr $010ce9			jsr 	HWPrintChar
.010455	ca		dex				dex
.010456	d0 f6		bne $01044e			bne 	_PBSLoop
.010458					_PBSExit:
.010458	7a		ply				ply
.010459	fa		plx				plx
.01045a	68		pla				pla
.01045b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.01045c					StringTempAllocate:
.01045c	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01045f	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010462	18		clc				clc 								; this adds one, for the length.
.010463	65 16		adc $16				adc 	DTempStringPointer
.010465	85 16		sta $16				sta 	DTempStringPointer
.010467	48		pha				pha
.010468	a9 00 00	lda #$0000			lda 	#$0000
.01046b	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01046d	92 16		sta ($16)			sta		(DTempStringPointer)
.01046f	c2 20		rep #$20			rep 	#$20
.010471	68		pla				pla
.010472	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010474	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010476	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010478	60		rts				rts
.010479					StringCreateCopy:
.010479	a8		tay				tay 								; put pointer to string in Y
.01047a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01047d	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010480	f0 17		beq $010499			beq 	_SCCExit 					; do nothing if length zero.
.010482	da		phx				phx 								; save X and put the character count in X
.010483	aa		tax				tax
.010484					_SCCCopy:
.010484	c8		iny				iny 								; advance and read (first time skips length)
.010485	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010487	b9 00 00	lda $0000,y			lda 	$0000,y
.01048a	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01048c	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01048e	1a		inc a				inc 	a
.01048f	92 18		sta ($18)			sta 	(DStartTempString)
.010491	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010493	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010495	ca		dex				dex 								; do X times
.010496	d0 ec		bne $010484			bne 	_SCCCopy
.010498	fa		plx				plx
.010499					_SCCExit:
.010499	60		rts				rts
.01049a					StringMakeConcrete:
.01049a	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01049d	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01049f	90 0f		bcc $0104b0			bcc 	_SMCExit
.0104a1	85 08		sta $08				sta 	DTemp1 						; source
.0104a3	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104a5	29 ff 00	and #$00ff			and 	#$00FF
.0104a8	d0 07		bne $0104b1			bne 	_SMCNonZero 				; if not "" skip.
.0104aa	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104ad	18		clc				clc
.0104ae	65 02		adc $02				adc 	DBaseAddress
.0104b0					_SMCExit:
.0104b0	60		rts				rts
.0104b1					_SMCNonZero:
.0104b1	48		pha				pha 								; save on stack.
.0104b2	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104b5	18		clc				clc
.0104b6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104b9	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104bb	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104bd	85 0c		sta $0c				sta 	DTemp2 						; target
.0104bf	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104c0	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104c2					_SMCLoop:
.0104c2	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104c4	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104c6	88		dey				dey
.0104c7	10 f9		bpl $0104c2			bpl 	_SMCLoop
.0104c9	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104cb	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104cd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0104ce					Binary_Add:
.0104ce	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104d0	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104d2	30 12		bmi $0104e6		bmi 	_BATypeError
.0104d4	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104d6	30 3f		bmi $010517		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104d8	18		clc			clc
.0104d9	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104db	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104dd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104df	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e1	75 12		adc $12,x		adc 	EXSValueH+2,x
.0104e3	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104e5	60		rts			rts
.0104e6					_BATypeError:
.0104e6	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0104e9	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0104f1	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010501	65 73 00
.010504					_BALengthError:
.010504	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010507	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01050f	6f 6f 20 6c 6f 6e 67 00
.010517					_BAConcatenateString:
.010517	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010519	85 08		sta $08			sta 	DTemp1
.01051b	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01051d	85 0c		sta $0c			sta 	DTemp2
.01051f	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010521	18		clc			clc 										; work out the total length
.010522	b2 08		lda ($08)		lda 	(DTemp1)
.010524	72 0c		adc ($0c)		adc 	(DTemp2)
.010526	b0 14		bcs $01053c		bcs 	_BAConcatLengthError 				; string is too long.
.010528	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01052a	20 5c 04	jsr $01045c		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.01052d	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01052f	74 10		stz $10,x		stz 	EXSValueH+0,x
.010531	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010533	20 79 04	jsr $010479		jsr 	StringCreateCopy
.010536	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010538	20 79 04	jsr $010479		jsr 	StringCreateCopy
.01053b	60		rts			rts
.01053c					_BAConcatLengthError:
.01053c	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>01053f	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010547	6f 6f 20 6c 6f 6e 67 00
.01054f					Binary_Subtract:
.01054f	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.010552	38		sec			sec
.010553	b5 00		lda $00,x		lda		EXSValueL+0,x
.010555	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010557	95 00		sta $00,x		sta 	EXSValueL+0,x
.010559	b5 10		lda $10,x		lda		EXSValueH+0,x
.01055b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01055d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01055f	60		rts			rts
.010560					Binary_ShiftRight:
.010560	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.010563	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010565	29 3f 00	and #$003f		and 	#63
.010568	f0 07		beq $010571		beq		_Binary_SRExit
.01056a					_Binary_SRLoop:
.01056a	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01056c	76 00		ror $00,x		ror 	EXSValueL+0,x
.01056e	3a		dec a			dec 	a
.01056f	d0 f9		bne $01056a		bne 	_Binary_SRLoop
.010571					_Binary_SRExit:
.010571	60		rts			rts
.010572					Binary_ShiftLeft:
.010572	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.010575	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010577	29 3f 00	and #$003f		and 	#63
.01057a	f0 07		beq $010583		beq		_Binary_SLExit
.01057c					_Binary_SLLoop:
.01057c	16 00		asl $00,x		asl 	EXSValueL+0,x
.01057e	36 10		rol $10,x		rol 	EXSValueH+0,x
.010580	3a		dec a			dec 	a
.010581	d0 f9		bne $01057c		bne 	_Binary_SLLoop
.010583					_Binary_SLExit:
.010583	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010584					Binary_And:
.010584	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.010587	b5 00		lda $00,x		lda		EXSValueL+0,x
.010589	35 02		and $02,x		and 	EXSValueL+2,x
.01058b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01058d	b5 10		lda $10,x		lda		EXSValueH+0,x
.01058f	35 12		and $12,x		and 	EXSValueH+2,x
.010591	95 10		sta $10,x		sta 	EXSValueH+0,x
.010593	60		rts			rts
.010594					Binary_Or:
.010594	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.010597	b5 00		lda $00,x		lda		EXSValueL+0,x
.010599	15 02		ora $02,x		ora 	EXSValueL+2,x
.01059b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01059d	b5 10		lda $10,x		lda		EXSValueH+0,x
.01059f	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105a1	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105a3	60		rts			rts
.0105a4					Binary_Xor:
.0105a4	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.0105a7	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a9	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105ab	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105ad	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105af	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105b1	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105b3	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.0105b4					Binary_Equals:
.0105b4	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105b7	b0 0e		bcs $0105c7		bcs 	_BEString
.0105b9	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105bb	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105bd	d0 4f		bne $01060e		bne 	Compare_Fail
.0105bf	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c1	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105c3	d0 49		bne $01060e		bne 	Compare_Fail
.0105c5	80 3f		bra $010606		bra 	Compare_Succeed
.0105c7					_BEString:
.0105c7	09 00 00	ora #$0000		ora 	#$0000
.0105ca	f0 3a		beq $010606		beq 	Compare_Succeed
.0105cc	80 40		bra $01060e		bra 	Compare_Fail
.0105ce					Binary_NotEquals:
.0105ce	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d1	b0 0e		bcs $0105e1		bcs 	_BNEString
.0105d3	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105d5	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105d7	d0 2d		bne $010606		bne 	Compare_Succeed
.0105d9	b5 10		lda $10,x		lda 	EXSValueH,x
.0105db	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105dd	d0 27		bne $010606		bne 	Compare_Succeed
.0105df	80 2d		bra $01060e		bra 	Compare_Fail
.0105e1					_BNEString:
.0105e1	09 00 00	ora #$0000		ora 	#$0000
.0105e4	d0 20		bne $010606		bne 	Compare_Succeed
.0105e6	80 26		bra $01060e		bra 	Compare_Fail
.0105e8					Binary_Less:
.0105e8	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105eb	b0 12		bcs $0105ff		bcs 	_BLString
.0105ed	38		sec			sec
.0105ee	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0105f0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105f2	b5 10		lda $10,x		lda 	EXSValueH,x
.0105f4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105f6	50 03		bvc $0105fb		bvc 	*+5
.0105f8	49 00 80	eor #$8000		eor 	#$8000
.0105fb	30 09		bmi $010606		bmi 	Compare_Succeed
.0105fd	80 0f		bra $01060e		bra 	Compare_Fail
.0105ff					_BLString:
.0105ff	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010602	f0 02		beq $010606		beq 	Compare_Succeed
.010604	80 08		bra $01060e		bra 	Compare_Fail
.010606					Compare_Succeed:
.010606	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010609	95 00		sta $00,x		sta 	EXSValueL,x
.01060b	95 10		sta $10,x		sta 	EXSValueH,x
.01060d	60		rts			rts
.01060e					Compare_Fail:
.01060e	74 00		stz $00,x		stz 	EXSValueL,x
.010610	74 10		stz $10,x		stz 	EXSValueH,x
.010612	60		rts			rts
.010613					Binary_GreaterEqual:
.010613	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010616	b0 12		bcs $01062a		bcs 	_BGEString
.010618	38		sec			sec
.010619	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01061b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01061d	b5 10		lda $10,x		lda 	EXSValueH,x
.01061f	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010621	50 03		bvc $010626		bvc 	*+5
.010623	49 00 80	eor #$8000		eor 	#$8000
.010626	10 de		bpl $010606		bpl 	Compare_Succeed
.010628	80 e4		bra $01060e		bra 	Compare_Fail
.01062a					_BGEString:
.01062a	09 00 00	ora #$0000		ora 	#$0000
.01062d	10 d7		bpl $010606		bpl 	Compare_Succeed
.01062f	80 dd		bra $01060e		bra 	Compare_Fail
.010631					Binary_LessEqual:
.010631	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010634	b0 12		bcs $010648		bcs 	_BLEString
.010636	18		clc			clc 									; numeric <= signed
.010637	b5 00		lda $00,x		lda 	EXSValueL,x
.010639	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01063b	b5 10		lda $10,x		lda 	EXSValueH,x
.01063d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01063f	50 03		bvc $010644		bvc 	*+5
.010641	49 00 80	eor #$8000		eor 	#$8000
.010644	30 c0		bmi $010606		bmi 	Compare_Succeed
.010646	80 c6		bra $01060e		bra 	Compare_Fail
.010648					_BLEString:
.010648	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01064b	d0 b9		bne $010606		bne 	Compare_Succeed
.01064d	80 bf		bra $01060e		bra 	Compare_Fail
.01064f					Binary_Greater:
.01064f	20 6d 06	jsr $01066d		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010652	b0 12		bcs $010666		bcs 	_BGString
.010654	18		clc			clc 									; numeric > signed
.010655	b5 00		lda $00,x		lda 	EXSValueL,x
.010657	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010659	b5 10		lda $10,x		lda 	EXSValueH,x
.01065b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01065d	50 03		bvc $010662		bvc 	*+5
.01065f	49 00 80	eor #$8000		eor 	#$8000
.010662	10 a2		bpl $010606		bpl 	Compare_Succeed
.010664	80 a8		bra $01060e		bra 	Compare_Fail
.010666					_BGString:
.010666	c9 01 00	cmp #$0001		cmp 	#$0001
.010669	f0 9b		beq $010606		beq 	Compare_Succeed
.01066b	80 a1		bra $01060e		bra 	Compare_Fail
.01066d					CompareTypeCheck:
.01066d	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.01066f	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010671	30 06		bmi $010679		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010673	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010675	30 1c		bmi $010693		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010677	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010678	60		rts			rts
.010679					_CTCFail:
.010679	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>01067c	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010684	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010693					_CTCStringCompare:
.010693	20 1e 04	jsr $01041e		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010696	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010698	85 08		sta $08			sta 	DTemp1
.01069a	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01069c	85 0c		sta $0c			sta 	DTemp2
.01069e	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106a1	a8		tay			tay
.0106a2	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106a4	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106a6	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106a8	90 02		bcc $0106ac		bcc 	_CTCSmallest
.0106aa	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106ac					_CTCSmallest:
.0106ac	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106ae					_CTCCompare:
.0106ae	c8		iny			iny 									; look at next character (done first, first char is size)
.0106af	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106b1	30 16		bmi $0106c9		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106b3	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106b5	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106b7	f0 f5		beq $0106ae		beq 	_CTCCompare 					; if zero, try the next character.
.0106b9	b0 07		bcs $0106c2		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106bb					_CTCLess:
.0106bb	c2 20		rep #$20		rep 	#$20
.0106bd	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106c0	80 14		bra $0106d6		bra 	_CTCExit
.0106c2					_CTCGreater:
.0106c2	c2 20		rep #$20		rep 	#$20
.0106c4	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106c7	80 0d		bra $0106d6		bra 	_CTCExit
.0106c9					_CTCEqualSoFar:
.0106c9	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106cb	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106cd	90 ec		bcc $0106bb		bcc 	_CTCLess
.0106cf	d0 f1		bne $0106c2		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106d1	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106d3	a9 00 00	lda #$0000		lda 	#$0000
.0106d6					_CTCExit:
.0106d6	38		sec			sec 									; return with CS indicating string comparison.
.0106d7	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.0106d8					Binary_Divide:
.0106d8	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.0106db	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106dd	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106df	d0 14		bne $0106f5		bne 	_BinaryDivide_Ok
.0106e1	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0106e4	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0106ec	20 62 79 20 7a 65 72 6f 00
.0106f5					_BinaryDivide_Ok:
.0106f5	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0106f7	64 0a		stz $0a			stz 	DTemp1+2
.0106f9	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0106fb	5a		phy			phy 										; save Y (bit counter)
.0106fc	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0106fe	10 07		bpl $010707		bpl 	_BinaryDivide_RightDone
.010700	e8		inx			inx
.010701	e8		inx			inx
.010702	20 3d 07	jsr $01073d		jsr 	Binary_DivNegate
.010705	ca		dex			dex
.010706	ca		dex			dex
.010707					_BinaryDivide_RightDone:
.010707	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010709	10 03		bpl $01070e		bpl 	_BinaryDivide_LeftDone
.01070b	20 3d 07	jsr $01073d		jsr 	Binary_DivNegate
.01070e					_BinaryDivide_LeftDone:
.01070e	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010711					_BinaryDivide_Loop:
.010711	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010713	36 10		rol $10,x		rol 	EXSValueH+0,x
.010715	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010717	26 0a		rol $0a			rol 	DTemp1+2
.010719	38		sec			sec											; calculate A-M
.01071a	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01071c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01071e	85 0c		sta $0c			sta 	DTemp2
.010720	a5 0a		lda $0a			lda 	DTemp1+2
.010722	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010724	90 08		bcc $01072e		bcc 	_Binary_NoSubract 					; if A < M skip this
.010726	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010728	a5 0c		lda $0c			lda 	DTemp2
.01072a	85 08		sta $08			sta 	DTemp1+0
.01072c	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01072e					_Binary_NoSubract:
.01072e	88		dey			dey 										; do it 32 times.
.01072f	d0 e0		bne $010711		bne 	_BinaryDivide_Loop
.010731					_BinaryDivide_Exit:
.010731	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010733	29 01 00	and #$0001		and 	#1
.010736	f0 03		beq $01073b		beq 	_BinaryDivide_Exit2
.010738	20 3d 07	jsr $01073d		jsr 	Binary_DivNegate
.01073b					_BinaryDivide_Exit2:
.01073b	7a		ply			ply 										; restore Y
.01073c	60		rts			rts
.01073d					Binary_DivNegate:
.01073d	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01073f	38		sec			sec 										; negate the value at stack X.
.010740	a9 00 00	lda #$0000		lda 	#$0000
.010743	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010745	95 00		sta $00,x		sta 	EXSValueL+0,x
.010747	a9 00 00	lda #$0000		lda 	#$0000
.01074a	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01074c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01074e	60		rts			rts
.01074f					Binary_Modulus:
.01074f	20 d8 06	jsr $0106d8		jsr 	Binary_Divide 						; do the divide
.010752	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010754	95 00		sta $00,x		sta 	EXSValueL+0,x
.010756	a5 0a		lda $0a			lda 	DTemp1+2
.010758	95 10		sta $10,x		sta 	EXSValueH+0,x
.01075a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.01075b					Binary_Multiply:
.01075b	20 fe 03	jsr $0103fe		jsr 	CheckBothNumeric 					; check both values are numeric
.01075e	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010760	85 08		sta $08			sta 	DTemp1
.010762	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010764	85 0a		sta $0a			sta		DTemp1+2
.010766	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010768	74 10		stz $10,x		stz 	EXSValueH+0,x
.01076a					_BinaryMultiply_Loop:
.01076a	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01076c	05 0a		ora $0a			ora 	DTemp1+2
.01076e	f0 1e		beq $01078e		beq 	_BinaryMultiply_Exit
.010770	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010772	29 01 00	and #$0001		and 	#1
.010775	f0 0d		beq $010784		beq 	_BinaryMultiply_NoAdd
.010777	18		clc			clc 										; add multiplicand to result.
.010778	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01077a	75 02		adc $02,x		adc 	EXSValueL+2,x
.01077c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01077e	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010780	75 12		adc $12,x		adc 	EXSValueH+2,x
.010782	95 10		sta $10,x		sta 	EXSValueH+0,x
.010784					_BinaryMultiply_NoAdd:
.010784	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010786	66 08		ror $08			ror 	DTemp1
.010788	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01078a	36 12		rol $12,x		rol 	EXSValueH+2,x
.01078c	80 dc		bra $01076a		bra 	_BinaryMultiply_Loop 				; go round again.
.01078e					_BinaryMultiply_Exit:
.01078e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.01078f					Function_Len:
.01078f	20 1e 04	jsr $01041e			jsr 	ResetTypeInteger 			; returns an integer
.010792	20 26 02	jsr $010226			jsr 	EvaluateNextString 			; get the value you are absoluting
.010795	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; check )
.010798	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01079a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01079d	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107a0	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107a2	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107a4	60		rts				rts
.0107a5					Function_Abs:
.0107a5	20 1e 04	jsr $01041e			jsr 	ResetTypeInteger 			; returns an integer
.0107a8	20 07 02	jsr $010207			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107ab	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; check )
.0107ae	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107b0	30 07		bmi $0107b9			bmi 	_FAbsNegative 				; negate it if negative
.0107b2	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107b4	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107b6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107b8	60		rts				rts
.0107b9					_FAbsNegative:
.0107b9	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107ba	a9 00 00	lda #$0000			lda 	#0
.0107bd	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107bf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107c1	a9 00 00	lda #$0000			lda 	#0
.0107c4	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107c6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107c8	60		rts				rts
.0107c9					Function_Sgn:
.0107c9	20 1e 04	jsr $01041e			jsr 	ResetTypeInteger 			; returns integer
.0107cc	20 07 02	jsr $010207			jsr 	EvaluateNextInteger 		; get an integer
.0107cf	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; check )
.0107d2	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107d4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107d6	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107d8	30 07		bmi $0107e1			bmi 	_FSgnNegative 				; set to -1 if signed
.0107da	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107dc	f0 02		beq $0107e0			beq 	_FSgnExit
.0107de	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107e0					_FSgnExit:
.0107e0	60		rts				rts
.0107e1					_FSgnNegative:
.0107e1	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0107e4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107e6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107e8	60		rts				rts
.0107e9					Function_Random:
.0107e9	20 1e 04	jsr $01041e			jsr 	ResetTypeInteger
.0107ec	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0107ee	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0107f0	d0 0a		bne $0107fc			bne 	_Rnd_NotZero
.0107f2	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0107f5	85 10		sta $10				sta 	DRandom
.0107f7	a9 ea 00	lda #$00ea			lda 	#$EA
.0107fa	85 12		sta $12				sta 	DRandom+2
.0107fc					_Rnd_NotZero:
.0107fc	20 07 08	jsr $010807			jsr 	_Rnd_Process 				; call randomiser twice
.0107ff	95 10		sta $10,x			sta 	EXSValueH+0,x
.010801	20 07 08	jsr $010807			jsr 	_Rnd_Process
.010804	95 00		sta $00,x			sta 	EXSValueL+0,x
.010806	60		rts				rts
.010807					_Rnd_Process:
.010807	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010809	26 12		rol $12				rol 	DRandom+2
.01080b	90 0e		bcc $01081b			bcc 	_Rnd_Exit
.01080d	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01080f	49 54 d4	eor #$d454			eor 	#$D454
.010812	85 10		sta $10				sta 	DRandom
.010814	a5 12		lda $12				lda 	DRandom+2
.010816	49 d5 55	eor #$55d5			eor 	#$55D5
.010819	85 12		sta $12				sta 	DRandom+2
.01081b					_Rnd_Exit:
.01081b	a5 10		lda $10				lda 	DRandom
.01081d	45 12		eor $12				eor 	DRandom+2
.01081f	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010820					Function_VAL:
.010820	20 1e 04	jsr $01041e			jsr 	ResetTypeInteger 			; returns an integer
.010823	20 26 02	jsr $010226			jsr 	EvaluateNextString 			; get the value you are absoluting
.010826	48		pha				pha 								; put string address on stack.
.010827	20 37 08	jsr $010837			jsr 	VALGetBase 					; process , base (shared with STR$())
.01082a	7a		ply				ply 								; get string address back
.01082b	da		phx				phx 								; save X on stack
.01082c	aa		tax				tax 								; base in X
.01082d	98		tya				tya 								; address in A
.01082e	20 71 08	jsr $010871			jsr 	StringToInteger
.010831	fa		plx				plx 								; restore X
.010832	95 00		sta $00,x			sta 	EXSValueL+0,x
.010834	94 10		sty $10,x			sty 	EXSValueH+0,x
.010836	60		rts				rts
.010837					VALGetBase:
.010837	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010839	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.01083c	f0 07		beq $010845			beq 	_VGBAlternate
.01083e	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket			; expect ), and return 10.
.010841	a9 0a 00	lda #$000a			lda 	#10
.010844	60		rts				rts
.010845					_VGBAlternate:
.010845	20 f5 03	jsr $0103f5			jsr 	ExpectComma 				; skip comma.
.010848	20 07 02	jsr $010207			jsr 	EvaluateNextInteger 		; get base
.01084b	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.01084e	d0 0e		bne $01085e			bne 	_VGBBadBase
.010850	c9 02 00	cmp #$0002			cmp 	#2
.010853	90 09		bcc $01085e			bcc 	_VGBBadBase
.010855	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.010858	b0 04		bcs $01085e			bcs 	_VGBBadBase
.01085a	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; get right bracket and return.
.01085d	60		rts				rts
.01085e					_VGBBadBase:
.01085e	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010861	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010869	65 72 20 42 61 73 65 00
.010871					StringToInteger:
.010871	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010873	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010875	29 ff 00	and #$00ff			and 	#$00FF
.010878	85 26		sta $26				sta 	DTemp3+2
.01087a	f0 6e		beq $0108ea			beq 	_STIError 					; if length zero it's bad.
.01087c	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.01087e	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010880	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010882	64 0a		stz $0a				stz 	DTemp1+2
.010884	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010886	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010889	48		pha				pha 								; push on stack
.01088a	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.01088d	d0 06		bne $010895			bne 	_STILoop
.01088f	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010891	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010893	f0 55		beq $0108ea			beq 	_STIError 					; if only - then error.
.010895					_STILoop:
.010895	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010897	20 09 09	jsr $010909			jsr 	MultiplyTemp1ByA
.01089a	b2 24		lda ($24)			lda 	(DTemp3)
.01089c	29 ff 00	and #$00ff			and 	#$00FF
.01089f	20 fa 08	jsr $0108fa			jsr 	ConvertUpperCase
.0108a2	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108a5	90 43		bcc $0108ea			bcc 	_STIError
.0108a7	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108aa	90 0e		bcc $0108ba			bcc 	_STIOkay1
.0108ac	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108af	90 39		bcc $0108ea			bcc 	_STIError
.0108b1	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108b4	b0 34		bcs $0108ea			bcs 	_STIError
.0108b6	18		clc				clc 								; shift to correct range.
.0108b7	69 09 00	adc #$0009			adc 	#9
.0108ba					_STIOkay1:
.0108ba	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108bd	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108bf	b0 29		bcs $0108ea			bcs 	_STIError
.0108c1	18		clc				clc 								; add A to DTemp1
.0108c2	65 08		adc $08				adc 	DTemp1
.0108c4	85 08		sta $08				sta 	DTemp1
.0108c6	90 02		bcc $0108ca			bcc 	_STINoCarry
.0108c8	e6 0a		inc $0a				inc 	DTemp1+2
.0108ca					_STINoCarry:
.0108ca	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108cc	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108ce	d0 c5		bne $010895			bne 	_STILoop 					; loop back.
.0108d0	68		pla				pla 								; get optional minus bac
.0108d1	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108d4	d0 0f		bne $0108e5			bne 	_STINotNegative 			; handle the negative character
.0108d6	38		sec				sec 								; negate DTemp1
.0108d7	a9 00 00	lda #$0000			lda 	#0
.0108da	e5 08		sbc $08				sbc 	DTemp1
.0108dc	85 08		sta $08				sta 	DTemp1
.0108de	a9 00 00	lda #$0000			lda 	#0
.0108e1	e5 0a		sbc $0a				sbc 	DTemp1+2
.0108e3	85 0a		sta $0a				sta 	DTemp1+2
.0108e5					_STINotNegative:
.0108e5	a5 08		lda $08				lda 	DTemp1 						; get the result
.0108e7	a4 0a		ldy $0a				ldy 	DTemp1+2
.0108e9	60		rts				rts
.0108ea					_STIError:
.0108ea	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>0108ed	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>0108f5	74 61 6e 74 00
.0108fa					ConvertUpperCase:
.0108fa	c9 61 00	cmp #$0061			cmp 	#'a'
.0108fd	90 09		bcc $010908			bcc 	_CUCExit
.0108ff	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010902	b0 04		bcs $010908			bcs 	_CUCExit
.010904	38		sec				sec
.010905	e9 20 00	sbc #$0020			sbc 	#32
.010908					_CUCExit:
.010908	60		rts				rts
.010909					MultiplyTemp1ByA:
.010909	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.01090c	f0 56		beq $010964			beq 	_MT1_16
.01090e	c9 0a 00	cmp #$000a			cmp 	#10
.010911	f0 33		beq $010946			beq 	_MT1_10
.010913	c9 08 00	cmp #$0008			cmp 	#8
.010916	f0 50		beq $010968			beq 	_MT1_8
.010918	c9 02 00	cmp #$0002			cmp 	#2
.01091b	f0 53		beq $010970			beq 	_MT1_2
.01091d					_MTGeneral:
.01091d	da		phx				phx
.01091e	aa		tax				tax 								; multiplier in X
.01091f	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010921	85 0c		sta $0c				sta 	DTemp2
.010923	a5 0a		lda $0a				lda 	DTemp1+2
.010925	85 0e		sta $0e				sta 	DTemp2+2
.010927	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010929	64 0a		stz $0a				stz 	DTemp1+2
.01092b					_MTLoop:
.01092b	8a		txa				txa 								; shift X right into C
.01092c	4a		lsr a				lsr 	a
.01092d	aa		tax				tax
.01092e	90 0d		bcc $01093d			bcc 	_MTNoAdd
.010930	18		clc				clc
.010931	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010933	65 0c		adc $0c				adc 	DTemp2
.010935	85 08		sta $08				sta 	DTemp1
.010937	a5 0a		lda $0a				lda 	DTemp1+2
.010939	65 0e		adc $0e				adc 	DTemp2+2
.01093b	85 0a		sta $0a				sta 	DTemp1+2
.01093d					_MTNoAdd:
.01093d	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01093f	26 0e		rol $0e				rol 	DTemp2+2
.010941	8a		txa				txa 								; until multiplier is zero.
.010942	d0 e7		bne $01092b			bne 	_MTLoop
.010944					_MTGExit:
.010944	fa		plx				plx 								; restore X
.010945	60		rts				rts 								; and exit
.010946					_MT1_10:
.010946	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010948	48		pha				pha
.010949	a5 08		lda $08				lda 	DTemp1
.01094b	48		pha				pha
.01094c	06 08		asl $08				asl 	DTemp1						; x 4
.01094e	26 0a		rol $0a				rol 	DTemp1+2
.010950	06 08		asl $08				asl 	DTemp1
.010952	26 0a		rol $0a				rol 	DTemp1+2
.010954	68		pla				pla 								; add saved value, x 5
.010955	18		clc				clc
.010956	65 08		adc $08				adc 	DTemp1
.010958	85 08		sta $08				sta 	DTemp1
.01095a	68		pla				pla
.01095b	65 0a		adc $0a				adc 	DTemp1+2
.01095d	85 0a		sta $0a				sta 	DTemp1+2
.01095f	06 08		asl $08				asl 	DTemp1
.010961	26 0a		rol $0a				rol 	DTemp1+2
.010963	60		rts				rts
.010964					_MT1_16:
.010964	06 08		asl $08				asl 	DTemp1
.010966	26 0a		rol $0a				rol 	DTemp1+2
.010968					_MT1_8:
.010968	06 08		asl $08				asl 	DTemp1
.01096a	26 0a		rol $0a				rol 	DTemp1+2
.01096c					_MT1_4:
.01096c	06 08		asl $08				asl 	DTemp1
.01096e	26 0a		rol $0a				rol 	DTemp1+2
.010970					_MT1_2
.010970	06 08		asl $08				asl 	DTemp1
.010972	26 0a		rol $0a				rol 	DTemp1+2
.010974	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010975					Function_Str:
.010975	20 26 04	jsr $010426			jsr 	ResetTypeString 			; returns a string.
.010978	20 07 02	jsr $010207			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01097b	48		pha				pha 								; save YA on the stack
.01097c	5a		phy				phy
.01097d	20 37 08	jsr $010837			jsr 	VALGetBase 					; process , base (shared with STR$())
.010980	85 14		sta $14				sta 	DSignCount
.010982	7a		ply				ply 								; YA is the number
.010983	68		pla				pla
.010984	da		phx				phx
.010985	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010987	20 90 09	jsr $010990			jsr 	ConvertToString 			; convert it to a string.
.01098a	fa		plx				plx 								; restore X
.01098b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01098d	74 10		stz $10,x			stz 	EXSValueH+0,x
.01098f	60		rts				rts
.010990					ConvertToString:
.010990	da		phx				phx 								; save X
.010991	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010993	84 26		sty $26				sty 	DTemp3+2
.010995	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010997	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.01099a	20 5c 04	jsr $01045c			jsr 	StringTempAllocate 			; allocate space for return string.
.01099d	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.01099f	10 15		bpl $0109b6			bpl 	_CTSNotNegative
.0109a1	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109a4	20 1e 0a	jsr $010a1e			jsr 	CTSOutputA
.0109a7	38		sec				sec 								; negate DTemp3
.0109a8	a9 00 00	lda #$0000			lda 	#0
.0109ab	e5 24		sbc $24				sbc 	DTemp3
.0109ad	85 24		sta $24				sta 	DTemp3
.0109af	a9 00 00	lda #$0000			lda 	#0
.0109b2	e5 26		sbc $26				sbc 	DTemp3+2
.0109b4	85 26		sta $26				sta 	DTemp3+2
.0109b6					_CTSNotNegative:
.0109b6	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109b9	48		pha				pha
.0109ba	a9 00 00	lda #$0000			lda 	#0
.0109bd	48		pha				pha
.0109be	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109c0	85 08		sta $08				sta 	DTemp1
.0109c2	64 0a		stz $0a				stz 	DTemp1+2
.0109c4					_CTSMultiplySubtractor:
.0109c4	38		sec				sec
.0109c5	a5 24		lda $24				lda 	DTemp3
.0109c7	e5 08		sbc $08				sbc 	DTemp1
.0109c9	a5 26		lda $26				lda 	DTemp3+2
.0109cb	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109cd	90 0d		bcc $0109dc			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109cf	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109d1	48		pha				pha
.0109d2	a5 0a		lda $0a				lda 	DTemp1+2
.0109d4	48		pha				pha
.0109d5	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109d7	20 09 09	jsr $010909			jsr 	MultiplyTemp1ByA
.0109da	80 e8		bra $0109c4			bra 	_CTSMultiplySubtractor
.0109dc					_CTSScaledUp:
.0109dc	7a		ply				ply 								; YA contains the previous divider.
.0109dd	68		pla				pla
.0109de	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109e1	d0 05		bne $0109e8			bne 	_CTSHasDigit
.0109e3	c9 01 00	cmp #$0001			cmp 	#1 							;
.0109e6	f0 20		beq $010a08			beq 	_CTSExit
.0109e8					_CTSHasDigit:
.0109e8	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0109ea	84 0e		sty $0e				sty 	DTemp2+2
.0109ec	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0109ef					_CTSSubLoop:
.0109ef	38		sec				sec 								; subtract subtractor from number
.0109f0	a5 24		lda $24				lda 	DTemp3
.0109f2	e5 0c		sbc $0c				sbc 	DTemp2
.0109f4	a8		tay				tay 								; intermediate in Y
.0109f5	a5 26		lda $26				lda 	DTemp3+2
.0109f7	e5 0e		sbc $0e				sbc 	DTemp2+2
.0109f9	90 07		bcc $010a02			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.0109fb	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.0109fd	84 24		sty $24				sty 	DTemp3
.0109ff	e8		inx				inx 								; one more subtraction
.010a00	80 ed		bra $0109ef			bra 	_CTSSubLoop 				; try it again.
.010a02					_CTSFinishedSubtracting:
.010a02	8a		txa				txa 								; convert to ASCII.
.010a03	20 11 0a	jsr $010a11			jsr 	CTSOutputHexDigit 			; write that out.
.010a06	80 d4		bra $0109dc			bra 	_CTSScaledUp
.010a08					_CTSExit:
.010a08	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a0a	20 11 0a	jsr $010a11			jsr 	CTSOutputHexDigit
.010a0d	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a0f	fa		plx				plx 								; restore X.
.010a10	60		rts				rts
.010a11					CTSOutputHexDigit:
.010a11	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a14	90 04		bcc $010a1a			bcc 	_CTSNotLetter
.010a16	18		clc				clc
.010a17	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a1a					_CTSNotLetter:
.010a1a	18		clc				clc
.010a1b	69 30 00	adc #$0030			adc 	#48
.010a1e					CTSOutputA:
.010a1e	5a		phy				phy 								; save Y, set Y to current pointer
.010a1f	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a21	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a24	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a26	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a28	1a		inc a				inc 	a
.010a29	92 18		sta ($18)			sta 	(DStartTempString)
.010a2b	c2 20		rep #$20			rep 	#$20
.010a2d	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a2f	7a		ply				ply 								; restore Y and exit.
.010a30	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010a31					Function_Let:
.010a31	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a33	48		pha				pha
.010a34	20 6d 02	jsr $01026d			jsr 	VariableFind 				; find the variable
.010a37	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a39	b0 1c		bcs $010a57			bcs 	_FLetFound 					; skip if found.
.010a3b	68		pla				pla 								; get and push the first token again.
.010a3c	48		pha				pha
.010a3d	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a40	d0 51		bne $010a93			bne 	_FLError					; arrays, so this causes an error.
.010a42	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a44	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a47	20 25 03	jsr $010325			jsr 	VariableCreate 				; create it.
.010a4a	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a4c					_FLSkipToken:
.010a4c	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a4e	e6 06		inc $06				inc 	DCodePtr
.010a50	e6 06		inc $06				inc 	DCodePtr
.010a52	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a55	d0 f5		bne $010a4c			bne 	_FLSkipToken
.010a57					_FLetFound:
.010a57	68		pla				pla 								; get and save the first token.
.010a58	48		pha				pha
.010a59	a8		tay				tay 								; put it in Y
.010a5a	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a5d	f0 07		beq $010a66			beq 	_FLetNotArray
.010a5f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a61	20 e4 02	jsr $0102e4			jsr 	VariableSubscript			; index calculation
.010a64	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a66					_FLetNotArray:
.010a66	7a		ply				ply 								; get the first token into Y
.010a67	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a69	48		pha				pha
.010a6a	5a		phy				phy 								; save the first token on the stack.
.010a6b	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a6e	20 d2 03	jsr $0103d2			jsr 	ExpectToken
.010a71	68		pla				pla 								; restore the first token.
.010a72	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a75	d0 0f		bne $010a86			bne 	_FLetString 				; skip if string.
.010a77	20 ee 01	jsr $0101ee			jsr 	EvaluateInteger 			; get an integer
.010a7a	7a		ply				ply 								; get address in Y
.010a7b	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a7d	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a80	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a82	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a85	60		rts				rts
.010a86					_FLetString:
.010a86	20 0d 02	jsr $01020d			jsr 	EvaluateString 				; get a string.
.010a89	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a8b	20 9a 04	jsr $01049a			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010a8e	7a		ply				ply 								; get address
.010a8f	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a92	60		rts				rts
.010a93					_FLError:
.010a93	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010a96	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010a9e	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010aa6					Function_PRINTALT:
.010aa6					Function_PRINT:
.010aa6	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010aa8	f0 33		beq $010add			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010aaa	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010aad	f0 2e		beq $010add			beq 	_FPRExitCR
.010aaf	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010ab2	f0 23		beq $010ad7			beq 	_FPRSkipLoop
.010ab4	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010ab7	f0 1b		beq $010ad4			beq 	_FPRNewLine
.010ab9	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010abc	f0 11		beq $010acf			beq 	_FPRTab
.010abe					_FPRExpression:
.010abe	20 e0 00	jsr $0100e0			jsr 	Evaluate 					; evaluate a string or integer.
.010ac1	b0 06		bcs $010ac9			bcs 	_FPRHaveString
.010ac3	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ac6	20 90 09	jsr $010990			jsr 	ConvertToString
.010ac9					_FPRHaveString:
.010ac9	a8		tay				tay 								; print the basic String.
.010aca	20 42 04	jsr $010442			jsr 	PrintBASICString
.010acd	80 d7		bra $010aa6			bra 	Function_Print 				; and go round again.
.010acf					_FPRTab:
.010acf	20 1e 0d	jsr $010d1e			jsr 	HWTab
.010ad2	80 03		bra $010ad7			bra 	_FPRSkipLoop
.010ad4					_FPRNewLine:
.010ad4	20 0b 0d	jsr $010d0b			jsr 	HWNewLine
.010ad7					_FPRSkipLoop:
.010ad7	e6 06		inc $06				inc 	DCodePtr
.010ad9	e6 06		inc $06				inc 	DCodePtr
.010adb	80 c9		bra $010aa6			bra 	Function_Print
.010add					_FPRExitCR:
.010add	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010adf	88		dey				dey
.010ae0	88		dey				dey
.010ae1	b9 00 00	lda $0000,y			lda 	$0000,y
.010ae4	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010ae7	f0 08		beq $010af1			beq 	_FPRExit
.010ae9	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010aec	f0 03		beq $010af1			beq 	_FPRExit
.010aee	20 0b 0d	jsr $010d0b			jsr 	HWNewLine 					; print a new line.
.010af1					_FPRExit:
.010af1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010af2					Function_END:
.010af2	02 00		cop #$00			cop 	#0
.010af4					Function_RUN:
.010af4	20 4c 0b	jsr $010b4c			jsr 	Function_CLEAR 				; clear all variables.
.010af7	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010af9	18		clc				clc
.010afa	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010afd					_FRun_NextLineNumber:
.010afd	a8		tay				tay 								; put in Y
.010afe	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010b01	f0 ef		beq $010af2			beq 	Function_END 				; if zero, off the end of the program
.010b03	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010b06	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010b08	98		tya				tya 								; get address back
.010b09	18		clc				clc 								; skip over the link/line number
.010b0a	69 04 00	adc #$0004			adc 	#4
.010b0d	85 06		sta $06				sta 	DCodePtr
.010b0f					_FRun_NextInstruction:
.010b0f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010b12	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010b14	38		sec				sec
.010b15	e9 00 01	sbc #$0100			sbc 	#256
.010b18	85 16		sta $16				sta 	DTempStringPointer
.010b1a	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010b1c	f0 28		beq $010b46			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010b1e	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010b21	f0 18		beq $010b3b			beq 	_FRun_Colon
.010b23	a8		tay				tay 								; save in Y
.010b24	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010b27	c9 00 20	cmp #$2000			cmp 	#$2000
.010b2a	d0 15		bne $010b41			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010b2c	98		tya				tya 								; get token back
.010b2d	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010b30	0a		asl a				asl 	a 							; double it into X
.010b31	aa		tax				tax
.010b32	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010b34	e6 06		inc $06				inc 	DCodePtr
.010b36	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010b39	80 d4		bra $010b0f			bra 	_FRun_NextInstruction 		; do the following instruction.
.010b3b					_FRun_Colon:
.010b3b	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010b3d	e6 06		inc $06				inc 	DCodePtr
.010b3f	80 ce		bra $010b0f			bra 	_FRun_NextInstruction 		; do the following instruction.
.010b41					_FRun_TryLET:
.010b41	20 31 0a	jsr $010a31			jsr 	Function_LET 				; try as a LET.
.010b44	80 c9		bra $010b0f			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010b46					_FRun_EndInstruction:
.010b46	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010b48	1a		inc a				inc 	a 							; go to link for next line
.010b49	1a		inc a				inc 	a
.010b4a	80 b1		bra $010afd			bra 	_FRun_NextLineNumber
.010b4c					Function_CLEAR:
.010b4c	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.010b4f	a9 00 00	lda #$0000			lda 	#$0000
.010b52	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010b54	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010b56	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010b59	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010b5b	20 82 0b	jsr $010b82			jsr 	FindCodeEnd 				; find where the program ends.
.010b5e	a8		tay				tay 								; Y points to it.
.010b5f	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010b62	99 02 00	sta $0002,y			sta 	$0002,y
.010b65	99 04 00	sta $0004,y			sta 	$0004,y
.010b68	98		tya				tya 								; start of working memory up
.010b69	18		clc				clc
.010b6a	69 06 00	adc #$0006			adc 	#6
.010b6d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010b70	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010b72	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010b75					_FCLoop:
.010b75	a9 00 00	lda #$0000			lda 	#$0000
.010b78	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010b7a	c8		iny				iny
.010b7b	c8		iny				iny
.010b7c	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010b7f	d0 f4		bne $010b75			bne 	_FCLoop
.010b81	60		rts				rts
.010b82					FindCodeEnd:
.010b82	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010b85	18		clc				clc
.010b86	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010b88	a8		tay				tay
.010b89					_FCELoop:
.010b89	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010b8c	f0 08		beq $010b96			beq 	_FCEExit
.010b8e	98		tya				tya 								; add offset
.010b8f	18		clc				clc
.010b90	79 00 00	adc $0000,y			adc 	$0000,y
.010b93	a8		tay				tay
.010b94	80 f3		bra $010b89			bra 	_FCELoop
.010b96					_FCEExit:
.010b96	98		tya				tya 								; return in A
.010b97	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010b98					Function_Dim:
.010b98	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010b9a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010b9d	f0 3b		beq $010bda			beq		_FDIMNotArray 				; no, error.
.010b9f	20 6d 02	jsr $01026d			jsr 	VariableFind 				; try to find it.
.010ba2	b0 41		bcs $010be5			bcs 	_FDIMExists 				; if it does, that's an error.
.010ba4	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010ba6	48		pha				pha
.010ba7	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010ba9	48		pha				pha
.010baa					_FDIMSkip:
.010baa	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010bac	e6 06		inc $06				inc 	DCodePtr
.010bae	e6 06		inc $06				inc 	DCodePtr
.010bb0	29 00 08	and #$0800			and 	#IDContMask
.010bb3	d0 f5		bne $010baa			bne 	_FDIMSkip
.010bb5	20 ee 01	jsr $0101ee			jsr 	EvaluateInteger 			; evaluate the size
.010bb8	20 ec 03	jsr $0103ec			jsr 	ExpectRightBracket 			; check the ) following.
.010bbb	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010bbe	d0 3b		bne $010bfb			bne 	_FDIMSize
.010bc0	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010bc3	f0 36		beq $010bfb			beq 	_FDIMSize
.010bc5	7a		ply				ply 								; restore HashTablePtr
.010bc6	84 20		sty $20				sty 	DHashTablePtr
.010bc8	7a		ply				ply 								; so now A is the high index, Y points to the token
.010bc9	20 25 03	jsr $010325			jsr 	VariableCreate 				; create the variable.
.010bcc	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010bce	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010bd1	d0 06		bne $010bd9			bne 	_FDIMExit
.010bd3	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010bd5	e6 06		inc $06				inc 	DCodePtr
.010bd7	80 bf		bra $010b98			bra 	Function_DIM 				; and do another
.010bd9					_FDIMExit:
.010bd9	60		rts				rts
.010bda					_FDIMNotArray:
.010bda	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010bdd	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010be5					_FDIMExists:
.010be5	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010be8	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010bf0	65 64 69 6d 65 6e 73 69 6f 6e 00
.010bfb					_FDIMSize:
.010bfb	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010bfe	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010c06	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010c0c					Function_COLLECT:
.010c0c	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010c0e	85 0c		sta $0c				sta 	DTemp2
.010c10	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010c13	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010c15	85 0e		sta $0e				sta 	DTemp2+2
.010c17	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010c19	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c1b					_FCNextPass:
.010c1b	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010c1d	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010c1f	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010c21	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010c24	18		clc				clc
.010c25	65 02		adc $02				adc 	DBaseAddress
.010c27	a8		tay				tay 								; put in Y
.010c28	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010c2b					_FCO1:
.010c2b	20 51 0c	jsr $010c51			jsr  	COLLECTScanVariable 		; scan that one.
.010c2e	c8		iny				iny 	 							; go to next pointer
.010c2f	c8		iny				iny
.010c30	ca		dex				dex
.010c31	d0 f8		bne $010c2b			bne 	_FCO1 						; until done all 16.
.010c33	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010c36					_FCO2:
.010c36	20 65 0c	jsr $010c65			jsr  	COLLECTScanArray 			; scan that one.
.010c39	c8		iny				iny 	 							; go to next pointer
.010c3a	c8		iny				iny
.010c3b	ca		dex				dex
.010c3c	d0 f8		bne $010c36			bne 	_FCO2 						; until done all 16.
.010c3e	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010c40	f0 0e		beq $010c50			beq		_FCExit 					; if finished then exit.
.010c42	48		pha				pha 								; save the target address
.010c43	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010c45	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010c47	20 9a 04	jsr $01049a			jsr 	StringMakeConcrete 			; make the string concrete.
.010c4a	7a		ply				ply 								; restore the string.
.010c4b	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010c4e	80 cb		bra $010c1b			bra		_FCNextPass
.010c50					_FCExit:
.010c50	60		rts				rts
.010c51					COLLECTScanVariable:
.010c51	da		phx				phx 								; save XY
.010c52	5a		phy				phy
.010c53					_CSVLoop:
.010c53	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010c56	f0 0a		beq $010c62			beq 	_CSVExit
.010c58	a8		tay				tay 								; put new address into Y
.010c59	18		clc				clc 								; which is four on.
.010c5a	69 04 00	adc #$0004			adc 	#4
.010c5d	20 84 0c	jsr $010c84			jsr 	COLLECTCheck
.010c60	80 f1		bra $010c53			bra 	_CSVLoop
.010c62					_CSVExit:
.010c62	7a		ply				ply
.010c63	fa		plx				plx
.010c64	60		rts				rts
.010c65					COLLECTScanArray:
.010c65	da		phx				phx 								; save XY
.010c66	5a		phy				phy
.010c67					_CSALoop:
.010c67	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010c6a	f0 15		beq $010c81			beq 	_CSAExit
.010c6c	a8		tay				tay 								; put new address in Y
.010c6d	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010c70	aa		tax				tax
.010c71	e8		inx				inx									; +1 as one more data element.
.010c72	98		tya				tya 								; point A to first element, at +6
.010c73	18		clc				clc
.010c74	69 06 00	adc #$0006			adc 	#6
.010c77					_CSADoAllStrings:
.010c77	20 84 0c	jsr $010c84			jsr 	COLLECTCheck 				; collect check the first.
.010c7a	1a		inc a				inc 	a 							; advance the pointer.
.010c7b	1a		inc a				inc 	a
.010c7c	ca		dex				dex
.010c7d	d0 f8		bne $010c77			bne 	_CSADoAllStrings 			; until all strings are done.
.010c7f	80 e6		bra $010c67			bra 	_CSALoop
.010c81					_CSAExit:
.010c81	7a		ply				ply
.010c82	fa		plx				plx
.010c83	60		rts				rts
.010c84					COLLECTCheck:
.010c84	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010c86	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010c88	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010c8a	90 0a		bcc $010c96			bcc 	_COCExit
.010c8c	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010c8e	b0 06		bcs $010c96			bcs 	_COCExit
.010c90	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010c92	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010c94	85 14		sta $14				sta 	DSignCount
.010c96					_COCExit:
.010c96	a5 0a		lda $0a				lda 	DTemp1+2
.010c98	60		rts				rts
.010c99	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010c9a					Function_ASSERT:
.010c9a	20 ee 01	jsr $0101ee			jsr 	EvaluateInteger 			; something that returns an integer.
.010c9d	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010c9f	05 08		ora $08				ora 	Dtemp1
.010ca1	f0 01		beq $010ca4			beq 	_FAssFail
.010ca3	60		rts				rts
.010ca4					_FAssFail:
.010ca4	20 87 03	jsr $010387			jsr 	ErrorHandler 						; call error routine
>010ca7	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010caf	61 69 6c 65 64 00
.010cb5					Function_CLS:
.010cb5	20 ce 0c	jsr $010cce			jsr 	HWClearScreen
.010cb8	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010cb9					SwitchBasicInstance:
.010cb9	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010cbb	20 ce 0c	jsr $010cce			jsr 	HWClearScreen 						; clear screen
.010cbe	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010cc1	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010cc3	86 02		stx $02				stx		DBaseAddress
.010cc5	84 04		sty $04				sty 	DHighAddress
.010cc7	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010cc8	48		pha				pha 										; then copy it into B.
.010cc9	ab		plb				plb
.010cca	ab		plb				plb
.010ccb	4c f4 0a	jmp $010af4			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
.010cce					HWClearScreen:
.010cce	48		pha				pha
.010ccf	da		phx				phx
.010cd0	a2 fe 01	ldx #$01fe			ldx 	#510
.010cd3	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010cd6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010cda	ca		dex				dex
.010cdb	10 f6		bpl $010cd3			bpl 	_CS0
.010cdd	64 28		stz $28				stz 	DCursor
.010cdf	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010ce2	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010ce6	fa		plx				plx
.010ce7	68		pla				pla
.010ce8	60		rts				rts
.010ce9					HWPrintChar:
.010ce9	48		pha				pha
.010cea	da		phx				phx
.010ceb	a6 28		ldx $28				ldx 	DCursor
.010ced	e2 20		sep #$20			sep 	#$20
.010cef	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010cf3	c2 20		rep #$20			rep 	#$20
.010cf5	e8		inx				inx
.010cf6	8a		txa				txa
.010cf7	29 ff 01	and #$01ff			and 	#(32*16-1)
.010cfa	85 28		sta $28				sta 	DCursor
.010cfc	aa		tax				tax
.010cfd	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010d00	e2 20		sep #$20			sep 	#$20
.010d02	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010d06	c2 20		rep #$20			rep 	#$20
.010d08	fa		plx				plx
.010d09	68		pla				pla
.010d0a	60		rts				rts
.010d0b					HWNewLine:
.010d0b	48		pha				pha
.010d0c	da		phx				phx
.010d0d	a2 1f 00	ldx #$001f			ldx 	#31
.010d10					HWMoveCursor:
.010d10	a9 20 00	lda #$0020			lda 	#32
.010d13	20 e9 0c	jsr $010ce9			jsr 	HWPrintChar
.010d16	8a		txa				txa
.010d17	25 28		and $28				and 	DCursor
.010d19	d0 f5		bne $010d10			bne 	HWMoveCursor
.010d1b	fa		plx				plx
.010d1c	68		pla				pla
.010d1d	60		rts				rts
.010d1e	48		pha		HWTab:	pha
.010d1f	da		phx				phx
.010d20	a2 07 00	ldx #$0007			ldx 	#7
.010d23	80 eb		bra $010d10			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	4c 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 46 00 64 00 24 3e 19 32
>024108	25 3e 0e 00 0b 48 65 6c 6c 6f 20 77 6f 72 6c 64
>024118	1c 32 1c 32 1c 32 2a 40 17 32 19 32 26 3e 06 00
>024128	03 45 6e 64 18 32 16 30 2a 40 17 32 10 40 1b 32
>024138	19 32 18 c0 06 22 01 40 0d 26 00 40 00 00 00 00
>024148	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>024158	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2025 times (32400 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
