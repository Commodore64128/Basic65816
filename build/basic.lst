
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 11 15:15:37 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 4d 09 01	jmp $01094d		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	68 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	05 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	15 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	25 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	69 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d0 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	35 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	b2 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	94 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	4f 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	4f 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d0 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	dc 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	59 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d0 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	e1 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	f3 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	6a 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	4a 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	26 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	10 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	68 03					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	68 03					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	68 03					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	68 03					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	68 03					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	a1 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	32 09					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	16 08					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	18 08					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	70 08					.word Function_CLEAR           & $FFFF ; token $3e1e "clear"
>01003e	bc 08					.word Function_Dim             & $FFFF ; token $3e1f "dim"
>010040	30 09					.word Function_COLLECT         & $FFFF ; token $3e20 "collect"
>010042	68 03					.word IllegalToken             & $FFFF ; token $3c21 "while"
>010044	68 03					.word IllegalToken             & $FFFF ; token $3a22 "wend"
.010046					TokenText:
>010046	02 26					 .text $02,"&"        ; token $2001
>010048	02 7c					 .text $02,"|"        ; token $2002
>01004a	02 5e					 .text $02,"^"        ; token $2003
>01004c	12 3c					 .text $12,"<"        ; token $2204
>01004e	12 3e					 .text $12,">"        ; token $2205
>010050	12 3d					 .text $12,"="        ; token $2206
>010052	13 3c 3d				 .text $13,"<="       ; token $2207
>010055	13 3e 3d				 .text $13,">="       ; token $2208
>010058	13 3c 3e				 .text $13,"<>"       ; token $2209
>01005b	22 2b					 .text $22,"+"        ; token $240a
>01005d	22 2d					 .text $22,"-"        ; token $240b
>01005f	32 2a					 .text $32,"*"        ; token $260c
>010061	32 2f					 .text $32,"/"        ; token $260d
>010063	32 25					 .text $32,"%"        ; token $260e
>010065	33 3e 3e				 .text $33,">>"       ; token $260f
>010068	33 3c 3c				 .text $33,"<<"       ; token $2610
>01006b	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010071	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010076	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01007b	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010080	92 2c					 .text $92,","        ; token $3215
>010082	92 3b					 .text $92,";"        ; token $3216
>010084	92 3a					 .text $92,":"        ; token $3217
>010086	92 28					 .text $92,"("        ; token $3218
>010088	92 29					 .text $92,")"        ; token $3219
>01008a	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>01008e	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>010095	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010099	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>01009d	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1e
>0100a3	f4 64 69 6d				 .text $f4,"dim"      ; token $3e1f
>0100a7	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e20
>0100af	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c21
>0100b5	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a22
>0100ba	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3e1e					clearTokenID                     = $3e1e
=$3e1f					dimTokenID                       = $3e1f
=$3e20					collectTokenID                   = $3e20
=$3c21					whileTokenID                     = $3c21
=$3a22					wendTokenID                      = $3a22

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100bb					Evaluate:
.0100bb	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100be	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100c1					EvaluateLevel:
.0100c1	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100c4	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100c6	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100c8	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100cb	b0 79		bcs $010146			bcs 	_ELVariable
.0100cd	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100d0	b0 16		bcs $0100e8			bcs 	_ELConstant
.0100d2	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100d5	90 7f		bcc $010156			bcc 	_ELStringConstant
.0100d7	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100da	90 03		bcc $0100df			bcc 	_ELConstantShift
.0100dc	82 94 00	brl $010173			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100df					_ELConstantShift:
.0100df	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100e2	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100e4	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100e6	e6 06		inc $06				inc 	DCodePtr
.0100e8					_ELConstant:
.0100e8	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100ea	38		sec				sec  								; shift it in the range 0-32767
.0100eb	e9 00 40	sbc #$4000			sbc 	#$4000
.0100ee	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100ef	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100f1	6a		ror a				ror 	a 							; rotate that into the constant value
.0100f2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100f4	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100f6	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100f8	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100fa	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100fc	e6 06		inc $06				inc 	DCodePtr
.0100fe					_ELGotAtom:
.0100fe	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010100	a8		tay				tay 								; save in Y
.010101	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010104	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010107	d0 35		bne $01013e			bne 	_ELExit
.010109	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01010b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01010e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010110	98		tya				tya 								; get the keyword token back
.010111	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010114	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010116	90 26		bcc $01013e			bcc 	_ELExit 					; precedence too low, then exit.
.010118	5a		phy				phy 								; save the binary operator on the stack
.010119	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01011b	e6 06		inc $06				inc 	DCodePtr
.01011d	18		clc				clc 								; try the next level up
.01011e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010121	e8		inx				inx 								; calculate the RHS at the next stack level.
.010122	e8		inx				inx
.010123	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.010126	ca		dex				dex
.010127	ca		dex				dex
.010128	7a		ply				ply 								; get operator token back into Y
.010129					_ELExecuteY:
.010129	98		tya				tya
.01012a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01012d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01012e	9b		txy				txy 								; save X in Y
.01012f	aa		tax				tax 								; double keyword ID in X
.010130	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010134	bb		tyx				tyx 								; restore X.
.010135	8f 3a 01 01	sta $01013a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010139					_ELCallRoutine:
.010139	20 39 01	jsr $010139			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01013c	80 c0		bra $0100fe			bra 	_ELGotAtom 					; go round operator level again.
.01013e	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010140	0a		asl a				asl 	a
.010141	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010143	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010145	60		rts				rts
.010146					_ELVariable:
.010146	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010148	20 07 02	jsr $010207			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01014b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01014d	94 10		sty $10,x			sty 	EXSValueH+0,x
.01014f	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010151	80 ab		bra $0100fe			bra 	_ELGotAtom
.010153					_ELSyntax
.010153	82 23 02	brl $010379			brl 	SyntaxError
.010156					_ELStringConstant:
.010156	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010159	f0 f8		beq $010153			beq 	_ELSyntax
.01015b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01015d	1a		inc a				inc 	a
.01015e	1a		inc a				inc 	a
.01015f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010161	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010163	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010165	18		clc				clc 								; add to string constant.
.010166	65 06		adc $06				adc 	DCodePtr
.010168	85 06		sta $06				sta 	DCodePtr
.01016a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01016c	09 00 80	ora #$8000			ora 	#$8000
.01016f	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010171	80 8b		bra $0100fe			bra 	_ELGotAtom
.010173					_ELUnaryKeyword:
.010173	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010175	a8		tay				tay 								; put the token in Y.
.010176	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010178	e6 06		inc $06				inc 	DCodePtr
.01017a	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01017d	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010180	f0 a7		beq $010129			beq 	_ELExecuteY					; go back and execute it
.010182	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.010185	d0 11		bne $010198			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010187	20 be 01	jsr $0101be			jsr 	EvaluateNext 				; evaluate the expression
.01018a	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; consume the right bracket.
.01018d					_ELCopy:
.01018d	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01018f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010191	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010193	95 10		sta $10,x			sta 	EXSValueH+0,x
.010195	82 66 ff	brl $0100fe			brl 	_ELGotAtom 					; and continue.
.010198					_ELUnaryOperator:
.010198	5a		phy				phy 								; save the operator on the stack.
.010199	e8		inx				inx 								; this is like evaluate next
.01019a	e8		inx				inx
.01019b	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01019e	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.0101a1	ca		dex				dex 								; unwind the stack.
.0101a2	ca		dex				dex
.0101a3	68		pla				pla 								; restore the unary operator.
.0101a4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101a7	f0 03		beq $0101ac			beq 	_ELMinus
.0101a9	4c 79 03	jmp $010379			jmp 	SyntaxError
.0101ac					_ELMinus:
.0101ac	38		sec				sec 								; do the negation calculation.
.0101ad	a9 00 00	lda #$0000			lda 	#0
.0101b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101b4	a9 00 00	lda #$0000			lda 	#0
.0101b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101bb	82 40 ff	brl $0100fe			brl 	_ELGotAtom					; and continue.
.0101be					EvaluateNext:
.0101be	e8		inx				inx
.0101bf	e8		inx				inx
.0101c0	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101c3	20 c1 00	jsr $0100c1			jsr 	EvaluateLevel
.0101c6	ca		dex				dex
.0101c7	ca		dex				dex
.0101c8	60		rts				rts
.0101c9					EvaluateInteger:
.0101c9	20 bb 00	jsr $0100bb			jsr 	Evaluate
.0101cc	b0 01		bcs $0101cf			bcs 	EIType
.0101ce	60		rts				rts
.0101cf					EIType:
.0101cf	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0101d2	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101da	78 70 65 63 74 65 64 00
.0101e2					EvaluateNextInteger:
.0101e2	20 be 01	jsr $0101be			jsr 	EvaluateNext
.0101e5	b0 e8		bcs $0101cf			bcs 	EIType
.0101e7	60		rts				rts
.0101e8					EvaluateString:
.0101e8	20 bb 00	jsr $0100bb			jsr 	Evaluate
.0101eb	90 01		bcc $0101ee			bcc 	ESType
.0101ed	60		rts				rts
.0101ee					ESType:
.0101ee	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0101f1	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101f9	78 70 65 63 74 65 64 00
.010201					EvaluateNextString:
.010201	20 be 01	jsr $0101be			jsr 	EvaluateNext
.010204	90 e8		bcc $0101ee			bcc 	ESType
.010206	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010207					VariableAccessExpression:
.010207	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010209	48		pha				pha
.01020a	20 48 02	jsr $010248			jsr 	VariableFind 				; try to find the variables
.01020d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01020f	90 23		bcc $010234			bcc 	_VANError
.010211	68		pla				pla 								; get and save that first token
.010212	48		pha				pha
.010213	a8		tay				tay 								; put first token in Y.
.010214	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010217	f0 07		beq $010220			beq 	_VANNotArray
.010219	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.01021b	20 bf 02	jsr $0102bf			jsr 	VariableSubscript			; index calculation
.01021e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010220					_VANNotArray:
.010220	68		pla				pla 								; get the token back.
.010221	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010224	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010227	38		sec				sec 								; set up return string.
.010228	f0 06		beq $010230			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01022a	18		clc				clc 								; returning a number, read high data word
.01022b	a0 02 00	ldy #$0002			ldy 	#2
.01022e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010230					_VANLoadLower:
.010230	a8		tay				tay 								; put A into Y (this is the high byte)
.010231	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010233	60		rts				rts
.010234					_VANError:
.010234	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010237	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01023f	20 75 6e 6b 6e 6f 77 6e 00
.010248					VariableFind:
.010248	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01024a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01024d	90 5c		bcc $0102ab			bcc 	_VFError
.01024f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010252	b0 11		bcs $010265			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010254	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010257	3a		dec a				dec 	a 							; now 0-25
.010258	0a		asl a				asl 	a 							; x 4 and clear carry
.010259	0a		asl a				asl 	a
.01025a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01025d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01025f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010261	e6 06		inc $06				inc 	DCodePtr
.010263	38		sec				sec 								; return with carry set.
.010264	60		rts				rts
.010265					_VFSlowVariable:
.010265	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010267	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.01026a	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01026b	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01026c	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.01026f	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010271	85 08		sta $08				sta 	DTemp1
.010273	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010275	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010278	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010279	65 08		adc $08				adc 	DTemp1
.01027b	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01027d	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01027f					_VFNext:
.01027f	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010281	f0 26		beq $0102a9			beq 	_VFFail 					; if zero, then it's the end of the list.
.010283	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010285	a8		tay				tay 								; read the address of the name at $0002,y
.010286	b9 02 00	lda $0002,y			lda 	$0002,y
.010289	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01028b	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01028e					_VFCompare:
.01028e	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010290	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010292	d0 eb		bne $01027f			bne 	_VFNext 					; if not, go to the next one.
.010294	c8		iny				iny 								; advance token pointer
.010295	c8		iny				iny
.010296	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010299	d0 f3		bne $01028e			bne 	_VFCompare
.01029b	98		tya				tya 								; this is the length of the word.
.01029c	18		clc				clc 								; so we add it to the code pointer
.01029d	65 06		adc $06				adc 	DCodePtr
.01029f	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102a1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102a3	18		clc				clc 								; four on is the actual data
.0102a4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102a7	38		sec				sec 								; return with CS indicating success
.0102a8	60		rts				rts
.0102a9					_VFFail:
.0102a9	18		clc				clc
.0102aa	60		rts				rts
.0102ab					_VFError:
.0102ab	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0102ae	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102b6	76 61 72 69 61 62 6c 65 00
.0102bf					VariableSubscript:
.0102bf	5a		phy				phy 								; save token on stack
.0102c0	48		pha				pha		 							; save variable address on stack.
.0102c1	20 e2 01	jsr $0101e2			jsr		EvaluateNextInteger 		; get the subscript
.0102c4	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; skip right bracket.
.0102c7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102ca	d0 1d		bne $0102e9			bne 	_VANSubscript
.0102cc	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102ce	f0 02		beq $0102d2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102d0	b0 17		bcs $0102e9			bcs 	_VANSubscript
.0102d2					_VANSubOkay:
.0102d2	0a		asl a				asl 	a 							; double lsword
.0102d3	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102d5	68		pla				pla 								; restore DVariablePtr
.0102d6	85 1e		sta $1e				sta 	DVariablePtr
.0102d8	68		pla				pla 								; get and save that first token
.0102d9	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102dc	d0 02		bne $0102e0			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102de	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102e0					_VANNotString
.0102e0	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102e2	18		clc				clc 								; add 2 to get it past the high subscript
.0102e3	69 02 00	adc #$0002			adc 	#2
.0102e6	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102e8	60		rts				rts
.0102e9					_VANSubscript:
.0102e9	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0102ec	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102f4	79 20 53 75 62 73 63 72 69 70 74 00
.010300					VariableCreate:
.010300	48		pha				pha 								; save count.
.010301	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010304	29 00 20	and #$2000			and 	#IDTypeMask
.010307	f0 06		beq $01030f			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010309	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01030c	18		clc				clc
.01030d	65 02		adc $02				adc 	DBaseAddress
.01030f					_VCIsInteger:
.01030f	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010311	68		pla				pla 								; restore count
.010312	48		pha				pha
.010313	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010314	0a		asl a				asl 	a 							; 2 x # items.
.010315					_VCNotSingle:
.010315	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010317	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01031a	48		pha				pha 								; save on stack
.01031b	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.01031e	d0 02		bne $010322			bne 	_VCString
.010320	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010322					_VCString:
.010322	68		pla				pla 								; restore first token.
.010323	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010326	f0 04		beq $01032c			beq 	_VCNotArray
.010328	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01032a	e6 08		inc $08				inc 	DTemp1
.01032c					_VCNotArray:
.01032c	5a		phy				phy 								; save address of token on stack.
.01032d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010330	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010332	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010334	18		clc				clc 								; add 4 for link and name.
.010335	69 04 00	adc #$0004			adc 	#4
.010338	65 08		adc $08				adc 	DTemp1 						; add memory required
.01033a	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01033c	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01033e					_VCErase:
.01033e	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010340	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010343	c8		iny				iny
.010344	c8		iny				iny
.010345	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010347	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010349	d0 f3		bne $01033e			bne 	_VCErase
.01034b	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01034d	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01034f	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010352	68		pla				pla 								; restore the token address
.010353	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010356	68		pla				pla 								; restore count and store.
.010357	99 04 00	sta $0004,y			sta 	$0004,y
.01035a					_VCNotArray2:
.01035a	98		tya				tya 								; update the head link
.01035b	92 20		sta ($20)			sta 	(DHashTablePtr)
.01035d	18		clc				clc 								; advance pointer to the data bit.
.01035e	69 04 00	adc #$0004			adc 	#4
.010361	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010362					ErrorHandler:
.010362	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010364	fa		plx				plx 								; address of error message -1
.010365	ea		nop				nop
.010366	80 fe		bra $010366	_EH1:	bra 	_EH1
.010368					IllegalToken:
.010368	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01036b	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010373	54 6f 6b 65 6e 00
.010379					SyntaxError:
.010379	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01037c	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010384	72 72 6f 72 00
.010389					ExpectToken:
.010389	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01038b	d0 05		bne $010392			bne 	_CTKError					; error if not
.01038d	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01038f	e6 06		inc $06				inc 	DCodePtr
.010391	60		rts				rts
.010392					_CTKError:
.010392	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010395	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01039d	74 6f 6b 65 6e 00
.0103a3					ExpectRightBracket:
.0103a3	48		pha				pha
.0103a4	a9 19 32	lda #$3219			lda 	#rparenTokenID
.0103a7	20 89 03	jsr $010389			jsr 	ExpectToken
.0103aa	68		pla				pla
.0103ab	60		rts				rts
.0103ac					ExpectComma:
.0103ac	48		pha				pha
.0103ad	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103b0	20 89 03	jsr $010389			jsr 	ExpectToken
.0103b3	68		pla				pla
.0103b4	60		rts				rts
.0103b5					CheckBothNumeric:
.0103b5	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103b7	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103b9	30 01		bmi $0103bc			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103bb	60		rts				rts
.0103bc					_CBNFail:
.0103bc	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0103bf	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103c7	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103d5					ResetTypeInteger:
.0103d5	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103d7	29 ff 7f	and #$7fff			and 	#$7FFF
.0103da	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103dc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103dd					StringTempAllocate:
.0103dd	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103e0	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103e3	18		clc				clc 								; this adds one, for the length.
.0103e4	65 16		adc $16				adc 	DTempStringPointer
.0103e6	85 16		sta $16				sta 	DTempStringPointer
.0103e8	48		pha				pha
.0103e9	a9 00 00	lda #$0000			lda 	#$0000
.0103ec	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103ee	92 16		sta ($16)			sta		(DTempStringPointer)
.0103f0	c2 20		rep #$20			rep 	#$20
.0103f2	68		pla				pla
.0103f3	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103f5	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103f7	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0103f9	60		rts				rts
.0103fa					StringCreateCopy:
.0103fa	a8		tay				tay 								; put pointer to string in Y
.0103fb	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0103fe	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010401	f0 17		beq $01041a			beq 	_SCCExit 					; do nothing if length zero.
.010403	da		phx				phx 								; save X and put the character count in X
.010404	aa		tax				tax
.010405	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010407					_SCCCopy:
.010407	c8		iny				iny 								; advance and read (first time skips length)
.010408	b9 00 00	lda $0000,y			lda 	$0000,y
.01040b	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01040d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01040f	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010411	1a		inc a				inc 	a
.010412	92 18		sta ($18)			sta 	(DStartTempString)
.010414	ca		dex				dex 								; do X times
.010415	d0 f0		bne $010407			bne 	_SCCCopy
.010417	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010419	fa		plx				plx
.01041a					_SCCExit:
.01041a	60		rts				rts
.01041b					StringMakeConcrete:
.01041b	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01041e	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010420	90 0f		bcc $010431			bcc 	_SMCExit
.010422	85 08		sta $08				sta 	DTemp1 						; source
.010424	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010426	29 ff 00	and #$00ff			and 	#$00FF
.010429	d0 07		bne $010432			bne 	_SMCNonZero 				; if not "" skip.
.01042b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01042e	18		clc				clc
.01042f	65 02		adc $02				adc 	DBaseAddress
.010431					_SMCExit:
.010431	60		rts				rts
.010432					_SMCNonZero:
.010432	48		pha				pha 								; save on stack.
.010433	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010436	18		clc				clc
.010437	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01043a	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01043e	85 0c		sta $0c				sta 	DTemp2 						; target
.010440	7a		ply				ply 								; get length copy from here until Y goes -ve
.010441	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010443					_SMCLoop:
.010443	b1 08		lda ($08),y			lda 	(DTemp1),y
.010445	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010447	88		dey				dey
.010448	10 f9		bpl $010443			bpl 	_SMCLoop
.01044a	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.01044c	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01044e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01044f					Binary_Add:
.01044f	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010451	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010453	30 12		bmi $010467		bmi 	_BATypeError
.010455	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010457	30 3f		bmi $010498		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010459	18		clc			clc
.01045a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01045c	75 02		adc $02,x		adc 	EXSValueL+2,x
.01045e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010460	b5 10		lda $10,x		lda		EXSValueH+0,x
.010462	75 12		adc $12,x		adc 	EXSValueH+2,x
.010464	95 10		sta $10,x		sta 	EXSValueH+0,x
.010466	60		rts			rts
.010467					_BATypeError:
.010467	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01046a	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010472	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010482	65 73 00
.010485					_BALengthError:
.010485	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010488	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010490	6f 6f 20 6c 6f 6e 67 00
.010498					_BAConcatenateString:
.010498	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01049a	85 08		sta $08			sta 	DTemp1
.01049c	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01049e	85 0c		sta $0c			sta 	DTemp2
.0104a0	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0104a2	18		clc			clc 										; work out the total length
.0104a3	b2 08		lda ($08)		lda 	(DTemp1)
.0104a5	72 0c		adc ($0c)		adc 	(DTemp2)
.0104a7	b0 14		bcs $0104bd		bcs 	_BAConcatLengthError 				; string is too long.
.0104a9	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0104ab	20 dd 03	jsr $0103dd		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0104ae	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0104b0	74 10		stz $10,x		stz 	EXSValueH+0,x
.0104b2	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0104b4	20 fa 03	jsr $0103fa		jsr 	StringCreateCopy
.0104b7	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0104b9	20 fa 03	jsr $0103fa		jsr 	StringCreateCopy
.0104bc	60		rts			rts
.0104bd					_BAConcatLengthError:
.0104bd	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0104c0	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104c8	6f 6f 20 6c 6f 6e 67 00
.0104d0					Binary_Subtract:
.0104d0	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104d3	38		sec			sec
.0104d4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104d6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104d8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104da	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104dc	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104de	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104e0	60		rts			rts
.0104e1					Binary_ShiftRight:
.0104e1	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104e4	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104e6	29 3f 00	and #$003f		and 	#63
.0104e9	f0 07		beq $0104f2		beq		_Binary_SRExit
.0104eb					_Binary_SRLoop:
.0104eb	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104ed	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104ef	3a		dec a			dec 	a
.0104f0	d0 f9		bne $0104eb		bne 	_Binary_SRLoop
.0104f2					_Binary_SRExit:
.0104f2	60		rts			rts
.0104f3					Binary_ShiftLeft:
.0104f3	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0104f6	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104f8	29 3f 00	and #$003f		and 	#63
.0104fb	f0 07		beq $010504		beq		_Binary_SLExit
.0104fd					_Binary_SLLoop:
.0104fd	16 00		asl $00,x		asl 	EXSValueL+0,x
.0104ff	36 10		rol $10,x		rol 	EXSValueH+0,x
.010501	3a		dec a			dec 	a
.010502	d0 f9		bne $0104fd		bne 	_Binary_SLLoop
.010504					_Binary_SLExit:
.010504	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010505					Binary_And:
.010505	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010508	b5 00		lda $00,x		lda		EXSValueL+0,x
.01050a	35 02		and $02,x		and 	EXSValueL+2,x
.01050c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01050e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010510	35 12		and $12,x		and 	EXSValueH+2,x
.010512	95 10		sta $10,x		sta 	EXSValueH+0,x
.010514	60		rts			rts
.010515					Binary_Or:
.010515	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010518	b5 00		lda $00,x		lda		EXSValueL+0,x
.01051a	15 02		ora $02,x		ora 	EXSValueL+2,x
.01051c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01051e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010520	15 12		ora $12,x		ora 	EXSValueH+2,x
.010522	95 10		sta $10,x		sta 	EXSValueH+0,x
.010524	60		rts			rts
.010525					Binary_Xor:
.010525	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.010528	b5 00		lda $00,x		lda		EXSValueL+0,x
.01052a	55 02		eor $02,x		eor 	EXSValueL+2,x
.01052c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01052e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010530	55 12		eor $12,x		eor 	EXSValueH+2,x
.010532	95 10		sta $10,x		sta 	EXSValueH+0,x
.010534	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010535					Binary_Equals:
.010535	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010538	b0 0e		bcs $010548		bcs 	_BEString
.01053a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01053c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01053e	d0 4f		bne $01058f		bne 	Compare_Fail
.010540	b5 10		lda $10,x		lda 	EXSValueH,x
.010542	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010544	d0 49		bne $01058f		bne 	Compare_Fail
.010546	80 3f		bra $010587		bra 	Compare_Succeed
.010548					_BEString:
.010548	09 00 00	ora #$0000		ora 	#$0000
.01054b	f0 3a		beq $010587		beq 	Compare_Succeed
.01054d	80 40		bra $01058f		bra 	Compare_Fail
.01054f					Binary_NotEquals:
.01054f	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010552	b0 0e		bcs $010562		bcs 	_BNEString
.010554	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010556	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010558	d0 2d		bne $010587		bne 	Compare_Succeed
.01055a	b5 10		lda $10,x		lda 	EXSValueH,x
.01055c	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01055e	d0 27		bne $010587		bne 	Compare_Succeed
.010560	80 2d		bra $01058f		bra 	Compare_Fail
.010562					_BNEString:
.010562	09 00 00	ora #$0000		ora 	#$0000
.010565	d0 20		bne $010587		bne 	Compare_Succeed
.010567	80 26		bra $01058f		bra 	Compare_Fail
.010569					Binary_Less:
.010569	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01056c	b0 12		bcs $010580		bcs 	_BLString
.01056e	38		sec			sec
.01056f	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010571	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010573	b5 10		lda $10,x		lda 	EXSValueH,x
.010575	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010577	50 03		bvc $01057c		bvc 	*+5
.010579	49 00 80	eor #$8000		eor 	#$8000
.01057c	30 09		bmi $010587		bmi 	Compare_Succeed
.01057e	80 0f		bra $01058f		bra 	Compare_Fail
.010580					_BLString:
.010580	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010583	f0 02		beq $010587		beq 	Compare_Succeed
.010585	80 08		bra $01058f		bra 	Compare_Fail
.010587					Compare_Succeed:
.010587	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01058a	95 00		sta $00,x		sta 	EXSValueL,x
.01058c	95 10		sta $10,x		sta 	EXSValueH,x
.01058e	60		rts			rts
.01058f					Compare_Fail:
.01058f	74 00		stz $00,x		stz 	EXSValueL,x
.010591	74 10		stz $10,x		stz 	EXSValueH,x
.010593	60		rts			rts
.010594					Binary_GreaterEqual:
.010594	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010597	b0 12		bcs $0105ab		bcs 	_BGEString
.010599	38		sec			sec
.01059a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01059c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01059e	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a0	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a2	50 03		bvc $0105a7		bvc 	*+5
.0105a4	49 00 80	eor #$8000		eor 	#$8000
.0105a7	10 de		bpl $010587		bpl 	Compare_Succeed
.0105a9	80 e4		bra $01058f		bra 	Compare_Fail
.0105ab					_BGEString:
.0105ab	09 00 00	ora #$0000		ora 	#$0000
.0105ae	10 d7		bpl $010587		bpl 	Compare_Succeed
.0105b0	80 dd		bra $01058f		bra 	Compare_Fail
.0105b2					Binary_LessEqual:
.0105b2	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105b5	b0 12		bcs $0105c9		bcs 	_BLEString
.0105b7	18		clc			clc 									; numeric <= signed
.0105b8	b5 00		lda $00,x		lda 	EXSValueL,x
.0105ba	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105bc	b5 10		lda $10,x		lda 	EXSValueH,x
.0105be	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105c0	50 03		bvc $0105c5		bvc 	*+5
.0105c2	49 00 80	eor #$8000		eor 	#$8000
.0105c5	30 c0		bmi $010587		bmi 	Compare_Succeed
.0105c7	80 c6		bra $01058f		bra 	Compare_Fail
.0105c9					_BLEString:
.0105c9	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105cc	d0 b9		bne $010587		bne 	Compare_Succeed
.0105ce	80 bf		bra $01058f		bra 	Compare_Fail
.0105d0					Binary_Greater:
.0105d0	20 ee 05	jsr $0105ee		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d3	b0 12		bcs $0105e7		bcs 	_BGString
.0105d5	18		clc			clc 									; numeric > signed
.0105d6	b5 00		lda $00,x		lda 	EXSValueL,x
.0105d8	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105da	b5 10		lda $10,x		lda 	EXSValueH,x
.0105dc	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105de	50 03		bvc $0105e3		bvc 	*+5
.0105e0	49 00 80	eor #$8000		eor 	#$8000
.0105e3	10 a2		bpl $010587		bpl 	Compare_Succeed
.0105e5	80 a8		bra $01058f		bra 	Compare_Fail
.0105e7					_BGString:
.0105e7	c9 01 00	cmp #$0001		cmp 	#$0001
.0105ea	f0 9b		beq $010587		beq 	Compare_Succeed
.0105ec	80 a1		bra $01058f		bra 	Compare_Fail
.0105ee					CompareTypeCheck:
.0105ee	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105f0	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105f2	30 06		bmi $0105fa		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105f4	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105f6	30 1c		bmi $010614		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105f8	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0105f9	60		rts			rts
.0105fa					_CTCFail:
.0105fa	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>0105fd	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010605	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010614					_CTCStringCompare:
.010614	20 d5 03	jsr $0103d5		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010617	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010619	85 08		sta $08			sta 	DTemp1
.01061b	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01061d	85 0c		sta $0c			sta 	DTemp2
.01061f	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010622	a8		tay			tay
.010623	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010625	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010627	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010629	90 02		bcc $01062d		bcc 	_CTCSmallest
.01062b	b2 0c		lda ($0c)		lda 	(DTemp2)
.01062d					_CTCSmallest:
.01062d	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01062f					_CTCCompare:
.01062f	c8		iny			iny 									; look at next character (done first, first char is size)
.010630	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010632	30 16		bmi $01064a		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010634	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010636	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010638	f0 f5		beq $01062f		beq 	_CTCCompare 					; if zero, try the next character.
.01063a	b0 07		bcs $010643		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01063c					_CTCLess:
.01063c	c2 20		rep #$20		rep 	#$20
.01063e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010641	80 14		bra $010657		bra 	_CTCExit
.010643					_CTCGreater:
.010643	c2 20		rep #$20		rep 	#$20
.010645	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010648	80 0d		bra $010657		bra 	_CTCExit
.01064a					_CTCEqualSoFar:
.01064a	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.01064c	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01064e	90 ec		bcc $01063c		bcc 	_CTCLess
.010650	d0 f1		bne $010643		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010652	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010654	a9 00 00	lda #$0000		lda 	#$0000
.010657					_CTCExit:
.010657	38		sec			sec 									; return with CS indicating string comparison.
.010658	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010659					Binary_Divide:
.010659	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.01065c	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01065e	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010660	d0 14		bne $010676		bne 	_BinaryDivide_Ok
.010662	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010665	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01066d	20 62 79 20 7a 65 72 6f 00
.010676					_BinaryDivide_Ok:
.010676	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010678	64 0a		stz $0a			stz 	DTemp1+2
.01067a	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.01067c	5a		phy			phy 										; save Y (bit counter)
.01067d	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01067f	10 07		bpl $010688		bpl 	_BinaryDivide_RightDone
.010681	e8		inx			inx
.010682	e8		inx			inx
.010683	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.010686	ca		dex			dex
.010687	ca		dex			dex
.010688					_BinaryDivide_RightDone:
.010688	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01068a	10 03		bpl $01068f		bpl 	_BinaryDivide_LeftDone
.01068c	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.01068f					_BinaryDivide_LeftDone:
.01068f	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010692					_BinaryDivide_Loop:
.010692	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010694	36 10		rol $10,x		rol 	EXSValueH+0,x
.010696	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010698	26 0a		rol $0a			rol 	DTemp1+2
.01069a	38		sec			sec											; calculate A-M
.01069b	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01069d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01069f	85 0c		sta $0c			sta 	DTemp2
.0106a1	a5 0a		lda $0a			lda 	DTemp1+2
.0106a3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106a5	90 08		bcc $0106af		bcc 	_Binary_NoSubract 					; if A < M skip this
.0106a7	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0106a9	a5 0c		lda $0c			lda 	DTemp2
.0106ab	85 08		sta $08			sta 	DTemp1+0
.0106ad	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0106af					_Binary_NoSubract:
.0106af	88		dey			dey 										; do it 32 times.
.0106b0	d0 e0		bne $010692		bne 	_BinaryDivide_Loop
.0106b2					_BinaryDivide_Exit:
.0106b2	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0106b4	29 01 00	and #$0001		and 	#1
.0106b7	f0 03		beq $0106bc		beq 	_BinaryDivide_Exit2
.0106b9	20 be 06	jsr $0106be		jsr 	Binary_DivNegate
.0106bc					_BinaryDivide_Exit2:
.0106bc	7a		ply			ply 										; restore Y
.0106bd	60		rts			rts
.0106be					Binary_DivNegate:
.0106be	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106c0	38		sec			sec 										; negate the value at stack X.
.0106c1	a9 00 00	lda #$0000		lda 	#$0000
.0106c4	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106c6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106c8	a9 00 00	lda #$0000		lda 	#$0000
.0106cb	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106cd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106cf	60		rts			rts
.0106d0					Binary_Modulus:
.0106d0	20 59 06	jsr $010659		jsr 	Binary_Divide 						; do the divide
.0106d3	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106d5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106d7	a5 0a		lda $0a			lda 	DTemp1+2
.0106d9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106db	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106dc					Binary_Multiply:
.0106dc	20 b5 03	jsr $0103b5		jsr 	CheckBothNumeric 					; check both values are numeric
.0106df	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106e1	85 08		sta $08			sta 	DTemp1
.0106e3	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106e5	85 0a		sta $0a			sta		DTemp1+2
.0106e7	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106e9	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106eb					_BinaryMultiply_Loop:
.0106eb	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106ed	05 0a		ora $0a			ora 	DTemp1+2
.0106ef	f0 1e		beq $01070f		beq 	_BinaryMultiply_Exit
.0106f1	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106f3	29 01 00	and #$0001		and 	#1
.0106f6	f0 0d		beq $010705		beq 	_BinaryMultiply_NoAdd
.0106f8	18		clc			clc 										; add multiplicand to result.
.0106f9	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0106fb	75 02		adc $02,x		adc 	EXSValueL+2,x
.0106fd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106ff	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010701	75 12		adc $12,x		adc 	EXSValueH+2,x
.010703	95 10		sta $10,x		sta 	EXSValueH+0,x
.010705					_BinaryMultiply_NoAdd:
.010705	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010707	66 08		ror $08			ror 	DTemp1
.010709	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01070b	36 12		rol $12,x		rol 	EXSValueH+2,x
.01070d	80 dc		bra $0106eb		bra 	_BinaryMultiply_Loop 				; go round again.
.01070f					_BinaryMultiply_Exit:
.01070f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010710					Function_Len:
.010710	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns an integer
.010713	20 01 02	jsr $010201			jsr 	EvaluateNextString 			; get the value you are absoluting
.010716	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.010719	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01071b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01071e	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010721	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010723	74 10		stz $10,x			stz 	EXSValueH+0,x
.010725	60		rts				rts
.010726					Function_Abs:
.010726	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns an integer
.010729	20 e2 01	jsr $0101e2			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01072c	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.01072f	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010731	30 07		bmi $01073a			bmi 	_FAbsNegative 				; negate it if negative
.010733	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010735	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010737	95 00		sta $00,x			sta 	EXSValueL+0,x
.010739	60		rts				rts
.01073a					_FAbsNegative:
.01073a	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01073b	a9 00 00	lda #$0000			lda 	#0
.01073e	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010740	95 00		sta $00,x			sta 	EXSValueL+0,x
.010742	a9 00 00	lda #$0000			lda 	#0
.010745	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010747	95 10		sta $10,x			sta 	EXSValueH+0,x
.010749	60		rts				rts
.01074a					Function_Sgn:
.01074a	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger 			; returns integer
.01074d	20 e2 01	jsr $0101e2			jsr 	EvaluateNextInteger 		; get an integer
.010750	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check )
.010753	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010755	74 10		stz $10,x			stz 	EXSValueH+0,x
.010757	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010759	30 07		bmi $010762			bmi 	_FSgnNegative 				; set to -1 if signed
.01075b	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01075d	f0 02		beq $010761			beq 	_FSgnExit
.01075f	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010761					_FSgnExit:
.010761	60		rts				rts
.010762					_FSgnNegative:
.010762	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010765	95 00		sta $00,x			sta 	EXSValueL+0,x
.010767	95 10		sta $10,x			sta 	EXSValueH+0,x
.010769	60		rts				rts
.01076a					Function_Random:
.01076a	20 d5 03	jsr $0103d5			jsr 	ResetTypeInteger
.01076d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01076f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010771	d0 0a		bne $01077d			bne 	_Rnd_NotZero
.010773	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010776	85 10		sta $10				sta 	DRandom
.010778	a9 ea 00	lda #$00ea			lda 	#$EA
.01077b	85 12		sta $12				sta 	DRandom+2
.01077d					_Rnd_NotZero:
.01077d	20 88 07	jsr $010788			jsr 	_Rnd_Process 				; call randomiser twice
.010780	95 10		sta $10,x			sta 	EXSValueH+0,x
.010782	20 88 07	jsr $010788			jsr 	_Rnd_Process
.010785	95 00		sta $00,x			sta 	EXSValueL+0,x
.010787	60		rts				rts
.010788					_Rnd_Process:
.010788	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01078a	26 12		rol $12				rol 	DRandom+2
.01078c	90 0e		bcc $01079c			bcc 	_Rnd_Exit
.01078e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010790	49 54 d4	eor #$d454			eor 	#$D454
.010793	85 10		sta $10				sta 	DRandom
.010795	a5 12		lda $12				lda 	DRandom+2
.010797	49 d5 55	eor #$55d5			eor 	#$55D5
.01079a	85 12		sta $12				sta 	DRandom+2
.01079c					_Rnd_Exit:
.01079c	a5 10		lda $10				lda 	DRandom
.01079e	45 12		eor $12				eor 	DRandom+2
.0107a0	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0107a1					Function_Let:
.0107a1	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0107a3	48		pha				pha
.0107a4	20 48 02	jsr $010248			jsr 	VariableFind 				; find the variable
.0107a7	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0107a9	b0 1c		bcs $0107c7			bcs 	_FLetFound 					; skip if found.
.0107ab	68		pla				pla 								; get and push the first token again.
.0107ac	48		pha				pha
.0107ad	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.0107b0	d0 51		bne $010803			bne 	_FLError					; arrays, so this causes an error.
.0107b2	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0107b4	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0107b7	20 00 03	jsr $010300			jsr 	VariableCreate 				; create it.
.0107ba	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0107bc					_FLSkipToken:
.0107bc	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0107be	e6 06		inc $06				inc 	DCodePtr
.0107c0	e6 06		inc $06				inc 	DCodePtr
.0107c2	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0107c5	d0 f5		bne $0107bc			bne 	_FLSkipToken
.0107c7					_FLetFound:
.0107c7	68		pla				pla 								; get and save the first token.
.0107c8	48		pha				pha
.0107c9	a8		tay				tay 								; put it in Y
.0107ca	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0107cd	f0 07		beq $0107d6			beq 	_FLetNotArray
.0107cf	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0107d1	20 bf 02	jsr $0102bf			jsr 	VariableSubscript			; index calculation
.0107d4	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0107d6					_FLetNotArray:
.0107d6	7a		ply				ply 								; get the first token into Y
.0107d7	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0107d9	48		pha				pha
.0107da	5a		phy				phy 								; save the first token on the stack.
.0107db	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0107de	20 89 03	jsr $010389			jsr 	ExpectToken
.0107e1	68		pla				pla 								; restore the first token.
.0107e2	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0107e5	d0 0f		bne $0107f6			bne 	_FLetString 				; skip if string.
.0107e7	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; get an integer
.0107ea	7a		ply				ply 								; get address in Y
.0107eb	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0107ed	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107f0	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.0107f2	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0107f5	60		rts				rts
.0107f6					_FLetString:
.0107f6	20 e8 01	jsr $0101e8			jsr 	EvaluateString 				; get a string.
.0107f9	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0107fb	20 1b 04	jsr $01041b			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0107fe	7a		ply				ply 								; get address
.0107ff	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010802	60		rts				rts
.010803					_FLError:
.010803	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010806	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>01080e	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010816					Function_END:
.010816	02 00		cop #$00			cop 	#0
.010818					Function_RUN:
.010818	20 70 08	jsr $010870			jsr 	Function_CLEAR 				; clear all variables.
.01081b	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.01081d	18		clc				clc
.01081e	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010821					_FRun_NextLineNumber:
.010821	a8		tay				tay 								; put in Y
.010822	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010825	f0 ef		beq $010816			beq 	Function_END 				; if zero, off the end of the program
.010827	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01082a	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01082c	98		tya				tya 								; get address back
.01082d	18		clc				clc 								; skip over the link/line number
.01082e	69 04 00	adc #$0004			adc 	#4
.010831	85 06		sta $06				sta 	DCodePtr
.010833					_FRun_NextInstruction:
.010833	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010836	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010838	38		sec				sec
.010839	e9 00 01	sbc #$0100			sbc 	#256
.01083c	85 16		sta $16				sta 	DTempStringPointer
.01083e	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010840	f0 28		beq $01086a			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010842	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.010845	f0 18		beq $01085f			beq 	_FRun_Colon
.010847	a8		tay				tay 								; save in Y
.010848	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.01084b	c9 00 20	cmp #$2000			cmp 	#$2000
.01084e	d0 15		bne $010865			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010850	98		tya				tya 								; get token back
.010851	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010854	0a		asl a				asl 	a 							; double it into X
.010855	aa		tax				tax
.010856	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010858	e6 06		inc $06				inc 	DCodePtr
.01085a	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01085d	80 d4		bra $010833			bra 	_FRun_NextInstruction 		; do the following instruction.
.01085f					_FRun_Colon:
.01085f	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010861	e6 06		inc $06				inc 	DCodePtr
.010863	80 ce		bra $010833			bra 	_FRun_NextInstruction 		; do the following instruction.
.010865					_FRun_TryLET:
.010865	20 a1 07	jsr $0107a1			jsr 	Function_LET 				; try as a LET.
.010868	80 c9		bra $010833			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.01086a					_FRun_EndInstruction:
.01086a	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01086c	1a		inc a				inc 	a 							; go to link for next line
.01086d	1a		inc a				inc 	a
.01086e	80 b1		bra $010821			bra 	_FRun_NextLineNumber
.010870					Function_CLEAR:
.010870	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.010873	a9 00 00	lda #$0000			lda 	#$0000
.010876	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010878	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01087a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01087d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01087f	20 a6 08	jsr $0108a6			jsr 	FindCodeEnd 				; find where the program ends.
.010882	a8		tay				tay 								; Y points to it.
.010883	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010886	99 02 00	sta $0002,y			sta 	$0002,y
.010889	99 04 00	sta $0004,y			sta 	$0004,y
.01088c	98		tya				tya 								; start of working memory up
.01088d	18		clc				clc
.01088e	69 06 00	adc #$0006			adc 	#6
.010891	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010894	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010896	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010899					_FCLoop:
.010899	a9 00 00	lda #$0000			lda 	#$0000
.01089c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01089e	c8		iny				iny
.01089f	c8		iny				iny
.0108a0	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0108a3	d0 f4		bne $010899			bne 	_FCLoop
.0108a5	60		rts				rts
.0108a6					FindCodeEnd:
.0108a6	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.0108a9	18		clc				clc
.0108aa	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0108ac	a8		tay				tay
.0108ad					_FCELoop:
.0108ad	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0108b0	f0 08		beq $0108ba			beq 	_FCEExit
.0108b2	98		tya				tya 								; add offset
.0108b3	18		clc				clc
.0108b4	79 00 00	adc $0000,y			adc 	$0000,y
.0108b7	a8		tay				tay
.0108b8	80 f3		bra $0108ad			bra 	_FCELoop
.0108ba					_FCEExit:
.0108ba	98		tya				tya 								; return in A
.0108bb	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0108bc					Function_Dim:
.0108bc	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0108be	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0108c1	f0 3b		beq $0108fe			beq		_FDIMNotArray 				; no, error.
.0108c3	20 48 02	jsr $010248			jsr 	VariableFind 				; try to find it.
.0108c6	b0 41		bcs $010909			bcs 	_FDIMExists 				; if it does, that's an error.
.0108c8	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0108ca	48		pha				pha
.0108cb	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0108cd	48		pha				pha
.0108ce					_FDIMSkip:
.0108ce	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0108d0	e6 06		inc $06				inc 	DCodePtr
.0108d2	e6 06		inc $06				inc 	DCodePtr
.0108d4	29 00 08	and #$0800			and 	#IDContMask
.0108d7	d0 f5		bne $0108ce			bne 	_FDIMSkip
.0108d9	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; evaluate the size
.0108dc	20 a3 03	jsr $0103a3			jsr 	ExpectRightBracket 			; check the ) following.
.0108df	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0108e2	d0 3b		bne $01091f			bne 	_FDIMSize
.0108e4	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0108e7	f0 36		beq $01091f			beq 	_FDIMSize
.0108e9	7a		ply				ply 								; restore HashTablePtr
.0108ea	84 20		sty $20				sty 	DHashTablePtr
.0108ec	7a		ply				ply 								; so now A is the high index, Y points to the token
.0108ed	20 00 03	jsr $010300			jsr 	VariableCreate 				; create the variable.
.0108f0	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0108f2	c9 15 32	cmp #$3215			cmp 	#commaTokenID 				; if not a comma, exit
.0108f5	d0 06		bne $0108fd			bne 	_FDIMExit
.0108f7	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0108f9	e6 06		inc $06				inc 	DCodePtr
.0108fb	80 bf		bra $0108bc			bra 	Function_DIM 				; and do another
.0108fd					_FDIMExit:
.0108fd	60		rts				rts
.0108fe					_FDIMNotArray:
.0108fe	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010901	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010909					_FDIMExists:
.010909	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01090c	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010914	65 64 69 6d 65 6e 73 69 6f 6e 00
.01091f					_FDIMSize:
.01091f	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>010922	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01092a	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010930					Function_COLLECT:
.010930	ea		nop				nop
.010931	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010932					Function_ASSERT:
.010932	20 c9 01	jsr $0101c9			jsr 	EvaluateInteger 			; something that returns an integer.
.010935	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010937	05 08		ora $08				ora 	Dtemp1
.010939	f0 01		beq $01093c			beq 	_FAssFail
.01093b	60		rts				rts
.01093c					_FAssFail:
.01093c	20 62 03	jsr $010362			jsr 	ErrorHandler 						; call error routine
>01093f	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010947	61 69 6c 65 64 00

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.01094d					SwitchBasicInstance:
.01094d	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.01094f	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010952	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010954	86 02		stx $02				stx		DBaseAddress
.010956	84 04		sty $04				sty 	DHighAddress
.010958	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010959	48		pha				pha 										; then copy it into B.
.01095a	ab		plb				plb
.01095b	ab		plb				plb
.01095c	4c 18 08	jmp $010818			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	60 46 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 10 00 01 00 1f 3e ad f9
>024108	1e f0 03 40 19 32 00 00 10 00 02 00 1f 3e 3d fc
>024118	1c f0 07 40 19 32 00 00 18 00 03 00 1a 3e c9 e8
>024128	1b e0 06 22 0a 00 07 6a 6d 6a 6a 6a 6b 6b 00 00
>024138	1c 00 04 00 1a 3e ad f9 1e f0 00 40 19 32 06 22
>024148	0a 00 07 6a 6b 6d 6b 6d 6c 6a 00 00 1c 00 05 00
>024158	1a 3e ad f9 1e f0 01 40 19 32 06 22 0a 00 06 6c
>024168	6c 6b 6b 6c 6a 00 00 00 16 00 06 00 1a 3e ad f9
>024178	1e f0 02 40 19 32 06 22 04 00 00 00 00 00 18 00
>024188	07 00 1a 3e ad f9 1e f0 03 40 19 32 06 22 06 00
>024198	03 6c 6c 6c 00 00 16 00 08 00 1a 3e 3d fc 1c f0
>0241a8	00 40 19 32 06 22 04 00 00 00 00 00 1c 00 09 00
>0241b8	1a 3e 3d fc 1c f0 01 40 19 32 06 22 0a 00 06 6a
>0241c8	6d 6a 6c 6c 6b 00 00 00 18 00 0a 00 1a 3e 3d fc
>0241d8	1c f0 02 40 19 32 06 22 06 00 03 6a 6b 6c 00 00
>0241e8	16 00 0b 00 1a 3e 3d fc 1c f0 03 40 19 32 06 22
>0241f8	04 00 00 00 00 00 18 00 0c 00 1a 3e 3d fc 1c f0
>024208	04 40 19 32 06 22 06 00 03 6d 6c 6d 00 00 1a 00
>024218	0d 00 1a 3e 3d fc 1c f0 05 40 19 32 06 22 08 00
>024228	05 6b 6c 6c 6b 6c 00 00 18 00 0e 00 1a 3e 3d fc
>024238	1c f0 06 40 19 32 06 22 06 00 03 6b 6b 6b 00 00
>024248	1c 00 0f 00 1a 3e 3d fc 1c f0 07 40 19 32 06 22
>024258	0a 00 06 6c 6b 6c 6a 6b 6a 00 00 00 20 00 10 00
>024268	1a 3e 3d fc 1c f0 07 40 19 32 06 22 08 00 05 5a
>024278	59 57 58 59 0a 24 04 00 00 00 00 00 22 00 11 00
>024288	1a 3e ad f9 1e f0 02 40 19 32 06 22 0a 00 06 5a
>024298	5a 58 59 58 58 00 0a 24 04 00 00 00 00 00 22 00
>0242a8	12 00 1a 3e 3d fc 1c f0 06 40 19 32 06 22 0a 00
>0242b8	07 59 5a 5a 59 58 58 5a 0a 24 04 00 00 00 00 00
>0242c8	1e 00 13 00 1a 3e ad f9 1e f0 00 40 19 32 06 22
>0242d8	06 00 03 57 58 58 0a 24 04 00 00 00 00 00 22 00
>0242e8	14 00 1a 3e 3d fc 1c f0 07 40 19 32 06 22 0a 00
>0242f8	06 57 5a 5a 5a 59 57 00 0a 24 04 00 00 00 00 00
>024308	1e 00 15 00 1a 3e 3d fc 1c f0 05 40 19 32 06 22
>024318	06 00 03 59 59 57 0a 24 04 00 00 00 00 00 22 00
>024328	16 00 1a 3e ad f9 1e f0 03 40 19 32 06 22 0a 00
>024338	06 58 5a 57 59 58 57 00 0a 24 04 00 00 00 00 00
>024348	20 00 17 00 1a 3e 3d fc 1c f0 05 40 19 32 06 22
>024358	08 00 05 58 58 59 58 57 0a 24 04 00 00 00 00 00
>024368	20 00 18 00 1a 3e 3d fc 1c f0 04 40 19 32 06 22
>024378	08 00 05 5a 57 57 59 59 0a 24 04 00 00 00 00 00
>024388	1e 00 19 00 1a 3e ad f9 1e f0 02 40 19 32 06 22
>024398	06 00 03 58 57 57 0a 24 04 00 00 00 00 00 22 00
>0243a8	1a 00 1a 3e 3d fc 1c f0 06 40 19 32 06 22 0a 00
>0243b8	06 57 58 58 5a 58 59 00 0a 24 04 00 00 00 00 00
>0243c8	22 00 1b 00 1a 3e 3d fc 1c f0 03 40 19 32 06 22
>0243d8	0a 00 07 5a 58 58 59 5a 59 5a 0a 24 04 00 00 00
>0243e8	00 00 22 00 1c 00 1a 3e 3d fc 1c f0 03 40 19 32
>0243f8	06 22 0a 00 06 57 58 58 57 59 57 00 0a 24 04 00
>024408	00 00 00 00 20 00 1d 00 ad f9 1e f0 00 40 19 32
>024418	06 22 0a 00 07 62 62 61 61 61 62 61 0a 24 04 00
>024428	00 00 00 00 1c 00 1e 00 ad f9 1e f0 02 40 19 32
>024438	06 22 06 00 03 63 61 62 0a 24 04 00 00 00 00 00
>024448	1e 00 1f 00 ad f9 1e f0 03 40 19 32 06 22 08 00
>024458	05 64 62 62 64 62 0a 24 04 00 00 00 00 00 20 00
>024468	20 00 3d fc 1c f0 03 40 19 32 06 22 0a 00 06 64
>024478	62 61 61 64 63 00 0a 24 04 00 00 00 00 00 20 00
>024488	21 00 3d fc 1c f0 04 40 19 32 06 22 0a 00 06 64
>024498	64 61 61 61 64 00 0a 24 04 00 00 00 00 00 1e 00
>0244a8	22 00 3d fc 1c f0 05 40 19 32 06 22 08 00 05 61
>0244b8	62 62 62 64 0a 24 04 00 00 00 00 00 1e 00 23 00
>0244c8	3d fc 1c f0 06 40 19 32 06 22 08 00 04 64 62 63
>0244d8	64 00 0a 24 04 00 00 00 00 00 1e 00 24 00 3d fc
>0244e8	1c f0 07 40 19 32 06 22 08 00 04 61 64 61 61 00
>0244f8	0a 24 04 00 00 00 00 00 08 00 25 00 20 3e 00 00
>024508	18 00 26 00 1b 3e c9 e8 1b e0 06 22 0a 00 07 6a
>024518	6d 6a 6a 6a 6b 6b 00 00 1c 00 27 00 1b 3e ad f9
>024528	1e f0 00 40 19 32 06 22 0a 00 07 62 62 61 61 61
>024538	62 61 00 00 1c 00 28 00 1b 3e ad f9 1e f0 01 40
>024548	19 32 06 22 0a 00 06 6c 6c 6b 6b 6c 6a 00 00 00
>024558	18 00 29 00 1b 3e ad f9 1e f0 02 40 19 32 06 22
>024568	06 00 03 63 61 62 00 00 1a 00 2a 00 1b 3e ad f9
>024578	1e f0 03 40 19 32 06 22 08 00 05 64 62 62 64 62
>024588	00 00 16 00 2b 00 1b 3e 3d fc 1c f0 00 40 19 32
>024598	06 22 04 00 00 00 00 00 1c 00 2c 00 1b 3e 3d fc
>0245a8	1c f0 01 40 19 32 06 22 0a 00 06 6a 6d 6a 6c 6c
>0245b8	6b 00 00 00 18 00 2d 00 1b 3e 3d fc 1c f0 02 40
>0245c8	19 32 06 22 06 00 03 6a 6b 6c 00 00 1c 00 2e 00
>0245d8	1b 3e 3d fc 1c f0 03 40 19 32 06 22 0a 00 06 64
>0245e8	62 61 61 64 63 00 00 00 1c 00 2f 00 1b 3e 3d fc
>0245f8	1c f0 04 40 19 32 06 22 0a 00 06 64 64 61 61 61
>024608	64 00 00 00 1a 00 30 00 1b 3e 3d fc 1c f0 05 40
>024618	19 32 06 22 08 00 05 61 62 62 62 64 00 00 1a 00
>024628	31 00 1b 3e 3d fc 1c f0 06 40 19 32 06 22 08 00
>024638	04 64 62 63 64 00 00 00 1a 00 32 00 1b 3e 3d fc
>024648	1c f0 07 40 19 32 06 22 08 00 04 61 64 61 61 00
>024658	00 00 00 00 ee ee ee ee 00 00 00 00 00 00 00 00
>024668	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1944 times (31104 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
