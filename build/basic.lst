
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sun Jun 16 10:10:31 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f4	ldx #$f4fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 63 17 01	jmp $011763			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	7f 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	8f 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	9f 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	e3 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	4a 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	af 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	2c 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	0e 07					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c9 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c9 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	4a 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	56 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	d3 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	4a 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	5b 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	6d 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	e4 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	c4 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	a0 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	8a 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	fe 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	1e 0c					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	1e 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	56 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	8a 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	b2 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	cc 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	e3 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	87 0d					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	45 0d					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	c6 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	5d 0a					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	ef 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	de 0c					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8e 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8e 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8e 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8e 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8e 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8e 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8e 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8e 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	0d 17					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	c9 0d					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	ee 16					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	dd 14					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	df 14					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	4a 15					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	46 15					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	a5 15					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	19 16					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	09 17					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	69 10					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	6b 13					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	ca 13					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	e6 13					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	28 13					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	1c 11					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	a8 16					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	c0 16					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	d4 16					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	44 0e					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	1f 17					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	18 14					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	76 14					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	b5 10					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	f1 11					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	ad 14					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	2f 14					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8e 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	4a 11					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	6c 12					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100bc	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100c1	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c6	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100cb	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100d0	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d6	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100dc	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100e1	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e6	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100ec	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100f2	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f8	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>010100	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010108	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>01010f	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>010115	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>01011d	87 69 6e 73 74 72 28			 .text $87,"instr("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 74 6f				 .text $c3,"to"       ; token $3829
>010133	c5 73 74 65 70				 .text $c5,"step"     ; token $382a
>010138	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2b
>01013c	f4 6c 65 74				 .text $f4,"let"      ; token $3e2c
>010140	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2d
>010147	f4 65 6e 64				 .text $f4,"end"      ; token $3e2e
>01014b	f4 72 75 6e				 .text $f4,"run"      ; token $3e2f
>01014f	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e30
>010154	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e31
>01015a	f4 64 69 6d				 .text $f4,"dim"      ; token $3e32
>01015e	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e33
>010166	f4 63 6c 73				 .text $f4,"cls"      ; token $3e34
>01016a	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e35
>010170	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e36
>010175	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e37
>01017b	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e38
>010182	f3 6f 6e				 .text $f3,"on"       ; token $3e39
>010185	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e3a
>01018a	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3b
>01018f	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3c
>010194	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3d
>010199	f5 6c 69 73 74				 .text $f5,"list"     ; token $3e3e
>01019e	f5 6c 69 6e 6b				 .text $f5,"link"     ; token $3e3f
>0101a3	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c40
>0101aa	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c41
>0101b0	e3 69 66				 .text $e3,"if"       ; token $3c42
>0101b3	e4 66 6f 72				 .text $e4,"for"      ; token $3c43
>0101b7	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a44
>0101bc	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a45
>0101c2	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a46
>0101c7	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a47
>0101cd	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=608					TOKWorkSpace = EXSBase+EXSStackElements*3*2	; tokenised text goes here.
=1278					CPUStack = EXSBase+$300-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 31 02	brl $01049f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 9f 04	jmp $01049f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0b 05	jsr $01050b			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 89 04	ldx #$0489			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0b 05	jsr $01050b			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 39 0c	jsr $010c39			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 76 f0	jsr $01f076			jsr 	HWNewLine
.010487	80 fe		bra $010487	_EH1:	bra 	_EH1
>010489	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048e					IllegalToken:
.01048e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010491	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010499	54 6f 6b 65 6e 00
.01049f					SyntaxError:
.01049f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104aa	72 72 6f 72 00
.0104af					ExpectToken:
.0104af	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b1	d0 05		bne $0104b8			bne 	_CTKError					; error if not
.0104b3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b5	e6 06		inc $06				inc 	DCodePtr
.0104b7	60		rts				rts
.0104b8					_CTKError:
.0104b8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c3	74 6f 6b 65 6e 00
.0104c9					ExpectRightBracket:
.0104c9	48		pha				pha
.0104ca	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104cd	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d0	68		pla				pla
.0104d1	60		rts				rts
.0104d2					ExpectComma:
.0104d2	48		pha				pha
.0104d3	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d6	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d9	68		pla				pla
.0104da	60		rts				rts
.0104db					CheckBothNumeric:
.0104db	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104dd	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104df	30 01		bmi $0104e2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e1	60		rts				rts
.0104e2					_CBNFail:
.0104e2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ed	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fb					ResetTypeInteger:
.0104fb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fd	29 ff 7f	and #$7fff			and 	#$7FFF
.010500	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010502	60		rts				rts
.010503					ResetTypeString:
.010503	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010505	09 00 80	ora #$8000			ora 	#$8000
.010508	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050a	60		rts				rts
.01050b					PrintROMMessage:
.01050b	48		pha				pha
.01050c	da		phx				phx
.01050d					_PRMLoop:
.01050d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010511	29 ff 00	and #$00ff			and 	#$00FF
.010514	f0 06		beq $01051c			beq 	_PRMExit
.010516	20 36 f0	jsr $01f036			jsr 	HWPrintChar
.010519	e8		inx				inx
.01051a	80 f1		bra $01050d			bra 	_PRMLoop
.01051c					_PRMExit:
.01051c	fa		plx				plx
.01051d	68		pla				pla
.01051e	60		rts				rts
.01051f					PrintBASICString:
.01051f	48		pha				pha
.010520	da		phx				phx
.010521	5a		phy				phy
.010522	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010525	29 ff 00	and #$00ff			and 	#$00FF
.010528	f0 0b		beq $010535			beq 	_PBSExit 					; null string
.01052a	aa		tax				tax
.01052b					_PBSLoop:
.01052b	c8		iny				iny
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y
.01052f	20 36 f0	jsr $01f036			jsr 	HWPrintChar
.010532	ca		dex				dex
.010533	d0 f6		bne $01052b			bne 	_PBSLoop
.010535					_PBSExit:
.010535	7a		ply				ply
.010536	fa		plx				plx
.010537	68		pla				pla
.010538	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010539					StringTempAllocate:
.010539	48		pha				pha
.01053a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01053c	d0 09		bne $010547			bne 	_STANoReset
.01053e	5a		phy				phy 								; reset the temp string pointer.
.01053f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010542	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010544	85 16		sta $16				sta 	DTempStringPointer
.010546	7a		ply				ply
.010547					_STANoReset:
.010547	68		pla				pla 								; get length.
.010548	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01054b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01054e	18		clc				clc 								; this adds one, for the length.
.01054f	65 16		adc $16				adc 	DTempStringPointer
.010551	85 16		sta $16				sta 	DTempStringPointer
.010553	48		pha				pha 								; save start address
.010554	a9 00 00	lda #$0000			lda 	#$0000
.010557	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010559	92 16		sta ($16)			sta		(DTempStringPointer)
.01055b	c2 20		rep #$20			rep 	#$20
.01055d	68		pla				pla 								; restore start address
.01055e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010560	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010562	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010564	60		rts				rts
.010565					StringWriteCharacter:
.010565	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010567	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010569	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01056b	1a		inc a				inc 	a
.01056c	92 18		sta ($18)			sta 	(DStartTempString)
.01056e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010570	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010572	60		rts				rts
.010573					StringCreateCopy:
.010573	a8		tay				tay 								; put pointer to string in Y
.010574	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010577	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01057a	f0 17		beq $010593			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01057c	da		phx				phx 								; save X and put the character count in X
.01057d	aa		tax				tax
.01057e					_SCCCopy:
.01057e	c8		iny				iny 								; advance and read (first time skips length)
.01057f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010581	b9 00 00	lda $0000,y			lda 	$0000,y
.010584	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010586	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010588	1a		inc a				inc 	a
.010589	92 18		sta ($18)			sta 	(DStartTempString)
.01058b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01058d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01058f	ca		dex				dex 								; do X times
.010590	d0 ec		bne $01057e			bne 	_SCCCopy
.010592	fa		plx				plx
.010593					_SCCExit:
.010593	60		rts				rts
.010594					StringMakeConcrete:
.010594	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010597	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010599	90 0f		bcc $0105aa			bcc 	_SMCExit
.01059b	85 08		sta $08				sta 	DTemp1 						; source
.01059d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01059f	29 ff 00	and #$00ff			and 	#$00FF
.0105a2	d0 07		bne $0105ab			bne 	_SMCNonZero 				; if not "" skip.
.0105a4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a7	18		clc				clc 								; this reference is used for all empty strings.
.0105a8	65 02		adc $02				adc 	DBaseAddress
.0105aa					_SMCExit:
.0105aa	60		rts				rts
.0105ab					_SMCNonZero:
.0105ab	48		pha				pha 								; save on stack.
.0105ac	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105af	18		clc				clc
.0105b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105b3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105b5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105ba	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105bc					_SMCLoop:
.0105bc	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105be	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105c0	88		dey				dey 								; Y+1 times.
.0105c1	10 f9		bpl $0105bc			bpl 	_SMCLoop
.0105c3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105c5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.0105c8					Tokenise:
.0105c8	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105c9					Binary_Add:
.0105c9	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0105cb	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0105cd	30 12		bmi $0105e1		bmi 	_BATypeError
.0105cf	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105d1	30 3f		bmi $010612		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105d3	18		clc			clc 										; add the results
.0105d4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105d6	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105d8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105da	b5 20		lda $20,x		lda		EXSValueH+0,x
.0105dc	75 22		adc $22,x		adc 	EXSValueH+2,x
.0105de	95 20		sta $20,x		sta 	EXSValueH+0,x
.0105e0	60		rts			rts
.0105e1					_BATypeError:
.0105e1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0105e4	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105ec	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105fc	65 73 00
.0105ff					_BALengthError:
.0105ff	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010602	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01060a	6f 6f 20 6c 6f 6e 67 00
.010612					_BAConcatenateString:
.010612	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010614	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010616	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010618	85 0c		sta $0c			sta 	DTemp2
.01061a	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01061c	18		clc			clc 										; work out the total length
.01061d	b2 08		lda ($08)		lda 	(DTemp1)
.01061f	72 0c		adc ($0c)		adc 	(DTemp2)
.010621	b0 14		bcs $010637		bcs 	_BAConcatLengthError 				; string is too long.
.010623	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010625	20 39 05	jsr $010539		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010628	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.01062a	74 20		stz $20,x		stz 	EXSValueH+0,x
.01062c	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01062e	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010631	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010633	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010636	60		rts			rts
.010637					_BAConcatLengthError:
.010637	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01063a	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010642	6f 6f 20 6c 6f 6e 67 00
.01064a					Binary_Subtract:
.01064a	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01064d	38		sec			sec
.01064e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010650	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010652	95 00		sta $00,x		sta 	EXSValueL+0,x
.010654	b5 20		lda $20,x		lda		EXSValueH+0,x
.010656	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010658	95 20		sta $20,x		sta 	EXSValueH+0,x
.01065a	60		rts			rts
.01065b					Binary_ShiftRight:
.01065b	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01065e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010660	29 3f 00	and #$003f		and 	#63
.010663	f0 07		beq $01066c		beq		_Binary_SRExit
.010665					_Binary_SRLoop:
.010665	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010667	76 00		ror $00,x		ror 	EXSValueL+0,x
.010669	3a		dec a			dec 	a
.01066a	d0 f9		bne $010665		bne 	_Binary_SRLoop
.01066c					_Binary_SRExit:
.01066c	60		rts			rts
.01066d					Binary_ShiftLeft:
.01066d	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010670	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010672	29 3f 00	and #$003f		and 	#63
.010675	f0 07		beq $01067e		beq		_Binary_SLExit
.010677					_Binary_SLLoop:
.010677	16 00		asl $00,x		asl 	EXSValueL+0,x
.010679	36 20		rol $20,x		rol 	EXSValueH+0,x
.01067b	3a		dec a			dec 	a
.01067c	d0 f9		bne $010677		bne 	_Binary_SLLoop
.01067e					_Binary_SLExit:
.01067e	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01067f					Binary_And:
.01067f	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010682	b5 00		lda $00,x		lda		EXSValueL+0,x
.010684	35 02		and $02,x		and 	EXSValueL+2,x
.010686	95 00		sta $00,x		sta 	EXSValueL+0,x
.010688	b5 20		lda $20,x		lda		EXSValueH+0,x
.01068a	35 22		and $22,x		and 	EXSValueH+2,x
.01068c	95 20		sta $20,x		sta 	EXSValueH+0,x
.01068e	60		rts			rts
.01068f					Binary_Or:
.01068f	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010692	b5 00		lda $00,x		lda		EXSValueL+0,x
.010694	15 02		ora $02,x		ora 	EXSValueL+2,x
.010696	95 00		sta $00,x		sta 	EXSValueL+0,x
.010698	b5 20		lda $20,x		lda		EXSValueH+0,x
.01069a	15 22		ora $22,x		ora 	EXSValueH+2,x
.01069c	95 20		sta $20,x		sta 	EXSValueH+0,x
.01069e	60		rts			rts
.01069f					Binary_Xor:
.01069f	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0106a2	b5 00		lda $00,x		lda		EXSValueL+0,x
.0106a4	55 02		eor $02,x		eor 	EXSValueL+2,x
.0106a6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106a8	b5 20		lda $20,x		lda		EXSValueH+0,x
.0106aa	55 22		eor $22,x		eor 	EXSValueH+2,x
.0106ac	95 20		sta $20,x		sta 	EXSValueH+0,x
.0106ae	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0106af					Binary_Equals:
.0106af	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106b2	b0 0e		bcs $0106c2		bcs 	_BEString
.0106b4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106b6	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106b8	d0 4f		bne $010709		bne 	Compare_Fail
.0106ba	b5 20		lda $20,x		lda 	EXSValueH,x
.0106bc	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0106be	d0 49		bne $010709		bne 	Compare_Fail
.0106c0	80 3f		bra $010701		bra 	Compare_Succeed
.0106c2					_BEString:
.0106c2	09 00 00	ora #$0000		ora 	#$0000
.0106c5	f0 3a		beq $010701		beq 	Compare_Succeed
.0106c7	80 40		bra $010709		bra 	Compare_Fail
.0106c9					Binary_NotEquals:
.0106c9	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106cc	b0 0e		bcs $0106dc		bcs 	_BNEString
.0106ce	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106d0	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106d2	d0 2d		bne $010701		bne 	Compare_Succeed
.0106d4	b5 20		lda $20,x		lda 	EXSValueH,x
.0106d6	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0106d8	d0 27		bne $010701		bne 	Compare_Succeed
.0106da	80 2d		bra $010709		bra 	Compare_Fail
.0106dc					_BNEString:
.0106dc	09 00 00	ora #$0000		ora 	#$0000
.0106df	d0 20		bne $010701		bne 	Compare_Succeed
.0106e1	80 26		bra $010709		bra 	Compare_Fail
.0106e3					Binary_Less:
.0106e3	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106e6	b0 12		bcs $0106fa		bcs 	_BLString
.0106e8	38		sec			sec
.0106e9	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106eb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ed	b5 20		lda $20,x		lda 	EXSValueH,x
.0106ef	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0106f1	50 03		bvc $0106f6		bvc 	*+5
.0106f3	49 00 80	eor #$8000		eor 	#$8000
.0106f6	30 09		bmi $010701		bmi 	Compare_Succeed
.0106f8	80 0f		bra $010709		bra 	Compare_Fail
.0106fa					_BLString:
.0106fa	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106fd	f0 02		beq $010701		beq 	Compare_Succeed
.0106ff	80 08		bra $010709		bra 	Compare_Fail
.010701					Compare_Succeed:
.010701	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010704	95 00		sta $00,x		sta 	EXSValueL,x
.010706	95 20		sta $20,x		sta 	EXSValueH,x
.010708	60		rts			rts
.010709					Compare_Fail:
.010709	74 00		stz $00,x		stz 	EXSValueL,x
.01070b	74 20		stz $20,x		stz 	EXSValueH,x
.01070d	60		rts			rts
.01070e					Binary_GreaterEqual:
.01070e	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010711	b0 12		bcs $010725		bcs 	_BGEString
.010713	38		sec			sec
.010714	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010716	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010718	b5 20		lda $20,x		lda 	EXSValueH,x
.01071a	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01071c	50 03		bvc $010721		bvc 	*+5
.01071e	49 00 80	eor #$8000		eor 	#$8000
.010721	10 de		bpl $010701		bpl 	Compare_Succeed
.010723	80 e4		bra $010709		bra 	Compare_Fail
.010725					_BGEString:
.010725	09 00 00	ora #$0000		ora 	#$0000
.010728	10 d7		bpl $010701		bpl 	Compare_Succeed
.01072a	80 dd		bra $010709		bra 	Compare_Fail
.01072c					Binary_LessEqual:
.01072c	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01072f	b0 12		bcs $010743		bcs 	_BLEString
.010731	18		clc			clc 									; numeric <= signed
.010732	b5 00		lda $00,x		lda 	EXSValueL,x
.010734	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010736	b5 20		lda $20,x		lda 	EXSValueH,x
.010738	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01073a	50 03		bvc $01073f		bvc 	*+5
.01073c	49 00 80	eor #$8000		eor 	#$8000
.01073f	30 c0		bmi $010701		bmi 	Compare_Succeed
.010741	80 c6		bra $010709		bra 	Compare_Fail
.010743					_BLEString:
.010743	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010746	d0 b9		bne $010701		bne 	Compare_Succeed
.010748	80 bf		bra $010709		bra 	Compare_Fail
.01074a					Binary_Greater:
.01074a	20 68 07	jsr $010768		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01074d	b0 12		bcs $010761		bcs 	_BGString
.01074f	18		clc			clc 									; numeric > signed
.010750	b5 00		lda $00,x		lda 	EXSValueL,x
.010752	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010754	b5 20		lda $20,x		lda 	EXSValueH,x
.010756	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010758	50 03		bvc $01075d		bvc 	*+5
.01075a	49 00 80	eor #$8000		eor 	#$8000
.01075d	10 a2		bpl $010701		bpl 	Compare_Succeed
.01075f	80 a8		bra $010709		bra 	Compare_Fail
.010761					_BGString:
.010761	c9 01 00	cmp #$0001		cmp 	#$0001
.010764	f0 9b		beq $010701		beq 	Compare_Succeed
.010766	80 a1		bra $010709		bra 	Compare_Fail
.010768					CompareTypeCheck:
.010768	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.01076a	55 42		eor $42,x		eor 	EXSPrecType+2,x
.01076c	30 06		bmi $010774		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01076e	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010770	30 1c		bmi $01078e		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010772	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010773	60		rts			rts
.010774					_CTCFail:
.010774	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010777	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01077f	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01078e					_CTCStringCompare:
.01078e	20 fb 04	jsr $0104fb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010791	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010793	85 08		sta $08			sta 	DTemp1
.010795	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010797	85 0c		sta $0c			sta 	DTemp2
.010799	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01079c	a8		tay			tay
.01079d	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01079f	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0107a1	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107a3	90 02		bcc $0107a7		bcc 	_CTCSmallest
.0107a5	b2 0c		lda ($0c)		lda 	(DTemp2)
.0107a7					_CTCSmallest:
.0107a7	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0107a9					_CTCCompare:
.0107a9	c8		iny			iny 									; look at next character (done first, first char is size)
.0107aa	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0107ac	30 16		bmi $0107c4		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0107ae	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0107b0	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0107b2	f0 f5		beq $0107a9		beq 	_CTCCompare 					; if zero, try the next character.
.0107b4	b0 07		bcs $0107bd		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0107b6					_CTCLess:
.0107b6	c2 20		rep #$20		rep 	#$20
.0107b8	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107bb	80 14		bra $0107d1		bra 	_CTCExit
.0107bd					_CTCGreater:
.0107bd	c2 20		rep #$20		rep 	#$20
.0107bf	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107c2	80 0d		bra $0107d1		bra 	_CTCExit
.0107c4					_CTCEqualSoFar:
.0107c4	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107c6	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107c8	90 ec		bcc $0107b6		bcc 	_CTCLess
.0107ca	d0 f1		bne $0107bd		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107cc	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107ce	a9 00 00	lda #$0000		lda 	#$0000
.0107d1					_CTCExit:
.0107d1	38		sec			sec 									; return with CS indicating string comparison.
.0107d2	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107d3					Binary_Divide:
.0107d3	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0107d6	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107d8	15 22		ora $22,x		ora	 	EXSValueH+2,x
.0107da	d0 14		bne $0107f0		bne 	_BinaryDivide_Ok
.0107dc	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0107df	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107e7	20 62 79 20 7a 65 72 6f 00
.0107f0					_BinaryDivide_Ok:
.0107f0	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107f2	64 0a		stz $0a			stz 	DTemp1+2
.0107f4	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107f6	5a		phy			phy 										; save Y (bit counter)
.0107f7	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107f9	10 07		bpl $010802		bpl 	_BinaryDivide_RightDone
.0107fb	e8		inx			inx
.0107fc	e8		inx			inx
.0107fd	20 38 08	jsr $010838		jsr 	Binary_DivNegate
.010800	ca		dex			dex
.010801	ca		dex			dex
.010802					_BinaryDivide_RightDone:
.010802	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010804	10 03		bpl $010809		bpl 	_BinaryDivide_LeftDone
.010806	20 38 08	jsr $010838		jsr 	Binary_DivNegate
.010809					_BinaryDivide_LeftDone:
.010809	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01080c					_BinaryDivide_Loop:
.01080c	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01080e	36 20		rol $20,x		rol 	EXSValueH+0,x
.010810	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010812	26 0a		rol $0a			rol 	DTemp1+2
.010814	38		sec			sec											; calculate A-M
.010815	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010817	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010819	85 0c		sta $0c			sta 	DTemp2
.01081b	a5 0a		lda $0a			lda 	DTemp1+2
.01081d	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01081f	90 08		bcc $010829		bcc 	_Binary_NoSubract 					; if A < M skip this
.010821	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010823	a5 0c		lda $0c			lda 	DTemp2
.010825	85 08		sta $08			sta 	DTemp1+0
.010827	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010829					_Binary_NoSubract:
.010829	88		dey			dey 										; do it 32 times.
.01082a	d0 e0		bne $01080c		bne 	_BinaryDivide_Loop
.01082c					_BinaryDivide_Exit:
.01082c	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01082e	29 01 00	and #$0001		and 	#1
.010831	f0 03		beq $010836		beq 	_BinaryDivide_Exit2
.010833	20 38 08	jsr $010838		jsr 	Binary_DivNegate
.010836					_BinaryDivide_Exit2:
.010836	7a		ply			ply 										; restore Y
.010837	60		rts			rts
.010838					Binary_DivNegate:
.010838	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01083a	38		sec			sec 										; negate the value at stack X.
.01083b	a9 00 00	lda #$0000		lda 	#$0000
.01083e	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010840	95 00		sta $00,x		sta 	EXSValueL+0,x
.010842	a9 00 00	lda #$0000		lda 	#$0000
.010845	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010847	95 20		sta $20,x		sta 	EXSValueH+0,x
.010849	60		rts			rts
.01084a					Binary_Modulus:
.01084a	20 d3 07	jsr $0107d3		jsr 	Binary_Divide 						; do the divide
.01084d	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01084f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010851	a5 0a		lda $0a			lda 	DTemp1+2
.010853	95 20		sta $20,x		sta 	EXSValueH+0,x
.010855	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010856					Binary_Multiply:
.010856	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010859	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01085b	85 08		sta $08			sta 	DTemp1
.01085d	b5 20		lda $20,x		lda 	EXSValueH+0,x
.01085f	85 0a		sta $0a			sta		DTemp1+2
.010861	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010863	74 20		stz $20,x		stz 	EXSValueH+0,x
.010865					_BinaryMultiply_Loop:
.010865	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010867	05 0a		ora $0a			ora 	DTemp1+2
.010869	f0 1e		beq $010889		beq 	_BinaryMultiply_Exit
.01086b	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01086d	29 01 00	and #$0001		and 	#1
.010870	f0 0d		beq $01087f		beq 	_BinaryMultiply_NoAdd
.010872	18		clc			clc 										; add multiplicand to result.
.010873	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010875	75 02		adc $02,x		adc 	EXSValueL+2,x
.010877	95 00		sta $00,x		sta 	EXSValueL+0,x
.010879	b5 20		lda $20,x		lda 	EXSValueH+0,x
.01087b	75 22		adc $22,x		adc 	EXSValueH+2,x
.01087d	95 20		sta $20,x		sta 	EXSValueH+0,x
.01087f					_BinaryMultiply_NoAdd:
.01087f	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010881	66 08		ror $08			ror 	DTemp1
.010883	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010885	36 22		rol $22,x		rol 	EXSValueH+2,x
.010887	80 dc		bra $010865		bra 	_BinaryMultiply_Loop 				; go round again.
.010889					_BinaryMultiply_Exit:
.010889	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.01088a					Function_Len:
.01088a	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.01088d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010890	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010893	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010895	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010898	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01089b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01089d	74 20		stz $20,x			stz 	EXSValueH+0,x
.01089f	60		rts				rts
.0108a0					Function_Abs:
.0108a0	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.0108a3	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0108a6	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108a9	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0108ab	30 07		bmi $0108b4			bmi 	_FAbsNegative 				; negate it if negative
.0108ad	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0108af	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0108b1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108b3	60		rts				rts
.0108b4					_FAbsNegative:
.0108b4	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0108b5	a9 00 00	lda #$0000			lda 	#0
.0108b8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108ba	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108bc	a9 00 00	lda #$0000			lda 	#0
.0108bf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0108c1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108c3	60		rts				rts
.0108c4					Function_Sgn:
.0108c4	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns integer
.0108c7	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.0108ca	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108cd	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108cf	74 20		stz $20,x			stz 	EXSValueH+0,x
.0108d1	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108d3	30 07		bmi $0108dc			bmi 	_FSgnNegative 				; set to -1 if signed
.0108d5	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108d7	f0 02		beq $0108db			beq 	_FSgnExit
.0108d9	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108db					_FSgnExit:
.0108db	60		rts				rts
.0108dc					_FSgnNegative:
.0108dc	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108df	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108e1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108e3	60		rts				rts
.0108e4					Function_Random:
.0108e4	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.0108e7	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger
.0108ea	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108ec	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108ee	d0 0a		bne $0108fa			bne 	_Rnd_NotZero
.0108f0	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108f3	85 10		sta $10				sta 	DRandom
.0108f5	a9 ea 00	lda #$00ea			lda 	#$EA
.0108f8	85 12		sta $12				sta 	DRandom+2
.0108fa					_Rnd_NotZero:
.0108fa	20 05 09	jsr $010905			jsr 	_Rnd_Process 				; call randomiser twice
.0108fd	95 20		sta $20,x			sta 	EXSValueH+0,x
.0108ff	20 05 09	jsr $010905			jsr 	_Rnd_Process
.010902	95 00		sta $00,x			sta 	EXSValueL+0,x
.010904	60		rts				rts
.010905					_Rnd_Process:
.010905	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010907	26 12		rol $12				rol 	DRandom+2
.010909	90 0e		bcc $010919			bcc 	_Rnd_Exit
.01090b	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01090d	49 54 d4	eor #$d454			eor 	#$D454
.010910	85 10		sta $10				sta 	DRandom
.010912	a5 12		lda $12				lda 	DRandom+2
.010914	49 d5 55	eor #$55d5			eor 	#$55D5
.010917	85 12		sta $12				sta 	DRandom+2
.010919					_Rnd_Exit:
.010919	a5 10		lda $10				lda 	DRandom
.01091b	45 12		eor $12				eor 	DRandom+2
.01091d	60		rts				rts
.01091e					Function_Chr:
.01091e	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010921	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010924	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010927	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01092a	d0 12		bne $01093e			bne 	_FCHBad
.01092c	48		pha				pha  								; save char # on stack
.01092d	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010930	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010933	68		pla				pla 								; restore character number
.010934	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010937	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010939	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.01093b	74 20		stz $20,x			stz 	EXSValueH+0,x
.01093d	60		rts				rts
.01093e					_FCHBad:
.01093e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010941	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010949	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010956					Function_Asc:
.010956	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010959	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.01095c	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.01095f	a8		tay				tay 								; string address in Y
.010960	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010963	29 ff 00	and #$00ff			and 	#$00FF
.010966	f0 0b		beq $010973			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010968	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.01096b	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.01096e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010970	74 20		stz $20,x			stz 	EXSValueH+0,x
.010972	60		rts				rts
.010973					_FASBad:
.010973	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010976	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>01097e	65 20 66 6f 72 20 61 73 63 28 29 00
.01098a					Function_SPC:
.01098a	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.01098d	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010990	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010993	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010996	d0 17		bne $0109af			bne 	_FSPBad
.010998	48		pha				pha 								; save length
.010999	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate character space
.01099c	7a		ply				ply 								; get count in Y
.01099d	f0 09		beq $0109a8			beq 	_FSPExit 					; if zero, just empty string
.01099f					_FSPCopy:
.01099f	a9 20 00	lda #$0020			lda 	#" "						; space character
.0109a2	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.0109a5	88		dey				dey
.0109a6	d0 f7		bne $01099f			bne 	_FSPCopy	 				; do it Y times
.0109a8					_FSPExit:
.0109a8	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0109aa	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109ac	74 20		stz $20,x			stz 	EXSValueH+0,x
.0109ae	60		rts				rts
.0109af					_FSPBad:
.0109af	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0109b2	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109ba	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109c6					Function_LEFT:
.0109c6	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.0109c9	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109cc	48		pha				pha 								; save string on stack.
.0109cd	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.0109d0	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.0109d3	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109d6	d0 6d		bne $010a45			bne 	FNStringParameter
.0109d8	85 08		sta $08				sta 	DTemp1 						; save count.
.0109da	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.0109dd	7a		ply				ply 								; Y points to string.
.0109de	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109e1	29 ff 00	and #$00ff			and 	#$00FF
.0109e4	f0 52		beq $010a38			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109e6	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109e8	f0 55		beq $010a3f			beq 	FNStringY 					; return string in Y if current len = required len.
.0109ea	90 53		bcc $010a3f			bcc 	FNStringY 					; if current < required return whole thing.
.0109ec	c8		iny				iny 								; take from here - start of string
.0109ed	80 33		bra $010a22			bra 	FNDTemp1Characters
.0109ef					Function_RIGHT:
.0109ef	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.0109f2	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109f5	48		pha				pha 								; save string on stack.
.0109f6	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.0109f9	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.0109fc	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109ff	d0 44		bne $010a45			bne 	FNStringParameter
.010a01	85 08		sta $08				sta 	DTemp1 						; save count.
.010a03	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010a06	7a		ply				ply 								; Y points to string.
.010a07	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010a0a	29 ff 00	and #$00ff			and 	#$00FF
.010a0d	f0 29		beq $010a38			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010a0f	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010a11	f0 2c		beq $010a3f			beq 	FNStringY 					; return string in Y if current len = required len.
.010a13	90 2a		bcc $010a3f			bcc 	FNStringY 					; if current < required return whole thing.
.010a15	38		sec				sec 								; current-required is the number to skip
.010a16	e5 08		sbc $08				sbc 	DTemp1
.010a18	85 0a		sta $0a				sta 	DTemp1+2
.010a1a	98		tya				tya
.010a1b	18		clc				clc
.010a1c	65 0a		adc $0a				adc 	DTemp1+2
.010a1e	a8		tay				tay
.010a1f	c8		iny				iny 								; +1 for the count.
.010a20	80 00		bra $010a22			bra 	FNDTemp1Characters
.010a22					FNDTemp1Characters:
.010a22	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a24	f0 12		beq $010a38			beq 	FNStringEmpty 				; if zero, return empty string.
.010a26	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010a29	48		pha				pha 								; save the address
.010a2a					_FND1Loop:
.010a2a	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a2d	20 65 05	jsr $010565			jsr 	StringWriteCharacter
.010a30	c8		iny				iny
.010a31	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a33	d0 f5		bne $010a2a			bne 	_FND1Loop
.010a35	7a		ply				ply 								; string address in Y
.010a36	80 07		bra $010a3f			bra 	FNStringY
.010a38					FNStringEmpty:
.010a38	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a3b	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; put address of it in Y
.010a3e	a8		tay				tay
.010a3f					FNStringY:
.010a3f	98		tya				tya
.010a40	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a42	74 22		stz $22,x			stz 	EXSValueH+2,x
.010a44	60		rts				rts
.010a45					FNStringParameter:
.010a45	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010a48	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a50	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010a5d					Function_MID:
.010a5d	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010a60	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a63	48		pha				pha 								; save string on stack.
.010a64	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get offset (n)
.010a67	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010a6a	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a6d	d0 d6		bne $010a45			bne 	FNStringParameter
.010a6f	c9 00 00	cmp #$0000			cmp 	#0
.010a72	f0 d1		beq $010a45			beq 	FNStringParameter 			; or zero
.010a74	48		pha				pha 								; save start position on stack.
.010a75	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010a78	85 08		sta $08				sta 	DTemp1
.010a7a	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010a7c	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010a7f	d0 0e		bne $010a8f			bne 	_FMINoThird
.010a81	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010a83	e6 06		inc $06				inc 	DCodePtr
.010a85	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010a88	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a8b	d0 b8		bne $010a45			bne 	FNStringParameter
.010a8d	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010a8f					_FMINoThird:
.010a8f	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010a92	68		pla				pla 								; get offset position
.010a93	85 0c		sta $0c				sta 	DTemp2
.010a95	7a		ply				ply 								; get address of string in Y
.010a96	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010a99	29 ff 00	and #$00ff			and 	#$00FF
.010a9c	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010a9e	90 98		bcc $010a38			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010aa0	38		sec				sec 								; calculate number of characters left after
.010aa1	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010aa3	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010aa4	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010aa6	b0 02		bcs $010aaa			bcs 	_FMISufficient
.010aa8	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010aaa					_FMISufficient:
.010aaa	98		tya				tya 								; get address
.010aab	18		clc				clc
.010aac	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010aae	a8		tay				tay 								; put in Y
.010aaf	82 70 ff	brl $010a22			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010ab2					Function_Peek:
.010ab2	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ab5	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ab8	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010abb	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010abd	84 0a		sty $0a				sty 	DTemp1+2
.010abf	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ac2	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ac4	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010ac7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ac9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010acb	60		rts				rts
.010acc					Function_Deek:
.010acc	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010acf	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ad2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010ad5	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ad7	84 0a		sty $0a				sty 	DTemp1+2
.010ad9	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010adc	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ade	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ae0	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ae2	60		rts				rts
.010ae3					Function_Leek:
.010ae3	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ae6	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ae9	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010aec	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010aee	84 0a		sty $0a				sty 	DTemp1+2
.010af0	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010af3	b7 08		lda [$08],y			lda 	[DTemp1],y
.010af5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010af7	c8		iny				iny
.010af8	c8		iny				iny
.010af9	b7 08		lda [$08],y			lda 	[DTemp1],y
.010afb	95 20		sta $20,x			sta 	EXSValueH+0,x
.010afd	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010afe					Function_VAL:
.010afe	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010b01	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b04	48		pha				pha 								; put string address on stack.
.010b05	20 15 0b	jsr $010b15			jsr 	VALGetBase 					; process , base (shared with STR$())
.010b08	7a		ply				ply 								; get string address back
.010b09	da		phx				phx 								; save X on stack
.010b0a	aa		tax				tax 								; base in X
.010b0b	98		tya				tya 								; address in A
.010b0c	20 4f 0b	jsr $010b4f			jsr 	StringToInteger
.010b0f	fa		plx				plx 								; restore X
.010b10	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b12	94 20		sty $20,x			sty 	EXSValueH+0,x
.010b14	60		rts				rts
.010b15					VALGetBase:
.010b15	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010b17	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010b1a	f0 07		beq $010b23			beq 	_VGBAlternate
.010b1c	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010b1f	a9 0a 00	lda #$000a			lda 	#10
.010b22	60		rts				rts
.010b23					_VGBAlternate:
.010b23	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; skip comma.
.010b26	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010b29	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010b2c	d0 0e		bne $010b3c			bne 	_VGBBadBase
.010b2e	c9 02 00	cmp #$0002			cmp 	#2
.010b31	90 09		bcc $010b3c			bcc 	_VGBBadBase
.010b33	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010b36	b0 04		bcs $010b3c			bcs 	_VGBBadBase
.010b38	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010b3b	60		rts				rts
.010b3c					_VGBBadBase:
.010b3c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010b3f	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010b47	65 72 20 42 61 73 65 00
.010b4f					StringToInteger:
.010b4f	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010b51	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010b53	29 ff 00	and #$00ff			and 	#$00FF
.010b56	85 26		sta $26				sta 	DTemp3+2
.010b58	f0 6e		beq $010bc8			beq 	_STIError 					; if length zero it's bad.
.010b5a	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010b5c	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010b5e	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010b60	64 0a		stz $0a				stz 	DTemp1+2
.010b62	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010b64	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010b67	48		pha				pha 								; push on stack
.010b68	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010b6b	d0 06		bne $010b73			bne 	_STILoop
.010b6d	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b6f	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b71	f0 55		beq $010bc8			beq 	_STIError 					; if only - then error.
.010b73					_STILoop:
.010b73	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b75	20 e7 0b	jsr $010be7			jsr 	MultiplyTemp1ByA
.010b78	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b7a	29 ff 00	and #$00ff			and 	#$00FF
.010b7d	20 d8 0b	jsr $010bd8			jsr 	ConvertUpperCase	 		; make U/C
.010b80	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b83	90 43		bcc $010bc8			bcc 	_STIError
.010b85	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b88	90 0e		bcc $010b98			bcc 	_STIOkay1
.010b8a	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b8d	90 39		bcc $010bc8			bcc 	_STIError
.010b8f	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b92	b0 34		bcs $010bc8			bcs 	_STIError
.010b94	18		clc				clc 								; shift to correct range.
.010b95	69 09 00	adc #$0009			adc 	#9
.010b98					_STIOkay1:
.010b98	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b9b	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b9d	b0 29		bcs $010bc8			bcs 	_STIError
.010b9f	18		clc				clc 								; add A to DTemp1
.010ba0	65 08		adc $08				adc 	DTemp1
.010ba2	85 08		sta $08				sta 	DTemp1
.010ba4	90 02		bcc $010ba8			bcc 	_STINoCarry
.010ba6	e6 0a		inc $0a				inc 	DTemp1+2
.010ba8					_STINoCarry:
.010ba8	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010baa	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010bac	d0 c5		bne $010b73			bne 	_STILoop 					; loop back.
.010bae	68		pla				pla 								; get optional minus bac
.010baf	c9 2d 00	cmp #$002d			cmp 	#"-"
.010bb2	d0 0f		bne $010bc3			bne 	_STINotNegative 			; handle the negative character
.010bb4	38		sec				sec 								; negate DTemp1
.010bb5	a9 00 00	lda #$0000			lda 	#0
.010bb8	e5 08		sbc $08				sbc 	DTemp1
.010bba	85 08		sta $08				sta 	DTemp1
.010bbc	a9 00 00	lda #$0000			lda 	#0
.010bbf	e5 0a		sbc $0a				sbc 	DTemp1+2
.010bc1	85 0a		sta $0a				sta 	DTemp1+2
.010bc3					_STINotNegative:
.010bc3	a5 08		lda $08				lda 	DTemp1 						; get the result
.010bc5	a4 0a		ldy $0a				ldy 	DTemp1+2
.010bc7	60		rts				rts
.010bc8					_STIError:
.010bc8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010bcb	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010bd3	74 61 6e 74 00
.010bd8					ConvertUpperCase:
.010bd8	c9 61 00	cmp #$0061			cmp 	#'a'
.010bdb	90 09		bcc $010be6			bcc 	_CUCExit
.010bdd	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010be0	b0 04		bcs $010be6			bcs 	_CUCExit
.010be2	38		sec				sec
.010be3	e9 20 00	sbc #$0020			sbc 	#32
.010be6					_CUCExit:
.010be6	60		rts				rts
.010be7					MultiplyTemp1ByA:
.010be7					_MTGeneral:
.010be7	da		phx				phx
.010be8	aa		tax				tax 								; multiplier in X
.010be9	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010beb	85 0c		sta $0c				sta 	DTemp2
.010bed	a5 0a		lda $0a				lda 	DTemp1+2
.010bef	85 0e		sta $0e				sta 	DTemp2+2
.010bf1	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010bf3	64 0a		stz $0a				stz 	DTemp1+2
.010bf5	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010bf8					_MTLoop:
.010bf8	8a		txa				txa 								; shift X right into C
.010bf9	4a		lsr a				lsr 	a
.010bfa	aa		tax				tax
.010bfb	90 10		bcc $010c0d			bcc 	_MTNoAdd
.010bfd	18		clc				clc
.010bfe	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010c00	65 0c		adc $0c				adc 	DTemp2
.010c02	85 08		sta $08				sta 	DTemp1
.010c04	a5 0a		lda $0a				lda 	DTemp1+2
.010c06	65 0e		adc $0e				adc 	DTemp2+2
.010c08	85 0a		sta $0a				sta 	DTemp1+2
.010c0a	90 01		bcc $010c0d			bcc 	_MTNoAdd
.010c0c	c8		iny				iny
.010c0d					_MTNoAdd:
.010c0d	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010c0f	26 0e		rol $0e				rol 	DTemp2+2
.010c11	90 01		bcc $010c14			bcc 	_MTNoOverflow
.010c13	c8		iny				iny
.010c14					_MTNoOverflow:
.010c14	8a		txa				txa 								; until multiplier is zero.
.010c15	d0 e1		bne $010bf8			bne 	_MTLoop
.010c17	98		tya				tya
.010c18	18		clc				clc
.010c19	69 ff ff	adc #$ffff			adc 	#$FFFF
.010c1c	fa		plx				plx 								; restore X
.010c1d	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010c1e					Function_Str:
.010c1e	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010c21	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c24	48		pha				pha 								; save YA on the stack
.010c25	5a		phy				phy
.010c26	20 15 0b	jsr $010b15			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c29	85 14		sta $14				sta 	DSignCount
.010c2b	7a		ply				ply 								; YA is the number
.010c2c	68		pla				pla
.010c2d	da		phx				phx
.010c2e	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010c30	20 39 0c	jsr $010c39			jsr 	ConvertToString 			; convert it to a string.
.010c33	fa		plx				plx 								; restore X
.010c34	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010c36	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c38	60		rts				rts
.010c39					ConvertToString:
.010c39	48		pha				pha
.010c3a	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010c3d	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate space for return string.
.010c40	68		pla				pla
.010c41					ConvertToStringAlreadyAllocated:
.010c41	da		phx				phx 								; save X (base)
.010c42	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010c44	84 26		sty $26				sty 	DTemp3+2
.010c46	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010c48	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010c4a	10 15		bpl $010c61			bpl 	_CTSNotNegative
.010c4c	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010c4f	20 cb 0c	jsr $010ccb			jsr 	CTSOutputA
.010c52	38		sec				sec 								; negate DTemp3 which is the number
.010c53	a9 00 00	lda #$0000			lda 	#0
.010c56	e5 24		sbc $24				sbc 	DTemp3
.010c58	85 24		sta $24				sta 	DTemp3
.010c5a	a9 00 00	lda #$0000			lda 	#0
.010c5d	e5 26		sbc $26				sbc 	DTemp3+2
.010c5f	85 26		sta $26				sta 	DTemp3+2
.010c61					_CTSNotNegative:
.010c61	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010c64	48		pha				pha
.010c65	a9 00 00	lda #$0000			lda 	#0
.010c68	48		pha				pha
.010c69	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010c6b	85 08		sta $08				sta 	DTemp1
.010c6d	64 0a		stz $0a				stz 	DTemp1+2
.010c6f					_CTSMultiplySubtractor:
.010c6f	38		sec				sec 								; check number vs subtractor
.010c70	a5 24		lda $24				lda 	DTemp3
.010c72	e5 08		sbc $08				sbc 	DTemp1
.010c74	a5 26		lda $26				lda 	DTemp3+2
.010c76	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c78	90 0f		bcc $010c89			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c7a	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c7c	48		pha				pha
.010c7d	a5 0a		lda $0a				lda 	DTemp1+2
.010c7f	48		pha				pha
.010c80	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c82	20 e7 0b	jsr $010be7			jsr 	MultiplyTemp1ByA
.010c85	b0 02		bcs $010c89			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c87	80 e6		bra $010c6f			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c89					_CTSScaledUp:
.010c89	7a		ply				ply 								; YA contains the previous divider.
.010c8a	68		pla				pla
.010c8b	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c8e	d0 05		bne $010c95			bne 	_CTSHasDigit
.010c90	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c93	f0 20		beq $010cb5			beq 	_CTSExit
.010c95					_CTSHasDigit:
.010c95	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c97	84 0e		sty $0e				sty 	DTemp2+2
.010c99	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c9c					_CTSSubLoop:
.010c9c	38		sec				sec 								; subtract subtractor from number
.010c9d	a5 24		lda $24				lda 	DTemp3
.010c9f	e5 0c		sbc $0c				sbc 	DTemp2
.010ca1	a8		tay				tay 								; intermediate in Y
.010ca2	a5 26		lda $26				lda 	DTemp3+2
.010ca4	e5 0e		sbc $0e				sbc 	DTemp2+2
.010ca6	90 07		bcc $010caf			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010ca8	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010caa	84 24		sty $24				sty 	DTemp3
.010cac	e8		inx				inx 								; one more subtraction
.010cad	80 ed		bra $010c9c			bra 	_CTSSubLoop 				; try it again.
.010caf					_CTSFinishedSubtracting:
.010caf	8a		txa				txa 								; convert to ASCII.
.010cb0	20 be 0c	jsr $010cbe			jsr 	CTSOutputHexDigit 			; write that out.
.010cb3	80 d4		bra $010c89			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010cb5					_CTSExit:
.010cb5	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010cb7	20 be 0c	jsr $010cbe			jsr 	CTSOutputHexDigit
.010cba	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010cbc	fa		plx				plx 								; restore X.
.010cbd	60		rts				rts
.010cbe					CTSOutputHexDigit:
.010cbe	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010cc1	90 04		bcc $010cc7			bcc 	_CTSNotLetter
.010cc3	18		clc				clc
.010cc4	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010cc7					_CTSNotLetter:
.010cc7	18		clc				clc
.010cc8	69 30 00	adc #$0030			adc 	#48
.010ccb					CTSOutputA:
.010ccb	5a		phy				phy 								; save Y, set Y to current pointer
.010ccc	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010cce	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010cd1	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010cd3	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010cd5	1a		inc a				inc 	a
.010cd6	92 18		sta ($18)			sta 	(DStartTempString)
.010cd8	c2 20		rep #$20			rep 	#$20
.010cda	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010cdc	7a		ply				ply 								; restore Y and exit.
.010cdd	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010cde					Function_INSTR:
.010cde	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns a integer
.010ce1	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010ce4	48		pha				pha 								; save string to search
.010ce5	20 d2 04	jsr $0104d2			jsr 	ExpectComma
.010ce8	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010ceb	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010cee	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010cf0	68		pla				pla
.010cf1	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010cf3	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010cf5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010cf7	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010cf9	38		sec				sec
.010cfa	b2 0c		lda ($0c)			lda 	(DTemp2)
.010cfc	f2 08		sbc ($08)			sbc		(DTemp1)
.010cfe	c2 20		rep #$20			rep 	#$20
.010d00	90 2c		bcc $010d2e			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010d02	29 ff 00	and #$00ff			and 	#$00FF
.010d05	1a		inc a				inc 	a
.010d06	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010d08	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010d0a	29 ff 00	and #$00ff			and 	#$00FF
.010d0d	f0 22		beq $010d31			beq 	_FINSError
.010d0f					_FINSLoop:
.010d0f	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010d11	1a		inc a				inc 	a
.010d12	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d14	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010d16	29 ff 00	and #$00ff			and 	#$00FF
.010d19	a8		tay				tay									; start comparing at index 1.
.010d1a					_FINSCompare:
.010d1a	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010d1c	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010d1e	29 ff 00	and #$00ff			and 	#$00FF
.010d21	d0 05		bne $010d28			bne 	_FINSNext
.010d23	88		dey				dey
.010d24	d0 f4		bne $010d1a			bne 	_FINSCompare
.010d26	80 08		bra $010d30			bra 	_FINSExit
.010d28					_FINSNext:
.010d28	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010d2a	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010d2c	d0 e1		bne $010d0f			bne 	_FINSLoop
.010d2e					_FINSFail:
.010d2e	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010d30					_FINSExit:
.010d30	60		rts				rts
.010d31					_FINSError:
.010d31	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d34	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>010d3c	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010d45					Function_UPPER:
.010d45	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010d48	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010d4b	48		pha				pha
.010d4c	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010d4f	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010d52	68		pla				pla
.010d53	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010d56	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d58	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d5a	a8		tay				tay 								; address in Y
.010d5b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d5d	da		phx				phx 								; save X
.010d5e	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d60	29 ff 00	and #$00ff			and 	#$00FF
.010d63	f0 20		beq $010d85			beq 	_FUPExit
.010d65	aa		tax				tax 								; put in X
.010d66					_FUPLoop:
.010d66	c8		iny				iny 								; increment and load character
.010d67	b9 00 00	lda $0000,y			lda 	$0000,y
.010d6a	29 ff 00	and #$00ff			and 	#$00FF
.010d6d	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010d70	90 10		bcc $010d82			bcc 	_FUPNoChange
.010d72	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010d75	b0 0b		bcs $010d82			bcs 	_FUPNoChange
.010d77	38		sec				sec 								; shift case
.010d78	e9 20 00	sbc #$0020			sbc 	#32
.010d7b	e2 20		sep #$20			sep 	#$20 						; write back
.010d7d	99 00 00	sta $0000,y			sta 	$0000,y
.010d80	c2 20		rep #$20			rep 	#$20
.010d82					_FUPNoChange:
.010d82	ca		dex				dex 								; do X times
.010d83	d0 e1		bne $010d66			bne 	_FUPLoop
.010d85					_FUPExit:
.010d85	fa		plx				plx 								; restore X
.010d86	60		rts				rts
.010d87					Function_LOWER:
.010d87	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010d8a	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010d8d	48		pha				pha
.010d8e	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010d91	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010d94	68		pla				pla
.010d95	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010d98	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d9a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d9c	a8		tay				tay 								; address in Y
.010d9d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d9f	da		phx				phx 								; save X
.010da0	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010da2	29 ff 00	and #$00ff			and 	#$00FF
.010da5	f0 20		beq $010dc7			beq 	_FLOExit
.010da7	aa		tax				tax 								; put in X
.010da8					_FLOLoop:
.010da8	c8		iny				iny 								; increment and load character
.010da9	b9 00 00	lda $0000,y			lda 	$0000,y
.010dac	29 ff 00	and #$00ff			and 	#$00FF
.010daf	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010db2	90 10		bcc $010dc4			bcc 	_FLONoChange
.010db4	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010db7	b0 0b		bcs $010dc4			bcs 	_FLONoChange
.010db9	18		clc				clc 								; shift case
.010dba	69 20 00	adc #$0020			adc 	#32
.010dbd	e2 20		sep #$20			sep 	#$20 						; write back
.010dbf	99 00 00	sta $0000,y			sta 	$0000,y
.010dc2	c2 20		rep #$20			rep 	#$20
.010dc4					_FLONoChange:
.010dc4	ca		dex				dex 								; do X times
.010dc5	d0 e1		bne $010da8			bne 	_FLOLoop
.010dc7					_FLOExit:
.010dc7	fa		plx				plx 								; restore X
.010dc8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010dc9					Function_Let:
.010dc9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010dcb	48		pha				pha  								; save on stack for later.
.010dcc	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.010dcf	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010dd1	b0 1c		bcs $010def			bcs 	_FLetFound 					; skip if found.
.010dd3	68		pla				pla 								; get and push the first token again.
.010dd4	48		pha				pha
.010dd5	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010dd8	d0 57		bne $010e31			bne 	_FLError					; arrays, so this causes an error.
.010dda	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010ddc	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010ddf	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.010de2	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010de4					_FLSkipToken:
.010de4	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010de6	e6 06		inc $06				inc 	DCodePtr
.010de8	e6 06		inc $06				inc 	DCodePtr
.010dea	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010ded	d0 f5		bne $010de4			bne 	_FLSkipToken
.010def					_FLetFound:
.010def	68		pla				pla 								; get and save the first token.
.010df0	48		pha				pha
.010df1	a8		tay				tay 								; put it in Y
.010df2	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010df5	f0 07		beq $010dfe			beq 	_FLetNotArray
.010df7	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010df9	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010dfc	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010dfe					_FLetNotArray:
.010dfe	7a		ply				ply 								; get the first token into Y
.010dff	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010e01	48		pha				pha
.010e02	5a		phy				phy 								; save the first token on the stack.
.010e03	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010e06	20 af 04	jsr $0104af			jsr 	ExpectToken
.010e09	68		pla				pla 								; restore the first token.
.010e0a	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010e0d	d0 0f		bne $010e1e			bne 	_FLetString 				; skip if string.
.010e0f	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.010e12	7a		ply				ply 								; get address in Y
.010e13	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010e15	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010e18	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.010e1a	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010e1d	60		rts				rts
.010e1e					_FLetString:
.010e1e	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.010e21	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010e23	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010e26	7a		ply				ply 								; get address
.010e27	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010e2a	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010e2d	99 02 00	sta $0002,y			sta 	$0002,y
.010e30	60		rts				rts
.010e31					_FLError:
.010e31	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e34	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010e3c	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.010e44					Command_List:
.010e44	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.010e47	20 39 05	jsr $010539		jsr 	StringTempAllocate
.010e4a	85 30		sta $30			sta 	DListBuffer						; save buffer.
.010e4c	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.010e4e	64 2e		stz $2e			stz 	DIndent2
.010e50	64 32		stz $32			stz 	DTemp4+0 						; low number
.010e52	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.010e55	85 34		sta $34			sta 	DTemp4+2 						; high number.
.010e57	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.010e59	f0 28		beq $010e83		beq 	_CLIList
.010e5b	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.010e5e	f0 23		beq $010e83		beq 	_CLIList
.010e60	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.010e63	c0 00 00	cpy #$0000		cpy 	#0
.010e66	d0 18		bne $010e80		bne 	_CLIError
.010e68	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.010e6a	85 34		sta $34			sta 	DTemp4+2
.010e6c	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.010e6e	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.010e71	d0 10		bne $010e83		bne 	_CLIList
.010e73	20 d2 04	jsr $0104d2		jsr 	ExpectComma 					; skip comma
.010e76	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.010e79	85 34		sta $34			sta 	DTemp4+2
.010e7b	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.010e7e	f0 03		beq $010e83		beq 	_CLIList
.010e80					_CLIError:
.010e80	82 1c f6	brl $01049f		brl 	SyntaxError
.010e83					_CLIList:
.010e83	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.010e86	18		clc			clc
.010e87	65 02		adc $02			adc 	DBaseAddress
.010e89	a8		tay			tay 									; put in Y
.010e8a					_CLINextLine:
.010e8a	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.010e8d	f0 29		beq $010eb8		beq 	_CLIExit
.010e8f	20 20 10	jsr $011020		jsr 	ScanIndent  					; scan for formatting.
.010e92	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.010e95	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.010e97	90 14		bcc $010ead		bcc 	_CLIFollowLink
.010e99	c5 34		cmp $34			cmp 	DTemp4+2
.010e9b	f0 02		beq $010e9f		beq 	_CLIShowLine
.010e9d	b0 0e		bcs $010ead		bcs 	_CLIFollowLink
.010e9f					_CLIShowLine:
.010e9f	a5 30		lda $30			lda 	DListBuffer
.010ea1	20 bb 0e	jsr $010ebb		jsr 	Detokenise 						; detokenise it
.010ea4	5a		phy			phy
.010ea5	a8		tay			tay 									; print buffer out
.010ea6	20 1f 05	jsr $01051f		jsr 	PrintBasicString
.010ea9	20 76 f0	jsr $01f076		jsr 	HWNewLine
.010eac	7a		ply			ply 									; get address
.010ead					_CLIFollowLink:
.010ead	98		tya			tya 									; follow link
.010eae	18		clc			clc
.010eaf	79 00 00	adc $0000,y		adc 	$0000,y
.010eb2	a8		tay			tay
.010eb3	20 90 f0	jsr $01f090		jsr 	HWCheckBreak 					; break key pressed.
.010eb6	f0 d2		beq $010e8a		beq 	_CLINextLine
.010eb8					_CLIExit:
.010eb8	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.010eba	60		rts			rts
.010ebb					Detokenise:
.010ebb	48		pha			pha
.010ebc	da		phx			phx
.010ebd	5a		phy			phy
.010ebe	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.010ec0	1a		inc a			inc 	a
.010ec1	85 1a		sta $1a			sta 	DCurrentTempString
.010ec3	64 1c		stz $1c			stz		DConstantShift
.010ec5	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.010ec8	92 18		sta ($18)		sta 	(DStartTempString)
.010eca	5a		phy			phy 									; save Y
.010ecb	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.010ece	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.010ed1	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.010ed4	20 41 0c	jsr $010c41		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010ed7	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.010ed9	c5 2e		cmp $2e			cmp 	DIndent2
.010edb	90 02		bcc $010edf		bcc 	_DTKSmaller
.010edd	a5 2e		lda $2e			lda 	DIndent2
.010edf					_DTKSmaller:
.010edf	0a		asl a			asl 	a
.010ee0	69 06 00	adc #$0006		adc 	#6
.010ee3	85 08		sta $08			sta 	DTemp1
.010ee5					_DTKPadLineNo:
.010ee5	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.010ee8	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010eeb	b2 18		lda ($18)		lda 	(DStartTempString)
.010eed	29 ff 00	and #$00ff		and 	#$00FF
.010ef0	c5 08		cmp $08			cmp 	DTemp1
.010ef2	d0 f1		bne $010ee5		bne 	_DTKPadLineNo
.010ef4	68		pla			pla 									; get pointer
.010ef5	18		clc			clc 									; point to start of line
.010ef6	69 04 00	adc #$0004		adc 	#4
.010ef9	a8		tay			tay 									; put back in Y.
.010efa					_DTKMainLoop:
.010efa	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.010efd	d0 04		bne $010f03		bne 	_DTKNotZero 					; if zero, return.
.010eff	7a		ply			ply
.010f00	fa		plx			plx
.010f01	68		pla			pla
.010f02	60		rts			rts
.010f03					_DTKNotZero:
.010f03	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.010f06	b0 1c		bcs $010f24		bcs 	_DTKNotString
.010f08	5a		phy			phy										; save token address on stack.
.010f09	c8		iny			iny 									; skip first token
.010f0a	c8		iny			iny
.010f0b	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.010f0e	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f11	98		tya			tya 									; copy the string out.
.010f12	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010f15	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.010f18	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f1b	68		pla			pla 									; get token, which is its own offset
.010f1c	a8		tay			tay
.010f1d	18		clc			clc
.010f1e	79 00 00	adc $0000,y		adc 	$0000,y
.010f21	a8		tay			tay
.010f22	80 d6		bra $010efa		bra 	_DTKMainLoop
.010f24					_DTKNotString:
.010f24	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.010f27	b0 09		bcs $010f32		bcs 	_DTKNotShift
.010f29	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.010f2c	85 1c		sta $1c			sta 	DConstantShift
.010f2e	c8		iny			iny 									; skip token.
.010f2f	c8		iny			iny
.010f30	80 c8		bra $010efa		bra 	_DTKMainLoop
.010f32					_DTKNotShift:
.010f32	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.010f35	b0 07		bcs $010f3e		bcs 	_DTKNotKeyword
.010f37	c8		iny			iny 									; skip over token
.010f38	c8		iny			iny
.010f39	20 b8 0f	jsr $010fb8		jsr 	_DTKDecodeKeyword 				; decode it.
.010f3c	80 bc		bra $010efa		bra 	_DTKMainLoop
.010f3e					_DTKNotKeyword:
.010f3e	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.010f41	b0 18		bcs $010f5b		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.010f43	5a		phy			phy 									; save pointer
.010f44	38		sec			sec  									; shift it in the range 0-32767
.010f45	e9 00 40	sbc #$4000		sbc 	#$4000
.010f48	0a		asl a			asl 	a 								; shift it left, losing bit 15
.010f49	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.010f4b	6a		ror a			ror 	a 								; rotate that into the constant value
.010f4c	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.010f4e	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.010f51	20 41 0c	jsr $010c41		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010f54	64 1c		stz $1c			stz 	DConstantShift
.010f56	7a		ply			ply 									; restore pointer
.010f57	c8		iny			iny 									; skip token.
.010f58	c8		iny			iny
.010f59	80 9f		bra $010efa		bra 	_DTKMainLoop
.010f5b					_DTKIdentifier:
.010f5b	48		pha			pha 									; save token for typing at end
.010f5c					_DTKILoop:
.010f5c	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.010f5f	20 88 0f	jsr $010f88		jsr 	_DTKIDecodeToken 				; decode it.
.010f62	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.010f65	c8		iny			iny 									; skip it
.010f66	c8		iny			iny
.010f67	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.010f6a	d0 f0		bne $010f5c		bne 	_DTKILoop
.010f6c	68		pla			pla 									; add $( as required.
.010f6d	48		pha			pha 									; comes from the first token.
.010f6e	29 00 20	and #$2000		and 	#IDTypeMask
.010f71	f0 06		beq $010f79		beq 	_DTKINotString
.010f73	a9 24 00	lda #$0024		lda 	#"$"
.010f76	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f79					_DTKINotString:
.010f79	68		pla			pla
.010f7a	29 00 10	and #$1000		and 	#IDArrayMask
.010f7d	f0 06		beq $010f85		beq 	_DTKINotArray
.010f7f	a9 28 00	lda #$0028		lda 	#"("
.010f82	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010f85					_DTKINotArray:
.010f85	82 72 ff	brl $010efa		brl 	_DTKMainLoop
.010f88					_DTKIDecodeToken:
.010f88	5a		phy			phy
.010f89	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.010f8c	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.010f8f					_DTKIDivide:
.010f8f	38		sec			sec
.010f90	e9 2d 00	sbc #$002d		sbc 	#45
.010f93	c8		iny			iny
.010f94	b0 f9		bcs $010f8f		bcs 	_DTKIDivide
.010f96	69 2d 00	adc #$002d		adc 	#45
.010f99	20 a2 0f	jsr $010fa2		jsr 	_DTKIOutA 						; output low.
.010f9c	98		tya			tya
.010f9d	20 a2 0f	jsr $010fa2		jsr 	_DTKIOutA 						; output high
.010fa0	7a		ply			ply
.010fa1	60		rts			rts
.010fa2					_DTKIOutA:
.010fa2	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.010fa5	f0 10		beq $010fb7		beq 	_DTKIOutExit
.010fa7	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.010faa	90 04		bcc $010fb0		bcc 	_DTKIOutAlpha
.010fac	38		sec			sec  									; adjust for 0-9
.010fad	e9 4b 00	sbc #$004b		sbc 	#$4B
.010fb0					_DTKIOutAlpha:
.010fb0	18		clc			clc										; adjust for A-Z
.010fb1	69 60 00	adc #$0060		adc 	#96
.010fb4	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010fb7					_DTKIOutExit:
.010fb7	60		rts			rts
.010fb8					_DTKDecodeKeyword:
.010fb8	48		pha			pha
.010fb9	da		phx			phx
.010fba	5a		phy			phy
.010fbb	a8		tay			tay 									; save token ID in Y
.010fbc	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.010fbf	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.010fc2	48		pha			pha 									; save this flag on a stack
.010fc3	5a		phy			phy 									; save the token ID
.010fc4	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.010fc7	d0 19		bne $010fe2		bne 	_DTKNotSpecial1
.010fc9	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.010fcb	88		dey			dey
.010fcc	b9 00 00	lda $0000,y		lda 	$0000,y
.010fcf	29 ff 00	and #$00ff		and 	#$00FF
.010fd2	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.010fd5	f0 0b		beq $010fe2		beq 	_DTKNotSpecial1
.010fd7	c9 3a 00	cmp #$003a		cmp 	#":"
.010fda	f0 06		beq $010fe2		beq 	_DTKNotSpecial1
.010fdc	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.010fdf	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.010fe2					_DTKNotSpecial1:
.010fe2	68		pla			pla
.010fe3	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.010fe6	a8		tay			tay 									; into Y.
.010fe7	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.010fea					_DTKDWorkThrough:
.010fea	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.010feb	f0 0f		beq $010ffc		beq 	_DTKDFound
.010fed	86 08		stx $08			stx 	DTemp1
.010fef	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.010ff3	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.010ff6	18		clc			clc
.010ff7	65 08		adc $08			adc 	DTemp1
.010ff9	aa		tax			tax
.010ffa	80 ee		bra $010fea		bra 	_DTKDWorkThrough
.010ffc					_DTKDFound:
.010ffc	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.011000	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.011003	3a		dec a			dec 	a
.011004	a8		tay			tay 									; put in Y
.011005					_DTKOut:
.011005	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.011009	29 ff 00	and #$00ff		and 	#$00FF
.01100c	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01100f	e8		inx			inx
.011010	88		dey			dey
.011011	d0 f2		bne $011005		bne 	_DTKOut
.011013	68		pla			pla 									; trailing space.
.011014	d0 06		bne $01101c		bne 	_DTKNotSpecial2
.011016	a9 20 00	lda #$0020		lda 	#" "
.011019	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01101c					_DTKNotSpecial2:
.01101c	7a		ply			ply
.01101d	fa		plx			plx
.01101e	68		pla			pla
.01101f	60		rts			rts
.011020					ScanIndent:
.011020	48		pha			pha
.011021	5a		phy			phy
.011022	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011024	85 2e		sta $2e			sta 	DIndent2
.011026	98		tya			tya
.011027	18		clc			clc 									; point to code.
.011028	69 04 00	adc #$0004		adc 	#4
.01102b	a8		tay			tay
.01102c					_SILoop:
.01102c	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01102f	f0 35		beq $011066		beq 	_SIExit
.011031	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011034	b0 08		bcs $01103e		bcs 	_SICheckKeyword
.011036	98		tya			tya 									; skip string.
.011037	18		clc			clc
.011038	79 00 00	adc $0000,y		adc 	$0000,y
.01103b	a8		tay			tay
.01103c	80 ee		bra $01102c		bra 	_SILoop
.01103e					_SICheckKeyword:
.01103e	29 00 e0	and #$e000		and 	#$E000
.011041	c9 00 20	cmp #$2000		cmp 	#$2000
.011044	f0 04		beq $01104a		beq 	_SIFoundKeyword
.011046					_SIAdvance:
.011046	c8		iny			iny 									; if not, loop round.
.011047	c8		iny			iny
.011048	80 e2		bra $01102c		bra 	_SILoop
.01104a					_SIFoundKeyword:
.01104a	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01104d	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011050	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011053	f0 0d		beq $011062		beq 	_SIKeyPlus
.011055	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011058	d0 ec		bne $011046		bne 	_SIAdvance
.01105a	c6 2c		dec $2c			dec 	DIndent
.01105c	10 e8		bpl $011046		bpl 	_SIAdvance
.01105e	64 2c		stz $2c			stz 	DIndent
.011060	80 e4		bra $011046		bra 	_SIAdvance
.011062					_SIKeyPlus:
.011062	e6 2c		inc $2c			inc 	DIndent
.011064	80 e0		bra $011046		bra 	_SIAdvance
.011066					_SIExit:
.011066	7a		ply			ply
.011067	68		pla			pla
.011068	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.011069					Function_PRINT:
.011069	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01106b	f0 33		beq $0110a0			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01106d	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011070	f0 2e		beq $0110a0			beq 	_FPRExitCR
.011072	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011075	f0 23		beq $01109a			beq 	_FPRSkipLoop
.011077	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.01107a	f0 1b		beq $011097			beq 	_FPRNewLine
.01107c	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.01107f	f0 11		beq $011092			beq 	_FPRTab
.011081					_FPRExpression:
.011081	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011084	b0 06		bcs $01108c			bcs 	_FPRHaveString
.011086	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011089	20 39 0c	jsr $010c39			jsr 	ConvertToString
.01108c					_FPRHaveString:
.01108c	a8		tay				tay 								; print the basic String.
.01108d	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.011090	80 d7		bra $011069			bra 	Function_Print 				; and go round again.
.011092					_FPRTab:
.011092	20 89 f0	jsr $01f089			jsr 	HWTab
.011095	80 03		bra $01109a			bra 	_FPRSkipLoop
.011097					_FPRNewLine:
.011097	20 76 f0	jsr $01f076			jsr 	HWNewLine
.01109a					_FPRSkipLoop:
.01109a	e6 06		inc $06				inc 	DCodePtr
.01109c	e6 06		inc $06				inc 	DCodePtr
.01109e	80 c9		bra $011069			bra 	Function_Print
.0110a0					_FPRExitCR:
.0110a0	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0110a2	88		dey				dey
.0110a3	88		dey				dey
.0110a4	b9 00 00	lda $0000,y			lda 	$0000,y
.0110a7	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0110aa	f0 08		beq $0110b4			beq 	_FPRExit
.0110ac	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.0110af	f0 03		beq $0110b4			beq 	_FPRExit
.0110b1	20 76 f0	jsr $01f076			jsr 	HWNewLine 					; print a new line.
.0110b4					_FPRExit:
.0110b4	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.0110b5					Function_IF:
.0110b5	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.0110b8	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0110ba	05 08		ora $08				ora 	DTemp1
.0110bc	a8		tay				tay 								; success flag in Y.
.0110bd	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0110bf	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.0110c2	d0 32		bne $0110f6			bne 	_FIFExtended 				; if so, go to the extended IF.
.0110c4	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0110c6	e6 06		inc $06				inc 	DCodePtr
.0110c8	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0110cb	f0 0f		beq $0110dc			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0110cd	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0110cf	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0110d2	90 21		bcc $0110f5			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0110d4	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110d7	b0 1c		bcs $0110f5			bcs 	_FIFContinue
.0110d9	4c 6b 13	jmp $01136b			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0110dc					_FIFEndOfLine:
.0110dc	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0110de	f0 15		beq $0110f5			beq 	_FIFContinue 				; if done so, continue.
.0110e0	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0110e3	90 06		bcc $0110eb			bcc 	_FIFStringConstant
.0110e5	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0110e7	e6 06		inc $06				inc 	DCodePtr
.0110e9	80 f1		bra $0110dc			bra 	_FIFEndOfLine
.0110eb					_FIFStringConstant:
.0110eb	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0110ee	18		clc				clc
.0110ef	65 06		adc $06				adc 	DCodePtr
.0110f1	85 06		sta $06				sta 	DCodePtr
.0110f3	80 e7		bra $0110dc			bra 	_FIFEndOfLine
.0110f5					_FIFContinue:
.0110f5	60		rts				rts
.0110f6					_FIFExtended:
.0110f6	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0110f8	e6 2a		inc $2a				inc 	DStack
.0110fa	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.0110fd	a6 2a		ldx $2a				ldx 	DStack
.0110ff	95 00		sta $00,x			sta 	$00,x
.011101	98		tya				tya 								; see if the test was passed.
.011102	f0 01		beq $011105			beq 	_FIXSkip 					; if zero then it has failed.
.011104	60		rts				rts 								; test passed, so continue executing
.011105					_FIXSkip:
.011105	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011108	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.01110b	20 6b 11	jsr $01116b			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01110e	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011110	e6 06		inc $06				inc 	DCodePtr
.011112	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011115	d0 04		bne $01111b			bne 	_FIXNoThrow
.011117	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011119	c6 2a		dec $2a				dec 	DStack
.01111b					_FIXNoThrow:
.01111b	60		rts				rts
.01111c					Handler_ELSE:
.01111c	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01111e	b5 00		lda $00,x			lda 	$00,x
.011120	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011123	d0 12		bne $011137			bne 	_HEBadStructure
.011125	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.011128	a2 00 00	ldx #$0000			ldx 	#$0000
.01112b	20 6b 11	jsr $01116b			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01112e	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011130	e6 06		inc $06				inc 	DCodePtr
.011132	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011134	c6 2a		dec $2a				dec 	DStack
.011136	60		rts				rts
.011137					_HEBadStructure:
.011137	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01113a	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011142	68 6f 75 74 20 49 66 00
.01114a					Handler_ENDIF:
.01114a	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01114c	b5 00		lda $00,x			lda 	$00,x
.01114e	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011151	d0 05		bne $011158			bne 	_HEIBadStructure
.011153	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011155	c6 2a		dec $2a				dec 	DStack
.011157	60		rts				rts
.011158					_HEIBadStructure:
.011158	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01115b	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011163	68 6f 75 74 20 49 66 00
.01116b					ScanForwardLevel:
.01116b	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01116d	86 0a		stx $0a				stx 	DTemp1+2
.01116f	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011171	85 0c		sta $0c				sta 	DTemp2
.011173	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011176					_SFLLoop:
.011176	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011179	d0 0d		bne $011188			bne 	_SFLNoCheck 				; we're in a substructure.
.01117b	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01117d	f0 09		beq $011188			beq 	_SFLNoCheck 				; don't check zero
.01117f	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011181	f0 04		beq $011187			beq 	_SFLFound
.011183	c5 0a		cmp $0a				cmp 	DTemp1+2
.011185	d0 01		bne $011188			bne 	_SFLNoCheck
.011187					_SFLFound:
.011187	60		rts				rts
.011188					_SFLNoCheck:
.011188	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01118a	f0 4f		beq $0111db			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.01118c	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01118f	90 40		bcc $0111d1			bcc 	_SFLSkipString 				; then handle that.
.011191	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011193	e6 06		inc $06				inc 	DCodePtr
.011195	a8		tay				tay 								; put token in Y temporarily.
.011196	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011199	c9 00 20	cmp #$2000			cmp 	#$2000
.01119c	d0 d8		bne $011176			bne 	_SFLLoop
.01119e	98		tya				tya 								; get the token back.
.01119f	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0111a2	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0111a5	f0 cf		beq $011176			beq 	_SFLLoop
.0111a7	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0111aa	90 ca		bcc $011176			bcc 	_SFLLoop
.0111ac	e8		inx				inx 								; increment the level.
.0111ad	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0111b0	f0 c4		beq $011176			beq 	_SFLLoop
.0111b2	ca		dex				dex 								; decrement the level
.0111b3	ca		dex				dex 								; one overdoes the previous inx.
.0111b4	10 c0		bpl $011176			bpl 	_SFLLoop 					; if gone -ve then error.
.0111b6					_SFLError:
.0111b6	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0111b8	85 22		sta $22				sta 	DLineNumber
.0111ba	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0111bd	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0111c5	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0111d1					_SFLSkipString:
.0111d1	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0111d4	18		clc				clc
.0111d5	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0111d7	85 06		sta $06				sta 	DCodePtr
.0111d9	80 9b		bra $011176			bra 	_SFLLoop 					; go round again.
.0111db					_SFLNextLine:
.0111db	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0111dd	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0111e0	f0 d4		beq $0111b6			beq 	_SFLError 					; if zero, then there's no more code to search.
.0111e2	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0111e5	85 22		sta $22				sta 	DLineNumber
.0111e7	18		clc				clc
.0111e8	a5 06		lda $06				lda 	DCodePtr
.0111ea	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0111ed	85 06		sta $06				sta 	DCodePtr
.0111ef	80 85		bra $011176			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0111f1					Command_FOR:
.0111f1	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0111f3	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0111f6	d0 60		bne $011258			bne		_CFOBad
.0111f8	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.0111fb	b0 15		bcs $011212			bcs 	_CFOExists
.0111fd	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111ff	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.011202	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011205	48		pha				pha 								; save on stack
.011206					_CFOSkipToken:
.011206	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011208	e6 06		inc $06				inc 	DCodePtr
.01120a	e6 06		inc $06				inc 	DCodePtr
.01120c	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01120f	d0 f5		bne $011206			bne 	_CFOSkipToken
.011211	68		pla				pla 								; restore address
.011212					_CFOExists:
.011212	48		pha				pha 								; push variable address on stack
.011213	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011216	20 af 04	jsr $0104af			jsr 	ExpectToken
.011219	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.01121c	bb		tyx				tyx 								; put high value in X
.01121d	7a		ply				ply 								; address in Y
.01121e	99 00 00	sta $0000,y			sta 	$0000,y
.011221	8a		txa				txa
.011222	99 02 00	sta $0002,y			sta 	$0002,y
.011225	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.011228	20 af 04	jsr $0104af			jsr 	ExpectToken
.01122b	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01122d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01122f	95 02		sta $02,x			sta 	$02,x
.011231	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011233	95 04		sta $04,x			sta 	$04,x
.011235	98		tya				tya 								; save variable address at +6
.011236	95 06		sta $06,x			sta 	$06,x
.011238	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.01123b	95 08		sta $08,x			sta 	$08,x
.01123d	8a		txa				txa 								; add 8 to stack position
.01123e	18		clc				clc
.01123f	69 08 00	adc #$0008			adc 	#8
.011242	85 2a		sta $2a				sta 	DStack
.011244	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011247	b2 06		lda ($06)			lda 	(DCodePtr)
.011249	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.01124c	d0 09		bne $011257			bne 	_CFONoStep
.01124e	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.011251	20 af 04	jsr $0104af			jsr 	ExpectToken
.011254	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.011257					_CFONoStep:
.011257	60		rts				rts
.011258					_CFOBad:
.011258	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01125b	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011263	76 61 72 69 61 62 6c 65 00
.01126c					Command_NEXT:
.01126c	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01126e	b5 00		lda $00,x			lda 	$00,x
.011270	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011273	f0 14		beq $011289			beq 	_CNXOk
.011275	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011278	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011280	68 6f 75 74 20 46 6f 72 00
.011289					_CNXOk:
.011289	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01128b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01128e	90 22		bcc $0112b2			bcc 	_CNXNoVariable
.011290	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.011293	90 08		bcc $01129d			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011295	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011297	ca		dex				dex
.011298	ca		dex				dex
.011299	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01129b	f0 15		beq $0112b2			beq 	_CNXNoVariable 				; then continue
.01129d					_CNXNextVar:
.01129d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0112a0	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0112a8	20 76 61 72 69 61 62 6c 65 00
.0112b2					_CNXNoVariable:
.0112b2	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0112b4	48		pha				pha
.0112b5	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0112b7	38		sec				sec
.0112b8	e9 08 00	sbc #$0008			sbc 	#8
.0112bb	85 2a		sta $2a				sta 	DStack
.0112bd	aa		tax				tax 								; X points to the stack.
.0112be	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0112c0	85 06		sta $06				sta 	DCodePtr
.0112c2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.0112c5	5a		phy				phy 								; save the target on the stack
.0112c6	48		pha				pha
.0112c7	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0112ca	85 08		sta $08				sta 	DTemp1
.0112cc	64 0a		stz $0a				stz 	DTemp1+2
.0112ce	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0112d0	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.0112d3	d0 0b		bne $0112e0			bne 	_CNXNoStep
.0112d5	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0112d7	e6 06		inc $06				inc 	DCodePtr
.0112d9	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.0112dc	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0112de	84 0a		sty $0a				sty 	DTemp1+2
.0112e0					_CNXNoStep:
.0112e0	68		pla				pla 								; save the Target in DTemp2
.0112e1	85 0c		sta $0c				sta 	DTemp2
.0112e3	68		pla				pla
.0112e4	85 0e		sta $0e				sta 	DTemp2+2
.0112e6	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0112e8	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0112ea	a8		tay				tay
.0112eb	18		clc				clc
.0112ec	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0112ef	65 08		adc $08				adc 	DTemp1
.0112f1	99 00 00	sta $0000,y			sta 	$0000,y
.0112f4	b9 02 00	lda $0002,y			lda 	$0002,y
.0112f7	65 0a		adc $0a				adc 	DTemp1+2
.0112f9	99 02 00	sta $0002,y			sta 	$0002,y
.0112fc	38		sec				sec
.0112fd	a5 0c		lda $0c				lda 	DTemp2
.0112ff	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011302	85 0c		sta $0c				sta 	DTemp2
.011304	a5 0e		lda $0e				lda 	DTemp2+2
.011306	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011309	85 0e		sta $0e				sta 	DTemp2+2
.01130b	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.01130d	f0 0a		beq $011319			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01130f	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011311	45 0a		eor $0a				eor 	DTemp1+2
.011313	10 04		bpl $011319			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011315	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011316	85 06		sta $06				sta 	DCodePtr
.011318	60		rts				rts
.011319					_CNXLoopAgain:
.011319	68		pla				pla 								; throw the original DCodePtr as we're going back.
.01131a	18		clc				clc
.01131b	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.01131d	aa		tax				tax
.01131e	69 08 00	adc #$0008			adc 	#8
.011321	85 2a		sta $2a				sta 	DStack
.011323	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011325	85 22		sta $22				sta 	DLineNumber
.011327	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.011328					Function_ONGOTO:
.011328	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.01132b	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01132e	d0 25		bne $011355			bne 	_FOGoFail
.011330	c9 00 00	cmp #$0000			cmp 	#0
.011333	f0 20		beq $011355			beq 	_FOGoFail 					; we start with index = 1
.011335	48		pha				pha 								; save count on stack
.011336	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011339	20 af 04	jsr $0104af			jsr 	ExpectToken
.01133c	fa		plx				plx 								; put count in X.
.01133d					_FOGoLoop:
.01133d	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01133f	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011342	90 73		bcc $0113b7			bcc 	FGOFail 					; if not, then we have an error.
.011344	c9 00 c0	cmp #$c000			cmp 	#$C000
.011347	b0 6e		bcs $0113b7			bcs 	FGOFail
.011349	ca		dex				dex 								; subtract one, if done, call GOTO code
.01134a	f0 1f		beq $01136b			beq 	Function_GOTO
.01134c	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01134e	e6 06		inc $06				inc 	DCodePtr
.011350	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; expect a comma
.011353	80 e8		bra $01133d			bra 	_FOGoLoop 					; and loop round.
.011355					_FOGoFail:
.011355	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011358	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011360	47 6f 74 6f 20 76 61 6c 75 65 00
.01136b					Function_GOTO:
.01136b	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01136d	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011370	90 45		bcc $0113b7			bcc 	FGOFail 					; we don't do calculate line numbers.
.011372	c9 00 c0	cmp #$c000			cmp 	#$C000
.011375	b0 40		bcs $0113b7			bcs 	FGOFail
.011377	38		sec				sec 								; convert to 0-32767
.011378	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01137b	aa		tax				tax
.01137c	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.01137f	18		clc				clc
.011380	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011382	a8		tay				tay
.011383					_FGOSearch:
.011383	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011386	f0 18		beq $0113a0			beq 	_FGOUnknown
.011388	8a		txa				txa 								; does it match line number ?
.011389	d9 02 00	cmp $0002,y			cmp 	$0002,y
.01138c	f0 08		beq $011396			beq 	_FGOFound 					; yes, then found.
.01138e	98		tya				tya 								; no follow the link
.01138f	18		clc				clc
.011390	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011393	a8		tay				tay
.011394	80 ed		bra $011383			bra 	_FGOSearch 					; and keep looking
.011396					_FGOFound:
.011396	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011398	98		tya				tya 								; Y + 4 is the code pointer.
.011399	18		clc				clc 								; (skipping link and line #)
.01139a	69 04 00	adc #$0004			adc 	#4
.01139d	85 06		sta $06				sta 	DCodePtr
.01139f	60		rts				rts									; and continue
.0113a0					_FGOUnknown:
.0113a0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113a3	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0113ab	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0113b7					FGOFail:
.0113b7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113ba	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0113c2	20 4e 75 6d 62 65 72 00
.0113ca					Function_GOSUB:
.0113ca	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0113cc	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0113ce	18		clc				clc
.0113cf	69 02 00	adc #$0002			adc 	#2
.0113d2	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0113d4	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0113d6	95 04		sta $04,x			sta 	$04,x
.0113d8	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0113db	95 06		sta $06,x			sta 	$06,x
.0113dd	8a		txa				txa 								; advance stack by 6.
.0113de	18		clc				clc
.0113df	69 06 00	adc #$0006			adc 	#6
.0113e2	85 2a		sta $2a				sta 	DStack
.0113e4	80 85		bra $01136b			bra 	Function_GOTO 				; and do a GOTO.
.0113e6					Function_RETURN:
.0113e6	a6 2a		ldx $2a				ldx 	DStack
.0113e8	b5 00		lda $00,x			lda 	$00,x
.0113ea	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0113ed	d0 11		bne $011400			bne 	_FRetFail
.0113ef	8a		txa				txa 								; unpick stack.
.0113f0	38		sec				sec
.0113f1	e9 06 00	sbc #$0006			sbc 	#6
.0113f4	85 2a		sta $2a				sta 	DStack
.0113f6	aa		tax				tax
.0113f7	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0113f9	85 06		sta $06				sta 	DCodePtr
.0113fb	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0113fd	85 22		sta $22				sta 	DLineNumber
.0113ff	60		rts				rts
.011400					_FRetFail:
.011400	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011403	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>01140b	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011418					Function_REPEAT:
.011418	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01141a	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.01141c	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01141e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011420	95 04		sta $04,x			sta 	$04,x
.011422	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.011425	95 06		sta $06,x			sta 	$06,x
.011427	8a		txa				txa 								; advance stack by 6.
.011428	18		clc				clc
.011429	69 06 00	adc #$0006			adc 	#6
.01142c	85 2a		sta $2a				sta 	DStack
.01142e	60		rts				rts
.01142f					Function_UNTIL:
.01142f	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011431	b5 00		lda $00,x			lda 	$00,x
.011433	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.011436	d0 26		bne $01145e			bne 	_FUNFail
.011438	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.01143b	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01143e	d0 15		bne $011455			bne 	_FUNExit
.011440	c9 00 00	cmp #$0000			cmp 	#0
.011443	d0 10		bne $011455			bne 	_FUNExit
.011445	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011447	38		sec				sec
.011448	e9 06 00	sbc #$0006			sbc 	#6
.01144b	aa		tax				tax
.01144c	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01144e	85 06		sta $06				sta 	DCodePtr
.011450	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011452	85 22		sta $22				sta 	DLineNumber
.011454	60		rts				rts
.011455					_FUNExit:
.011455	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011457	38		sec				sec
.011458	e9 06 00	sbc #$0006			sbc 	#6
.01145b	85 2a		sta $2a				sta 	DStack
.01145d	60		rts				rts
.01145e					_FUNFail:
.01145e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011461	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011469	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011476					Function_WHILE:
.011476	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011478	48		pha				pha 								; save on stack
.011479	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.01147c	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.01147f	d0 14		bne $011495			bne 	_FWHExecute
.011481	c9 00 00	cmp #$0000			cmp 	#0
.011484	d0 0f		bne $011495			bne 	_FWHExecute
.011486	68		pla				pla 								; throw away current instruction
.011487	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.01148a	a2 00 00	ldx #$0000			ldx 	#0
.01148d	20 6b 11	jsr $01116b			jsr 	ScanForwardLevel 			; scan forward checking structures
.011490	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011492	e6 06		inc $06				inc 	DCodePtr
.011494	60		rts				rts
.011495					_FWHExecute:
.011495	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011497	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011498	3a		dec a				dec 	a
.011499	3a		dec a				dec 	a
.01149a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01149c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01149e	95 04		sta $04,x			sta 	$04,x
.0114a0	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.0114a3	95 06		sta $06,x			sta 	$06,x
.0114a5	8a		txa				txa 								; advance stack by 6.
.0114a6	18		clc				clc
.0114a7	69 06 00	adc #$0006			adc 	#6
.0114aa	85 2a		sta $2a				sta 	DStack
.0114ac	60		rts				rts
.0114ad					Function_WEND:
.0114ad	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.0114af	b5 00		lda $00,x			lda 	$00,x
.0114b1	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.0114b4	d0 11		bne $0114c7			bne 	_FWEFail
.0114b6	8a		txa				txa 								; unpick stack and always loop back.
.0114b7	38		sec				sec 								; we do the check at the top.
.0114b8	e9 06 00	sbc #$0006			sbc 	#6
.0114bb	85 2a		sta $2a				sta 	DStack
.0114bd	aa		tax				tax
.0114be	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0114c0	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0114c2	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0114c4	85 22		sta $22				sta 	DLineNumber
.0114c6	60		rts				rts
.0114c7					_FWEFail:
.0114c7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114ca	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0114d2	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0114dd					Function_END:
.0114dd	02 00		cop #$00			cop 	#0
.0114df					Function_RUN:
.0114df	20 46 15	jsr $011546			jsr 	Function_CLEAR 				; clear all variables.
.0114e2	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0114e4	18		clc				clc
.0114e5	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0114e8					_FRun_NextLineNumber:
.0114e8	a8		tay				tay 								; put in Y
.0114e9	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0114ec	f0 ef		beq $0114dd			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0114ee	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0114f1	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0114f3	98		tya				tya 								; get address back
.0114f4	18		clc				clc 								; skip over the link/line number
.0114f5	69 04 00	adc #$0004			adc 	#4
.0114f8	85 06		sta $06				sta 	DCodePtr
.0114fa					_FRun_NextInstruction:
.0114fa	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0114fc	20 90 f0	jsr $01f090			jsr 	HWCheckBreak 				; break key pressed.
.0114ff	d0 3c		bne $01153d			bne 	_FRun_Break
.011501	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011503	f0 32		beq $011537			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011505	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.011508	f0 18		beq $011522			beq 	_FRun_Colon
.01150a	a8		tay				tay 								; save in Y
.01150b	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01150e	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011511	d0 15		bne $011528			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011513	98		tya				tya 								; get token back
.011514	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011517	0a		asl a				asl 	a 							; double it into X
.011518	aa		tax				tax
.011519	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01151b	e6 06		inc $06				inc 	DCodePtr
.01151d	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011520	80 d8		bra $0114fa			bra 	_FRun_NextInstruction 		; do the following instruction.
.011522					_FRun_Colon:
.011522	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011524	e6 06		inc $06				inc 	DCodePtr
.011526	80 d2		bra $0114fa			bra 	_FRun_NextInstruction 		; do the following instruction.
.011528					_FRun_TryLET:
.011528	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.01152a	c9 00 c0	cmp #$c000			cmp 	#$C000
.01152d	90 05		bcc $011534			bcc		_FRunSyntax 				; no, must be syntax.
.01152f	20 c9 0d	jsr $010dc9			jsr 	Function_LET 				; try as a LET.
.011532	80 c6		bra $0114fa			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011534					_FRunSyntax:
.011534	82 68 ef	brl $01049f			brl 	SyntaxError
.011537					_FRun_EndInstruction:
.011537	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011539	1a		inc a				inc 	a 							; go to link for next line
.01153a	1a		inc a				inc 	a
.01153b	80 ab		bra $0114e8			bra 	_FRun_NextLineNumber
.01153d					_FRun_Break:
.01153d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011540	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011546					Function_CLEAR:
.011546	20 52 15	jsr $011552			jsr 	ClearVariablesPointersAndStacks
.011549	60		rts				rts
.01154a					Function_STOP:
.01154a	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01154d	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011552					ClearVariablesPointersAndStacks:
.011552	a9 80 00	lda #$0080			lda 	#BASStack
.011555	85 2a		sta $2a				sta 	DStack
.011557	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011559	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.01155c	a9 00 00	lda #$0000			lda 	#$0000
.01155f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011561	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011563	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011566	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011568	20 8f 15	jsr $01158f			jsr 	FindCodeEnd 				; find where the program ends.
.01156b	a8		tay				tay 								; Y points to it.
.01156c	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01156f	99 02 00	sta $0002,y			sta 	$0002,y
.011572	99 04 00	sta $0004,y			sta 	$0004,y
.011575	98		tya				tya 								; start of working memory up
.011576	18		clc				clc
.011577	69 06 00	adc #$0006			adc 	#6
.01157a	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.01157d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01157f	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011582					_FCLoop:
.011582	a9 00 00	lda #$0000			lda 	#$0000
.011585	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011587	c8		iny				iny
.011588	c8		iny				iny
.011589	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.01158c	d0 f4		bne $011582			bne 	_FCLoop
.01158e	60		rts				rts
.01158f					FindCodeEnd:
.01158f	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.011592	18		clc				clc
.011593	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011595	a8		tay				tay
.011596					_FCELoop:
.011596	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011599	f0 08		beq $0115a3			beq 	_FCEExit
.01159b	98		tya				tya 								; add offset
.01159c	18		clc				clc
.01159d	79 00 00	adc $0000,y			adc 	$0000,y
.0115a0	a8		tay				tay
.0115a1	80 f3		bra $011596			bra 	_FCELoop
.0115a3					_FCEExit:
.0115a3	98		tya				tya 								; return in A
.0115a4	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.0115a5					Function_Dim:
.0115a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0115a7	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0115aa	f0 3b		beq $0115e7			beq		_FDIMNotArray 				; no, error.
.0115ac	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.0115af	b0 41		bcs $0115f2			bcs 	_FDIMExists 				; if it does, that's an error.
.0115b1	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0115b3	48		pha				pha
.0115b4	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0115b6	48		pha				pha
.0115b7					_FDIMSkip:
.0115b7	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0115b9	e6 06		inc $06				inc 	DCodePtr
.0115bb	e6 06		inc $06				inc 	DCodePtr
.0115bd	29 00 08	and #$0800			and 	#IDContMask
.0115c0	d0 f5		bne $0115b7			bne 	_FDIMSkip
.0115c2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.0115c5	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check the ) following.
.0115c8	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0115cb	d0 3b		bne $011608			bne 	_FDIMSize
.0115cd	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0115d0	f0 36		beq $011608			beq 	_FDIMSize
.0115d2	7a		ply				ply 								; restore HashTablePtr
.0115d3	84 20		sty $20				sty 	DHashTablePtr
.0115d5	7a		ply				ply 								; so now A is the high index, Y points to the token
.0115d6	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.0115d9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0115db	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.0115de	d0 06		bne $0115e6			bne 	_FDIMExit
.0115e0	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0115e2	e6 06		inc $06				inc 	DCodePtr
.0115e4	80 bf		bra $0115a5			bra 	Function_DIM 				; and do another
.0115e6					_FDIMExit:
.0115e6	60		rts				rts
.0115e7					_FDIMNotArray:
.0115e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115ea	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0115f2					_FDIMExists:
.0115f2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115f5	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0115fd	65 64 69 6d 65 6e 73 69 6f 6e 00
.011608					_FDIMSize:
.011608	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01160b	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011613	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011619					Function_COLLECT:
.011619	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.01161b	85 0c		sta $0c				sta 	DTemp2
.01161d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011620	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011622	85 0e		sta $0e				sta 	DTemp2+2
.011624	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011626	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011628					_FCNextPass:
.011628	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.01162a	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.01162c	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.01162e	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011631	18		clc				clc
.011632	65 02		adc $02				adc 	DBaseAddress
.011634	a8		tay				tay 								; put in Y
.011635	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011638					_FCO1:
.011638	20 5e 16	jsr $01165e			jsr  	COLLECTScanVariable 		; scan that one.
.01163b	c8		iny				iny 	 							; go to next pointer
.01163c	c8		iny				iny
.01163d	ca		dex				dex
.01163e	d0 f8		bne $011638			bne 	_FCO1 						; until done all 16.
.011640	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011643					_FCO2:
.011643	20 72 16	jsr $011672			jsr  	COLLECTScanArray 			; scan that one.
.011646	c8		iny				iny 	 							; go to next pointer
.011647	c8		iny				iny
.011648	ca		dex				dex
.011649	d0 f8		bne $011643			bne 	_FCO2 						; until done all 16.
.01164b	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.01164d	f0 0e		beq $01165d			beq		_FCExit 					; if finished then exit.
.01164f	48		pha				pha 								; save the target address
.011650	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011652	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011654	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make the string concrete.
.011657	7a		ply				ply 								; restore the string.
.011658	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.01165b	80 cb		bra $011628			bra		_FCNextPass
.01165d					_FCExit:
.01165d	60		rts				rts
.01165e					COLLECTScanVariable:
.01165e	da		phx				phx 								; save XY
.01165f	5a		phy				phy
.011660					_CSVLoop:
.011660	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011663	f0 0a		beq $01166f			beq 	_CSVExit
.011665	a8		tay				tay 								; put new address into Y
.011666	18		clc				clc 								; which is four on.
.011667	69 04 00	adc #$0004			adc 	#4
.01166a	20 93 16	jsr $011693			jsr 	COLLECTCheck
.01166d	80 f1		bra $011660			bra 	_CSVLoop
.01166f					_CSVExit:
.01166f	7a		ply				ply
.011670	fa		plx				plx
.011671	60		rts				rts
.011672					COLLECTScanArray:
.011672	da		phx				phx 								; save XY
.011673	5a		phy				phy
.011674					_CSALoop:
.011674	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011677	f0 17		beq $011690			beq 	_CSAExit
.011679	a8		tay				tay 								; put new address in Y
.01167a	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.01167d	aa		tax				tax
.01167e	e8		inx				inx									; +1 as one more data element.
.01167f	98		tya				tya 								; point A to first element, at +6
.011680	18		clc				clc
.011681	69 06 00	adc #$0006			adc 	#6
.011684					_CSADoAllStrings:
.011684	20 93 16	jsr $011693			jsr 	COLLECTCheck 				; collect check the first.
.011687	1a		inc a				inc 	a 							; advance the pointer.
.011688	1a		inc a				inc 	a
.011689	1a		inc a				inc 	a
.01168a	1a		inc a				inc 	a
.01168b	ca		dex				dex
.01168c	d0 f6		bne $011684			bne 	_CSADoAllStrings 			; until all strings are done.
.01168e	80 e4		bra $011674			bra 	_CSALoop
.011690					_CSAExit:
.011690	7a		ply				ply
.011691	fa		plx				plx
.011692	60		rts				rts
.011693					COLLECTCheck:
.011693	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011695	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011697	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011699	90 0a		bcc $0116a5			bcc 	_COCExit
.01169b	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.01169d	b0 06		bcs $0116a5			bcs 	_COCExit
.01169f	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0116a1	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0116a3	85 14		sta $14				sta 	DSignCount
.0116a5					_COCExit:
.0116a5	a5 0a		lda $0a				lda 	DTemp1+2
.0116a7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.0116a8					Command_POKE:
.0116a8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116ab	48		pha				pha	 								; save on stack
.0116ac	5a		phy				phy
.0116ad	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116b0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116b3	fa		plx				plx 								; pull address and store in DTemp1
.0116b4	86 0a		stx $0a				stx 	DTemp1+2
.0116b6	fa		plx				plx
.0116b7	86 08		stx $08				stx 	DTemp1+0
.0116b9	e2 20		sep #$20			sep 	#$20 						; byte mode
.0116bb	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0116bd	c2 20		rep #$20			rep 	#$20 						; word mode
.0116bf	60		rts				rts
.0116c0					Command_DOKE:
.0116c0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116c3	48		pha				pha	 								; save on stack
.0116c4	5a		phy				phy
.0116c5	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116c8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116cb	fa		plx				plx 								; pull address and store in DTemp1
.0116cc	86 0a		stx $0a				stx 	DTemp1+2
.0116ce	fa		plx				plx
.0116cf	86 08		stx $08				stx 	DTemp1+0
.0116d1	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0116d3	60		rts				rts
.0116d4					Command_LOKE:
.0116d4	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0116d7	48		pha				pha	 								; save on stack
.0116d8	5a		phy				phy
.0116d9	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0116dc	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0116df	fa		plx				plx 								; pull address and store in DTemp1
.0116e0	86 0a		stx $0a				stx 	DTemp1+2
.0116e2	fa		plx				plx
.0116e3	86 08		stx $08				stx 	DTemp1+0
.0116e5	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0116e7	98		tya				tya
.0116e8	a0 02 00	ldy #$0002			ldy 	#2
.0116eb	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0116ed	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0116ee					Function_ASSERT:
.0116ee	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.0116f1	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0116f3	05 08		ora $08				ora 	Dtemp1
.0116f5	f0 01		beq $0116f8			beq 	_FAssFail
.0116f7	60		rts				rts
.0116f8					_FAssFail:
.0116f8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116fb	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011703	61 69 6c 65 64 00
.011709					Function_CLS:
.011709	20 1b f0	jsr $01f01b			jsr 	HWClearScreen
.01170c	60		rts				rts
.01170d					Function_REM:
.01170d	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01170f	f0 0b		beq $01171c			beq 	_FRemSyntax 				; if 0, syntax error
.011711	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011714	b0 06		bcs $01171c			bcs 	_FRemSyntax
.011716	18		clc				clc 								; add to DCodePtr
.011717	65 06		adc $06				adc 	DCodePtr
.011719	85 06		sta $06				sta 	DCodePtr
.01171b	60		rts				rts
.01171c					_FRemSyntax:
.01171c	82 80 ed	brl $01049f			brl 	SyntaxError
.01171f					Function_LINK:
.01171f	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.011722	85 08		sta $08				sta 	DTemp1 						; target address
.011724	84 0a		sty $0a				sty 	DTemp1+2
.011726	ea		nop				nop
.011727	7b		tdc				tda 								; work out what the actual address is
.011728	18		clc				clc
.011729	69 08 00	adc #$0008			adc 	#DTemp1
.01172c	8f 61 17 01	sta $011761			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011730	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011732	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011735	48		pha				pha
.011736	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011739	aa		tax				tax
.01173a	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.01173d	a8		tay				tay
.01173e	68		pla				pla
.01173f	22 60 17 01	jsl $011760			jsl 	_FLIExecuteIt
.011743	5a		phy				phy 								; save Y
.011744	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011746	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011749	8a		txa				txa
.01174a	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.01174d	68		pla				pla
.01174e	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011751	c8		iny				iny 								; point to their high bytes and clear them
.011752	c8		iny				iny
.011753	a9 00 00	lda #$0000			lda 	#0
.011756	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011759	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.01175c	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.01175f	60		rts				rts
.011760					_FLIExecuteIt:
.011760	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011763					SwitchBasicInstance:
.011763	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011765	20 1b f0	jsr $01f01b			jsr 	HWClearScreen 						; clear screen
.011768	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01176b	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01176d	86 02		stx $02				stx		DBaseAddress
.01176f	84 04		sty $04				sty 	DHighAddress
.011771	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011772	48		pha				pha 										; then copy it into B.
.011773	ab		plb				plb
.011774	ab		plb				plb
.011775	4c df 14	jmp $0114df			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.01f000	a0 01 00	ldy #$0001			ldy 	#TTest >> 16 						; code called for testing.
.01f003	a9 0a f0	lda #$f00a			lda 	#TTest & $FFFF
.01f006	20 c8 05	jsr $0105c8			jsr 	Tokenise
.01f009	6b		rtl				rtl
>01f00a	34 32 20 22 71 75 6f 54		TTest:	.text '42 "quoTed" aBcD',0
>01f012	65 64 22 20 61 42 63 44 00

;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.01f01b					HWClearScreen:
.01f01b	48		pha				pha
.01f01c	da		phx				phx
.01f01d	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01f020	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01f023	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f027	ca		dex				dex
.01f028	10 f6		bpl $01f020			bpl 	_CS0
.01f02a	64 28		stz $28				stz 	DCursor
.01f02c	a9 66 20	lda #$2066			lda 	#$2000+HWCursorCharacter
.01f02f	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01f033	fa		plx				plx
.01f034	68		pla				pla
.01f035	60		rts				rts
.01f036					HWPrintChar:
.01f036	48		pha				pha
.01f037	da		phx				phx
.01f038	5a		phy				phy
.01f039	29 ff 00	and #$00ff			and 	#$00FF
.01f03c	c9 61 00	cmp #$0061			cmp 	#"a"
.01f03f	90 0c		bcc $01f04d			bcc 	_HWPCNotLC
.01f041	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01f044	b0 07		bcs $01f04d			bcs 	_HWPCNotLC
.01f046	38		sec				sec
.01f047	e9 20 00	sbc #$0020			sbc 	#32
.01f04a	09 80 00	ora #$0080			ora 	#128
.01f04d					_HWPCNotLC:
.01f04d	29 bf 00	and #$00bf			and 	#$BF
.01f050	a6 28		ldx $28				ldx 	DCursor
.01f052	e2 20		sep #$20			sep 	#$20
.01f054	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f058	c2 20		rep #$20			rep 	#$20
.01f05a	e8		inx				inx
.01f05b	8a		txa				txa
.01f05c	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.01f05f	d0 03		bne $01f064			bne 	_HWNotEnd
.01f061	a9 00 00	lda #$0000			lda 	#0
.01f064					_HWNotEnd:
.01f064	85 28		sta $28				sta 	DCursor
.01f066	aa		tax				tax
.01f067	a9 66 00	lda #$0066			lda 	#HWCursorCharacter
.01f06a	e2 20		sep #$20			sep 	#$20
.01f06c	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f070	c2 20		rep #$20			rep 	#$20
.01f072	7a		ply				ply
.01f073	fa		plx				plx
.01f074	68		pla				pla
.01f075	60		rts				rts
.01f076					HWNewLine:
.01f076	48		pha				pha
.01f077	da		phx				phx
.01f078	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01f07b					HWMoveCursor:
.01f07b	a9 20 00	lda #$0020			lda 	#32
.01f07e	20 36 f0	jsr $01f036			jsr 	HWPrintChar
.01f081	8a		txa				txa
.01f082	25 28		and $28				and 	DCursor
.01f084	d0 f5		bne $01f07b			bne 	HWMoveCursor
.01f086	fa		plx				plx
.01f087	68		pla				pla
.01f088	60		rts				rts
.01f089	48		pha		HWTab:	pha
.01f08a	da		phx				phx
.01f08b	a2 07 00	ldx #$0007			ldx 	#7
.01f08e	80 eb		bra $01f07b			bra 	HWMoveCursor
.01f090					HWCheckBreak:
.01f090	af 00 80 0f	lda $0f8000			lda 	$F8000
.01f094	60		rts				rts
.01f095					HWGetKey:
.01f095	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f099	d0 fa		bne $01f095			bne 	HWGetKey
.01f09b					_HWGKWait:
.01f09b	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f09f	f0 fa		beq $01f09b			beq 	_HWGKWait
.01f0a1	ea		nop				nop
.01f0a2	60		rts				rts

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	6a 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1c 00 01 00 01 c0 06 22
>024108	63 40 25 32 18 c0 06 22 2a 40 25 32 19 c0 06 22
>024118	26 40 00 00 1e 00 02 00 35 3e 0a 00 06 42 65 66
>024128	6f 72 65 00 23 32 01 c0 23 32 18 c0 23 32 19 c0
>024138	00 00 3e 00 03 00 3f 3e 02 10 00 40 0a 24 0f 40
>024148	0c 26 00 50 25 32 2b 3e 26 00 23 54 68 69 73 20
>024158	69 73 20 69 6e 20 74 68 65 20 73 74 61 72 74 2e
>024168	61 73 6d 20 72 6f 75 74 69 6e 65 20 3a 29 00 00
>024178	1c 00 04 00 35 3e 08 00 05 41 66 74 65 72 23 32
>024188	01 c0 23 32 18 c0 23 32 19 c0 00 00 14 00 09 00
>024198	3e 3e 64 40 23 32 85 40 25 32 36 3e aa 40 00 00
>0241a8	12 00 0b 00 43 3c 09 c0 06 22 01 40 29 38 0f 67
>0241b8	00 00 0a 00 0d 00 48 3a 09 c0 00 00 0c 00 14 00
>0241c8	18 c0 06 22 00 40 00 00 08 00 32 00 40 3c 00 00
>0241d8	08 00 3c 00 35 3e 00 00 0e 00 46 00 45 3a 18 c0
>0241e8	06 22 00 40 00 00 12 00 50 00 43 3c 09 c0 06 22
>0241f8	01 40 29 38 05 40 00 00 0c 00 5a 00 01 c0 06 22
>024208	09 c0 00 00 0a 00 5f 00 48 3a 09 c0 00 00 08 00
>024218	61 00 40 3c 00 00 16 00 64 00 42 3c 26 32 18 c0
>024228	01 20 01 40 27 32 06 22 00 40 00 00 16 00 6e 00
>024238	35 3e 18 c0 23 32 08 00 04 45 76 65 6e 00 23 32
>024248	00 00 0e 00 70 00 42 3c 18 c0 05 22 05 40 00 00
>024258	0e 00 76 00 35 3e 06 00 02 3e 35 00 00 00 08 00
>024268	77 00 3a 3e 00 00 0e 00 78 00 35 3e 06 00 03 3c
>024278	3d 35 00 00 08 00 81 00 47 3a 00 00 22 00 82 00
>024288	42 3c 18 c0 06 22 08 40 46 3a 35 3e 10 00 0c 49
>024298	74 27 73 20 65 69 67 68 74 20 21 00 00 00 08 00
>0242a8	85 00 3a 3e 00 00 14 00 86 00 35 3e 18 c0 23 32
>0242b8	06 00 03 6f 64 64 23 32 00 00 0c 00 87 00 19 c0
>0242c8	06 22 18 c0 00 00 30 00 88 00 40 3c 25 32 35 3e
>0242d8	19 c0 24 32 04 00 01 20 24 32 25 32 19 c0 06 22
>0242e8	19 c0 0b 24 01 40 25 32 45 3a 19 c0 06 22 00 40
>0242f8	25 32 35 3e 00 00 08 00 8c 00 47 3a 00 00 10 00
>024308	96 00 18 c0 06 22 18 c0 0a 24 01 40 00 00 0e 00
>024318	a0 00 45 3a 18 c0 05 22 0a 40 00 00 12 00 aa 00
>024328	43 3c 09 c0 06 22 00 40 29 38 ff 40 00 00 1c 00
>024338	c8 00 3b 3e 1e 10 00 40 0a 24 09 c0 0a 24 40 40
>024348	0c 26 18 40 23 32 09 c0 00 00 0a 00 d2 00 48 3a
>024358	09 c0 00 00 08 00 ac 2b 30 3e 00 00 00 00 ee ee
>024368	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1991 times (31856 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
