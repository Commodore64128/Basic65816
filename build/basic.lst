
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 11:57:36 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c dc 0d 01	jmp $010ddc			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	b6 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	89 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	99 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	a9 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	ed 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	54 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	b9 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	36 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	18 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	d3 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	d3 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	54 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	60 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	dd 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	54 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	65 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	77 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	ee 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	ce 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	aa 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	94 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	25 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	7a 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b6 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	b6 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	b6 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	b6 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	b6 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	b6 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	36 0a					.word Function_Let             & $FFFF ; token $3e1d "let"
>01003c	bd 0d					.word Function_ASSERT          & $FFFF ; token $3e1e "assert"
>01003e	08 0c					.word Function_END             & $FFFF ; token $3e1f "end"
>010040	0a 0c					.word Function_RUN             & $FFFF ; token $3e20 "run"
>010042	62 0c					.word Function_CLEAR           & $FFFF ; token $3e21 "clear"
>010044	b9 0c					.word Function_Dim             & $FFFF ; token $3e22 "dim"
>010046	2d 0d					.word Function_COLLECT         & $FFFF ; token $3e23 "collect"
>010048	d8 0d					.word Function_CLS             & $FFFF ; token $3e24 "cls"
>01004a	b1 0a					.word Function_PRINT           & $FFFF ; token $3e25 "print"
>01004c	fd 0a					.word Function_GOTO            & $FFFF ; token $3e26 "goto"
>01004e	5c 0b					.word Function_GOSUB           & $FFFF ; token $3e27 "gosub"
>010050	78 0b					.word Function_RETURN          & $FFFF ; token $3e28 "return"
>010052	b6 03					.word IllegalToken             & $FFFF ; token $3e29 "on"
>010054	aa 0b					.word Function_REPEAT          & $FFFF ; token $3c2a "repeat"
>010056	c1 0b					.word Function_UNTIL           & $FFFF ; token $3a2b "until"
.010058					TokenText:
>010058	02 26					 .text $02,"&"        ; token $2001
>01005a	02 7c					 .text $02,"|"        ; token $2002
>01005c	02 5e					 .text $02,"^"        ; token $2003
>01005e	12 3c					 .text $12,"<"        ; token $2204
>010060	12 3e					 .text $12,">"        ; token $2205
>010062	12 3d					 .text $12,"="        ; token $2206
>010064	13 3c 3d				 .text $13,"<="       ; token $2207
>010067	13 3e 3d				 .text $13,">="       ; token $2208
>01006a	13 3c 3e				 .text $13,"<>"       ; token $2209
>01006d	22 2b					 .text $22,"+"        ; token $240a
>01006f	22 2d					 .text $22,"-"        ; token $240b
>010071	32 2a					 .text $32,"*"        ; token $260c
>010073	32 2f					 .text $32,"/"        ; token $260d
>010075	32 25					 .text $32,"%"        ; token $260e
>010077	33 3e 3e				 .text $33,">>"       ; token $260f
>01007a	33 3c 3c				 .text $33,"<<"       ; token $2610
>01007d	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010083	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010088	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01008d	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010092	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010097	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>01009d	92 2c					 .text $92,","        ; token $3217
>01009f	92 3b					 .text $92,";"        ; token $3218
>0100a1	92 3a					 .text $92,":"        ; token $3219
>0100a3	92 28					 .text $92,"("        ; token $321a
>0100a5	92 29					 .text $92,")"        ; token $321b
>0100a7	92 27					 .text $92,"'"        ; token $321c
>0100a9	f4 6c 65 74				 .text $f4,"let"      ; token $3e1d
>0100ad	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1e
>0100b4	f4 65 6e 64				 .text $f4,"end"      ; token $3e1f
>0100b8	f4 72 75 6e				 .text $f4,"run"      ; token $3e20
>0100bc	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e21
>0100c2	f4 64 69 6d				 .text $f4,"dim"      ; token $3e22
>0100c6	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e23
>0100ce	f4 63 6c 73				 .text $f4,"cls"      ; token $3e24
>0100d2	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e25
>0100d8	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e26
>0100dd	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e27
>0100e3	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e28
>0100ea	f3 6f 6e				 .text $f3,"on"       ; token $3e29
>0100ed	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c2a
>0100f4	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a2b
>0100fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					letTokenID                       = $3e1d
=$3e1e					assertTokenID                    = $3e1e
=$3e1f					endTokenID                       = $3e1f
=$3e20					runTokenID                       = $3e20
=$3e21					clearTokenID                     = $3e21
=$3e22					dimTokenID                       = $3e22
=$3e23					collectTokenID                   = $3e23
=$3e24					clsTokenID                       = $3e24
=$3e25					printTokenID                     = $3e25
=$3e26					gotoTokenID                      = $3e26
=$3e27					gosubTokenID                     = $3e27
=$3e28					returnTokenID                    = $3e28
=$3e29					onTokenID                        = $3e29
=$3c2a					repeatTokenID                    = $3c2a
=$3a2b					untilTokenID                     = $3a2b

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100fb					Evaluate:
.0100fb	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010101					EvaluateLevel:
.010101	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010104	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010106	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010108	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01010b	b0 79		bcs $010186			bcs 	_ELVariable
.01010d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010110	b0 16		bcs $010128			bcs 	_ELConstant
.010112	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010115	90 7f		bcc $010196			bcc 	_ELStringConstant
.010117	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01011a	90 03		bcc $01011f			bcc 	_ELConstantShift
.01011c	82 94 00	brl $0101b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01011f					_ELConstantShift:
.01011f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010122	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010124	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010126	e6 06		inc $06				inc 	DCodePtr
.010128					_ELConstant:
.010128	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01012a	38		sec				sec  								; shift it in the range 0-32767
.01012b	e9 00 40	sbc #$4000			sbc 	#$4000
.01012e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01012f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010131	6a		ror a				ror 	a 							; rotate that into the constant value
.010132	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010134	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010136	95 10		sta $10,x			sta 	EXSValueH+0,x
.010138	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01013a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01013c	e6 06		inc $06				inc 	DCodePtr
.01013e					_ELGotAtom:
.01013e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010140	a8		tay				tay 								; save in Y
.010141	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010144	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010147	d0 35		bne $01017e			bne 	_ELExit
.010149	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01014b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01014e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010150	98		tya				tya 								; get the keyword token back
.010151	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010154	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010156	90 26		bcc $01017e			bcc 	_ELExit 					; precedence too low, then exit.
.010158	5a		phy				phy 								; save the binary operator on the stack
.010159	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01015b	e6 06		inc $06				inc 	DCodePtr
.01015d	18		clc				clc 								; try the next level up
.01015e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010161	e8		inx				inx 								; calculate the RHS at the next stack level.
.010162	e8		inx				inx
.010163	20 01 01	jsr $010101			jsr 	EvaluateLevel
.010166	ca		dex				dex
.010167	ca		dex				dex
.010168	7a		ply				ply 								; get operator token back into Y
.010169					_ELExecuteY:
.010169	98		tya				tya
.01016a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01016d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01016e	9b		txy				txy 								; save X in Y
.01016f	aa		tax				tax 								; double keyword ID in X
.010170	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010174	bb		tyx				tyx 								; restore X.
.010175	8f 7a 01 01	sta $01017a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010179					_ELCallRoutine:
.010179	20 79 01	jsr $010179			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01017c	80 c0		bra $01013e			bra 	_ELGotAtom 					; go round operator level again.
.01017e	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010180	0a		asl a				asl 	a
.010181	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010183	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010185	60		rts				rts
.010186					_ELVariable:
.010186	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010188	20 47 02	jsr $010247			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01018b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01018d	94 10		sty $10,x			sty 	EXSValueH+0,x
.01018f	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010191	80 ab		bra $01013e			bra 	_ELGotAtom
.010193					_ELSyntax
.010193	82 31 02	brl $0103c7			brl 	SyntaxError
.010196					_ELStringConstant:
.010196	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010199	f0 f8		beq $010193			beq 	_ELSyntax
.01019b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01019d	1a		inc a				inc 	a
.01019e	1a		inc a				inc 	a
.01019f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101a1	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101a5	18		clc				clc 								; add to string constant.
.0101a6	65 06		adc $06				adc 	DCodePtr
.0101a8	85 06		sta $06				sta 	DCodePtr
.0101aa	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101ac	09 00 80	ora #$8000			ora 	#$8000
.0101af	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101b1	80 8b		bra $01013e			bra 	_ELGotAtom
.0101b3					_ELUnaryKeyword:
.0101b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101b5	a8		tay				tay 								; put the token in Y.
.0101b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101b8	e6 06		inc $06				inc 	DCodePtr
.0101ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101c0	f0 a7		beq $010169			beq 	_ELExecuteY					; go back and execute it
.0101c2	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101c5	d0 11		bne $0101d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101c7	20 fe 01	jsr $0101fe			jsr 	EvaluateNext 				; evaluate the expression
.0101ca	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101cd					_ELCopy:
.0101cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101d1	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101d3	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101d5	82 66 ff	brl $01013e			brl 	_ELGotAtom 					; and continue.
.0101d8					_ELUnaryOperator:
.0101d8	5a		phy				phy 								; save the operator on the stack.
.0101d9	e8		inx				inx 								; this is like evaluate next
.0101da	e8		inx				inx
.0101db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101de	20 01 01	jsr $010101			jsr 	EvaluateLevel
.0101e1	ca		dex				dex 								; unwind the stack.
.0101e2	ca		dex				dex
.0101e3	68		pla				pla 								; restore the unary operator.
.0101e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101e7	f0 03		beq $0101ec			beq 	_ELMinus
.0101e9	4c c7 03	jmp $0103c7			jmp 	SyntaxError
.0101ec					_ELMinus:
.0101ec	38		sec				sec 								; do the negation calculation.
.0101ed	a9 00 00	lda #$0000			lda 	#0
.0101f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101f4	a9 00 00	lda #$0000			lda 	#0
.0101f7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101f9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101fb	82 40 ff	brl $01013e			brl 	_ELGotAtom					; and continue.
.0101fe					EvaluateNext:
.0101fe	e8		inx				inx
.0101ff	e8		inx				inx
.010200	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010203	20 01 01	jsr $010101			jsr 	EvaluateLevel
.010206	ca		dex				dex
.010207	ca		dex				dex
.010208	60		rts				rts
.010209					EvaluateInteger:
.010209	20 fb 00	jsr $0100fb			jsr 	Evaluate
.01020c	b0 01		bcs $01020f			bcs 	EIType
.01020e	60		rts				rts
.01020f					EIType:
.01020f	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010212	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01021a	78 70 65 63 74 65 64 00
.010222					EvaluateNextInteger:
.010222	20 fe 01	jsr $0101fe			jsr 	EvaluateNext
.010225	b0 e8		bcs $01020f			bcs 	EIType
.010227	60		rts				rts
.010228					EvaluateString:
.010228	20 fb 00	jsr $0100fb			jsr 	Evaluate
.01022b	90 01		bcc $01022e			bcc 	ESType
.01022d	60		rts				rts
.01022e					ESType:
.01022e	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010231	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010239	78 70 65 63 74 65 64 00
.010241					EvaluateNextString:
.010241	20 fe 01	jsr $0101fe			jsr 	EvaluateNext
.010244	90 e8		bcc $01022e			bcc 	ESType
.010246	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010247					VariableAccessExpression:
.010247	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010249	48		pha				pha
.01024a	20 88 02	jsr $010288			jsr 	VariableFind 				; try to find the variables
.01024d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01024f	90 23		bcc $010274			bcc 	_VANError
.010251	68		pla				pla 								; get and save that first token
.010252	48		pha				pha
.010253	a8		tay				tay 								; put first token in Y.
.010254	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010257	f0 07		beq $010260			beq 	_VANNotArray
.010259	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01025b	20 ff 02	jsr $0102ff			jsr 	VariableSubscript			; index calculation
.01025e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010260					_VANNotArray:
.010260	68		pla				pla 								; get the token back.
.010261	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010264	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010267	38		sec				sec 								; set up return string.
.010268	f0 06		beq $010270			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01026a	18		clc				clc 								; returning a number, read high data word
.01026b	a0 02 00	ldy #$0002			ldy 	#2
.01026e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010270					_VANLoadLower:
.010270	a8		tay				tay 								; put A into Y (this is the high byte)
.010271	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010273	60		rts				rts
.010274					_VANError:
.010274	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010277	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01027f	20 75 6e 6b 6e 6f 77 6e 00
.010288					VariableFind:
.010288	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01028a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01028d	90 5c		bcc $0102eb			bcc 	_VFError
.01028f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010292	b0 11		bcs $0102a5			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010294	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010297	3a		dec a				dec 	a 							; now 0-25
.010298	0a		asl a				asl 	a 							; x 4 and clear carry
.010299	0a		asl a				asl 	a
.01029a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01029d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01029f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102a1	e6 06		inc $06				inc 	DCodePtr
.0102a3	38		sec				sec 								; return with carry set.
.0102a4	60		rts				rts
.0102a5					_VFSlowVariable:
.0102a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102a7	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102aa	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102ab	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102ac	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102af	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102b1	85 08		sta $08				sta 	DTemp1
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102b5	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102b8	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102b9	65 08		adc $08				adc 	DTemp1
.0102bb	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102bd	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102bf					_VFNext:
.0102bf	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102c1	f0 26		beq $0102e9			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102c3	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102c5	a8		tay				tay 								; read the address of the name at $0002,y
.0102c6	b9 02 00	lda $0002,y			lda 	$0002,y
.0102c9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102cb	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102ce					_VFCompare:
.0102ce	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102d0	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102d2	d0 eb		bne $0102bf			bne 	_VFNext 					; if not, go to the next one.
.0102d4	c8		iny				iny 								; advance token pointer
.0102d5	c8		iny				iny
.0102d6	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102d9	d0 f3		bne $0102ce			bne 	_VFCompare
.0102db	98		tya				tya 								; this is the length of the word.
.0102dc	18		clc				clc 								; so we add it to the code pointer
.0102dd	65 06		adc $06				adc 	DCodePtr
.0102df	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102e1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102e3	18		clc				clc 								; four on is the actual data
.0102e4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102e7	38		sec				sec 								; return with CS indicating success
.0102e8	60		rts				rts
.0102e9					_VFFail:
.0102e9	18		clc				clc
.0102ea	60		rts				rts
.0102eb					_VFError:
.0102eb	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0102ee	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102f6	76 61 72 69 61 62 6c 65 00
.0102ff					VariableSubscript:
.0102ff	48		pha				pha		 							; save variable address on stack.
.010300	20 22 02	jsr $010222			jsr		EvaluateNextInteger 		; get the subscript
.010303	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; skip right bracket.
.010306	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010309	d0 10		bne $01031b			bne 	_VANSubscript
.01030b	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01030d	f0 02		beq $010311			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01030f	b0 0a		bcs $01031b			bcs 	_VANSubscript
.010311					_VANSubOkay:
.010311	0a		asl a				asl 	a 							; double lsword
.010312	0a		asl a				asl 	a 							; and again, also clears carry.
.010313	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010315	68		pla				pla 								; restore DVariablePtr
.010316	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010317	1a		inc a				inc 	a
.010318	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01031a	60		rts				rts
.01031b					_VANSubscript:
.01031b	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>01031e	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010326	79 20 53 75 62 73 63 72 69 70 74 00
.010332					VariableCreate:
.010332	48		pha				pha 								; save count.
.010333	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010336	29 00 20	and #$2000			and 	#IDTypeMask
.010339	f0 06		beq $010341			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01033b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01033e	18		clc				clc
.01033f	65 02		adc $02				adc 	DBaseAddress
.010341					_VCIsInteger:
.010341	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010343	68		pla				pla 								; restore count
.010344	48		pha				pha
.010345	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010346	0a		asl a				asl 	a 							; 2 x # items.
.010347	0a		asl a				asl 	a 							; 4 x # items.
.010348					_VCNotSingle:
.010348	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01034a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01034d	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010350	f0 04		beq $010356			beq 	_VCNotArray
.010352	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010354	e6 08		inc $08				inc 	DTemp1
.010356					_VCNotArray:
.010356	5a		phy				phy 								; save address of token on stack.
.010357	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01035a	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.01035c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01035e	18		clc				clc 								; add 4 for link and name.
.01035f	69 04 00	adc #$0004			adc 	#4
.010362	65 08		adc $08				adc 	DTemp1 						; add memory required
.010364	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010366	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010368					_VCErase:
.010368	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01036a	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01036d	c8		iny				iny
.01036e	c8		iny				iny
.01036f	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010371	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010373	d0 f3		bne $010368			bne 	_VCErase
.010375	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010377	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010379	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01037c	68		pla				pla 								; restore the token address
.01037d	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010380	68		pla				pla 								; restore count and store.
.010381	99 04 00	sta $0004,y			sta 	$0004,y
.010384					_VCNotArray2:
.010384	98		tya				tya 								; update the head link
.010385	92 20		sta ($20)			sta 	(DHashTablePtr)
.010387	18		clc				clc 								; advance pointer to the data bit.
.010388	69 04 00	adc #$0004			adc 	#4
.01038b	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01038c					ErrorHandler:
.01038c	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01038e	fa		plx				plx 								; address of error message -1
.01038f	e8		inx				inx 								; error message.
.010390	20 33 04	jsr $010433			jsr 	PrintROMMessage 			; print message in ROM
.010393	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010395	f0 15		beq $0103ac			beq 	_EHEndMessage
.010397	a2 b1 03	ldx #$03b1			ldx 	#_EHAt & $FFFF 				; print " at "
.01039a	20 33 04	jsr $010433			jsr 	PrintROMMessage
.01039d	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01039f	a0 00 00	ldy #$0000			ldy 	#0
.0103a2	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103a5	20 95 09	jsr $010995			jsr 	ConvertToString 			; convert and print it.
.0103a8	a8		tay				tay
.0103a9	20 47 04	jsr $010447			jsr 	PrintBASICString
.0103ac					_EHEndMessage:
.0103ac	20 2e 0e	jsr $010e2e			jsr 	HWNewLine
.0103af	80 fe		bra $0103af	_EH1:	bra 	_EH1
>0103b1	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103b6					IllegalToken:
.0103b6	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0103b9	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103c1	54 6f 6b 65 6e 00
.0103c7					SyntaxError:
.0103c7	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0103ca	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103d2	72 72 6f 72 00
.0103d7					ExpectToken:
.0103d7	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103d9	d0 05		bne $0103e0			bne 	_CTKError					; error if not
.0103db	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103dd	e6 06		inc $06				inc 	DCodePtr
.0103df	60		rts				rts
.0103e0					_CTKError:
.0103e0	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0103e3	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103eb	74 6f 6b 65 6e 00
.0103f1					ExpectRightBracket:
.0103f1	48		pha				pha
.0103f2	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.0103f5	20 d7 03	jsr $0103d7			jsr 	ExpectToken
.0103f8	68		pla				pla
.0103f9	60		rts				rts
.0103fa					ExpectComma:
.0103fa	48		pha				pha
.0103fb	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103fe	20 d7 03	jsr $0103d7			jsr 	ExpectToken
.010401	68		pla				pla
.010402	60		rts				rts
.010403					CheckBothNumeric:
.010403	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010405	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010407	30 01		bmi $01040a			bmi 	_CBNFail 					; need to both be zero in bit 15
.010409	60		rts				rts
.01040a					_CBNFail:
.01040a	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>01040d	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010415	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010423					ResetTypeInteger:
.010423	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010425	29 ff 7f	and #$7fff			and 	#$7FFF
.010428	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01042a	60		rts				rts
.01042b					ResetTypeString:
.01042b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01042d	09 00 80	ora #$8000			ora 	#$8000
.010430	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010432	60		rts				rts
.010433					PrintROMMessage:
.010433	48		pha				pha
.010434	da		phx				phx
.010435					_PRMLoop:
.010435	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010439	29 ff 00	and #$00ff			and 	#$00FF
.01043c	f0 06		beq $010444			beq 	_PRMExit
.01043e	20 0c 0e	jsr $010e0c			jsr 	HWPrintChar
.010441	e8		inx				inx
.010442	80 f1		bra $010435			bra 	_PRMLoop
.010444					_PRMExit:
.010444	fa		plx				plx
.010445	68		pla				pla
.010446	60		rts				rts
.010447					PrintBASICString:
.010447	48		pha				pha
.010448	da		phx				phx
.010449	5a		phy				phy
.01044a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01044d	29 ff 00	and #$00ff			and 	#$00FF
.010450	f0 0b		beq $01045d			beq 	_PBSExit 					; null string
.010452	aa		tax				tax
.010453					_PBSLoop:
.010453	c8		iny				iny
.010454	b9 00 00	lda $0000,y			lda 	$0000,y
.010457	20 0c 0e	jsr $010e0c			jsr 	HWPrintChar
.01045a	ca		dex				dex
.01045b	d0 f6		bne $010453			bne 	_PBSLoop
.01045d					_PBSExit:
.01045d	7a		ply				ply
.01045e	fa		plx				plx
.01045f	68		pla				pla
.010460	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010461					StringTempAllocate:
.010461	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010464	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010467	18		clc				clc 								; this adds one, for the length.
.010468	65 16		adc $16				adc 	DTempStringPointer
.01046a	85 16		sta $16				sta 	DTempStringPointer
.01046c	48		pha				pha
.01046d	a9 00 00	lda #$0000			lda 	#$0000
.010470	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010472	92 16		sta ($16)			sta		(DTempStringPointer)
.010474	c2 20		rep #$20			rep 	#$20
.010476	68		pla				pla
.010477	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010479	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01047b	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01047d	60		rts				rts
.01047e					StringCreateCopy:
.01047e	a8		tay				tay 								; put pointer to string in Y
.01047f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010482	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010485	f0 17		beq $01049e			beq 	_SCCExit 					; do nothing if length zero.
.010487	da		phx				phx 								; save X and put the character count in X
.010488	aa		tax				tax
.010489					_SCCCopy:
.010489	c8		iny				iny 								; advance and read (first time skips length)
.01048a	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01048c	b9 00 00	lda $0000,y			lda 	$0000,y
.01048f	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010491	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010493	1a		inc a				inc 	a
.010494	92 18		sta ($18)			sta 	(DStartTempString)
.010496	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010498	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01049a	ca		dex				dex 								; do X times
.01049b	d0 ec		bne $010489			bne 	_SCCCopy
.01049d	fa		plx				plx
.01049e					_SCCExit:
.01049e	60		rts				rts
.01049f					StringMakeConcrete:
.01049f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104a2	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104a4	90 0f		bcc $0104b5			bcc 	_SMCExit
.0104a6	85 08		sta $08				sta 	DTemp1 						; source
.0104a8	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104aa	29 ff 00	and #$00ff			and 	#$00FF
.0104ad	d0 07		bne $0104b6			bne 	_SMCNonZero 				; if not "" skip.
.0104af	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104b2	18		clc				clc
.0104b3	65 02		adc $02				adc 	DBaseAddress
.0104b5					_SMCExit:
.0104b5	60		rts				rts
.0104b6					_SMCNonZero:
.0104b6	48		pha				pha 								; save on stack.
.0104b7	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104ba	18		clc				clc
.0104bb	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104be	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104c0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104c2	85 0c		sta $0c				sta 	DTemp2 						; target
.0104c4	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104c5	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104c7					_SMCLoop:
.0104c7	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104c9	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104cb	88		dey				dey
.0104cc	10 f9		bpl $0104c7			bpl 	_SMCLoop
.0104ce	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104d0	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104d2	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0104d3					Binary_Add:
.0104d3	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104d5	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104d7	30 12		bmi $0104eb		bmi 	_BATypeError
.0104d9	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104db	30 3f		bmi $01051c		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104dd	18		clc			clc
.0104de	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104e0	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104e2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e4	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e6	75 12		adc $12,x		adc 	EXSValueH+2,x
.0104e8	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104ea	60		rts			rts
.0104eb					_BATypeError:
.0104eb	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0104ee	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0104f6	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010506	65 73 00
.010509					_BALengthError:
.010509	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>01050c	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010514	6f 6f 20 6c 6f 6e 67 00
.01051c					_BAConcatenateString:
.01051c	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01051e	85 08		sta $08			sta 	DTemp1
.010520	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010522	85 0c		sta $0c			sta 	DTemp2
.010524	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010526	18		clc			clc 										; work out the total length
.010527	b2 08		lda ($08)		lda 	(DTemp1)
.010529	72 0c		adc ($0c)		adc 	(DTemp2)
.01052b	b0 14		bcs $010541		bcs 	_BAConcatLengthError 				; string is too long.
.01052d	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01052f	20 61 04	jsr $010461		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010532	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010534	74 10		stz $10,x		stz 	EXSValueH+0,x
.010536	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010538	20 7e 04	jsr $01047e		jsr 	StringCreateCopy
.01053b	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01053d	20 7e 04	jsr $01047e		jsr 	StringCreateCopy
.010540	60		rts			rts
.010541					_BAConcatLengthError:
.010541	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010544	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01054c	6f 6f 20 6c 6f 6e 67 00
.010554					Binary_Subtract:
.010554	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.010557	38		sec			sec
.010558	b5 00		lda $00,x		lda		EXSValueL+0,x
.01055a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01055c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01055e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010560	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010562	95 10		sta $10,x		sta 	EXSValueH+0,x
.010564	60		rts			rts
.010565					Binary_ShiftRight:
.010565	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.010568	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01056a	29 3f 00	and #$003f		and 	#63
.01056d	f0 07		beq $010576		beq		_Binary_SRExit
.01056f					_Binary_SRLoop:
.01056f	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010571	76 00		ror $00,x		ror 	EXSValueL+0,x
.010573	3a		dec a			dec 	a
.010574	d0 f9		bne $01056f		bne 	_Binary_SRLoop
.010576					_Binary_SRExit:
.010576	60		rts			rts
.010577					Binary_ShiftLeft:
.010577	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.01057a	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01057c	29 3f 00	and #$003f		and 	#63
.01057f	f0 07		beq $010588		beq		_Binary_SLExit
.010581					_Binary_SLLoop:
.010581	16 00		asl $00,x		asl 	EXSValueL+0,x
.010583	36 10		rol $10,x		rol 	EXSValueH+0,x
.010585	3a		dec a			dec 	a
.010586	d0 f9		bne $010581		bne 	_Binary_SLLoop
.010588					_Binary_SLExit:
.010588	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010589					Binary_And:
.010589	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.01058c	b5 00		lda $00,x		lda		EXSValueL+0,x
.01058e	35 02		and $02,x		and 	EXSValueL+2,x
.010590	95 00		sta $00,x		sta 	EXSValueL+0,x
.010592	b5 10		lda $10,x		lda		EXSValueH+0,x
.010594	35 12		and $12,x		and 	EXSValueH+2,x
.010596	95 10		sta $10,x		sta 	EXSValueH+0,x
.010598	60		rts			rts
.010599					Binary_Or:
.010599	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.01059c	b5 00		lda $00,x		lda		EXSValueL+0,x
.01059e	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105a0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105a2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105a4	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105a6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105a8	60		rts			rts
.0105a9					Binary_Xor:
.0105a9	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.0105ac	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105ae	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105b0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105b2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105b4	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105b6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105b8	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0105b9					Binary_Equals:
.0105b9	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105bc	b0 0e		bcs $0105cc		bcs 	_BEString
.0105be	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105c0	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105c2	d0 4f		bne $010613		bne 	Compare_Fail
.0105c4	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c6	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105c8	d0 49		bne $010613		bne 	Compare_Fail
.0105ca	80 3f		bra $01060b		bra 	Compare_Succeed
.0105cc					_BEString:
.0105cc	09 00 00	ora #$0000		ora 	#$0000
.0105cf	f0 3a		beq $01060b		beq 	Compare_Succeed
.0105d1	80 40		bra $010613		bra 	Compare_Fail
.0105d3					Binary_NotEquals:
.0105d3	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d6	b0 0e		bcs $0105e6		bcs 	_BNEString
.0105d8	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105da	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105dc	d0 2d		bne $01060b		bne 	Compare_Succeed
.0105de	b5 10		lda $10,x		lda 	EXSValueH,x
.0105e0	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105e2	d0 27		bne $01060b		bne 	Compare_Succeed
.0105e4	80 2d		bra $010613		bra 	Compare_Fail
.0105e6					_BNEString:
.0105e6	09 00 00	ora #$0000		ora 	#$0000
.0105e9	d0 20		bne $01060b		bne 	Compare_Succeed
.0105eb	80 26		bra $010613		bra 	Compare_Fail
.0105ed					Binary_Less:
.0105ed	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105f0	b0 12		bcs $010604		bcs 	_BLString
.0105f2	38		sec			sec
.0105f3	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0105f5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105f7	b5 10		lda $10,x		lda 	EXSValueH,x
.0105f9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105fb	50 03		bvc $010600		bvc 	*+5
.0105fd	49 00 80	eor #$8000		eor 	#$8000
.010600	30 09		bmi $01060b		bmi 	Compare_Succeed
.010602	80 0f		bra $010613		bra 	Compare_Fail
.010604					_BLString:
.010604	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010607	f0 02		beq $01060b		beq 	Compare_Succeed
.010609	80 08		bra $010613		bra 	Compare_Fail
.01060b					Compare_Succeed:
.01060b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01060e	95 00		sta $00,x		sta 	EXSValueL,x
.010610	95 10		sta $10,x		sta 	EXSValueH,x
.010612	60		rts			rts
.010613					Compare_Fail:
.010613	74 00		stz $00,x		stz 	EXSValueL,x
.010615	74 10		stz $10,x		stz 	EXSValueH,x
.010617	60		rts			rts
.010618					Binary_GreaterEqual:
.010618	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01061b	b0 12		bcs $01062f		bcs 	_BGEString
.01061d	38		sec			sec
.01061e	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010620	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010622	b5 10		lda $10,x		lda 	EXSValueH,x
.010624	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010626	50 03		bvc $01062b		bvc 	*+5
.010628	49 00 80	eor #$8000		eor 	#$8000
.01062b	10 de		bpl $01060b		bpl 	Compare_Succeed
.01062d	80 e4		bra $010613		bra 	Compare_Fail
.01062f					_BGEString:
.01062f	09 00 00	ora #$0000		ora 	#$0000
.010632	10 d7		bpl $01060b		bpl 	Compare_Succeed
.010634	80 dd		bra $010613		bra 	Compare_Fail
.010636					Binary_LessEqual:
.010636	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010639	b0 12		bcs $01064d		bcs 	_BLEString
.01063b	18		clc			clc 									; numeric <= signed
.01063c	b5 00		lda $00,x		lda 	EXSValueL,x
.01063e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010640	b5 10		lda $10,x		lda 	EXSValueH,x
.010642	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010644	50 03		bvc $010649		bvc 	*+5
.010646	49 00 80	eor #$8000		eor 	#$8000
.010649	30 c0		bmi $01060b		bmi 	Compare_Succeed
.01064b	80 c6		bra $010613		bra 	Compare_Fail
.01064d					_BLEString:
.01064d	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010650	d0 b9		bne $01060b		bne 	Compare_Succeed
.010652	80 bf		bra $010613		bra 	Compare_Fail
.010654					Binary_Greater:
.010654	20 72 06	jsr $010672		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010657	b0 12		bcs $01066b		bcs 	_BGString
.010659	18		clc			clc 									; numeric > signed
.01065a	b5 00		lda $00,x		lda 	EXSValueL,x
.01065c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01065e	b5 10		lda $10,x		lda 	EXSValueH,x
.010660	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010662	50 03		bvc $010667		bvc 	*+5
.010664	49 00 80	eor #$8000		eor 	#$8000
.010667	10 a2		bpl $01060b		bpl 	Compare_Succeed
.010669	80 a8		bra $010613		bra 	Compare_Fail
.01066b					_BGString:
.01066b	c9 01 00	cmp #$0001		cmp 	#$0001
.01066e	f0 9b		beq $01060b		beq 	Compare_Succeed
.010670	80 a1		bra $010613		bra 	Compare_Fail
.010672					CompareTypeCheck:
.010672	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010674	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010676	30 06		bmi $01067e		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010678	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.01067a	30 1c		bmi $010698		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01067c	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01067d	60		rts			rts
.01067e					_CTCFail:
.01067e	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010681	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010689	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010698					_CTCStringCompare:
.010698	20 23 04	jsr $010423		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01069b	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01069d	85 08		sta $08			sta 	DTemp1
.01069f	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106a1	85 0c		sta $0c			sta 	DTemp2
.0106a3	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106a6	a8		tay			tay
.0106a7	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106a9	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106ab	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106ad	90 02		bcc $0106b1		bcc 	_CTCSmallest
.0106af	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106b1					_CTCSmallest:
.0106b1	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106b3					_CTCCompare:
.0106b3	c8		iny			iny 									; look at next character (done first, first char is size)
.0106b4	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106b6	30 16		bmi $0106ce		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106b8	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106ba	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106bc	f0 f5		beq $0106b3		beq 	_CTCCompare 					; if zero, try the next character.
.0106be	b0 07		bcs $0106c7		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106c0					_CTCLess:
.0106c0	c2 20		rep #$20		rep 	#$20
.0106c2	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106c5	80 14		bra $0106db		bra 	_CTCExit
.0106c7					_CTCGreater:
.0106c7	c2 20		rep #$20		rep 	#$20
.0106c9	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106cc	80 0d		bra $0106db		bra 	_CTCExit
.0106ce					_CTCEqualSoFar:
.0106ce	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106d0	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106d2	90 ec		bcc $0106c0		bcc 	_CTCLess
.0106d4	d0 f1		bne $0106c7		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106d6	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106d8	a9 00 00	lda #$0000		lda 	#$0000
.0106db					_CTCExit:
.0106db	38		sec			sec 									; return with CS indicating string comparison.
.0106dc	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0106dd					Binary_Divide:
.0106dd	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.0106e0	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106e2	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106e4	d0 14		bne $0106fa		bne 	_BinaryDivide_Ok
.0106e6	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0106e9	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0106f1	20 62 79 20 7a 65 72 6f 00
.0106fa					_BinaryDivide_Ok:
.0106fa	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0106fc	64 0a		stz $0a			stz 	DTemp1+2
.0106fe	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010700	5a		phy			phy 										; save Y (bit counter)
.010701	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010703	10 07		bpl $01070c		bpl 	_BinaryDivide_RightDone
.010705	e8		inx			inx
.010706	e8		inx			inx
.010707	20 42 07	jsr $010742		jsr 	Binary_DivNegate
.01070a	ca		dex			dex
.01070b	ca		dex			dex
.01070c					_BinaryDivide_RightDone:
.01070c	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01070e	10 03		bpl $010713		bpl 	_BinaryDivide_LeftDone
.010710	20 42 07	jsr $010742		jsr 	Binary_DivNegate
.010713					_BinaryDivide_LeftDone:
.010713	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010716					_BinaryDivide_Loop:
.010716	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010718	36 10		rol $10,x		rol 	EXSValueH+0,x
.01071a	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01071c	26 0a		rol $0a			rol 	DTemp1+2
.01071e	38		sec			sec											; calculate A-M
.01071f	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010721	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010723	85 0c		sta $0c			sta 	DTemp2
.010725	a5 0a		lda $0a			lda 	DTemp1+2
.010727	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010729	90 08		bcc $010733		bcc 	_Binary_NoSubract 					; if A < M skip this
.01072b	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01072d	a5 0c		lda $0c			lda 	DTemp2
.01072f	85 08		sta $08			sta 	DTemp1+0
.010731	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010733					_Binary_NoSubract:
.010733	88		dey			dey 										; do it 32 times.
.010734	d0 e0		bne $010716		bne 	_BinaryDivide_Loop
.010736					_BinaryDivide_Exit:
.010736	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010738	29 01 00	and #$0001		and 	#1
.01073b	f0 03		beq $010740		beq 	_BinaryDivide_Exit2
.01073d	20 42 07	jsr $010742		jsr 	Binary_DivNegate
.010740					_BinaryDivide_Exit2:
.010740	7a		ply			ply 										; restore Y
.010741	60		rts			rts
.010742					Binary_DivNegate:
.010742	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010744	38		sec			sec 										; negate the value at stack X.
.010745	a9 00 00	lda #$0000		lda 	#$0000
.010748	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01074a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01074c	a9 00 00	lda #$0000		lda 	#$0000
.01074f	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010751	95 10		sta $10,x		sta 	EXSValueH+0,x
.010753	60		rts			rts
.010754					Binary_Modulus:
.010754	20 dd 06	jsr $0106dd		jsr 	Binary_Divide 						; do the divide
.010757	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010759	95 00		sta $00,x		sta 	EXSValueL+0,x
.01075b	a5 0a		lda $0a			lda 	DTemp1+2
.01075d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01075f	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010760					Binary_Multiply:
.010760	20 03 04	jsr $010403		jsr 	CheckBothNumeric 					; check both values are numeric
.010763	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010765	85 08		sta $08			sta 	DTemp1
.010767	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010769	85 0a		sta $0a			sta		DTemp1+2
.01076b	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01076d	74 10		stz $10,x		stz 	EXSValueH+0,x
.01076f					_BinaryMultiply_Loop:
.01076f	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010771	05 0a		ora $0a			ora 	DTemp1+2
.010773	f0 1e		beq $010793		beq 	_BinaryMultiply_Exit
.010775	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010777	29 01 00	and #$0001		and 	#1
.01077a	f0 0d		beq $010789		beq 	_BinaryMultiply_NoAdd
.01077c	18		clc			clc 										; add multiplicand to result.
.01077d	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01077f	75 02		adc $02,x		adc 	EXSValueL+2,x
.010781	95 00		sta $00,x		sta 	EXSValueL+0,x
.010783	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010785	75 12		adc $12,x		adc 	EXSValueH+2,x
.010787	95 10		sta $10,x		sta 	EXSValueH+0,x
.010789					_BinaryMultiply_NoAdd:
.010789	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01078b	66 08		ror $08			ror 	DTemp1
.01078d	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01078f	36 12		rol $12,x		rol 	EXSValueH+2,x
.010791	80 dc		bra $01076f		bra 	_BinaryMultiply_Loop 				; go round again.
.010793					_BinaryMultiply_Exit:
.010793	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010794					Function_Len:
.010794	20 23 04	jsr $010423			jsr 	ResetTypeInteger 			; returns an integer
.010797	20 41 02	jsr $010241			jsr 	EvaluateNextString 			; get the value you are absoluting
.01079a	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; check )
.01079d	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01079f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107a2	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107a7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107a9	60		rts				rts
.0107aa					Function_Abs:
.0107aa	20 23 04	jsr $010423			jsr 	ResetTypeInteger 			; returns an integer
.0107ad	20 22 02	jsr $010222			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107b0	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; check )
.0107b3	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107b5	30 07		bmi $0107be			bmi 	_FAbsNegative 				; negate it if negative
.0107b7	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107b9	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107bb	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107bd	60		rts				rts
.0107be					_FAbsNegative:
.0107be	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107bf	a9 00 00	lda #$0000			lda 	#0
.0107c2	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107c4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107c6	a9 00 00	lda #$0000			lda 	#0
.0107c9	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107cb	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107cd	60		rts				rts
.0107ce					Function_Sgn:
.0107ce	20 23 04	jsr $010423			jsr 	ResetTypeInteger 			; returns integer
.0107d1	20 22 02	jsr $010222			jsr 	EvaluateNextInteger 		; get an integer
.0107d4	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; check )
.0107d7	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107d9	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107db	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107dd	30 07		bmi $0107e6			bmi 	_FSgnNegative 				; set to -1 if signed
.0107df	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107e1	f0 02		beq $0107e5			beq 	_FSgnExit
.0107e3	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107e5					_FSgnExit:
.0107e5	60		rts				rts
.0107e6					_FSgnNegative:
.0107e6	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0107e9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107eb	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107ed	60		rts				rts
.0107ee					Function_Random:
.0107ee	20 23 04	jsr $010423			jsr 	ResetTypeInteger
.0107f1	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0107f3	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0107f5	d0 0a		bne $010801			bne 	_Rnd_NotZero
.0107f7	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0107fa	85 10		sta $10				sta 	DRandom
.0107fc	a9 ea 00	lda #$00ea			lda 	#$EA
.0107ff	85 12		sta $12				sta 	DRandom+2
.010801					_Rnd_NotZero:
.010801	20 0c 08	jsr $01080c			jsr 	_Rnd_Process 				; call randomiser twice
.010804	95 10		sta $10,x			sta 	EXSValueH+0,x
.010806	20 0c 08	jsr $01080c			jsr 	_Rnd_Process
.010809	95 00		sta $00,x			sta 	EXSValueL+0,x
.01080b	60		rts				rts
.01080c					_Rnd_Process:
.01080c	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01080e	26 12		rol $12				rol 	DRandom+2
.010810	90 0e		bcc $010820			bcc 	_Rnd_Exit
.010812	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010814	49 54 d4	eor #$d454			eor 	#$D454
.010817	85 10		sta $10				sta 	DRandom
.010819	a5 12		lda $12				lda 	DRandom+2
.01081b	49 d5 55	eor #$55d5			eor 	#$55D5
.01081e	85 12		sta $12				sta 	DRandom+2
.010820					_Rnd_Exit:
.010820	a5 10		lda $10				lda 	DRandom
.010822	45 12		eor $12				eor 	DRandom+2
.010824	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010825					Function_VAL:
.010825	20 23 04	jsr $010423			jsr 	ResetTypeInteger 			; returns an integer
.010828	20 41 02	jsr $010241			jsr 	EvaluateNextString 			; get the value you are absoluting
.01082b	48		pha				pha 								; put string address on stack.
.01082c	20 3c 08	jsr $01083c			jsr 	VALGetBase 					; process , base (shared with STR$())
.01082f	7a		ply				ply 								; get string address back
.010830	da		phx				phx 								; save X on stack
.010831	aa		tax				tax 								; base in X
.010832	98		tya				tya 								; address in A
.010833	20 76 08	jsr $010876			jsr 	StringToInteger
.010836	fa		plx				plx 								; restore X
.010837	95 00		sta $00,x			sta 	EXSValueL+0,x
.010839	94 10		sty $10,x			sty 	EXSValueH+0,x
.01083b	60		rts				rts
.01083c					VALGetBase:
.01083c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.01083e	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010841	f0 07		beq $01084a			beq 	_VGBAlternate
.010843	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket			; expect ), and return 10.
.010846	a9 0a 00	lda #$000a			lda 	#10
.010849	60		rts				rts
.01084a					_VGBAlternate:
.01084a	20 fa 03	jsr $0103fa			jsr 	ExpectComma 				; skip comma.
.01084d	20 22 02	jsr $010222			jsr 	EvaluateNextInteger 		; get base
.010850	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010853	d0 0e		bne $010863			bne 	_VGBBadBase
.010855	c9 02 00	cmp #$0002			cmp 	#2
.010858	90 09		bcc $010863			bcc 	_VGBBadBase
.01085a	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.01085d	b0 04		bcs $010863			bcs 	_VGBBadBase
.01085f	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; get right bracket and return.
.010862	60		rts				rts
.010863					_VGBBadBase:
.010863	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010866	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>01086e	65 72 20 42 61 73 65 00
.010876					StringToInteger:
.010876	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010878	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.01087a	29 ff 00	and #$00ff			and 	#$00FF
.01087d	85 26		sta $26				sta 	DTemp3+2
.01087f	f0 6e		beq $0108ef			beq 	_STIError 					; if length zero it's bad.
.010881	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010883	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010885	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010887	64 0a		stz $0a				stz 	DTemp1+2
.010889	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01088b	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.01088e	48		pha				pha 								; push on stack
.01088f	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010892	d0 06		bne $01089a			bne 	_STILoop
.010894	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010896	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010898	f0 55		beq $0108ef			beq 	_STIError 					; if only - then error.
.01089a					_STILoop:
.01089a	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01089c	20 0e 09	jsr $01090e			jsr 	MultiplyTemp1ByA
.01089f	b2 24		lda ($24)			lda 	(DTemp3)
.0108a1	29 ff 00	and #$00ff			and 	#$00FF
.0108a4	20 ff 08	jsr $0108ff			jsr 	ConvertUpperCase
.0108a7	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108aa	90 43		bcc $0108ef			bcc 	_STIError
.0108ac	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108af	90 0e		bcc $0108bf			bcc 	_STIOkay1
.0108b1	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108b4	90 39		bcc $0108ef			bcc 	_STIError
.0108b6	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108b9	b0 34		bcs $0108ef			bcs 	_STIError
.0108bb	18		clc				clc 								; shift to correct range.
.0108bc	69 09 00	adc #$0009			adc 	#9
.0108bf					_STIOkay1:
.0108bf	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108c2	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108c4	b0 29		bcs $0108ef			bcs 	_STIError
.0108c6	18		clc				clc 								; add A to DTemp1
.0108c7	65 08		adc $08				adc 	DTemp1
.0108c9	85 08		sta $08				sta 	DTemp1
.0108cb	90 02		bcc $0108cf			bcc 	_STINoCarry
.0108cd	e6 0a		inc $0a				inc 	DTemp1+2
.0108cf					_STINoCarry:
.0108cf	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108d1	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108d3	d0 c5		bne $01089a			bne 	_STILoop 					; loop back.
.0108d5	68		pla				pla 								; get optional minus bac
.0108d6	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108d9	d0 0f		bne $0108ea			bne 	_STINotNegative 			; handle the negative character
.0108db	38		sec				sec 								; negate DTemp1
.0108dc	a9 00 00	lda #$0000			lda 	#0
.0108df	e5 08		sbc $08				sbc 	DTemp1
.0108e1	85 08		sta $08				sta 	DTemp1
.0108e3	a9 00 00	lda #$0000			lda 	#0
.0108e6	e5 0a		sbc $0a				sbc 	DTemp1+2
.0108e8	85 0a		sta $0a				sta 	DTemp1+2
.0108ea					_STINotNegative:
.0108ea	a5 08		lda $08				lda 	DTemp1 						; get the result
.0108ec	a4 0a		ldy $0a				ldy 	DTemp1+2
.0108ee	60		rts				rts
.0108ef					_STIError:
.0108ef	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>0108f2	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>0108fa	74 61 6e 74 00
.0108ff					ConvertUpperCase:
.0108ff	c9 61 00	cmp #$0061			cmp 	#'a'
.010902	90 09		bcc $01090d			bcc 	_CUCExit
.010904	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010907	b0 04		bcs $01090d			bcs 	_CUCExit
.010909	38		sec				sec
.01090a	e9 20 00	sbc #$0020			sbc 	#32
.01090d					_CUCExit:
.01090d	60		rts				rts
.01090e					MultiplyTemp1ByA:
.01090e	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010911	f0 56		beq $010969			beq 	_MT1_16
.010913	c9 0a 00	cmp #$000a			cmp 	#10
.010916	f0 33		beq $01094b			beq 	_MT1_10
.010918	c9 08 00	cmp #$0008			cmp 	#8
.01091b	f0 50		beq $01096d			beq 	_MT1_8
.01091d	c9 02 00	cmp #$0002			cmp 	#2
.010920	f0 53		beq $010975			beq 	_MT1_2
.010922					_MTGeneral:
.010922	da		phx				phx
.010923	aa		tax				tax 								; multiplier in X
.010924	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010926	85 0c		sta $0c				sta 	DTemp2
.010928	a5 0a		lda $0a				lda 	DTemp1+2
.01092a	85 0e		sta $0e				sta 	DTemp2+2
.01092c	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.01092e	64 0a		stz $0a				stz 	DTemp1+2
.010930					_MTLoop:
.010930	8a		txa				txa 								; shift X right into C
.010931	4a		lsr a				lsr 	a
.010932	aa		tax				tax
.010933	90 0d		bcc $010942			bcc 	_MTNoAdd
.010935	18		clc				clc
.010936	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010938	65 0c		adc $0c				adc 	DTemp2
.01093a	85 08		sta $08				sta 	DTemp1
.01093c	a5 0a		lda $0a				lda 	DTemp1+2
.01093e	65 0e		adc $0e				adc 	DTemp2+2
.010940	85 0a		sta $0a				sta 	DTemp1+2
.010942					_MTNoAdd:
.010942	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010944	26 0e		rol $0e				rol 	DTemp2+2
.010946	8a		txa				txa 								; until multiplier is zero.
.010947	d0 e7		bne $010930			bne 	_MTLoop
.010949					_MTGExit:
.010949	fa		plx				plx 								; restore X
.01094a	60		rts				rts 								; and exit
.01094b					_MT1_10:
.01094b	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.01094d	48		pha				pha
.01094e	a5 08		lda $08				lda 	DTemp1
.010950	48		pha				pha
.010951	06 08		asl $08				asl 	DTemp1						; x 4
.010953	26 0a		rol $0a				rol 	DTemp1+2
.010955	06 08		asl $08				asl 	DTemp1
.010957	26 0a		rol $0a				rol 	DTemp1+2
.010959	68		pla				pla 								; add saved value, x 5
.01095a	18		clc				clc
.01095b	65 08		adc $08				adc 	DTemp1
.01095d	85 08		sta $08				sta 	DTemp1
.01095f	68		pla				pla
.010960	65 0a		adc $0a				adc 	DTemp1+2
.010962	85 0a		sta $0a				sta 	DTemp1+2
.010964	06 08		asl $08				asl 	DTemp1
.010966	26 0a		rol $0a				rol 	DTemp1+2
.010968	60		rts				rts
.010969					_MT1_16:
.010969	06 08		asl $08				asl 	DTemp1
.01096b	26 0a		rol $0a				rol 	DTemp1+2
.01096d					_MT1_8:
.01096d	06 08		asl $08				asl 	DTemp1
.01096f	26 0a		rol $0a				rol 	DTemp1+2
.010971					_MT1_4:
.010971	06 08		asl $08				asl 	DTemp1
.010973	26 0a		rol $0a				rol 	DTemp1+2
.010975					_MT1_2
.010975	06 08		asl $08				asl 	DTemp1
.010977	26 0a		rol $0a				rol 	DTemp1+2
.010979	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.01097a					Function_Str:
.01097a	20 2b 04	jsr $01042b			jsr 	ResetTypeString 			; returns a string.
.01097d	20 22 02	jsr $010222			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010980	48		pha				pha 								; save YA on the stack
.010981	5a		phy				phy
.010982	20 3c 08	jsr $01083c			jsr 	VALGetBase 					; process , base (shared with STR$())
.010985	85 14		sta $14				sta 	DSignCount
.010987	7a		ply				ply 								; YA is the number
.010988	68		pla				pla
.010989	da		phx				phx
.01098a	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.01098c	20 95 09	jsr $010995			jsr 	ConvertToString 			; convert it to a string.
.01098f	fa		plx				plx 								; restore X
.010990	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010992	74 10		stz $10,x			stz 	EXSValueH+0,x
.010994	60		rts				rts
.010995					ConvertToString:
.010995	da		phx				phx 								; save X
.010996	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010998	84 26		sty $26				sty 	DTemp3+2
.01099a	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.01099c	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.01099f	20 61 04	jsr $010461			jsr 	StringTempAllocate 			; allocate space for return string.
.0109a2	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109a4	10 15		bpl $0109bb			bpl 	_CTSNotNegative
.0109a6	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109a9	20 23 0a	jsr $010a23			jsr 	CTSOutputA
.0109ac	38		sec				sec 								; negate DTemp3
.0109ad	a9 00 00	lda #$0000			lda 	#0
.0109b0	e5 24		sbc $24				sbc 	DTemp3
.0109b2	85 24		sta $24				sta 	DTemp3
.0109b4	a9 00 00	lda #$0000			lda 	#0
.0109b7	e5 26		sbc $26				sbc 	DTemp3+2
.0109b9	85 26		sta $26				sta 	DTemp3+2
.0109bb					_CTSNotNegative:
.0109bb	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109be	48		pha				pha
.0109bf	a9 00 00	lda #$0000			lda 	#0
.0109c2	48		pha				pha
.0109c3	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109c5	85 08		sta $08				sta 	DTemp1
.0109c7	64 0a		stz $0a				stz 	DTemp1+2
.0109c9					_CTSMultiplySubtractor:
.0109c9	38		sec				sec
.0109ca	a5 24		lda $24				lda 	DTemp3
.0109cc	e5 08		sbc $08				sbc 	DTemp1
.0109ce	a5 26		lda $26				lda 	DTemp3+2
.0109d0	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109d2	90 0d		bcc $0109e1			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109d4	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109d6	48		pha				pha
.0109d7	a5 0a		lda $0a				lda 	DTemp1+2
.0109d9	48		pha				pha
.0109da	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109dc	20 0e 09	jsr $01090e			jsr 	MultiplyTemp1ByA
.0109df	80 e8		bra $0109c9			bra 	_CTSMultiplySubtractor
.0109e1					_CTSScaledUp:
.0109e1	7a		ply				ply 								; YA contains the previous divider.
.0109e2	68		pla				pla
.0109e3	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109e6	d0 05		bne $0109ed			bne 	_CTSHasDigit
.0109e8	c9 01 00	cmp #$0001			cmp 	#1 							;
.0109eb	f0 20		beq $010a0d			beq 	_CTSExit
.0109ed					_CTSHasDigit:
.0109ed	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0109ef	84 0e		sty $0e				sty 	DTemp2+2
.0109f1	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0109f4					_CTSSubLoop:
.0109f4	38		sec				sec 								; subtract subtractor from number
.0109f5	a5 24		lda $24				lda 	DTemp3
.0109f7	e5 0c		sbc $0c				sbc 	DTemp2
.0109f9	a8		tay				tay 								; intermediate in Y
.0109fa	a5 26		lda $26				lda 	DTemp3+2
.0109fc	e5 0e		sbc $0e				sbc 	DTemp2+2
.0109fe	90 07		bcc $010a07			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a00	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a02	84 24		sty $24				sty 	DTemp3
.010a04	e8		inx				inx 								; one more subtraction
.010a05	80 ed		bra $0109f4			bra 	_CTSSubLoop 				; try it again.
.010a07					_CTSFinishedSubtracting:
.010a07	8a		txa				txa 								; convert to ASCII.
.010a08	20 16 0a	jsr $010a16			jsr 	CTSOutputHexDigit 			; write that out.
.010a0b	80 d4		bra $0109e1			bra 	_CTSScaledUp
.010a0d					_CTSExit:
.010a0d	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a0f	20 16 0a	jsr $010a16			jsr 	CTSOutputHexDigit
.010a12	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a14	fa		plx				plx 								; restore X.
.010a15	60		rts				rts
.010a16					CTSOutputHexDigit:
.010a16	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a19	90 04		bcc $010a1f			bcc 	_CTSNotLetter
.010a1b	18		clc				clc
.010a1c	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a1f					_CTSNotLetter:
.010a1f	18		clc				clc
.010a20	69 30 00	adc #$0030			adc 	#48
.010a23					CTSOutputA:
.010a23	5a		phy				phy 								; save Y, set Y to current pointer
.010a24	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a26	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a29	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a2b	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a2d	1a		inc a				inc 	a
.010a2e	92 18		sta ($18)			sta 	(DStartTempString)
.010a30	c2 20		rep #$20			rep 	#$20
.010a32	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a34	7a		ply				ply 								; restore Y and exit.
.010a35	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a36					Function_Let:
.010a36	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a38	48		pha				pha
.010a39	20 88 02	jsr $010288			jsr 	VariableFind 				; find the variable
.010a3c	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a3e	b0 1c		bcs $010a5c			bcs 	_FLetFound 					; skip if found.
.010a40	68		pla				pla 								; get and push the first token again.
.010a41	48		pha				pha
.010a42	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a45	d0 57		bne $010a9e			bne 	_FLError					; arrays, so this causes an error.
.010a47	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a49	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a4c	20 32 03	jsr $010332			jsr 	VariableCreate 				; create it.
.010a4f	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a51					_FLSkipToken:
.010a51	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a53	e6 06		inc $06				inc 	DCodePtr
.010a55	e6 06		inc $06				inc 	DCodePtr
.010a57	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a5a	d0 f5		bne $010a51			bne 	_FLSkipToken
.010a5c					_FLetFound:
.010a5c	68		pla				pla 								; get and save the first token.
.010a5d	48		pha				pha
.010a5e	a8		tay				tay 								; put it in Y
.010a5f	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a62	f0 07		beq $010a6b			beq 	_FLetNotArray
.010a64	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a66	20 ff 02	jsr $0102ff			jsr 	VariableSubscript			; index calculation
.010a69	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a6b					_FLetNotArray:
.010a6b	7a		ply				ply 								; get the first token into Y
.010a6c	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a6e	48		pha				pha
.010a6f	5a		phy				phy 								; save the first token on the stack.
.010a70	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a73	20 d7 03	jsr $0103d7			jsr 	ExpectToken
.010a76	68		pla				pla 								; restore the first token.
.010a77	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a7a	d0 0f		bne $010a8b			bne 	_FLetString 				; skip if string.
.010a7c	20 09 02	jsr $010209			jsr 	EvaluateInteger 			; get an integer
.010a7f	7a		ply				ply 								; get address in Y
.010a80	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a82	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a85	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a87	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a8a	60		rts				rts
.010a8b					_FLetString:
.010a8b	20 28 02	jsr $010228			jsr 	EvaluateString 				; get a string.
.010a8e	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a90	20 9f 04	jsr $01049f			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010a93	7a		ply				ply 								; get address
.010a94	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a97	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010a9a	99 02 00	sta $0002,y			sta 	$0002,y
.010a9d	60		rts				rts
.010a9e					_FLError:
.010a9e	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010aa1	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010aa9	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010ab1					Function_PRINT:
.010ab1	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010ab3	f0 33		beq $010ae8			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010ab5	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010ab8	f0 2e		beq $010ae8			beq 	_FPRExitCR
.010aba	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010abd	f0 23		beq $010ae2			beq 	_FPRSkipLoop
.010abf	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010ac2	f0 1b		beq $010adf			beq 	_FPRNewLine
.010ac4	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010ac7	f0 11		beq $010ada			beq 	_FPRTab
.010ac9					_FPRExpression:
.010ac9	20 fb 00	jsr $0100fb			jsr 	Evaluate 					; evaluate a string or integer.
.010acc	b0 06		bcs $010ad4			bcs 	_FPRHaveString
.010ace	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ad1	20 95 09	jsr $010995			jsr 	ConvertToString
.010ad4					_FPRHaveString:
.010ad4	a8		tay				tay 								; print the basic String.
.010ad5	20 47 04	jsr $010447			jsr 	PrintBASICString
.010ad8	80 d7		bra $010ab1			bra 	Function_Print 				; and go round again.
.010ada					_FPRTab:
.010ada	20 41 0e	jsr $010e41			jsr 	HWTab
.010add	80 03		bra $010ae2			bra 	_FPRSkipLoop
.010adf					_FPRNewLine:
.010adf	20 2e 0e	jsr $010e2e			jsr 	HWNewLine
.010ae2					_FPRSkipLoop:
.010ae2	e6 06		inc $06				inc 	DCodePtr
.010ae4	e6 06		inc $06				inc 	DCodePtr
.010ae6	80 c9		bra $010ab1			bra 	Function_Print
.010ae8					_FPRExitCR:
.010ae8	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010aea	88		dey				dey
.010aeb	88		dey				dey
.010aec	b9 00 00	lda $0000,y			lda 	$0000,y
.010aef	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010af2	f0 08		beq $010afc			beq 	_FPRExit
.010af4	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010af7	f0 03		beq $010afc			beq 	_FPRExit
.010af9	20 2e 0e	jsr $010e2e			jsr 	HWNewLine 					; print a new line.
.010afc					_FPRExit:
.010afc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010afd					Function_GOTO:
.010afd	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010aff	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b02	90 2e		bcc $010b32			bcc 	_FGOFail
.010b04	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b07	b0 29		bcs $010b32			bcs 	_FGOFail
.010b09	38		sec				sec 								; convert to 0-32767
.010b0a	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010b0d	aa		tax				tax
.010b0e	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010b11	18		clc				clc
.010b12	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010b14	a8		tay				tay
.010b15					_FGOSearch:
.010b15	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010b18	f0 2b		beq $010b45			beq 	_FGOUnknown
.010b1a	8a		txa				txa 								; does it match line number.
.010b1b	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010b1e	f0 08		beq $010b28			beq 	_FGOFound 					; yes, then found.
.010b20	98		tya				tya 								; no follow the link
.010b21	18		clc				clc
.010b22	79 00 00	adc $0000,y			adc 	$0000,y
.010b25	a8		tay				tay
.010b26	80 ed		bra $010b15			bra 	_FGOSearch
.010b28					_FGOFound:
.010b28	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010b2a	98		tya				tya 								; Y + 4 is the code pointer.
.010b2b	18		clc				clc
.010b2c	69 04 00	adc #$0004			adc 	#4
.010b2f	85 06		sta $06				sta 	DCodePtr
.010b31	60		rts				rts									; and continue
.010b32					_FGOFail:
.010b32	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010b35	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010b3d	20 4e 75 6d 62 65 72 00
.010b45					_FGOUnknown:
.010b45	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010b48	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010b50	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010b5c					Function_GOSUB:
.010b5c	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010b5e	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010b60	18		clc				clc
.010b61	69 02 00	adc #$0002			adc 	#2
.010b64	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010b66	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010b68	95 04		sta $04,x			sta 	$04,x
.010b6a	a9 27 3e	lda #$3e27			lda 	#gosubTokenID 				; save gosub token at +6
.010b6d	95 06		sta $06,x			sta 	$06,x
.010b6f	8a		txa				txa 								; advance stack by 6.
.010b70	18		clc				clc
.010b71	69 06 00	adc #$0006			adc 	#6
.010b74	85 2a		sta $2a				sta 	DStack
.010b76	80 85		bra $010afd			bra 	Function_GOTO 				; and do a GOTO.
.010b78					Function_RETURN:
.010b78	a6 2a		ldx $2a				ldx 	DStack
.010b7a	b5 00		lda $00,x			lda 	$00,x
.010b7c	c9 27 3e	cmp #$3e27			cmp 	#gosubTokenID 				; check top token.
.010b7f	d0 11		bne $010b92			bne 	_FRetFail
.010b81	8a		txa				txa 								; unpick stack.
.010b82	38		sec				sec
.010b83	e9 06 00	sbc #$0006			sbc 	#6
.010b86	85 2a		sta $2a				sta 	DStack
.010b88	aa		tax				tax
.010b89	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010b8b	85 06		sta $06				sta 	DCodePtr
.010b8d	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010b8f	85 22		sta $22				sta 	DLineNumber
.010b91	60		rts				rts
.010b92					_FRetFail:
.010b92	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010b95	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010b9d	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.010baa					Function_REPEAT:
.010baa	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010bac	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010bae	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010bb0	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010bb2	95 04		sta $04,x			sta 	$04,x
.010bb4	a9 2a 3c	lda #$3c2a			lda 	#repeatTokenID 				; save repeat token at +6
.010bb7	95 06		sta $06,x			sta 	$06,x
.010bb9	8a		txa				txa 								; advance stack by 6.
.010bba	18		clc				clc
.010bbb	69 06 00	adc #$0006			adc 	#6
.010bbe	85 2a		sta $2a				sta 	DStack
.010bc0	60		rts				rts
.010bc1					Function_UNTIL:
.010bc1	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010bc3	b5 00		lda $00,x			lda 	$00,x
.010bc5	c9 2a 3c	cmp #$3c2a			cmp 	#repeatTokenID
.010bc8	d0 26		bne $010bf0			bne 	_FUNFail
.010bca	20 09 02	jsr $010209			jsr 	EvaluateInteger 			; .... until what.
.010bcd	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010bd0	d0 15		bne $010be7			bne 	_FUNExit
.010bd2	c9 00 00	cmp #$0000			cmp 	#0
.010bd5	d0 10		bne $010be7			bne 	_FUNExit
.010bd7	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010bd9	38		sec				sec
.010bda	e9 06 00	sbc #$0006			sbc 	#6
.010bdd	aa		tax				tax
.010bde	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010be0	85 06		sta $06				sta 	DCodePtr
.010be2	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010be4	85 22		sta $22				sta 	DLineNumber
.010be6	60		rts				rts
.010be7					_FUNExit:
.010be7	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010be9	38		sec				sec
.010bea	e9 06 00	sbc #$0006			sbc 	#6
.010bed	85 2a		sta $2a				sta 	DStack
.010bef	60		rts				rts
.010bf0					_FUNFail:
.010bf0	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010bf3	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010bfb	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010c08					Function_END:
.010c08	02 00		cop #$00			cop 	#0
.010c0a					Function_RUN:
.010c0a	20 62 0c	jsr $010c62			jsr 	Function_CLEAR 				; clear all variables.
.010c0d	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010c0f	18		clc				clc
.010c10	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010c13					_FRun_NextLineNumber:
.010c13	a8		tay				tay 								; put in Y
.010c14	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010c17	f0 ef		beq $010c08			beq 	Function_END 				; if zero, off the end of the program
.010c19	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010c1c	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010c1e	98		tya				tya 								; get address back
.010c1f	18		clc				clc 								; skip over the link/line number
.010c20	69 04 00	adc #$0004			adc 	#4
.010c23	85 06		sta $06				sta 	DCodePtr
.010c25					_FRun_NextInstruction:
.010c25	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010c28	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010c2a	38		sec				sec
.010c2b	e9 00 01	sbc #$0100			sbc 	#256
.010c2e	85 16		sta $16				sta 	DTempStringPointer
.010c30	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010c32	f0 28		beq $010c5c			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010c34	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010c37	f0 18		beq $010c51			beq 	_FRun_Colon
.010c39	a8		tay				tay 								; save in Y
.010c3a	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010c3d	c9 00 20	cmp #$2000			cmp 	#$2000
.010c40	d0 15		bne $010c57			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010c42	98		tya				tya 								; get token back
.010c43	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010c46	0a		asl a				asl 	a 							; double it into X
.010c47	aa		tax				tax
.010c48	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c4a	e6 06		inc $06				inc 	DCodePtr
.010c4c	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010c4f	80 d4		bra $010c25			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c51					_FRun_Colon:
.010c51	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c53	e6 06		inc $06				inc 	DCodePtr
.010c55	80 ce		bra $010c25			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c57					_FRun_TryLET:
.010c57	20 36 0a	jsr $010a36			jsr 	Function_LET 				; try as a LET.
.010c5a	80 c9		bra $010c25			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010c5c					_FRun_EndInstruction:
.010c5c	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010c5e	1a		inc a				inc 	a 							; go to link for next line
.010c5f	1a		inc a				inc 	a
.010c60	80 b1		bra $010c13			bra 	_FRun_NextLineNumber
.010c62					Function_CLEAR:
.010c62	20 66 0c	jsr $010c66			jsr 	ClearVariablesPointersAndStacks
.010c65	60		rts				rts
.010c66					ClearVariablesPointersAndStacks:
.010c66	a9 80 00	lda #$0080			lda 	#BASStack
.010c69	85 2a		sta $2a				sta 	DStack
.010c6b	64 80		stz $80				stz 	BASStack
.010c6d	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010c70	a9 00 00	lda #$0000			lda 	#$0000
.010c73	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c75	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010c77	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010c7a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c7c	20 a3 0c	jsr $010ca3			jsr 	FindCodeEnd 				; find where the program ends.
.010c7f	a8		tay				tay 								; Y points to it.
.010c80	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010c83	99 02 00	sta $0002,y			sta 	$0002,y
.010c86	99 04 00	sta $0004,y			sta 	$0004,y
.010c89	98		tya				tya 								; start of working memory up
.010c8a	18		clc				clc
.010c8b	69 06 00	adc #$0006			adc 	#6
.010c8e	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010c91	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c93	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010c96					_FCLoop:
.010c96	a9 00 00	lda #$0000			lda 	#$0000
.010c99	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c9b	c8		iny				iny
.010c9c	c8		iny				iny
.010c9d	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010ca0	d0 f4		bne $010c96			bne 	_FCLoop
.010ca2	60		rts				rts
.010ca3					FindCodeEnd:
.010ca3	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010ca6	18		clc				clc
.010ca7	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010ca9	a8		tay				tay
.010caa					_FCELoop:
.010caa	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010cad	f0 08		beq $010cb7			beq 	_FCEExit
.010caf	98		tya				tya 								; add offset
.010cb0	18		clc				clc
.010cb1	79 00 00	adc $0000,y			adc 	$0000,y
.010cb4	a8		tay				tay
.010cb5	80 f3		bra $010caa			bra 	_FCELoop
.010cb7					_FCEExit:
.010cb7	98		tya				tya 								; return in A
.010cb8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010cb9					Function_Dim:
.010cb9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010cbb	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010cbe	f0 3b		beq $010cfb			beq		_FDIMNotArray 				; no, error.
.010cc0	20 88 02	jsr $010288			jsr 	VariableFind 				; try to find it.
.010cc3	b0 41		bcs $010d06			bcs 	_FDIMExists 				; if it does, that's an error.
.010cc5	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010cc7	48		pha				pha
.010cc8	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010cca	48		pha				pha
.010ccb					_FDIMSkip:
.010ccb	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010ccd	e6 06		inc $06				inc 	DCodePtr
.010ccf	e6 06		inc $06				inc 	DCodePtr
.010cd1	29 00 08	and #$0800			and 	#IDContMask
.010cd4	d0 f5		bne $010ccb			bne 	_FDIMSkip
.010cd6	20 09 02	jsr $010209			jsr 	EvaluateInteger 			; evaluate the size
.010cd9	20 f1 03	jsr $0103f1			jsr 	ExpectRightBracket 			; check the ) following.
.010cdc	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010cdf	d0 3b		bne $010d1c			bne 	_FDIMSize
.010ce1	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010ce4	f0 36		beq $010d1c			beq 	_FDIMSize
.010ce6	7a		ply				ply 								; restore HashTablePtr
.010ce7	84 20		sty $20				sty 	DHashTablePtr
.010ce9	7a		ply				ply 								; so now A is the high index, Y points to the token
.010cea	20 32 03	jsr $010332			jsr 	VariableCreate 				; create the variable.
.010ced	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010cef	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010cf2	d0 06		bne $010cfa			bne 	_FDIMExit
.010cf4	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010cf6	e6 06		inc $06				inc 	DCodePtr
.010cf8	80 bf		bra $010cb9			bra 	Function_DIM 				; and do another
.010cfa					_FDIMExit:
.010cfa	60		rts				rts
.010cfb					_FDIMNotArray:
.010cfb	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010cfe	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010d06					_FDIMExists:
.010d06	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010d09	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010d11	65 64 69 6d 65 6e 73 69 6f 6e 00
.010d1c					_FDIMSize:
.010d1c	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010d1f	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010d27	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010d2d					Function_COLLECT:
.010d2d	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010d2f	85 0c		sta $0c				sta 	DTemp2
.010d31	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010d34	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010d36	85 0e		sta $0e				sta 	DTemp2+2
.010d38	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010d3a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010d3c					_FCNextPass:
.010d3c	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010d3e	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010d40	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010d42	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010d45	18		clc				clc
.010d46	65 02		adc $02				adc 	DBaseAddress
.010d48	a8		tay				tay 								; put in Y
.010d49	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d4c					_FCO1:
.010d4c	20 72 0d	jsr $010d72			jsr  	COLLECTScanVariable 		; scan that one.
.010d4f	c8		iny				iny 	 							; go to next pointer
.010d50	c8		iny				iny
.010d51	ca		dex				dex
.010d52	d0 f8		bne $010d4c			bne 	_FCO1 						; until done all 16.
.010d54	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d57					_FCO2:
.010d57	20 86 0d	jsr $010d86			jsr  	COLLECTScanArray 			; scan that one.
.010d5a	c8		iny				iny 	 							; go to next pointer
.010d5b	c8		iny				iny
.010d5c	ca		dex				dex
.010d5d	d0 f8		bne $010d57			bne 	_FCO2 						; until done all 16.
.010d5f	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010d61	f0 0e		beq $010d71			beq		_FCExit 					; if finished then exit.
.010d63	48		pha				pha 								; save the target address
.010d64	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010d66	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010d68	20 9f 04	jsr $01049f			jsr 	StringMakeConcrete 			; make the string concrete.
.010d6b	7a		ply				ply 								; restore the string.
.010d6c	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010d6f	80 cb		bra $010d3c			bra		_FCNextPass
.010d71					_FCExit:
.010d71	60		rts				rts
.010d72					COLLECTScanVariable:
.010d72	da		phx				phx 								; save XY
.010d73	5a		phy				phy
.010d74					_CSVLoop:
.010d74	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d77	f0 0a		beq $010d83			beq 	_CSVExit
.010d79	a8		tay				tay 								; put new address into Y
.010d7a	18		clc				clc 								; which is four on.
.010d7b	69 04 00	adc #$0004			adc 	#4
.010d7e	20 a7 0d	jsr $010da7			jsr 	COLLECTCheck
.010d81	80 f1		bra $010d74			bra 	_CSVLoop
.010d83					_CSVExit:
.010d83	7a		ply				ply
.010d84	fa		plx				plx
.010d85	60		rts				rts
.010d86					COLLECTScanArray:
.010d86	da		phx				phx 								; save XY
.010d87	5a		phy				phy
.010d88					_CSALoop:
.010d88	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d8b	f0 17		beq $010da4			beq 	_CSAExit
.010d8d	a8		tay				tay 								; put new address in Y
.010d8e	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010d91	aa		tax				tax
.010d92	e8		inx				inx									; +1 as one more data element.
.010d93	98		tya				tya 								; point A to first element, at +6
.010d94	18		clc				clc
.010d95	69 06 00	adc #$0006			adc 	#6
.010d98					_CSADoAllStrings:
.010d98	20 a7 0d	jsr $010da7			jsr 	COLLECTCheck 				; collect check the first.
.010d9b	1a		inc a				inc 	a 							; advance the pointer.
.010d9c	1a		inc a				inc 	a
.010d9d	1a		inc a				inc 	a
.010d9e	1a		inc a				inc 	a
.010d9f	ca		dex				dex
.010da0	d0 f6		bne $010d98			bne 	_CSADoAllStrings 			; until all strings are done.
.010da2	80 e4		bra $010d88			bra 	_CSALoop
.010da4					_CSAExit:
.010da4	7a		ply				ply
.010da5	fa		plx				plx
.010da6	60		rts				rts
.010da7					COLLECTCheck:
.010da7	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010da9	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010dab	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010dad	90 0a		bcc $010db9			bcc 	_COCExit
.010daf	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010db1	b0 06		bcs $010db9			bcs 	_COCExit
.010db3	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010db5	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010db7	85 14		sta $14				sta 	DSignCount
.010db9					_COCExit:
.010db9	a5 0a		lda $0a				lda 	DTemp1+2
.010dbb	60		rts				rts
.010dbc	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010dbd					Function_ASSERT:
.010dbd	20 09 02	jsr $010209			jsr 	EvaluateInteger 			; something that returns an integer.
.010dc0	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010dc2	05 08		ora $08				ora 	Dtemp1
.010dc4	f0 01		beq $010dc7			beq 	_FAssFail
.010dc6	60		rts				rts
.010dc7					_FAssFail:
.010dc7	20 8c 03	jsr $01038c			jsr 	ErrorHandler 						; call error routine
>010dca	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010dd2	61 69 6c 65 64 00
.010dd8					Function_CLS:
.010dd8	20 f1 0d	jsr $010df1			jsr 	HWClearScreen
.010ddb	60		rts				rts

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010ddc					SwitchBasicInstance:
.010ddc	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010dde	20 f1 0d	jsr $010df1			jsr 	HWClearScreen 						; clear screen
.010de1	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010de4	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010de6	86 02		stx $02				stx		DBaseAddress
.010de8	84 04		sty $04				sty 	DHighAddress
.010dea	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010deb	48		pha				pha 										; then copy it into B.
.010dec	ab		plb				plb
.010ded	ab		plb				plb
.010dee	4c 0a 0c	jmp $010c0a			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.010df1					HWClearScreen:
.010df1	48		pha				pha
.010df2	da		phx				phx
.010df3	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.010df6	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010df9	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010dfd	ca		dex				dex
.010dfe	10 f6		bpl $010df6			bpl 	_CS0
.010e00	64 28		stz $28				stz 	DCursor
.010e02	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010e05	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010e09	fa		plx				plx
.010e0a	68		pla				pla
.010e0b	60		rts				rts
.010e0c					HWPrintChar:
.010e0c	48		pha				pha
.010e0d	da		phx				phx
.010e0e	a6 28		ldx $28				ldx 	DCursor
.010e10	e2 20		sep #$20			sep 	#$20
.010e12	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e16	c2 20		rep #$20			rep 	#$20
.010e18	e8		inx				inx
.010e19	8a		txa				txa
.010e1a	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.010e1d	85 28		sta $28				sta 	DCursor
.010e1f	aa		tax				tax
.010e20	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010e23	e2 20		sep #$20			sep 	#$20
.010e25	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e29	c2 20		rep #$20			rep 	#$20
.010e2b	fa		plx				plx
.010e2c	68		pla				pla
.010e2d	60		rts				rts
.010e2e					HWNewLine:
.010e2e	48		pha				pha
.010e2f	da		phx				phx
.010e30	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.010e33					HWMoveCursor:
.010e33	a9 20 00	lda #$0020			lda 	#32
.010e36	20 0c 0e	jsr $010e0c			jsr 	HWPrintChar
.010e39	8a		txa				txa
.010e3a	25 28		and $28				and 	DCursor
.010e3c	d0 f5		bne $010e33			bne 	HWMoveCursor
.010e3e	fa		plx				plx
.010e3f	68		pla				pla
.010e40	60		rts				rts
.010e41	48		pha		HWTab:	pha
.010e42	da		phx				phx
.010e43	a2 07 00	ldx #$0007			ldx 	#7
.010e46	80 eb		bra $010e33			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	48 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 0a 00 18 c0 06 22
>024108	00 40 00 00 08 00 1e 00 2a 3c 00 00 10 00 32 00
>024118	18 c0 06 22 18 c0 0a 24 01 40 00 00 10 00 3c 00
>024128	2b 3a 18 c0 06 22 03 10 a0 46 00 00 08 00 50 00
>024138	1f 3e 00 00 06 00 51 00 00 00 00 00 ee ee ee ee
>024148	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2026 times (32416 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
