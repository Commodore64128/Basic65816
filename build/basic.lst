
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 15 15:56:52 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c fc 16 01	jmp $0116fc			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	87 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	77 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	87 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	97 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	db 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	42 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a7 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	24 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	06 07					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c1 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c1 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	42 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4e 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	cb 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	42 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	53 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	65 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	dc 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	bc 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	98 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	82 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	f6 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	16 0c					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	16 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	4e 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	82 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	aa 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	c4 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	db 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	64 0d					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	22 0d					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	be 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	55 0a					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	e7 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	d6 0c					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	87 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	87 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	87 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	87 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	87 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	87 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	87 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	87 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	ea 16					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	a6 0d					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	cb 16					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	ba 14					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	bc 14					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	27 15					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	23 15					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	82 15					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	f6 15					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	e6 16					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	46 10					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	48 13					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	a7 13					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	c3 13					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	05 13					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	f9 10					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	85 16					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	9d 16					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	b1 16					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	21 0e					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	f5 13					.word Function_REPEAT          & $FFFF ; token $3c3f "repeat"
>010080	53 14					.word Function_WHILE           & $FFFF ; token $3c40 "while"
>010082	92 10					.word Function_IF              & $FFFF ; token $3c41 "if"
>010084	ce 11					.word Command_FOR              & $FFFF ; token $3c42 "for"
>010086	8a 14					.word Function_WEND            & $FFFF ; token $3a43 "wend"
>010088	0c 14					.word Function_UNTIL           & $FFFF ; token $3a44 "until"
>01008a	87 04					.word IllegalToken             & $FFFF ; token $3a45 "then"
>01008c	27 11					.word Handler_ENDIF            & $FFFF ; token $3a46 "endif"
>01008e	49 12					.word Command_NEXT             & $FFFF ; token $3a47 "next"
.010090					TokenText:
>010090	02 26					 .text $02,"&"        ; token $2001
>010092	02 7c					 .text $02,"|"        ; token $2002
>010094	02 5e					 .text $02,"^"        ; token $2003
>010096	12 3c					 .text $12,"<"        ; token $2204
>010098	12 3e					 .text $12,">"        ; token $2205
>01009a	12 3d					 .text $12,"="        ; token $2206
>01009c	13 3c 3d				 .text $13,"<="       ; token $2207
>01009f	13 3e 3d				 .text $13,">="       ; token $2208
>0100a2	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a5	22 2b					 .text $22,"+"        ; token $240a
>0100a7	22 2d					 .text $22,"-"        ; token $240b
>0100a9	32 2a					 .text $32,"*"        ; token $260c
>0100ab	32 2f					 .text $32,"/"        ; token $260d
>0100ad	32 25					 .text $32,"%"        ; token $260e
>0100af	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b2	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b5	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100ba	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100bf	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c4	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100c9	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ce	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d4	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100da	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100df	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e4	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100ea	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100f0	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f6	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>0100fe	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010106	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>01010d	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>010113	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>01011b	87 69 6e 73 74 72 28			 .text $87,"instr("   ; token $3022
>010122	92 2c					 .text $92,","        ; token $3223
>010124	92 3b					 .text $92,";"        ; token $3224
>010126	92 3a					 .text $92,":"        ; token $3225
>010128	92 28					 .text $92,"("        ; token $3226
>01012a	92 29					 .text $92,")"        ; token $3227
>01012c	92 27					 .text $92,"'"        ; token $3228
>01012e	c3 74 6f				 .text $c3,"to"       ; token $3829
>010131	c5 73 74 65 70				 .text $c5,"step"     ; token $382a
>010136	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2b
>01013a	f4 6c 65 74				 .text $f4,"let"      ; token $3e2c
>01013e	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2d
>010145	f4 65 6e 64				 .text $f4,"end"      ; token $3e2e
>010149	f4 72 75 6e				 .text $f4,"run"      ; token $3e2f
>01014d	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e30
>010152	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e31
>010158	f4 64 69 6d				 .text $f4,"dim"      ; token $3e32
>01015c	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e33
>010164	f4 63 6c 73				 .text $f4,"cls"      ; token $3e34
>010168	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e35
>01016e	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e36
>010173	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e37
>010179	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e38
>010180	f3 6f 6e				 .text $f3,"on"       ; token $3e39
>010183	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e3a
>010188	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3b
>01018d	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3c
>010192	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3d
>010197	f5 6c 69 73 74				 .text $f5,"list"     ; token $3e3e
>01019c	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c3f
>0101a3	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c40
>0101a9	e3 69 66				 .text $e3,"if"       ; token $3c41
>0101ac	e4 66 6f 72				 .text $e4,"for"      ; token $3c42
>0101b0	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a43
>0101b5	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a44
>0101bb	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a45
>0101c0	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a46
>0101c6	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a47
>0101cb	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3c3f					repeatTokenID                    = $3c3f
=$3c40					whileTokenID                     = $3c40
=$3c41					ifTokenID                        = $3c41
=$3c42					forTokenID                       = $3c42
=$3a43					wendTokenID                      = $3a43
=$3a44					untilTokenID                     = $3a44
=$3a45					thenTokenID                      = $3a45
=$3a46					endifTokenID                     = $3a46
=$3a47					nextTokenID                      = $3a47

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101cc					Evaluate:
.0101cc	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0101cf	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d2					EvaluateLevel:
.0101d2	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101d5	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101d7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101d9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101dc	b0 79		bcs $010257			bcs 	_ELVariable
.0101de	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e1	b0 16		bcs $0101f9			bcs 	_ELConstant
.0101e3	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101e6	90 7f		bcc $010267			bcc 	_ELStringConstant
.0101e8	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101eb	90 03		bcc $0101f0			bcc 	_ELConstantShift
.0101ed	82 94 00	brl $010284			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f0					_ELConstantShift:
.0101f0	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101f3	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101f5	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101f7	e6 06		inc $06				inc 	DCodePtr
.0101f9					_ELConstant:
.0101f9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101fb	38		sec				sec  								; shift it in the range 0-32767
.0101fc	e9 00 40	sbc #$4000			sbc 	#$4000
.0101ff	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010200	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010202	6a		ror a				ror 	a 							; rotate that into the constant value
.010203	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010205	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010207	95 10		sta $10,x			sta 	EXSValueH+0,x
.010209	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01020b	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01020d	e6 06		inc $06				inc 	DCodePtr
.01020f					_ELGotAtom:
.01020f	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010211	a8		tay				tay 								; save in Y
.010212	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010215	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010218	d0 35		bne $01024f			bne 	_ELExit
.01021a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01021c	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01021f	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010221	98		tya				tya 								; get the keyword token back
.010222	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010225	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010227	90 26		bcc $01024f			bcc 	_ELExit 					; precedence too low, then exit.
.010229	5a		phy				phy 								; save the binary operator on the stack
.01022a	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01022c	e6 06		inc $06				inc 	DCodePtr
.01022e	18		clc				clc 								; try the next level up
.01022f	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010232	e8		inx				inx 								; calculate the RHS at the next stack level.
.010233	e8		inx				inx
.010234	20 d2 01	jsr $0101d2			jsr 	EvaluateLevel
.010237	ca		dex				dex
.010238	ca		dex				dex
.010239	7a		ply				ply 								; get operator token back into Y
.01023a					_ELExecuteY:
.01023a	98		tya				tya
.01023b	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01023e	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01023f	9b		txy				txy 								; save X in Y
.010240	aa		tax				tax 								; double keyword ID in X
.010241	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010245	bb		tyx				tyx 								; restore X.
.010246	8f 4b 02 01	sta $01024b			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01024a					_ELCallRoutine:
.01024a	20 4a 02	jsr $01024a			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01024d	80 c0		bra $01020f			bra 	_ELGotAtom 					; go round operator level again.
.01024f	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010251	0a		asl a				asl 	a
.010252	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010254	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010256	60		rts				rts
.010257					_ELVariable:
.010257	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.010259	20 18 03	jsr $010318			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01025c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01025e	94 10		sty $10,x			sty 	EXSValueH+0,x
.010260	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010262	80 ab		bra $01020f			bra 	_ELGotAtom
.010264					_ELSyntax
.010264	82 31 02	brl $010498			brl 	SyntaxError
.010267					_ELStringConstant:
.010267	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01026a	f0 f8		beq $010264			beq 	_ELSyntax
.01026c	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01026e	1a		inc a				inc 	a
.01026f	1a		inc a				inc 	a
.010270	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010272	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010274	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010276	18		clc				clc 								; add to string constant.
.010277	65 06		adc $06				adc 	DCodePtr
.010279	85 06		sta $06				sta 	DCodePtr
.01027b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01027d	09 00 80	ora #$8000			ora 	#$8000
.010280	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010282	80 8b		bra $01020f			bra 	_ELGotAtom
.010284					_ELUnaryKeyword:
.010284	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010286	a8		tay				tay 								; put the token in Y.
.010287	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010289	e6 06		inc $06				inc 	DCodePtr
.01028b	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01028e	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010291	f0 a7		beq $01023a			beq 	_ELExecuteY					; go back and execute it
.010293	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.010296	d0 11		bne $0102a9			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010298	20 cf 02	jsr $0102cf			jsr 	EvaluateNext 				; evaluate the expression
.01029b	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; consume the right bracket.
.01029e					_ELCopy:
.01029e	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a2	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0102a4	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102a6	82 66 ff	brl $01020f			brl 	_ELGotAtom 					; and continue.
.0102a9					_ELUnaryOperator:
.0102a9	5a		phy				phy 								; save the operator on the stack.
.0102aa	e8		inx				inx 								; this is like evaluate next
.0102ab	e8		inx				inx
.0102ac	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102af	20 d2 01	jsr $0101d2			jsr 	EvaluateLevel
.0102b2	ca		dex				dex 								; unwind the stack.
.0102b3	ca		dex				dex
.0102b4	68		pla				pla 								; restore the unary operator.
.0102b5	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102b8	f0 03		beq $0102bd			beq 	_ELMinus
.0102ba	4c 98 04	jmp $010498			jmp 	SyntaxError
.0102bd					_ELMinus:
.0102bd	38		sec				sec 								; do the negation calculation.
.0102be	a9 00 00	lda #$0000			lda 	#0
.0102c1	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102c3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102ca	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102cc	82 40 ff	brl $01020f			brl 	_ELGotAtom					; and continue.
.0102cf					EvaluateNext:
.0102cf	e8		inx				inx
.0102d0	e8		inx				inx
.0102d1	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102d4	20 d2 01	jsr $0101d2			jsr 	EvaluateLevel
.0102d7	ca		dex				dex
.0102d8	ca		dex				dex
.0102d9	60		rts				rts
.0102da					EvaluateInteger:
.0102da	20 cc 01	jsr $0101cc			jsr 	Evaluate
.0102dd	b0 01		bcs $0102e0			bcs 	EIType
.0102df	60		rts				rts
.0102e0					EIType:
.0102e0	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0102e3	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102eb	78 70 65 63 74 65 64 00
.0102f3					EvaluateNextInteger:
.0102f3	20 cf 02	jsr $0102cf			jsr 	EvaluateNext
.0102f6	b0 e8		bcs $0102e0			bcs 	EIType
.0102f8	60		rts				rts
.0102f9					EvaluateString:
.0102f9	20 cc 01	jsr $0101cc			jsr 	Evaluate
.0102fc	90 01		bcc $0102ff			bcc 	ESType
.0102fe	60		rts				rts
.0102ff					ESType:
.0102ff	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010302	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01030a	78 70 65 63 74 65 64 00
.010312					EvaluateNextString:
.010312	20 cf 02	jsr $0102cf			jsr 	EvaluateNext
.010315	90 e8		bcc $0102ff			bcc 	ESType
.010317	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010318					VariableAccessExpression:
.010318	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01031a	48		pha				pha
.01031b	20 59 03	jsr $010359			jsr 	VariableFind 				; try to find the variables
.01031e	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010320	90 23		bcc $010345			bcc 	_VANError 					; not found, so report an error.
.010322	68		pla				pla 								; get and save that first token
.010323	48		pha				pha 								; we use it for typing.
.010324	a8		tay				tay 								; put first token in Y.
.010325	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010328	f0 07		beq $010331			beq 	_VANNotArray
.01032a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01032c	20 d0 03	jsr $0103d0			jsr 	VariableSubscript			; index calculation
.01032f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010331					_VANNotArray:
.010331	68		pla				pla 								; get the token back.
.010332	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010335	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010338	38		sec				sec 								; set up return string.
.010339	f0 06		beq $010341			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01033b	18		clc				clc 								; returning a number, read high data word
.01033c	a0 02 00	ldy #$0002			ldy 	#2
.01033f	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010341					_VANLoadLower:
.010341	a8		tay				tay 								; put A into Y (this is the high byte)
.010342	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010344	60		rts				rts
.010345					_VANError:
.010345	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010348	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010350	20 75 6e 6b 6e 6f 77 6e 00
.010359					VariableFind:
.010359	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01035b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01035e	90 5c		bcc $0103bc			bcc 	_VFError
.010360	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010363	b0 11		bcs $010376			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010365	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010368	3a		dec a				dec 	a 							; now 0-25
.010369	0a		asl a				asl 	a 							; x 4 and clear carry
.01036a	0a		asl a				asl 	a
.01036b	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01036e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010370	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010372	e6 06		inc $06				inc 	DCodePtr
.010374	38		sec				sec 								; return with carry set.
.010375	60		rts				rts
.010376					_VFSlowVariable:
.010376	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010378	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.01037b	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01037c	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01037d	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010380	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010382	85 08		sta $08				sta 	DTemp1
.010384	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010386	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010389	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01038a	65 08		adc $08				adc 	DTemp1
.01038c	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01038e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010390					_VFNext:
.010390	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010392	f0 26		beq $0103ba			beq 	_VFFail 					; if zero, then it's the end of the list.
.010394	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010396	a8		tay				tay 								; read the address of the name at $0002,y
.010397	b9 02 00	lda $0002,y			lda 	$0002,y
.01039a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01039c	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01039f					_VFCompare:
.01039f	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a1	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103a3	d0 eb		bne $010390			bne 	_VFNext 					; if not, go to the next one.
.0103a5	c8		iny				iny 								; advance token pointer
.0103a6	c8		iny				iny
.0103a7	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103aa	d0 f3		bne $01039f			bne 	_VFCompare
.0103ac	98		tya				tya 								; this is the length of the word.
.0103ad	18		clc				clc 								; so we add it to the code pointer
.0103ae	65 06		adc $06				adc 	DCodePtr
.0103b0	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b2	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103b4	18		clc				clc 								; four on is the actual data
.0103b5	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103b8	38		sec				sec 								; return with CS indicating success
.0103b9	60		rts				rts
.0103ba					_VFFail:
.0103ba	18		clc				clc
.0103bb	60		rts				rts
.0103bc					_VFError:
.0103bc	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0103bf	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103c7	76 61 72 69 61 62 6c 65 00
.0103d0					VariableSubscript:
.0103d0	48		pha				pha		 							; save variable address on stack.
.0103d1	20 f3 02	jsr $0102f3			jsr		EvaluateNextInteger 		; get the subscript
.0103d4	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; skip right bracket.
.0103d7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103da	d0 10		bne $0103ec			bne 	_VANSubscript
.0103dc	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103de	f0 02		beq $0103e2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e0	b0 0a		bcs $0103ec			bcs 	_VANSubscript
.0103e2					_VANSubOkay:
.0103e2	0a		asl a				asl 	a 							; double lsword
.0103e3	0a		asl a				asl 	a 							; and again, also clears carry.
.0103e4	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103e6	68		pla				pla 								; restore DVariablePtr
.0103e7	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103e8	1a		inc a				inc 	a
.0103e9	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103eb	60		rts				rts
.0103ec					_VANSubscript:
.0103ec	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0103ef	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103f7	79 20 53 75 62 73 63 72 69 70 74 00
.010403					VariableCreate:
.010403	48		pha				pha 								; save count.
.010404	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010407	29 00 20	and #$2000			and 	#IDTypeMask
.01040a	f0 06		beq $010412			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01040c	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01040f	18		clc				clc 								; which is guaranteed by have a 0 length.
.010410	65 02		adc $02				adc 	DBaseAddress
.010412					_VCIsInteger:
.010412	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010414	68		pla				pla 								; restore count
.010415	48		pha				pha
.010416	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010417	0a		asl a				asl 	a 							; 2 x # items.
.010418	0a		asl a				asl 	a 							; 4 x # items.
.010419					_VCNotSingle:
.010419	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01041b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01041e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010421	f0 04		beq $010427			beq 	_VCNotArray
.010423	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010425	e6 08		inc $08				inc 	DTemp1
.010427					_VCNotArray:
.010427	5a		phy				phy 								; save address of first token on stack.
.010428	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01042b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01042d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01042f	18		clc				clc 								; add 4 for link and name words
.010430	69 04 00	adc #$0004			adc 	#4
.010433	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010435	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010437	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010439					_VCErase:
.010439	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01043b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01043e	c8		iny				iny
.01043f	c8		iny				iny
.010440	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010442	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010444	d0 f3		bne $010439			bne 	_VCErase
.010446	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010448	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01044a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01044d	68		pla				pla 								; restore the token address
.01044e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010451	68		pla				pla 								; restore count and store.
.010452	99 04 00	sta $0004,y			sta 	$0004,y
.010455	98		tya				tya 								; update the head link
.010456	92 20		sta ($20)			sta 	(DHashTablePtr)
.010458	18		clc				clc 								; advance pointer to the data bit.
.010459	69 04 00	adc #$0004			adc 	#4
.01045c	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01045d					ErrorHandler:
.01045d	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01045f	fa		plx				plx 								; address of error message -1
.010460	e8		inx				inx 								; error message.
.010461	20 04 05	jsr $010504			jsr 	PrintROMMessage 			; print message in ROM
.010464	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010466	f0 15		beq $01047d			beq 	_EHEndMessage
.010468	a2 82 04	ldx #$0482			ldx 	#_EHAt & $FFFF 				; print " at "
.01046b	20 04 05	jsr $010504			jsr 	PrintROMMessage
.01046e	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010470	a0 00 00	ldy #$0000			ldy 	#0
.010473	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010476	20 31 0c	jsr $010c31			jsr 	ConvertToString 			; convert and print it.
.010479	a8		tay				tay
.01047a	20 18 05	jsr $010518			jsr 	PrintBASICString
.01047d					_EHEndMessage:
.01047d	20 4e 17	jsr $01174e			jsr 	HWNewLine
.010480	80 fe		bra $010480	_EH1:	bra 	_EH1
>010482	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010487					IllegalToken:
.010487	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01048a	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010492	54 6f 6b 65 6e 00
.010498					SyntaxError:
.010498	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01049b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104a3	72 72 6f 72 00
.0104a8					ExpectToken:
.0104a8	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104aa	d0 05		bne $0104b1			bne 	_CTKError					; error if not
.0104ac	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104ae	e6 06		inc $06				inc 	DCodePtr
.0104b0	60		rts				rts
.0104b1					_CTKError:
.0104b1	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0104b4	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104bc	74 6f 6b 65 6e 00
.0104c2					ExpectRightBracket:
.0104c2	48		pha				pha
.0104c3	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104c6	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.0104c9	68		pla				pla
.0104ca	60		rts				rts
.0104cb					ExpectComma:
.0104cb	48		pha				pha
.0104cc	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104cf	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.0104d2	68		pla				pla
.0104d3	60		rts				rts
.0104d4					CheckBothNumeric:
.0104d4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104d6	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0104d8	30 01		bmi $0104db			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104da	60		rts				rts
.0104db					_CBNFail:
.0104db	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0104de	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104e6	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104f4					ResetTypeInteger:
.0104f4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104f6	29 ff 7f	and #$7fff			and 	#$7FFF
.0104f9	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104fb	60		rts				rts
.0104fc					ResetTypeString:
.0104fc	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fe	09 00 80	ora #$8000			ora 	#$8000
.010501	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010503	60		rts				rts
.010504					PrintROMMessage:
.010504	48		pha				pha
.010505	da		phx				phx
.010506					_PRMLoop:
.010506	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01050a	29 ff 00	and #$00ff			and 	#$00FF
.01050d	f0 06		beq $010515			beq 	_PRMExit
.01050f	20 2c 17	jsr $01172c			jsr 	HWPrintChar
.010512	e8		inx				inx
.010513	80 f1		bra $010506			bra 	_PRMLoop
.010515					_PRMExit:
.010515	fa		plx				plx
.010516	68		pla				pla
.010517	60		rts				rts
.010518					PrintBASICString:
.010518	48		pha				pha
.010519	da		phx				phx
.01051a	5a		phy				phy
.01051b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01051e	29 ff 00	and #$00ff			and 	#$00FF
.010521	f0 0b		beq $01052e			beq 	_PBSExit 					; null string
.010523	aa		tax				tax
.010524					_PBSLoop:
.010524	c8		iny				iny
.010525	b9 00 00	lda $0000,y			lda 	$0000,y
.010528	20 2c 17	jsr $01172c			jsr 	HWPrintChar
.01052b	ca		dex				dex
.01052c	d0 f6		bne $010524			bne 	_PBSLoop
.01052e					_PBSExit:
.01052e	7a		ply				ply
.01052f	fa		plx				plx
.010530	68		pla				pla
.010531	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010532					StringTempAllocate:
.010532	48		pha				pha
.010533	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010535	d0 09		bne $010540			bne 	_STANoReset
.010537	5a		phy				phy 								; reset the temp string pointer.
.010538	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01053b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01053d	85 16		sta $16				sta 	DTempStringPointer
.01053f	7a		ply				ply
.010540					_STANoReset:
.010540	68		pla				pla 								; get length.
.010541	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010544	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010547	18		clc				clc 								; this adds one, for the length.
.010548	65 16		adc $16				adc 	DTempStringPointer
.01054a	85 16		sta $16				sta 	DTempStringPointer
.01054c	48		pha				pha 								; save start address
.01054d	a9 00 00	lda #$0000			lda 	#$0000
.010550	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010552	92 16		sta ($16)			sta		(DTempStringPointer)
.010554	c2 20		rep #$20			rep 	#$20
.010556	68		pla				pla 								; restore start address
.010557	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010559	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01055b	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01055d	60		rts				rts
.01055e					StringWriteCharacter:
.01055e	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010560	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010562	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010564	1a		inc a				inc 	a
.010565	92 18		sta ($18)			sta 	(DStartTempString)
.010567	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010569	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01056b	60		rts				rts
.01056c					StringCreateCopy:
.01056c	a8		tay				tay 								; put pointer to string in Y
.01056d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010570	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010573	f0 17		beq $01058c			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010575	da		phx				phx 								; save X and put the character count in X
.010576	aa		tax				tax
.010577					_SCCCopy:
.010577	c8		iny				iny 								; advance and read (first time skips length)
.010578	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01057a	b9 00 00	lda $0000,y			lda 	$0000,y
.01057d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01057f	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010581	1a		inc a				inc 	a
.010582	92 18		sta ($18)			sta 	(DStartTempString)
.010584	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010586	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010588	ca		dex				dex 								; do X times
.010589	d0 ec		bne $010577			bne 	_SCCCopy
.01058b	fa		plx				plx
.01058c					_SCCExit:
.01058c	60		rts				rts
.01058d					StringMakeConcrete:
.01058d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010590	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010592	90 0f		bcc $0105a3			bcc 	_SMCExit
.010594	85 08		sta $08				sta 	DTemp1 						; source
.010596	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010598	29 ff 00	and #$00ff			and 	#$00FF
.01059b	d0 07		bne $0105a4			bne 	_SMCNonZero 				; if not "" skip.
.01059d	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a0	18		clc				clc 								; this reference is used for all empty strings.
.0105a1	65 02		adc $02				adc 	DBaseAddress
.0105a3					_SMCExit:
.0105a3	60		rts				rts
.0105a4					_SMCNonZero:
.0105a4	48		pha				pha 								; save on stack.
.0105a5	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105a8	18		clc				clc
.0105a9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105ac	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b0	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105b3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105b5					_SMCLoop:
.0105b5	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105b7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105b9	88		dey				dey 								; Y+1 times.
.0105ba	10 f9		bpl $0105b5			bpl 	_SMCLoop
.0105bc	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105be	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105c1					Binary_Add:
.0105c1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0105c3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105c5	30 12		bmi $0105d9		bmi 	_BATypeError
.0105c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105c9	30 3f		bmi $01060a		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105cb	18		clc			clc 										; add the results
.0105cc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105ce	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105d0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105d2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105d4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0105d6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105d8	60		rts			rts
.0105d9					_BATypeError:
.0105d9	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0105dc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105e4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105f4	65 73 00
.0105f7					_BALengthError:
.0105f7	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0105fa	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010602	6f 6f 20 6c 6f 6e 67 00
.01060a					_BAConcatenateString:
.01060a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01060c	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.01060e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010610	85 0c		sta $0c			sta 	DTemp2
.010612	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010614	18		clc			clc 										; work out the total length
.010615	b2 08		lda ($08)		lda 	(DTemp1)
.010617	72 0c		adc ($0c)		adc 	(DTemp2)
.010619	b0 14		bcs $01062f		bcs 	_BAConcatLengthError 				; string is too long.
.01061b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01061d	20 32 05	jsr $010532		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010620	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010622	74 10		stz $10,x		stz 	EXSValueH+0,x
.010624	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010626	20 6c 05	jsr $01056c		jsr 	StringCreateCopy
.010629	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01062b	20 6c 05	jsr $01056c		jsr 	StringCreateCopy
.01062e	60		rts			rts
.01062f					_BAConcatLengthError:
.01062f	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010632	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01063a	6f 6f 20 6c 6f 6e 67 00
.010642					Binary_Subtract:
.010642	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.010645	38		sec			sec
.010646	b5 00		lda $00,x		lda		EXSValueL+0,x
.010648	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01064a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01064c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01064e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010650	95 10		sta $10,x		sta 	EXSValueH+0,x
.010652	60		rts			rts
.010653					Binary_ShiftRight:
.010653	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.010656	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010658	29 3f 00	and #$003f		and 	#63
.01065b	f0 07		beq $010664		beq		_Binary_SRExit
.01065d					_Binary_SRLoop:
.01065d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01065f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010661	3a		dec a			dec 	a
.010662	d0 f9		bne $01065d		bne 	_Binary_SRLoop
.010664					_Binary_SRExit:
.010664	60		rts			rts
.010665					Binary_ShiftLeft:
.010665	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.010668	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01066a	29 3f 00	and #$003f		and 	#63
.01066d	f0 07		beq $010676		beq		_Binary_SLExit
.01066f					_Binary_SLLoop:
.01066f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010671	36 10		rol $10,x		rol 	EXSValueH+0,x
.010673	3a		dec a			dec 	a
.010674	d0 f9		bne $01066f		bne 	_Binary_SLLoop
.010676					_Binary_SLExit:
.010676	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010677					Binary_And:
.010677	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.01067a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01067c	35 02		and $02,x		and 	EXSValueL+2,x
.01067e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010680	b5 10		lda $10,x		lda		EXSValueH+0,x
.010682	35 12		and $12,x		and 	EXSValueH+2,x
.010684	95 10		sta $10,x		sta 	EXSValueH+0,x
.010686	60		rts			rts
.010687					Binary_Or:
.010687	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.01068a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01068c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01068e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010690	b5 10		lda $10,x		lda		EXSValueH+0,x
.010692	15 12		ora $12,x		ora 	EXSValueH+2,x
.010694	95 10		sta $10,x		sta 	EXSValueH+0,x
.010696	60		rts			rts
.010697					Binary_Xor:
.010697	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.01069a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01069c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01069e	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106a0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0106a2	55 12		eor $12,x		eor 	EXSValueH+2,x
.0106a4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106a6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0106a7					Binary_Equals:
.0106a7	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106aa	b0 0e		bcs $0106ba		bcs 	_BEString
.0106ac	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106ae	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106b0	d0 4f		bne $010701		bne 	Compare_Fail
.0106b2	b5 10		lda $10,x		lda 	EXSValueH,x
.0106b4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106b6	d0 49		bne $010701		bne 	Compare_Fail
.0106b8	80 3f		bra $0106f9		bra 	Compare_Succeed
.0106ba					_BEString:
.0106ba	09 00 00	ora #$0000		ora 	#$0000
.0106bd	f0 3a		beq $0106f9		beq 	Compare_Succeed
.0106bf	80 40		bra $010701		bra 	Compare_Fail
.0106c1					Binary_NotEquals:
.0106c1	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106c4	b0 0e		bcs $0106d4		bcs 	_BNEString
.0106c6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106c8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106ca	d0 2d		bne $0106f9		bne 	Compare_Succeed
.0106cc	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ce	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106d0	d0 27		bne $0106f9		bne 	Compare_Succeed
.0106d2	80 2d		bra $010701		bra 	Compare_Fail
.0106d4					_BNEString:
.0106d4	09 00 00	ora #$0000		ora 	#$0000
.0106d7	d0 20		bne $0106f9		bne 	Compare_Succeed
.0106d9	80 26		bra $010701		bra 	Compare_Fail
.0106db					Binary_Less:
.0106db	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106de	b0 12		bcs $0106f2		bcs 	_BLString
.0106e0	38		sec			sec
.0106e1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106e5	b5 10		lda $10,x		lda 	EXSValueH,x
.0106e7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106e9	50 03		bvc $0106ee		bvc 	*+5
.0106eb	49 00 80	eor #$8000		eor 	#$8000
.0106ee	30 09		bmi $0106f9		bmi 	Compare_Succeed
.0106f0	80 0f		bra $010701		bra 	Compare_Fail
.0106f2					_BLString:
.0106f2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106f5	f0 02		beq $0106f9		beq 	Compare_Succeed
.0106f7	80 08		bra $010701		bra 	Compare_Fail
.0106f9					Compare_Succeed:
.0106f9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106fc	95 00		sta $00,x		sta 	EXSValueL,x
.0106fe	95 10		sta $10,x		sta 	EXSValueH,x
.010700	60		rts			rts
.010701					Compare_Fail:
.010701	74 00		stz $00,x		stz 	EXSValueL,x
.010703	74 10		stz $10,x		stz 	EXSValueH,x
.010705	60		rts			rts
.010706					Binary_GreaterEqual:
.010706	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010709	b0 12		bcs $01071d		bcs 	_BGEString
.01070b	38		sec			sec
.01070c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01070e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010710	b5 10		lda $10,x		lda 	EXSValueH,x
.010712	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010714	50 03		bvc $010719		bvc 	*+5
.010716	49 00 80	eor #$8000		eor 	#$8000
.010719	10 de		bpl $0106f9		bpl 	Compare_Succeed
.01071b	80 e4		bra $010701		bra 	Compare_Fail
.01071d					_BGEString:
.01071d	09 00 00	ora #$0000		ora 	#$0000
.010720	10 d7		bpl $0106f9		bpl 	Compare_Succeed
.010722	80 dd		bra $010701		bra 	Compare_Fail
.010724					Binary_LessEqual:
.010724	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010727	b0 12		bcs $01073b		bcs 	_BLEString
.010729	18		clc			clc 									; numeric <= signed
.01072a	b5 00		lda $00,x		lda 	EXSValueL,x
.01072c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01072e	b5 10		lda $10,x		lda 	EXSValueH,x
.010730	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010732	50 03		bvc $010737		bvc 	*+5
.010734	49 00 80	eor #$8000		eor 	#$8000
.010737	30 c0		bmi $0106f9		bmi 	Compare_Succeed
.010739	80 c6		bra $010701		bra 	Compare_Fail
.01073b					_BLEString:
.01073b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01073e	d0 b9		bne $0106f9		bne 	Compare_Succeed
.010740	80 bf		bra $010701		bra 	Compare_Fail
.010742					Binary_Greater:
.010742	20 60 07	jsr $010760		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010745	b0 12		bcs $010759		bcs 	_BGString
.010747	18		clc			clc 									; numeric > signed
.010748	b5 00		lda $00,x		lda 	EXSValueL,x
.01074a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01074c	b5 10		lda $10,x		lda 	EXSValueH,x
.01074e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010750	50 03		bvc $010755		bvc 	*+5
.010752	49 00 80	eor #$8000		eor 	#$8000
.010755	10 a2		bpl $0106f9		bpl 	Compare_Succeed
.010757	80 a8		bra $010701		bra 	Compare_Fail
.010759					_BGString:
.010759	c9 01 00	cmp #$0001		cmp 	#$0001
.01075c	f0 9b		beq $0106f9		beq 	Compare_Succeed
.01075e	80 a1		bra $010701		bra 	Compare_Fail
.010760					CompareTypeCheck:
.010760	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010762	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010764	30 06		bmi $01076c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010766	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010768	30 1c		bmi $010786		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01076a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01076b	60		rts			rts
.01076c					_CTCFail:
.01076c	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01076f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010777	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010786					_CTCStringCompare:
.010786	20 f4 04	jsr $0104f4		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010789	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01078b	85 08		sta $08			sta 	DTemp1
.01078d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01078f	85 0c		sta $0c			sta 	DTemp2
.010791	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010794	a8		tay			tay
.010795	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010797	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010799	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01079b	90 02		bcc $01079f		bcc 	_CTCSmallest
.01079d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01079f					_CTCSmallest:
.01079f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0107a1					_CTCCompare:
.0107a1	c8		iny			iny 									; look at next character (done first, first char is size)
.0107a2	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0107a4	30 16		bmi $0107bc		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0107a6	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0107a8	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0107aa	f0 f5		beq $0107a1		beq 	_CTCCompare 					; if zero, try the next character.
.0107ac	b0 07		bcs $0107b5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0107ae					_CTCLess:
.0107ae	c2 20		rep #$20		rep 	#$20
.0107b0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107b3	80 14		bra $0107c9		bra 	_CTCExit
.0107b5					_CTCGreater:
.0107b5	c2 20		rep #$20		rep 	#$20
.0107b7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107ba	80 0d		bra $0107c9		bra 	_CTCExit
.0107bc					_CTCEqualSoFar:
.0107bc	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107be	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107c0	90 ec		bcc $0107ae		bcc 	_CTCLess
.0107c2	d0 f1		bne $0107b5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107c4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107c6	a9 00 00	lda #$0000		lda 	#$0000
.0107c9					_CTCExit:
.0107c9	38		sec			sec 									; return with CS indicating string comparison.
.0107ca	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107cb					Binary_Divide:
.0107cb	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.0107ce	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107d0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0107d2	d0 14		bne $0107e8		bne 	_BinaryDivide_Ok
.0107d4	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0107d7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107df	20 62 79 20 7a 65 72 6f 00
.0107e8					_BinaryDivide_Ok:
.0107e8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107ea	64 0a		stz $0a			stz 	DTemp1+2
.0107ec	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107ee	5a		phy			phy 										; save Y (bit counter)
.0107ef	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107f1	10 07		bpl $0107fa		bpl 	_BinaryDivide_RightDone
.0107f3	e8		inx			inx
.0107f4	e8		inx			inx
.0107f5	20 30 08	jsr $010830		jsr 	Binary_DivNegate
.0107f8	ca		dex			dex
.0107f9	ca		dex			dex
.0107fa					_BinaryDivide_RightDone:
.0107fa	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107fc	10 03		bpl $010801		bpl 	_BinaryDivide_LeftDone
.0107fe	20 30 08	jsr $010830		jsr 	Binary_DivNegate
.010801					_BinaryDivide_LeftDone:
.010801	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010804					_BinaryDivide_Loop:
.010804	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010806	36 10		rol $10,x		rol 	EXSValueH+0,x
.010808	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01080a	26 0a		rol $0a			rol 	DTemp1+2
.01080c	38		sec			sec											; calculate A-M
.01080d	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01080f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010811	85 0c		sta $0c			sta 	DTemp2
.010813	a5 0a		lda $0a			lda 	DTemp1+2
.010815	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010817	90 08		bcc $010821		bcc 	_Binary_NoSubract 					; if A < M skip this
.010819	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01081b	a5 0c		lda $0c			lda 	DTemp2
.01081d	85 08		sta $08			sta 	DTemp1+0
.01081f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010821					_Binary_NoSubract:
.010821	88		dey			dey 										; do it 32 times.
.010822	d0 e0		bne $010804		bne 	_BinaryDivide_Loop
.010824					_BinaryDivide_Exit:
.010824	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010826	29 01 00	and #$0001		and 	#1
.010829	f0 03		beq $01082e		beq 	_BinaryDivide_Exit2
.01082b	20 30 08	jsr $010830		jsr 	Binary_DivNegate
.01082e					_BinaryDivide_Exit2:
.01082e	7a		ply			ply 										; restore Y
.01082f	60		rts			rts
.010830					Binary_DivNegate:
.010830	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010832	38		sec			sec 										; negate the value at stack X.
.010833	a9 00 00	lda #$0000		lda 	#$0000
.010836	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010838	95 00		sta $00,x		sta 	EXSValueL+0,x
.01083a	a9 00 00	lda #$0000		lda 	#$0000
.01083d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01083f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010841	60		rts			rts
.010842					Binary_Modulus:
.010842	20 cb 07	jsr $0107cb		jsr 	Binary_Divide 						; do the divide
.010845	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010847	95 00		sta $00,x		sta 	EXSValueL+0,x
.010849	a5 0a		lda $0a			lda 	DTemp1+2
.01084b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01084d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01084e					Binary_Multiply:
.01084e	20 d4 04	jsr $0104d4		jsr 	CheckBothNumeric 					; check both values are numeric
.010851	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010853	85 08		sta $08			sta 	DTemp1
.010855	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010857	85 0a		sta $0a			sta		DTemp1+2
.010859	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01085b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01085d					_BinaryMultiply_Loop:
.01085d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01085f	05 0a		ora $0a			ora 	DTemp1+2
.010861	f0 1e		beq $010881		beq 	_BinaryMultiply_Exit
.010863	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010865	29 01 00	and #$0001		and 	#1
.010868	f0 0d		beq $010877		beq 	_BinaryMultiply_NoAdd
.01086a	18		clc			clc 										; add multiplicand to result.
.01086b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01086d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01086f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010871	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010873	75 12		adc $12,x		adc 	EXSValueH+2,x
.010875	95 10		sta $10,x		sta 	EXSValueH+0,x
.010877					_BinaryMultiply_NoAdd:
.010877	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010879	66 08		ror $08			ror 	DTemp1
.01087b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01087d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01087f	80 dc		bra $01085d		bra 	_BinaryMultiply_Loop 				; go round again.
.010881					_BinaryMultiply_Exit:
.010881	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010882					Function_Len:
.010882	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010885	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get the value you are absoluting
.010888	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.01088b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01088d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010890	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010893	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010895	74 10		stz $10,x			stz 	EXSValueH+0,x
.010897	60		rts				rts
.010898					Function_Abs:
.010898	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.01089b	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01089e	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.0108a1	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0108a3	30 07		bmi $0108ac			bmi 	_FAbsNegative 				; negate it if negative
.0108a5	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0108a7	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0108a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ab	60		rts				rts
.0108ac					_FAbsNegative:
.0108ac	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0108ad	a9 00 00	lda #$0000			lda 	#0
.0108b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108b4	a9 00 00	lda #$0000			lda 	#0
.0108b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0108b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108bb	60		rts				rts
.0108bc					Function_Sgn:
.0108bc	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns integer
.0108bf	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get an integer
.0108c2	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.0108c5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108c7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108c9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108cb	30 07		bmi $0108d4			bmi 	_FSgnNegative 				; set to -1 if signed
.0108cd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108cf	f0 02		beq $0108d3			beq 	_FSgnExit
.0108d1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108d3					_FSgnExit:
.0108d3	60		rts				rts
.0108d4					_FSgnNegative:
.0108d4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108d7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108d9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108db	60		rts				rts
.0108dc					Function_Random:
.0108dc	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.0108df	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger
.0108e2	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108e4	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108e6	d0 0a		bne $0108f2			bne 	_Rnd_NotZero
.0108e8	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108eb	85 10		sta $10				sta 	DRandom
.0108ed	a9 ea 00	lda #$00ea			lda 	#$EA
.0108f0	85 12		sta $12				sta 	DRandom+2
.0108f2					_Rnd_NotZero:
.0108f2	20 fd 08	jsr $0108fd			jsr 	_Rnd_Process 				; call randomiser twice
.0108f5	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108f7	20 fd 08	jsr $0108fd			jsr 	_Rnd_Process
.0108fa	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108fc	60		rts				rts
.0108fd					_Rnd_Process:
.0108fd	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108ff	26 12		rol $12				rol 	DRandom+2
.010901	90 0e		bcc $010911			bcc 	_Rnd_Exit
.010903	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010905	49 54 d4	eor #$d454			eor 	#$D454
.010908	85 10		sta $10				sta 	DRandom
.01090a	a5 12		lda $12				lda 	DRandom+2
.01090c	49 d5 55	eor #$55d5			eor 	#$55D5
.01090f	85 12		sta $12				sta 	DRandom+2
.010911					_Rnd_Exit:
.010911	a5 10		lda $10				lda 	DRandom
.010913	45 12		eor $12				eor 	DRandom+2
.010915	60		rts				rts
.010916					Function_Chr:
.010916	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string
.010919	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get integer
.01091c	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.01091f	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010922	d0 12		bne $010936			bne 	_FCHBad
.010924	48		pha				pha  								; save char # on stack
.010925	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010928	20 32 05	jsr $010532			jsr 	StringTempAllocate
.01092b	68		pla				pla 								; restore character number
.01092c	20 5e 05	jsr $01055e			jsr 	StringWriteCharacter 		; write it out.
.01092f	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010931	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010933	74 10		stz $10,x			stz 	EXSValueH+0,x
.010935	60		rts				rts
.010936					_FCHBad:
.010936	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010939	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010941	65 20 66 6f 72 20 63 68 72 24 28 29 00
.01094e					Function_Asc:
.01094e	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010951	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get string
.010954	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.010957	a8		tay				tay 								; string address in Y
.010958	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.01095b	29 ff 00	and #$00ff			and 	#$00FF
.01095e	f0 0b		beq $01096b			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010960	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010963	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010966	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010968	74 10		stz $10,x			stz 	EXSValueH+0,x
.01096a	60		rts				rts
.01096b					_FASBad:
.01096b	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01096e	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010976	65 20 66 6f 72 20 61 73 63 28 29 00
.010982					Function_SPC:
.010982	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string
.010985	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010988	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.01098b	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01098e	d0 17		bne $0109a7			bne 	_FSPBad
.010990	48		pha				pha 								; save length
.010991	20 32 05	jsr $010532			jsr 	StringTempAllocate 			; allocate character space
.010994	7a		ply				ply 								; get count in Y
.010995	f0 09		beq $0109a0			beq 	_FSPExit 					; if zero, just empty string
.010997					_FSPCopy:
.010997	a9 20 00	lda #$0020			lda 	#" "						; space character
.01099a	20 5e 05	jsr $01055e			jsr 	StringWriteCharacter 		; write it out.
.01099d	88		dey				dey
.01099e	d0 f7		bne $010997			bne 	_FSPCopy	 				; do it Y times
.0109a0					_FSPExit:
.0109a0	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0109a2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109a4	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109a6	60		rts				rts
.0109a7					_FSPBad:
.0109a7	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0109aa	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109b2	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109be					Function_LEFT:
.0109be	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.0109c1	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109c4	48		pha				pha 								; save string on stack.
.0109c5	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; get count
.0109c8	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger
.0109cb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109ce	d0 6d		bne $010a3d			bne 	FNStringParameter
.0109d0	85 08		sta $08				sta 	DTemp1 						; save count.
.0109d2	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket
.0109d5	7a		ply				ply 								; Y points to string.
.0109d6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109d9	29 ff 00	and #$00ff			and 	#$00FF
.0109dc	f0 52		beq $010a30			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109de	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109e0	f0 55		beq $010a37			beq 	FNStringY 					; return string in Y if current len = required len.
.0109e2	90 53		bcc $010a37			bcc 	FNStringY 					; if current < required return whole thing.
.0109e4	c8		iny				iny 								; take from here - start of string
.0109e5	80 33		bra $010a1a			bra 	FNDTemp1Characters
.0109e7					Function_RIGHT:
.0109e7	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.0109ea	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109ed	48		pha				pha 								; save string on stack.
.0109ee	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; get count
.0109f1	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger
.0109f4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109f7	d0 44		bne $010a3d			bne 	FNStringParameter
.0109f9	85 08		sta $08				sta 	DTemp1 						; save count.
.0109fb	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket
.0109fe	7a		ply				ply 								; Y points to string.
.0109ff	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010a02	29 ff 00	and #$00ff			and 	#$00FF
.010a05	f0 29		beq $010a30			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010a07	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010a09	f0 2c		beq $010a37			beq 	FNStringY 					; return string in Y if current len = required len.
.010a0b	90 2a		bcc $010a37			bcc 	FNStringY 					; if current < required return whole thing.
.010a0d	38		sec				sec 								; current-required is the number to skip
.010a0e	e5 08		sbc $08				sbc 	DTemp1
.010a10	85 0a		sta $0a				sta 	DTemp1+2
.010a12	98		tya				tya
.010a13	18		clc				clc
.010a14	65 0a		adc $0a				adc 	DTemp1+2
.010a16	a8		tay				tay
.010a17	c8		iny				iny 								; +1 for the count.
.010a18	80 00		bra $010a1a			bra 	FNDTemp1Characters
.010a1a					FNDTemp1Characters:
.010a1a	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a1c	f0 12		beq $010a30			beq 	FNStringEmpty 				; if zero, return empty string.
.010a1e	20 32 05	jsr $010532			jsr 	StringTempAllocate
.010a21	48		pha				pha 								; save the address
.010a22					_FND1Loop:
.010a22	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a25	20 5e 05	jsr $01055e			jsr 	StringWriteCharacter
.010a28	c8		iny				iny
.010a29	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a2b	d0 f5		bne $010a22			bne 	_FND1Loop
.010a2d	7a		ply				ply 								; string address in Y
.010a2e	80 07		bra $010a37			bra 	FNStringY
.010a30					FNStringEmpty:
.010a30	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a33	20 32 05	jsr $010532			jsr 	StringTempAllocate 			; put address of it in Y
.010a36	a8		tay				tay
.010a37					FNStringY:
.010a37	98		tya				tya
.010a38	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a3a	74 12		stz $12,x			stz 	EXSValueH+2,x
.010a3c	60		rts				rts
.010a3d					FNStringParameter:
.010a3d	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010a40	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a48	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010a55					Function_MID:
.010a55	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.010a58	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a5b	48		pha				pha 								; save string on stack.
.010a5c	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; get offset (n)
.010a5f	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger
.010a62	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a65	d0 d6		bne $010a3d			bne 	FNStringParameter
.010a67	c9 00 00	cmp #$0000			cmp 	#0
.010a6a	f0 d1		beq $010a3d			beq 	FNStringParameter 			; or zero
.010a6c	48		pha				pha 								; save start position on stack.
.010a6d	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010a70	85 08		sta $08				sta 	DTemp1
.010a72	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010a74	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010a77	d0 0e		bne $010a87			bne 	_FMINoThird
.010a79	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010a7b	e6 06		inc $06				inc 	DCodePtr
.010a7d	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010a80	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010a83	d0 b8		bne $010a3d			bne 	FNStringParameter
.010a85	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010a87					_FMINoThird:
.010a87	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket
.010a8a	68		pla				pla 								; get offset position
.010a8b	85 0c		sta $0c				sta 	DTemp2
.010a8d	7a		ply				ply 								; get address of string in Y
.010a8e	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010a91	29 ff 00	and #$00ff			and 	#$00FF
.010a94	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010a96	90 98		bcc $010a30			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010a98	38		sec				sec 								; calculate number of characters left after
.010a99	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010a9b	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010a9c	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010a9e	b0 02		bcs $010aa2			bcs 	_FMISufficient
.010aa0	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010aa2					_FMISufficient:
.010aa2	98		tya				tya 								; get address
.010aa3	18		clc				clc
.010aa4	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010aa6	a8		tay				tay 								; put in Y
.010aa7	82 70 ff	brl $010a1a			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010aaa					Function_Peek:
.010aaa	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010aad	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ab0	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.010ab3	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ab5	84 0a		sty $0a				sty 	DTemp1+2
.010ab7	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010aba	b7 08		lda [$08],y			lda 	[DTemp1],y
.010abc	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010abf	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ac1	74 10		stz $10,x			stz 	EXSValueH+0,x
.010ac3	60		rts				rts
.010ac4					Function_Deek:
.010ac4	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010ac7	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010aca	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.010acd	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010acf	84 0a		sty $0a				sty 	DTemp1+2
.010ad1	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ad4	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ad6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ad8	74 10		stz $10,x			stz 	EXSValueH+0,x
.010ada	60		rts				rts
.010adb					Function_Leek:
.010adb	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010ade	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ae1	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check )
.010ae4	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ae6	84 0a		sty $0a				sty 	DTemp1+2
.010ae8	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010aeb	b7 08		lda [$08],y			lda 	[DTemp1],y
.010aed	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010aef	c8		iny				iny
.010af0	c8		iny				iny
.010af1	b7 08		lda [$08],y			lda 	[DTemp1],y
.010af3	95 10		sta $10,x			sta 	EXSValueH+0,x
.010af5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010af6					Function_VAL:
.010af6	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns an integer
.010af9	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; get the value you are absoluting
.010afc	48		pha				pha 								; put string address on stack.
.010afd	20 0d 0b	jsr $010b0d			jsr 	VALGetBase 					; process , base (shared with STR$())
.010b00	7a		ply				ply 								; get string address back
.010b01	da		phx				phx 								; save X on stack
.010b02	aa		tax				tax 								; base in X
.010b03	98		tya				tya 								; address in A
.010b04	20 47 0b	jsr $010b47			jsr 	StringToInteger
.010b07	fa		plx				plx 								; restore X
.010b08	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b0a	94 10		sty $10,x			sty 	EXSValueH+0,x
.010b0c	60		rts				rts
.010b0d					VALGetBase:
.010b0d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010b0f	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010b12	f0 07		beq $010b1b			beq 	_VGBAlternate
.010b14	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket			; expect ), and return 10.
.010b17	a9 0a 00	lda #$000a			lda 	#10
.010b1a	60		rts				rts
.010b1b					_VGBAlternate:
.010b1b	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; skip comma.
.010b1e	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get base
.010b21	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010b24	d0 0e		bne $010b34			bne 	_VGBBadBase
.010b26	c9 02 00	cmp #$0002			cmp 	#2
.010b29	90 09		bcc $010b34			bcc 	_VGBBadBase
.010b2b	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010b2e	b0 04		bcs $010b34			bcs 	_VGBBadBase
.010b30	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; get right bracket and return.
.010b33	60		rts				rts
.010b34					_VGBBadBase:
.010b34	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010b37	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010b3f	65 72 20 42 61 73 65 00
.010b47					StringToInteger:
.010b47	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010b49	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010b4b	29 ff 00	and #$00ff			and 	#$00FF
.010b4e	85 26		sta $26				sta 	DTemp3+2
.010b50	f0 6e		beq $010bc0			beq 	_STIError 					; if length zero it's bad.
.010b52	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010b54	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010b56	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010b58	64 0a		stz $0a				stz 	DTemp1+2
.010b5a	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010b5c	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010b5f	48		pha				pha 								; push on stack
.010b60	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010b63	d0 06		bne $010b6b			bne 	_STILoop
.010b65	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b67	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b69	f0 55		beq $010bc0			beq 	_STIError 					; if only - then error.
.010b6b					_STILoop:
.010b6b	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b6d	20 df 0b	jsr $010bdf			jsr 	MultiplyTemp1ByA
.010b70	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b72	29 ff 00	and #$00ff			and 	#$00FF
.010b75	20 d0 0b	jsr $010bd0			jsr 	ConvertUpperCase	 		; make U/C
.010b78	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b7b	90 43		bcc $010bc0			bcc 	_STIError
.010b7d	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b80	90 0e		bcc $010b90			bcc 	_STIOkay1
.010b82	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b85	90 39		bcc $010bc0			bcc 	_STIError
.010b87	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b8a	b0 34		bcs $010bc0			bcs 	_STIError
.010b8c	18		clc				clc 								; shift to correct range.
.010b8d	69 09 00	adc #$0009			adc 	#9
.010b90					_STIOkay1:
.010b90	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b93	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b95	b0 29		bcs $010bc0			bcs 	_STIError
.010b97	18		clc				clc 								; add A to DTemp1
.010b98	65 08		adc $08				adc 	DTemp1
.010b9a	85 08		sta $08				sta 	DTemp1
.010b9c	90 02		bcc $010ba0			bcc 	_STINoCarry
.010b9e	e6 0a		inc $0a				inc 	DTemp1+2
.010ba0					_STINoCarry:
.010ba0	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010ba2	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010ba4	d0 c5		bne $010b6b			bne 	_STILoop 					; loop back.
.010ba6	68		pla				pla 								; get optional minus bac
.010ba7	c9 2d 00	cmp #$002d			cmp 	#"-"
.010baa	d0 0f		bne $010bbb			bne 	_STINotNegative 			; handle the negative character
.010bac	38		sec				sec 								; negate DTemp1
.010bad	a9 00 00	lda #$0000			lda 	#0
.010bb0	e5 08		sbc $08				sbc 	DTemp1
.010bb2	85 08		sta $08				sta 	DTemp1
.010bb4	a9 00 00	lda #$0000			lda 	#0
.010bb7	e5 0a		sbc $0a				sbc 	DTemp1+2
.010bb9	85 0a		sta $0a				sta 	DTemp1+2
.010bbb					_STINotNegative:
.010bbb	a5 08		lda $08				lda 	DTemp1 						; get the result
.010bbd	a4 0a		ldy $0a				ldy 	DTemp1+2
.010bbf	60		rts				rts
.010bc0					_STIError:
.010bc0	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010bc3	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010bcb	74 61 6e 74 00
.010bd0					ConvertUpperCase:
.010bd0	c9 61 00	cmp #$0061			cmp 	#'a'
.010bd3	90 09		bcc $010bde			bcc 	_CUCExit
.010bd5	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010bd8	b0 04		bcs $010bde			bcs 	_CUCExit
.010bda	38		sec				sec
.010bdb	e9 20 00	sbc #$0020			sbc 	#32
.010bde					_CUCExit:
.010bde	60		rts				rts
.010bdf					MultiplyTemp1ByA:
.010bdf					_MTGeneral:
.010bdf	da		phx				phx
.010be0	aa		tax				tax 								; multiplier in X
.010be1	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010be3	85 0c		sta $0c				sta 	DTemp2
.010be5	a5 0a		lda $0a				lda 	DTemp1+2
.010be7	85 0e		sta $0e				sta 	DTemp2+2
.010be9	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010beb	64 0a		stz $0a				stz 	DTemp1+2
.010bed	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010bf0					_MTLoop:
.010bf0	8a		txa				txa 								; shift X right into C
.010bf1	4a		lsr a				lsr 	a
.010bf2	aa		tax				tax
.010bf3	90 10		bcc $010c05			bcc 	_MTNoAdd
.010bf5	18		clc				clc
.010bf6	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010bf8	65 0c		adc $0c				adc 	DTemp2
.010bfa	85 08		sta $08				sta 	DTemp1
.010bfc	a5 0a		lda $0a				lda 	DTemp1+2
.010bfe	65 0e		adc $0e				adc 	DTemp2+2
.010c00	85 0a		sta $0a				sta 	DTemp1+2
.010c02	90 01		bcc $010c05			bcc 	_MTNoAdd
.010c04	c8		iny				iny
.010c05					_MTNoAdd:
.010c05	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010c07	26 0e		rol $0e				rol 	DTemp2+2
.010c09	90 01		bcc $010c0c			bcc 	_MTNoOverflow
.010c0b	c8		iny				iny
.010c0c					_MTNoOverflow:
.010c0c	8a		txa				txa 								; until multiplier is zero.
.010c0d	d0 e1		bne $010bf0			bne 	_MTLoop
.010c0f	98		tya				tya
.010c10	18		clc				clc
.010c11	69 ff ff	adc #$ffff			adc 	#$FFFF
.010c14	fa		plx				plx 								; restore X
.010c15	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010c16					Function_Str:
.010c16	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.010c19	20 f3 02	jsr $0102f3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c1c	48		pha				pha 								; save YA on the stack
.010c1d	5a		phy				phy
.010c1e	20 0d 0b	jsr $010b0d			jsr 	VALGetBase 					; process , base (shared with STR$())
.010c21	85 14		sta $14				sta 	DSignCount
.010c23	7a		ply				ply 								; YA is the number
.010c24	68		pla				pla
.010c25	da		phx				phx
.010c26	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010c28	20 31 0c	jsr $010c31			jsr 	ConvertToString 			; convert it to a string.
.010c2b	fa		plx				plx 								; restore X
.010c2c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010c2e	74 10		stz $10,x			stz 	EXSValueH+0,x
.010c30	60		rts				rts
.010c31					ConvertToString:
.010c31	48		pha				pha
.010c32	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010c35	20 32 05	jsr $010532			jsr 	StringTempAllocate 			; allocate space for return string.
.010c38	68		pla				pla
.010c39					ConvertToStringAlreadyAllocated:
.010c39	da		phx				phx 								; save X (base)
.010c3a	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010c3c	84 26		sty $26				sty 	DTemp3+2
.010c3e	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010c40	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010c42	10 15		bpl $010c59			bpl 	_CTSNotNegative
.010c44	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010c47	20 c3 0c	jsr $010cc3			jsr 	CTSOutputA
.010c4a	38		sec				sec 								; negate DTemp3 which is the number
.010c4b	a9 00 00	lda #$0000			lda 	#0
.010c4e	e5 24		sbc $24				sbc 	DTemp3
.010c50	85 24		sta $24				sta 	DTemp3
.010c52	a9 00 00	lda #$0000			lda 	#0
.010c55	e5 26		sbc $26				sbc 	DTemp3+2
.010c57	85 26		sta $26				sta 	DTemp3+2
.010c59					_CTSNotNegative:
.010c59	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010c5c	48		pha				pha
.010c5d	a9 00 00	lda #$0000			lda 	#0
.010c60	48		pha				pha
.010c61	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010c63	85 08		sta $08				sta 	DTemp1
.010c65	64 0a		stz $0a				stz 	DTemp1+2
.010c67					_CTSMultiplySubtractor:
.010c67	38		sec				sec 								; check number vs subtractor
.010c68	a5 24		lda $24				lda 	DTemp3
.010c6a	e5 08		sbc $08				sbc 	DTemp1
.010c6c	a5 26		lda $26				lda 	DTemp3+2
.010c6e	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c70	90 0f		bcc $010c81			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c72	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c74	48		pha				pha
.010c75	a5 0a		lda $0a				lda 	DTemp1+2
.010c77	48		pha				pha
.010c78	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c7a	20 df 0b	jsr $010bdf			jsr 	MultiplyTemp1ByA
.010c7d	b0 02		bcs $010c81			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c7f	80 e6		bra $010c67			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c81					_CTSScaledUp:
.010c81	7a		ply				ply 								; YA contains the previous divider.
.010c82	68		pla				pla
.010c83	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c86	d0 05		bne $010c8d			bne 	_CTSHasDigit
.010c88	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c8b	f0 20		beq $010cad			beq 	_CTSExit
.010c8d					_CTSHasDigit:
.010c8d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c8f	84 0e		sty $0e				sty 	DTemp2+2
.010c91	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c94					_CTSSubLoop:
.010c94	38		sec				sec 								; subtract subtractor from number
.010c95	a5 24		lda $24				lda 	DTemp3
.010c97	e5 0c		sbc $0c				sbc 	DTemp2
.010c99	a8		tay				tay 								; intermediate in Y
.010c9a	a5 26		lda $26				lda 	DTemp3+2
.010c9c	e5 0e		sbc $0e				sbc 	DTemp2+2
.010c9e	90 07		bcc $010ca7			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010ca0	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010ca2	84 24		sty $24				sty 	DTemp3
.010ca4	e8		inx				inx 								; one more subtraction
.010ca5	80 ed		bra $010c94			bra 	_CTSSubLoop 				; try it again.
.010ca7					_CTSFinishedSubtracting:
.010ca7	8a		txa				txa 								; convert to ASCII.
.010ca8	20 b6 0c	jsr $010cb6			jsr 	CTSOutputHexDigit 			; write that out.
.010cab	80 d4		bra $010c81			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010cad					_CTSExit:
.010cad	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010caf	20 b6 0c	jsr $010cb6			jsr 	CTSOutputHexDigit
.010cb2	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010cb4	fa		plx				plx 								; restore X.
.010cb5	60		rts				rts
.010cb6					CTSOutputHexDigit:
.010cb6	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010cb9	90 04		bcc $010cbf			bcc 	_CTSNotLetter
.010cbb	18		clc				clc
.010cbc	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010cbf					_CTSNotLetter:
.010cbf	18		clc				clc
.010cc0	69 30 00	adc #$0030			adc 	#48
.010cc3					CTSOutputA:
.010cc3	5a		phy				phy 								; save Y, set Y to current pointer
.010cc4	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010cc6	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010cc9	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010ccb	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010ccd	1a		inc a				inc 	a
.010cce	92 18		sta ($18)			sta 	(DStartTempString)
.010cd0	c2 20		rep #$20			rep 	#$20
.010cd2	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010cd4	7a		ply				ply 								; restore Y and exit.
.010cd5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010cd6					Function_INSTR:
.010cd6	20 f4 04	jsr $0104f4			jsr 	ResetTypeInteger 			; returns a integer
.010cd9	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; evaluate a string.
.010cdc	48		pha				pha 								; save string to search
.010cdd	20 cb 04	jsr $0104cb			jsr 	ExpectComma
.010ce0	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; string to search for
.010ce3	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket
.010ce6	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010ce8	68		pla				pla
.010ce9	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010ceb	74 10		stz $10,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010ced	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010cef	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010cf1	38		sec				sec
.010cf2	b2 0c		lda ($0c)			lda 	(DTemp2)
.010cf4	f2 08		sbc ($08)			sbc		(DTemp1)
.010cf6	c2 20		rep #$20			rep 	#$20
.010cf8	90 25		bcc $010d1f			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010cfa	29 ff 00	and #$00ff			and 	#$00FF
.010cfd	1a		inc a				inc 	a
.010cfe	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010d00					_FINSLoop:
.010d00	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010d02	1a		inc a				inc 	a
.010d03	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d05	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010d07	29 ff 00	and #$00ff			and 	#$00FF
.010d0a	a8		tay				tay									; start comparing at index 1.
.010d0b					_FINSCompare:
.010d0b	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010d0d	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010d0f	29 ff 00	and #$00ff			and 	#$00FF
.010d12	d0 05		bne $010d19			bne 	_FINSNext
.010d14	88		dey				dey
.010d15	d0 f4		bne $010d0b			bne 	_FINSCompare
.010d17	80 08		bra $010d21			bra 	_FINSExit
.010d19					_FINSNext:
.010d19	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010d1b	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010d1d	d0 e1		bne $010d00			bne 	_FINSLoop
.010d1f					_FINSFail:
.010d1f	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010d21					_FINSExit:
.010d21	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010d22					Function_UPPER:
.010d22	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.010d25	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; evaluate a string.
.010d28	48		pha				pha
.010d29	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; close call.
.010d2c	20 32 05	jsr $010532			jsr		StringTempAllocate 			; allocate memory for it
.010d2f	68		pla				pla
.010d30	20 6c 05	jsr $01056c			jsr 	StringCreateCopy 			; create a copy of it.
.010d33	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d35	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d37	a8		tay				tay 								; address in Y
.010d38	74 10		stz $10,x			stz 	EXSValueH+0,x
.010d3a	da		phx				phx 								; save X
.010d3b	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d3d	29 ff 00	and #$00ff			and 	#$00FF
.010d40	f0 20		beq $010d62			beq 	_FUPExit
.010d42	aa		tax				tax 								; put in X
.010d43					_FUPLoop:
.010d43	c8		iny				iny 								; increment and load character
.010d44	b9 00 00	lda $0000,y			lda 	$0000,y
.010d47	29 ff 00	and #$00ff			and 	#$00FF
.010d4a	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010d4d	90 10		bcc $010d5f			bcc 	_FUPNoChange
.010d4f	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010d52	b0 0b		bcs $010d5f			bcs 	_FUPNoChange
.010d54	38		sec				sec 								; shift case
.010d55	e9 20 00	sbc #$0020			sbc 	#32
.010d58	e2 20		sep #$20			sep 	#$20 						; write back
.010d5a	99 00 00	sta $0000,y			sta 	$0000,y
.010d5d	c2 20		rep #$20			rep 	#$20
.010d5f					_FUPNoChange:
.010d5f	ca		dex				dex 								; do X times
.010d60	d0 e1		bne $010d43			bne 	_FUPLoop
.010d62					_FUPExit:
.010d62	fa		plx				plx 								; restore X
.010d63	60		rts				rts
.010d64					Function_LOWER:
.010d64	20 fc 04	jsr $0104fc			jsr 	ResetTypeString 			; returns a string.
.010d67	20 12 03	jsr $010312			jsr 	EvaluateNextString 			; evaluate a string.
.010d6a	48		pha				pha
.010d6b	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; close call.
.010d6e	20 32 05	jsr $010532			jsr		StringTempAllocate 			; allocate memory for it
.010d71	68		pla				pla
.010d72	20 6c 05	jsr $01056c			jsr 	StringCreateCopy 			; create a copy of it.
.010d75	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010d77	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d79	a8		tay				tay 								; address in Y
.010d7a	74 10		stz $10,x			stz 	EXSValueH+0,x
.010d7c	da		phx				phx 								; save X
.010d7d	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010d7f	29 ff 00	and #$00ff			and 	#$00FF
.010d82	f0 20		beq $010da4			beq 	_FLOExit
.010d84	aa		tax				tax 								; put in X
.010d85					_FLOLoop:
.010d85	c8		iny				iny 								; increment and load character
.010d86	b9 00 00	lda $0000,y			lda 	$0000,y
.010d89	29 ff 00	and #$00ff			and 	#$00FF
.010d8c	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010d8f	90 10		bcc $010da1			bcc 	_FLONoChange
.010d91	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010d94	b0 0b		bcs $010da1			bcs 	_FLONoChange
.010d96	18		clc				clc 								; shift case
.010d97	69 20 00	adc #$0020			adc 	#32
.010d9a	e2 20		sep #$20			sep 	#$20 						; write back
.010d9c	99 00 00	sta $0000,y			sta 	$0000,y
.010d9f	c2 20		rep #$20			rep 	#$20
.010da1					_FLONoChange:
.010da1	ca		dex				dex 								; do X times
.010da2	d0 e1		bne $010d85			bne 	_FLOLoop
.010da4					_FLOExit:
.010da4	fa		plx				plx 								; restore X
.010da5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010da6					Function_Let:
.010da6	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010da8	48		pha				pha  								; save on stack for later.
.010da9	20 59 03	jsr $010359			jsr 	VariableFind 				; find the variable
.010dac	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010dae	b0 1c		bcs $010dcc			bcs 	_FLetFound 					; skip if found.
.010db0	68		pla				pla 								; get and push the first token again.
.010db1	48		pha				pha
.010db2	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010db5	d0 57		bne $010e0e			bne 	_FLError					; arrays, so this causes an error.
.010db7	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010db9	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010dbc	20 03 04	jsr $010403			jsr 	VariableCreate 				; create it.
.010dbf	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010dc1					_FLSkipToken:
.010dc1	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010dc3	e6 06		inc $06				inc 	DCodePtr
.010dc5	e6 06		inc $06				inc 	DCodePtr
.010dc7	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010dca	d0 f5		bne $010dc1			bne 	_FLSkipToken
.010dcc					_FLetFound:
.010dcc	68		pla				pla 								; get and save the first token.
.010dcd	48		pha				pha
.010dce	a8		tay				tay 								; put it in Y
.010dcf	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010dd2	f0 07		beq $010ddb			beq 	_FLetNotArray
.010dd4	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010dd6	20 d0 03	jsr $0103d0			jsr 	VariableSubscript			; index calculation
.010dd9	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010ddb					_FLetNotArray:
.010ddb	7a		ply				ply 								; get the first token into Y
.010ddc	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010dde	48		pha				pha
.010ddf	5a		phy				phy 								; save the first token on the stack.
.010de0	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010de3	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.010de6	68		pla				pla 								; restore the first token.
.010de7	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010dea	d0 0f		bne $010dfb			bne 	_FLetString 				; skip if string.
.010dec	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; get an integer
.010def	7a		ply				ply 								; get address in Y
.010df0	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010df2	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010df5	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010df7	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010dfa	60		rts				rts
.010dfb					_FLetString:
.010dfb	20 f9 02	jsr $0102f9			jsr 	EvaluateString 				; get a string.
.010dfe	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010e00	20 8d 05	jsr $01058d			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010e03	7a		ply				ply 								; get address
.010e04	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010e07	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010e0a	99 02 00	sta $0002,y			sta 	$0002,y
.010e0d	60		rts				rts
.010e0e					_FLError:
.010e0e	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>010e11	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010e19	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.010e21					Command_List:
.010e21	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.010e24	20 32 05	jsr $010532		jsr 	StringTempAllocate
.010e27	85 30		sta $30			sta 	DListBuffer						; save buffer.
.010e29	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.010e2b	64 2e		stz $2e			stz 	DIndent2
.010e2d	64 32		stz $32			stz 	DTemp4+0 						; low number
.010e2f	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.010e32	85 34		sta $34			sta 	DTemp4+2 						; high number.
.010e34	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.010e36	f0 28		beq $010e60		beq 	_CLIList
.010e38	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.010e3b	f0 23		beq $010e60		beq 	_CLIList
.010e3d	20 f3 02	jsr $0102f3		jsr 	EvaluateNextInteger 			; yes, first number
.010e40	c0 00 00	cpy #$0000		cpy 	#0
.010e43	d0 18		bne $010e5d		bne 	_CLIError
.010e45	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.010e47	85 34		sta $34			sta 	DTemp4+2
.010e49	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.010e4b	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.010e4e	d0 10		bne $010e60		bne 	_CLIList
.010e50	20 cb 04	jsr $0104cb		jsr 	ExpectComma 					; skip comma
.010e53	20 f3 02	jsr $0102f3		jsr 	EvaluateNextInteger 			; get end line.
.010e56	85 34		sta $34			sta 	DTemp4+2
.010e58	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.010e5b	f0 03		beq $010e60		beq 	_CLIList
.010e5d					_CLIError:
.010e5d	82 38 f6	brl $010498		brl 	SyntaxError
.010e60					_CLIList:
.010e60	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.010e63	18		clc			clc
.010e64	65 02		adc $02			adc 	DBaseAddress
.010e66	a8		tay			tay 									; put in Y
.010e67					_CLINextLine:
.010e67	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.010e6a	f0 29		beq $010e95		beq 	_CLIExit
.010e6c	20 fd 0f	jsr $010ffd		jsr 	ScanIndent  					; scan for formatting.
.010e6f	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.010e72	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.010e74	90 14		bcc $010e8a		bcc 	_CLIFollowLink
.010e76	c5 34		cmp $34			cmp 	DTemp4+2
.010e78	f0 02		beq $010e7c		beq 	_CLIShowLine
.010e7a	b0 0e		bcs $010e8a		bcs 	_CLIFollowLink
.010e7c					_CLIShowLine:
.010e7c	a5 30		lda $30			lda 	DListBuffer
.010e7e	20 98 0e	jsr $010e98		jsr 	Detokenise 						; detokenise it
.010e81	5a		phy			phy
.010e82	a8		tay			tay 									; print buffer out
.010e83	20 18 05	jsr $010518		jsr 	PrintBasicString
.010e86	20 4e 17	jsr $01174e		jsr 	HWNewLine
.010e89	7a		ply			ply 									; get address
.010e8a					_CLIFollowLink:
.010e8a	98		tya			tya 									; follow link
.010e8b	18		clc			clc
.010e8c	79 00 00	adc $0000,y		adc 	$0000,y
.010e8f	a8		tay			tay
.010e90	20 68 17	jsr $011768		jsr 	HWCheckBreak 					; break key pressed.
.010e93	f0 d2		beq $010e67		beq 	_CLINextLine
.010e95					_CLIExit:
.010e95	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.010e97	60		rts			rts
.010e98					Detokenise:
.010e98	48		pha			pha
.010e99	da		phx			phx
.010e9a	5a		phy			phy
.010e9b	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.010e9d	1a		inc a			inc 	a
.010e9e	85 1a		sta $1a			sta 	DCurrentTempString
.010ea0	64 1c		stz $1c			stz		DConstantShift
.010ea2	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.010ea5	92 18		sta ($18)		sta 	(DStartTempString)
.010ea7	5a		phy			phy 									; save Y
.010ea8	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.010eab	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.010eae	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.010eb1	20 39 0c	jsr $010c39		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010eb4	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.010eb6	c5 2e		cmp $2e			cmp 	DIndent2
.010eb8	90 02		bcc $010ebc		bcc 	_DTKSmaller
.010eba	a5 2e		lda $2e			lda 	DIndent2
.010ebc					_DTKSmaller:
.010ebc	0a		asl a			asl 	a
.010ebd	69 06 00	adc #$0006		adc 	#6
.010ec0	85 08		sta $08			sta 	DTemp1
.010ec2					_DTKPadLineNo:
.010ec2	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.010ec5	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010ec8	b2 18		lda ($18)		lda 	(DStartTempString)
.010eca	29 ff 00	and #$00ff		and 	#$00FF
.010ecd	c5 08		cmp $08			cmp 	DTemp1
.010ecf	d0 f1		bne $010ec2		bne 	_DTKPadLineNo
.010ed1	68		pla			pla 									; get pointer
.010ed2	18		clc			clc 									; point to start of line
.010ed3	69 04 00	adc #$0004		adc 	#4
.010ed6	a8		tay			tay 									; put back in Y.
.010ed7					_DTKMainLoop:
.010ed7	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.010eda	d0 04		bne $010ee0		bne 	_DTKNotZero 					; if zero, return.
.010edc	7a		ply			ply
.010edd	fa		plx			plx
.010ede	68		pla			pla
.010edf	60		rts			rts
.010ee0					_DTKNotZero:
.010ee0	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.010ee3	b0 1c		bcs $010f01		bcs 	_DTKNotString
.010ee5	5a		phy			phy										; save token address on stack.
.010ee6	c8		iny			iny 									; skip first token
.010ee7	c8		iny			iny
.010ee8	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.010eeb	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010eee	98		tya			tya 									; copy the string out.
.010eef	20 6c 05	jsr $01056c		jsr 	StringCreateCopy
.010ef2	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.010ef5	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010ef8	68		pla			pla 									; get token, which is its own offset
.010ef9	a8		tay			tay
.010efa	18		clc			clc
.010efb	79 00 00	adc $0000,y		adc 	$0000,y
.010efe	a8		tay			tay
.010eff	80 d6		bra $010ed7		bra 	_DTKMainLoop
.010f01					_DTKNotString:
.010f01	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.010f04	b0 09		bcs $010f0f		bcs 	_DTKNotShift
.010f06	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.010f09	85 1c		sta $1c			sta 	DConstantShift
.010f0b	c8		iny			iny 									; skip token.
.010f0c	c8		iny			iny
.010f0d	80 c8		bra $010ed7		bra 	_DTKMainLoop
.010f0f					_DTKNotShift:
.010f0f	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.010f12	b0 07		bcs $010f1b		bcs 	_DTKNotKeyword
.010f14	c8		iny			iny 									; skip over token
.010f15	c8		iny			iny
.010f16	20 95 0f	jsr $010f95		jsr 	_DTKDecodeKeyword 				; decode it.
.010f19	80 bc		bra $010ed7		bra 	_DTKMainLoop
.010f1b					_DTKNotKeyword:
.010f1b	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.010f1e	b0 18		bcs $010f38		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.010f20	5a		phy			phy 									; save pointer
.010f21	38		sec			sec  									; shift it in the range 0-32767
.010f22	e9 00 40	sbc #$4000		sbc 	#$4000
.010f25	0a		asl a			asl 	a 								; shift it left, losing bit 15
.010f26	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.010f28	6a		ror a			ror 	a 								; rotate that into the constant value
.010f29	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.010f2b	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.010f2e	20 39 0c	jsr $010c39		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.010f31	64 1c		stz $1c			stz 	DConstantShift
.010f33	7a		ply			ply 									; restore pointer
.010f34	c8		iny			iny 									; skip token.
.010f35	c8		iny			iny
.010f36	80 9f		bra $010ed7		bra 	_DTKMainLoop
.010f38					_DTKIdentifier:
.010f38	48		pha			pha 									; save token for typing at end
.010f39					_DTKILoop:
.010f39	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.010f3c	20 65 0f	jsr $010f65		jsr 	_DTKIDecodeToken 				; decode it.
.010f3f	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.010f42	c8		iny			iny 									; skip it
.010f43	c8		iny			iny
.010f44	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.010f47	d0 f0		bne $010f39		bne 	_DTKILoop
.010f49	68		pla			pla 									; add $( as required.
.010f4a	48		pha			pha 									; comes from the first token.
.010f4b	29 00 20	and #$2000		and 	#IDTypeMask
.010f4e	f0 06		beq $010f56		beq 	_DTKINotString
.010f50	a9 24 00	lda #$0024		lda 	#"$"
.010f53	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010f56					_DTKINotString:
.010f56	68		pla			pla
.010f57	29 00 10	and #$1000		and 	#IDArrayMask
.010f5a	f0 06		beq $010f62		beq 	_DTKINotArray
.010f5c	a9 28 00	lda #$0028		lda 	#"("
.010f5f	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010f62					_DTKINotArray:
.010f62	82 72 ff	brl $010ed7		brl 	_DTKMainLoop
.010f65					_DTKIDecodeToken:
.010f65	5a		phy			phy
.010f66	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.010f69	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.010f6c					_DTKIDivide:
.010f6c	38		sec			sec
.010f6d	e9 2d 00	sbc #$002d		sbc 	#45
.010f70	c8		iny			iny
.010f71	b0 f9		bcs $010f6c		bcs 	_DTKIDivide
.010f73	69 2d 00	adc #$002d		adc 	#45
.010f76	20 7f 0f	jsr $010f7f		jsr 	_DTKIOutA 						; output low.
.010f79	98		tya			tya
.010f7a	20 7f 0f	jsr $010f7f		jsr 	_DTKIOutA 						; output high
.010f7d	7a		ply			ply
.010f7e	60		rts			rts
.010f7f					_DTKIOutA:
.010f7f	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.010f82	f0 10		beq $010f94		beq 	_DTKIOutExit
.010f84	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.010f87	90 04		bcc $010f8d		bcc 	_DTKIOutAlpha
.010f89	38		sec			sec  									; adjust for 0-9
.010f8a	e9 4b 00	sbc #$004b		sbc 	#$4B
.010f8d					_DTKIOutAlpha:
.010f8d	18		clc			clc										; adjust for A-Z
.010f8e	69 60 00	adc #$0060		adc 	#96
.010f91	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010f94					_DTKIOutExit:
.010f94	60		rts			rts
.010f95					_DTKDecodeKeyword:
.010f95	48		pha			pha
.010f96	da		phx			phx
.010f97	5a		phy			phy
.010f98	a8		tay			tay 									; save token ID in Y
.010f99	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.010f9c	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.010f9f	48		pha			pha 									; save this flag on a stack
.010fa0	5a		phy			phy 									; save the token ID
.010fa1	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.010fa4	d0 19		bne $010fbf		bne 	_DTKNotSpecial1
.010fa6	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.010fa8	88		dey			dey
.010fa9	b9 00 00	lda $0000,y		lda 	$0000,y
.010fac	29 ff 00	and #$00ff		and 	#$00FF
.010faf	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.010fb2	f0 0b		beq $010fbf		beq 	_DTKNotSpecial1
.010fb4	c9 3a 00	cmp #$003a		cmp 	#":"
.010fb7	f0 06		beq $010fbf		beq 	_DTKNotSpecial1
.010fb9	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.010fbc	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010fbf					_DTKNotSpecial1:
.010fbf	68		pla			pla
.010fc0	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.010fc3	a8		tay			tay 									; into Y.
.010fc4	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.010fc7					_DTKDWorkThrough:
.010fc7	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.010fc8	f0 0f		beq $010fd9		beq 	_DTKDFound
.010fca	86 08		stx $08			stx 	DTemp1
.010fcc	bf 90 00 01	lda $010090,x		lda 	TokenText,x 					; read the type/skip byte.
.010fd0	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.010fd3	18		clc			clc
.010fd4	65 08		adc $08			adc 	DTemp1
.010fd6	aa		tax			tax
.010fd7	80 ee		bra $010fc7		bra 	_DTKDWorkThrough
.010fd9					_DTKDFound:
.010fd9	bf 90 00 01	lda $010090,x		lda 	TokenText,x 					; get skip
.010fdd	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.010fe0	3a		dec a			dec 	a
.010fe1	a8		tay			tay 									; put in Y
.010fe2					_DTKOut:
.010fe2	bf 91 00 01	lda $010091,x		lda 	TokenText+1,x 					; output it.
.010fe6	29 ff 00	and #$00ff		and 	#$00FF
.010fe9	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010fec	e8		inx			inx
.010fed	88		dey			dey
.010fee	d0 f2		bne $010fe2		bne 	_DTKOut
.010ff0	68		pla			pla 									; trailing space.
.010ff1	d0 06		bne $010ff9		bne 	_DTKNotSpecial2
.010ff3	a9 20 00	lda #$0020		lda 	#" "
.010ff6	20 5e 05	jsr $01055e		jsr 	StringWriteCharacter
.010ff9					_DTKNotSpecial2:
.010ff9	7a		ply			ply
.010ffa	fa		plx			plx
.010ffb	68		pla			pla
.010ffc	60		rts			rts
.010ffd					ScanIndent:
.010ffd	48		pha			pha
.010ffe	5a		phy			phy
.010fff	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011001	85 2e		sta $2e			sta 	DIndent2
.011003	98		tya			tya
.011004	18		clc			clc 									; point to code.
.011005	69 04 00	adc #$0004		adc 	#4
.011008	a8		tay			tay
.011009					_SILoop:
.011009	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01100c	f0 35		beq $011043		beq 	_SIExit
.01100e	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011011	b0 08		bcs $01101b		bcs 	_SICheckKeyword
.011013	98		tya			tya 									; skip string.
.011014	18		clc			clc
.011015	79 00 00	adc $0000,y		adc 	$0000,y
.011018	a8		tay			tay
.011019	80 ee		bra $011009		bra 	_SILoop
.01101b					_SICheckKeyword:
.01101b	29 00 e0	and #$e000		and 	#$E000
.01101e	c9 00 20	cmp #$2000		cmp 	#$2000
.011021	f0 04		beq $011027		beq 	_SIFoundKeyword
.011023					_SIAdvance:
.011023	c8		iny			iny 									; if not, loop round.
.011024	c8		iny			iny
.011025	80 e2		bra $011009		bra 	_SILoop
.011027					_SIFoundKeyword:
.011027	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.01102a	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01102d	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011030	f0 0d		beq $01103f		beq 	_SIKeyPlus
.011032	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011035	d0 ec		bne $011023		bne 	_SIAdvance
.011037	c6 2c		dec $2c			dec 	DIndent
.011039	10 e8		bpl $011023		bpl 	_SIAdvance
.01103b	64 2c		stz $2c			stz 	DIndent
.01103d	80 e4		bra $011023		bra 	_SIAdvance
.01103f					_SIKeyPlus:
.01103f	e6 2c		inc $2c			inc 	DIndent
.011041	80 e0		bra $011023		bra 	_SIAdvance
.011043					_SIExit:
.011043	7a		ply			ply
.011044	68		pla			pla
.011045	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.011046					Function_PRINT:
.011046	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011048	f0 33		beq $01107d			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.01104a	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.01104d	f0 2e		beq $01107d			beq 	_FPRExitCR
.01104f	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011052	f0 23		beq $011077			beq 	_FPRSkipLoop
.011054	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.011057	f0 1b		beq $011074			beq 	_FPRNewLine
.011059	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.01105c	f0 11		beq $01106f			beq 	_FPRTab
.01105e					_FPRExpression:
.01105e	20 cc 01	jsr $0101cc			jsr 	Evaluate 					; evaluate a string or integer.
.011061	b0 06		bcs $011069			bcs 	_FPRHaveString
.011063	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011066	20 31 0c	jsr $010c31			jsr 	ConvertToString
.011069					_FPRHaveString:
.011069	a8		tay				tay 								; print the basic String.
.01106a	20 18 05	jsr $010518			jsr 	PrintBASICString
.01106d	80 d7		bra $011046			bra 	Function_Print 				; and go round again.
.01106f					_FPRTab:
.01106f	20 61 17	jsr $011761			jsr 	HWTab
.011072	80 03		bra $011077			bra 	_FPRSkipLoop
.011074					_FPRNewLine:
.011074	20 4e 17	jsr $01174e			jsr 	HWNewLine
.011077					_FPRSkipLoop:
.011077	e6 06		inc $06				inc 	DCodePtr
.011079	e6 06		inc $06				inc 	DCodePtr
.01107b	80 c9		bra $011046			bra 	Function_Print
.01107d					_FPRExitCR:
.01107d	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.01107f	88		dey				dey
.011080	88		dey				dey
.011081	b9 00 00	lda $0000,y			lda 	$0000,y
.011084	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.011087	f0 08		beq $011091			beq 	_FPRExit
.011089	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.01108c	f0 03		beq $011091			beq 	_FPRExit
.01108e	20 4e 17	jsr $01174e			jsr 	HWNewLine 					; print a new line.
.011091					_FPRExit:
.011091	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011092					Function_IF:
.011092	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; check success.
.011095	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011097	05 08		ora $08				ora 	DTemp1
.011099	a8		tay				tay 								; success flag in Y.
.01109a	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.01109c	c9 45 3a	cmp #$3a45			cmp 	#thenTokenID
.01109f	d0 32		bne $0110d3			bne 	_FIFExtended 				; if so, go to the extended IF.
.0110a1	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0110a3	e6 06		inc $06				inc 	DCodePtr
.0110a5	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0110a8	f0 0f		beq $0110b9			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0110aa	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0110ac	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0110af	90 21		bcc $0110d2			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0110b1	c9 00 c0	cmp #$c000			cmp 	#$C000
.0110b4	b0 1c		bcs $0110d2			bcs 	_FIFContinue
.0110b6	4c 48 13	jmp $011348			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0110b9					_FIFEndOfLine:
.0110b9	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0110bb	f0 15		beq $0110d2			beq 	_FIFContinue 				; if done so, continue.
.0110bd	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0110c0	90 06		bcc $0110c8			bcc 	_FIFStringConstant
.0110c2	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0110c4	e6 06		inc $06				inc 	DCodePtr
.0110c6	80 f1		bra $0110b9			bra 	_FIFEndOfLine
.0110c8					_FIFStringConstant:
.0110c8	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0110cb	18		clc				clc
.0110cc	65 06		adc $06				adc 	DCodePtr
.0110ce	85 06		sta $06				sta 	DCodePtr
.0110d0	80 e7		bra $0110b9			bra 	_FIFEndOfLine
.0110d2					_FIFContinue:
.0110d2	60		rts				rts
.0110d3					_FIFExtended:
.0110d3	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0110d5	e6 2a		inc $2a				inc 	DStack
.0110d7	a9 41 3c	lda #$3c41			lda 	#ifTokenID
.0110da	a6 2a		ldx $2a				ldx 	DStack
.0110dc	95 00		sta $00,x			sta 	$00,x
.0110de	98		tya				tya 								; see if the test was passed.
.0110df	f0 01		beq $0110e2			beq 	_FIXSkip 					; if zero then it has failed.
.0110e1	60		rts				rts 								; test passed, so continue executing
.0110e2					_FIXSkip:
.0110e2	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0110e5	a2 46 3a	ldx #$3a46			ldx 	#endifTokenID 				; at the same level.
.0110e8	20 48 11	jsr $011148			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0110eb	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0110ed	e6 06		inc $06				inc 	DCodePtr
.0110ef	c9 46 3a	cmp #$3a46			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0110f2	d0 04		bne $0110f8			bne 	_FIXNoThrow
.0110f4	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0110f6	c6 2a		dec $2a				dec 	DStack
.0110f8					_FIXNoThrow:
.0110f8	60		rts				rts
.0110f9					Handler_ELSE:
.0110f9	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0110fb	b5 00		lda $00,x			lda 	$00,x
.0110fd	c9 41 3c	cmp #$3c41			cmp 	#ifTokenID
.011100	d0 12		bne $011114			bne 	_HEBadStructure
.011102	a9 46 3a	lda #$3a46			lda 	#endifTokenID 				; only searching one token.
.011105	a2 00 00	ldx #$0000			ldx 	#$0000
.011108	20 48 11	jsr $011148			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01110b	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01110d	e6 06		inc $06				inc 	DCodePtr
.01110f	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011111	c6 2a		dec $2a				dec 	DStack
.011113	60		rts				rts
.011114					_HEBadStructure:
.011114	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011117	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01111f	68 6f 75 74 20 49 66 00
.011127					Handler_ENDIF:
.011127	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011129	b5 00		lda $00,x			lda 	$00,x
.01112b	c9 41 3c	cmp #$3c41			cmp 	#ifTokenID
.01112e	d0 05		bne $011135			bne 	_HEIBadStructure
.011130	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011132	c6 2a		dec $2a				dec 	DStack
.011134	60		rts				rts
.011135					_HEIBadStructure:
.011135	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011138	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011140	68 6f 75 74 20 49 66 00
.011148					ScanForwardLevel:
.011148	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.01114a	86 0a		stx $0a				stx 	DTemp1+2
.01114c	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01114e	85 0c		sta $0c				sta 	DTemp2
.011150	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011153					_SFLLoop:
.011153	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011156	d0 0d		bne $011165			bne 	_SFLNoCheck 				; we're in a substructure.
.011158	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.01115a	f0 09		beq $011165			beq 	_SFLNoCheck 				; don't check zero
.01115c	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01115e	f0 04		beq $011164			beq 	_SFLFound
.011160	c5 0a		cmp $0a				cmp 	DTemp1+2
.011162	d0 01		bne $011165			bne 	_SFLNoCheck
.011164					_SFLFound:
.011164	60		rts				rts
.011165					_SFLNoCheck:
.011165	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011167	f0 4f		beq $0111b8			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011169	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01116c	90 40		bcc $0111ae			bcc 	_SFLSkipString 				; then handle that.
.01116e	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011170	e6 06		inc $06				inc 	DCodePtr
.011172	a8		tay				tay 								; put token in Y temporarily.
.011173	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011176	c9 00 20	cmp #$2000			cmp 	#$2000
.011179	d0 d8		bne $011153			bne 	_SFLLoop
.01117b	98		tya				tya 								; get the token back.
.01117c	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.01117f	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011182	f0 cf		beq $011153			beq 	_SFLLoop
.011184	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011187	90 ca		bcc $011153			bcc 	_SFLLoop
.011189	e8		inx				inx 								; increment the level.
.01118a	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.01118d	f0 c4		beq $011153			beq 	_SFLLoop
.01118f	ca		dex				dex 								; decrement the level
.011190	ca		dex				dex 								; one overdoes the previous inx.
.011191	10 c0		bpl $011153			bpl 	_SFLLoop 					; if gone -ve then error.
.011193					_SFLError:
.011193	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011195	85 22		sta $22				sta 	DLineNumber
.011197	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01119a	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0111a2	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0111ae					_SFLSkipString:
.0111ae	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0111b1	18		clc				clc
.0111b2	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0111b4	85 06		sta $06				sta 	DCodePtr
.0111b6	80 9b		bra $011153			bra 	_SFLLoop 					; go round again.
.0111b8					_SFLNextLine:
.0111b8	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0111ba	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0111bd	f0 d4		beq $011193			beq 	_SFLError 					; if zero, then there's no more code to search.
.0111bf	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0111c2	85 22		sta $22				sta 	DLineNumber
.0111c4	18		clc				clc
.0111c5	a5 06		lda $06				lda 	DCodePtr
.0111c7	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0111ca	85 06		sta $06				sta 	DCodePtr
.0111cc	80 85		bra $011153			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0111ce					Command_FOR:
.0111ce	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0111d0	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0111d3	d0 60		bne $011235			bne		_CFOBad
.0111d5	20 59 03	jsr $010359			jsr 	VariableFind 				; try to find variable
.0111d8	b0 15		bcs $0111ef			bcs 	_CFOExists
.0111da	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111dc	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0111df	20 03 04	jsr $010403			jsr 	VariableCreate 				; create it.
.0111e2	48		pha				pha 								; save on stack
.0111e3					_CFOSkipToken:
.0111e3	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0111e5	e6 06		inc $06				inc 	DCodePtr
.0111e7	e6 06		inc $06				inc 	DCodePtr
.0111e9	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0111ec	d0 f5		bne $0111e3			bne 	_CFOSkipToken
.0111ee	68		pla				pla 								; restore address
.0111ef					_CFOExists:
.0111ef	48		pha				pha 								; push variable address on stack
.0111f0	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0111f3	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.0111f6	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; this is the start value
.0111f9	bb		tyx				tyx 								; put high value in X
.0111fa	7a		ply				ply 								; address in Y
.0111fb	99 00 00	sta $0000,y			sta 	$0000,y
.0111fe	8a		txa				txa
.0111ff	99 02 00	sta $0002,y			sta 	$0002,y
.011202	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.011205	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.011208	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.01120a	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01120c	95 02		sta $02,x			sta 	$02,x
.01120e	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011210	95 04		sta $04,x			sta 	$04,x
.011212	98		tya				tya 								; save variable address at +6
.011213	95 06		sta $06,x			sta 	$06,x
.011215	a9 42 3c	lda #$3c42			lda 	#forTokenID 				; save for token at +8
.011218	95 08		sta $08,x			sta 	$08,x
.01121a	8a		txa				txa 								; add 8 to stack position
.01121b	18		clc				clc
.01121c	69 08 00	adc #$0008			adc 	#8
.01121f	85 2a		sta $2a				sta 	DStack
.011221	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011224	b2 06		lda ($06)			lda 	(DCodePtr)
.011226	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.011229	d0 09		bne $011234			bne 	_CFONoStep
.01122b	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.01122e	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.011231	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; and whatever the step is.
.011234					_CFONoStep:
.011234	60		rts				rts
.011235					_CFOBad:
.011235	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011238	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011240	76 61 72 69 61 62 6c 65 00
.011249					Command_NEXT:
.011249	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01124b	b5 00		lda $00,x			lda 	$00,x
.01124d	c9 42 3c	cmp #$3c42			cmp 	#forTokenID 				; if not FOR then error
.011250	f0 14		beq $011266			beq 	_CNXOk
.011252	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011255	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01125d	68 6f 75 74 20 46 6f 72 00
.011266					_CNXOk:
.011266	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011268	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01126b	90 22		bcc $01128f			bcc 	_CNXNoVariable
.01126d	20 59 03	jsr $010359			jsr 	VariableFind 				; get address of variable.
.011270	90 08		bcc $01127a			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011272	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011274	ca		dex				dex
.011275	ca		dex				dex
.011276	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.011278	f0 15		beq $01128f			beq 	_CNXNoVariable 				; then continue
.01127a					_CNXNextVar:
.01127a	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01127d	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011285	20 76 61 72 69 61 62 6c 65 00
.01128f					_CNXNoVariable:
.01128f	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011291	48		pha				pha
.011292	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011294	38		sec				sec
.011295	e9 08 00	sbc #$0008			sbc 	#8
.011298	85 2a		sta $2a				sta 	DStack
.01129a	aa		tax				tax 								; X points to the stack.
.01129b	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01129d	85 06		sta $06				sta 	DCodePtr
.01129f	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; this is the target constant
.0112a2	5a		phy				phy 								; save the target on the stack
.0112a3	48		pha				pha
.0112a4	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0112a7	85 08		sta $08				sta 	DTemp1
.0112a9	64 0a		stz $0a				stz 	DTemp1+2
.0112ab	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0112ad	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.0112b0	d0 0b		bne $0112bd			bne 	_CNXNoStep
.0112b2	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0112b4	e6 06		inc $06				inc 	DCodePtr
.0112b6	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; work out the step.
.0112b9	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0112bb	84 0a		sty $0a				sty 	DTemp1+2
.0112bd					_CNXNoStep:
.0112bd	68		pla				pla 								; save the Target in DTemp2
.0112be	85 0c		sta $0c				sta 	DTemp2
.0112c0	68		pla				pla
.0112c1	85 0e		sta $0e				sta 	DTemp2+2
.0112c3	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0112c5	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0112c7	a8		tay				tay
.0112c8	18		clc				clc
.0112c9	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0112cc	65 08		adc $08				adc 	DTemp1
.0112ce	99 00 00	sta $0000,y			sta 	$0000,y
.0112d1	b9 02 00	lda $0002,y			lda 	$0002,y
.0112d4	65 0a		adc $0a				adc 	DTemp1+2
.0112d6	99 02 00	sta $0002,y			sta 	$0002,y
.0112d9	38		sec				sec
.0112da	a5 0c		lda $0c				lda 	DTemp2
.0112dc	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0112df	85 0c		sta $0c				sta 	DTemp2
.0112e1	a5 0e		lda $0e				lda 	DTemp2+2
.0112e3	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0112e6	85 0e		sta $0e				sta 	DTemp2+2
.0112e8	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0112ea	f0 0a		beq $0112f6			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0112ec	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0112ee	45 0a		eor $0a				eor 	DTemp1+2
.0112f0	10 04		bpl $0112f6			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0112f2	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0112f3	85 06		sta $06				sta 	DCodePtr
.0112f5	60		rts				rts
.0112f6					_CNXLoopAgain:
.0112f6	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0112f7	18		clc				clc
.0112f8	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0112fa	aa		tax				tax
.0112fb	69 08 00	adc #$0008			adc 	#8
.0112fe	85 2a		sta $2a				sta 	DStack
.011300	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011302	85 22		sta $22				sta 	DLineNumber
.011304	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.011305					Function_ONGOTO:
.011305	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; on what GOTO :)
.011308	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01130b	d0 25		bne $011332			bne 	_FOGoFail
.01130d	c9 00 00	cmp #$0000			cmp 	#0
.011310	f0 20		beq $011332			beq 	_FOGoFail 					; we start with index = 1
.011312	48		pha				pha 								; save count on stack
.011313	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011316	20 a8 04	jsr $0104a8			jsr 	ExpectToken
.011319	fa		plx				plx 								; put count in X.
.01131a					_FOGoLoop:
.01131a	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01131c	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01131f	90 73		bcc $011394			bcc 	FGOFail 					; if not, then we have an error.
.011321	c9 00 c0	cmp #$c000			cmp 	#$C000
.011324	b0 6e		bcs $011394			bcs 	FGOFail
.011326	ca		dex				dex 								; subtract one, if done, call GOTO code
.011327	f0 1f		beq $011348			beq 	Function_GOTO
.011329	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01132b	e6 06		inc $06				inc 	DCodePtr
.01132d	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; expect a comma
.011330	80 e8		bra $01131a			bra 	_FOGoLoop 					; and loop round.
.011332					_FOGoFail:
.011332	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011335	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01133d	47 6f 74 6f 20 76 61 6c 75 65 00
.011348					Function_GOTO:
.011348	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.01134a	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01134d	90 45		bcc $011394			bcc 	FGOFail 					; we don't do calculate line numbers.
.01134f	c9 00 c0	cmp #$c000			cmp 	#$C000
.011352	b0 40		bcs $011394			bcs 	FGOFail
.011354	38		sec				sec 								; convert to 0-32767
.011355	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011358	aa		tax				tax
.011359	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.01135c	18		clc				clc
.01135d	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.01135f	a8		tay				tay
.011360					_FGOSearch:
.011360	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011363	f0 18		beq $01137d			beq 	_FGOUnknown
.011365	8a		txa				txa 								; does it match line number ?
.011366	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011369	f0 08		beq $011373			beq 	_FGOFound 					; yes, then found.
.01136b	98		tya				tya 								; no follow the link
.01136c	18		clc				clc
.01136d	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011370	a8		tay				tay
.011371	80 ed		bra $011360			bra 	_FGOSearch 					; and keep looking
.011373					_FGOFound:
.011373	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011375	98		tya				tya 								; Y + 4 is the code pointer.
.011376	18		clc				clc 								; (skipping link and line #)
.011377	69 04 00	adc #$0004			adc 	#4
.01137a	85 06		sta $06				sta 	DCodePtr
.01137c	60		rts				rts									; and continue
.01137d					_FGOUnknown:
.01137d	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011380	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011388	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011394					FGOFail:
.011394	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>011397	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>01139f	20 4e 75 6d 62 65 72 00
.0113a7					Function_GOSUB:
.0113a7	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0113a9	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0113ab	18		clc				clc
.0113ac	69 02 00	adc #$0002			adc 	#2
.0113af	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0113b1	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0113b3	95 04		sta $04,x			sta 	$04,x
.0113b5	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0113b8	95 06		sta $06,x			sta 	$06,x
.0113ba	8a		txa				txa 								; advance stack by 6.
.0113bb	18		clc				clc
.0113bc	69 06 00	adc #$0006			adc 	#6
.0113bf	85 2a		sta $2a				sta 	DStack
.0113c1	80 85		bra $011348			bra 	Function_GOTO 				; and do a GOTO.
.0113c3					Function_RETURN:
.0113c3	a6 2a		ldx $2a				ldx 	DStack
.0113c5	b5 00		lda $00,x			lda 	$00,x
.0113c7	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0113ca	d0 11		bne $0113dd			bne 	_FRetFail
.0113cc	8a		txa				txa 								; unpick stack.
.0113cd	38		sec				sec
.0113ce	e9 06 00	sbc #$0006			sbc 	#6
.0113d1	85 2a		sta $2a				sta 	DStack
.0113d3	aa		tax				tax
.0113d4	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0113d6	85 06		sta $06				sta 	DCodePtr
.0113d8	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0113da	85 22		sta $22				sta 	DLineNumber
.0113dc	60		rts				rts
.0113dd					_FRetFail:
.0113dd	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0113e0	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0113e8	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0113f5					Function_REPEAT:
.0113f5	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0113f7	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0113f9	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0113fb	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0113fd	95 04		sta $04,x			sta 	$04,x
.0113ff	a9 3f 3c	lda #$3c3f			lda 	#repeatTokenID 				; save repeat token at +6
.011402	95 06		sta $06,x			sta 	$06,x
.011404	8a		txa				txa 								; advance stack by 6.
.011405	18		clc				clc
.011406	69 06 00	adc #$0006			adc 	#6
.011409	85 2a		sta $2a				sta 	DStack
.01140b	60		rts				rts
.01140c					Function_UNTIL:
.01140c	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.01140e	b5 00		lda $00,x			lda 	$00,x
.011410	c9 3f 3c	cmp #$3c3f			cmp 	#repeatTokenID
.011413	d0 26		bne $01143b			bne 	_FUNFail
.011415	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; .... until what.
.011418	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01141b	d0 15		bne $011432			bne 	_FUNExit
.01141d	c9 00 00	cmp #$0000			cmp 	#0
.011420	d0 10		bne $011432			bne 	_FUNExit
.011422	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011424	38		sec				sec
.011425	e9 06 00	sbc #$0006			sbc 	#6
.011428	aa		tax				tax
.011429	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01142b	85 06		sta $06				sta 	DCodePtr
.01142d	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01142f	85 22		sta $22				sta 	DLineNumber
.011431	60		rts				rts
.011432					_FUNExit:
.011432	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011434	38		sec				sec
.011435	e9 06 00	sbc #$0006			sbc 	#6
.011438	85 2a		sta $2a				sta 	DStack
.01143a	60		rts				rts
.01143b					_FUNFail:
.01143b	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01143e	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011446	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.011453					Function_WHILE:
.011453	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011455	48		pha				pha 								; save on stack
.011456	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; while what.
.011459	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.01145c	d0 14		bne $011472			bne 	_FWHExecute
.01145e	c9 00 00	cmp #$0000			cmp 	#0
.011461	d0 0f		bne $011472			bne 	_FWHExecute
.011463	68		pla				pla 								; throw away current instruction
.011464	a9 43 3a	lda #$3a43			lda 	#wendTokenID 				; skip to WEND
.011467	a2 00 00	ldx #$0000			ldx 	#0
.01146a	20 48 11	jsr $011148			jsr 	ScanForwardLevel 			; scan forward checking structures
.01146d	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.01146f	e6 06		inc $06				inc 	DCodePtr
.011471	60		rts				rts
.011472					_FWHExecute:
.011472	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011474	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011475	3a		dec a				dec 	a
.011476	3a		dec a				dec 	a
.011477	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011479	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01147b	95 04		sta $04,x			sta 	$04,x
.01147d	a9 40 3c	lda #$3c40			lda 	#whileTokenID 				; save while token at +6
.011480	95 06		sta $06,x			sta 	$06,x
.011482	8a		txa				txa 								; advance stack by 6.
.011483	18		clc				clc
.011484	69 06 00	adc #$0006			adc 	#6
.011487	85 2a		sta $2a				sta 	DStack
.011489	60		rts				rts
.01148a					Function_WEND:
.01148a	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.01148c	b5 00		lda $00,x			lda 	$00,x
.01148e	c9 40 3c	cmp #$3c40			cmp 	#whileTokenID
.011491	d0 11		bne $0114a4			bne 	_FWEFail
.011493	8a		txa				txa 								; unpick stack and always loop back.
.011494	38		sec				sec 								; we do the check at the top.
.011495	e9 06 00	sbc #$0006			sbc 	#6
.011498	85 2a		sta $2a				sta 	DStack
.01149a	aa		tax				tax
.01149b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01149d	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.01149f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0114a1	85 22		sta $22				sta 	DLineNumber
.0114a3	60		rts				rts
.0114a4					_FWEFail:
.0114a4	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0114a7	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0114af	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0114ba					Function_END:
.0114ba	02 00		cop #$00			cop 	#0
.0114bc					Function_RUN:
.0114bc	20 23 15	jsr $011523			jsr 	Function_CLEAR 				; clear all variables.
.0114bf	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0114c1	18		clc				clc
.0114c2	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0114c5					_FRun_NextLineNumber:
.0114c5	a8		tay				tay 								; put in Y
.0114c6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0114c9	f0 ef		beq $0114ba			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0114cb	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0114ce	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0114d0	98		tya				tya 								; get address back
.0114d1	18		clc				clc 								; skip over the link/line number
.0114d2	69 04 00	adc #$0004			adc 	#4
.0114d5	85 06		sta $06				sta 	DCodePtr
.0114d7					_FRun_NextInstruction:
.0114d7	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0114d9	20 68 17	jsr $011768			jsr 	HWCheckBreak 				; break key pressed.
.0114dc	d0 3c		bne $01151a			bne 	_FRun_Break
.0114de	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0114e0	f0 32		beq $011514			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0114e2	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.0114e5	f0 18		beq $0114ff			beq 	_FRun_Colon
.0114e7	a8		tay				tay 								; save in Y
.0114e8	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0114eb	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0114ee	d0 15		bne $011505			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0114f0	98		tya				tya 								; get token back
.0114f1	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0114f4	0a		asl a				asl 	a 							; double it into X
.0114f5	aa		tax				tax
.0114f6	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0114f8	e6 06		inc $06				inc 	DCodePtr
.0114fa	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0114fd	80 d8		bra $0114d7			bra 	_FRun_NextInstruction 		; do the following instruction.
.0114ff					_FRun_Colon:
.0114ff	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011501	e6 06		inc $06				inc 	DCodePtr
.011503	80 d2		bra $0114d7			bra 	_FRun_NextInstruction 		; do the following instruction.
.011505					_FRun_TryLET:
.011505	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011507	c9 00 c0	cmp #$c000			cmp 	#$C000
.01150a	90 05		bcc $011511			bcc		_FRunSyntax 				; no, must be syntax.
.01150c	20 a6 0d	jsr $010da6			jsr 	Function_LET 				; try as a LET.
.01150f	80 c6		bra $0114d7			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011511					_FRunSyntax:
.011511	82 84 ef	brl $010498			brl 	SyntaxError
.011514					_FRun_EndInstruction:
.011514	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011516	1a		inc a				inc 	a 							; go to link for next line
.011517	1a		inc a				inc 	a
.011518	80 ab		bra $0114c5			bra 	_FRun_NextLineNumber
.01151a					_FRun_Break:
.01151a	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01151d	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011523					Function_CLEAR:
.011523	20 2f 15	jsr $01152f			jsr 	ClearVariablesPointersAndStacks
.011526	60		rts				rts
.011527					Function_STOP:
.011527	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>01152a	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01152f					ClearVariablesPointersAndStacks:
.01152f	a9 80 00	lda #$0080			lda 	#BASStack
.011532	85 2a		sta $2a				sta 	DStack
.011534	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011536	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011539	a9 00 00	lda #$0000			lda 	#$0000
.01153c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01153e	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011540	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011543	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011545	20 6c 15	jsr $01156c			jsr 	FindCodeEnd 				; find where the program ends.
.011548	a8		tay				tay 								; Y points to it.
.011549	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01154c	99 02 00	sta $0002,y			sta 	$0002,y
.01154f	99 04 00	sta $0004,y			sta 	$0004,y
.011552	98		tya				tya 								; start of working memory up
.011553	18		clc				clc
.011554	69 06 00	adc #$0006			adc 	#6
.011557	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.01155a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01155c	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01155f					_FCLoop:
.01155f	a9 00 00	lda #$0000			lda 	#$0000
.011562	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011564	c8		iny				iny
.011565	c8		iny				iny
.011566	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011569	d0 f4		bne $01155f			bne 	_FCLoop
.01156b	60		rts				rts
.01156c					FindCodeEnd:
.01156c	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01156f	18		clc				clc
.011570	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011572	a8		tay				tay
.011573					_FCELoop:
.011573	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011576	f0 08		beq $011580			beq 	_FCEExit
.011578	98		tya				tya 								; add offset
.011579	18		clc				clc
.01157a	79 00 00	adc $0000,y			adc 	$0000,y
.01157d	a8		tay				tay
.01157e	80 f3		bra $011573			bra 	_FCELoop
.011580					_FCEExit:
.011580	98		tya				tya 								; return in A
.011581	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011582					Function_Dim:
.011582	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011584	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011587	f0 3b		beq $0115c4			beq		_FDIMNotArray 				; no, error.
.011589	20 59 03	jsr $010359			jsr 	VariableFind 				; try to find it.
.01158c	b0 41		bcs $0115cf			bcs 	_FDIMExists 				; if it does, that's an error.
.01158e	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011590	48		pha				pha
.011591	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011593	48		pha				pha
.011594					_FDIMSkip:
.011594	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011596	e6 06		inc $06				inc 	DCodePtr
.011598	e6 06		inc $06				inc 	DCodePtr
.01159a	29 00 08	and #$0800			and 	#IDContMask
.01159d	d0 f5		bne $011594			bne 	_FDIMSkip
.01159f	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; evaluate the size
.0115a2	20 c2 04	jsr $0104c2			jsr 	ExpectRightBracket 			; check the ) following.
.0115a5	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0115a8	d0 3b		bne $0115e5			bne 	_FDIMSize
.0115aa	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0115ad	f0 36		beq $0115e5			beq 	_FDIMSize
.0115af	7a		ply				ply 								; restore HashTablePtr
.0115b0	84 20		sty $20				sty 	DHashTablePtr
.0115b2	7a		ply				ply 								; so now A is the high index, Y points to the token
.0115b3	20 03 04	jsr $010403			jsr 	VariableCreate 				; create the variable.
.0115b6	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0115b8	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.0115bb	d0 06		bne $0115c3			bne 	_FDIMExit
.0115bd	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0115bf	e6 06		inc $06				inc 	DCodePtr
.0115c1	80 bf		bra $011582			bra 	Function_DIM 				; and do another
.0115c3					_FDIMExit:
.0115c3	60		rts				rts
.0115c4					_FDIMNotArray:
.0115c4	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0115c7	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0115cf					_FDIMExists:
.0115cf	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0115d2	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0115da	65 64 69 6d 65 6e 73 69 6f 6e 00
.0115e5					_FDIMSize:
.0115e5	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0115e8	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0115f0	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.0115f6					Function_COLLECT:
.0115f6	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0115f8	85 0c		sta $0c				sta 	DTemp2
.0115fa	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0115fd	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0115ff	85 0e		sta $0e				sta 	DTemp2+2
.011601	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011603	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011605					_FCNextPass:
.011605	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011607	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011609	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.01160b	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.01160e	18		clc				clc
.01160f	65 02		adc $02				adc 	DBaseAddress
.011611	a8		tay				tay 								; put in Y
.011612	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011615					_FCO1:
.011615	20 3b 16	jsr $01163b			jsr  	COLLECTScanVariable 		; scan that one.
.011618	c8		iny				iny 	 							; go to next pointer
.011619	c8		iny				iny
.01161a	ca		dex				dex
.01161b	d0 f8		bne $011615			bne 	_FCO1 						; until done all 16.
.01161d	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011620					_FCO2:
.011620	20 4f 16	jsr $01164f			jsr  	COLLECTScanArray 			; scan that one.
.011623	c8		iny				iny 	 							; go to next pointer
.011624	c8		iny				iny
.011625	ca		dex				dex
.011626	d0 f8		bne $011620			bne 	_FCO2 						; until done all 16.
.011628	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.01162a	f0 0e		beq $01163a			beq		_FCExit 					; if finished then exit.
.01162c	48		pha				pha 								; save the target address
.01162d	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01162f	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011631	20 8d 05	jsr $01058d			jsr 	StringMakeConcrete 			; make the string concrete.
.011634	7a		ply				ply 								; restore the string.
.011635	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011638	80 cb		bra $011605			bra		_FCNextPass
.01163a					_FCExit:
.01163a	60		rts				rts
.01163b					COLLECTScanVariable:
.01163b	da		phx				phx 								; save XY
.01163c	5a		phy				phy
.01163d					_CSVLoop:
.01163d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011640	f0 0a		beq $01164c			beq 	_CSVExit
.011642	a8		tay				tay 								; put new address into Y
.011643	18		clc				clc 								; which is four on.
.011644	69 04 00	adc #$0004			adc 	#4
.011647	20 70 16	jsr $011670			jsr 	COLLECTCheck
.01164a	80 f1		bra $01163d			bra 	_CSVLoop
.01164c					_CSVExit:
.01164c	7a		ply				ply
.01164d	fa		plx				plx
.01164e	60		rts				rts
.01164f					COLLECTScanArray:
.01164f	da		phx				phx 								; save XY
.011650	5a		phy				phy
.011651					_CSALoop:
.011651	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011654	f0 17		beq $01166d			beq 	_CSAExit
.011656	a8		tay				tay 								; put new address in Y
.011657	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.01165a	aa		tax				tax
.01165b	e8		inx				inx									; +1 as one more data element.
.01165c	98		tya				tya 								; point A to first element, at +6
.01165d	18		clc				clc
.01165e	69 06 00	adc #$0006			adc 	#6
.011661					_CSADoAllStrings:
.011661	20 70 16	jsr $011670			jsr 	COLLECTCheck 				; collect check the first.
.011664	1a		inc a				inc 	a 							; advance the pointer.
.011665	1a		inc a				inc 	a
.011666	1a		inc a				inc 	a
.011667	1a		inc a				inc 	a
.011668	ca		dex				dex
.011669	d0 f6		bne $011661			bne 	_CSADoAllStrings 			; until all strings are done.
.01166b	80 e4		bra $011651			bra 	_CSALoop
.01166d					_CSAExit:
.01166d	7a		ply				ply
.01166e	fa		plx				plx
.01166f	60		rts				rts
.011670					COLLECTCheck:
.011670	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011672	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011674	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011676	90 0a		bcc $011682			bcc 	_COCExit
.011678	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.01167a	b0 06		bcs $011682			bcs 	_COCExit
.01167c	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01167e	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011680	85 14		sta $14				sta 	DSignCount
.011682					_COCExit:
.011682	a5 0a		lda $0a				lda 	DTemp1+2
.011684	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011685					Command_POKE:
.011685	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; address
.011688	48		pha				pha	 								; save on stack
.011689	5a		phy				phy
.01168a	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; comma seperator.
.01168d	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; data
.011690	fa		plx				plx 								; pull address and store in DTemp1
.011691	86 0a		stx $0a				stx 	DTemp1+2
.011693	fa		plx				plx
.011694	86 08		stx $08				stx 	DTemp1+0
.011696	e2 20		sep #$20			sep 	#$20 						; byte mode
.011698	87 08		sta [$08]			sta 	[DTemp1]					; write it
.01169a	c2 20		rep #$20			rep 	#$20 						; word mode
.01169c	60		rts				rts
.01169d					Command_DOKE:
.01169d	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; address
.0116a0	48		pha				pha	 								; save on stack
.0116a1	5a		phy				phy
.0116a2	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; comma seperator.
.0116a5	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; data
.0116a8	fa		plx				plx 								; pull address and store in DTemp1
.0116a9	86 0a		stx $0a				stx 	DTemp1+2
.0116ab	fa		plx				plx
.0116ac	86 08		stx $08				stx 	DTemp1+0
.0116ae	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0116b0	60		rts				rts
.0116b1					Command_LOKE:
.0116b1	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; address
.0116b4	48		pha				pha	 								; save on stack
.0116b5	5a		phy				phy
.0116b6	20 cb 04	jsr $0104cb			jsr 	ExpectComma 				; comma seperator.
.0116b9	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; data
.0116bc	fa		plx				plx 								; pull address and store in DTemp1
.0116bd	86 0a		stx $0a				stx 	DTemp1+2
.0116bf	fa		plx				plx
.0116c0	86 08		stx $08				stx 	DTemp1+0
.0116c2	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0116c4	98		tya				tya
.0116c5	a0 02 00	ldy #$0002			ldy 	#2
.0116c8	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0116ca	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0116cb					Function_ASSERT:
.0116cb	20 da 02	jsr $0102da			jsr 	EvaluateInteger 			; something that returns an integer.
.0116ce	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0116d0	05 08		ora $08				ora 	Dtemp1
.0116d2	f0 01		beq $0116d5			beq 	_FAssFail
.0116d4	60		rts				rts
.0116d5					_FAssFail:
.0116d5	20 5d 04	jsr $01045d			jsr 	ErrorHandler 						; call error routine
>0116d8	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0116e0	61 69 6c 65 64 00
.0116e6					Function_CLS:
.0116e6	20 11 17	jsr $011711			jsr 	HWClearScreen
.0116e9	60		rts				rts
.0116ea					Function_REM:
.0116ea	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0116ec	f0 0b		beq $0116f9			beq 	_FRemSyntax 				; if 0, syntax error
.0116ee	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0116f1	b0 06		bcs $0116f9			bcs 	_FRemSyntax
.0116f3	18		clc				clc 								; add to DCodePtr
.0116f4	65 06		adc $06				adc 	DCodePtr
.0116f6	85 06		sta $06				sta 	DCodePtr
.0116f8	60		rts				rts
.0116f9					_FRemSyntax:
.0116f9	82 9c ed	brl $010498			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0116fc					SwitchBasicInstance:
.0116fc	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0116fe	20 11 17	jsr $011711			jsr 	HWClearScreen 						; clear screen
.011701	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011704	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011706	86 02		stx $02				stx		DBaseAddress
.011708	84 04		sty $04				sty 	DHighAddress
.01170a	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01170b	48		pha				pha 										; then copy it into B.
.01170c	ab		plb				plb
.01170d	ab		plb				plb
.01170e	4c bc 14	jmp $0114bc			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011711					HWClearScreen:
.011711	48		pha				pha
.011712	da		phx				phx
.011713	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011716	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011719	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01171d	ca		dex				dex
.01171e	10 f6		bpl $011716			bpl 	_CS0
.011720	64 28		stz $28				stz 	DCursor
.011722	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011725	8f 00 00 0f	sta $0f0000			sta 	$F0000
.011729	fa		plx				plx
.01172a	68		pla				pla
.01172b	60		rts				rts
.01172c					HWPrintChar:
.01172c	48		pha				pha
.01172d	da		phx				phx
.01172e	a6 28		ldx $28				ldx 	DCursor
.011730	e2 20		sep #$20			sep 	#$20
.011732	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011736	c2 20		rep #$20			rep 	#$20
.011738	e8		inx				inx
.011739	8a		txa				txa
.01173a	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.01173d	85 28		sta $28				sta 	DCursor
.01173f	aa		tax				tax
.011740	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.011743	e2 20		sep #$20			sep 	#$20
.011745	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011749	c2 20		rep #$20			rep 	#$20
.01174b	fa		plx				plx
.01174c	68		pla				pla
.01174d	60		rts				rts
.01174e					HWNewLine:
.01174e	48		pha				pha
.01174f	da		phx				phx
.011750	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011753					HWMoveCursor:
.011753	a9 20 00	lda #$0020			lda 	#32
.011756	20 2c 17	jsr $01172c			jsr 	HWPrintChar
.011759	8a		txa				txa
.01175a	25 28		and $28				and 	DCursor
.01175c	d0 f5		bne $011753			bne 	HWMoveCursor
.01175e	fa		plx				plx
.01175f	68		pla				pla
.011760	60		rts				rts
.011761	48		pha		HWTab:	pha
.011762	da		phx				phx
.011763	a2 07 00	ldx #$0007			ldx 	#7
.011766	80 eb		bra $011753			bra 	HWMoveCursor
.011768					HWCheckBreak:
.011768	af 00 80 0f	lda $0f8000			lda 	$F8000
.01176c	60		rts				rts

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	0c 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1c 00 05 00 35 3e 22 30
>024108	08 00 05 68 65 6c 6c 6f 23 32 06 00 02 65 6c 00
>024118	27 32 00 00 1c 00 06 00 35 3e 22 30 08 00 05 68
>024128	65 6c 6c 6f 23 32 06 00 02 65 78 00 27 32 00 00
>024138	1e 00 07 00 35 3e 22 30 08 00 05 68 65 6c 6c 6f
>024148	23 32 08 00 05 68 65 6c 6c 6f 27 32 00 00 20 00
>024158	08 00 35 3e 22 30 08 00 05 68 65 6c 6c 6f 23 32
>024168	0a 00 06 68 65 6c 6c 6f 32 00 27 32 00 00 08 00
>024178	09 00 30 3e 00 00 14 00 0b 00 42 3c 09 c0 06 22
>024188	01 40 29 38 03 10 9f 46 00 00 0a 00 0c 00 35 3e
>024198	09 c0 00 00 0a 00 0d 00 47 3a 09 c0 00 00 0c 00
>0241a8	14 00 18 c0 06 22 00 40 00 00 08 00 32 00 3f 3c
>0241b8	00 00 08 00 3c 00 35 3e 00 00 0e 00 46 00 44 3a
>0241c8	18 c0 06 22 00 40 00 00 12 00 50 00 42 3c 09 c0
>0241d8	06 22 01 40 29 38 05 40 00 00 0c 00 5a 00 01 c0
>0241e8	06 22 09 c0 00 00 0a 00 5f 00 47 3a 09 c0 00 00
>0241f8	16 00 64 00 41 3c 26 32 18 c0 01 20 01 40 27 32
>024208	06 22 00 40 00 00 16 00 6e 00 35 3e 18 c0 23 32
>024218	08 00 04 45 76 65 6e 00 23 32 00 00 0e 00 70 00
>024228	41 3c 18 c0 05 22 05 40 00 00 0e 00 76 00 35 3e
>024238	06 00 02 3e 35 00 00 00 08 00 77 00 3a 3e 00 00
>024248	0e 00 78 00 35 3e 06 00 03 3c 3d 35 00 00 08 00
>024258	81 00 46 3a 00 00 22 00 82 00 41 3c 18 c0 06 22
>024268	08 40 45 3a 35 3e 10 00 0c 49 74 27 73 20 65 69
>024278	67 68 74 20 21 00 00 00 08 00 85 00 3a 3e 00 00
>024288	14 00 86 00 35 3e 18 c0 23 32 06 00 03 6f 64 64
>024298	23 32 00 00 0c 00 87 00 19 c0 06 22 18 c0 00 00
>0242a8	30 00 88 00 3f 3c 25 32 35 3e 19 c0 24 32 04 00
>0242b8	01 20 24 32 25 32 19 c0 06 22 19 c0 0b 24 01 40
>0242c8	25 32 44 3a 19 c0 06 22 00 40 25 32 35 3e 00 00
>0242d8	08 00 8c 00 46 3a 00 00 10 00 96 00 18 c0 06 22
>0242e8	18 c0 0a 24 01 40 00 00 0e 00 a0 00 44 3a 18 c0
>0242f8	05 22 0a 40 00 00 08 00 ac 2b 30 3e 00 00 00 00
>024308	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>024318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1997 times (31952 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
