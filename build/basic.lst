
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 18:09:45 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c ad 0f 01	jmp $010fad			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ed 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	c0 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	d0 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	e0 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	24 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	8b 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	f0 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	6d 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	4f 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	0a 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	0a 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	8b 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	97 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	14 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	8b 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	9c 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	ae 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	25 08					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	05 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	e1 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	cb 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	5c 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	b1 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	ed 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	ed 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	ed 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	ed 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	ed 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	ed 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	9a 0f					.word Function_REM             & $FFFF ; token $3e1d "rem"
>01003c	6d 0a					.word Function_Let             & $FFFF ; token $3e1e "let"
>01003e	7b 0f					.word Function_ASSERT          & $FFFF ; token $3e1f "assert"
>010040	be 0d					.word Function_END             & $FFFF ; token $3e20 "end"
>010042	c0 0d					.word Function_RUN             & $FFFF ; token $3e21 "run"
>010044	1c 0e					.word Function_STOP            & $FFFF ; token $3e22 "stop"
>010046	18 0e					.word Function_CLEAR           & $FFFF ; token $3e23 "clear"
>010048	77 0e					.word Function_Dim             & $FFFF ; token $3e24 "dim"
>01004a	eb 0e					.word Function_COLLECT         & $FFFF ; token $3e25 "collect"
>01004c	96 0f					.word Function_CLS             & $FFFF ; token $3e26 "cls"
>01004e	e8 0a					.word Function_PRINT           & $FFFF ; token $3e27 "print"
>010050	b3 0c					.word Function_GOTO            & $FFFF ; token $3e28 "goto"
>010052	12 0d					.word Function_GOSUB           & $FFFF ; token $3e29 "gosub"
>010054	2e 0d					.word Function_RETURN          & $FFFF ; token $3e2a "return"
>010056	70 0c					.word Function_ONGOTO          & $FFFF ; token $3e2b "on"
>010058	9b 0b					.word Handler_ELSE             & $FFFF ; token $3e2c "else"
>01005a	60 0d					.word Function_REPEAT          & $FFFF ; token $3c2d "repeat"
>01005c	ed 03					.word IllegalToken             & $FFFF ; token $3c2e "while"
>01005e	34 0b					.word Function_IF              & $FFFF ; token $3c2f "if"
>010060	ed 03					.word IllegalToken             & $FFFF ; token $3a30 "wend"
>010062	77 0d					.word Function_UNTIL           & $FFFF ; token $3a31 "until"
>010064	ed 03					.word IllegalToken             & $FFFF ; token $3a32 "then"
>010066	c9 0b					.word Handler_ENDIF            & $FFFF ; token $3a33 "endif"
.010068					TokenText:
>010068	02 26					 .text $02,"&"        ; token $2001
>01006a	02 7c					 .text $02,"|"        ; token $2002
>01006c	02 5e					 .text $02,"^"        ; token $2003
>01006e	12 3c					 .text $12,"<"        ; token $2204
>010070	12 3e					 .text $12,">"        ; token $2205
>010072	12 3d					 .text $12,"="        ; token $2206
>010074	13 3c 3d				 .text $13,"<="       ; token $2207
>010077	13 3e 3d				 .text $13,">="       ; token $2208
>01007a	13 3c 3e				 .text $13,"<>"       ; token $2209
>01007d	22 2b					 .text $22,"+"        ; token $240a
>01007f	22 2d					 .text $22,"-"        ; token $240b
>010081	32 2a					 .text $32,"*"        ; token $260c
>010083	32 2f					 .text $32,"/"        ; token $260d
>010085	32 25					 .text $32,"%"        ; token $260e
>010087	33 3e 3e				 .text $33,">>"       ; token $260f
>01008a	33 3c 3c				 .text $33,"<<"       ; token $2610
>01008d	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010093	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010098	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01009d	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100a2	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100a7	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100ad	92 2c					 .text $92,","        ; token $3217
>0100af	92 3b					 .text $92,";"        ; token $3218
>0100b1	92 3a					 .text $92,":"        ; token $3219
>0100b3	92 28					 .text $92,"("        ; token $321a
>0100b5	92 29					 .text $92,")"        ; token $321b
>0100b7	92 27					 .text $92,"'"        ; token $321c
>0100b9	f4 72 65 6d				 .text $f4,"rem"      ; token $3e1d
>0100bd	f4 6c 65 74				 .text $f4,"let"      ; token $3e1e
>0100c1	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1f
>0100c8	f4 65 6e 64				 .text $f4,"end"      ; token $3e20
>0100cc	f4 72 75 6e				 .text $f4,"run"      ; token $3e21
>0100d0	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e22
>0100d5	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e23
>0100db	f4 64 69 6d				 .text $f4,"dim"      ; token $3e24
>0100df	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e25
>0100e7	f4 63 6c 73				 .text $f4,"cls"      ; token $3e26
>0100eb	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e27
>0100f1	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e28
>0100f6	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e29
>0100fc	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e2a
>010103	f3 6f 6e				 .text $f3,"on"       ; token $3e2b
>010106	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e2c
>01010b	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c2d
>010112	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c2e
>010118	e3 69 66				 .text $e3,"if"       ; token $3c2f
>01011b	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a30
>010120	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a31
>010126	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a32
>01012b	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a33
>010131	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					remTokenID                       = $3e1d
=$3e1e					letTokenID                       = $3e1e
=$3e1f					assertTokenID                    = $3e1f
=$3e20					endTokenID                       = $3e20
=$3e21					runTokenID                       = $3e21
=$3e22					stopTokenID                      = $3e22
=$3e23					clearTokenID                     = $3e23
=$3e24					dimTokenID                       = $3e24
=$3e25					collectTokenID                   = $3e25
=$3e26					clsTokenID                       = $3e26
=$3e27					printTokenID                     = $3e27
=$3e28					gotoTokenID                      = $3e28
=$3e29					gosubTokenID                     = $3e29
=$3e2a					returnTokenID                    = $3e2a
=$3e2b					onTokenID                        = $3e2b
=$3e2c					elseTokenID                      = $3e2c
=$3c2d					repeatTokenID                    = $3c2d
=$3c2e					whileTokenID                     = $3c2e
=$3c2f					ifTokenID                        = $3c2f
=$3a30					wendTokenID                      = $3a30
=$3a31					untilTokenID                     = $3a31
=$3a32					thenTokenID                      = $3a32
=$3a33					endifTokenID                     = $3a33

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010132					Evaluate:
.010132	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010135	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010138					EvaluateLevel:
.010138	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.01013b	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01013d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01013f	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010142	b0 79		bcs $0101bd			bcs 	_ELVariable
.010144	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010147	b0 16		bcs $01015f			bcs 	_ELConstant
.010149	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01014c	90 7f		bcc $0101cd			bcc 	_ELStringConstant
.01014e	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010151	90 03		bcc $010156			bcc 	_ELConstantShift
.010153	82 94 00	brl $0101ea			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010156					_ELConstantShift:
.010156	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010159	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01015b	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01015d	e6 06		inc $06				inc 	DCodePtr
.01015f					_ELConstant:
.01015f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010161	38		sec				sec  								; shift it in the range 0-32767
.010162	e9 00 40	sbc #$4000			sbc 	#$4000
.010165	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010166	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010168	6a		ror a				ror 	a 							; rotate that into the constant value
.010169	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01016b	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01016d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01016f	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010171	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010173	e6 06		inc $06				inc 	DCodePtr
.010175					_ELGotAtom:
.010175	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010177	a8		tay				tay 								; save in Y
.010178	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01017b	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01017e	d0 35		bne $0101b5			bne 	_ELExit
.010180	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010182	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010185	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010187	98		tya				tya 								; get the keyword token back
.010188	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01018b	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01018d	90 26		bcc $0101b5			bcc 	_ELExit 					; precedence too low, then exit.
.01018f	5a		phy				phy 								; save the binary operator on the stack
.010190	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010192	e6 06		inc $06				inc 	DCodePtr
.010194	18		clc				clc 								; try the next level up
.010195	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010198	e8		inx				inx 								; calculate the RHS at the next stack level.
.010199	e8		inx				inx
.01019a	20 38 01	jsr $010138			jsr 	EvaluateLevel
.01019d	ca		dex				dex
.01019e	ca		dex				dex
.01019f	7a		ply				ply 								; get operator token back into Y
.0101a0					_ELExecuteY:
.0101a0	98		tya				tya
.0101a1	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101a4	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.0101a5	9b		txy				txy 								; save X in Y
.0101a6	aa		tax				tax 								; double keyword ID in X
.0101a7	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.0101ab	bb		tyx				tyx 								; restore X.
.0101ac	8f b1 01 01	sta $0101b1			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.0101b0					_ELCallRoutine:
.0101b0	20 b0 01	jsr $0101b0			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.0101b3	80 c0		bra $010175			bra 	_ELGotAtom 					; go round operator level again.
.0101b5	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.0101b7	0a		asl a				asl 	a
.0101b8	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.0101ba	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.0101bc	60		rts				rts
.0101bd					_ELVariable:
.0101bd	16 20		asl $20,x			asl 	EXSPrecType+0,x
.0101bf	20 7e 02	jsr $01027e			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.0101c2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.0101c4	94 10		sty $10,x			sty 	EXSValueH+0,x
.0101c6	76 20		ror $20,x			ror 	EXSPrecType+0,x
.0101c8	80 ab		bra $010175			bra 	_ELGotAtom
.0101ca					_ELSyntax
.0101ca	82 31 02	brl $0103fe			brl 	SyntaxError
.0101cd					_ELStringConstant:
.0101cd	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.0101d0	f0 f8		beq $0101ca			beq 	_ELSyntax
.0101d2	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0101d4	1a		inc a				inc 	a
.0101d5	1a		inc a				inc 	a
.0101d6	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101d8	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101da	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101dc	18		clc				clc 								; add to string constant.
.0101dd	65 06		adc $06				adc 	DCodePtr
.0101df	85 06		sta $06				sta 	DCodePtr
.0101e1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101e3	09 00 80	ora #$8000			ora 	#$8000
.0101e6	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101e8	80 8b		bra $010175			bra 	_ELGotAtom
.0101ea					_ELUnaryKeyword:
.0101ea	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101ec	a8		tay				tay 								; put the token in Y.
.0101ed	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101ef	e6 06		inc $06				inc 	DCodePtr
.0101f1	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101f4	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101f7	f0 a7		beq $0101a0			beq 	_ELExecuteY					; go back and execute it
.0101f9	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101fc	d0 11		bne $01020f			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101fe	20 35 02	jsr $010235			jsr 	EvaluateNext 				; evaluate the expression
.010201	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; consume the right bracket.
.010204					_ELCopy:
.010204	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010206	95 00		sta $00,x			sta 	EXSValueL+0,x
.010208	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01020a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01020c	82 66 ff	brl $010175			brl 	_ELGotAtom 					; and continue.
.01020f					_ELUnaryOperator:
.01020f	5a		phy				phy 								; save the operator on the stack.
.010210	e8		inx				inx 								; this is like evaluate next
.010211	e8		inx				inx
.010212	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010215	20 38 01	jsr $010138			jsr 	EvaluateLevel
.010218	ca		dex				dex 								; unwind the stack.
.010219	ca		dex				dex
.01021a	68		pla				pla 								; restore the unary operator.
.01021b	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01021e	f0 03		beq $010223			beq 	_ELMinus
.010220	4c fe 03	jmp $0103fe			jmp 	SyntaxError
.010223					_ELMinus:
.010223	38		sec				sec 								; do the negation calculation.
.010224	a9 00 00	lda #$0000			lda 	#0
.010227	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010229	95 00		sta $00,x			sta 	EXSValueL+0,x
.01022b	a9 00 00	lda #$0000			lda 	#0
.01022e	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010230	95 10		sta $10,x			sta 	EXSValueH+0,x
.010232	82 40 ff	brl $010175			brl 	_ELGotAtom					; and continue.
.010235					EvaluateNext:
.010235	e8		inx				inx
.010236	e8		inx				inx
.010237	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.01023a	20 38 01	jsr $010138			jsr 	EvaluateLevel
.01023d	ca		dex				dex
.01023e	ca		dex				dex
.01023f	60		rts				rts
.010240					EvaluateInteger:
.010240	20 32 01	jsr $010132			jsr 	Evaluate
.010243	b0 01		bcs $010246			bcs 	EIType
.010245	60		rts				rts
.010246					EIType:
.010246	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010249	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010251	78 70 65 63 74 65 64 00
.010259					EvaluateNextInteger:
.010259	20 35 02	jsr $010235			jsr 	EvaluateNext
.01025c	b0 e8		bcs $010246			bcs 	EIType
.01025e	60		rts				rts
.01025f					EvaluateString:
.01025f	20 32 01	jsr $010132			jsr 	Evaluate
.010262	90 01		bcc $010265			bcc 	ESType
.010264	60		rts				rts
.010265					ESType:
.010265	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010268	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010270	78 70 65 63 74 65 64 00
.010278					EvaluateNextString:
.010278	20 35 02	jsr $010235			jsr 	EvaluateNext
.01027b	90 e8		bcc $010265			bcc 	ESType
.01027d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01027e					VariableAccessExpression:
.01027e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010280	48		pha				pha
.010281	20 bf 02	jsr $0102bf			jsr 	VariableFind 				; try to find the variables
.010284	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010286	90 23		bcc $0102ab			bcc 	_VANError
.010288	68		pla				pla 								; get and save that first token
.010289	48		pha				pha
.01028a	a8		tay				tay 								; put first token in Y.
.01028b	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01028e	f0 07		beq $010297			beq 	_VANNotArray
.010290	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010292	20 36 03	jsr $010336			jsr 	VariableSubscript			; index calculation
.010295	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010297					_VANNotArray:
.010297	68		pla				pla 								; get the token back.
.010298	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01029b	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01029e	38		sec				sec 								; set up return string.
.01029f	f0 06		beq $0102a7			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.0102a1	18		clc				clc 								; returning a number, read high data word
.0102a2	a0 02 00	ldy #$0002			ldy 	#2
.0102a5	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.0102a7					_VANLoadLower:
.0102a7	a8		tay				tay 								; put A into Y (this is the high byte)
.0102a8	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.0102aa	60		rts				rts
.0102ab					_VANError:
.0102ab	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>0102ae	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>0102b6	20 75 6e 6b 6e 6f 77 6e 00
.0102bf					VariableFind:
.0102bf	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.0102c1	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.0102c4	90 5c		bcc $010322			bcc 	_VFError
.0102c6	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.0102c9	b0 11		bcs $0102dc			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.0102cb	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.0102ce	3a		dec a				dec 	a 							; now 0-25
.0102cf	0a		asl a				asl 	a 							; x 4 and clear carry
.0102d0	0a		asl a				asl 	a
.0102d1	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0102d4	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102d6	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102d8	e6 06		inc $06				inc 	DCodePtr
.0102da	38		sec				sec 								; return with carry set.
.0102db	60		rts				rts
.0102dc					_VFSlowVariable:
.0102dc	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102de	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102e1	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102e2	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102e3	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102e6	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102e8	85 08		sta $08				sta 	DTemp1
.0102ea	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102ec	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102ef	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102f0	65 08		adc $08				adc 	DTemp1
.0102f2	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102f4	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102f6					_VFNext:
.0102f6	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102f8	f0 26		beq $010320			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102fa	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102fc	a8		tay				tay 								; read the address of the name at $0002,y
.0102fd	b9 02 00	lda $0002,y			lda 	$0002,y
.010300	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010302	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010305					_VFCompare:
.010305	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010307	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010309	d0 eb		bne $0102f6			bne 	_VFNext 					; if not, go to the next one.
.01030b	c8		iny				iny 								; advance token pointer
.01030c	c8		iny				iny
.01030d	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010310	d0 f3		bne $010305			bne 	_VFCompare
.010312	98		tya				tya 								; this is the length of the word.
.010313	18		clc				clc 								; so we add it to the code pointer
.010314	65 06		adc $06				adc 	DCodePtr
.010316	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010318	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.01031a	18		clc				clc 								; four on is the actual data
.01031b	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.01031e	38		sec				sec 								; return with CS indicating success
.01031f	60		rts				rts
.010320					_VFFail:
.010320	18		clc				clc
.010321	60		rts				rts
.010322					_VFError:
.010322	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010325	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>01032d	76 61 72 69 61 62 6c 65 00
.010336					VariableSubscript:
.010336	48		pha				pha		 							; save variable address on stack.
.010337	20 59 02	jsr $010259			jsr		EvaluateNextInteger 		; get the subscript
.01033a	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; skip right bracket.
.01033d	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010340	d0 10		bne $010352			bne 	_VANSubscript
.010342	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010344	f0 02		beq $010348			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010346	b0 0a		bcs $010352			bcs 	_VANSubscript
.010348					_VANSubOkay:
.010348	0a		asl a				asl 	a 							; double lsword
.010349	0a		asl a				asl 	a 							; and again, also clears carry.
.01034a	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.01034c	68		pla				pla 								; restore DVariablePtr
.01034d	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.01034e	1a		inc a				inc 	a
.01034f	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010351	60		rts				rts
.010352					_VANSubscript:
.010352	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010355	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>01035d	79 20 53 75 62 73 63 72 69 70 74 00
.010369					VariableCreate:
.010369	48		pha				pha 								; save count.
.01036a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01036d	29 00 20	and #$2000			and 	#IDTypeMask
.010370	f0 06		beq $010378			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010372	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010375	18		clc				clc
.010376	65 02		adc $02				adc 	DBaseAddress
.010378					_VCIsInteger:
.010378	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01037a	68		pla				pla 								; restore count
.01037b	48		pha				pha
.01037c	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01037d	0a		asl a				asl 	a 							; 2 x # items.
.01037e	0a		asl a				asl 	a 							; 4 x # items.
.01037f					_VCNotSingle:
.01037f	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010381	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010384	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010387	f0 04		beq $01038d			beq 	_VCNotArray
.010389	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01038b	e6 08		inc $08				inc 	DTemp1
.01038d					_VCNotArray:
.01038d	5a		phy				phy 								; save address of token on stack.
.01038e	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010391	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010393	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010395	18		clc				clc 								; add 4 for link and name.
.010396	69 04 00	adc #$0004			adc 	#4
.010399	65 08		adc $08				adc 	DTemp1 						; add memory required
.01039b	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01039d	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01039f					_VCErase:
.01039f	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103a1	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103a4	c8		iny				iny
.0103a5	c8		iny				iny
.0103a6	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.0103a8	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.0103aa	d0 f3		bne $01039f			bne 	_VCErase
.0103ac	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.0103ae	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.0103b0	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.0103b3	68		pla				pla 								; restore the token address
.0103b4	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0103b7	68		pla				pla 								; restore count and store.
.0103b8	99 04 00	sta $0004,y			sta 	$0004,y
.0103bb					_VCNotArray2:
.0103bb	98		tya				tya 								; update the head link
.0103bc	92 20		sta ($20)			sta 	(DHashTablePtr)
.0103be	18		clc				clc 								; advance pointer to the data bit.
.0103bf	69 04 00	adc #$0004			adc 	#4
.0103c2	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.0103c3					ErrorHandler:
.0103c3	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0103c5	fa		plx				plx 								; address of error message -1
.0103c6	e8		inx				inx 								; error message.
.0103c7	20 6a 04	jsr $01046a			jsr 	PrintROMMessage 			; print message in ROM
.0103ca	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0103cc	f0 15		beq $0103e3			beq 	_EHEndMessage
.0103ce	a2 e8 03	ldx #$03e8			ldx 	#_EHAt & $FFFF 				; print " at "
.0103d1	20 6a 04	jsr $01046a			jsr 	PrintROMMessage
.0103d4	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103d6	a0 00 00	ldy #$0000			ldy 	#0
.0103d9	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103dc	20 cc 09	jsr $0109cc			jsr 	ConvertToString 			; convert and print it.
.0103df	a8		tay				tay
.0103e0	20 7e 04	jsr $01047e			jsr 	PrintBASICString
.0103e3					_EHEndMessage:
.0103e3	20 ff 0f	jsr $010fff			jsr 	HWNewLine
.0103e6	80 fe		bra $0103e6	_EH1:	bra 	_EH1
>0103e8	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103ed					IllegalToken:
.0103ed	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>0103f0	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103f8	54 6f 6b 65 6e 00
.0103fe					SyntaxError:
.0103fe	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010401	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010409	72 72 6f 72 00
.01040e					ExpectToken:
.01040e	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010410	d0 05		bne $010417			bne 	_CTKError					; error if not
.010412	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010414	e6 06		inc $06				inc 	DCodePtr
.010416	60		rts				rts
.010417					_CTKError:
.010417	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>01041a	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010422	74 6f 6b 65 6e 00
.010428					ExpectRightBracket:
.010428	48		pha				pha
.010429	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.01042c	20 0e 04	jsr $01040e			jsr 	ExpectToken
.01042f	68		pla				pla
.010430	60		rts				rts
.010431					ExpectComma:
.010431	48		pha				pha
.010432	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010435	20 0e 04	jsr $01040e			jsr 	ExpectToken
.010438	68		pla				pla
.010439	60		rts				rts
.01043a					CheckBothNumeric:
.01043a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01043c	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01043e	30 01		bmi $010441			bmi 	_CBNFail 					; need to both be zero in bit 15
.010440	60		rts				rts
.010441					_CBNFail:
.010441	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010444	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01044c	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.01045a					ResetTypeInteger:
.01045a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01045c	29 ff 7f	and #$7fff			and 	#$7FFF
.01045f	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010461	60		rts				rts
.010462					ResetTypeString:
.010462	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010464	09 00 80	ora #$8000			ora 	#$8000
.010467	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010469	60		rts				rts
.01046a					PrintROMMessage:
.01046a	48		pha				pha
.01046b	da		phx				phx
.01046c					_PRMLoop:
.01046c	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010470	29 ff 00	and #$00ff			and 	#$00FF
.010473	f0 06		beq $01047b			beq 	_PRMExit
.010475	20 dd 0f	jsr $010fdd			jsr 	HWPrintChar
.010478	e8		inx				inx
.010479	80 f1		bra $01046c			bra 	_PRMLoop
.01047b					_PRMExit:
.01047b	fa		plx				plx
.01047c	68		pla				pla
.01047d	60		rts				rts
.01047e					PrintBASICString:
.01047e	48		pha				pha
.01047f	da		phx				phx
.010480	5a		phy				phy
.010481	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010484	29 ff 00	and #$00ff			and 	#$00FF
.010487	f0 0b		beq $010494			beq 	_PBSExit 					; null string
.010489	aa		tax				tax
.01048a					_PBSLoop:
.01048a	c8		iny				iny
.01048b	b9 00 00	lda $0000,y			lda 	$0000,y
.01048e	20 dd 0f	jsr $010fdd			jsr 	HWPrintChar
.010491	ca		dex				dex
.010492	d0 f6		bne $01048a			bne 	_PBSLoop
.010494					_PBSExit:
.010494	7a		ply				ply
.010495	fa		plx				plx
.010496	68		pla				pla
.010497	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010498					StringTempAllocate:
.010498	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01049b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01049e	18		clc				clc 								; this adds one, for the length.
.01049f	65 16		adc $16				adc 	DTempStringPointer
.0104a1	85 16		sta $16				sta 	DTempStringPointer
.0104a3	48		pha				pha
.0104a4	a9 00 00	lda #$0000			lda 	#$0000
.0104a7	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0104a9	92 16		sta ($16)			sta		(DTempStringPointer)
.0104ab	c2 20		rep #$20			rep 	#$20
.0104ad	68		pla				pla
.0104ae	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0104b0	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0104b2	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0104b4	60		rts				rts
.0104b5					StringCreateCopy:
.0104b5	a8		tay				tay 								; put pointer to string in Y
.0104b6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0104b9	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0104bc	f0 17		beq $0104d5			beq 	_SCCExit 					; do nothing if length zero.
.0104be	da		phx				phx 								; save X and put the character count in X
.0104bf	aa		tax				tax
.0104c0					_SCCCopy:
.0104c0	c8		iny				iny 								; advance and read (first time skips length)
.0104c1	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0104c3	b9 00 00	lda $0000,y			lda 	$0000,y
.0104c6	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0104c8	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0104ca	1a		inc a				inc 	a
.0104cb	92 18		sta ($18)			sta 	(DStartTempString)
.0104cd	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0104cf	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0104d1	ca		dex				dex 								; do X times
.0104d2	d0 ec		bne $0104c0			bne 	_SCCCopy
.0104d4	fa		plx				plx
.0104d5					_SCCExit:
.0104d5	60		rts				rts
.0104d6					StringMakeConcrete:
.0104d6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104d9	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104db	90 0f		bcc $0104ec			bcc 	_SMCExit
.0104dd	85 08		sta $08				sta 	DTemp1 						; source
.0104df	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104e1	29 ff 00	and #$00ff			and 	#$00FF
.0104e4	d0 07		bne $0104ed			bne 	_SMCNonZero 				; if not "" skip.
.0104e6	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104e9	18		clc				clc
.0104ea	65 02		adc $02				adc 	DBaseAddress
.0104ec					_SMCExit:
.0104ec	60		rts				rts
.0104ed					_SMCNonZero:
.0104ed	48		pha				pha 								; save on stack.
.0104ee	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104f1	18		clc				clc
.0104f2	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104f5	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104f7	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104f9	85 0c		sta $0c				sta 	DTemp2 						; target
.0104fb	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104fc	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104fe					_SMCLoop:
.0104fe	b1 08		lda ($08),y			lda 	(DTemp1),y
.010500	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010502	88		dey				dey
.010503	10 f9		bpl $0104fe			bpl 	_SMCLoop
.010505	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010507	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010509	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.01050a					Binary_Add:
.01050a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01050c	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01050e	30 12		bmi $010522		bmi 	_BATypeError
.010510	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010512	30 3f		bmi $010553		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010514	18		clc			clc
.010515	b5 00		lda $00,x		lda		EXSValueL+0,x
.010517	75 02		adc $02,x		adc 	EXSValueL+2,x
.010519	95 00		sta $00,x		sta 	EXSValueL+0,x
.01051b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01051d	75 12		adc $12,x		adc 	EXSValueH+2,x
.01051f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010521	60		rts			rts
.010522					_BATypeError:
.010522	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010525	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01052d	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01053d	65 73 00
.010540					_BALengthError:
.010540	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010543	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01054b	6f 6f 20 6c 6f 6e 67 00
.010553					_BAConcatenateString:
.010553	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010555	85 08		sta $08			sta 	DTemp1
.010557	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010559	85 0c		sta $0c			sta 	DTemp2
.01055b	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01055d	18		clc			clc 										; work out the total length
.01055e	b2 08		lda ($08)		lda 	(DTemp1)
.010560	72 0c		adc ($0c)		adc 	(DTemp2)
.010562	b0 14		bcs $010578		bcs 	_BAConcatLengthError 				; string is too long.
.010564	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010566	20 98 04	jsr $010498		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010569	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01056b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01056d	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01056f	20 b5 04	jsr $0104b5		jsr 	StringCreateCopy
.010572	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010574	20 b5 04	jsr $0104b5		jsr 	StringCreateCopy
.010577	60		rts			rts
.010578					_BAConcatLengthError:
.010578	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>01057b	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010583	6f 6f 20 6c 6f 6e 67 00
.01058b					Binary_Subtract:
.01058b	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.01058e	38		sec			sec
.01058f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010591	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010593	95 00		sta $00,x		sta 	EXSValueL+0,x
.010595	b5 10		lda $10,x		lda		EXSValueH+0,x
.010597	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010599	95 10		sta $10,x		sta 	EXSValueH+0,x
.01059b	60		rts			rts
.01059c					Binary_ShiftRight:
.01059c	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.01059f	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105a1	29 3f 00	and #$003f		and 	#63
.0105a4	f0 07		beq $0105ad		beq		_Binary_SRExit
.0105a6					_Binary_SRLoop:
.0105a6	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0105a8	76 00		ror $00,x		ror 	EXSValueL+0,x
.0105aa	3a		dec a			dec 	a
.0105ab	d0 f9		bne $0105a6		bne 	_Binary_SRLoop
.0105ad					_Binary_SRExit:
.0105ad	60		rts			rts
.0105ae					Binary_ShiftLeft:
.0105ae	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.0105b1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105b3	29 3f 00	and #$003f		and 	#63
.0105b6	f0 07		beq $0105bf		beq		_Binary_SLExit
.0105b8					_Binary_SLLoop:
.0105b8	16 00		asl $00,x		asl 	EXSValueL+0,x
.0105ba	36 10		rol $10,x		rol 	EXSValueH+0,x
.0105bc	3a		dec a			dec 	a
.0105bd	d0 f9		bne $0105b8		bne 	_Binary_SLLoop
.0105bf					_Binary_SLExit:
.0105bf	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.0105c0					Binary_And:
.0105c0	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.0105c3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105c5	35 02		and $02,x		and 	EXSValueL+2,x
.0105c7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105cb	35 12		and $12,x		and 	EXSValueH+2,x
.0105cd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105cf	60		rts			rts
.0105d0					Binary_Or:
.0105d0	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.0105d3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105d5	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105d7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105d9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105db	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105dd	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105df	60		rts			rts
.0105e0					Binary_Xor:
.0105e0	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e3	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105e5	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105e7	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105e9	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105eb	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105ed	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ef	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0105f0					Binary_Equals:
.0105f0	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105f3	b0 0e		bcs $010603		bcs 	_BEString
.0105f5	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105f7	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105f9	d0 4f		bne $01064a		bne 	Compare_Fail
.0105fb	b5 10		lda $10,x		lda 	EXSValueH,x
.0105fd	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105ff	d0 49		bne $01064a		bne 	Compare_Fail
.010601	80 3f		bra $010642		bra 	Compare_Succeed
.010603					_BEString:
.010603	09 00 00	ora #$0000		ora 	#$0000
.010606	f0 3a		beq $010642		beq 	Compare_Succeed
.010608	80 40		bra $01064a		bra 	Compare_Fail
.01060a					Binary_NotEquals:
.01060a	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01060d	b0 0e		bcs $01061d		bcs 	_BNEString
.01060f	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010611	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010613	d0 2d		bne $010642		bne 	Compare_Succeed
.010615	b5 10		lda $10,x		lda 	EXSValueH,x
.010617	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010619	d0 27		bne $010642		bne 	Compare_Succeed
.01061b	80 2d		bra $01064a		bra 	Compare_Fail
.01061d					_BNEString:
.01061d	09 00 00	ora #$0000		ora 	#$0000
.010620	d0 20		bne $010642		bne 	Compare_Succeed
.010622	80 26		bra $01064a		bra 	Compare_Fail
.010624					Binary_Less:
.010624	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010627	b0 12		bcs $01063b		bcs 	_BLString
.010629	38		sec			sec
.01062a	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01062c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01062e	b5 10		lda $10,x		lda 	EXSValueH,x
.010630	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010632	50 03		bvc $010637		bvc 	*+5
.010634	49 00 80	eor #$8000		eor 	#$8000
.010637	30 09		bmi $010642		bmi 	Compare_Succeed
.010639	80 0f		bra $01064a		bra 	Compare_Fail
.01063b					_BLString:
.01063b	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01063e	f0 02		beq $010642		beq 	Compare_Succeed
.010640	80 08		bra $01064a		bra 	Compare_Fail
.010642					Compare_Succeed:
.010642	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010645	95 00		sta $00,x		sta 	EXSValueL,x
.010647	95 10		sta $10,x		sta 	EXSValueH,x
.010649	60		rts			rts
.01064a					Compare_Fail:
.01064a	74 00		stz $00,x		stz 	EXSValueL,x
.01064c	74 10		stz $10,x		stz 	EXSValueH,x
.01064e	60		rts			rts
.01064f					Binary_GreaterEqual:
.01064f	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010652	b0 12		bcs $010666		bcs 	_BGEString
.010654	38		sec			sec
.010655	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010657	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010659	b5 10		lda $10,x		lda 	EXSValueH,x
.01065b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01065d	50 03		bvc $010662		bvc 	*+5
.01065f	49 00 80	eor #$8000		eor 	#$8000
.010662	10 de		bpl $010642		bpl 	Compare_Succeed
.010664	80 e4		bra $01064a		bra 	Compare_Fail
.010666					_BGEString:
.010666	09 00 00	ora #$0000		ora 	#$0000
.010669	10 d7		bpl $010642		bpl 	Compare_Succeed
.01066b	80 dd		bra $01064a		bra 	Compare_Fail
.01066d					Binary_LessEqual:
.01066d	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010670	b0 12		bcs $010684		bcs 	_BLEString
.010672	18		clc			clc 									; numeric <= signed
.010673	b5 00		lda $00,x		lda 	EXSValueL,x
.010675	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010677	b5 10		lda $10,x		lda 	EXSValueH,x
.010679	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01067b	50 03		bvc $010680		bvc 	*+5
.01067d	49 00 80	eor #$8000		eor 	#$8000
.010680	30 c0		bmi $010642		bmi 	Compare_Succeed
.010682	80 c6		bra $01064a		bra 	Compare_Fail
.010684					_BLEString:
.010684	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010687	d0 b9		bne $010642		bne 	Compare_Succeed
.010689	80 bf		bra $01064a		bra 	Compare_Fail
.01068b					Binary_Greater:
.01068b	20 a9 06	jsr $0106a9		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01068e	b0 12		bcs $0106a2		bcs 	_BGString
.010690	18		clc			clc 									; numeric > signed
.010691	b5 00		lda $00,x		lda 	EXSValueL,x
.010693	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010695	b5 10		lda $10,x		lda 	EXSValueH,x
.010697	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010699	50 03		bvc $01069e		bvc 	*+5
.01069b	49 00 80	eor #$8000		eor 	#$8000
.01069e	10 a2		bpl $010642		bpl 	Compare_Succeed
.0106a0	80 a8		bra $01064a		bra 	Compare_Fail
.0106a2					_BGString:
.0106a2	c9 01 00	cmp #$0001		cmp 	#$0001
.0106a5	f0 9b		beq $010642		beq 	Compare_Succeed
.0106a7	80 a1		bra $01064a		bra 	Compare_Fail
.0106a9					CompareTypeCheck:
.0106a9	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0106ab	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0106ad	30 06		bmi $0106b5		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0106af	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0106b1	30 1c		bmi $0106cf		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0106b3	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0106b4	60		rts			rts
.0106b5					_CTCFail:
.0106b5	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>0106b8	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0106c0	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0106cf					_CTCStringCompare:
.0106cf	20 5a 04	jsr $01045a		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0106d2	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0106d4	85 08		sta $08			sta 	DTemp1
.0106d6	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106d8	85 0c		sta $0c			sta 	DTemp2
.0106da	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106dd	a8		tay			tay
.0106de	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106e0	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106e2	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106e4	90 02		bcc $0106e8		bcc 	_CTCSmallest
.0106e6	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106e8					_CTCSmallest:
.0106e8	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106ea					_CTCCompare:
.0106ea	c8		iny			iny 									; look at next character (done first, first char is size)
.0106eb	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106ed	30 16		bmi $010705		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106ef	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106f1	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106f3	f0 f5		beq $0106ea		beq 	_CTCCompare 					; if zero, try the next character.
.0106f5	b0 07		bcs $0106fe		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106f7					_CTCLess:
.0106f7	c2 20		rep #$20		rep 	#$20
.0106f9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106fc	80 14		bra $010712		bra 	_CTCExit
.0106fe					_CTCGreater:
.0106fe	c2 20		rep #$20		rep 	#$20
.010700	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010703	80 0d		bra $010712		bra 	_CTCExit
.010705					_CTCEqualSoFar:
.010705	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010707	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010709	90 ec		bcc $0106f7		bcc 	_CTCLess
.01070b	d0 f1		bne $0106fe		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01070d	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01070f	a9 00 00	lda #$0000		lda 	#$0000
.010712					_CTCExit:
.010712	38		sec			sec 									; return with CS indicating string comparison.
.010713	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010714					Binary_Divide:
.010714	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.010717	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010719	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01071b	d0 14		bne $010731		bne 	_BinaryDivide_Ok
.01071d	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010720	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010728	20 62 79 20 7a 65 72 6f 00
.010731					_BinaryDivide_Ok:
.010731	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010733	64 0a		stz $0a			stz 	DTemp1+2
.010735	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010737	5a		phy			phy 										; save Y (bit counter)
.010738	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01073a	10 07		bpl $010743		bpl 	_BinaryDivide_RightDone
.01073c	e8		inx			inx
.01073d	e8		inx			inx
.01073e	20 79 07	jsr $010779		jsr 	Binary_DivNegate
.010741	ca		dex			dex
.010742	ca		dex			dex
.010743					_BinaryDivide_RightDone:
.010743	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010745	10 03		bpl $01074a		bpl 	_BinaryDivide_LeftDone
.010747	20 79 07	jsr $010779		jsr 	Binary_DivNegate
.01074a					_BinaryDivide_LeftDone:
.01074a	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01074d					_BinaryDivide_Loop:
.01074d	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01074f	36 10		rol $10,x		rol 	EXSValueH+0,x
.010751	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010753	26 0a		rol $0a			rol 	DTemp1+2
.010755	38		sec			sec											; calculate A-M
.010756	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010758	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01075a	85 0c		sta $0c			sta 	DTemp2
.01075c	a5 0a		lda $0a			lda 	DTemp1+2
.01075e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010760	90 08		bcc $01076a		bcc 	_Binary_NoSubract 					; if A < M skip this
.010762	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010764	a5 0c		lda $0c			lda 	DTemp2
.010766	85 08		sta $08			sta 	DTemp1+0
.010768	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01076a					_Binary_NoSubract:
.01076a	88		dey			dey 										; do it 32 times.
.01076b	d0 e0		bne $01074d		bne 	_BinaryDivide_Loop
.01076d					_BinaryDivide_Exit:
.01076d	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01076f	29 01 00	and #$0001		and 	#1
.010772	f0 03		beq $010777		beq 	_BinaryDivide_Exit2
.010774	20 79 07	jsr $010779		jsr 	Binary_DivNegate
.010777					_BinaryDivide_Exit2:
.010777	7a		ply			ply 										; restore Y
.010778	60		rts			rts
.010779					Binary_DivNegate:
.010779	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01077b	38		sec			sec 										; negate the value at stack X.
.01077c	a9 00 00	lda #$0000		lda 	#$0000
.01077f	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010781	95 00		sta $00,x		sta 	EXSValueL+0,x
.010783	a9 00 00	lda #$0000		lda 	#$0000
.010786	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010788	95 10		sta $10,x		sta 	EXSValueH+0,x
.01078a	60		rts			rts
.01078b					Binary_Modulus:
.01078b	20 14 07	jsr $010714		jsr 	Binary_Divide 						; do the divide
.01078e	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010790	95 00		sta $00,x		sta 	EXSValueL+0,x
.010792	a5 0a		lda $0a			lda 	DTemp1+2
.010794	95 10		sta $10,x		sta 	EXSValueH+0,x
.010796	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010797					Binary_Multiply:
.010797	20 3a 04	jsr $01043a		jsr 	CheckBothNumeric 					; check both values are numeric
.01079a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01079c	85 08		sta $08			sta 	DTemp1
.01079e	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107a0	85 0a		sta $0a			sta		DTemp1+2
.0107a2	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0107a4	74 10		stz $10,x		stz 	EXSValueH+0,x
.0107a6					_BinaryMultiply_Loop:
.0107a6	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0107a8	05 0a		ora $0a			ora 	DTemp1+2
.0107aa	f0 1e		beq $0107ca		beq 	_BinaryMultiply_Exit
.0107ac	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0107ae	29 01 00	and #$0001		and 	#1
.0107b1	f0 0d		beq $0107c0		beq 	_BinaryMultiply_NoAdd
.0107b3	18		clc			clc 										; add multiplicand to result.
.0107b4	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0107b6	75 02		adc $02,x		adc 	EXSValueL+2,x
.0107b8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107ba	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107bc	75 12		adc $12,x		adc 	EXSValueH+2,x
.0107be	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107c0					_BinaryMultiply_NoAdd:
.0107c0	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0107c2	66 08		ror $08			ror 	DTemp1
.0107c4	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0107c6	36 12		rol $12,x		rol 	EXSValueH+2,x
.0107c8	80 dc		bra $0107a6		bra 	_BinaryMultiply_Loop 				; go round again.
.0107ca					_BinaryMultiply_Exit:
.0107ca	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.0107cb					Function_Len:
.0107cb	20 5a 04	jsr $01045a			jsr 	ResetTypeInteger 			; returns an integer
.0107ce	20 78 02	jsr $010278			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107d1	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; check )
.0107d4	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107d6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107d9	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107dc	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107de	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107e0	60		rts				rts
.0107e1					Function_Abs:
.0107e1	20 5a 04	jsr $01045a			jsr 	ResetTypeInteger 			; returns an integer
.0107e4	20 59 02	jsr $010259			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107e7	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; check )
.0107ea	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107ec	30 07		bmi $0107f5			bmi 	_FAbsNegative 				; negate it if negative
.0107ee	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107f0	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107f4	60		rts				rts
.0107f5					_FAbsNegative:
.0107f5	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107f6	a9 00 00	lda #$0000			lda 	#0
.0107f9	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107fb	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107fd	a9 00 00	lda #$0000			lda 	#0
.010800	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010802	95 10		sta $10,x			sta 	EXSValueH+0,x
.010804	60		rts				rts
.010805					Function_Sgn:
.010805	20 5a 04	jsr $01045a			jsr 	ResetTypeInteger 			; returns integer
.010808	20 59 02	jsr $010259			jsr 	EvaluateNextInteger 		; get an integer
.01080b	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; check )
.01080e	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010810	74 10		stz $10,x			stz 	EXSValueH+0,x
.010812	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010814	30 07		bmi $01081d			bmi 	_FSgnNegative 				; set to -1 if signed
.010816	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010818	f0 02		beq $01081c			beq 	_FSgnExit
.01081a	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01081c					_FSgnExit:
.01081c	60		rts				rts
.01081d					_FSgnNegative:
.01081d	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010820	95 00		sta $00,x			sta 	EXSValueL+0,x
.010822	95 10		sta $10,x			sta 	EXSValueH+0,x
.010824	60		rts				rts
.010825					Function_Random:
.010825	20 5a 04	jsr $01045a			jsr 	ResetTypeInteger
.010828	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01082a	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.01082c	d0 0a		bne $010838			bne 	_Rnd_NotZero
.01082e	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010831	85 10		sta $10				sta 	DRandom
.010833	a9 ea 00	lda #$00ea			lda 	#$EA
.010836	85 12		sta $12				sta 	DRandom+2
.010838					_Rnd_NotZero:
.010838	20 43 08	jsr $010843			jsr 	_Rnd_Process 				; call randomiser twice
.01083b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01083d	20 43 08	jsr $010843			jsr 	_Rnd_Process
.010840	95 00		sta $00,x			sta 	EXSValueL+0,x
.010842	60		rts				rts
.010843					_Rnd_Process:
.010843	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010845	26 12		rol $12				rol 	DRandom+2
.010847	90 0e		bcc $010857			bcc 	_Rnd_Exit
.010849	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01084b	49 54 d4	eor #$d454			eor 	#$D454
.01084e	85 10		sta $10				sta 	DRandom
.010850	a5 12		lda $12				lda 	DRandom+2
.010852	49 d5 55	eor #$55d5			eor 	#$55D5
.010855	85 12		sta $12				sta 	DRandom+2
.010857					_Rnd_Exit:
.010857	a5 10		lda $10				lda 	DRandom
.010859	45 12		eor $12				eor 	DRandom+2
.01085b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.01085c					Function_VAL:
.01085c	20 5a 04	jsr $01045a			jsr 	ResetTypeInteger 			; returns an integer
.01085f	20 78 02	jsr $010278			jsr 	EvaluateNextString 			; get the value you are absoluting
.010862	48		pha				pha 								; put string address on stack.
.010863	20 73 08	jsr $010873			jsr 	VALGetBase 					; process , base (shared with STR$())
.010866	7a		ply				ply 								; get string address back
.010867	da		phx				phx 								; save X on stack
.010868	aa		tax				tax 								; base in X
.010869	98		tya				tya 								; address in A
.01086a	20 ad 08	jsr $0108ad			jsr 	StringToInteger
.01086d	fa		plx				plx 								; restore X
.01086e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010870	94 10		sty $10,x			sty 	EXSValueH+0,x
.010872	60		rts				rts
.010873					VALGetBase:
.010873	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010875	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010878	f0 07		beq $010881			beq 	_VGBAlternate
.01087a	20 28 04	jsr $010428			jsr 	ExpectRightBracket			; expect ), and return 10.
.01087d	a9 0a 00	lda #$000a			lda 	#10
.010880	60		rts				rts
.010881					_VGBAlternate:
.010881	20 31 04	jsr $010431			jsr 	ExpectComma 				; skip comma.
.010884	20 59 02	jsr $010259			jsr 	EvaluateNextInteger 		; get base
.010887	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.01088a	d0 0e		bne $01089a			bne 	_VGBBadBase
.01088c	c9 02 00	cmp #$0002			cmp 	#2
.01088f	90 09		bcc $01089a			bcc 	_VGBBadBase
.010891	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.010894	b0 04		bcs $01089a			bcs 	_VGBBadBase
.010896	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; get right bracket and return.
.010899	60		rts				rts
.01089a					_VGBBadBase:
.01089a	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>01089d	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0108a5	65 72 20 42 61 73 65 00
.0108ad					StringToInteger:
.0108ad	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.0108af	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.0108b1	29 ff 00	and #$00ff			and 	#$00FF
.0108b4	85 26		sta $26				sta 	DTemp3+2
.0108b6	f0 6e		beq $010926			beq 	_STIError 					; if length zero it's bad.
.0108b8	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.0108ba	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.0108bc	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.0108be	64 0a		stz $0a				stz 	DTemp1+2
.0108c0	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.0108c2	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.0108c5	48		pha				pha 								; push on stack
.0108c6	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.0108c9	d0 06		bne $0108d1			bne 	_STILoop
.0108cb	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.0108cd	c6 26		dec $26				dec 	DTemp3+2					; dec count
.0108cf	f0 55		beq $010926			beq 	_STIError 					; if only - then error.
.0108d1					_STILoop:
.0108d1	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.0108d3	20 45 09	jsr $010945			jsr 	MultiplyTemp1ByA
.0108d6	b2 24		lda ($24)			lda 	(DTemp3)
.0108d8	29 ff 00	and #$00ff			and 	#$00FF
.0108db	20 36 09	jsr $010936			jsr 	ConvertUpperCase
.0108de	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108e1	90 43		bcc $010926			bcc 	_STIError
.0108e3	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108e6	90 0e		bcc $0108f6			bcc 	_STIOkay1
.0108e8	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108eb	90 39		bcc $010926			bcc 	_STIError
.0108ed	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108f0	b0 34		bcs $010926			bcs 	_STIError
.0108f2	18		clc				clc 								; shift to correct range.
.0108f3	69 09 00	adc #$0009			adc 	#9
.0108f6					_STIOkay1:
.0108f6	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108f9	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108fb	b0 29		bcs $010926			bcs 	_STIError
.0108fd	18		clc				clc 								; add A to DTemp1
.0108fe	65 08		adc $08				adc 	DTemp1
.010900	85 08		sta $08				sta 	DTemp1
.010902	90 02		bcc $010906			bcc 	_STINoCarry
.010904	e6 0a		inc $0a				inc 	DTemp1+2
.010906					_STINoCarry:
.010906	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010908	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.01090a	d0 c5		bne $0108d1			bne 	_STILoop 					; loop back.
.01090c	68		pla				pla 								; get optional minus bac
.01090d	c9 2d 00	cmp #$002d			cmp 	#"-"
.010910	d0 0f		bne $010921			bne 	_STINotNegative 			; handle the negative character
.010912	38		sec				sec 								; negate DTemp1
.010913	a9 00 00	lda #$0000			lda 	#0
.010916	e5 08		sbc $08				sbc 	DTemp1
.010918	85 08		sta $08				sta 	DTemp1
.01091a	a9 00 00	lda #$0000			lda 	#0
.01091d	e5 0a		sbc $0a				sbc 	DTemp1+2
.01091f	85 0a		sta $0a				sta 	DTemp1+2
.010921					_STINotNegative:
.010921	a5 08		lda $08				lda 	DTemp1 						; get the result
.010923	a4 0a		ldy $0a				ldy 	DTemp1+2
.010925	60		rts				rts
.010926					_STIError:
.010926	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010929	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010931	74 61 6e 74 00
.010936					ConvertUpperCase:
.010936	c9 61 00	cmp #$0061			cmp 	#'a'
.010939	90 09		bcc $010944			bcc 	_CUCExit
.01093b	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01093e	b0 04		bcs $010944			bcs 	_CUCExit
.010940	38		sec				sec
.010941	e9 20 00	sbc #$0020			sbc 	#32
.010944					_CUCExit:
.010944	60		rts				rts
.010945					MultiplyTemp1ByA:
.010945	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010948	f0 56		beq $0109a0			beq 	_MT1_16
.01094a	c9 0a 00	cmp #$000a			cmp 	#10
.01094d	f0 33		beq $010982			beq 	_MT1_10
.01094f	c9 08 00	cmp #$0008			cmp 	#8
.010952	f0 50		beq $0109a4			beq 	_MT1_8
.010954	c9 02 00	cmp #$0002			cmp 	#2
.010957	f0 53		beq $0109ac			beq 	_MT1_2
.010959					_MTGeneral:
.010959	da		phx				phx
.01095a	aa		tax				tax 								; multiplier in X
.01095b	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.01095d	85 0c		sta $0c				sta 	DTemp2
.01095f	a5 0a		lda $0a				lda 	DTemp1+2
.010961	85 0e		sta $0e				sta 	DTemp2+2
.010963	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010965	64 0a		stz $0a				stz 	DTemp1+2
.010967					_MTLoop:
.010967	8a		txa				txa 								; shift X right into C
.010968	4a		lsr a				lsr 	a
.010969	aa		tax				tax
.01096a	90 0d		bcc $010979			bcc 	_MTNoAdd
.01096c	18		clc				clc
.01096d	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01096f	65 0c		adc $0c				adc 	DTemp2
.010971	85 08		sta $08				sta 	DTemp1
.010973	a5 0a		lda $0a				lda 	DTemp1+2
.010975	65 0e		adc $0e				adc 	DTemp2+2
.010977	85 0a		sta $0a				sta 	DTemp1+2
.010979					_MTNoAdd:
.010979	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01097b	26 0e		rol $0e				rol 	DTemp2+2
.01097d	8a		txa				txa 								; until multiplier is zero.
.01097e	d0 e7		bne $010967			bne 	_MTLoop
.010980					_MTGExit:
.010980	fa		plx				plx 								; restore X
.010981	60		rts				rts 								; and exit
.010982					_MT1_10:
.010982	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010984	48		pha				pha
.010985	a5 08		lda $08				lda 	DTemp1
.010987	48		pha				pha
.010988	06 08		asl $08				asl 	DTemp1						; x 4
.01098a	26 0a		rol $0a				rol 	DTemp1+2
.01098c	06 08		asl $08				asl 	DTemp1
.01098e	26 0a		rol $0a				rol 	DTemp1+2
.010990	68		pla				pla 								; add saved value, x 5
.010991	18		clc				clc
.010992	65 08		adc $08				adc 	DTemp1
.010994	85 08		sta $08				sta 	DTemp1
.010996	68		pla				pla
.010997	65 0a		adc $0a				adc 	DTemp1+2
.010999	85 0a		sta $0a				sta 	DTemp1+2
.01099b	06 08		asl $08				asl 	DTemp1
.01099d	26 0a		rol $0a				rol 	DTemp1+2
.01099f	60		rts				rts
.0109a0					_MT1_16:
.0109a0	06 08		asl $08				asl 	DTemp1
.0109a2	26 0a		rol $0a				rol 	DTemp1+2
.0109a4					_MT1_8:
.0109a4	06 08		asl $08				asl 	DTemp1
.0109a6	26 0a		rol $0a				rol 	DTemp1+2
.0109a8					_MT1_4:
.0109a8	06 08		asl $08				asl 	DTemp1
.0109aa	26 0a		rol $0a				rol 	DTemp1+2
.0109ac					_MT1_2
.0109ac	06 08		asl $08				asl 	DTemp1
.0109ae	26 0a		rol $0a				rol 	DTemp1+2
.0109b0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.0109b1					Function_Str:
.0109b1	20 62 04	jsr $010462			jsr 	ResetTypeString 			; returns a string.
.0109b4	20 59 02	jsr $010259			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0109b7	48		pha				pha 								; save YA on the stack
.0109b8	5a		phy				phy
.0109b9	20 73 08	jsr $010873			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109bc	85 14		sta $14				sta 	DSignCount
.0109be	7a		ply				ply 								; YA is the number
.0109bf	68		pla				pla
.0109c0	da		phx				phx
.0109c1	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0109c3	20 cc 09	jsr $0109cc			jsr 	ConvertToString 			; convert it to a string.
.0109c6	fa		plx				plx 								; restore X
.0109c7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0109c9	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109cb	60		rts				rts
.0109cc					ConvertToString:
.0109cc	da		phx				phx 								; save X
.0109cd	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0109cf	84 26		sty $26				sty 	DTemp3+2
.0109d1	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0109d3	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109d6	20 98 04	jsr $010498			jsr 	StringTempAllocate 			; allocate space for return string.
.0109d9	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109db	10 15		bpl $0109f2			bpl 	_CTSNotNegative
.0109dd	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109e0	20 5a 0a	jsr $010a5a			jsr 	CTSOutputA
.0109e3	38		sec				sec 								; negate DTemp3
.0109e4	a9 00 00	lda #$0000			lda 	#0
.0109e7	e5 24		sbc $24				sbc 	DTemp3
.0109e9	85 24		sta $24				sta 	DTemp3
.0109eb	a9 00 00	lda #$0000			lda 	#0
.0109ee	e5 26		sbc $26				sbc 	DTemp3+2
.0109f0	85 26		sta $26				sta 	DTemp3+2
.0109f2					_CTSNotNegative:
.0109f2	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109f5	48		pha				pha
.0109f6	a9 00 00	lda #$0000			lda 	#0
.0109f9	48		pha				pha
.0109fa	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109fc	85 08		sta $08				sta 	DTemp1
.0109fe	64 0a		stz $0a				stz 	DTemp1+2
.010a00					_CTSMultiplySubtractor:
.010a00	38		sec				sec
.010a01	a5 24		lda $24				lda 	DTemp3
.010a03	e5 08		sbc $08				sbc 	DTemp1
.010a05	a5 26		lda $26				lda 	DTemp3+2
.010a07	e5 0a		sbc $0a				sbc 	DTemp1+2
.010a09	90 0d		bcc $010a18			bcc		_CTSScaledUp 				; if >= then scaled up.
.010a0b	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010a0d	48		pha				pha
.010a0e	a5 0a		lda $0a				lda 	DTemp1+2
.010a10	48		pha				pha
.010a11	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010a13	20 45 09	jsr $010945			jsr 	MultiplyTemp1ByA
.010a16	80 e8		bra $010a00			bra 	_CTSMultiplySubtractor
.010a18					_CTSScaledUp:
.010a18	7a		ply				ply 								; YA contains the previous divider.
.010a19	68		pla				pla
.010a1a	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010a1d	d0 05		bne $010a24			bne 	_CTSHasDigit
.010a1f	c9 01 00	cmp #$0001			cmp 	#1 							;
.010a22	f0 20		beq $010a44			beq 	_CTSExit
.010a24					_CTSHasDigit:
.010a24	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010a26	84 0e		sty $0e				sty 	DTemp2+2
.010a28	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010a2b					_CTSSubLoop:
.010a2b	38		sec				sec 								; subtract subtractor from number
.010a2c	a5 24		lda $24				lda 	DTemp3
.010a2e	e5 0c		sbc $0c				sbc 	DTemp2
.010a30	a8		tay				tay 								; intermediate in Y
.010a31	a5 26		lda $26				lda 	DTemp3+2
.010a33	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a35	90 07		bcc $010a3e			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a37	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a39	84 24		sty $24				sty 	DTemp3
.010a3b	e8		inx				inx 								; one more subtraction
.010a3c	80 ed		bra $010a2b			bra 	_CTSSubLoop 				; try it again.
.010a3e					_CTSFinishedSubtracting:
.010a3e	8a		txa				txa 								; convert to ASCII.
.010a3f	20 4d 0a	jsr $010a4d			jsr 	CTSOutputHexDigit 			; write that out.
.010a42	80 d4		bra $010a18			bra 	_CTSScaledUp
.010a44					_CTSExit:
.010a44	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a46	20 4d 0a	jsr $010a4d			jsr 	CTSOutputHexDigit
.010a49	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a4b	fa		plx				plx 								; restore X.
.010a4c	60		rts				rts
.010a4d					CTSOutputHexDigit:
.010a4d	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a50	90 04		bcc $010a56			bcc 	_CTSNotLetter
.010a52	18		clc				clc
.010a53	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a56					_CTSNotLetter:
.010a56	18		clc				clc
.010a57	69 30 00	adc #$0030			adc 	#48
.010a5a					CTSOutputA:
.010a5a	5a		phy				phy 								; save Y, set Y to current pointer
.010a5b	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a5d	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a60	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a62	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a64	1a		inc a				inc 	a
.010a65	92 18		sta ($18)			sta 	(DStartTempString)
.010a67	c2 20		rep #$20			rep 	#$20
.010a69	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a6b	7a		ply				ply 								; restore Y and exit.
.010a6c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a6d					Function_Let:
.010a6d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a6f	48		pha				pha
.010a70	20 bf 02	jsr $0102bf			jsr 	VariableFind 				; find the variable
.010a73	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a75	b0 1c		bcs $010a93			bcs 	_FLetFound 					; skip if found.
.010a77	68		pla				pla 								; get and push the first token again.
.010a78	48		pha				pha
.010a79	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a7c	d0 57		bne $010ad5			bne 	_FLError					; arrays, so this causes an error.
.010a7e	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a80	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a83	20 69 03	jsr $010369			jsr 	VariableCreate 				; create it.
.010a86	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a88					_FLSkipToken:
.010a88	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a8a	e6 06		inc $06				inc 	DCodePtr
.010a8c	e6 06		inc $06				inc 	DCodePtr
.010a8e	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a91	d0 f5		bne $010a88			bne 	_FLSkipToken
.010a93					_FLetFound:
.010a93	68		pla				pla 								; get and save the first token.
.010a94	48		pha				pha
.010a95	a8		tay				tay 								; put it in Y
.010a96	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a99	f0 07		beq $010aa2			beq 	_FLetNotArray
.010a9b	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a9d	20 36 03	jsr $010336			jsr 	VariableSubscript			; index calculation
.010aa0	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010aa2					_FLetNotArray:
.010aa2	7a		ply				ply 								; get the first token into Y
.010aa3	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010aa5	48		pha				pha
.010aa6	5a		phy				phy 								; save the first token on the stack.
.010aa7	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010aaa	20 0e 04	jsr $01040e			jsr 	ExpectToken
.010aad	68		pla				pla 								; restore the first token.
.010aae	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010ab1	d0 0f		bne $010ac2			bne 	_FLetString 				; skip if string.
.010ab3	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; get an integer
.010ab6	7a		ply				ply 								; get address in Y
.010ab7	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010ab9	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010abc	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010abe	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010ac1	60		rts				rts
.010ac2					_FLetString:
.010ac2	20 5f 02	jsr $01025f			jsr 	EvaluateString 				; get a string.
.010ac5	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010ac7	20 d6 04	jsr $0104d6			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010aca	7a		ply				ply 								; get address
.010acb	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010ace	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010ad1	99 02 00	sta $0002,y			sta 	$0002,y
.010ad4	60		rts				rts
.010ad5					_FLError:
.010ad5	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010ad8	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010ae0	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010ae8					Function_PRINT:
.010ae8	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010aea	f0 33		beq $010b1f			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010aec	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010aef	f0 2e		beq $010b1f			beq 	_FPRExitCR
.010af1	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010af4	f0 23		beq $010b19			beq 	_FPRSkipLoop
.010af6	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010af9	f0 1b		beq $010b16			beq 	_FPRNewLine
.010afb	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010afe	f0 11		beq $010b11			beq 	_FPRTab
.010b00					_FPRExpression:
.010b00	20 32 01	jsr $010132			jsr 	Evaluate 					; evaluate a string or integer.
.010b03	b0 06		bcs $010b0b			bcs 	_FPRHaveString
.010b05	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010b08	20 cc 09	jsr $0109cc			jsr 	ConvertToString
.010b0b					_FPRHaveString:
.010b0b	a8		tay				tay 								; print the basic String.
.010b0c	20 7e 04	jsr $01047e			jsr 	PrintBASICString
.010b0f	80 d7		bra $010ae8			bra 	Function_Print 				; and go round again.
.010b11					_FPRTab:
.010b11	20 12 10	jsr $011012			jsr 	HWTab
.010b14	80 03		bra $010b19			bra 	_FPRSkipLoop
.010b16					_FPRNewLine:
.010b16	20 ff 0f	jsr $010fff			jsr 	HWNewLine
.010b19					_FPRSkipLoop:
.010b19	e6 06		inc $06				inc 	DCodePtr
.010b1b	e6 06		inc $06				inc 	DCodePtr
.010b1d	80 c9		bra $010ae8			bra 	Function_Print
.010b1f					_FPRExitCR:
.010b1f	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010b21	88		dey				dey
.010b22	88		dey				dey
.010b23	b9 00 00	lda $0000,y			lda 	$0000,y
.010b26	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010b29	f0 08		beq $010b33			beq 	_FPRExit
.010b2b	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010b2e	f0 03		beq $010b33			beq 	_FPRExit
.010b30	20 ff 0f	jsr $010fff			jsr 	HWNewLine 					; print a new line.
.010b33					_FPRExit:
.010b33	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.010b34					Function_IF:
.010b34	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; check success.
.010b37	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010b39	05 08		ora $08				ora 	DTemp1
.010b3b	a8		tay				tay 								; success flag in Y.
.010b3c	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010b3e	c9 32 3a	cmp #$3a32			cmp 	#thenTokenID
.010b41	d0 32		bne $010b75			bne 	_FIFExtended 				; if so, go to the extended IF.
.010b43	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010b45	e6 06		inc $06				inc 	DCodePtr
.010b47	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010b4a	f0 0f		beq $010b5b			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010b4c	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010b4e	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010b51	90 21		bcc $010b74			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010b53	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b56	b0 1c		bcs $010b74			bcs 	_FIFContinue
.010b58	4c b3 0c	jmp $010cb3			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010b5b					_FIFEndOfLine:
.010b5b	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010b5d	f0 15		beq $010b74			beq 	_FIFContinue 				; if done so, continue.
.010b5f	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010b62	90 06		bcc $010b6a			bcc 	_FIFStringConstant
.010b64	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010b66	e6 06		inc $06				inc 	DCodePtr
.010b68	80 f1		bra $010b5b			bra 	_FIFEndOfLine
.010b6a					_FIFStringConstant:
.010b6a	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010b6d	18		clc				clc
.010b6e	65 06		adc $06				adc 	DCodePtr
.010b70	85 06		sta $06				sta 	DCodePtr
.010b72	80 e7		bra $010b5b			bra 	_FIFEndOfLine
.010b74					_FIFContinue:
.010b74	60		rts				rts
.010b75					_FIFExtended:
.010b75	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010b77	e6 2a		inc $2a				inc 	DStack
.010b79	a9 2f 3c	lda #$3c2f			lda 	#ifTokenID
.010b7c	a6 2a		ldx $2a				ldx 	DStack
.010b7e	95 00		sta $00,x			sta 	$00,x
.010b80	98		tya				tya 								; see if the test was passed.
.010b81	f0 01		beq $010b84			beq 	_FIXSkip 					; if zero then it has failed.
.010b83	60		rts				rts 								; test passed, so continue executing
.010b84					_FIXSkip:
.010b84	a9 2c 3e	lda #$3e2c			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010b87	a2 33 3a	ldx #$3a33			ldx 	#endifTokenID 				; at the same level.
.010b8a	20 ea 0b	jsr $010bea			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010b8d	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010b8f	e6 06		inc $06				inc 	DCodePtr
.010b91	c9 33 3a	cmp #$3a33			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010b94	d0 04		bne $010b9a			bne 	_FIXNoThrow
.010b96	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010b98	c6 2a		dec $2a				dec 	DStack
.010b9a					_FIXNoThrow:
.010b9a	60		rts				rts
.010b9b					Handler_ELSE:
.010b9b	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010b9d	b5 00		lda $00,x			lda 	$00,x
.010b9f	c9 2f 3c	cmp #$3c2f			cmp 	#ifTokenID
.010ba2	d0 12		bne $010bb6			bne 	_HEBadStructure
.010ba4	a9 33 3a	lda #$3a33			lda 	#endifTokenID 				; only searching one token.
.010ba7	a2 00 00	ldx #$0000			ldx 	#$0000
.010baa	20 ea 0b	jsr $010bea			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010bad	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010baf	e6 06		inc $06				inc 	DCodePtr
.010bb1	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010bb3	c6 2a		dec $2a				dec 	DStack
.010bb5	60		rts				rts
.010bb6					_HEBadStructure:
.010bb6	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010bb9	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010bc1	68 6f 75 74 20 49 66 00
.010bc9					Handler_ENDIF:
.010bc9	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010bcb	b5 00		lda $00,x			lda 	$00,x
.010bcd	c9 2f 3c	cmp #$3c2f			cmp 	#ifTokenID
.010bd0	d0 05		bne $010bd7			bne 	_HEIBadStructure
.010bd2	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010bd4	c6 2a		dec $2a				dec 	DStack
.010bd6	60		rts				rts
.010bd7					_HEIBadStructure:
.010bd7	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010bda	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010be2	68 6f 75 74 20 49 66 00
.010bea					ScanForwardLevel:
.010bea	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010bec	86 0a		stx $0a				stx 	DTemp1+2
.010bee	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010bf0	85 0c		sta $0c				sta 	DTemp2
.010bf2	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010bf5					_SFLLoop:
.010bf5	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010bf8	d0 0d		bne $010c07			bne 	_SFLNoCheck
.010bfa	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010bfc	f0 09		beq $010c07			beq 	_SFLNoCheck 				; don't check zero
.010bfe	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010c00	f0 04		beq $010c06			beq 	_SFLFound
.010c02	c5 0a		cmp $0a				cmp 	DTemp1+2
.010c04	d0 01		bne $010c07			bne 	_SFLNoCheck
.010c06					_SFLFound:
.010c06	60		rts				rts
.010c07					_SFLNoCheck:
.010c07	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010c09	f0 4f		beq $010c5a			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010c0b	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010c0e	90 40		bcc $010c50			bcc 	_SFLSkipString 				; then handle that.
.010c10	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010c12	e6 06		inc $06				inc 	DCodePtr
.010c14	a8		tay				tay 								; put token in Y temporarily.
.010c15	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010c18	c9 00 20	cmp #$2000			cmp 	#$2000
.010c1b	d0 d8		bne $010bf5			bne 	_SFLLoop
.010c1d	98		tya				tya 								; get the token back.
.010c1e	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010c21	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010c24	f0 cf		beq $010bf5			beq 	_SFLLoop
.010c26	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010c29	90 ca		bcc $010bf5			bcc 	_SFLLoop
.010c2b	e8		inx				inx 								; increment the level.
.010c2c	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010c2f	f0 c4		beq $010bf5			beq 	_SFLLoop
.010c31	ca		dex				dex 								; decrement the level
.010c32	ca		dex				dex 								; one overdoes the previous inx.
.010c33	10 c0		bpl $010bf5			bpl 	_SFLLoop 					; if gone -ve then error.
.010c35					_SFLError:
.010c35	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010c37	85 22		sta $22				sta 	DLineNumber
.010c39	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010c3c	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010c44	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010c50					_SFLSkipString:
.010c50	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010c53	18		clc				clc
.010c54	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010c56	85 06		sta $06				sta 	DCodePtr
.010c58	80 9b		bra $010bf5			bra 	_SFLLoop 					; go round again.
.010c5a					_SFLNextLine:
.010c5a	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010c5c	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010c5f	f0 d4		beq $010c35			beq 	_SFLError 					; if zero, then there's no more code to search.
.010c61	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010c64	85 22		sta $22				sta 	DLineNumber
.010c66	18		clc				clc
.010c67	a5 06		lda $06				lda 	DCodePtr
.010c69	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010c6c	85 06		sta $06				sta 	DCodePtr
.010c6e	80 85		bra $010bf5			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010c70					Function_ONGOTO:
.010c70	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; on what GOTO :)
.010c73	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010c76	d0 25		bne $010c9d			bne 	_FOGoFail
.010c78	c9 00 00	cmp #$0000			cmp 	#0
.010c7b	f0 20		beq $010c9d			beq 	_FOGoFail 					; we start with index = 1
.010c7d	48		pha				pha 								; save count.
.010c7e	a9 28 3e	lda #$3e28			lda 	#gotoTokenID 				; expect GOTO
.010c81	20 0e 04	jsr $01040e			jsr 	ExpectToken
.010c84	fa		plx				plx 								; put count in X.
.010c85					_FOGoLoop:
.010c85	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010c87	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010c8a	90 73		bcc $010cff			bcc 	FGOFail
.010c8c	c9 00 c0	cmp #$c000			cmp 	#$C000
.010c8f	b0 6e		bcs $010cff			bcs 	FGOFail
.010c91	ca		dex				dex 								; subtract one, if done, call GOTO code
.010c92	f0 1f		beq $010cb3			beq 	Function_GOTO
.010c94	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010c96	e6 06		inc $06				inc 	DCodePtr
.010c98	20 31 04	jsr $010431			jsr 	ExpectComma 				; expect a comma
.010c9b	80 e8		bra $010c85			bra 	_FOGoLoop 					; and loop round.
.010c9d					_FOGoFail:
.010c9d	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010ca0	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010ca8	47 6f 74 6f 20 76 61 6c 75 65 00
.010cb3					Function_GOTO:
.010cb3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010cb5	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010cb8	90 45		bcc $010cff			bcc 	FGOFail
.010cba	c9 00 c0	cmp #$c000			cmp 	#$C000
.010cbd	b0 40		bcs $010cff			bcs 	FGOFail
.010cbf	38		sec				sec 								; convert to 0-32767
.010cc0	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010cc3	aa		tax				tax
.010cc4	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010cc7	18		clc				clc
.010cc8	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010cca	a8		tay				tay
.010ccb					_FGOSearch:
.010ccb	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010cce	f0 18		beq $010ce8			beq 	_FGOUnknown
.010cd0	8a		txa				txa 								; does it match line number.
.010cd1	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010cd4	f0 08		beq $010cde			beq 	_FGOFound 					; yes, then found.
.010cd6	98		tya				tya 								; no follow the link
.010cd7	18		clc				clc
.010cd8	79 00 00	adc $0000,y			adc 	$0000,y
.010cdb	a8		tay				tay
.010cdc	80 ed		bra $010ccb			bra 	_FGOSearch
.010cde					_FGOFound:
.010cde	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010ce0	98		tya				tya 								; Y + 4 is the code pointer.
.010ce1	18		clc				clc
.010ce2	69 04 00	adc #$0004			adc 	#4
.010ce5	85 06		sta $06				sta 	DCodePtr
.010ce7	60		rts				rts									; and continue
.010ce8					_FGOUnknown:
.010ce8	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010ceb	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010cf3	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010cff					FGOFail:
.010cff	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010d02	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010d0a	20 4e 75 6d 62 65 72 00
.010d12					Function_GOSUB:
.010d12	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010d14	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010d16	18		clc				clc
.010d17	69 02 00	adc #$0002			adc 	#2
.010d1a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010d1c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010d1e	95 04		sta $04,x			sta 	$04,x
.010d20	a9 29 3e	lda #$3e29			lda 	#gosubTokenID 				; save gosub token at +6
.010d23	95 06		sta $06,x			sta 	$06,x
.010d25	8a		txa				txa 								; advance stack by 6.
.010d26	18		clc				clc
.010d27	69 06 00	adc #$0006			adc 	#6
.010d2a	85 2a		sta $2a				sta 	DStack
.010d2c	80 85		bra $010cb3			bra 	Function_GOTO 				; and do a GOTO.
.010d2e					Function_RETURN:
.010d2e	a6 2a		ldx $2a				ldx 	DStack
.010d30	b5 00		lda $00,x			lda 	$00,x
.010d32	c9 29 3e	cmp #$3e29			cmp 	#gosubTokenID 				; check top token.
.010d35	d0 11		bne $010d48			bne 	_FRetFail
.010d37	8a		txa				txa 								; unpick stack.
.010d38	38		sec				sec
.010d39	e9 06 00	sbc #$0006			sbc 	#6
.010d3c	85 2a		sta $2a				sta 	DStack
.010d3e	aa		tax				tax
.010d3f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010d41	85 06		sta $06				sta 	DCodePtr
.010d43	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010d45	85 22		sta $22				sta 	DLineNumber
.010d47	60		rts				rts
.010d48					_FRetFail:
.010d48	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010d4b	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010d53	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.010d60					Function_REPEAT:
.010d60	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010d62	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010d64	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010d66	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010d68	95 04		sta $04,x			sta 	$04,x
.010d6a	a9 2d 3c	lda #$3c2d			lda 	#repeatTokenID 				; save repeat token at +6
.010d6d	95 06		sta $06,x			sta 	$06,x
.010d6f	8a		txa				txa 								; advance stack by 6.
.010d70	18		clc				clc
.010d71	69 06 00	adc #$0006			adc 	#6
.010d74	85 2a		sta $2a				sta 	DStack
.010d76	60		rts				rts
.010d77					Function_UNTIL:
.010d77	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010d79	b5 00		lda $00,x			lda 	$00,x
.010d7b	c9 2d 3c	cmp #$3c2d			cmp 	#repeatTokenID
.010d7e	d0 26		bne $010da6			bne 	_FUNFail
.010d80	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; .... until what.
.010d83	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010d86	d0 15		bne $010d9d			bne 	_FUNExit
.010d88	c9 00 00	cmp #$0000			cmp 	#0
.010d8b	d0 10		bne $010d9d			bne 	_FUNExit
.010d8d	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010d8f	38		sec				sec
.010d90	e9 06 00	sbc #$0006			sbc 	#6
.010d93	aa		tax				tax
.010d94	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010d96	85 06		sta $06				sta 	DCodePtr
.010d98	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010d9a	85 22		sta $22				sta 	DLineNumber
.010d9c	60		rts				rts
.010d9d					_FUNExit:
.010d9d	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010d9f	38		sec				sec
.010da0	e9 06 00	sbc #$0006			sbc 	#6
.010da3	85 2a		sta $2a				sta 	DStack
.010da5	60		rts				rts
.010da6					_FUNFail:
.010da6	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010da9	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010db1	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010dbe					Function_END:
.010dbe	02 00		cop #$00			cop 	#0
.010dc0					Function_RUN:
.010dc0	20 18 0e	jsr $010e18			jsr 	Function_CLEAR 				; clear all variables.
.010dc3	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010dc5	18		clc				clc
.010dc6	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010dc9					_FRun_NextLineNumber:
.010dc9	a8		tay				tay 								; put in Y
.010dca	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010dcd	f0 ef		beq $010dbe			beq 	Function_END 				; if zero, off the end of the program
.010dcf	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010dd2	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010dd4	98		tya				tya 								; get address back
.010dd5	18		clc				clc 								; skip over the link/line number
.010dd6	69 04 00	adc #$0004			adc 	#4
.010dd9	85 06		sta $06				sta 	DCodePtr
.010ddb					_FRun_NextInstruction:
.010ddb	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010dde	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010de0	38		sec				sec
.010de1	e9 00 01	sbc #$0100			sbc 	#256
.010de4	85 16		sta $16				sta 	DTempStringPointer
.010de6	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010de8	f0 28		beq $010e12			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010dea	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010ded	f0 18		beq $010e07			beq 	_FRun_Colon
.010def	a8		tay				tay 								; save in Y
.010df0	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010df3	c9 00 20	cmp #$2000			cmp 	#$2000
.010df6	d0 15		bne $010e0d			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010df8	98		tya				tya 								; get token back
.010df9	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010dfc	0a		asl a				asl 	a 							; double it into X
.010dfd	aa		tax				tax
.010dfe	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010e00	e6 06		inc $06				inc 	DCodePtr
.010e02	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010e05	80 d4		bra $010ddb			bra 	_FRun_NextInstruction 		; do the following instruction.
.010e07					_FRun_Colon:
.010e07	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010e09	e6 06		inc $06				inc 	DCodePtr
.010e0b	80 ce		bra $010ddb			bra 	_FRun_NextInstruction 		; do the following instruction.
.010e0d					_FRun_TryLET:
.010e0d	20 6d 0a	jsr $010a6d			jsr 	Function_LET 				; try as a LET.
.010e10	80 c9		bra $010ddb			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010e12					_FRun_EndInstruction:
.010e12	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010e14	1a		inc a				inc 	a 							; go to link for next line
.010e15	1a		inc a				inc 	a
.010e16	80 b1		bra $010dc9			bra 	_FRun_NextLineNumber
.010e18					Function_CLEAR:
.010e18	20 24 0e	jsr $010e24			jsr 	ClearVariablesPointersAndStacks
.010e1b	60		rts				rts
.010e1c					Function_STOP:
.010e1c	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010e1f	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010e24					ClearVariablesPointersAndStacks:
.010e24	a9 80 00	lda #$0080			lda 	#BASStack
.010e27	85 2a		sta $2a				sta 	DStack
.010e29	64 80		stz $80				stz 	BASStack
.010e2b	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010e2e	a9 00 00	lda #$0000			lda 	#$0000
.010e31	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010e33	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010e35	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010e38	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010e3a	20 61 0e	jsr $010e61			jsr 	FindCodeEnd 				; find where the program ends.
.010e3d	a8		tay				tay 								; Y points to it.
.010e3e	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010e41	99 02 00	sta $0002,y			sta 	$0002,y
.010e44	99 04 00	sta $0004,y			sta 	$0004,y
.010e47	98		tya				tya 								; start of working memory up
.010e48	18		clc				clc
.010e49	69 06 00	adc #$0006			adc 	#6
.010e4c	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010e4f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010e51	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010e54					_FCLoop:
.010e54	a9 00 00	lda #$0000			lda 	#$0000
.010e57	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010e59	c8		iny				iny
.010e5a	c8		iny				iny
.010e5b	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010e5e	d0 f4		bne $010e54			bne 	_FCLoop
.010e60	60		rts				rts
.010e61					FindCodeEnd:
.010e61	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010e64	18		clc				clc
.010e65	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010e67	a8		tay				tay
.010e68					_FCELoop:
.010e68	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010e6b	f0 08		beq $010e75			beq 	_FCEExit
.010e6d	98		tya				tya 								; add offset
.010e6e	18		clc				clc
.010e6f	79 00 00	adc $0000,y			adc 	$0000,y
.010e72	a8		tay				tay
.010e73	80 f3		bra $010e68			bra 	_FCELoop
.010e75					_FCEExit:
.010e75	98		tya				tya 								; return in A
.010e76	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010e77					Function_Dim:
.010e77	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010e79	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010e7c	f0 3b		beq $010eb9			beq		_FDIMNotArray 				; no, error.
.010e7e	20 bf 02	jsr $0102bf			jsr 	VariableFind 				; try to find it.
.010e81	b0 41		bcs $010ec4			bcs 	_FDIMExists 				; if it does, that's an error.
.010e83	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010e85	48		pha				pha
.010e86	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010e88	48		pha				pha
.010e89					_FDIMSkip:
.010e89	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010e8b	e6 06		inc $06				inc 	DCodePtr
.010e8d	e6 06		inc $06				inc 	DCodePtr
.010e8f	29 00 08	and #$0800			and 	#IDContMask
.010e92	d0 f5		bne $010e89			bne 	_FDIMSkip
.010e94	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; evaluate the size
.010e97	20 28 04	jsr $010428			jsr 	ExpectRightBracket 			; check the ) following.
.010e9a	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010e9d	d0 3b		bne $010eda			bne 	_FDIMSize
.010e9f	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010ea2	f0 36		beq $010eda			beq 	_FDIMSize
.010ea4	7a		ply				ply 								; restore HashTablePtr
.010ea5	84 20		sty $20				sty 	DHashTablePtr
.010ea7	7a		ply				ply 								; so now A is the high index, Y points to the token
.010ea8	20 69 03	jsr $010369			jsr 	VariableCreate 				; create the variable.
.010eab	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010ead	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010eb0	d0 06		bne $010eb8			bne 	_FDIMExit
.010eb2	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010eb4	e6 06		inc $06				inc 	DCodePtr
.010eb6	80 bf		bra $010e77			bra 	Function_DIM 				; and do another
.010eb8					_FDIMExit:
.010eb8	60		rts				rts
.010eb9					_FDIMNotArray:
.010eb9	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010ebc	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010ec4					_FDIMExists:
.010ec4	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010ec7	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010ecf	65 64 69 6d 65 6e 73 69 6f 6e 00
.010eda					_FDIMSize:
.010eda	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010edd	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010ee5	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010eeb					Function_COLLECT:
.010eeb	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010eed	85 0c		sta $0c				sta 	DTemp2
.010eef	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010ef2	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010ef4	85 0e		sta $0e				sta 	DTemp2+2
.010ef6	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010ef8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010efa					_FCNextPass:
.010efa	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010efc	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010efe	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010f00	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010f03	18		clc				clc
.010f04	65 02		adc $02				adc 	DBaseAddress
.010f06	a8		tay				tay 								; put in Y
.010f07	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010f0a					_FCO1:
.010f0a	20 30 0f	jsr $010f30			jsr  	COLLECTScanVariable 		; scan that one.
.010f0d	c8		iny				iny 	 							; go to next pointer
.010f0e	c8		iny				iny
.010f0f	ca		dex				dex
.010f10	d0 f8		bne $010f0a			bne 	_FCO1 						; until done all 16.
.010f12	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010f15					_FCO2:
.010f15	20 44 0f	jsr $010f44			jsr  	COLLECTScanArray 			; scan that one.
.010f18	c8		iny				iny 	 							; go to next pointer
.010f19	c8		iny				iny
.010f1a	ca		dex				dex
.010f1b	d0 f8		bne $010f15			bne 	_FCO2 						; until done all 16.
.010f1d	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010f1f	f0 0e		beq $010f2f			beq		_FCExit 					; if finished then exit.
.010f21	48		pha				pha 								; save the target address
.010f22	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010f24	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010f26	20 d6 04	jsr $0104d6			jsr 	StringMakeConcrete 			; make the string concrete.
.010f29	7a		ply				ply 								; restore the string.
.010f2a	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010f2d	80 cb		bra $010efa			bra		_FCNextPass
.010f2f					_FCExit:
.010f2f	60		rts				rts
.010f30					COLLECTScanVariable:
.010f30	da		phx				phx 								; save XY
.010f31	5a		phy				phy
.010f32					_CSVLoop:
.010f32	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010f35	f0 0a		beq $010f41			beq 	_CSVExit
.010f37	a8		tay				tay 								; put new address into Y
.010f38	18		clc				clc 								; which is four on.
.010f39	69 04 00	adc #$0004			adc 	#4
.010f3c	20 65 0f	jsr $010f65			jsr 	COLLECTCheck
.010f3f	80 f1		bra $010f32			bra 	_CSVLoop
.010f41					_CSVExit:
.010f41	7a		ply				ply
.010f42	fa		plx				plx
.010f43	60		rts				rts
.010f44					COLLECTScanArray:
.010f44	da		phx				phx 								; save XY
.010f45	5a		phy				phy
.010f46					_CSALoop:
.010f46	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010f49	f0 17		beq $010f62			beq 	_CSAExit
.010f4b	a8		tay				tay 								; put new address in Y
.010f4c	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010f4f	aa		tax				tax
.010f50	e8		inx				inx									; +1 as one more data element.
.010f51	98		tya				tya 								; point A to first element, at +6
.010f52	18		clc				clc
.010f53	69 06 00	adc #$0006			adc 	#6
.010f56					_CSADoAllStrings:
.010f56	20 65 0f	jsr $010f65			jsr 	COLLECTCheck 				; collect check the first.
.010f59	1a		inc a				inc 	a 							; advance the pointer.
.010f5a	1a		inc a				inc 	a
.010f5b	1a		inc a				inc 	a
.010f5c	1a		inc a				inc 	a
.010f5d	ca		dex				dex
.010f5e	d0 f6		bne $010f56			bne 	_CSADoAllStrings 			; until all strings are done.
.010f60	80 e4		bra $010f46			bra 	_CSALoop
.010f62					_CSAExit:
.010f62	7a		ply				ply
.010f63	fa		plx				plx
.010f64	60		rts				rts
.010f65					COLLECTCheck:
.010f65	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010f67	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010f69	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010f6b	90 0a		bcc $010f77			bcc 	_COCExit
.010f6d	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010f6f	b0 06		bcs $010f77			bcs 	_COCExit
.010f71	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010f73	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010f75	85 14		sta $14				sta 	DSignCount
.010f77					_COCExit:
.010f77	a5 0a		lda $0a				lda 	DTemp1+2
.010f79	60		rts				rts
.010f7a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010f7b					Function_ASSERT:
.010f7b	20 40 02	jsr $010240			jsr 	EvaluateInteger 			; something that returns an integer.
.010f7e	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010f80	05 08		ora $08				ora 	Dtemp1
.010f82	f0 01		beq $010f85			beq 	_FAssFail
.010f84	60		rts				rts
.010f85					_FAssFail:
.010f85	20 c3 03	jsr $0103c3			jsr 	ErrorHandler 						; call error routine
>010f88	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010f90	61 69 6c 65 64 00
.010f96					Function_CLS:
.010f96	20 c2 0f	jsr $010fc2			jsr 	HWClearScreen
.010f99	60		rts				rts
.010f9a					Function_REM:
.010f9a	ea		nop				nop
.010f9b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.010f9d	f0 0b		beq $010faa			beq 	_FRemSyntax 				; if 0, syntax error
.010f9f	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.010fa2	b0 06		bcs $010faa			bcs 	_FRemSyntax
.010fa4	18		clc				clc 								; add to DCodePtr
.010fa5	65 06		adc $06				adc 	DCodePtr
.010fa7	85 06		sta $06				sta 	DCodePtr
.010fa9	60		rts				rts
.010faa					_FRemSyntax:
.010faa	82 51 f4	brl $0103fe			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010fad					SwitchBasicInstance:
.010fad	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010faf	20 c2 0f	jsr $010fc2			jsr 	HWClearScreen 						; clear screen
.010fb2	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010fb5	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010fb7	86 02		stx $02				stx		DBaseAddress
.010fb9	84 04		sty $04				sty 	DHighAddress
.010fbb	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010fbc	48		pha				pha 										; then copy it into B.
.010fbd	ab		plb				plb
.010fbe	ab		plb				plb
.010fbf	4c c0 0d	jmp $010dc0			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.010fc2					HWClearScreen:
.010fc2	48		pha				pha
.010fc3	da		phx				phx
.010fc4	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.010fc7	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010fca	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010fce	ca		dex				dex
.010fcf	10 f6		bpl $010fc7			bpl 	_CS0
.010fd1	64 28		stz $28				stz 	DCursor
.010fd3	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010fd6	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010fda	fa		plx				plx
.010fdb	68		pla				pla
.010fdc	60		rts				rts
.010fdd					HWPrintChar:
.010fdd	48		pha				pha
.010fde	da		phx				phx
.010fdf	a6 28		ldx $28				ldx 	DCursor
.010fe1	e2 20		sep #$20			sep 	#$20
.010fe3	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010fe7	c2 20		rep #$20			rep 	#$20
.010fe9	e8		inx				inx
.010fea	8a		txa				txa
.010feb	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.010fee	85 28		sta $28				sta 	DCursor
.010ff0	aa		tax				tax
.010ff1	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010ff4	e2 20		sep #$20			sep 	#$20
.010ff6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010ffa	c2 20		rep #$20			rep 	#$20
.010ffc	fa		plx				plx
.010ffd	68		pla				pla
.010ffe	60		rts				rts
.010fff					HWNewLine:
.010fff	48		pha				pha
.011000	da		phx				phx
.011001	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011004					HWMoveCursor:
.011004	a9 20 00	lda #$0020			lda 	#32
.011007	20 dd 0f	jsr $010fdd			jsr 	HWPrintChar
.01100a	8a		txa				txa
.01100b	25 28		and $28				and 	DCursor
.01100d	d0 f5		bne $011004			bne 	HWMoveCursor
.01100f	fa		plx				plx
.011010	68		pla				pla
.011011	60		rts				rts
.011012	48		pha		HWTab:	pha
.011013	da		phx				phx
.011014	a2 07 00	ldx #$0007			ldx 	#7
.011017	80 eb		bra $011004			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	06 42 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 14 00 18 c0 06 22
>024108	00 40 00 00 08 00 32 00 2d 3c 00 00 16 00 64 00
>024118	2f 3c 1a 32 18 c0 01 20 01 40 1b 32 06 22 00 40
>024128	00 00 16 00 6e 00 27 3e 18 c0 17 32 08 00 04 45
>024138	76 65 6e 00 17 32 00 00 0e 00 70 00 2f 3c 18 c0
>024148	05 22 05 40 00 00 0e 00 76 00 27 3e 06 00 02 3e
>024158	35 00 00 00 08 00 77 00 2c 3e 00 00 0e 00 78 00
>024168	27 3e 06 00 03 3c 3d 35 00 00 08 00 81 00 33 3a
>024178	00 00 08 00 82 00 2c 3e 00 00 14 00 86 00 27 3e
>024188	18 c0 17 32 06 00 03 6f 64 64 17 32 00 00 0c 00
>024198	87 00 19 c0 06 22 18 c0 00 00 30 00 88 00 2d 3c
>0241a8	19 32 27 3e 19 c0 18 32 04 00 01 20 18 32 19 32
>0241b8	19 c0 06 22 19 c0 0b 24 01 40 19 32 31 3a 19 c0
>0241c8	06 22 00 40 19 32 27 3e 00 00 08 00 8c 00 33 3a
>0241d8	00 00 10 00 96 00 18 c0 06 22 18 c0 0a 24 01 40
>0241e8	00 00 0e 00 a0 00 31 3a 18 c0 05 22 0a 40 00 00
>0241f8	08 00 b4 00 22 3e 00 00 00 00 ee ee ee ee 00 00
>024208	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2014 times (32224 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
