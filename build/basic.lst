
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 12 16:32:12 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 8e 0d 01	jmp $010d8e			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	ce 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	a1 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	b1 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	c1 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	05 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	6c 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	d1 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	4e 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	30 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	eb 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	eb 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	6c 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	78 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	f5 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	6c 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	7d 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	8f 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	06 08					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	e6 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	c2 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	ac 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	3d 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	92 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	ce 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	ce 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	ce 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	ce 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	ce 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	ce 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	4e 0a					.word Function_Let             & $FFFF ; token $3e1d "let"
>01003c	6f 0d					.word Function_ASSERT          & $FFFF ; token $3e1e "assert"
>01003e	bc 0b					.word Function_END             & $FFFF ; token $3e1f "end"
>010040	be 0b					.word Function_RUN             & $FFFF ; token $3e20 "run"
>010042	16 0c					.word Function_CLEAR           & $FFFF ; token $3e21 "clear"
>010044	6d 0c					.word Function_Dim             & $FFFF ; token $3e22 "dim"
>010046	e1 0c					.word Function_COLLECT         & $FFFF ; token $3e23 "collect"
>010048	8a 0d					.word Function_CLS             & $FFFF ; token $3e24 "cls"
>01004a	c3 0a					.word Function_PRINT           & $FFFF ; token $3e25 "print"
>01004c	c3 0a					.word Function_PRINTALT        & $FFFF ; token $3e26 "?"
>01004e	0f 0b					.word Function_GOTO            & $FFFF ; token $3e27 "goto"
>010050	6e 0b					.word Function_GOSUB           & $FFFF ; token $3e28 "gosub"
>010052	8a 0b					.word Function_RETURN          & $FFFF ; token $3e29 "return"
>010054	ce 03					.word IllegalToken             & $FFFF ; token $3e2a "on"
>010056	ce 03					.word IllegalToken             & $FFFF ; token $3c2b "while"
>010058	ce 03					.word IllegalToken             & $FFFF ; token $3a2c "wend"
.01005a					TokenText:
>01005a	02 26					 .text $02,"&"        ; token $2001
>01005c	02 7c					 .text $02,"|"        ; token $2002
>01005e	02 5e					 .text $02,"^"        ; token $2003
>010060	12 3c					 .text $12,"<"        ; token $2204
>010062	12 3e					 .text $12,">"        ; token $2205
>010064	12 3d					 .text $12,"="        ; token $2206
>010066	13 3c 3d				 .text $13,"<="       ; token $2207
>010069	13 3e 3d				 .text $13,">="       ; token $2208
>01006c	13 3c 3e				 .text $13,"<>"       ; token $2209
>01006f	22 2b					 .text $22,"+"        ; token $240a
>010071	22 2d					 .text $22,"-"        ; token $240b
>010073	32 2a					 .text $32,"*"        ; token $260c
>010075	32 2f					 .text $32,"/"        ; token $260d
>010077	32 25					 .text $32,"%"        ; token $260e
>010079	33 3e 3e				 .text $33,">>"       ; token $260f
>01007c	33 3c 3c				 .text $33,"<<"       ; token $2610
>01007f	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010085	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01008a	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01008f	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010094	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010099	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>01009f	92 2c					 .text $92,","        ; token $3217
>0100a1	92 3b					 .text $92,";"        ; token $3218
>0100a3	92 3a					 .text $92,":"        ; token $3219
>0100a5	92 28					 .text $92,"("        ; token $321a
>0100a7	92 29					 .text $92,")"        ; token $321b
>0100a9	92 27					 .text $92,"'"        ; token $321c
>0100ab	f4 6c 65 74				 .text $f4,"let"      ; token $3e1d
>0100af	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1e
>0100b6	f4 65 6e 64				 .text $f4,"end"      ; token $3e1f
>0100ba	f4 72 75 6e				 .text $f4,"run"      ; token $3e20
>0100be	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e21
>0100c4	f4 64 69 6d				 .text $f4,"dim"      ; token $3e22
>0100c8	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e23
>0100d0	f4 63 6c 73				 .text $f4,"cls"      ; token $3e24
>0100d4	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e25
>0100da	f2 3f					 .text $f2,"?"        ; token $3e26
>0100dc	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e27
>0100e1	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e28
>0100e7	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e29
>0100ee	f3 6f 6e				 .text $f3,"on"       ; token $3e2a
>0100f1	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c2b
>0100f7	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a2c
>0100fc	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					letTokenID                       = $3e1d
=$3e1e					assertTokenID                    = $3e1e
=$3e1f					endTokenID                       = $3e1f
=$3e20					runTokenID                       = $3e20
=$3e21					clearTokenID                     = $3e21
=$3e22					dimTokenID                       = $3e22
=$3e23					collectTokenID                   = $3e23
=$3e24					clsTokenID                       = $3e24
=$3e25					printTokenID                     = $3e25
=$3e26					questionTokenID                  = $3e26
=$3e27					gotoTokenID                      = $3e27
=$3e28					gosubTokenID                     = $3e28
=$3e29					returnTokenID                    = $3e29
=$3e2a					onTokenID                        = $3e2a
=$3c2b					whileTokenID                     = $3c2b
=$3a2c					wendTokenID                      = $3a2c

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100fd					Evaluate:
.0100fd	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010100	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010103					EvaluateLevel:
.010103	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010106	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010108	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01010a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01010d	b0 79		bcs $010188			bcs 	_ELVariable
.01010f	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010112	b0 16		bcs $01012a			bcs 	_ELConstant
.010114	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010117	90 7f		bcc $010198			bcc 	_ELStringConstant
.010119	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01011c	90 03		bcc $010121			bcc 	_ELConstantShift
.01011e	82 94 00	brl $0101b5			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010121					_ELConstantShift:
.010121	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010124	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010126	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010128	e6 06		inc $06				inc 	DCodePtr
.01012a					_ELConstant:
.01012a	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01012c	38		sec				sec  								; shift it in the range 0-32767
.01012d	e9 00 40	sbc #$4000			sbc 	#$4000
.010130	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010131	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010133	6a		ror a				ror 	a 							; rotate that into the constant value
.010134	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010136	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010138	95 10		sta $10,x			sta 	EXSValueH+0,x
.01013a	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01013c	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01013e	e6 06		inc $06				inc 	DCodePtr
.010140					_ELGotAtom:
.010140	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010142	a8		tay				tay 								; save in Y
.010143	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010146	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010149	d0 35		bne $010180			bne 	_ELExit
.01014b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01014d	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010150	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010152	98		tya				tya 								; get the keyword token back
.010153	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010156	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.010158	90 26		bcc $010180			bcc 	_ELExit 					; precedence too low, then exit.
.01015a	5a		phy				phy 								; save the binary operator on the stack
.01015b	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01015d	e6 06		inc $06				inc 	DCodePtr
.01015f	18		clc				clc 								; try the next level up
.010160	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010163	e8		inx				inx 								; calculate the RHS at the next stack level.
.010164	e8		inx				inx
.010165	20 03 01	jsr $010103			jsr 	EvaluateLevel
.010168	ca		dex				dex
.010169	ca		dex				dex
.01016a	7a		ply				ply 								; get operator token back into Y
.01016b					_ELExecuteY:
.01016b	98		tya				tya
.01016c	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01016f	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010170	9b		txy				txy 								; save X in Y
.010171	aa		tax				tax 								; double keyword ID in X
.010172	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010176	bb		tyx				tyx 								; restore X.
.010177	8f 7c 01 01	sta $01017c			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01017b					_ELCallRoutine:
.01017b	20 7b 01	jsr $01017b			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01017e	80 c0		bra $010140			bra 	_ELGotAtom 					; go round operator level again.
.010180	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010182	0a		asl a				asl 	a
.010183	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010185	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010187	60		rts				rts
.010188					_ELVariable:
.010188	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01018a	20 49 02	jsr $010249			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01018d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01018f	94 10		sty $10,x			sty 	EXSValueH+0,x
.010191	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010193	80 ab		bra $010140			bra 	_ELGotAtom
.010195					_ELSyntax
.010195	82 47 02	brl $0103df			brl 	SyntaxError
.010198					_ELStringConstant:
.010198	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01019b	f0 f8		beq $010195			beq 	_ELSyntax
.01019d	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01019f	1a		inc a				inc 	a
.0101a0	1a		inc a				inc 	a
.0101a1	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101a3	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101a7	18		clc				clc 								; add to string constant.
.0101a8	65 06		adc $06				adc 	DCodePtr
.0101aa	85 06		sta $06				sta 	DCodePtr
.0101ac	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101ae	09 00 80	ora #$8000			ora 	#$8000
.0101b1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101b3	80 8b		bra $010140			bra 	_ELGotAtom
.0101b5					_ELUnaryKeyword:
.0101b5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101b7	a8		tay				tay 								; put the token in Y.
.0101b8	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101ba	e6 06		inc $06				inc 	DCodePtr
.0101bc	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101bf	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101c2	f0 a7		beq $01016b			beq 	_ELExecuteY					; go back and execute it
.0101c4	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101c7	d0 11		bne $0101da			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101c9	20 00 02	jsr $010200			jsr 	EvaluateNext 				; evaluate the expression
.0101cc	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101cf					_ELCopy:
.0101cf	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101d1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101d3	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101d5	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101d7	82 66 ff	brl $010140			brl 	_ELGotAtom 					; and continue.
.0101da					_ELUnaryOperator:
.0101da	5a		phy				phy 								; save the operator on the stack.
.0101db	e8		inx				inx 								; this is like evaluate next
.0101dc	e8		inx				inx
.0101dd	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101e0	20 03 01	jsr $010103			jsr 	EvaluateLevel
.0101e3	ca		dex				dex 								; unwind the stack.
.0101e4	ca		dex				dex
.0101e5	68		pla				pla 								; restore the unary operator.
.0101e6	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101e9	f0 03		beq $0101ee			beq 	_ELMinus
.0101eb	4c df 03	jmp $0103df			jmp 	SyntaxError
.0101ee					_ELMinus:
.0101ee	38		sec				sec 								; do the negation calculation.
.0101ef	a9 00 00	lda #$0000			lda 	#0
.0101f2	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101f4	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101f6	a9 00 00	lda #$0000			lda 	#0
.0101f9	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101fb	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101fd	82 40 ff	brl $010140			brl 	_ELGotAtom					; and continue.
.010200					EvaluateNext:
.010200	e8		inx				inx
.010201	e8		inx				inx
.010202	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010205	20 03 01	jsr $010103			jsr 	EvaluateLevel
.010208	ca		dex				dex
.010209	ca		dex				dex
.01020a	60		rts				rts
.01020b					EvaluateInteger:
.01020b	20 fd 00	jsr $0100fd			jsr 	Evaluate
.01020e	b0 01		bcs $010211			bcs 	EIType
.010210	60		rts				rts
.010211					EIType:
.010211	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010214	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01021c	78 70 65 63 74 65 64 00
.010224					EvaluateNextInteger:
.010224	20 00 02	jsr $010200			jsr 	EvaluateNext
.010227	b0 e8		bcs $010211			bcs 	EIType
.010229	60		rts				rts
.01022a					EvaluateString:
.01022a	20 fd 00	jsr $0100fd			jsr 	Evaluate
.01022d	90 01		bcc $010230			bcc 	ESType
.01022f	60		rts				rts
.010230					ESType:
.010230	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010233	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01023b	78 70 65 63 74 65 64 00
.010243					EvaluateNextString:
.010243	20 00 02	jsr $010200			jsr 	EvaluateNext
.010246	90 e8		bcc $010230			bcc 	ESType
.010248	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010249					VariableAccessExpression:
.010249	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01024b	48		pha				pha
.01024c	20 8a 02	jsr $01028a			jsr 	VariableFind 				; try to find the variables
.01024f	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010251	90 23		bcc $010276			bcc 	_VANError
.010253	68		pla				pla 								; get and save that first token
.010254	48		pha				pha
.010255	a8		tay				tay 								; put first token in Y.
.010256	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010259	f0 07		beq $010262			beq 	_VANNotArray
.01025b	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.01025d	20 01 03	jsr $010301			jsr 	VariableSubscript			; index calculation
.010260	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010262					_VANNotArray:
.010262	68		pla				pla 								; get the token back.
.010263	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010266	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010269	38		sec				sec 								; set up return string.
.01026a	f0 06		beq $010272			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.01026c	18		clc				clc 								; returning a number, read high data word
.01026d	a0 02 00	ldy #$0002			ldy 	#2
.010270	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010272					_VANLoadLower:
.010272	a8		tay				tay 								; put A into Y (this is the high byte)
.010273	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010275	60		rts				rts
.010276					_VANError:
.010276	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010279	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010281	20 75 6e 6b 6e 6f 77 6e 00
.01028a					VariableFind:
.01028a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01028c	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01028f	90 5c		bcc $0102ed			bcc 	_VFError
.010291	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010294	b0 11		bcs $0102a7			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010296	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010299	3a		dec a				dec 	a 							; now 0-25
.01029a	0a		asl a				asl 	a 							; x 4 and clear carry
.01029b	0a		asl a				asl 	a
.01029c	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01029f	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102a3	e6 06		inc $06				inc 	DCodePtr
.0102a5	38		sec				sec 								; return with carry set.
.0102a6	60		rts				rts
.0102a7					_VFSlowVariable:
.0102a7	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102a9	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102ac	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102ad	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102ae	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102b1	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102b3	85 08		sta $08				sta 	DTemp1
.0102b5	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102b7	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102ba	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102bb	65 08		adc $08				adc 	DTemp1
.0102bd	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102bf	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102c1					_VFNext:
.0102c1	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102c3	f0 26		beq $0102eb			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102c5	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102c7	a8		tay				tay 								; read the address of the name at $0002,y
.0102c8	b9 02 00	lda $0002,y			lda 	$0002,y
.0102cb	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102cd	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102d0					_VFCompare:
.0102d0	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102d2	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102d4	d0 eb		bne $0102c1			bne 	_VFNext 					; if not, go to the next one.
.0102d6	c8		iny				iny 								; advance token pointer
.0102d7	c8		iny				iny
.0102d8	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102db	d0 f3		bne $0102d0			bne 	_VFCompare
.0102dd	98		tya				tya 								; this is the length of the word.
.0102de	18		clc				clc 								; so we add it to the code pointer
.0102df	65 06		adc $06				adc 	DCodePtr
.0102e1	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102e3	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102e5	18		clc				clc 								; four on is the actual data
.0102e6	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102e9	38		sec				sec 								; return with CS indicating success
.0102ea	60		rts				rts
.0102eb					_VFFail:
.0102eb	18		clc				clc
.0102ec	60		rts				rts
.0102ed					_VFError:
.0102ed	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>0102f0	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102f8	76 61 72 69 61 62 6c 65 00
.010301					VariableSubscript:
.010301	5a		phy				phy 								; save token on stack
.010302	48		pha				pha		 							; save variable address on stack.
.010303	20 24 02	jsr $010224			jsr		EvaluateNextInteger 		; get the subscript
.010306	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; skip right bracket.
.010309	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01030c	d0 1d		bne $01032b			bne 	_VANSubscript
.01030e	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010310	f0 02		beq $010314			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010312	b0 17		bcs $01032b			bcs 	_VANSubscript
.010314					_VANSubOkay:
.010314	0a		asl a				asl 	a 							; double lsword
.010315	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.010317	68		pla				pla 								; restore DVariablePtr
.010318	85 1e		sta $1e				sta 	DVariablePtr
.01031a	68		pla				pla 								; get and save that first token
.01031b	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.01031e	d0 02		bne $010322			bne 	_VANNotString  				; if not, i.e. it is an integeer
.010320	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.010322					_VANNotString
.010322	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.010324	18		clc				clc 								; add 2 to get it past the high subscript
.010325	69 02 00	adc #$0002			adc 	#2
.010328	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01032a	60		rts				rts
.01032b					_VANSubscript:
.01032b	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>01032e	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010336	79 20 53 75 62 73 63 72 69 70 74 00
.010342					VariableCreate:
.010342	48		pha				pha 								; save count.
.010343	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010346	29 00 20	and #$2000			and 	#IDTypeMask
.010349	f0 06		beq $010351			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01034b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01034e	18		clc				clc
.01034f	65 02		adc $02				adc 	DBaseAddress
.010351					_VCIsInteger:
.010351	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010353	68		pla				pla 								; restore count
.010354	48		pha				pha
.010355	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010356	0a		asl a				asl 	a 							; 2 x # items.
.010357					_VCNotSingle:
.010357	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010359	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01035c	48		pha				pha 								; save on stack
.01035d	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010360	d0 02		bne $010364			bne 	_VCString
.010362	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010364					_VCString:
.010364	68		pla				pla 								; restore first token.
.010365	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010368	f0 04		beq $01036e			beq 	_VCNotArray
.01036a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01036c	e6 08		inc $08				inc 	DTemp1
.01036e					_VCNotArray:
.01036e	5a		phy				phy 								; save address of token on stack.
.01036f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010372	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010374	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010376	18		clc				clc 								; add 4 for link and name.
.010377	69 04 00	adc #$0004			adc 	#4
.01037a	65 08		adc $08				adc 	DTemp1 						; add memory required
.01037c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01037e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010380					_VCErase:
.010380	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010382	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010385	c8		iny				iny
.010386	c8		iny				iny
.010387	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010389	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.01038b	d0 f3		bne $010380			bne 	_VCErase
.01038d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01038f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010391	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010394	68		pla				pla 								; restore the token address
.010395	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010398	68		pla				pla 								; restore count and store.
.010399	99 04 00	sta $0004,y			sta 	$0004,y
.01039c					_VCNotArray2:
.01039c	98		tya				tya 								; update the head link
.01039d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01039f	18		clc				clc 								; advance pointer to the data bit.
.0103a0	69 04 00	adc #$0004			adc 	#4
.0103a3	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.0103a4					ErrorHandler:
.0103a4	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0103a6	fa		plx				plx 								; address of error message -1
.0103a7	e8		inx				inx 								; error message.
.0103a8	20 4b 04	jsr $01044b			jsr 	PrintROMMessage 			; print message in ROM
.0103ab	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.0103ad	f0 15		beq $0103c4			beq 	_EHEndMessage
.0103af	a2 c9 03	ldx #$03c9			ldx 	#_EHAt & $FFFF 				; print " at "
.0103b2	20 4b 04	jsr $01044b			jsr 	PrintROMMessage
.0103b5	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103b7	a0 00 00	ldy #$0000			ldy 	#0
.0103ba	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103bd	20 ad 09	jsr $0109ad			jsr 	ConvertToString 			; convert and print it.
.0103c0	a8		tay				tay
.0103c1	20 5f 04	jsr $01045f			jsr 	PrintBASICString
.0103c4					_EHEndMessage:
.0103c4	20 e0 0d	jsr $010de0			jsr 	HWNewLine
.0103c7	80 fe		bra $0103c7	_EH1:	bra 	_EH1
>0103c9	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103ce					IllegalToken:
.0103ce	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>0103d1	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103d9	54 6f 6b 65 6e 00
.0103df					SyntaxError:
.0103df	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>0103e2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103ea	72 72 6f 72 00
.0103ef					ExpectToken:
.0103ef	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103f1	d0 05		bne $0103f8			bne 	_CTKError					; error if not
.0103f3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103f5	e6 06		inc $06				inc 	DCodePtr
.0103f7	60		rts				rts
.0103f8					_CTKError:
.0103f8	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>0103fb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010403	74 6f 6b 65 6e 00
.010409					ExpectRightBracket:
.010409	48		pha				pha
.01040a	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.01040d	20 ef 03	jsr $0103ef			jsr 	ExpectToken
.010410	68		pla				pla
.010411	60		rts				rts
.010412					ExpectComma:
.010412	48		pha				pha
.010413	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010416	20 ef 03	jsr $0103ef			jsr 	ExpectToken
.010419	68		pla				pla
.01041a	60		rts				rts
.01041b					CheckBothNumeric:
.01041b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01041d	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01041f	30 01		bmi $010422			bmi 	_CBNFail 					; need to both be zero in bit 15
.010421	60		rts				rts
.010422					_CBNFail:
.010422	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010425	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01042d	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.01043b					ResetTypeInteger:
.01043b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01043d	29 ff 7f	and #$7fff			and 	#$7FFF
.010440	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010442	60		rts				rts
.010443					ResetTypeString:
.010443	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010445	09 00 80	ora #$8000			ora 	#$8000
.010448	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01044a	60		rts				rts
.01044b					PrintROMMessage:
.01044b	48		pha				pha
.01044c	da		phx				phx
.01044d					_PRMLoop:
.01044d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010451	29 ff 00	and #$00ff			and 	#$00FF
.010454	f0 06		beq $01045c			beq 	_PRMExit
.010456	20 be 0d	jsr $010dbe			jsr 	HWPrintChar
.010459	e8		inx				inx
.01045a	80 f1		bra $01044d			bra 	_PRMLoop
.01045c					_PRMExit:
.01045c	fa		plx				plx
.01045d	68		pla				pla
.01045e	60		rts				rts
.01045f					PrintBASICString:
.01045f	48		pha				pha
.010460	da		phx				phx
.010461	5a		phy				phy
.010462	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010465	29 ff 00	and #$00ff			and 	#$00FF
.010468	f0 0b		beq $010475			beq 	_PBSExit 					; null string
.01046a	aa		tax				tax
.01046b					_PBSLoop:
.01046b	c8		iny				iny
.01046c	b9 00 00	lda $0000,y			lda 	$0000,y
.01046f	20 be 0d	jsr $010dbe			jsr 	HWPrintChar
.010472	ca		dex				dex
.010473	d0 f6		bne $01046b			bne 	_PBSLoop
.010475					_PBSExit:
.010475	7a		ply				ply
.010476	fa		plx				plx
.010477	68		pla				pla
.010478	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.010479					StringTempAllocate:
.010479	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01047c	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01047f	18		clc				clc 								; this adds one, for the length.
.010480	65 16		adc $16				adc 	DTempStringPointer
.010482	85 16		sta $16				sta 	DTempStringPointer
.010484	48		pha				pha
.010485	a9 00 00	lda #$0000			lda 	#$0000
.010488	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.01048a	92 16		sta ($16)			sta		(DTempStringPointer)
.01048c	c2 20		rep #$20			rep 	#$20
.01048e	68		pla				pla
.01048f	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010491	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010493	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010495	60		rts				rts
.010496					StringCreateCopy:
.010496	a8		tay				tay 								; put pointer to string in Y
.010497	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01049a	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01049d	f0 17		beq $0104b6			beq 	_SCCExit 					; do nothing if length zero.
.01049f	da		phx				phx 								; save X and put the character count in X
.0104a0	aa		tax				tax
.0104a1					_SCCCopy:
.0104a1	c8		iny				iny 								; advance and read (first time skips length)
.0104a2	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0104a4	b9 00 00	lda $0000,y			lda 	$0000,y
.0104a7	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.0104a9	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.0104ab	1a		inc a				inc 	a
.0104ac	92 18		sta ($18)			sta 	(DStartTempString)
.0104ae	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.0104b0	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0104b2	ca		dex				dex 								; do X times
.0104b3	d0 ec		bne $0104a1			bne 	_SCCCopy
.0104b5	fa		plx				plx
.0104b6					_SCCExit:
.0104b6	60		rts				rts
.0104b7					StringMakeConcrete:
.0104b7	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104ba	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104bc	90 0f		bcc $0104cd			bcc 	_SMCExit
.0104be	85 08		sta $08				sta 	DTemp1 						; source
.0104c0	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104c2	29 ff 00	and #$00ff			and 	#$00FF
.0104c5	d0 07		bne $0104ce			bne 	_SMCNonZero 				; if not "" skip.
.0104c7	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104ca	18		clc				clc
.0104cb	65 02		adc $02				adc 	DBaseAddress
.0104cd					_SMCExit:
.0104cd	60		rts				rts
.0104ce					_SMCNonZero:
.0104ce	48		pha				pha 								; save on stack.
.0104cf	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104d2	18		clc				clc
.0104d3	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104d6	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104d8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104da	85 0c		sta $0c				sta 	DTemp2 						; target
.0104dc	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104dd	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104df					_SMCLoop:
.0104df	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104e1	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104e3	88		dey				dey
.0104e4	10 f9		bpl $0104df			bpl 	_SMCLoop
.0104e6	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104e8	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104ea	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.0104eb					Binary_Add:
.0104eb	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104ed	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104ef	30 12		bmi $010503		bmi 	_BATypeError
.0104f1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104f3	30 3f		bmi $010534		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104f5	18		clc			clc
.0104f6	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104f8	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104fa	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104fc	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104fe	75 12		adc $12,x		adc 	EXSValueH+2,x
.010500	95 10		sta $10,x		sta 	EXSValueH+0,x
.010502	60		rts			rts
.010503					_BATypeError:
.010503	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010506	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01050e	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01051e	65 73 00
.010521					_BALengthError:
.010521	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010524	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01052c	6f 6f 20 6c 6f 6e 67 00
.010534					_BAConcatenateString:
.010534	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010536	85 08		sta $08			sta 	DTemp1
.010538	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01053a	85 0c		sta $0c			sta 	DTemp2
.01053c	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01053e	18		clc			clc 										; work out the total length
.01053f	b2 08		lda ($08)		lda 	(DTemp1)
.010541	72 0c		adc ($0c)		adc 	(DTemp2)
.010543	b0 14		bcs $010559		bcs 	_BAConcatLengthError 				; string is too long.
.010545	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010547	20 79 04	jsr $010479		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.01054a	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01054c	74 10		stz $10,x		stz 	EXSValueH+0,x
.01054e	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010550	20 96 04	jsr $010496		jsr 	StringCreateCopy
.010553	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010555	20 96 04	jsr $010496		jsr 	StringCreateCopy
.010558	60		rts			rts
.010559					_BAConcatLengthError:
.010559	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>01055c	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010564	6f 6f 20 6c 6f 6e 67 00
.01056c					Binary_Subtract:
.01056c	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.01056f	38		sec			sec
.010570	b5 00		lda $00,x		lda		EXSValueL+0,x
.010572	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010574	95 00		sta $00,x		sta 	EXSValueL+0,x
.010576	b5 10		lda $10,x		lda		EXSValueH+0,x
.010578	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01057a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01057c	60		rts			rts
.01057d					Binary_ShiftRight:
.01057d	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.010580	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010582	29 3f 00	and #$003f		and 	#63
.010585	f0 07		beq $01058e		beq		_Binary_SRExit
.010587					_Binary_SRLoop:
.010587	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010589	76 00		ror $00,x		ror 	EXSValueL+0,x
.01058b	3a		dec a			dec 	a
.01058c	d0 f9		bne $010587		bne 	_Binary_SRLoop
.01058e					_Binary_SRExit:
.01058e	60		rts			rts
.01058f					Binary_ShiftLeft:
.01058f	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.010592	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010594	29 3f 00	and #$003f		and 	#63
.010597	f0 07		beq $0105a0		beq		_Binary_SLExit
.010599					_Binary_SLLoop:
.010599	16 00		asl $00,x		asl 	EXSValueL+0,x
.01059b	36 10		rol $10,x		rol 	EXSValueH+0,x
.01059d	3a		dec a			dec 	a
.01059e	d0 f9		bne $010599		bne 	_Binary_SLLoop
.0105a0					_Binary_SLExit:
.0105a0	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.0105a1					Binary_And:
.0105a1	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.0105a4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a6	35 02		and $02,x		and 	EXSValueL+2,x
.0105a8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105aa	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105ac	35 12		and $12,x		and 	EXSValueH+2,x
.0105ae	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105b0	60		rts			rts
.0105b1					Binary_Or:
.0105b1	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.0105b4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105b6	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105b8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105ba	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105bc	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105be	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105c0	60		rts			rts
.0105c1					Binary_Xor:
.0105c1	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.0105c4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105c6	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105c8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105ca	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105cc	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105ce	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105d0	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.0105d1					Binary_Equals:
.0105d1	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105d4	b0 0e		bcs $0105e4		bcs 	_BEString
.0105d6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105d8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105da	d0 4f		bne $01062b		bne 	Compare_Fail
.0105dc	b5 10		lda $10,x		lda 	EXSValueH,x
.0105de	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105e0	d0 49		bne $01062b		bne 	Compare_Fail
.0105e2	80 3f		bra $010623		bra 	Compare_Succeed
.0105e4					_BEString:
.0105e4	09 00 00	ora #$0000		ora 	#$0000
.0105e7	f0 3a		beq $010623		beq 	Compare_Succeed
.0105e9	80 40		bra $01062b		bra 	Compare_Fail
.0105eb					Binary_NotEquals:
.0105eb	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105ee	b0 0e		bcs $0105fe		bcs 	_BNEString
.0105f0	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105f2	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105f4	d0 2d		bne $010623		bne 	Compare_Succeed
.0105f6	b5 10		lda $10,x		lda 	EXSValueH,x
.0105f8	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105fa	d0 27		bne $010623		bne 	Compare_Succeed
.0105fc	80 2d		bra $01062b		bra 	Compare_Fail
.0105fe					_BNEString:
.0105fe	09 00 00	ora #$0000		ora 	#$0000
.010601	d0 20		bne $010623		bne 	Compare_Succeed
.010603	80 26		bra $01062b		bra 	Compare_Fail
.010605					Binary_Less:
.010605	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010608	b0 12		bcs $01061c		bcs 	_BLString
.01060a	38		sec			sec
.01060b	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01060d	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01060f	b5 10		lda $10,x		lda 	EXSValueH,x
.010611	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010613	50 03		bvc $010618		bvc 	*+5
.010615	49 00 80	eor #$8000		eor 	#$8000
.010618	30 09		bmi $010623		bmi 	Compare_Succeed
.01061a	80 0f		bra $01062b		bra 	Compare_Fail
.01061c					_BLString:
.01061c	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01061f	f0 02		beq $010623		beq 	Compare_Succeed
.010621	80 08		bra $01062b		bra 	Compare_Fail
.010623					Compare_Succeed:
.010623	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010626	95 00		sta $00,x		sta 	EXSValueL,x
.010628	95 10		sta $10,x		sta 	EXSValueH,x
.01062a	60		rts			rts
.01062b					Compare_Fail:
.01062b	74 00		stz $00,x		stz 	EXSValueL,x
.01062d	74 10		stz $10,x		stz 	EXSValueH,x
.01062f	60		rts			rts
.010630					Binary_GreaterEqual:
.010630	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010633	b0 12		bcs $010647		bcs 	_BGEString
.010635	38		sec			sec
.010636	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010638	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01063a	b5 10		lda $10,x		lda 	EXSValueH,x
.01063c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01063e	50 03		bvc $010643		bvc 	*+5
.010640	49 00 80	eor #$8000		eor 	#$8000
.010643	10 de		bpl $010623		bpl 	Compare_Succeed
.010645	80 e4		bra $01062b		bra 	Compare_Fail
.010647					_BGEString:
.010647	09 00 00	ora #$0000		ora 	#$0000
.01064a	10 d7		bpl $010623		bpl 	Compare_Succeed
.01064c	80 dd		bra $01062b		bra 	Compare_Fail
.01064e					Binary_LessEqual:
.01064e	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010651	b0 12		bcs $010665		bcs 	_BLEString
.010653	18		clc			clc 									; numeric <= signed
.010654	b5 00		lda $00,x		lda 	EXSValueL,x
.010656	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010658	b5 10		lda $10,x		lda 	EXSValueH,x
.01065a	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01065c	50 03		bvc $010661		bvc 	*+5
.01065e	49 00 80	eor #$8000		eor 	#$8000
.010661	30 c0		bmi $010623		bmi 	Compare_Succeed
.010663	80 c6		bra $01062b		bra 	Compare_Fail
.010665					_BLEString:
.010665	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010668	d0 b9		bne $010623		bne 	Compare_Succeed
.01066a	80 bf		bra $01062b		bra 	Compare_Fail
.01066c					Binary_Greater:
.01066c	20 8a 06	jsr $01068a		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01066f	b0 12		bcs $010683		bcs 	_BGString
.010671	18		clc			clc 									; numeric > signed
.010672	b5 00		lda $00,x		lda 	EXSValueL,x
.010674	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010676	b5 10		lda $10,x		lda 	EXSValueH,x
.010678	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01067a	50 03		bvc $01067f		bvc 	*+5
.01067c	49 00 80	eor #$8000		eor 	#$8000
.01067f	10 a2		bpl $010623		bpl 	Compare_Succeed
.010681	80 a8		bra $01062b		bra 	Compare_Fail
.010683					_BGString:
.010683	c9 01 00	cmp #$0001		cmp 	#$0001
.010686	f0 9b		beq $010623		beq 	Compare_Succeed
.010688	80 a1		bra $01062b		bra 	Compare_Fail
.01068a					CompareTypeCheck:
.01068a	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.01068c	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01068e	30 06		bmi $010696		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010690	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010692	30 1c		bmi $0106b0		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010694	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010695	60		rts			rts
.010696					_CTCFail:
.010696	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010699	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0106a1	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0106b0					_CTCStringCompare:
.0106b0	20 3b 04	jsr $01043b		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0106b3	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0106b5	85 08		sta $08			sta 	DTemp1
.0106b7	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106b9	85 0c		sta $0c			sta 	DTemp2
.0106bb	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106be	a8		tay			tay
.0106bf	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106c1	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106c3	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106c5	90 02		bcc $0106c9		bcc 	_CTCSmallest
.0106c7	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106c9					_CTCSmallest:
.0106c9	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106cb					_CTCCompare:
.0106cb	c8		iny			iny 									; look at next character (done first, first char is size)
.0106cc	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106ce	30 16		bmi $0106e6		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106d0	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106d2	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106d4	f0 f5		beq $0106cb		beq 	_CTCCompare 					; if zero, try the next character.
.0106d6	b0 07		bcs $0106df		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106d8					_CTCLess:
.0106d8	c2 20		rep #$20		rep 	#$20
.0106da	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106dd	80 14		bra $0106f3		bra 	_CTCExit
.0106df					_CTCGreater:
.0106df	c2 20		rep #$20		rep 	#$20
.0106e1	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106e4	80 0d		bra $0106f3		bra 	_CTCExit
.0106e6					_CTCEqualSoFar:
.0106e6	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106e8	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106ea	90 ec		bcc $0106d8		bcc 	_CTCLess
.0106ec	d0 f1		bne $0106df		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106ee	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106f0	a9 00 00	lda #$0000		lda 	#$0000
.0106f3					_CTCExit:
.0106f3	38		sec			sec 									; return with CS indicating string comparison.
.0106f4	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.0106f5					Binary_Divide:
.0106f5	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.0106f8	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106fa	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106fc	d0 14		bne $010712		bne 	_BinaryDivide_Ok
.0106fe	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010701	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010709	20 62 79 20 7a 65 72 6f 00
.010712					_BinaryDivide_Ok:
.010712	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010714	64 0a		stz $0a			stz 	DTemp1+2
.010716	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010718	5a		phy			phy 										; save Y (bit counter)
.010719	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01071b	10 07		bpl $010724		bpl 	_BinaryDivide_RightDone
.01071d	e8		inx			inx
.01071e	e8		inx			inx
.01071f	20 5a 07	jsr $01075a		jsr 	Binary_DivNegate
.010722	ca		dex			dex
.010723	ca		dex			dex
.010724					_BinaryDivide_RightDone:
.010724	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010726	10 03		bpl $01072b		bpl 	_BinaryDivide_LeftDone
.010728	20 5a 07	jsr $01075a		jsr 	Binary_DivNegate
.01072b					_BinaryDivide_LeftDone:
.01072b	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01072e					_BinaryDivide_Loop:
.01072e	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010730	36 10		rol $10,x		rol 	EXSValueH+0,x
.010732	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010734	26 0a		rol $0a			rol 	DTemp1+2
.010736	38		sec			sec											; calculate A-M
.010737	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010739	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01073b	85 0c		sta $0c			sta 	DTemp2
.01073d	a5 0a		lda $0a			lda 	DTemp1+2
.01073f	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010741	90 08		bcc $01074b		bcc 	_Binary_NoSubract 					; if A < M skip this
.010743	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010745	a5 0c		lda $0c			lda 	DTemp2
.010747	85 08		sta $08			sta 	DTemp1+0
.010749	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.01074b					_Binary_NoSubract:
.01074b	88		dey			dey 										; do it 32 times.
.01074c	d0 e0		bne $01072e		bne 	_BinaryDivide_Loop
.01074e					_BinaryDivide_Exit:
.01074e	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010750	29 01 00	and #$0001		and 	#1
.010753	f0 03		beq $010758		beq 	_BinaryDivide_Exit2
.010755	20 5a 07	jsr $01075a		jsr 	Binary_DivNegate
.010758					_BinaryDivide_Exit2:
.010758	7a		ply			ply 										; restore Y
.010759	60		rts			rts
.01075a					Binary_DivNegate:
.01075a	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01075c	38		sec			sec 										; negate the value at stack X.
.01075d	a9 00 00	lda #$0000		lda 	#$0000
.010760	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010762	95 00		sta $00,x		sta 	EXSValueL+0,x
.010764	a9 00 00	lda #$0000		lda 	#$0000
.010767	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010769	95 10		sta $10,x		sta 	EXSValueH+0,x
.01076b	60		rts			rts
.01076c					Binary_Modulus:
.01076c	20 f5 06	jsr $0106f5		jsr 	Binary_Divide 						; do the divide
.01076f	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010771	95 00		sta $00,x		sta 	EXSValueL+0,x
.010773	a5 0a		lda $0a			lda 	DTemp1+2
.010775	95 10		sta $10,x		sta 	EXSValueH+0,x
.010777	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010778					Binary_Multiply:
.010778	20 1b 04	jsr $01041b		jsr 	CheckBothNumeric 					; check both values are numeric
.01077b	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01077d	85 08		sta $08			sta 	DTemp1
.01077f	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010781	85 0a		sta $0a			sta		DTemp1+2
.010783	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010785	74 10		stz $10,x		stz 	EXSValueH+0,x
.010787					_BinaryMultiply_Loop:
.010787	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010789	05 0a		ora $0a			ora 	DTemp1+2
.01078b	f0 1e		beq $0107ab		beq 	_BinaryMultiply_Exit
.01078d	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01078f	29 01 00	and #$0001		and 	#1
.010792	f0 0d		beq $0107a1		beq 	_BinaryMultiply_NoAdd
.010794	18		clc			clc 										; add multiplicand to result.
.010795	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010797	75 02		adc $02,x		adc 	EXSValueL+2,x
.010799	95 00		sta $00,x		sta 	EXSValueL+0,x
.01079b	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01079d	75 12		adc $12,x		adc 	EXSValueH+2,x
.01079f	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107a1					_BinaryMultiply_NoAdd:
.0107a1	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0107a3	66 08		ror $08			ror 	DTemp1
.0107a5	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0107a7	36 12		rol $12,x		rol 	EXSValueH+2,x
.0107a9	80 dc		bra $010787		bra 	_BinaryMultiply_Loop 				; go round again.
.0107ab					_BinaryMultiply_Exit:
.0107ab	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.0107ac					Function_Len:
.0107ac	20 3b 04	jsr $01043b			jsr 	ResetTypeInteger 			; returns an integer
.0107af	20 43 02	jsr $010243			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107b2	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; check )
.0107b5	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107b7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107ba	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107bd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107bf	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107c1	60		rts				rts
.0107c2					Function_Abs:
.0107c2	20 3b 04	jsr $01043b			jsr 	ResetTypeInteger 			; returns an integer
.0107c5	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107c8	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; check )
.0107cb	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107cd	30 07		bmi $0107d6			bmi 	_FAbsNegative 				; negate it if negative
.0107cf	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107d1	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107d3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107d5	60		rts				rts
.0107d6					_FAbsNegative:
.0107d6	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107d7	a9 00 00	lda #$0000			lda 	#0
.0107da	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107dc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107de	a9 00 00	lda #$0000			lda 	#0
.0107e1	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107e3	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107e5	60		rts				rts
.0107e6					Function_Sgn:
.0107e6	20 3b 04	jsr $01043b			jsr 	ResetTypeInteger 			; returns integer
.0107e9	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get an integer
.0107ec	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; check )
.0107ef	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107f1	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107f3	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107f5	30 07		bmi $0107fe			bmi 	_FSgnNegative 				; set to -1 if signed
.0107f7	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107f9	f0 02		beq $0107fd			beq 	_FSgnExit
.0107fb	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107fd					_FSgnExit:
.0107fd	60		rts				rts
.0107fe					_FSgnNegative:
.0107fe	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010801	95 00		sta $00,x			sta 	EXSValueL+0,x
.010803	95 10		sta $10,x			sta 	EXSValueH+0,x
.010805	60		rts				rts
.010806					Function_Random:
.010806	20 3b 04	jsr $01043b			jsr 	ResetTypeInteger
.010809	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01080b	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.01080d	d0 0a		bne $010819			bne 	_Rnd_NotZero
.01080f	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010812	85 10		sta $10				sta 	DRandom
.010814	a9 ea 00	lda #$00ea			lda 	#$EA
.010817	85 12		sta $12				sta 	DRandom+2
.010819					_Rnd_NotZero:
.010819	20 24 08	jsr $010824			jsr 	_Rnd_Process 				; call randomiser twice
.01081c	95 10		sta $10,x			sta 	EXSValueH+0,x
.01081e	20 24 08	jsr $010824			jsr 	_Rnd_Process
.010821	95 00		sta $00,x			sta 	EXSValueL+0,x
.010823	60		rts				rts
.010824					_Rnd_Process:
.010824	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010826	26 12		rol $12				rol 	DRandom+2
.010828	90 0e		bcc $010838			bcc 	_Rnd_Exit
.01082a	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01082c	49 54 d4	eor #$d454			eor 	#$D454
.01082f	85 10		sta $10				sta 	DRandom
.010831	a5 12		lda $12				lda 	DRandom+2
.010833	49 d5 55	eor #$55d5			eor 	#$55D5
.010836	85 12		sta $12				sta 	DRandom+2
.010838					_Rnd_Exit:
.010838	a5 10		lda $10				lda 	DRandom
.01083a	45 12		eor $12				eor 	DRandom+2
.01083c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.01083d					Function_VAL:
.01083d	20 3b 04	jsr $01043b			jsr 	ResetTypeInteger 			; returns an integer
.010840	20 43 02	jsr $010243			jsr 	EvaluateNextString 			; get the value you are absoluting
.010843	48		pha				pha 								; put string address on stack.
.010844	20 54 08	jsr $010854			jsr 	VALGetBase 					; process , base (shared with STR$())
.010847	7a		ply				ply 								; get string address back
.010848	da		phx				phx 								; save X on stack
.010849	aa		tax				tax 								; base in X
.01084a	98		tya				tya 								; address in A
.01084b	20 8e 08	jsr $01088e			jsr 	StringToInteger
.01084e	fa		plx				plx 								; restore X
.01084f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010851	94 10		sty $10,x			sty 	EXSValueH+0,x
.010853	60		rts				rts
.010854					VALGetBase:
.010854	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010856	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010859	f0 07		beq $010862			beq 	_VGBAlternate
.01085b	20 09 04	jsr $010409			jsr 	ExpectRightBracket			; expect ), and return 10.
.01085e	a9 0a 00	lda #$000a			lda 	#10
.010861	60		rts				rts
.010862					_VGBAlternate:
.010862	20 12 04	jsr $010412			jsr 	ExpectComma 				; skip comma.
.010865	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get base
.010868	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.01086b	d0 0e		bne $01087b			bne 	_VGBBadBase
.01086d	c9 02 00	cmp #$0002			cmp 	#2
.010870	90 09		bcc $01087b			bcc 	_VGBBadBase
.010872	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.010875	b0 04		bcs $01087b			bcs 	_VGBBadBase
.010877	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; get right bracket and return.
.01087a	60		rts				rts
.01087b					_VGBBadBase:
.01087b	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>01087e	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010886	65 72 20 42 61 73 65 00
.01088e					StringToInteger:
.01088e	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010890	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010892	29 ff 00	and #$00ff			and 	#$00FF
.010895	85 26		sta $26				sta 	DTemp3+2
.010897	f0 6e		beq $010907			beq 	_STIError 					; if length zero it's bad.
.010899	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.01089b	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.01089d	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.01089f	64 0a		stz $0a				stz 	DTemp1+2
.0108a1	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.0108a3	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.0108a6	48		pha				pha 								; push on stack
.0108a7	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.0108aa	d0 06		bne $0108b2			bne 	_STILoop
.0108ac	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.0108ae	c6 26		dec $26				dec 	DTemp3+2					; dec count
.0108b0	f0 55		beq $010907			beq 	_STIError 					; if only - then error.
.0108b2					_STILoop:
.0108b2	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.0108b4	20 26 09	jsr $010926			jsr 	MultiplyTemp1ByA
.0108b7	b2 24		lda ($24)			lda 	(DTemp3)
.0108b9	29 ff 00	and #$00ff			and 	#$00FF
.0108bc	20 17 09	jsr $010917			jsr 	ConvertUpperCase
.0108bf	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108c2	90 43		bcc $010907			bcc 	_STIError
.0108c4	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108c7	90 0e		bcc $0108d7			bcc 	_STIOkay1
.0108c9	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108cc	90 39		bcc $010907			bcc 	_STIError
.0108ce	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108d1	b0 34		bcs $010907			bcs 	_STIError
.0108d3	18		clc				clc 								; shift to correct range.
.0108d4	69 09 00	adc #$0009			adc 	#9
.0108d7					_STIOkay1:
.0108d7	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108da	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108dc	b0 29		bcs $010907			bcs 	_STIError
.0108de	18		clc				clc 								; add A to DTemp1
.0108df	65 08		adc $08				adc 	DTemp1
.0108e1	85 08		sta $08				sta 	DTemp1
.0108e3	90 02		bcc $0108e7			bcc 	_STINoCarry
.0108e5	e6 0a		inc $0a				inc 	DTemp1+2
.0108e7					_STINoCarry:
.0108e7	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108e9	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108eb	d0 c5		bne $0108b2			bne 	_STILoop 					; loop back.
.0108ed	68		pla				pla 								; get optional minus bac
.0108ee	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108f1	d0 0f		bne $010902			bne 	_STINotNegative 			; handle the negative character
.0108f3	38		sec				sec 								; negate DTemp1
.0108f4	a9 00 00	lda #$0000			lda 	#0
.0108f7	e5 08		sbc $08				sbc 	DTemp1
.0108f9	85 08		sta $08				sta 	DTemp1
.0108fb	a9 00 00	lda #$0000			lda 	#0
.0108fe	e5 0a		sbc $0a				sbc 	DTemp1+2
.010900	85 0a		sta $0a				sta 	DTemp1+2
.010902					_STINotNegative:
.010902	a5 08		lda $08				lda 	DTemp1 						; get the result
.010904	a4 0a		ldy $0a				ldy 	DTemp1+2
.010906	60		rts				rts
.010907					_STIError:
.010907	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>01090a	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010912	74 61 6e 74 00
.010917					ConvertUpperCase:
.010917	c9 61 00	cmp #$0061			cmp 	#'a'
.01091a	90 09		bcc $010925			bcc 	_CUCExit
.01091c	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01091f	b0 04		bcs $010925			bcs 	_CUCExit
.010921	38		sec				sec
.010922	e9 20 00	sbc #$0020			sbc 	#32
.010925					_CUCExit:
.010925	60		rts				rts
.010926					MultiplyTemp1ByA:
.010926	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010929	f0 56		beq $010981			beq 	_MT1_16
.01092b	c9 0a 00	cmp #$000a			cmp 	#10
.01092e	f0 33		beq $010963			beq 	_MT1_10
.010930	c9 08 00	cmp #$0008			cmp 	#8
.010933	f0 50		beq $010985			beq 	_MT1_8
.010935	c9 02 00	cmp #$0002			cmp 	#2
.010938	f0 53		beq $01098d			beq 	_MT1_2
.01093a					_MTGeneral:
.01093a	da		phx				phx
.01093b	aa		tax				tax 								; multiplier in X
.01093c	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.01093e	85 0c		sta $0c				sta 	DTemp2
.010940	a5 0a		lda $0a				lda 	DTemp1+2
.010942	85 0e		sta $0e				sta 	DTemp2+2
.010944	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010946	64 0a		stz $0a				stz 	DTemp1+2
.010948					_MTLoop:
.010948	8a		txa				txa 								; shift X right into C
.010949	4a		lsr a				lsr 	a
.01094a	aa		tax				tax
.01094b	90 0d		bcc $01095a			bcc 	_MTNoAdd
.01094d	18		clc				clc
.01094e	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010950	65 0c		adc $0c				adc 	DTemp2
.010952	85 08		sta $08				sta 	DTemp1
.010954	a5 0a		lda $0a				lda 	DTemp1+2
.010956	65 0e		adc $0e				adc 	DTemp2+2
.010958	85 0a		sta $0a				sta 	DTemp1+2
.01095a					_MTNoAdd:
.01095a	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01095c	26 0e		rol $0e				rol 	DTemp2+2
.01095e	8a		txa				txa 								; until multiplier is zero.
.01095f	d0 e7		bne $010948			bne 	_MTLoop
.010961					_MTGExit:
.010961	fa		plx				plx 								; restore X
.010962	60		rts				rts 								; and exit
.010963					_MT1_10:
.010963	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010965	48		pha				pha
.010966	a5 08		lda $08				lda 	DTemp1
.010968	48		pha				pha
.010969	06 08		asl $08				asl 	DTemp1						; x 4
.01096b	26 0a		rol $0a				rol 	DTemp1+2
.01096d	06 08		asl $08				asl 	DTemp1
.01096f	26 0a		rol $0a				rol 	DTemp1+2
.010971	68		pla				pla 								; add saved value, x 5
.010972	18		clc				clc
.010973	65 08		adc $08				adc 	DTemp1
.010975	85 08		sta $08				sta 	DTemp1
.010977	68		pla				pla
.010978	65 0a		adc $0a				adc 	DTemp1+2
.01097a	85 0a		sta $0a				sta 	DTemp1+2
.01097c	06 08		asl $08				asl 	DTemp1
.01097e	26 0a		rol $0a				rol 	DTemp1+2
.010980	60		rts				rts
.010981					_MT1_16:
.010981	06 08		asl $08				asl 	DTemp1
.010983	26 0a		rol $0a				rol 	DTemp1+2
.010985					_MT1_8:
.010985	06 08		asl $08				asl 	DTemp1
.010987	26 0a		rol $0a				rol 	DTemp1+2
.010989					_MT1_4:
.010989	06 08		asl $08				asl 	DTemp1
.01098b	26 0a		rol $0a				rol 	DTemp1+2
.01098d					_MT1_2
.01098d	06 08		asl $08				asl 	DTemp1
.01098f	26 0a		rol $0a				rol 	DTemp1+2
.010991	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010992					Function_Str:
.010992	20 43 04	jsr $010443			jsr 	ResetTypeString 			; returns a string.
.010995	20 24 02	jsr $010224			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010998	48		pha				pha 								; save YA on the stack
.010999	5a		phy				phy
.01099a	20 54 08	jsr $010854			jsr 	VALGetBase 					; process , base (shared with STR$())
.01099d	85 14		sta $14				sta 	DSignCount
.01099f	7a		ply				ply 								; YA is the number
.0109a0	68		pla				pla
.0109a1	da		phx				phx
.0109a2	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0109a4	20 ad 09	jsr $0109ad			jsr 	ConvertToString 			; convert it to a string.
.0109a7	fa		plx				plx 								; restore X
.0109a8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0109aa	74 10		stz $10,x			stz 	EXSValueH+0,x
.0109ac	60		rts				rts
.0109ad					ConvertToString:
.0109ad	da		phx				phx 								; save X
.0109ae	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0109b0	84 26		sty $26				sty 	DTemp3+2
.0109b2	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0109b4	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109b7	20 79 04	jsr $010479			jsr 	StringTempAllocate 			; allocate space for return string.
.0109ba	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109bc	10 15		bpl $0109d3			bpl 	_CTSNotNegative
.0109be	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109c1	20 3b 0a	jsr $010a3b			jsr 	CTSOutputA
.0109c4	38		sec				sec 								; negate DTemp3
.0109c5	a9 00 00	lda #$0000			lda 	#0
.0109c8	e5 24		sbc $24				sbc 	DTemp3
.0109ca	85 24		sta $24				sta 	DTemp3
.0109cc	a9 00 00	lda #$0000			lda 	#0
.0109cf	e5 26		sbc $26				sbc 	DTemp3+2
.0109d1	85 26		sta $26				sta 	DTemp3+2
.0109d3					_CTSNotNegative:
.0109d3	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109d6	48		pha				pha
.0109d7	a9 00 00	lda #$0000			lda 	#0
.0109da	48		pha				pha
.0109db	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109dd	85 08		sta $08				sta 	DTemp1
.0109df	64 0a		stz $0a				stz 	DTemp1+2
.0109e1					_CTSMultiplySubtractor:
.0109e1	38		sec				sec
.0109e2	a5 24		lda $24				lda 	DTemp3
.0109e4	e5 08		sbc $08				sbc 	DTemp1
.0109e6	a5 26		lda $26				lda 	DTemp3+2
.0109e8	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109ea	90 0d		bcc $0109f9			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109ec	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109ee	48		pha				pha
.0109ef	a5 0a		lda $0a				lda 	DTemp1+2
.0109f1	48		pha				pha
.0109f2	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109f4	20 26 09	jsr $010926			jsr 	MultiplyTemp1ByA
.0109f7	80 e8		bra $0109e1			bra 	_CTSMultiplySubtractor
.0109f9					_CTSScaledUp:
.0109f9	7a		ply				ply 								; YA contains the previous divider.
.0109fa	68		pla				pla
.0109fb	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109fe	d0 05		bne $010a05			bne 	_CTSHasDigit
.010a00	c9 01 00	cmp #$0001			cmp 	#1 							;
.010a03	f0 20		beq $010a25			beq 	_CTSExit
.010a05					_CTSHasDigit:
.010a05	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010a07	84 0e		sty $0e				sty 	DTemp2+2
.010a09	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010a0c					_CTSSubLoop:
.010a0c	38		sec				sec 								; subtract subtractor from number
.010a0d	a5 24		lda $24				lda 	DTemp3
.010a0f	e5 0c		sbc $0c				sbc 	DTemp2
.010a11	a8		tay				tay 								; intermediate in Y
.010a12	a5 26		lda $26				lda 	DTemp3+2
.010a14	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a16	90 07		bcc $010a1f			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a18	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a1a	84 24		sty $24				sty 	DTemp3
.010a1c	e8		inx				inx 								; one more subtraction
.010a1d	80 ed		bra $010a0c			bra 	_CTSSubLoop 				; try it again.
.010a1f					_CTSFinishedSubtracting:
.010a1f	8a		txa				txa 								; convert to ASCII.
.010a20	20 2e 0a	jsr $010a2e			jsr 	CTSOutputHexDigit 			; write that out.
.010a23	80 d4		bra $0109f9			bra 	_CTSScaledUp
.010a25					_CTSExit:
.010a25	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a27	20 2e 0a	jsr $010a2e			jsr 	CTSOutputHexDigit
.010a2a	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a2c	fa		plx				plx 								; restore X.
.010a2d	60		rts				rts
.010a2e					CTSOutputHexDigit:
.010a2e	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a31	90 04		bcc $010a37			bcc 	_CTSNotLetter
.010a33	18		clc				clc
.010a34	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a37					_CTSNotLetter:
.010a37	18		clc				clc
.010a38	69 30 00	adc #$0030			adc 	#48
.010a3b					CTSOutputA:
.010a3b	5a		phy				phy 								; save Y, set Y to current pointer
.010a3c	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a3e	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a41	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a43	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a45	1a		inc a				inc 	a
.010a46	92 18		sta ($18)			sta 	(DStartTempString)
.010a48	c2 20		rep #$20			rep 	#$20
.010a4a	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a4c	7a		ply				ply 								; restore Y and exit.
.010a4d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010a4e					Function_Let:
.010a4e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a50	48		pha				pha
.010a51	20 8a 02	jsr $01028a			jsr 	VariableFind 				; find the variable
.010a54	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a56	b0 1c		bcs $010a74			bcs 	_FLetFound 					; skip if found.
.010a58	68		pla				pla 								; get and push the first token again.
.010a59	48		pha				pha
.010a5a	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a5d	d0 51		bne $010ab0			bne 	_FLError					; arrays, so this causes an error.
.010a5f	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a61	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a64	20 42 03	jsr $010342			jsr 	VariableCreate 				; create it.
.010a67	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a69					_FLSkipToken:
.010a69	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a6b	e6 06		inc $06				inc 	DCodePtr
.010a6d	e6 06		inc $06				inc 	DCodePtr
.010a6f	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a72	d0 f5		bne $010a69			bne 	_FLSkipToken
.010a74					_FLetFound:
.010a74	68		pla				pla 								; get and save the first token.
.010a75	48		pha				pha
.010a76	a8		tay				tay 								; put it in Y
.010a77	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a7a	f0 07		beq $010a83			beq 	_FLetNotArray
.010a7c	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a7e	20 01 03	jsr $010301			jsr 	VariableSubscript			; index calculation
.010a81	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a83					_FLetNotArray:
.010a83	7a		ply				ply 								; get the first token into Y
.010a84	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a86	48		pha				pha
.010a87	5a		phy				phy 								; save the first token on the stack.
.010a88	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a8b	20 ef 03	jsr $0103ef			jsr 	ExpectToken
.010a8e	68		pla				pla 								; restore the first token.
.010a8f	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a92	d0 0f		bne $010aa3			bne 	_FLetString 				; skip if string.
.010a94	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; get an integer
.010a97	7a		ply				ply 								; get address in Y
.010a98	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a9a	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a9d	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a9f	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010aa2	60		rts				rts
.010aa3					_FLetString:
.010aa3	20 2a 02	jsr $01022a			jsr 	EvaluateString 				; get a string.
.010aa6	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010aa8	20 b7 04	jsr $0104b7			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010aab	7a		ply				ply 								; get address
.010aac	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010aaf	60		rts				rts
.010ab0					_FLError:
.010ab0	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010ab3	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010abb	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010ac3					Function_PRINTALT:
.010ac3					Function_PRINT:
.010ac3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010ac5	f0 33		beq $010afa			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010ac7	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010aca	f0 2e		beq $010afa			beq 	_FPRExitCR
.010acc	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010acf	f0 23		beq $010af4			beq 	_FPRSkipLoop
.010ad1	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010ad4	f0 1b		beq $010af1			beq 	_FPRNewLine
.010ad6	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010ad9	f0 11		beq $010aec			beq 	_FPRTab
.010adb					_FPRExpression:
.010adb	20 fd 00	jsr $0100fd			jsr 	Evaluate 					; evaluate a string or integer.
.010ade	b0 06		bcs $010ae6			bcs 	_FPRHaveString
.010ae0	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ae3	20 ad 09	jsr $0109ad			jsr 	ConvertToString
.010ae6					_FPRHaveString:
.010ae6	a8		tay				tay 								; print the basic String.
.010ae7	20 5f 04	jsr $01045f			jsr 	PrintBASICString
.010aea	80 d7		bra $010ac3			bra 	Function_Print 				; and go round again.
.010aec					_FPRTab:
.010aec	20 f3 0d	jsr $010df3			jsr 	HWTab
.010aef	80 03		bra $010af4			bra 	_FPRSkipLoop
.010af1					_FPRNewLine:
.010af1	20 e0 0d	jsr $010de0			jsr 	HWNewLine
.010af4					_FPRSkipLoop:
.010af4	e6 06		inc $06				inc 	DCodePtr
.010af6	e6 06		inc $06				inc 	DCodePtr
.010af8	80 c9		bra $010ac3			bra 	Function_Print
.010afa					_FPRExitCR:
.010afa	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010afc	88		dey				dey
.010afd	88		dey				dey
.010afe	b9 00 00	lda $0000,y			lda 	$0000,y
.010b01	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010b04	f0 08		beq $010b0e			beq 	_FPRExit
.010b06	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010b09	f0 03		beq $010b0e			beq 	_FPRExit
.010b0b	20 e0 0d	jsr $010de0			jsr 	HWNewLine 					; print a new line.
.010b0e					_FPRExit:
.010b0e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010b0f					Function_GOTO:
.010b0f	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010b11	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b14	90 2e		bcc $010b44			bcc 	_FGOFail
.010b16	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b19	b0 29		bcs $010b44			bcs 	_FGOFail
.010b1b	38		sec				sec 								; convert to 0-32767
.010b1c	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010b1f	aa		tax				tax
.010b20	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010b23	18		clc				clc
.010b24	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010b26	a8		tay				tay
.010b27					_FGOSearch:
.010b27	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010b2a	f0 2b		beq $010b57			beq 	_FGOUnknown
.010b2c	8a		txa				txa 								; does it match line number.
.010b2d	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010b30	f0 08		beq $010b3a			beq 	_FGOFound 					; yes, then found.
.010b32	98		tya				tya 								; no follow the link
.010b33	18		clc				clc
.010b34	79 00 00	adc $0000,y			adc 	$0000,y
.010b37	a8		tay				tay
.010b38	80 ed		bra $010b27			bra 	_FGOSearch
.010b3a					_FGOFound:
.010b3a	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010b3c	98		tya				tya 								; Y + 4 is the code pointer.
.010b3d	18		clc				clc
.010b3e	69 04 00	adc #$0004			adc 	#4
.010b41	85 06		sta $06				sta 	DCodePtr
.010b43	60		rts				rts									; and continue
.010b44					_FGOFail:
.010b44	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010b47	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010b4f	20 4e 75 6d 62 65 72 00
.010b57					_FGOUnknown:
.010b57	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010b5a	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010b62	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010b6e					Function_GOSUB:
.010b6e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010b70	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010b72	18		clc				clc
.010b73	69 02 00	adc #$0002			adc 	#2
.010b76	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010b78	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010b7a	95 04		sta $04,x			sta 	$04,x
.010b7c	a9 28 3e	lda #$3e28			lda 	#gosubTokenID 				; save gosub token at +6
.010b7f	95 06		sta $06,x			sta 	$06,x
.010b81	8a		txa				txa 								; advance stack by 6.
.010b82	18		clc				clc
.010b83	69 06 00	adc #$0006			adc 	#6
.010b86	85 2a		sta $2a				sta 	DStack
.010b88	80 85		bra $010b0f			bra 	Function_GOTO 				; and do a GOTO.
.010b8a					Function_RETURN:
.010b8a	a6 2a		ldx $2a				ldx 	DStack
.010b8c	b5 00		lda $00,x			lda 	$00,x
.010b8e	c9 28 3e	cmp #$3e28			cmp 	#gosubTokenID 				; check top token.
.010b91	d0 11		bne $010ba4			bne 	_FRetFail
.010b93	8a		txa				txa 								; unpick stack.
.010b94	38		sec				sec
.010b95	e9 06 00	sbc #$0006			sbc 	#6
.010b98	85 2a		sta $2a				sta 	DStack
.010b9a	aa		tax				tax
.010b9b	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010b9d	85 06		sta $06				sta 	DCodePtr
.010b9f	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010ba1	85 22		sta $22				sta 	DLineNumber
.010ba3	60		rts				rts
.010ba4					_FRetFail:
.010ba4	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010ba7	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010baf	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010bbc					Function_END:
.010bbc	02 00		cop #$00			cop 	#0
.010bbe					Function_RUN:
.010bbe	20 16 0c	jsr $010c16			jsr 	Function_CLEAR 				; clear all variables.
.010bc1	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010bc3	18		clc				clc
.010bc4	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010bc7					_FRun_NextLineNumber:
.010bc7	a8		tay				tay 								; put in Y
.010bc8	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010bcb	f0 ef		beq $010bbc			beq 	Function_END 				; if zero, off the end of the program
.010bcd	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010bd0	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010bd2	98		tya				tya 								; get address back
.010bd3	18		clc				clc 								; skip over the link/line number
.010bd4	69 04 00	adc #$0004			adc 	#4
.010bd7	85 06		sta $06				sta 	DCodePtr
.010bd9					_FRun_NextInstruction:
.010bd9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010bdc	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010bde	38		sec				sec
.010bdf	e9 00 01	sbc #$0100			sbc 	#256
.010be2	85 16		sta $16				sta 	DTempStringPointer
.010be4	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010be6	f0 28		beq $010c10			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010be8	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010beb	f0 18		beq $010c05			beq 	_FRun_Colon
.010bed	a8		tay				tay 								; save in Y
.010bee	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010bf1	c9 00 20	cmp #$2000			cmp 	#$2000
.010bf4	d0 15		bne $010c0b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010bf6	98		tya				tya 								; get token back
.010bf7	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010bfa	0a		asl a				asl 	a 							; double it into X
.010bfb	aa		tax				tax
.010bfc	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010bfe	e6 06		inc $06				inc 	DCodePtr
.010c00	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010c03	80 d4		bra $010bd9			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c05					_FRun_Colon:
.010c05	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c07	e6 06		inc $06				inc 	DCodePtr
.010c09	80 ce		bra $010bd9			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c0b					_FRun_TryLET:
.010c0b	20 4e 0a	jsr $010a4e			jsr 	Function_LET 				; try as a LET.
.010c0e	80 c9		bra $010bd9			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010c10					_FRun_EndInstruction:
.010c10	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010c12	1a		inc a				inc 	a 							; go to link for next line
.010c13	1a		inc a				inc 	a
.010c14	80 b1		bra $010bc7			bra 	_FRun_NextLineNumber
.010c16					Function_CLEAR:
.010c16	20 1a 0c	jsr $010c1a			jsr 	ClearVariablesPointersAndStacks
.010c19	60		rts				rts
.010c1a					ClearVariablesPointersAndStacks:
.010c1a	a9 80 00	lda #$0080			lda 	#BASStack
.010c1d	85 2a		sta $2a				sta 	DStack
.010c1f	64 80		stz $80				stz 	BASStack
.010c21	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010c24	a9 00 00	lda #$0000			lda 	#$0000
.010c27	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c29	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010c2b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010c2e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c30	20 57 0c	jsr $010c57			jsr 	FindCodeEnd 				; find where the program ends.
.010c33	a8		tay				tay 								; Y points to it.
.010c34	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010c37	99 02 00	sta $0002,y			sta 	$0002,y
.010c3a	99 04 00	sta $0004,y			sta 	$0004,y
.010c3d	98		tya				tya 								; start of working memory up
.010c3e	18		clc				clc
.010c3f	69 06 00	adc #$0006			adc 	#6
.010c42	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010c45	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c47	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010c4a					_FCLoop:
.010c4a	a9 00 00	lda #$0000			lda 	#$0000
.010c4d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c4f	c8		iny				iny
.010c50	c8		iny				iny
.010c51	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010c54	d0 f4		bne $010c4a			bne 	_FCLoop
.010c56	60		rts				rts
.010c57					FindCodeEnd:
.010c57	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010c5a	18		clc				clc
.010c5b	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010c5d	a8		tay				tay
.010c5e					_FCELoop:
.010c5e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010c61	f0 08		beq $010c6b			beq 	_FCEExit
.010c63	98		tya				tya 								; add offset
.010c64	18		clc				clc
.010c65	79 00 00	adc $0000,y			adc 	$0000,y
.010c68	a8		tay				tay
.010c69	80 f3		bra $010c5e			bra 	_FCELoop
.010c6b					_FCEExit:
.010c6b	98		tya				tya 								; return in A
.010c6c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010c6d					Function_Dim:
.010c6d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010c6f	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010c72	f0 3b		beq $010caf			beq		_FDIMNotArray 				; no, error.
.010c74	20 8a 02	jsr $01028a			jsr 	VariableFind 				; try to find it.
.010c77	b0 41		bcs $010cba			bcs 	_FDIMExists 				; if it does, that's an error.
.010c79	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010c7b	48		pha				pha
.010c7c	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010c7e	48		pha				pha
.010c7f					_FDIMSkip:
.010c7f	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010c81	e6 06		inc $06				inc 	DCodePtr
.010c83	e6 06		inc $06				inc 	DCodePtr
.010c85	29 00 08	and #$0800			and 	#IDContMask
.010c88	d0 f5		bne $010c7f			bne 	_FDIMSkip
.010c8a	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; evaluate the size
.010c8d	20 09 04	jsr $010409			jsr 	ExpectRightBracket 			; check the ) following.
.010c90	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010c93	d0 3b		bne $010cd0			bne 	_FDIMSize
.010c95	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010c98	f0 36		beq $010cd0			beq 	_FDIMSize
.010c9a	7a		ply				ply 								; restore HashTablePtr
.010c9b	84 20		sty $20				sty 	DHashTablePtr
.010c9d	7a		ply				ply 								; so now A is the high index, Y points to the token
.010c9e	20 42 03	jsr $010342			jsr 	VariableCreate 				; create the variable.
.010ca1	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010ca3	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010ca6	d0 06		bne $010cae			bne 	_FDIMExit
.010ca8	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010caa	e6 06		inc $06				inc 	DCodePtr
.010cac	80 bf		bra $010c6d			bra 	Function_DIM 				; and do another
.010cae					_FDIMExit:
.010cae	60		rts				rts
.010caf					_FDIMNotArray:
.010caf	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010cb2	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010cba					_FDIMExists:
.010cba	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010cbd	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010cc5	65 64 69 6d 65 6e 73 69 6f 6e 00
.010cd0					_FDIMSize:
.010cd0	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010cd3	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010cdb	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010ce1					Function_COLLECT:
.010ce1	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010ce3	85 0c		sta $0c				sta 	DTemp2
.010ce5	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010ce8	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010cea	85 0e		sta $0e				sta 	DTemp2+2
.010cec	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010cee	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010cf0					_FCNextPass:
.010cf0	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010cf2	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010cf4	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010cf6	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010cf9	18		clc				clc
.010cfa	65 02		adc $02				adc 	DBaseAddress
.010cfc	a8		tay				tay 								; put in Y
.010cfd	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d00					_FCO1:
.010d00	20 26 0d	jsr $010d26			jsr  	COLLECTScanVariable 		; scan that one.
.010d03	c8		iny				iny 	 							; go to next pointer
.010d04	c8		iny				iny
.010d05	ca		dex				dex
.010d06	d0 f8		bne $010d00			bne 	_FCO1 						; until done all 16.
.010d08	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d0b					_FCO2:
.010d0b	20 3a 0d	jsr $010d3a			jsr  	COLLECTScanArray 			; scan that one.
.010d0e	c8		iny				iny 	 							; go to next pointer
.010d0f	c8		iny				iny
.010d10	ca		dex				dex
.010d11	d0 f8		bne $010d0b			bne 	_FCO2 						; until done all 16.
.010d13	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010d15	f0 0e		beq $010d25			beq		_FCExit 					; if finished then exit.
.010d17	48		pha				pha 								; save the target address
.010d18	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010d1a	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010d1c	20 b7 04	jsr $0104b7			jsr 	StringMakeConcrete 			; make the string concrete.
.010d1f	7a		ply				ply 								; restore the string.
.010d20	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010d23	80 cb		bra $010cf0			bra		_FCNextPass
.010d25					_FCExit:
.010d25	60		rts				rts
.010d26					COLLECTScanVariable:
.010d26	da		phx				phx 								; save XY
.010d27	5a		phy				phy
.010d28					_CSVLoop:
.010d28	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d2b	f0 0a		beq $010d37			beq 	_CSVExit
.010d2d	a8		tay				tay 								; put new address into Y
.010d2e	18		clc				clc 								; which is four on.
.010d2f	69 04 00	adc #$0004			adc 	#4
.010d32	20 59 0d	jsr $010d59			jsr 	COLLECTCheck
.010d35	80 f1		bra $010d28			bra 	_CSVLoop
.010d37					_CSVExit:
.010d37	7a		ply				ply
.010d38	fa		plx				plx
.010d39	60		rts				rts
.010d3a					COLLECTScanArray:
.010d3a	da		phx				phx 								; save XY
.010d3b	5a		phy				phy
.010d3c					_CSALoop:
.010d3c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d3f	f0 15		beq $010d56			beq 	_CSAExit
.010d41	a8		tay				tay 								; put new address in Y
.010d42	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010d45	aa		tax				tax
.010d46	e8		inx				inx									; +1 as one more data element.
.010d47	98		tya				tya 								; point A to first element, at +6
.010d48	18		clc				clc
.010d49	69 06 00	adc #$0006			adc 	#6
.010d4c					_CSADoAllStrings:
.010d4c	20 59 0d	jsr $010d59			jsr 	COLLECTCheck 				; collect check the first.
.010d4f	1a		inc a				inc 	a 							; advance the pointer.
.010d50	1a		inc a				inc 	a
.010d51	ca		dex				dex
.010d52	d0 f8		bne $010d4c			bne 	_CSADoAllStrings 			; until all strings are done.
.010d54	80 e6		bra $010d3c			bra 	_CSALoop
.010d56					_CSAExit:
.010d56	7a		ply				ply
.010d57	fa		plx				plx
.010d58	60		rts				rts
.010d59					COLLECTCheck:
.010d59	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010d5b	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010d5d	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010d5f	90 0a		bcc $010d6b			bcc 	_COCExit
.010d61	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010d63	b0 06		bcs $010d6b			bcs 	_COCExit
.010d65	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010d67	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010d69	85 14		sta $14				sta 	DSignCount
.010d6b					_COCExit:
.010d6b	a5 0a		lda $0a				lda 	DTemp1+2
.010d6d	60		rts				rts
.010d6e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010d6f					Function_ASSERT:
.010d6f	20 0b 02	jsr $01020b			jsr 	EvaluateInteger 			; something that returns an integer.
.010d72	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010d74	05 08		ora $08				ora 	Dtemp1
.010d76	f0 01		beq $010d79			beq 	_FAssFail
.010d78	60		rts				rts
.010d79					_FAssFail:
.010d79	20 a4 03	jsr $0103a4			jsr 	ErrorHandler 						; call error routine
>010d7c	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010d84	61 69 6c 65 64 00
.010d8a					Function_CLS:
.010d8a	20 a3 0d	jsr $010da3			jsr 	HWClearScreen
.010d8d	60		rts				rts

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010d8e					SwitchBasicInstance:
.010d8e	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010d90	20 a3 0d	jsr $010da3			jsr 	HWClearScreen 						; clear screen
.010d93	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010d96	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010d98	86 02		stx $02				stx		DBaseAddress
.010d9a	84 04		sty $04				sty 	DHighAddress
.010d9c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010d9d	48		pha				pha 										; then copy it into B.
.010d9e	ab		plb				plb
.010d9f	ab		plb				plb
.010da0	4c be 0b	jmp $010bbe			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
.010da3					HWClearScreen:
.010da3	48		pha				pha
.010da4	da		phx				phx
.010da5	a2 fe 01	ldx #$01fe			ldx 	#510
.010da8	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010dab	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010daf	ca		dex				dex
.010db0	10 f6		bpl $010da8			bpl 	_CS0
.010db2	64 28		stz $28				stz 	DCursor
.010db4	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010db7	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010dbb	fa		plx				plx
.010dbc	68		pla				pla
.010dbd	60		rts				rts
.010dbe					HWPrintChar:
.010dbe	48		pha				pha
.010dbf	da		phx				phx
.010dc0	a6 28		ldx $28				ldx 	DCursor
.010dc2	e2 20		sep #$20			sep 	#$20
.010dc4	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010dc8	c2 20		rep #$20			rep 	#$20
.010dca	e8		inx				inx
.010dcb	8a		txa				txa
.010dcc	29 ff 01	and #$01ff			and 	#(32*16-1)
.010dcf	85 28		sta $28				sta 	DCursor
.010dd1	aa		tax				tax
.010dd2	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010dd5	e2 20		sep #$20			sep 	#$20
.010dd7	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010ddb	c2 20		rep #$20			rep 	#$20
.010ddd	fa		plx				plx
.010dde	68		pla				pla
.010ddf	60		rts				rts
.010de0					HWNewLine:
.010de0	48		pha				pha
.010de1	da		phx				phx
.010de2	a2 1f 00	ldx #$001f			ldx 	#31
.010de5					HWMoveCursor:
.010de5	a9 20 00	lda #$0020			lda 	#32
.010de8	20 be 0d	jsr $010dbe			jsr 	HWPrintChar
.010deb	8a		txa				txa
.010dec	25 28		and $28				and 	DCursor
.010dee	d0 f5		bne $010de5			bne 	HWMoveCursor
.010df0	fa		plx				plx
.010df1	68		pla				pla
.010df2	60		rts				rts
.010df3	48		pha		HWTab:	pha
.010df4	da		phx				phx
.010df5	a2 07 00	ldx #$0007			ldx 	#7
.010df8	80 eb		bra $010de5			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	9a 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 0a 00 18 c0 06 22
>024108	00 40 00 00 1c 00 14 00 24 3e 19 32 25 3e 0c 00
>024118	09 58 20 69 73 20 6e 6f 77 20 18 32 18 c0 00 00
>024128	12 00 19 00 03 c0 06 22 01 40 19 32 28 3e 64 40
>024138	00 00 12 00 1c 00 03 c0 06 22 02 40 19 32 28 3e
>024148	64 40 00 00 12 00 1e 00 1d 3e 18 c0 06 22 18 c0
>024158	0a 24 01 40 00 00 0a 00 28 00 27 3e 14 40 00 00
>024168	06 00 29 00 00 00 1e 00 64 00 25 3e 12 00 0f 49
>024178	6e 20 73 75 62 72 6f 75 74 69 6e 65 20 23 18 32
>024188	03 c0 00 00 08 00 6e 00 29 3e 00 00 00 00 ee ee
>024198	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0241a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2020 times (32320 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
