
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Fri Jun 14 09:04:44 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 5d 11 01	jmp $01115d			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	33 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	12 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	22 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	32 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	76 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	dd 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	42 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	bf 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	a1 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	5c 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	5c 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	dd 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e9 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	66 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	dd 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	ee 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	00 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	77 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	57 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	33 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	1d 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a5 09					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	fa 0a					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	b1 08					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e9 08					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	1d 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	59 09					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	73 09					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	8a 09					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	33 04					.word IllegalToken             & $FFFF ; token $321d ","
>01003c	33 04					.word IllegalToken             & $FFFF ; token $321e ";"
>01003e	33 04					.word IllegalToken             & $FFFF ; token $321f ":"
>010040	33 04					.word IllegalToken             & $FFFF ; token $3220 "("
>010042	33 04					.word IllegalToken             & $FFFF ; token $3221 ")"
>010044	33 04					.word IllegalToken             & $FFFF ; token $3222 "'"
>010046	33 04					.word IllegalToken             & $FFFF ; token $3223 "to"
>010048	33 04					.word IllegalToken             & $FFFF ; token $3224 "step"
>01004a	4a 11					.word Function_REM             & $FFFF ; token $3e25 "rem"
>01004c	b6 0b					.word Function_Let             & $FFFF ; token $3e26 "let"
>01004e	2b 11					.word Function_ASSERT          & $FFFF ; token $3e27 "assert"
>010050	6e 0f					.word Function_END             & $FFFF ; token $3e28 "end"
>010052	70 0f					.word Function_RUN             & $FFFF ; token $3e29 "run"
>010054	cc 0f					.word Function_STOP            & $FFFF ; token $3e2a "stop"
>010056	c8 0f					.word Function_CLEAR           & $FFFF ; token $3e2b "clear"
>010058	27 10					.word Function_Dim             & $FFFF ; token $3e2c "dim"
>01005a	9b 10					.word Function_COLLECT         & $FFFF ; token $3e2d "collect"
>01005c	46 11					.word Function_CLS             & $FFFF ; token $3e2e "cls"
>01005e	31 0c					.word Function_PRINT           & $FFFF ; token $3e2f "print"
>010060	fc 0d					.word Function_GOTO            & $FFFF ; token $3e30 "goto"
>010062	5b 0e					.word Function_GOSUB           & $FFFF ; token $3e31 "gosub"
>010064	77 0e					.word Function_RETURN          & $FFFF ; token $3e32 "return"
>010066	b9 0d					.word Function_ONGOTO          & $FFFF ; token $3e33 "on"
>010068	e4 0c					.word Handler_ELSE             & $FFFF ; token $3e34 "else"
>01006a	a9 0e					.word Function_REPEAT          & $FFFF ; token $3c35 "repeat"
>01006c	07 0f					.word Function_WHILE           & $FFFF ; token $3c36 "while"
>01006e	7d 0c					.word Function_IF              & $FFFF ; token $3c37 "if"
>010070	33 04					.word IllegalToken             & $FFFF ; token $3c38 "for"
>010072	3e 0f					.word Function_WEND            & $FFFF ; token $3a39 "wend"
>010074	c0 0e					.word Function_UNTIL           & $FFFF ; token $3a3a "until"
>010076	33 04					.word IllegalToken             & $FFFF ; token $3a3b "then"
>010078	12 0d					.word Handler_ENDIF            & $FFFF ; token $3a3c "endif"
>01007a	33 04					.word IllegalToken             & $FFFF ; token $3a3d "next"
.01007c					TokenText:
>01007c	02 26					 .text $02,"&"        ; token $2001
>01007e	02 7c					 .text $02,"|"        ; token $2002
>010080	02 5e					 .text $02,"^"        ; token $2003
>010082	12 3c					 .text $12,"<"        ; token $2204
>010084	12 3e					 .text $12,">"        ; token $2205
>010086	12 3d					 .text $12,"="        ; token $2206
>010088	13 3c 3d				 .text $13,"<="       ; token $2207
>01008b	13 3e 3d				 .text $13,">="       ; token $2208
>01008e	13 3c 3e				 .text $13,"<>"       ; token $2209
>010091	22 2b					 .text $22,"+"        ; token $240a
>010093	22 2d					 .text $22,"-"        ; token $240b
>010095	32 2a					 .text $32,"*"        ; token $260c
>010097	32 2f					 .text $32,"/"        ; token $260d
>010099	32 25					 .text $32,"%"        ; token $260e
>01009b	33 3e 3e				 .text $33,">>"       ; token $260f
>01009e	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100a1	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100a6	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100ab	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100b0	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100b5	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ba	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100c0	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100c6	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100cb	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100d0	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100d6	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100dc	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100e2	92 2c					 .text $92,","        ; token $321d
>0100e4	92 3b					 .text $92,";"        ; token $321e
>0100e6	92 3a					 .text $92,":"        ; token $321f
>0100e8	92 28					 .text $92,"("        ; token $3220
>0100ea	92 29					 .text $92,")"        ; token $3221
>0100ec	92 27					 .text $92,"'"        ; token $3222
>0100ee	93 74 6f				 .text $93,"to"       ; token $3223
>0100f1	95 73 74 65 70				 .text $95,"step"     ; token $3224
>0100f6	f4 72 65 6d				 .text $f4,"rem"      ; token $3e25
>0100fa	f4 6c 65 74				 .text $f4,"let"      ; token $3e26
>0100fe	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e27
>010105	f4 65 6e 64				 .text $f4,"end"      ; token $3e28
>010109	f4 72 75 6e				 .text $f4,"run"      ; token $3e29
>01010d	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2a
>010112	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e2b
>010118	f4 64 69 6d				 .text $f4,"dim"      ; token $3e2c
>01011c	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e2d
>010124	f4 63 6c 73				 .text $f4,"cls"      ; token $3e2e
>010128	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e2f
>01012e	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e30
>010133	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e31
>010139	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e32
>010140	f3 6f 6e				 .text $f3,"on"       ; token $3e33
>010143	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e34
>010148	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c35
>01014f	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c36
>010155	e3 69 66				 .text $e3,"if"       ; token $3c37
>010158	e4 66 6f 72				 .text $e4,"for"      ; token $3c38
>01015c	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a39
>010161	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a3a
>010167	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a3b
>01016c	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a3c
>010172	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a3d
>010177	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$321d					commaTokenID                     = $321d
=$321e					semicolonTokenID                 = $321e
=$321f					colonTokenID                     = $321f
=$3220					lparenTokenID                    = $3220
=$3221					rparenTokenID                    = $3221
=$3222					squoteTokenID                    = $3222
=$3223					toTokenID                        = $3223
=$3224					stepTokenID                      = $3224
=$3e25					remTokenID                       = $3e25
=$3e26					letTokenID                       = $3e26
=$3e27					assertTokenID                    = $3e27
=$3e28					endTokenID                       = $3e28
=$3e29					runTokenID                       = $3e29
=$3e2a					stopTokenID                      = $3e2a
=$3e2b					clearTokenID                     = $3e2b
=$3e2c					dimTokenID                       = $3e2c
=$3e2d					collectTokenID                   = $3e2d
=$3e2e					clsTokenID                       = $3e2e
=$3e2f					printTokenID                     = $3e2f
=$3e30					gotoTokenID                      = $3e30
=$3e31					gosubTokenID                     = $3e31
=$3e32					returnTokenID                    = $3e32
=$3e33					onTokenID                        = $3e33
=$3e34					elseTokenID                      = $3e34
=$3c35					repeatTokenID                    = $3c35
=$3c36					whileTokenID                     = $3c36
=$3c37					ifTokenID                        = $3c37
=$3c38					forTokenID                       = $3c38
=$3a39					wendTokenID                      = $3a39
=$3a3a					untilTokenID                     = $3a3a
=$3a3b					thenTokenID                      = $3a3b
=$3a3c					endifTokenID                     = $3a3c
=$3a3d					nextTokenID                      = $3a3d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.010178					Evaluate:
.010178	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.01017b	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.01017e					EvaluateLevel:
.01017e	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.010181	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010183	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010185	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010188	b0 79		bcs $010203			bcs 	_ELVariable
.01018a	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.01018d	b0 16		bcs $0101a5			bcs 	_ELConstant
.01018f	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010192	90 7f		bcc $010213			bcc 	_ELStringConstant
.010194	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010197	90 03		bcc $01019c			bcc 	_ELConstantShift
.010199	82 94 00	brl $010230			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01019c					_ELConstantShift:
.01019c	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.01019f	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101a1	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101a3	e6 06		inc $06				inc 	DCodePtr
.0101a5					_ELConstant:
.0101a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101a7	38		sec				sec  								; shift it in the range 0-32767
.0101a8	e9 00 40	sbc #$4000			sbc 	#$4000
.0101ab	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101ac	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101ae	6a		ror a				ror 	a 							; rotate that into the constant value
.0101af	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101b1	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101b3	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101b5	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101b7	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101b9	e6 06		inc $06				inc 	DCodePtr
.0101bb					_ELGotAtom:
.0101bb	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0101bd	a8		tay				tay 								; save in Y
.0101be	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0101c1	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0101c4	d0 35		bne $0101fb			bne 	_ELExit
.0101c6	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0101c8	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101cb	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0101cd	98		tya				tya 								; get the keyword token back
.0101ce	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.0101d1	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0101d3	90 26		bcc $0101fb			bcc 	_ELExit 					; precedence too low, then exit.
.0101d5	5a		phy				phy 								; save the binary operator on the stack
.0101d6	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.0101d8	e6 06		inc $06				inc 	DCodePtr
.0101da	18		clc				clc 								; try the next level up
.0101db	69 00 02	adc #$0200			adc 	#1 << TokenShift
.0101de	e8		inx				inx 								; calculate the RHS at the next stack level.
.0101df	e8		inx				inx
.0101e0	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.0101e3	ca		dex				dex
.0101e4	ca		dex				dex
.0101e5	7a		ply				ply 								; get operator token back into Y
.0101e6					_ELExecuteY:
.0101e6	98		tya				tya
.0101e7	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.0101ea	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.0101eb	9b		txy				txy 								; save X in Y
.0101ec	aa		tax				tax 								; double keyword ID in X
.0101ed	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.0101f1	bb		tyx				tyx 								; restore X.
.0101f2	8f f7 01 01	sta $0101f7			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.0101f6					_ELCallRoutine:
.0101f6	20 f6 01	jsr $0101f6			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.0101f9	80 c0		bra $0101bb			bra 	_ELGotAtom 					; go round operator level again.
.0101fb	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.0101fd	0a		asl a				asl 	a
.0101fe	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010200	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010202	60		rts				rts
.010203					_ELVariable:
.010203	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010205	20 c4 02	jsr $0102c4			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010208	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01020a	94 10		sty $10,x			sty 	EXSValueH+0,x
.01020c	76 20		ror $20,x			ror 	EXSPrecType+0,x
.01020e	80 ab		bra $0101bb			bra 	_ELGotAtom
.010210					_ELSyntax
.010210	82 31 02	brl $010444			brl 	SyntaxError
.010213					_ELStringConstant:
.010213	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010216	f0 f8		beq $010210			beq 	_ELSyntax
.010218	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01021a	1a		inc a				inc 	a
.01021b	1a		inc a				inc 	a
.01021c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.01021e	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010220	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010222	18		clc				clc 								; add to string constant.
.010223	65 06		adc $06				adc 	DCodePtr
.010225	85 06		sta $06				sta 	DCodePtr
.010227	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010229	09 00 80	ora #$8000			ora 	#$8000
.01022c	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01022e	80 8b		bra $0101bb			bra 	_ELGotAtom
.010230					_ELUnaryKeyword:
.010230	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010232	a8		tay				tay 								; put the token in Y.
.010233	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010235	e6 06		inc $06				inc 	DCodePtr
.010237	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01023a	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.01023d	f0 a7		beq $0101e6			beq 	_ELExecuteY					; go back and execute it
.01023f	c0 20 32	cpy #$3220			cpy 	#lparenTokenID 				; is it an open bracket ?
.010242	d0 11		bne $010255			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010244	20 7b 02	jsr $01027b			jsr 	EvaluateNext 				; evaluate the expression
.010247	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; consume the right bracket.
.01024a					_ELCopy:
.01024a	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.01024c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01024e	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010250	95 10		sta $10,x			sta 	EXSValueH+0,x
.010252	82 66 ff	brl $0101bb			brl 	_ELGotAtom 					; and continue.
.010255					_ELUnaryOperator:
.010255	5a		phy				phy 								; save the operator on the stack.
.010256	e8		inx				inx 								; this is like evaluate next
.010257	e8		inx				inx
.010258	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01025b	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.01025e	ca		dex				dex 								; unwind the stack.
.01025f	ca		dex				dex
.010260	68		pla				pla 								; restore the unary operator.
.010261	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.010264	f0 03		beq $010269			beq 	_ELMinus
.010266	4c 44 04	jmp $010444			jmp 	SyntaxError
.010269					_ELMinus:
.010269	38		sec				sec 								; do the negation calculation.
.01026a	a9 00 00	lda #$0000			lda 	#0
.01026d	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01026f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010271	a9 00 00	lda #$0000			lda 	#0
.010274	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010276	95 10		sta $10,x			sta 	EXSValueH+0,x
.010278	82 40 ff	brl $0101bb			brl 	_ELGotAtom					; and continue.
.01027b					EvaluateNext:
.01027b	e8		inx				inx
.01027c	e8		inx				inx
.01027d	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010280	20 7e 01	jsr $01017e			jsr 	EvaluateLevel
.010283	ca		dex				dex
.010284	ca		dex				dex
.010285	60		rts				rts
.010286					EvaluateInteger:
.010286	20 78 01	jsr $010178			jsr 	Evaluate
.010289	b0 01		bcs $01028c			bcs 	EIType
.01028b	60		rts				rts
.01028c					EIType:
.01028c	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01028f	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010297	78 70 65 63 74 65 64 00
.01029f					EvaluateNextInteger:
.01029f	20 7b 02	jsr $01027b			jsr 	EvaluateNext
.0102a2	b0 e8		bcs $01028c			bcs 	EIType
.0102a4	60		rts				rts
.0102a5					EvaluateString:
.0102a5	20 78 01	jsr $010178			jsr 	Evaluate
.0102a8	90 01		bcc $0102ab			bcc 	ESType
.0102aa	60		rts				rts
.0102ab					ESType:
.0102ab	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0102ae	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102b6	78 70 65 63 74 65 64 00
.0102be					EvaluateNextString:
.0102be	20 7b 02	jsr $01027b			jsr 	EvaluateNext
.0102c1	90 e8		bcc $0102ab			bcc 	ESType
.0102c3	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0102c4					VariableAccessExpression:
.0102c4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0102c6	48		pha				pha
.0102c7	20 05 03	jsr $010305			jsr 	VariableFind 				; try to find the variables
.0102ca	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0102cc	90 23		bcc $0102f1			bcc 	_VANError
.0102ce	68		pla				pla 								; get and save that first token
.0102cf	48		pha				pha
.0102d0	a8		tay				tay 								; put first token in Y.
.0102d1	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0102d4	f0 07		beq $0102dd			beq 	_VANNotArray
.0102d6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.0102d8	20 7c 03	jsr $01037c			jsr 	VariableSubscript			; index calculation
.0102db	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0102dd					_VANNotArray:
.0102dd	68		pla				pla 								; get the token back.
.0102de	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.0102e1	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.0102e4	38		sec				sec 								; set up return string.
.0102e5	f0 06		beq $0102ed			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.0102e7	18		clc				clc 								; returning a number, read high data word
.0102e8	a0 02 00	ldy #$0002			ldy 	#2
.0102eb	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.0102ed					_VANLoadLower:
.0102ed	a8		tay				tay 								; put A into Y (this is the high byte)
.0102ee	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.0102f0	60		rts				rts
.0102f1					_VANError:
.0102f1	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0102f4	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>0102fc	20 75 6e 6b 6e 6f 77 6e 00
.010305					VariableFind:
.010305	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010307	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01030a	90 5c		bcc $010368			bcc 	_VFError
.01030c	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01030f	b0 11		bcs $010322			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010311	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010314	3a		dec a				dec 	a 							; now 0-25
.010315	0a		asl a				asl 	a 							; x 4 and clear carry
.010316	0a		asl a				asl 	a
.010317	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01031a	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01031c	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.01031e	e6 06		inc $06				inc 	DCodePtr
.010320	38		sec				sec 								; return with carry set.
.010321	60		rts				rts
.010322					_VFSlowVariable:
.010322	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010324	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010327	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010328	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010329	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.01032c	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.01032e	85 08		sta $08				sta 	DTemp1
.010330	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010332	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010335	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010336	65 08		adc $08				adc 	DTemp1
.010338	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01033a	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.01033c					_VFNext:
.01033c	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.01033e	f0 26		beq $010366			beq 	_VFFail 					; if zero, then it's the end of the list.
.010340	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010342	a8		tay				tay 								; read the address of the name at $0002,y
.010343	b9 02 00	lda $0002,y			lda 	$0002,y
.010346	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010348	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01034b					_VFCompare:
.01034b	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.01034d	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01034f	d0 eb		bne $01033c			bne 	_VFNext 					; if not, go to the next one.
.010351	c8		iny				iny 								; advance token pointer
.010352	c8		iny				iny
.010353	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.010356	d0 f3		bne $01034b			bne 	_VFCompare
.010358	98		tya				tya 								; this is the length of the word.
.010359	18		clc				clc 								; so we add it to the code pointer
.01035a	65 06		adc $06				adc 	DCodePtr
.01035c	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.01035e	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010360	18		clc				clc 								; four on is the actual data
.010361	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.010364	38		sec				sec 								; return with CS indicating success
.010365	60		rts				rts
.010366					_VFFail:
.010366	18		clc				clc
.010367	60		rts				rts
.010368					_VFError:
.010368	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01036b	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>010373	76 61 72 69 61 62 6c 65 00
.01037c					VariableSubscript:
.01037c	48		pha				pha		 							; save variable address on stack.
.01037d	20 9f 02	jsr $01029f			jsr		EvaluateNextInteger 		; get the subscript
.010380	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; skip right bracket.
.010383	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010386	d0 10		bne $010398			bne 	_VANSubscript
.010388	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01038a	f0 02		beq $01038e			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01038c	b0 0a		bcs $010398			bcs 	_VANSubscript
.01038e					_VANSubOkay:
.01038e	0a		asl a				asl 	a 							; double lsword
.01038f	0a		asl a				asl 	a 							; and again, also clears carry.
.010390	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010392	68		pla				pla 								; restore DVariablePtr
.010393	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010394	1a		inc a				inc 	a
.010395	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010397	60		rts				rts
.010398					_VANSubscript:
.010398	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01039b	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103a3	79 20 53 75 62 73 63 72 69 70 74 00
.0103af					VariableCreate:
.0103af	48		pha				pha 								; save count.
.0103b0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103b3	29 00 20	and #$2000			and 	#IDTypeMask
.0103b6	f0 06		beq $0103be			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103b8	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103bb	18		clc				clc
.0103bc	65 02		adc $02				adc 	DBaseAddress
.0103be					_VCIsInteger:
.0103be	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.0103c0	68		pla				pla 								; restore count
.0103c1	48		pha				pha
.0103c2	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.0103c3	0a		asl a				asl 	a 							; 2 x # items.
.0103c4	0a		asl a				asl 	a 							; 4 x # items.
.0103c5					_VCNotSingle:
.0103c5	85 08		sta $08				sta 	DTemp1 						; save temporarily
.0103c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.0103ca	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.0103cd	f0 04		beq $0103d3			beq 	_VCNotArray
.0103cf	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.0103d1	e6 08		inc $08				inc 	DTemp1
.0103d3					_VCNotArray:
.0103d3	5a		phy				phy 								; save address of token on stack.
.0103d4	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0103d7	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.0103d9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103db	18		clc				clc 								; add 4 for link and name.
.0103dc	69 04 00	adc #$0004			adc 	#4
.0103df	65 08		adc $08				adc 	DTemp1 						; add memory required
.0103e1	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.0103e3	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.0103e5					_VCErase:
.0103e5	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.0103e7	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.0103ea	c8		iny				iny
.0103eb	c8		iny				iny
.0103ec	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.0103ee	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.0103f0	d0 f3		bne $0103e5			bne 	_VCErase
.0103f2	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.0103f4	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.0103f6	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.0103f9	68		pla				pla 								; restore the token address
.0103fa	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.0103fd	68		pla				pla 								; restore count and store.
.0103fe	99 04 00	sta $0004,y			sta 	$0004,y
.010401					_VCNotArray2:
.010401	98		tya				tya 								; update the head link
.010402	92 20		sta ($20)			sta 	(DHashTablePtr)
.010404	18		clc				clc 								; advance pointer to the data bit.
.010405	69 04 00	adc #$0004			adc 	#4
.010408	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010409					ErrorHandler:
.010409	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01040b	fa		plx				plx 								; address of error message -1
.01040c	e8		inx				inx 								; error message.
.01040d	20 b0 04	jsr $0104b0			jsr 	PrintROMMessage 			; print message in ROM
.010410	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010412	f0 15		beq $010429			beq 	_EHEndMessage
.010414	a2 2e 04	ldx #$042e			ldx 	#_EHAt & $FFFF 				; print " at "
.010417	20 b0 04	jsr $0104b0			jsr 	PrintROMMessage
.01041a	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.01041c	a0 00 00	ldy #$0000			ldy 	#0
.01041f	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010422	20 15 0b	jsr $010b15			jsr 	ConvertToString 			; convert and print it.
.010425	a8		tay				tay
.010426	20 c4 04	jsr $0104c4			jsr 	PrintBASICString
.010429					_EHEndMessage:
.010429	20 af 11	jsr $0111af			jsr 	HWNewLine
.01042c	80 fe		bra $01042c	_EH1:	bra 	_EH1
>01042e	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010433					IllegalToken:
.010433	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010436	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01043e	54 6f 6b 65 6e 00
.010444					SyntaxError:
.010444	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010447	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01044f	72 72 6f 72 00
.010454					ExpectToken:
.010454	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010456	d0 05		bne $01045d			bne 	_CTKError					; error if not
.010458	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01045a	e6 06		inc $06				inc 	DCodePtr
.01045c	60		rts				rts
.01045d					_CTKError:
.01045d	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010460	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010468	74 6f 6b 65 6e 00
.01046e					ExpectRightBracket:
.01046e	48		pha				pha
.01046f	a9 21 32	lda #$3221			lda 	#rparenTokenID
.010472	20 54 04	jsr $010454			jsr 	ExpectToken
.010475	68		pla				pla
.010476	60		rts				rts
.010477					ExpectComma:
.010477	48		pha				pha
.010478	a9 1d 32	lda #$321d			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.01047b	20 54 04	jsr $010454			jsr 	ExpectToken
.01047e	68		pla				pla
.01047f	60		rts				rts
.010480					CheckBothNumeric:
.010480	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010482	15 22		ora $22,x			ora 	EXSPrecType+2,x
.010484	30 01		bmi $010487			bmi 	_CBNFail 					; need to both be zero in bit 15
.010486	60		rts				rts
.010487					_CBNFail:
.010487	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01048a	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010492	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104a0					ResetTypeInteger:
.0104a0	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104a2	29 ff 7f	and #$7fff			and 	#$7FFF
.0104a5	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104a7	60		rts				rts
.0104a8					ResetTypeString:
.0104a8	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104aa	09 00 80	ora #$8000			ora 	#$8000
.0104ad	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104af	60		rts				rts
.0104b0					PrintROMMessage:
.0104b0	48		pha				pha
.0104b1	da		phx				phx
.0104b2					_PRMLoop:
.0104b2	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104b6	29 ff 00	and #$00ff			and 	#$00FF
.0104b9	f0 06		beq $0104c1			beq 	_PRMExit
.0104bb	20 8d 11	jsr $01118d			jsr 	HWPrintChar
.0104be	e8		inx				inx
.0104bf	80 f1		bra $0104b2			bra 	_PRMLoop
.0104c1					_PRMExit:
.0104c1	fa		plx				plx
.0104c2	68		pla				pla
.0104c3	60		rts				rts
.0104c4					PrintBASICString:
.0104c4	48		pha				pha
.0104c5	da		phx				phx
.0104c6	5a		phy				phy
.0104c7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.0104ca	29 ff 00	and #$00ff			and 	#$00FF
.0104cd	f0 0b		beq $0104da			beq 	_PBSExit 					; null string
.0104cf	aa		tax				tax
.0104d0					_PBSLoop:
.0104d0	c8		iny				iny
.0104d1	b9 00 00	lda $0000,y			lda 	$0000,y
.0104d4	20 8d 11	jsr $01118d			jsr 	HWPrintChar
.0104d7	ca		dex				dex
.0104d8	d0 f6		bne $0104d0			bne 	_PBSLoop
.0104da					_PBSExit:
.0104da	7a		ply				ply
.0104db	fa		plx				plx
.0104dc	68		pla				pla
.0104dd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0104de					StringTempAllocate:
.0104de	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0104e1	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0104e4	18		clc				clc 								; this adds one, for the length.
.0104e5	65 16		adc $16				adc 	DTempStringPointer
.0104e7	85 16		sta $16				sta 	DTempStringPointer
.0104e9	48		pha				pha
.0104ea	a9 00 00	lda #$0000			lda 	#$0000
.0104ed	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0104ef	92 16		sta ($16)			sta		(DTempStringPointer)
.0104f1	c2 20		rep #$20			rep 	#$20
.0104f3	68		pla				pla
.0104f4	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0104f6	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0104f8	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0104fa	60		rts				rts
.0104fb					StringWriteCharacter:
.0104fb	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.0104fd	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.0104ff	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010501	1a		inc a				inc 	a
.010502	92 18		sta ($18)			sta 	(DStartTempString)
.010504	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010506	60		rts				rts
.010507					StringCreateCopy:
.010507	a8		tay				tay 								; put pointer to string in Y
.010508	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.01050b	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01050e	f0 17		beq $010527			beq 	_SCCExit 					; do nothing if length zero.
.010510	da		phx				phx 								; save X and put the character count in X
.010511	aa		tax				tax
.010512					_SCCCopy:
.010512	c8		iny				iny 								; advance and read (first time skips length)
.010513	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010515	b9 00 00	lda $0000,y			lda 	$0000,y
.010518	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01051a	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.01051c	1a		inc a				inc 	a
.01051d	92 18		sta ($18)			sta 	(DStartTempString)
.01051f	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010521	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010523	ca		dex				dex 								; do X times
.010524	d0 ec		bne $010512			bne 	_SCCCopy
.010526	fa		plx				plx
.010527					_SCCExit:
.010527	60		rts				rts
.010528					StringMakeConcrete:
.010528	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.01052b	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.01052d	90 0f		bcc $01053e			bcc 	_SMCExit
.01052f	85 08		sta $08				sta 	DTemp1 						; source
.010531	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010533	29 ff 00	and #$00ff			and 	#$00FF
.010536	d0 07		bne $01053f			bne 	_SMCNonZero 				; if not "" skip.
.010538	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.01053b	18		clc				clc
.01053c	65 02		adc $02				adc 	DBaseAddress
.01053e					_SMCExit:
.01053e	60		rts				rts
.01053f					_SMCNonZero:
.01053f	48		pha				pha 								; save on stack.
.010540	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.010543	18		clc				clc
.010544	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010547	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010549	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01054b	85 0c		sta $0c				sta 	DTemp2 						; target
.01054d	7a		ply				ply 								; get length copy from here until Y goes -ve
.01054e	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010550					_SMCLoop:
.010550	b1 08		lda ($08),y			lda 	(DTemp1),y
.010552	91 0c		sta ($0c),y			sta 	(DTemp2),y
.010554	88		dey				dey
.010555	10 f9		bpl $010550			bpl 	_SMCLoop
.010557	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010559	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.01055b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01055c					Binary_Add:
.01055c	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.01055e	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010560	30 12		bmi $010574		bmi 	_BATypeError
.010562	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010564	30 3f		bmi $0105a5		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010566	18		clc			clc
.010567	b5 00		lda $00,x		lda		EXSValueL+0,x
.010569	75 02		adc $02,x		adc 	EXSValueL+2,x
.01056b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01056d	b5 10		lda $10,x		lda		EXSValueH+0,x
.01056f	75 12		adc $12,x		adc 	EXSValueH+2,x
.010571	95 10		sta $10,x		sta 	EXSValueH+0,x
.010573	60		rts			rts
.010574					_BATypeError:
.010574	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010577	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>01057f	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01058f	65 73 00
.010592					_BALengthError:
.010592	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010595	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01059d	6f 6f 20 6c 6f 6e 67 00
.0105a5					_BAConcatenateString:
.0105a5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105a7	85 08		sta $08			sta 	DTemp1
.0105a9	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105ab	85 0c		sta $0c			sta 	DTemp2
.0105ad	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0105af	18		clc			clc 										; work out the total length
.0105b0	b2 08		lda ($08)		lda 	(DTemp1)
.0105b2	72 0c		adc ($0c)		adc 	(DTemp2)
.0105b4	b0 14		bcs $0105ca		bcs 	_BAConcatLengthError 				; string is too long.
.0105b6	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0105b8	20 de 04	jsr $0104de		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0105bb	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0105bd	74 10		stz $10,x		stz 	EXSValueH+0,x
.0105bf	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0105c1	20 07 05	jsr $010507		jsr 	StringCreateCopy
.0105c4	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0105c6	20 07 05	jsr $010507		jsr 	StringCreateCopy
.0105c9	60		rts			rts
.0105ca					_BAConcatLengthError:
.0105ca	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0105cd	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105d5	6f 6f 20 6c 6f 6e 67 00
.0105dd					Binary_Subtract:
.0105dd	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0105e0	38		sec			sec
.0105e1	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105e5	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105e7	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105e9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105eb	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ed	60		rts			rts
.0105ee					Binary_ShiftRight:
.0105ee	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0105f1	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0105f3	29 3f 00	and #$003f		and 	#63
.0105f6	f0 07		beq $0105ff		beq		_Binary_SRExit
.0105f8					_Binary_SRLoop:
.0105f8	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0105fa	76 00		ror $00,x		ror 	EXSValueL+0,x
.0105fc	3a		dec a			dec 	a
.0105fd	d0 f9		bne $0105f8		bne 	_Binary_SRLoop
.0105ff					_Binary_SRExit:
.0105ff	60		rts			rts
.010600					Binary_ShiftLeft:
.010600	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010603	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010605	29 3f 00	and #$003f		and 	#63
.010608	f0 07		beq $010611		beq		_Binary_SLExit
.01060a					_Binary_SLLoop:
.01060a	16 00		asl $00,x		asl 	EXSValueL+0,x
.01060c	36 10		rol $10,x		rol 	EXSValueH+0,x
.01060e	3a		dec a			dec 	a
.01060f	d0 f9		bne $01060a		bne 	_Binary_SLLoop
.010611					_Binary_SLExit:
.010611	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010612					Binary_And:
.010612	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010615	b5 00		lda $00,x		lda		EXSValueL+0,x
.010617	35 02		and $02,x		and 	EXSValueL+2,x
.010619	95 00		sta $00,x		sta 	EXSValueL+0,x
.01061b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01061d	35 12		and $12,x		and 	EXSValueH+2,x
.01061f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010621	60		rts			rts
.010622					Binary_Or:
.010622	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010625	b5 00		lda $00,x		lda		EXSValueL+0,x
.010627	15 02		ora $02,x		ora 	EXSValueL+2,x
.010629	95 00		sta $00,x		sta 	EXSValueL+0,x
.01062b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01062d	15 12		ora $12,x		ora 	EXSValueH+2,x
.01062f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010631	60		rts			rts
.010632					Binary_Xor:
.010632	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010635	b5 00		lda $00,x		lda		EXSValueL+0,x
.010637	55 02		eor $02,x		eor 	EXSValueL+2,x
.010639	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063b	b5 10		lda $10,x		lda		EXSValueH+0,x
.01063d	55 12		eor $12,x		eor 	EXSValueH+2,x
.01063f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010641	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010642					Binary_Equals:
.010642	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010645	b0 0e		bcs $010655		bcs 	_BEString
.010647	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010649	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01064b	d0 4f		bne $01069c		bne 	Compare_Fail
.01064d	b5 10		lda $10,x		lda 	EXSValueH,x
.01064f	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010651	d0 49		bne $01069c		bne 	Compare_Fail
.010653	80 3f		bra $010694		bra 	Compare_Succeed
.010655					_BEString:
.010655	09 00 00	ora #$0000		ora 	#$0000
.010658	f0 3a		beq $010694		beq 	Compare_Succeed
.01065a	80 40		bra $01069c		bra 	Compare_Fail
.01065c					Binary_NotEquals:
.01065c	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01065f	b0 0e		bcs $01066f		bcs 	_BNEString
.010661	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010663	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010665	d0 2d		bne $010694		bne 	Compare_Succeed
.010667	b5 10		lda $10,x		lda 	EXSValueH,x
.010669	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01066b	d0 27		bne $010694		bne 	Compare_Succeed
.01066d	80 2d		bra $01069c		bra 	Compare_Fail
.01066f					_BNEString:
.01066f	09 00 00	ora #$0000		ora 	#$0000
.010672	d0 20		bne $010694		bne 	Compare_Succeed
.010674	80 26		bra $01069c		bra 	Compare_Fail
.010676					Binary_Less:
.010676	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010679	b0 12		bcs $01068d		bcs 	_BLString
.01067b	38		sec			sec
.01067c	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.01067e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010680	b5 10		lda $10,x		lda 	EXSValueH,x
.010682	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010684	50 03		bvc $010689		bvc 	*+5
.010686	49 00 80	eor #$8000		eor 	#$8000
.010689	30 09		bmi $010694		bmi 	Compare_Succeed
.01068b	80 0f		bra $01069c		bra 	Compare_Fail
.01068d					_BLString:
.01068d	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010690	f0 02		beq $010694		beq 	Compare_Succeed
.010692	80 08		bra $01069c		bra 	Compare_Fail
.010694					Compare_Succeed:
.010694	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010697	95 00		sta $00,x		sta 	EXSValueL,x
.010699	95 10		sta $10,x		sta 	EXSValueH,x
.01069b	60		rts			rts
.01069c					Compare_Fail:
.01069c	74 00		stz $00,x		stz 	EXSValueL,x
.01069e	74 10		stz $10,x		stz 	EXSValueH,x
.0106a0	60		rts			rts
.0106a1					Binary_GreaterEqual:
.0106a1	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106a4	b0 12		bcs $0106b8		bcs 	_BGEString
.0106a6	38		sec			sec
.0106a7	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106a9	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106ab	b5 10		lda $10,x		lda 	EXSValueH,x
.0106ad	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106af	50 03		bvc $0106b4		bvc 	*+5
.0106b1	49 00 80	eor #$8000		eor 	#$8000
.0106b4	10 de		bpl $010694		bpl 	Compare_Succeed
.0106b6	80 e4		bra $01069c		bra 	Compare_Fail
.0106b8					_BGEString:
.0106b8	09 00 00	ora #$0000		ora 	#$0000
.0106bb	10 d7		bpl $010694		bpl 	Compare_Succeed
.0106bd	80 dd		bra $01069c		bra 	Compare_Fail
.0106bf					Binary_LessEqual:
.0106bf	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106c2	b0 12		bcs $0106d6		bcs 	_BLEString
.0106c4	18		clc			clc 									; numeric <= signed
.0106c5	b5 00		lda $00,x		lda 	EXSValueL,x
.0106c7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106c9	b5 10		lda $10,x		lda 	EXSValueH,x
.0106cb	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106cd	50 03		bvc $0106d2		bvc 	*+5
.0106cf	49 00 80	eor #$8000		eor 	#$8000
.0106d2	30 c0		bmi $010694		bmi 	Compare_Succeed
.0106d4	80 c6		bra $01069c		bra 	Compare_Fail
.0106d6					_BLEString:
.0106d6	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0106d9	d0 b9		bne $010694		bne 	Compare_Succeed
.0106db	80 bf		bra $01069c		bra 	Compare_Fail
.0106dd					Binary_Greater:
.0106dd	20 fb 06	jsr $0106fb		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106e0	b0 12		bcs $0106f4		bcs 	_BGString
.0106e2	18		clc			clc 									; numeric > signed
.0106e3	b5 00		lda $00,x		lda 	EXSValueL,x
.0106e5	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106e7	b5 10		lda $10,x		lda 	EXSValueH,x
.0106e9	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106eb	50 03		bvc $0106f0		bvc 	*+5
.0106ed	49 00 80	eor #$8000		eor 	#$8000
.0106f0	10 a2		bpl $010694		bpl 	Compare_Succeed
.0106f2	80 a8		bra $01069c		bra 	Compare_Fail
.0106f4					_BGString:
.0106f4	c9 01 00	cmp #$0001		cmp 	#$0001
.0106f7	f0 9b		beq $010694		beq 	Compare_Succeed
.0106f9	80 a1		bra $01069c		bra 	Compare_Fail
.0106fb					CompareTypeCheck:
.0106fb	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0106fd	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0106ff	30 06		bmi $010707		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010701	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010703	30 1c		bmi $010721		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010705	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010706	60		rts			rts
.010707					_CTCFail:
.010707	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01070a	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010712	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010721					_CTCStringCompare:
.010721	20 a0 04	jsr $0104a0		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010724	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010726	85 08		sta $08			sta 	DTemp1
.010728	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01072a	85 0c		sta $0c			sta 	DTemp2
.01072c	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.01072f	a8		tay			tay
.010730	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010732	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010734	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010736	90 02		bcc $01073a		bcc 	_CTCSmallest
.010738	b2 0c		lda ($0c)		lda 	(DTemp2)
.01073a					_CTCSmallest:
.01073a	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.01073c					_CTCCompare:
.01073c	c8		iny			iny 									; look at next character (done first, first char is size)
.01073d	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.01073f	30 16		bmi $010757		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010741	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010743	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010745	f0 f5		beq $01073c		beq 	_CTCCompare 					; if zero, try the next character.
.010747	b0 07		bcs $010750		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010749					_CTCLess:
.010749	c2 20		rep #$20		rep 	#$20
.01074b	a9 ff ff	lda #$ffff		lda 	#$FFFF
.01074e	80 14		bra $010764		bra 	_CTCExit
.010750					_CTCGreater:
.010750	c2 20		rep #$20		rep 	#$20
.010752	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010755	80 0d		bra $010764		bra 	_CTCExit
.010757					_CTCEqualSoFar:
.010757	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010759	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01075b	90 ec		bcc $010749		bcc 	_CTCLess
.01075d	d0 f1		bne $010750		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.01075f	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.010761	a9 00 00	lda #$0000		lda 	#$0000
.010764					_CTCExit:
.010764	38		sec			sec 									; return with CS indicating string comparison.
.010765	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010766					Binary_Divide:
.010766	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.010769	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.01076b	15 12		ora $12,x		ora	 	EXSValueH+2,x
.01076d	d0 14		bne $010783		bne 	_BinaryDivide_Ok
.01076f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010772	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>01077a	20 62 79 20 7a 65 72 6f 00
.010783					_BinaryDivide_Ok:
.010783	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010785	64 0a		stz $0a			stz 	DTemp1+2
.010787	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010789	5a		phy			phy 										; save Y (bit counter)
.01078a	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.01078c	10 07		bpl $010795		bpl 	_BinaryDivide_RightDone
.01078e	e8		inx			inx
.01078f	e8		inx			inx
.010790	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.010793	ca		dex			dex
.010794	ca		dex			dex
.010795					_BinaryDivide_RightDone:
.010795	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010797	10 03		bpl $01079c		bpl 	_BinaryDivide_LeftDone
.010799	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.01079c					_BinaryDivide_LeftDone:
.01079c	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01079f					_BinaryDivide_Loop:
.01079f	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107a1	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107a3	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107a5	26 0a		rol $0a			rol 	DTemp1+2
.0107a7	38		sec			sec											; calculate A-M
.0107a8	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107aa	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0107ac	85 0c		sta $0c			sta 	DTemp2
.0107ae	a5 0a		lda $0a			lda 	DTemp1+2
.0107b0	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0107b2	90 08		bcc $0107bc		bcc 	_Binary_NoSubract 					; if A < M skip this
.0107b4	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0107b6	a5 0c		lda $0c			lda 	DTemp2
.0107b8	85 08		sta $08			sta 	DTemp1+0
.0107ba	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0107bc					_Binary_NoSubract:
.0107bc	88		dey			dey 										; do it 32 times.
.0107bd	d0 e0		bne $01079f		bne 	_BinaryDivide_Loop
.0107bf					_BinaryDivide_Exit:
.0107bf	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0107c1	29 01 00	and #$0001		and 	#1
.0107c4	f0 03		beq $0107c9		beq 	_BinaryDivide_Exit2
.0107c6	20 cb 07	jsr $0107cb		jsr 	Binary_DivNegate
.0107c9					_BinaryDivide_Exit2:
.0107c9	7a		ply			ply 										; restore Y
.0107ca	60		rts			rts
.0107cb					Binary_DivNegate:
.0107cb	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0107cd	38		sec			sec 										; negate the value at stack X.
.0107ce	a9 00 00	lda #$0000		lda 	#$0000
.0107d1	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0107d3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107d5	a9 00 00	lda #$0000		lda 	#$0000
.0107d8	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0107da	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107dc	60		rts			rts
.0107dd					Binary_Modulus:
.0107dd	20 66 07	jsr $010766		jsr 	Binary_Divide 						; do the divide
.0107e0	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0107e2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0107e4	a5 0a		lda $0a			lda 	DTemp1+2
.0107e6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0107e8	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0107e9					Binary_Multiply:
.0107e9	20 80 04	jsr $010480		jsr 	CheckBothNumeric 					; check both values are numeric
.0107ec	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0107ee	85 08		sta $08			sta 	DTemp1
.0107f0	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0107f2	85 0a		sta $0a			sta		DTemp1+2
.0107f4	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0107f6	74 10		stz $10,x		stz 	EXSValueH+0,x
.0107f8					_BinaryMultiply_Loop:
.0107f8	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0107fa	05 0a		ora $0a			ora 	DTemp1+2
.0107fc	f0 1e		beq $01081c		beq 	_BinaryMultiply_Exit
.0107fe	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010800	29 01 00	and #$0001		and 	#1
.010803	f0 0d		beq $010812		beq 	_BinaryMultiply_NoAdd
.010805	18		clc			clc 										; add multiplicand to result.
.010806	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010808	75 02		adc $02,x		adc 	EXSValueL+2,x
.01080a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01080c	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01080e	75 12		adc $12,x		adc 	EXSValueH+2,x
.010810	95 10		sta $10,x		sta 	EXSValueH+0,x
.010812					_BinaryMultiply_NoAdd:
.010812	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010814	66 08		ror $08			ror 	DTemp1
.010816	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010818	36 12		rol $12,x		rol 	EXSValueH+2,x
.01081a	80 dc		bra $0107f8		bra 	_BinaryMultiply_Loop 				; go round again.
.01081c					_BinaryMultiply_Exit:
.01081c	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.01081d					Function_Len:
.01081d	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010820	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get the value you are absoluting
.010823	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010826	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010828	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.01082b	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.01082e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010830	74 10		stz $10,x			stz 	EXSValueH+0,x
.010832	60		rts				rts
.010833					Function_Abs:
.010833	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010836	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010839	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01083c	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.01083e	30 07		bmi $010847			bmi 	_FAbsNegative 				; negate it if negative
.010840	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010842	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010844	95 00		sta $00,x			sta 	EXSValueL+0,x
.010846	60		rts				rts
.010847					_FAbsNegative:
.010847	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010848	a9 00 00	lda #$0000			lda 	#0
.01084b	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01084d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01084f	a9 00 00	lda #$0000			lda 	#0
.010852	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.010854	95 10		sta $10,x			sta 	EXSValueH+0,x
.010856	60		rts				rts
.010857					Function_Sgn:
.010857	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns integer
.01085a	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get an integer
.01085d	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010860	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010862	74 10		stz $10,x			stz 	EXSValueH+0,x
.010864	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010866	30 07		bmi $01086f			bmi 	_FSgnNegative 				; set to -1 if signed
.010868	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.01086a	f0 02		beq $01086e			beq 	_FSgnExit
.01086c	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.01086e					_FSgnExit:
.01086e	60		rts				rts
.01086f					_FSgnNegative:
.01086f	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010872	95 00		sta $00,x			sta 	EXSValueL+0,x
.010874	95 10		sta $10,x			sta 	EXSValueH+0,x
.010876	60		rts				rts
.010877					Function_Random:
.010877	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01087a	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger
.01087d	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.01087f	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010881	d0 0a		bne $01088d			bne 	_Rnd_NotZero
.010883	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010886	85 10		sta $10				sta 	DRandom
.010888	a9 ea 00	lda #$00ea			lda 	#$EA
.01088b	85 12		sta $12				sta 	DRandom+2
.01088d					_Rnd_NotZero:
.01088d	20 98 08	jsr $010898			jsr 	_Rnd_Process 				; call randomiser twice
.010890	95 10		sta $10,x			sta 	EXSValueH+0,x
.010892	20 98 08	jsr $010898			jsr 	_Rnd_Process
.010895	95 00		sta $00,x			sta 	EXSValueL+0,x
.010897	60		rts				rts
.010898					_Rnd_Process:
.010898	06 10		asl $10				asl 	DRandom 					; shift right, exit
.01089a	26 12		rol $12				rol 	DRandom+2
.01089c	90 0e		bcc $0108ac			bcc 	_Rnd_Exit
.01089e	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108a0	49 54 d4	eor #$d454			eor 	#$D454
.0108a3	85 10		sta $10				sta 	DRandom
.0108a5	a5 12		lda $12				lda 	DRandom+2
.0108a7	49 d5 55	eor #$55d5			eor 	#$55D5
.0108aa	85 12		sta $12				sta 	DRandom+2
.0108ac					_Rnd_Exit:
.0108ac	a5 10		lda $10				lda 	DRandom
.0108ae	45 12		eor $12				eor 	DRandom+2
.0108b0	60		rts				rts
.0108b1					Function_Chr:
.0108b1	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string
.0108b4	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get integer
.0108b7	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.0108ba	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.0108bd	d0 12		bne $0108d1			bne 	_FCHBad
.0108bf	48		pha				pha
.0108c0	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character
.0108c3	20 de 04	jsr $0104de			jsr 	StringTempAllocate
.0108c6	68		pla				pla
.0108c7	20 fb 04	jsr $0104fb			jsr 	StringWriteCharacter 		; write it out.
.0108ca	a5 18		lda $18				lda 	DStartTempString 			; return that address
.0108cc	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ce	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108d0	60		rts				rts
.0108d1					_FCHBad:
.0108d1	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0108d4	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>0108dc	65 20 66 6f 72 20 63 68 72 24 28 29 00
.0108e9					Function_Asc:
.0108e9	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.0108ec	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get string
.0108ef	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.0108f2	a8		tay				tay 								; string address in Y
.0108f3	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.0108f6	29 ff 00	and #$00ff			and 	#$00FF
.0108f9	f0 0b		beq $010906			beq 	_FASBad
.0108fb	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.0108fe	29 ff 00	and #$00ff			and 	#$00FF
.010901	95 00		sta $00,x			sta 	EXSValueL+0,x
.010903	74 10		stz $10,x			stz 	EXSValueH+0,x
.010905	60		rts				rts
.010906					_FASBad:
.010906	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010909	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010911	65 20 66 6f 72 20 61 73 63 28 29 00
.01091d					Function_SPC:
.01091d	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string
.010920	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get integer
.010923	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010926	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010929	d0 17		bne $010942			bne 	_FSPBad
.01092b	48		pha				pha
.01092c	20 de 04	jsr $0104de			jsr 	StringTempAllocate 			; allocate character space
.01092f	7a		ply				ply 								; get count in Y
.010930	f0 09		beq $01093b			beq 	_FSPExit 					; if zero, just empty string
.010932					_FSPCopy:
.010932	a9 20 00	lda #$0020			lda 	#" "						; space character
.010935	20 fb 04	jsr $0104fb			jsr 	StringWriteCharacter 		; write it out.
.010938	88		dey				dey
.010939	d0 f7		bne $010932			bne 	_FSPCopy
.01093b					_FSPExit:
.01093b	a5 18		lda $18				lda 	DStartTempString 			; return that address
.01093d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01093f	74 10		stz $10,x			stz 	EXSValueH+0,x
.010941	60		rts				rts
.010942					_FSPBad:
.010942	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010945	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>01094d	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010959					Function_Peek:
.010959	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.01095c	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01095f	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010962	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010964	84 0a		sty $0a				sty 	DTemp1+2
.010966	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010969	b7 08		lda [$08],y			lda 	[DTemp1],y
.01096b	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.01096e	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010970	74 10		stz $10,x			stz 	EXSValueH+0,x
.010972	60		rts				rts
.010973					Function_Deek:
.010973	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.010976	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010979	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.01097c	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.01097e	84 0a		sty $0a				sty 	DTemp1+2
.010980	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010983	b7 08		lda [$08],y			lda 	[DTemp1],y
.010985	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010987	74 10		stz $10,x			stz 	EXSValueH+0,x
.010989	60		rts				rts
.01098a					Function_Leek:
.01098a	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.01098d	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010990	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check )
.010993	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010995	84 0a		sty $0a				sty 	DTemp1+2
.010997	a0 00 00	ldy #$0000			ldy 	#0							; read data
.01099a	b7 08		lda [$08],y			lda 	[DTemp1],y
.01099c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.01099e	c8		iny				iny
.01099f	c8		iny				iny
.0109a0	b7 08		lda [$08],y			lda 	[DTemp1],y
.0109a2	95 10		sta $10,x			sta 	EXSValueH+0,x
.0109a4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0109a5					Function_VAL:
.0109a5	20 a0 04	jsr $0104a0			jsr 	ResetTypeInteger 			; returns an integer
.0109a8	20 be 02	jsr $0102be			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109ab	48		pha				pha 								; put string address on stack.
.0109ac	20 bc 09	jsr $0109bc			jsr 	VALGetBase 					; process , base (shared with STR$())
.0109af	7a		ply				ply 								; get string address back
.0109b0	da		phx				phx 								; save X on stack
.0109b1	aa		tax				tax 								; base in X
.0109b2	98		tya				tya 								; address in A
.0109b3	20 f6 09	jsr $0109f6			jsr 	StringToInteger
.0109b6	fa		plx				plx 								; restore X
.0109b7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0109b9	94 10		sty $10,x			sty 	EXSValueH+0,x
.0109bb	60		rts				rts
.0109bc					VALGetBase:
.0109bc	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0109be	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if comma, go to get base code.
.0109c1	f0 07		beq $0109ca			beq 	_VGBAlternate
.0109c3	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket			; expect ), and return 10.
.0109c6	a9 0a 00	lda #$000a			lda 	#10
.0109c9	60		rts				rts
.0109ca					_VGBAlternate:
.0109ca	20 77 04	jsr $010477			jsr 	ExpectComma 				; skip comma.
.0109cd	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get base
.0109d0	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0109d3	d0 0e		bne $0109e3			bne 	_VGBBadBase
.0109d5	c9 02 00	cmp #$0002			cmp 	#2
.0109d8	90 09		bcc $0109e3			bcc 	_VGBBadBase
.0109da	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0109dd	b0 04		bcs $0109e3			bcs 	_VGBBadBase
.0109df	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; get right bracket and return.
.0109e2	60		rts				rts
.0109e3					_VGBBadBase:
.0109e3	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>0109e6	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0109ee	65 72 20 42 61 73 65 00
.0109f6					StringToInteger:
.0109f6	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.0109f8	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.0109fa	29 ff 00	and #$00ff			and 	#$00FF
.0109fd	85 26		sta $26				sta 	DTemp3+2
.0109ff	f0 6e		beq $010a6f			beq 	_STIError 					; if length zero it's bad.
.010a01	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010a03	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010a05	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010a07	64 0a		stz $0a				stz 	DTemp1+2
.010a09	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010a0b	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010a0e	48		pha				pha 								; push on stack
.010a0f	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010a12	d0 06		bne $010a1a			bne 	_STILoop
.010a14	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010a16	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010a18	f0 55		beq $010a6f			beq 	_STIError 					; if only - then error.
.010a1a					_STILoop:
.010a1a	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010a1c	20 8e 0a	jsr $010a8e			jsr 	MultiplyTemp1ByA
.010a1f	b2 24		lda ($24)			lda 	(DTemp3)
.010a21	29 ff 00	and #$00ff			and 	#$00FF
.010a24	20 7f 0a	jsr $010a7f			jsr 	ConvertUpperCase
.010a27	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.010a2a	90 43		bcc $010a6f			bcc 	_STIError
.010a2c	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010a2f	90 0e		bcc $010a3f			bcc 	_STIOkay1
.010a31	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010a34	90 39		bcc $010a6f			bcc 	_STIError
.010a36	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010a39	b0 34		bcs $010a6f			bcs 	_STIError
.010a3b	18		clc				clc 								; shift to correct range.
.010a3c	69 09 00	adc #$0009			adc 	#9
.010a3f					_STIOkay1:
.010a3f	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010a42	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010a44	b0 29		bcs $010a6f			bcs 	_STIError
.010a46	18		clc				clc 								; add A to DTemp1
.010a47	65 08		adc $08				adc 	DTemp1
.010a49	85 08		sta $08				sta 	DTemp1
.010a4b	90 02		bcc $010a4f			bcc 	_STINoCarry
.010a4d	e6 0a		inc $0a				inc 	DTemp1+2
.010a4f					_STINoCarry:
.010a4f	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010a51	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010a53	d0 c5		bne $010a1a			bne 	_STILoop 					; loop back.
.010a55	68		pla				pla 								; get optional minus bac
.010a56	c9 2d 00	cmp #$002d			cmp 	#"-"
.010a59	d0 0f		bne $010a6a			bne 	_STINotNegative 			; handle the negative character
.010a5b	38		sec				sec 								; negate DTemp1
.010a5c	a9 00 00	lda #$0000			lda 	#0
.010a5f	e5 08		sbc $08				sbc 	DTemp1
.010a61	85 08		sta $08				sta 	DTemp1
.010a63	a9 00 00	lda #$0000			lda 	#0
.010a66	e5 0a		sbc $0a				sbc 	DTemp1+2
.010a68	85 0a		sta $0a				sta 	DTemp1+2
.010a6a					_STINotNegative:
.010a6a	a5 08		lda $08				lda 	DTemp1 						; get the result
.010a6c	a4 0a		ldy $0a				ldy 	DTemp1+2
.010a6e	60		rts				rts
.010a6f					_STIError:
.010a6f	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010a72	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010a7a	74 61 6e 74 00
.010a7f					ConvertUpperCase:
.010a7f	c9 61 00	cmp #$0061			cmp 	#'a'
.010a82	90 09		bcc $010a8d			bcc 	_CUCExit
.010a84	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010a87	b0 04		bcs $010a8d			bcs 	_CUCExit
.010a89	38		sec				sec
.010a8a	e9 20 00	sbc #$0020			sbc 	#32
.010a8d					_CUCExit:
.010a8d	60		rts				rts
.010a8e					MultiplyTemp1ByA:
.010a8e	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010a91	f0 56		beq $010ae9			beq 	_MT1_16
.010a93	c9 0a 00	cmp #$000a			cmp 	#10
.010a96	f0 33		beq $010acb			beq 	_MT1_10
.010a98	c9 08 00	cmp #$0008			cmp 	#8
.010a9b	f0 50		beq $010aed			beq 	_MT1_8
.010a9d	c9 02 00	cmp #$0002			cmp 	#2
.010aa0	f0 53		beq $010af5			beq 	_MT1_2
.010aa2					_MTGeneral:
.010aa2	da		phx				phx
.010aa3	aa		tax				tax 								; multiplier in X
.010aa4	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010aa6	85 0c		sta $0c				sta 	DTemp2
.010aa8	a5 0a		lda $0a				lda 	DTemp1+2
.010aaa	85 0e		sta $0e				sta 	DTemp2+2
.010aac	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010aae	64 0a		stz $0a				stz 	DTemp1+2
.010ab0					_MTLoop:
.010ab0	8a		txa				txa 								; shift X right into C
.010ab1	4a		lsr a				lsr 	a
.010ab2	aa		tax				tax
.010ab3	90 0d		bcc $010ac2			bcc 	_MTNoAdd
.010ab5	18		clc				clc
.010ab6	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010ab8	65 0c		adc $0c				adc 	DTemp2
.010aba	85 08		sta $08				sta 	DTemp1
.010abc	a5 0a		lda $0a				lda 	DTemp1+2
.010abe	65 0e		adc $0e				adc 	DTemp2+2
.010ac0	85 0a		sta $0a				sta 	DTemp1+2
.010ac2					_MTNoAdd:
.010ac2	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ac4	26 0e		rol $0e				rol 	DTemp2+2
.010ac6	8a		txa				txa 								; until multiplier is zero.
.010ac7	d0 e7		bne $010ab0			bne 	_MTLoop
.010ac9					_MTGExit:
.010ac9	fa		plx				plx 								; restore X
.010aca	60		rts				rts 								; and exit
.010acb					_MT1_10:
.010acb	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010acd	48		pha				pha
.010ace	a5 08		lda $08				lda 	DTemp1
.010ad0	48		pha				pha
.010ad1	06 08		asl $08				asl 	DTemp1						; x 4
.010ad3	26 0a		rol $0a				rol 	DTemp1+2
.010ad5	06 08		asl $08				asl 	DTemp1
.010ad7	26 0a		rol $0a				rol 	DTemp1+2
.010ad9	68		pla				pla 								; add saved value, x 5
.010ada	18		clc				clc
.010adb	65 08		adc $08				adc 	DTemp1
.010add	85 08		sta $08				sta 	DTemp1
.010adf	68		pla				pla
.010ae0	65 0a		adc $0a				adc 	DTemp1+2
.010ae2	85 0a		sta $0a				sta 	DTemp1+2
.010ae4	06 08		asl $08				asl 	DTemp1
.010ae6	26 0a		rol $0a				rol 	DTemp1+2
.010ae8	60		rts				rts
.010ae9					_MT1_16:
.010ae9	06 08		asl $08				asl 	DTemp1
.010aeb	26 0a		rol $0a				rol 	DTemp1+2
.010aed					_MT1_8:
.010aed	06 08		asl $08				asl 	DTemp1
.010aef	26 0a		rol $0a				rol 	DTemp1+2
.010af1					_MT1_4:
.010af1	06 08		asl $08				asl 	DTemp1
.010af3	26 0a		rol $0a				rol 	DTemp1+2
.010af5					_MT1_2
.010af5	06 08		asl $08				asl 	DTemp1
.010af7	26 0a		rol $0a				rol 	DTemp1+2
.010af9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.010afa					Function_Str:
.010afa	20 a8 04	jsr $0104a8			jsr 	ResetTypeString 			; returns a string.
.010afd	20 9f 02	jsr $01029f			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010b00	48		pha				pha 								; save YA on the stack
.010b01	5a		phy				phy
.010b02	20 bc 09	jsr $0109bc			jsr 	VALGetBase 					; process , base (shared with STR$())
.010b05	85 14		sta $14				sta 	DSignCount
.010b07	7a		ply				ply 								; YA is the number
.010b08	68		pla				pla
.010b09	da		phx				phx
.010b0a	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010b0c	20 15 0b	jsr $010b15			jsr 	ConvertToString 			; convert it to a string.
.010b0f	fa		plx				plx 								; restore X
.010b10	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010b12	74 10		stz $10,x			stz 	EXSValueH+0,x
.010b14	60		rts				rts
.010b15					ConvertToString:
.010b15	da		phx				phx 								; save X
.010b16	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010b18	84 26		sty $26				sty 	DTemp3+2
.010b1a	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010b1c	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.010b1f	20 de 04	jsr $0104de			jsr 	StringTempAllocate 			; allocate space for return string.
.010b22	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010b24	10 15		bpl $010b3b			bpl 	_CTSNotNegative
.010b26	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.010b29	20 a3 0b	jsr $010ba3			jsr 	CTSOutputA
.010b2c	38		sec				sec 								; negate DTemp3
.010b2d	a9 00 00	lda #$0000			lda 	#0
.010b30	e5 24		sbc $24				sbc 	DTemp3
.010b32	85 24		sta $24				sta 	DTemp3
.010b34	a9 00 00	lda #$0000			lda 	#0
.010b37	e5 26		sbc $26				sbc 	DTemp3+2
.010b39	85 26		sta $26				sta 	DTemp3+2
.010b3b					_CTSNotNegative:
.010b3b	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.010b3e	48		pha				pha
.010b3f	a9 00 00	lda #$0000			lda 	#0
.010b42	48		pha				pha
.010b43	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.010b45	85 08		sta $08				sta 	DTemp1
.010b47	64 0a		stz $0a				stz 	DTemp1+2
.010b49					_CTSMultiplySubtractor:
.010b49	38		sec				sec
.010b4a	a5 24		lda $24				lda 	DTemp3
.010b4c	e5 08		sbc $08				sbc 	DTemp1
.010b4e	a5 26		lda $26				lda 	DTemp3+2
.010b50	e5 0a		sbc $0a				sbc 	DTemp1+2
.010b52	90 0d		bcc $010b61			bcc		_CTSScaledUp 				; if >= then scaled up.
.010b54	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010b56	48		pha				pha
.010b57	a5 0a		lda $0a				lda 	DTemp1+2
.010b59	48		pha				pha
.010b5a	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010b5c	20 8e 0a	jsr $010a8e			jsr 	MultiplyTemp1ByA
.010b5f	80 e8		bra $010b49			bra 	_CTSMultiplySubtractor
.010b61					_CTSScaledUp:
.010b61	7a		ply				ply 								; YA contains the previous divider.
.010b62	68		pla				pla
.010b63	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010b66	d0 05		bne $010b6d			bne 	_CTSHasDigit
.010b68	c9 01 00	cmp #$0001			cmp 	#1 							;
.010b6b	f0 20		beq $010b8d			beq 	_CTSExit
.010b6d					_CTSHasDigit:
.010b6d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010b6f	84 0e		sty $0e				sty 	DTemp2+2
.010b71	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010b74					_CTSSubLoop:
.010b74	38		sec				sec 								; subtract subtractor from number
.010b75	a5 24		lda $24				lda 	DTemp3
.010b77	e5 0c		sbc $0c				sbc 	DTemp2
.010b79	a8		tay				tay 								; intermediate in Y
.010b7a	a5 26		lda $26				lda 	DTemp3+2
.010b7c	e5 0e		sbc $0e				sbc 	DTemp2+2
.010b7e	90 07		bcc $010b87			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010b80	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010b82	84 24		sty $24				sty 	DTemp3
.010b84	e8		inx				inx 								; one more subtraction
.010b85	80 ed		bra $010b74			bra 	_CTSSubLoop 				; try it again.
.010b87					_CTSFinishedSubtracting:
.010b87	8a		txa				txa 								; convert to ASCII.
.010b88	20 96 0b	jsr $010b96			jsr 	CTSOutputHexDigit 			; write that out.
.010b8b	80 d4		bra $010b61			bra 	_CTSScaledUp
.010b8d					_CTSExit:
.010b8d	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010b8f	20 96 0b	jsr $010b96			jsr 	CTSOutputHexDigit
.010b92	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010b94	fa		plx				plx 								; restore X.
.010b95	60		rts				rts
.010b96					CTSOutputHexDigit:
.010b96	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010b99	90 04		bcc $010b9f			bcc 	_CTSNotLetter
.010b9b	18		clc				clc
.010b9c	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010b9f					_CTSNotLetter:
.010b9f	18		clc				clc
.010ba0	69 30 00	adc #$0030			adc 	#48
.010ba3					CTSOutputA:
.010ba3	5a		phy				phy 								; save Y, set Y to current pointer
.010ba4	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010ba6	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010ba9	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010bab	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010bad	1a		inc a				inc 	a
.010bae	92 18		sta ($18)			sta 	(DStartTempString)
.010bb0	c2 20		rep #$20			rep 	#$20
.010bb2	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010bb4	7a		ply				ply 								; restore Y and exit.
.010bb5	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010bb6					Function_Let:
.010bb6	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010bb8	48		pha				pha
.010bb9	20 05 03	jsr $010305			jsr 	VariableFind 				; find the variable
.010bbc	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010bbe	b0 1c		bcs $010bdc			bcs 	_FLetFound 					; skip if found.
.010bc0	68		pla				pla 								; get and push the first token again.
.010bc1	48		pha				pha
.010bc2	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010bc5	d0 57		bne $010c1e			bne 	_FLError					; arrays, so this causes an error.
.010bc7	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010bc9	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010bcc	20 af 03	jsr $0103af			jsr 	VariableCreate 				; create it.
.010bcf	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010bd1					_FLSkipToken:
.010bd1	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010bd3	e6 06		inc $06				inc 	DCodePtr
.010bd5	e6 06		inc $06				inc 	DCodePtr
.010bd7	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010bda	d0 f5		bne $010bd1			bne 	_FLSkipToken
.010bdc					_FLetFound:
.010bdc	68		pla				pla 								; get and save the first token.
.010bdd	48		pha				pha
.010bde	a8		tay				tay 								; put it in Y
.010bdf	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010be2	f0 07		beq $010beb			beq 	_FLetNotArray
.010be4	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010be6	20 7c 03	jsr $01037c			jsr 	VariableSubscript			; index calculation
.010be9	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010beb					_FLetNotArray:
.010beb	7a		ply				ply 								; get the first token into Y
.010bec	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010bee	48		pha				pha
.010bef	5a		phy				phy 								; save the first token on the stack.
.010bf0	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010bf3	20 54 04	jsr $010454			jsr 	ExpectToken
.010bf6	68		pla				pla 								; restore the first token.
.010bf7	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010bfa	d0 0f		bne $010c0b			bne 	_FLetString 				; skip if string.
.010bfc	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; get an integer
.010bff	7a		ply				ply 								; get address in Y
.010c00	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010c02	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010c05	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010c07	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010c0a	60		rts				rts
.010c0b					_FLetString:
.010c0b	20 a5 02	jsr $0102a5			jsr 	EvaluateString 				; get a string.
.010c0e	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010c10	20 28 05	jsr $010528			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010c13	7a		ply				ply 								; get address
.010c14	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010c17	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010c1a	99 02 00	sta $0002,y			sta 	$0002,y
.010c1d	60		rts				rts
.010c1e					_FLError:
.010c1e	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010c21	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010c29	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.010c31					Function_PRINT:
.010c31	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010c33	f0 33		beq $010c68			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010c35	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; likewise if a colon.
.010c38	f0 2e		beq $010c68			beq 	_FPRExitCR
.010c3a	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID 			; semicolon, skip it
.010c3d	f0 23		beq $010c62			beq 	_FPRSkipLoop
.010c3f	c9 22 32	cmp #$3222			cmp 	#squoteTokenID 				; single quote is CR
.010c42	f0 1b		beq $010c5f			beq 	_FPRNewLine
.010c44	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; , is tab.
.010c47	f0 11		beq $010c5a			beq 	_FPRTab
.010c49					_FPRExpression:
.010c49	20 78 01	jsr $010178			jsr 	Evaluate 					; evaluate a string or integer.
.010c4c	b0 06		bcs $010c54			bcs 	_FPRHaveString
.010c4e	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010c51	20 15 0b	jsr $010b15			jsr 	ConvertToString
.010c54					_FPRHaveString:
.010c54	a8		tay				tay 								; print the basic String.
.010c55	20 c4 04	jsr $0104c4			jsr 	PrintBASICString
.010c58	80 d7		bra $010c31			bra 	Function_Print 				; and go round again.
.010c5a					_FPRTab:
.010c5a	20 c2 11	jsr $0111c2			jsr 	HWTab
.010c5d	80 03		bra $010c62			bra 	_FPRSkipLoop
.010c5f					_FPRNewLine:
.010c5f	20 af 11	jsr $0111af			jsr 	HWNewLine
.010c62					_FPRSkipLoop:
.010c62	e6 06		inc $06				inc 	DCodePtr
.010c64	e6 06		inc $06				inc 	DCodePtr
.010c66	80 c9		bra $010c31			bra 	Function_Print
.010c68					_FPRExitCR:
.010c68	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010c6a	88		dey				dey
.010c6b	88		dey				dey
.010c6c	b9 00 00	lda $0000,y			lda 	$0000,y
.010c6f	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010c72	f0 08		beq $010c7c			beq 	_FPRExit
.010c74	c9 1e 32	cmp #$321e			cmp 	#semicolonTokenID
.010c77	f0 03		beq $010c7c			beq 	_FPRExit
.010c79	20 af 11	jsr $0111af			jsr 	HWNewLine 					; print a new line.
.010c7c					_FPRExit:
.010c7c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.010c7d					Function_IF:
.010c7d	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; check success.
.010c80	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010c82	05 08		ora $08				ora 	DTemp1
.010c84	a8		tay				tay 								; success flag in Y.
.010c85	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010c87	c9 3b 3a	cmp #$3a3b			cmp 	#thenTokenID
.010c8a	d0 32		bne $010cbe			bne 	_FIFExtended 				; if so, go to the extended IF.
.010c8c	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010c8e	e6 06		inc $06				inc 	DCodePtr
.010c90	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010c93	f0 0f		beq $010ca4			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010c95	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010c97	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010c9a	90 21		bcc $010cbd			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010c9c	c9 00 c0	cmp #$c000			cmp 	#$C000
.010c9f	b0 1c		bcs $010cbd			bcs 	_FIFContinue
.010ca1	4c fc 0d	jmp $010dfc			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010ca4					_FIFEndOfLine:
.010ca4	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010ca6	f0 15		beq $010cbd			beq 	_FIFContinue 				; if done so, continue.
.010ca8	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010cab	90 06		bcc $010cb3			bcc 	_FIFStringConstant
.010cad	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010caf	e6 06		inc $06				inc 	DCodePtr
.010cb1	80 f1		bra $010ca4			bra 	_FIFEndOfLine
.010cb3					_FIFStringConstant:
.010cb3	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010cb6	18		clc				clc
.010cb7	65 06		adc $06				adc 	DCodePtr
.010cb9	85 06		sta $06				sta 	DCodePtr
.010cbb	80 e7		bra $010ca4			bra 	_FIFEndOfLine
.010cbd					_FIFContinue:
.010cbd	60		rts				rts
.010cbe					_FIFExtended:
.010cbe	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010cc0	e6 2a		inc $2a				inc 	DStack
.010cc2	a9 37 3c	lda #$3c37			lda 	#ifTokenID
.010cc5	a6 2a		ldx $2a				ldx 	DStack
.010cc7	95 00		sta $00,x			sta 	$00,x
.010cc9	98		tya				tya 								; see if the test was passed.
.010cca	f0 01		beq $010ccd			beq 	_FIXSkip 					; if zero then it has failed.
.010ccc	60		rts				rts 								; test passed, so continue executing
.010ccd					_FIXSkip:
.010ccd	a9 34 3e	lda #$3e34			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010cd0	a2 3c 3a	ldx #$3a3c			ldx 	#endifTokenID 				; at the same level.
.010cd3	20 33 0d	jsr $010d33			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010cd6	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010cd8	e6 06		inc $06				inc 	DCodePtr
.010cda	c9 3c 3a	cmp #$3a3c			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010cdd	d0 04		bne $010ce3			bne 	_FIXNoThrow
.010cdf	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010ce1	c6 2a		dec $2a				dec 	DStack
.010ce3					_FIXNoThrow:
.010ce3	60		rts				rts
.010ce4					Handler_ELSE:
.010ce4	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010ce6	b5 00		lda $00,x			lda 	$00,x
.010ce8	c9 37 3c	cmp #$3c37			cmp 	#ifTokenID
.010ceb	d0 12		bne $010cff			bne 	_HEBadStructure
.010ced	a9 3c 3a	lda #$3a3c			lda 	#endifTokenID 				; only searching one token.
.010cf0	a2 00 00	ldx #$0000			ldx 	#$0000
.010cf3	20 33 0d	jsr $010d33			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010cf6	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010cf8	e6 06		inc $06				inc 	DCodePtr
.010cfa	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010cfc	c6 2a		dec $2a				dec 	DStack
.010cfe	60		rts				rts
.010cff					_HEBadStructure:
.010cff	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010d02	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010d0a	68 6f 75 74 20 49 66 00
.010d12					Handler_ENDIF:
.010d12	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010d14	b5 00		lda $00,x			lda 	$00,x
.010d16	c9 37 3c	cmp #$3c37			cmp 	#ifTokenID
.010d19	d0 05		bne $010d20			bne 	_HEIBadStructure
.010d1b	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010d1d	c6 2a		dec $2a				dec 	DStack
.010d1f	60		rts				rts
.010d20					_HEIBadStructure:
.010d20	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010d23	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010d2b	68 6f 75 74 20 49 66 00
.010d33					ScanForwardLevel:
.010d33	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010d35	86 0a		stx $0a				stx 	DTemp1+2
.010d37	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010d39	85 0c		sta $0c				sta 	DTemp2
.010d3b	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010d3e					_SFLLoop:
.010d3e	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010d41	d0 0d		bne $010d50			bne 	_SFLNoCheck
.010d43	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010d45	f0 09		beq $010d50			beq 	_SFLNoCheck 				; don't check zero
.010d47	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010d49	f0 04		beq $010d4f			beq 	_SFLFound
.010d4b	c5 0a		cmp $0a				cmp 	DTemp1+2
.010d4d	d0 01		bne $010d50			bne 	_SFLNoCheck
.010d4f					_SFLFound:
.010d4f	60		rts				rts
.010d50					_SFLNoCheck:
.010d50	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010d52	f0 4f		beq $010da3			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010d54	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010d57	90 40		bcc $010d99			bcc 	_SFLSkipString 				; then handle that.
.010d59	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010d5b	e6 06		inc $06				inc 	DCodePtr
.010d5d	a8		tay				tay 								; put token in Y temporarily.
.010d5e	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010d61	c9 00 20	cmp #$2000			cmp 	#$2000
.010d64	d0 d8		bne $010d3e			bne 	_SFLLoop
.010d66	98		tya				tya 								; get the token back.
.010d67	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010d6a	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010d6d	f0 cf		beq $010d3e			beq 	_SFLLoop
.010d6f	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010d72	90 ca		bcc $010d3e			bcc 	_SFLLoop
.010d74	e8		inx				inx 								; increment the level.
.010d75	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010d78	f0 c4		beq $010d3e			beq 	_SFLLoop
.010d7a	ca		dex				dex 								; decrement the level
.010d7b	ca		dex				dex 								; one overdoes the previous inx.
.010d7c	10 c0		bpl $010d3e			bpl 	_SFLLoop 					; if gone -ve then error.
.010d7e					_SFLError:
.010d7e	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010d80	85 22		sta $22				sta 	DLineNumber
.010d82	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010d85	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010d8d	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010d99					_SFLSkipString:
.010d99	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010d9c	18		clc				clc
.010d9d	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010d9f	85 06		sta $06				sta 	DCodePtr
.010da1	80 9b		bra $010d3e			bra 	_SFLLoop 					; go round again.
.010da3					_SFLNextLine:
.010da3	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010da5	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010da8	f0 d4		beq $010d7e			beq 	_SFLError 					; if zero, then there's no more code to search.
.010daa	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010dad	85 22		sta $22				sta 	DLineNumber
.010daf	18		clc				clc
.010db0	a5 06		lda $06				lda 	DCodePtr
.010db2	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010db5	85 06		sta $06				sta 	DCodePtr
.010db7	80 85		bra $010d3e			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.010db9					Function_ONGOTO:
.010db9	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; on what GOTO :)
.010dbc	c0 00 00	cpy #$0000			cpy 	#0 							; check range
.010dbf	d0 25		bne $010de6			bne 	_FOGoFail
.010dc1	c9 00 00	cmp #$0000			cmp 	#0
.010dc4	f0 20		beq $010de6			beq 	_FOGoFail 					; we start with index = 1
.010dc6	48		pha				pha 								; save count.
.010dc7	a9 30 3e	lda #$3e30			lda 	#gotoTokenID 				; expect GOTO
.010dca	20 54 04	jsr $010454			jsr 	ExpectToken
.010dcd	fa		plx				plx 								; put count in X.
.010dce					_FOGoLoop:
.010dce	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.010dd0	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010dd3	90 73		bcc $010e48			bcc 	FGOFail
.010dd5	c9 00 c0	cmp #$c000			cmp 	#$C000
.010dd8	b0 6e		bcs $010e48			bcs 	FGOFail
.010dda	ca		dex				dex 								; subtract one, if done, call GOTO code
.010ddb	f0 1f		beq $010dfc			beq 	Function_GOTO
.010ddd	e6 06		inc $06				inc 	DCodePtr 					; step over constant
.010ddf	e6 06		inc $06				inc 	DCodePtr
.010de1	20 77 04	jsr $010477			jsr 	ExpectComma 				; expect a comma
.010de4	80 e8		bra $010dce			bra 	_FOGoLoop 					; and loop round.
.010de6					_FOGoFail:
.010de6	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010de9	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>010df1	47 6f 74 6f 20 76 61 6c 75 65 00
.010dfc					Function_GOTO:
.010dfc	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010dfe	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010e01	90 45		bcc $010e48			bcc 	FGOFail
.010e03	c9 00 c0	cmp #$c000			cmp 	#$C000
.010e06	b0 40		bcs $010e48			bcs 	FGOFail
.010e08	38		sec				sec 								; convert to 0-32767
.010e09	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010e0c	aa		tax				tax
.010e0d	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010e10	18		clc				clc
.010e11	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010e13	a8		tay				tay
.010e14					_FGOSearch:
.010e14	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010e17	f0 18		beq $010e31			beq 	_FGOUnknown
.010e19	8a		txa				txa 								; does it match line number.
.010e1a	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010e1d	f0 08		beq $010e27			beq 	_FGOFound 					; yes, then found.
.010e1f	98		tya				tya 								; no follow the link
.010e20	18		clc				clc
.010e21	79 00 00	adc $0000,y			adc 	$0000,y
.010e24	a8		tay				tay
.010e25	80 ed		bra $010e14			bra 	_FGOSearch
.010e27					_FGOFound:
.010e27	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010e29	98		tya				tya 								; Y + 4 is the code pointer.
.010e2a	18		clc				clc
.010e2b	69 04 00	adc #$0004			adc 	#4
.010e2e	85 06		sta $06				sta 	DCodePtr
.010e30	60		rts				rts									; and continue
.010e31					_FGOUnknown:
.010e31	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e34	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010e3c	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010e48					FGOFail:
.010e48	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e4b	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010e53	20 4e 75 6d 62 65 72 00
.010e5b					Function_GOSUB:
.010e5b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010e5d	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010e5f	18		clc				clc
.010e60	69 02 00	adc #$0002			adc 	#2
.010e63	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010e65	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010e67	95 04		sta $04,x			sta 	$04,x
.010e69	a9 31 3e	lda #$3e31			lda 	#gosubTokenID 				; save gosub token at +6
.010e6c	95 06		sta $06,x			sta 	$06,x
.010e6e	8a		txa				txa 								; advance stack by 6.
.010e6f	18		clc				clc
.010e70	69 06 00	adc #$0006			adc 	#6
.010e73	85 2a		sta $2a				sta 	DStack
.010e75	80 85		bra $010dfc			bra 	Function_GOTO 				; and do a GOTO.
.010e77					Function_RETURN:
.010e77	a6 2a		ldx $2a				ldx 	DStack
.010e79	b5 00		lda $00,x			lda 	$00,x
.010e7b	c9 31 3e	cmp #$3e31			cmp 	#gosubTokenID 				; check top token.
.010e7e	d0 11		bne $010e91			bne 	_FRetFail
.010e80	8a		txa				txa 								; unpick stack.
.010e81	38		sec				sec
.010e82	e9 06 00	sbc #$0006			sbc 	#6
.010e85	85 2a		sta $2a				sta 	DStack
.010e87	aa		tax				tax
.010e88	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010e8a	85 06		sta $06				sta 	DCodePtr
.010e8c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010e8e	85 22		sta $22				sta 	DLineNumber
.010e90	60		rts				rts
.010e91					_FRetFail:
.010e91	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010e94	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010e9c	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.010ea9					Function_REPEAT:
.010ea9	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010eab	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010ead	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010eaf	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010eb1	95 04		sta $04,x			sta 	$04,x
.010eb3	a9 35 3c	lda #$3c35			lda 	#repeatTokenID 				; save repeat token at +6
.010eb6	95 06		sta $06,x			sta 	$06,x
.010eb8	8a		txa				txa 								; advance stack by 6.
.010eb9	18		clc				clc
.010eba	69 06 00	adc #$0006			adc 	#6
.010ebd	85 2a		sta $2a				sta 	DStack
.010ebf	60		rts				rts
.010ec0					Function_UNTIL:
.010ec0	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010ec2	b5 00		lda $00,x			lda 	$00,x
.010ec4	c9 35 3c	cmp #$3c35			cmp 	#repeatTokenID
.010ec7	d0 26		bne $010eef			bne 	_FUNFail
.010ec9	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; .... until what.
.010ecc	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010ecf	d0 15		bne $010ee6			bne 	_FUNExit
.010ed1	c9 00 00	cmp #$0000			cmp 	#0
.010ed4	d0 10		bne $010ee6			bne 	_FUNExit
.010ed6	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010ed8	38		sec				sec
.010ed9	e9 06 00	sbc #$0006			sbc 	#6
.010edc	aa		tax				tax
.010edd	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010edf	85 06		sta $06				sta 	DCodePtr
.010ee1	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010ee3	85 22		sta $22				sta 	DLineNumber
.010ee5	60		rts				rts
.010ee6					_FUNExit:
.010ee6	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010ee8	38		sec				sec
.010ee9	e9 06 00	sbc #$0006			sbc 	#6
.010eec	85 2a		sta $2a				sta 	DStack
.010eee	60		rts				rts
.010eef					_FUNFail:
.010eef	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010ef2	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010efa	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.010f07					Function_WHILE:
.010f07	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.010f09	48		pha				pha 								; save on stack
.010f0a	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; .... until what.
.010f0d	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.010f10	d0 14		bne $010f26			bne 	_FWHExecute
.010f12	c9 00 00	cmp #$0000			cmp 	#0
.010f15	d0 0f		bne $010f26			bne 	_FWHExecute
.010f17	68		pla				pla 								; throw away current instruction
.010f18	a9 39 3a	lda #$3a39			lda 	#wendTokenID 				; skip to WEND
.010f1b	a2 00 00	ldx #$0000			ldx 	#0
.010f1e	20 33 0d	jsr $010d33			jsr 	ScanForwardLevel
.010f21	e6 06		inc $06				inc 	DCodePtr 					; and skip over that
.010f23	e6 06		inc $06				inc 	DCodePtr
.010f25	60		rts				rts
.010f26					_FWHExecute:
.010f26	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010f28	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.010f29	3a		dec a				dec 	a
.010f2a	3a		dec a				dec 	a
.010f2b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010f2d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010f2f	95 04		sta $04,x			sta 	$04,x
.010f31	a9 36 3c	lda #$3c36			lda 	#whileTokenID 				; save while token at +6
.010f34	95 06		sta $06,x			sta 	$06,x
.010f36	8a		txa				txa 								; advance stack by 6.
.010f37	18		clc				clc
.010f38	69 06 00	adc #$0006			adc 	#6
.010f3b	85 2a		sta $2a				sta 	DStack
.010f3d	60		rts				rts
.010f3e					Function_WEND:
.010f3e	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.010f40	b5 00		lda $00,x			lda 	$00,x
.010f42	c9 36 3c	cmp #$3c36			cmp 	#whileTokenID
.010f45	d0 11		bne $010f58			bne 	_FWEFail
.010f47	8a		txa				txa 								; unpick stack and always loop back.
.010f48	38		sec				sec
.010f49	e9 06 00	sbc #$0006			sbc 	#6
.010f4c	85 2a		sta $2a				sta 	DStack
.010f4e	aa		tax				tax
.010f4f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010f51	85 06		sta $06				sta 	DCodePtr
.010f53	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010f55	85 22		sta $22				sta 	DLineNumber
.010f57	60		rts				rts
.010f58					_FWEFail:
.010f58	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010f5b	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>010f63	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010f6e					Function_END:
.010f6e	02 00		cop #$00			cop 	#0
.010f70					Function_RUN:
.010f70	20 c8 0f	jsr $010fc8			jsr 	Function_CLEAR 				; clear all variables.
.010f73	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010f75	18		clc				clc
.010f76	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010f79					_FRun_NextLineNumber:
.010f79	a8		tay				tay 								; put in Y
.010f7a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010f7d	f0 ef		beq $010f6e			beq 	Function_END 				; if zero, off the end of the program
.010f7f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010f82	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010f84	98		tya				tya 								; get address back
.010f85	18		clc				clc 								; skip over the link/line number
.010f86	69 04 00	adc #$0004			adc 	#4
.010f89	85 06		sta $06				sta 	DCodePtr
.010f8b					_FRun_NextInstruction:
.010f8b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010f8e	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010f90	38		sec				sec
.010f91	e9 00 01	sbc #$0100			sbc 	#256
.010f94	85 16		sta $16				sta 	DTempStringPointer
.010f96	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010f98	f0 28		beq $010fc2			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010f9a	c9 1f 32	cmp #$321f			cmp 	#colonTokenID 				; colon then skip
.010f9d	f0 18		beq $010fb7			beq 	_FRun_Colon
.010f9f	a8		tay				tay 								; save in Y
.010fa0	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010fa3	c9 00 20	cmp #$2000			cmp 	#$2000
.010fa6	d0 15		bne $010fbd			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010fa8	98		tya				tya 								; get token back
.010fa9	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010fac	0a		asl a				asl 	a 							; double it into X
.010fad	aa		tax				tax
.010fae	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010fb0	e6 06		inc $06				inc 	DCodePtr
.010fb2	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010fb5	80 d4		bra $010f8b			bra 	_FRun_NextInstruction 		; do the following instruction.
.010fb7					_FRun_Colon:
.010fb7	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010fb9	e6 06		inc $06				inc 	DCodePtr
.010fbb	80 ce		bra $010f8b			bra 	_FRun_NextInstruction 		; do the following instruction.
.010fbd					_FRun_TryLET:
.010fbd	20 b6 0b	jsr $010bb6			jsr 	Function_LET 				; try as a LET.
.010fc0	80 c9		bra $010f8b			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010fc2					_FRun_EndInstruction:
.010fc2	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010fc4	1a		inc a				inc 	a 							; go to link for next line
.010fc5	1a		inc a				inc 	a
.010fc6	80 b1		bra $010f79			bra 	_FRun_NextLineNumber
.010fc8					Function_CLEAR:
.010fc8	20 d4 0f	jsr $010fd4			jsr 	ClearVariablesPointersAndStacks
.010fcb	60		rts				rts
.010fcc					Function_STOP:
.010fcc	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>010fcf	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.010fd4					ClearVariablesPointersAndStacks:
.010fd4	a9 80 00	lda #$0080			lda 	#BASStack
.010fd7	85 2a		sta $2a				sta 	DStack
.010fd9	64 80		stz $80				stz 	BASStack
.010fdb	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010fde	a9 00 00	lda #$0000			lda 	#$0000
.010fe1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010fe3	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010fe5	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010fe8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010fea	20 11 10	jsr $011011			jsr 	FindCodeEnd 				; find where the program ends.
.010fed	a8		tay				tay 								; Y points to it.
.010fee	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010ff1	99 02 00	sta $0002,y			sta 	$0002,y
.010ff4	99 04 00	sta $0004,y			sta 	$0004,y
.010ff7	98		tya				tya 								; start of working memory up
.010ff8	18		clc				clc
.010ff9	69 06 00	adc #$0006			adc 	#6
.010ffc	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010fff	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011001	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011004					_FCLoop:
.011004	a9 00 00	lda #$0000			lda 	#$0000
.011007	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011009	c8		iny				iny
.01100a	c8		iny				iny
.01100b	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.01100e	d0 f4		bne $011004			bne 	_FCLoop
.011010	60		rts				rts
.011011					FindCodeEnd:
.011011	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.011014	18		clc				clc
.011015	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011017	a8		tay				tay
.011018					_FCELoop:
.011018	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.01101b	f0 08		beq $011025			beq 	_FCEExit
.01101d	98		tya				tya 								; add offset
.01101e	18		clc				clc
.01101f	79 00 00	adc $0000,y			adc 	$0000,y
.011022	a8		tay				tay
.011023	80 f3		bra $011018			bra 	_FCELoop
.011025					_FCEExit:
.011025	98		tya				tya 								; return in A
.011026	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011027					Function_Dim:
.011027	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011029	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01102c	f0 3b		beq $011069			beq		_FDIMNotArray 				; no, error.
.01102e	20 05 03	jsr $010305			jsr 	VariableFind 				; try to find it.
.011031	b0 41		bcs $011074			bcs 	_FDIMExists 				; if it does, that's an error.
.011033	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011035	48		pha				pha
.011036	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011038	48		pha				pha
.011039					_FDIMSkip:
.011039	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.01103b	e6 06		inc $06				inc 	DCodePtr
.01103d	e6 06		inc $06				inc 	DCodePtr
.01103f	29 00 08	and #$0800			and 	#IDContMask
.011042	d0 f5		bne $011039			bne 	_FDIMSkip
.011044	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; evaluate the size
.011047	20 6e 04	jsr $01046e			jsr 	ExpectRightBracket 			; check the ) following.
.01104a	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.01104d	d0 3b		bne $01108a			bne 	_FDIMSize
.01104f	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011052	f0 36		beq $01108a			beq 	_FDIMSize
.011054	7a		ply				ply 								; restore HashTablePtr
.011055	84 20		sty $20				sty 	DHashTablePtr
.011057	7a		ply				ply 								; so now A is the high index, Y points to the token
.011058	20 af 03	jsr $0103af			jsr 	VariableCreate 				; create the variable.
.01105b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.01105d	c9 1d 32	cmp #$321d			cmp 	#commaTokenID 				; if not a comma, exit
.011060	d0 06		bne $011068			bne 	_FDIMExit
.011062	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011064	e6 06		inc $06				inc 	DCodePtr
.011066	80 bf		bra $011027			bra 	Function_DIM 				; and do another
.011068					_FDIMExit:
.011068	60		rts				rts
.011069					_FDIMNotArray:
.011069	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01106c	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011074					_FDIMExists:
.011074	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>011077	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>01107f	65 64 69 6d 65 6e 73 69 6f 6e 00
.01108a					_FDIMSize:
.01108a	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>01108d	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011095	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.01109b					Function_COLLECT:
.01109b	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.01109d	85 0c		sta $0c				sta 	DTemp2
.01109f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0110a2	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0110a4	85 0e		sta $0e				sta 	DTemp2+2
.0110a6	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0110a8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0110aa					_FCNextPass:
.0110aa	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0110ac	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0110ae	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0110b0	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0110b3	18		clc				clc
.0110b4	65 02		adc $02				adc 	DBaseAddress
.0110b6	a8		tay				tay 								; put in Y
.0110b7	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0110ba					_FCO1:
.0110ba	20 e0 10	jsr $0110e0			jsr  	COLLECTScanVariable 		; scan that one.
.0110bd	c8		iny				iny 	 							; go to next pointer
.0110be	c8		iny				iny
.0110bf	ca		dex				dex
.0110c0	d0 f8		bne $0110ba			bne 	_FCO1 						; until done all 16.
.0110c2	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.0110c5					_FCO2:
.0110c5	20 f4 10	jsr $0110f4			jsr  	COLLECTScanArray 			; scan that one.
.0110c8	c8		iny				iny 	 							; go to next pointer
.0110c9	c8		iny				iny
.0110ca	ca		dex				dex
.0110cb	d0 f8		bne $0110c5			bne 	_FCO2 						; until done all 16.
.0110cd	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0110cf	f0 0e		beq $0110df			beq		_FCExit 					; if finished then exit.
.0110d1	48		pha				pha 								; save the target address
.0110d2	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0110d4	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0110d6	20 28 05	jsr $010528			jsr 	StringMakeConcrete 			; make the string concrete.
.0110d9	7a		ply				ply 								; restore the string.
.0110da	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.0110dd	80 cb		bra $0110aa			bra		_FCNextPass
.0110df					_FCExit:
.0110df	60		rts				rts
.0110e0					COLLECTScanVariable:
.0110e0	da		phx				phx 								; save XY
.0110e1	5a		phy				phy
.0110e2					_CSVLoop:
.0110e2	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0110e5	f0 0a		beq $0110f1			beq 	_CSVExit
.0110e7	a8		tay				tay 								; put new address into Y
.0110e8	18		clc				clc 								; which is four on.
.0110e9	69 04 00	adc #$0004			adc 	#4
.0110ec	20 15 11	jsr $011115			jsr 	COLLECTCheck
.0110ef	80 f1		bra $0110e2			bra 	_CSVLoop
.0110f1					_CSVExit:
.0110f1	7a		ply				ply
.0110f2	fa		plx				plx
.0110f3	60		rts				rts
.0110f4					COLLECTScanArray:
.0110f4	da		phx				phx 								; save XY
.0110f5	5a		phy				phy
.0110f6					_CSALoop:
.0110f6	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0110f9	f0 17		beq $011112			beq 	_CSAExit
.0110fb	a8		tay				tay 								; put new address in Y
.0110fc	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.0110ff	aa		tax				tax
.011100	e8		inx				inx									; +1 as one more data element.
.011101	98		tya				tya 								; point A to first element, at +6
.011102	18		clc				clc
.011103	69 06 00	adc #$0006			adc 	#6
.011106					_CSADoAllStrings:
.011106	20 15 11	jsr $011115			jsr 	COLLECTCheck 				; collect check the first.
.011109	1a		inc a				inc 	a 							; advance the pointer.
.01110a	1a		inc a				inc 	a
.01110b	1a		inc a				inc 	a
.01110c	1a		inc a				inc 	a
.01110d	ca		dex				dex
.01110e	d0 f6		bne $011106			bne 	_CSADoAllStrings 			; until all strings are done.
.011110	80 e4		bra $0110f6			bra 	_CSALoop
.011112					_CSAExit:
.011112	7a		ply				ply
.011113	fa		plx				plx
.011114	60		rts				rts
.011115					COLLECTCheck:
.011115	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011117	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011119	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.01111b	90 0a		bcc $011127			bcc 	_COCExit
.01111d	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.01111f	b0 06		bcs $011127			bcs 	_COCExit
.011121	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011123	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011125	85 14		sta $14				sta 	DSignCount
.011127					_COCExit:
.011127	a5 0a		lda $0a				lda 	DTemp1+2
.011129	60		rts				rts
.01112a	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.01112b					Function_ASSERT:
.01112b	20 86 02	jsr $010286			jsr 	EvaluateInteger 			; something that returns an integer.
.01112e	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011130	05 08		ora $08				ora 	Dtemp1
.011132	f0 01		beq $011135			beq 	_FAssFail
.011134	60		rts				rts
.011135					_FAssFail:
.011135	20 09 04	jsr $010409			jsr 	ErrorHandler 						; call error routine
>011138	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011140	61 69 6c 65 64 00
.011146					Function_CLS:
.011146	20 72 11	jsr $011172			jsr 	HWClearScreen
.011149	60		rts				rts
.01114a					Function_REM:
.01114a	ea		nop				nop
.01114b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01114d	f0 0b		beq $01115a			beq 	_FRemSyntax 				; if 0, syntax error
.01114f	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011152	b0 06		bcs $01115a			bcs 	_FRemSyntax
.011154	18		clc				clc 								; add to DCodePtr
.011155	65 06		adc $06				adc 	DCodePtr
.011157	85 06		sta $06				sta 	DCodePtr
.011159	60		rts				rts
.01115a					_FRemSyntax:
.01115a	82 e7 f2	brl $010444			brl 	SyntaxError

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.01115d					SwitchBasicInstance:
.01115d	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.01115f	20 72 11	jsr $011172			jsr 	HWClearScreen 						; clear screen
.011162	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011165	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011167	86 02		stx $02				stx		DBaseAddress
.011169	84 04		sty $04				sty 	DHighAddress
.01116b	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01116c	48		pha				pha 										; then copy it into B.
.01116d	ab		plb				plb
.01116e	ab		plb				plb
.01116f	4c 70 0f	jmp $010f70			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.011172					HWClearScreen:
.011172	48		pha				pha
.011173	da		phx				phx
.011174	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011177	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01117a	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01117e	ca		dex				dex
.01117f	10 f6		bpl $011177			bpl 	_CS0
.011181	64 28		stz $28				stz 	DCursor
.011183	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011186	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01118a	fa		plx				plx
.01118b	68		pla				pla
.01118c	60		rts				rts
.01118d					HWPrintChar:
.01118d	48		pha				pha
.01118e	da		phx				phx
.01118f	a6 28		ldx $28				ldx 	DCursor
.011191	e2 20		sep #$20			sep 	#$20
.011193	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011197	c2 20		rep #$20			rep 	#$20
.011199	e8		inx				inx
.01119a	8a		txa				txa
.01119b	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.01119e	85 28		sta $28				sta 	DCursor
.0111a0	aa		tax				tax
.0111a1	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.0111a4	e2 20		sep #$20			sep 	#$20
.0111a6	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.0111aa	c2 20		rep #$20			rep 	#$20
.0111ac	fa		plx				plx
.0111ad	68		pla				pla
.0111ae	60		rts				rts
.0111af					HWNewLine:
.0111af	48		pha				pha
.0111b0	da		phx				phx
.0111b1	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.0111b4					HWMoveCursor:
.0111b4	a9 20 00	lda #$0020			lda 	#32
.0111b7	20 8d 11	jsr $01118d			jsr 	HWPrintChar
.0111ba	8a		txa				txa
.0111bb	25 28		and $28				and 	DCursor
.0111bd	d0 f5		bne $0111b4			bne 	HWMoveCursor
.0111bf	fa		plx				plx
.0111c0	68		pla				pla
.0111c1	60		rts				rts
.0111c2	48		pha		HWTab:	pha
.0111c3	da		phx				phx
.0111c4	a2 07 00	ldx #$0007			ldx 	#7
.0111c7	80 eb		bra $0111b4			bra 	HWMoveCursor

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	b8 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 0c 00 05 00 18 c0 06 22
>024108	00 40 00 00 08 00 06 00 35 3c 00 00 36 00 07 00
>024118	25 3e 2e 00 2a 49 66 20 79 6f 75 20 63 68 61 6e
>024128	67 65 20 74 68 65 20 6c 61 73 74 20 31 30 20 74
>024138	6f 20 31 36 20 69 74 20 63 72 61 73 68 65 73 00
>024148	00 00 42 00 0a 00 2f 3e 16 30 18 c0 1d 32 10 40
>024158	21 32 1d 32 16 30 1a 30 18 c0 21 32 1d 32 10 40
>024168	21 32 1d 32 16 30 1b 30 18 c0 21 32 1d 32 10 40
>024178	21 32 1d 32 16 30 1c 30 18 c0 21 32 1d 32 0a 40
>024188	21 32 00 00 10 00 0c 00 18 c0 06 22 18 c0 0a 24
>024198	01 40 00 00 0e 00 0f 00 3a 3a 18 c0 06 22 10 40
>0241a8	00 00 08 00 14 00 2a 3e 00 00 00 00 ee ee ee ee
>0241b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2019 times (32304 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
