
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun  8 16:46:32 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 86 07 01	jmp $010786		jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	ea 02					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	77 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	87 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	97 04					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	db 04					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	42 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	a7 04					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	24 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	06 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	c1 04					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	c1 03					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	42 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	4e 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	cb 05					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	42 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	53 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	65 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	dc 06					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	bc 06					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	98 06					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	82 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	ea 02					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	ea 02					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	ea 02					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	ea 02					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	ea 02					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	2e 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	13 07					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	2f 07					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	31 07					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	ea 02					.word IllegalToken             & $FFFF ; token $3c1e "while"
>01003e	ea 02					.word IllegalToken             & $FFFF ; token $3a1f "wend"
.010040					TokenText:
>010040	02 26					 .text $02,"&"        ; token $2001
>010042	02 7c					 .text $02,"|"        ; token $2002
>010044	02 5e					 .text $02,"^"        ; token $2003
>010046	12 3c					 .text $12,"<"        ; token $2204
>010048	12 3e					 .text $12,">"        ; token $2205
>01004a	12 3d					 .text $12,"="        ; token $2206
>01004c	13 3c 3d				 .text $13,"<="       ; token $2207
>01004f	13 3e 3d				 .text $13,">="       ; token $2208
>010052	13 3c 3e				 .text $13,"<>"       ; token $2209
>010055	22 2b					 .text $22,"+"        ; token $240a
>010057	22 2d					 .text $22,"-"        ; token $240b
>010059	32 2a					 .text $32,"*"        ; token $260c
>01005b	32 2f					 .text $32,"/"        ; token $260d
>01005d	32 25					 .text $32,"%"        ; token $260e
>01005f	33 3e 3e				 .text $33,">>"       ; token $260f
>010062	33 3c 3c				 .text $33,"<<"       ; token $2610
>010065	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006b	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010070	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010075	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007a	92 2c					 .text $92,","        ; token $3215
>01007c	92 3b					 .text $92,";"        ; token $3216
>01007e	92 3a					 .text $92,":"        ; token $3217
>010080	92 28					 .text $92,"("        ; token $3218
>010082	92 29					 .text $92,")"        ; token $3219
>010084	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>010088	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>01008f	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010093	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>010097	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c1e
>01009d	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a1f
>0100a2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3c1e					whileTokenID                     = $3c1e
=$3a1f					wendTokenID                      = $3a1f

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecType = 32							; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0100a3					Evaluate:
.0100a3	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100a6	a9 00 00	lda #$0000			lda 	#0<<9 						; start at the lowest precedence level.
.0100a9					EvaluateLevel:
.0100a9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ac	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100ae	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100b0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100b3	b0 79		bcs $01012e			bcs 	_ELVariable
.0100b5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100b8	b0 16		bcs $0100d0			bcs 	_ELConstant
.0100ba	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100bd	90 7f		bcc $01013e			bcc 	_ELStringConstant
.0100bf	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100c2	90 03		bcc $0100c7			bcc 	_ELConstantShift
.0100c4	82 94 00	brl $01015b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100c7					_ELConstantShift:
.0100c7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100ca	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100cc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ce	e6 06		inc $06				inc 	DCodePtr
.0100d0					_ELConstant:
.0100d0	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100d2	38		sec				sec  								; shift it in the range 0-32767
.0100d3	e9 00 40	sbc #$4000			sbc 	#$4000
.0100d6	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100d7	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100d9	6a		ror a				ror 	a 							; rotate that into the constant value
.0100da	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100dc	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100de	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100e0	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100e2	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100e4	e6 06		inc $06				inc 	DCodePtr
.0100e6					_ELGotAtom:
.0100e6	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100e8	a8		tay				tay 								; save in Y
.0100e9	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100ec	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100ef	d0 35		bne $010126			bne 	_ELExit
.0100f1	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.0100f3	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100f6	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.0100f8	98		tya				tya 								; get the keyword token back
.0100f9	29 00 1e	and #$1e00			and 	#15 << 9 					; mask out the precedence bits.
.0100fc	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.0100fe	90 26		bcc $010126			bcc 	_ELExit 					; precedence too low, then exit.
.010100	5a		phy				phy 								; save the binary operator on the stack
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010103	e6 06		inc $06				inc 	DCodePtr
.010105	18		clc				clc 								; try the next level up
.010106	69 00 02	adc #$0200			adc 	#1 << 9
.010109	e8		inx				inx 								; calculate the RHS at the next stack level.
.01010a	e8		inx				inx
.01010b	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.01010e	ca		dex				dex
.01010f	ca		dex				dex
.010110	7a		ply				ply 								; get operator token back into Y
.010111					_ELExecuteY:
.010111	98		tya				tya
.010112	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010115	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010116	9b		txy				txy 								; save X in Y
.010117	aa		tax				tax 								; double keyword ID in X
.010118	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01011c	bb		tyx				tyx 								; restore X.
.01011d	8f 22 01 01	sta $010122			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010121					_ELCallRoutine:
.010121	20 21 01	jsr $010121			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010124	80 c0		bra $0100e6			bra 	_ELGotAtom 					; go round operator level again.
.010126	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010128	0a		asl a				asl 	a
.010129	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01012b	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01012d	60		rts				rts
.01012e					_ELVariable:
.01012e	16 20		asl $20,x			asl 	EXSPrecType+0,x
.010130	20 ef 01	jsr $0101ef			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010133	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010135	94 10		sty $10,x			sty 	EXSValueH+0,x
.010137	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010139	80 ab		bra $0100e6			bra 	_ELGotAtom
.01013b					_ELSyntax
.01013b	82 bd 01	brl $0102fb			brl 	SyntaxError
.01013e					_ELStringConstant:
.01013e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010141	f0 f8		beq $01013b			beq 	_ELSyntax
.010143	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010145	1a		inc a				inc 	a
.010146	1a		inc a				inc 	a
.010147	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010149	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01014b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01014d	18		clc				clc 								; add to string constant.
.01014e	65 06		adc $06				adc 	DCodePtr
.010150	85 06		sta $06				sta 	DCodePtr
.010152	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010154	09 00 80	ora #$8000			ora 	#$8000
.010157	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010159	80 8b		bra $0100e6			bra 	_ELGotAtom
.01015b					_ELUnaryKeyword:
.01015b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01015d	a8		tay				tay 								; put the token in Y.
.01015e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010160	e6 06		inc $06				inc 	DCodePtr
.010162	29 00 1e	and #$1e00			and 	#$1E00 						; mask out the keyword type.
.010165	c9 00 10	cmp #$1000			cmp 	#$1000 						; if it is xxx1 000x then it's a unary function
.010168	f0 a7		beq $010111			beq 	_ELExecuteY					; go back and execute it
.01016a	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01016d	d0 11		bne $010180			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01016f	20 a6 01	jsr $0101a6			jsr 	EvaluateNext 				; evaluate the expression
.010172	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; consume the right bracket.
.010175					_ELCopy:
.010175	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010177	95 00		sta $00,x			sta 	EXSValueL+0,x
.010179	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01017b	95 10		sta $10,x			sta 	EXSValueH+0,x
.01017d	82 66 ff	brl $0100e6			brl 	_ELGotAtom 					; and continue.
.010180					_ELUnaryOperator:
.010180	5a		phy				phy 								; save the operator on the stack.
.010181	e8		inx				inx 								; this is like evaluate next
.010182	e8		inx				inx
.010183	a9 00 0e	lda #$0e00			lda 	#7<<9 						; except we use a very high precedence to make it atomic
.010186	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.010189	ca		dex				dex 								; unwind the stack.
.01018a	ca		dex				dex
.01018b	68		pla				pla 								; restore the unary operator.
.01018c	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01018f	f0 03		beq $010194			beq 	_ELMinus
.010191	4c fb 02	jmp $0102fb			jmp 	SyntaxError
.010194					_ELMinus:
.010194	38		sec				sec 								; do the negation calculation.
.010195	a9 00 00	lda #$0000			lda 	#0
.010198	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.01019a	95 00		sta $00,x			sta 	EXSValueL+0,x
.01019c	a9 00 00	lda #$0000			lda 	#0
.01019f	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101a1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101a3	82 40 ff	brl $0100e6			brl 	_ELGotAtom					; and continue.
.0101a6					EvaluateNext:
.0101a6	e8		inx				inx
.0101a7	e8		inx				inx
.0101a8	a9 00 00	lda #$0000			lda 	#0<<9
.0101ab	20 a9 00	jsr $0100a9			jsr 	EvaluateLevel
.0101ae	ca		dex				dex
.0101af	ca		dex				dex
.0101b0	60		rts				rts
.0101b1					EvaluateInteger:
.0101b1	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101b4	b0 01		bcs $0101b7			bcs 	EIType
.0101b6	60		rts				rts
.0101b7					EIType:
.0101b7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101ba	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101c2	78 70 65 63 74 65 64 00
.0101ca					EvaluateNextInteger:
.0101ca	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101cd	b0 e8		bcs $0101b7			bcs 	EIType
.0101cf	60		rts				rts
.0101d0					EvaluateString:
.0101d0	20 a3 00	jsr $0100a3			jsr 	Evaluate
.0101d3	90 01		bcc $0101d6			bcc 	ESType
.0101d5	60		rts				rts
.0101d6					ESType:
.0101d6	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0101d9	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextString:
.0101e9	20 a6 01	jsr $0101a6			jsr 	EvaluateNext
.0101ec	90 e8		bcc $0101d6			bcc 	ESType
.0101ee	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.0101ef					VariableAccessExpression:
.0101ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101f1	48		pha				pha
.0101f2	20 6c 02	jsr $01026c			jsr 	VariableFind 				; try to find the variable
.0101f5	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.0101f7	90 48		bcc $010241			bcc 	_VANError
.0101f9	68		pla				pla 								; get and save that first token
.0101fa	48		pha				pha
.0101fb	29 00 10	and #$1000			and 	#$1000 						; is it an array ?
.0101fe	f0 2d		beq $01022d			beq 	_VANNotArray
.010200	a5 1e		lda $1e				lda 	DVariablePtr 				; push the variable address on the stack as well.
.010202	48		pha				pha
.010203	20 ca 01	jsr $0101ca			jsr		EvaluateNextInteger 		; get the subscript
.010206	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; skip right bracket.
.010209	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01020c	d0 47		bne $010255			bne 	_VANSubscript
.01020e	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010210	f0 02		beq $010214			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010212	b0 41		bcs $010255			bcs 	_VANSubscript
.010214					_VANSubOkay:
.010214	0a		asl a				asl 	a 							; double lsword
.010215	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.010217	68		pla				pla 								; restore DVariablePtr
.010218	85 1e		sta $1e				sta 	DVariablePtr
.01021a	68		pla				pla 								; get and save that first token
.01021b	48		pha				pha
.01021c	29 00 20	and #$2000			and 	#$2000 						; is it a string ?
.01021f	d0 02		bne $010223			bne 	_VANNotString  				; if not, i.e. it is an integeer
.010221	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.010223					_VANNotString
.010223	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.010225	18		clc				clc 								; add 2 to get it past the high subscript
.010226	69 02 00	adc #$0002			adc 	#2
.010229	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01022b	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01022d					_VANNotArray:
.01022d	68		pla				pla 								; get the token back.
.01022e	29 00 20	and #$2000			and 	#$2000 						; this is the integer/string bit. $2000 if string, $0000 if int
.010231	49 00 20	eor #$2000			eor 	#$2000 						; now $0000 if string, $2000 if integer.
.010234	38		sec				sec 								; set up return string.
.010235	f0 06		beq $01023d			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010237	18		clc				clc 								; returning a number, read high data word
.010238	a0 02 00	ldy #$0002			ldy 	#2
.01023b	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.01023d					_VANLoadLower:
.01023d	a8		tay				tay 								; put A into Y (this is the high byte)
.01023e	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010240	60		rts				rts
.010241					_VANError:
.010241	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010244	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01024c	20 75 6e 6b 6e 6f 77 6e 00
.010255					_VANSubscript:
.010255	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010258	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010260	79 20 53 75 62 73 63 72 69 70 74 00
.01026c					VariableFind:
.01026c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01026e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010271	90 5c		bcc $0102cf			bcc 	_VFError
.010273	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010276	b0 11		bcs $010289			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010278	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01027b	3a		dec a				dec 	a 							; now 0-25
.01027c	0a		asl a				asl 	a 							; x 4 and clear carry
.01027d	0a		asl a				asl 	a
.01027e	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010281	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010283	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010285	e6 06		inc $06				inc 	DCodePtr
.010287	38		sec				sec 								; return with carry set.
.010288	60		rts				rts
.010289					_VFSlowVariable:
.010289	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01028b	29 00 30	and #$3000			and 	#$3000 						; get the type bits out --xx ---- ---- ----
.01028e	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01028f	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010290	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010293	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010295	85 08		sta $08				sta 	DTemp1
.010297	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010299	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01029c	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01029d	65 08		adc $08				adc 	DTemp1
.01029f	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102a1	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102a3					_VFNext:
.0102a3	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102a5	f0 26		beq $0102cd			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102a7	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102a9	a8		tay				tay 								; read the address of the name at $0002,y
.0102aa	b9 02 00	lda $0002,y			lda 	$0002,y
.0102ad	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102af	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102b2					_VFCompare:
.0102b2	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102b4	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102b6	d0 eb		bne $0102a3			bne 	_VFNext 					; if not, go to the next one.
.0102b8	c8		iny				iny 								; advance token pointer
.0102b9	c8		iny				iny
.0102ba	29 00 08	and #$0800			and 	#$0800 						; if continuation bit set, keep going
.0102bd	d0 f3		bne $0102b2			bne 	_VFCompare
.0102bf	98		tya				tya 								; this is the length of the word.
.0102c0	18		clc				clc 								; so we add it to the code pointer
.0102c1	65 06		adc $06				adc 	DCodePtr
.0102c3	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102c5	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102c7	18		clc				clc 								; four on is the actual data
.0102c8	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102cb	38		sec				sec 								; return with CS indicating success
.0102cc	60		rts				rts
.0102cd					_VFFail:
.0102cd	18		clc				clc
.0102ce	60		rts				rts
.0102cf					_VFError:
.0102cf	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102d2	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102da	76 61 72 69 61 62 6c 65 00
.0102e3					VariableCreate:
.0102e3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.0102e4					ErrorHandler:
.0102e4	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0102e6	fa		plx				plx 								; address of error message -1
.0102e7	ea		nop				nop
.0102e8	80 fe		bra $0102e8	_EH1:	bra 	_EH1
.0102ea					IllegalToken:
.0102ea	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102ed	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0102f5	54 6f 6b 65 6e 00
.0102fb					SyntaxError:
.0102fb	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0102fe	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010306	72 72 6f 72 00
.01030b					ExpectToken:
.01030b	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01030d	d0 05		bne $010314			bne 	_CTKError					; error if not
.01030f	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010311	e6 06		inc $06				inc 	DCodePtr
.010313	60		rts				rts
.010314					_CTKError:
.010314	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010317	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>01031f	74 6f 6b 65 6e 00
.010325					ExpectRightBracket:
.010325	48		pha				pha
.010326	a9 19 32	lda #$3219			lda 	#rparenTokenID
.010329	20 0b 03	jsr $01030b			jsr 	ExpectToken
.01032c	68		pla				pla
.01032d	60		rts				rts
.01032e					ExpectComma:
.01032e	48		pha				pha
.01032f	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010332	20 0b 03	jsr $01030b			jsr 	ExpectToken
.010335	68		pla				pla
.010336	60		rts				rts
.010337					CheckBothNumeric:
.010337	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.010339	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01033b	30 01		bmi $01033e			bmi 	_CBNFail 					; need to both be zero in bit 15
.01033d	60		rts				rts
.01033e					_CBNFail:
.01033e	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010341	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>010349	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010357					ResetTypeInteger:
.010357	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010359	29 ff 7f	and #$7fff			and 	#$7FFF
.01035c	95 20		sta $20,x			sta 	EXSPrecType+0,x
.01035e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.01035f					StringTempAllocate:
.01035f	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010362	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010365	18		clc				clc 								; this adds one, for the length.
.010366	65 16		adc $16				adc 	DTempStringPointer
.010368	85 16		sta $16				sta 	DTempStringPointer
.01036a	48		pha				pha
.01036b	a9 00 00	lda #$0000			lda 	#$0000
.01036e	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010370	92 16		sta ($16)			sta		(DTempStringPointer)
.010372	c2 20		rep #$20			rep 	#$20
.010374	68		pla				pla
.010375	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.010377	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010379	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01037b	60		rts				rts
.01037c					StringCreateCopy:
.01037c	a8		tay				tay 								; put pointer to string in Y
.01037d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010380	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010383	f0 17		beq $01039c			beq 	_SCCExit 					; do nothing if length zero.
.010385	da		phx				phx 								; save X and put the character count in X
.010386	aa		tax				tax
.010387	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010389					_SCCCopy:
.010389	c8		iny				iny 								; advance and read (first time skips length)
.01038a	b9 00 00	lda $0000,y			lda 	$0000,y
.01038d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01038f	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010391	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010393	1a		inc a				inc 	a
.010394	92 18		sta ($18)			sta 	(DStartTempString)
.010396	ca		dex				dex 								; do X times
.010397	d0 f0		bne $010389			bne 	_SCCCopy
.010399	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01039b	fa		plx				plx
.01039c					_SCCExit:
.01039c	60		rts				rts
.01039d					StringMakeConcrete:
.01039d	85 08		sta $08				sta 	DTemp1 						; source
.01039f	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0103a1	29 ff 00	and #$00ff			and 	#$00FF
.0103a4	48		pha				pha 								; save on stack.
.0103a5	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0103a8	18		clc				clc
.0103a9	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0103ac	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0103ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0103b0	85 0c		sta $0c				sta 	DTemp2 						; target
.0103b2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0103b3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0103b5					_SMCLoop:
.0103b5	b1 08		lda ($08),y			lda 	(DTemp1),y
.0103b7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0103b9	88		dey				dey
.0103ba	10 f9		bpl $0103b5			bpl 	_SMCLoop
.0103bc	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0103be	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0103c0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0103c1					Binary_Add:
.0103c1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0103c3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0103c5	30 12		bmi $0103d9		bmi 	_BATypeError
.0103c7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0103c9	30 3f		bmi $01040a		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0103cb	18		clc			clc
.0103cc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0103ce	75 02		adc $02,x		adc 	EXSValueL+2,x
.0103d0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0103d2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0103d4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0103d6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0103d8	60		rts			rts
.0103d9					_BATypeError:
.0103d9	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103dc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0103e4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0103f4	65 73 00
.0103f7					_BALengthError:
.0103f7	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0103fa	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010402	6f 6f 20 6c 6f 6e 67 00
.01040a					_BAConcatenateString:
.01040a	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.01040c	85 08		sta $08			sta 	DTemp1
.01040e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010410	85 0c		sta $0c			sta 	DTemp2
.010412	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010414	18		clc			clc 										; work out the total length
.010415	b2 08		lda ($08)		lda 	(DTemp1)
.010417	72 0c		adc ($0c)		adc 	(DTemp2)
.010419	b0 14		bcs $01042f		bcs 	_BAConcatLengthError 				; string is too long.
.01041b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01041d	20 5f 03	jsr $01035f		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010420	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010422	74 10		stz $10,x		stz 	EXSValueH+0,x
.010424	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010426	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.010429	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01042b	20 7c 03	jsr $01037c		jsr 	StringCreateCopy
.01042e	60		rts			rts
.01042f					_BAConcatLengthError:
.01042f	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010432	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01043a	6f 6f 20 6c 6f 6e 67 00
.010442					Binary_Subtract:
.010442	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010445	38		sec			sec
.010446	b5 00		lda $00,x		lda		EXSValueL+0,x
.010448	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01044a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01044c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01044e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010450	95 10		sta $10,x		sta 	EXSValueH+0,x
.010452	60		rts			rts
.010453					Binary_ShiftRight:
.010453	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010456	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010458	29 3f 00	and #$003f		and 	#63
.01045b	f0 07		beq $010464		beq		_Binary_SRExit
.01045d					_Binary_SRLoop:
.01045d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01045f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010461	3a		dec a			dec 	a
.010462	d0 f9		bne $01045d		bne 	_Binary_SRLoop
.010464					_Binary_SRExit:
.010464	60		rts			rts
.010465					Binary_ShiftLeft:
.010465	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010468	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01046a	29 3f 00	and #$003f		and 	#63
.01046d	f0 07		beq $010476		beq		_Binary_SLExit
.01046f					_Binary_SLLoop:
.01046f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010471	36 10		rol $10,x		rol 	EXSValueH+0,x
.010473	3a		dec a			dec 	a
.010474	d0 f9		bne $01046f		bne 	_Binary_SLLoop
.010476					_Binary_SLExit:
.010476	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010477					Binary_And:
.010477	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01047a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01047c	35 02		and $02,x		and 	EXSValueL+2,x
.01047e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010480	b5 10		lda $10,x		lda		EXSValueH+0,x
.010482	35 12		and $12,x		and 	EXSValueH+2,x
.010484	95 10		sta $10,x		sta 	EXSValueH+0,x
.010486	60		rts			rts
.010487					Binary_Or:
.010487	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01048a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01048c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01048e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010490	b5 10		lda $10,x		lda		EXSValueH+0,x
.010492	15 12		ora $12,x		ora 	EXSValueH+2,x
.010494	95 10		sta $10,x		sta 	EXSValueH+0,x
.010496	60		rts			rts
.010497					Binary_Xor:
.010497	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.01049a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01049c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01049e	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104a0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104a2	55 12		eor $12,x		eor 	EXSValueH+2,x
.0104a4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104a6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0104a7					Binary_Equals:
.0104a7	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104aa	b0 0e		bcs $0104ba		bcs 	_BEString
.0104ac	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104ae	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104b0	d0 4f		bne $010501		bne 	Compare_Fail
.0104b2	b5 10		lda $10,x		lda 	EXSValueH,x
.0104b4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104b6	d0 49		bne $010501		bne 	Compare_Fail
.0104b8	80 3f		bra $0104f9		bra 	Compare_Succeed
.0104ba					_BEString:
.0104ba	09 00 00	ora #$0000		ora 	#$0000
.0104bd	f0 3a		beq $0104f9		beq 	Compare_Succeed
.0104bf	80 40		bra $010501		bra 	Compare_Fail
.0104c1					Binary_NotEquals:
.0104c1	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104c4	b0 0e		bcs $0104d4		bcs 	_BNEString
.0104c6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0104c8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0104ca	d0 2d		bne $0104f9		bne 	Compare_Succeed
.0104cc	b5 10		lda $10,x		lda 	EXSValueH,x
.0104ce	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0104d0	d0 27		bne $0104f9		bne 	Compare_Succeed
.0104d2	80 2d		bra $010501		bra 	Compare_Fail
.0104d4					_BNEString:
.0104d4	09 00 00	ora #$0000		ora 	#$0000
.0104d7	d0 20		bne $0104f9		bne 	Compare_Succeed
.0104d9	80 26		bra $010501		bra 	Compare_Fail
.0104db					Binary_Less:
.0104db	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0104de	b0 12		bcs $0104f2		bcs 	_BLString
.0104e0	38		sec			sec
.0104e1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0104e3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104e5	b5 10		lda $10,x		lda 	EXSValueH,x
.0104e7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e9	50 03		bvc $0104ee		bvc 	*+5
.0104eb	49 00 80	eor #$8000		eor 	#$8000
.0104ee	30 09		bmi $0104f9		bmi 	Compare_Succeed
.0104f0	80 0f		bra $010501		bra 	Compare_Fail
.0104f2					_BLString:
.0104f2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0104f5	f0 02		beq $0104f9		beq 	Compare_Succeed
.0104f7	80 08		bra $010501		bra 	Compare_Fail
.0104f9					Compare_Succeed:
.0104f9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0104fc	95 00		sta $00,x		sta 	EXSValueL,x
.0104fe	95 10		sta $10,x		sta 	EXSValueH,x
.010500	60		rts			rts
.010501					Compare_Fail:
.010501	74 00		stz $00,x		stz 	EXSValueL,x
.010503	74 10		stz $10,x		stz 	EXSValueH,x
.010505	60		rts			rts
.010506					Binary_GreaterEqual:
.010506	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010509	b0 12		bcs $01051d		bcs 	_BGEString
.01050b	38		sec			sec
.01050c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.01050e	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010510	b5 10		lda $10,x		lda 	EXSValueH,x
.010512	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010514	50 03		bvc $010519		bvc 	*+5
.010516	49 00 80	eor #$8000		eor 	#$8000
.010519	10 de		bpl $0104f9		bpl 	Compare_Succeed
.01051b	80 e4		bra $010501		bra 	Compare_Fail
.01051d					_BGEString:
.01051d	09 00 00	ora #$0000		ora 	#$0000
.010520	10 d7		bpl $0104f9		bpl 	Compare_Succeed
.010522	80 dd		bra $010501		bra 	Compare_Fail
.010524					Binary_LessEqual:
.010524	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010527	b0 12		bcs $01053b		bcs 	_BLEString
.010529	18		clc			clc 									; numeric <= signed
.01052a	b5 00		lda $00,x		lda 	EXSValueL,x
.01052c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01052e	b5 10		lda $10,x		lda 	EXSValueH,x
.010530	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010532	50 03		bvc $010537		bvc 	*+5
.010534	49 00 80	eor #$8000		eor 	#$8000
.010537	30 c0		bmi $0104f9		bmi 	Compare_Succeed
.010539	80 c6		bra $010501		bra 	Compare_Fail
.01053b					_BLEString:
.01053b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01053e	d0 b9		bne $0104f9		bne 	Compare_Succeed
.010540	80 bf		bra $010501		bra 	Compare_Fail
.010542					Binary_Greater:
.010542	20 60 05	jsr $010560		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010545	b0 12		bcs $010559		bcs 	_BGString
.010547	18		clc			clc 									; numeric > signed
.010548	b5 00		lda $00,x		lda 	EXSValueL,x
.01054a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01054c	b5 10		lda $10,x		lda 	EXSValueH,x
.01054e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010550	50 03		bvc $010555		bvc 	*+5
.010552	49 00 80	eor #$8000		eor 	#$8000
.010555	10 a2		bpl $0104f9		bpl 	Compare_Succeed
.010557	80 a8		bra $010501		bra 	Compare_Fail
.010559					_BGString:
.010559	c9 01 00	cmp #$0001		cmp 	#$0001
.01055c	f0 9b		beq $0104f9		beq 	Compare_Succeed
.01055e	80 a1		bra $010501		bra 	Compare_Fail
.010560					CompareTypeCheck:
.010560	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010562	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010564	30 06		bmi $01056c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010566	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010568	30 1c		bmi $010586		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01056a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01056b	60		rts			rts
.01056c					_CTCFail:
.01056c	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>01056f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010577	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010586					_CTCStringCompare:
.010586	20 57 03	jsr $010357		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010589	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01058b	85 08		sta $08			sta 	DTemp1
.01058d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01058f	85 0c		sta $0c			sta 	DTemp2
.010591	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010594	a8		tay			tay
.010595	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010597	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010599	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01059b	90 02		bcc $01059f		bcc 	_CTCSmallest
.01059d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01059f					_CTCSmallest:
.01059f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0105a1					_CTCCompare:
.0105a1	c8		iny			iny 									; look at next character (done first, first char is size)
.0105a2	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0105a4	30 16		bmi $0105bc		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0105a6	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0105a8	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0105aa	f0 f5		beq $0105a1		beq 	_CTCCompare 					; if zero, try the next character.
.0105ac	b0 07		bcs $0105b5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0105ae					_CTCLess:
.0105ae	c2 20		rep #$20		rep 	#$20
.0105b0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0105b3	80 14		bra $0105c9		bra 	_CTCExit
.0105b5					_CTCGreater:
.0105b5	c2 20		rep #$20		rep 	#$20
.0105b7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0105ba	80 0d		bra $0105c9		bra 	_CTCExit
.0105bc					_CTCEqualSoFar:
.0105bc	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0105be	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0105c0	90 ec		bcc $0105ae		bcc 	_CTCLess
.0105c2	d0 f1		bne $0105b5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0105c4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0105c6	a9 00 00	lda #$0000		lda 	#$0000
.0105c9					_CTCExit:
.0105c9	38		sec			sec 									; return with CS indicating string comparison.
.0105ca	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0105cb					Binary_Divide:
.0105cb	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.0105ce	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0105d0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0105d2	d0 14		bne $0105e8		bne 	_BinaryDivide_Ok
.0105d4	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>0105d7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0105df	20 62 79 20 7a 65 72 6f 00
.0105e8					_BinaryDivide_Ok:
.0105e8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0105ea	64 0a		stz $0a			stz 	DTemp1+2
.0105ec	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0105ee	5a		phy			phy 										; save Y (bit counter)
.0105ef	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0105f1	10 07		bpl $0105fa		bpl 	_BinaryDivide_RightDone
.0105f3	e8		inx			inx
.0105f4	e8		inx			inx
.0105f5	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.0105f8	ca		dex			dex
.0105f9	ca		dex			dex
.0105fa					_BinaryDivide_RightDone:
.0105fa	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0105fc	10 03		bpl $010601		bpl 	_BinaryDivide_LeftDone
.0105fe	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.010601					_BinaryDivide_LeftDone:
.010601	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010604					_BinaryDivide_Loop:
.010604	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010606	36 10		rol $10,x		rol 	EXSValueH+0,x
.010608	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01060a	26 0a		rol $0a			rol 	DTemp1+2
.01060c	38		sec			sec											; calculate A-M
.01060d	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.01060f	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010611	85 0c		sta $0c			sta 	DTemp2
.010613	a5 0a		lda $0a			lda 	DTemp1+2
.010615	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010617	90 08		bcc $010621		bcc 	_Binary_NoSubract 					; if A < M skip this
.010619	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01061b	a5 0c		lda $0c			lda 	DTemp2
.01061d	85 08		sta $08			sta 	DTemp1+0
.01061f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010621					_Binary_NoSubract:
.010621	88		dey			dey 										; do it 32 times.
.010622	d0 e0		bne $010604		bne 	_BinaryDivide_Loop
.010624					_BinaryDivide_Exit:
.010624	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010626	29 01 00	and #$0001		and 	#1
.010629	f0 03		beq $01062e		beq 	_BinaryDivide_Exit2
.01062b	20 30 06	jsr $010630		jsr 	Binary_DivNegate
.01062e					_BinaryDivide_Exit2:
.01062e	7a		ply			ply 										; restore Y
.01062f	60		rts			rts
.010630					Binary_DivNegate:
.010630	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010632	38		sec			sec 										; negate the value at stack X.
.010633	a9 00 00	lda #$0000		lda 	#$0000
.010636	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010638	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063a	a9 00 00	lda #$0000		lda 	#$0000
.01063d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01063f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010641	60		rts			rts
.010642					Binary_Modulus:
.010642	20 cb 05	jsr $0105cb		jsr 	Binary_Divide 						; do the divide
.010645	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010647	95 00		sta $00,x		sta 	EXSValueL+0,x
.010649	a5 0a		lda $0a			lda 	DTemp1+2
.01064b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01064d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01064e					Binary_Multiply:
.01064e	20 37 03	jsr $010337		jsr 	CheckBothNumeric 					; check both values are numeric
.010651	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010653	85 08		sta $08			sta 	DTemp1
.010655	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010657	85 0a		sta $0a			sta		DTemp1+2
.010659	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01065b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01065d					_BinaryMultiply_Loop:
.01065d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01065f	05 0a		ora $0a			ora 	DTemp1+2
.010661	f0 1e		beq $010681		beq 	_BinaryMultiply_Exit
.010663	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010665	29 01 00	and #$0001		and 	#1
.010668	f0 0d		beq $010677		beq 	_BinaryMultiply_NoAdd
.01066a	18		clc			clc 										; add multiplicand to result.
.01066b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01066d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01066f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010671	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010673	75 12		adc $12,x		adc 	EXSValueH+2,x
.010675	95 10		sta $10,x		sta 	EXSValueH+0,x
.010677					_BinaryMultiply_NoAdd:
.010677	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010679	66 08		ror $08			ror 	DTemp1
.01067b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01067d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01067f	80 dc		bra $01065d		bra 	_BinaryMultiply_Loop 				; go round again.
.010681					_BinaryMultiply_Exit:
.010681	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010682					Function_Len:
.010682	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.010685	20 e9 01	jsr $0101e9			jsr 	EvaluateNextString 			; get the value you are absoluting
.010688	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.01068b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01068d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010690	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010693	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010695	74 10		stz $10,x			stz 	EXSValueH+0,x
.010697	60		rts				rts
.010698					Function_Abs:
.010698	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns an integer
.01069b	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01069e	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106a1	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0106a3	30 07		bmi $0106ac			bmi 	_FAbsNegative 				; negate it if negative
.0106a5	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0106a7	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0106a9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106ab	60		rts				rts
.0106ac					_FAbsNegative:
.0106ac	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0106ad	a9 00 00	lda #$0000			lda 	#0
.0106b0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0106b2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106b4	a9 00 00	lda #$0000			lda 	#0
.0106b7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0106b9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106bb	60		rts				rts
.0106bc					Function_Sgn:
.0106bc	20 57 03	jsr $010357			jsr 	ResetTypeInteger 			; returns integer
.0106bf	20 ca 01	jsr $0101ca			jsr 	EvaluateNextInteger 		; get an integer
.0106c2	20 25 03	jsr $010325			jsr 	ExpectRightBracket 			; check )
.0106c5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0106c7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0106c9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0106cb	30 07		bmi $0106d4			bmi 	_FSgnNegative 				; set to -1 if signed
.0106cd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0106cf	f0 02		beq $0106d3			beq 	_FSgnExit
.0106d1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0106d3					_FSgnExit:
.0106d3	60		rts				rts
.0106d4					_FSgnNegative:
.0106d4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0106d7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106d9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106db	60		rts				rts
.0106dc					Function_Random:
.0106dc	20 57 03	jsr $010357			jsr 	ResetTypeInteger
.0106df	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0106e1	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0106e3	d0 0a		bne $0106ef			bne 	_Rnd_NotZero
.0106e5	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0106e8	85 10		sta $10				sta 	DRandom
.0106ea	a9 ea 00	lda #$00ea			lda 	#$EA
.0106ed	85 12		sta $12				sta 	DRandom+2
.0106ef					_Rnd_NotZero:
.0106ef	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process 				; call randomiser twice
.0106f2	95 10		sta $10,x			sta 	EXSValueH+0,x
.0106f4	20 fa 06	jsr $0106fa			jsr 	_Rnd_Process
.0106f7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0106f9	60		rts				rts
.0106fa					_Rnd_Process:
.0106fa	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0106fc	26 12		rol $12				rol 	DRandom+2
.0106fe	90 0e		bcc $01070e			bcc 	_Rnd_Exit
.010700	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010702	49 54 d4	eor #$d454			eor 	#$D454
.010705	85 10		sta $10				sta 	DRandom
.010707	a5 12		lda $12				lda 	DRandom+2
.010709	49 d5 55	eor #$55d5			eor 	#$55D5
.01070c	85 12		sta $12				sta 	DRandom+2
.01070e					_Rnd_Exit:
.01070e	a5 10		lda $10				lda 	DRandom
.010710	45 12		eor $12				eor 	DRandom+2
.010712	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010713					Function_ASSERT:
.010713	20 b1 01	jsr $0101b1			jsr 	EvaluateInteger 			; something that returns an integer.
.010716	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010718	05 08		ora $08				ora 	Dtemp1
.01071a	f0 01		beq $01071d			beq 	_FAssFail
.01071c	60		rts				rts
.01071d					_FAssFail:
.01071d	20 e4 02	jsr $0102e4			jsr 	ErrorHandler 						; call error routine
>010720	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010728	61 69 6c 65 64 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.01072e					Function_Let:
.01072e	ea		nop				nop

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.01072f					Function_END:
.01072f	02 00		cop #$00			cop 	#0
.010731					Function_RUN:
.010731	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010733	18		clc				clc
.010734	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010737					_FRun_NextLineNumber:
.010737	a8		tay				tay 								; put in Y
.010738	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01073b	f0 f2		beq $01072f			beq 	Function_END 				; if zero, off the end of the program
.01073d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010740	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010742	98		tya				tya 								; get address back
.010743	18		clc				clc 								; skip over the link/line number
.010744	69 04 00	adc #$0004			adc 	#4
.010747	85 06		sta $06				sta 	DCodePtr
.010749					_FRun_NextInstruction:
.010749	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.01074c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01074e	38		sec				sec
.01074f	e9 00 01	sbc #$0100			sbc 	#256
.010752	85 16		sta $16				sta 	DTempStringPointer
.010754	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010756	f0 28		beq $010780			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010758	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.01075b	f0 18		beq $010775			beq 	_FRun_Colon
.01075d	a8		tay				tay 								; save in Y
.01075e	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 001x
.010761	c9 00 20	cmp #$2000			cmp 	#$2000
.010764	d0 15		bne $01077b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010766	98		tya				tya 								; get token back
.010767	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01076a	0a		asl a				asl 	a 							; double it into X
.01076b	aa		tax				tax
.01076c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01076e	e6 06		inc $06				inc 	DCodePtr
.010770	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010773	80 d4		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.010775					_FRun_Colon:
.010775	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010777	e6 06		inc $06				inc 	DCodePtr
.010779	80 ce		bra $010749			bra 	_FRun_NextInstruction 		; do the following instruction.
.01077b					_FRun_TryLET:
.01077b	20 2e 07	jsr $01072e			jsr 	Function_LET 				; try as a LET.
.01077e	80 c9		bra $010749			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010780					_FRun_EndInstruction:
.010780	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010782	1a		inc a				inc 	a 							; go to link for next line
.010783	1a		inc a				inc 	a
.010784	80 b1		bra $010737			bra 	_FRun_NextLineNumber

;******  Return to file: ../source/basic.asm

.010786					SwitchBasicInstance:
.010786	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010788	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01078b	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.01078d	86 02		stx $02				stx		DBaseAddress
.01078f	84 04		sty $04				sty 	DHighAddress
.010791	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010792	48		pha				pha 										; then copy it into B.
.010793	ab		plb				plb
.010794	ab		plb				plb
.010795	4c 31 07	jmp $010731			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	72 41 ce bf 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 4 times (64 bytes)...
>024068	00 00 00 00 00 00 00 00 00 00 00 00 fc fe ff ff
>024078	00 00 00 00 00 00 00 00 00 00 38 41 00 00 00 00
>024088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024098	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 41
>0240b8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240d8	00 00 00 00 00 00 46 41 00 00 00 00 00 00 00 00
>0240e8	00 00 00 00 00 00 66 41 00 00 00 00 00 00 00 00
>0240f8	00 00 00 00 00 00 00 00 20 00 0a 00 1b 3e 18 32
>024108	06 00 02 41 41 00 04 22 06 00 03 41 41 58 19 32
>024118	06 22 0b 24 01 40 00 00 0a 00 14 00 1b 3e f2 40
>024128	00 00 00 00 ee ee ee ee 00 00 fe bf d6 ff ff ff
>024138	30 41 fa bf ba 01 00 00 00 00 f8 bf f2 bf 40 41
>024148	ee bf ec bf 00 00 e4 bf 04 00 04 00 00 00 05 00
>024158	00 00 08 00 00 00 63 00 00 00 07 00 00 00 00 00
>024168	dc bf 02 00 da bf d4 bf ce bf 00 00 00 00 00 00
>024178	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2020 times (32320 bytes)...
>02bfc8	00 00 00 00 00 00 05 63 68 69 70 73 04 6c 69 6b
>02bfd8	65 00 01 49 97 fb 3f f8 3c fb 1b f0 2b db 3f d8
>02bfe8	05 dd 1d d0 01 21 ff ec 1a e0 05 48 65 6c 6c 6f
>02bff8	ff e4 41 cc 1d c0 41 c4
.02c000					CodeEndSpace:

;******  End of listing
