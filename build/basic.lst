
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 11 11:22:56 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 31 09 01	jmp $010931		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	5e 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	eb 04					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	fb 04					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	0b 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	4f 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	b6 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	1b 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	98 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	7a 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	35 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	35 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	b6 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	c2 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	3f 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	b6 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	c7 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	d9 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	50 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	30 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	0c 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	f6 06					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	5e 03					.word IllegalToken             & $FFFF ; token $3215 ","
>01002c	5e 03					.word IllegalToken             & $FFFF ; token $3216 ";"
>01002e	5e 03					.word IllegalToken             & $FFFF ; token $3217 ":"
>010030	5e 03					.word IllegalToken             & $FFFF ; token $3218 "("
>010032	5e 03					.word IllegalToken             & $FFFF ; token $3219 ")"
>010034	87 07					.word Function_Let             & $FFFF ; token $3e1a "let"
>010036	16 09					.word Function_ASSERT          & $FFFF ; token $3e1b "assert"
>010038	fc 07					.word Function_END             & $FFFF ; token $3e1c "end"
>01003a	fe 07					.word Function_RUN             & $FFFF ; token $3e1d "run"
>01003c	56 08					.word Function_CLEAR           & $FFFF ; token $3e1e "clear"
>01003e	a2 08					.word Function_Dim             & $FFFF ; token $3e1f "dim"
>010040	5e 03					.word IllegalToken             & $FFFF ; token $3c20 "while"
>010042	5e 03					.word IllegalToken             & $FFFF ; token $3a21 "wend"
.010044					TokenText:
>010044	02 26					 .text $02,"&"        ; token $2001
>010046	02 7c					 .text $02,"|"        ; token $2002
>010048	02 5e					 .text $02,"^"        ; token $2003
>01004a	12 3c					 .text $12,"<"        ; token $2204
>01004c	12 3e					 .text $12,">"        ; token $2205
>01004e	12 3d					 .text $12,"="        ; token $2206
>010050	13 3c 3d				 .text $13,"<="       ; token $2207
>010053	13 3e 3d				 .text $13,">="       ; token $2208
>010056	13 3c 3e				 .text $13,"<>"       ; token $2209
>010059	22 2b					 .text $22,"+"        ; token $240a
>01005b	22 2d					 .text $22,"-"        ; token $240b
>01005d	32 2a					 .text $32,"*"        ; token $260c
>01005f	32 2f					 .text $32,"/"        ; token $260d
>010061	32 25					 .text $32,"%"        ; token $260e
>010063	33 3e 3e				 .text $33,">>"       ; token $260f
>010066	33 3c 3c				 .text $33,"<<"       ; token $2610
>010069	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>01006f	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010074	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>010079	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>01007e	92 2c					 .text $92,","        ; token $3215
>010080	92 3b					 .text $92,";"        ; token $3216
>010082	92 3a					 .text $92,":"        ; token $3217
>010084	92 28					 .text $92,"("        ; token $3218
>010086	92 29					 .text $92,")"        ; token $3219
>010088	f4 6c 65 74				 .text $f4,"let"      ; token $3e1a
>01008c	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1b
>010093	f4 65 6e 64				 .text $f4,"end"      ; token $3e1c
>010097	f4 72 75 6e				 .text $f4,"run"      ; token $3e1d
>01009b	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1e
>0100a1	f4 64 69 6d				 .text $f4,"dim"      ; token $3e1f
>0100a5	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c20
>0100ab	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a21
>0100b0	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3215					commaTokenID                     = $3215
=$3216					semicolonTokenID                 = $3216
=$3217					colonTokenID                     = $3217
=$3218					lparenTokenID                    = $3218
=$3219					rparenTokenID                    = $3219
=$3e1a					letTokenID                       = $3e1a
=$3e1b					assertTokenID                    = $3e1b
=$3e1c					endTokenID                       = $3e1c
=$3e1d					runTokenID                       = $3e1d
=$3e1e					clearTokenID                     = $3e1e
=$3e1f					dimTokenID                       = $3e1f
=$3c20					whileTokenID                     = $3c20
=$3a21					wendTokenID                      = $3a21

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100b1					Evaluate:
.0100b1	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100b4	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100b7					EvaluateLevel:
.0100b7	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100ba	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100bc	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100be	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100c1	b0 79		bcs $01013c			bcs 	_ELVariable
.0100c3	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100c6	b0 16		bcs $0100de			bcs 	_ELConstant
.0100c8	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100cb	90 7f		bcc $01014c			bcc 	_ELStringConstant
.0100cd	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100d0	90 03		bcc $0100d5			bcc 	_ELConstantShift
.0100d2	82 94 00	brl $010169			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100d5					_ELConstantShift:
.0100d5	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100d8	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100da	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100dc	e6 06		inc $06				inc 	DCodePtr
.0100de					_ELConstant:
.0100de	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100e0	38		sec				sec  								; shift it in the range 0-32767
.0100e1	e9 00 40	sbc #$4000			sbc 	#$4000
.0100e4	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100e5	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100e7	6a		ror a				ror 	a 							; rotate that into the constant value
.0100e8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100ea	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100ec	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100ee	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0100f0	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0100f2	e6 06		inc $06				inc 	DCodePtr
.0100f4					_ELGotAtom:
.0100f4	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.0100f6	a8		tay				tay 								; save in Y
.0100f7	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.0100fa	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.0100fd	d0 35		bne $010134			bne 	_ELExit
.0100ff	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010101	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010104	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010106	98		tya				tya 								; get the keyword token back
.010107	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01010a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01010c	90 26		bcc $010134			bcc 	_ELExit 					; precedence too low, then exit.
.01010e	5a		phy				phy 								; save the binary operator on the stack
.01010f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010111	e6 06		inc $06				inc 	DCodePtr
.010113	18		clc				clc 								; try the next level up
.010114	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010117	e8		inx				inx 								; calculate the RHS at the next stack level.
.010118	e8		inx				inx
.010119	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.01011c	ca		dex				dex
.01011d	ca		dex				dex
.01011e	7a		ply				ply 								; get operator token back into Y
.01011f					_ELExecuteY:
.01011f	98		tya				tya
.010120	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010123	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010124	9b		txy				txy 								; save X in Y
.010125	aa		tax				tax 								; double keyword ID in X
.010126	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01012a	bb		tyx				tyx 								; restore X.
.01012b	8f 30 01 01	sta $010130			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01012f					_ELCallRoutine:
.01012f	20 2f 01	jsr $01012f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010132	80 c0		bra $0100f4			bra 	_ELGotAtom 					; go round operator level again.
.010134	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010136	0a		asl a				asl 	a
.010137	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010139	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01013b	60		rts				rts
.01013c					_ELVariable:
.01013c	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01013e	20 fd 01	jsr $0101fd			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010141	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010143	94 10		sty $10,x			sty 	EXSValueH+0,x
.010145	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010147	80 ab		bra $0100f4			bra 	_ELGotAtom
.010149					_ELSyntax
.010149	82 23 02	brl $01036f			brl 	SyntaxError
.01014c					_ELStringConstant:
.01014c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01014f	f0 f8		beq $010149			beq 	_ELSyntax
.010151	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010153	1a		inc a				inc 	a
.010154	1a		inc a				inc 	a
.010155	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010157	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010159	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01015b	18		clc				clc 								; add to string constant.
.01015c	65 06		adc $06				adc 	DCodePtr
.01015e	85 06		sta $06				sta 	DCodePtr
.010160	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010162	09 00 80	ora #$8000			ora 	#$8000
.010165	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010167	80 8b		bra $0100f4			bra 	_ELGotAtom
.010169					_ELUnaryKeyword:
.010169	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01016b	a8		tay				tay 								; put the token in Y.
.01016c	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01016e	e6 06		inc $06				inc 	DCodePtr
.010170	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010173	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010176	f0 a7		beq $01011f			beq 	_ELExecuteY					; go back and execute it
.010178	c0 18 32	cpy #$3218			cpy 	#lparenTokenID 				; is it an open bracket ?
.01017b	d0 11		bne $01018e			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01017d	20 b4 01	jsr $0101b4			jsr 	EvaluateNext 				; evaluate the expression
.010180	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; consume the right bracket.
.010183					_ELCopy:
.010183	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010185	95 00		sta $00,x			sta 	EXSValueL+0,x
.010187	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010189	95 10		sta $10,x			sta 	EXSValueH+0,x
.01018b	82 66 ff	brl $0100f4			brl 	_ELGotAtom 					; and continue.
.01018e					_ELUnaryOperator:
.01018e	5a		phy				phy 								; save the operator on the stack.
.01018f	e8		inx				inx 								; this is like evaluate next
.010190	e8		inx				inx
.010191	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.010194	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.010197	ca		dex				dex 								; unwind the stack.
.010198	ca		dex				dex
.010199	68		pla				pla 								; restore the unary operator.
.01019a	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.01019d	f0 03		beq $0101a2			beq 	_ELMinus
.01019f	4c 6f 03	jmp $01036f			jmp 	SyntaxError
.0101a2					_ELMinus:
.0101a2	38		sec				sec 								; do the negation calculation.
.0101a3	a9 00 00	lda #$0000			lda 	#0
.0101a6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101a8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101aa	a9 00 00	lda #$0000			lda 	#0
.0101ad	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101af	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101b1	82 40 ff	brl $0100f4			brl 	_ELGotAtom					; and continue.
.0101b4					EvaluateNext:
.0101b4	e8		inx				inx
.0101b5	e8		inx				inx
.0101b6	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101b9	20 b7 00	jsr $0100b7			jsr 	EvaluateLevel
.0101bc	ca		dex				dex
.0101bd	ca		dex				dex
.0101be	60		rts				rts
.0101bf					EvaluateInteger:
.0101bf	20 b1 00	jsr $0100b1			jsr 	Evaluate
.0101c2	b0 01		bcs $0101c5			bcs 	EIType
.0101c4	60		rts				rts
.0101c5					EIType:
.0101c5	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0101c8	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101d0	78 70 65 63 74 65 64 00
.0101d8					EvaluateNextInteger:
.0101d8	20 b4 01	jsr $0101b4			jsr 	EvaluateNext
.0101db	b0 e8		bcs $0101c5			bcs 	EIType
.0101dd	60		rts				rts
.0101de					EvaluateString:
.0101de	20 b1 00	jsr $0100b1			jsr 	Evaluate
.0101e1	90 01		bcc $0101e4			bcc 	ESType
.0101e3	60		rts				rts
.0101e4					ESType:
.0101e4	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0101e7	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0101ef	78 70 65 63 74 65 64 00
.0101f7					EvaluateNextString:
.0101f7	20 b4 01	jsr $0101b4			jsr 	EvaluateNext
.0101fa	90 e8		bcc $0101e4			bcc 	ESType
.0101fc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.0101fd					VariableAccessExpression:
.0101fd	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.0101ff	48		pha				pha
.010200	20 3e 02	jsr $01023e			jsr 	VariableFind 				; try to find the variables
.010203	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010205	90 23		bcc $01022a			bcc 	_VANError
.010207	68		pla				pla 								; get and save that first token
.010208	48		pha				pha
.010209	a8		tay				tay 								; put first token in Y.
.01020a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01020d	f0 07		beq $010216			beq 	_VANNotArray
.01020f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010211	20 b5 02	jsr $0102b5			jsr 	VariableSubscript			; index calculation
.010214	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010216					_VANNotArray:
.010216	68		pla				pla 								; get the token back.
.010217	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01021a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01021d	38		sec				sec 								; set up return string.
.01021e	f0 06		beq $010226			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010220	18		clc				clc 								; returning a number, read high data word
.010221	a0 02 00	ldy #$0002			ldy 	#2
.010224	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010226					_VANLoadLower:
.010226	a8		tay				tay 								; put A into Y (this is the high byte)
.010227	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010229	60		rts				rts
.01022a					_VANError:
.01022a	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>01022d	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010235	20 75 6e 6b 6e 6f 77 6e 00
.01023e					VariableFind:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010240	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010243	90 5c		bcc $0102a1			bcc 	_VFError
.010245	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010248	b0 11		bcs $01025b			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01024a	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01024d	3a		dec a				dec 	a 							; now 0-25
.01024e	0a		asl a				asl 	a 							; x 4 and clear carry
.01024f	0a		asl a				asl 	a
.010250	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010253	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010255	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010257	e6 06		inc $06				inc 	DCodePtr
.010259	38		sec				sec 								; return with carry set.
.01025a	60		rts				rts
.01025b					_VFSlowVariable:
.01025b	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01025d	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010260	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010261	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010262	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010265	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010267	85 08		sta $08				sta 	DTemp1
.010269	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01026b	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01026e	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01026f	65 08		adc $08				adc 	DTemp1
.010271	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010273	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010275					_VFNext:
.010275	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010277	f0 26		beq $01029f			beq 	_VFFail 					; if zero, then it's the end of the list.
.010279	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01027b	a8		tay				tay 								; read the address of the name at $0002,y
.01027c	b9 02 00	lda $0002,y			lda 	$0002,y
.01027f	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010281	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010284					_VFCompare:
.010284	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010286	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010288	d0 eb		bne $010275			bne 	_VFNext 					; if not, go to the next one.
.01028a	c8		iny				iny 								; advance token pointer
.01028b	c8		iny				iny
.01028c	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.01028f	d0 f3		bne $010284			bne 	_VFCompare
.010291	98		tya				tya 								; this is the length of the word.
.010292	18		clc				clc 								; so we add it to the code pointer
.010293	65 06		adc $06				adc 	DCodePtr
.010295	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.010297	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.010299	18		clc				clc 								; four on is the actual data
.01029a	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.01029d	38		sec				sec 								; return with CS indicating success
.01029e	60		rts				rts
.01029f					_VFFail:
.01029f	18		clc				clc
.0102a0	60		rts				rts
.0102a1					_VFError:
.0102a1	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0102a4	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102ac	76 61 72 69 61 62 6c 65 00
.0102b5					VariableSubscript:
.0102b5	5a		phy				phy 								; save token on stack
.0102b6	48		pha				pha		 							; save variable address on stack.
.0102b7	20 d8 01	jsr $0101d8			jsr		EvaluateNextInteger 		; get the subscript
.0102ba	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; skip right bracket.
.0102bd	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102c0	d0 1d		bne $0102df			bne 	_VANSubscript
.0102c2	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102c4	f0 02		beq $0102c8			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102c6	b0 17		bcs $0102df			bcs 	_VANSubscript
.0102c8					_VANSubOkay:
.0102c8	0a		asl a				asl 	a 							; double lsword
.0102c9	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102cb	68		pla				pla 								; restore DVariablePtr
.0102cc	85 1e		sta $1e				sta 	DVariablePtr
.0102ce	68		pla				pla 								; get and save that first token
.0102cf	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102d2	d0 02		bne $0102d6			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102d4	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102d6					_VANNotString
.0102d6	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102d8	18		clc				clc 								; add 2 to get it past the high subscript
.0102d9	69 02 00	adc #$0002			adc 	#2
.0102dc	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102de	60		rts				rts
.0102df					_VANSubscript:
.0102df	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0102e2	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102ea	79 20 53 75 62 73 63 72 69 70 74 00
.0102f6					VariableCreate:
.0102f6	48		pha				pha 								; save count.
.0102f7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0102fa	29 00 20	and #$2000			and 	#IDTypeMask
.0102fd	f0 06		beq $010305			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0102ff	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010302	18		clc				clc
.010303	65 02		adc $02				adc 	DBaseAddress
.010305					_VCIsInteger:
.010305	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010307	68		pla				pla 								; restore count
.010308	48		pha				pha
.010309	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01030a	0a		asl a				asl 	a 							; 2 x # items.
.01030b					_VCNotSingle:
.01030b	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01030d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010310	48		pha				pha 								; save on stack
.010311	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010314	d0 02		bne $010318			bne 	_VCString
.010316	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010318					_VCString:
.010318	68		pla				pla 								; restore first token.
.010319	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01031c	f0 04		beq $010322			beq 	_VCNotArray
.01031e	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010320	e6 08		inc $08				inc 	DTemp1
.010322					_VCNotArray:
.010322	5a		phy				phy 								; save address of token on stack.
.010323	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010326	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010328	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01032a	18		clc				clc 								; add 4 for link and name.
.01032b	69 04 00	adc #$0004			adc 	#4
.01032e	65 08		adc $08				adc 	DTemp1 						; add memory required
.010330	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010332	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010334					_VCErase:
.010334	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010336	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010339	c8		iny				iny
.01033a	c8		iny				iny
.01033b	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01033d	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.01033f	d0 f3		bne $010334			bne 	_VCErase
.010341	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010343	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010345	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010348	68		pla				pla 								; restore the token address
.010349	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01034c	68		pla				pla 								; restore count and store.
.01034d	99 04 00	sta $0004,y			sta 	$0004,y
.010350					_VCNotArray2:
.010350	98		tya				tya 								; update the head link
.010351	92 20		sta ($20)			sta 	(DHashTablePtr)
.010353	18		clc				clc 								; advance pointer to the data bit.
.010354	69 04 00	adc #$0004			adc 	#4
.010357	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010358					ErrorHandler:
.010358	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01035a	fa		plx				plx 								; address of error message -1
.01035b	ea		nop				nop
.01035c	80 fe		bra $01035c	_EH1:	bra 	_EH1
.01035e					IllegalToken:
.01035e	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>010361	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010369	54 6f 6b 65 6e 00
.01036f					SyntaxError:
.01036f	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>010372	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01037a	72 72 6f 72 00
.01037f					ExpectToken:
.01037f	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010381	d0 05		bne $010388			bne 	_CTKError					; error if not
.010383	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010385	e6 06		inc $06				inc 	DCodePtr
.010387	60		rts				rts
.010388					_CTKError:
.010388	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>01038b	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>010393	74 6f 6b 65 6e 00
.010399					ExpectRightBracket:
.010399	48		pha				pha
.01039a	a9 19 32	lda #$3219			lda 	#rparenTokenID
.01039d	20 7f 03	jsr $01037f			jsr 	ExpectToken
.0103a0	68		pla				pla
.0103a1	60		rts				rts
.0103a2					ExpectComma:
.0103a2	48		pha				pha
.0103a3	a9 15 32	lda #$3215			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103a6	20 7f 03	jsr $01037f			jsr 	ExpectToken
.0103a9	68		pla				pla
.0103aa	60		rts				rts
.0103ab					CheckBothNumeric:
.0103ab	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103ad	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103af	30 01		bmi $0103b2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103b1	60		rts				rts
.0103b2					_CBNFail:
.0103b2	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0103b5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103bd	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103cb					ResetTypeInteger:
.0103cb	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103cd	29 ff 7f	and #$7fff			and 	#$7FFF
.0103d0	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103d2	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103d3					StringTempAllocate:
.0103d3	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103d6	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103d9	18		clc				clc 								; this adds one, for the length.
.0103da	65 16		adc $16				adc 	DTempStringPointer
.0103dc	85 16		sta $16				sta 	DTempStringPointer
.0103de	48		pha				pha
.0103df	a9 00 00	lda #$0000			lda 	#$0000
.0103e2	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103e4	92 16		sta ($16)			sta		(DTempStringPointer)
.0103e6	c2 20		rep #$20			rep 	#$20
.0103e8	68		pla				pla
.0103e9	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103eb	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103ed	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.0103ef	60		rts				rts
.0103f0					StringCreateCopy:
.0103f0	a8		tay				tay 								; put pointer to string in Y
.0103f1	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.0103f4	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.0103f7	f0 17		beq $010410			beq 	_SCCExit 					; do nothing if length zero.
.0103f9	da		phx				phx 								; save X and put the character count in X
.0103fa	aa		tax				tax
.0103fb	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.0103fd					_SCCCopy:
.0103fd	c8		iny				iny 								; advance and read (first time skips length)
.0103fe	b9 00 00	lda $0000,y			lda 	$0000,y
.010401	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010403	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010405	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010407	1a		inc a				inc 	a
.010408	92 18		sta ($18)			sta 	(DStartTempString)
.01040a	ca		dex				dex 								; do X times
.01040b	d0 f0		bne $0103fd			bne 	_SCCCopy
.01040d	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01040f	fa		plx				plx
.010410					_SCCExit:
.010410	60		rts				rts
.010411					StringMakeConcrete:
.010411	85 08		sta $08				sta 	DTemp1 						; source
.010413	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010415	29 ff 00	and #$00ff			and 	#$00FF
.010418	48		pha				pha 								; save on stack.
.010419	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.01041c	18		clc				clc
.01041d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010420	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010422	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010424	85 0c		sta $0c				sta 	DTemp2 						; target
.010426	7a		ply				ply 								; get length copy from here until Y goes -ve
.010427	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.010429					_SMCLoop:
.010429	b1 08		lda ($08),y			lda 	(DTemp1),y
.01042b	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01042d	88		dey				dey
.01042e	10 f9		bpl $010429			bpl 	_SMCLoop
.010430	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010432	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010434	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010435					Binary_Add:
.010435	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010437	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010439	30 12		bmi $01044d		bmi 	_BATypeError
.01043b	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01043d	30 3f		bmi $01047e		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01043f	18		clc			clc
.010440	b5 00		lda $00,x		lda		EXSValueL+0,x
.010442	75 02		adc $02,x		adc 	EXSValueL+2,x
.010444	95 00		sta $00,x		sta 	EXSValueL+0,x
.010446	b5 10		lda $10,x		lda		EXSValueH+0,x
.010448	75 12		adc $12,x		adc 	EXSValueH+2,x
.01044a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01044c	60		rts			rts
.01044d					_BATypeError:
.01044d	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>010450	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010458	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010468	65 73 00
.01046b					_BALengthError:
.01046b	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>01046e	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010476	6f 6f 20 6c 6f 6e 67 00
.01047e					_BAConcatenateString:
.01047e	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010480	85 08		sta $08			sta 	DTemp1
.010482	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010484	85 0c		sta $0c			sta 	DTemp2
.010486	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010488	18		clc			clc 										; work out the total length
.010489	b2 08		lda ($08)		lda 	(DTemp1)
.01048b	72 0c		adc ($0c)		adc 	(DTemp2)
.01048d	b0 14		bcs $0104a3		bcs 	_BAConcatLengthError 				; string is too long.
.01048f	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010491	20 d3 03	jsr $0103d3		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010494	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.010496	74 10		stz $10,x		stz 	EXSValueH+0,x
.010498	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01049a	20 f0 03	jsr $0103f0		jsr 	StringCreateCopy
.01049d	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01049f	20 f0 03	jsr $0103f0		jsr 	StringCreateCopy
.0104a2	60		rts			rts
.0104a3					_BAConcatLengthError:
.0104a3	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0104a6	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104ae	6f 6f 20 6c 6f 6e 67 00
.0104b6					Binary_Subtract:
.0104b6	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0104b9	38		sec			sec
.0104ba	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104bc	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104be	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104c0	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104c2	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104c4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104c6	60		rts			rts
.0104c7					Binary_ShiftRight:
.0104c7	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0104ca	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104cc	29 3f 00	and #$003f		and 	#63
.0104cf	f0 07		beq $0104d8		beq		_Binary_SRExit
.0104d1					_Binary_SRLoop:
.0104d1	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104d3	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104d5	3a		dec a			dec 	a
.0104d6	d0 f9		bne $0104d1		bne 	_Binary_SRLoop
.0104d8					_Binary_SRExit:
.0104d8	60		rts			rts
.0104d9					Binary_ShiftLeft:
.0104d9	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0104dc	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104de	29 3f 00	and #$003f		and 	#63
.0104e1	f0 07		beq $0104ea		beq		_Binary_SLExit
.0104e3					_Binary_SLLoop:
.0104e3	16 00		asl $00,x		asl 	EXSValueL+0,x
.0104e5	36 10		rol $10,x		rol 	EXSValueH+0,x
.0104e7	3a		dec a			dec 	a
.0104e8	d0 f9		bne $0104e3		bne 	_Binary_SLLoop
.0104ea					_Binary_SLExit:
.0104ea	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.0104eb					Binary_And:
.0104eb	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0104ee	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104f0	35 02		and $02,x		and 	EXSValueL+2,x
.0104f2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104f4	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104f6	35 12		and $12,x		and 	EXSValueH+2,x
.0104f8	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104fa	60		rts			rts
.0104fb					Binary_Or:
.0104fb	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0104fe	b5 00		lda $00,x		lda		EXSValueL+0,x
.010500	15 02		ora $02,x		ora 	EXSValueL+2,x
.010502	95 00		sta $00,x		sta 	EXSValueL+0,x
.010504	b5 10		lda $10,x		lda		EXSValueH+0,x
.010506	15 12		ora $12,x		ora 	EXSValueH+2,x
.010508	95 10		sta $10,x		sta 	EXSValueH+0,x
.01050a	60		rts			rts
.01050b					Binary_Xor:
.01050b	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.01050e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010510	55 02		eor $02,x		eor 	EXSValueL+2,x
.010512	95 00		sta $00,x		sta 	EXSValueL+0,x
.010514	b5 10		lda $10,x		lda		EXSValueH+0,x
.010516	55 12		eor $12,x		eor 	EXSValueH+2,x
.010518	95 10		sta $10,x		sta 	EXSValueH+0,x
.01051a	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.01051b					Binary_Equals:
.01051b	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01051e	b0 0e		bcs $01052e		bcs 	_BEString
.010520	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010522	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010524	d0 4f		bne $010575		bne 	Compare_Fail
.010526	b5 10		lda $10,x		lda 	EXSValueH,x
.010528	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01052a	d0 49		bne $010575		bne 	Compare_Fail
.01052c	80 3f		bra $01056d		bra 	Compare_Succeed
.01052e					_BEString:
.01052e	09 00 00	ora #$0000		ora 	#$0000
.010531	f0 3a		beq $01056d		beq 	Compare_Succeed
.010533	80 40		bra $010575		bra 	Compare_Fail
.010535					Binary_NotEquals:
.010535	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010538	b0 0e		bcs $010548		bcs 	_BNEString
.01053a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01053c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01053e	d0 2d		bne $01056d		bne 	Compare_Succeed
.010540	b5 10		lda $10,x		lda 	EXSValueH,x
.010542	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010544	d0 27		bne $01056d		bne 	Compare_Succeed
.010546	80 2d		bra $010575		bra 	Compare_Fail
.010548					_BNEString:
.010548	09 00 00	ora #$0000		ora 	#$0000
.01054b	d0 20		bne $01056d		bne 	Compare_Succeed
.01054d	80 26		bra $010575		bra 	Compare_Fail
.01054f					Binary_Less:
.01054f	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010552	b0 12		bcs $010566		bcs 	_BLString
.010554	38		sec			sec
.010555	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010557	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010559	b5 10		lda $10,x		lda 	EXSValueH,x
.01055b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01055d	50 03		bvc $010562		bvc 	*+5
.01055f	49 00 80	eor #$8000		eor 	#$8000
.010562	30 09		bmi $01056d		bmi 	Compare_Succeed
.010564	80 0f		bra $010575		bra 	Compare_Fail
.010566					_BLString:
.010566	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010569	f0 02		beq $01056d		beq 	Compare_Succeed
.01056b	80 08		bra $010575		bra 	Compare_Fail
.01056d					Compare_Succeed:
.01056d	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010570	95 00		sta $00,x		sta 	EXSValueL,x
.010572	95 10		sta $10,x		sta 	EXSValueH,x
.010574	60		rts			rts
.010575					Compare_Fail:
.010575	74 00		stz $00,x		stz 	EXSValueL,x
.010577	74 10		stz $10,x		stz 	EXSValueH,x
.010579	60		rts			rts
.01057a					Binary_GreaterEqual:
.01057a	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01057d	b0 12		bcs $010591		bcs 	_BGEString
.01057f	38		sec			sec
.010580	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010582	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010584	b5 10		lda $10,x		lda 	EXSValueH,x
.010586	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010588	50 03		bvc $01058d		bvc 	*+5
.01058a	49 00 80	eor #$8000		eor 	#$8000
.01058d	10 de		bpl $01056d		bpl 	Compare_Succeed
.01058f	80 e4		bra $010575		bra 	Compare_Fail
.010591					_BGEString:
.010591	09 00 00	ora #$0000		ora 	#$0000
.010594	10 d7		bpl $01056d		bpl 	Compare_Succeed
.010596	80 dd		bra $010575		bra 	Compare_Fail
.010598					Binary_LessEqual:
.010598	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01059b	b0 12		bcs $0105af		bcs 	_BLEString
.01059d	18		clc			clc 									; numeric <= signed
.01059e	b5 00		lda $00,x		lda 	EXSValueL,x
.0105a0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a2	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a4	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a6	50 03		bvc $0105ab		bvc 	*+5
.0105a8	49 00 80	eor #$8000		eor 	#$8000
.0105ab	30 c0		bmi $01056d		bmi 	Compare_Succeed
.0105ad	80 c6		bra $010575		bra 	Compare_Fail
.0105af					_BLEString:
.0105af	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105b2	d0 b9		bne $01056d		bne 	Compare_Succeed
.0105b4	80 bf		bra $010575		bra 	Compare_Fail
.0105b6					Binary_Greater:
.0105b6	20 d4 05	jsr $0105d4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105b9	b0 12		bcs $0105cd		bcs 	_BGString
.0105bb	18		clc			clc 									; numeric > signed
.0105bc	b5 00		lda $00,x		lda 	EXSValueL,x
.0105be	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105c0	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c2	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105c4	50 03		bvc $0105c9		bvc 	*+5
.0105c6	49 00 80	eor #$8000		eor 	#$8000
.0105c9	10 a2		bpl $01056d		bpl 	Compare_Succeed
.0105cb	80 a8		bra $010575		bra 	Compare_Fail
.0105cd					_BGString:
.0105cd	c9 01 00	cmp #$0001		cmp 	#$0001
.0105d0	f0 9b		beq $01056d		beq 	Compare_Succeed
.0105d2	80 a1		bra $010575		bra 	Compare_Fail
.0105d4					CompareTypeCheck:
.0105d4	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105d6	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105d8	30 06		bmi $0105e0		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105da	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105dc	30 1c		bmi $0105fa		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105de	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0105df	60		rts			rts
.0105e0					_CTCFail:
.0105e0	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0105e3	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0105eb	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0105fa					_CTCStringCompare:
.0105fa	20 cb 03	jsr $0103cb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0105fd	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0105ff	85 08		sta $08			sta 	DTemp1
.010601	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010603	85 0c		sta $0c			sta 	DTemp2
.010605	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010608	a8		tay			tay
.010609	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01060b	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01060d	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01060f	90 02		bcc $010613		bcc 	_CTCSmallest
.010611	b2 0c		lda ($0c)		lda 	(DTemp2)
.010613					_CTCSmallest:
.010613	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010615					_CTCCompare:
.010615	c8		iny			iny 									; look at next character (done first, first char is size)
.010616	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010618	30 16		bmi $010630		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01061a	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01061c	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01061e	f0 f5		beq $010615		beq 	_CTCCompare 					; if zero, try the next character.
.010620	b0 07		bcs $010629		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010622					_CTCLess:
.010622	c2 20		rep #$20		rep 	#$20
.010624	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010627	80 14		bra $01063d		bra 	_CTCExit
.010629					_CTCGreater:
.010629	c2 20		rep #$20		rep 	#$20
.01062b	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01062e	80 0d		bra $01063d		bra 	_CTCExit
.010630					_CTCEqualSoFar:
.010630	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010632	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010634	90 ec		bcc $010622		bcc 	_CTCLess
.010636	d0 f1		bne $010629		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010638	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01063a	a9 00 00	lda #$0000		lda 	#$0000
.01063d					_CTCExit:
.01063d	38		sec			sec 									; return with CS indicating string comparison.
.01063e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.01063f					Binary_Divide:
.01063f	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.010642	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010644	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010646	d0 14		bne $01065c		bne 	_BinaryDivide_Ok
.010648	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>01064b	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010653	20 62 79 20 7a 65 72 6f 00
.01065c					_BinaryDivide_Ok:
.01065c	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.01065e	64 0a		stz $0a			stz 	DTemp1+2
.010660	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010662	5a		phy			phy 										; save Y (bit counter)
.010663	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010665	10 07		bpl $01066e		bpl 	_BinaryDivide_RightDone
.010667	e8		inx			inx
.010668	e8		inx			inx
.010669	20 a4 06	jsr $0106a4		jsr 	Binary_DivNegate
.01066c	ca		dex			dex
.01066d	ca		dex			dex
.01066e					_BinaryDivide_RightDone:
.01066e	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010670	10 03		bpl $010675		bpl 	_BinaryDivide_LeftDone
.010672	20 a4 06	jsr $0106a4		jsr 	Binary_DivNegate
.010675					_BinaryDivide_LeftDone:
.010675	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010678					_BinaryDivide_Loop:
.010678	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01067a	36 10		rol $10,x		rol 	EXSValueH+0,x
.01067c	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01067e	26 0a		rol $0a			rol 	DTemp1+2
.010680	38		sec			sec											; calculate A-M
.010681	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010683	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010685	85 0c		sta $0c			sta 	DTemp2
.010687	a5 0a		lda $0a			lda 	DTemp1+2
.010689	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01068b	90 08		bcc $010695		bcc 	_Binary_NoSubract 					; if A < M skip this
.01068d	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01068f	a5 0c		lda $0c			lda 	DTemp2
.010691	85 08		sta $08			sta 	DTemp1+0
.010693	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010695					_Binary_NoSubract:
.010695	88		dey			dey 										; do it 32 times.
.010696	d0 e0		bne $010678		bne 	_BinaryDivide_Loop
.010698					_BinaryDivide_Exit:
.010698	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01069a	29 01 00	and #$0001		and 	#1
.01069d	f0 03		beq $0106a2		beq 	_BinaryDivide_Exit2
.01069f	20 a4 06	jsr $0106a4		jsr 	Binary_DivNegate
.0106a2					_BinaryDivide_Exit2:
.0106a2	7a		ply			ply 										; restore Y
.0106a3	60		rts			rts
.0106a4					Binary_DivNegate:
.0106a4	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106a6	38		sec			sec 										; negate the value at stack X.
.0106a7	a9 00 00	lda #$0000		lda 	#$0000
.0106aa	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106ac	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106ae	a9 00 00	lda #$0000		lda 	#$0000
.0106b1	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106b3	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106b5	60		rts			rts
.0106b6					Binary_Modulus:
.0106b6	20 3f 06	jsr $01063f		jsr 	Binary_Divide 						; do the divide
.0106b9	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106bb	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106bd	a5 0a		lda $0a			lda 	DTemp1+2
.0106bf	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106c1	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106c2					Binary_Multiply:
.0106c2	20 ab 03	jsr $0103ab		jsr 	CheckBothNumeric 					; check both values are numeric
.0106c5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106c7	85 08		sta $08			sta 	DTemp1
.0106c9	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106cb	85 0a		sta $0a			sta		DTemp1+2
.0106cd	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106cf	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106d1					_BinaryMultiply_Loop:
.0106d1	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106d3	05 0a		ora $0a			ora 	DTemp1+2
.0106d5	f0 1e		beq $0106f5		beq 	_BinaryMultiply_Exit
.0106d7	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106d9	29 01 00	and #$0001		and 	#1
.0106dc	f0 0d		beq $0106eb		beq 	_BinaryMultiply_NoAdd
.0106de	18		clc			clc 										; add multiplicand to result.
.0106df	b5 00		lda $00,x		lda 	EXSValueL+0,x
.0106e1	75 02		adc $02,x		adc 	EXSValueL+2,x
.0106e3	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106e5	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106e7	75 12		adc $12,x		adc 	EXSValueH+2,x
.0106e9	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106eb					_BinaryMultiply_NoAdd:
.0106eb	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.0106ed	66 08		ror $08			ror 	DTemp1
.0106ef	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.0106f1	36 12		rol $12,x		rol 	EXSValueH+2,x
.0106f3	80 dc		bra $0106d1		bra 	_BinaryMultiply_Loop 				; go round again.
.0106f5					_BinaryMultiply_Exit:
.0106f5	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.0106f6					Function_Len:
.0106f6	20 cb 03	jsr $0103cb			jsr 	ResetTypeInteger 			; returns an integer
.0106f9	20 f7 01	jsr $0101f7			jsr 	EvaluateNextString 			; get the value you are absoluting
.0106fc	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; check )
.0106ff	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010701	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010704	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010707	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010709	74 10		stz $10,x			stz 	EXSValueH+0,x
.01070b	60		rts				rts
.01070c					Function_Abs:
.01070c	20 cb 03	jsr $0103cb			jsr 	ResetTypeInteger 			; returns an integer
.01070f	20 d8 01	jsr $0101d8			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010712	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; check )
.010715	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010717	30 07		bmi $010720			bmi 	_FAbsNegative 				; negate it if negative
.010719	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01071b	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01071d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01071f	60		rts				rts
.010720					_FAbsNegative:
.010720	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010721	a9 00 00	lda #$0000			lda 	#0
.010724	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010726	95 00		sta $00,x			sta 	EXSValueL+0,x
.010728	a9 00 00	lda #$0000			lda 	#0
.01072b	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01072d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01072f	60		rts				rts
.010730					Function_Sgn:
.010730	20 cb 03	jsr $0103cb			jsr 	ResetTypeInteger 			; returns integer
.010733	20 d8 01	jsr $0101d8			jsr 	EvaluateNextInteger 		; get an integer
.010736	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; check )
.010739	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01073b	74 10		stz $10,x			stz 	EXSValueH+0,x
.01073d	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.01073f	30 07		bmi $010748			bmi 	_FSgnNegative 				; set to -1 if signed
.010741	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010743	f0 02		beq $010747			beq 	_FSgnExit
.010745	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010747					_FSgnExit:
.010747	60		rts				rts
.010748					_FSgnNegative:
.010748	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01074b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01074d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01074f	60		rts				rts
.010750					Function_Random:
.010750	20 cb 03	jsr $0103cb			jsr 	ResetTypeInteger
.010753	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010755	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010757	d0 0a		bne $010763			bne 	_Rnd_NotZero
.010759	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01075c	85 10		sta $10				sta 	DRandom
.01075e	a9 ea 00	lda #$00ea			lda 	#$EA
.010761	85 12		sta $12				sta 	DRandom+2
.010763					_Rnd_NotZero:
.010763	20 6e 07	jsr $01076e			jsr 	_Rnd_Process 				; call randomiser twice
.010766	95 10		sta $10,x			sta 	EXSValueH+0,x
.010768	20 6e 07	jsr $01076e			jsr 	_Rnd_Process
.01076b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01076d	60		rts				rts
.01076e					_Rnd_Process:
.01076e	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010770	26 12		rol $12				rol 	DRandom+2
.010772	90 0e		bcc $010782			bcc 	_Rnd_Exit
.010774	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010776	49 54 d4	eor #$d454			eor 	#$D454
.010779	85 10		sta $10				sta 	DRandom
.01077b	a5 12		lda $12				lda 	DRandom+2
.01077d	49 d5 55	eor #$55d5			eor 	#$55D5
.010780	85 12		sta $12				sta 	DRandom+2
.010782					_Rnd_Exit:
.010782	a5 10		lda $10				lda 	DRandom
.010784	45 12		eor $12				eor 	DRandom+2
.010786	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.010787					Function_Let:
.010787	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010789	48		pha				pha
.01078a	20 3e 02	jsr $01023e			jsr 	VariableFind 				; find the variable
.01078d	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01078f	b0 1c		bcs $0107ad			bcs 	_FLetFound 					; skip if found.
.010791	68		pla				pla 								; get and push the first token again.
.010792	48		pha				pha
.010793	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010796	d0 51		bne $0107e9			bne 	_FLError					; arrays, so this causes an error.
.010798	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01079a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01079d	20 f6 02	jsr $0102f6			jsr 	VariableCreate 				; create it.
.0107a0	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0107a2					_FLSkipToken:
.0107a2	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0107a4	e6 06		inc $06				inc 	DCodePtr
.0107a6	e6 06		inc $06				inc 	DCodePtr
.0107a8	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0107ab	d0 f5		bne $0107a2			bne 	_FLSkipToken
.0107ad					_FLetFound:
.0107ad	68		pla				pla 								; get and save the first token.
.0107ae	48		pha				pha
.0107af	a8		tay				tay 								; put it in Y
.0107b0	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0107b3	f0 07		beq $0107bc			beq 	_FLetNotArray
.0107b5	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0107b7	20 b5 02	jsr $0102b5			jsr 	VariableSubscript			; index calculation
.0107ba	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0107bc					_FLetNotArray:
.0107bc	7a		ply				ply 								; get the first token into Y
.0107bd	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0107bf	48		pha				pha
.0107c0	5a		phy				phy 								; save the first token on the stack.
.0107c1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0107c4	20 7f 03	jsr $01037f			jsr 	ExpectToken
.0107c7	68		pla				pla 								; restore the first token.
.0107c8	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0107cb	d0 0f		bne $0107dc			bne 	_FLetString 				; skip if string.
.0107cd	20 bf 01	jsr $0101bf			jsr 	EvaluateInteger 			; get an integer
.0107d0	7a		ply				ply 								; get address in Y
.0107d1	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0107d3	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107d6	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.0107d8	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0107db	60		rts				rts
.0107dc					_FLetString:
.0107dc	20 de 01	jsr $0101de			jsr 	EvaluateString 				; get a string.
.0107df	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0107e1	20 11 04	jsr $010411			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0107e4	7a		ply				ply 								; get address
.0107e5	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0107e8	60		rts				rts
.0107e9					_FLError:
.0107e9	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0107ec	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0107f4	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.0107fc					Function_END:
.0107fc	02 00		cop #$00			cop 	#0
.0107fe					Function_RUN:
.0107fe	20 56 08	jsr $010856			jsr 	Function_CLEAR 				; clear all variables.
.010801	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010803	18		clc				clc
.010804	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010807					_FRun_NextLineNumber:
.010807	a8		tay				tay 								; put in Y
.010808	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.01080b	f0 ef		beq $0107fc			beq 	Function_END 				; if zero, off the end of the program
.01080d	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010810	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010812	98		tya				tya 								; get address back
.010813	18		clc				clc 								; skip over the link/line number
.010814	69 04 00	adc #$0004			adc 	#4
.010817	85 06		sta $06				sta 	DCodePtr
.010819					_FRun_NextInstruction:
.010819	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.01081c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.01081e	38		sec				sec
.01081f	e9 00 01	sbc #$0100			sbc 	#256
.010822	85 16		sta $16				sta 	DTempStringPointer
.010824	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010826	f0 28		beq $010850			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010828	c9 17 32	cmp #$3217			cmp 	#colonTokenID 				; colon then skip
.01082b	f0 18		beq $010845			beq 	_FRun_Colon
.01082d	a8		tay				tay 								; save in Y
.01082e	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010831	c9 00 20	cmp #$2000			cmp 	#$2000
.010834	d0 15		bne $01084b			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010836	98		tya				tya 								; get token back
.010837	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01083a	0a		asl a				asl 	a 							; double it into X
.01083b	aa		tax				tax
.01083c	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01083e	e6 06		inc $06				inc 	DCodePtr
.010840	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010843	80 d4		bra $010819			bra 	_FRun_NextInstruction 		; do the following instruction.
.010845					_FRun_Colon:
.010845	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010847	e6 06		inc $06				inc 	DCodePtr
.010849	80 ce		bra $010819			bra 	_FRun_NextInstruction 		; do the following instruction.
.01084b					_FRun_TryLET:
.01084b	20 87 07	jsr $010787			jsr 	Function_LET 				; try as a LET.
.01084e	80 c9		bra $010819			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010850					_FRun_EndInstruction:
.010850	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010852	1a		inc a				inc 	a 							; go to link for next line
.010853	1a		inc a				inc 	a
.010854	80 b1		bra $010807			bra 	_FRun_NextLineNumber
.010856					Function_CLEAR:
.010856	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.010859	a9 00 00	lda #$0000			lda 	#$0000
.01085c	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01085e	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010860	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010863	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010865	20 8c 08	jsr $01088c			jsr 	FindCodeEnd 				; find where the program ends.
.010868	a8		tay				tay 								; Y points to it.
.010869	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01086c	99 02 00	sta $0002,y			sta 	$0002,y
.01086f	99 04 00	sta $0004,y			sta 	$0004,y
.010872	98		tya				tya 								; start of working memory up
.010873	18		clc				clc
.010874	69 06 00	adc #$0006			adc 	#6
.010877	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.01087a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01087c	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01087f					_FCLoop:
.01087f	a9 00 00	lda #$0000			lda 	#$0000
.010882	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010884	c8		iny				iny
.010885	c8		iny				iny
.010886	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010889	d0 f4		bne $01087f			bne 	_FCLoop
.01088b	60		rts				rts
.01088c					FindCodeEnd:
.01088c	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01088f	18		clc				clc
.010890	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010892	a8		tay				tay
.010893					_FCELoop:
.010893	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010896	f0 08		beq $0108a0			beq 	_FCEExit
.010898	98		tya				tya 								; add offset
.010899	18		clc				clc
.01089a	79 00 00	adc $0000,y			adc 	$0000,y
.01089d	a8		tay				tay
.01089e	80 f3		bra $010893			bra 	_FCELoop
.0108a0					_FCEExit:
.0108a0	98		tya				tya 								; return in A
.0108a1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0108a2					Function_Dim:
.0108a2	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0108a4	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0108a7	f0 3b		beq $0108e4			beq		_FDIMNotArray 				; no, error.
.0108a9	20 3e 02	jsr $01023e			jsr 	VariableFind 				; try to find it.
.0108ac	b0 41		bcs $0108ef			bcs 	_FDIMExists 				; if it does, that's an error.
.0108ae	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0108b0	48		pha				pha
.0108b1	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0108b3	48		pha				pha
.0108b4					_FDIMSkip:
.0108b4	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0108b6	e6 06		inc $06				inc 	DCodePtr
.0108b8	e6 06		inc $06				inc 	DCodePtr
.0108ba	29 00 08	and #$0800			and 	#IDContMask
.0108bd	d0 f5		bne $0108b4			bne 	_FDIMSkip
.0108bf	20 bf 01	jsr $0101bf			jsr 	EvaluateInteger 			; evaluate the size
.0108c2	20 99 03	jsr $010399			jsr 	ExpectRightBracket 			; check the ) following.
.0108c5	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0108c8	d0 3b		bne $010905			bne 	_FDIMSize
.0108ca	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0108cd	f0 36		beq $010905			beq 	_FDIMSize
.0108cf	7a		ply				ply 								; restore HashTablePtr
.0108d0	84 20		sty $20				sty 	DHashTablePtr
.0108d2	7a		ply				ply 								; so now A is the high index, Y points to the token
.0108d3	20 f6 02	jsr $0102f6			jsr 	VariableCreate 				; create the variable.
.0108d6	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0108d8	c9 15 32	cmp #$3215			cmp 	#commaTokenID 				; if not a comma, exit
.0108db	d0 06		bne $0108e3			bne 	_FDIMExit
.0108dd	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0108df	e6 06		inc $06				inc 	DCodePtr
.0108e1	80 bf		bra $0108a2			bra 	Function_DIM 				; and do another
.0108e3					_FDIMExit:
.0108e3	60		rts				rts
.0108e4					_FDIMNotArray:
.0108e4	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0108e7	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0108ef					_FDIMExists:
.0108ef	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>0108f2	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0108fa	65 64 69 6d 65 6e 73 69 6f 6e 00
.010905					_FDIMSize:
.010905	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>010908	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010910	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010916					Function_ASSERT:
.010916	20 bf 01	jsr $0101bf			jsr 	EvaluateInteger 			; something that returns an integer.
.010919	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.01091b	05 08		ora $08				ora 	Dtemp1
.01091d	f0 01		beq $010920			beq 	_FAssFail
.01091f	60		rts				rts
.010920					_FAssFail:
.010920	20 58 03	jsr $010358			jsr 	ErrorHandler 						; call error routine
>010923	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>01092b	61 69 6c 65 64 00

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010931					SwitchBasicInstance:
.010931	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010933	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010936	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010938	86 02		stx $02				stx		DBaseAddress
.01093a	84 04		sty $04				sty 	DHighAddress
.01093c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.01093d	48		pha				pha 										; then copy it into B.
.01093e	ab		plb				plb
.01093f	ab		plb				plb
.010940	4c fe 07	jmp $0107fe			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	06 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 00 00 ee ee ee ee 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2030 times (32480 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
