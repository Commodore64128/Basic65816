
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 11 21:28:01 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 35 0b 01	jmp $010b35		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	6f 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	0c 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	1c 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	2c 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	70 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	d7 05					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	3c 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	b9 05					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	9b 05					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	56 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	56 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	d7 04					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e3 06					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	60 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	d7 06					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	e8 04					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	fa 04					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	71 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	51 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	2d 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	17 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	a8 07					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	6f 03					.word IllegalToken             & $FFFF ; token $3216 ","
>01002e	6f 03					.word IllegalToken             & $FFFF ; token $3217 ";"
>010030	6f 03					.word IllegalToken             & $FFFF ; token $3218 ":"
>010032	6f 03					.word IllegalToken             & $FFFF ; token $3219 "("
>010034	6f 03					.word IllegalToken             & $FFFF ; token $321a ")"
>010036	fd 08					.word Function_Let             & $FFFF ; token $3e1b "let"
>010038	1a 0b					.word Function_ASSERT          & $FFFF ; token $3e1c "assert"
>01003a	72 09					.word Function_END             & $FFFF ; token $3e1d "end"
>01003c	74 09					.word Function_RUN             & $FFFF ; token $3e1e "run"
>01003e	cc 09					.word Function_CLEAR           & $FFFF ; token $3e1f "clear"
>010040	18 0a					.word Function_Dim             & $FFFF ; token $3e20 "dim"
>010042	8c 0a					.word Function_COLLECT         & $FFFF ; token $3e21 "collect"
>010044	6f 03					.word IllegalToken             & $FFFF ; token $3c22 "while"
>010046	6f 03					.word IllegalToken             & $FFFF ; token $3a23 "wend"
.010048					TokenText:
>010048	02 26					 .text $02,"&"        ; token $2001
>01004a	02 7c					 .text $02,"|"        ; token $2002
>01004c	02 5e					 .text $02,"^"        ; token $2003
>01004e	12 3c					 .text $12,"<"        ; token $2204
>010050	12 3e					 .text $12,">"        ; token $2205
>010052	12 3d					 .text $12,"="        ; token $2206
>010054	13 3c 3d				 .text $13,"<="       ; token $2207
>010057	13 3e 3d				 .text $13,">="       ; token $2208
>01005a	13 3c 3e				 .text $13,"<>"       ; token $2209
>01005d	22 2b					 .text $22,"+"        ; token $240a
>01005f	22 2d					 .text $22,"-"        ; token $240b
>010061	32 2a					 .text $32,"*"        ; token $260c
>010063	32 2f					 .text $32,"/"        ; token $260d
>010065	32 25					 .text $32,"%"        ; token $260e
>010067	33 3e 3e				 .text $33,">>"       ; token $260f
>01006a	33 3c 3c				 .text $33,"<<"       ; token $2610
>01006d	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010073	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>010078	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01007d	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010082	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010087	92 2c					 .text $92,","        ; token $3216
>010089	92 3b					 .text $92,";"        ; token $3217
>01008b	92 3a					 .text $92,":"        ; token $3218
>01008d	92 28					 .text $92,"("        ; token $3219
>01008f	92 29					 .text $92,")"        ; token $321a
>010091	f4 6c 65 74				 .text $f4,"let"      ; token $3e1b
>010095	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1c
>01009c	f4 65 6e 64				 .text $f4,"end"      ; token $3e1d
>0100a0	f4 72 75 6e				 .text $f4,"run"      ; token $3e1e
>0100a4	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e1f
>0100aa	f4 64 69 6d				 .text $f4,"dim"      ; token $3e20
>0100ae	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e21
>0100b6	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c22
>0100bc	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a23
>0100c1	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3216					commaTokenID                     = $3216
=$3217					semicolonTokenID                 = $3217
=$3218					colonTokenID                     = $3218
=$3219					lparenTokenID                    = $3219
=$321a					rparenTokenID                    = $321a
=$3e1b					letTokenID                       = $3e1b
=$3e1c					assertTokenID                    = $3e1c
=$3e1d					endTokenID                       = $3e1d
=$3e1e					runTokenID                       = $3e1e
=$3e1f					clearTokenID                     = $3e1f
=$3e20					dimTokenID                       = $3e20
=$3e21					collectTokenID                   = $3e21
=$3c22					whileTokenID                     = $3c22
=$3a23					wendTokenID                      = $3a23

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0100c2					Evaluate:
.0100c2	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0100c5	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0100c8					EvaluateLevel:
.0100c8	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.0100cb	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0100cd	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0100cf	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0100d2	b0 79		bcs $01014d			bcs 	_ELVariable
.0100d4	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0100d7	b0 16		bcs $0100ef			bcs 	_ELConstant
.0100d9	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0100dc	90 7f		bcc $01015d			bcc 	_ELStringConstant
.0100de	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0100e1	90 03		bcc $0100e6			bcc 	_ELConstantShift
.0100e3	82 94 00	brl $01017a			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0100e6					_ELConstantShift:
.0100e6	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0100e9	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0100eb	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0100ed	e6 06		inc $06				inc 	DCodePtr
.0100ef					_ELConstant:
.0100ef	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0100f1	38		sec				sec  								; shift it in the range 0-32767
.0100f2	e9 00 40	sbc #$4000			sbc 	#$4000
.0100f5	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0100f6	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0100f8	6a		ror a				ror 	a 							; rotate that into the constant value
.0100f9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0100fb	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0100fd	95 10		sta $10,x			sta 	EXSValueH+0,x
.0100ff	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010101	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010103	e6 06		inc $06				inc 	DCodePtr
.010105					_ELGotAtom:
.010105	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010107	a8		tay				tay 								; save in Y
.010108	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01010b	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01010e	d0 35		bne $010145			bne 	_ELExit
.010110	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010112	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010115	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010117	98		tya				tya 								; get the keyword token back
.010118	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01011b	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01011d	90 26		bcc $010145			bcc 	_ELExit 					; precedence too low, then exit.
.01011f	5a		phy				phy 								; save the binary operator on the stack
.010120	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010122	e6 06		inc $06				inc 	DCodePtr
.010124	18		clc				clc 								; try the next level up
.010125	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010128	e8		inx				inx 								; calculate the RHS at the next stack level.
.010129	e8		inx				inx
.01012a	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.01012d	ca		dex				dex
.01012e	ca		dex				dex
.01012f	7a		ply				ply 								; get operator token back into Y
.010130					_ELExecuteY:
.010130	98		tya				tya
.010131	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010134	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010135	9b		txy				txy 								; save X in Y
.010136	aa		tax				tax 								; double keyword ID in X
.010137	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01013b	bb		tyx				tyx 								; restore X.
.01013c	8f 41 01 01	sta $010141			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010140					_ELCallRoutine:
.010140	20 40 01	jsr $010140			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010143	80 c0		bra $010105			bra 	_ELGotAtom 					; go round operator level again.
.010145	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010147	0a		asl a				asl 	a
.010148	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01014a	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01014c	60		rts				rts
.01014d					_ELVariable:
.01014d	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01014f	20 0e 02	jsr $01020e			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010152	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010154	94 10		sty $10,x			sty 	EXSValueH+0,x
.010156	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010158	80 ab		bra $010105			bra 	_ELGotAtom
.01015a					_ELSyntax
.01015a	82 23 02	brl $010380			brl 	SyntaxError
.01015d					_ELStringConstant:
.01015d	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010160	f0 f8		beq $01015a			beq 	_ELSyntax
.010162	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010164	1a		inc a				inc 	a
.010165	1a		inc a				inc 	a
.010166	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010168	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.01016a	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01016c	18		clc				clc 								; add to string constant.
.01016d	65 06		adc $06				adc 	DCodePtr
.01016f	85 06		sta $06				sta 	DCodePtr
.010171	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.010173	09 00 80	ora #$8000			ora 	#$8000
.010176	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010178	80 8b		bra $010105			bra 	_ELGotAtom
.01017a					_ELUnaryKeyword:
.01017a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01017c	a8		tay				tay 								; put the token in Y.
.01017d	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01017f	e6 06		inc $06				inc 	DCodePtr
.010181	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010184	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010187	f0 a7		beq $010130			beq 	_ELExecuteY					; go back and execute it
.010189	c0 19 32	cpy #$3219			cpy 	#lparenTokenID 				; is it an open bracket ?
.01018c	d0 11		bne $01019f			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01018e	20 c5 01	jsr $0101c5			jsr 	EvaluateNext 				; evaluate the expression
.010191	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; consume the right bracket.
.010194					_ELCopy:
.010194	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010196	95 00		sta $00,x			sta 	EXSValueL+0,x
.010198	b5 12		lda $12,x			lda 	EXSValueH+2,x
.01019a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01019c	82 66 ff	brl $010105			brl 	_ELGotAtom 					; and continue.
.01019f					_ELUnaryOperator:
.01019f	5a		phy				phy 								; save the operator on the stack.
.0101a0	e8		inx				inx 								; this is like evaluate next
.0101a1	e8		inx				inx
.0101a2	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101a5	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.0101a8	ca		dex				dex 								; unwind the stack.
.0101a9	ca		dex				dex
.0101aa	68		pla				pla 								; restore the unary operator.
.0101ab	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101ae	f0 03		beq $0101b3			beq 	_ELMinus
.0101b0	4c 80 03	jmp $010380			jmp 	SyntaxError
.0101b3					_ELMinus:
.0101b3	38		sec				sec 								; do the negation calculation.
.0101b4	a9 00 00	lda #$0000			lda 	#0
.0101b7	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101b9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101bb	a9 00 00	lda #$0000			lda 	#0
.0101be	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101c0	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101c2	82 40 ff	brl $010105			brl 	_ELGotAtom					; and continue.
.0101c5					EvaluateNext:
.0101c5	e8		inx				inx
.0101c6	e8		inx				inx
.0101c7	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0101ca	20 c8 00	jsr $0100c8			jsr 	EvaluateLevel
.0101cd	ca		dex				dex
.0101ce	ca		dex				dex
.0101cf	60		rts				rts
.0101d0					EvaluateInteger:
.0101d0	20 c2 00	jsr $0100c2			jsr 	Evaluate
.0101d3	b0 01		bcs $0101d6			bcs 	EIType
.0101d5	60		rts				rts
.0101d6					EIType:
.0101d6	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0101d9	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0101e1	78 70 65 63 74 65 64 00
.0101e9					EvaluateNextInteger:
.0101e9	20 c5 01	jsr $0101c5			jsr 	EvaluateNext
.0101ec	b0 e8		bcs $0101d6			bcs 	EIType
.0101ee	60		rts				rts
.0101ef					EvaluateString:
.0101ef	20 c2 00	jsr $0100c2			jsr 	Evaluate
.0101f2	90 01		bcc $0101f5			bcc 	ESType
.0101f4	60		rts				rts
.0101f5					ESType:
.0101f5	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0101f8	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010200	78 70 65 63 74 65 64 00
.010208					EvaluateNextString:
.010208	20 c5 01	jsr $0101c5			jsr 	EvaluateNext
.01020b	90 e8		bcc $0101f5			bcc 	ESType
.01020d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01020e					VariableAccessExpression:
.01020e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010210	48		pha				pha
.010211	20 4f 02	jsr $01024f			jsr 	VariableFind 				; try to find the variables
.010214	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010216	90 23		bcc $01023b			bcc 	_VANError
.010218	68		pla				pla 								; get and save that first token
.010219	48		pha				pha
.01021a	a8		tay				tay 								; put first token in Y.
.01021b	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01021e	f0 07		beq $010227			beq 	_VANNotArray
.010220	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A,first token is in Y
.010222	20 c6 02	jsr $0102c6			jsr 	VariableSubscript			; index calculation
.010225	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010227					_VANNotArray:
.010227	68		pla				pla 								; get the token back.
.010228	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01022b	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01022e	38		sec				sec 								; set up return string.
.01022f	f0 06		beq $010237			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010231	18		clc				clc 								; returning a number, read high data word
.010232	a0 02 00	ldy #$0002			ldy 	#2
.010235	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010237					_VANLoadLower:
.010237	a8		tay				tay 								; put A into Y (this is the high byte)
.010238	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01023a	60		rts				rts
.01023b					_VANError:
.01023b	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01023e	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010246	20 75 6e 6b 6e 6f 77 6e 00
.01024f					VariableFind:
.01024f	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010251	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010254	90 5c		bcc $0102b2			bcc 	_VFError
.010256	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010259	b0 11		bcs $01026c			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01025b	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01025e	3a		dec a				dec 	a 							; now 0-25
.01025f	0a		asl a				asl 	a 							; x 4 and clear carry
.010260	0a		asl a				asl 	a
.010261	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010264	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010266	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010268	e6 06		inc $06				inc 	DCodePtr
.01026a	38		sec				sec 								; return with carry set.
.01026b	60		rts				rts
.01026c					_VFSlowVariable:
.01026c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01026e	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.010271	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010272	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010273	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010276	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010278	85 08		sta $08				sta 	DTemp1
.01027a	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01027c	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01027f	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010280	65 08		adc $08				adc 	DTemp1
.010282	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010284	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010286					_VFNext:
.010286	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010288	f0 26		beq $0102b0			beq 	_VFFail 					; if zero, then it's the end of the list.
.01028a	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01028c	a8		tay				tay 								; read the address of the name at $0002,y
.01028d	b9 02 00	lda $0002,y			lda 	$0002,y
.010290	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010292	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.010295					_VFCompare:
.010295	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010297	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010299	d0 eb		bne $010286			bne 	_VFNext 					; if not, go to the next one.
.01029b	c8		iny				iny 								; advance token pointer
.01029c	c8		iny				iny
.01029d	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102a0	d0 f3		bne $010295			bne 	_VFCompare
.0102a2	98		tya				tya 								; this is the length of the word.
.0102a3	18		clc				clc 								; so we add it to the code pointer
.0102a4	65 06		adc $06				adc 	DCodePtr
.0102a6	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102a8	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102aa	18		clc				clc 								; four on is the actual data
.0102ab	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102ae	38		sec				sec 								; return with CS indicating success
.0102af	60		rts				rts
.0102b0					_VFFail:
.0102b0	18		clc				clc
.0102b1	60		rts				rts
.0102b2					_VFError:
.0102b2	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0102b5	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102bd	76 61 72 69 61 62 6c 65 00
.0102c6					VariableSubscript:
.0102c6	5a		phy				phy 								; save token on stack
.0102c7	48		pha				pha		 							; save variable address on stack.
.0102c8	20 e9 01	jsr $0101e9			jsr		EvaluateNextInteger 		; get the subscript
.0102cb	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; skip right bracket.
.0102ce	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0102d1	d0 1d		bne $0102f0			bne 	_VANSubscript
.0102d3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0102d5	f0 02		beq $0102d9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0102d7	b0 17		bcs $0102f0			bcs 	_VANSubscript
.0102d9					_VANSubOkay:
.0102d9	0a		asl a				asl 	a 							; double lsword
.0102da	85 08		sta $08				sta 	DTemp1	 					; 2 x subscript in DTemp1
.0102dc	68		pla				pla 								; restore DVariablePtr
.0102dd	85 1e		sta $1e				sta 	DVariablePtr
.0102df	68		pla				pla 								; get and save that first token
.0102e0	29 00 20	and #$2000			and 	#IDTypeMask 				; is it a string ?
.0102e3	d0 02		bne $0102e7			bne 	_VANNotString  				; if not, i.e. it is an integeer
.0102e5	06 08		asl $08				asl 	DTemp1 						; double subscript again (32 bit word)
.0102e7					_VANNotString
.0102e7	a5 1e		lda $1e				lda 	DVariablePtr 				; variable address
.0102e9	18		clc				clc 								; add 2 to get it past the high subscript
.0102ea	69 02 00	adc #$0002			adc 	#2
.0102ed	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0102ef	60		rts				rts
.0102f0					_VANSubscript:
.0102f0	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0102f3	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0102fb	79 20 53 75 62 73 63 72 69 70 74 00
.010307					VariableCreate:
.010307	48		pha				pha 								; save count.
.010308	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01030b	29 00 20	and #$2000			and 	#IDTypeMask
.01030e	f0 06		beq $010316			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010310	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010313	18		clc				clc
.010314	65 02		adc $02				adc 	DBaseAddress
.010316					_VCIsInteger:
.010316	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010318	68		pla				pla 								; restore count
.010319	48		pha				pha
.01031a	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01031b	0a		asl a				asl 	a 							; 2 x # items.
.01031c					_VCNotSingle:
.01031c	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01031e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010321	48		pha				pha 								; save on stack
.010322	29 00 20	and #$2000			and 	#IDTypeMask 				; check type
.010325	d0 02		bne $010329			bne 	_VCString
.010327	06 08		asl $08				asl 	DTemp1 						; if integer, then 4 x # items.
.010329					_VCString:
.010329	68		pla				pla 								; restore first token.
.01032a	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.01032d	f0 04		beq $010333			beq 	_VCNotArray
.01032f	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.010331	e6 08		inc $08				inc 	DTemp1
.010333					_VCNotArray:
.010333	5a		phy				phy 								; save address of token on stack.
.010334	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010337	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010339	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01033b	18		clc				clc 								; add 4 for link and name.
.01033c	69 04 00	adc #$0004			adc 	#4
.01033f	65 08		adc $08				adc 	DTemp1 						; add memory required
.010341	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010343	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010345					_VCErase:
.010345	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010347	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01034a	c8		iny				iny
.01034b	c8		iny				iny
.01034c	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.01034e	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010350	d0 f3		bne $010345			bne 	_VCErase
.010352	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010354	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010356	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010359	68		pla				pla 								; restore the token address
.01035a	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01035d	68		pla				pla 								; restore count and store.
.01035e	99 04 00	sta $0004,y			sta 	$0004,y
.010361					_VCNotArray2:
.010361	98		tya				tya 								; update the head link
.010362	92 20		sta ($20)			sta 	(DHashTablePtr)
.010364	18		clc				clc 								; advance pointer to the data bit.
.010365	69 04 00	adc #$0004			adc 	#4
.010368	60		rts				rts 								; and done.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.010369					ErrorHandler:
.010369	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01036b	fa		plx				plx 								; address of error message -1
.01036c	ea		nop				nop
.01036d	80 fe		bra $01036d	_EH1:	bra 	_EH1
.01036f					IllegalToken:
.01036f	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010372	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01037a	54 6f 6b 65 6e 00
.010380					SyntaxError:
.010380	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010383	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>01038b	72 72 6f 72 00
.010390					ExpectToken:
.010390	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.010392	d0 05		bne $010399			bne 	_CTKError					; error if not
.010394	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.010396	e6 06		inc $06				inc 	DCodePtr
.010398	60		rts				rts
.010399					_CTKError:
.010399	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01039c	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103a4	74 6f 6b 65 6e 00
.0103aa					ExpectRightBracket:
.0103aa	48		pha				pha
.0103ab	a9 1a 32	lda #$321a			lda 	#rparenTokenID
.0103ae	20 90 03	jsr $010390			jsr 	ExpectToken
.0103b1	68		pla				pla
.0103b2	60		rts				rts
.0103b3					ExpectComma:
.0103b3	48		pha				pha
.0103b4	a9 16 32	lda #$3216			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0103b7	20 90 03	jsr $010390			jsr 	ExpectToken
.0103ba	68		pla				pla
.0103bb	60		rts				rts
.0103bc					CheckBothNumeric:
.0103bc	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0103be	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0103c0	30 01		bmi $0103c3			bmi 	_CBNFail 					; need to both be zero in bit 15
.0103c2	60		rts				rts
.0103c3					_CBNFail:
.0103c3	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0103c6	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0103ce	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0103dc					ResetTypeInteger:
.0103dc	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0103de	29 ff 7f	and #$7fff			and 	#$7FFF
.0103e1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0103e3	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\stringutils.asm

.0103e4					StringTempAllocate:
.0103e4	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.0103e7	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.0103ea	18		clc				clc 								; this adds one, for the length.
.0103eb	65 16		adc $16				adc 	DTempStringPointer
.0103ed	85 16		sta $16				sta 	DTempStringPointer
.0103ef	48		pha				pha
.0103f0	a9 00 00	lda #$0000			lda 	#$0000
.0103f3	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.0103f5	92 16		sta ($16)			sta		(DTempStringPointer)
.0103f7	c2 20		rep #$20			rep 	#$20
.0103f9	68		pla				pla
.0103fa	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.0103fc	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.0103fe	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010400	60		rts				rts
.010401					StringCreateCopy:
.010401	a8		tay				tay 								; put pointer to string in Y
.010402	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010405	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010408	f0 17		beq $010421			beq 	_SCCExit 					; do nothing if length zero.
.01040a	da		phx				phx 								; save X and put the character count in X
.01040b	aa		tax				tax
.01040c					_SCCCopy:
.01040c	c8		iny				iny 								; advance and read (first time skips length)
.01040d	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01040f	b9 00 00	lda $0000,y			lda 	$0000,y
.010412	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010414	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010416	1a		inc a				inc 	a
.010417	92 18		sta ($18)			sta 	(DStartTempString)
.010419	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01041b	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01041d	ca		dex				dex 								; do X times
.01041e	d0 ec		bne $01040c			bne 	_SCCCopy
.010420	fa		plx				plx
.010421					_SCCExit:
.010421	60		rts				rts
.010422					StringMakeConcrete:
.010422	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010425	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010427	90 0f		bcc $010438			bcc 	_SMCExit
.010429	85 08		sta $08				sta 	DTemp1 						; source
.01042b	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01042d	29 ff 00	and #$00ff			and 	#$00FF
.010430	d0 07		bne $010439			bne 	_SMCNonZero 				; if not "" skip.
.010432	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010435	18		clc				clc
.010436	65 02		adc $02				adc 	DBaseAddress
.010438					_SMCExit:
.010438	60		rts				rts
.010439					_SMCNonZero:
.010439	48		pha				pha 								; save on stack.
.01043a	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.01043d	18		clc				clc
.01043e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.010441	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010443	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010445	85 0c		sta $0c				sta 	DTemp2 						; target
.010447	7a		ply				ply 								; get length copy from here until Y goes -ve
.010448	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.01044a					_SMCLoop:
.01044a	b1 08		lda ($08),y			lda 	(DTemp1),y
.01044c	91 0c		sta ($0c),y			sta 	(DTemp2),y
.01044e	88		dey				dey
.01044f	10 f9		bpl $01044a			bpl 	_SMCLoop
.010451	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.010453	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.010455	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010456					Binary_Add:
.010456	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.010458	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01045a	30 12		bmi $01046e		bmi 	_BATypeError
.01045c	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01045e	30 3f		bmi $01049f		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010460	18		clc			clc
.010461	b5 00		lda $00,x		lda		EXSValueL+0,x
.010463	75 02		adc $02,x		adc 	EXSValueL+2,x
.010465	95 00		sta $00,x		sta 	EXSValueL+0,x
.010467	b5 10		lda $10,x		lda		EXSValueH+0,x
.010469	75 12		adc $12,x		adc 	EXSValueH+2,x
.01046b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01046d	60		rts			rts
.01046e					_BATypeError:
.01046e	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010471	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010479	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010489	65 73 00
.01048c					_BALengthError:
.01048c	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01048f	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010497	6f 6f 20 6c 6f 6e 67 00
.01049f					_BAConcatenateString:
.01049f	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0104a1	85 08		sta $08			sta 	DTemp1
.0104a3	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104a5	85 0c		sta $0c			sta 	DTemp2
.0104a7	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0104a9	18		clc			clc 										; work out the total length
.0104aa	b2 08		lda ($08)		lda 	(DTemp1)
.0104ac	72 0c		adc ($0c)		adc 	(DTemp2)
.0104ae	b0 14		bcs $0104c4		bcs 	_BAConcatLengthError 				; string is too long.
.0104b0	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0104b2	20 e4 03	jsr $0103e4		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0104b5	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.0104b7	74 10		stz $10,x		stz 	EXSValueH+0,x
.0104b9	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0104bb	20 01 04	jsr $010401		jsr 	StringCreateCopy
.0104be	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0104c0	20 01 04	jsr $010401		jsr 	StringCreateCopy
.0104c3	60		rts			rts
.0104c4					_BAConcatLengthError:
.0104c4	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0104c7	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0104cf	6f 6f 20 6c 6f 6e 67 00
.0104d7					Binary_Subtract:
.0104d7	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104da	38		sec			sec
.0104db	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104dd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0104df	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104e1	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104e3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0104e5	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104e7	60		rts			rts
.0104e8					Binary_ShiftRight:
.0104e8	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104eb	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104ed	29 3f 00	and #$003f		and 	#63
.0104f0	f0 07		beq $0104f9		beq		_Binary_SRExit
.0104f2					_Binary_SRLoop:
.0104f2	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.0104f4	76 00		ror $00,x		ror 	EXSValueL+0,x
.0104f6	3a		dec a			dec 	a
.0104f7	d0 f9		bne $0104f2		bne 	_Binary_SRLoop
.0104f9					_Binary_SRExit:
.0104f9	60		rts			rts
.0104fa					Binary_ShiftLeft:
.0104fa	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0104fd	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0104ff	29 3f 00	and #$003f		and 	#63
.010502	f0 07		beq $01050b		beq		_Binary_SLExit
.010504					_Binary_SLLoop:
.010504	16 00		asl $00,x		asl 	EXSValueL+0,x
.010506	36 10		rol $10,x		rol 	EXSValueH+0,x
.010508	3a		dec a			dec 	a
.010509	d0 f9		bne $010504		bne 	_Binary_SLLoop
.01050b					_Binary_SLExit:
.01050b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.01050c					Binary_And:
.01050c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01050f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010511	35 02		and $02,x		and 	EXSValueL+2,x
.010513	95 00		sta $00,x		sta 	EXSValueL+0,x
.010515	b5 10		lda $10,x		lda		EXSValueH+0,x
.010517	35 12		and $12,x		and 	EXSValueH+2,x
.010519	95 10		sta $10,x		sta 	EXSValueH+0,x
.01051b	60		rts			rts
.01051c					Binary_Or:
.01051c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01051f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010521	15 02		ora $02,x		ora 	EXSValueL+2,x
.010523	95 00		sta $00,x		sta 	EXSValueL+0,x
.010525	b5 10		lda $10,x		lda		EXSValueH+0,x
.010527	15 12		ora $12,x		ora 	EXSValueH+2,x
.010529	95 10		sta $10,x		sta 	EXSValueH+0,x
.01052b	60		rts			rts
.01052c					Binary_Xor:
.01052c	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.01052f	b5 00		lda $00,x		lda		EXSValueL+0,x
.010531	55 02		eor $02,x		eor 	EXSValueL+2,x
.010533	95 00		sta $00,x		sta 	EXSValueL+0,x
.010535	b5 10		lda $10,x		lda		EXSValueH+0,x
.010537	55 12		eor $12,x		eor 	EXSValueH+2,x
.010539	95 10		sta $10,x		sta 	EXSValueH+0,x
.01053b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.01053c					Binary_Equals:
.01053c	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01053f	b0 0e		bcs $01054f		bcs 	_BEString
.010541	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010543	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010545	d0 4f		bne $010596		bne 	Compare_Fail
.010547	b5 10		lda $10,x		lda 	EXSValueH,x
.010549	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.01054b	d0 49		bne $010596		bne 	Compare_Fail
.01054d	80 3f		bra $01058e		bra 	Compare_Succeed
.01054f					_BEString:
.01054f	09 00 00	ora #$0000		ora 	#$0000
.010552	f0 3a		beq $01058e		beq 	Compare_Succeed
.010554	80 40		bra $010596		bra 	Compare_Fail
.010556					Binary_NotEquals:
.010556	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010559	b0 0e		bcs $010569		bcs 	_BNEString
.01055b	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01055d	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01055f	d0 2d		bne $01058e		bne 	Compare_Succeed
.010561	b5 10		lda $10,x		lda 	EXSValueH,x
.010563	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010565	d0 27		bne $01058e		bne 	Compare_Succeed
.010567	80 2d		bra $010596		bra 	Compare_Fail
.010569					_BNEString:
.010569	09 00 00	ora #$0000		ora 	#$0000
.01056c	d0 20		bne $01058e		bne 	Compare_Succeed
.01056e	80 26		bra $010596		bra 	Compare_Fail
.010570					Binary_Less:
.010570	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010573	b0 12		bcs $010587		bcs 	_BLString
.010575	38		sec			sec
.010576	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010578	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01057a	b5 10		lda $10,x		lda 	EXSValueH,x
.01057c	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01057e	50 03		bvc $010583		bvc 	*+5
.010580	49 00 80	eor #$8000		eor 	#$8000
.010583	30 09		bmi $01058e		bmi 	Compare_Succeed
.010585	80 0f		bra $010596		bra 	Compare_Fail
.010587					_BLString:
.010587	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01058a	f0 02		beq $01058e		beq 	Compare_Succeed
.01058c	80 08		bra $010596		bra 	Compare_Fail
.01058e					Compare_Succeed:
.01058e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010591	95 00		sta $00,x		sta 	EXSValueL,x
.010593	95 10		sta $10,x		sta 	EXSValueH,x
.010595	60		rts			rts
.010596					Compare_Fail:
.010596	74 00		stz $00,x		stz 	EXSValueL,x
.010598	74 10		stz $10,x		stz 	EXSValueH,x
.01059a	60		rts			rts
.01059b					Binary_GreaterEqual:
.01059b	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01059e	b0 12		bcs $0105b2		bcs 	_BGEString
.0105a0	38		sec			sec
.0105a1	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0105a3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105a5	b5 10		lda $10,x		lda 	EXSValueH,x
.0105a7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105a9	50 03		bvc $0105ae		bvc 	*+5
.0105ab	49 00 80	eor #$8000		eor 	#$8000
.0105ae	10 de		bpl $01058e		bpl 	Compare_Succeed
.0105b0	80 e4		bra $010596		bra 	Compare_Fail
.0105b2					_BGEString:
.0105b2	09 00 00	ora #$0000		ora 	#$0000
.0105b5	10 d7		bpl $01058e		bpl 	Compare_Succeed
.0105b7	80 dd		bra $010596		bra 	Compare_Fail
.0105b9					Binary_LessEqual:
.0105b9	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105bc	b0 12		bcs $0105d0		bcs 	_BLEString
.0105be	18		clc			clc 									; numeric <= signed
.0105bf	b5 00		lda $00,x		lda 	EXSValueL,x
.0105c1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105c3	b5 10		lda $10,x		lda 	EXSValueH,x
.0105c5	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105c7	50 03		bvc $0105cc		bvc 	*+5
.0105c9	49 00 80	eor #$8000		eor 	#$8000
.0105cc	30 c0		bmi $01058e		bmi 	Compare_Succeed
.0105ce	80 c6		bra $010596		bra 	Compare_Fail
.0105d0					_BLEString:
.0105d0	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0105d3	d0 b9		bne $01058e		bne 	Compare_Succeed
.0105d5	80 bf		bra $010596		bra 	Compare_Fail
.0105d7					Binary_Greater:
.0105d7	20 f5 05	jsr $0105f5		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105da	b0 12		bcs $0105ee		bcs 	_BGString
.0105dc	18		clc			clc 									; numeric > signed
.0105dd	b5 00		lda $00,x		lda 	EXSValueL,x
.0105df	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105e1	b5 10		lda $10,x		lda 	EXSValueH,x
.0105e3	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0105e5	50 03		bvc $0105ea		bvc 	*+5
.0105e7	49 00 80	eor #$8000		eor 	#$8000
.0105ea	10 a2		bpl $01058e		bpl 	Compare_Succeed
.0105ec	80 a8		bra $010596		bra 	Compare_Fail
.0105ee					_BGString:
.0105ee	c9 01 00	cmp #$0001		cmp 	#$0001
.0105f1	f0 9b		beq $01058e		beq 	Compare_Succeed
.0105f3	80 a1		bra $010596		bra 	Compare_Fail
.0105f5					CompareTypeCheck:
.0105f5	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0105f7	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105f9	30 06		bmi $010601		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0105fb	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0105fd	30 1c		bmi $01061b		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0105ff	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010600	60		rts			rts
.010601					_CTCFail:
.010601	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010604	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01060c	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01061b					_CTCStringCompare:
.01061b	20 dc 03	jsr $0103dc		jsr 	ResetTypeInteger 				; two strings return integer not string.
.01061e	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010620	85 08		sta $08			sta 	DTemp1
.010622	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010624	85 0c		sta $0c			sta 	DTemp2
.010626	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010629	a8		tay			tay
.01062a	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.01062c	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.01062e	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010630	90 02		bcc $010634		bcc 	_CTCSmallest
.010632	b2 0c		lda ($0c)		lda 	(DTemp2)
.010634					_CTCSmallest:
.010634	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010636					_CTCCompare:
.010636	c8		iny			iny 									; look at next character (done first, first char is size)
.010637	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010639	30 16		bmi $010651		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.01063b	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.01063d	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01063f	f0 f5		beq $010636		beq 	_CTCCompare 					; if zero, try the next character.
.010641	b0 07		bcs $01064a		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010643					_CTCLess:
.010643	c2 20		rep #$20		rep 	#$20
.010645	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010648	80 14		bra $01065e		bra 	_CTCExit
.01064a					_CTCGreater:
.01064a	c2 20		rep #$20		rep 	#$20
.01064c	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.01064f	80 0d		bra $01065e		bra 	_CTCExit
.010651					_CTCEqualSoFar:
.010651	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010653	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010655	90 ec		bcc $010643		bcc 	_CTCLess
.010657	d0 f1		bne $01064a		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010659	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.01065b	a9 00 00	lda #$0000		lda 	#$0000
.01065e					_CTCExit:
.01065e	38		sec			sec 									; return with CS indicating string comparison.
.01065f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010660					Binary_Divide:
.010660	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.010663	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010665	15 12		ora $12,x		ora	 	EXSValueH+2,x
.010667	d0 14		bne $01067d		bne 	_BinaryDivide_Ok
.010669	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>01066c	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010674	20 62 79 20 7a 65 72 6f 00
.01067d					_BinaryDivide_Ok:
.01067d	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.01067f	64 0a		stz $0a			stz 	DTemp1+2
.010681	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010683	5a		phy			phy 										; save Y (bit counter)
.010684	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010686	10 07		bpl $01068f		bpl 	_BinaryDivide_RightDone
.010688	e8		inx			inx
.010689	e8		inx			inx
.01068a	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.01068d	ca		dex			dex
.01068e	ca		dex			dex
.01068f					_BinaryDivide_RightDone:
.01068f	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010691	10 03		bpl $010696		bpl 	_BinaryDivide_LeftDone
.010693	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.010696					_BinaryDivide_LeftDone:
.010696	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010699					_BinaryDivide_Loop:
.010699	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01069b	36 10		rol $10,x		rol 	EXSValueH+0,x
.01069d	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01069f	26 0a		rol $0a			rol 	DTemp1+2
.0106a1	38		sec			sec											; calculate A-M
.0106a2	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0106a4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106a6	85 0c		sta $0c			sta 	DTemp2
.0106a8	a5 0a		lda $0a			lda 	DTemp1+2
.0106aa	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106ac	90 08		bcc $0106b6		bcc 	_Binary_NoSubract 					; if A < M skip this
.0106ae	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.0106b0	a5 0c		lda $0c			lda 	DTemp2
.0106b2	85 08		sta $08			sta 	DTemp1+0
.0106b4	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.0106b6					_Binary_NoSubract:
.0106b6	88		dey			dey 										; do it 32 times.
.0106b7	d0 e0		bne $010699		bne 	_BinaryDivide_Loop
.0106b9					_BinaryDivide_Exit:
.0106b9	a5 14		lda $14			lda 	DSignCount 							; restore sign
.0106bb	29 01 00	and #$0001		and 	#1
.0106be	f0 03		beq $0106c3		beq 	_BinaryDivide_Exit2
.0106c0	20 c5 06	jsr $0106c5		jsr 	Binary_DivNegate
.0106c3					_BinaryDivide_Exit2:
.0106c3	7a		ply			ply 										; restore Y
.0106c4	60		rts			rts
.0106c5					Binary_DivNegate:
.0106c5	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.0106c7	38		sec			sec 										; negate the value at stack X.
.0106c8	a9 00 00	lda #$0000		lda 	#$0000
.0106cb	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.0106cd	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106cf	a9 00 00	lda #$0000		lda 	#$0000
.0106d2	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.0106d4	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106d6	60		rts			rts
.0106d7					Binary_Modulus:
.0106d7	20 60 06	jsr $010660		jsr 	Binary_Divide 						; do the divide
.0106da	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.0106dc	95 00		sta $00,x		sta 	EXSValueL+0,x
.0106de	a5 0a		lda $0a			lda 	DTemp1+2
.0106e0	95 10		sta $10,x		sta 	EXSValueH+0,x
.0106e2	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.0106e3					Binary_Multiply:
.0106e3	20 bc 03	jsr $0103bc		jsr 	CheckBothNumeric 					; check both values are numeric
.0106e6	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.0106e8	85 08		sta $08			sta 	DTemp1
.0106ea	b5 10		lda $10,x		lda 	EXSValueH+0,x
.0106ec	85 0a		sta $0a			sta		DTemp1+2
.0106ee	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.0106f0	74 10		stz $10,x		stz 	EXSValueH+0,x
.0106f2					_BinaryMultiply_Loop:
.0106f2	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.0106f4	05 0a		ora $0a			ora 	DTemp1+2
.0106f6	f0 1e		beq $010716		beq 	_BinaryMultiply_Exit
.0106f8	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.0106fa	29 01 00	and #$0001		and 	#1
.0106fd	f0 0d		beq $01070c		beq 	_BinaryMultiply_NoAdd
.0106ff	18		clc			clc 										; add multiplicand to result.
.010700	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010702	75 02		adc $02,x		adc 	EXSValueL+2,x
.010704	95 00		sta $00,x		sta 	EXSValueL+0,x
.010706	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010708	75 12		adc $12,x		adc 	EXSValueH+2,x
.01070a	95 10		sta $10,x		sta 	EXSValueH+0,x
.01070c					_BinaryMultiply_NoAdd:
.01070c	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.01070e	66 08		ror $08			ror 	DTemp1
.010710	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010712	36 12		rol $12,x		rol 	EXSValueH+2,x
.010714	80 dc		bra $0106f2		bra 	_BinaryMultiply_Loop 				; go round again.
.010716					_BinaryMultiply_Exit:
.010716	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010717					Function_Len:
.010717	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.01071a	20 08 02	jsr $010208			jsr 	EvaluateNextString 			; get the value you are absoluting
.01071d	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.010720	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010722	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010725	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010728	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.01072a	74 10		stz $10,x			stz 	EXSValueH+0,x
.01072c	60		rts				rts
.01072d					Function_Abs:
.01072d	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.010730	20 e9 01	jsr $0101e9			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010733	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.010736	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010738	30 07		bmi $010741			bmi 	_FAbsNegative 				; negate it if negative
.01073a	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.01073c	b5 02		lda $02,x			lda 	EXSValueL+2,x
.01073e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010740	60		rts				rts
.010741					_FAbsNegative:
.010741	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010742	a9 00 00	lda #$0000			lda 	#0
.010745	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010747	95 00		sta $00,x			sta 	EXSValueL+0,x
.010749	a9 00 00	lda #$0000			lda 	#0
.01074c	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01074e	95 10		sta $10,x			sta 	EXSValueH+0,x
.010750	60		rts				rts
.010751					Function_Sgn:
.010751	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns integer
.010754	20 e9 01	jsr $0101e9			jsr 	EvaluateNextInteger 		; get an integer
.010757	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check )
.01075a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.01075c	74 10		stz $10,x			stz 	EXSValueH+0,x
.01075e	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010760	30 07		bmi $010769			bmi 	_FSgnNegative 				; set to -1 if signed
.010762	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010764	f0 02		beq $010768			beq 	_FSgnExit
.010766	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010768					_FSgnExit:
.010768	60		rts				rts
.010769					_FSgnNegative:
.010769	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01076c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01076e	95 10		sta $10,x			sta 	EXSValueH+0,x
.010770	60		rts				rts
.010771					Function_Random:
.010771	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger
.010774	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010776	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010778	d0 0a		bne $010784			bne 	_Rnd_NotZero
.01077a	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.01077d	85 10		sta $10				sta 	DRandom
.01077f	a9 ea 00	lda #$00ea			lda 	#$EA
.010782	85 12		sta $12				sta 	DRandom+2
.010784					_Rnd_NotZero:
.010784	20 8f 07	jsr $01078f			jsr 	_Rnd_Process 				; call randomiser twice
.010787	95 10		sta $10,x			sta 	EXSValueH+0,x
.010789	20 8f 07	jsr $01078f			jsr 	_Rnd_Process
.01078c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01078e	60		rts				rts
.01078f					_Rnd_Process:
.01078f	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010791	26 12		rol $12				rol 	DRandom+2
.010793	90 0e		bcc $0107a3			bcc 	_Rnd_Exit
.010795	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010797	49 54 d4	eor #$d454			eor 	#$D454
.01079a	85 10		sta $10				sta 	DRandom
.01079c	a5 12		lda $12				lda 	DRandom+2
.01079e	49 d5 55	eor #$55d5			eor 	#$55D5
.0107a1	85 12		sta $12				sta 	DRandom+2
.0107a3					_Rnd_Exit:
.0107a3	a5 10		lda $10				lda 	DRandom
.0107a5	45 12		eor $12				eor 	DRandom+2
.0107a7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.0107a8					Function_VAL:
.0107a8	20 dc 03	jsr $0103dc			jsr 	ResetTypeInteger 			; returns an integer
.0107ab	20 08 02	jsr $010208			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107ae	48		pha				pha 								; put string address on stack.
.0107af	20 bf 07	jsr $0107bf			jsr 	VALGetBase 					; process , base (shared with STR$())
.0107b2	7a		ply				ply 								; get string address back
.0107b3	da		phx				phx 								; save X on stack
.0107b4	aa		tax				tax 								; base in X
.0107b5	98		tya				tya 								; address in A
.0107b6	20 f9 07	jsr $0107f9			jsr 	StringToInteger
.0107b9	fa		plx				plx 								; restore X
.0107ba	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107bc	94 10		sty $10,x			sty 	EXSValueH+0,x
.0107be	60		rts				rts
.0107bf					VALGetBase:
.0107bf	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.0107c1	c9 16 32	cmp #$3216			cmp 	#commaTokenID 				; if comma, go to get base code.
.0107c4	f0 07		beq $0107cd			beq 	_VGBAlternate
.0107c6	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket			; expect ), and return 10.
.0107c9	a9 0a 00	lda #$000a			lda 	#10
.0107cc	60		rts				rts
.0107cd					_VGBAlternate:
.0107cd	20 b3 03	jsr $0103b3			jsr 	ExpectComma 				; skip comma.
.0107d0	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; get base
.0107d3	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.0107d6	d0 0e		bne $0107e6			bne 	_VGBBadBase
.0107d8	c9 02 00	cmp #$0002			cmp 	#2
.0107db	90 09		bcc $0107e6			bcc 	_VGBBadBase
.0107dd	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.0107e0	b0 04		bcs $0107e6			bcs 	_VGBBadBase
.0107e2	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; get right bracket and return.
.0107e5	60		rts				rts
.0107e6					_VGBBadBase:
.0107e6	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>0107e9	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>0107f1	65 72 20 42 61 73 65 00
.0107f9					StringToInteger:
.0107f9	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.0107fb	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.0107fd	29 ff 00	and #$00ff			and 	#$00FF
.010800	85 26		sta $26				sta 	DTemp3+2
.010802	f0 6e		beq $010872			beq 	_STIError 					; if length zero it's bad.
.010804	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010806	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010808	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.01080a	64 0a		stz $0a				stz 	DTemp1+2
.01080c	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.01080e	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010811	48		pha				pha 								; push on stack
.010812	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010815	d0 06		bne $01081d			bne 	_STILoop
.010817	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010819	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01081b	f0 55		beq $010872			beq 	_STIError 					; if only - then error.
.01081d					_STILoop:
.01081d	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.01081f	20 91 08	jsr $010891			jsr 	MultiplyTemp1ByA
.010822	b2 24		lda ($24)			lda 	(DTemp3)
.010824	29 ff 00	and #$00ff			and 	#$00FF
.010827	20 82 08	jsr $010882			jsr 	ConvertUpperCase
.01082a	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.01082d	90 43		bcc $010872			bcc 	_STIError
.01082f	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010832	90 0e		bcc $010842			bcc 	_STIOkay1
.010834	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010837	90 39		bcc $010872			bcc 	_STIError
.010839	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.01083c	b0 34		bcs $010872			bcs 	_STIError
.01083e	18		clc				clc 								; shift to correct range.
.01083f	69 09 00	adc #$0009			adc 	#9
.010842					_STIOkay1:
.010842	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010845	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010847	b0 29		bcs $010872			bcs 	_STIError
.010849	18		clc				clc 								; add A to DTemp1
.01084a	65 08		adc $08				adc 	DTemp1
.01084c	85 08		sta $08				sta 	DTemp1
.01084e	90 02		bcc $010852			bcc 	_STINoCarry
.010850	e6 0a		inc $0a				inc 	DTemp1+2
.010852					_STINoCarry:
.010852	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010854	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010856	d0 c5		bne $01081d			bne 	_STILoop 					; loop back.
.010858	68		pla				pla 								; get optional minus bac
.010859	c9 2d 00	cmp #$002d			cmp 	#"-"
.01085c	d0 0f		bne $01086d			bne 	_STINotNegative 			; handle the negative character
.01085e	38		sec				sec 								; negate DTemp1
.01085f	a9 00 00	lda #$0000			lda 	#0
.010862	e5 08		sbc $08				sbc 	DTemp1
.010864	85 08		sta $08				sta 	DTemp1
.010866	a9 00 00	lda #$0000			lda 	#0
.010869	e5 0a		sbc $0a				sbc 	DTemp1+2
.01086b	85 0a		sta $0a				sta 	DTemp1+2
.01086d					_STINotNegative:
.01086d	a5 08		lda $08				lda 	DTemp1 						; get the result
.01086f	a4 0a		ldy $0a				ldy 	DTemp1+2
.010871	60		rts				rts
.010872					_STIError:
.010872	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010875	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>01087d	74 61 6e 74 00
.010882					ConvertUpperCase:
.010882	c9 61 00	cmp #$0061			cmp 	#'a'
.010885	90 09		bcc $010890			bcc 	_CUCExit
.010887	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01088a	b0 04		bcs $010890			bcs 	_CUCExit
.01088c	38		sec				sec
.01088d	e9 20 00	sbc #$0020			sbc 	#32
.010890					_CUCExit:
.010890	60		rts				rts
.010891					MultiplyTemp1ByA:
.010891	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010894	f0 56		beq $0108ec			beq 	_MT1_16
.010896	c9 0a 00	cmp #$000a			cmp 	#10
.010899	f0 33		beq $0108ce			beq 	_MT1_10
.01089b	c9 08 00	cmp #$0008			cmp 	#8
.01089e	f0 50		beq $0108f0			beq 	_MT1_8
.0108a0	c9 02 00	cmp #$0002			cmp 	#2
.0108a3	f0 53		beq $0108f8			beq 	_MT1_2
.0108a5					_MTGeneral:
.0108a5	da		phx				phx
.0108a6	aa		tax				tax 								; multiplier in X
.0108a7	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.0108a9	85 0c		sta $0c				sta 	DTemp2
.0108ab	a5 0a		lda $0a				lda 	DTemp1+2
.0108ad	85 0e		sta $0e				sta 	DTemp2+2
.0108af	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.0108b1	64 0a		stz $0a				stz 	DTemp1+2
.0108b3					_MTLoop:
.0108b3	8a		txa				txa 								; shift X right into C
.0108b4	4a		lsr a				lsr 	a
.0108b5	aa		tax				tax
.0108b6	90 0d		bcc $0108c5			bcc 	_MTNoAdd
.0108b8	18		clc				clc
.0108b9	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.0108bb	65 0c		adc $0c				adc 	DTemp2
.0108bd	85 08		sta $08				sta 	DTemp1
.0108bf	a5 0a		lda $0a				lda 	DTemp1+2
.0108c1	65 0e		adc $0e				adc 	DTemp2+2
.0108c3	85 0a		sta $0a				sta 	DTemp1+2
.0108c5					_MTNoAdd:
.0108c5	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0108c7	26 0e		rol $0e				rol 	DTemp2+2
.0108c9	8a		txa				txa 								; until multiplier is zero.
.0108ca	d0 e7		bne $0108b3			bne 	_MTLoop
.0108cc					_MTGExit:
.0108cc	fa		plx				plx 								; restore X
.0108cd	60		rts				rts 								; and exit
.0108ce					_MT1_10:
.0108ce	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.0108d0	48		pha				pha
.0108d1	a5 08		lda $08				lda 	DTemp1
.0108d3	48		pha				pha
.0108d4	06 08		asl $08				asl 	DTemp1						; x 4
.0108d6	26 0a		rol $0a				rol 	DTemp1+2
.0108d8	06 08		asl $08				asl 	DTemp1
.0108da	26 0a		rol $0a				rol 	DTemp1+2
.0108dc	68		pla				pla 								; add saved value, x 5
.0108dd	18		clc				clc
.0108de	65 08		adc $08				adc 	DTemp1
.0108e0	85 08		sta $08				sta 	DTemp1
.0108e2	68		pla				pla
.0108e3	65 0a		adc $0a				adc 	DTemp1+2
.0108e5	85 0a		sta $0a				sta 	DTemp1+2
.0108e7	06 08		asl $08				asl 	DTemp1
.0108e9	26 0a		rol $0a				rol 	DTemp1+2
.0108eb	60		rts				rts
.0108ec					_MT1_16:
.0108ec	06 08		asl $08				asl 	DTemp1
.0108ee	26 0a		rol $0a				rol 	DTemp1+2
.0108f0					_MT1_8:
.0108f0	06 08		asl $08				asl 	DTemp1
.0108f2	26 0a		rol $0a				rol 	DTemp1+2
.0108f4					_MT1_4:
.0108f4	06 08		asl $08				asl 	DTemp1
.0108f6	26 0a		rol $0a				rol 	DTemp1+2
.0108f8					_MT1_2
.0108f8	06 08		asl $08				asl 	DTemp1
.0108fa	26 0a		rol $0a				rol 	DTemp1+2
.0108fc	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0108fd					Function_Let:
.0108fd	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0108ff	48		pha				pha
.010900	20 4f 02	jsr $01024f			jsr 	VariableFind 				; find the variable
.010903	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010905	b0 1c		bcs $010923			bcs 	_FLetFound 					; skip if found.
.010907	68		pla				pla 								; get and push the first token again.
.010908	48		pha				pha
.010909	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.01090c	d0 51		bne $01095f			bne 	_FLError					; arrays, so this causes an error.
.01090e	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010910	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010913	20 07 03	jsr $010307			jsr 	VariableCreate 				; create it.
.010916	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010918					_FLSkipToken:
.010918	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.01091a	e6 06		inc $06				inc 	DCodePtr
.01091c	e6 06		inc $06				inc 	DCodePtr
.01091e	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010921	d0 f5		bne $010918			bne 	_FLSkipToken
.010923					_FLetFound:
.010923	68		pla				pla 								; get and save the first token.
.010924	48		pha				pha
.010925	a8		tay				tay 								; put it in Y
.010926	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010929	f0 07		beq $010932			beq 	_FLetNotArray
.01092b	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.01092d	20 c6 02	jsr $0102c6			jsr 	VariableSubscript			; index calculation
.010930	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010932					_FLetNotArray:
.010932	7a		ply				ply 								; get the first token into Y
.010933	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010935	48		pha				pha
.010936	5a		phy				phy 								; save the first token on the stack.
.010937	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.01093a	20 90 03	jsr $010390			jsr 	ExpectToken
.01093d	68		pla				pla 								; restore the first token.
.01093e	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010941	d0 0f		bne $010952			bne 	_FLetString 				; skip if string.
.010943	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; get an integer
.010946	7a		ply				ply 								; get address in Y
.010947	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010949	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.01094c	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.01094e	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010951	60		rts				rts
.010952					_FLetString:
.010952	20 ef 01	jsr $0101ef			jsr 	EvaluateString 				; get a string.
.010955	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010957	20 22 04	jsr $010422			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.01095a	7a		ply				ply 								; get address
.01095b	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.01095e	60		rts				rts
.01095f					_FLError:
.01095f	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010962	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>01096a	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.010972					Function_END:
.010972	02 00		cop #$00			cop 	#0
.010974					Function_RUN:
.010974	20 cc 09	jsr $0109cc			jsr 	Function_CLEAR 				; clear all variables.
.010977	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010979	18		clc				clc
.01097a	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.01097d					_FRun_NextLineNumber:
.01097d	a8		tay				tay 								; put in Y
.01097e	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010981	f0 ef		beq $010972			beq 	Function_END 				; if zero, off the end of the program
.010983	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010986	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010988	98		tya				tya 								; get address back
.010989	18		clc				clc 								; skip over the link/line number
.01098a	69 04 00	adc #$0004			adc 	#4
.01098d	85 06		sta $06				sta 	DCodePtr
.01098f					_FRun_NextInstruction:
.01098f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010992	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010994	38		sec				sec
.010995	e9 00 01	sbc #$0100			sbc 	#256
.010998	85 16		sta $16				sta 	DTempStringPointer
.01099a	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.01099c	f0 28		beq $0109c6			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.01099e	c9 18 32	cmp #$3218			cmp 	#colonTokenID 				; colon then skip
.0109a1	f0 18		beq $0109bb			beq 	_FRun_Colon
.0109a3	a8		tay				tay 								; save in Y
.0109a4	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.0109a7	c9 00 20	cmp #$2000			cmp 	#$2000
.0109aa	d0 15		bne $0109c1			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0109ac	98		tya				tya 								; get token back
.0109ad	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0109b0	0a		asl a				asl 	a 							; double it into X
.0109b1	aa		tax				tax
.0109b2	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0109b4	e6 06		inc $06				inc 	DCodePtr
.0109b6	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0109b9	80 d4		bra $01098f			bra 	_FRun_NextInstruction 		; do the following instruction.
.0109bb					_FRun_Colon:
.0109bb	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0109bd	e6 06		inc $06				inc 	DCodePtr
.0109bf	80 ce		bra $01098f			bra 	_FRun_NextInstruction 		; do the following instruction.
.0109c1					_FRun_TryLET:
.0109c1	20 fd 08	jsr $0108fd			jsr 	Function_LET 				; try as a LET.
.0109c4	80 c9		bra $01098f			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0109c6					_FRun_EndInstruction:
.0109c6	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.0109c8	1a		inc a				inc 	a 							; go to link for next line
.0109c9	1a		inc a				inc 	a
.0109ca	80 b1		bra $01097d			bra 	_FRun_NextLineNumber
.0109cc					Function_CLEAR:
.0109cc	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString 			; clear empty string reference.
.0109cf	a9 00 00	lda #$0000			lda 	#$0000
.0109d2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109d4	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0109d6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0109d9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109db	20 02 0a	jsr $010a02			jsr 	FindCodeEnd 				; find where the program ends.
.0109de	a8		tay				tay 								; Y points to it.
.0109df	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.0109e2	99 02 00	sta $0002,y			sta 	$0002,y
.0109e5	99 04 00	sta $0004,y			sta 	$0004,y
.0109e8	98		tya				tya 								; start of working memory up
.0109e9	18		clc				clc
.0109ea	69 06 00	adc #$0006			adc 	#6
.0109ed	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0109f0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109f2	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0109f5					_FCLoop:
.0109f5	a9 00 00	lda #$0000			lda 	#$0000
.0109f8	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0109fa	c8		iny				iny
.0109fb	c8		iny				iny
.0109fc	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0109ff	d0 f4		bne $0109f5			bne 	_FCLoop
.010a01	60		rts				rts
.010a02					FindCodeEnd:
.010a02	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010a05	18		clc				clc
.010a06	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010a08	a8		tay				tay
.010a09					_FCELoop:
.010a09	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010a0c	f0 08		beq $010a16			beq 	_FCEExit
.010a0e	98		tya				tya 								; add offset
.010a0f	18		clc				clc
.010a10	79 00 00	adc $0000,y			adc 	$0000,y
.010a13	a8		tay				tay
.010a14	80 f3		bra $010a09			bra 	_FCELoop
.010a16					_FCEExit:
.010a16	98		tya				tya 								; return in A
.010a17	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.010a18					Function_Dim:
.010a18	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a1a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010a1d	f0 3b		beq $010a5a			beq		_FDIMNotArray 				; no, error.
.010a1f	20 4f 02	jsr $01024f			jsr 	VariableFind 				; try to find it.
.010a22	b0 41		bcs $010a65			bcs 	_FDIMExists 				; if it does, that's an error.
.010a24	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010a26	48		pha				pha
.010a27	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010a29	48		pha				pha
.010a2a					_FDIMSkip:
.010a2a	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010a2c	e6 06		inc $06				inc 	DCodePtr
.010a2e	e6 06		inc $06				inc 	DCodePtr
.010a30	29 00 08	and #$0800			and 	#IDContMask
.010a33	d0 f5		bne $010a2a			bne 	_FDIMSkip
.010a35	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; evaluate the size
.010a38	20 aa 03	jsr $0103aa			jsr 	ExpectRightBracket 			; check the ) following.
.010a3b	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010a3e	d0 3b		bne $010a7b			bne 	_FDIMSize
.010a40	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010a43	f0 36		beq $010a7b			beq 	_FDIMSize
.010a45	7a		ply				ply 								; restore HashTablePtr
.010a46	84 20		sty $20				sty 	DHashTablePtr
.010a48	7a		ply				ply 								; so now A is the high index, Y points to the token
.010a49	20 07 03	jsr $010307			jsr 	VariableCreate 				; create the variable.
.010a4c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010a4e	c9 16 32	cmp #$3216			cmp 	#commaTokenID 				; if not a comma, exit
.010a51	d0 06		bne $010a59			bne 	_FDIMExit
.010a53	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010a55	e6 06		inc $06				inc 	DCodePtr
.010a57	80 bf		bra $010a18			bra 	Function_DIM 				; and do another
.010a59					_FDIMExit:
.010a59	60		rts				rts
.010a5a					_FDIMNotArray:
.010a5a	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a5d	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010a65					_FDIMExists:
.010a65	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a68	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010a70	65 64 69 6d 65 6e 73 69 6f 6e 00
.010a7b					_FDIMSize:
.010a7b	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010a7e	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010a86	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.010a8c					Function_COLLECT:
.010a8c	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010a8e	85 0c		sta $0c				sta 	DTemp2
.010a90	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010a93	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010a95	85 0e		sta $0e				sta 	DTemp2+2
.010a97	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010a99	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010a9b					_FCNextPass:
.010a9b	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010a9d	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010a9f	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010aa1	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010aa4	18		clc				clc
.010aa5	65 02		adc $02				adc 	DBaseAddress
.010aa7	a8		tay				tay 								; put in Y
.010aa8	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010aab					_FCO1:
.010aab	20 d1 0a	jsr $010ad1			jsr  	COLLECTScanVariable 		; scan that one.
.010aae	c8		iny				iny 	 							; go to next pointer
.010aaf	c8		iny				iny
.010ab0	ca		dex				dex
.010ab1	d0 f8		bne $010aab			bne 	_FCO1 						; until done all 16.
.010ab3	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010ab6					_FCO2:
.010ab6	20 e5 0a	jsr $010ae5			jsr  	COLLECTScanArray 			; scan that one.
.010ab9	c8		iny				iny 	 							; go to next pointer
.010aba	c8		iny				iny
.010abb	ca		dex				dex
.010abc	d0 f8		bne $010ab6			bne 	_FCO2 						; until done all 16.
.010abe	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010ac0	f0 0e		beq $010ad0			beq		_FCExit 					; if finished then exit.
.010ac2	48		pha				pha 								; save the target address
.010ac3	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010ac5	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010ac7	20 22 04	jsr $010422			jsr 	StringMakeConcrete 			; make the string concrete.
.010aca	7a		ply				ply 								; restore the string.
.010acb	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010ace	80 cb		bra $010a9b			bra		_FCNextPass
.010ad0					_FCExit:
.010ad0	60		rts				rts
.010ad1					COLLECTScanVariable:
.010ad1	da		phx				phx 								; save XY
.010ad2	5a		phy				phy
.010ad3					_CSVLoop:
.010ad3	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010ad6	f0 0a		beq $010ae2			beq 	_CSVExit
.010ad8	a8		tay				tay 								; put new address into Y
.010ad9	18		clc				clc 								; which is four on.
.010ada	69 04 00	adc #$0004			adc 	#4
.010add	20 04 0b	jsr $010b04			jsr 	COLLECTCheck
.010ae0	80 f1		bra $010ad3			bra 	_CSVLoop
.010ae2					_CSVExit:
.010ae2	7a		ply				ply
.010ae3	fa		plx				plx
.010ae4	60		rts				rts
.010ae5					COLLECTScanArray:
.010ae5	da		phx				phx 								; save XY
.010ae6	5a		phy				phy
.010ae7					_CSALoop:
.010ae7	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010aea	f0 15		beq $010b01			beq 	_CSAExit
.010aec	a8		tay				tay 								; put new address in Y
.010aed	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010af0	aa		tax				tax
.010af1	e8		inx				inx									; +1 as one more data element.
.010af2	98		tya				tya 								; point A to first element, at +6
.010af3	18		clc				clc
.010af4	69 06 00	adc #$0006			adc 	#6
.010af7					_CSADoAllStrings:
.010af7	20 04 0b	jsr $010b04			jsr 	COLLECTCheck 				; collect check the first.
.010afa	1a		inc a				inc 	a 							; advance the pointer.
.010afb	1a		inc a				inc 	a
.010afc	ca		dex				dex
.010afd	d0 f8		bne $010af7			bne 	_CSADoAllStrings 			; until all strings are done.
.010aff	80 e6		bra $010ae7			bra 	_CSALoop
.010b01					_CSAExit:
.010b01	7a		ply				ply
.010b02	fa		plx				plx
.010b03	60		rts				rts
.010b04					COLLECTCheck:
.010b04	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010b06	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010b08	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010b0a	90 0a		bcc $010b16			bcc 	_COCExit
.010b0c	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010b0e	b0 06		bcs $010b16			bcs 	_COCExit
.010b10	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010b12	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010b14	85 14		sta $14				sta 	DSignCount
.010b16					_COCExit:
.010b16	a5 0a		lda $0a				lda 	DTemp1+2
.010b18	60		rts				rts
.010b19	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.010b1a					Function_ASSERT:
.010b1a	20 d0 01	jsr $0101d0			jsr 	EvaluateInteger 			; something that returns an integer.
.010b1d	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010b1f	05 08		ora $08				ora 	Dtemp1
.010b21	f0 01		beq $010b24			beq 	_FAssFail
.010b23	60		rts				rts
.010b24					_FAssFail:
.010b24	20 69 03	jsr $010369			jsr 	ErrorHandler 						; call error routine
>010b27	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010b2f	61 69 6c 65 64 00

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010b35					SwitchBasicInstance:
.010b35	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010b37	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010b3a	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010b3c	86 02		stx $02				stx		DBaseAddress
.010b3e	84 04		sty $04				sty 	DHighAddress
.010b40	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010b41	48		pha				pha 										; then copy it into B.
.010b42	ab		plb				plb
.010b43	ab		plb				plb
.010b44	4c 74 09	jmp $010974			jmp 	Function_RUN

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	da 62 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 10 00 01 00 20 3e d1 dc
>024108	52 d2 02 40 1a 32 00 00 0e 00 02 00 20 3e 12 d0
>024118	02 40 1a 32 00 00 0e 00 03 00 20 3e 13 d0 05 40
>024128	1a 32 00 00 0e 00 04 00 20 3e fa d4 04 40 1a 32
>024138	00 00 10 00 05 00 20 3e 7f dd 9c d0 06 40 1a 32
>024148	00 00 12 00 06 00 20 3e 6a de 59 de 11 d0 04 40
>024158	1a 32 00 00 0e 00 07 00 20 3e 09 d0 03 40 1a 32
>024168	00 00 0e 00 08 00 20 3e 57 d6 06 40 1a 32 00 00
>024178	12 00 09 00 20 3e 2e de e4 d9 02 d0 05 40 1a 32
>024188	00 00 0e 00 0a 00 20 3e 0d d0 02 40 1a 32 00 00
>024198	10 00 0b 00 20 3e 8b fd 21 f0 02 40 1a 32 00 00
>0241a8	10 00 0c 00 20 3e 58 fd 1a f0 02 40 1a 32 00 00
>0241b8	12 00 0d 00 20 3e 2c fd 23 fd 19 f0 03 40 1a 32
>0241c8	00 00 10 00 0e 00 20 3e d8 fc 02 f0 02 40 1a 32
>0241d8	00 00 10 00 0f 00 20 3e 00 fd 22 f0 06 40 1a 32
>0241e8	00 00 12 00 10 00 20 3e 49 fd f3 fb 10 f0 06 40
>0241f8	1a 32 00 00 0e 00 11 00 20 3e 2c f6 03 40 1a 32
>024208	00 00 10 00 12 00 20 3e 55 fe e1 f5 03 40 1a 32
>024218	00 00 10 00 13 00 20 3e 34 fe a5 f1 02 40 1a 32
>024228	00 00 0e 00 14 00 20 3e 10 f0 06 40 1a 32 00 00
>024238	14 00 15 00 82 cd 82 ca 17 c0 06 22 0b 24 05 10
>024248	25 60 00 00 14 00 16 00 1b 3e ef cc 0f c0 06 22
>024258	0b 24 01 10 4b 88 00 00 12 00 17 00 ba cd 94 ca
>024268	10 c0 06 22 03 10 cb 98 00 00 10 00 18 00 0f ce
>024278	19 c0 06 22 05 10 53 b0 00 00 12 00 19 00 1b 3e
>024288	30 ce 30 c6 06 22 02 10 39 a5 00 00 10 00 1a 00
>024298	05 c0 06 22 0b 24 05 10 6f 44 00 00 12 00 1b 00
>0242a8	2f cd e2 c9 0b c0 06 22 05 10 10 ad 00 00 10 00
>0242b8	1c 00 1b 3e 52 cd 02 c0 06 22 6f 40 00 00 12 00
>0242c8	1d 00 1b 3e 14 c0 06 22 0b 24 04 10 97 56 00 00
>0242d8	14 00 1e 00 1b 3e e5 cd f6 c1 06 22 0b 24 05 10
>0242e8	37 77 00 00 16 00 1f 00 1b 3e a1 cd 88 ca 10 c0
>0242f8	06 22 0b 24 01 10 bf 60 00 00 10 00 20 00 64 ce
>024308	62 cb 0b c0 06 22 8f 40 00 00 0e 00 21 00 3b c6
>024318	06 22 01 10 e6 ba 00 00 12 00 22 00 1b 3e c8 cc
>024328	0a c0 06 22 02 10 81 b1 00 00 12 00 23 00 1b 3e
>024338	ce c4 06 22 0b 24 04 10 5c bb 00 00 10 00 24 00
>024348	1b 3e 32 ce 05 c0 06 22 3b 40 00 00 10 00 25 00
>024358	1b 3e d0 c5 06 22 05 10 b8 9a 00 00 12 00 26 00
>024368	e7 cd 09 c0 06 22 0b 24 06 10 aa 49 00 00 12 00
>024378	27 00 1b 3e d3 cd e7 c3 06 22 05 10 8e 9a 00 00
>024388	0c 00 28 00 11 c0 06 22 9f 40 00 00 10 00 29 00
>024398	3b ce 21 c0 06 22 02 10 d1 53 00 00 12 00 2a 00
>0243a8	2e ce c5 ca 18 c0 06 22 05 10 4b 6f 00 00 14 00
>0243b8	2b 00 1b 3e fa cc d1 ca 1e c0 06 22 0b 24 89 40
>0243c8	00 00 10 00 2c 00 1b 3e 30 ce 21 c0 06 22 73 af
>0243d8	00 00 10 00 2d 00 1b 3e 60 c6 06 22 01 10 ea a7
>0243e8	00 00 0e 00 2e 00 1b 3e 04 c0 06 22 80 40 00 00
>0243f8	0c 00 2f 00 c9 c4 06 22 5d 40 00 00 12 00 30 00
>024408	1b 3e 01 c0 06 22 0b 24 05 10 c1 9f 00 00 0e 00
>024418	31 00 5f cd 17 c0 06 22 8a 40 00 00 12 00 32 00
>024428	1b 3e a8 cd 0b c0 06 22 03 10 ac b8 00 00 0e 00
>024438	33 00 8d cd 0d c0 06 22 46 bb 00 00 14 00 34 00
>024448	1b 3e 53 cd b6 c9 24 c0 06 22 05 10 f7 aa 00 00
>024458	10 00 35 00 1b 3e f8 c4 06 22 03 10 85 9e 00 00
>024468	14 00 36 00 1b 3e 81 cd 73 c9 05 c0 06 22 01 10
>024478	c0 83 00 00 10 00 37 00 b2 cd 04 c0 06 22 06 10
>024488	00 4a 00 00 12 00 38 00 1b 3e 75 c5 06 22 0b 24
>024498	01 10 a3 b2 00 00 10 00 39 00 1b 3e 33 c6 06 22
>0244a8	0b 24 91 40 00 00 14 00 3a 00 1b 3e d7 cc 2f c0
>0244b8	06 22 0b 24 06 10 c6 4a 00 00 0c 00 3b 00 1a c0
>0244c8	06 22 6e 40 00 00 0e 00 3c 00 e6 cd 23 c0 06 22
>0244d8	84 40 00 00 12 00 3d 00 1b 3e 0b c0 06 22 0b 24
>0244e8	01 10 f2 ab 00 00 12 00 3e 00 13 ce e6 ca 06 c0
>0244f8	06 22 01 10 7d 5f 00 00 10 00 3f 00 cb cc 5d c6
>024508	06 22 0b 24 84 40 00 00 12 00 40 00 1b 3e 3c ce
>024518	9a c2 06 22 03 10 6c 62 00 00 10 00 41 00 28 c6
>024528	06 22 0b 24 01 10 aa 9d 00 00 10 00 42 00 2b c6
>024538	06 22 0b 24 01 10 e3 ab 00 00 10 00 43 00 a4 cd
>024548	24 c0 06 22 02 10 de ac 00 00 12 00 44 00 1b 3e
>024558	af cd 10 c0 06 22 0b 24 c1 40 00 00 14 00 45 00
>024568	1b 3e 10 ce 1f c0 06 22 0b 24 02 10 77 57 00 00
>024578	10 00 46 00 29 cd 0a c0 06 22 05 10 8a 47 00 00
>024588	12 00 47 00 38 ce 6e c3 06 22 0b 24 03 10 d6 5e
>024598	00 00 12 00 48 00 1b 3e 4d cd be cb 19 c0 06 22
>0245a8	6b 61 00 00 12 00 49 00 1b 3e fb cd c0 c8 08 c0
>0245b8	06 22 a8 67 00 00 10 00 4a 00 ab cd 47 c6 06 22
>0245c8	03 10 ef 8c 00 00 0e 00 4b 00 ca cc df c2 06 22
>0245d8	4e 40 00 00 12 00 4c 00 1b 3e 1e cd 1f c0 06 22
>0245e8	01 10 6e 61 00 00 10 00 4d 00 d9 cd 12 c0 06 22
>0245f8	0b 24 84 40 00 00 0e 00 4e 00 17 c0 06 22 01 10
>024608	d0 51 00 00 0e 00 4f 00 7e c5 06 22 01 10 04 56
>024618	00 00 12 00 50 00 1b 3e c4 c4 06 22 0b 24 04 10
>024628	c0 9e 00 00 1a 00 51 00 1b 3e 18 e0 06 22 0e 00
>024638	0b 41 41 50 56 4a 20 41 20 49 46 42 00 00 16 00
>024648	52 00 57 e5 06 22 0c 00 08 54 45 42 4c 50 53 59
>024658	41 00 00 00 12 00 53 00 31 ee 75 e5 06 22 06 00
>024668	03 51 50 4c 00 00 18 00 54 00 1b 3e 49 ed 9b e1
>024678	06 22 0a 00 07 59 45 4a 47 55 4e 42 00 00 1a 00
>024688	55 00 1b 3e c9 ec 05 e0 06 22 0c 00 08 41 51 20
>024698	56 54 20 53 5a 00 00 00 1c 00 56 00 1b 3e 41 ee
>0246a8	a2 e5 06 22 0e 00 0b 4a 20 20 54 4c 47 44 50 20
>0246b8	4d 4a 00 00 16 00 57 00 f5 ec 01 e0 06 22 0a 00
>0246c8	07 4b 43 57 53 20 52 54 00 00 18 00 58 00 1b 3e
>0246d8	16 e0 06 22 0c 00 08 48 20 51 50 20 4d 56 51 00
>0246e8	00 00 0e 00 59 00 13 e6 06 22 04 00 01 46 00 00
>0246f8	18 00 5a 00 1b 3e f3 ec 59 ee 06 e0 06 22 08 00
>024708	04 44 51 46 43 00 00 00 12 00 5b 00 1b 3e e4 ed
>024718	3a e4 06 22 04 00 00 00 00 00 12 00 5c 00 1b 3e
>024728	05 e0 06 22 06 00 02 5a 42 00 00 00 16 00 5d 00
>024738	dc ed bf e0 06 22 0a 00 06 4b 20 58 20 20 52 00
>024748	00 00 14 00 5e 00 1b 3e 20 ed 08 e0 06 22 06 00
>024758	03 4a 55 51 00 00 16 00 5f 00 1b 3e 0a ee 01 e0
>024768	06 22 08 00 04 51 42 50 52 00 00 00 1a 00 60 00
>024778	1b 3e 14 ee 10 e0 06 22 0c 00 08 57 20 4c 47 20
>024788	53 54 4c 00 00 00 1a 00 61 00 1b 3e 5d e6 06 22
>024798	0e 00 0b 52 47 20 4a 46 58 58 50 53 44 57 00 00
>0247a8	16 00 62 00 a8 ed 15 e0 06 22 0a 00 07 4d 51 4c
>0247b8	20 42 51 42 00 00 1a 00 63 00 1b 3e 1a e0 06 22
>0247c8	0e 00 0a 4e 50 44 20 20 48 48 55 59 58 00 00 00
>0247d8	12 00 64 00 2e ed 73 e1 06 22 06 00 03 58 57 48
>0247e8	00 00 1c 00 65 00 1b 3e 06 ee 1f e0 06 22 0e 00
>0247f8	0a 43 4a 20 51 20 20 48 5a 59 50 00 00 00 1a 00
>024808	66 00 1b 3e b7 ed 08 e0 06 22 0c 00 09 45 55 20
>024818	4f 20 57 57 45 48 00 00 12 00 67 00 1b 3e 7b ed
>024828	1c e0 06 22 04 00 01 4c 00 00 18 00 68 00 0d ee
>024838	10 e0 06 22 0c 00 09 4d 4f 54 48 48 44 56 4d 54
>024848	00 00 14 00 69 00 1b 3e 5e ee e5 e3 06 22 06 00
>024858	02 4d 4f 00 00 00 16 00 6a 00 d5 ed 24 e0 06 22
>024868	0a 00 07 43 20 41 50 49 20 4c 00 00 14 00 6b 00
>024878	db e5 06 22 0a 00 06 4d 57 55 45 58 52 00 00 00
>024888	1a 00 6c 00 1b 3e e6 ed 67 e5 06 22 0c 00 08 44
>024898	47 45 4d 52 57 43 4e 00 00 00 12 00 6d 00 1b 3e
>0248a8	04 e0 06 22 06 00 02 57 4f 00 00 00 16 00 6e 00
>0248b8	ac e5 06 22 0c 00 08 5a 4c 4e 52 45 4e 4c 5a 00
>0248c8	00 00 14 00 6f 00 31 e6 06 22 0a 00 07 46 59 20
>0248d8	20 4b 4d 4c 00 00 12 00 70 00 1b 3e 04 ee 01 e0
>0248e8	06 22 04 00 01 43 00 00 12 00 71 00 1b 3e 19 e0
>0248f8	06 22 06 00 03 54 20 42 00 00 0e 00 72 00 aa e5
>024908	06 22 04 00 01 42 00 00 18 00 73 00 1e ed 11 e0
>024918	06 22 0c 00 09 45 4c 4a 20 53 4e 44 45 43 00 00
>024928	14 00 74 00 a7 ed 37 e8 16 e0 06 22 06 00 03 48
>024938	20 4b 00 00 14 00 75 00 1b 3e 01 e0 06 22 08 00
>024948	04 49 57 42 45 00 00 00 1a 00 76 00 e5 ed 17 e0
>024958	06 22 0e 00 0b 59 55 56 20 58 58 50 4e 43 20 4e
>024968	00 00 16 00 77 00 1b 3e 53 ed 62 e3 06 22 08 00
>024978	04 58 4e 44 57 00 00 00 12 00 78 00 db ed 03 e0
>024988	06 22 06 00 03 46 44 43 00 00 12 00 79 00 1b 3e
>024998	0d e0 06 22 06 00 02 49 50 00 00 00 18 00 7a 00
>0249a8	1b 3e 0f e0 06 22 0c 00 08 56 51 4b 53 42 4f 4a
>0249b8	47 00 00 00 14 00 7b 00 1b 3e 48 ed b0 ec 08 e0
>0249c8	06 22 04 00 01 57 00 00 12 00 7c 00 53 ed 2e e2
>0249d8	06 22 06 00 02 52 4c 00 00 00 1e 00 7d 00 1b 3e
>0249e8	76 ed 32 e8 05 e0 06 22 0e 00 0a 52 53 4d 41 46
>0249f8	49 43 52 4b 56 00 00 00 12 00 7e 00 06 e0 06 22
>024a08	08 00 04 52 4a 58 41 00 00 00 18 00 7f 00 1b 3e
>024a18	fd ec 47 e6 06 22 0a 00 06 44 49 56 45 20 4a 00
>024a28	00 00 14 00 80 00 1b 3e 0a e0 06 22 08 00 05 4a
>024a38	20 53 4a 43 00 00 12 00 81 00 40 ee 96 e2 06 22
>024a48	06 00 02 4b 51 00 00 00 0e 00 82 00 1b e5 06 22
>024a58	04 00 01 55 00 00 18 00 83 00 1b 3e d1 e5 06 22
>024a68	0c 00 08 44 54 43 20 4b 4a 54 58 00 00 00 1a 00
>024a78	84 00 1b 3e f6 ec 0b e0 06 22 0c 00 09 42 20 4c
>024a88	4e 56 4a 20 53 4b 00 00 12 00 85 00 08 e0 06 22
>024a98	08 00 05 4b 20 4b 52 54 00 00 16 00 86 00 2f ed
>024aa8	14 e0 06 22 0a 00 07 4a 59 54 43 4d 55 4d 00 00
>024ab8	0e 00 87 00 13 e0 06 22 04 00 01 57 00 00 16 00
>024ac8	88 00 1b 3e 15 e0 06 22 0a 00 07 48 46 57 20 4b
>024ad8	4b 43 00 00 16 00 89 00 1b 3e fd ec 94 e5 06 22
>024ae8	08 00 04 4f 4d 43 59 00 00 00 12 00 8a 00 1b 3e
>024af8	50 e5 06 22 06 00 03 54 56 52 00 00 16 00 8b 00
>024b08	47 ed ff ec 18 e0 06 22 08 00 05 49 4c 49 49 53
>024b18	00 00 14 00 8c 00 1b 3e 6e ee ce ed 07 e0 06 22
>024b28	04 00 00 00 00 00 36 00 8d 00 d1 dc 52 d2 00 40
>024b38	1a 32 06 22 0b 24 2c 76 18 32 d1 dc 52 d2 01 40
>024b48	1a 32 06 22 04 10 aa 6b 18 32 d1 dc 52 d2 02 40
>024b58	1a 32 06 22 0b 24 02 10 4d 9b 00 00 2e 00 8e 00
>024b68	12 d0 00 40 1a 32 06 22 05 10 0f 4a 18 32 12 d0
>024b78	01 40 1a 32 06 22 0b 24 04 10 7e 9f 18 32 12 d0
>024b88	02 40 1a 32 06 22 01 40 00 00 5c 00 8f 00 13 d0
>024b98	00 40 1a 32 06 22 04 10 3d a1 18 32 13 d0 01 40
>024ba8	1a 32 06 22 03 10 a7 99 18 32 13 d0 02 40 1a 32
>024bb8	06 22 04 10 d0 aa 18 32 13 d0 03 40 1a 32 06 22
>024bc8	0b 24 be 90 18 32 13 d0 04 40 1a 32 06 22 0b 24
>024bd8	05 10 a7 86 18 32 13 d0 05 40 1a 32 06 22 0b 24
>024be8	05 10 1d 9d 00 00 48 00 90 00 fa d4 00 40 1a 32
>024bf8	06 22 02 10 35 44 18 32 fa d4 01 40 1a 32 06 22
>024c08	ca 75 18 32 fa d4 02 40 1a 32 06 22 0b 24 c0 40
>024c18	18 32 fa d4 03 40 1a 32 06 22 04 10 4c 4a 18 32
>024c28	fa d4 04 40 1a 32 06 22 04 10 ec 62 00 00 6c 00
>024c38	91 00 7f dd 9c d0 00 40 1a 32 06 22 0b 24 1d 40
>024c48	18 32 7f dd 9c d0 01 40 1a 32 06 22 35 40 18 32
>024c58	7f dd 9c d0 02 40 1a 32 06 22 a7 40 18 32 7f dd
>024c68	9c d0 03 40 1a 32 06 22 ab 40 18 32 7f dd 9c d0
>024c78	04 40 1a 32 06 22 21 40 18 32 7f dd 9c d0 05 40
>024c88	1a 32 06 22 0b 24 02 10 0a 5e 18 32 7f dd 9c d0
>024c98	06 40 1a 32 06 22 6b 40 00 00 60 00 92 00 6a de
>024ca8	59 de 11 d0 00 40 1a 32 06 22 05 10 1c ad 18 32
>024cb8	6a de 59 de 11 d0 01 40 1a 32 06 22 02 10 89 6e
>024cc8	18 32 6a de 59 de 11 d0 02 40 1a 32 06 22 0b 24
>024cd8	05 10 f1 91 18 32 6a de 59 de 11 d0 03 40 1a 32
>024ce8	06 22 0b 24 b6 40 18 32 6a de 59 de 11 d0 04 40
>024cf8	1a 32 06 22 04 10 1f 78 00 00 3c 00 93 00 09 d0
>024d08	00 40 1a 32 06 22 04 10 d5 89 18 32 09 d0 01 40
>024d18	1a 32 06 22 94 40 18 32 09 d0 02 40 1a 32 06 22
>024d28	04 10 57 b6 18 32 09 d0 03 40 1a 32 06 22 0b 24
>024d38	02 10 7c 64 00 00 62 00 94 00 57 d6 00 40 1a 32
>024d48	06 22 0b 24 03 10 d3 56 18 32 57 d6 01 40 1a 32
>024d58	06 22 0b 24 94 b3 18 32 57 d6 02 40 1a 32 06 22
>024d68	81 40 18 32 57 d6 03 40 1a 32 06 22 0b 24 27 aa
>024d78	18 32 57 d6 04 40 1a 32 06 22 8f 40 18 32 57 d6
>024d88	05 40 1a 32 06 22 02 10 b3 71 18 32 57 d6 06 40
>024d98	1a 32 06 22 58 40 00 00 74 00 95 00 2e de e4 d9
>024da8	02 d0 00 40 1a 32 06 22 0b 24 04 10 16 6b 18 32
>024db8	2e de e4 d9 02 d0 01 40 1a 32 06 22 04 10 d2 bd
>024dc8	18 32 2e de e4 d9 02 d0 02 40 1a 32 06 22 0b 24
>024dd8	c4 40 18 32 2e de e4 d9 02 d0 03 40 1a 32 06 22
>024de8	05 10 2f 55 18 32 2e de e4 d9 02 d0 04 40 1a 32
>024df8	06 22 0b 24 03 10 47 ba 18 32 2e de e4 d9 02 d0
>024e08	05 40 1a 32 06 22 0b 24 c5 40 00 00 2e 00 96 00
>024e18	0d d0 00 40 1a 32 06 22 7e 53 18 32 0d d0 01 40
>024e28	1a 32 06 22 0b 24 03 10 f9 95 18 32 0d d0 02 40
>024e38	1a 32 06 22 0b 24 b6 40 00 00 3c 00 97 00 8b fd
>024e48	21 f0 00 40 1a 32 06 22 04 00 01 47 18 32 8b fd
>024e58	21 f0 01 40 1a 32 06 22 06 00 02 59 41 00 18 32
>024e68	8b fd 21 f0 02 40 1a 32 06 22 0a 00 07 4f 20 20
>024e78	41 58 4e 49 00 00 46 00 98 00 58 fd 1a f0 00 40
>024e88	1a 32 06 22 06 00 02 5a 4e 00 18 32 58 fd 1a f0
>024e98	01 40 1a 32 06 22 0e 00 0a 51 42 20 48 49 59 53
>024ea8	20 58 4f 00 18 32 58 fd 1a f0 02 40 1a 32 06 22
>024eb8	0a 00 06 53 42 42 4f 53 59 00 00 00 5c 00 99 00
>024ec8	2c fd 23 fd 19 f0 00 40 1a 32 06 22 0e 00 0b 47
>024ed8	20 55 20 4d 42 45 50 46 57 44 18 32 2c fd 23 fd
>024ee8	19 f0 01 40 1a 32 06 22 08 00 05 53 43 56 55 41
>024ef8	18 32 2c fd 23 fd 19 f0 02 40 1a 32 06 22 04 00
>024f08	00 00 18 32 2c fd 23 fd 19 f0 03 40 1a 32 06 22
>024f18	06 00 03 49 46 45 00 00 3e 00 9a 00 d8 fc 02 f0
>024f28	00 40 1a 32 06 22 08 00 05 4b 47 53 59 49 18 32
>024f38	d8 fc 02 f0 01 40 1a 32 06 22 08 00 05 42 53 20
>024f48	52 45 18 32 d8 fc 02 f0 02 40 1a 32 06 22 06 00
>024f58	03 41 50 42 00 00 96 00 9b 00 00 fd 22 f0 00 40
>024f68	1a 32 06 22 08 00 05 52 45 41 50 50 18 32 00 fd
>024f78	22 f0 01 40 1a 32 06 22 0c 00 08 58 51 56 4e 57
>024f88	51 55 54 00 18 32 00 fd 22 f0 02 40 1a 32 06 22
>024f98	0e 00 0b 46 20 48 45 48 20 20 41 4a 20 53 18 32
>024fa8	00 fd 22 f0 03 40 1a 32 06 22 08 00 04 53 20 43
>024fb8	4f 00 18 32 00 fd 22 f0 04 40 1a 32 06 22 0c 00
>024fc8	09 4b 20 20 53 20 4e 5a 55 4d 18 32 00 fd 22 f0
>024fd8	05 40 1a 32 06 22 04 00 00 00 18 32 00 fd 22 f0
>024fe8	06 40 1a 32 06 22 04 00 01 51 00 00 94 00 9c 00
>024ff8	49 fd f3 fb 10 f0 00 40 1a 32 06 22 04 00 01 41
>025008	18 32 49 fd f3 fb 10 f0 01 40 1a 32 06 22 04 00
>025018	01 4d 18 32 49 fd f3 fb 10 f0 02 40 1a 32 06 22
>025028	04 00 00 00 18 32 49 fd f3 fb 10 f0 03 40 1a 32
>025038	06 22 0c 00 08 55 4a 4a 43 20 20 20 48 00 18 32
>025048	49 fd f3 fb 10 f0 04 40 1a 32 06 22 06 00 02 54
>025058	53 00 18 32 49 fd f3 fb 10 f0 05 40 1a 32 06 22
>025068	0c 00 08 57 49 41 20 20 54 4b 4b 00 18 32 49 fd
>025078	f3 fb 10 f0 06 40 1a 32 06 22 04 00 00 00 00 00
>025088	48 00 9d 00 2c f6 00 40 1a 32 06 22 06 00 03 42
>025098	45 43 18 32 2c f6 01 40 1a 32 06 22 06 00 03 56
>0250a8	20 4e 18 32 2c f6 02 40 1a 32 06 22 04 00 01 4b
>0250b8	18 32 2c f6 03 40 1a 32 06 22 0c 00 09 5a 4e 47
>0250c8	43 20 51 59 4c 51 00 00 5c 00 9e 00 55 fe e1 f5
>0250d8	00 40 1a 32 06 22 0e 00 0a 54 43 4e 4d 4e 20 58
>0250e8	51 54 55 00 18 32 55 fe e1 f5 01 40 1a 32 06 22
>0250f8	08 00 04 53 55 4d 4e 00 18 32 55 fe e1 f5 02 40
>025108	1a 32 06 22 08 00 04 48 5a 42 4f 00 18 32 55 fe
>025118	e1 f5 03 40 1a 32 06 22 0a 00 06 46 20 20 20 53
>025128	51 00 00 00 44 00 9f 00 34 fe a5 f1 00 40 1a 32
>025138	06 22 06 00 03 46 4a 59 18 32 34 fe a5 f1 01 40
>025148	1a 32 06 22 0a 00 07 4f 54 51 51 20 20 55 18 32
>025158	34 fe a5 f1 02 40 1a 32 06 22 0c 00 08 51 20 20
>025168	44 4a 4b 4f 52 00 00 00 82 00 a0 00 10 f0 00 40
>025178	1a 32 06 22 0c 00 08 4c 52 48 4d 57 56 46 55 00
>025188	18 32 10 f0 01 40 1a 32 06 22 0c 00 09 4b 56 4b
>025198	4a 4e 4c 46 4e 4e 18 32 10 f0 02 40 1a 32 06 22
>0251a8	04 00 00 00 18 32 10 f0 03 40 1a 32 06 22 08 00
>0251b8	04 53 41 5a 4c 00 18 32 10 f0 04 40 1a 32 06 22
>0251c8	04 00 00 00 18 32 10 f0 05 40 1a 32 06 22 0a 00
>0251d8	06 4a 50 4a 59 20 48 00 18 32 10 f0 06 40 1a 32
>0251e8	06 22 06 00 03 4f 51 4a 00 00 16 00 a1 00 1c 3e
>0251f8	82 cd 82 ca 17 c0 06 22 0b 24 05 10 25 60 00 00
>025208	14 00 a2 00 1c 3e ef cc 0f c0 06 22 0b 24 01 10
>025218	4b 88 00 00 14 00 a3 00 1c 3e ba cd 94 ca 10 c0
>025228	06 22 03 10 cb 98 00 00 12 00 a4 00 1c 3e 0f ce
>025238	19 c0 06 22 05 10 53 b0 00 00 12 00 a5 00 1c 3e
>025248	30 ce 30 c6 06 22 02 10 39 a5 00 00 12 00 a6 00
>025258	1c 3e 05 c0 06 22 0b 24 05 10 6f 44 00 00 14 00
>025268	a7 00 1c 3e 2f cd e2 c9 0b c0 06 22 05 10 10 ad
>025278	00 00 10 00 a8 00 1c 3e 52 cd 02 c0 06 22 6f 40
>025288	00 00 12 00 a9 00 1c 3e 14 c0 06 22 0b 24 04 10
>025298	97 56 00 00 14 00 aa 00 1c 3e e5 cd f6 c1 06 22
>0252a8	0b 24 05 10 37 77 00 00 16 00 ab 00 1c 3e a1 cd
>0252b8	88 ca 10 c0 06 22 0b 24 01 10 bf 60 00 00 12 00
>0252c8	ac 00 1c 3e 64 ce 62 cb 0b c0 06 22 8f 40 00 00
>0252d8	10 00 ad 00 1c 3e 3b c6 06 22 01 10 e6 ba 00 00
>0252e8	12 00 ae 00 1c 3e c8 cc 0a c0 06 22 02 10 81 b1
>0252f8	00 00 12 00 af 00 1c 3e ce c4 06 22 0b 24 04 10
>025308	5c bb 00 00 10 00 b0 00 1c 3e 32 ce 05 c0 06 22
>025318	3b 40 00 00 10 00 b1 00 1c 3e d0 c5 06 22 05 10
>025328	b8 9a 00 00 14 00 b2 00 1c 3e e7 cd 09 c0 06 22
>025338	0b 24 06 10 aa 49 00 00 12 00 b3 00 1c 3e d3 cd
>025348	e7 c3 06 22 05 10 8e 9a 00 00 0e 00 b4 00 1c 3e
>025358	11 c0 06 22 9f 40 00 00 12 00 b5 00 1c 3e 3b ce
>025368	21 c0 06 22 02 10 d1 53 00 00 14 00 b6 00 1c 3e
>025378	2e ce c5 ca 18 c0 06 22 05 10 4b 6f 00 00 14 00
>025388	b7 00 1c 3e fa cc d1 ca 1e c0 06 22 0b 24 89 40
>025398	00 00 10 00 b8 00 1c 3e 30 ce 21 c0 06 22 73 af
>0253a8	00 00 10 00 b9 00 1c 3e 60 c6 06 22 01 10 ea a7
>0253b8	00 00 0e 00 ba 00 1c 3e 04 c0 06 22 80 40 00 00
>0253c8	0e 00 bb 00 1c 3e c9 c4 06 22 5d 40 00 00 12 00
>0253d8	bc 00 1c 3e 01 c0 06 22 0b 24 05 10 c1 9f 00 00
>0253e8	10 00 bd 00 1c 3e 5f cd 17 c0 06 22 8a 40 00 00
>0253f8	12 00 be 00 1c 3e a8 cd 0b c0 06 22 03 10 ac b8
>025408	00 00 10 00 bf 00 1c 3e 8d cd 0d c0 06 22 46 bb
>025418	00 00 14 00 c0 00 1c 3e 53 cd b6 c9 24 c0 06 22
>025428	05 10 f7 aa 00 00 10 00 c1 00 1c 3e f8 c4 06 22
>025438	03 10 85 9e 00 00 14 00 c2 00 1c 3e 81 cd 73 c9
>025448	05 c0 06 22 01 10 c0 83 00 00 12 00 c3 00 1c 3e
>025458	b2 cd 04 c0 06 22 06 10 00 4a 00 00 12 00 c4 00
>025468	1c 3e 75 c5 06 22 0b 24 01 10 a3 b2 00 00 10 00
>025478	c5 00 1c 3e 33 c6 06 22 0b 24 91 40 00 00 14 00
>025488	c6 00 1c 3e d7 cc 2f c0 06 22 0b 24 06 10 c6 4a
>025498	00 00 0e 00 c7 00 1c 3e 1a c0 06 22 6e 40 00 00
>0254a8	10 00 c8 00 1c 3e e6 cd 23 c0 06 22 84 40 00 00
>0254b8	12 00 c9 00 1c 3e 0b c0 06 22 0b 24 01 10 f2 ab
>0254c8	00 00 14 00 ca 00 1c 3e 13 ce e6 ca 06 c0 06 22
>0254d8	01 10 7d 5f 00 00 12 00 cb 00 1c 3e cb cc 5d c6
>0254e8	06 22 0b 24 84 40 00 00 12 00 cc 00 1c 3e 3c ce
>0254f8	9a c2 06 22 03 10 6c 62 00 00 12 00 cd 00 1c 3e
>025508	28 c6 06 22 0b 24 01 10 aa 9d 00 00 12 00 ce 00
>025518	1c 3e 2b c6 06 22 0b 24 01 10 e3 ab 00 00 12 00
>025528	cf 00 1c 3e a4 cd 24 c0 06 22 02 10 de ac 00 00
>025538	12 00 d0 00 1c 3e af cd 10 c0 06 22 0b 24 c1 40
>025548	00 00 14 00 d1 00 1c 3e 10 ce 1f c0 06 22 0b 24
>025558	02 10 77 57 00 00 12 00 d2 00 1c 3e 29 cd 0a c0
>025568	06 22 05 10 8a 47 00 00 14 00 d3 00 1c 3e 38 ce
>025578	6e c3 06 22 0b 24 03 10 d6 5e 00 00 12 00 d4 00
>025588	1c 3e 4d cd be cb 19 c0 06 22 6b 61 00 00 12 00
>025598	d5 00 1c 3e fb cd c0 c8 08 c0 06 22 a8 67 00 00
>0255a8	12 00 d6 00 1c 3e ab cd 47 c6 06 22 03 10 ef 8c
>0255b8	00 00 10 00 d7 00 1c 3e ca cc df c2 06 22 4e 40
>0255c8	00 00 12 00 d8 00 1c 3e 1e cd 1f c0 06 22 01 10
>0255d8	6e 61 00 00 12 00 d9 00 1c 3e d9 cd 12 c0 06 22
>0255e8	0b 24 84 40 00 00 10 00 da 00 1c 3e 17 c0 06 22
>0255f8	01 10 d0 51 00 00 10 00 db 00 1c 3e 7e c5 06 22
>025608	01 10 04 56 00 00 12 00 dc 00 1c 3e c4 c4 06 22
>025618	0b 24 04 10 c0 9e 00 00 1a 00 dd 00 1c 3e 18 e0
>025628	06 22 0e 00 0b 41 41 50 56 4a 20 41 20 49 46 42
>025638	00 00 18 00 de 00 1c 3e 57 e5 06 22 0c 00 08 54
>025648	45 42 4c 50 53 59 41 00 00 00 14 00 df 00 1c 3e
>025658	31 ee 75 e5 06 22 06 00 03 51 50 4c 00 00 18 00
>025668	e0 00 1c 3e 49 ed 9b e1 06 22 0a 00 07 59 45 4a
>025678	47 55 4e 42 00 00 1a 00 e1 00 1c 3e c9 ec 05 e0
>025688	06 22 0c 00 08 41 51 20 56 54 20 53 5a 00 00 00
>025698	1c 00 e2 00 1c 3e 41 ee a2 e5 06 22 0e 00 0b 4a
>0256a8	20 20 54 4c 47 44 50 20 4d 4a 00 00 18 00 e3 00
>0256b8	1c 3e f5 ec 01 e0 06 22 0a 00 07 4b 43 57 53 20
>0256c8	52 54 00 00 18 00 e4 00 1c 3e 16 e0 06 22 0c 00
>0256d8	08 48 20 51 50 20 4d 56 51 00 00 00 10 00 e5 00
>0256e8	1c 3e 13 e6 06 22 04 00 01 46 00 00 18 00 e6 00
>0256f8	1c 3e f3 ec 59 ee 06 e0 06 22 08 00 04 44 51 46
>025708	43 00 00 00 12 00 e7 00 1c 3e e4 ed 3a e4 06 22
>025718	04 00 00 00 00 00 12 00 e8 00 1c 3e 05 e0 06 22
>025728	06 00 02 5a 42 00 00 00 18 00 e9 00 1c 3e dc ed
>025738	bf e0 06 22 0a 00 06 4b 20 58 20 20 52 00 00 00
>025748	14 00 ea 00 1c 3e 20 ed 08 e0 06 22 06 00 03 4a
>025758	55 51 00 00 16 00 eb 00 1c 3e 0a ee 01 e0 06 22
>025768	08 00 04 51 42 50 52 00 00 00 1a 00 ec 00 1c 3e
>025778	14 ee 10 e0 06 22 0c 00 08 57 20 4c 47 20 53 54
>025788	4c 00 00 00 1a 00 ed 00 1c 3e 5d e6 06 22 0e 00
>025798	0b 52 47 20 4a 46 58 58 50 53 44 57 00 00 18 00
>0257a8	ee 00 1c 3e a8 ed 15 e0 06 22 0a 00 07 4d 51 4c
>0257b8	20 42 51 42 00 00 1a 00 ef 00 1c 3e 1a e0 06 22
>0257c8	0e 00 0a 4e 50 44 20 20 48 48 55 59 58 00 00 00
>0257d8	14 00 f0 00 1c 3e 2e ed 73 e1 06 22 06 00 03 58
>0257e8	57 48 00 00 1c 00 f1 00 1c 3e 06 ee 1f e0 06 22
>0257f8	0e 00 0a 43 4a 20 51 20 20 48 5a 59 50 00 00 00
>025808	1a 00 f2 00 1c 3e b7 ed 08 e0 06 22 0c 00 09 45
>025818	55 20 4f 20 57 57 45 48 00 00 12 00 f3 00 1c 3e
>025828	7b ed 1c e0 06 22 04 00 01 4c 00 00 1a 00 f4 00
>025838	1c 3e 0d ee 10 e0 06 22 0c 00 09 4d 4f 54 48 48
>025848	44 56 4d 54 00 00 14 00 f5 00 1c 3e 5e ee e5 e3
>025858	06 22 06 00 02 4d 4f 00 00 00 18 00 f6 00 1c 3e
>025868	d5 ed 24 e0 06 22 0a 00 07 43 20 41 50 49 20 4c
>025878	00 00 16 00 f7 00 1c 3e db e5 06 22 0a 00 06 4d
>025888	57 55 45 58 52 00 00 00 1a 00 f8 00 1c 3e e6 ed
>025898	67 e5 06 22 0c 00 08 44 47 45 4d 52 57 43 4e 00
>0258a8	00 00 12 00 f9 00 1c 3e 04 e0 06 22 06 00 02 57
>0258b8	4f 00 00 00 18 00 fa 00 1c 3e ac e5 06 22 0c 00
>0258c8	08 5a 4c 4e 52 45 4e 4c 5a 00 00 00 16 00 fb 00
>0258d8	1c 3e 31 e6 06 22 0a 00 07 46 59 20 20 4b 4d 4c
>0258e8	00 00 12 00 fc 00 1c 3e 04 ee 01 e0 06 22 04 00
>0258f8	01 43 00 00 12 00 fd 00 1c 3e 19 e0 06 22 06 00
>025908	03 54 20 42 00 00 10 00 fe 00 1c 3e aa e5 06 22
>025918	04 00 01 42 00 00 1a 00 ff 00 1c 3e 1e ed 11 e0
>025928	06 22 0c 00 09 45 4c 4a 20 53 4e 44 45 43 00 00
>025938	16 00 00 01 1c 3e a7 ed 37 e8 16 e0 06 22 06 00
>025948	03 48 20 4b 00 00 14 00 01 01 1c 3e 01 e0 06 22
>025958	08 00 04 49 57 42 45 00 00 00 1c 00 02 01 1c 3e
>025968	e5 ed 17 e0 06 22 0e 00 0b 59 55 56 20 58 58 50
>025978	4e 43 20 4e 00 00 16 00 03 01 1c 3e 53 ed 62 e3
>025988	06 22 08 00 04 58 4e 44 57 00 00 00 14 00 04 01
>025998	1c 3e db ed 03 e0 06 22 06 00 03 46 44 43 00 00
>0259a8	12 00 05 01 1c 3e 0d e0 06 22 06 00 02 49 50 00
>0259b8	00 00 18 00 06 01 1c 3e 0f e0 06 22 0c 00 08 56
>0259c8	51 4b 53 42 4f 4a 47 00 00 00 14 00 07 01 1c 3e
>0259d8	48 ed b0 ec 08 e0 06 22 04 00 01 57 00 00 14 00
>0259e8	08 01 1c 3e 53 ed 2e e2 06 22 06 00 02 52 4c 00
>0259f8	00 00 1e 00 09 01 1c 3e 76 ed 32 e8 05 e0 06 22
>025a08	0e 00 0a 52 53 4d 41 46 49 43 52 4b 56 00 00 00
>025a18	14 00 0a 01 1c 3e 06 e0 06 22 08 00 04 52 4a 58
>025a28	41 00 00 00 18 00 0b 01 1c 3e fd ec 47 e6 06 22
>025a38	0a 00 06 44 49 56 45 20 4a 00 00 00 14 00 0c 01
>025a48	1c 3e 0a e0 06 22 08 00 05 4a 20 53 4a 43 00 00
>025a58	14 00 0d 01 1c 3e 40 ee 96 e2 06 22 06 00 02 4b
>025a68	51 00 00 00 10 00 0e 01 1c 3e 1b e5 06 22 04 00
>025a78	01 55 00 00 18 00 0f 01 1c 3e d1 e5 06 22 0c 00
>025a88	08 44 54 43 20 4b 4a 54 58 00 00 00 1a 00 10 01
>025a98	1c 3e f6 ec 0b e0 06 22 0c 00 09 42 20 4c 4e 56
>025aa8	4a 20 53 4b 00 00 14 00 11 01 1c 3e 08 e0 06 22
>025ab8	08 00 05 4b 20 4b 52 54 00 00 18 00 12 01 1c 3e
>025ac8	2f ed 14 e0 06 22 0a 00 07 4a 59 54 43 4d 55 4d
>025ad8	00 00 10 00 13 01 1c 3e 13 e0 06 22 04 00 01 57
>025ae8	00 00 16 00 14 01 1c 3e 15 e0 06 22 0a 00 07 48
>025af8	46 57 20 4b 4b 43 00 00 16 00 15 01 1c 3e fd ec
>025b08	94 e5 06 22 08 00 04 4f 4d 43 59 00 00 00 12 00
>025b18	16 01 1c 3e 50 e5 06 22 06 00 03 54 56 52 00 00
>025b28	18 00 17 01 1c 3e 47 ed ff ec 18 e0 06 22 08 00
>025b38	05 49 4c 49 49 53 00 00 14 00 18 01 1c 3e 6e ee
>025b48	ce ed 07 e0 06 22 04 00 00 00 00 00 3c 00 19 01
>025b58	1c 3e d1 dc 52 d2 00 40 1a 32 06 22 0b 24 2c 76
>025b68	18 32 1c 3e d1 dc 52 d2 01 40 1a 32 06 22 04 10
>025b78	aa 6b 18 32 1c 3e d1 dc 52 d2 02 40 1a 32 06 22
>025b88	0b 24 02 10 4d 9b 00 00 34 00 1a 01 1c 3e 12 d0
>025b98	00 40 1a 32 06 22 05 10 0f 4a 18 32 1c 3e 12 d0
>025ba8	01 40 1a 32 06 22 0b 24 04 10 7e 9f 18 32 1c 3e
>025bb8	12 d0 02 40 1a 32 06 22 01 40 00 00 68 00 1b 01
>025bc8	1c 3e 13 d0 00 40 1a 32 06 22 04 10 3d a1 18 32
>025bd8	1c 3e 13 d0 01 40 1a 32 06 22 03 10 a7 99 18 32
>025be8	1c 3e 13 d0 02 40 1a 32 06 22 04 10 d0 aa 18 32
>025bf8	1c 3e 13 d0 03 40 1a 32 06 22 0b 24 be 90 18 32
>025c08	1c 3e 13 d0 04 40 1a 32 06 22 0b 24 05 10 a7 86
>025c18	18 32 1c 3e 13 d0 05 40 1a 32 06 22 0b 24 05 10
>025c28	1d 9d 00 00 52 00 1c 01 1c 3e fa d4 00 40 1a 32
>025c38	06 22 02 10 35 44 18 32 1c 3e fa d4 01 40 1a 32
>025c48	06 22 ca 75 18 32 1c 3e fa d4 02 40 1a 32 06 22
>025c58	0b 24 c0 40 18 32 1c 3e fa d4 03 40 1a 32 06 22
>025c68	04 10 4c 4a 18 32 1c 3e fa d4 04 40 1a 32 06 22
>025c78	04 10 ec 62 00 00 7a 00 1d 01 1c 3e 7f dd 9c d0
>025c88	00 40 1a 32 06 22 0b 24 1d 40 18 32 1c 3e 7f dd
>025c98	9c d0 01 40 1a 32 06 22 35 40 18 32 1c 3e 7f dd
>025ca8	9c d0 02 40 1a 32 06 22 a7 40 18 32 1c 3e 7f dd
>025cb8	9c d0 03 40 1a 32 06 22 ab 40 18 32 1c 3e 7f dd
>025cc8	9c d0 04 40 1a 32 06 22 21 40 18 32 1c 3e 7f dd
>025cd8	9c d0 05 40 1a 32 06 22 0b 24 02 10 0a 5e 18 32
>025ce8	1c 3e 7f dd 9c d0 06 40 1a 32 06 22 6b 40 00 00
>025cf8	6a 00 1e 01 1c 3e 6a de 59 de 11 d0 00 40 1a 32
>025d08	06 22 05 10 1c ad 18 32 1c 3e 6a de 59 de 11 d0
>025d18	01 40 1a 32 06 22 02 10 89 6e 18 32 1c 3e 6a de
>025d28	59 de 11 d0 02 40 1a 32 06 22 0b 24 05 10 f1 91
>025d38	18 32 1c 3e 6a de 59 de 11 d0 03 40 1a 32 06 22
>025d48	0b 24 b6 40 18 32 1c 3e 6a de 59 de 11 d0 04 40
>025d58	1a 32 06 22 04 10 1f 78 00 00 44 00 1f 01 1c 3e
>025d68	09 d0 00 40 1a 32 06 22 04 10 d5 89 18 32 1c 3e
>025d78	09 d0 01 40 1a 32 06 22 94 40 18 32 1c 3e 09 d0
>025d88	02 40 1a 32 06 22 04 10 57 b6 18 32 1c 3e 09 d0
>025d98	03 40 1a 32 06 22 0b 24 02 10 7c 64 00 00 70 00
>025da8	20 01 1c 3e 57 d6 00 40 1a 32 06 22 0b 24 03 10
>025db8	d3 56 18 32 1c 3e 57 d6 01 40 1a 32 06 22 0b 24
>025dc8	94 b3 18 32 1c 3e 57 d6 02 40 1a 32 06 22 81 40
>025dd8	18 32 1c 3e 57 d6 03 40 1a 32 06 22 0b 24 27 aa
>025de8	18 32 1c 3e 57 d6 04 40 1a 32 06 22 8f 40 18 32
>025df8	1c 3e 57 d6 05 40 1a 32 06 22 02 10 b3 71 18 32
>025e08	1c 3e 57 d6 06 40 1a 32 06 22 58 40 00 00 80 00
>025e18	21 01 1c 3e 2e de e4 d9 02 d0 00 40 1a 32 06 22
>025e28	0b 24 04 10 16 6b 18 32 1c 3e 2e de e4 d9 02 d0
>025e38	01 40 1a 32 06 22 04 10 d2 bd 18 32 1c 3e 2e de
>025e48	e4 d9 02 d0 02 40 1a 32 06 22 0b 24 c4 40 18 32
>025e58	1c 3e 2e de e4 d9 02 d0 03 40 1a 32 06 22 05 10
>025e68	2f 55 18 32 1c 3e 2e de e4 d9 02 d0 04 40 1a 32
>025e78	06 22 0b 24 03 10 47 ba 18 32 1c 3e 2e de e4 d9
>025e88	02 d0 05 40 1a 32 06 22 0b 24 c5 40 00 00 34 00
>025e98	22 01 1c 3e 0d d0 00 40 1a 32 06 22 7e 53 18 32
>025ea8	1c 3e 0d d0 01 40 1a 32 06 22 0b 24 03 10 f9 95
>025eb8	18 32 1c 3e 0d d0 02 40 1a 32 06 22 0b 24 b6 40
>025ec8	00 00 42 00 23 01 1c 3e 8b fd 21 f0 00 40 1a 32
>025ed8	06 22 04 00 01 47 18 32 1c 3e 8b fd 21 f0 01 40
>025ee8	1a 32 06 22 06 00 02 59 41 00 18 32 1c 3e 8b fd
>025ef8	21 f0 02 40 1a 32 06 22 0a 00 07 4f 20 20 41 58
>025f08	4e 49 00 00 4c 00 24 01 1c 3e 58 fd 1a f0 00 40
>025f18	1a 32 06 22 06 00 02 5a 4e 00 18 32 1c 3e 58 fd
>025f28	1a f0 01 40 1a 32 06 22 0e 00 0a 51 42 20 48 49
>025f38	59 53 20 58 4f 00 18 32 1c 3e 58 fd 1a f0 02 40
>025f48	1a 32 06 22 0a 00 06 53 42 42 4f 53 59 00 00 00
>025f58	64 00 25 01 1c 3e 2c fd 23 fd 19 f0 00 40 1a 32
>025f68	06 22 0e 00 0b 47 20 55 20 4d 42 45 50 46 57 44
>025f78	18 32 1c 3e 2c fd 23 fd 19 f0 01 40 1a 32 06 22
>025f88	08 00 05 53 43 56 55 41 18 32 1c 3e 2c fd 23 fd
>025f98	19 f0 02 40 1a 32 06 22 04 00 00 00 18 32 1c 3e
>025fa8	2c fd 23 fd 19 f0 03 40 1a 32 06 22 06 00 03 49
>025fb8	46 45 00 00 44 00 26 01 1c 3e d8 fc 02 f0 00 40
>025fc8	1a 32 06 22 08 00 05 4b 47 53 59 49 18 32 1c 3e
>025fd8	d8 fc 02 f0 01 40 1a 32 06 22 08 00 05 42 53 20
>025fe8	52 45 18 32 1c 3e d8 fc 02 f0 02 40 1a 32 06 22
>025ff8	06 00 03 41 50 42 00 00 a4 00 27 01 1c 3e 00 fd
>026008	22 f0 00 40 1a 32 06 22 08 00 05 52 45 41 50 50
>026018	18 32 1c 3e 00 fd 22 f0 01 40 1a 32 06 22 0c 00
>026028	08 58 51 56 4e 57 51 55 54 00 18 32 1c 3e 00 fd
>026038	22 f0 02 40 1a 32 06 22 0e 00 0b 46 20 48 45 48
>026048	20 20 41 4a 20 53 18 32 1c 3e 00 fd 22 f0 03 40
>026058	1a 32 06 22 08 00 04 53 20 43 4f 00 18 32 1c 3e
>026068	00 fd 22 f0 04 40 1a 32 06 22 0c 00 09 4b 20 20
>026078	53 20 4e 5a 55 4d 18 32 1c 3e 00 fd 22 f0 05 40
>026088	1a 32 06 22 04 00 00 00 18 32 1c 3e 00 fd 22 f0
>026098	06 40 1a 32 06 22 04 00 01 51 00 00 a2 00 28 01
>0260a8	1c 3e 49 fd f3 fb 10 f0 00 40 1a 32 06 22 04 00
>0260b8	01 41 18 32 1c 3e 49 fd f3 fb 10 f0 01 40 1a 32
>0260c8	06 22 04 00 01 4d 18 32 1c 3e 49 fd f3 fb 10 f0
>0260d8	02 40 1a 32 06 22 04 00 00 00 18 32 1c 3e 49 fd
>0260e8	f3 fb 10 f0 03 40 1a 32 06 22 0c 00 08 55 4a 4a
>0260f8	43 20 20 20 48 00 18 32 1c 3e 49 fd f3 fb 10 f0
>026108	04 40 1a 32 06 22 06 00 02 54 53 00 18 32 1c 3e
>026118	49 fd f3 fb 10 f0 05 40 1a 32 06 22 0c 00 08 57
>026128	49 41 20 20 54 4b 4b 00 18 32 1c 3e 49 fd f3 fb
>026138	10 f0 06 40 1a 32 06 22 04 00 00 00 00 00 50 00
>026148	29 01 1c 3e 2c f6 00 40 1a 32 06 22 06 00 03 42
>026158	45 43 18 32 1c 3e 2c f6 01 40 1a 32 06 22 06 00
>026168	03 56 20 4e 18 32 1c 3e 2c f6 02 40 1a 32 06 22
>026178	04 00 01 4b 18 32 1c 3e 2c f6 03 40 1a 32 06 22
>026188	0c 00 09 5a 4e 47 43 20 51 59 4c 51 00 00 64 00
>026198	2a 01 1c 3e 55 fe e1 f5 00 40 1a 32 06 22 0e 00
>0261a8	0a 54 43 4e 4d 4e 20 58 51 54 55 00 18 32 1c 3e
>0261b8	55 fe e1 f5 01 40 1a 32 06 22 08 00 04 53 55 4d
>0261c8	4e 00 18 32 1c 3e 55 fe e1 f5 02 40 1a 32 06 22
>0261d8	08 00 04 48 5a 42 4f 00 18 32 1c 3e 55 fe e1 f5
>0261e8	03 40 1a 32 06 22 0a 00 06 46 20 20 20 53 51 00
>0261f8	00 00 4a 00 2b 01 1c 3e 34 fe a5 f1 00 40 1a 32
>026208	06 22 06 00 03 46 4a 59 18 32 1c 3e 34 fe a5 f1
>026218	01 40 1a 32 06 22 0a 00 07 4f 54 51 51 20 20 55
>026228	18 32 1c 3e 34 fe a5 f1 02 40 1a 32 06 22 0c 00
>026238	08 51 20 20 44 4a 4b 4f 52 00 00 00 90 00 2c 01
>026248	1c 3e 10 f0 00 40 1a 32 06 22 0c 00 08 4c 52 48
>026258	4d 57 56 46 55 00 18 32 1c 3e 10 f0 01 40 1a 32
>026268	06 22 0c 00 09 4b 56 4b 4a 4e 4c 46 4e 4e 18 32
>026278	1c 3e 10 f0 02 40 1a 32 06 22 04 00 00 00 18 32
>026288	1c 3e 10 f0 03 40 1a 32 06 22 08 00 04 53 41 5a
>026298	4c 00 18 32 1c 3e 10 f0 04 40 1a 32 06 22 04 00
>0262a8	00 00 18 32 1c 3e 10 f0 05 40 1a 32 06 22 0a 00
>0262b8	06 4a 50 4a 59 20 48 00 18 32 1c 3e 10 f0 06 40
>0262c8	1a 32 06 22 06 00 03 4f 51 4a 00 00 00 00 ee ee
>0262d8	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0262e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1488 times (23808 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
