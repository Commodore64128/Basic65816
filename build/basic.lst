
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Thu Jun 20 09:37:30 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 3b 1e 01	jmp $011e3b			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	ac 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	0f 0b					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	1f 0b					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	2f 0b					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	73 0b					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	da 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	3f 0b					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	bc 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	9e 0b					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	59 0b					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	59 0a					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	da 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	e6 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	63 0c					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	da 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	eb 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	fd 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	74 0d					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	54 0d					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	30 0d					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	1a 0d					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	9c 0f					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	bc 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	ae 0d					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	e6 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	1a 0e					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	50 0f					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	6a 0f					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	81 0f					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	25 12					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	e3 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	64 0e					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	fb 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	8d 0e					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	7c 11					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	56 0e					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	ac 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	ac 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	ac 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	ac 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	ac 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	ac 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	ac 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	ac 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	9d 1c					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	67 12					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	7e 1c					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	d9 1a					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	dc 1a					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	6b 1b					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	67 1b					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	c4 1b					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	99 1c					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	65 16					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	67 19					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	c6 19					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	e2 19					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	24 19					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	18 17					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	38 1c					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	50 1c					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	64 1c					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	2d 14					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	b4 1c					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	58 1b					.word Function_NEW             & $FFFF ; token $3e40 "new"
>010082	eb 12					.word Function_PROC            & $FFFF ; token $3e41 "proc"
>010084	bc 13					.word Command_LOCAL            & $FFFF ; token $3e42 "local"
>010086	14 1a					.word Function_REPEAT          & $FFFF ; token $3c43 "repeat"
>010088	72 1a					.word Function_WHILE           & $FFFF ; token $3c44 "while"
>01008a	b1 16					.word Function_IF              & $FFFF ; token $3c45 "if"
>01008c	ed 17					.word Command_FOR              & $FFFF ; token $3c46 "for"
>01008e	ac 05					.word IllegalToken             & $FFFF ; token $3c47 "defproc"
>010090	a9 1a					.word Function_WEND            & $FFFF ; token $3a48 "wend"
>010092	2b 1a					.word Function_UNTIL           & $FFFF ; token $3a49 "until"
>010094	ac 05					.word IllegalToken             & $FFFF ; token $3a4a "then"
>010096	46 17					.word Handler_ENDIF            & $FFFF ; token $3a4b "endif"
>010098	68 18					.word Command_NEXT             & $FFFF ; token $3a4c "next"
>01009a	6d 13					.word Function_ENDPROC         & $FFFF ; token $3a4d "endproc"
.01009c					TokenText:
>01009c	02 26					 .text $02,"&"        ; token $2001
>01009e	02 7c					 .text $02,"|"        ; token $2002
>0100a0	02 5e					 .text $02,"^"        ; token $2003
>0100a2	12 3c					 .text $12,"<"        ; token $2204
>0100a4	12 3e					 .text $12,">"        ; token $2205
>0100a6	12 3d					 .text $12,"="        ; token $2206
>0100a8	13 3c 3d				 .text $13,"<="       ; token $2207
>0100ab	13 3e 3d				 .text $13,">="       ; token $2208
>0100ae	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100b1	22 2b					 .text $22,"+"        ; token $240a
>0100b3	22 2d					 .text $22,"-"        ; token $240b
>0100b5	32 2a					 .text $32,"*"        ; token $260c
>0100b7	32 2f					 .text $32,"/"        ; token $260d
>0100b9	32 25					 .text $32,"%"        ; token $260e
>0100bb	33 3e 3e				 .text $33,">>"       ; token $260f
>0100be	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100c1	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c6	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100cb	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100d0	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100d5	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100da	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100e0	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e6	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100eb	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100f0	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f6	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100fc	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>010102	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>01010a	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010112	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010119	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>01011f	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010127	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>01012e	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>010135	92 2c					 .text $92,","        ; token $3224
>010137	92 3b					 .text $92,";"        ; token $3225
>010139	92 3a					 .text $92,":"        ; token $3226
>01013b	92 28					 .text $92,"("        ; token $3227
>01013d	92 29					 .text $92,")"        ; token $3228
>01013f	92 27					 .text $92,"'"        ; token $3229
>010141	c3 54 4f				 .text $c3,"TO"       ; token $382a
>010144	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010149	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>01014d	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>010151	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010158	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>01015c	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>010160	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>010165	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>01016b	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>01016f	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>010173	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010179	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>01017e	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>010184	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>01018b	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>01018e	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>010193	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>010198	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>01019d	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>0101a2	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>0101a7	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101ac	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e40
>0101b0	f5 50 52 4f 43				 .text $f5,"PROC"     ; token $3e41
>0101b5	f6 4c 4f 43 41 4c			 .text $f6,"LOCAL"    ; token $3e42
>0101bb	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c43
>0101c2	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c44
>0101c8	e3 49 46				 .text $e3,"IF"       ; token $3c45
>0101cb	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c46
>0101cf	e8 44 45 46 50 52 4f 43			 .text $e8,"DEFPROC"  ; token $3c47
>0101d7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a48
>0101dc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a49
>0101e2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a4a
>0101e7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a4b
>0101ed	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4c
>0101f2	d8 45 4e 44 50 52 4f 43			 .text $d8,"ENDPROC"  ; token $3a4d
>0101fa	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3e40					newTokenID                       = $3e40
=$3e41					procTokenID                      = $3e41
=$3e42					localTokenID                     = $3e42
=$3c43					repeatTokenID                    = $3c43
=$3c44					whileTokenID                     = $3c44
=$3c45					ifTokenID                        = $3c45
=$3c46					forTokenID                       = $3c46
=$3c47					defprocTokenID                   = $3c47
=$3a48					wendTokenID                      = $3a48
=$3a49					untilTokenID                     = $3a49
=$3a4a					thenTokenID                      = $3a4a
=$3a4b					endifTokenID                     = $3a4b
=$3a4c					nextTokenID                      = $3a4c
=$3a4d					endprocTokenID                   = $3a4d

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=60					DTarget = DPBaseAddress + 60 				; target address for PROC call.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101fb					Evaluate:
.0101fb	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101fe	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010201					EvaluateLevel:
.010201	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.010204	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.010206	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010208	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.01020b	b0 79		bcs $010286			bcs 	_ELVariable
.01020d	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010210	b0 16		bcs $010228			bcs 	_ELConstant
.010212	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.010215	90 7f		bcc $010296			bcc 	_ELStringConstant
.010217	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.01021a	90 03		bcc $01021f			bcc 	_ELConstantShift
.01021c	82 94 00	brl $0102b3			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.01021f					_ELConstantShift:
.01021f	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010222	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.010224	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.010226	e6 06		inc $06				inc 	DCodePtr
.010228					_ELConstant:
.010228	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.01022a	38		sec				sec  								; shift it in the range 0-32767
.01022b	e9 00 40	sbc #$4000			sbc 	#$4000
.01022e	0a		asl a				asl 	a 							; shift it left, losing bit 15
.01022f	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010231	6a		ror a				ror 	a 							; rotate that into the constant value
.010232	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.010234	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.010236	95 20		sta $20,x			sta 	EXSValueH+0,x
.010238	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.01023a	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.01023c	e6 06		inc $06				inc 	DCodePtr
.01023e					_ELGotAtom:
.01023e	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010240	a8		tay				tay 								; save in Y
.010241	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010244	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010247	d0 35		bne $01027e			bne 	_ELExit
.010249	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01024b	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01024e	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010250	98		tya				tya 								; get the keyword token back
.010251	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010254	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010256	90 26		bcc $01027e			bcc 	_ELExit 					; precedence too low, then exit.
.010258	5a		phy				phy 								; save the binary operator on the stack
.010259	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01025b	e6 06		inc $06				inc 	DCodePtr
.01025d	18		clc				clc 								; try the next level up
.01025e	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010261	e8		inx				inx 								; calculate the RHS at the next stack level.
.010262	e8		inx				inx
.010263	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010266	ca		dex				dex
.010267	ca		dex				dex
.010268	7a		ply				ply 								; get operator token back into Y
.010269					_ELExecuteY:
.010269	98		tya				tya
.01026a	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01026d	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01026e	9b		txy				txy 								; save X in Y
.01026f	aa		tax				tax 								; double keyword ID in X
.010270	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010274	bb		tyx				tyx 								; restore X.
.010275	8f 7a 02 01	sta $01027a			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010279					_ELCallRoutine:
.010279	20 79 02	jsr $010279			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01027c	80 c0		bra $01023e			bra 	_ELGotAtom 					; go round operator level again.
.01027e	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010280	0a		asl a				asl 	a
.010281	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010283	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.010285	60		rts				rts
.010286					_ELVariable:
.010286	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010288	20 47 03	jsr $010347			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01028b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01028d	94 20		sty $20,x			sty 	EXSValueH+0,x
.01028f	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010291	80 ab		bra $01023e			bra 	_ELGotAtom
.010293					_ELSyntax
.010293	82 27 03	brl $0105bd			brl 	SyntaxError
.010296					_ELStringConstant:
.010296	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010299	f0 f8		beq $010293			beq 	_ELSyntax
.01029b	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01029d	1a		inc a				inc 	a
.01029e	1a		inc a				inc 	a
.01029f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0102a1	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.0102a3	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0102a5	18		clc				clc 								; add to string constant.
.0102a6	65 06		adc $06				adc 	DCodePtr
.0102a8	85 06		sta $06				sta 	DCodePtr
.0102aa	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.0102ac	09 00 80	ora #$8000			ora 	#$8000
.0102af	95 40		sta $40,x			sta 	EXSPrecType+0,x
.0102b1	80 8b		bra $01023e			bra 	_ELGotAtom
.0102b3					_ELUnaryKeyword:
.0102b3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0102b5	a8		tay				tay 								; put the token in Y.
.0102b6	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0102b8	e6 06		inc $06				inc 	DCodePtr
.0102ba	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102bd	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102c0	f0 a7		beq $010269			beq 	_ELExecuteY					; go back and execute it
.0102c2	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102c5	d0 11		bne $0102d8			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102c7	20 fe 02	jsr $0102fe			jsr 	EvaluateNext 				; evaluate the expression
.0102ca	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102cd					_ELCopy:
.0102cd	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102cf	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102d1	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102d3	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d5	82 66 ff	brl $01023e			brl 	_ELGotAtom 					; and continue.
.0102d8					_ELUnaryOperator:
.0102d8	5a		phy				phy 								; save the operator on the stack.
.0102d9	e8		inx				inx 								; this is like evaluate next
.0102da	e8		inx				inx
.0102db	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102de	20 01 02	jsr $010201			jsr 	EvaluateLevel
.0102e1	ca		dex				dex 								; unwind the stack.
.0102e2	ca		dex				dex
.0102e3	68		pla				pla 								; restore the unary operator.
.0102e4	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102e7	f0 03		beq $0102ec			beq 	_ELMinus
.0102e9	4c bd 05	jmp $0105bd			jmp 	SyntaxError
.0102ec					_ELMinus:
.0102ec	38		sec				sec 								; do the negation calculation.
.0102ed	a9 00 00	lda #$0000			lda 	#0
.0102f0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102f2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102f4	a9 00 00	lda #$0000			lda 	#0
.0102f7	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102f9	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102fb	82 40 ff	brl $01023e			brl 	_ELGotAtom					; and continue.
.0102fe					EvaluateNext:
.0102fe	e8		inx				inx
.0102ff	e8		inx				inx
.010300	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010303	20 01 02	jsr $010201			jsr 	EvaluateLevel
.010306	ca		dex				dex
.010307	ca		dex				dex
.010308	60		rts				rts
.010309					EvaluateInteger:
.010309	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01030c	b0 01		bcs $01030f			bcs 	EIType
.01030e	60		rts				rts
.01030f					EIType:
.01030f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010312	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>01031a	78 70 65 63 74 65 64 00
.010322					EvaluateNextInteger:
.010322	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010325	b0 e8		bcs $01030f			bcs 	EIType
.010327	60		rts				rts
.010328					EvaluateString:
.010328	20 fb 01	jsr $0101fb			jsr 	Evaluate
.01032b	90 01		bcc $01032e			bcc 	ESType
.01032d	60		rts				rts
.01032e					ESType:
.01032e	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010331	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010339	78 70 65 63 74 65 64 00
.010341					EvaluateNextString:
.010341	20 fe 02	jsr $0102fe			jsr 	EvaluateNext
.010344	90 e8		bcc $01032e			bcc 	ESType
.010346	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.010347					VariableAccessExpression:
.010347	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010349	48		pha				pha
.01034a	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variables
.01034d	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.01034f	90 23		bcc $010374			bcc 	_VANError 					; not found, so report an error.
.010351	68		pla				pla 								; get and save that first token
.010352	48		pha				pha 								; we use it for typing.
.010353	a8		tay				tay 								; put first token in Y.
.010354	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010357	f0 07		beq $010360			beq 	_VANNotArray
.010359	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01035b	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.01035e	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010360					_VANNotArray:
.010360	68		pla				pla 								; get the token back.
.010361	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010364	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010367	38		sec				sec 								; set up return string.
.010368	f0 06		beq $010370			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01036a	18		clc				clc 								; returning a number, read high data word
.01036b	a0 02 00	ldy #$0002			ldy 	#2
.01036e	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010370					_VANLoadLower:
.010370	a8		tay				tay 								; put A into Y (this is the high byte)
.010371	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010373	60		rts				rts
.010374					_VANError:
.010374	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010377	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>01037f	20 75 6e 6b 6e 6f 77 6e 00
.010388					VariableFind:
.010388	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01038a	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01038d	90 5c		bcc $0103eb			bcc 	_VFError
.01038f	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010392	b0 11		bcs $0103a5			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010394	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010397	3a		dec a				dec 	a 							; now 0-25
.010398	0a		asl a				asl 	a 							; x 4 and clear carry
.010399	0a		asl a				asl 	a
.01039a	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01039d	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.01039f	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.0103a1	e6 06		inc $06				inc 	DCodePtr
.0103a3	38		sec				sec 								; return with carry set.
.0103a4	60		rts				rts
.0103a5					_VFSlowVariable:
.0103a5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0103a7	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.0103aa	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0103ab	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0103ac	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0103af	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0103b1	85 08		sta $08				sta 	DTemp1
.0103b3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0103b5	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0103b8	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103b9	65 08		adc $08				adc 	DTemp1
.0103bb	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103bd	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103bf					_VFNext:
.0103bf	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103c1	f0 26		beq $0103e9			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103c3	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103c5	a8		tay				tay 								; read the address of the name at $0002,y
.0103c6	b9 02 00	lda $0002,y			lda 	$0002,y
.0103c9	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103cb	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103ce					_VFCompare:
.0103ce	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103d0	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103d2	d0 eb		bne $0103bf			bne 	_VFNext 					; if not, go to the next one.
.0103d4	c8		iny				iny 								; advance token pointer
.0103d5	c8		iny				iny
.0103d6	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103d9	d0 f3		bne $0103ce			bne 	_VFCompare
.0103db	98		tya				tya 								; this is the length of the word.
.0103dc	18		clc				clc 								; so we add it to the code pointer
.0103dd	65 06		adc $06				adc 	DCodePtr
.0103df	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103e1	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103e3	18		clc				clc 								; four on is the actual data
.0103e4	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103e7	38		sec				sec 								; return with CS indicating success
.0103e8	60		rts				rts
.0103e9					_VFFail:
.0103e9	18		clc				clc
.0103ea	60		rts				rts
.0103eb					_VFError:
.0103eb	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0103ee	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103f6	76 61 72 69 61 62 6c 65 00
.0103ff					VariableSubscript:
.0103ff	48		pha				pha		 							; save variable address on stack.
.010400	20 22 03	jsr $010322			jsr		EvaluateNextInteger 		; get the subscript
.010403	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; skip right bracket.
.010406	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.010409	d0 10		bne $01041b			bne 	_VANSubscript
.01040b	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.01040d	f0 02		beq $010411			beq 	_VANSubOkay 				; fail if subscript > high subscript
.01040f	b0 0a		bcs $01041b			bcs 	_VANSubscript
.010411					_VANSubOkay:
.010411	0a		asl a				asl 	a 							; double lsword
.010412	0a		asl a				asl 	a 							; and again, also clears carry.
.010413	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.010415	68		pla				pla 								; restore DVariablePtr
.010416	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.010417	1a		inc a				inc 	a
.010418	65 08		adc $08				adc 	DTemp1 						; add the subscript
.01041a	60		rts				rts
.01041b					_VANSubscript:
.01041b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01041e	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>010426	79 20 53 75 62 73 63 72 69 70 74 00
.010432					VariableCreate:
.010432	48		pha				pha 								; save count.
.010433	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.010436	29 00 20	and #$2000			and 	#IDTypeMask
.010439	f0 06		beq $010441			beq 	_VCIsInteger 				; if this is zero ... use zero.
.01043b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01043e	18		clc				clc 								; which is guaranteed by have a 0 length.
.01043f	65 02		adc $02				adc 	DBaseAddress
.010441					_VCIsInteger:
.010441	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010443	68		pla				pla 								; restore count
.010444	48		pha				pha
.010445	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010446	0a		asl a				asl 	a 							; 2 x # items.
.010447	0a		asl a				asl 	a 							; 4 x # items.
.010448					_VCNotSingle:
.010448	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01044a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01044d	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010450	f0 04		beq $010456			beq 	_VCNotArray
.010452	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010454	e6 08		inc $08				inc 	DTemp1
.010456					_VCNotArray:
.010456	5a		phy				phy 								; save address of first token on stack.
.010457	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01045a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01045c	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01045e	18		clc				clc 								; add 4 for link and name words
.01045f	69 04 00	adc #$0004			adc 	#4
.010462	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010464	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010466	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010468					_VCErase:
.010468	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01046a	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01046d	c8		iny				iny
.01046e	c8		iny				iny
.01046f	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010471	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010473	d0 f3		bne $010468			bne 	_VCErase
.010475	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010477	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010479	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01047c	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.01047f	18		clc				clc
.010480	65 02		adc $02				adc 	DBaseAddress
.010482	85 08		sta $08				sta 	DTemp1
.010484	68		pla				pla 								; restore the token address
.010485	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.010487	b0 03		bcs $01048c			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010489	20 9d 04	jsr $01049d			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.01048c					_VCDontClone:
.01048c	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.01048f	68		pla				pla 								; restore count and store (if nonzero)
.010490	f0 03		beq $010495			beq 	_VCNotArray2
.010492	99 04 00	sta $0004,y			sta 	$0004,y
.010495					_VCNotArray2:
.010495	98		tya				tya 								; update the head link
.010496	92 20		sta ($20)			sta 	(DHashTablePtr)
.010498	18		clc				clc 								; advance pointer to the data bit.
.010499	69 04 00	adc #$0004			adc 	#4
.01049c	60		rts				rts 								; and done.
.01049d					VCCloneIdentifier:
.01049d	da		phx				phx 								; save XY
.01049e	5a		phy				phy
.01049f	aa		tax				tax 								; identifier address in Y.
.0104a0	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.0104a3	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104a5	48		pha				pha
.0104a6					_VCCloneLoop:
.0104a6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.0104a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0104ab	48		pha				pha 								; save on stack
.0104ac	1a		inc a				inc 	a 							; space for one token.
.0104ad	1a		inc a				inc 	a
.0104ae	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104b0	7a		ply				ply 								; address of word in Y
.0104b1	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.0104b4	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.0104b7	e8		inx				inx 								; advance the token pointer
.0104b8	e8		inx				inx
.0104b9	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104bc	d0 e8		bne $0104a6			bne 	_VCCloneLoop
.0104be	68		pla				pla 								; restore start address
.0104bf	7a		ply				ply 								; and the others
.0104c0	fa		plx				plx
.0104c1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104c2					LineDelete:
.0104c2	aa		tax				tax 	 							; this is the one we're looking for ....
.0104c3	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104c5	18		clc				clc
.0104c6	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104c9	a8		tay				tay
.0104ca					_LDLoop:
.0104ca	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104cd	f0 2d		beq $0104fc			beq 	_LDExit						; exit if zero ; line does not exist
.0104cf	8a		txa				txa 								; found a match
.0104d0	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104d3	f0 08		beq $0104dd			beq		_LDFound
.0104d5	98		tya				tya 								; follow the link.
.0104d6	18		clc				clc
.0104d7	79 00 00	adc $0000,y			adc 	$0000,y
.0104da	a8		tay				tay
.0104db	80 ed		bra $0104ca			bra 	_LDLoop
.0104dd					_LDFound:
.0104dd	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104df	98		tya				tya 								; follow link to next.
.0104e0	18		clc				clc
.0104e1	79 00 00	adc $0000,y			adc 	$0000,y
.0104e4	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104e6	20 ae 1b	jsr $011bae			jsr 	FindCodeEnd 				; find the end of the code.
.0104e9	38		sec				sec
.0104ea	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104ec	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104ed	1a		inc a				inc 	a
.0104ee	aa		tax				tax
.0104ef	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104f2	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104f4	91 08		sta ($08),y			sta 	(DTemp1),y
.0104f6	c8		iny				iny
.0104f7	c8		iny				iny
.0104f8	ca		dex				dex
.0104f9	ca		dex				dex
.0104fa	d0 f6		bne $0104f2			bne 	_LDCopy
.0104fc					_LDExit:
.0104fc	60		rts				rts
.0104fd					LineInsert:
.0104fd	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104ff	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.010501	a0 00 00	ldy #$0000			ldy 	#0
.010504					_LIFindLength:
.010504	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.010506	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.010509	f0 10		beq $01051b			beq 	_LIFindEnd
.01050b	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.01050e	90 04		bcc $010514			bcc 	_LIQString
.010510	c8		iny				iny 								; otherwise just skip it.
.010511	c8		iny				iny
.010512	80 f0		bra $010504			bra 	_LIFindLength
.010514					_LIQString:
.010514	98		tya				tya 								; skip quoted strings
.010515	18		clc				clc
.010516	71 08		adc ($08),y			adc 	(DTemp1),y
.010518	a8		tay				tay
.010519	80 e9		bra $010504			bra 	_LIFindLength
.01051b					_LIFindEnd:
.01051b	98		tya				tya 								; the tokens in the line
.01051c	18		clc				clc
.01051d	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010520	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010522	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.010525	18		clc				clc
.010526	65 02		adc $02				adc 	DBaseAddress
.010528	a8		tay				tay
.010529					_LIFindInsertPoint:
.010529	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.01052c	f0 0f		beq $01053d			beq		_LIFoundInsertPoint
.01052e	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010531	c5 0c		cmp $0c				cmp 	DTemp2
.010533	b0 08		bcs $01053d			bcs 	_LIFoundInsertPoint
.010535	98		tya				tya 								; if < go to the next line.
.010536	18		clc				clc
.010537	79 00 00	adc $0000,y			adc 	$0000,y
.01053a	a8		tay				tay
.01053b	80 ec		bra $010529			bra 	_LIFindInsertPoint
.01053d					_LIFoundInsertPoint:
.01053d	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.01053f	20 ae 1b	jsr $011bae			jsr 	FindCodeEnd 				; get the end of the code.
.010542	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010544	18		clc				clc
.010545	65 24		adc $24				adc 	DTemp3
.010547	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.010549					_LICopyMove:
.010549	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.01054b	92 34		sta ($34)			sta 	(DTemp4+2)
.01054d	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.01054f	c5 36		cmp $36				cmp 	DTemp5
.010551	f0 0a		beq $01055d			beq 	_LICopyMoveOver
.010553	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.010555	c6 32		dec $32				dec 	DTemp4
.010557	c6 34		dec $34				dec 	DTemp4+2
.010559	c6 34		dec $34				dec 	DTemp4+2
.01055b	80 ec		bra $010549			bra 	_LICopyMove
.01055d					_LICopyMoveOver:
.01055d	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.01055f	92 36		sta ($36)			sta 	(DTemp5)
.010561	a0 02 00	ldy #$0002			ldy 	#2
.010564	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.010566	91 36		sta ($36),y			sta 	(DTemp5),y
.010568	a0 04 00	ldy #$0004			ldy 	#4
.01056b					_LICopyTokens:
.01056b	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.01056d	91 36		sta ($36),y			sta 	(DTemp5),y
.01056f	c8		iny				iny
.010570	c8		iny				iny
.010571	e6 08		inc $08				inc 	DTemp1
.010573	e6 08		inc $08				inc 	DTemp1
.010575	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.010577	c6 24		dec $24				dec 	DTemp3
.010579	a5 24		lda $24				lda 	DTemp3
.01057b	c9 04 00	cmp #$0004			cmp 	#4
.01057e	d0 eb		bne $01056b			bne 	_LICopyTokens
.010580	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.010581					ErrorHandler:
.010581	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010583	fa		plx				plx 								; address of error message -1
.010584	e8		inx				inx 								; error message.
.010585	20 29 06	jsr $010629			jsr 	PrintROMMessage 			; print message in ROM
.010588	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01058a	f0 15		beq $0105a1			beq 	_EHEndMessage
.01058c	a2 a7 05	ldx #$05a7			ldx 	#_EHAt & $FFFF 				; print " at "
.01058f	20 29 06	jsr $010629			jsr 	PrintROMMessage
.010592	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010594	a0 00 00	ldy #$0000			ldy 	#0
.010597	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01059a	20 d7 10	jsr $0110d7			jsr 	ConvertToString 			; convert and print it.
.01059d	a8		tay				tay
.01059e	20 47 06	jsr $010647			jsr 	PrintBASICString
.0105a1					_EHEndMessage:
.0105a1	20 61 1d	jsr $011d61			jsr 	HWNewLine
.0105a4	4c 65 1e	jmp $011e65			jmp 	NextCommand 				; get next command.
>0105a7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0105ac					IllegalToken:
.0105ac	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105af	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0105b7	54 6f 6b 65 6e 00
.0105bd					SyntaxError:
.0105bd	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105c0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105c8	72 72 6f 72 00
.0105cd					ExpectToken:
.0105cd	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105cf	d0 05		bne $0105d6			bne 	_CTKError					; error if not
.0105d1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105d3	e6 06		inc $06				inc 	DCodePtr
.0105d5	60		rts				rts
.0105d6					_CTKError:
.0105d6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0105d9	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105e1	74 6f 6b 65 6e 00
.0105e7					ExpectRightBracket:
.0105e7	48		pha				pha
.0105e8	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105eb	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0105ee	68		pla				pla
.0105ef	60		rts				rts
.0105f0					ExpectComma:
.0105f0	48		pha				pha
.0105f1	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105f4	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.0105f7	68		pla				pla
.0105f8	60		rts				rts
.0105f9					CheckBothNumeric:
.0105f9	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105fb	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105fd	30 01		bmi $010600			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105ff	60		rts				rts
.010600					_CBNFail:
.010600	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010603	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01060b	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010619					ResetTypeInteger:
.010619	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01061b	29 ff 7f	and #$7fff			and 	#$7FFF
.01061e	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010620	60		rts				rts
.010621					ResetTypeString:
.010621	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010623	09 00 80	ora #$8000			ora 	#$8000
.010626	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010628	60		rts				rts
.010629					PrintROMMessage:
.010629	48		pha				pha
.01062a	da		phx				phx
.01062b					_PRMLoop:
.01062b	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01062f	29 ff 00	and #$00ff			and 	#$00FF
.010632	f0 10		beq $010644			beq 	_PRMExit
.010634	c9 0d 00	cmp #$000d			cmp 	#13
.010637	d0 05		bne $01063e			bne 	_PRMChar
.010639	20 61 1d	jsr $011d61			jsr 	HWNewLine
.01063c	80 03		bra $010641			bra 	_PRMNext
.01063e					_PRMChar:
.01063e	20 10 1d	jsr $011d10			jsr 	HWPrintChar
.010641					_PRMNext:
.010641	e8		inx				inx
.010642	80 e7		bra $01062b			bra 	_PRMLoop
.010644					_PRMExit:
.010644	fa		plx				plx
.010645	68		pla				pla
.010646	60		rts				rts
.010647					PrintBASICString:
.010647	48		pha				pha
.010648	da		phx				phx
.010649	5a		phy				phy
.01064a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01064d	29 ff 00	and #$00ff			and 	#$00FF
.010650	f0 0b		beq $01065d			beq 	_PBSExit 					; null string
.010652	aa		tax				tax
.010653					_PBSLoop:
.010653	c8		iny				iny
.010654	b9 00 00	lda $0000,y			lda 	$0000,y
.010657	20 10 1d	jsr $011d10			jsr 	HWPrintChar
.01065a	ca		dex				dex
.01065b	d0 f6		bne $010653			bne 	_PBSLoop
.01065d					_PBSExit:
.01065d	7a		ply				ply
.01065e	fa		plx				plx
.01065f	68		pla				pla
.010660	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringconcrete.asm

.010661					StringResetPermanent:
.010661	a5 04		lda $04				lda 	DHighAddress				; the end of memory
.010663	3a		dec a				dec 	a 							; subtract 2 to add a null terminator.
.010664	3a		dec a				dec 	a
.010665	a8		tay				tay
.010666	48		pha				pha
.010667	a9 00 00	lda #$0000			lda 	#$0000
.01066a	99 00 00	sta $0000,y			sta 	$0000,y						; reset that link to next to $0000.
.01066d	68		pla				pla
.01066e	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; save the high memory pointer, which is the start of the link
.010671	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010673	60		rts				rts
.010674					StringReassign:
.010674	da		phx				phx 								; save X.
.010675	bb		tyx				tyx 								; save the pointer to the current on X.
.010676	a8		tay				tay 								; get length of new string.
.010677	b9 00 00	lda $0000,y			lda 	@w$0000,y
.01067a	29 ff 00	and #$00ff			and 	#$00FF
.01067d	d0 03		bne $010682			bne 	_SRAContent
.01067f	82 89 00	brl $01070b			brl 	_SRAEmpty 					; if zero, return empty address.
.010682					_SRAContent:
.010682	5a		phy				phy 								; save the new string address on stack
.010683	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; address of the old string in A
.010686	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; compare it against the high memory pointer
.010689	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if < this then we don't need to release it first.
.01068b	90 0e		bcc $01069b			bcc 	_SRANoRelease
.01068d	bc 00 00	ldy $0000,x			ldy 	@w$0000,x 					; the address of the old string
.010690	88		dey				dey 								; point to the link.
.010691	88		dey				dey
.010692	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; and set the available bit.
.010695	09 00 80	ora #$8000			ora 	#$8000
.010698	99 00 00	sta $0000,y			sta 	@w$0000,y
.01069b					_SRANoRelease:
.01069b	7a		ply				ply 								; restore and save the new string address
.01069c	5a		phy				phy
.01069d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the length of this new string
.0106a0	29 ff 00	and #$00ff			and 	#$00FF 						; mask it off.
.0106a3	1a		inc a				inc 	a 							; we want one more, for the length byte.
.0106a4	85 36		sta $36				sta 	DTemp5
.0106a6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr		; start position in Y
.0106a9	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.0106ab	a8		tay				tay
.0106ac					_SRACheckUnused:
.0106ac	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset to next
.0106af	f0 22		beq $0106d3			beq 	_SRAAllocate 				; if zero, nothing fits, so allocate a new chunk.
.0106b1	10 0f		bpl $0106c2			bpl 	_SRACheckNext 				; if +ve then it is in use, so can't use that either.
.0106b3	29 ff 7f	and #$7fff			and 	#$7FFF 						; it's available, get the actual size.
.0106b6	c5 36		cmp $36				cmp 	DTemp5 						; compare against the required length
.0106b8	90 08		bcc $0106c2			bcc 	_SRACheckNext 				; too small.
.0106ba	99 00 00	sta $0000,y			sta 	$0000,y 					; it's okay - write back with the bit cleared.
.0106bd	98		tya				tya 								; A is the address of the link
.0106be	1a		inc a				inc 	a 							; add 2, it's the data.
.0106bf	1a		inc a				inc 	a
.0106c0	80 26		bra $0106e8			bra 	_SRACopyA 					; copy there.
.0106c2					_SRACheckNext:
.0106c2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get offset , mask bit 15
.0106c5	29 ff 7f	and #$7fff			and 	#$7FFF
.0106c8	85 38		sta $38				sta 	DTemp5+2 					; save it
.0106ca	98		tya				tya 								; add to Y
.0106cb	18		clc				clc
.0106cc	65 38		adc $38				adc 	DTemp5+2
.0106ce	1a		inc a				inc 	a 							; add 2 more for the link itself
.0106cf	1a		inc a				inc 	a
.0106d0	a8		tay				tay
.0106d1	80 d9		bra $0106ac			bra 	_SRACheckUnused
.0106d3					_SRAAllocate:
.0106d3	7a		ply				ply 								; get the new string address back.
.0106d4	5a		phy				phy 								; push it back on the stack.
.0106d5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get its length
.0106d8	29 ff 00	and #$00ff			and 	#$00FF 						; one more for the byte count.
.0106db	1a		inc a				inc 	a
.0106dc	18		clc				clc  								; make it bigger than needed ; this allows a bit of
.0106dd	69 04 00	adc #$0004			adc 	#4 							; space for expansion.
.0106e0	90 03		bcc $0106e5			bcc 	_SRANoCarry
.0106e2	a9 ff 00	lda #$00ff			lda 	#255
.0106e5					_SRANoCarry:
.0106e5	20 19 07	jsr $010719			jsr 	StringAllocateSpace 		; allocate A bytes from High Memory -> A
.0106e8					_SRACopyA:
.0106e8	9d 00 00	sta $0000,x			sta 	@w$0000,x 					; save the address of the new string.
.0106eb	9e 02 00	stz $0002,x			stz 	@w$0002,x 					; zero the high byte.
.0106ee	aa		tax				tax 								; where we are copying to.
.0106ef	7a		ply				ply 								; where we're coming from.
.0106f0	b9 00 00	lda $0000,y			lda 	$0000,y 					; bytes to copy.
.0106f3	29 ff 00	and #$00ff			and 	#$00FF 						; mask, add 1 for length byte.
.0106f6	1a		inc a				inc 	a
.0106f7	85 36		sta $36				sta 	DTemp5 						; save counter.
.0106f9					_SRACopy:
.0106f9	e2 20		sep #$20			sep 	#$20
.0106fb	b9 00 00	lda $0000,y			lda 	@w$0000,y 					; copy byte over
.0106fe	9d 00 00	sta $0000,x			sta 	@W$0000,x
.010701	c2 20		rep #$20			rep 	#$20
.010703	c8		iny				iny
.010704	e8		inx				inx
.010705	c6 36		dec $36				dec 	DTemp5 						; do it this many times.
.010707	d0 f0		bne $0106f9			bne 	_SRACopy
.010709	fa		plx				plx 								; restore X and exit.
.01070a	60		rts				rts
.01070b					_SRAEmpty:
.01070b	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.01070e	18		clc				clc 								; which is guaranteed by have a 0 length.
.01070f	65 02		adc $02				adc 	DBaseAddress
.010711	9d 00 00	sta $0000,x			sta 	@w$0000,x
.010714	9e 02 00	stz $0002,x			stz 	@w$0002,x
.010717	fa		plx				plx
.010718	60		rts				rts
.010719					StringAllocateSpace:
.010719	da		phx				phx									; save XY
.01071a	5a		phy				phy
.01071b	48		pha				pha 								; save the length.
.01071c	1a		inc a				inc 	a 							; two extra bytes, for the offset pointer.
.01071d	1a		inc a				inc 	a
.01071e	49 ff ff	eor #$ffff			eor 	#$FFFF 						; make it -ve
.010721	38		sec				sec 								; add 1 (2's complement)
.010722	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010725	71 02		adc ($02),y			adc 	(DBaseAddress),y
.010727	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; A is the address of the new storage.
.010729	a8		tay				tay 								; put in Y
.01072a	68		pla				pla 								; restore the length
.01072b	99 00 00	sta $0000,y			sta 	$0000,y 					; store this as the "link"
.01072e	98		tya				tya 								; get the address back
.01072f	1a		inc a				inc 	a 							; skip over the link
.010730	1a		inc a				inc 	a
.010731	7a		ply				ply									; restore YX and exit.
.010732	fa		plx				plx
.010733	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringtemp.asm

.010734					StringTempAllocate:
.010734	48		pha				pha
.010735	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010737	d0 09		bne $010742			bne 	_STANoReset
.010739	5a		phy				phy 								; reset the temp string pointer.
.01073a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01073d	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01073f	85 16		sta $16				sta 	DTempStringPointer
.010741	7a		ply				ply
.010742					_STANoReset:
.010742	68		pla				pla 								; get length.
.010743	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010746	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010749	18		clc				clc 								; this adds one, for the length.
.01074a	65 16		adc $16				adc 	DTempStringPointer
.01074c	85 16		sta $16				sta 	DTempStringPointer
.01074e	48		pha				pha 								; save start address
.01074f	a9 00 00	lda #$0000			lda 	#$0000
.010752	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010754	92 16		sta ($16)			sta		(DTempStringPointer)
.010756	c2 20		rep #$20			rep 	#$20
.010758	68		pla				pla 								; restore start address
.010759	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01075b	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01075d	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01075f	60		rts				rts
.010760					StringWriteCharacter:
.010760	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010762	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010764	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010766	1a		inc a				inc 	a
.010767	92 18		sta ($18)			sta 	(DStartTempString)
.010769	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01076b	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01076d	60		rts				rts
.01076e					StringCreateCopy:
.01076e	a8		tay				tay 								; put pointer to string in Y
.01076f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010772	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010775	f0 17		beq $01078e			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010777	da		phx				phx 								; save X and put the character count in X
.010778	aa		tax				tax
.010779					_SCCCopy:
.010779	c8		iny				iny 								; advance and read (first time skips length)
.01077a	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01077c	b9 00 00	lda $0000,y			lda 	$0000,y
.01077f	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010781	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010783	1a		inc a				inc 	a
.010784	92 18		sta ($18)			sta 	(DStartTempString)
.010786	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010788	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01078a	ca		dex				dex 								; do X times
.01078b	d0 ec		bne $010779			bne 	_SCCCopy
.01078d	fa		plx				plx
.01078e					_SCCExit:
.01078e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.01078f					Tokenise:
.01078f	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.010791	84 0a		sty $0a				sty 	DTemp1+2
.010793	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.010796	18		clc				clc
.010797	65 02		adc $02				adc 	DBaseAddress
.010799	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.01079b	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.01079e	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0107a1					_TOKCap:
.0107a1	c8		iny				iny 								; go to next
.0107a2	b7 08		lda [$08],y			lda 	[DTemp1],y
.0107a4	29 ff 00	and #$00ff			and 	#$00FF
.0107a7	f0 22		beq $0107cb			beq 	_TOKEndCap
.0107a9	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0107ac	d0 01		bne $0107af			bne 	_TOKNotQuote
.0107ae	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0107af					_TOKNotQuote:
.0107af	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0107b2	90 ed		bcc $0107a1			bcc 	_TOKCap
.0107b4	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0107b7	b0 e8		bcs $0107a1			bcs 	_TOKCap
.0107b9	8a		txa				txa 								; check if in quotes
.0107ba	4a		lsr a				lsr 	a
.0107bb	b0 e4		bcs $0107a1			bcs 	_TOKCap
.0107bd	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0107bf	38		sec				sec
.0107c0	e9 20 00	sbc #$0020			sbc 	#32
.0107c3	e2 20		sep #$20			sep 	#$20
.0107c5	97 08		sta [$08],y			sta 	[DTemp1],y
.0107c7	c2 20		rep #$20			rep 	#$20
.0107c9	80 d6		bra $0107a1			bra 	_TOKCap
.0107cb					_TOKEndCap:
.0107cb	c6 08		dec $08				dec 	DTemp1
.0107cd					_TOKMainNext:
.0107cd	e6 08		inc $08				inc 	DTemp1
.0107cf					_TOKMainLoop:
.0107cf	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.0107d1	29 ff 00	and #$00ff			and 	#$00FF
.0107d4	c9 20 00	cmp #$0020			cmp 	#32
.0107d7	90 1d		bcc $0107f6			bcc 	_TOKExit 					; 0-31 exit.
.0107d9	f0 f2		beq $0107cd			beq 	_TOKMainNext 				; 32 (space) skip.
.0107db	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.0107de	f0 1d		beq $0107fd			beq 	_TOKString
.0107e0	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.0107e3	90 1d		bcc $010802			bcc 	_TOKPunctuation
.0107e5	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.0107e8	90 42		bcc $01082c			bcc 	_TOKNumber
.0107ea	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.0107ed	90 13		bcc $010802			bcc 	_TOKPunctuation
.0107ef	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.0107f2	90 3d		bcc $010831			bcc 	_TOKIdentifier
.0107f4	80 0c		bra $010802			bra 	_TOKPunctuation 			; 91-   punctuation.
.0107f6					_TOKExit:
.0107f6	a9 00 00	lda #$0000			lda 	#$0000
.0107f9	20 36 08	jsr $010836			jsr 	TOKWriteToken
.0107fc	60		rts				rts
.0107fd					_TOKString:
.0107fd	20 d4 08	jsr $0108d4			jsr 	TOKQuotedString
.010800	80 cd		bra $0107cf			bra 	_TOKMainLoop
.010802					_TOKPunctuation:
.010802	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010805	20 3b 09	jsr $01093b			jsr 	TOKKeywordSearch
.010808	b0 1d		bcs $010827			bcs 	_TOKFoundPunctuation
.01080a	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.01080d	20 3b 09	jsr $01093b			jsr 	TOKKeywordSearch
.010810	b0 15		bcs $010827			bcs 	_TOKFoundPunctuation
.010812	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010815	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>01081d	61 72 73 65 20 6c 69 6e 65 00
.010827					_TOKFoundPunctuation:
.010827	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; output the token and go round again.
.01082a	80 a3		bra $0107cf			bra 	_TOKMainLoop
.01082c					_TOKNumber:
.01082c	20 55 08	jsr $010855			jsr 	TOKInteger 					; tokenise integer out of the token text.
.01082f	80 9e		bra $0107cf			bra 	_TOKMainLoop
.010831					_TOKIdentifier:
.010831	20 96 09	jsr $010996			jsr 	TOKIdentifier
.010834	80 99		bra $0107cf			bra 	_TOKMainLoop
.010836					TOKWriteToken:
.010836	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010838	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.01083a	e6 0c		inc $0c				inc 	DTemp2
.01083c	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.01083e	29 ff 00	and #$00ff			and 	#$00FF
.010841	f0 01		beq $010844			beq 	_TOKWriteOverflow
.010843	60		rts				rts
.010844					_TOKWriteOverflow:
.010844	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010847	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>01084f	20 6c 6f 6e 67 00
.010855					TOKInteger:
.010855	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010857	64 26		stz $26				stz 	DTemp3+2
.010859					_TOKINLoop:
.010859	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01085b	48		pha				pha
.01085c	a5 24		lda $24				lda 	DTemp3
.01085e	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010860	26 26		rol $26				rol 	DTemp3+2
.010862	06 24		asl $24				asl 	DTemp3
.010864	26 26		rol $26				rol 	DTemp3+2
.010866	18		clc				clc
.010867	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.010869	85 24		sta $24				sta 	DTemp3
.01086b	68		pla				pla
.01086c	65 26		adc $26				adc 	DTemp3+2
.01086e	85 26		sta $26				sta 	DTemp3+2
.010870	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010872	26 26		rol $26				rol 	DTemp3+2
.010874	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010876	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.010879	d0 44		bne $0108bf			bne 	_TOKINSize
.01087b	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01087d	29 0f 00	and #$000f			and 	#15
.010880	18		clc				clc
.010881	65 24		adc $24				adc 	DTemp3 						; add to the running count
.010883	85 24		sta $24				sta 	DTemp3
.010885	90 02		bcc $010889			bcc 	_TOKINNoCarry
.010887	e6 26		inc $26				inc 	DTemp3+2
.010889					_TOKINNoCarry:
.010889	e6 08		inc $08				inc 	DTemp1 						; look at next
.01088b	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.01088d	29 ff 00	and #$00ff			and 	#$00FF
.010890	c9 30 00	cmp #$0030			cmp 	#"0"
.010893	90 05		bcc $01089a			bcc 	_TOKINGotInteger
.010895	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010898	90 bf		bcc $010859			bcc		_TOKINLoop
.01089a					_TOKINGotInteger:
.01089a	a5 24		lda $24				lda 	DTemp3 						; lower word
.01089c	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.01089f	18		clc				clc
.0108a0	69 00 40	adc #$4000			adc 	#$4000
.0108a3	48		pha				pha 								; save it.
.0108a4	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0108a6	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0108a8	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0108aa	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0108ad	b0 10		bcs $0108bf			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0108af	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0108b2	f0 06		beq $0108ba			beq 	_TOKINNoShift 				; don't need constant shift.
.0108b4	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0108b7	20 36 08	jsr $010836			jsr 	TOKWriteToken
.0108ba					_TOKINNoShift:
.0108ba	68		pla				pla 								; get lower its token
.0108bb	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; output it
.0108be	60		rts				rts
.0108bf					_TOKINSize:
.0108bf	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0108c2	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0108ca	74 6f 6f 20 6c 61 72 67 65 00
.0108d4					TOKQuotedString:
.0108d4	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0108d6	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0108d8	85 32		sta $32				sta 	DTemp4
.0108da	a5 0a		lda $0a				lda 	DTemp1+2
.0108dc	85 34		sta $34				sta 	DTemp4+2
.0108de					_TOKQFindSize:
.0108de	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.0108e0	e6 08		inc $08				inc 	DTemp1
.0108e2	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.0108e5	f0 3b		beq $010922			beq 	_TOQImbalance 				; end of line, and no quote found.
.0108e7	c9 22 00	cmp #$0022			cmp 	#34
.0108ea	d0 f2		bne $0108de			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.0108ec	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.0108ee	38		sec				sec
.0108ef	e5 32		sbc $32				sbc 	DTemp4
.0108f1	3a		dec a				dec 	a 							; one less character for closing quote
.0108f2	85 26		sta $26				sta 	DTemp3+2
.0108f4	18		clc				clc
.0108f5	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.0108f8	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.0108fb	20 36 08	jsr $010836			jsr 	TOKWriteToken
.0108fe	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010900	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; effectively a byte-write.
.010903	c6 0c		dec $0c				dec 	DTemp2
.010905	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010907	f0 0f		beq $010918			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010909					_TOKQWriteString:
.010909	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01090b	29 ff 00	and #$00ff			and 	#$00FF
.01090e	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; effectively a byte-write.
.010911	c6 0c		dec $0c				dec 	DTemp2
.010913	e6 32		inc $32				inc 	DTemp4 						; advance character
.010915	ca		dex				dex 								; do X times
.010916	d0 f1		bne $010909			bne 	_TOKQWriteString
.010918					_TOKQWriteEnd:
.010918	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01091a	29 01 00	and #$0001			and 	#1
.01091d	f0 02		beq $010921			beq 	_TOKQExit
.01091f	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010921					_TOKQExit:
.010921	60		rts				rts
.010922					_TOQImbalance:
.010922	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010925	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01092d	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01093b					TOKKeywordSearch:
.01093b	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01093d	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010940	85 34		sta $34				sta 	DTemp4+2
.010942	a2 00 00	ldx #$0000			ldx 	#0
.010945					_TOKScan:
.010945	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; read the first byte
.010949	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01094c	f0 46		beq $010994			beq 	_TOKFail 					; if zero then we have failed.
.01094e	3a		dec a				dec 	a 							; -1 gives the length.
.01094f	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010951	d0 2f		bne $010982			bne 	_TOKNext 					; no, then skip to next token.
.010953	da		phx				phx 								; save X
.010954	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010957					_TOKCompare:
.010957	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010959	5f 9d 00 01	eor $01009d,x			eor 	TokenText+1,x
.01095d	29 ff 00	and #$00ff			and 	#$00FF
.010960	d0 1f		bne $010981			bne 	_TOKPopNext 				; if different, pop and goto next.
.010962	e8		inx				inx 								; bump X and Y.
.010963	c8		iny				iny
.010964	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010966	d0 ef		bne $010957			bne 	_TOKCompare
.010968	98		tya				tya 								; add length to the text pointer
.010969	18		clc				clc
.01096a	65 08		adc $08				adc 	DTemp1
.01096c	85 08		sta $08				sta 	DTemp1
.01096e	fa		plx				plx 								; restore X.
.01096f	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the type/token bit.
.010973	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010976	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010977	4a		lsr a				lsr		a
.010978	4a		lsr a				lsr 	a
.010979	eb		xba				xba
.01097a	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01097c	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.01097f	38		sec				sec
.010980	60		rts				rts
.010981					_TOKPopNext:
.010981	fa		plx				plx 								; restore X.
.010982					_TOKNext:
.010982	bf 9c 00 01	lda $01009c,x			lda 	TokenText,x 				; get the token skip again.
.010986	29 0f 00	and #$000f			and 	#$000F
.010989	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.01098b	8a		txa				txa
.01098c	18		clc				clc
.01098d	65 14		adc $14				adc 	DSignCount
.01098f	aa		tax				tax
.010990	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.010992	80 b1		bra $010945			bra 	_TOKScan
.010994					_TOKFail:
.010994	18		clc				clc
.010995	60		rts				rts
.010996					TOKIdentifier:
.010996	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.010998	85 24		sta $24				sta 	DTemp3
.01099a					_TOKIFindLength:
.01099a	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.01099c	a7 08		lda [$08]			lda 	[DTemp1]
.01099e	29 ff 00	and #$00ff			and 	#$00FF
.0109a1	20 41 0a	jsr $010a41			jsr 	TOKIsIdentifierCharacter
.0109a4	b0 f4		bcs $01099a			bcs 	_TOKIFindLength
.0109a6	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0109a8	38		sec				sec
.0109a9	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0109ab	85 36		sta $36				sta 	DTemp5
.0109ad	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0109af	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0109b2	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0109b4	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109b6	29 ff 00	and #$00ff			and 	#$00FF
.0109b9	c9 24 00	cmp #$0024			cmp 	#"$"
.0109bc	d0 0b		bne $0109c9			bne 	_TOKINotString
.0109be	e6 08		inc $08				inc 	DTemp1 						; skip $
.0109c0	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109c2	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109c4	09 00 20	ora #$2000			ora 	#IDTypeMask
.0109c7	85 26		sta $26				sta 	DTemp3+2
.0109c9					_TOKINotString:
.0109c9	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0109cb	29 ff 00	and #$00ff			and 	#$00FF
.0109ce	c9 28 00	cmp #$0028			cmp 	#"("
.0109d1	d0 0b		bne $0109de			bne 	_TOKINotArray
.0109d3	e6 08		inc $08				inc 	DTemp1 						; skip (
.0109d5	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0109d7	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0109d9	09 00 10	ora #$1000			ora 	#IDArrayMask
.0109dc	85 26		sta $26				sta 	DTemp3+2
.0109de					_TOKINotArray:
.0109de	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0109e0	85 08		sta $08				sta 	DTemp1
.0109e2	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.0109e4	20 3b 09	jsr $01093b			jsr 	TOKKeywordSearch
.0109e7	90 04		bcc $0109ed			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.0109e9	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; if CS write token and exit.
.0109ec	60		rts				rts
.0109ed					_TOKIIdentifier:
.0109ed	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.0109ef	e6 08		inc $08				inc 	DTemp1
.0109f1	20 2d 0a	jsr $010a2d			jsr		_TOKIToConstant 			; convert to range 0-35
.0109f4	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.0109f6	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.0109f8	f0 1d		beq $010a17			beq 	_TOKINoSecond
.0109fa	48		pha				pha 								; save current on stack.
.0109fb	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.0109fd	e6 08		inc $08				inc 	DTemp1
.0109ff	20 2d 0a	jsr $010a2d			jsr		_TOKIToConstant 			; convert to range 0-35
.010a02	85 14		sta $14				sta 	DSignCount 					; save it.
.010a04	0a		asl a				asl 	a 							; x 4
.010a05	0a		asl a				asl 	a
.010a06	65 14		adc $14				adc 	DSignCount 					; x 5
.010a08	0a		asl a				asl 	a 							; x 10
.010a09	65 14		adc $14				adc 	DSignCount 					; x 11
.010a0b	0a		asl a				asl 	a 							; x 22
.010a0c	0a		asl a				asl 	a 							; x 44
.010a0d	65 14		adc $14				adc 	DSignCount 					; x 45
.010a0f	85 14		sta $14				sta 	DSignCount
.010a11	68		pla				pla 								; get old token and add x 45
.010a12	18		clc				clc
.010a13	65 14		adc $14				adc 	DSignCount
.010a15	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010a17					_TOKINoSecond:
.010a17	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010a19	f0 03		beq $010a1e			beq 	_TOKINotLast				; if yes
.010a1b	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010a1e					_TOKINotLast:
.010a1e	20 36 08	jsr $010836			jsr 	TOKWriteToken 				; output the token
.010a21	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010a23	d0 c8		bne $0109ed			bne 	_TOKIIdentifier
.010a25					_TOKIOut:
.010a25	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010a27	18		clc				clc
.010a28	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010a2a	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010a2c	60		rts				rts
.010a2d					_TOKIToConstant:
.010a2d	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010a30	c9 41 00	cmp #$0041			cmp 	#65
.010a33	90 04		bcc $010a39			bcc 	_TOKITInteger
.010a35	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010a38	60		rts				rts
.010a39					_TOKITInteger:
.010a39	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010a3c	18		clc				clc
.010a3d	69 1b 00	adc #$001b			adc 	#27
.010a40	60		rts				rts
.010a41					TOKIsIdentifierCharacter:
.010a41	c9 30 00	cmp #$0030			cmp 	#"0"
.010a44	90 0f		bcc $010a55			bcc 	_TOKIIFail
.010a46	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010a49	90 0c		bcc $010a57			bcc 	_TOKIIOk
.010a4b	c9 41 00	cmp #$0041			cmp 	#"A"
.010a4e	90 05		bcc $010a55			bcc 	_TOKIIFail
.010a50	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010a53	90 02		bcc $010a57			bcc 	_TOKIIOk
.010a55					_TOKIIFail:
.010a55	18		clc				clc
.010a56	60		rts				rts
.010a57					_TOKIIOk:
.010a57	38		sec				sec
.010a58	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010a59					Binary_Add:
.010a59	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010a5b	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a5d	30 12		bmi $010a71		bmi 	_BATypeError
.010a5f	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.010a61	30 3f		bmi $010aa2		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.010a63	18		clc			clc 										; add the results
.010a64	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a66	75 02		adc $02,x		adc 	EXSValueL+2,x
.010a68	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a6a	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a6c	75 22		adc $22,x		adc 	EXSValueH+2,x
.010a6e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a70	60		rts			rts
.010a71					_BATypeError:
.010a71	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a74	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010a7c	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010a8c	65 73 00
.010a8f					_BALengthError:
.010a8f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010a92	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a9a	6f 6f 20 6c 6f 6e 67 00
.010aa2					_BAConcatenateString:
.010aa2	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010aa4	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010aa6	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010aa8	85 0c		sta $0c			sta 	DTemp2
.010aaa	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010aac	18		clc			clc 										; work out the total length
.010aad	b2 08		lda ($08)		lda 	(DTemp1)
.010aaf	72 0c		adc ($0c)		adc 	(DTemp2)
.010ab1	b0 14		bcs $010ac7		bcs 	_BAConcatLengthError 				; string is too long.
.010ab3	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010ab5	20 34 07	jsr $010734		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010ab8	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010aba	74 20		stz $20,x		stz 	EXSValueH+0,x
.010abc	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010abe	20 6e 07	jsr $01076e		jsr 	StringCreateCopy
.010ac1	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010ac3	20 6e 07	jsr $01076e		jsr 	StringCreateCopy
.010ac6	60		rts			rts
.010ac7					_BAConcatLengthError:
.010ac7	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010aca	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010ad2	6f 6f 20 6c 6f 6e 67 00
.010ada					Binary_Subtract:
.010ada	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010add	38		sec			sec
.010ade	b5 00		lda $00,x		lda		EXSValueL+0,x
.010ae0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae2	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ae4	b5 20		lda $20,x		lda		EXSValueH+0,x
.010ae6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ae8	95 20		sta $20,x		sta 	EXSValueH+0,x
.010aea	60		rts			rts
.010aeb					Binary_ShiftRight:
.010aeb	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010aee	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010af0	29 3f 00	and #$003f		and 	#63
.010af3	f0 07		beq $010afc		beq		_Binary_SRExit
.010af5					_Binary_SRLoop:
.010af5	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010af7	76 00		ror $00,x		ror 	EXSValueL+0,x
.010af9	3a		dec a			dec 	a
.010afa	d0 f9		bne $010af5		bne 	_Binary_SRLoop
.010afc					_Binary_SRExit:
.010afc	60		rts			rts
.010afd					Binary_ShiftLeft:
.010afd	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010b00	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010b02	29 3f 00	and #$003f		and 	#63
.010b05	f0 07		beq $010b0e		beq		_Binary_SLExit
.010b07					_Binary_SLLoop:
.010b07	16 00		asl $00,x		asl 	EXSValueL+0,x
.010b09	36 20		rol $20,x		rol 	EXSValueH+0,x
.010b0b	3a		dec a			dec 	a
.010b0c	d0 f9		bne $010b07		bne 	_Binary_SLLoop
.010b0e					_Binary_SLExit:
.010b0e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010b0f					Binary_And:
.010b0f	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010b12	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b14	35 02		and $02,x		and 	EXSValueL+2,x
.010b16	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b18	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b1a	35 22		and $22,x		and 	EXSValueH+2,x
.010b1c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b1e	60		rts			rts
.010b1f					Binary_Or:
.010b1f	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010b22	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b24	15 02		ora $02,x		ora 	EXSValueL+2,x
.010b26	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b28	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b2a	15 22		ora $22,x		ora 	EXSValueH+2,x
.010b2c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b2e	60		rts			rts
.010b2f					Binary_Xor:
.010b2f	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010b32	b5 00		lda $00,x		lda		EXSValueL+0,x
.010b34	55 02		eor $02,x		eor 	EXSValueL+2,x
.010b36	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b38	b5 20		lda $20,x		lda		EXSValueH+0,x
.010b3a	55 22		eor $22,x		eor 	EXSValueH+2,x
.010b3c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b3e	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010b3f					Binary_Equals:
.010b3f	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b42	b0 0e		bcs $010b52		bcs 	_BEString
.010b44	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b46	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b48	d0 4f		bne $010b99		bne 	Compare_Fail
.010b4a	b5 20		lda $20,x		lda 	EXSValueH,x
.010b4c	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b4e	d0 49		bne $010b99		bne 	Compare_Fail
.010b50	80 3f		bra $010b91		bra 	Compare_Succeed
.010b52					_BEString:
.010b52	09 00 00	ora #$0000		ora 	#$0000
.010b55	f0 3a		beq $010b91		beq 	Compare_Succeed
.010b57	80 40		bra $010b99		bra 	Compare_Fail
.010b59					Binary_NotEquals:
.010b59	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b5c	b0 0e		bcs $010b6c		bcs 	_BNEString
.010b5e	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010b60	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010b62	d0 2d		bne $010b91		bne 	Compare_Succeed
.010b64	b5 20		lda $20,x		lda 	EXSValueH,x
.010b66	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010b68	d0 27		bne $010b91		bne 	Compare_Succeed
.010b6a	80 2d		bra $010b99		bra 	Compare_Fail
.010b6c					_BNEString:
.010b6c	09 00 00	ora #$0000		ora 	#$0000
.010b6f	d0 20		bne $010b91		bne 	Compare_Succeed
.010b71	80 26		bra $010b99		bra 	Compare_Fail
.010b73					Binary_Less:
.010b73	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b76	b0 12		bcs $010b8a		bcs 	_BLString
.010b78	38		sec			sec
.010b79	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010b7b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b7d	b5 20		lda $20,x		lda 	EXSValueH,x
.010b7f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b81	50 03		bvc $010b86		bvc 	*+5
.010b83	49 00 80	eor #$8000		eor 	#$8000
.010b86	30 09		bmi $010b91		bmi 	Compare_Succeed
.010b88	80 0f		bra $010b99		bra 	Compare_Fail
.010b8a					_BLString:
.010b8a	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010b8d	f0 02		beq $010b91		beq 	Compare_Succeed
.010b8f	80 08		bra $010b99		bra 	Compare_Fail
.010b91					Compare_Succeed:
.010b91	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b94	95 00		sta $00,x		sta 	EXSValueL,x
.010b96	95 20		sta $20,x		sta 	EXSValueH,x
.010b98	60		rts			rts
.010b99					Compare_Fail:
.010b99	74 00		stz $00,x		stz 	EXSValueL,x
.010b9b	74 20		stz $20,x		stz 	EXSValueH,x
.010b9d	60		rts			rts
.010b9e					Binary_GreaterEqual:
.010b9e	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ba1	b0 12		bcs $010bb5		bcs 	_BGEString
.010ba3	38		sec			sec
.010ba4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010ba6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ba8	b5 20		lda $20,x		lda 	EXSValueH,x
.010baa	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bac	50 03		bvc $010bb1		bvc 	*+5
.010bae	49 00 80	eor #$8000		eor 	#$8000
.010bb1	10 de		bpl $010b91		bpl 	Compare_Succeed
.010bb3	80 e4		bra $010b99		bra 	Compare_Fail
.010bb5					_BGEString:
.010bb5	09 00 00	ora #$0000		ora 	#$0000
.010bb8	10 d7		bpl $010b91		bpl 	Compare_Succeed
.010bba	80 dd		bra $010b99		bra 	Compare_Fail
.010bbc					Binary_LessEqual:
.010bbc	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bbf	b0 12		bcs $010bd3		bcs 	_BLEString
.010bc1	18		clc			clc 									; numeric <= signed
.010bc2	b5 00		lda $00,x		lda 	EXSValueL,x
.010bc4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bc6	b5 20		lda $20,x		lda 	EXSValueH,x
.010bc8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bca	50 03		bvc $010bcf		bvc 	*+5
.010bcc	49 00 80	eor #$8000		eor 	#$8000
.010bcf	30 c0		bmi $010b91		bmi 	Compare_Succeed
.010bd1	80 c6		bra $010b99		bra 	Compare_Fail
.010bd3					_BLEString:
.010bd3	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010bd6	d0 b9		bne $010b91		bne 	Compare_Succeed
.010bd8	80 bf		bra $010b99		bra 	Compare_Fail
.010bda					Binary_Greater:
.010bda	20 f8 0b	jsr $010bf8		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010bdd	b0 12		bcs $010bf1		bcs 	_BGString
.010bdf	18		clc			clc 									; numeric > signed
.010be0	b5 00		lda $00,x		lda 	EXSValueL,x
.010be2	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010be4	b5 20		lda $20,x		lda 	EXSValueH,x
.010be6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010be8	50 03		bvc $010bed		bvc 	*+5
.010bea	49 00 80	eor #$8000		eor 	#$8000
.010bed	10 a2		bpl $010b91		bpl 	Compare_Succeed
.010bef	80 a8		bra $010b99		bra 	Compare_Fail
.010bf1					_BGString:
.010bf1	c9 01 00	cmp #$0001		cmp 	#$0001
.010bf4	f0 9b		beq $010b91		beq 	Compare_Succeed
.010bf6	80 a1		bra $010b99		bra 	Compare_Fail
.010bf8					CompareTypeCheck:
.010bf8	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010bfa	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010bfc	30 06		bmi $010c04		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010bfe	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010c00	30 1c		bmi $010c1e		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010c02	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010c03	60		rts			rts
.010c04					_CTCFail:
.010c04	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010c07	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010c0f	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010c1e					_CTCStringCompare:
.010c1e	20 19 06	jsr $010619		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010c21	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010c23	85 08		sta $08			sta 	DTemp1
.010c25	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010c27	85 0c		sta $0c			sta 	DTemp2
.010c29	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010c2c	a8		tay			tay
.010c2d	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010c2f	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010c31	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c33	90 02		bcc $010c37		bcc 	_CTCSmallest
.010c35	b2 0c		lda ($0c)		lda 	(DTemp2)
.010c37					_CTCSmallest:
.010c37	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010c39					_CTCCompare:
.010c39	c8		iny			iny 									; look at next character (done first, first char is size)
.010c3a	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010c3c	30 16		bmi $010c54		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010c3e	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010c40	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010c42	f0 f5		beq $010c39		beq 	_CTCCompare 					; if zero, try the next character.
.010c44	b0 07		bcs $010c4d		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010c46					_CTCLess:
.010c46	c2 20		rep #$20		rep 	#$20
.010c48	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010c4b	80 14		bra $010c61		bra 	_CTCExit
.010c4d					_CTCGreater:
.010c4d	c2 20		rep #$20		rep 	#$20
.010c4f	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010c52	80 0d		bra $010c61		bra 	_CTCExit
.010c54					_CTCEqualSoFar:
.010c54	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010c56	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010c58	90 ec		bcc $010c46		bcc 	_CTCLess
.010c5a	d0 f1		bne $010c4d		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010c5c	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010c5e	a9 00 00	lda #$0000		lda 	#$0000
.010c61					_CTCExit:
.010c61	38		sec			sec 									; return with CS indicating string comparison.
.010c62	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010c63					Binary_Divide:
.010c63	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010c66	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010c68	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010c6a	d0 14		bne $010c80		bne 	_BinaryDivide_Ok
.010c6c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010c6f	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010c77	20 62 79 20 7a 65 72 6f 00
.010c80					_BinaryDivide_Ok:
.010c80	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010c82	64 0a		stz $0a			stz 	DTemp1+2
.010c84	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010c86	5a		phy			phy 										; save Y (bit counter)
.010c87	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010c89	10 07		bpl $010c92		bpl 	_BinaryDivide_RightDone
.010c8b	e8		inx			inx
.010c8c	e8		inx			inx
.010c8d	20 c8 0c	jsr $010cc8		jsr 	Binary_DivNegate
.010c90	ca		dex			dex
.010c91	ca		dex			dex
.010c92					_BinaryDivide_RightDone:
.010c92	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010c94	10 03		bpl $010c99		bpl 	_BinaryDivide_LeftDone
.010c96	20 c8 0c	jsr $010cc8		jsr 	Binary_DivNegate
.010c99					_BinaryDivide_LeftDone:
.010c99	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010c9c					_BinaryDivide_Loop:
.010c9c	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010c9e	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ca0	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010ca2	26 0a		rol $0a			rol 	DTemp1+2
.010ca4	38		sec			sec											; calculate A-M
.010ca5	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010ca7	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ca9	85 0c		sta $0c			sta 	DTemp2
.010cab	a5 0a		lda $0a			lda 	DTemp1+2
.010cad	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010caf	90 08		bcc $010cb9		bcc 	_Binary_NoSubract 					; if A < M skip this
.010cb1	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010cb3	a5 0c		lda $0c			lda 	DTemp2
.010cb5	85 08		sta $08			sta 	DTemp1+0
.010cb7	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010cb9					_Binary_NoSubract:
.010cb9	88		dey			dey 										; do it 32 times.
.010cba	d0 e0		bne $010c9c		bne 	_BinaryDivide_Loop
.010cbc					_BinaryDivide_Exit:
.010cbc	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010cbe	29 01 00	and #$0001		and 	#1
.010cc1	f0 03		beq $010cc6		beq 	_BinaryDivide_Exit2
.010cc3	20 c8 0c	jsr $010cc8		jsr 	Binary_DivNegate
.010cc6					_BinaryDivide_Exit2:
.010cc6	7a		ply			ply 										; restore Y
.010cc7	60		rts			rts
.010cc8					Binary_DivNegate:
.010cc8	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010cca	38		sec			sec 										; negate the value at stack X.
.010ccb	a9 00 00	lda #$0000		lda 	#$0000
.010cce	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010cd0	95 00		sta $00,x		sta 	EXSValueL+0,x
.010cd2	a9 00 00	lda #$0000		lda 	#$0000
.010cd5	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010cd7	95 20		sta $20,x		sta 	EXSValueH+0,x
.010cd9	60		rts			rts
.010cda					Binary_Modulus:
.010cda	20 63 0c	jsr $010c63		jsr 	Binary_Divide 						; do the divide
.010cdd	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010cdf	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ce1	a5 0a		lda $0a			lda 	DTemp1+2
.010ce3	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ce5	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010ce6					Binary_Multiply:
.010ce6	20 f9 05	jsr $0105f9		jsr 	CheckBothNumeric 					; check both values are numeric
.010ce9	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010ceb	85 08		sta $08			sta 	DTemp1
.010ced	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010cef	85 0a		sta $0a			sta		DTemp1+2
.010cf1	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010cf3	74 20		stz $20,x		stz 	EXSValueH+0,x
.010cf5					_BinaryMultiply_Loop:
.010cf5	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010cf7	05 0a		ora $0a			ora 	DTemp1+2
.010cf9	f0 1e		beq $010d19		beq 	_BinaryMultiply_Exit
.010cfb	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010cfd	29 01 00	and #$0001		and 	#1
.010d00	f0 0d		beq $010d0f		beq 	_BinaryMultiply_NoAdd
.010d02	18		clc			clc 										; add multiplicand to result.
.010d03	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010d05	75 02		adc $02,x		adc 	EXSValueL+2,x
.010d07	95 00		sta $00,x		sta 	EXSValueL+0,x
.010d09	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010d0b	75 22		adc $22,x		adc 	EXSValueH+2,x
.010d0d	95 20		sta $20,x		sta 	EXSValueH+0,x
.010d0f					_BinaryMultiply_NoAdd:
.010d0f	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010d11	66 08		ror $08			ror 	DTemp1
.010d13	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010d15	36 22		rol $22,x		rol 	EXSValueH+2,x
.010d17	80 dc		bra $010cf5		bra 	_BinaryMultiply_Loop 				; go round again.
.010d19					_BinaryMultiply_Exit:
.010d19	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010d1a					Function_Len:
.010d1a	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010d1d	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d20	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d23	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010d25	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010d28	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010d2b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010d2d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d2f	60		rts				rts
.010d30					Function_Abs:
.010d30	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010d33	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d36	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d39	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010d3b	30 07		bmi $010d44			bmi 	_FAbsNegative 				; negate it if negative
.010d3d	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010d3f	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010d41	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d43	60		rts				rts
.010d44					_FAbsNegative:
.010d44	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010d45	a9 00 00	lda #$0000			lda 	#0
.010d48	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010d4a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d4c	a9 00 00	lda #$0000			lda 	#0
.010d4f	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010d51	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d53	60		rts				rts
.010d54					Function_Sgn:
.010d54	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns integer
.010d57	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get an integer
.010d5a	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d5d	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010d5f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d61	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010d63	30 07		bmi $010d6c			bmi 	_FSgnNegative 				; set to -1 if signed
.010d65	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010d67	f0 02		beq $010d6b			beq 	_FSgnExit
.010d69	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010d6b					_FSgnExit:
.010d6b	60		rts				rts
.010d6c					_FSgnNegative:
.010d6c	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010d6f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d71	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d73	60		rts				rts
.010d74					Function_Random:
.010d74	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010d77	20 19 06	jsr $010619			jsr 	ResetTypeInteger
.010d7a	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010d7c	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010d7e	d0 0a		bne $010d8a			bne 	_Rnd_NotZero
.010d80	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010d83	85 10		sta $10				sta 	DRandom
.010d85	a9 ea 00	lda #$00ea			lda 	#$EA
.010d88	85 12		sta $12				sta 	DRandom+2
.010d8a					_Rnd_NotZero:
.010d8a	20 95 0d	jsr $010d95			jsr 	_Rnd_Process 				; call randomiser twice
.010d8d	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d8f	20 95 0d	jsr $010d95			jsr 	_Rnd_Process
.010d92	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d94	60		rts				rts
.010d95					_Rnd_Process:
.010d95	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010d97	26 12		rol $12				rol 	DRandom+2
.010d99	90 0e		bcc $010da9			bcc 	_Rnd_Exit
.010d9b	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010d9d	49 54 d4	eor #$d454			eor 	#$D454
.010da0	85 10		sta $10				sta 	DRandom
.010da2	a5 12		lda $12				lda 	DRandom+2
.010da4	49 d5 55	eor #$55d5			eor 	#$55D5
.010da7	85 12		sta $12				sta 	DRandom+2
.010da9					_Rnd_Exit:
.010da9	a5 10		lda $10				lda 	DRandom
.010dab	45 12		eor $12				eor 	DRandom+2
.010dad	60		rts				rts
.010dae					Function_Chr:
.010dae	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string
.010db1	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer
.010db4	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010db7	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010dba	d0 12		bne $010dce			bne 	_FCHBad
.010dbc	48		pha				pha  								; save char # on stack
.010dbd	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010dc0	20 34 07	jsr $010734			jsr 	StringTempAllocate
.010dc3	68		pla				pla 								; restore character number
.010dc4	20 60 07	jsr $010760			jsr 	StringWriteCharacter 		; write it out.
.010dc7	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010dc9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010dcb	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dcd	60		rts				rts
.010dce					_FCHBad:
.010dce	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010dd1	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010dd9	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010de6					Function_Asc:
.010de6	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010de9	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get string
.010dec	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010def	a8		tay				tay 								; string address in Y
.010df0	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010df3	29 ff 00	and #$00ff			and 	#$00FF
.010df6	f0 0b		beq $010e03			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010df8	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010dfb	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010dfe	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010e00	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e02	60		rts				rts
.010e03					_FASBad:
.010e03	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010e06	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010e0e	65 20 66 6f 72 20 61 73 63 28 29 00
.010e1a					Function_SPC:
.010e1a	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string
.010e1d	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010e20	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010e23	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010e26	d0 17		bne $010e3f			bne 	_FSPBad
.010e28	48		pha				pha 								; save length
.010e29	20 34 07	jsr $010734			jsr 	StringTempAllocate 			; allocate character space
.010e2c	7a		ply				ply 								; get count in Y
.010e2d	f0 09		beq $010e38			beq 	_FSPExit 					; if zero, just empty string
.010e2f					_FSPCopy:
.010e2f	a9 20 00	lda #$0020			lda 	#" "						; space character
.010e32	20 60 07	jsr $010760			jsr 	StringWriteCharacter 		; write it out.
.010e35	88		dey				dey
.010e36	d0 f7		bne $010e2f			bne 	_FSPCopy	 				; do it Y times
.010e38					_FSPExit:
.010e38	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010e3a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e3c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e3e	60		rts				rts
.010e3f					_FSPBad:
.010e3f	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010e42	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010e4a	65 20 66 6f 72 20 73 70 63 28 29 00
.010e56					Function_Inkey:
.010e56	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010e59	20 19 06	jsr $010619			jsr 	ResetTypeInteger
.010e5c	20 82 1d	jsr $011d82			jsr 	HWInkey 					; read current key
.010e5f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e61	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e63	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010e64					Function_LEFT:
.010e64	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010e67	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e6a	48		pha				pha 								; save string on stack.
.010e6b	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get count
.010e6e	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e71	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e74	d0 6d		bne $010ee3			bne 	FNStringParameter
.010e76	85 08		sta $08				sta 	DTemp1 						; save count.
.010e78	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010e7b	7a		ply				ply 								; Y points to string.
.010e7c	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010e7f	29 ff 00	and #$00ff			and 	#$00FF
.010e82	f0 52		beq $010ed6			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010e84	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010e86	f0 55		beq $010edd			beq 	FNStringY 					; return string in Y if current len = required len.
.010e88	90 53		bcc $010edd			bcc 	FNStringY 					; if current < required return whole thing.
.010e8a	c8		iny				iny 								; take from here - start of string
.010e8b	80 33		bra $010ec0			bra 	FNDTemp1Characters
.010e8d					Function_RIGHT:
.010e8d	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010e90	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e93	48		pha				pha 								; save string on stack.
.010e94	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get count
.010e97	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010e9a	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e9d	d0 44		bne $010ee3			bne 	FNStringParameter
.010e9f	85 08		sta $08				sta 	DTemp1 						; save count.
.010ea1	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010ea4	7a		ply				ply 								; Y points to string.
.010ea5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010ea8	29 ff 00	and #$00ff			and 	#$00FF
.010eab	f0 29		beq $010ed6			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ead	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010eaf	f0 2c		beq $010edd			beq 	FNStringY 					; return string in Y if current len = required len.
.010eb1	90 2a		bcc $010edd			bcc 	FNStringY 					; if current < required return whole thing.
.010eb3	38		sec				sec 								; current-required is the number to skip
.010eb4	e5 08		sbc $08				sbc 	DTemp1
.010eb6	85 0a		sta $0a				sta 	DTemp1+2
.010eb8	98		tya				tya
.010eb9	18		clc				clc
.010eba	65 0a		adc $0a				adc 	DTemp1+2
.010ebc	a8		tay				tay
.010ebd	c8		iny				iny 								; +1 for the count.
.010ebe	80 00		bra $010ec0			bra 	FNDTemp1Characters
.010ec0					FNDTemp1Characters:
.010ec0	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ec2	f0 12		beq $010ed6			beq 	FNStringEmpty 				; if zero, return empty string.
.010ec4	20 34 07	jsr $010734			jsr 	StringTempAllocate
.010ec7	48		pha				pha 								; save the address
.010ec8					_FND1Loop:
.010ec8	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010ecb	20 60 07	jsr $010760			jsr 	StringWriteCharacter
.010ece	c8		iny				iny
.010ecf	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010ed1	d0 f5		bne $010ec8			bne 	_FND1Loop
.010ed3	7a		ply				ply 								; string address in Y
.010ed4	80 07		bra $010edd			bra 	FNStringY
.010ed6					FNStringEmpty:
.010ed6	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010ed9	20 34 07	jsr $010734			jsr 	StringTempAllocate 			; put address of it in Y
.010edc	a8		tay				tay
.010edd					FNStringY:
.010edd	98		tya				tya
.010ede	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ee0	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ee2	60		rts				rts
.010ee3					FNStringParameter:
.010ee3	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010ee6	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010eee	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010efb					Function_MID:
.010efb	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.010efe	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010f01	48		pha				pha 								; save string on stack.
.010f02	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; get offset (n)
.010f05	20 22 03	jsr $010322			jsr 	EvaluateNextInteger
.010f08	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f0b	d0 d6		bne $010ee3			bne 	FNStringParameter
.010f0d	c9 00 00	cmp #$0000			cmp 	#0
.010f10	f0 d1		beq $010ee3			beq 	FNStringParameter 			; or zero
.010f12	48		pha				pha 								; save start position on stack.
.010f13	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010f16	85 08		sta $08				sta 	DTemp1
.010f18	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010f1a	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010f1d	d0 0e		bne $010f2d			bne 	_FMINoThird
.010f1f	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010f21	e6 06		inc $06				inc 	DCodePtr
.010f23	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010f26	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010f29	d0 b8		bne $010ee3			bne 	FNStringParameter
.010f2b	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010f2d					_FMINoThird:
.010f2d	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.010f30	68		pla				pla 								; get offset position
.010f31	85 0c		sta $0c				sta 	DTemp2
.010f33	7a		ply				ply 								; get address of string in Y
.010f34	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010f37	29 ff 00	and #$00ff			and 	#$00FF
.010f3a	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010f3c	90 98		bcc $010ed6			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010f3e	38		sec				sec 								; calculate number of characters left after
.010f3f	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010f41	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010f42	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010f44	b0 02		bcs $010f48			bcs 	_FMISufficient
.010f46	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010f48					_FMISufficient:
.010f48	98		tya				tya 								; get address
.010f49	18		clc				clc
.010f4a	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010f4c	a8		tay				tay 								; put in Y
.010f4d	82 70 ff	brl $010ec0			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010f50					Function_Peek:
.010f50	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f53	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f56	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f59	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f5b	84 0a		sty $0a				sty 	DTemp1+2
.010f5d	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f60	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f62	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010f65	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f67	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f69	60		rts				rts
.010f6a					Function_Deek:
.010f6a	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f6d	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f70	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f73	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f75	84 0a		sty $0a				sty 	DTemp1+2
.010f77	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f7a	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f7c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f7e	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f80	60		rts				rts
.010f81					Function_Leek:
.010f81	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f84	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010f87	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check )
.010f8a	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010f8c	84 0a		sty $0a				sty 	DTemp1+2
.010f8e	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010f91	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f93	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010f95	c8		iny				iny
.010f96	c8		iny				iny
.010f97	b7 08		lda [$08],y			lda 	[DTemp1],y
.010f99	95 20		sta $20,x			sta 	EXSValueH+0,x
.010f9b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010f9c					Function_VAL:
.010f9c	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns an integer
.010f9f	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; get the value you are absoluting
.010fa2	48		pha				pha 								; put string address on stack.
.010fa3	20 b3 0f	jsr $010fb3			jsr 	VALGetBase 					; process , base (shared with STR$())
.010fa6	7a		ply				ply 								; get string address back
.010fa7	da		phx				phx 								; save X on stack
.010fa8	aa		tax				tax 								; base in X
.010fa9	98		tya				tya 								; address in A
.010faa	20 ed 0f	jsr $010fed			jsr 	StringToInteger
.010fad	fa		plx				plx 								; restore X
.010fae	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fb0	94 20		sty $20,x			sty 	EXSValueH+0,x
.010fb2	60		rts				rts
.010fb3					VALGetBase:
.010fb3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010fb5	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010fb8	f0 07		beq $010fc1			beq 	_VGBAlternate
.010fba	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket			; expect ), and return 10.
.010fbd	a9 0a 00	lda #$000a			lda 	#10
.010fc0	60		rts				rts
.010fc1					_VGBAlternate:
.010fc1	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; skip comma.
.010fc4	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get base
.010fc7	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010fca	d0 0e		bne $010fda			bne 	_VGBBadBase
.010fcc	c9 02 00	cmp #$0002			cmp 	#2
.010fcf	90 09		bcc $010fda			bcc 	_VGBBadBase
.010fd1	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010fd4	b0 04		bcs $010fda			bcs 	_VGBBadBase
.010fd6	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; get right bracket and return.
.010fd9	60		rts				rts
.010fda					_VGBBadBase:
.010fda	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>010fdd	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010fe5	65 72 20 42 61 73 65 00
.010fed					StringToInteger:
.010fed	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010fef	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ff1	29 ff 00	and #$00ff			and 	#$00FF
.010ff4	85 26		sta $26				sta 	DTemp3+2
.010ff6	f0 6e		beq $011066			beq 	_STIError 					; if length zero it's bad.
.010ff8	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010ffa	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010ffc	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010ffe	64 0a		stz $0a				stz 	DTemp1+2
.011000	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.011002	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.011005	48		pha				pha 								; push on stack
.011006	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.011009	d0 06		bne $011011			bne 	_STILoop
.01100b	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01100d	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01100f	f0 55		beq $011066			beq 	_STIError 					; if only - then error.
.011011					_STILoop:
.011011	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.011013	20 85 10	jsr $011085			jsr 	MultiplyTemp1ByA
.011016	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.011018	29 ff 00	and #$00ff			and 	#$00FF
.01101b	20 76 10	jsr $011076			jsr 	ConvertUpperCase	 		; make U/C
.01101e	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.011021	90 43		bcc $011066			bcc 	_STIError
.011023	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.011026	90 0e		bcc $011036			bcc 	_STIOkay1
.011028	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.01102b	90 39		bcc $011066			bcc 	_STIError
.01102d	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.011030	b0 34		bcs $011066			bcs 	_STIError
.011032	18		clc				clc 								; shift to correct range.
.011033	69 09 00	adc #$0009			adc 	#9
.011036					_STIOkay1:
.011036	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.011039	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.01103b	b0 29		bcs $011066			bcs 	_STIError
.01103d	18		clc				clc 								; add A to DTemp1
.01103e	65 08		adc $08				adc 	DTemp1
.011040	85 08		sta $08				sta 	DTemp1
.011042	90 02		bcc $011046			bcc 	_STINoCarry
.011044	e6 0a		inc $0a				inc 	DTemp1+2
.011046					_STINoCarry:
.011046	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.011048	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.01104a	d0 c5		bne $011011			bne 	_STILoop 					; loop back.
.01104c	68		pla				pla 								; get optional minus bac
.01104d	c9 2d 00	cmp #$002d			cmp 	#"-"
.011050	d0 0f		bne $011061			bne 	_STINotNegative 			; handle the negative character
.011052	38		sec				sec 								; negate DTemp1
.011053	a9 00 00	lda #$0000			lda 	#0
.011056	e5 08		sbc $08				sbc 	DTemp1
.011058	85 08		sta $08				sta 	DTemp1
.01105a	a9 00 00	lda #$0000			lda 	#0
.01105d	e5 0a		sbc $0a				sbc 	DTemp1+2
.01105f	85 0a		sta $0a				sta 	DTemp1+2
.011061					_STINotNegative:
.011061	a5 08		lda $08				lda 	DTemp1 						; get the result
.011063	a4 0a		ldy $0a				ldy 	DTemp1+2
.011065	60		rts				rts
.011066					_STIError:
.011066	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011069	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>011071	74 61 6e 74 00
.011076					ConvertUpperCase:
.011076	c9 61 00	cmp #$0061			cmp 	#'a'
.011079	90 09		bcc $011084			bcc 	_CUCExit
.01107b	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01107e	b0 04		bcs $011084			bcs 	_CUCExit
.011080	38		sec				sec
.011081	e9 20 00	sbc #$0020			sbc 	#32
.011084					_CUCExit:
.011084	60		rts				rts
.011085					MultiplyTemp1ByA:
.011085					_MTGeneral:
.011085	da		phx				phx
.011086	aa		tax				tax 								; multiplier in X
.011087	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.011089	85 0c		sta $0c				sta 	DTemp2
.01108b	a5 0a		lda $0a				lda 	DTemp1+2
.01108d	85 0e		sta $0e				sta 	DTemp2+2
.01108f	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.011091	64 0a		stz $0a				stz 	DTemp1+2
.011093	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.011096					_MTLoop:
.011096	8a		txa				txa 								; shift X right into C
.011097	4a		lsr a				lsr 	a
.011098	aa		tax				tax
.011099	90 10		bcc $0110ab			bcc 	_MTNoAdd
.01109b	18		clc				clc
.01109c	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01109e	65 0c		adc $0c				adc 	DTemp2
.0110a0	85 08		sta $08				sta 	DTemp1
.0110a2	a5 0a		lda $0a				lda 	DTemp1+2
.0110a4	65 0e		adc $0e				adc 	DTemp2+2
.0110a6	85 0a		sta $0a				sta 	DTemp1+2
.0110a8	90 01		bcc $0110ab			bcc 	_MTNoAdd
.0110aa	c8		iny				iny
.0110ab					_MTNoAdd:
.0110ab	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.0110ad	26 0e		rol $0e				rol 	DTemp2+2
.0110af	90 01		bcc $0110b2			bcc 	_MTNoOverflow
.0110b1	c8		iny				iny
.0110b2					_MTNoOverflow:
.0110b2	8a		txa				txa 								; until multiplier is zero.
.0110b3	d0 e1		bne $011096			bne 	_MTLoop
.0110b5	98		tya				tya
.0110b6	18		clc				clc
.0110b7	69 ff ff	adc #$ffff			adc 	#$FFFF
.0110ba	fa		plx				plx 								; restore X
.0110bb	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.0110bc					Function_Str:
.0110bc	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.0110bf	20 22 03	jsr $010322			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0110c2	48		pha				pha 								; save YA on the stack
.0110c3	5a		phy				phy
.0110c4	20 b3 0f	jsr $010fb3			jsr 	VALGetBase 					; process , base (shared with STR$())
.0110c7	85 14		sta $14				sta 	DSignCount
.0110c9	7a		ply				ply 								; YA is the number
.0110ca	68		pla				pla
.0110cb	da		phx				phx
.0110cc	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.0110ce	20 d7 10	jsr $0110d7			jsr 	ConvertToString 			; convert it to a string.
.0110d1	fa		plx				plx 								; restore X
.0110d2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.0110d4	74 20		stz $20,x			stz 	EXSValueH+0,x
.0110d6	60		rts				rts
.0110d7					ConvertToString:
.0110d7	48		pha				pha
.0110d8	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.0110db	20 34 07	jsr $010734			jsr 	StringTempAllocate 			; allocate space for return string.
.0110de	68		pla				pla
.0110df					ConvertToStringAlreadyAllocated:
.0110df	da		phx				phx 								; save X (base)
.0110e0	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.0110e2	84 26		sty $26				sty 	DTemp3+2
.0110e4	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0110e6	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0110e8	10 15		bpl $0110ff			bpl 	_CTSNotNegative
.0110ea	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.0110ed	20 69 11	jsr $011169			jsr 	CTSOutputA
.0110f0	38		sec				sec 								; negate DTemp3 which is the number
.0110f1	a9 00 00	lda #$0000			lda 	#0
.0110f4	e5 24		sbc $24				sbc 	DTemp3
.0110f6	85 24		sta $24				sta 	DTemp3
.0110f8	a9 00 00	lda #$0000			lda 	#0
.0110fb	e5 26		sbc $26				sbc 	DTemp3+2
.0110fd	85 26		sta $26				sta 	DTemp3+2
.0110ff					_CTSNotNegative:
.0110ff	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.011102	48		pha				pha
.011103	a9 00 00	lda #$0000			lda 	#0
.011106	48		pha				pha
.011107	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.011109	85 08		sta $08				sta 	DTemp1
.01110b	64 0a		stz $0a				stz 	DTemp1+2
.01110d					_CTSMultiplySubtractor:
.01110d	38		sec				sec 								; check number vs subtractor
.01110e	a5 24		lda $24				lda 	DTemp3
.011110	e5 08		sbc $08				sbc 	DTemp1
.011112	a5 26		lda $26				lda 	DTemp3+2
.011114	e5 0a		sbc $0a				sbc 	DTemp1+2
.011116	90 0f		bcc $011127			bcc		_CTSScaledUp 				; if >= then scaled up.
.011118	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.01111a	48		pha				pha
.01111b	a5 0a		lda $0a				lda 	DTemp1+2
.01111d	48		pha				pha
.01111e	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011120	20 85 10	jsr $011085			jsr 	MultiplyTemp1ByA
.011123	b0 02		bcs $011127			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.011125	80 e6		bra $01110d			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.011127					_CTSScaledUp:
.011127	7a		ply				ply 								; YA contains the previous divider.
.011128	68		pla				pla
.011129	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.01112c	d0 05		bne $011133			bne 	_CTSHasDigit
.01112e	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011131	f0 20		beq $011153			beq 	_CTSExit
.011133					_CTSHasDigit:
.011133	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.011135	84 0e		sty $0e				sty 	DTemp2+2
.011137	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.01113a					_CTSSubLoop:
.01113a	38		sec				sec 								; subtract subtractor from number
.01113b	a5 24		lda $24				lda 	DTemp3
.01113d	e5 0c		sbc $0c				sbc 	DTemp2
.01113f	a8		tay				tay 								; intermediate in Y
.011140	a5 26		lda $26				lda 	DTemp3+2
.011142	e5 0e		sbc $0e				sbc 	DTemp2+2
.011144	90 07		bcc $01114d			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.011146	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.011148	84 24		sty $24				sty 	DTemp3
.01114a	e8		inx				inx 								; one more subtraction
.01114b	80 ed		bra $01113a			bra 	_CTSSubLoop 				; try it again.
.01114d					_CTSFinishedSubtracting:
.01114d	8a		txa				txa 								; convert to ASCII.
.01114e	20 5c 11	jsr $01115c			jsr 	CTSOutputHexDigit 			; write that out.
.011151	80 d4		bra $011127			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011153					_CTSExit:
.011153	a5 24		lda $24				lda 	DTemp3 						; output last digit
.011155	20 5c 11	jsr $01115c			jsr 	CTSOutputHexDigit
.011158	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.01115a	fa		plx				plx 								; restore X.
.01115b	60		rts				rts
.01115c					CTSOutputHexDigit:
.01115c	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.01115f	90 04		bcc $011165			bcc 	_CTSNotLetter
.011161	18		clc				clc
.011162	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.011165					_CTSNotLetter:
.011165	18		clc				clc
.011166	69 30 00	adc #$0030			adc 	#48
.011169					CTSOutputA:
.011169	5a		phy				phy 								; save Y, set Y to current pointer
.01116a	a4 1a		ldy $1a				ldy 	DCurrentTempString
.01116c	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.01116f	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.011171	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.011173	1a		inc a				inc 	a
.011174	92 18		sta ($18)			sta 	(DStartTempString)
.011176	c2 20		rep #$20			rep 	#$20
.011178	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.01117a	7a		ply				ply 								; restore Y and exit.
.01117b	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.01117c					Function_INSTR:
.01117c	20 19 06	jsr $010619			jsr 	ResetTypeInteger 			; returns a integer
.01117f	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.011182	48		pha				pha 								; save string to search
.011183	20 f0 05	jsr $0105f0			jsr 	ExpectComma
.011186	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; string to search for
.011189	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket
.01118c	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.01118e	68		pla				pla
.01118f	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.011191	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.011193	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.011195	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.011197	38		sec				sec
.011198	b2 0c		lda ($0c)			lda 	(DTemp2)
.01119a	f2 08		sbc ($08)			sbc		(DTemp1)
.01119c	c2 20		rep #$20			rep 	#$20
.01119e	90 2c		bcc $0111cc			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0111a0	29 ff 00	and #$00ff			and 	#$00FF
.0111a3	1a		inc a				inc 	a
.0111a4	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0111a6	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0111a8	29 ff 00	and #$00ff			and 	#$00FF
.0111ab	f0 22		beq $0111cf			beq 	_FINSError
.0111ad					_FINSLoop:
.0111ad	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0111af	1a		inc a				inc 	a
.0111b0	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111b2	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0111b4	29 ff 00	and #$00ff			and 	#$00FF
.0111b7	a8		tay				tay									; start comparing at index 1.
.0111b8					_FINSCompare:
.0111b8	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.0111ba	51 0c		eor ($0c),y			eor 	(DTemp2),y
.0111bc	29 ff 00	and #$00ff			and 	#$00FF
.0111bf	d0 05		bne $0111c6			bne 	_FINSNext
.0111c1	88		dey				dey
.0111c2	d0 f4		bne $0111b8			bne 	_FINSCompare
.0111c4	80 08		bra $0111ce			bra 	_FINSExit
.0111c6					_FINSNext:
.0111c6	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.0111c8	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.0111ca	d0 e1		bne $0111ad			bne 	_FINSLoop
.0111cc					_FINSFail:
.0111cc	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.0111ce					_FINSExit:
.0111ce	60		rts				rts
.0111cf					_FINSError:
.0111cf	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0111d2	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>0111da	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.0111e3					Function_UPPER:
.0111e3	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.0111e6	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.0111e9	48		pha				pha
.0111ea	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; close call.
.0111ed	20 34 07	jsr $010734			jsr		StringTempAllocate 			; allocate memory for it
.0111f0	68		pla				pla
.0111f1	20 6e 07	jsr $01076e			jsr 	StringCreateCopy 			; create a copy of it.
.0111f4	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.0111f6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0111f8	a8		tay				tay 								; address in Y
.0111f9	74 20		stz $20,x			stz 	EXSValueH+0,x
.0111fb	da		phx				phx 								; save X
.0111fc	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.0111fe	29 ff 00	and #$00ff			and 	#$00FF
.011201	f0 20		beq $011223			beq 	_FUPExit
.011203	aa		tax				tax 								; put in X
.011204					_FUPLoop:
.011204	c8		iny				iny 								; increment and load character
.011205	b9 00 00	lda $0000,y			lda 	$0000,y
.011208	29 ff 00	and #$00ff			and 	#$00FF
.01120b	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.01120e	90 10		bcc $011220			bcc 	_FUPNoChange
.011210	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011213	b0 0b		bcs $011220			bcs 	_FUPNoChange
.011215	38		sec				sec 								; shift case
.011216	e9 20 00	sbc #$0020			sbc 	#32
.011219	e2 20		sep #$20			sep 	#$20 						; write back
.01121b	99 00 00	sta $0000,y			sta 	$0000,y
.01121e	c2 20		rep #$20			rep 	#$20
.011220					_FUPNoChange:
.011220	ca		dex				dex 								; do X times
.011221	d0 e1		bne $011204			bne 	_FUPLoop
.011223					_FUPExit:
.011223	fa		plx				plx 								; restore X
.011224	60		rts				rts
.011225					Function_LOWER:
.011225	20 21 06	jsr $010621			jsr 	ResetTypeString 			; returns a string.
.011228	20 41 03	jsr $010341			jsr 	EvaluateNextString 			; evaluate a string.
.01122b	48		pha				pha
.01122c	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; close call.
.01122f	20 34 07	jsr $010734			jsr		StringTempAllocate 			; allocate memory for it
.011232	68		pla				pla
.011233	20 6e 07	jsr $01076e			jsr 	StringCreateCopy 			; create a copy of it.
.011236	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011238	95 00		sta $00,x			sta 	EXSValueL+0,x
.01123a	a8		tay				tay 								; address in Y
.01123b	74 20		stz $20,x			stz 	EXSValueH+0,x
.01123d	da		phx				phx 								; save X
.01123e	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011240	29 ff 00	and #$00ff			and 	#$00FF
.011243	f0 20		beq $011265			beq 	_FLOExit
.011245	aa		tax				tax 								; put in X
.011246					_FLOLoop:
.011246	c8		iny				iny 								; increment and load character
.011247	b9 00 00	lda $0000,y			lda 	$0000,y
.01124a	29 ff 00	and #$00ff			and 	#$00FF
.01124d	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011250	90 10		bcc $011262			bcc 	_FLONoChange
.011252	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011255	b0 0b		bcs $011262			bcs 	_FLONoChange
.011257	18		clc				clc 								; shift case
.011258	69 20 00	adc #$0020			adc 	#32
.01125b	e2 20		sep #$20			sep 	#$20 						; write back
.01125d	99 00 00	sta $0000,y			sta 	$0000,y
.011260	c2 20		rep #$20			rep 	#$20
.011262					_FLONoChange:
.011262	ca		dex				dex 								; do X times
.011263	d0 e1		bne $011246			bne 	_FLOLoop
.011265					_FLOExit:
.011265	fa		plx				plx 								; restore X
.011266	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.011267					Function_Let:
.011267	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011269	48		pha				pha  								; save on stack for later.
.01126a	20 88 03	jsr $010388			jsr 	VariableFind 				; find the variable
.01126d	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01126f	b0 1c		bcs $01128d			bcs 	_FLetFound 					; skip if found.
.011271	68		pla				pla 								; get and push the first token again.
.011272	48		pha				pha
.011273	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011276	d0 60		bne $0112d8			bne 	_FLError					; arrays, so this causes an error.
.011278	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01127a	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.01127d	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.011280	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011282					_FLSkipToken:
.011282	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011284	e6 06		inc $06				inc 	DCodePtr
.011286	e6 06		inc $06				inc 	DCodePtr
.011288	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01128b	d0 f5		bne $011282			bne 	_FLSkipToken
.01128d					_FLetFound:
.01128d	68		pla				pla 								; get and save the first token.
.01128e	48		pha				pha
.01128f	a8		tay				tay 								; put it in Y
.011290	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011293	f0 07		beq $01129c			beq 	_FLetNotArray
.011295	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011297	20 ff 03	jsr $0103ff			jsr 	VariableSubscript			; index calculation
.01129a	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01129c					_FLetNotArray:
.01129c	7a		ply				ply 								; get the first token into Y
.01129d	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01129f	48		pha				pha
.0112a0	5a		phy				phy 								; save the first token on the stack.
.0112a1	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0112a4	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0112a6	d0 23		bne $0112cb			bne 	_FLetMissingEquals
.0112a8	e6 06		inc $06				inc 	DCodePtr
.0112aa	e6 06		inc $06				inc 	DCodePtr
.0112ac	68		pla				pla 								; restore the first token.
.0112ad	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0112b0	d0 0f		bne $0112c1			bne 	_FLetString 				; skip if string.
.0112b2	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; get an integer
.0112b5	7a		ply				ply 								; get address in Y
.0112b6	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0112b8	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0112bb	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0112bd	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0112c0	60		rts				rts
.0112c1					_FLetString:
.0112c1	20 28 03	jsr $010328			jsr 	EvaluateString 				; get a string.
.0112c4	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0112c6	7a		ply				ply 								; get address we are overwriting.
.0112c7	20 74 06	jsr $010674			jsr 	StringReassign 				; reassign that address
.0112ca	60		rts				rts
.0112cb					_FLetMissingEquals:
.0112cb	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112ce	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>0112d6	3d 00
.0112d8					_FLError:
.0112d8	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0112db	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>0112e3	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/procedure.asm

.0112eb					Function_PROC:
.0112eb	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; go to start of program
.0112ee	18		clc				clc
.0112ef	65 02		adc $02				adc 	DBaseAddress
.0112f1	aa		tax				tax 								; X is used to track it
.0112f2					_FPROLoop:
.0112f2	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; is the link zero
.0112f5	f0 61		beq $011358			beq 	_FPROUnknown
.0112f7	bd 04 00	lda $0004,x			lda 	@w$0004,x 					; does it begin with DEFPROC
.0112fa	c9 47 3c	cmp #$3c47			cmp 	#defprocTokenID
.0112fd	f0 08		beq $011307			beq 	_FPROFoundDefProc
.0112ff					_FPRONext:
.0112ff	8a		txa				txa 								; follow the link.
.011300	18		clc				clc
.011301	7d 00 00	adc $0000,x			adc 	@w$0000,x
.011304	aa		tax				tax
.011305	80 eb		bra $0112f2			bra 	_FPROLoop
.011307					_FPROFoundDefProc:
.011307	bd 06 00	lda $0006,x			lda 	@w$0006,x 					; compare the first tokens.
.01130a	d2 06		cmp ($06)			cmp 	(DCodePtr)
.01130c	d0 f1		bne $0112ff			bne 	_FPRONext
.01130e	8a		txa				txa 								; DTemp1 points to the token.
.01130f	18		clc				clc
.011310	69 06 00	adc #$0006			adc 	#6
.011313	85 08		sta $08				sta 	DTemp1
.011315	a0 00 00	ldy #$0000			ldy 	#0
.011318					_FPROCompare:
.011318	b1 08		lda ($08),y			lda 	(DTemp1),y
.01131a	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.01131c	d0 e1		bne $0112ff			bne 	_FPRONext 					; fails, different
.01131e	c8		iny				iny
.01131f	c8		iny				iny
.011320	29 00 08	and #$0800			and 	#IDContMask 				; while there's more to test
.011323	d0 f3		bne $011318			bne 	_FPROCompare
.011325	bd 02 00	lda $0002,x			lda 	@w$0002,x 					; read the target line number
.011328	48		pha				pha  								; push that on the stack.
.011329	98		tya				tya 								; this is the offset to the next element
.01132a	18		clc				clc
.01132b	65 08		adc $08				adc 	DTemp1 						; X now points to the address *AFTER* DEFPROC identifier[(]
.01132d	aa		tax				tax 								; this is initially the return address
.01132e	98		tya				tya 								; Y now points to the address *AFTER* PROC identifier[()]
.01132f	18		clc				clc 								; e.g. the call address.
.011330	65 06		adc $06				adc 	DCodePtr
.011332	a8		tay				tay
.011333	b2 08		lda ($08)			lda 	(DTemp1) 					; read the first token
.011335	29 00 10	and #$1000			and 	#IDArrayMask 				; was it [DEF] PROC xxxx( e.g. parameters provided ?
.011338	f0 01		beq $01133b			beq 	_FPRONoParams
.01133a	ea		nop				nop
.01133b					_FPRONoParams:
.01133b	da		phx				phx 								; save target address.
.01133c	98		tya				tya 								; copy return address into A.
.01133d	a6 2a		ldx $2a				ldx 	DStack 						; point X to the stack.
.01133f	95 02		sta $02,x			sta 	$02,x 						; save return address at +2
.011341	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011343	95 04		sta $04,x			sta 	$04,x
.011345	a9 41 3e	lda #$3e41			lda 	#procTokenID 				; save proc token at +6
.011348	95 06		sta $06,x			sta 	$06,x
.01134a	8a		txa				txa 								; advance stack by 6.
.01134b	18		clc				clc
.01134c	69 06 00	adc #$0006			adc 	#6
.01134f	85 2a		sta $2a				sta 	DStack
.011351	68		pla				pla 								; next command
.011352	85 06		sta $06				sta 	DCodePtr
.011354	68		pla				pla
.011355	85 22		sta $22				sta 	DLineNumber
.011357	60		rts				rts
.011358					_FPROUnknown:
.011358	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01135b	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown procedure",$00 								; with this message
>011363	70 72 6f 63 65 64 75 72 65 00
.01136d					Function_ENDPROC:
.01136d	a6 2a		ldx $2a				ldx 	DStack
.01136f	b5 00		lda $00,x			lda 	$00,x
.011371	c9 00 c0	cmp #$c000			cmp 	#$C000 						; is it a local/parameter ?
.011374	b0 2e		bcs $0113a4			bcs 	_FENPPopLocal
.011376	c9 41 3e	cmp #$3e41			cmp 	#procTokenID 				; check top token.
.011379	d0 11		bne $01138c			bne 	_FENPFail
.01137b	8a		txa				txa 								; unpick stack.
.01137c	38		sec				sec
.01137d	e9 06 00	sbc #$0006			sbc 	#6
.011380	85 2a		sta $2a				sta 	DStack
.011382	aa		tax				tax
.011383	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011385	85 06		sta $06				sta 	DCodePtr
.011387	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011389	85 22		sta $22				sta 	DLineNumber
.01138b	60		rts				rts
.01138c					_FENPFail:
.01138c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01138f	45 6e 64 50 72 6f 63 20				.text 	"EndProc without Proc",$00 								; with this message
>011397	77 69 74 68 6f 75 74 20 50 72 6f 63 00
.0113a4					_FENPPopLocal:
.0113a4	a5 2a		lda $2a				lda 	DStack 						; wind stack down.
.0113a6	38		sec				sec
.0113a7	e9 08 00	sbc #$0008			sbc 	#8
.0113aa	85 2a		sta $2a				sta 	DStack
.0113ac	aa		tax				tax
.0113ad	b5 02		lda $02,x			lda 	$02,x 						; get address
.0113af	a8		tay				tay
.0113b0	b5 04		lda $04,x			lda 	$04,x 						; copy data
.0113b2	99 00 00	sta $0000,y			sta 	$0000,y
.0113b5	b5 06		lda $06,x			lda 	$06,x
.0113b7	99 02 00	sta $0002,y			sta 	$0002,y
.0113ba	80 b1		bra $01136d			bra 	Function_ENDPROC

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/local.asm

.0113bc					Command_LOCAL:
.0113bc	20 e6 13	jsr $0113e6			jsr 	LocalProcessVariable 		; make one variable 'local'
.0113bf	90 0e		bcc $0113cf			bcc 	_CLOFail
.0113c1	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at next character
.0113c3	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; exit if not comma
.0113c6	d0 06		bne $0113ce			bne 	_CLOExit
.0113c8	e6 06		inc $06				inc 	DCodePtr 					; skip comma and get next variable
.0113ca	e6 06		inc $06				inc 	DCodePtr
.0113cc	80 ee		bra $0113bc			bra 	Command_Local
.0113ce					_CLOExit:
.0113ce	60		rts				rts
.0113cf					_CLOFail:
.0113cf	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0113d2	42 61 64 20 4c 6f 63 61				.text 	"Bad Local Statement",$00 								; with this message
>0113da	6c 20 53 74 61 74 65 6d 65 6e 74 00
.0113e6					LocalProcessVariable:
.0113e6	b2 06		lda ($06)			lda 	(DCodePtr)					; check it is an identifier and not an array
.0113e8	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113eb	90 3e		bcc $01142b			bcc 	_LPVFail
.0113ed	29 00 10	and #$1000			and 	#IDArrayMask
.0113f0	d0 39		bne $01142b			bne 	_LPVFail
.0113f2	b2 06		lda ($06)			lda 	(DCodePtr)
.0113f4	29 00 e0	and #$e000			and 	#$E000
.0113f7	48		pha				pha
.0113f8	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find the variable
.0113fb	b0 13		bcs $011410			bcs 	_LPVFound 					; if found, A points to the data.
.0113fd	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0113ff	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's just a single value.
.011402	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.011405					_LPVSkipToken:
.011405	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011407	e6 06		inc $06				inc 	DCodePtr
.011409	e6 06		inc $06				inc 	DCodePtr
.01140b	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01140e	d0 f5		bne $011405			bne 	_LPVSkipToken
.011410					_LPVFound:
.011410	a8		tay				tay 								; data pointer in Y
.011411	a6 2a		ldx $2a				ldx 	DStack
.011413	95 02		sta $02,x			sta 	$02,x 						; offset 0 address
.011415	b9 00 00	lda $0000,y			lda 	$0000,y 					; offset 2 LSW
.011418	95 04		sta $04,x			sta 	$04,x
.01141a	b9 02 00	lda $0002,y			lda 	$0002,y 					; offset 4 LSW
.01141d	95 06		sta $06,x			sta 	$06,x
.01141f	68		pla				pla 								; get the type header
.011420	95 08		sta $08,x			sta 	$08,x 						; update the BASIC stack.
.011422	8a		txa				txa
.011423	18		clc				clc
.011424	69 08 00	adc #$0008			adc 	#8
.011427	85 2a		sta $2a				sta 	DStack
.011429	38		sec				sec
.01142a	60		rts				rts
.01142b					_LPVFail:
.01142b	18		clc				clc
.01142c	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.01142d					Command_List:
.01142d	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011430	20 34 07	jsr $010734		jsr 	StringTempAllocate
.011433	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011435	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011437	64 2e		stz $2e			stz 	DIndent2
.011439	64 32		stz $32			stz 	DTemp4+0 						; low number
.01143b	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01143e	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011440	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011442	f0 3b		beq $01147f		beq 	_CLIList
.011444	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011447	f0 36		beq $01147f		beq 	_CLIList
.011449	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.01144c	f0 13		beq $011461		beq 	_CLIComma
.01144e	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; yes, first number
.011451	c0 00 00	cpy #$0000		cpy 	#0
.011454	d0 21		bne $011477		bne 	_CLIError
.011456	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011458	85 34		sta $34			sta 	DTemp4+2
.01145a	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.01145c	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.01145f	d0 1e		bne $01147f		bne 	_CLIList
.011461					_CLIComma:
.011461	20 f0 05	jsr $0105f0		jsr 	ExpectComma 					; skip comma
.011464	b2 06		lda ($06)		lda 	(DCodePtr)
.011466	f0 12		beq $01147a		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.011468	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.01146b	f0 0d		beq $01147a		beq 	_CLIToEnd
.01146d	20 22 03	jsr $010322		jsr 	EvaluateNextInteger 			; get end line.
.011470	85 34		sta $34			sta 	DTemp4+2
.011472	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011475	f0 08		beq $01147f		beq 	_CLIList
.011477					_CLIError:
.011477	82 43 f1	brl $0105bd		brl 	SyntaxError
.01147a					_CLIToEnd:
.01147a	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01147d	85 34		sta $34			sta 	DTemp4+2
.01147f					_CLIList:
.01147f	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.011482	18		clc			clc
.011483	65 02		adc $02			adc 	DBaseAddress
.011485	a8		tay			tay 									; put in Y
.011486					_CLINextLine:
.011486	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011489	f0 29		beq $0114b4		beq 	_CLIExit
.01148b	20 1c 16	jsr $01161c		jsr 	ScanIndent  					; scan for formatting.
.01148e	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011491	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011493	90 14		bcc $0114a9		bcc 	_CLIFollowLink
.011495	c5 34		cmp $34			cmp 	DTemp4+2
.011497	f0 02		beq $01149b		beq 	_CLIShowLine
.011499	b0 0e		bcs $0114a9		bcs 	_CLIFollowLink
.01149b					_CLIShowLine:
.01149b	a5 30		lda $30			lda 	DListBuffer
.01149d	20 b7 14	jsr $0114b7		jsr 	Detokenise 						; detokenise it
.0114a0	5a		phy			phy
.0114a1	a8		tay			tay 									; print buffer out
.0114a2	20 47 06	jsr $010647		jsr 	PrintBasicString
.0114a5	20 61 1d	jsr $011d61		jsr 	HWNewLine
.0114a8	7a		ply			ply 									; get address
.0114a9					_CLIFollowLink:
.0114a9	98		tya			tya 									; follow link
.0114aa	18		clc			clc
.0114ab	79 00 00	adc $0000,y		adc 	$0000,y
.0114ae	a8		tay			tay
.0114af	20 7d 1d	jsr $011d7d		jsr 	HWCheckBreak 					; break key pressed.
.0114b2	f0 d2		beq $011486		beq 	_CLINextLine
.0114b4					_CLIExit:
.0114b4	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0114b6	60		rts			rts
.0114b7					Detokenise:
.0114b7	48		pha			pha
.0114b8	da		phx			phx
.0114b9	5a		phy			phy
.0114ba	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0114bc	1a		inc a			inc 	a
.0114bd	85 1a		sta $1a			sta 	DCurrentTempString
.0114bf	64 1c		stz $1c			stz		DConstantShift
.0114c1	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0114c4	92 18		sta ($18)		sta 	(DStartTempString)
.0114c6	5a		phy			phy 									; save Y
.0114c7	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0114ca	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0114cd	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0114d0	20 df 10	jsr $0110df		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0114d3	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0114d5	c5 2e		cmp $2e			cmp 	DIndent2
.0114d7	90 02		bcc $0114db		bcc 	_DTKSmaller
.0114d9	a5 2e		lda $2e			lda 	DIndent2
.0114db					_DTKSmaller:
.0114db	0a		asl a			asl 	a
.0114dc	69 06 00	adc #$0006		adc 	#6
.0114df	85 08		sta $08			sta 	DTemp1
.0114e1					_DTKPadLineNo:
.0114e1	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0114e4	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.0114e7	b2 18		lda ($18)		lda 	(DStartTempString)
.0114e9	29 ff 00	and #$00ff		and 	#$00FF
.0114ec	c5 08		cmp $08			cmp 	DTemp1
.0114ee	d0 f1		bne $0114e1		bne 	_DTKPadLineNo
.0114f0	68		pla			pla 									; get pointer
.0114f1	18		clc			clc 									; point to start of line
.0114f2	69 04 00	adc #$0004		adc 	#4
.0114f5	a8		tay			tay 									; put back in Y.
.0114f6					_DTKMainLoop:
.0114f6	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.0114f9	d0 04		bne $0114ff		bne 	_DTKNotZero 					; if zero, return.
.0114fb	7a		ply			ply
.0114fc	fa		plx			plx
.0114fd	68		pla			pla
.0114fe	60		rts			rts
.0114ff					_DTKNotZero:
.0114ff	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011502	b0 1c		bcs $011520		bcs 	_DTKNotString
.011504	5a		phy			phy										; save token address on stack.
.011505	c8		iny			iny 									; skip first token
.011506	c8		iny			iny
.011507	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01150a	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.01150d	98		tya			tya 									; copy the string out.
.01150e	20 6e 07	jsr $01076e		jsr 	StringCreateCopy
.011511	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011514	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.011517	68		pla			pla 									; get token, which is its own offset
.011518	a8		tay			tay
.011519	18		clc			clc
.01151a	79 00 00	adc $0000,y		adc 	$0000,y
.01151d	a8		tay			tay
.01151e	80 d6		bra $0114f6		bra 	_DTKMainLoop
.011520					_DTKNotString:
.011520	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011523	b0 09		bcs $01152e		bcs 	_DTKNotShift
.011525	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011528	85 1c		sta $1c			sta 	DConstantShift
.01152a	c8		iny			iny 									; skip token.
.01152b	c8		iny			iny
.01152c	80 c8		bra $0114f6		bra 	_DTKMainLoop
.01152e					_DTKNotShift:
.01152e	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011531	b0 07		bcs $01153a		bcs 	_DTKNotKeyword
.011533	c8		iny			iny 									; skip over token
.011534	c8		iny			iny
.011535	20 b4 15	jsr $0115b4		jsr 	_DTKDecodeKeyword 				; decode it.
.011538	80 bc		bra $0114f6		bra 	_DTKMainLoop
.01153a					_DTKNotKeyword:
.01153a	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01153d	b0 18		bcs $011557		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.01153f	5a		phy			phy 									; save pointer
.011540	38		sec			sec  									; shift it in the range 0-32767
.011541	e9 00 40	sbc #$4000		sbc 	#$4000
.011544	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011545	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011547	6a		ror a			ror 	a 								; rotate that into the constant value
.011548	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.01154a	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01154d	20 df 10	jsr $0110df		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011550	64 1c		stz $1c			stz 	DConstantShift
.011552	7a		ply			ply 									; restore pointer
.011553	c8		iny			iny 									; skip token.
.011554	c8		iny			iny
.011555	80 9f		bra $0114f6		bra 	_DTKMainLoop
.011557					_DTKIdentifier:
.011557	48		pha			pha 									; save token for typing at end
.011558					_DTKILoop:
.011558	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01155b	20 84 15	jsr $011584		jsr 	_DTKIDecodeToken 				; decode it.
.01155e	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011561	c8		iny			iny 									; skip it
.011562	c8		iny			iny
.011563	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011566	d0 f0		bne $011558		bne 	_DTKILoop
.011568	68		pla			pla 									; add $( as required.
.011569	48		pha			pha 									; comes from the first token.
.01156a	29 00 20	and #$2000		and 	#IDTypeMask
.01156d	f0 06		beq $011575		beq 	_DTKINotString
.01156f	a9 24 00	lda #$0024		lda 	#"$"
.011572	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.011575					_DTKINotString:
.011575	68		pla			pla
.011576	29 00 10	and #$1000		and 	#IDArrayMask
.011579	f0 06		beq $011581		beq 	_DTKINotArray
.01157b	a9 28 00	lda #$0028		lda 	#"("
.01157e	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.011581					_DTKINotArray:
.011581	82 72 ff	brl $0114f6		brl 	_DTKMainLoop
.011584					_DTKIDecodeToken:
.011584	5a		phy			phy
.011585	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.011588	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.01158b					_DTKIDivide:
.01158b	38		sec			sec
.01158c	e9 2d 00	sbc #$002d		sbc 	#45
.01158f	c8		iny			iny
.011590	b0 f9		bcs $01158b		bcs 	_DTKIDivide
.011592	69 2d 00	adc #$002d		adc 	#45
.011595	20 9e 15	jsr $01159e		jsr 	_DTKIOutA 						; output low.
.011598	98		tya			tya
.011599	20 9e 15	jsr $01159e		jsr 	_DTKIOutA 						; output high
.01159c	7a		ply			ply
.01159d	60		rts			rts
.01159e					_DTKIOutA:
.01159e	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0115a1	f0 10		beq $0115b3		beq 	_DTKIOutExit
.0115a3	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0115a6	90 04		bcc $0115ac		bcc 	_DTKIOutAlpha
.0115a8	38		sec			sec  									; adjust for 0-9
.0115a9	e9 4b 00	sbc #$004b		sbc 	#$4B
.0115ac					_DTKIOutAlpha:
.0115ac	18		clc			clc										; adjust for A-Z
.0115ad	69 60 00	adc #$0060		adc 	#96
.0115b0	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.0115b3					_DTKIOutExit:
.0115b3	60		rts			rts
.0115b4					_DTKDecodeKeyword:
.0115b4	48		pha			pha
.0115b5	da		phx			phx
.0115b6	5a		phy			phy
.0115b7	a8		tay			tay 									; save token ID in Y
.0115b8	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0115bb	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0115be	48		pha			pha 									; save this flag on a stack
.0115bf	5a		phy			phy 									; save the token ID
.0115c0	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0115c3	d0 19		bne $0115de		bne 	_DTKNotSpecial1
.0115c5	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0115c7	88		dey			dey
.0115c8	b9 00 00	lda $0000,y		lda 	$0000,y
.0115cb	29 ff 00	and #$00ff		and 	#$00FF
.0115ce	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0115d1	f0 0b		beq $0115de		beq 	_DTKNotSpecial1
.0115d3	c9 3a 00	cmp #$003a		cmp 	#":"
.0115d6	f0 06		beq $0115de		beq 	_DTKNotSpecial1
.0115d8	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0115db	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.0115de					_DTKNotSpecial1:
.0115de	68		pla			pla
.0115df	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0115e2	a8		tay			tay 									; into Y.
.0115e3	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0115e6					_DTKDWorkThrough:
.0115e6	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0115e7	f0 0f		beq $0115f8		beq 	_DTKDFound
.0115e9	86 08		stx $08			stx 	DTemp1
.0115eb	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; read the type/skip byte.
.0115ef	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0115f2	18		clc			clc
.0115f3	65 08		adc $08			adc 	DTemp1
.0115f5	aa		tax			tax
.0115f6	80 ee		bra $0115e6		bra 	_DTKDWorkThrough
.0115f8					_DTKDFound:
.0115f8	bf 9c 00 01	lda $01009c,x		lda 	TokenText,x 					; get skip
.0115fc	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0115ff	3a		dec a			dec 	a
.011600	a8		tay			tay 									; put in Y
.011601					_DTKOut:
.011601	bf 9d 00 01	lda $01009d,x		lda 	TokenText+1,x 					; output it.
.011605	29 ff 00	and #$00ff		and 	#$00FF
.011608					_DTKNotLC:
.011608	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.01160b	e8		inx			inx
.01160c	88		dey			dey
.01160d	d0 f2		bne $011601		bne 	_DTKOut
.01160f	68		pla			pla 									; trailing space.
.011610	d0 06		bne $011618		bne 	_DTKNotSpecial2
.011612	a9 20 00	lda #$0020		lda 	#" "
.011615	20 60 07	jsr $010760		jsr 	StringWriteCharacter
.011618					_DTKNotSpecial2:
.011618	7a		ply			ply
.011619	fa		plx			plx
.01161a	68		pla			pla
.01161b	60		rts			rts
.01161c					ScanIndent:
.01161c	48		pha			pha
.01161d	5a		phy			phy
.01161e	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011620	85 2e		sta $2e			sta 	DIndent2
.011622	98		tya			tya
.011623	18		clc			clc 									; point to code.
.011624	69 04 00	adc #$0004		adc 	#4
.011627	a8		tay			tay
.011628					_SILoop:
.011628	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01162b	f0 35		beq $011662		beq 	_SIExit
.01162d	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011630	b0 08		bcs $01163a		bcs 	_SICheckKeyword
.011632	98		tya			tya 									; skip string.
.011633	18		clc			clc
.011634	79 00 00	adc $0000,y		adc 	$0000,y
.011637	a8		tay			tay
.011638	80 ee		bra $011628		bra 	_SILoop
.01163a					_SICheckKeyword:
.01163a	29 00 e0	and #$e000		and 	#$E000
.01163d	c9 00 20	cmp #$2000		cmp 	#$2000
.011640	f0 04		beq $011646		beq 	_SIFoundKeyword
.011642					_SIAdvance:
.011642	c8		iny			iny 									; if not, loop round.
.011643	c8		iny			iny
.011644	80 e2		bra $011628		bra 	_SILoop
.011646					_SIFoundKeyword:
.011646	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011649	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.01164c	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.01164f	f0 0d		beq $01165e		beq 	_SIKeyPlus
.011651	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011654	d0 ec		bne $011642		bne 	_SIAdvance
.011656	c6 2c		dec $2c			dec 	DIndent
.011658	10 e8		bpl $011642		bpl 	_SIAdvance
.01165a	64 2c		stz $2c			stz 	DIndent
.01165c	80 e4		bra $011642		bra 	_SIAdvance
.01165e					_SIKeyPlus:
.01165e	e6 2c		inc $2c			inc 	DIndent
.011660	80 e0		bra $011642		bra 	_SIAdvance
.011662					_SIExit:
.011662	7a		ply			ply
.011663	68		pla			pla
.011664	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011665					Function_PRINT:
.011665	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011667	f0 33		beq $01169c			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011669	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.01166c	f0 2e		beq $01169c			beq 	_FPRExitCR
.01166e	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.011671	f0 23		beq $011696			beq 	_FPRSkipLoop
.011673	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.011676	f0 1b		beq $011693			beq 	_FPRNewLine
.011678	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.01167b	f0 11		beq $01168e			beq 	_FPRTab
.01167d					_FPRExpression:
.01167d	20 fb 01	jsr $0101fb			jsr 	Evaluate 					; evaluate a string or integer.
.011680	b0 06		bcs $011688			bcs 	_FPRHaveString
.011682	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011685	20 d7 10	jsr $0110d7			jsr 	ConvertToString
.011688					_FPRHaveString:
.011688	a8		tay				tay 								; print the basic String.
.011689	20 47 06	jsr $010647			jsr 	PrintBASICString
.01168c	80 d7		bra $011665			bra 	Function_Print 				; and go round again.
.01168e					_FPRTab:
.01168e	20 76 1d	jsr $011d76			jsr 	HWTab
.011691	80 03		bra $011696			bra 	_FPRSkipLoop
.011693					_FPRNewLine:
.011693	20 61 1d	jsr $011d61			jsr 	HWNewLine
.011696					_FPRSkipLoop:
.011696	e6 06		inc $06				inc 	DCodePtr
.011698	e6 06		inc $06				inc 	DCodePtr
.01169a	80 c9		bra $011665			bra 	Function_Print
.01169c					_FPRExitCR:
.01169c	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.01169e	88		dey				dey
.01169f	88		dey				dey
.0116a0	b9 00 00	lda $0000,y			lda 	$0000,y
.0116a3	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0116a6	f0 08		beq $0116b0			beq 	_FPRExit
.0116a8	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0116ab	f0 03		beq $0116b0			beq 	_FPRExit
.0116ad	20 61 1d	jsr $011d61			jsr 	HWNewLine 					; print a new line.
.0116b0					_FPRExit:
.0116b0	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0116b1					Function_IF:
.0116b1	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; check success.
.0116b4	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0116b6	05 08		ora $08				ora 	DTemp1
.0116b8	a8		tay				tay 								; success flag in Y.
.0116b9	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0116bb	c9 4a 3a	cmp #$3a4a			cmp 	#thenTokenID
.0116be	d0 32		bne $0116f2			bne 	_FIFExtended 				; if so, go to the extended IF.
.0116c0	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0116c2	e6 06		inc $06				inc 	DCodePtr
.0116c4	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0116c7	f0 0f		beq $0116d8			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0116c9	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0116cb	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0116ce	90 21		bcc $0116f1			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0116d0	c9 00 c0	cmp #$c000			cmp 	#$C000
.0116d3	b0 1c		bcs $0116f1			bcs 	_FIFContinue
.0116d5	4c 67 19	jmp $011967			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0116d8					_FIFEndOfLine:
.0116d8	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0116da	f0 15		beq $0116f1			beq 	_FIFContinue 				; if done so, continue.
.0116dc	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0116df	90 06		bcc $0116e7			bcc 	_FIFStringConstant
.0116e1	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0116e3	e6 06		inc $06				inc 	DCodePtr
.0116e5	80 f1		bra $0116d8			bra 	_FIFEndOfLine
.0116e7					_FIFStringConstant:
.0116e7	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0116ea	18		clc				clc
.0116eb	65 06		adc $06				adc 	DCodePtr
.0116ed	85 06		sta $06				sta 	DCodePtr
.0116ef	80 e7		bra $0116d8			bra 	_FIFEndOfLine
.0116f1					_FIFContinue:
.0116f1	60		rts				rts
.0116f2					_FIFExtended:
.0116f2	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0116f4	e6 2a		inc $2a				inc 	DStack
.0116f6	a9 45 3c	lda #$3c45			lda 	#ifTokenID
.0116f9	a6 2a		ldx $2a				ldx 	DStack
.0116fb	95 00		sta $00,x			sta 	$00,x
.0116fd	98		tya				tya 								; see if the test was passed.
.0116fe	f0 01		beq $011701			beq 	_FIXSkip 					; if zero then it has failed.
.011700	60		rts				rts 								; test passed, so continue executing
.011701					_FIXSkip:
.011701	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011704	a2 4b 3a	ldx #$3a4b			ldx 	#endifTokenID 				; at the same level.
.011707	20 67 17	jsr $011767			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01170a	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01170c	e6 06		inc $06				inc 	DCodePtr
.01170e	c9 4b 3a	cmp #$3a4b			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011711	d0 04		bne $011717			bne 	_FIXNoThrow
.011713	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011715	c6 2a		dec $2a				dec 	DStack
.011717					_FIXNoThrow:
.011717	60		rts				rts
.011718					Handler_ELSE:
.011718	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01171a	b5 00		lda $00,x			lda 	$00,x
.01171c	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01171f	d0 12		bne $011733			bne 	_HEBadStructure
.011721	a9 4b 3a	lda #$3a4b			lda 	#endifTokenID 				; only searching one token.
.011724	a2 00 00	ldx #$0000			ldx 	#$0000
.011727	20 67 17	jsr $011767			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01172a	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01172c	e6 06		inc $06				inc 	DCodePtr
.01172e	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011730	c6 2a		dec $2a				dec 	DStack
.011732	60		rts				rts
.011733					_HEBadStructure:
.011733	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011736	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01173e	68 6f 75 74 20 49 66 00
.011746					Handler_ENDIF:
.011746	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011748	b5 00		lda $00,x			lda 	$00,x
.01174a	c9 45 3c	cmp #$3c45			cmp 	#ifTokenID
.01174d	d0 05		bne $011754			bne 	_HEIBadStructure
.01174f	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011751	c6 2a		dec $2a				dec 	DStack
.011753	60		rts				rts
.011754					_HEIBadStructure:
.011754	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011757	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01175f	68 6f 75 74 20 49 66 00
.011767					ScanForwardLevel:
.011767	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011769	86 0a		stx $0a				stx 	DTemp1+2
.01176b	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01176d	85 0c		sta $0c				sta 	DTemp2
.01176f	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.011772					_SFLLoop:
.011772	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011775	d0 0d		bne $011784			bne 	_SFLNoCheck 				; we're in a substructure.
.011777	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011779	f0 09		beq $011784			beq 	_SFLNoCheck 				; don't check zero
.01177b	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01177d	f0 04		beq $011783			beq 	_SFLFound
.01177f	c5 0a		cmp $0a				cmp 	DTemp1+2
.011781	d0 01		bne $011784			bne 	_SFLNoCheck
.011783					_SFLFound:
.011783	60		rts				rts
.011784					_SFLNoCheck:
.011784	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011786	f0 4f		beq $0117d7			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011788	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.01178b	90 40		bcc $0117cd			bcc 	_SFLSkipString 				; then handle that.
.01178d	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.01178f	e6 06		inc $06				inc 	DCodePtr
.011791	a8		tay				tay 								; put token in Y temporarily.
.011792	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011795	c9 00 20	cmp #$2000			cmp 	#$2000
.011798	d0 d8		bne $011772			bne 	_SFLLoop
.01179a	98		tya				tya 								; get the token back.
.01179b	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.01179e	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0117a1	f0 cf		beq $011772			beq 	_SFLLoop
.0117a3	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0117a6	90 ca		bcc $011772			bcc 	_SFLLoop
.0117a8	e8		inx				inx 								; increment the level.
.0117a9	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0117ac	f0 c4		beq $011772			beq 	_SFLLoop
.0117ae	ca		dex				dex 								; decrement the level
.0117af	ca		dex				dex 								; one overdoes the previous inx.
.0117b0	10 c0		bpl $011772			bpl 	_SFLLoop 					; if gone -ve then error.
.0117b2					_SFLError:
.0117b2	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0117b4	85 22		sta $22				sta 	DLineNumber
.0117b6	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0117b9	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0117c1	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0117cd					_SFLSkipString:
.0117cd	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0117d0	18		clc				clc
.0117d1	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0117d3	85 06		sta $06				sta 	DCodePtr
.0117d5	80 9b		bra $011772			bra 	_SFLLoop 					; go round again.
.0117d7					_SFLNextLine:
.0117d7	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0117d9	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0117dc	f0 d4		beq $0117b2			beq 	_SFLError 					; if zero, then there's no more code to search.
.0117de	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0117e1	85 22		sta $22				sta 	DLineNumber
.0117e3	18		clc				clc
.0117e4	a5 06		lda $06				lda 	DCodePtr
.0117e6	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0117e9	85 06		sta $06				sta 	DCodePtr
.0117eb	80 85		bra $011772			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.0117ed					Command_FOR:
.0117ed	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0117ef	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0117f2	d0 60		bne $011854			bne		_CFOBad
.0117f4	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find variable
.0117f7	b0 15		bcs $01180e			bcs 	_CFOExists
.0117f9	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0117fb	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0117fe	20 32 04	jsr $010432			jsr 	VariableCreate 				; create it.
.011801	48		pha				pha 								; save on stack
.011802					_CFOSkipToken:
.011802	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011804	e6 06		inc $06				inc 	DCodePtr
.011806	e6 06		inc $06				inc 	DCodePtr
.011808	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01180b	d0 f5		bne $011802			bne 	_CFOSkipToken
.01180d	68		pla				pla 								; restore address
.01180e					_CFOExists:
.01180e	48		pha				pha 								; push variable address on stack
.01180f	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011812	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.011815	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the start value
.011818	bb		tyx				tyx 								; put high value in X
.011819	7a		ply				ply 								; address in Y
.01181a	99 00 00	sta $0000,y			sta 	$0000,y
.01181d	8a		txa				txa
.01181e	99 02 00	sta $0002,y			sta 	$0002,y
.011821	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011824	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.011827	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011829	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01182b	95 02		sta $02,x			sta 	$02,x
.01182d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01182f	95 04		sta $04,x			sta 	$04,x
.011831	98		tya				tya 								; save variable address at +6
.011832	95 06		sta $06,x			sta 	$06,x
.011834	a9 46 3c	lda #$3c46			lda 	#forTokenID 				; save for token at +8
.011837	95 08		sta $08,x			sta 	$08,x
.011839	8a		txa				txa 								; add 8 to stack position
.01183a	18		clc				clc
.01183b	69 08 00	adc #$0008			adc 	#8
.01183e	85 2a		sta $2a				sta 	DStack
.011840	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011843	b2 06		lda ($06)			lda 	(DCodePtr)
.011845	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.011848	d0 09		bne $011853			bne 	_CFONoStep
.01184a	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01184d	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.011850	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; and whatever the step is.
.011853					_CFONoStep:
.011853	60		rts				rts
.011854					_CFOBad:
.011854	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011857	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>01185f	76 61 72 69 61 62 6c 65 00
.011868					Command_NEXT:
.011868	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.01186a	b5 00		lda $00,x			lda 	$00,x
.01186c	c9 46 3c	cmp #$3c46			cmp 	#forTokenID 				; if not FOR then error
.01186f	f0 14		beq $011885			beq 	_CNXOk
.011871	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011874	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>01187c	68 6f 75 74 20 46 6f 72 00
.011885					_CNXOk:
.011885	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011887	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.01188a	90 22		bcc $0118ae			bcc 	_CNXNoVariable
.01188c	20 88 03	jsr $010388			jsr 	VariableFind 				; get address of variable.
.01188f	90 08		bcc $011899			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011891	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011893	ca		dex				dex
.011894	ca		dex				dex
.011895	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.011897	f0 15		beq $0118ae			beq 	_CNXNoVariable 				; then continue
.011899					_CNXNextVar:
.011899	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01189c	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0118a4	20 76 61 72 69 61 62 6c 65 00
.0118ae					_CNXNoVariable:
.0118ae	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0118b0	48		pha				pha
.0118b1	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0118b3	38		sec				sec
.0118b4	e9 08 00	sbc #$0008			sbc 	#8
.0118b7	85 2a		sta $2a				sta 	DStack
.0118b9	aa		tax				tax 								; X points to the stack.
.0118ba	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0118bc	85 06		sta $06				sta 	DCodePtr
.0118be	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; this is the target constant
.0118c1	5a		phy				phy 								; save the target on the stack
.0118c2	48		pha				pha
.0118c3	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0118c6	85 08		sta $08				sta 	DTemp1
.0118c8	64 0a		stz $0a				stz 	DTemp1+2
.0118ca	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0118cc	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0118cf	d0 0b		bne $0118dc			bne 	_CNXNoStep
.0118d1	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0118d3	e6 06		inc $06				inc 	DCodePtr
.0118d5	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; work out the step.
.0118d8	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0118da	84 0a		sty $0a				sty 	DTemp1+2
.0118dc					_CNXNoStep:
.0118dc	68		pla				pla 								; save the Target in DTemp2
.0118dd	85 0c		sta $0c				sta 	DTemp2
.0118df	68		pla				pla
.0118e0	85 0e		sta $0e				sta 	DTemp2+2
.0118e2	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0118e4	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0118e6	a8		tay				tay
.0118e7	18		clc				clc
.0118e8	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0118eb	65 08		adc $08				adc 	DTemp1
.0118ed	99 00 00	sta $0000,y			sta 	$0000,y
.0118f0	b9 02 00	lda $0002,y			lda 	$0002,y
.0118f3	65 0a		adc $0a				adc 	DTemp1+2
.0118f5	99 02 00	sta $0002,y			sta 	$0002,y
.0118f8	38		sec				sec
.0118f9	a5 0c		lda $0c				lda 	DTemp2
.0118fb	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0118fe	85 0c		sta $0c				sta 	DTemp2
.011900	a5 0e		lda $0e				lda 	DTemp2+2
.011902	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011905	85 0e		sta $0e				sta 	DTemp2+2
.011907	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011909	f0 0a		beq $011915			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01190b	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01190d	45 0a		eor $0a				eor 	DTemp1+2
.01190f	10 04		bpl $011915			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011911	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011912	85 06		sta $06				sta 	DCodePtr
.011914	60		rts				rts
.011915					_CNXLoopAgain:
.011915	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011916	18		clc				clc
.011917	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011919	aa		tax				tax
.01191a	69 08 00	adc #$0008			adc 	#8
.01191d	85 2a		sta $2a				sta 	DStack
.01191f	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011921	85 22		sta $22				sta 	DLineNumber
.011923	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011924					Function_ONGOTO:
.011924	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; on what GOTO :)
.011927	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01192a	d0 25		bne $011951			bne 	_FOGoFail
.01192c	c9 00 00	cmp #$0000			cmp 	#0
.01192f	f0 20		beq $011951			beq 	_FOGoFail 					; we start with index = 1
.011931	48		pha				pha 								; save count on stack
.011932	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011935	20 cd 05	jsr $0105cd			jsr 	ExpectToken
.011938	fa		plx				plx 								; put count in X.
.011939					_FOGoLoop:
.011939	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01193b	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01193e	90 73		bcc $0119b3			bcc 	FGOFail 					; if not, then we have an error.
.011940	c9 00 c0	cmp #$c000			cmp 	#$C000
.011943	b0 6e		bcs $0119b3			bcs 	FGOFail
.011945	ca		dex				dex 								; subtract one, if done, call GOTO code
.011946	f0 1f		beq $011967			beq 	Function_GOTO
.011948	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.01194a	e6 06		inc $06				inc 	DCodePtr
.01194c	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; expect a comma
.01194f	80 e8		bra $011939			bra 	_FOGoLoop 					; and loop round.
.011951					_FOGoFail:
.011951	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011954	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>01195c	47 6f 74 6f 20 76 61 6c 75 65 00
.011967					Function_GOTO:
.011967	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011969	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01196c	90 45		bcc $0119b3			bcc 	FGOFail 					; we don't do calculate line numbers.
.01196e	c9 00 c0	cmp #$c000			cmp 	#$C000
.011971	b0 40		bcs $0119b3			bcs 	FGOFail
.011973	38		sec				sec 								; convert to 0-32767
.011974	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011977	aa		tax				tax
.011978	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.01197b	18		clc				clc
.01197c	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.01197e	a8		tay				tay
.01197f					_FGOSearch:
.01197f	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.011982	f0 18		beq $01199c			beq 	_FGOUnknown
.011984	8a		txa				txa 								; does it match line number ?
.011985	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011988	f0 08		beq $011992			beq 	_FGOFound 					; yes, then found.
.01198a	98		tya				tya 								; no follow the link
.01198b	18		clc				clc
.01198c	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.01198f	a8		tay				tay
.011990	80 ed		bra $01197f			bra 	_FGOSearch 					; and keep looking
.011992					_FGOFound:
.011992	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011994	98		tya				tya 								; Y + 4 is the code pointer.
.011995	18		clc				clc 								; (skipping link and line #)
.011996	69 04 00	adc #$0004			adc 	#4
.011999	85 06		sta $06				sta 	DCodePtr
.01199b	60		rts				rts									; and continue
.01199c					_FGOUnknown:
.01199c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>01199f	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0119a7	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0119b3					FGOFail:
.0119b3	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119b6	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0119be	20 4e 75 6d 62 65 72 00
.0119c6					Function_GOSUB:
.0119c6	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0119c8	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0119ca	18		clc				clc
.0119cb	69 02 00	adc #$0002			adc 	#2
.0119ce	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0119d0	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0119d2	95 04		sta $04,x			sta 	$04,x
.0119d4	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0119d7	95 06		sta $06,x			sta 	$06,x
.0119d9	8a		txa				txa 								; advance stack by 6.
.0119da	18		clc				clc
.0119db	69 06 00	adc #$0006			adc 	#6
.0119de	85 2a		sta $2a				sta 	DStack
.0119e0	80 85		bra $011967			bra 	Function_GOTO 				; and do a GOTO.
.0119e2					Function_RETURN:
.0119e2	a6 2a		ldx $2a				ldx 	DStack
.0119e4	b5 00		lda $00,x			lda 	$00,x
.0119e6	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0119e9	d0 11		bne $0119fc			bne 	_FRetFail
.0119eb	8a		txa				txa 								; unpick stack.
.0119ec	38		sec				sec
.0119ed	e9 06 00	sbc #$0006			sbc 	#6
.0119f0	85 2a		sta $2a				sta 	DStack
.0119f2	aa		tax				tax
.0119f3	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0119f5	85 06		sta $06				sta 	DCodePtr
.0119f7	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0119f9	85 22		sta $22				sta 	DLineNumber
.0119fb	60		rts				rts
.0119fc					_FRetFail:
.0119fc	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>0119ff	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011a07	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011a14					Function_REPEAT:
.011a14	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a16	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011a18	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a1a	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a1c	95 04		sta $04,x			sta 	$04,x
.011a1e	a9 43 3c	lda #$3c43			lda 	#repeatTokenID 				; save repeat token at +6
.011a21	95 06		sta $06,x			sta 	$06,x
.011a23	8a		txa				txa 								; advance stack by 6.
.011a24	18		clc				clc
.011a25	69 06 00	adc #$0006			adc 	#6
.011a28	85 2a		sta $2a				sta 	DStack
.011a2a	60		rts				rts
.011a2b					Function_UNTIL:
.011a2b	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011a2d	b5 00		lda $00,x			lda 	$00,x
.011a2f	c9 43 3c	cmp #$3c43			cmp 	#repeatTokenID
.011a32	d0 26		bne $011a5a			bne 	_FUNFail
.011a34	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; .... until what.
.011a37	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011a3a	d0 15		bne $011a51			bne 	_FUNExit
.011a3c	c9 00 00	cmp #$0000			cmp 	#0
.011a3f	d0 10		bne $011a51			bne 	_FUNExit
.011a41	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011a43	38		sec				sec
.011a44	e9 06 00	sbc #$0006			sbc 	#6
.011a47	aa		tax				tax
.011a48	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011a4a	85 06		sta $06				sta 	DCodePtr
.011a4c	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011a4e	85 22		sta $22				sta 	DLineNumber
.011a50	60		rts				rts
.011a51					_FUNExit:
.011a51	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011a53	38		sec				sec
.011a54	e9 06 00	sbc #$0006			sbc 	#6
.011a57	85 2a		sta $2a				sta 	DStack
.011a59	60		rts				rts
.011a5a					_FUNFail:
.011a5a	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011a5d	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011a65	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.011a72					Function_WHILE:
.011a72	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011a74	48		pha				pha 								; save on stack
.011a75	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; while what.
.011a78	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011a7b	d0 14		bne $011a91			bne 	_FWHExecute
.011a7d	c9 00 00	cmp #$0000			cmp 	#0
.011a80	d0 0f		bne $011a91			bne 	_FWHExecute
.011a82	68		pla				pla 								; throw away current instruction
.011a83	a9 48 3a	lda #$3a48			lda 	#wendTokenID 				; skip to WEND
.011a86	a2 00 00	ldx #$0000			ldx 	#0
.011a89	20 67 17	jsr $011767			jsr 	ScanForwardLevel 			; scan forward checking structures
.011a8c	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011a8e	e6 06		inc $06				inc 	DCodePtr
.011a90	60		rts				rts
.011a91					_FWHExecute:
.011a91	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011a93	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011a94	3a		dec a				dec 	a
.011a95	3a		dec a				dec 	a
.011a96	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011a98	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011a9a	95 04		sta $04,x			sta 	$04,x
.011a9c	a9 44 3c	lda #$3c44			lda 	#whileTokenID 				; save while token at +6
.011a9f	95 06		sta $06,x			sta 	$06,x
.011aa1	8a		txa				txa 								; advance stack by 6.
.011aa2	18		clc				clc
.011aa3	69 06 00	adc #$0006			adc 	#6
.011aa6	85 2a		sta $2a				sta 	DStack
.011aa8	60		rts				rts
.011aa9					Function_WEND:
.011aa9	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011aab	b5 00		lda $00,x			lda 	$00,x
.011aad	c9 44 3c	cmp #$3c44			cmp 	#whileTokenID
.011ab0	d0 11		bne $011ac3			bne 	_FWEFail
.011ab2	8a		txa				txa 								; unpick stack and always loop back.
.011ab3	38		sec				sec 								; we do the check at the top.
.011ab4	e9 06 00	sbc #$0006			sbc 	#6
.011ab7	85 2a		sta $2a				sta 	DStack
.011ab9	aa		tax				tax
.011aba	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011abc	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011abe	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011ac0	85 22		sta $22				sta 	DLineNumber
.011ac2	60		rts				rts
.011ac3					_FWEFail:
.011ac3	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011ac6	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>011ace	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.011ad9					Function_END:
.011ad9	4c 5f 1e	jmp $011e5f			jmp 	WarmStart
.011adc					Function_RUN:
.011adc	20 67 1b	jsr $011b67			jsr 	Function_CLEAR 				; clear all variables.
.011adf	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011ae1	18		clc				clc
.011ae2	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.011ae5	80 0c		bra $011af3			bra 	FRun_NextLineNumber
.011ae7					RUNExecuteTokenBuffer:
.011ae7	64 22		stz $22				stz 	DLineNumber					; zero line number
.011ae9	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.011aec	18		clc				clc
.011aed	65 02		adc $02				adc 	DBaseAddress
.011aef	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.011af1	80 12		bra $011b05			bra 	FRun_NextInstruction
.011af3					FRun_NextLineNumber:
.011af3	a8		tay				tay 								; put in Y
.011af4	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011af7	f0 e0		beq $011ad9			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011af9	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011afc	85 22		sta $22				sta 	DLineNumber 				; and save it.
.011afe	98		tya				tya 								; get address back
.011aff	18		clc				clc 								; skip over the link/line number
.011b00	69 04 00	adc #$0004			adc 	#4
.011b03	85 06		sta $06				sta 	DCodePtr
.011b05					FRun_NextInstruction:
.011b05	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011b07	20 7d 1d	jsr $011d7d			jsr 	HWCheckBreak 				; break key pressed.
.011b0a	d0 40		bne $011b4c			bne 	_FRun_Break
.011b0c	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011b0e	f0 32		beq $011b42			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011b10	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011b13	f0 18		beq $011b2d			beq 	_FRun_Colon
.011b15	a8		tay				tay 								; save in Y
.011b16	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011b19	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011b1c	d0 15		bne $011b33			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011b1e	98		tya				tya 								; get token back
.011b1f	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011b22	0a		asl a				asl 	a 							; double it into X
.011b23	aa		tax				tax
.011b24	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b26	e6 06		inc $06				inc 	DCodePtr
.011b28	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011b2b	80 d8		bra $011b05			bra 	FRun_NextInstruction 		; do the following instruction.
.011b2d					_FRun_Colon:
.011b2d	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011b2f	e6 06		inc $06				inc 	DCodePtr
.011b31	80 d2		bra $011b05			bra 	FRun_NextInstruction 		; do the following instruction.
.011b33					_FRun_TryLET:
.011b33	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011b35	c9 00 c0	cmp #$c000			cmp 	#$C000
.011b38	90 05		bcc $011b3f			bcc		_FRunSyntax 				; no, must be syntax.
.011b3a	20 67 12	jsr $011267			jsr 	Function_LET 				; try as a LET.
.011b3d	80 c6		bra $011b05			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011b3f					_FRunSyntax:
.011b3f	82 7b ea	brl $0105bd			brl 	SyntaxError
.011b42					_FRun_EndInstruction:
.011b42	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011b44	f0 0f		beq $011b55			beq 	_FRun_WarmStart
.011b46	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011b48	1a		inc a				inc 	a 							; go to link for next line
.011b49	1a		inc a				inc 	a
.011b4a	80 a7		bra $011af3			bra 	FRun_NextLineNumber
.011b4c					_FRun_Break:
.011b4c	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b4f	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011b55					_FRun_WarmStart:
.011b55	82 07 03	brl $011e5f			brl 	WarmStart
.011b58					Function_NEW:
.011b58	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011b5b	18		clc				clc
.011b5c	65 02		adc $02				adc 	DBaseAddress
.011b5e	a8		tay				tay
.011b5f	a9 00 00	lda #$0000			lda 	#$0000
.011b62	99 00 00	sta $0000,y			sta 	$0000,y
.011b65	80 00		bra $011b67			bra 	Function_Clear
.011b67					Function_CLEAR:
.011b67	20 73 1b	jsr $011b73			jsr 	ClearVariablesPointersAndStacks
.011b6a	60		rts				rts
.011b6b					Function_STOP:
.011b6b	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011b6e	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011b73					ClearVariablesPointersAndStacks:
.011b73	a9 80 00	lda #$0080			lda 	#BASStack
.011b76	85 2a		sta $2a				sta 	DStack
.011b78	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011b7a	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011b7d	a9 00 00	lda #$0000			lda 	#$0000
.011b80	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b82	20 ae 1b	jsr $011bae			jsr 	FindCodeEnd 				; find where the program ends.
.011b85	a8		tay				tay 								; Y points to it.
.011b86	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011b89	99 02 00	sta $0002,y			sta 	$0002,y
.011b8c	99 04 00	sta $0004,y			sta 	$0004,y
.011b8f	98		tya				tya 								; start of working memory up
.011b90	18		clc				clc
.011b91	69 06 00	adc #$0006			adc 	#6
.011b94	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011b97	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b99	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.011b9c					_FCLoop:
.011b9c	a9 00 00	lda #$0000			lda 	#$0000
.011b9f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011ba1	c8		iny				iny
.011ba2	c8		iny				iny
.011ba3	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011ba6	d0 f4		bne $011b9c			bne 	_FCLoop
.011ba8	64 16		stz $16				stz 	DTempStringPointer
.011baa	20 61 06	jsr $010661			jsr 	StringResetPermanent
.011bad	60		rts				rts
.011bae					FindCodeEnd:
.011bae	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.011bb1	18		clc				clc
.011bb2	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011bb4	a8		tay				tay
.011bb5					_FCELoop:
.011bb5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011bb8	f0 08		beq $011bc2			beq 	_FCEExit
.011bba	98		tya				tya 								; add offset
.011bbb	18		clc				clc
.011bbc	79 00 00	adc $0000,y			adc 	$0000,y
.011bbf	a8		tay				tay
.011bc0	80 f3		bra $011bb5			bra 	_FCELoop
.011bc2					_FCEExit:
.011bc2	98		tya				tya 								; return in A
.011bc3	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.011bc4					Function_Dim:
.011bc4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011bc6	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011bc9	f0 3b		beq $011c06			beq		_FDIMNotArray 				; no, error.
.011bcb	20 88 03	jsr $010388			jsr 	VariableFind 				; try to find it.
.011bce	b0 41		bcs $011c11			bcs 	_FDIMExists 				; if it does, that's an error.
.011bd0	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.011bd2	48		pha				pha
.011bd3	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011bd5	48		pha				pha
.011bd6					_FDIMSkip:
.011bd6	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011bd8	e6 06		inc $06				inc 	DCodePtr
.011bda	e6 06		inc $06				inc 	DCodePtr
.011bdc	29 00 08	and #$0800			and 	#IDContMask
.011bdf	d0 f5		bne $011bd6			bne 	_FDIMSkip
.011be1	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; evaluate the size
.011be4	20 e7 05	jsr $0105e7			jsr 	ExpectRightBracket 			; check the ) following.
.011be7	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011bea	d0 3b		bne $011c27			bne 	_FDIMSize
.011bec	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011bef	f0 36		beq $011c27			beq 	_FDIMSize
.011bf1	7a		ply				ply 								; restore HashTablePtr
.011bf2	84 20		sty $20				sty 	DHashTablePtr
.011bf4	7a		ply				ply 								; so now A is the high index, Y points to the token
.011bf5	20 32 04	jsr $010432			jsr 	VariableCreate 				; create the variable.
.011bf8	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011bfa	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011bfd	d0 06		bne $011c05			bne 	_FDIMExit
.011bff	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011c01	e6 06		inc $06				inc 	DCodePtr
.011c03	80 bf		bra $011bc4			bra 	Function_DIM 				; and do another
.011c05					_FDIMExit:
.011c05	60		rts				rts
.011c06					_FDIMNotArray:
.011c06	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c09	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011c11					_FDIMExists:
.011c11	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c14	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011c1c	65 64 69 6d 65 6e 73 69 6f 6e 00
.011c27					_FDIMSize:
.011c27	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c2a	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011c32	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011c38					Command_POKE:
.011c38	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c3b	48		pha				pha	 								; save on stack
.011c3c	5a		phy				phy
.011c3d	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c40	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c43	fa		plx				plx 								; pull address and store in DTemp1
.011c44	86 0a		stx $0a				stx 	DTemp1+2
.011c46	fa		plx				plx
.011c47	86 08		stx $08				stx 	DTemp1+0
.011c49	e2 20		sep #$20			sep 	#$20 						; byte mode
.011c4b	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c4d	c2 20		rep #$20			rep 	#$20 						; word mode
.011c4f	60		rts				rts
.011c50					Command_DOKE:
.011c50	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c53	48		pha				pha	 								; save on stack
.011c54	5a		phy				phy
.011c55	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c58	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c5b	fa		plx				plx 								; pull address and store in DTemp1
.011c5c	86 0a		stx $0a				stx 	DTemp1+2
.011c5e	fa		plx				plx
.011c5f	86 08		stx $08				stx 	DTemp1+0
.011c61	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011c63	60		rts				rts
.011c64					Command_LOKE:
.011c64	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; address
.011c67	48		pha				pha	 								; save on stack
.011c68	5a		phy				phy
.011c69	20 f0 05	jsr $0105f0			jsr 	ExpectComma 				; comma seperator.
.011c6c	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; data
.011c6f	fa		plx				plx 								; pull address and store in DTemp1
.011c70	86 0a		stx $0a				stx 	DTemp1+2
.011c72	fa		plx				plx
.011c73	86 08		stx $08				stx 	DTemp1+0
.011c75	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011c77	98		tya				tya
.011c78	a0 02 00	ldy #$0002			ldy 	#2
.011c7b	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011c7d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011c7e					Function_ASSERT:
.011c7e	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; something that returns an integer.
.011c81	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011c83	05 08		ora $08				ora 	Dtemp1
.011c85	f0 01		beq $011c88			beq 	_FAssFail
.011c87	60		rts				rts
.011c88					_FAssFail:
.011c88	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011c8b	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011c93	61 69 6c 65 64 00
.011c99					Function_CLS:
.011c99	20 f7 1c	jsr $011cf7			jsr 	HWClearScreen
.011c9c	60		rts				rts
.011c9d					Function_REM:
.011c9d	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011c9f	f0 0f		beq $011cb0			beq 	_FRemExit 					; no comment present
.011ca1	c9 26 32	cmp #$3226			cmp 	#colonTokenID
.011ca4	f0 0a		beq $011cb0			beq 	_FRemExit 					; no comment present
.011ca6	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011ca9	b0 06		bcs $011cb1			bcs 	_FRemSyntax
.011cab	18		clc				clc 								; add to DCodePtr
.011cac	65 06		adc $06				adc 	DCodePtr
.011cae	85 06		sta $06				sta 	DCodePtr
.011cb0					_FRemExit:
.011cb0	60		rts				rts
.011cb1					_FRemSyntax:
.011cb1	82 09 e9	brl $0105bd			brl 	SyntaxError
.011cb4					Function_LINK:
.011cb4	20 09 03	jsr $010309			jsr 	EvaluateInteger 			; call address same page.
.011cb7	85 08		sta $08				sta 	DTemp1 						; target address
.011cb9	84 0a		sty $0a				sty 	DTemp1+2
.011cbb	7b		tdc				tda 								; work out what the actual address is
.011cbc	18		clc				clc
.011cbd	69 08 00	adc #$0008			adc 	#DTemp1
.011cc0	8f f5 1c 01	sta $011cf5			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011cc4	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011cc6	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011cc9	48		pha				pha
.011cca	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011ccd	aa		tax				tax
.011cce	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011cd1	a8		tay				tay
.011cd2	68		pla				pla
.011cd3	22 f4 1c 01	jsl $011cf4			jsl 	_FLIExecuteIt
.011cd7	5a		phy				phy 								; save Y
.011cd8	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011cda	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011cdd	8a		txa				txa
.011cde	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011ce1	68		pla				pla
.011ce2	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011ce5	c8		iny				iny 								; point to their high bytes and clear them
.011ce6	c8		iny				iny
.011ce7	a9 00 00	lda #$0000			lda 	#0
.011cea	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011ced	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011cf0	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011cf3	60		rts				rts
.011cf4					_FLIExecuteIt:
.011cf4	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011cf7					HWClearScreen:
.011cf7	48		pha				pha
.011cf8	da		phx				phx
.011cf9	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011cfc	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011cff	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d03	ca		dex				dex
.011d04	10 f6		bpl $011cfc			bpl 	_CS0
.011d06	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011d09	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d0d	fa		plx				plx
.011d0e	68		pla				pla
.011d0f	60		rts				rts
.011d10					HWPrintChar:
.011d10	48		pha				pha
.011d11	da		phx				phx
.011d12	5a		phy				phy
.011d13	48		pha				pha 								; cursor position -> X
.011d14	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011d18	aa		tax				tax
.011d19	68		pla				pla
.011d1a	c9 ff ff	cmp #$ffff			cmp 	#-1
.011d1d	f0 08		beq $011d27			beq 	_HWPCNoWrite
.011d1f	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011d21	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d25	c2 20		rep #$20			rep 	#$20
.011d27					_HWPCNoWrite:
.011d27	e8		inx				inx 								; bump cursor position.
.011d28	8a		txa				txa
.011d29	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d2d	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011d30	d0 2b		bne $011d5d			bne 	_HWNotEnd
.011d32	38		sec				sec 	 							; back up one line
.011d33	e9 40 00	sbc #$0040			sbc 	#sWidth
.011d36	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011d3a	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011d3d					_HWScrollUp:
.011d3d	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011d41	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d45	e8		inx				inx
.011d46	e8		inx				inx
.011d47	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d4a	d0 f1		bne $011d3d			bne 	_HWScrollUp
.011d4c	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011d4f					_HWBlank:
.011d4f	a9 20 20	lda #$2020			lda 	#$2020
.011d52	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011d56	e8		inx				inx
.011d57	e8		inx				inx
.011d58	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011d5b	d0 f2		bne $011d4f			bne 	_HWBlank
.011d5d					_HWNotEnd:
.011d5d	7a		ply				ply
.011d5e	fa		plx				plx
.011d5f	68		pla				pla
.011d60	60		rts				rts
.011d61					HWNewLine:
.011d61	48		pha				pha
.011d62	da		phx				phx
.011d63	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011d66					HWMoveCursor:
.011d66	a9 ff ff	lda #$ffff			lda 	#-1
.011d69	20 10 1d	jsr $011d10			jsr 	HWPrintChar
.011d6c	8a		txa				txa
.011d6d	2f 20 80 0f	and $0f8020			and 	HWCursor
.011d71	d0 f3		bne $011d66			bne 	HWMoveCursor
.011d73	fa		plx				plx
.011d74	68		pla				pla
.011d75	60		rts				rts
.011d76	48		pha		HWTab:	pha
.011d77	da		phx				phx
.011d78	a2 07 00	ldx #$0007			ldx 	#7
.011d7b	80 e9		bra $011d66			bra 	HWMoveCursor
.011d7d					HWCheckBreak:
.011d7d	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011d81	60		rts				rts
.011d82					HWInkey:
.011d82	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011d86	60		rts				rts
.011d87					HWInputLine:
.011d87	20 82 1d	jsr $011d82			jsr 	HWInkey 					; get a keystroke.
.011d8a	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011d8e	f0 f7		beq $011d87			beq 	HWInputLine
.011d90					_HWILWait:
.011d90	20 82 1d	jsr $011d82			jsr 	HWInkey
.011d93	c9 00 00	cmp #$0000			cmp		#0
.011d96	f0 f8		beq $011d90			beq 	_HWILWait
.011d98	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011d9c	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011d9f	90 2f		bcc $011dd0			bcc 	_HWILControl
.011da1	20 10 1d	jsr $011d10			jsr 	HWPrintChar 				; print out.
.011da4	80 e1		bra $011d87			bra 	HWInputLine 				; loop back.
.011da6					_HWILBackSpace:
.011da6	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011daa	f0 db		beq $011d87			beq 	HWInputLine
.011dac	aa		tax				tax
.011dad	ca		dex				dex
.011dae	a9 20 00	lda #$0020			lda 	#" "
.011db1	e2 20		sep #$20			sep 	#$20
.011db3	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011db7	c2 20		rep #$20			rep 	#$20
.011db9	a2 ff ff	ldx #$ffff			ldx 	#-1
.011dbc					_HWILMove:
.011dbc	8a		txa				txa
.011dbd	18		clc				clc
.011dbe	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011dc2	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011dc5	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011dc9	80 bc		bra $011d87			bra 	HWInputLine
.011dcb					_HWILClear:
.011dcb	20 f7 1c	jsr $011cf7			jsr 	HWClearScreen
.011dce	80 b7		bra $011d87			bra 	HWInputLine
.011dd0					_HWILControl:
.011dd0	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011dd3	f0 60		beq $011e35			beq 	_HWILTab
.011dd5	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011dd8	f0 cc		beq $011da6			beq 	_HWILBackSpace
.011dda	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011ddd	c9 17 00	cmp #$0017			cmp 	#23
.011de0	f0 da		beq $011dbc			beq 	_HWILMove
.011de2	a2 40 00	ldx #$0040			ldx 	#sWidth
.011de5	c9 13 00	cmp #$0013			cmp 	#19
.011de8	f0 d2		beq $011dbc			beq 	_HWILMove
.011dea	a2 ff ff	ldx #$ffff			ldx 	#-1
.011ded	c9 01 00	cmp #$0001			cmp 	#1
.011df0	f0 ca		beq $011dbc			beq 	_HWILMove
.011df2	a2 01 00	ldx #$0001			ldx 	#1
.011df5	c9 04 00	cmp #$0004			cmp 	#4
.011df8	f0 c2		beq $011dbc			beq 	_HWILMove
.011dfa	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011dfd	f0 cc		beq $011dcb			beq 	_HWILClear
.011dff	c9 0d 00	cmp #$000d			cmp 	#13
.011e02	d0 83		bne $011d87			bne 	HWInputLine
.011e04	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011e08	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011e0b	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011e0d	a9 0f 00	lda #$000f			lda 	#$000F
.011e10	85 0a		sta $0a				sta 	DTemp1+2
.011e12	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011e15					_HWILCopy:
.011e15	bb		tyx				tyx
.011e16	b7 08		lda [$08],y			lda 	[DTemp1],y
.011e18	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011e1c	c8		iny				iny
.011e1d	c8		iny				iny
.011e1e	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011e21	d0 f2		bne $011e15			bne 	_HWILCopy
.011e23	a9 00 00	lda #$0000			lda 	#0
.011e26	bb		tyx				tyx
.011e27	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011e2b	20 61 1d	jsr $011d61			jsr 	HWNewLine 					; next line.
.011e2e	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011e31	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011e34	60		rts				rts
.011e35					_HWILTab:
.011e35	20 76 1d	jsr $011d76			jsr 	HWTab
.011e38	82 4c ff	brl $011d87			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011e3b					SwitchBasicInstance:
.011e3b	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011e3d	20 f7 1c	jsr $011cf7			jsr 	HWClearScreen 						; clear screen
.011e40	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011e43	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011e45	86 02		stx $02				stx		DBaseAddress
.011e47	84 04		sty $04				sty 	DHighAddress
.011e49	ba		tsx				tsx 										; save the current SP.
.011e4a	86 3a		stx $3a				stx 	DStack65816
.011e4c	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011e4d	48		pha				pha 										; then copy it into B.
.011e4e	ab		plb				plb
.011e4f	ab		plb				plb
.011e50	20 73 1b	jsr $011b73			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e53	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011e56	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e58	f0 05		beq $011e5f			beq 	WarmStart
.011e5a	3a		dec a				dec 	a 									; decrement zero.
.011e5b	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011e5d	80 18		bra $011e77			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011e5f					WarmStart:
.011e5f	a2 c5 1e	ldx #$1ec5			ldx 	#BasicPrompt & $FFFF
.011e62	20 29 06	jsr $010629			jsr 	PrintROMMessage
.011e65					NextCommand:
.011e65	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011e67	9a		txs				txs
.011e68	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011e6a	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011e6d	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011e6f	d0 52		bne $011ec3			bne 	ExitEmulator
.011e71	20 87 1d	jsr $011d87			jsr 	HWInputLine 						; read line to YA.
.011e74	20 8f 07	jsr $01078f			jsr 	Tokenise 							; tokenise it.
.011e77					ExecuteTokenBuffer:
.011e77	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011e7a	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011e7c	f0 e7		beq $011e65			beq 	NextCommand 						; nothing.
.011e7e	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011e81	90 27		bcc $011eaa			bcc 	_ETBCommand
.011e83	c9 00 c0	cmp #$c000			cmp 	#$C000
.011e86	b0 22		bcs $011eaa			bcs 	_ETBCommand
.011e88	38		sec				sec
.011e89	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011e8c	f0 1f		beq $011ead			beq 	_ETBError
.011e8e	48		pha				pha
.011e8f	20 c2 04	jsr $0104c2			jsr 	LineDelete 							; delete the line, if it exists.
.011e92	20 73 1b	jsr $011b73			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011e95	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011e98	18		clc				clc
.011e99	65 02		adc $02				adc 	DBaseAddress
.011e9b	a8		tay				tay 										; Y contains the code.
.011e9c	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011e9f	f0 c4		beq $011e65			beq 	NextCommand 						; no, next command.
.011ea1	68		pla				pla 										; line number in A, code in Y.
.011ea2	20 fd 04	jsr $0104fd			jsr 	LineInsert 							; insert the line
.011ea5	20 73 1b	jsr $011b73			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011ea8	80 bb		bra $011e65			bra 	NextCommand
.011eaa					_ETBCommand:
.011eaa	4c e7 1a	jmp $011ae7			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011ead					_ETBError:
.011ead	20 81 05	jsr $010581			jsr 	ErrorHandler 						; call error routine
>011eb0	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011eb8	61 76 65 20 6c 69 6e 65 20 30 00
.011ec3					ExitEmulator:
.011ec3	02 00		cop #$00			cop 	#0
.011ec5					BasicPrompt:
>011ec5	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 8f 07	jsr $01078f			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	5c 44 00 c0 00 00 01 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 30 3e 00 00 00 00 00 00
>024108	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 64 00 2c 3e 0a 00
>024208	06 42 6f 6d 62 65 72 00 00 00 12 00 69 00 01 e0
>024218	06 22 08 00 05 4f 75 74 65 72 00 00 0c 00 6a 00
>024228	04 c5 06 22 2a 40 00 00 0e 00 6b 00 1a c0 06 22
>024238	0b 24 01 40 00 00 2a 00 53 04 35 3e 16 00 12 53
>024248	68 6f 75 6c 64 20 62 65 20 6f 75 74 65 72 20 3a
>024258	20 00 25 32 01 e0 24 32 04 c5 24 32 1a c0 00 00
>024268	1c 00 56 04 41 3e 97 cb 2b cb 14 c0 26 32 35 3e
>024278	0a 00 07 57 6f 72 6b 65 64 21 00 00 2a 00 58 04
>024288	35 3e 16 00 12 53 68 6f 75 6c 64 20 62 65 20 6f
>024298	75 74 65 72 20 3a 20 00 25 32 01 e0 24 32 04 c5
>0242a8	24 32 1a c0 00 00 1c 00 5a 04 41 3e 97 cb 2b cb
>0242b8	14 c0 26 32 35 3e 0a 00 07 57 6f 72 6b 65 64 21
>0242c8	00 00 2a 00 5c 04 35 3e 16 00 12 53 68 6f 75 6c
>0242d8	64 20 62 65 20 6f 75 74 65 72 20 3a 20 00 25 32
>0242e8	01 e0 24 32 04 c5 24 32 1a c0 00 00 0e 00 5d 04
>0242f8	03 e0 06 22 04 00 01 21 00 00 08 00 60 04 2f 3e
>024308	00 00 0e 00 f8 2a 47 3c 97 cb 2b cb 14 c0 00 00
>024318	12 00 f9 2a 42 3e 01 e0 24 32 04 c5 24 32 1a c0
>024328	00 00 18 00 fa 2a 35 3e 0c 00 08 49 6e 20 73 74
>024338	61 72 74 00 24 32 01 e0 00 00 24 00 fc 2a 01 e0
>024348	06 22 08 00 05 49 6e 6e 65 72 26 32 04 c5 06 22
>024358	63 40 26 32 1a c0 06 22 0b 24 01 40 00 00 2a 00
>024368	fd 2a 35 3e 16 00 13 09 53 68 6f 75 6c 64 20 62
>024378	65 20 69 6e 6e 65 72 20 3a 20 25 32 01 e0 24 32
>024388	04 c5 24 32 1a c0 00 00 12 00 00 2b 41 3e c4 cb
>024398	4b ca 89 cb ab ca 04 c0 00 00 2a 00 01 2b 35 3e
>0243a8	16 00 13 09 53 68 6f 75 6c 64 20 62 65 20 69 6e
>0243b8	6e 65 72 20 3a 20 25 32 01 e0 24 32 04 c5 24 32
>0243c8	1a c0 00 00 08 00 20 2b 4d 3a 00 00 12 00 5c 2b
>0243d8	47 3c c4 cb 4b ca 89 cb ab ca 04 c0 00 00 20 00
>0243e8	61 2b 42 3e 01 e0 26 32 01 e0 06 22 10 00 0c 72
>0243f8	65 61 6c 6c 79 20 69 6e 6e 65 72 00 00 00 26 00
>024408	66 2b 35 3e 12 00 0f 20 20 20 09 09 73 75 62 20
>024418	6d 65 74 68 6f 64 24 32 01 e0 24 32 04 c5 24 32
>024428	1a c0 00 00 08 00 70 2b 4d 3a 00 00 10 00 e0 2e
>024438	47 3c e5 d8 b0 d2 0e c0 28 32 00 00 0a 00 ea 2e
>024448	35 3e 0e c0 00 00 08 00 f4 2e 4d 3a 00 00 00 00
>024458	ee ee ee ee 00 00 00 00 00 00 00 00 00 00 00 00
>024468	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1976 times (31616 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
