
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Thu Jun 13 13:47:25 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 f0 ff	ldx #$fff0			ldx 	#$FFF0 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c f5 0d 01	jmp $010df5			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	bc 03					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	8f 05					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	9f 05					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	af 05					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	f3 05					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	5a 06					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	bf 05					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	3c 06					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	1e 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	d9 05					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	d9 04					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	5a 05					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	66 07					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	e3 06					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	5a 07					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	6b 05					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	7d 05					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	f4 07					.word Function_Random          & $FFFF ; token $3011 "rnd()"
>010024	d4 07					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	b0 07					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	9a 07					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	2b 08					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	80 09					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	bc 03					.word IllegalToken             & $FFFF ; token $3217 ","
>010030	bc 03					.word IllegalToken             & $FFFF ; token $3218 ";"
>010032	bc 03					.word IllegalToken             & $FFFF ; token $3219 ":"
>010034	bc 03					.word IllegalToken             & $FFFF ; token $321a "("
>010036	bc 03					.word IllegalToken             & $FFFF ; token $321b ")"
>010038	bc 03					.word IllegalToken             & $FFFF ; token $321c "'"
>01003a	e2 0d					.word Function_REM             & $FFFF ; token $3e1d "rem"
>01003c	3c 0a					.word Function_Let             & $FFFF ; token $3e1e "let"
>01003e	c3 0d					.word Function_ASSERT          & $FFFF ; token $3e1f "assert"
>010040	0e 0c					.word Function_END             & $FFFF ; token $3e20 "end"
>010042	10 0c					.word Function_RUN             & $FFFF ; token $3e21 "run"
>010044	68 0c					.word Function_CLEAR           & $FFFF ; token $3e22 "clear"
>010046	bf 0c					.word Function_Dim             & $FFFF ; token $3e23 "dim"
>010048	33 0d					.word Function_COLLECT         & $FFFF ; token $3e24 "collect"
>01004a	de 0d					.word Function_CLS             & $FFFF ; token $3e25 "cls"
>01004c	b7 0a					.word Function_PRINT           & $FFFF ; token $3e26 "print"
>01004e	03 0b					.word Function_GOTO            & $FFFF ; token $3e27 "goto"
>010050	62 0b					.word Function_GOSUB           & $FFFF ; token $3e28 "gosub"
>010052	7e 0b					.word Function_RETURN          & $FFFF ; token $3e29 "return"
>010054	bc 03					.word IllegalToken             & $FFFF ; token $3e2a "on"
>010056	b0 0b					.word Function_REPEAT          & $FFFF ; token $3c2b "repeat"
>010058	c7 0b					.word Function_UNTIL           & $FFFF ; token $3a2c "until"
.01005a					TokenText:
>01005a	02 26					 .text $02,"&"        ; token $2001
>01005c	02 7c					 .text $02,"|"        ; token $2002
>01005e	02 5e					 .text $02,"^"        ; token $2003
>010060	12 3c					 .text $12,"<"        ; token $2204
>010062	12 3e					 .text $12,">"        ; token $2205
>010064	12 3d					 .text $12,"="        ; token $2206
>010066	13 3c 3d				 .text $13,"<="       ; token $2207
>010069	13 3e 3d				 .text $13,">="       ; token $2208
>01006c	13 3c 3e				 .text $13,"<>"       ; token $2209
>01006f	22 2b					 .text $22,"+"        ; token $240a
>010071	22 2d					 .text $22,"-"        ; token $240b
>010073	32 2a					 .text $32,"*"        ; token $260c
>010075	32 2f					 .text $32,"/"        ; token $260d
>010077	32 25					 .text $32,"%"        ; token $260e
>010079	33 3e 3e				 .text $33,">>"       ; token $260f
>01007c	33 3c 3c				 .text $33,"<<"       ; token $2610
>01007f	86 72 6e 64 28 29			 .text $86,"rnd()"    ; token $3011
>010085	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>01008a	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>01008f	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>010094	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>010099	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>01009f	92 2c					 .text $92,","        ; token $3217
>0100a1	92 3b					 .text $92,";"        ; token $3218
>0100a3	92 3a					 .text $92,":"        ; token $3219
>0100a5	92 28					 .text $92,"("        ; token $321a
>0100a7	92 29					 .text $92,")"        ; token $321b
>0100a9	92 27					 .text $92,"'"        ; token $321c
>0100ab	f4 72 65 6d				 .text $f4,"rem"      ; token $3e1d
>0100af	f4 6c 65 74				 .text $f4,"let"      ; token $3e1e
>0100b3	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e1f
>0100ba	f4 65 6e 64				 .text $f4,"end"      ; token $3e20
>0100be	f4 72 75 6e				 .text $f4,"run"      ; token $3e21
>0100c2	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e22
>0100c8	f4 64 69 6d				 .text $f4,"dim"      ; token $3e23
>0100cc	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e24
>0100d4	f4 63 6c 73				 .text $f4,"cls"      ; token $3e25
>0100d8	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e26
>0100de	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e27
>0100e3	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e28
>0100e9	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e29
>0100f0	f3 6f 6e				 .text $f3,"on"       ; token $3e2a
>0100f3	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c2b
>0100fa	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a2c
>010100	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenrparenTokenID           = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3217					commaTokenID                     = $3217
=$3218					semicolonTokenID                 = $3218
=$3219					colonTokenID                     = $3219
=$321a					lparenTokenID                    = $321a
=$321b					rparenTokenID                    = $321b
=$321c					squoteTokenID                    = $321c
=$3e1d					remTokenID                       = $3e1d
=$3e1e					letTokenID                       = $3e1e
=$3e1f					assertTokenID                    = $3e1f
=$3e20					endTokenID                       = $3e20
=$3e21					runTokenID                       = $3e21
=$3e22					clearTokenID                     = $3e22
=$3e23					dimTokenID                       = $3e23
=$3e24					collectTokenID                   = $3e24
=$3e25					clsTokenID                       = $3e25
=$3e26					printTokenID                     = $3e26
=$3e27					gotoTokenID                      = $3e27
=$3e28					gosubTokenID                     = $3e28
=$3e29					returnTokenID                    = $3e29
=$3e2a					onTokenID                        = $3e2a
=$3c2b					repeatTokenID                    = $3c2b
=$3a2c					untilTokenID                     = $3a2c

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.010101					Evaluate:
.010101	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.010104	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.010107					EvaluateLevel:
.010107	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit.
.01010a	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.01010c	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01010e	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.010111	b0 79		bcs $01018c			bcs 	_ELVariable
.010113	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.010116	b0 16		bcs $01012e			bcs 	_ELConstant
.010118	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.01011b	90 7f		bcc $01019c			bcc 	_ELStringConstant
.01011d	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010120	90 03		bcc $010125			bcc 	_ELConstantShift
.010122	82 94 00	brl $0101b9			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010125					_ELConstantShift:
.010125	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010128	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01012a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01012c	e6 06		inc $06				inc 	DCodePtr
.01012e					_ELConstant:
.01012e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010130	38		sec				sec  								; shift it in the range 0-32767
.010131	e9 00 40	sbc #$4000			sbc 	#$4000
.010134	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010135	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010137	6a		ror a				ror 	a 							; rotate that into the constant value
.010138	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01013a	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01013c	95 10		sta $10,x			sta 	EXSValueH+0,x
.01013e	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010140	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010142	e6 06		inc $06				inc 	DCodePtr
.010144					_ELGotAtom:
.010144	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010146	a8		tay				tay 								; save in Y
.010147	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01014a	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01014d	d0 35		bne $010184			bne 	_ELExit
.01014f	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010151	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010154	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010156	98		tya				tya 								; get the keyword token back
.010157	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01015a	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence.
.01015c	90 26		bcc $010184			bcc 	_ELExit 					; precedence too low, then exit.
.01015e	5a		phy				phy 								; save the binary operator on the stack
.01015f	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010161	e6 06		inc $06				inc 	DCodePtr
.010163	18		clc				clc 								; try the next level up
.010164	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010167	e8		inx				inx 								; calculate the RHS at the next stack level.
.010168	e8		inx				inx
.010169	20 07 01	jsr $010107			jsr 	EvaluateLevel
.01016c	ca		dex				dex
.01016d	ca		dex				dex
.01016e	7a		ply				ply 								; get operator token back into Y
.01016f					_ELExecuteY:
.01016f	98		tya				tya
.010170	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010173	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010174	9b		txy				txy 								; save X in Y
.010175	aa		tax				tax 								; double keyword ID in X
.010176	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01017a	bb		tyx				tyx 								; restore X.
.01017b	8f 80 01 01	sta $010180			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01017f					_ELCallRoutine:
.01017f	20 7f 01	jsr $01017f			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010182	80 c0		bra $010144			bra 	_ELGotAtom 					; go round operator level again.
.010184	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010186	0a		asl a				asl 	a
.010187	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010189	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.01018b	60		rts				rts
.01018c					_ELVariable:
.01018c	16 20		asl $20,x			asl 	EXSPrecType+0,x
.01018e	20 4d 02	jsr $01024d			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010191	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010193	94 10		sty $10,x			sty 	EXSValueH+0,x
.010195	76 20		ror $20,x			ror 	EXSPrecType+0,x
.010197	80 ab		bra $010144			bra 	_ELGotAtom
.010199					_ELSyntax
.010199	82 31 02	brl $0103cd			brl 	SyntaxError
.01019c					_ELStringConstant:
.01019c	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01019f	f0 f8		beq $010199			beq 	_ELSyntax
.0101a1	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.0101a3	1a		inc a				inc 	a
.0101a4	1a		inc a				inc 	a
.0101a5	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.0101a7	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.0101a9	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.0101ab	18		clc				clc 								; add to string constant.
.0101ac	65 06		adc $06				adc 	DCodePtr
.0101ae	85 06		sta $06				sta 	DCodePtr
.0101b0	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.0101b2	09 00 80	ora #$8000			ora 	#$8000
.0101b5	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0101b7	80 8b		bra $010144			bra 	_ELGotAtom
.0101b9					_ELUnaryKeyword:
.0101b9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101bb	a8		tay				tay 								; put the token in Y.
.0101bc	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.0101be	e6 06		inc $06				inc 	DCodePtr
.0101c0	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0101c3	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0101c6	f0 a7		beq $01016f			beq 	_ELExecuteY					; go back and execute it
.0101c8	c0 1a 32	cpy #$321a			cpy 	#lparenTokenID 				; is it an open bracket ?
.0101cb	d0 11		bne $0101de			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0101cd	20 04 02	jsr $010204			jsr 	EvaluateNext 				; evaluate the expression
.0101d0	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; consume the right bracket.
.0101d3					_ELCopy:
.0101d3	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0101d5	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101d7	b5 12		lda $12,x			lda 	EXSValueH+2,x
.0101d9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101db	82 66 ff	brl $010144			brl 	_ELGotAtom 					; and continue.
.0101de					_ELUnaryOperator:
.0101de	5a		phy				phy 								; save the operator on the stack.
.0101df	e8		inx				inx 								; this is like evaluate next
.0101e0	e8		inx				inx
.0101e1	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0101e4	20 07 01	jsr $010107			jsr 	EvaluateLevel
.0101e7	ca		dex				dex 								; unwind the stack.
.0101e8	ca		dex				dex
.0101e9	68		pla				pla 								; restore the unary operator.
.0101ea	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0101ed	f0 03		beq $0101f2			beq 	_ELMinus
.0101ef	4c cd 03	jmp $0103cd			jmp 	SyntaxError
.0101f2					_ELMinus:
.0101f2	38		sec				sec 								; do the negation calculation.
.0101f3	a9 00 00	lda #$0000			lda 	#0
.0101f6	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0101f8	95 00		sta $00,x			sta 	EXSValueL+0,x
.0101fa	a9 00 00	lda #$0000			lda 	#0
.0101fd	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0101ff	95 10		sta $10,x			sta 	EXSValueH+0,x
.010201	82 40 ff	brl $010144			brl 	_ELGotAtom					; and continue.
.010204					EvaluateNext:
.010204	e8		inx				inx
.010205	e8		inx				inx
.010206	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.010209	20 07 01	jsr $010107			jsr 	EvaluateLevel
.01020c	ca		dex				dex
.01020d	ca		dex				dex
.01020e	60		rts				rts
.01020f					EvaluateInteger:
.01020f	20 01 01	jsr $010101			jsr 	Evaluate
.010212	b0 01		bcs $010215			bcs 	EIType
.010214	60		rts				rts
.010215					EIType:
.010215	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010218	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010220	78 70 65 63 74 65 64 00
.010228					EvaluateNextInteger:
.010228	20 04 02	jsr $010204			jsr 	EvaluateNext
.01022b	b0 e8		bcs $010215			bcs 	EIType
.01022d	60		rts				rts
.01022e					EvaluateString:
.01022e	20 01 01	jsr $010101			jsr 	Evaluate
.010231	90 01		bcc $010234			bcc 	ESType
.010233	60		rts				rts
.010234					ESType:
.010234	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010237	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>01023f	78 70 65 63 74 65 64 00
.010247					EvaluateNextString:
.010247	20 04 02	jsr $010204			jsr 	EvaluateNext
.01024a	90 e8		bcc $010234			bcc 	ESType
.01024c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01024d					VariableAccessExpression:
.01024d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01024f	48		pha				pha
.010250	20 8e 02	jsr $01028e			jsr 	VariableFind 				; try to find the variables
.010253	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010255	90 23		bcc $01027a			bcc 	_VANError
.010257	68		pla				pla 								; get and save that first token
.010258	48		pha				pha
.010259	a8		tay				tay 								; put first token in Y.
.01025a	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01025d	f0 07		beq $010266			beq 	_VANNotArray
.01025f	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010261	20 05 03	jsr $010305			jsr 	VariableSubscript			; index calculation
.010264	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010266					_VANNotArray:
.010266	68		pla				pla 								; get the token back.
.010267	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01026a	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01026d	38		sec				sec 								; set up return string.
.01026e	f0 06		beq $010276			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with CS
.010270	18		clc				clc 								; returning a number, read high data word
.010271	a0 02 00	ldy #$0002			ldy 	#2
.010274	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010276					_VANLoadLower:
.010276	a8		tay				tay 								; put A into Y (this is the high byte)
.010277	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010279	60		rts				rts
.01027a					_VANError:
.01027a	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>01027d	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010285	20 75 6e 6b 6e 6f 77 6e 00
.01028e					VariableFind:
.01028e	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010290	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010293	90 5c		bcc $0102f1			bcc 	_VFError
.010295	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010298	b0 11		bcs $0102ab			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01029a	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01029d	3a		dec a				dec 	a 							; now 0-25
.01029e	0a		asl a				asl 	a 							; x 4 and clear carry
.01029f	0a		asl a				asl 	a
.0102a0	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.0102a3	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0102a5	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0102a7	e6 06		inc $06				inc 	DCodePtr
.0102a9	38		sec				sec 								; return with carry set.
.0102aa	60		rts				rts
.0102ab					_VFSlowVariable:
.0102ab	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.0102ad	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --xx ---- ---- ----
.0102b0	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.0102b1	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.0102b2	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.0102b5	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.0102b7	85 08		sta $08				sta 	DTemp1
.0102b9	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.0102bb	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.0102be	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0102bf	65 08		adc $08				adc 	DTemp1
.0102c1	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0102c3	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0102c5					_VFNext:
.0102c5	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0102c7	f0 26		beq $0102ef			beq 	_VFFail 					; if zero, then it's the end of the list.
.0102c9	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0102cb	a8		tay				tay 								; read the address of the name at $0002,y
.0102cc	b9 02 00	lda $0002,y			lda 	$0002,y
.0102cf	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0102d1	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0102d4					_VFCompare:
.0102d4	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0102d6	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0102d8	d0 eb		bne $0102c5			bne 	_VFNext 					; if not, go to the next one.
.0102da	c8		iny				iny 								; advance token pointer
.0102db	c8		iny				iny
.0102dc	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going
.0102df	d0 f3		bne $0102d4			bne 	_VFCompare
.0102e1	98		tya				tya 								; this is the length of the word.
.0102e2	18		clc				clc 								; so we add it to the code pointer
.0102e3	65 06		adc $06				adc 	DCodePtr
.0102e5	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0102e7	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0102e9	18		clc				clc 								; four on is the actual data
.0102ea	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0102ed	38		sec				sec 								; return with CS indicating success
.0102ee	60		rts				rts
.0102ef					_VFFail:
.0102ef	18		clc				clc
.0102f0	60		rts				rts
.0102f1					_VFError:
.0102f1	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0102f4	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0102fc	76 61 72 69 61 62 6c 65 00
.010305					VariableSubscript:
.010305	48		pha				pha		 							; save variable address on stack.
.010306	20 28 02	jsr $010228			jsr		EvaluateNextInteger 		; get the subscript
.010309	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; skip right bracket.
.01030c	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.01030f	d0 10		bne $010321			bne 	_VANSubscript
.010311	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.010313	f0 02		beq $010317			beq 	_VANSubOkay 				; fail if subscript > high subscript
.010315	b0 0a		bcs $010321			bcs 	_VANSubscript
.010317					_VANSubOkay:
.010317	0a		asl a				asl 	a 							; double lsword
.010318	0a		asl a				asl 	a 							; and again, also clears carry.
.010319	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.01031b	68		pla				pla 								; restore DVariablePtr
.01031c	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.01031d	1a		inc a				inc 	a
.01031e	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010320	60		rts				rts
.010321					_VANSubscript:
.010321	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010324	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>01032c	79 20 53 75 62 73 63 72 69 70 74 00
.010338					VariableCreate:
.010338	48		pha				pha 								; save count.
.010339	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01033c	29 00 20	and #$2000			and 	#IDTypeMask
.01033f	f0 06		beq $010347			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010341	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010344	18		clc				clc
.010345	65 02		adc $02				adc 	DBaseAddress
.010347					_VCIsInteger:
.010347	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010349	68		pla				pla 								; restore count
.01034a	48		pha				pha
.01034b	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01034c	0a		asl a				asl 	a 							; 2 x # items.
.01034d	0a		asl a				asl 	a 							; 4 x # items.
.01034e					_VCNotSingle:
.01034e	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010350	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010353	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010356	f0 04		beq $01035c			beq 	_VCNotArray
.010358	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count.
.01035a	e6 08		inc $08				inc 	DTemp1
.01035c					_VCNotArray:
.01035c	5a		phy				phy 								; save address of token on stack.
.01035d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010360	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; save that on stack.
.010362	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010364	18		clc				clc 								; add 4 for link and name.
.010365	69 04 00	adc #$0004			adc 	#4
.010368	65 08		adc $08				adc 	DTemp1 						; add memory required
.01036a	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01036c	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01036e					_VCErase:
.01036e	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010370	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010373	c8		iny				iny
.010374	c8		iny				iny
.010375	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010377	c6 08		dec $08				dec 	DTemp1 						; this is the count of the data beyond link/name.
.010379	d0 f3		bne $01036e			bne 	_VCErase
.01037b	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01037d	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01037f	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010382	68		pla				pla 								; restore the token address
.010383	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010386	68		pla				pla 								; restore count and store.
.010387	99 04 00	sta $0004,y			sta 	$0004,y
.01038a					_VCNotArray2:
.01038a	98		tya				tya 								; update the head link
.01038b	92 20		sta ($20)			sta 	(DHashTablePtr)
.01038d	18		clc				clc 								; advance pointer to the data bit.
.01038e	69 04 00	adc #$0004			adc 	#4
.010391	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.010392					ErrorHandler:
.010392	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010394	fa		plx				plx 								; address of error message -1
.010395	e8		inx				inx 								; error message.
.010396	20 39 04	jsr $010439			jsr 	PrintROMMessage 			; print message in ROM
.010399	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01039b	f0 15		beq $0103b2			beq 	_EHEndMessage
.01039d	a2 b7 03	ldx #$03b7			ldx 	#_EHAt & $FFFF 				; print " at "
.0103a0	20 39 04	jsr $010439			jsr 	PrintROMMessage
.0103a3	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.0103a5	a0 00 00	ldy #$0000			ldy 	#0
.0103a8	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.0103ab	20 9b 09	jsr $01099b			jsr 	ConvertToString 			; convert and print it.
.0103ae	a8		tay				tay
.0103af	20 4d 04	jsr $01044d			jsr 	PrintBASICString
.0103b2					_EHEndMessage:
.0103b2	20 47 0e	jsr $010e47			jsr 	HWNewLine
.0103b5	80 fe		bra $0103b5	_EH1:	bra 	_EH1
>0103b7	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.0103bc					IllegalToken:
.0103bc	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0103bf	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>0103c7	54 6f 6b 65 6e 00
.0103cd					SyntaxError:
.0103cd	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0103d0	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0103d8	72 72 6f 72 00
.0103dd					ExpectToken:
.0103dd	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0103df	d0 05		bne $0103e6			bne 	_CTKError					; error if not
.0103e1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0103e3	e6 06		inc $06				inc 	DCodePtr
.0103e5	60		rts				rts
.0103e6					_CTKError:
.0103e6	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0103e9	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0103f1	74 6f 6b 65 6e 00
.0103f7					ExpectRightBracket:
.0103f7	48		pha				pha
.0103f8	a9 1b 32	lda #$321b			lda 	#rparenTokenID
.0103fb	20 dd 03	jsr $0103dd			jsr 	ExpectToken
.0103fe	68		pla				pla
.0103ff	60		rts				rts
.010400					ExpectComma:
.010400	48		pha				pha
.010401	a9 17 32	lda #$3217			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.010404	20 dd 03	jsr $0103dd			jsr 	ExpectToken
.010407	68		pla				pla
.010408	60		rts				rts
.010409					CheckBothNumeric:
.010409	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.01040b	15 22		ora $22,x			ora 	EXSPrecType+2,x
.01040d	30 01		bmi $010410			bmi 	_CBNFail 					; need to both be zero in bit 15
.01040f	60		rts				rts
.010410					_CBNFail:
.010410	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010413	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>01041b	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.010429					ResetTypeInteger:
.010429	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.01042b	29 ff 7f	and #$7fff			and 	#$7FFF
.01042e	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010430	60		rts				rts
.010431					ResetTypeString:
.010431	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010433	09 00 80	ora #$8000			ora 	#$8000
.010436	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010438	60		rts				rts
.010439					PrintROMMessage:
.010439	48		pha				pha
.01043a	da		phx				phx
.01043b					_PRMLoop:
.01043b	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.01043f	29 ff 00	and #$00ff			and 	#$00FF
.010442	f0 06		beq $01044a			beq 	_PRMExit
.010444	20 25 0e	jsr $010e25			jsr 	HWPrintChar
.010447	e8		inx				inx
.010448	80 f1		bra $01043b			bra 	_PRMLoop
.01044a					_PRMExit:
.01044a	fa		plx				plx
.01044b	68		pla				pla
.01044c	60		rts				rts
.01044d					PrintBASICString:
.01044d	48		pha				pha
.01044e	da		phx				phx
.01044f	5a		phy				phy
.010450	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010453	29 ff 00	and #$00ff			and 	#$00FF
.010456	f0 0b		beq $010463			beq 	_PBSExit 					; null string
.010458	aa		tax				tax
.010459					_PBSLoop:
.010459	c8		iny				iny
.01045a	b9 00 00	lda $0000,y			lda 	$0000,y
.01045d	20 25 0e	jsr $010e25			jsr 	HWPrintChar
.010460	ca		dex				dex
.010461	d0 f6		bne $010459			bne 	_PBSLoop
.010463					_PBSExit:
.010463	7a		ply				ply
.010464	fa		plx				plx
.010465	68		pla				pla
.010466	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010467					StringTempAllocate:
.010467	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01046a	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01046d	18		clc				clc 								; this adds one, for the length.
.01046e	65 16		adc $16				adc 	DTempStringPointer
.010470	85 16		sta $16				sta 	DTempStringPointer
.010472	48		pha				pha
.010473	a9 00 00	lda #$0000			lda 	#$0000
.010476	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010478	92 16		sta ($16)			sta		(DTempStringPointer)
.01047a	c2 20		rep #$20			rep 	#$20
.01047c	68		pla				pla
.01047d	85 18		sta $18				sta 	DStartTempString 			; start of temporary string.
.01047f	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010481	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010483	60		rts				rts
.010484					StringCreateCopy:
.010484	a8		tay				tay 								; put pointer to string in Y
.010485	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010488	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01048b	f0 17		beq $0104a4			beq 	_SCCExit 					; do nothing if length zero.
.01048d	da		phx				phx 								; save X and put the character count in X
.01048e	aa		tax				tax
.01048f					_SCCCopy:
.01048f	c8		iny				iny 								; advance and read (first time skips length)
.010490	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010492	b9 00 00	lda $0000,y			lda 	$0000,y
.010495	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010497	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010499	1a		inc a				inc 	a
.01049a	92 18		sta ($18)			sta 	(DStartTempString)
.01049c	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01049e	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.0104a0	ca		dex				dex 								; do X times
.0104a1	d0 ec		bne $01048f			bne 	_SCCCopy
.0104a3	fa		plx				plx
.0104a4					_SCCExit:
.0104a4	60		rts				rts
.0104a5					StringMakeConcrete:
.0104a5	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0104a8	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0104aa	90 0f		bcc $0104bb			bcc 	_SMCExit
.0104ac	85 08		sta $08				sta 	DTemp1 						; source
.0104ae	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0104b0	29 ff 00	and #$00ff			and 	#$00FF
.0104b3	d0 07		bne $0104bc			bne 	_SMCNonZero 				; if not "" skip.
.0104b5	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0104b8	18		clc				clc
.0104b9	65 02		adc $02				adc 	DBaseAddress
.0104bb					_SMCExit:
.0104bb	60		rts				rts
.0104bc					_SMCNonZero:
.0104bc	48		pha				pha 								; save on stack.
.0104bd	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear
.0104c0	18		clc				clc
.0104c1	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0104c4	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0104c6	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0104c8	85 0c		sta $0c				sta 	DTemp2 						; target
.0104ca	7a		ply				ply 								; get length copy from here until Y goes -ve
.0104cb	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0104cd					_SMCLoop:
.0104cd	b1 08		lda ($08),y			lda 	(DTemp1),y
.0104cf	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0104d1	88		dey				dey
.0104d2	10 f9		bpl $0104cd			bpl 	_SMCLoop
.0104d4	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0104d6	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0104d8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0104d9					Binary_Add:
.0104d9	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0104db	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0104dd	30 12		bmi $0104f1		bmi 	_BATypeError
.0104df	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0104e1	30 3f		bmi $010522		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0104e3	18		clc			clc
.0104e4	b5 00		lda $00,x		lda		EXSValueL+0,x
.0104e6	75 02		adc $02,x		adc 	EXSValueL+2,x
.0104e8	95 00		sta $00,x		sta 	EXSValueL+0,x
.0104ea	b5 10		lda $10,x		lda		EXSValueH+0,x
.0104ec	75 12		adc $12,x		adc 	EXSValueH+2,x
.0104ee	95 10		sta $10,x		sta 	EXSValueH+0,x
.0104f0	60		rts			rts
.0104f1					_BATypeError:
.0104f1	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0104f4	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0104fc	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>01050c	65 73 00
.01050f					_BALengthError:
.01050f	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010512	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01051a	6f 6f 20 6c 6f 6e 67 00
.010522					_BAConcatenateString:
.010522	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010524	85 08		sta $08			sta 	DTemp1
.010526	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010528	85 0c		sta $0c			sta 	DTemp2
.01052a	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.01052c	18		clc			clc 										; work out the total length
.01052d	b2 08		lda ($08)		lda 	(DTemp1)
.01052f	72 0c		adc ($0c)		adc 	(DTemp2)
.010531	b0 14		bcs $010547		bcs 	_BAConcatLengthError 				; string is too long.
.010533	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010535	20 67 04	jsr $010467		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010538	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the address
.01053a	74 10		stz $10,x		stz 	EXSValueH+0,x
.01053c	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01053e	20 84 04	jsr $010484		jsr 	StringCreateCopy
.010541	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010543	20 84 04	jsr $010484		jsr 	StringCreateCopy
.010546	60		rts			rts
.010547					_BAConcatLengthError:
.010547	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>01054a	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010552	6f 6f 20 6c 6f 6e 67 00
.01055a					Binary_Subtract:
.01055a	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.01055d	38		sec			sec
.01055e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010560	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010562	95 00		sta $00,x		sta 	EXSValueL+0,x
.010564	b5 10		lda $10,x		lda		EXSValueH+0,x
.010566	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010568	95 10		sta $10,x		sta 	EXSValueH+0,x
.01056a	60		rts			rts
.01056b					Binary_ShiftRight:
.01056b	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.01056e	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010570	29 3f 00	and #$003f		and 	#63
.010573	f0 07		beq $01057c		beq		_Binary_SRExit
.010575					_Binary_SRLoop:
.010575	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.010577	76 00		ror $00,x		ror 	EXSValueL+0,x
.010579	3a		dec a			dec 	a
.01057a	d0 f9		bne $010575		bne 	_Binary_SRLoop
.01057c					_Binary_SRExit:
.01057c	60		rts			rts
.01057d					Binary_ShiftLeft:
.01057d	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.010580	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010582	29 3f 00	and #$003f		and 	#63
.010585	f0 07		beq $01058e		beq		_Binary_SLExit
.010587					_Binary_SLLoop:
.010587	16 00		asl $00,x		asl 	EXSValueL+0,x
.010589	36 10		rol $10,x		rol 	EXSValueH+0,x
.01058b	3a		dec a			dec 	a
.01058c	d0 f9		bne $010587		bne 	_Binary_SLLoop
.01058e					_Binary_SLExit:
.01058e	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.01058f					Binary_And:
.01058f	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.010592	b5 00		lda $00,x		lda		EXSValueL+0,x
.010594	35 02		and $02,x		and 	EXSValueL+2,x
.010596	95 00		sta $00,x		sta 	EXSValueL+0,x
.010598	b5 10		lda $10,x		lda		EXSValueH+0,x
.01059a	35 12		and $12,x		and 	EXSValueH+2,x
.01059c	95 10		sta $10,x		sta 	EXSValueH+0,x
.01059e	60		rts			rts
.01059f					Binary_Or:
.01059f	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.0105a2	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105a4	15 02		ora $02,x		ora 	EXSValueL+2,x
.0105a6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105a8	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105aa	15 12		ora $12,x		ora 	EXSValueH+2,x
.0105ac	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105ae	60		rts			rts
.0105af					Binary_Xor:
.0105af	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.0105b2	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105b4	55 02		eor $02,x		eor 	EXSValueL+2,x
.0105b6	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105b8	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105ba	55 12		eor $12,x		eor 	EXSValueH+2,x
.0105bc	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105be	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.0105bf					Binary_Equals:
.0105bf	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105c2	b0 0e		bcs $0105d2		bcs 	_BEString
.0105c4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105c6	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105c8	d0 4f		bne $010619		bne 	Compare_Fail
.0105ca	b5 10		lda $10,x		lda 	EXSValueH,x
.0105cc	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105ce	d0 49		bne $010619		bne 	Compare_Fail
.0105d0	80 3f		bra $010611		bra 	Compare_Succeed
.0105d2					_BEString:
.0105d2	09 00 00	ora #$0000		ora 	#$0000
.0105d5	f0 3a		beq $010611		beq 	Compare_Succeed
.0105d7	80 40		bra $010619		bra 	Compare_Fail
.0105d9					Binary_NotEquals:
.0105d9	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105dc	b0 0e		bcs $0105ec		bcs 	_BNEString
.0105de	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0105e0	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0105e2	d0 2d		bne $010611		bne 	Compare_Succeed
.0105e4	b5 10		lda $10,x		lda 	EXSValueH,x
.0105e6	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0105e8	d0 27		bne $010611		bne 	Compare_Succeed
.0105ea	80 2d		bra $010619		bra 	Compare_Fail
.0105ec					_BNEString:
.0105ec	09 00 00	ora #$0000		ora 	#$0000
.0105ef	d0 20		bne $010611		bne 	Compare_Succeed
.0105f1	80 26		bra $010619		bra 	Compare_Fail
.0105f3					Binary_Less:
.0105f3	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0105f6	b0 12		bcs $01060a		bcs 	_BLString
.0105f8	38		sec			sec
.0105f9	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0105fb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0105fd	b5 10		lda $10,x		lda 	EXSValueH,x
.0105ff	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010601	50 03		bvc $010606		bvc 	*+5
.010603	49 00 80	eor #$8000		eor 	#$8000
.010606	30 09		bmi $010611		bmi 	Compare_Succeed
.010608	80 0f		bra $010619		bra 	Compare_Fail
.01060a					_BLString:
.01060a	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.01060d	f0 02		beq $010611		beq 	Compare_Succeed
.01060f	80 08		bra $010619		bra 	Compare_Fail
.010611					Compare_Succeed:
.010611	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010614	95 00		sta $00,x		sta 	EXSValueL,x
.010616	95 10		sta $10,x		sta 	EXSValueH,x
.010618	60		rts			rts
.010619					Compare_Fail:
.010619	74 00		stz $00,x		stz 	EXSValueL,x
.01061b	74 10		stz $10,x		stz 	EXSValueH,x
.01061d	60		rts			rts
.01061e					Binary_GreaterEqual:
.01061e	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010621	b0 12		bcs $010635		bcs 	_BGEString
.010623	38		sec			sec
.010624	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010626	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010628	b5 10		lda $10,x		lda 	EXSValueH,x
.01062a	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01062c	50 03		bvc $010631		bvc 	*+5
.01062e	49 00 80	eor #$8000		eor 	#$8000
.010631	10 de		bpl $010611		bpl 	Compare_Succeed
.010633	80 e4		bra $010619		bra 	Compare_Fail
.010635					_BGEString:
.010635	09 00 00	ora #$0000		ora 	#$0000
.010638	10 d7		bpl $010611		bpl 	Compare_Succeed
.01063a	80 dd		bra $010619		bra 	Compare_Fail
.01063c					Binary_LessEqual:
.01063c	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01063f	b0 12		bcs $010653		bcs 	_BLEString
.010641	18		clc			clc 									; numeric <= signed
.010642	b5 00		lda $00,x		lda 	EXSValueL,x
.010644	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010646	b5 10		lda $10,x		lda 	EXSValueH,x
.010648	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01064a	50 03		bvc $01064f		bvc 	*+5
.01064c	49 00 80	eor #$8000		eor 	#$8000
.01064f	30 c0		bmi $010611		bmi 	Compare_Succeed
.010651	80 c6		bra $010619		bra 	Compare_Fail
.010653					_BLEString:
.010653	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010656	d0 b9		bne $010611		bne 	Compare_Succeed
.010658	80 bf		bra $010619		bra 	Compare_Fail
.01065a					Binary_Greater:
.01065a	20 78 06	jsr $010678		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01065d	b0 12		bcs $010671		bcs 	_BGString
.01065f	18		clc			clc 									; numeric > signed
.010660	b5 00		lda $00,x		lda 	EXSValueL,x
.010662	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010664	b5 10		lda $10,x		lda 	EXSValueH,x
.010666	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010668	50 03		bvc $01066d		bvc 	*+5
.01066a	49 00 80	eor #$8000		eor 	#$8000
.01066d	10 a2		bpl $010611		bpl 	Compare_Succeed
.01066f	80 a8		bra $010619		bra 	Compare_Fail
.010671					_BGString:
.010671	c9 01 00	cmp #$0001		cmp 	#$0001
.010674	f0 9b		beq $010611		beq 	Compare_Succeed
.010676	80 a1		bra $010619		bra 	Compare_Fail
.010678					CompareTypeCheck:
.010678	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.01067a	55 22		eor $22,x		eor 	EXSPrecType+2,x
.01067c	30 06		bmi $010684		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.01067e	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010680	30 1c		bmi $01069e		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010682	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010683	60		rts			rts
.010684					_CTCFail:
.010684	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010687	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>01068f	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.01069e					_CTCStringCompare:
.01069e	20 29 04	jsr $010429		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0106a1	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0106a3	85 08		sta $08			sta 	DTemp1
.0106a5	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0106a7	85 0c		sta $0c			sta 	DTemp2
.0106a9	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0106ac	a8		tay			tay
.0106ad	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0106af	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0106b1	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106b3	90 02		bcc $0106b7		bcc 	_CTCSmallest
.0106b5	b2 0c		lda ($0c)		lda 	(DTemp2)
.0106b7					_CTCSmallest:
.0106b7	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.0106b9					_CTCCompare:
.0106b9	c8		iny			iny 									; look at next character (done first, first char is size)
.0106ba	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.0106bc	30 16		bmi $0106d4		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.0106be	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.0106c0	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.0106c2	f0 f5		beq $0106b9		beq 	_CTCCompare 					; if zero, try the next character.
.0106c4	b0 07		bcs $0106cd		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.0106c6					_CTCLess:
.0106c6	c2 20		rep #$20		rep 	#$20
.0106c8	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106cb	80 14		bra $0106e1		bra 	_CTCExit
.0106cd					_CTCGreater:
.0106cd	c2 20		rep #$20		rep 	#$20
.0106cf	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0106d2	80 0d		bra $0106e1		bra 	_CTCExit
.0106d4					_CTCEqualSoFar:
.0106d4	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0106d6	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0106d8	90 ec		bcc $0106c6		bcc 	_CTCLess
.0106da	d0 f1		bne $0106cd		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0106dc	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then they're the same.
.0106de	a9 00 00	lda #$0000		lda 	#$0000
.0106e1					_CTCExit:
.0106e1	38		sec			sec 									; return with CS indicating string comparison.
.0106e2	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0106e3					Binary_Divide:
.0106e3	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.0106e6	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0106e8	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0106ea	d0 14		bne $010700		bne 	_BinaryDivide_Ok
.0106ec	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0106ef	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0106f7	20 62 79 20 7a 65 72 6f 00
.010700					_BinaryDivide_Ok:
.010700	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010702	64 0a		stz $0a			stz 	DTemp1+2
.010704	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010706	5a		phy			phy 										; save Y (bit counter)
.010707	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010709	10 07		bpl $010712		bpl 	_BinaryDivide_RightDone
.01070b	e8		inx			inx
.01070c	e8		inx			inx
.01070d	20 48 07	jsr $010748		jsr 	Binary_DivNegate
.010710	ca		dex			dex
.010711	ca		dex			dex
.010712					_BinaryDivide_RightDone:
.010712	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010714	10 03		bpl $010719		bpl 	_BinaryDivide_LeftDone
.010716	20 48 07	jsr $010748		jsr 	Binary_DivNegate
.010719					_BinaryDivide_LeftDone:
.010719	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.01071c					_BinaryDivide_Loop:
.01071c	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.01071e	36 10		rol $10,x		rol 	EXSValueH+0,x
.010720	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010722	26 0a		rol $0a			rol 	DTemp1+2
.010724	38		sec			sec											; calculate A-M
.010725	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010727	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010729	85 0c		sta $0c			sta 	DTemp2
.01072b	a5 0a		lda $0a			lda 	DTemp1+2
.01072d	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01072f	90 08		bcc $010739		bcc 	_Binary_NoSubract 					; if A < M skip this
.010731	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010733	a5 0c		lda $0c			lda 	DTemp2
.010735	85 08		sta $08			sta 	DTemp1+0
.010737	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010739					_Binary_NoSubract:
.010739	88		dey			dey 										; do it 32 times.
.01073a	d0 e0		bne $01071c		bne 	_BinaryDivide_Loop
.01073c					_BinaryDivide_Exit:
.01073c	a5 14		lda $14			lda 	DSignCount 							; restore sign
.01073e	29 01 00	and #$0001		and 	#1
.010741	f0 03		beq $010746		beq 	_BinaryDivide_Exit2
.010743	20 48 07	jsr $010748		jsr 	Binary_DivNegate
.010746					_BinaryDivide_Exit2:
.010746	7a		ply			ply 										; restore Y
.010747	60		rts			rts
.010748					Binary_DivNegate:
.010748	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.01074a	38		sec			sec 										; negate the value at stack X.
.01074b	a9 00 00	lda #$0000		lda 	#$0000
.01074e	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010750	95 00		sta $00,x		sta 	EXSValueL+0,x
.010752	a9 00 00	lda #$0000		lda 	#$0000
.010755	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010757	95 10		sta $10,x		sta 	EXSValueH+0,x
.010759	60		rts			rts
.01075a					Binary_Modulus:
.01075a	20 e3 06	jsr $0106e3		jsr 	Binary_Divide 						; do the divide
.01075d	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.01075f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010761	a5 0a		lda $0a			lda 	DTemp1+2
.010763	95 10		sta $10,x		sta 	EXSValueH+0,x
.010765	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010766					Binary_Multiply:
.010766	20 09 04	jsr $010409		jsr 	CheckBothNumeric 					; check both values are numeric
.010769	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.01076b	85 08		sta $08			sta 	DTemp1
.01076d	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01076f	85 0a		sta $0a			sta		DTemp1+2
.010771	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010773	74 10		stz $10,x		stz 	EXSValueH+0,x
.010775					_BinaryMultiply_Loop:
.010775	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010777	05 0a		ora $0a			ora 	DTemp1+2
.010779	f0 1e		beq $010799		beq 	_BinaryMultiply_Exit
.01077b	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.01077d	29 01 00	and #$0001		and 	#1
.010780	f0 0d		beq $01078f		beq 	_BinaryMultiply_NoAdd
.010782	18		clc			clc 										; add multiplicand to result.
.010783	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010785	75 02		adc $02,x		adc 	EXSValueL+2,x
.010787	95 00		sta $00,x		sta 	EXSValueL+0,x
.010789	b5 10		lda $10,x		lda 	EXSValueH+0,x
.01078b	75 12		adc $12,x		adc 	EXSValueH+2,x
.01078d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01078f					_BinaryMultiply_NoAdd:
.01078f	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010791	66 08		ror $08			ror 	DTemp1
.010793	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010795	36 12		rol $12,x		rol 	EXSValueH+2,x
.010797	80 dc		bra $010775		bra 	_BinaryMultiply_Loop 				; go round again.
.010799					_BinaryMultiply_Exit:
.010799	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.01079a					Function_Len:
.01079a	20 29 04	jsr $010429			jsr 	ResetTypeInteger 			; returns an integer
.01079d	20 47 02	jsr $010247			jsr 	EvaluateNextString 			; get the value you are absoluting
.0107a0	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; check )
.0107a3	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.0107a5	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.0107a8	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.0107ab	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.0107ad	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107af	60		rts				rts
.0107b0					Function_Abs:
.0107b0	20 29 04	jsr $010429			jsr 	ResetTypeInteger 			; returns an integer
.0107b3	20 28 02	jsr $010228			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.0107b6	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; check )
.0107b9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0107bb	30 07		bmi $0107c4			bmi 	_FAbsNegative 				; negate it if negative
.0107bd	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0107bf	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0107c1	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107c3	60		rts				rts
.0107c4					_FAbsNegative:
.0107c4	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0107c5	a9 00 00	lda #$0000			lda 	#0
.0107c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0107ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107cc	a9 00 00	lda #$0000			lda 	#0
.0107cf	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0107d1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107d3	60		rts				rts
.0107d4					Function_Sgn:
.0107d4	20 29 04	jsr $010429			jsr 	ResetTypeInteger 			; returns integer
.0107d7	20 28 02	jsr $010228			jsr 	EvaluateNextInteger 		; get an integer
.0107da	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; check )
.0107dd	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0107df	74 10		stz $10,x			stz 	EXSValueH+0,x
.0107e1	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0107e3	30 07		bmi $0107ec			bmi 	_FSgnNegative 				; set to -1 if signed
.0107e5	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0107e7	f0 02		beq $0107eb			beq 	_FSgnExit
.0107e9	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0107eb					_FSgnExit:
.0107eb	60		rts				rts
.0107ec					_FSgnNegative:
.0107ec	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0107ef	95 00		sta $00,x			sta 	EXSValueL+0,x
.0107f1	95 10		sta $10,x			sta 	EXSValueH+0,x
.0107f3	60		rts				rts
.0107f4					Function_Random:
.0107f4	20 29 04	jsr $010429			jsr 	ResetTypeInteger
.0107f7	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0107f9	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0107fb	d0 0a		bne $010807			bne 	_Rnd_NotZero
.0107fd	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010800	85 10		sta $10				sta 	DRandom
.010802	a9 ea 00	lda #$00ea			lda 	#$EA
.010805	85 12		sta $12				sta 	DRandom+2
.010807					_Rnd_NotZero:
.010807	20 12 08	jsr $010812			jsr 	_Rnd_Process 				; call randomiser twice
.01080a	95 10		sta $10,x			sta 	EXSValueH+0,x
.01080c	20 12 08	jsr $010812			jsr 	_Rnd_Process
.01080f	95 00		sta $00,x			sta 	EXSValueL+0,x
.010811	60		rts				rts
.010812					_Rnd_Process:
.010812	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010814	26 12		rol $12				rol 	DRandom+2
.010816	90 0e		bcc $010826			bcc 	_Rnd_Exit
.010818	a5 10		lda $10				lda 	DRandom 					; taps effectively
.01081a	49 54 d4	eor #$d454			eor 	#$D454
.01081d	85 10		sta $10				sta 	DRandom
.01081f	a5 12		lda $12				lda 	DRandom+2
.010821	49 d5 55	eor #$55d5			eor 	#$55D5
.010824	85 12		sta $12				sta 	DRandom+2
.010826					_Rnd_Exit:
.010826	a5 10		lda $10				lda 	DRandom
.010828	45 12		eor $12				eor 	DRandom+2
.01082a	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.01082b					Function_VAL:
.01082b	20 29 04	jsr $010429			jsr 	ResetTypeInteger 			; returns an integer
.01082e	20 47 02	jsr $010247			jsr 	EvaluateNextString 			; get the value you are absoluting
.010831	48		pha				pha 								; put string address on stack.
.010832	20 42 08	jsr $010842			jsr 	VALGetBase 					; process , base (shared with STR$())
.010835	7a		ply				ply 								; get string address back
.010836	da		phx				phx 								; save X on stack
.010837	aa		tax				tax 								; base in X
.010838	98		tya				tya 								; address in A
.010839	20 7c 08	jsr $01087c			jsr 	StringToInteger
.01083c	fa		plx				plx 								; restore X
.01083d	95 00		sta $00,x			sta 	EXSValueL+0,x
.01083f	94 10		sty $10,x			sty 	EXSValueH+0,x
.010841	60		rts				rts
.010842					VALGetBase:
.010842	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010844	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if comma, go to get base code.
.010847	f0 07		beq $010850			beq 	_VGBAlternate
.010849	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket			; expect ), and return 10.
.01084c	a9 0a 00	lda #$000a			lda 	#10
.01084f	60		rts				rts
.010850					_VGBAlternate:
.010850	20 00 04	jsr $010400			jsr 	ExpectComma 				; skip comma.
.010853	20 28 02	jsr $010228			jsr 	EvaluateNextInteger 		; get base
.010856	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010859	d0 0e		bne $010869			bne 	_VGBBadBase
.01085b	c9 02 00	cmp #$0002			cmp 	#2
.01085e	90 09		bcc $010869			bcc 	_VGBBadBase
.010860	c9 25 00	cmp #$0025			cmp 	#36+1						; 0-9A-Z if you really want base 36 we can do it.
.010863	b0 04		bcs $010869			bcs 	_VGBBadBase
.010865	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; get right bracket and return.
.010868	60		rts				rts
.010869					_VGBBadBase:
.010869	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>01086c	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010874	65 72 20 42 61 73 65 00
.01087c					StringToInteger:
.01087c	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.01087e	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010880	29 ff 00	and #$00ff			and 	#$00FF
.010883	85 26		sta $26				sta 	DTemp3+2
.010885	f0 6e		beq $0108f5			beq 	_STIError 					; if length zero it's bad.
.010887	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010889	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.01088b	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.01088d	64 0a		stz $0a				stz 	DTemp1+2
.01088f	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010891	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010894	48		pha				pha 								; push on stack
.010895	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010898	d0 06		bne $0108a0			bne 	_STILoop
.01089a	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.01089c	c6 26		dec $26				dec 	DTemp3+2					; dec count
.01089e	f0 55		beq $0108f5			beq 	_STIError 					; if only - then error.
.0108a0					_STILoop:
.0108a0	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.0108a2	20 14 09	jsr $010914			jsr 	MultiplyTemp1ByA
.0108a5	b2 24		lda ($24)			lda 	(DTemp3)
.0108a7	29 ff 00	and #$00ff			and 	#$00FF
.0108aa	20 05 09	jsr $010905			jsr 	ConvertUpperCase
.0108ad	c9 30 00	cmp #$0030			cmp 	#'0' 						; check if 0-9
.0108b0	90 43		bcc $0108f5			bcc 	_STIError
.0108b2	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.0108b5	90 0e		bcc $0108c5			bcc 	_STIOkay1
.0108b7	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.0108ba	90 39		bcc $0108f5			bcc 	_STIError
.0108bc	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.0108bf	b0 34		bcs $0108f5			bcs 	_STIError
.0108c1	18		clc				clc 								; shift to correct range.
.0108c2	69 09 00	adc #$0009			adc 	#9
.0108c5					_STIOkay1:
.0108c5	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.0108c8	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.0108ca	b0 29		bcs $0108f5			bcs 	_STIError
.0108cc	18		clc				clc 								; add A to DTemp1
.0108cd	65 08		adc $08				adc 	DTemp1
.0108cf	85 08		sta $08				sta 	DTemp1
.0108d1	90 02		bcc $0108d5			bcc 	_STINoCarry
.0108d3	e6 0a		inc $0a				inc 	DTemp1+2
.0108d5					_STINoCarry:
.0108d5	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.0108d7	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.0108d9	d0 c5		bne $0108a0			bne 	_STILoop 					; loop back.
.0108db	68		pla				pla 								; get optional minus bac
.0108dc	c9 2d 00	cmp #$002d			cmp 	#"-"
.0108df	d0 0f		bne $0108f0			bne 	_STINotNegative 			; handle the negative character
.0108e1	38		sec				sec 								; negate DTemp1
.0108e2	a9 00 00	lda #$0000			lda 	#0
.0108e5	e5 08		sbc $08				sbc 	DTemp1
.0108e7	85 08		sta $08				sta 	DTemp1
.0108e9	a9 00 00	lda #$0000			lda 	#0
.0108ec	e5 0a		sbc $0a				sbc 	DTemp1+2
.0108ee	85 0a		sta $0a				sta 	DTemp1+2
.0108f0					_STINotNegative:
.0108f0	a5 08		lda $08				lda 	DTemp1 						; get the result
.0108f2	a4 0a		ldy $0a				ldy 	DTemp1+2
.0108f4	60		rts				rts
.0108f5					_STIError:
.0108f5	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>0108f8	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010900	74 61 6e 74 00
.010905					ConvertUpperCase:
.010905	c9 61 00	cmp #$0061			cmp 	#'a'
.010908	90 09		bcc $010913			bcc 	_CUCExit
.01090a	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.01090d	b0 04		bcs $010913			bcs 	_CUCExit
.01090f	38		sec				sec
.010910	e9 20 00	sbc #$0020			sbc 	#32
.010913					_CUCExit:
.010913	60		rts				rts
.010914					MultiplyTemp1ByA:
.010914	c9 10 00	cmp #$0010			cmp 	#16							; special case bases, the common ones.
.010917	f0 56		beq $01096f			beq 	_MT1_16
.010919	c9 0a 00	cmp #$000a			cmp 	#10
.01091c	f0 33		beq $010951			beq 	_MT1_10
.01091e	c9 08 00	cmp #$0008			cmp 	#8
.010921	f0 50		beq $010973			beq 	_MT1_8
.010923	c9 02 00	cmp #$0002			cmp 	#2
.010926	f0 53		beq $01097b			beq 	_MT1_2
.010928					_MTGeneral:
.010928	da		phx				phx
.010929	aa		tax				tax 								; multiplier in X
.01092a	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.01092c	85 0c		sta $0c				sta 	DTemp2
.01092e	a5 0a		lda $0a				lda 	DTemp1+2
.010930	85 0e		sta $0e				sta 	DTemp2+2
.010932	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010934	64 0a		stz $0a				stz 	DTemp1+2
.010936					_MTLoop:
.010936	8a		txa				txa 								; shift X right into C
.010937	4a		lsr a				lsr 	a
.010938	aa		tax				tax
.010939	90 0d		bcc $010948			bcc 	_MTNoAdd
.01093b	18		clc				clc
.01093c	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.01093e	65 0c		adc $0c				adc 	DTemp2
.010940	85 08		sta $08				sta 	DTemp1
.010942	a5 0a		lda $0a				lda 	DTemp1+2
.010944	65 0e		adc $0e				adc 	DTemp2+2
.010946	85 0a		sta $0a				sta 	DTemp1+2
.010948					_MTNoAdd:
.010948	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.01094a	26 0e		rol $0e				rol 	DTemp2+2
.01094c	8a		txa				txa 								; until multiplier is zero.
.01094d	d0 e7		bne $010936			bne 	_MTLoop
.01094f					_MTGExit:
.01094f	fa		plx				plx 								; restore X
.010950	60		rts				rts 								; and exit
.010951					_MT1_10:
.010951	a5 0a		lda $0a				lda 	DTemp1+2 					; initial on stack.
.010953	48		pha				pha
.010954	a5 08		lda $08				lda 	DTemp1
.010956	48		pha				pha
.010957	06 08		asl $08				asl 	DTemp1						; x 4
.010959	26 0a		rol $0a				rol 	DTemp1+2
.01095b	06 08		asl $08				asl 	DTemp1
.01095d	26 0a		rol $0a				rol 	DTemp1+2
.01095f	68		pla				pla 								; add saved value, x 5
.010960	18		clc				clc
.010961	65 08		adc $08				adc 	DTemp1
.010963	85 08		sta $08				sta 	DTemp1
.010965	68		pla				pla
.010966	65 0a		adc $0a				adc 	DTemp1+2
.010968	85 0a		sta $0a				sta 	DTemp1+2
.01096a	06 08		asl $08				asl 	DTemp1
.01096c	26 0a		rol $0a				rol 	DTemp1+2
.01096e	60		rts				rts
.01096f					_MT1_16:
.01096f	06 08		asl $08				asl 	DTemp1
.010971	26 0a		rol $0a				rol 	DTemp1+2
.010973					_MT1_8:
.010973	06 08		asl $08				asl 	DTemp1
.010975	26 0a		rol $0a				rol 	DTemp1+2
.010977					_MT1_4:
.010977	06 08		asl $08				asl 	DTemp1
.010979	26 0a		rol $0a				rol 	DTemp1+2
.01097b					_MT1_2
.01097b	06 08		asl $08				asl 	DTemp1
.01097d	26 0a		rol $0a				rol 	DTemp1+2
.01097f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010980					Function_Str:
.010980	20 31 04	jsr $010431			jsr 	ResetTypeString 			; returns a string.
.010983	20 28 02	jsr $010228			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010986	48		pha				pha 								; save YA on the stack
.010987	5a		phy				phy
.010988	20 42 08	jsr $010842			jsr 	VALGetBase 					; process , base (shared with STR$())
.01098b	85 14		sta $14				sta 	DSignCount
.01098d	7a		ply				ply 								; YA is the number
.01098e	68		pla				pla
.01098f	da		phx				phx
.010990	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010992	20 9b 09	jsr $01099b			jsr 	ConvertToString 			; convert it to a string.
.010995	fa		plx				plx 								; restore X
.010996	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010998	74 10		stz $10,x			stz 	EXSValueH+0,x
.01099a	60		rts				rts
.01099b					ConvertToString:
.01099b	da		phx				phx 								; save X
.01099c	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.01099e	84 26		sty $26				sty 	DTemp3+2
.0109a0	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.0109a2	a9 14 00	lda #$0014			lda 	#20 						; enough space for Base 2.
.0109a5	20 67 04	jsr $010467			jsr 	StringTempAllocate 			; allocate space for return string.
.0109a8	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.0109aa	10 15		bpl $0109c1			bpl 	_CTSNotNegative
.0109ac	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character
.0109af	20 29 0a	jsr $010a29			jsr 	CTSOutputA
.0109b2	38		sec				sec 								; negate DTemp3
.0109b3	a9 00 00	lda #$0000			lda 	#0
.0109b6	e5 24		sbc $24				sbc 	DTemp3
.0109b8	85 24		sta $24				sta 	DTemp3
.0109ba	a9 00 00	lda #$0000			lda 	#0
.0109bd	e5 26		sbc $26				sbc 	DTemp3+2
.0109bf	85 26		sta $26				sta 	DTemp3+2
.0109c1					_CTSNotNegative:
.0109c1	a9 01 00	lda #$0001			lda 	#1 							; push 1 on stack
.0109c4	48		pha				pha
.0109c5	a9 00 00	lda #$0000			lda 	#0
.0109c8	48		pha				pha
.0109c9	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base.
.0109cb	85 08		sta $08				sta 	DTemp1
.0109cd	64 0a		stz $0a				stz 	DTemp1+2
.0109cf					_CTSMultiplySubtractor:
.0109cf	38		sec				sec
.0109d0	a5 24		lda $24				lda 	DTemp3
.0109d2	e5 08		sbc $08				sbc 	DTemp1
.0109d4	a5 26		lda $26				lda 	DTemp3+2
.0109d6	e5 0a		sbc $0a				sbc 	DTemp1+2
.0109d8	90 0d		bcc $0109e7			bcc		_CTSScaledUp 				; if >= then scaled up.
.0109da	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.0109dc	48		pha				pha
.0109dd	a5 0a		lda $0a				lda 	DTemp1+2
.0109df	48		pha				pha
.0109e0	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.0109e2	20 14 09	jsr $010914			jsr 	MultiplyTemp1ByA
.0109e5	80 e8		bra $0109cf			bra 	_CTSMultiplySubtractor
.0109e7					_CTSScaledUp:
.0109e7	7a		ply				ply 								; YA contains the previous divider.
.0109e8	68		pla				pla
.0109e9	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.0109ec	d0 05		bne $0109f3			bne 	_CTSHasDigit
.0109ee	c9 01 00	cmp #$0001			cmp 	#1 							;
.0109f1	f0 20		beq $010a13			beq 	_CTSExit
.0109f3					_CTSHasDigit:
.0109f3	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0109f5	84 0e		sty $0e				sty 	DTemp2+2
.0109f7	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.0109fa					_CTSSubLoop:
.0109fa	38		sec				sec 								; subtract subtractor from number
.0109fb	a5 24		lda $24				lda 	DTemp3
.0109fd	e5 0c		sbc $0c				sbc 	DTemp2
.0109ff	a8		tay				tay 								; intermediate in Y
.010a00	a5 26		lda $26				lda 	DTemp3+2
.010a02	e5 0e		sbc $0e				sbc 	DTemp2+2
.010a04	90 07		bcc $010a0d			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010a06	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010a08	84 24		sty $24				sty 	DTemp3
.010a0a	e8		inx				inx 								; one more subtraction
.010a0b	80 ed		bra $0109fa			bra 	_CTSSubLoop 				; try it again.
.010a0d					_CTSFinishedSubtracting:
.010a0d	8a		txa				txa 								; convert to ASCII.
.010a0e	20 1c 0a	jsr $010a1c			jsr 	CTSOutputHexDigit 			; write that out.
.010a11	80 d4		bra $0109e7			bra 	_CTSScaledUp
.010a13					_CTSExit:
.010a13	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010a15	20 1c 0a	jsr $010a1c			jsr 	CTSOutputHexDigit
.010a18	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010a1a	fa		plx				plx 								; restore X.
.010a1b	60		rts				rts
.010a1c					CTSOutputHexDigit:
.010a1c	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010a1f	90 04		bcc $010a25			bcc 	_CTSNotLetter
.010a21	18		clc				clc
.010a22	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010a25					_CTSNotLetter:
.010a25	18		clc				clc
.010a26	69 30 00	adc #$0030			adc 	#48
.010a29					CTSOutputA:
.010a29	5a		phy				phy 								; save Y, set Y to current pointer
.010a2a	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010a2c	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010a2f	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010a31	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010a33	1a		inc a				inc 	a
.010a34	92 18		sta ($18)			sta 	(DStartTempString)
.010a36	c2 20		rep #$20			rep 	#$20
.010a38	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010a3a	7a		ply				ply 								; restore Y and exit.
.010a3b	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010a3c					Function_Let:
.010a3c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010a3e	48		pha				pha
.010a3f	20 8e 02	jsr $01028e			jsr 	VariableFind 				; find the variable
.010a42	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010a44	b0 1c		bcs $010a62			bcs 	_FLetFound 					; skip if found.
.010a46	68		pla				pla 								; get and push the first token again.
.010a47	48		pha				pha
.010a48	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate
.010a4b	d0 57		bne $010aa4			bne 	_FLError					; arrays, so this causes an error.
.010a4d	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010a4f	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010a52	20 38 03	jsr $010338			jsr 	VariableCreate 				; create it.
.010a55	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010a57					_FLSkipToken:
.010a57	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010a59	e6 06		inc $06				inc 	DCodePtr
.010a5b	e6 06		inc $06				inc 	DCodePtr
.010a5d	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010a60	d0 f5		bne $010a57			bne 	_FLSkipToken
.010a62					_FLetFound:
.010a62	68		pla				pla 								; get and save the first token.
.010a63	48		pha				pha
.010a64	a8		tay				tay 								; put it in Y
.010a65	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010a68	f0 07		beq $010a71			beq 	_FLetNotArray
.010a6a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010a6c	20 05 03	jsr $010305			jsr 	VariableSubscript			; index calculation
.010a6f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010a71					_FLetNotArray:
.010a71	7a		ply				ply 								; get the first token into Y
.010a72	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010a74	48		pha				pha
.010a75	5a		phy				phy 								; save the first token on the stack.
.010a76	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010a79	20 dd 03	jsr $0103dd			jsr 	ExpectToken
.010a7c	68		pla				pla 								; restore the first token.
.010a7d	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010a80	d0 0f		bne $010a91			bne 	_FLetString 				; skip if string.
.010a82	20 0f 02	jsr $01020f			jsr 	EvaluateInteger 			; get an integer
.010a85	7a		ply				ply 								; get address in Y
.010a86	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010a88	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a8b	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010a8d	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010a90	60		rts				rts
.010a91					_FLetString:
.010a91	20 2e 02	jsr $01022e			jsr 	EvaluateString 				; get a string.
.010a94	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010a96	20 a5 04	jsr $0104a5			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010a99	7a		ply				ply 								; get address
.010a9a	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010a9d	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010aa0	99 02 00	sta $0002,y			sta 	$0002,y
.010aa3	60		rts				rts
.010aa4					_FLError:
.010aa4	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010aa7	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010aaf	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010ab7					Function_PRINT:
.010ab7	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010ab9	f0 33		beq $010aee			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010abb	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; likewise if a colon.
.010abe	f0 2e		beq $010aee			beq 	_FPRExitCR
.010ac0	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID 			; semicolon, skip it
.010ac3	f0 23		beq $010ae8			beq 	_FPRSkipLoop
.010ac5	c9 1c 32	cmp #$321c			cmp 	#squoteTokenID 				; single quote is CR
.010ac8	f0 1b		beq $010ae5			beq 	_FPRNewLine
.010aca	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; , is tab.
.010acd	f0 11		beq $010ae0			beq 	_FPRTab
.010acf					_FPRExpression:
.010acf	20 01 01	jsr $010101			jsr 	Evaluate 					; evaluate a string or integer.
.010ad2	b0 06		bcs $010ada			bcs 	_FPRHaveString
.010ad4	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010ad7	20 9b 09	jsr $01099b			jsr 	ConvertToString
.010ada					_FPRHaveString:
.010ada	a8		tay				tay 								; print the basic String.
.010adb	20 4d 04	jsr $01044d			jsr 	PrintBASICString
.010ade	80 d7		bra $010ab7			bra 	Function_Print 				; and go round again.
.010ae0					_FPRTab:
.010ae0	20 5a 0e	jsr $010e5a			jsr 	HWTab
.010ae3	80 03		bra $010ae8			bra 	_FPRSkipLoop
.010ae5					_FPRNewLine:
.010ae5	20 47 0e	jsr $010e47			jsr 	HWNewLine
.010ae8					_FPRSkipLoop:
.010ae8	e6 06		inc $06				inc 	DCodePtr
.010aea	e6 06		inc $06				inc 	DCodePtr
.010aec	80 c9		bra $010ab7			bra 	Function_Print
.010aee					_FPRExitCR:
.010aee	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010af0	88		dey				dey
.010af1	88		dey				dey
.010af2	b9 00 00	lda $0000,y			lda 	$0000,y
.010af5	c9 17 32	cmp #$3217			cmp 	#commaTokenID 	 			; if so, don't print CR.
.010af8	f0 08		beq $010b02			beq 	_FPRExit
.010afa	c9 18 32	cmp #$3218			cmp 	#semicolonTokenID
.010afd	f0 03		beq $010b02			beq 	_FPRExit
.010aff	20 47 0e	jsr $010e47			jsr 	HWNewLine 					; print a new line.
.010b02					_FPRExit:
.010b02	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.010b03					Function_GOTO:
.010b03	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.010b05	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.010b08	90 2e		bcc $010b38			bcc 	_FGOFail
.010b0a	c9 00 c0	cmp #$c000			cmp 	#$C000
.010b0d	b0 29		bcs $010b38			bcs 	_FGOFail
.010b0f	38		sec				sec 								; convert to 0-32767
.010b10	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.010b13	aa		tax				tax
.010b14	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program.
.010b17	18		clc				clc
.010b18	65 02		adc $02				adc 	DBaseAddress 				; into Y
.010b1a	a8		tay				tay
.010b1b					_FGOSearch:
.010b1b	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero.
.010b1e	f0 2b		beq $010b4b			beq 	_FGOUnknown
.010b20	8a		txa				txa 								; does it match line number.
.010b21	d9 02 00	cmp $0002,y			cmp 	$0002,y
.010b24	f0 08		beq $010b2e			beq 	_FGOFound 					; yes, then found.
.010b26	98		tya				tya 								; no follow the link
.010b27	18		clc				clc
.010b28	79 00 00	adc $0000,y			adc 	$0000,y
.010b2b	a8		tay				tay
.010b2c	80 ed		bra $010b1b			bra 	_FGOSearch
.010b2e					_FGOFound:
.010b2e	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.010b30	98		tya				tya 								; Y + 4 is the code pointer.
.010b31	18		clc				clc
.010b32	69 04 00	adc #$0004			adc 	#4
.010b35	85 06		sta $06				sta 	DCodePtr
.010b37	60		rts				rts									; and continue
.010b38					_FGOFail:
.010b38	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010b3b	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>010b43	20 4e 75 6d 62 65 72 00
.010b4b					_FGOUnknown:
.010b4b	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010b4e	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>010b56	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.010b62					Function_GOSUB:
.010b62	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010b64	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.010b66	18		clc				clc
.010b67	69 02 00	adc #$0002			adc 	#2
.010b6a	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010b6c	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010b6e	95 04		sta $04,x			sta 	$04,x
.010b70	a9 28 3e	lda #$3e28			lda 	#gosubTokenID 				; save gosub token at +6
.010b73	95 06		sta $06,x			sta 	$06,x
.010b75	8a		txa				txa 								; advance stack by 6.
.010b76	18		clc				clc
.010b77	69 06 00	adc #$0006			adc 	#6
.010b7a	85 2a		sta $2a				sta 	DStack
.010b7c	80 85		bra $010b03			bra 	Function_GOTO 				; and do a GOTO.
.010b7e					Function_RETURN:
.010b7e	a6 2a		ldx $2a				ldx 	DStack
.010b80	b5 00		lda $00,x			lda 	$00,x
.010b82	c9 28 3e	cmp #$3e28			cmp 	#gosubTokenID 				; check top token.
.010b85	d0 11		bne $010b98			bne 	_FRetFail
.010b87	8a		txa				txa 								; unpick stack.
.010b88	38		sec				sec
.010b89	e9 06 00	sbc #$0006			sbc 	#6
.010b8c	85 2a		sta $2a				sta 	DStack
.010b8e	aa		tax				tax
.010b8f	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010b91	85 06		sta $06				sta 	DCodePtr
.010b93	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010b95	85 22		sta $22				sta 	DLineNumber
.010b97	60		rts				rts
.010b98					_FRetFail:
.010b98	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010b9b	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>010ba3	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.010bb0					Function_REPEAT:
.010bb0	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.010bb2	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.010bb4	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.010bb6	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010bb8	95 04		sta $04,x			sta 	$04,x
.010bba	a9 2b 3c	lda #$3c2b			lda 	#repeatTokenID 				; save repeat token at +6
.010bbd	95 06		sta $06,x			sta 	$06,x
.010bbf	8a		txa				txa 								; advance stack by 6.
.010bc0	18		clc				clc
.010bc1	69 06 00	adc #$0006			adc 	#6
.010bc4	85 2a		sta $2a				sta 	DStack
.010bc6	60		rts				rts
.010bc7					Function_UNTIL:
.010bc7	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.010bc9	b5 00		lda $00,x			lda 	$00,x
.010bcb	c9 2b 3c	cmp #$3c2b			cmp 	#repeatTokenID
.010bce	d0 26		bne $010bf6			bne 	_FUNFail
.010bd0	20 0f 02	jsr $01020f			jsr 	EvaluateInteger 			; .... until what.
.010bd3	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.010bd6	d0 15		bne $010bed			bne 	_FUNExit
.010bd8	c9 00 00	cmp #$0000			cmp 	#0
.010bdb	d0 10		bne $010bed			bne 	_FUNExit
.010bdd	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.010bdf	38		sec				sec
.010be0	e9 06 00	sbc #$0006			sbc 	#6
.010be3	aa		tax				tax
.010be4	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.010be6	85 06		sta $06				sta 	DCodePtr
.010be8	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.010bea	85 22		sta $22				sta 	DLineNumber
.010bec	60		rts				rts
.010bed					_FUNExit:
.010bed	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.010bef	38		sec				sec
.010bf0	e9 06 00	sbc #$0006			sbc 	#6
.010bf3	85 2a		sta $2a				sta 	DStack
.010bf5	60		rts				rts
.010bf6					_FUNFail:
.010bf6	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010bf9	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>010c01	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.010c0e					Function_END:
.010c0e	02 00		cop #$00			cop 	#0
.010c10					Function_RUN:
.010c10	20 68 0c	jsr $010c68			jsr 	Function_CLEAR 				; clear all variables.
.010c13	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.010c15	18		clc				clc
.010c16	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.010c19					_FRun_NextLineNumber:
.010c19	a8		tay				tay 								; put in Y
.010c1a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.010c1d	f0 ef		beq $010c0e			beq 	Function_END 				; if zero, off the end of the program
.010c1f	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.010c22	85 22		sta $22				sta 	DLineNumber 				; and save it.
.010c24	98		tya				tya 								; get address back
.010c25	18		clc				clc 								; skip over the link/line number
.010c26	69 04 00	adc #$0004			adc 	#4
.010c29	85 06		sta $06				sta 	DCodePtr
.010c2b					_FRun_NextInstruction:
.010c2b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; initialise temporary string below upper area
.010c2e	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; with enough memory to concrete a string above.
.010c30	38		sec				sec
.010c31	e9 00 01	sbc #$0100			sbc 	#256
.010c34	85 16		sta $16				sta 	DTempStringPointer
.010c36	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.010c38	f0 28		beq $010c62			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.010c3a	c9 19 32	cmp #$3219			cmp 	#colonTokenID 				; colon then skip
.010c3d	f0 18		beq $010c57			beq 	_FRun_Colon
.010c3f	a8		tay				tay 								; save in Y
.010c40	29 00 e0	and #$e000			and 	#$E000 						; see if it is a keyword. 111x
.010c43	c9 00 20	cmp #$2000			cmp 	#$2000
.010c46	d0 15		bne $010c5d			bne 	_FRun_TryLET 				; if not, try LET as a default.
.010c48	98		tya				tya 								; get token back
.010c49	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.010c4c	0a		asl a				asl 	a 							; double it into X
.010c4d	aa		tax				tax
.010c4e	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c50	e6 06		inc $06				inc 	DCodePtr
.010c52	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.010c55	80 d4		bra $010c2b			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c57					_FRun_Colon:
.010c57	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.010c59	e6 06		inc $06				inc 	DCodePtr
.010c5b	80 ce		bra $010c2b			bra 	_FRun_NextInstruction 		; do the following instruction.
.010c5d					_FRun_TryLET:
.010c5d	20 3c 0a	jsr $010a3c			jsr 	Function_LET 				; try as a LET.
.010c60	80 c9		bra $010c2b			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.010c62					_FRun_EndInstruction:
.010c62	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.010c64	1a		inc a				inc 	a 							; go to link for next line
.010c65	1a		inc a				inc 	a
.010c66	80 b1		bra $010c19			bra 	_FRun_NextLineNumber
.010c68					Function_CLEAR:
.010c68	20 6c 0c	jsr $010c6c			jsr 	ClearVariablesPointersAndStacks
.010c6b	60		rts				rts
.010c6c					ClearVariablesPointersAndStacks:
.010c6c	a9 80 00	lda #$0080			lda 	#BASStack
.010c6f	85 2a		sta $2a				sta 	DStack
.010c71	64 80		stz $80				stz 	BASStack
.010c73	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.010c76	a9 00 00	lda #$0000			lda 	#$0000
.010c79	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c7b	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.010c7d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010c80	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c82	20 a9 0c	jsr $010ca9			jsr 	FindCodeEnd 				; find where the program ends.
.010c85	a8		tay				tay 								; Y points to it.
.010c86	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.010c89	99 02 00	sta $0002,y			sta 	$0002,y
.010c8c	99 04 00	sta $0004,y			sta 	$0004,y
.010c8f	98		tya				tya 								; start of working memory up
.010c90	18		clc				clc
.010c91	69 06 00	adc #$0006			adc 	#6
.010c94	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.010c97	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010c99	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.010c9c					_FCLoop:
.010c9c	a9 00 00	lda #$0000			lda 	#$0000
.010c9f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010ca1	c8		iny				iny
.010ca2	c8		iny				iny
.010ca3	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.010ca6	d0 f4		bne $010c9c			bne 	_FCLoop
.010ca8	60		rts				rts
.010ca9					FindCodeEnd:
.010ca9	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.010cac	18		clc				clc
.010cad	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.010caf	a8		tay				tay
.010cb0					_FCELoop:
.010cb0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.010cb3	f0 08		beq $010cbd			beq 	_FCEExit
.010cb5	98		tya				tya 								; add offset
.010cb6	18		clc				clc
.010cb7	79 00 00	adc $0000,y			adc 	$0000,y
.010cba	a8		tay				tay
.010cbb	80 f3		bra $010cb0			bra 	_FCELoop
.010cbd					_FCEExit:
.010cbd	98		tya				tya 								; return in A
.010cbe	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.010cbf					Function_Dim:
.010cbf	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010cc1	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010cc4	f0 3b		beq $010d01			beq		_FDIMNotArray 				; no, error.
.010cc6	20 8e 02	jsr $01028e			jsr 	VariableFind 				; try to find it.
.010cc9	b0 41		bcs $010d0c			bcs 	_FDIMExists 				; if it does, that's an error.
.010ccb	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.010ccd	48		pha				pha
.010cce	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.010cd0	48		pha				pha
.010cd1					_FDIMSkip:
.010cd1	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.010cd3	e6 06		inc $06				inc 	DCodePtr
.010cd5	e6 06		inc $06				inc 	DCodePtr
.010cd7	29 00 08	and #$0800			and 	#IDContMask
.010cda	d0 f5		bne $010cd1			bne 	_FDIMSkip
.010cdc	20 0f 02	jsr $01020f			jsr 	EvaluateInteger 			; evaluate the size
.010cdf	20 f7 03	jsr $0103f7			jsr 	ExpectRightBracket 			; check the ) following.
.010ce2	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.010ce5	d0 3b		bne $010d22			bne 	_FDIMSize
.010ce7	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.010cea	f0 36		beq $010d22			beq 	_FDIMSize
.010cec	7a		ply				ply 								; restore HashTablePtr
.010ced	84 20		sty $20				sty 	DHashTablePtr
.010cef	7a		ply				ply 								; so now A is the high index, Y points to the token
.010cf0	20 38 03	jsr $010338			jsr 	VariableCreate 				; create the variable.
.010cf3	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.010cf5	c9 17 32	cmp #$3217			cmp 	#commaTokenID 				; if not a comma, exit
.010cf8	d0 06		bne $010d00			bne 	_FDIMExit
.010cfa	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.010cfc	e6 06		inc $06				inc 	DCodePtr
.010cfe	80 bf		bra $010cbf			bra 	Function_DIM 				; and do another
.010d00					_FDIMExit:
.010d00	60		rts				rts
.010d01					_FDIMNotArray:
.010d01	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010d04	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.010d0c					_FDIMExists:
.010d0c	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010d0f	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>010d17	65 64 69 6d 65 6e 73 69 6f 6e 00
.010d22					_FDIMSize:
.010d22	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010d25	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>010d2d	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.010d33					Function_COLLECT:
.010d33	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.010d35	85 0c		sta $0c				sta 	DTemp2
.010d37	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.010d3a	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.010d3c	85 0e		sta $0e				sta 	DTemp2+2
.010d3e	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.010d40	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010d42					_FCNextPass:
.010d42	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.010d44	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.010d46	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.010d48	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.010d4b	18		clc				clc
.010d4c	65 02		adc $02				adc 	DBaseAddress
.010d4e	a8		tay				tay 								; put in Y
.010d4f	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d52					_FCO1:
.010d52	20 78 0d	jsr $010d78			jsr  	COLLECTScanVariable 		; scan that one.
.010d55	c8		iny				iny 	 							; go to next pointer
.010d56	c8		iny				iny
.010d57	ca		dex				dex
.010d58	d0 f8		bne $010d52			bne 	_FCO1 						; until done all 16.
.010d5a	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.010d5d					_FCO2:
.010d5d	20 8c 0d	jsr $010d8c			jsr  	COLLECTScanArray 			; scan that one.
.010d60	c8		iny				iny 	 							; go to next pointer
.010d61	c8		iny				iny
.010d62	ca		dex				dex
.010d63	d0 f8		bne $010d5d			bne 	_FCO2 						; until done all 16.
.010d65	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.010d67	f0 0e		beq $010d77			beq		_FCExit 					; if finished then exit.
.010d69	48		pha				pha 								; save the target address
.010d6a	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.010d6c	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.010d6e	20 a5 04	jsr $0104a5			jsr 	StringMakeConcrete 			; make the string concrete.
.010d71	7a		ply				ply 								; restore the string.
.010d72	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.010d75	80 cb		bra $010d42			bra		_FCNextPass
.010d77					_FCExit:
.010d77	60		rts				rts
.010d78					COLLECTScanVariable:
.010d78	da		phx				phx 								; save XY
.010d79	5a		phy				phy
.010d7a					_CSVLoop:
.010d7a	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d7d	f0 0a		beq $010d89			beq 	_CSVExit
.010d7f	a8		tay				tay 								; put new address into Y
.010d80	18		clc				clc 								; which is four on.
.010d81	69 04 00	adc #$0004			adc 	#4
.010d84	20 ad 0d	jsr $010dad			jsr 	COLLECTCheck
.010d87	80 f1		bra $010d7a			bra 	_CSVLoop
.010d89					_CSVExit:
.010d89	7a		ply				ply
.010d8a	fa		plx				plx
.010d8b	60		rts				rts
.010d8c					COLLECTScanArray:
.010d8c	da		phx				phx 								; save XY
.010d8d	5a		phy				phy
.010d8e					_CSALoop:
.010d8e	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.010d91	f0 17		beq $010daa			beq 	_CSAExit
.010d93	a8		tay				tay 								; put new address in Y
.010d94	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.010d97	aa		tax				tax
.010d98	e8		inx				inx									; +1 as one more data element.
.010d99	98		tya				tya 								; point A to first element, at +6
.010d9a	18		clc				clc
.010d9b	69 06 00	adc #$0006			adc 	#6
.010d9e					_CSADoAllStrings:
.010d9e	20 ad 0d	jsr $010dad			jsr 	COLLECTCheck 				; collect check the first.
.010da1	1a		inc a				inc 	a 							; advance the pointer.
.010da2	1a		inc a				inc 	a
.010da3	1a		inc a				inc 	a
.010da4	1a		inc a				inc 	a
.010da5	ca		dex				dex
.010da6	d0 f6		bne $010d9e			bne 	_CSADoAllStrings 			; until all strings are done.
.010da8	80 e4		bra $010d8e			bra 	_CSALoop
.010daa					_CSAExit:
.010daa	7a		ply				ply
.010dab	fa		plx				plx
.010dac	60		rts				rts
.010dad					COLLECTCheck:
.010dad	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.010daf	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.010db1	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.010db3	90 0a		bcc $010dbf			bcc 	_COCExit
.010db5	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.010db7	b0 06		bcs $010dbf			bcs 	_COCExit
.010db9	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.010dbb	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.010dbd	85 14		sta $14				sta 	DSignCount
.010dbf					_COCExit:
.010dbf	a5 0a		lda $0a				lda 	DTemp1+2
.010dc1	60		rts				rts
.010dc2	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.010dc3					Function_ASSERT:
.010dc3	20 0f 02	jsr $01020f			jsr 	EvaluateInteger 			; something that returns an integer.
.010dc6	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.010dc8	05 08		ora $08				ora 	Dtemp1
.010dca	f0 01		beq $010dcd			beq 	_FAssFail
.010dcc	60		rts				rts
.010dcd					_FAssFail:
.010dcd	20 92 03	jsr $010392			jsr 	ErrorHandler 						; call error routine
>010dd0	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>010dd8	61 69 6c 65 64 00
.010dde					Function_CLS:
.010dde	20 0a 0e	jsr $010e0a			jsr 	HWClearScreen
.010de1	60		rts				rts
.010de2					Function_REM:
.010de2	ea		nop				nop
.010de3	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.010de5	f0 0b		beq $010df2			beq 	_FRemSyntax 				; if 0, syntax error
.010de7	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.010dea	b0 06		bcs $010df2			bcs 	_FRemSyntax
.010dec	18		clc				clc 								; add to DCodePtr
.010ded	65 06		adc $06				adc 	DCodePtr
.010def	85 06		sta $06				sta 	DCodePtr
.010df1	60		rts				rts
.010df2					_FRemSyntax:
.010df2	82 d8 f5	brl $0103cd			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.010df5					SwitchBasicInstance:
.010df5	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.010df7	20 0a 0e	jsr $010e0a			jsr 	HWClearScreen 						; clear screen
.010dfa	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.010dfd	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.010dff	86 02		stx $02				stx		DBaseAddress
.010e01	84 04		sty $04				sty 	DHighAddress
.010e03	eb		xba				xba 										; put the page number (goes in the DBR) in B
.010e04	48		pha				pha 										; then copy it into B.
.010e05	ab		plb				plb
.010e06	ab		plb				plb
.010e07	4c 10 0c	jmp $010c10			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64
=32					sHeight = 32
.010e0a					HWClearScreen:
.010e0a	48		pha				pha
.010e0b	da		phx				phx
.010e0c	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.010e0f	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.010e12	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e16	ca		dex				dex
.010e17	10 f6		bpl $010e0f			bpl 	_CS0
.010e19	64 28		stz $28				stz 	DCursor
.010e1b	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.010e1e	8f 00 00 0f	sta $0f0000			sta 	$F0000
.010e22	fa		plx				plx
.010e23	68		pla				pla
.010e24	60		rts				rts
.010e25					HWPrintChar:
.010e25	48		pha				pha
.010e26	da		phx				phx
.010e27	a6 28		ldx $28				ldx 	DCursor
.010e29	e2 20		sep #$20			sep 	#$20
.010e2b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e2f	c2 20		rep #$20			rep 	#$20
.010e31	e8		inx				inx
.010e32	8a		txa				txa
.010e33	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.010e36	85 28		sta $28				sta 	DCursor
.010e38	aa		tax				tax
.010e39	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.010e3c	e2 20		sep #$20			sep 	#$20
.010e3e	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.010e42	c2 20		rep #$20			rep 	#$20
.010e44	fa		plx				plx
.010e45	68		pla				pla
.010e46	60		rts				rts
.010e47					HWNewLine:
.010e47	48		pha				pha
.010e48	da		phx				phx
.010e49	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.010e4c					HWMoveCursor:
.010e4c	a9 20 00	lda #$0020			lda 	#32
.010e4f	20 25 0e	jsr $010e25			jsr 	HWPrintChar
.010e52	8a		txa				txa
.010e53	25 28		and $28				and 	DCursor
.010e55	d0 f5		bne $010e4c			bne 	HWMoveCursor
.010e57	fa		plx				plx
.010e58	68		pla				pla
.010e59	60		rts				rts
.010e5a	48		pha		HWTab:	pha
.010e5b	da		phx				phx
.010e5c	a2 07 00	ldx #$0007			ldx 	#7
.010e5f	80 eb		bra $010e4c			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	5a 41 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 14 00 05 00 1d 3e 0c 00
>024108	09 41 20 63 6f 6d 6d 65 6e 74 00 00 0c 00 0a 00
>024118	18 c0 06 22 00 40 00 00 08 00 1e 00 2b 3c 00 00
>024128	10 00 32 00 18 c0 06 22 18 c0 0a 24 01 40 00 00
>024138	0e 00 3c 00 2c 3a 18 c0 06 22 10 67 00 00 08 00
>024148	50 00 20 3e 00 00 06 00 51 00 00 00 00 00 ee ee
>024158	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024168	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2024 times (32384 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
