
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Tue Jun 18 16:13:10 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c d6 1c 01	jmp $011cd6			jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	91 05					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	55 0a					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	65 0a					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	75 0a					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	b9 0a					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	20 0b					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	85 0a					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	02 0b					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	e4 0a					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	9f 0a					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	9f 09					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	20 0a					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	2c 0c					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	a9 0b					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	20 0c					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	31 0a					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	43 0a					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	ba 0c					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	9a 0c					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	76 0c					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	60 0c					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	e2 0e					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	02 10					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	f4 0c					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	2c 0d					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	60 0d					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	96 0e					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	b0 0e					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	c7 0e					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	6b 11					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	29 11					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	aa 0d					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	41 0e					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	d3 0d					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	c2 10					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	9c 0d					.word Function_Inkey           & $FFFF ; token $3023 "inkey("
>010048	91 05					.word IllegalToken             & $FFFF ; token $3224 ","
>01004a	91 05					.word IllegalToken             & $FFFF ; token $3225 ";"
>01004c	91 05					.word IllegalToken             & $FFFF ; token $3226 ":"
>01004e	91 05					.word IllegalToken             & $FFFF ; token $3227 "("
>010050	91 05					.word IllegalToken             & $FFFF ; token $3228 ")"
>010052	91 05					.word IllegalToken             & $FFFF ; token $3229 "'"
>010054	91 05					.word IllegalToken             & $FFFF ; token $382a "to"
>010056	91 05					.word IllegalToken             & $FFFF ; token $382b "step"
>010058	3d 1b					.word Function_REM             & $FFFF ; token $3e2c "rem"
>01005a	ad 11					.word Function_Let             & $FFFF ; token $3e2d "let"
>01005c	1e 1b					.word Function_ASSERT          & $FFFF ; token $3e2e "assert"
>01005e	e6 18					.word Function_END             & $FFFF ; token $3e2f "end"
>010060	e9 18					.word Function_RUN             & $FFFF ; token $3e30 "run"
>010062	78 19					.word Function_STOP            & $FFFF ; token $3e31 "stop"
>010064	74 19					.word Function_CLEAR           & $FFFF ; token $3e32 "clear"
>010066	d5 19					.word Function_Dim             & $FFFF ; token $3e33 "dim"
>010068	49 1a					.word Function_COLLECT         & $FFFF ; token $3e34 "collect"
>01006a	39 1b					.word Function_CLS             & $FFFF ; token $3e35 "cls"
>01006c	72 14					.word Function_PRINT           & $FFFF ; token $3e36 "print"
>01006e	74 17					.word Function_GOTO            & $FFFF ; token $3e37 "goto"
>010070	d3 17					.word Function_GOSUB           & $FFFF ; token $3e38 "gosub"
>010072	ef 17					.word Function_RETURN          & $FFFF ; token $3e39 "return"
>010074	31 17					.word Function_ONGOTO          & $FFFF ; token $3e3a "on"
>010076	25 15					.word Handler_ELSE             & $FFFF ; token $3e3b "else"
>010078	d8 1a					.word Command_POKE             & $FFFF ; token $3e3c "poke"
>01007a	f0 1a					.word Command_DOKE             & $FFFF ; token $3e3d "doke"
>01007c	04 1b					.word Command_LOKE             & $FFFF ; token $3e3e "loke"
>01007e	3a 12					.word Command_List             & $FFFF ; token $3e3f "list"
>010080	4f 1b					.word Function_LINK            & $FFFF ; token $3e40 "link"
>010082	65 19					.word Function_NEW             & $FFFF ; token $3e41 "new"
>010084	21 18					.word Function_REPEAT          & $FFFF ; token $3c42 "repeat"
>010086	7f 18					.word Function_WHILE           & $FFFF ; token $3c43 "while"
>010088	be 14					.word Function_IF              & $FFFF ; token $3c44 "if"
>01008a	fa 15					.word Command_FOR              & $FFFF ; token $3c45 "for"
>01008c	b6 18					.word Function_WEND            & $FFFF ; token $3a46 "wend"
>01008e	38 18					.word Function_UNTIL           & $FFFF ; token $3a47 "until"
>010090	91 05					.word IllegalToken             & $FFFF ; token $3a48 "then"
>010092	53 15					.word Handler_ENDIF            & $FFFF ; token $3a49 "endif"
>010094	75 16					.word Command_NEXT             & $FFFF ; token $3a4a "next"
.010096					TokenText:
>010096	02 26					 .text $02,"&"        ; token $2001
>010098	02 7c					 .text $02,"|"        ; token $2002
>01009a	02 5e					 .text $02,"^"        ; token $2003
>01009c	12 3c					 .text $12,"<"        ; token $2204
>01009e	12 3e					 .text $12,">"        ; token $2205
>0100a0	12 3d					 .text $12,"="        ; token $2206
>0100a2	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a5	13 3e 3d				 .text $13,">="       ; token $2208
>0100a8	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100ab	22 2b					 .text $22,"+"        ; token $240a
>0100ad	22 2d					 .text $22,"-"        ; token $240b
>0100af	32 2a					 .text $32,"*"        ; token $260c
>0100b1	32 2f					 .text $32,"/"        ; token $260d
>0100b3	32 25					 .text $32,"%"        ; token $260e
>0100b5	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b8	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100bb	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100c0	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c5	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100ca	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cf	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d4	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100da	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100e0	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e5	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100ea	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100f0	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f6	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100fc	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010104	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>01010c	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>010113	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010119	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>010121	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010128	87 49 4e 4b 45 59 28			 .text $87,"INKEY("   ; token $3023
>01012f	92 2c					 .text $92,","        ; token $3224
>010131	92 3b					 .text $92,";"        ; token $3225
>010133	92 3a					 .text $92,":"        ; token $3226
>010135	92 28					 .text $92,"("        ; token $3227
>010137	92 29					 .text $92,")"        ; token $3228
>010139	92 27					 .text $92,"'"        ; token $3229
>01013b	c3 54 4f				 .text $c3,"TO"       ; token $382a
>01013e	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382b
>010143	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2c
>010147	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2d
>01014b	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2e
>010152	f4 45 4e 44				 .text $f4,"END"      ; token $3e2f
>010156	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e30
>01015a	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e31
>01015f	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e32
>010165	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e33
>010169	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e34
>010171	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e35
>010175	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e36
>01017b	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e37
>010180	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e38
>010186	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e39
>01018d	f3 4f 4e				 .text $f3,"ON"       ; token $3e3a
>010190	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3b
>010195	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3c
>01019a	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3d
>01019f	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3e
>0101a4	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3f
>0101a9	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e40
>0101ae	f4 4e 45 57				 .text $f4,"NEW"      ; token $3e41
>0101b2	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c42
>0101b9	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c43
>0101bf	e3 49 46				 .text $e3,"IF"       ; token $3c44
>0101c2	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c45
>0101c6	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a46
>0101cb	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a47
>0101d1	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a48
>0101d6	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a49
>0101dc	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a4a
>0101e1	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3023					inkeylparenTokenID               = $3023
=$3224					commaTokenID                     = $3224
=$3225					semicolonTokenID                 = $3225
=$3226					colonTokenID                     = $3226
=$3227					lparenTokenID                    = $3227
=$3228					rparenTokenID                    = $3228
=$3229					squoteTokenID                    = $3229
=$382a					toTokenID                        = $382a
=$382b					stepTokenID                      = $382b
=$3e2c					remTokenID                       = $3e2c
=$3e2d					letTokenID                       = $3e2d
=$3e2e					assertTokenID                    = $3e2e
=$3e2f					endTokenID                       = $3e2f
=$3e30					runTokenID                       = $3e30
=$3e31					stopTokenID                      = $3e31
=$3e32					clearTokenID                     = $3e32
=$3e33					dimTokenID                       = $3e33
=$3e34					collectTokenID                   = $3e34
=$3e35					clsTokenID                       = $3e35
=$3e36					printTokenID                     = $3e36
=$3e37					gotoTokenID                      = $3e37
=$3e38					gosubTokenID                     = $3e38
=$3e39					returnTokenID                    = $3e39
=$3e3a					onTokenID                        = $3e3a
=$3e3b					elseTokenID                      = $3e3b
=$3e3c					pokeTokenID                      = $3e3c
=$3e3d					dokeTokenID                      = $3e3d
=$3e3e					lokeTokenID                      = $3e3e
=$3e3f					listTokenID                      = $3e3f
=$3e40					linkTokenID                      = $3e40
=$3e41					newTokenID                       = $3e41
=$3c42					repeatTokenID                    = $3c42
=$3c43					whileTokenID                     = $3c43
=$3c44					ifTokenID                        = $3c44
=$3c45					forTokenID                       = $3c45
=$3a46					wendTokenID                      = $3a46
=$3a47					untilTokenID                     = $3a47
=$3a48					thenTokenID                      = $3a48
=$3a49					endifTokenID                     = $3a49
=$3a4a					nextTokenID                      = $3a4a

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.0101e2					Evaluate:
.0101e2	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101e5	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101e8					EvaluateLevel:
.0101e8	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101eb	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101ed	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101ef	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101f2	b0 79		bcs $01026d			bcs 	_ELVariable
.0101f4	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101f7	b0 16		bcs $01020f			bcs 	_ELConstant
.0101f9	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101fc	90 7f		bcc $01027d			bcc 	_ELStringConstant
.0101fe	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.010201	90 03		bcc $010206			bcc 	_ELConstantShift
.010203	82 94 00	brl $01029a			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.010206					_ELConstantShift:
.010206	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.010209	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.01020b	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.01020d	e6 06		inc $06				inc 	DCodePtr
.01020f					_ELConstant:
.01020f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010211	38		sec				sec  								; shift it in the range 0-32767
.010212	e9 00 40	sbc #$4000			sbc 	#$4000
.010215	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010216	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010218	6a		ror a				ror 	a 							; rotate that into the constant value
.010219	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01021b	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01021d	95 20		sta $20,x			sta 	EXSValueH+0,x
.01021f	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010221	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010223	e6 06		inc $06				inc 	DCodePtr
.010225					_ELGotAtom:
.010225	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010227	a8		tay				tay 								; save in Y
.010228	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01022b	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01022e	d0 35		bne $010265			bne 	_ELExit
.010230	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010232	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010235	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010237	98		tya				tya 								; get the keyword token back
.010238	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01023b	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01023d	90 26		bcc $010265			bcc 	_ELExit 					; precedence too low, then exit.
.01023f	5a		phy				phy 								; save the binary operator on the stack
.010240	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010242	e6 06		inc $06				inc 	DCodePtr
.010244	18		clc				clc 								; try the next level up
.010245	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010248	e8		inx				inx 								; calculate the RHS at the next stack level.
.010249	e8		inx				inx
.01024a	20 e8 01	jsr $0101e8			jsr 	EvaluateLevel
.01024d	ca		dex				dex
.01024e	ca		dex				dex
.01024f	7a		ply				ply 								; get operator token back into Y
.010250					_ELExecuteY:
.010250	98		tya				tya
.010251	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010254	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010255	9b		txy				txy 								; save X in Y
.010256	aa		tax				tax 								; double keyword ID in X
.010257	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01025b	bb		tyx				tyx 								; restore X.
.01025c	8f 61 02 01	sta $010261			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010260					_ELCallRoutine:
.010260	20 60 02	jsr $010260			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010263	80 c0		bra $010225			bra 	_ELGotAtom 					; go round operator level again.
.010265	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010267	0a		asl a				asl 	a
.010268	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01026a	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01026c	60		rts				rts
.01026d					_ELVariable:
.01026d	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.01026f	20 2e 03	jsr $01032e			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010272	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010274	94 20		sty $20,x			sty 	EXSValueH+0,x
.010276	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010278	80 ab		bra $010225			bra 	_ELGotAtom
.01027a					_ELSyntax
.01027a	82 25 03	brl $0105a2			brl 	SyntaxError
.01027d					_ELStringConstant:
.01027d	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010280	f0 f8		beq $01027a			beq 	_ELSyntax
.010282	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010284	1a		inc a				inc 	a
.010285	1a		inc a				inc 	a
.010286	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010288	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01028a	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01028c	18		clc				clc 								; add to string constant.
.01028d	65 06		adc $06				adc 	DCodePtr
.01028f	85 06		sta $06				sta 	DCodePtr
.010291	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010293	09 00 80	ora #$8000			ora 	#$8000
.010296	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010298	80 8b		bra $010225			bra 	_ELGotAtom
.01029a					_ELUnaryKeyword:
.01029a	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01029c	a8		tay				tay 								; put the token in Y.
.01029d	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.01029f	e6 06		inc $06				inc 	DCodePtr
.0102a1	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.0102a4	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.0102a7	f0 a7		beq $010250			beq 	_ELExecuteY					; go back and execute it
.0102a9	c0 27 32	cpy #$3227			cpy 	#lparenTokenID 				; is it an open bracket ?
.0102ac	d0 11		bne $0102bf			bne 	_ELUnaryOperator 			; it not, try unary operators.
.0102ae	20 e5 02	jsr $0102e5			jsr 	EvaluateNext 				; evaluate the expression
.0102b1	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102b4					_ELCopy:
.0102b4	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102b6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102b8	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ba	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102bc	82 66 ff	brl $010225			brl 	_ELGotAtom 					; and continue.
.0102bf					_ELUnaryOperator:
.0102bf	5a		phy				phy 								; save the operator on the stack.
.0102c0	e8		inx				inx 								; this is like evaluate next
.0102c1	e8		inx				inx
.0102c2	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102c5	20 e8 01	jsr $0101e8			jsr 	EvaluateLevel
.0102c8	ca		dex				dex 								; unwind the stack.
.0102c9	ca		dex				dex
.0102ca	68		pla				pla 								; restore the unary operator.
.0102cb	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102ce	f0 03		beq $0102d3			beq 	_ELMinus
.0102d0	4c a2 05	jmp $0105a2			jmp 	SyntaxError
.0102d3					_ELMinus:
.0102d3	38		sec				sec 								; do the negation calculation.
.0102d4	a9 00 00	lda #$0000			lda 	#0
.0102d7	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102d9	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102db	a9 00 00	lda #$0000			lda 	#0
.0102de	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102e0	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102e2	82 40 ff	brl $010225			brl 	_ELGotAtom					; and continue.
.0102e5					EvaluateNext:
.0102e5	e8		inx				inx
.0102e6	e8		inx				inx
.0102e7	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102ea	20 e8 01	jsr $0101e8			jsr 	EvaluateLevel
.0102ed	ca		dex				dex
.0102ee	ca		dex				dex
.0102ef	60		rts				rts
.0102f0					EvaluateInteger:
.0102f0	20 e2 01	jsr $0101e2			jsr 	Evaluate
.0102f3	b0 01		bcs $0102f6			bcs 	EIType
.0102f5	60		rts				rts
.0102f6					EIType:
.0102f6	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0102f9	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>010301	78 70 65 63 74 65 64 00
.010309					EvaluateNextInteger:
.010309	20 e5 02	jsr $0102e5			jsr 	EvaluateNext
.01030c	b0 e8		bcs $0102f6			bcs 	EIType
.01030e	60		rts				rts
.01030f					EvaluateString:
.01030f	20 e2 01	jsr $0101e2			jsr 	Evaluate
.010312	90 01		bcc $010315			bcc 	ESType
.010314	60		rts				rts
.010315					ESType:
.010315	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010318	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010320	78 70 65 63 74 65 64 00
.010328					EvaluateNextString:
.010328	20 e5 02	jsr $0102e5			jsr 	EvaluateNext
.01032b	90 e8		bcc $010315			bcc 	ESType
.01032d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable.asm

.01032e					VariableAccessExpression:
.01032e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010330	48		pha				pha
.010331	20 6f 03	jsr $01036f			jsr 	VariableFind 				; try to find the variables
.010334	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010336	90 23		bcc $01035b			bcc 	_VANError 					; not found, so report an error.
.010338	68		pla				pla 								; get and save that first token
.010339	48		pha				pha 								; we use it for typing.
.01033a	a8		tay				tay 								; put first token in Y.
.01033b	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01033e	f0 07		beq $010347			beq 	_VANNotArray
.010340	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010342	20 e6 03	jsr $0103e6			jsr 	VariableSubscript			; index calculation
.010345	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010347					_VANNotArray:
.010347	68		pla				pla 								; get the token back.
.010348	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01034b	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01034e	38		sec				sec 								; set up return string.
.01034f	f0 06		beq $010357			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010351	18		clc				clc 								; returning a number, read high data word
.010352	a0 02 00	ldy #$0002			ldy 	#2
.010355	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010357					_VANLoadLower:
.010357	a8		tay				tay 								; put A into Y (this is the high byte)
.010358	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01035a	60		rts				rts
.01035b					_VANError:
.01035b	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01035e	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010366	20 75 6e 6b 6e 6f 77 6e 00
.01036f					VariableFind:
.01036f	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010371	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010374	90 5c		bcc $0103d2			bcc 	_VFError
.010376	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010379	b0 11		bcs $01038c			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01037b	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01037e	3a		dec a				dec 	a 							; now 0-25
.01037f	0a		asl a				asl 	a 							; x 4 and clear carry
.010380	0a		asl a				asl 	a
.010381	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010384	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010386	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010388	e6 06		inc $06				inc 	DCodePtr
.01038a	38		sec				sec 								; return with carry set.
.01038b	60		rts				rts
.01038c					_VFSlowVariable:
.01038c	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01038e	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010391	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010392	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010393	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010396	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010398	85 08		sta $08				sta 	DTemp1
.01039a	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01039c	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.01039f	0a		asl a				asl 	a 							; double (word entries) and clear carry
.0103a0	65 08		adc $08				adc 	DTemp1
.0103a2	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.0103a4	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.0103a6					_VFNext:
.0103a6	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.0103a8	f0 26		beq $0103d0			beq 	_VFFail 					; if zero, then it's the end of the list.
.0103aa	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.0103ac	a8		tay				tay 								; read the address of the name at $0002,y
.0103ad	b9 02 00	lda $0002,y			lda 	$0002,y
.0103b0	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103b2	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103b5					_VFCompare:
.0103b5	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103b7	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103b9	d0 eb		bne $0103a6			bne 	_VFNext 					; if not, go to the next one.
.0103bb	c8		iny				iny 								; advance token pointer
.0103bc	c8		iny				iny
.0103bd	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103c0	d0 f3		bne $0103b5			bne 	_VFCompare
.0103c2	98		tya				tya 								; this is the length of the word.
.0103c3	18		clc				clc 								; so we add it to the code pointer
.0103c4	65 06		adc $06				adc 	DCodePtr
.0103c6	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103c8	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103ca	18		clc				clc 								; four on is the actual data
.0103cb	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103ce	38		sec				sec 								; return with CS indicating success
.0103cf	60		rts				rts
.0103d0					_VFFail:
.0103d0	18		clc				clc
.0103d1	60		rts				rts
.0103d2					_VFError:
.0103d2	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0103d5	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103dd	76 61 72 69 61 62 6c 65 00
.0103e6					VariableSubscript:
.0103e6	48		pha				pha		 							; save variable address on stack.
.0103e7	20 09 03	jsr $010309			jsr		EvaluateNextInteger 		; get the subscript
.0103ea	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; skip right bracket.
.0103ed	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103f0	d0 10		bne $010402			bne 	_VANSubscript
.0103f2	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103f4	f0 02		beq $0103f8			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103f6	b0 0a		bcs $010402			bcs 	_VANSubscript
.0103f8					_VANSubOkay:
.0103f8	0a		asl a				asl 	a 							; double lsword
.0103f9	0a		asl a				asl 	a 							; and again, also clears carry.
.0103fa	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103fc	68		pla				pla 								; restore DVariablePtr
.0103fd	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103fe	1a		inc a				inc 	a
.0103ff	65 08		adc $08				adc 	DTemp1 						; add the subscript
.010401	60		rts				rts
.010402					_VANSubscript:
.010402	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010405	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>01040d	79 20 53 75 62 73 63 72 69 70 74 00
.010419					VariableCreate:
.010419	48		pha				pha 								; save count.
.01041a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01041d	29 00 20	and #$2000			and 	#IDTypeMask
.010420	f0 06		beq $010428			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010422	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010425	18		clc				clc 								; which is guaranteed by have a 0 length.
.010426	65 02		adc $02				adc 	DBaseAddress
.010428					_VCIsInteger:
.010428	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01042a	68		pla				pla 								; restore count
.01042b	48		pha				pha
.01042c	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01042d	0a		asl a				asl 	a 							; 2 x # items.
.01042e	0a		asl a				asl 	a 							; 4 x # items.
.01042f					_VCNotSingle:
.01042f	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010431	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010434	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010437	f0 04		beq $01043d			beq 	_VCNotArray
.010439	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01043b	e6 08		inc $08				inc 	DTemp1
.01043d					_VCNotArray:
.01043d	5a		phy				phy 								; save address of first token on stack.
.01043e	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010441	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010443	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010445	18		clc				clc 								; add 4 for link and name words
.010446	69 04 00	adc #$0004			adc 	#4
.010449	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01044b	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.01044f					_VCErase:
.01044f	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010451	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010454	c8		iny				iny
.010455	c8		iny				iny
.010456	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010458	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01045a	d0 f3		bne $01044f			bne 	_VCErase
.01045c	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01045e	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010460	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010463	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; work out the program start
.010466	18		clc				clc
.010467	65 02		adc $02				adc 	DBaseAddress
.010469	85 08		sta $08				sta 	DTemp1
.01046b	68		pla				pla 								; restore the token address
.01046c	c5 08		cmp $08				cmp 	DTemp1 						; if it is below the program start we need to clone it.
.01046e	b0 03		bcs $010473			bcs 	_VCDontClone 				; because the variable being created has its identifier
.010470	20 82 04	jsr $010482			jsr 	VCCloneIdentifier	 		; in the token workspace, done via the command line
.010473					_VCDontClone:
.010473	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010476	68		pla				pla 								; restore count and store.
.010477	99 04 00	sta $0004,y			sta 	$0004,y
.01047a	98		tya				tya 								; update the head link
.01047b	92 20		sta ($20)			sta 	(DHashTablePtr)
.01047d	18		clc				clc 								; advance pointer to the data bit.
.01047e	69 04 00	adc #$0004			adc 	#4
.010481	60		rts				rts 								; and done.
.010482					VCCloneIdentifier:
.010482	da		phx				phx 								; save XY
.010483	5a		phy				phy
.010484	aa		tax				tax 								; identifier address in Y.
.010485	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr		 	; get low memory address, this will be the new identifier.
.010488	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01048a	48		pha				pha
.01048b					_VCCloneLoop:
.01048b	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01048e	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010490	48		pha				pha 								; save on stack
.010491	1a		inc a				inc 	a 							; space for one token.
.010492	1a		inc a				inc 	a
.010493	91 02		sta ($02),y			sta 	(DBaseAddress),y
.010495	7a		ply				ply 								; address of word in Y
.010496	bd 00 00	lda $0000,x			lda 	@w$0000,x 					; read the token
.010499	99 00 00	sta $0000,y			sta 	$0000,y 					; copy it into that new byte.
.01049c	e8		inx				inx 								; advance the token pointer
.01049d	e8		inx				inx
.01049e	29 00 08	and #$0800			and 	#IDContMask 				; continuation ?
.0104a1	d0 e8		bne $01048b			bne 	_VCCloneLoop
.0104a3	68		pla				pla 								; restore start address
.0104a4	7a		ply				ply 								; and the others
.0104a5	fa		plx				plx
.0104a6	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/editline.asm

.0104a7					LineDelete:
.0104a7	aa		tax				tax 	 							; this is the one we're looking for ....
.0104a8	a5 02		lda $02				lda 	DBaseAddress 				; work the start position
.0104aa	18		clc				clc
.0104ab	69 00 02	adc #$0200			adc 	#Block_ProgramStart
.0104ae	a8		tay				tay
.0104af					_LDLoop:
.0104af	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at the link
.0104b2	f0 2d		beq $0104e1			beq 	_LDExit						; exit if zero ; line does not exist
.0104b4	8a		txa				txa 								; found a match
.0104b5	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0104b8	f0 08		beq $0104c2			beq		_LDFound
.0104ba	98		tya				tya 								; follow the link.
.0104bb	18		clc				clc
.0104bc	79 00 00	adc $0000,y			adc 	$0000,y
.0104bf	a8		tay				tay
.0104c0	80 ed		bra $0104af			bra 	_LDLoop
.0104c2					_LDFound:
.0104c2	84 08		sty $08				sty 	DTemp1 						; copy to DTemp1
.0104c4	98		tya				tya 								; follow link to next.
.0104c5	18		clc				clc
.0104c6	79 00 00	adc $0000,y			adc 	$0000,y
.0104c9	85 0c		sta $0c				sta 	DTemp2 						; copy from DTemp2
.0104cb	20 bf 19	jsr $0119bf			jsr 	FindCodeEnd 				; find the end of the code.
.0104ce	38		sec				sec
.0104cf	e5 0c		sbc $0c				sbc 	DTemp2 						; copy count
.0104d1	1a		inc a				inc 	a 							; copy the $0000 trailer (e.g. the last link/offset)
.0104d2	1a		inc a				inc 	a
.0104d3	aa		tax				tax
.0104d4	a0 00 00	ldy #$0000			ldy 	#0 							; block copy memory down.
.0104d7	b1 0c		lda ($0c),y	_LDCopy:lda 	(DTemp2),y
.0104d9	91 08		sta ($08),y			sta 	(DTemp1),y
.0104db	c8		iny				iny
.0104dc	c8		iny				iny
.0104dd	ca		dex				dex
.0104de	ca		dex				dex
.0104df	d0 f6		bne $0104d7			bne 	_LDCopy
.0104e1					_LDExit:
.0104e1	60		rts				rts
.0104e2					LineInsert:
.0104e2	84 08		sty $08				sty 	DTemp1 						; save code in DTemp1
.0104e4	85 0c		sta $0c				sta 	DTemp2 						; save Line # in DTemp2
.0104e6	a0 00 00	ldy #$0000			ldy 	#0
.0104e9					_LIFindLength:
.0104e9	b1 08		lda ($08),y			lda 	(DTemp1),y 					; examine token
.0104eb	c9 00 00	cmp #$0000			cmp 	#$0000 						; if $0000 then found the end
.0104ee	f0 10		beq $010500			beq 	_LIFindEnd
.0104f0	c9 00 01	cmp #$0100			cmp 	#$0100 						; if < $0100 then just skip it
.0104f3	90 04		bcc $0104f9			bcc 	_LIQString
.0104f5	c8		iny				iny 								; otherwise just skip it.
.0104f6	c8		iny				iny
.0104f7	80 f0		bra $0104e9			bra 	_LIFindLength
.0104f9					_LIQString:
.0104f9	98		tya				tya 								; skip quoted strings
.0104fa	18		clc				clc
.0104fb	71 08		adc ($08),y			adc 	(DTemp1),y
.0104fd	a8		tay				tay
.0104fe	80 e9		bra $0104e9			bra 	_LIFindLength
.010500					_LIFindEnd:
.010500	98		tya				tya 								; the tokens in the line
.010501	18		clc				clc
.010502	69 06 00	adc #$0006			adc 	#6 							; add 6. One for the ending zero, one for line, one for offset.
.010505	85 24		sta $24				sta 	DTemp3 						; save this in DTemp3
.010507	a9 00 02	lda #$0200			lda 	#Block_ProgramStart
.01050a	18		clc				clc
.01050b	65 02		adc $02				adc 	DBaseAddress
.01050d	a8		tay				tay
.01050e					_LIFindInsertPoint:
.01050e	b9 00 00	lda $0000,y			lda 	$0000,y						; if offset is zero, end, so insert here.
.010511	f0 0f		beq $010522			beq		_LIFoundInsertPoint
.010513	b9 02 00	lda $0002,y			lda 	$0002,y 					; if line number here > line number required insert here.
.010516	c5 0c		cmp $0c				cmp 	DTemp2
.010518	b0 08		bcs $010522			bcs 	_LIFoundInsertPoint
.01051a	98		tya				tya 								; if < go to the next line.
.01051b	18		clc				clc
.01051c	79 00 00	adc $0000,y			adc 	$0000,y
.01051f	a8		tay				tay
.010520	80 ec		bra $01050e			bra 	_LIFindInsertPoint
.010522					_LIFoundInsertPoint:
.010522	84 36		sty $36				sty 	DTemp5 						; save in DTemp5
.010524	20 bf 19	jsr $0119bf			jsr 	FindCodeEnd 				; get the end of the code.
.010527	85 32		sta $32				sta 	DTemp4 						; save in DTemp4
.010529	18		clc				clc
.01052a	65 24		adc $24				adc 	DTemp3
.01052c	85 34		sta $34				sta 	DTemp4+2 					; copying it to DTemp4 + length.
.01052e					_LICopyMove:
.01052e	b2 32		lda ($32)			lda 	(DTemp4) 					; copy the word
.010530	92 34		sta ($34)			sta 	(DTemp4+2)
.010532	a5 32		lda $32				lda 	DTemp4 						; reached the insert point
.010534	c5 36		cmp $36				cmp 	DTemp5
.010536	f0 0a		beq $010542			beq 	_LICopyMoveOver
.010538	c6 32		dec $32				dec 	DTemp4 						; shift all pointers.
.01053a	c6 32		dec $32				dec 	DTemp4
.01053c	c6 34		dec $34				dec 	DTemp4+2
.01053e	c6 34		dec $34				dec 	DTemp4+2
.010540	80 ec		bra $01052e			bra 	_LICopyMove
.010542					_LICopyMoveOver:
.010542	a5 24		lda $24				lda 	DTemp3 						; copy the length in, this is the offset
.010544	92 36		sta ($36)			sta 	(DTemp5)
.010546	a0 02 00	ldy #$0002			ldy 	#2
.010549	a5 0c		lda $0c				lda 	DTemp2 						; copy the line number in.
.01054b	91 36		sta ($36),y			sta 	(DTemp5),y
.01054d	a0 04 00	ldy #$0004			ldy 	#4
.010550					_LICopyTokens:
.010550	b2 08		lda ($08)			lda 	(DTemp1) 					; copy token over.
.010552	91 36		sta ($36),y			sta 	(DTemp5),y
.010554	c8		iny				iny
.010555	c8		iny				iny
.010556	e6 08		inc $08				inc 	DTemp1
.010558	e6 08		inc $08				inc 	DTemp1
.01055a	c6 24		dec $24				dec 	DTemp3 						; count - 4 times.
.01055c	c6 24		dec $24				dec 	DTemp3
.01055e	a5 24		lda $24				lda 	DTemp3
.010560	c9 04 00	cmp #$0004			cmp 	#4
.010563	d0 eb		bne $010550			bne 	_LICopyTokens
.010565	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/utility.asm

.010566					ErrorHandler:
.010566	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010568	fa		plx				plx 								; address of error message -1
.010569	e8		inx				inx 								; error message.
.01056a	20 0e 06	jsr $01060e			jsr 	PrintROMMessage 			; print message in ROM
.01056d	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01056f	f0 15		beq $010586			beq 	_EHEndMessage
.010571	a2 8c 05	ldx #$058c			ldx 	#_EHAt & $FFFF 				; print " at "
.010574	20 0e 06	jsr $01060e			jsr 	PrintROMMessage
.010577	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010579	a0 00 00	ldy #$0000			ldy 	#0
.01057c	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01057f	20 1d 10	jsr $01101d			jsr 	ConvertToString 			; convert and print it.
.010582	a8		tay				tay
.010583	20 2c 06	jsr $01062c			jsr 	PrintBASICString
.010586					_EHEndMessage:
.010586	20 fc 1b	jsr $011bfc			jsr 	HWNewLine
.010589	4c 00 1d	jmp $011d00			jmp 	NextCommand 				; get next command.
>01058c	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010591					IllegalToken:
.010591	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010594	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01059c	54 6f 6b 65 6e 00
.0105a2					SyntaxError:
.0105a2	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0105a5	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0105ad	72 72 6f 72 00
.0105b2					ExpectToken:
.0105b2	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0105b4	d0 05		bne $0105bb			bne 	_CTKError					; error if not
.0105b6	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0105b8	e6 06		inc $06				inc 	DCodePtr
.0105ba	60		rts				rts
.0105bb					_CTKError:
.0105bb	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0105be	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0105c6	74 6f 6b 65 6e 00
.0105cc					ExpectRightBracket:
.0105cc	48		pha				pha
.0105cd	a9 28 32	lda #$3228			lda 	#rparenTokenID
.0105d0	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.0105d3	68		pla				pla
.0105d4	60		rts				rts
.0105d5					ExpectComma:
.0105d5	48		pha				pha
.0105d6	a9 24 32	lda #$3224			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0105d9	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.0105dc	68		pla				pla
.0105dd	60		rts				rts
.0105de					CheckBothNumeric:
.0105de	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0105e0	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0105e2	30 01		bmi $0105e5			bmi 	_CBNFail 					; need to both be zero in bit 15
.0105e4	60		rts				rts
.0105e5					_CBNFail:
.0105e5	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0105e8	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0105f0	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0105fe					ResetTypeInteger:
.0105fe	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010600	29 ff 7f	and #$7fff			and 	#$7FFF
.010603	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010605	60		rts				rts
.010606					ResetTypeString:
.010606	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010608	09 00 80	ora #$8000			ora 	#$8000
.01060b	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01060d	60		rts				rts
.01060e					PrintROMMessage:
.01060e	48		pha				pha
.01060f	da		phx				phx
.010610					_PRMLoop:
.010610	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010614	29 ff 00	and #$00ff			and 	#$00FF
.010617	f0 10		beq $010629			beq 	_PRMExit
.010619	c9 0d 00	cmp #$000d			cmp 	#13
.01061c	d0 05		bne $010623			bne 	_PRMChar
.01061e	20 fc 1b	jsr $011bfc			jsr 	HWNewLine
.010621	80 03		bra $010626			bra 	_PRMNext
.010623					_PRMChar:
.010623	20 ab 1b	jsr $011bab			jsr 	HWPrintChar
.010626					_PRMNext:
.010626	e8		inx				inx
.010627	80 e7		bra $010610			bra 	_PRMLoop
.010629					_PRMExit:
.010629	fa		plx				plx
.01062a	68		pla				pla
.01062b	60		rts				rts
.01062c					PrintBASICString:
.01062c	48		pha				pha
.01062d	da		phx				phx
.01062e	5a		phy				phy
.01062f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010632	29 ff 00	and #$00ff			and 	#$00FF
.010635	f0 0b		beq $010642			beq 	_PBSExit 					; null string
.010637	aa		tax				tax
.010638					_PBSLoop:
.010638	c8		iny				iny
.010639	b9 00 00	lda $0000,y			lda 	$0000,y
.01063c	20 ab 1b	jsr $011bab			jsr 	HWPrintChar
.01063f	ca		dex				dex
.010640	d0 f6		bne $010638			bne 	_PBSLoop
.010642					_PBSExit:
.010642	7a		ply				ply
.010643	fa		plx				plx
.010644	68		pla				pla
.010645	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/stringutils.asm

.010646					StringTempAllocate:
.010646	48		pha				pha
.010647	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010649	d0 09		bne $010654			bne 	_STANoReset
.01064b	5a		phy				phy 								; reset the temp string pointer.
.01064c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01064f	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010651	85 16		sta $16				sta 	DTempStringPointer
.010653	7a		ply				ply
.010654					_STANoReset:
.010654	68		pla				pla 								; get length.
.010655	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010658	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01065b	18		clc				clc 								; this adds one, for the length.
.01065c	65 16		adc $16				adc 	DTempStringPointer
.01065e	85 16		sta $16				sta 	DTempStringPointer
.010660	48		pha				pha 								; save start address
.010661	a9 00 00	lda #$0000			lda 	#$0000
.010664	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010666	92 16		sta ($16)			sta		(DTempStringPointer)
.010668	c2 20		rep #$20			rep 	#$20
.01066a	68		pla				pla 								; restore start address
.01066b	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01066d	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01066f	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010671	60		rts				rts
.010672					StringWriteCharacter:
.010672	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010674	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010676	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010678	1a		inc a				inc 	a
.010679	92 18		sta ($18)			sta 	(DStartTempString)
.01067b	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01067d	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01067f	60		rts				rts
.010680					StringCreateCopy:
.010680	a8		tay				tay 								; put pointer to string in Y
.010681	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010684	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010687	f0 17		beq $0106a0			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010689	da		phx				phx 								; save X and put the character count in X
.01068a	aa		tax				tax
.01068b					_SCCCopy:
.01068b	c8		iny				iny 								; advance and read (first time skips length)
.01068c	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01068e	b9 00 00	lda $0000,y			lda 	$0000,y
.010691	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010693	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010695	1a		inc a				inc 	a
.010696	92 18		sta ($18)			sta 	(DStartTempString)
.010698	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01069a	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01069c	ca		dex				dex 								; do X times
.01069d	d0 ec		bne $01068b			bne 	_SCCCopy
.01069f	fa		plx				plx
.0106a0					_SCCExit:
.0106a0	60		rts				rts
.0106a1					StringMakeConcrete:
.0106a1	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0106a4	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0106a6	90 0f		bcc $0106b7			bcc 	_SMCExit
.0106a8	85 08		sta $08				sta 	DTemp1 						; source
.0106aa	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0106ac	29 ff 00	and #$00ff			and 	#$00FF
.0106af	d0 07		bne $0106b8			bne 	_SMCNonZero 				; if not "" skip.
.0106b1	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0106b4	18		clc				clc 								; this reference is used for all empty strings.
.0106b5	65 02		adc $02				adc 	DBaseAddress
.0106b7					_SMCExit:
.0106b7	60		rts				rts
.0106b8					_SMCNonZero:
.0106b8	48		pha				pha 								; save on stack.
.0106b9	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0106bc	18		clc				clc
.0106bd	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0106c0	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0106c2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0106c4	85 0c		sta $0c				sta 	DTemp2 						; target
.0106c6	7a		ply				ply 								; get length copy from here until Y goes -ve
.0106c7	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0106c9					_SMCLoop:
.0106c9	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0106cb	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0106cd	88		dey				dey 								; Y+1 times.
.0106ce	10 f9		bpl $0106c9			bpl 	_SMCLoop
.0106d0	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0106d2	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0106d4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/tokeniser.asm

.0106d5					Tokenise:
.0106d5	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0106d7	84 0a		sty $0a				sty 	DTemp1+2
.0106d9	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0106dc	18		clc				clc
.0106dd	65 02		adc $02				adc 	DBaseAddress
.0106df	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0106e1	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0106e4	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0106e7					_TOKCap:
.0106e7	c8		iny				iny 								; go to next
.0106e8	b7 08		lda [$08],y			lda 	[DTemp1],y
.0106ea	29 ff 00	and #$00ff			and 	#$00FF
.0106ed	f0 22		beq $010711			beq 	_TOKEndCap
.0106ef	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0106f2	d0 01		bne $0106f5			bne 	_TOKNotQuote
.0106f4	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0106f5					_TOKNotQuote:
.0106f5	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0106f8	90 ed		bcc $0106e7			bcc 	_TOKCap
.0106fa	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0106fd	b0 e8		bcs $0106e7			bcs 	_TOKCap
.0106ff	8a		txa				txa 								; check if in quotes
.010700	4a		lsr a				lsr 	a
.010701	b0 e4		bcs $0106e7			bcs 	_TOKCap
.010703	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.010705	38		sec				sec
.010706	e9 20 00	sbc #$0020			sbc 	#32
.010709	e2 20		sep #$20			sep 	#$20
.01070b	97 08		sta [$08],y			sta 	[DTemp1],y
.01070d	c2 20		rep #$20			rep 	#$20
.01070f	80 d6		bra $0106e7			bra 	_TOKCap
.010711					_TOKEndCap:
.010711	c6 08		dec $08				dec 	DTemp1
.010713					_TOKMainNext:
.010713	e6 08		inc $08				inc 	DTemp1
.010715					_TOKMainLoop:
.010715	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010717	29 ff 00	and #$00ff			and 	#$00FF
.01071a	c9 20 00	cmp #$0020			cmp 	#32
.01071d	90 1d		bcc $01073c			bcc 	_TOKExit 					; 0-31 exit.
.01071f	f0 f2		beq $010713			beq 	_TOKMainNext 				; 32 (space) skip.
.010721	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010724	f0 1d		beq $010743			beq 	_TOKString
.010726	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010729	90 1d		bcc $010748			bcc 	_TOKPunctuation
.01072b	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.01072e	90 42		bcc $010772			bcc 	_TOKNumber
.010730	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010733	90 13		bcc $010748			bcc 	_TOKPunctuation
.010735	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010738	90 3d		bcc $010777			bcc 	_TOKIdentifier
.01073a	80 0c		bra $010748			bra 	_TOKPunctuation 			; 91-   punctuation.
.01073c					_TOKExit:
.01073c	a9 00 00	lda #$0000			lda 	#$0000
.01073f	20 7c 07	jsr $01077c			jsr 	TOKWriteToken
.010742	60		rts				rts
.010743					_TOKString:
.010743	20 1a 08	jsr $01081a			jsr 	TOKQuotedString
.010746	80 cd		bra $010715			bra 	_TOKMainLoop
.010748					_TOKPunctuation:
.010748	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01074b	20 81 08	jsr $010881			jsr 	TOKKeywordSearch
.01074e	b0 1d		bcs $01076d			bcs 	_TOKFoundPunctuation
.010750	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010753	20 81 08	jsr $010881			jsr 	TOKKeywordSearch
.010756	b0 15		bcs $01076d			bcs 	_TOKFoundPunctuation
.010758	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01075b	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010763	61 72 73 65 20 6c 69 6e 65 00
.01076d					_TOKFoundPunctuation:
.01076d	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; output the token and go round again.
.010770	80 a3		bra $010715			bra 	_TOKMainLoop
.010772					_TOKNumber:
.010772	20 9b 07	jsr $01079b			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010775	80 9e		bra $010715			bra 	_TOKMainLoop
.010777					_TOKIdentifier:
.010777	20 dc 08	jsr $0108dc			jsr 	TOKIdentifier
.01077a	80 99		bra $010715			bra 	_TOKMainLoop
.01077c					TOKWriteToken:
.01077c	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01077e	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010780	e6 0c		inc $0c				inc 	DTemp2
.010782	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010784	29 ff 00	and #$00ff			and 	#$00FF
.010787	f0 01		beq $01078a			beq 	_TOKWriteOverflow
.010789	60		rts				rts
.01078a					_TOKWriteOverflow:
.01078a	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01078d	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010795	20 6c 6f 6e 67 00
.01079b					TOKInteger:
.01079b	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.01079d	64 26		stz $26				stz 	DTemp3+2
.01079f					_TOKINLoop:
.01079f	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.0107a1	48		pha				pha
.0107a2	a5 24		lda $24				lda 	DTemp3
.0107a4	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.0107a6	26 26		rol $26				rol 	DTemp3+2
.0107a8	06 24		asl $24				asl 	DTemp3
.0107aa	26 26		rol $26				rol 	DTemp3+2
.0107ac	18		clc				clc
.0107ad	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0107af	85 24		sta $24				sta 	DTemp3
.0107b1	68		pla				pla
.0107b2	65 26		adc $26				adc 	DTemp3+2
.0107b4	85 26		sta $26				sta 	DTemp3+2
.0107b6	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0107b8	26 26		rol $26				rol 	DTemp3+2
.0107ba	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0107bc	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0107bf	d0 44		bne $010805			bne 	_TOKINSize
.0107c1	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0107c3	29 0f 00	and #$000f			and 	#15
.0107c6	18		clc				clc
.0107c7	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0107c9	85 24		sta $24				sta 	DTemp3
.0107cb	90 02		bcc $0107cf			bcc 	_TOKINNoCarry
.0107cd	e6 26		inc $26				inc 	DTemp3+2
.0107cf					_TOKINNoCarry:
.0107cf	e6 08		inc $08				inc 	DTemp1 						; look at next
.0107d1	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0107d3	29 ff 00	and #$00ff			and 	#$00FF
.0107d6	c9 30 00	cmp #$0030			cmp 	#"0"
.0107d9	90 05		bcc $0107e0			bcc 	_TOKINGotInteger
.0107db	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0107de	90 bf		bcc $01079f			bcc		_TOKINLoop
.0107e0					_TOKINGotInteger:
.0107e0	a5 24		lda $24				lda 	DTemp3 						; lower word
.0107e2	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0107e5	18		clc				clc
.0107e6	69 00 40	adc #$4000			adc 	#$4000
.0107e9	48		pha				pha 								; save it.
.0107ea	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0107ec	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0107ee	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0107f0	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0107f3	b0 10		bcs $010805			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0107f5	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0107f8	f0 06		beq $010800			beq 	_TOKINNoShift 				; don't need constant shift.
.0107fa	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0107fd	20 7c 07	jsr $01077c			jsr 	TOKWriteToken
.010800					_TOKINNoShift:
.010800	68		pla				pla 								; get lower its token
.010801	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; output it
.010804	60		rts				rts
.010805					_TOKINSize:
.010805	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010808	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>010810	74 6f 6f 20 6c 61 72 67 65 00
.01081a					TOKQuotedString:
.01081a	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.01081c	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.01081e	85 32		sta $32				sta 	DTemp4
.010820	a5 0a		lda $0a				lda 	DTemp1+2
.010822	85 34		sta $34				sta 	DTemp4+2
.010824					_TOKQFindSize:
.010824	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010826	e6 08		inc $08				inc 	DTemp1
.010828	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.01082b	f0 3b		beq $010868			beq 	_TOQImbalance 				; end of line, and no quote found.
.01082d	c9 22 00	cmp #$0022			cmp 	#34
.010830	d0 f2		bne $010824			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010832	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010834	38		sec				sec
.010835	e5 32		sbc $32				sbc 	DTemp4
.010837	3a		dec a				dec 	a 							; one less character for closing quote
.010838	85 26		sta $26				sta 	DTemp3+2
.01083a	18		clc				clc
.01083b	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.01083e	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010841	20 7c 07	jsr $01077c			jsr 	TOKWriteToken
.010844	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010846	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; effectively a byte-write.
.010849	c6 0c		dec $0c				dec 	DTemp2
.01084b	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.01084d	f0 0f		beq $01085e			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.01084f					_TOKQWriteString:
.01084f	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010851	29 ff 00	and #$00ff			and 	#$00FF
.010854	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; effectively a byte-write.
.010857	c6 0c		dec $0c				dec 	DTemp2
.010859	e6 32		inc $32				inc 	DTemp4 						; advance character
.01085b	ca		dex				dex 								; do X times
.01085c	d0 f1		bne $01084f			bne 	_TOKQWriteString
.01085e					_TOKQWriteEnd:
.01085e	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010860	29 01 00	and #$0001			and 	#1
.010863	f0 02		beq $010867			beq 	_TOKQExit
.010865	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010867					_TOKQExit:
.010867	60		rts				rts
.010868					_TOQImbalance:
.010868	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01086b	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010873	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010881					TOKKeywordSearch:
.010881	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010883	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010886	85 34		sta $34				sta 	DTemp4+2
.010888	a2 00 00	ldx #$0000			ldx 	#0
.01088b					_TOKScan:
.01088b	bf 96 00 01	lda $010096,x			lda 	TokenText,x 				; read the first byte
.01088f	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010892	f0 46		beq $0108da			beq 	_TOKFail 					; if zero then we have failed.
.010894	3a		dec a				dec 	a 							; -1 gives the length.
.010895	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010897	d0 2f		bne $0108c8			bne 	_TOKNext 					; no, then skip to next token.
.010899	da		phx				phx 								; save X
.01089a	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.01089d					_TOKCompare:
.01089d	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01089f	5f 97 00 01	eor $010097,x			eor 	TokenText+1,x
.0108a3	29 ff 00	and #$00ff			and 	#$00FF
.0108a6	d0 1f		bne $0108c7			bne 	_TOKPopNext 				; if different, pop and goto next.
.0108a8	e8		inx				inx 								; bump X and Y.
.0108a9	c8		iny				iny
.0108aa	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.0108ac	d0 ef		bne $01089d			bne 	_TOKCompare
.0108ae	98		tya				tya 								; add length to the text pointer
.0108af	18		clc				clc
.0108b0	65 08		adc $08				adc 	DTemp1
.0108b2	85 08		sta $08				sta 	DTemp1
.0108b4	fa		plx				plx 								; restore X.
.0108b5	bf 96 00 01	lda $010096,x			lda 	TokenText,x 				; get the type/token bit.
.0108b9	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0108bc	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0108bd	4a		lsr a				lsr		a
.0108be	4a		lsr a				lsr 	a
.0108bf	eb		xba				xba
.0108c0	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0108c2	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0108c5	38		sec				sec
.0108c6	60		rts				rts
.0108c7					_TOKPopNext:
.0108c7	fa		plx				plx 								; restore X.
.0108c8					_TOKNext:
.0108c8	bf 96 00 01	lda $010096,x			lda 	TokenText,x 				; get the token skip again.
.0108cc	29 0f 00	and #$000f			and 	#$000F
.0108cf	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0108d1	8a		txa				txa
.0108d2	18		clc				clc
.0108d3	65 14		adc $14				adc 	DSignCount
.0108d5	aa		tax				tax
.0108d6	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0108d8	80 b1		bra $01088b			bra 	_TOKScan
.0108da					_TOKFail:
.0108da	18		clc				clc
.0108db	60		rts				rts
.0108dc					TOKIdentifier:
.0108dc	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0108de	85 24		sta $24				sta 	DTemp3
.0108e0					_TOKIFindLength:
.0108e0	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0108e2	a7 08		lda [$08]			lda 	[DTemp1]
.0108e4	29 ff 00	and #$00ff			and 	#$00FF
.0108e7	20 87 09	jsr $010987			jsr 	TOKIsIdentifierCharacter
.0108ea	b0 f4		bcs $0108e0			bcs 	_TOKIFindLength
.0108ec	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0108ee	38		sec				sec
.0108ef	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0108f1	85 36		sta $36				sta 	DTemp5
.0108f3	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0108f5	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0108f8	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0108fa	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0108fc	29 ff 00	and #$00ff			and 	#$00FF
.0108ff	c9 24 00	cmp #$0024			cmp 	#"$"
.010902	d0 0b		bne $01090f			bne 	_TOKINotString
.010904	e6 08		inc $08				inc 	DTemp1 						; skip $
.010906	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010908	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01090a	09 00 20	ora #$2000			ora 	#IDTypeMask
.01090d	85 26		sta $26				sta 	DTemp3+2
.01090f					_TOKINotString:
.01090f	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010911	29 ff 00	and #$00ff			and 	#$00FF
.010914	c9 28 00	cmp #$0028			cmp 	#"("
.010917	d0 0b		bne $010924			bne 	_TOKINotArray
.010919	e6 08		inc $08				inc 	DTemp1 						; skip (
.01091b	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.01091d	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01091f	09 00 10	ora #$1000			ora 	#IDArrayMask
.010922	85 26		sta $26				sta 	DTemp3+2
.010924					_TOKINotArray:
.010924	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010926	85 08		sta $08				sta 	DTemp1
.010928	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.01092a	20 81 08	jsr $010881			jsr 	TOKKeywordSearch
.01092d	90 04		bcc $010933			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.01092f	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; if CS write token and exit.
.010932	60		rts				rts
.010933					_TOKIIdentifier:
.010933	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010935	e6 08		inc $08				inc 	DTemp1
.010937	20 73 09	jsr $010973			jsr		_TOKIToConstant 			; convert to range 0-35
.01093a	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.01093c	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.01093e	f0 1d		beq $01095d			beq 	_TOKINoSecond
.010940	48		pha				pha 								; save current on stack.
.010941	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010943	e6 08		inc $08				inc 	DTemp1
.010945	20 73 09	jsr $010973			jsr		_TOKIToConstant 			; convert to range 0-35
.010948	85 14		sta $14				sta 	DSignCount 					; save it.
.01094a	0a		asl a				asl 	a 							; x 4
.01094b	0a		asl a				asl 	a
.01094c	65 14		adc $14				adc 	DSignCount 					; x 5
.01094e	0a		asl a				asl 	a 							; x 10
.01094f	65 14		adc $14				adc 	DSignCount 					; x 11
.010951	0a		asl a				asl 	a 							; x 22
.010952	0a		asl a				asl 	a 							; x 44
.010953	65 14		adc $14				adc 	DSignCount 					; x 45
.010955	85 14		sta $14				sta 	DSignCount
.010957	68		pla				pla 								; get old token and add x 45
.010958	18		clc				clc
.010959	65 14		adc $14				adc 	DSignCount
.01095b	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.01095d					_TOKINoSecond:
.01095d	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.01095f	f0 03		beq $010964			beq 	_TOKINotLast				; if yes
.010961	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010964					_TOKINotLast:
.010964	20 7c 07	jsr $01077c			jsr 	TOKWriteToken 				; output the token
.010967	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010969	d0 c8		bne $010933			bne 	_TOKIIdentifier
.01096b					_TOKIOut:
.01096b	a5 24		lda $24				lda 	DTemp3 						; get original start position
.01096d	18		clc				clc
.01096e	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010970	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010972	60		rts				rts
.010973					_TOKIToConstant:
.010973	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010976	c9 41 00	cmp #$0041			cmp 	#65
.010979	90 04		bcc $01097f			bcc 	_TOKITInteger
.01097b	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.01097e	60		rts				rts
.01097f					_TOKITInteger:
.01097f	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010982	18		clc				clc
.010983	69 1b 00	adc #$001b			adc 	#27
.010986	60		rts				rts
.010987					TOKIsIdentifierCharacter:
.010987	c9 30 00	cmp #$0030			cmp 	#"0"
.01098a	90 0f		bcc $01099b			bcc 	_TOKIIFail
.01098c	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01098f	90 0c		bcc $01099d			bcc 	_TOKIIOk
.010991	c9 41 00	cmp #$0041			cmp 	#"A"
.010994	90 05		bcc $01099b			bcc 	_TOKIIFail
.010996	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010999	90 02		bcc $01099d			bcc 	_TOKIIOk
.01099b					_TOKIIFail:
.01099b	18		clc				clc
.01099c	60		rts				rts
.01099d					_TOKIIOk:
.01099d	38		sec				sec
.01099e	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.01099f					Binary_Add:
.01099f	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.0109a1	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0109a3	30 12		bmi $0109b7		bmi 	_BATypeError
.0109a5	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0109a7	30 3f		bmi $0109e8		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0109a9	18		clc			clc 										; add the results
.0109aa	b5 00		lda $00,x		lda		EXSValueL+0,x
.0109ac	75 02		adc $02,x		adc 	EXSValueL+2,x
.0109ae	95 00		sta $00,x		sta 	EXSValueL+0,x
.0109b0	b5 20		lda $20,x		lda		EXSValueH+0,x
.0109b2	75 22		adc $22,x		adc 	EXSValueH+2,x
.0109b4	95 20		sta $20,x		sta 	EXSValueH+0,x
.0109b6	60		rts			rts
.0109b7					_BATypeError:
.0109b7	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0109ba	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0109c2	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0109d2	65 73 00
.0109d5					_BALengthError:
.0109d5	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0109d8	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0109e0	6f 6f 20 6c 6f 6e 67 00
.0109e8					_BAConcatenateString:
.0109e8	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0109ea	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0109ec	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0109ee	85 0c		sta $0c			sta 	DTemp2
.0109f0	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0109f2	18		clc			clc 										; work out the total length
.0109f3	b2 08		lda ($08)		lda 	(DTemp1)
.0109f5	72 0c		adc ($0c)		adc 	(DTemp2)
.0109f7	b0 14		bcs $010a0d		bcs 	_BAConcatLengthError 				; string is too long.
.0109f9	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0109fb	20 46 06	jsr $010646		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0109fe	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010a00	74 20		stz $20,x		stz 	EXSValueH+0,x
.010a02	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010a04	20 80 06	jsr $010680		jsr 	StringCreateCopy
.010a07	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010a09	20 80 06	jsr $010680		jsr 	StringCreateCopy
.010a0c	60		rts			rts
.010a0d					_BAConcatLengthError:
.010a0d	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010a10	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010a18	6f 6f 20 6c 6f 6e 67 00
.010a20					Binary_Subtract:
.010a20	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a23	38		sec			sec
.010a24	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a26	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a28	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a2a	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a2c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a2e	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a30	60		rts			rts
.010a31					Binary_ShiftRight:
.010a31	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a34	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a36	29 3f 00	and #$003f		and 	#63
.010a39	f0 07		beq $010a42		beq		_Binary_SRExit
.010a3b					_Binary_SRLoop:
.010a3b	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010a3d	76 00		ror $00,x		ror 	EXSValueL+0,x
.010a3f	3a		dec a			dec 	a
.010a40	d0 f9		bne $010a3b		bne 	_Binary_SRLoop
.010a42					_Binary_SRExit:
.010a42	60		rts			rts
.010a43					Binary_ShiftLeft:
.010a43	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a46	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010a48	29 3f 00	and #$003f		and 	#63
.010a4b	f0 07		beq $010a54		beq		_Binary_SLExit
.010a4d					_Binary_SLLoop:
.010a4d	16 00		asl $00,x		asl 	EXSValueL+0,x
.010a4f	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a51	3a		dec a			dec 	a
.010a52	d0 f9		bne $010a4d		bne 	_Binary_SLLoop
.010a54					_Binary_SLExit:
.010a54	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010a55					Binary_And:
.010a55	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a58	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a5a	35 02		and $02,x		and 	EXSValueL+2,x
.010a5c	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a5e	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a60	35 22		and $22,x		and 	EXSValueH+2,x
.010a62	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a64	60		rts			rts
.010a65					Binary_Or:
.010a65	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a68	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a6a	15 02		ora $02,x		ora 	EXSValueL+2,x
.010a6c	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a6e	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a70	15 22		ora $22,x		ora 	EXSValueH+2,x
.010a72	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a74	60		rts			rts
.010a75					Binary_Xor:
.010a75	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010a78	b5 00		lda $00,x		lda		EXSValueL+0,x
.010a7a	55 02		eor $02,x		eor 	EXSValueL+2,x
.010a7c	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a7e	b5 20		lda $20,x		lda		EXSValueH+0,x
.010a80	55 22		eor $22,x		eor 	EXSValueH+2,x
.010a82	95 20		sta $20,x		sta 	EXSValueH+0,x
.010a84	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010a85					Binary_Equals:
.010a85	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a88	b0 0e		bcs $010a98		bcs 	_BEString
.010a8a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010a8c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010a8e	d0 4f		bne $010adf		bne 	Compare_Fail
.010a90	b5 20		lda $20,x		lda 	EXSValueH,x
.010a92	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010a94	d0 49		bne $010adf		bne 	Compare_Fail
.010a96	80 3f		bra $010ad7		bra 	Compare_Succeed
.010a98					_BEString:
.010a98	09 00 00	ora #$0000		ora 	#$0000
.010a9b	f0 3a		beq $010ad7		beq 	Compare_Succeed
.010a9d	80 40		bra $010adf		bra 	Compare_Fail
.010a9f					Binary_NotEquals:
.010a9f	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010aa2	b0 0e		bcs $010ab2		bcs 	_BNEString
.010aa4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010aa6	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010aa8	d0 2d		bne $010ad7		bne 	Compare_Succeed
.010aaa	b5 20		lda $20,x		lda 	EXSValueH,x
.010aac	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010aae	d0 27		bne $010ad7		bne 	Compare_Succeed
.010ab0	80 2d		bra $010adf		bra 	Compare_Fail
.010ab2					_BNEString:
.010ab2	09 00 00	ora #$0000		ora 	#$0000
.010ab5	d0 20		bne $010ad7		bne 	Compare_Succeed
.010ab7	80 26		bra $010adf		bra 	Compare_Fail
.010ab9					Binary_Less:
.010ab9	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010abc	b0 12		bcs $010ad0		bcs 	_BLString
.010abe	38		sec			sec
.010abf	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010ac1	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ac3	b5 20		lda $20,x		lda 	EXSValueH,x
.010ac5	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ac7	50 03		bvc $010acc		bvc 	*+5
.010ac9	49 00 80	eor #$8000		eor 	#$8000
.010acc	30 09		bmi $010ad7		bmi 	Compare_Succeed
.010ace	80 0f		bra $010adf		bra 	Compare_Fail
.010ad0					_BLString:
.010ad0	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010ad3	f0 02		beq $010ad7		beq 	Compare_Succeed
.010ad5	80 08		bra $010adf		bra 	Compare_Fail
.010ad7					Compare_Succeed:
.010ad7	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010ada	95 00		sta $00,x		sta 	EXSValueL,x
.010adc	95 20		sta $20,x		sta 	EXSValueH,x
.010ade	60		rts			rts
.010adf					Compare_Fail:
.010adf	74 00		stz $00,x		stz 	EXSValueL,x
.010ae1	74 20		stz $20,x		stz 	EXSValueH,x
.010ae3	60		rts			rts
.010ae4					Binary_GreaterEqual:
.010ae4	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010ae7	b0 12		bcs $010afb		bcs 	_BGEString
.010ae9	38		sec			sec
.010aea	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010aec	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010aee	b5 20		lda $20,x		lda 	EXSValueH,x
.010af0	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010af2	50 03		bvc $010af7		bvc 	*+5
.010af4	49 00 80	eor #$8000		eor 	#$8000
.010af7	10 de		bpl $010ad7		bpl 	Compare_Succeed
.010af9	80 e4		bra $010adf		bra 	Compare_Fail
.010afb					_BGEString:
.010afb	09 00 00	ora #$0000		ora 	#$0000
.010afe	10 d7		bpl $010ad7		bpl 	Compare_Succeed
.010b00	80 dd		bra $010adf		bra 	Compare_Fail
.010b02					Binary_LessEqual:
.010b02	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b05	b0 12		bcs $010b19		bcs 	_BLEString
.010b07	18		clc			clc 									; numeric <= signed
.010b08	b5 00		lda $00,x		lda 	EXSValueL,x
.010b0a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b0c	b5 20		lda $20,x		lda 	EXSValueH,x
.010b0e	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b10	50 03		bvc $010b15		bvc 	*+5
.010b12	49 00 80	eor #$8000		eor 	#$8000
.010b15	30 c0		bmi $010ad7		bmi 	Compare_Succeed
.010b17	80 c6		bra $010adf		bra 	Compare_Fail
.010b19					_BLEString:
.010b19	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010b1c	d0 b9		bne $010ad7		bne 	Compare_Succeed
.010b1e	80 bf		bra $010adf		bra 	Compare_Fail
.010b20					Binary_Greater:
.010b20	20 3e 0b	jsr $010b3e		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010b23	b0 12		bcs $010b37		bcs 	_BGString
.010b25	18		clc			clc 									; numeric > signed
.010b26	b5 00		lda $00,x		lda 	EXSValueL,x
.010b28	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010b2a	b5 20		lda $20,x		lda 	EXSValueH,x
.010b2c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010b2e	50 03		bvc $010b33		bvc 	*+5
.010b30	49 00 80	eor #$8000		eor 	#$8000
.010b33	10 a2		bpl $010ad7		bpl 	Compare_Succeed
.010b35	80 a8		bra $010adf		bra 	Compare_Fail
.010b37					_BGString:
.010b37	c9 01 00	cmp #$0001		cmp 	#$0001
.010b3a	f0 9b		beq $010ad7		beq 	Compare_Succeed
.010b3c	80 a1		bra $010adf		bra 	Compare_Fail
.010b3e					CompareTypeCheck:
.010b3e	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010b40	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010b42	30 06		bmi $010b4a		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010b44	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010b46	30 1c		bmi $010b64		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010b48	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010b49	60		rts			rts
.010b4a					_CTCFail:
.010b4a	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010b4d	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010b55	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010b64					_CTCStringCompare:
.010b64	20 fe 05	jsr $0105fe		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010b67	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010b69	85 08		sta $08			sta 	DTemp1
.010b6b	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010b6d	85 0c		sta $0c			sta 	DTemp2
.010b6f	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010b72	a8		tay			tay
.010b73	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010b75	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010b77	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b79	90 02		bcc $010b7d		bcc 	_CTCSmallest
.010b7b	b2 0c		lda ($0c)		lda 	(DTemp2)
.010b7d					_CTCSmallest:
.010b7d	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010b7f					_CTCCompare:
.010b7f	c8		iny			iny 									; look at next character (done first, first char is size)
.010b80	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010b82	30 16		bmi $010b9a		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010b84	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010b86	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010b88	f0 f5		beq $010b7f		beq 	_CTCCompare 					; if zero, try the next character.
.010b8a	b0 07		bcs $010b93		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010b8c					_CTCLess:
.010b8c	c2 20		rep #$20		rep 	#$20
.010b8e	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010b91	80 14		bra $010ba7		bra 	_CTCExit
.010b93					_CTCGreater:
.010b93	c2 20		rep #$20		rep 	#$20
.010b95	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010b98	80 0d		bra $010ba7		bra 	_CTCExit
.010b9a					_CTCEqualSoFar:
.010b9a	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010b9c	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010b9e	90 ec		bcc $010b8c		bcc 	_CTCLess
.010ba0	d0 f1		bne $010b93		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010ba2	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010ba4	a9 00 00	lda #$0000		lda 	#$0000
.010ba7					_CTCExit:
.010ba7	38		sec			sec 									; return with CS indicating string comparison.
.010ba8	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.010ba9					Binary_Divide:
.010ba9	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010bac	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010bae	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010bb0	d0 14		bne $010bc6		bne 	_BinaryDivide_Ok
.010bb2	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010bb5	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010bbd	20 62 79 20 7a 65 72 6f 00
.010bc6					_BinaryDivide_Ok:
.010bc6	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010bc8	64 0a		stz $0a			stz 	DTemp1+2
.010bca	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010bcc	5a		phy			phy 										; save Y (bit counter)
.010bcd	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010bcf	10 07		bpl $010bd8		bpl 	_BinaryDivide_RightDone
.010bd1	e8		inx			inx
.010bd2	e8		inx			inx
.010bd3	20 0e 0c	jsr $010c0e		jsr 	Binary_DivNegate
.010bd6	ca		dex			dex
.010bd7	ca		dex			dex
.010bd8					_BinaryDivide_RightDone:
.010bd8	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010bda	10 03		bpl $010bdf		bpl 	_BinaryDivide_LeftDone
.010bdc	20 0e 0c	jsr $010c0e		jsr 	Binary_DivNegate
.010bdf					_BinaryDivide_LeftDone:
.010bdf	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010be2					_BinaryDivide_Loop:
.010be2	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010be4	36 20		rol $20,x		rol 	EXSValueH+0,x
.010be6	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010be8	26 0a		rol $0a			rol 	DTemp1+2
.010bea	38		sec			sec											; calculate A-M
.010beb	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010bed	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010bef	85 0c		sta $0c			sta 	DTemp2
.010bf1	a5 0a		lda $0a			lda 	DTemp1+2
.010bf3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010bf5	90 08		bcc $010bff		bcc 	_Binary_NoSubract 					; if A < M skip this
.010bf7	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010bf9	a5 0c		lda $0c			lda 	DTemp2
.010bfb	85 08		sta $08			sta 	DTemp1+0
.010bfd	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010bff					_Binary_NoSubract:
.010bff	88		dey			dey 										; do it 32 times.
.010c00	d0 e0		bne $010be2		bne 	_BinaryDivide_Loop
.010c02					_BinaryDivide_Exit:
.010c02	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010c04	29 01 00	and #$0001		and 	#1
.010c07	f0 03		beq $010c0c		beq 	_BinaryDivide_Exit2
.010c09	20 0e 0c	jsr $010c0e		jsr 	Binary_DivNegate
.010c0c					_BinaryDivide_Exit2:
.010c0c	7a		ply			ply 										; restore Y
.010c0d	60		rts			rts
.010c0e					Binary_DivNegate:
.010c0e	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010c10	38		sec			sec 										; negate the value at stack X.
.010c11	a9 00 00	lda #$0000		lda 	#$0000
.010c14	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010c16	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c18	a9 00 00	lda #$0000		lda 	#$0000
.010c1b	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010c1d	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c1f	60		rts			rts
.010c20					Binary_Modulus:
.010c20	20 a9 0b	jsr $010ba9		jsr 	Binary_Divide 						; do the divide
.010c23	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010c25	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c27	a5 0a		lda $0a			lda 	DTemp1+2
.010c29	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c2b	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010c2c					Binary_Multiply:
.010c2c	20 de 05	jsr $0105de		jsr 	CheckBothNumeric 					; check both values are numeric
.010c2f	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010c31	85 08		sta $08			sta 	DTemp1
.010c33	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c35	85 0a		sta $0a			sta		DTemp1+2
.010c37	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010c39	74 20		stz $20,x		stz 	EXSValueH+0,x
.010c3b					_BinaryMultiply_Loop:
.010c3b	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010c3d	05 0a		ora $0a			ora 	DTemp1+2
.010c3f	f0 1e		beq $010c5f		beq 	_BinaryMultiply_Exit
.010c41	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010c43	29 01 00	and #$0001		and 	#1
.010c46	f0 0d		beq $010c55		beq 	_BinaryMultiply_NoAdd
.010c48	18		clc			clc 										; add multiplicand to result.
.010c49	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010c4b	75 02		adc $02,x		adc 	EXSValueL+2,x
.010c4d	95 00		sta $00,x		sta 	EXSValueL+0,x
.010c4f	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010c51	75 22		adc $22,x		adc 	EXSValueH+2,x
.010c53	95 20		sta $20,x		sta 	EXSValueH+0,x
.010c55					_BinaryMultiply_NoAdd:
.010c55	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010c57	66 08		ror $08			ror 	DTemp1
.010c59	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010c5b	36 22		rol $22,x		rol 	EXSValueH+2,x
.010c5d	80 dc		bra $010c3b		bra 	_BinaryMultiply_Loop 				; go round again.
.010c5f					_BinaryMultiply_Exit:
.010c5f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010c60					Function_Len:
.010c60	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010c63	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c66	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010c69	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010c6b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010c6e	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010c71	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010c73	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c75	60		rts				rts
.010c76					Function_Abs:
.010c76	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010c79	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010c7c	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010c7f	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010c81	30 07		bmi $010c8a			bmi 	_FAbsNegative 				; negate it if negative
.010c83	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010c85	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010c87	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c89	60		rts				rts
.010c8a					_FAbsNegative:
.010c8a	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010c8b	a9 00 00	lda #$0000			lda 	#0
.010c8e	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010c90	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c92	a9 00 00	lda #$0000			lda 	#0
.010c95	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010c97	95 20		sta $20,x			sta 	EXSValueH+0,x
.010c99	60		rts				rts
.010c9a					Function_Sgn:
.010c9a	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns integer
.010c9d	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get an integer
.010ca0	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010ca3	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010ca5	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ca7	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010ca9	30 07		bmi $010cb2			bmi 	_FSgnNegative 				; set to -1 if signed
.010cab	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010cad	f0 02		beq $010cb1			beq 	_FSgnExit
.010caf	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010cb1					_FSgnExit:
.010cb1	60		rts				rts
.010cb2					_FSgnNegative:
.010cb2	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010cb5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cb7	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cb9	60		rts				rts
.010cba					Function_Random:
.010cba	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010cbd	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger
.010cc0	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010cc2	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010cc4	d0 0a		bne $010cd0			bne 	_Rnd_NotZero
.010cc6	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010cc9	85 10		sta $10				sta 	DRandom
.010ccb	a9 ea 00	lda #$00ea			lda 	#$EA
.010cce	85 12		sta $12				sta 	DRandom+2
.010cd0					_Rnd_NotZero:
.010cd0	20 db 0c	jsr $010cdb			jsr 	_Rnd_Process 				; call randomiser twice
.010cd3	95 20		sta $20,x			sta 	EXSValueH+0,x
.010cd5	20 db 0c	jsr $010cdb			jsr 	_Rnd_Process
.010cd8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cda	60		rts				rts
.010cdb					_Rnd_Process:
.010cdb	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010cdd	26 12		rol $12				rol 	DRandom+2
.010cdf	90 0e		bcc $010cef			bcc 	_Rnd_Exit
.010ce1	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010ce3	49 54 d4	eor #$d454			eor 	#$D454
.010ce6	85 10		sta $10				sta 	DRandom
.010ce8	a5 12		lda $12				lda 	DRandom+2
.010cea	49 d5 55	eor #$55d5			eor 	#$55D5
.010ced	85 12		sta $12				sta 	DRandom+2
.010cef					_Rnd_Exit:
.010cef	a5 10		lda $10				lda 	DRandom
.010cf1	45 12		eor $12				eor 	DRandom+2
.010cf3	60		rts				rts
.010cf4					Function_Chr:
.010cf4	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string
.010cf7	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get integer
.010cfa	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010cfd	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d00	d0 12		bne $010d14			bne 	_FCHBad
.010d02	48		pha				pha  								; save char # on stack
.010d03	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010d06	20 46 06	jsr $010646			jsr 	StringTempAllocate
.010d09	68		pla				pla 								; restore character number
.010d0a	20 72 06	jsr $010672			jsr 	StringWriteCharacter 		; write it out.
.010d0d	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010d0f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d11	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d13	60		rts				rts
.010d14					_FCHBad:
.010d14	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010d17	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010d1f	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010d2c					Function_Asc:
.010d2c	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010d2f	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get string
.010d32	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010d35	a8		tay				tay 								; string address in Y
.010d36	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010d39	29 ff 00	and #$00ff			and 	#$00FF
.010d3c	f0 0b		beq $010d49			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010d3e	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010d41	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010d44	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010d46	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d48	60		rts				rts
.010d49					_FASBad:
.010d49	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010d4c	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010d54	65 20 66 6f 72 20 61 73 63 28 29 00
.010d60					Function_SPC:
.010d60	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string
.010d63	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010d66	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010d69	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010d6c	d0 17		bne $010d85			bne 	_FSPBad
.010d6e	48		pha				pha 								; save length
.010d6f	20 46 06	jsr $010646			jsr 	StringTempAllocate 			; allocate character space
.010d72	7a		ply				ply 								; get count in Y
.010d73	f0 09		beq $010d7e			beq 	_FSPExit 					; if zero, just empty string
.010d75					_FSPCopy:
.010d75	a9 20 00	lda #$0020			lda 	#" "						; space character
.010d78	20 72 06	jsr $010672			jsr 	StringWriteCharacter 		; write it out.
.010d7b	88		dey				dey
.010d7c	d0 f7		bne $010d75			bne 	_FSPCopy	 				; do it Y times
.010d7e					_FSPExit:
.010d7e	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010d80	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d82	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d84	60		rts				rts
.010d85					_FSPBad:
.010d85	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010d88	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010d90	65 20 66 6f 72 20 73 70 63 28 29 00
.010d9c					Function_Inkey:
.010d9c	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010d9f	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger
.010da2	20 1d 1c	jsr $011c1d			jsr 	HWInkey 					; read current key
.010da5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010da7	74 20		stz $20,x			stz 	EXSValueH+0,x
.010da9	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/string.asm

.010daa					Function_LEFT:
.010daa	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.010dad	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get the value you are absoluting
.010db0	48		pha				pha 								; save string on stack.
.010db1	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; get count
.010db4	20 09 03	jsr $010309			jsr 	EvaluateNextInteger
.010db7	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010dba	d0 6d		bne $010e29			bne 	FNStringParameter
.010dbc	85 08		sta $08				sta 	DTemp1 						; save count.
.010dbe	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket
.010dc1	7a		ply				ply 								; Y points to string.
.010dc2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010dc5	29 ff 00	and #$00ff			and 	#$00FF
.010dc8	f0 52		beq $010e1c			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010dca	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010dcc	f0 55		beq $010e23			beq 	FNStringY 					; return string in Y if current len = required len.
.010dce	90 53		bcc $010e23			bcc 	FNStringY 					; if current < required return whole thing.
.010dd0	c8		iny				iny 								; take from here - start of string
.010dd1	80 33		bra $010e06			bra 	FNDTemp1Characters
.010dd3					Function_RIGHT:
.010dd3	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.010dd6	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dd9	48		pha				pha 								; save string on stack.
.010dda	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; get count
.010ddd	20 09 03	jsr $010309			jsr 	EvaluateNextInteger
.010de0	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010de3	d0 44		bne $010e29			bne 	FNStringParameter
.010de5	85 08		sta $08				sta 	DTemp1 						; save count.
.010de7	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket
.010dea	7a		ply				ply 								; Y points to string.
.010deb	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010dee	29 ff 00	and #$00ff			and 	#$00FF
.010df1	f0 29		beq $010e1c			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010df3	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010df5	f0 2c		beq $010e23			beq 	FNStringY 					; return string in Y if current len = required len.
.010df7	90 2a		bcc $010e23			bcc 	FNStringY 					; if current < required return whole thing.
.010df9	38		sec				sec 								; current-required is the number to skip
.010dfa	e5 08		sbc $08				sbc 	DTemp1
.010dfc	85 0a		sta $0a				sta 	DTemp1+2
.010dfe	98		tya				tya
.010dff	18		clc				clc
.010e00	65 0a		adc $0a				adc 	DTemp1+2
.010e02	a8		tay				tay
.010e03	c8		iny				iny 								; +1 for the count.
.010e04	80 00		bra $010e06			bra 	FNDTemp1Characters
.010e06					FNDTemp1Characters:
.010e06	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010e08	f0 12		beq $010e1c			beq 	FNStringEmpty 				; if zero, return empty string.
.010e0a	20 46 06	jsr $010646			jsr 	StringTempAllocate
.010e0d	48		pha				pha 								; save the address
.010e0e					_FND1Loop:
.010e0e	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010e11	20 72 06	jsr $010672			jsr 	StringWriteCharacter
.010e14	c8		iny				iny
.010e15	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010e17	d0 f5		bne $010e0e			bne 	_FND1Loop
.010e19	7a		ply				ply 								; string address in Y
.010e1a	80 07		bra $010e23			bra 	FNStringY
.010e1c					FNStringEmpty:
.010e1c	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010e1f	20 46 06	jsr $010646			jsr 	StringTempAllocate 			; put address of it in Y
.010e22	a8		tay				tay
.010e23					FNStringY:
.010e23	98		tya				tya
.010e24	95 00		sta $00,x			sta 	EXSValueL+0,x
.010e26	74 22		stz $22,x			stz 	EXSValueH+2,x
.010e28	60		rts				rts
.010e29					FNStringParameter:
.010e29	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010e2c	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010e34	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010e41					Function_MID:
.010e41	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.010e44	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get the value you are absoluting
.010e47	48		pha				pha 								; save string on stack.
.010e48	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; get offset (n)
.010e4b	20 09 03	jsr $010309			jsr 	EvaluateNextInteger
.010e4e	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e51	d0 d6		bne $010e29			bne 	FNStringParameter
.010e53	c9 00 00	cmp #$0000			cmp 	#0
.010e56	f0 d1		beq $010e29			beq 	FNStringParameter 			; or zero
.010e58	48		pha				pha 								; save start position on stack.
.010e59	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010e5c	85 08		sta $08				sta 	DTemp1
.010e5e	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010e60	c9 24 32	cmp #$3224			cmp 	#commaTokenID
.010e63	d0 0e		bne $010e73			bne 	_FMINoThird
.010e65	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010e67	e6 06		inc $06				inc 	DCodePtr
.010e69	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010e6c	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010e6f	d0 b8		bne $010e29			bne 	FNStringParameter
.010e71	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010e73					_FMINoThird:
.010e73	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket
.010e76	68		pla				pla 								; get offset position
.010e77	85 0c		sta $0c				sta 	DTemp2
.010e79	7a		ply				ply 								; get address of string in Y
.010e7a	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010e7d	29 ff 00	and #$00ff			and 	#$00FF
.010e80	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010e82	90 98		bcc $010e1c			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010e84	38		sec				sec 								; calculate number of characters left after
.010e85	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010e87	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010e88	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010e8a	b0 02		bcs $010e8e			bcs 	_FMISufficient
.010e8c	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010e8e					_FMISufficient:
.010e8e	98		tya				tya 								; get address
.010e8f	18		clc				clc
.010e90	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010e92	a8		tay				tay 								; put in Y
.010e93	82 70 ff	brl $010e06			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/memread.asm

.010e96					Function_Peek:
.010e96	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010e99	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e9c	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010e9f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ea1	84 0a		sty $0a				sty 	DTemp1+2
.010ea3	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ea6	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ea8	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010eab	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ead	74 20		stz $20,x			stz 	EXSValueH+0,x
.010eaf	60		rts				rts
.010eb0					Function_Deek:
.010eb0	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010eb3	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010eb6	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010eb9	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ebb	84 0a		sty $0a				sty 	DTemp1+2
.010ebd	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ec0	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ec2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010ec4	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ec6	60		rts				rts
.010ec7					Function_Leek:
.010ec7	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010eca	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ecd	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check )
.010ed0	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010ed2	84 0a		sty $0a				sty 	DTemp1+2
.010ed4	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010ed7	b7 08		lda [$08],y			lda 	[DTemp1],y
.010ed9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010edb	c8		iny				iny
.010edc	c8		iny				iny
.010edd	b7 08		lda [$08],y			lda 	[DTemp1],y
.010edf	95 20		sta $20,x			sta 	EXSValueH+0,x
.010ee1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/val.asm

.010ee2					Function_VAL:
.010ee2	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns an integer
.010ee5	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ee8	48		pha				pha 								; put string address on stack.
.010ee9	20 f9 0e	jsr $010ef9			jsr 	VALGetBase 					; process , base (shared with STR$())
.010eec	7a		ply				ply 								; get string address back
.010eed	da		phx				phx 								; save X on stack
.010eee	aa		tax				tax 								; base in X
.010eef	98		tya				tya 								; address in A
.010ef0	20 33 0f	jsr $010f33			jsr 	StringToInteger
.010ef3	fa		plx				plx 								; restore X
.010ef4	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ef6	94 20		sty $20,x			sty 	EXSValueH+0,x
.010ef8	60		rts				rts
.010ef9					VALGetBase:
.010ef9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010efb	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if comma, go to get base code.
.010efe	f0 07		beq $010f07			beq 	_VGBAlternate
.010f00	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket			; expect ), and return 10.
.010f03	a9 0a 00	lda #$000a			lda 	#10
.010f06	60		rts				rts
.010f07					_VGBAlternate:
.010f07	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; skip comma.
.010f0a	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get base
.010f0d	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010f10	d0 0e		bne $010f20			bne 	_VGBBadBase
.010f12	c9 02 00	cmp #$0002			cmp 	#2
.010f15	90 09		bcc $010f20			bcc 	_VGBBadBase
.010f17	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010f1a	b0 04		bcs $010f20			bcs 	_VGBBadBase
.010f1c	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; get right bracket and return.
.010f1f	60		rts				rts
.010f20					_VGBBadBase:
.010f20	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010f23	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010f2b	65 72 20 42 61 73 65 00
.010f33					StringToInteger:
.010f33	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010f35	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010f37	29 ff 00	and #$00ff			and 	#$00FF
.010f3a	85 26		sta $26				sta 	DTemp3+2
.010f3c	f0 6e		beq $010fac			beq 	_STIError 					; if length zero it's bad.
.010f3e	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010f40	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010f42	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010f44	64 0a		stz $0a				stz 	DTemp1+2
.010f46	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010f48	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010f4b	48		pha				pha 								; push on stack
.010f4c	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010f4f	d0 06		bne $010f57			bne 	_STILoop
.010f51	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010f53	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010f55	f0 55		beq $010fac			beq 	_STIError 					; if only - then error.
.010f57					_STILoop:
.010f57	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010f59	20 cb 0f	jsr $010fcb			jsr 	MultiplyTemp1ByA
.010f5c	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010f5e	29 ff 00	and #$00ff			and 	#$00FF
.010f61	20 bc 0f	jsr $010fbc			jsr 	ConvertUpperCase	 		; make U/C
.010f64	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010f67	90 43		bcc $010fac			bcc 	_STIError
.010f69	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010f6c	90 0e		bcc $010f7c			bcc 	_STIOkay1
.010f6e	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010f71	90 39		bcc $010fac			bcc 	_STIError
.010f73	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010f76	b0 34		bcs $010fac			bcs 	_STIError
.010f78	18		clc				clc 								; shift to correct range.
.010f79	69 09 00	adc #$0009			adc 	#9
.010f7c					_STIOkay1:
.010f7c	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010f7f	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010f81	b0 29		bcs $010fac			bcs 	_STIError
.010f83	18		clc				clc 								; add A to DTemp1
.010f84	65 08		adc $08				adc 	DTemp1
.010f86	85 08		sta $08				sta 	DTemp1
.010f88	90 02		bcc $010f8c			bcc 	_STINoCarry
.010f8a	e6 0a		inc $0a				inc 	DTemp1+2
.010f8c					_STINoCarry:
.010f8c	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010f8e	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010f90	d0 c5		bne $010f57			bne 	_STILoop 					; loop back.
.010f92	68		pla				pla 								; get optional minus bac
.010f93	c9 2d 00	cmp #$002d			cmp 	#"-"
.010f96	d0 0f		bne $010fa7			bne 	_STINotNegative 			; handle the negative character
.010f98	38		sec				sec 								; negate DTemp1
.010f99	a9 00 00	lda #$0000			lda 	#0
.010f9c	e5 08		sbc $08				sbc 	DTemp1
.010f9e	85 08		sta $08				sta 	DTemp1
.010fa0	a9 00 00	lda #$0000			lda 	#0
.010fa3	e5 0a		sbc $0a				sbc 	DTemp1+2
.010fa5	85 0a		sta $0a				sta 	DTemp1+2
.010fa7					_STINotNegative:
.010fa7	a5 08		lda $08				lda 	DTemp1 						; get the result
.010fa9	a4 0a		ldy $0a				ldy 	DTemp1+2
.010fab	60		rts				rts
.010fac					_STIError:
.010fac	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>010faf	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010fb7	74 61 6e 74 00
.010fbc					ConvertUpperCase:
.010fbc	c9 61 00	cmp #$0061			cmp 	#'a'
.010fbf	90 09		bcc $010fca			bcc 	_CUCExit
.010fc1	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010fc4	b0 04		bcs $010fca			bcs 	_CUCExit
.010fc6	38		sec				sec
.010fc7	e9 20 00	sbc #$0020			sbc 	#32
.010fca					_CUCExit:
.010fca	60		rts				rts
.010fcb					MultiplyTemp1ByA:
.010fcb					_MTGeneral:
.010fcb	da		phx				phx
.010fcc	aa		tax				tax 								; multiplier in X
.010fcd	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010fcf	85 0c		sta $0c				sta 	DTemp2
.010fd1	a5 0a		lda $0a				lda 	DTemp1+2
.010fd3	85 0e		sta $0e				sta 	DTemp2+2
.010fd5	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010fd7	64 0a		stz $0a				stz 	DTemp1+2
.010fd9	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010fdc					_MTLoop:
.010fdc	8a		txa				txa 								; shift X right into C
.010fdd	4a		lsr a				lsr 	a
.010fde	aa		tax				tax
.010fdf	90 10		bcc $010ff1			bcc 	_MTNoAdd
.010fe1	18		clc				clc
.010fe2	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010fe4	65 0c		adc $0c				adc 	DTemp2
.010fe6	85 08		sta $08				sta 	DTemp1
.010fe8	a5 0a		lda $0a				lda 	DTemp1+2
.010fea	65 0e		adc $0e				adc 	DTemp2+2
.010fec	85 0a		sta $0a				sta 	DTemp1+2
.010fee	90 01		bcc $010ff1			bcc 	_MTNoAdd
.010ff0	c8		iny				iny
.010ff1					_MTNoAdd:
.010ff1	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ff3	26 0e		rol $0e				rol 	DTemp2+2
.010ff5	90 01		bcc $010ff8			bcc 	_MTNoOverflow
.010ff7	c8		iny				iny
.010ff8					_MTNoOverflow:
.010ff8	8a		txa				txa 								; until multiplier is zero.
.010ff9	d0 e1		bne $010fdc			bne 	_MTLoop
.010ffb	98		tya				tya
.010ffc	18		clc				clc
.010ffd	69 ff ff	adc #$ffff			adc 	#$FFFF
.011000	fa		plx				plx 								; restore X
.011001	60		rts				rts 								; and exit

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/str.asm

.011002					Function_Str:
.011002	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.011005	20 09 03	jsr $010309			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.011008	48		pha				pha 								; save YA on the stack
.011009	5a		phy				phy
.01100a	20 f9 0e	jsr $010ef9			jsr 	VALGetBase 					; process , base (shared with STR$())
.01100d	85 14		sta $14				sta 	DSignCount
.01100f	7a		ply				ply 								; YA is the number
.011010	68		pla				pla
.011011	da		phx				phx
.011012	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.011014	20 1d 10	jsr $01101d			jsr 	ConvertToString 			; convert it to a string.
.011017	fa		plx				plx 								; restore X
.011018	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.01101a	74 20		stz $20,x			stz 	EXSValueH+0,x
.01101c	60		rts				rts
.01101d					ConvertToString:
.01101d	48		pha				pha
.01101e	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.011021	20 46 06	jsr $010646			jsr 	StringTempAllocate 			; allocate space for return string.
.011024	68		pla				pla
.011025					ConvertToStringAlreadyAllocated:
.011025	da		phx				phx 								; save X (base)
.011026	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.011028	84 26		sty $26				sty 	DTemp3+2
.01102a	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.01102c	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.01102e	10 15		bpl $011045			bpl 	_CTSNotNegative
.011030	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.011033	20 af 10	jsr $0110af			jsr 	CTSOutputA
.011036	38		sec				sec 								; negate DTemp3 which is the number
.011037	a9 00 00	lda #$0000			lda 	#0
.01103a	e5 24		sbc $24				sbc 	DTemp3
.01103c	85 24		sta $24				sta 	DTemp3
.01103e	a9 00 00	lda #$0000			lda 	#0
.011041	e5 26		sbc $26				sbc 	DTemp3+2
.011043	85 26		sta $26				sta 	DTemp3+2
.011045					_CTSNotNegative:
.011045	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.011048	48		pha				pha
.011049	a9 00 00	lda #$0000			lda 	#0
.01104c	48		pha				pha
.01104d	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.01104f	85 08		sta $08				sta 	DTemp1
.011051	64 0a		stz $0a				stz 	DTemp1+2
.011053					_CTSMultiplySubtractor:
.011053	38		sec				sec 								; check number vs subtractor
.011054	a5 24		lda $24				lda 	DTemp3
.011056	e5 08		sbc $08				sbc 	DTemp1
.011058	a5 26		lda $26				lda 	DTemp3+2
.01105a	e5 0a		sbc $0a				sbc 	DTemp1+2
.01105c	90 0f		bcc $01106d			bcc		_CTSScaledUp 				; if >= then scaled up.
.01105e	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.011060	48		pha				pha
.011061	a5 0a		lda $0a				lda 	DTemp1+2
.011063	48		pha				pha
.011064	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.011066	20 cb 0f	jsr $010fcb			jsr 	MultiplyTemp1ByA
.011069	b0 02		bcs $01106d			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.01106b	80 e6		bra $011053			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.01106d					_CTSScaledUp:
.01106d	7a		ply				ply 								; YA contains the previous divider.
.01106e	68		pla				pla
.01106f	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.011072	d0 05		bne $011079			bne 	_CTSHasDigit
.011074	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.011077	f0 20		beq $011099			beq 	_CTSExit
.011079					_CTSHasDigit:
.011079	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01107b	84 0e		sty $0e				sty 	DTemp2+2
.01107d	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.011080					_CTSSubLoop:
.011080	38		sec				sec 								; subtract subtractor from number
.011081	a5 24		lda $24				lda 	DTemp3
.011083	e5 0c		sbc $0c				sbc 	DTemp2
.011085	a8		tay				tay 								; intermediate in Y
.011086	a5 26		lda $26				lda 	DTemp3+2
.011088	e5 0e		sbc $0e				sbc 	DTemp2+2
.01108a	90 07		bcc $011093			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.01108c	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.01108e	84 24		sty $24				sty 	DTemp3
.011090	e8		inx				inx 								; one more subtraction
.011091	80 ed		bra $011080			bra 	_CTSSubLoop 				; try it again.
.011093					_CTSFinishedSubtracting:
.011093	8a		txa				txa 								; convert to ASCII.
.011094	20 a2 10	jsr $0110a2			jsr 	CTSOutputHexDigit 			; write that out.
.011097	80 d4		bra $01106d			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.011099					_CTSExit:
.011099	a5 24		lda $24				lda 	DTemp3 						; output last digit
.01109b	20 a2 10	jsr $0110a2			jsr 	CTSOutputHexDigit
.01109e	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.0110a0	fa		plx				plx 								; restore X.
.0110a1	60		rts				rts
.0110a2					CTSOutputHexDigit:
.0110a2	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.0110a5	90 04		bcc $0110ab			bcc 	_CTSNotLetter
.0110a7	18		clc				clc
.0110a8	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.0110ab					_CTSNotLetter:
.0110ab	18		clc				clc
.0110ac	69 30 00	adc #$0030			adc 	#48
.0110af					CTSOutputA:
.0110af	5a		phy				phy 								; save Y, set Y to current pointer
.0110b0	a4 1a		ldy $1a				ldy 	DCurrentTempString
.0110b2	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.0110b5	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.0110b7	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.0110b9	1a		inc a				inc 	a
.0110ba	92 18		sta ($18)			sta 	(DStartTempString)
.0110bc	c2 20		rep #$20			rep 	#$20
.0110be	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.0110c0	7a		ply				ply 								; restore Y and exit.
.0110c1	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/instr.asm

.0110c2					Function_INSTR:
.0110c2	20 fe 05	jsr $0105fe			jsr 	ResetTypeInteger 			; returns a integer
.0110c5	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; evaluate a string.
.0110c8	48		pha				pha 								; save string to search
.0110c9	20 d5 05	jsr $0105d5			jsr 	ExpectComma
.0110cc	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; string to search for
.0110cf	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket
.0110d2	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.0110d4	68		pla				pla
.0110d5	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.0110d7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.0110d9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.0110db	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.0110dd	38		sec				sec
.0110de	b2 0c		lda ($0c)			lda 	(DTemp2)
.0110e0	f2 08		sbc ($08)			sbc		(DTemp1)
.0110e2	c2 20		rep #$20			rep 	#$20
.0110e4	90 2c		bcc $011112			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.0110e6	29 ff 00	and #$00ff			and 	#$00FF
.0110e9	1a		inc a				inc 	a
.0110ea	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.0110ec	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.0110ee	29 ff 00	and #$00ff			and 	#$00FF
.0110f1	f0 22		beq $011115			beq 	_FINSError
.0110f3					_FINSLoop:
.0110f3	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.0110f5	1a		inc a				inc 	a
.0110f6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0110f8	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.0110fa	29 ff 00	and #$00ff			and 	#$00FF
.0110fd	a8		tay				tay									; start comparing at index 1.
.0110fe					_FINSCompare:
.0110fe	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.011100	51 0c		eor ($0c),y			eor 	(DTemp2),y
.011102	29 ff 00	and #$00ff			and 	#$00FF
.011105	d0 05		bne $01110c			bne 	_FINSNext
.011107	88		dey				dey
.011108	d0 f4		bne $0110fe			bne 	_FINSCompare
.01110a	80 08		bra $011114			bra 	_FINSExit
.01110c					_FINSNext:
.01110c	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.01110e	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.011110	d0 e1		bne $0110f3			bne 	_FINSLoop
.011112					_FINSFail:
.011112	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.011114					_FINSExit:
.011114	60		rts				rts
.011115					_FINSError:
.011115	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011118	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>011120	68 20 53 74 72 69 6e 67 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/caseconv.asm

.011129					Function_UPPER:
.011129	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.01112c	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; evaluate a string.
.01112f	48		pha				pha
.011130	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; close call.
.011133	20 46 06	jsr $010646			jsr		StringTempAllocate 			; allocate memory for it
.011136	68		pla				pla
.011137	20 80 06	jsr $010680			jsr 	StringCreateCopy 			; create a copy of it.
.01113a	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01113c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01113e	a8		tay				tay 								; address in Y
.01113f	74 20		stz $20,x			stz 	EXSValueH+0,x
.011141	da		phx				phx 								; save X
.011142	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011144	29 ff 00	and #$00ff			and 	#$00FF
.011147	f0 20		beq $011169			beq 	_FUPExit
.011149	aa		tax				tax 								; put in X
.01114a					_FUPLoop:
.01114a	c8		iny				iny 								; increment and load character
.01114b	b9 00 00	lda $0000,y			lda 	$0000,y
.01114e	29 ff 00	and #$00ff			and 	#$00FF
.011151	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011154	90 10		bcc $011166			bcc 	_FUPNoChange
.011156	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011159	b0 0b		bcs $011166			bcs 	_FUPNoChange
.01115b	38		sec				sec 								; shift case
.01115c	e9 20 00	sbc #$0020			sbc 	#32
.01115f	e2 20		sep #$20			sep 	#$20 						; write back
.011161	99 00 00	sta $0000,y			sta 	$0000,y
.011164	c2 20		rep #$20			rep 	#$20
.011166					_FUPNoChange:
.011166	ca		dex				dex 								; do X times
.011167	d0 e1		bne $01114a			bne 	_FUPLoop
.011169					_FUPExit:
.011169	fa		plx				plx 								; restore X
.01116a	60		rts				rts
.01116b					Function_LOWER:
.01116b	20 06 06	jsr $010606			jsr 	ResetTypeString 			; returns a string.
.01116e	20 28 03	jsr $010328			jsr 	EvaluateNextString 			; evaluate a string.
.011171	48		pha				pha
.011172	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; close call.
.011175	20 46 06	jsr $010646			jsr		StringTempAllocate 			; allocate memory for it
.011178	68		pla				pla
.011179	20 80 06	jsr $010680			jsr 	StringCreateCopy 			; create a copy of it.
.01117c	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01117e	95 00		sta $00,x			sta 	EXSValueL+0,x
.011180	a8		tay				tay 								; address in Y
.011181	74 20		stz $20,x			stz 	EXSValueH+0,x
.011183	da		phx				phx 								; save X
.011184	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011186	29 ff 00	and #$00ff			and 	#$00FF
.011189	f0 20		beq $0111ab			beq 	_FLOExit
.01118b	aa		tax				tax 								; put in X
.01118c					_FLOLoop:
.01118c	c8		iny				iny 								; increment and load character
.01118d	b9 00 00	lda $0000,y			lda 	$0000,y
.011190	29 ff 00	and #$00ff			and 	#$00FF
.011193	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011196	90 10		bcc $0111a8			bcc 	_FLONoChange
.011198	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01119b	b0 0b		bcs $0111a8			bcs 	_FLONoChange
.01119d	18		clc				clc 								; shift case
.01119e	69 20 00	adc #$0020			adc 	#32
.0111a1	e2 20		sep #$20			sep 	#$20 						; write back
.0111a3	99 00 00	sta $0000,y			sta 	$0000,y
.0111a6	c2 20		rep #$20			rep 	#$20
.0111a8					_FLONoChange:
.0111a8	ca		dex				dex 								; do X times
.0111a9	d0 e1		bne $01118c			bne 	_FLOLoop
.0111ab					_FLOExit:
.0111ab	fa		plx				plx 								; restore X
.0111ac	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/let.asm

.0111ad					Function_Let:
.0111ad	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0111af	48		pha				pha  								; save on stack for later.
.0111b0	20 6f 03	jsr $01036f			jsr 	VariableFind 				; find the variable
.0111b3	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0111b5	b0 1c		bcs $0111d3			bcs 	_FLetFound 					; skip if found.
.0111b7	68		pla				pla 								; get and push the first token again.
.0111b8	48		pha				pha
.0111b9	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0111bc	d0 69		bne $011227			bne 	_FLError					; arrays, so this causes an error.
.0111be	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0111c0	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0111c3	20 19 04	jsr $010419			jsr 	VariableCreate 				; create it.
.0111c6	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0111c8					_FLSkipToken:
.0111c8	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0111ca	e6 06		inc $06				inc 	DCodePtr
.0111cc	e6 06		inc $06				inc 	DCodePtr
.0111ce	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0111d1	d0 f5		bne $0111c8			bne 	_FLSkipToken
.0111d3					_FLetFound:
.0111d3	68		pla				pla 								; get and save the first token.
.0111d4	48		pha				pha
.0111d5	a8		tay				tay 								; put it in Y
.0111d6	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0111d9	f0 07		beq $0111e2			beq 	_FLetNotArray
.0111db	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0111dd	20 e6 03	jsr $0103e6			jsr 	VariableSubscript			; index calculation
.0111e0	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0111e2					_FLetNotArray:
.0111e2	7a		ply				ply 								; get the first token into Y
.0111e3	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0111e5	48		pha				pha
.0111e6	5a		phy				phy 								; save the first token on the stack.
.0111e7	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0111ea	d2 06		cmp ($06)			cmp 	(DCodePtr)
.0111ec	d0 2c		bne $01121a			bne 	_FLetMissingEquals
.0111ee	e6 06		inc $06				inc 	DCodePtr
.0111f0	e6 06		inc $06				inc 	DCodePtr
.0111f2	68		pla				pla 								; restore the first token.
.0111f3	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0111f6	d0 0f		bne $011207			bne 	_FLetString 				; skip if string.
.0111f8	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; get an integer
.0111fb	7a		ply				ply 								; get address in Y
.0111fc	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0111fe	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011201	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.011203	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.011206	60		rts				rts
.011207					_FLetString:
.011207	20 0f 03	jsr $01030f			jsr 	EvaluateString 				; get a string.
.01120a	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01120c	20 a1 06	jsr $0106a1			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.01120f	7a		ply				ply 								; get address
.011210	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011213	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.011216	99 02 00	sta $0002,y			sta 	$0002,y
.011219	60		rts				rts
.01121a					_FLetMissingEquals:
.01121a	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01121d	4d 69 73 73 69 6e 67 20				.text 	"Missing =",$00 								; with this message
>011225	3d 00
.011227					_FLError:
.011227	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01122a	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011232	64 20 61 72 72 61 79 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/list.asm

.01123a					Command_List:
.01123a	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.01123d	20 46 06	jsr $010646		jsr 	StringTempAllocate
.011240	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011242	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011244	64 2e		stz $2e			stz 	DIndent2
.011246	64 32		stz $32			stz 	DTemp4+0 						; low number
.011248	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01124b	85 34		sta $34			sta 	DTemp4+2 						; high number.
.01124d	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.01124f	f0 3b		beq $01128c		beq 	_CLIList
.011251	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011254	f0 36		beq $01128c		beq 	_CLIList
.011256	c9 24 32	cmp #$3224		cmp 	#commaTokenID 					; is it , something.
.011259	f0 13		beq $01126e		beq 	_CLIComma
.01125b	20 09 03	jsr $010309		jsr 	EvaluateNextInteger 			; yes, first number
.01125e	c0 00 00	cpy #$0000		cpy 	#0
.011261	d0 21		bne $011284		bne 	_CLIError
.011263	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011265	85 34		sta $34			sta 	DTemp4+2
.011267	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011269	c9 24 32	cmp #$3224		cmp 	#commaTokenID
.01126c	d0 1e		bne $01128c		bne 	_CLIList
.01126e					_CLIComma:
.01126e	20 d5 05	jsr $0105d5		jsr 	ExpectComma 					; skip comma
.011271	b2 06		lda ($06)		lda 	(DCodePtr)
.011273	f0 12		beq $011287		beq 	_CLIToEnd 						; if $0000 or :, then list to end.
.011275	c9 26 32	cmp #$3226		cmp 	#colonTokenID
.011278	f0 0d		beq $011287		beq 	_CLIToEnd
.01127a	20 09 03	jsr $010309		jsr 	EvaluateNextInteger 			; get end line.
.01127d	85 34		sta $34			sta 	DTemp4+2
.01127f	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011282	f0 08		beq $01128c		beq 	_CLIList
.011284					_CLIError:
.011284	82 1b f3	brl $0105a2		brl 	SyntaxError
.011287					_CLIToEnd:
.011287	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01128a	85 34		sta $34			sta 	DTemp4+2
.01128c					_CLIList:
.01128c	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.01128f	18		clc			clc
.011290	65 02		adc $02			adc 	DBaseAddress
.011292	a8		tay			tay 									; put in Y
.011293					_CLINextLine:
.011293	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011296	f0 29		beq $0112c1		beq 	_CLIExit
.011298	20 29 14	jsr $011429		jsr 	ScanIndent  					; scan for formatting.
.01129b	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.01129e	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0112a0	90 14		bcc $0112b6		bcc 	_CLIFollowLink
.0112a2	c5 34		cmp $34			cmp 	DTemp4+2
.0112a4	f0 02		beq $0112a8		beq 	_CLIShowLine
.0112a6	b0 0e		bcs $0112b6		bcs 	_CLIFollowLink
.0112a8					_CLIShowLine:
.0112a8	a5 30		lda $30			lda 	DListBuffer
.0112aa	20 c4 12	jsr $0112c4		jsr 	Detokenise 						; detokenise it
.0112ad	5a		phy			phy
.0112ae	a8		tay			tay 									; print buffer out
.0112af	20 2c 06	jsr $01062c		jsr 	PrintBasicString
.0112b2	20 fc 1b	jsr $011bfc		jsr 	HWNewLine
.0112b5	7a		ply			ply 									; get address
.0112b6					_CLIFollowLink:
.0112b6	98		tya			tya 									; follow link
.0112b7	18		clc			clc
.0112b8	79 00 00	adc $0000,y		adc 	$0000,y
.0112bb	a8		tay			tay
.0112bc	20 18 1c	jsr $011c18		jsr 	HWCheckBreak 					; break key pressed.
.0112bf	f0 d2		beq $011293		beq 	_CLINextLine
.0112c1					_CLIExit:
.0112c1	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.0112c3	60		rts			rts
.0112c4					Detokenise:
.0112c4	48		pha			pha
.0112c5	da		phx			phx
.0112c6	5a		phy			phy
.0112c7	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.0112c9	1a		inc a			inc 	a
.0112ca	85 1a		sta $1a			sta 	DCurrentTempString
.0112cc	64 1c		stz $1c			stz		DConstantShift
.0112ce	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.0112d1	92 18		sta ($18)		sta 	(DStartTempString)
.0112d3	5a		phy			phy 									; save Y
.0112d4	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0112d7	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0112da	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0112dd	20 25 10	jsr $011025		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0112e0	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0112e2	c5 2e		cmp $2e			cmp 	DIndent2
.0112e4	90 02		bcc $0112e8		bcc 	_DTKSmaller
.0112e6	a5 2e		lda $2e			lda 	DIndent2
.0112e8					_DTKSmaller:
.0112e8	0a		asl a			asl 	a
.0112e9	69 06 00	adc #$0006		adc 	#6
.0112ec	85 08		sta $08			sta 	DTemp1
.0112ee					_DTKPadLineNo:
.0112ee	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0112f1	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.0112f4	b2 18		lda ($18)		lda 	(DStartTempString)
.0112f6	29 ff 00	and #$00ff		and 	#$00FF
.0112f9	c5 08		cmp $08			cmp 	DTemp1
.0112fb	d0 f1		bne $0112ee		bne 	_DTKPadLineNo
.0112fd	68		pla			pla 									; get pointer
.0112fe	18		clc			clc 									; point to start of line
.0112ff	69 04 00	adc #$0004		adc 	#4
.011302	a8		tay			tay 									; put back in Y.
.011303					_DTKMainLoop:
.011303	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011306	d0 04		bne $01130c		bne 	_DTKNotZero 					; if zero, return.
.011308	7a		ply			ply
.011309	fa		plx			plx
.01130a	68		pla			pla
.01130b	60		rts			rts
.01130c					_DTKNotZero:
.01130c	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.01130f	b0 1c		bcs $01132d		bcs 	_DTKNotString
.011311	5a		phy			phy										; save token address on stack.
.011312	c8		iny			iny 									; skip first token
.011313	c8		iny			iny
.011314	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.011317	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.01131a	98		tya			tya 									; copy the string out.
.01131b	20 80 06	jsr $010680		jsr 	StringCreateCopy
.01131e	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011321	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.011324	68		pla			pla 									; get token, which is its own offset
.011325	a8		tay			tay
.011326	18		clc			clc
.011327	79 00 00	adc $0000,y		adc 	$0000,y
.01132a	a8		tay			tay
.01132b	80 d6		bra $011303		bra 	_DTKMainLoop
.01132d					_DTKNotString:
.01132d	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011330	b0 09		bcs $01133b		bcs 	_DTKNotShift
.011332	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011335	85 1c		sta $1c			sta 	DConstantShift
.011337	c8		iny			iny 									; skip token.
.011338	c8		iny			iny
.011339	80 c8		bra $011303		bra 	_DTKMainLoop
.01133b					_DTKNotShift:
.01133b	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.01133e	b0 07		bcs $011347		bcs 	_DTKNotKeyword
.011340	c8		iny			iny 									; skip over token
.011341	c8		iny			iny
.011342	20 c1 13	jsr $0113c1		jsr 	_DTKDecodeKeyword 				; decode it.
.011345	80 bc		bra $011303		bra 	_DTKMainLoop
.011347					_DTKNotKeyword:
.011347	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01134a	b0 18		bcs $011364		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.01134c	5a		phy			phy 									; save pointer
.01134d	38		sec			sec  									; shift it in the range 0-32767
.01134e	e9 00 40	sbc #$4000		sbc 	#$4000
.011351	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011352	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011354	6a		ror a			ror 	a 								; rotate that into the constant value
.011355	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011357	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01135a	20 25 10	jsr $011025		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01135d	64 1c		stz $1c			stz 	DConstantShift
.01135f	7a		ply			ply 									; restore pointer
.011360	c8		iny			iny 									; skip token.
.011361	c8		iny			iny
.011362	80 9f		bra $011303		bra 	_DTKMainLoop
.011364					_DTKIdentifier:
.011364	48		pha			pha 									; save token for typing at end
.011365					_DTKILoop:
.011365	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011368	20 91 13	jsr $011391		jsr 	_DTKIDecodeToken 				; decode it.
.01136b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.01136e	c8		iny			iny 									; skip it
.01136f	c8		iny			iny
.011370	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011373	d0 f0		bne $011365		bne 	_DTKILoop
.011375	68		pla			pla 									; add $( as required.
.011376	48		pha			pha 									; comes from the first token.
.011377	29 00 20	and #$2000		and 	#IDTypeMask
.01137a	f0 06		beq $011382		beq 	_DTKINotString
.01137c	a9 24 00	lda #$0024		lda 	#"$"
.01137f	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.011382					_DTKINotString:
.011382	68		pla			pla
.011383	29 00 10	and #$1000		and 	#IDArrayMask
.011386	f0 06		beq $01138e		beq 	_DTKINotArray
.011388	a9 28 00	lda #$0028		lda 	#"("
.01138b	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.01138e					_DTKINotArray:
.01138e	82 72 ff	brl $011303		brl 	_DTKMainLoop
.011391					_DTKIDecodeToken:
.011391	5a		phy			phy
.011392	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.011395	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011398					_DTKIDivide:
.011398	38		sec			sec
.011399	e9 2d 00	sbc #$002d		sbc 	#45
.01139c	c8		iny			iny
.01139d	b0 f9		bcs $011398		bcs 	_DTKIDivide
.01139f	69 2d 00	adc #$002d		adc 	#45
.0113a2	20 ab 13	jsr $0113ab		jsr 	_DTKIOutA 						; output low.
.0113a5	98		tya			tya
.0113a6	20 ab 13	jsr $0113ab		jsr 	_DTKIOutA 						; output high
.0113a9	7a		ply			ply
.0113aa	60		rts			rts
.0113ab					_DTKIOutA:
.0113ab	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.0113ae	f0 10		beq $0113c0		beq 	_DTKIOutExit
.0113b0	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.0113b3	90 04		bcc $0113b9		bcc 	_DTKIOutAlpha
.0113b5	38		sec			sec  									; adjust for 0-9
.0113b6	e9 4b 00	sbc #$004b		sbc 	#$4B
.0113b9					_DTKIOutAlpha:
.0113b9	18		clc			clc										; adjust for A-Z
.0113ba	69 60 00	adc #$0060		adc 	#96
.0113bd	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.0113c0					_DTKIOutExit:
.0113c0	60		rts			rts
.0113c1					_DTKDecodeKeyword:
.0113c1	48		pha			pha
.0113c2	da		phx			phx
.0113c3	5a		phy			phy
.0113c4	a8		tay			tay 									; save token ID in Y
.0113c5	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.0113c8	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.0113cb	48		pha			pha 									; save this flag on a stack
.0113cc	5a		phy			phy 									; save the token ID
.0113cd	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.0113d0	d0 19		bne $0113eb		bne 	_DTKNotSpecial1
.0113d2	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.0113d4	88		dey			dey
.0113d5	b9 00 00	lda $0000,y		lda 	$0000,y
.0113d8	29 ff 00	and #$00ff		and 	#$00FF
.0113db	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0113de	f0 0b		beq $0113eb		beq 	_DTKNotSpecial1
.0113e0	c9 3a 00	cmp #$003a		cmp 	#":"
.0113e3	f0 06		beq $0113eb		beq 	_DTKNotSpecial1
.0113e5	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0113e8	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.0113eb					_DTKNotSpecial1:
.0113eb	68		pla			pla
.0113ec	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0113ef	a8		tay			tay 									; into Y.
.0113f0	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0113f3					_DTKDWorkThrough:
.0113f3	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0113f4	f0 0f		beq $011405		beq 	_DTKDFound
.0113f6	86 08		stx $08			stx 	DTemp1
.0113f8	bf 96 00 01	lda $010096,x		lda 	TokenText,x 					; read the type/skip byte.
.0113fc	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0113ff	18		clc			clc
.011400	65 08		adc $08			adc 	DTemp1
.011402	aa		tax			tax
.011403	80 ee		bra $0113f3		bra 	_DTKDWorkThrough
.011405					_DTKDFound:
.011405	bf 96 00 01	lda $010096,x		lda 	TokenText,x 					; get skip
.011409	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.01140c	3a		dec a			dec 	a
.01140d	a8		tay			tay 									; put in Y
.01140e					_DTKOut:
.01140e	bf 97 00 01	lda $010097,x		lda 	TokenText+1,x 					; output it.
.011412	29 ff 00	and #$00ff		and 	#$00FF
.011415	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.011418	e8		inx			inx
.011419	88		dey			dey
.01141a	d0 f2		bne $01140e		bne 	_DTKOut
.01141c	68		pla			pla 									; trailing space.
.01141d	d0 06		bne $011425		bne 	_DTKNotSpecial2
.01141f	a9 20 00	lda #$0020		lda 	#" "
.011422	20 72 06	jsr $010672		jsr 	StringWriteCharacter
.011425					_DTKNotSpecial2:
.011425	7a		ply			ply
.011426	fa		plx			plx
.011427	68		pla			pla
.011428	60		rts			rts
.011429					ScanIndent:
.011429	48		pha			pha
.01142a	5a		phy			phy
.01142b	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.01142d	85 2e		sta $2e			sta 	DIndent2
.01142f	98		tya			tya
.011430	18		clc			clc 									; point to code.
.011431	69 04 00	adc #$0004		adc 	#4
.011434	a8		tay			tay
.011435					_SILoop:
.011435	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011438	f0 35		beq $01146f		beq 	_SIExit
.01143a	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.01143d	b0 08		bcs $011447		bcs 	_SICheckKeyword
.01143f	98		tya			tya 									; skip string.
.011440	18		clc			clc
.011441	79 00 00	adc $0000,y		adc 	$0000,y
.011444	a8		tay			tay
.011445	80 ee		bra $011435		bra 	_SILoop
.011447					_SICheckKeyword:
.011447	29 00 e0	and #$e000		and 	#$E000
.01144a	c9 00 20	cmp #$2000		cmp 	#$2000
.01144d	f0 04		beq $011453		beq 	_SIFoundKeyword
.01144f					_SIAdvance:
.01144f	c8		iny			iny 									; if not, loop round.
.011450	c8		iny			iny
.011451	80 e2		bra $011435		bra 	_SILoop
.011453					_SIFoundKeyword:
.011453	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011456	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011459	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.01145c	f0 0d		beq $01146b		beq 	_SIKeyPlus
.01145e	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011461	d0 ec		bne $01144f		bne 	_SIAdvance
.011463	c6 2c		dec $2c			dec 	DIndent
.011465	10 e8		bpl $01144f		bpl 	_SIAdvance
.011467	64 2c		stz $2c			stz 	DIndent
.011469	80 e4		bra $01144f		bra 	_SIAdvance
.01146b					_SIKeyPlus:
.01146b	e6 2c		inc $2c			inc 	DIndent
.01146d	80 e0		bra $01144f		bra 	_SIAdvance
.01146f					_SIExit:
.01146f	7a		ply			ply
.011470	68		pla			pla
.011471	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/print.asm

.011472					Function_PRINT:
.011472	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011474	f0 33		beq $0114a9			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011476	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; likewise if a colon.
.011479	f0 2e		beq $0114a9			beq 	_FPRExitCR
.01147b	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID 			; semicolon, skip it
.01147e	f0 23		beq $0114a3			beq 	_FPRSkipLoop
.011480	c9 29 32	cmp #$3229			cmp 	#squoteTokenID 				; single quote is CR
.011483	f0 1b		beq $0114a0			beq 	_FPRNewLine
.011485	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; , is tab.
.011488	f0 11		beq $01149b			beq 	_FPRTab
.01148a					_FPRExpression:
.01148a	20 e2 01	jsr $0101e2			jsr 	Evaluate 					; evaluate a string or integer.
.01148d	b0 06		bcs $011495			bcs 	_FPRHaveString
.01148f	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011492	20 1d 10	jsr $01101d			jsr 	ConvertToString
.011495					_FPRHaveString:
.011495	a8		tay				tay 								; print the basic String.
.011496	20 2c 06	jsr $01062c			jsr 	PrintBASICString
.011499	80 d7		bra $011472			bra 	Function_Print 				; and go round again.
.01149b					_FPRTab:
.01149b	20 11 1c	jsr $011c11			jsr 	HWTab
.01149e	80 03		bra $0114a3			bra 	_FPRSkipLoop
.0114a0					_FPRNewLine:
.0114a0	20 fc 1b	jsr $011bfc			jsr 	HWNewLine
.0114a3					_FPRSkipLoop:
.0114a3	e6 06		inc $06				inc 	DCodePtr
.0114a5	e6 06		inc $06				inc 	DCodePtr
.0114a7	80 c9		bra $011472			bra 	Function_Print
.0114a9					_FPRExitCR:
.0114a9	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0114ab	88		dey				dey
.0114ac	88		dey				dey
.0114ad	b9 00 00	lda $0000,y			lda 	$0000,y
.0114b0	c9 24 32	cmp #$3224			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.0114b3	f0 08		beq $0114bd			beq 	_FPRExit
.0114b5	c9 25 32	cmp #$3225			cmp 	#semicolonTokenID
.0114b8	f0 03		beq $0114bd			beq 	_FPRExit
.0114ba	20 fc 1b	jsr $011bfc			jsr 	HWNewLine 					; print a new line.
.0114bd					_FPRExit:
.0114bd	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/if.asm

.0114be					Function_IF:
.0114be	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; check success.
.0114c1	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.0114c3	05 08		ora $08				ora 	DTemp1
.0114c5	a8		tay				tay 								; success flag in Y.
.0114c6	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.0114c8	c9 48 3a	cmp #$3a48			cmp 	#thenTokenID
.0114cb	d0 32		bne $0114ff			bne 	_FIFExtended 				; if so, go to the extended IF.
.0114cd	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.0114cf	e6 06		inc $06				inc 	DCodePtr
.0114d1	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.0114d4	f0 0f		beq $0114e5			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0114d6	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0114d8	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0114db	90 21		bcc $0114fe			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0114dd	c9 00 c0	cmp #$c000			cmp 	#$C000
.0114e0	b0 1c		bcs $0114fe			bcs 	_FIFContinue
.0114e2	4c 74 17	jmp $011774			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0114e5					_FIFEndOfLine:
.0114e5	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0114e7	f0 15		beq $0114fe			beq 	_FIFContinue 				; if done so, continue.
.0114e9	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0114ec	90 06		bcc $0114f4			bcc 	_FIFStringConstant
.0114ee	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0114f0	e6 06		inc $06				inc 	DCodePtr
.0114f2	80 f1		bra $0114e5			bra 	_FIFEndOfLine
.0114f4					_FIFStringConstant:
.0114f4	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0114f7	18		clc				clc
.0114f8	65 06		adc $06				adc 	DCodePtr
.0114fa	85 06		sta $06				sta 	DCodePtr
.0114fc	80 e7		bra $0114e5			bra 	_FIFEndOfLine
.0114fe					_FIFContinue:
.0114fe	60		rts				rts
.0114ff					_FIFExtended:
.0114ff	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011501	e6 2a		inc $2a				inc 	DStack
.011503	a9 44 3c	lda #$3c44			lda 	#ifTokenID
.011506	a6 2a		ldx $2a				ldx 	DStack
.011508	95 00		sta $00,x			sta 	$00,x
.01150a	98		tya				tya 								; see if the test was passed.
.01150b	f0 01		beq $01150e			beq 	_FIXSkip 					; if zero then it has failed.
.01150d	60		rts				rts 								; test passed, so continue executing
.01150e					_FIXSkip:
.01150e	a9 3b 3e	lda #$3e3b			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011511	a2 49 3a	ldx #$3a49			ldx 	#endifTokenID 				; at the same level.
.011514	20 74 15	jsr $011574			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.011517	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.011519	e6 06		inc $06				inc 	DCodePtr
.01151b	c9 49 3a	cmp #$3a49			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.01151e	d0 04		bne $011524			bne 	_FIXNoThrow
.011520	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011522	c6 2a		dec $2a				dec 	DStack
.011524					_FIXNoThrow:
.011524	60		rts				rts
.011525					Handler_ELSE:
.011525	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011527	b5 00		lda $00,x			lda 	$00,x
.011529	c9 44 3c	cmp #$3c44			cmp 	#ifTokenID
.01152c	d0 12		bne $011540			bne 	_HEBadStructure
.01152e	a9 49 3a	lda #$3a49			lda 	#endifTokenID 				; only searching one token.
.011531	a2 00 00	ldx #$0000			ldx 	#$0000
.011534	20 74 15	jsr $011574			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011537	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011539	e6 06		inc $06				inc 	DCodePtr
.01153b	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01153d	c6 2a		dec $2a				dec 	DStack
.01153f	60		rts				rts
.011540					_HEBadStructure:
.011540	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011543	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01154b	68 6f 75 74 20 49 66 00
.011553					Handler_ENDIF:
.011553	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011555	b5 00		lda $00,x			lda 	$00,x
.011557	c9 44 3c	cmp #$3c44			cmp 	#ifTokenID
.01155a	d0 05		bne $011561			bne 	_HEIBadStructure
.01155c	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01155e	c6 2a		dec $2a				dec 	DStack
.011560	60		rts				rts
.011561					_HEIBadStructure:
.011561	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011564	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01156c	68 6f 75 74 20 49 66 00
.011574					ScanForwardLevel:
.011574	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011576	86 0a		stx $0a				stx 	DTemp1+2
.011578	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01157a	85 0c		sta $0c				sta 	DTemp2
.01157c	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.01157f					_SFLLoop:
.01157f	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011582	d0 0d		bne $011591			bne 	_SFLNoCheck 				; we're in a substructure.
.011584	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011586	f0 09		beq $011591			beq 	_SFLNoCheck 				; don't check zero
.011588	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01158a	f0 04		beq $011590			beq 	_SFLFound
.01158c	c5 0a		cmp $0a				cmp 	DTemp1+2
.01158e	d0 01		bne $011591			bne 	_SFLNoCheck
.011590					_SFLFound:
.011590	60		rts				rts
.011591					_SFLNoCheck:
.011591	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011593	f0 4f		beq $0115e4			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011595	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011598	90 40		bcc $0115da			bcc 	_SFLSkipString 				; then handle that.
.01159a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.01159c	e6 06		inc $06				inc 	DCodePtr
.01159e	a8		tay				tay 								; put token in Y temporarily.
.01159f	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0115a2	c9 00 20	cmp #$2000			cmp 	#$2000
.0115a5	d0 d8		bne $01157f			bne 	_SFLLoop
.0115a7	98		tya				tya 								; get the token back.
.0115a8	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0115ab	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.0115ae	f0 cf		beq $01157f			beq 	_SFLLoop
.0115b0	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.0115b3	90 ca		bcc $01157f			bcc 	_SFLLoop
.0115b5	e8		inx				inx 								; increment the level.
.0115b6	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.0115b9	f0 c4		beq $01157f			beq 	_SFLLoop
.0115bb	ca		dex				dex 								; decrement the level
.0115bc	ca		dex				dex 								; one overdoes the previous inx.
.0115bd	10 c0		bpl $01157f			bpl 	_SFLLoop 					; if gone -ve then error.
.0115bf					_SFLError:
.0115bf	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.0115c1	85 22		sta $22				sta 	DLineNumber
.0115c3	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0115c6	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>0115ce	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0115da					_SFLSkipString:
.0115da	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0115dd	18		clc				clc
.0115de	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0115e0	85 06		sta $06				sta 	DCodePtr
.0115e2	80 9b		bra $01157f			bra 	_SFLLoop 					; go round again.
.0115e4					_SFLNextLine:
.0115e4	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0115e6	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0115e9	f0 d4		beq $0115bf			beq 	_SFLError 					; if zero, then there's no more code to search.
.0115eb	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0115ee	85 22		sta $22				sta 	DLineNumber
.0115f0	18		clc				clc
.0115f1	a5 06		lda $06				lda 	DCodePtr
.0115f3	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0115f6	85 06		sta $06				sta 	DCodePtr
.0115f8	80 85		bra $01157f			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/for.asm

.0115fa					Command_FOR:
.0115fa	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0115fc	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0115ff	d0 60		bne $011661			bne		_CFOBad
.011601	20 6f 03	jsr $01036f			jsr 	VariableFind 				; try to find variable
.011604	b0 15		bcs $01161b			bcs 	_CFOExists
.011606	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011608	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01160b	20 19 04	jsr $010419			jsr 	VariableCreate 				; create it.
.01160e	48		pha				pha 								; save on stack
.01160f					_CFOSkipToken:
.01160f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011611	e6 06		inc $06				inc 	DCodePtr
.011613	e6 06		inc $06				inc 	DCodePtr
.011615	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011618	d0 f5		bne $01160f			bne 	_CFOSkipToken
.01161a	68		pla				pla 								; restore address
.01161b					_CFOExists:
.01161b	48		pha				pha 								; push variable address on stack
.01161c	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.01161f	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.011622	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; this is the start value
.011625	bb		tyx				tyx 								; put high value in X
.011626	7a		ply				ply 								; address in Y
.011627	99 00 00	sta $0000,y			sta 	$0000,y
.01162a	8a		txa				txa
.01162b	99 02 00	sta $0002,y			sta 	$0002,y
.01162e	a9 2a 38	lda #$382a			lda 	#toTokenID 					; expect the TO
.011631	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.011634	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011636	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011638	95 02		sta $02,x			sta 	$02,x
.01163a	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01163c	95 04		sta $04,x			sta 	$04,x
.01163e	98		tya				tya 								; save variable address at +6
.01163f	95 06		sta $06,x			sta 	$06,x
.011641	a9 45 3c	lda #$3c45			lda 	#forTokenID 				; save for token at +8
.011644	95 08		sta $08,x			sta 	$08,x
.011646	8a		txa				txa 								; add 8 to stack position
.011647	18		clc				clc
.011648	69 08 00	adc #$0008			adc 	#8
.01164b	85 2a		sta $2a				sta 	DStack
.01164d	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011650	b2 06		lda ($06)			lda 	(DCodePtr)
.011652	c9 2b 38	cmp #$382b			cmp 	#stepTokenID 				; if STEP x is present.
.011655	d0 09		bne $011660			bne 	_CFONoStep
.011657	a9 2b 38	lda #$382b			lda 	#stepTokenID 				; skip STEP
.01165a	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.01165d	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; and whatever the step is.
.011660					_CFONoStep:
.011660	60		rts				rts
.011661					_CFOBad:
.011661	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011664	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>01166c	76 61 72 69 61 62 6c 65 00
.011675					Command_NEXT:
.011675	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011677	b5 00		lda $00,x			lda 	$00,x
.011679	c9 45 3c	cmp #$3c45			cmp 	#forTokenID 				; if not FOR then error
.01167c	f0 14		beq $011692			beq 	_CNXOk
.01167e	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011681	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011689	68 6f 75 74 20 46 6f 72 00
.011692					_CNXOk:
.011692	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011694	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011697	90 22		bcc $0116bb			bcc 	_CNXNoVariable
.011699	20 6f 03	jsr $01036f			jsr 	VariableFind 				; get address of variable.
.01169c	90 08		bcc $0116a6			bcc 	_CNXNextVar 				; not found variable, it's an error.
.01169e	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0116a0	ca		dex				dex
.0116a1	ca		dex				dex
.0116a2	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0116a4	f0 15		beq $0116bb			beq 	_CNXNoVariable 				; then continue
.0116a6					_CNXNextVar:
.0116a6	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0116a9	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>0116b1	20 76 61 72 69 61 62 6c 65 00
.0116bb					_CNXNoVariable:
.0116bb	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.0116bd	48		pha				pha
.0116be	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.0116c0	38		sec				sec
.0116c1	e9 08 00	sbc #$0008			sbc 	#8
.0116c4	85 2a		sta $2a				sta 	DStack
.0116c6	aa		tax				tax 								; X points to the stack.
.0116c7	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.0116c9	85 06		sta $06				sta 	DCodePtr
.0116cb	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; this is the target constant
.0116ce	5a		phy				phy 								; save the target on the stack
.0116cf	48		pha				pha
.0116d0	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.0116d3	85 08		sta $08				sta 	DTemp1
.0116d5	64 0a		stz $0a				stz 	DTemp1+2
.0116d7	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0116d9	c9 2b 38	cmp #$382b			cmp 	#stepTokenID
.0116dc	d0 0b		bne $0116e9			bne 	_CNXNoStep
.0116de	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0116e0	e6 06		inc $06				inc 	DCodePtr
.0116e2	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; work out the step.
.0116e5	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0116e7	84 0a		sty $0a				sty 	DTemp1+2
.0116e9					_CNXNoStep:
.0116e9	68		pla				pla 								; save the Target in DTemp2
.0116ea	85 0c		sta $0c				sta 	DTemp2
.0116ec	68		pla				pla
.0116ed	85 0e		sta $0e				sta 	DTemp2+2
.0116ef	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0116f1	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0116f3	a8		tay				tay
.0116f4	18		clc				clc
.0116f5	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0116f8	65 08		adc $08				adc 	DTemp1
.0116fa	99 00 00	sta $0000,y			sta 	$0000,y
.0116fd	b9 02 00	lda $0002,y			lda 	$0002,y
.011700	65 0a		adc $0a				adc 	DTemp1+2
.011702	99 02 00	sta $0002,y			sta 	$0002,y
.011705	38		sec				sec
.011706	a5 0c		lda $0c				lda 	DTemp2
.011708	f9 00 00	sbc $0000,y			sbc 	$0000,y
.01170b	85 0c		sta $0c				sta 	DTemp2
.01170d	a5 0e		lda $0e				lda 	DTemp2+2
.01170f	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011712	85 0e		sta $0e				sta 	DTemp2+2
.011714	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011716	f0 0a		beq $011722			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011718	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01171a	45 0a		eor $0a				eor 	DTemp1+2
.01171c	10 04		bpl $011722			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.01171e	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.01171f	85 06		sta $06				sta 	DCodePtr
.011721	60		rts				rts
.011722					_CNXLoopAgain:
.011722	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011723	18		clc				clc
.011724	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011726	aa		tax				tax
.011727	69 08 00	adc #$0008			adc 	#8
.01172a	85 2a		sta $2a				sta 	DStack
.01172c	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.01172e	85 22		sta $22				sta 	DLineNumber
.011730	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/transfer.asm

.011731					Function_ONGOTO:
.011731	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; on what GOTO :)
.011734	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011737	d0 25		bne $01175e			bne 	_FOGoFail
.011739	c9 00 00	cmp #$0000			cmp 	#0
.01173c	f0 20		beq $01175e			beq 	_FOGoFail 					; we start with index = 1
.01173e	48		pha				pha 								; save count on stack
.01173f	a9 37 3e	lda #$3e37			lda 	#gotoTokenID 				; expect GOTO
.011742	20 b2 05	jsr $0105b2			jsr 	ExpectToken
.011745	fa		plx				plx 								; put count in X.
.011746					_FOGoLoop:
.011746	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011748	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01174b	90 73		bcc $0117c0			bcc 	FGOFail 					; if not, then we have an error.
.01174d	c9 00 c0	cmp #$c000			cmp 	#$C000
.011750	b0 6e		bcs $0117c0			bcs 	FGOFail
.011752	ca		dex				dex 								; subtract one, if done, call GOTO code
.011753	f0 1f		beq $011774			beq 	Function_GOTO
.011755	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011757	e6 06		inc $06				inc 	DCodePtr
.011759	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; expect a comma
.01175c	80 e8		bra $011746			bra 	_FOGoLoop 					; and loop round.
.01175e					_FOGoFail:
.01175e	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011761	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011769	47 6f 74 6f 20 76 61 6c 75 65 00
.011774					Function_GOTO:
.011774	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011776	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011779	90 45		bcc $0117c0			bcc 	FGOFail 					; we don't do calculate line numbers.
.01177b	c9 00 c0	cmp #$c000			cmp 	#$C000
.01177e	b0 40		bcs $0117c0			bcs 	FGOFail
.011780	38		sec				sec 								; convert to 0-32767
.011781	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011784	aa		tax				tax
.011785	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011788	18		clc				clc
.011789	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.01178b	a8		tay				tay
.01178c					_FGOSearch:
.01178c	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01178f	f0 18		beq $0117a9			beq 	_FGOUnknown
.011791	8a		txa				txa 								; does it match line number ?
.011792	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011795	f0 08		beq $01179f			beq 	_FGOFound 					; yes, then found.
.011797	98		tya				tya 								; no follow the link
.011798	18		clc				clc
.011799	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.01179c	a8		tay				tay
.01179d	80 ed		bra $01178c			bra 	_FGOSearch 					; and keep looking
.01179f					_FGOFound:
.01179f	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0117a1	98		tya				tya 								; Y + 4 is the code pointer.
.0117a2	18		clc				clc 								; (skipping link and line #)
.0117a3	69 04 00	adc #$0004			adc 	#4
.0117a6	85 06		sta $06				sta 	DCodePtr
.0117a8	60		rts				rts									; and continue
.0117a9					_FGOUnknown:
.0117a9	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0117ac	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0117b4	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0117c0					FGOFail:
.0117c0	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0117c3	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0117cb	20 4e 75 6d 62 65 72 00
.0117d3					Function_GOSUB:
.0117d3	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0117d5	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0117d7	18		clc				clc
.0117d8	69 02 00	adc #$0002			adc 	#2
.0117db	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0117dd	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0117df	95 04		sta $04,x			sta 	$04,x
.0117e1	a9 38 3e	lda #$3e38			lda 	#gosubTokenID 				; save gosub token at +6
.0117e4	95 06		sta $06,x			sta 	$06,x
.0117e6	8a		txa				txa 								; advance stack by 6.
.0117e7	18		clc				clc
.0117e8	69 06 00	adc #$0006			adc 	#6
.0117eb	85 2a		sta $2a				sta 	DStack
.0117ed	80 85		bra $011774			bra 	Function_GOTO 				; and do a GOTO.
.0117ef					Function_RETURN:
.0117ef	a6 2a		ldx $2a				ldx 	DStack
.0117f1	b5 00		lda $00,x			lda 	$00,x
.0117f3	c9 38 3e	cmp #$3e38			cmp 	#gosubTokenID 				; check top token.
.0117f6	d0 11		bne $011809			bne 	_FRetFail
.0117f8	8a		txa				txa 								; unpick stack.
.0117f9	38		sec				sec
.0117fa	e9 06 00	sbc #$0006			sbc 	#6
.0117fd	85 2a		sta $2a				sta 	DStack
.0117ff	aa		tax				tax
.011800	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011802	85 06		sta $06				sta 	DCodePtr
.011804	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011806	85 22		sta $22				sta 	DLineNumber
.011808	60		rts				rts
.011809					_FRetFail:
.011809	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01180c	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011814	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/repeat.asm

.011821					Function_REPEAT:
.011821	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011823	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011825	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011827	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011829	95 04		sta $04,x			sta 	$04,x
.01182b	a9 42 3c	lda #$3c42			lda 	#repeatTokenID 				; save repeat token at +6
.01182e	95 06		sta $06,x			sta 	$06,x
.011830	8a		txa				txa 								; advance stack by 6.
.011831	18		clc				clc
.011832	69 06 00	adc #$0006			adc 	#6
.011835	85 2a		sta $2a				sta 	DStack
.011837	60		rts				rts
.011838					Function_UNTIL:
.011838	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.01183a	b5 00		lda $00,x			lda 	$00,x
.01183c	c9 42 3c	cmp #$3c42			cmp 	#repeatTokenID
.01183f	d0 26		bne $011867			bne 	_FUNFail
.011841	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; .... until what.
.011844	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011847	d0 15		bne $01185e			bne 	_FUNExit
.011849	c9 00 00	cmp #$0000			cmp 	#0
.01184c	d0 10		bne $01185e			bne 	_FUNExit
.01184e	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011850	38		sec				sec
.011851	e9 06 00	sbc #$0006			sbc 	#6
.011854	aa		tax				tax
.011855	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011857	85 06		sta $06				sta 	DCodePtr
.011859	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01185b	85 22		sta $22				sta 	DLineNumber
.01185d	60		rts				rts
.01185e					_FUNExit:
.01185e	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011860	38		sec				sec
.011861	e9 06 00	sbc #$0006			sbc 	#6
.011864	85 2a		sta $2a				sta 	DStack
.011866	60		rts				rts
.011867					_FUNFail:
.011867	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01186a	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011872	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/while.asm

.01187f					Function_WHILE:
.01187f	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011881	48		pha				pha 								; save on stack
.011882	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; while what.
.011885	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011888	d0 14		bne $01189e			bne 	_FWHExecute
.01188a	c9 00 00	cmp #$0000			cmp 	#0
.01188d	d0 0f		bne $01189e			bne 	_FWHExecute
.01188f	68		pla				pla 								; throw away current instruction
.011890	a9 46 3a	lda #$3a46			lda 	#wendTokenID 				; skip to WEND
.011893	a2 00 00	ldx #$0000			ldx 	#0
.011896	20 74 15	jsr $011574			jsr 	ScanForwardLevel 			; scan forward checking structures
.011899	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.01189b	e6 06		inc $06				inc 	DCodePtr
.01189d	60		rts				rts
.01189e					_FWHExecute:
.01189e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0118a0	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0118a1	3a		dec a				dec 	a
.0118a2	3a		dec a				dec 	a
.0118a3	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0118a5	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0118a7	95 04		sta $04,x			sta 	$04,x
.0118a9	a9 43 3c	lda #$3c43			lda 	#whileTokenID 				; save while token at +6
.0118ac	95 06		sta $06,x			sta 	$06,x
.0118ae	8a		txa				txa 								; advance stack by 6.
.0118af	18		clc				clc
.0118b0	69 06 00	adc #$0006			adc 	#6
.0118b3	85 2a		sta $2a				sta 	DStack
.0118b5	60		rts				rts
.0118b6					Function_WEND:
.0118b6	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.0118b8	b5 00		lda $00,x			lda 	$00,x
.0118ba	c9 43 3c	cmp #$3c43			cmp 	#whileTokenID
.0118bd	d0 11		bne $0118d0			bne 	_FWEFail
.0118bf	8a		txa				txa 								; unpick stack and always loop back.
.0118c0	38		sec				sec 								; we do the check at the top.
.0118c1	e9 06 00	sbc #$0006			sbc 	#6
.0118c4	85 2a		sta $2a				sta 	DStack
.0118c6	aa		tax				tax
.0118c7	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0118c9	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0118cb	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0118cd	85 22		sta $22				sta 	DLineNumber
.0118cf	60		rts				rts
.0118d0					_FWEFail:
.0118d0	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>0118d3	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0118db	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/run.asm

.0118e6					Function_END:
.0118e6	4c fa 1c	jmp $011cfa			jmp 	WarmStart
.0118e9					Function_RUN:
.0118e9	20 74 19	jsr $011974			jsr 	Function_CLEAR 				; clear all variables.
.0118ec	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0118ee	18		clc				clc
.0118ef	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.0118f2	80 0c		bra $011900			bra 	FRun_NextLineNumber
.0118f4					RUNExecuteTokenBuffer:
.0118f4	64 22		stz $22				stz 	DLineNumber					; zero line number
.0118f6	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.0118f9	18		clc				clc
.0118fa	65 02		adc $02				adc 	DBaseAddress
.0118fc	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.0118fe	80 12		bra $011912			bra 	FRun_NextInstruction
.011900					FRun_NextLineNumber:
.011900	a8		tay				tay 								; put in Y
.011901	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011904	f0 e0		beq $0118e6			beq 	Function_END 				; if zero, off the end of the program, so END the program
.011906	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.011909	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01190b	98		tya				tya 								; get address back
.01190c	18		clc				clc 								; skip over the link/line number
.01190d	69 04 00	adc #$0004			adc 	#4
.011910	85 06		sta $06				sta 	DCodePtr
.011912					FRun_NextInstruction:
.011912	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011914	20 18 1c	jsr $011c18			jsr 	HWCheckBreak 				; break key pressed.
.011917	d0 40		bne $011959			bne 	_FRun_Break
.011919	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.01191b	f0 32		beq $01194f			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.01191d	c9 26 32	cmp #$3226			cmp 	#colonTokenID 				; colon then skip
.011920	f0 18		beq $01193a			beq 	_FRun_Colon
.011922	a8		tay				tay 								; save in Y
.011923	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.011926	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011929	d0 15		bne $011940			bne 	_FRun_TryLET 				; if not, try LET as a default.
.01192b	98		tya				tya 								; get token back
.01192c	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.01192f	0a		asl a				asl 	a 							; double it into X
.011930	aa		tax				tax
.011931	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011933	e6 06		inc $06				inc 	DCodePtr
.011935	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011938	80 d8		bra $011912			bra 	FRun_NextInstruction 		; do the following instruction.
.01193a					_FRun_Colon:
.01193a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01193c	e6 06		inc $06				inc 	DCodePtr
.01193e	80 d2		bra $011912			bra 	FRun_NextInstruction 		; do the following instruction.
.011940					_FRun_TryLET:
.011940	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011942	c9 00 c0	cmp #$c000			cmp 	#$C000
.011945	90 05		bcc $01194c			bcc		_FRunSyntax 				; no, must be syntax.
.011947	20 ad 11	jsr $0111ad			jsr 	Function_LET 				; try as a LET.
.01194a	80 c6		bra $011912			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.01194c					_FRunSyntax:
.01194c	82 53 ec	brl $0105a2			brl 	SyntaxError
.01194f					_FRun_EndInstruction:
.01194f	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.011951	f0 0f		beq $011962			beq 	_FRun_WarmStart
.011953	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011955	1a		inc a				inc 	a 							; go to link for next line
.011956	1a		inc a				inc 	a
.011957	80 a7		bra $011900			bra 	FRun_NextLineNumber
.011959					_FRun_Break:
.011959	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01195c	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.011962					_FRun_WarmStart:
.011962	82 95 03	brl $011cfa			brl 	WarmStart
.011965					Function_NEW:
.011965	a9 00 02	lda #$0200			lda	 	#Block_ProgramStart
.011968	18		clc				clc
.011969	65 02		adc $02				adc 	DBaseAddress
.01196b	a8		tay				tay
.01196c	a9 00 00	lda #$0000			lda 	#$0000
.01196f	99 00 00	sta $0000,y			sta 	$0000,y
.011972	80 00		bra $011974			bra 	Function_Clear
.011974					Function_CLEAR:
.011974	20 80 19	jsr $011980			jsr 	ClearVariablesPointersAndStacks
.011977	60		rts				rts
.011978					Function_STOP:
.011978	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>01197b	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.011980					ClearVariablesPointersAndStacks:
.011980	a9 80 00	lda #$0080			lda 	#BASStack
.011983	85 2a		sta $2a				sta 	DStack
.011985	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011987	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.01198a	a9 00 00	lda #$0000			lda 	#$0000
.01198d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01198f	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.011991	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.011994	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011996	20 bf 19	jsr $0119bf			jsr 	FindCodeEnd 				; find where the program ends.
.011999	a8		tay				tay 								; Y points to it.
.01199a	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.01199d	99 02 00	sta $0002,y			sta 	$0002,y
.0119a0	99 04 00	sta $0004,y			sta 	$0004,y
.0119a3	98		tya				tya 								; start of working memory up
.0119a4	18		clc				clc
.0119a5	69 06 00	adc #$0006			adc 	#6
.0119a8	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0119ab	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0119ad	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0119b0					_FCLoop:
.0119b0	a9 00 00	lda #$0000			lda 	#$0000
.0119b3	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0119b5	c8		iny				iny
.0119b6	c8		iny				iny
.0119b7	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0119ba	d0 f4		bne $0119b0			bne 	_FCLoop
.0119bc	64 16		stz $16				stz 	DTempStringPointer
.0119be	60		rts				rts
.0119bf					FindCodeEnd:
.0119bf	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.0119c2	18		clc				clc
.0119c3	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0119c5	a8		tay				tay
.0119c6					_FCELoop:
.0119c6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0119c9	f0 08		beq $0119d3			beq 	_FCEExit
.0119cb	98		tya				tya 								; add offset
.0119cc	18		clc				clc
.0119cd	79 00 00	adc $0000,y			adc 	$0000,y
.0119d0	a8		tay				tay
.0119d1	80 f3		bra $0119c6			bra 	_FCELoop
.0119d3					_FCEExit:
.0119d3	98		tya				tya 								; return in A
.0119d4	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/dim.asm

.0119d5					Function_Dim:
.0119d5	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.0119d7	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0119da	f0 3b		beq $011a17			beq		_FDIMNotArray 				; no, error.
.0119dc	20 6f 03	jsr $01036f			jsr 	VariableFind 				; try to find it.
.0119df	b0 41		bcs $011a22			bcs 	_FDIMExists 				; if it does, that's an error.
.0119e1	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0119e3	48		pha				pha
.0119e4	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0119e6	48		pha				pha
.0119e7					_FDIMSkip:
.0119e7	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0119e9	e6 06		inc $06				inc 	DCodePtr
.0119eb	e6 06		inc $06				inc 	DCodePtr
.0119ed	29 00 08	and #$0800			and 	#IDContMask
.0119f0	d0 f5		bne $0119e7			bne 	_FDIMSkip
.0119f2	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; evaluate the size
.0119f5	20 cc 05	jsr $0105cc			jsr 	ExpectRightBracket 			; check the ) following.
.0119f8	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0119fb	d0 3b		bne $011a38			bne 	_FDIMSize
.0119fd	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011a00	f0 36		beq $011a38			beq 	_FDIMSize
.011a02	7a		ply				ply 								; restore HashTablePtr
.011a03	84 20		sty $20				sty 	DHashTablePtr
.011a05	7a		ply				ply 								; so now A is the high index, Y points to the token
.011a06	20 19 04	jsr $010419			jsr 	VariableCreate 				; create the variable.
.011a09	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011a0b	c9 24 32	cmp #$3224			cmp 	#commaTokenID 				; if not a comma, exit
.011a0e	d0 06		bne $011a16			bne 	_FDIMExit
.011a10	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.011a12	e6 06		inc $06				inc 	DCodePtr
.011a14	80 bf		bra $0119d5			bra 	Function_DIM 				; and do another
.011a16					_FDIMExit:
.011a16	60		rts				rts
.011a17					_FDIMNotArray:
.011a17	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011a1a	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.011a22					_FDIMExists:
.011a22	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011a25	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011a2d	65 64 69 6d 65 6e 73 69 6f 6e 00
.011a38					_FDIMSize:
.011a38	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011a3b	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>011a43	6c 61 72 67 65 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/collect.asm

.011a49					Function_COLLECT:
.011a49	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011a4b	85 0c		sta $0c				sta 	DTemp2
.011a4d	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011a50	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.011a52	85 0e		sta $0e				sta 	DTemp2+2
.011a54	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011a56	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011a58					_FCNextPass:
.011a58	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011a5a	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011a5c	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011a5e	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011a61	18		clc				clc
.011a62	65 02		adc $02				adc 	DBaseAddress
.011a64	a8		tay				tay 								; put in Y
.011a65	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011a68					_FCO1:
.011a68	20 8e 1a	jsr $011a8e			jsr  	COLLECTScanVariable 		; scan that one.
.011a6b	c8		iny				iny 	 							; go to next pointer
.011a6c	c8		iny				iny
.011a6d	ca		dex				dex
.011a6e	d0 f8		bne $011a68			bne 	_FCO1 						; until done all 16.
.011a70	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011a73					_FCO2:
.011a73	20 a2 1a	jsr $011aa2			jsr  	COLLECTScanArray 			; scan that one.
.011a76	c8		iny				iny 	 							; go to next pointer
.011a77	c8		iny				iny
.011a78	ca		dex				dex
.011a79	d0 f8		bne $011a73			bne 	_FCO2 						; until done all 16.
.011a7b	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011a7d	f0 0e		beq $011a8d			beq		_FCExit 					; if finished then exit.
.011a7f	48		pha				pha 								; save the target address
.011a80	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.011a82	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.011a84	20 a1 06	jsr $0106a1			jsr 	StringMakeConcrete 			; make the string concrete.
.011a87	7a		ply				ply 								; restore the string.
.011a88	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011a8b	80 cb		bra $011a58			bra		_FCNextPass
.011a8d					_FCExit:
.011a8d	60		rts				rts
.011a8e					COLLECTScanVariable:
.011a8e	da		phx				phx 								; save XY
.011a8f	5a		phy				phy
.011a90					_CSVLoop:
.011a90	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011a93	f0 0a		beq $011a9f			beq 	_CSVExit
.011a95	a8		tay				tay 								; put new address into Y
.011a96	18		clc				clc 								; which is four on.
.011a97	69 04 00	adc #$0004			adc 	#4
.011a9a	20 c3 1a	jsr $011ac3			jsr 	COLLECTCheck
.011a9d	80 f1		bra $011a90			bra 	_CSVLoop
.011a9f					_CSVExit:
.011a9f	7a		ply				ply
.011aa0	fa		plx				plx
.011aa1	60		rts				rts
.011aa2					COLLECTScanArray:
.011aa2	da		phx				phx 								; save XY
.011aa3	5a		phy				phy
.011aa4					_CSALoop:
.011aa4	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011aa7	f0 17		beq $011ac0			beq 	_CSAExit
.011aa9	a8		tay				tay 								; put new address in Y
.011aaa	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011aad	aa		tax				tax
.011aae	e8		inx				inx									; +1 as one more data element.
.011aaf	98		tya				tya 								; point A to first element, at +6
.011ab0	18		clc				clc
.011ab1	69 06 00	adc #$0006			adc 	#6
.011ab4					_CSADoAllStrings:
.011ab4	20 c3 1a	jsr $011ac3			jsr 	COLLECTCheck 				; collect check the first.
.011ab7	1a		inc a				inc 	a 							; advance the pointer.
.011ab8	1a		inc a				inc 	a
.011ab9	1a		inc a				inc 	a
.011aba	1a		inc a				inc 	a
.011abb	ca		dex				dex
.011abc	d0 f6		bne $011ab4			bne 	_CSADoAllStrings 			; until all strings are done.
.011abe	80 e4		bra $011aa4			bra 	_CSALoop
.011ac0					_CSAExit:
.011ac0	7a		ply				ply
.011ac1	fa		plx				plx
.011ac2	60		rts				rts
.011ac3					COLLECTCheck:
.011ac3	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011ac5	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011ac7	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011ac9	90 0a		bcc $011ad5			bcc 	_COCExit
.011acb	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011acd	b0 06		bcs $011ad5			bcs 	_COCExit
.011acf	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011ad1	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.011ad3	85 14		sta $14				sta 	DSignCount
.011ad5					_COCExit:
.011ad5	a5 0a		lda $0a				lda 	DTemp1+2
.011ad7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/memwrite.asm

.011ad8					Command_POKE:
.011ad8	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; address
.011adb	48		pha				pha	 								; save on stack
.011adc	5a		phy				phy
.011add	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; comma seperator.
.011ae0	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; data
.011ae3	fa		plx				plx 								; pull address and store in DTemp1
.011ae4	86 0a		stx $0a				stx 	DTemp1+2
.011ae6	fa		plx				plx
.011ae7	86 08		stx $08				stx 	DTemp1+0
.011ae9	e2 20		sep #$20			sep 	#$20 						; byte mode
.011aeb	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011aed	c2 20		rep #$20			rep 	#$20 						; word mode
.011aef	60		rts				rts
.011af0					Command_DOKE:
.011af0	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; address
.011af3	48		pha				pha	 								; save on stack
.011af4	5a		phy				phy
.011af5	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; comma seperator.
.011af8	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; data
.011afb	fa		plx				plx 								; pull address and store in DTemp1
.011afc	86 0a		stx $0a				stx 	DTemp1+2
.011afe	fa		plx				plx
.011aff	86 08		stx $08				stx 	DTemp1+0
.011b01	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011b03	60		rts				rts
.011b04					Command_LOKE:
.011b04	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; address
.011b07	48		pha				pha	 								; save on stack
.011b08	5a		phy				phy
.011b09	20 d5 05	jsr $0105d5			jsr 	ExpectComma 				; comma seperator.
.011b0c	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; data
.011b0f	fa		plx				plx 								; pull address and store in DTemp1
.011b10	86 0a		stx $0a				stx 	DTemp1+2
.011b12	fa		plx				plx
.011b13	86 08		stx $08				stx 	DTemp1+0
.011b15	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011b17	98		tya				tya
.011b18	a0 02 00	ldy #$0002			ldy 	#2
.011b1b	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011b1d	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\commands/miscellany.asm

.011b1e					Function_ASSERT:
.011b1e	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; something that returns an integer.
.011b21	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.011b23	05 08		ora $08				ora 	Dtemp1
.011b25	f0 01		beq $011b28			beq 	_FAssFail
.011b27	60		rts				rts
.011b28					_FAssFail:
.011b28	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011b2b	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>011b33	61 69 6c 65 64 00
.011b39					Function_CLS:
.011b39	20 92 1b	jsr $011b92			jsr 	HWClearScreen
.011b3c	60		rts				rts
.011b3d					Function_REM:
.011b3d	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011b3f	f0 0b		beq $011b4c			beq 	_FRemSyntax 				; if 0, syntax error
.011b41	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011b44	b0 06		bcs $011b4c			bcs 	_FRemSyntax
.011b46	18		clc				clc 								; add to DCodePtr
.011b47	65 06		adc $06				adc 	DCodePtr
.011b49	85 06		sta $06				sta 	DCodePtr
.011b4b	60		rts				rts
.011b4c					_FRemSyntax:
.011b4c	82 53 ea	brl $0105a2			brl 	SyntaxError
.011b4f					Function_LINK:
.011b4f	20 f0 02	jsr $0102f0			jsr 	EvaluateInteger 			; call address same page.
.011b52	85 08		sta $08				sta 	DTemp1 						; target address
.011b54	84 0a		sty $0a				sty 	DTemp1+2
.011b56	7b		tdc				tda 								; work out what the actual address is
.011b57	18		clc				clc
.011b58	69 08 00	adc #$0008			adc 	#DTemp1
.011b5b	8f 90 1b 01	sta $011b90			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011b5f	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011b61	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011b64	48		pha				pha
.011b65	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011b68	aa		tax				tax
.011b69	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011b6c	a8		tay				tay
.011b6d	68		pla				pla
.011b6e	22 8f 1b 01	jsl $011b8f			jsl 	_FLIExecuteIt
.011b72	5a		phy				phy 								; save Y
.011b73	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011b75	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011b78	8a		txa				txa
.011b79	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011b7c	68		pla				pla
.011b7d	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011b80	c8		iny				iny 								; point to their high bytes and clear them
.011b81	c8		iny				iny
.011b82	a9 00 00	lda #$0000			lda 	#0
.011b85	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011b88	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011b8b	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011b8e	60		rts				rts
.011b8f					_FLIExecuteIt:
.011b8f	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility/hwinterface.asm

=$f8020					HWCursor = $F8020 							; cursor position r/w
=$f8010					HWKeyPressed = $F8010 						; current key pressed (inkey) r
=$f8000					HWBreakKey = $F8000 						; non-zero if break pressed
=$f0000					HWScreen = $F0000							; screen RAM base
=$f8100					InputBuffer = $F8100 						; area of memory for input buffer.
=$f8200					LastKey = $F8200 							; last key pressed.
=64					sWidth = 64									; this is a quick hack so these must be powers of 2
=32					sHeight = 32 								; in this implementation.
.011b92					HWClearScreen:
.011b92	48		pha				pha
.011b93	da		phx				phx
.011b94	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2 			; fill screen memory with space
.011b97	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011b9a	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011b9e	ca		dex				dex
.011b9f	10 f6		bpl $011b97			bpl 	_CS0
.011ba1	a9 00 00	lda #$0000			lda 	#0 							; reposition cursor
.011ba4	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011ba8	fa		plx				plx
.011ba9	68		pla				pla
.011baa	60		rts				rts
.011bab					HWPrintChar:
.011bab	48		pha				pha
.011bac	da		phx				phx
.011bad	5a		phy				phy
.011bae	48		pha				pha 								; cursor position -> X
.011baf	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011bb3	aa		tax				tax
.011bb4	68		pla				pla
.011bb5	c9 ff ff	cmp #$ffff			cmp 	#-1
.011bb8	f0 08		beq $011bc2			beq 	_HWPCNoWrite
.011bba	e2 20		sep #$20			sep 	#$20 						; write character to screen.
.011bbc	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011bc0	c2 20		rep #$20			rep 	#$20
.011bc2					_HWPCNoWrite:
.011bc2	e8		inx				inx 								; bump cursor position.
.011bc3	8a		txa				txa
.011bc4	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011bc8	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight) 			; reached end of screen
.011bcb	d0 2b		bne $011bf8			bne 	_HWNotEnd
.011bcd	38		sec				sec 	 							; back up one line
.011bce	e9 40 00	sbc #$0040			sbc 	#sWidth
.011bd1	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011bd5	a2 00 00	ldx #$0000			ldx 	#0 							; scroll screen up.
.011bd8					_HWScrollUp:
.011bd8	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011bdc	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011be0	e8		inx				inx
.011be1	e8		inx				inx
.011be2	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011be5	d0 f1		bne $011bd8			bne 	_HWScrollUp
.011be7	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))		; clear bottom line.
.011bea					_HWBlank:
.011bea	a9 20 20	lda #$2020			lda 	#$2020
.011bed	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011bf1	e8		inx				inx
.011bf2	e8		inx				inx
.011bf3	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011bf6	d0 f2		bne $011bea			bne 	_HWBlank
.011bf8					_HWNotEnd:
.011bf8	7a		ply				ply
.011bf9	fa		plx				plx
.011bfa	68		pla				pla
.011bfb	60		rts				rts
.011bfc					HWNewLine:
.011bfc	48		pha				pha
.011bfd	da		phx				phx
.011bfe	a2 3f 00	ldx #$003f			ldx 	#sWidth-1 					; print spaces until X & position = 0
.011c01					HWMoveCursor:
.011c01	a9 ff ff	lda #$ffff			lda 	#-1
.011c04	20 ab 1b	jsr $011bab			jsr 	HWPrintChar
.011c07	8a		txa				txa
.011c08	2f 20 80 0f	and $0f8020			and 	HWCursor
.011c0c	d0 f3		bne $011c01			bne 	HWMoveCursor
.011c0e	fa		plx				plx
.011c0f	68		pla				pla
.011c10	60		rts				rts
.011c11	48		pha		HWTab:	pha
.011c12	da		phx				phx
.011c13	a2 07 00	ldx #$0007			ldx 	#7
.011c16	80 e9		bra $011c01			bra 	HWMoveCursor
.011c18					HWCheckBreak:
.011c18	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011c1c	60		rts				rts
.011c1d					HWInkey:
.011c1d	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011c21	60		rts				rts
.011c22					HWInputLine:
.011c22	20 1d 1c	jsr $011c1d			jsr 	HWInkey 					; get a keystroke.
.011c25	cf 00 82 0f	cmp $0f8200			cmp 	LastKey
.011c29	f0 f7		beq $011c22			beq 	HWInputLine
.011c2b					_HWILWait:
.011c2b	20 1d 1c	jsr $011c1d			jsr 	HWInkey
.011c2e	c9 00 00	cmp #$0000			cmp		#0
.011c31	f0 f8		beq $011c2b			beq 	_HWILWait
.011c33	8f 00 82 0f	sta $0f8200			sta 	LastKey
.011c37	c9 20 00	cmp #$0020			cmp 	#32 						; control check
.011c3a	90 2f		bcc $011c6b			bcc 	_HWILControl
.011c3c	20 ab 1b	jsr $011bab			jsr 	HWPrintChar 				; print out.
.011c3f	80 e1		bra $011c22			bra 	HWInputLine 				; loop back.
.011c41					_HWILBackSpace:
.011c41	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011c45	f0 db		beq $011c22			beq 	HWInputLine
.011c47	aa		tax				tax
.011c48	ca		dex				dex
.011c49	a9 20 00	lda #$0020			lda 	#" "
.011c4c	e2 20		sep #$20			sep 	#$20
.011c4e	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011c52	c2 20		rep #$20			rep 	#$20
.011c54	a2 ff ff	ldx #$ffff			ldx 	#-1
.011c57					_HWILMove:
.011c57	8a		txa				txa
.011c58	18		clc				clc
.011c59	6f 20 80 0f	adc $0f8020			adc 	HWCursor
.011c5d	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011c60	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011c64	80 bc		bra $011c22			bra 	HWInputLine
.011c66					_HWILClear:
.011c66	20 92 1b	jsr $011b92			jsr 	HWClearScreen
.011c69	80 b7		bra $011c22			bra 	HWInputLine
.011c6b					_HWILControl:
.011c6b	c9 09 00	cmp #$0009			cmp 	#9 							; tab
.011c6e	f0 60		beq $011cd0			beq 	_HWILTab
.011c70	c9 08 00	cmp #$0008			cmp 	#8 							; backspace.
.011c73	f0 cc		beq $011c41			beq 	_HWILBackSpace
.011c75	a2 c0 ff	ldx #$ffc0			ldx 	#-sWidth 					; Ctrl WASD move cursor
.011c78	c9 17 00	cmp #$0017			cmp 	#23
.011c7b	f0 da		beq $011c57			beq 	_HWILMove
.011c7d	a2 40 00	ldx #$0040			ldx 	#sWidth
.011c80	c9 13 00	cmp #$0013			cmp 	#19
.011c83	f0 d2		beq $011c57			beq 	_HWILMove
.011c85	a2 ff ff	ldx #$ffff			ldx 	#-1
.011c88	c9 01 00	cmp #$0001			cmp 	#1
.011c8b	f0 ca		beq $011c57			beq 	_HWILMove
.011c8d	a2 01 00	ldx #$0001			ldx 	#1
.011c90	c9 04 00	cmp #$0004			cmp 	#4
.011c93	f0 c2		beq $011c57			beq 	_HWILMove
.011c95	c9 0c 00	cmp #$000c			cmp 	#12 						; Ctrl L Clear Screen/Home
.011c98	f0 cc		beq $011c66			beq 	_HWILClear
.011c9a	c9 0d 00	cmp #$000d			cmp 	#13
.011c9d	d0 83		bne $011c22			bne 	HWInputLine
.011c9f	af 20 80 0f	lda $0f8020			lda 	HWCursor 					; cursor position
.011ca3	29 c0 ff	and #$ffc0			and 	#$FFC0 						; start of line.
.011ca6	85 08		sta $08				sta 	DTemp1 						; pointer in DTemp1
.011ca8	a9 0f 00	lda #$000f			lda 	#$000F
.011cab	85 0a		sta $0a				sta 	DTemp1+2
.011cad	a0 00 00	ldy #$0000			ldy 	#0 							; set up for copy
.011cb0					_HWILCopy:
.011cb0	bb		tyx				tyx
.011cb1	b7 08		lda [$08],y			lda 	[DTemp1],y
.011cb3	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x
.011cb7	c8		iny				iny
.011cb8	c8		iny				iny
.011cb9	c0 40 00	cpy #$0040			cpy 	#64 						; done the whole line ?
.011cbc	d0 f2		bne $011cb0			bne 	_HWILCopy
.011cbe	a9 00 00	lda #$0000			lda 	#0
.011cc1	bb		tyx				tyx
.011cc2	9f 00 81 0f	sta $0f8100,x			sta 	InputBuffer,x 				; add trailing zero.
.011cc6	20 fc 1b	jsr $011bfc			jsr 	HWNewLine 					; next line.
.011cc9	a9 00 81	lda #$8100			lda 	#InputBuffer & $FFFF
.011ccc	a0 0f 00	ldy #$000f			ldy 	#InputBuffer >> 16
.011ccf	60		rts				rts
.011cd0					_HWILTab:
.011cd0	20 11 1c	jsr $011c11			jsr 	HWTab
.011cd3	82 4c ff	brl $011c22			brl 	HWInputLine

;******  Return to file: ..\source\basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011cd6					SwitchBasicInstance:
.011cd6	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011cd8	20 92 1b	jsr $011b92			jsr 	HWClearScreen 						; clear screen
.011cdb	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011cde	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011ce0	86 02		stx $02				stx		DBaseAddress
.011ce2	84 04		sty $04				sty 	DHighAddress
.011ce4	ba		tsx				tsx 										; save the current SP.
.011ce5	86 3a		stx $3a				stx 	DStack65816
.011ce7	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011ce8	48		pha				pha 										; then copy it into B.
.011ce9	ab		plb				plb
.011cea	ab		plb				plb
.011ceb	20 80 19	jsr $011980			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011cee	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011cf1	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011cf3	f0 05		beq $011cfa			beq 	WarmStart
.011cf5	3a		dec a				dec 	a 									; decrement zero.
.011cf6	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011cf8	80 18		bra $011d12			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011cfa					WarmStart:
.011cfa	a2 60 1d	ldx #$1d60			ldx 	#BasicPrompt & $FFFF
.011cfd	20 0e 06	jsr $01060e			jsr 	PrintROMMessage
.011d00					NextCommand:
.011d00	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011d02	9a		txs				txs
.011d03	64 16		stz $16				stz 	DTempStringPointer 					; reset the
.011d05	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if the boot flag is non-zero
.011d08	b1 02		lda ($02),y			lda 	(DBaseAddress),y 					; then exit the emulator.
.011d0a	d0 52		bne $011d5e			bne 	ExitEmulator
.011d0c	20 22 1c	jsr $011c22			jsr 	HWInputLine 						; read line to YA.
.011d0f	20 d5 06	jsr $0106d5			jsr 	Tokenise 							; tokenise it.
.011d12					ExecuteTokenBuffer:
.011d12	a0 00 01	ldy #$0100			ldy 	#Block_TokenBuffer 					; get the first token
.011d15	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011d17	f0 e7		beq $011d00			beq 	NextCommand 						; nothing.
.011d19	c9 00 40	cmp #$4000			cmp 	#$4000 								; if not a number token, execute it
.011d1c	90 27		bcc $011d45			bcc 	_ETBCommand
.011d1e	c9 00 c0	cmp #$c000			cmp 	#$C000
.011d21	b0 22		bcs $011d45			bcs 	_ETBCommand
.011d23	38		sec				sec
.011d24	e9 00 40	sbc #$4000			sbc 	#$4000 								; put in range 0-32767
.011d27	f0 1f		beq $011d48			beq 	_ETBError
.011d29	48		pha				pha
.011d2a	20 a7 04	jsr $0104a7			jsr 	LineDelete 							; delete the line, if it exists.
.011d2d	20 80 19	jsr $011980			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011d30	a9 02 01	lda #$0102			lda 	#Block_TokenBuffer+2				; get the code for the line, e.g. next token
.011d33	18		clc				clc
.011d34	65 02		adc $02				adc 	DBaseAddress
.011d36	a8		tay				tay 										; Y contains the code.
.011d37	b9 00 00	lda $0000,y			lda 	$0000,y 							; is there any code ?
.011d3a	f0 c4		beq $011d00			beq 	NextCommand 						; no, next command.
.011d3c	68		pla				pla 										; line number in A, code in Y.
.011d3d	20 e2 04	jsr $0104e2			jsr 	LineInsert 							; insert the line
.011d40	20 80 19	jsr $011980			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011d43	80 bb		bra $011d00			bra 	NextCommand
.011d45					_ETBCommand:
.011d45	4c f4 18	jmp $0118f4			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011d48					_ETBError:
.011d48	20 66 05	jsr $010566			jsr 	ErrorHandler 						; call error routine
>011d4b	43 61 6e 6e 6f 74 20 68				.text 	"Cannot have line 0",$00 								; with this message
>011d53	61 76 65 20 6c 69 6e 65 20 30 00
.011d5e					ExitEmulator:
.011d5e	02 00		cop #$00			cop 	#0
.011d60					BasicPrompt:
>011d60	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ..\source\start.asm


;******  Processing file: ..\source\utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 d5 06	jsr $0106d5			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	e8 44 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 29 times (464 bytes)...
>0241f8	00 00 00 00 00 00 00 00 12 00 64 00 2c 3e 0a 00
>024208	06 42 6f 6d 62 65 72 00 00 00 2e 00 65 00 9a c8
>024218	f3 c8 7b c2 06 22 0f 40 0c 26 02 10 00 40 26 32
>024228	ac c9 88 cb 08 c0 06 22 40 40 26 32 e9 c8 44 c9
>024238	8c c3 06 22 20 40 00 00 08 00 66 00 35 3e 00 00
>024248	10 00 67 00 36 3e 26 32 36 3e 26 32 36 3e 00 00
>024258	0a 00 6e 00 38 3e e8 43 00 00 16 00 6f 00 9a c8
>024268	39 cb 05 c0 06 22 00 40 26 32 38 3e b0 44 00 00
>024278	22 00 78 00 2c ca 77 ca 05 c0 06 22 9a c8 f3 c8
>024288	7b c2 0a 24 ac c9 88 cb 08 c0 26 32 38 3e 14 45
>024298	00 00 08 00 dd 03 2c 3e 00 00 20 00 de 03 2c 3e
>0242a8	18 00 15 44 72 61 77 20 74 68 65 20 67 61 6d 65
>0242b8	20 6f 75 74 6c 69 6e 65 00 00 08 00 df 03 2c 3e
>0242c8	00 00 1a 00 e8 03 45 3c 18 c0 06 22 00 40 2a 38
>0242d8	ac c9 88 cb 08 c0 0b 24 01 40 00 00 30 00 f2 03
>0242e8	a5 ca 98 cb 58 c2 06 22 9a c8 f3 c8 7b c2 0a 24
>0242f8	27 32 e9 c8 44 c9 8c c3 0b 24 01 40 28 32 0c 26
>024308	ac c9 88 cb 08 c0 0a 24 18 c0 00 00 12 00 fc 03
>024318	3c 3e a5 ca 98 cb 58 c2 24 32 cf 40 00 00 12 00
>024328	06 04 6a c1 06 22 11 30 28 32 01 20 07 40 00 00
>024338	0e 00 10 04 44 3c 6a c1 09 22 00 40 00 00 12 00
>024348	1a 04 45 3c 09 c0 06 22 01 40 2a 38 6a c1 00 00
>024358	1e 00 24 04 3c 3e a5 ca 98 cb 58 c2 0b 24 09 c0
>024368	0c 26 ac c9 88 cb 08 c0 24 32 10 40 00 00 0a 00
>024378	2e 04 4a 3a 09 c0 00 00 08 00 38 04 49 3a 00 00
>024388	0a 00 4c 04 4a 3a 18 c0 00 00 08 00 56 04 39 3e
>024398	00 00 08 00 a6 04 2c 3e 00 00 1c 00 a7 04 2c 3e
>0243a8	14 00 10 55 70 64 61 74 65 20 74 68 65 20 73 63
>0243b8	6f 72 65 00 00 00 08 00 a8 04 2c 3e 00 00 26 00
>0243c8	b0 04 01 e0 06 22 21 30 08 00 05 30 30 30 30 30
>0243d8	0a 24 16 30 9a c8 39 cb 05 c0 28 32 24 32 05 40
>0243e8	28 32 00 00 12 00 ba 04 45 3c 09 c0 06 22 01 40
>0243f8	2a 38 05 40 00 00 26 00 c4 04 3c 3e 9a c8 f3 c8
>024408	7b c2 0a 24 09 c0 24 32 18 30 20 30 01 e0 24 32
>024418	09 c0 24 32 01 40 28 32 28 32 00 00 0a 00 ce 04
>024428	4a 3a 09 c0 00 00 08 00 d8 04 39 3e 00 00 08 00
>024438	0b 05 2c 3e 00 00 1a 00 0c 05 2c 3e 12 00 0e 4d
>024448	6f 76 65 20 74 68 65 20 50 6c 61 6e 65 00 00 00
>024458	08 00 0d 05 2c 3e 00 00 24 00 14 05 3c 3e 2c ca
>024468	77 ca 05 c0 24 32 20 40 26 32 3c 3e 2c ca 77 ca
>024478	05 c0 0a 24 01 40 24 32 20 40 00 00 18 00 1e 05
>024488	2c ca 77 ca 05 c0 06 22 2c ca 77 ca 05 c0 0a 24
>024498	01 40 00 00 1a 00 28 05 44 3c 1a 30 2c ca 77 ca
>0244a8	05 c0 28 32 09 22 20 40 48 3a 2f 3e 00 00 24 00
>0244b8	32 05 3c 3e 2c ca 77 ca 05 c0 24 32 d7 40 26 32
>0244c8	3c 3e 2c ca 77 ca 05 c0 0a 24 01 40 24 32 d2 40
>0244d8	00 00 08 00 3c 05 39 3e 00 00 00 00 ee ee ee ee
>0244e8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1968 times (31488 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
