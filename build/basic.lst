
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sun Jun 16 13:22:08 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f4	ldx #$f4fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c be 19 01	jmp $0119be			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	db 08					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	eb 08					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	fb 08					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	3f 09					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	a6 09					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	0b 09					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	88 09					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	6a 09					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	25 09					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	25 08					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	a6 08					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	b2 0a					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	2f 0a					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	a6 0a					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	b7 08					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	c9 08					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	40 0b					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	20 0b					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	fc 0a					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	e6 0a					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	5a 0d					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	7a 0e					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	7a 0b					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	b2 0b					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	e6 0b					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	0e 0d					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	28 0d					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	3f 0d					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	e3 0f					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	a1 0f					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	22 0c					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	b9 0c					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	4b 0c					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	3a 0f					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8e 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8e 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8e 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8e 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8e 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8e 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8e 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8e 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	69 19					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	25 10					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	4a 19					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	39 17					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	3b 17					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	a6 17					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	a2 17					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	01 18					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	75 18					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	65 19					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	c5 12					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	c7 15					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	26 16					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	42 16					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	84 15					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	78 13					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	04 19					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	1c 19					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	30 19					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	a0 10					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	7b 19					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	74 16					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	d2 16					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	11 13					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	4d 14					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	09 17					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	8b 16					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8e 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	a6 13					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	c8 14					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=608					TOKWorkSpace = EXSBase+EXSStackElements*3*2	; tokenised text goes here.
=1278					CPUStack = EXSBase+$300-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 31 02	brl $01049f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 9f 04	jmp $01049f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0b 05	jsr $01050b			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 89 04	ldx #$0489			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0b 05	jsr $01050b			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 95 0e	jsr $010e95			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 65 f0	jsr $01f065			jsr 	HWNewLine
.010487	80 fe		bra $010487	_EH1:	bra 	_EH1
>010489	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048e					IllegalToken:
.01048e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010491	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010499	54 6f 6b 65 6e 00
.01049f					SyntaxError:
.01049f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104aa	72 72 6f 72 00
.0104af					ExpectToken:
.0104af	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b1	d0 05		bne $0104b8			bne 	_CTKError					; error if not
.0104b3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b5	e6 06		inc $06				inc 	DCodePtr
.0104b7	60		rts				rts
.0104b8					_CTKError:
.0104b8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c3	74 6f 6b 65 6e 00
.0104c9					ExpectRightBracket:
.0104c9	48		pha				pha
.0104ca	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104cd	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d0	68		pla				pla
.0104d1	60		rts				rts
.0104d2					ExpectComma:
.0104d2	48		pha				pha
.0104d3	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d6	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d9	68		pla				pla
.0104da	60		rts				rts
.0104db					CheckBothNumeric:
.0104db	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104dd	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104df	30 01		bmi $0104e2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e1	60		rts				rts
.0104e2					_CBNFail:
.0104e2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ed	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fb					ResetTypeInteger:
.0104fb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fd	29 ff 7f	and #$7fff			and 	#$7FFF
.010500	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010502	60		rts				rts
.010503					ResetTypeString:
.010503	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010505	09 00 80	ora #$8000			ora 	#$8000
.010508	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050a	60		rts				rts
.01050b					PrintROMMessage:
.01050b	48		pha				pha
.01050c	da		phx				phx
.01050d					_PRMLoop:
.01050d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010511	29 ff 00	and #$00ff			and 	#$00FF
.010514	f0 06		beq $01051c			beq 	_PRMExit
.010516	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.010519	e8		inx				inx
.01051a	80 f1		bra $01050d			bra 	_PRMLoop
.01051c					_PRMExit:
.01051c	fa		plx				plx
.01051d	68		pla				pla
.01051e	60		rts				rts
.01051f					PrintBASICString:
.01051f	48		pha				pha
.010520	da		phx				phx
.010521	5a		phy				phy
.010522	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010525	29 ff 00	and #$00ff			and 	#$00FF
.010528	f0 0b		beq $010535			beq 	_PBSExit 					; null string
.01052a	aa		tax				tax
.01052b					_PBSLoop:
.01052b	c8		iny				iny
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y
.01052f	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.010532	ca		dex				dex
.010533	d0 f6		bne $01052b			bne 	_PBSLoop
.010535					_PBSExit:
.010535	7a		ply				ply
.010536	fa		plx				plx
.010537	68		pla				pla
.010538	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010539					StringTempAllocate:
.010539	48		pha				pha
.01053a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01053c	d0 09		bne $010547			bne 	_STANoReset
.01053e	5a		phy				phy 								; reset the temp string pointer.
.01053f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010542	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010544	85 16		sta $16				sta 	DTempStringPointer
.010546	7a		ply				ply
.010547					_STANoReset:
.010547	68		pla				pla 								; get length.
.010548	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01054b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01054e	18		clc				clc 								; this adds one, for the length.
.01054f	65 16		adc $16				adc 	DTempStringPointer
.010551	85 16		sta $16				sta 	DTempStringPointer
.010553	48		pha				pha 								; save start address
.010554	a9 00 00	lda #$0000			lda 	#$0000
.010557	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010559	92 16		sta ($16)			sta		(DTempStringPointer)
.01055b	c2 20		rep #$20			rep 	#$20
.01055d	68		pla				pla 								; restore start address
.01055e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010560	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010562	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010564	60		rts				rts
.010565					StringWriteCharacter:
.010565	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010567	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010569	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01056b	1a		inc a				inc 	a
.01056c	92 18		sta ($18)			sta 	(DStartTempString)
.01056e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010570	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010572	60		rts				rts
.010573					StringCreateCopy:
.010573	a8		tay				tay 								; put pointer to string in Y
.010574	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010577	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01057a	f0 17		beq $010593			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01057c	da		phx				phx 								; save X and put the character count in X
.01057d	aa		tax				tax
.01057e					_SCCCopy:
.01057e	c8		iny				iny 								; advance and read (first time skips length)
.01057f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010581	b9 00 00	lda $0000,y			lda 	$0000,y
.010584	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010586	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010588	1a		inc a				inc 	a
.010589	92 18		sta ($18)			sta 	(DStartTempString)
.01058b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01058d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01058f	ca		dex				dex 								; do X times
.010590	d0 ec		bne $01057e			bne 	_SCCCopy
.010592	fa		plx				plx
.010593					_SCCExit:
.010593	60		rts				rts
.010594					StringMakeConcrete:
.010594	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010597	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010599	90 0f		bcc $0105aa			bcc 	_SMCExit
.01059b	85 08		sta $08				sta 	DTemp1 						; source
.01059d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01059f	29 ff 00	and #$00ff			and 	#$00FF
.0105a2	d0 07		bne $0105ab			bne 	_SMCNonZero 				; if not "" skip.
.0105a4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a7	18		clc				clc 								; this reference is used for all empty strings.
.0105a8	65 02		adc $02				adc 	DBaseAddress
.0105aa					_SMCExit:
.0105aa	60		rts				rts
.0105ab					_SMCNonZero:
.0105ab	48		pha				pha 								; save on stack.
.0105ac	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105af	18		clc				clc
.0105b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105b3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105b5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105ba	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105bc					_SMCLoop:
.0105bc	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105be	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105c0	88		dey				dey 								; Y+1 times.
.0105c1	10 f9		bpl $0105bc			bpl 	_SMCLoop
.0105c3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105c5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.0105c8					Tokenise:
.0105c8	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0105ca	84 0a		sty $0a				sty 	DTemp1+2
.0105cc	a9 60 02	lda #$0260			lda 	#TOKWorkSpace 				; reset workspace pointer.
.0105cf	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0105d1	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0105d4	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0105d7					_TOKCap:
.0105d7	c8		iny				iny 								; go to next
.0105d8	b7 08		lda [$08],y			lda 	[DTemp1],y
.0105da	29 ff 00	and #$00ff			and 	#$00FF
.0105dd	f0 22		beq $010601			beq 	_TOKEndCap
.0105df	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0105e2	d0 01		bne $0105e5			bne 	_TOKNotQuote
.0105e4	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0105e5					_TOKNotQuote:
.0105e5	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0105e8	90 ed		bcc $0105d7			bcc 	_TOKCap
.0105ea	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0105ed	b0 e8		bcs $0105d7			bcs 	_TOKCap
.0105ef	8a		txa				txa 								; check if in quotes
.0105f0	4a		lsr a				lsr 	a
.0105f1	b0 e4		bcs $0105d7			bcs 	_TOKCap
.0105f3	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0105f5	38		sec				sec
.0105f6	e9 20 00	sbc #$0020			sbc 	#32
.0105f9	e2 20		sep #$20			sep 	#$20
.0105fb	97 08		sta [$08],y			sta 	[DTemp1],y
.0105fd	c2 20		rep #$20			rep 	#$20
.0105ff	80 d6		bra $0105d7			bra 	_TOKCap
.010601					_TOKEndCap:
.010601	c6 08		dec $08				dec 	DTemp1
.010603					_TOKMainNext:
.010603	e6 08		inc $08				inc 	DTemp1
.010605					_TOKMainLoop:
.010605	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010607	29 ff 00	and #$00ff			and 	#$00FF
.01060a	c9 20 00	cmp #$0020			cmp 	#32
.01060d	90 1d		bcc $01062c			bcc 	_TOKExit 					; 0-31 exit.
.01060f	f0 f2		beq $010603			beq 	_TOKMainNext 				; 32 (space) skip.
.010611	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010614	f0 1d		beq $010633			beq 	_TOKString
.010616	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010619	90 1d		bcc $010638			bcc 	_TOKPunctuation
.01061b	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.01061e	90 42		bcc $010662			bcc 	_TOKNumber
.010620	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010623	90 13		bcc $010638			bcc 	_TOKPunctuation
.010625	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010628	90 3d		bcc $010667			bcc 	_TOKIdentifier
.01062a	80 0c		bra $010638			bra 	_TOKPunctuation 			; 91-   punctuation.
.01062c					_TOKExit:
.01062c	a9 00 00	lda #$0000			lda 	#$0000
.01062f	20 6c 06	jsr $01066c			jsr 	TOKWriteToken
.010632	60		rts				rts
.010633					_TOKString:
.010633	20 f6 06	jsr $0106f6			jsr 	TOKQuotedString
.010636	80 cd		bra $010605			bra 	_TOKMainLoop
.010638					_TOKPunctuation:
.010638	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01063b	20 5d 07	jsr $01075d			jsr 	TOKKeywordSearch
.01063e	b0 1d		bcs $01065d			bcs 	_TOKFoundPunctuation
.010640	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010643	20 5d 07	jsr $01075d			jsr 	TOKKeywordSearch
.010646	b0 15		bcs $01065d			bcs 	_TOKFoundPunctuation
.010648	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01064b	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010653	61 72 73 65 20 6c 69 6e 65 00
.01065d					_TOKFoundPunctuation:
.01065d	20 6c 06	jsr $01066c			jsr 	TOKWriteToken 				; output the token and go round again.
.010660	80 a3		bra $010605			bra 	_TOKMainLoop
.010662					_TOKNumber:
.010662	20 77 06	jsr $010677			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010665	80 9e		bra $010605			bra 	_TOKMainLoop
.010667					_TOKIdentifier:
.010667	20 b8 07	jsr $0107b8			jsr 	TOKIdentifier
.01066a	80 99		bra $010605			bra 	_TOKMainLoop
.01066c					TOKWriteToken:
.01066c	da		phx				phx
.01066d	a6 0c		ldx $0c				ldx 	DTemp2						; address in DirectPage to write to.
.01066f	95 00		sta $00,x			sta 	$00,x 						; save it.
.010671	e8		inx				inx 								; bump pointer and write back
.010672	e8		inx				inx
.010673	86 0c		stx $0c				stx 	DTemp2
.010675	fa		plx				plx
.010676	60		rts				rts
.010677					TOKInteger:
.010677	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010679	64 26		stz $26				stz 	DTemp3+2
.01067b					_TOKINLoop:
.01067b	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01067d	48		pha				pha
.01067e	a5 24		lda $24				lda 	DTemp3
.010680	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010682	26 26		rol $26				rol 	DTemp3+2
.010684	06 24		asl $24				asl 	DTemp3
.010686	26 26		rol $26				rol 	DTemp3+2
.010688	18		clc				clc
.010689	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.01068b	85 24		sta $24				sta 	DTemp3
.01068d	68		pla				pla
.01068e	65 26		adc $26				adc 	DTemp3+2
.010690	85 26		sta $26				sta 	DTemp3+2
.010692	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.010694	26 26		rol $26				rol 	DTemp3+2
.010696	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.010698	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.01069b	d0 44		bne $0106e1			bne 	_TOKINSize
.01069d	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.01069f	29 0f 00	and #$000f			and 	#15
.0106a2	18		clc				clc
.0106a3	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0106a5	85 24		sta $24				sta 	DTemp3
.0106a7	90 02		bcc $0106ab			bcc 	_TOKINNoCarry
.0106a9	e6 26		inc $26				inc 	DTemp3+2
.0106ab					_TOKINNoCarry:
.0106ab	e6 08		inc $08				inc 	DTemp1 						; look at next
.0106ad	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0106af	29 ff 00	and #$00ff			and 	#$00FF
.0106b2	c9 30 00	cmp #$0030			cmp 	#"0"
.0106b5	90 05		bcc $0106bc			bcc 	_TOKINGotInteger
.0106b7	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0106ba	90 bf		bcc $01067b			bcc		_TOKINLoop
.0106bc					_TOKINGotInteger:
.0106bc	a5 24		lda $24				lda 	DTemp3 						; lower word
.0106be	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0106c1	18		clc				clc
.0106c2	69 00 40	adc #$4000			adc 	#$4000
.0106c5	48		pha				pha 								; save it.
.0106c6	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0106c8	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0106ca	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0106cc	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0106cf	b0 10		bcs $0106e1			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0106d1	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0106d4	f0 06		beq $0106dc			beq 	_TOKINNoShift 				; don't need constant shift.
.0106d6	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0106d9	20 6c 06	jsr $01066c			jsr 	TOKWriteToken
.0106dc					_TOKINNoShift:
.0106dc	68		pla				pla 								; get lower its token
.0106dd	20 6c 06	jsr $01066c			jsr 	TOKWriteToken 				; output it
.0106e0	60		rts				rts
.0106e1					_TOKINSize:
.0106e1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0106e4	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>0106ec	74 6f 6f 20 6c 61 72 67 65 00
.0106f6					TOKQuotedString:
.0106f6	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.0106f8	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.0106fa	85 32		sta $32				sta 	DTemp4
.0106fc	a5 0a		lda $0a				lda 	DTemp1+2
.0106fe	85 34		sta $34				sta 	DTemp4+2
.010700					_TOKQFindSize:
.010700	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010702	e6 08		inc $08				inc 	DTemp1
.010704	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.010707	f0 3b		beq $010744			beq 	_TOQImbalance 				; end of line, and no quote found.
.010709	c9 22 00	cmp #$0022			cmp 	#34
.01070c	d0 f2		bne $010700			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.01070e	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010710	38		sec				sec
.010711	e5 32		sbc $32				sbc 	DTemp4
.010713	3a		dec a				dec 	a 							; one less character for closing quote
.010714	85 26		sta $26				sta 	DTemp3+2
.010716	18		clc				clc
.010717	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.01071a	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.01071d	20 6c 06	jsr $01066c			jsr 	TOKWriteToken
.010720	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010722	20 6c 06	jsr $01066c			jsr 	TOKWriteToken 				; effectively a byte-write.
.010725	c6 0c		dec $0c				dec 	DTemp2
.010727	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010729	f0 0f		beq $01073a			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.01072b					_TOKQWriteString:
.01072b	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01072d	29 ff 00	and #$00ff			and 	#$00FF
.010730	20 6c 06	jsr $01066c			jsr 	TOKWriteToken 				; effectively a byte-write.
.010733	c6 0c		dec $0c				dec 	DTemp2
.010735	e6 32		inc $32				inc 	DTemp4 						; advance character
.010737	ca		dex				dex 								; do X times
.010738	d0 f1		bne $01072b			bne 	_TOKQWriteString
.01073a					_TOKQWriteEnd:
.01073a	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01073c	29 01 00	and #$0001			and 	#1
.01073f	f0 02		beq $010743			beq 	_TOKQExit
.010741	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010743					_TOKQExit:
.010743	60		rts				rts
.010744					_TOQImbalance:
.010744	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010747	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>01074f	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01075d					TOKKeywordSearch:
.01075d	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.01075f	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010762	85 34		sta $34				sta 	DTemp4+2
.010764	a2 00 00	ldx #$0000			ldx 	#0
.010767					_TOKScan:
.010767	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; read the first byte
.01076b	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.01076e	f0 46		beq $0107b6			beq 	_TOKFail 					; if zero then we have failed.
.010770	3a		dec a				dec 	a 							; -1 gives the length.
.010771	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010773	d0 2f		bne $0107a4			bne 	_TOKNext 					; no, then skip to next token.
.010775	da		phx				phx 								; save X
.010776	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010779					_TOKCompare:
.010779	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01077b	5f 93 00 01	eor $010093,x			eor 	TokenText+1,x
.01077f	29 ff 00	and #$00ff			and 	#$00FF
.010782	d0 1f		bne $0107a3			bne 	_TOKPopNext 				; if different, pop and goto next.
.010784	e8		inx				inx 								; bump X and Y.
.010785	c8		iny				iny
.010786	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.010788	d0 ef		bne $010779			bne 	_TOKCompare
.01078a	98		tya				tya 								; add length to the text pointer
.01078b	18		clc				clc
.01078c	65 08		adc $08				adc 	DTemp1
.01078e	85 08		sta $08				sta 	DTemp1
.010790	fa		plx				plx 								; restore X.
.010791	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the type/token bit.
.010795	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.010798	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.010799	4a		lsr a				lsr		a
.01079a	4a		lsr a				lsr 	a
.01079b	eb		xba				xba
.01079c	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.01079e	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0107a1	38		sec				sec
.0107a2	60		rts				rts
.0107a3					_TOKPopNext:
.0107a3	fa		plx				plx 								; restore X.
.0107a4					_TOKNext:
.0107a4	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the token skip again.
.0107a8	29 0f 00	and #$000f			and 	#$000F
.0107ab	85 24		sta $24				sta 	DTemp3 						; save it in DTemp3 so we can add it to X
.0107ad	8a		txa				txa
.0107ae	18		clc				clc
.0107af	65 24		adc $24				adc 	DTemp3
.0107b1	aa		tax				tax
.0107b2	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index/
.0107b4	80 b1		bra $010767			bra 	_TOKScan
.0107b6					_TOKFail:
.0107b6	18		clc				clc
.0107b7	60		rts				rts
.0107b8					TOKIdentifier:
.0107b8	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0107ba	85 24		sta $24				sta 	DTemp3
.0107bc					_TOKIFindLength:
.0107bc	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0107be	a7 08		lda [$08]			lda 	[DTemp1]
.0107c0	29 ff 00	and #$00ff			and 	#$00FF
.0107c3	20 0d 08	jsr $01080d			jsr 	TOKIsIdentifierCharacter
.0107c6	b0 f4		bcs $0107bc			bcs 	_TOKIFindLength
.0107c8	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0107ca	38		sec				sec
.0107cb	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0107cd	85 32		sta $32				sta 	DTemp4
.0107cf	85 34		sta $34				sta 	DTemp4+2 					; this is the name including $(
.0107d1	64 26		stz $26				stz 	DTemp3+2 					; these are type bits used when building
.0107d3	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0107d5	29 ff 00	and #$00ff			and 	#$00FF
.0107d8	c9 24 00	cmp #$0024			cmp 	#"$"
.0107db	d0 0b		bne $0107e8			bne 	_TOKINotString
.0107dd	e6 08		inc $08				inc 	DTemp1 						; skip $
.0107df	e6 34		inc $34				inc 	DTemp4+2 					; token length.
.0107e1	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0107e3	09 00 20	ora #$2000			ora 	#IDTypeMask
.0107e6	85 26		sta $26				sta 	DTemp3+2
.0107e8					_TOKINotString:
.0107e8	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0107ea	29 ff 00	and #$00ff			and 	#$00FF
.0107ed	c9 28 00	cmp #$0028			cmp 	#"("
.0107f0	d0 0b		bne $0107fd			bne 	_TOKINotArray
.0107f2	e6 08		inc $08				inc 	DTemp1 						; skip (
.0107f4	e6 34		inc $34				inc 	DTemp4+2 					; token length.
.0107f6	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0107f8	09 00 10	ora #$1000			ora 	#IDArrayMask
.0107fb	85 26		sta $26				sta 	DTemp3+2
.0107fd					_TOKINotArray:
.0107fd	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.0107ff	85 08		sta $08				sta 	DTemp1
.010801	a6 34		ldx $34				ldx 	DTemp4+2 					; so see if it is a token first.
.010803	20 5d 07	jsr $01075d			jsr 	TOKKeywordSearch
.010806	90 04		bcc $01080c			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010808	20 6c 06	jsr $01066c			jsr 	TOKWriteToken 				; if CS write token and exit.
.01080b	60		rts				rts
.01080c					_TOKIIdentifier:
.01080c	ea		nop				nop
.01080d					TOKIsIdentifierCharacter:
.01080d	c9 30 00	cmp #$0030			cmp 	#"0"
.010810	90 0f		bcc $010821			bcc 	_TOKIIFail
.010812	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010815	90 0c		bcc $010823			bcc 	_TOKIIOk
.010817	c9 41 00	cmp #$0041			cmp 	#"A"
.01081a	90 05		bcc $010821			bcc 	_TOKIIFail
.01081c	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01081f	90 02		bcc $010823			bcc 	_TOKIIOk
.010821					_TOKIIFail:
.010821	18		clc				clc
.010822	60		rts				rts
.010823					_TOKIIOk:
.010823	38		sec				sec
.010824	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010825					Binary_Add:
.010825	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010827	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010829	30 12		bmi $01083d		bmi 	_BATypeError
.01082b	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01082d	30 3f		bmi $01086e		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01082f	18		clc			clc 										; add the results
.010830	b5 00		lda $00,x		lda		EXSValueL+0,x
.010832	75 02		adc $02,x		adc 	EXSValueL+2,x
.010834	95 00		sta $00,x		sta 	EXSValueL+0,x
.010836	b5 20		lda $20,x		lda		EXSValueH+0,x
.010838	75 22		adc $22,x		adc 	EXSValueH+2,x
.01083a	95 20		sta $20,x		sta 	EXSValueH+0,x
.01083c	60		rts			rts
.01083d					_BATypeError:
.01083d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010840	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>010848	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>010858	65 73 00
.01085b					_BALengthError:
.01085b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01085e	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010866	6f 6f 20 6c 6f 6e 67 00
.01086e					_BAConcatenateString:
.01086e	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.010870	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.010872	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010874	85 0c		sta $0c			sta 	DTemp2
.010876	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010878	18		clc			clc 										; work out the total length
.010879	b2 08		lda ($08)		lda 	(DTemp1)
.01087b	72 0c		adc ($0c)		adc 	(DTemp2)
.01087d	b0 14		bcs $010893		bcs 	_BAConcatLengthError 				; string is too long.
.01087f	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.010881	20 39 05	jsr $010539		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010884	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010886	74 20		stz $20,x		stz 	EXSValueH+0,x
.010888	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.01088a	20 73 05	jsr $010573		jsr 	StringCreateCopy
.01088d	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01088f	20 73 05	jsr $010573		jsr 	StringCreateCopy
.010892	60		rts			rts
.010893					_BAConcatLengthError:
.010893	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010896	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01089e	6f 6f 20 6c 6f 6e 67 00
.0108a6					Binary_Subtract:
.0108a6	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108a9	38		sec			sec
.0108aa	b5 00		lda $00,x		lda		EXSValueL+0,x
.0108ac	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0108ae	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108b0	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108b2	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0108b4	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108b6	60		rts			rts
.0108b7					Binary_ShiftRight:
.0108b7	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108ba	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0108bc	29 3f 00	and #$003f		and 	#63
.0108bf	f0 07		beq $0108c8		beq		_Binary_SRExit
.0108c1					_Binary_SRLoop:
.0108c1	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.0108c3	76 00		ror $00,x		ror 	EXSValueL+0,x
.0108c5	3a		dec a			dec 	a
.0108c6	d0 f9		bne $0108c1		bne 	_Binary_SRLoop
.0108c8					_Binary_SRExit:
.0108c8	60		rts			rts
.0108c9					Binary_ShiftLeft:
.0108c9	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108cc	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0108ce	29 3f 00	and #$003f		and 	#63
.0108d1	f0 07		beq $0108da		beq		_Binary_SLExit
.0108d3					_Binary_SLLoop:
.0108d3	16 00		asl $00,x		asl 	EXSValueL+0,x
.0108d5	36 20		rol $20,x		rol 	EXSValueH+0,x
.0108d7	3a		dec a			dec 	a
.0108d8	d0 f9		bne $0108d3		bne 	_Binary_SLLoop
.0108da					_Binary_SLExit:
.0108da	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.0108db					Binary_And:
.0108db	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108de	b5 00		lda $00,x		lda		EXSValueL+0,x
.0108e0	35 02		and $02,x		and 	EXSValueL+2,x
.0108e2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108e4	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108e6	35 22		and $22,x		and 	EXSValueH+2,x
.0108e8	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108ea	60		rts			rts
.0108eb					Binary_Or:
.0108eb	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108ee	b5 00		lda $00,x		lda		EXSValueL+0,x
.0108f0	15 02		ora $02,x		ora 	EXSValueL+2,x
.0108f2	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108f4	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108f6	15 22		ora $22,x		ora 	EXSValueH+2,x
.0108f8	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108fa	60		rts			rts
.0108fb					Binary_Xor:
.0108fb	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.0108fe	b5 00		lda $00,x		lda		EXSValueL+0,x
.010900	55 02		eor $02,x		eor 	EXSValueL+2,x
.010902	95 00		sta $00,x		sta 	EXSValueL+0,x
.010904	b5 20		lda $20,x		lda		EXSValueH+0,x
.010906	55 22		eor $22,x		eor 	EXSValueH+2,x
.010908	95 20		sta $20,x		sta 	EXSValueH+0,x
.01090a	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.01090b					Binary_Equals:
.01090b	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01090e	b0 0e		bcs $01091e		bcs 	_BEString
.010910	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010912	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010914	d0 4f		bne $010965		bne 	Compare_Fail
.010916	b5 20		lda $20,x		lda 	EXSValueH,x
.010918	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.01091a	d0 49		bne $010965		bne 	Compare_Fail
.01091c	80 3f		bra $01095d		bra 	Compare_Succeed
.01091e					_BEString:
.01091e	09 00 00	ora #$0000		ora 	#$0000
.010921	f0 3a		beq $01095d		beq 	Compare_Succeed
.010923	80 40		bra $010965		bra 	Compare_Fail
.010925					Binary_NotEquals:
.010925	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010928	b0 0e		bcs $010938		bcs 	_BNEString
.01092a	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01092c	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01092e	d0 2d		bne $01095d		bne 	Compare_Succeed
.010930	b5 20		lda $20,x		lda 	EXSValueH,x
.010932	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010934	d0 27		bne $01095d		bne 	Compare_Succeed
.010936	80 2d		bra $010965		bra 	Compare_Fail
.010938					_BNEString:
.010938	09 00 00	ora #$0000		ora 	#$0000
.01093b	d0 20		bne $01095d		bne 	Compare_Succeed
.01093d	80 26		bra $010965		bra 	Compare_Fail
.01093f					Binary_Less:
.01093f	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010942	b0 12		bcs $010956		bcs 	_BLString
.010944	38		sec			sec
.010945	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010947	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010949	b5 20		lda $20,x		lda 	EXSValueH,x
.01094b	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01094d	50 03		bvc $010952		bvc 	*+5
.01094f	49 00 80	eor #$8000		eor 	#$8000
.010952	30 09		bmi $01095d		bmi 	Compare_Succeed
.010954	80 0f		bra $010965		bra 	Compare_Fail
.010956					_BLString:
.010956	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.010959	f0 02		beq $01095d		beq 	Compare_Succeed
.01095b	80 08		bra $010965		bra 	Compare_Fail
.01095d					Compare_Succeed:
.01095d	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010960	95 00		sta $00,x		sta 	EXSValueL,x
.010962	95 20		sta $20,x		sta 	EXSValueH,x
.010964	60		rts			rts
.010965					Compare_Fail:
.010965	74 00		stz $00,x		stz 	EXSValueL,x
.010967	74 20		stz $20,x		stz 	EXSValueH,x
.010969	60		rts			rts
.01096a					Binary_GreaterEqual:
.01096a	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01096d	b0 12		bcs $010981		bcs 	_BGEString
.01096f	38		sec			sec
.010970	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.010972	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010974	b5 20		lda $20,x		lda 	EXSValueH,x
.010976	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010978	50 03		bvc $01097d		bvc 	*+5
.01097a	49 00 80	eor #$8000		eor 	#$8000
.01097d	10 de		bpl $01095d		bpl 	Compare_Succeed
.01097f	80 e4		bra $010965		bra 	Compare_Fail
.010981					_BGEString:
.010981	09 00 00	ora #$0000		ora 	#$0000
.010984	10 d7		bpl $01095d		bpl 	Compare_Succeed
.010986	80 dd		bra $010965		bra 	Compare_Fail
.010988					Binary_LessEqual:
.010988	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01098b	b0 12		bcs $01099f		bcs 	_BLEString
.01098d	18		clc			clc 									; numeric <= signed
.01098e	b5 00		lda $00,x		lda 	EXSValueL,x
.010990	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010992	b5 20		lda $20,x		lda 	EXSValueH,x
.010994	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010996	50 03		bvc $01099b		bvc 	*+5
.010998	49 00 80	eor #$8000		eor 	#$8000
.01099b	30 c0		bmi $01095d		bmi 	Compare_Succeed
.01099d	80 c6		bra $010965		bra 	Compare_Fail
.01099f					_BLEString:
.01099f	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.0109a2	d0 b9		bne $01095d		bne 	Compare_Succeed
.0109a4	80 bf		bra $010965		bra 	Compare_Fail
.0109a6					Binary_Greater:
.0109a6	20 c4 09	jsr $0109c4		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109a9	b0 12		bcs $0109bd		bcs 	_BGString
.0109ab	18		clc			clc 									; numeric > signed
.0109ac	b5 00		lda $00,x		lda 	EXSValueL,x
.0109ae	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109b0	b5 20		lda $20,x		lda 	EXSValueH,x
.0109b2	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109b4	50 03		bvc $0109b9		bvc 	*+5
.0109b6	49 00 80	eor #$8000		eor 	#$8000
.0109b9	10 a2		bpl $01095d		bpl 	Compare_Succeed
.0109bb	80 a8		bra $010965		bra 	Compare_Fail
.0109bd					_BGString:
.0109bd	c9 01 00	cmp #$0001		cmp 	#$0001
.0109c0	f0 9b		beq $01095d		beq 	Compare_Succeed
.0109c2	80 a1		bra $010965		bra 	Compare_Fail
.0109c4					CompareTypeCheck:
.0109c4	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.0109c6	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0109c8	30 06		bmi $0109d0		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.0109ca	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.0109cc	30 1c		bmi $0109ea		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.0109ce	18		clc			clc 									; if numbers return with carry clear and calculate it.
.0109cf	60		rts			rts
.0109d0					_CTCFail:
.0109d0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0109d3	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>0109db	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.0109ea					_CTCStringCompare:
.0109ea	20 fb 04	jsr $0104fb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.0109ed	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.0109ef	85 08		sta $08			sta 	DTemp1
.0109f1	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.0109f3	85 0c		sta $0c			sta 	DTemp2
.0109f5	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.0109f8	a8		tay			tay
.0109f9	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.0109fb	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.0109fd	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0109ff	90 02		bcc $010a03		bcc 	_CTCSmallest
.010a01	b2 0c		lda ($0c)		lda 	(DTemp2)
.010a03					_CTCSmallest:
.010a03	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010a05					_CTCCompare:
.010a05	c8		iny			iny 									; look at next character (done first, first char is size)
.010a06	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010a08	30 16		bmi $010a20		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010a0a	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010a0c	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010a0e	f0 f5		beq $010a05		beq 	_CTCCompare 					; if zero, try the next character.
.010a10	b0 07		bcs $010a19		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010a12					_CTCLess:
.010a12	c2 20		rep #$20		rep 	#$20
.010a14	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010a17	80 14		bra $010a2d		bra 	_CTCExit
.010a19					_CTCGreater:
.010a19	c2 20		rep #$20		rep 	#$20
.010a1b	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010a1e	80 0d		bra $010a2d		bra 	_CTCExit
.010a20					_CTCEqualSoFar:
.010a20	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010a22	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010a24	90 ec		bcc $010a12		bcc 	_CTCLess
.010a26	d0 f1		bne $010a19		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010a28	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010a2a	a9 00 00	lda #$0000		lda 	#$0000
.010a2d					_CTCExit:
.010a2d	38		sec			sec 									; return with CS indicating string comparison.
.010a2e	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010a2f					Binary_Divide:
.010a2f	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010a32	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010a34	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010a36	d0 14		bne $010a4c		bne 	_BinaryDivide_Ok
.010a38	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010a3b	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010a43	20 62 79 20 7a 65 72 6f 00
.010a4c					_BinaryDivide_Ok:
.010a4c	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010a4e	64 0a		stz $0a			stz 	DTemp1+2
.010a50	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010a52	5a		phy			phy 										; save Y (bit counter)
.010a53	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010a55	10 07		bpl $010a5e		bpl 	_BinaryDivide_RightDone
.010a57	e8		inx			inx
.010a58	e8		inx			inx
.010a59	20 94 0a	jsr $010a94		jsr 	Binary_DivNegate
.010a5c	ca		dex			dex
.010a5d	ca		dex			dex
.010a5e					_BinaryDivide_RightDone:
.010a5e	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010a60	10 03		bpl $010a65		bpl 	_BinaryDivide_LeftDone
.010a62	20 94 0a	jsr $010a94		jsr 	Binary_DivNegate
.010a65					_BinaryDivide_LeftDone:
.010a65	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010a68					_BinaryDivide_Loop:
.010a68	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010a6a	36 20		rol $20,x		rol 	EXSValueH+0,x
.010a6c	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010a6e	26 0a		rol $0a			rol 	DTemp1+2
.010a70	38		sec			sec											; calculate A-M
.010a71	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010a73	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a75	85 0c		sta $0c			sta 	DTemp2
.010a77	a5 0a		lda $0a			lda 	DTemp1+2
.010a79	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a7b	90 08		bcc $010a85		bcc 	_Binary_NoSubract 					; if A < M skip this
.010a7d	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010a7f	a5 0c		lda $0c			lda 	DTemp2
.010a81	85 08		sta $08			sta 	DTemp1+0
.010a83	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010a85					_Binary_NoSubract:
.010a85	88		dey			dey 										; do it 32 times.
.010a86	d0 e0		bne $010a68		bne 	_BinaryDivide_Loop
.010a88					_BinaryDivide_Exit:
.010a88	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010a8a	29 01 00	and #$0001		and 	#1
.010a8d	f0 03		beq $010a92		beq 	_BinaryDivide_Exit2
.010a8f	20 94 0a	jsr $010a94		jsr 	Binary_DivNegate
.010a92					_BinaryDivide_Exit2:
.010a92	7a		ply			ply 										; restore Y
.010a93	60		rts			rts
.010a94					Binary_DivNegate:
.010a94	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010a96	38		sec			sec 										; negate the value at stack X.
.010a97	a9 00 00	lda #$0000		lda 	#$0000
.010a9a	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010a9c	95 00		sta $00,x		sta 	EXSValueL+0,x
.010a9e	a9 00 00	lda #$0000		lda 	#$0000
.010aa1	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010aa3	95 20		sta $20,x		sta 	EXSValueH+0,x
.010aa5	60		rts			rts
.010aa6					Binary_Modulus:
.010aa6	20 2f 0a	jsr $010a2f		jsr 	Binary_Divide 						; do the divide
.010aa9	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010aab	95 00		sta $00,x		sta 	EXSValueL+0,x
.010aad	a5 0a		lda $0a			lda 	DTemp1+2
.010aaf	95 20		sta $20,x		sta 	EXSValueH+0,x
.010ab1	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010ab2					Binary_Multiply:
.010ab2	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010ab5	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010ab7	85 08		sta $08			sta 	DTemp1
.010ab9	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010abb	85 0a		sta $0a			sta		DTemp1+2
.010abd	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010abf	74 20		stz $20,x		stz 	EXSValueH+0,x
.010ac1					_BinaryMultiply_Loop:
.010ac1	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010ac3	05 0a		ora $0a			ora 	DTemp1+2
.010ac5	f0 1e		beq $010ae5		beq 	_BinaryMultiply_Exit
.010ac7	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010ac9	29 01 00	and #$0001		and 	#1
.010acc	f0 0d		beq $010adb		beq 	_BinaryMultiply_NoAdd
.010ace	18		clc			clc 										; add multiplicand to result.
.010acf	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010ad1	75 02		adc $02,x		adc 	EXSValueL+2,x
.010ad3	95 00		sta $00,x		sta 	EXSValueL+0,x
.010ad5	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010ad7	75 22		adc $22,x		adc 	EXSValueH+2,x
.010ad9	95 20		sta $20,x		sta 	EXSValueH+0,x
.010adb					_BinaryMultiply_NoAdd:
.010adb	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010add	66 08		ror $08			ror 	DTemp1
.010adf	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010ae1	36 22		rol $22,x		rol 	EXSValueH+2,x
.010ae3	80 dc		bra $010ac1		bra 	_BinaryMultiply_Loop 				; go round again.
.010ae5					_BinaryMultiply_Exit:
.010ae5	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010ae6					Function_Len:
.010ae6	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010ae9	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010aec	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010aef	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010af1	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010af4	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010af7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010af9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010afb	60		rts				rts
.010afc					Function_Abs:
.010afc	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010aff	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010b02	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b05	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010b07	30 07		bmi $010b10			bmi 	_FAbsNegative 				; negate it if negative
.010b09	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010b0b	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010b0d	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b0f	60		rts				rts
.010b10					_FAbsNegative:
.010b10	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010b11	a9 00 00	lda #$0000			lda 	#0
.010b14	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010b16	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b18	a9 00 00	lda #$0000			lda 	#0
.010b1b	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010b1d	95 20		sta $20,x			sta 	EXSValueH+0,x
.010b1f	60		rts				rts
.010b20					Function_Sgn:
.010b20	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns integer
.010b23	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010b26	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b29	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010b2b	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b2d	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010b2f	30 07		bmi $010b38			bmi 	_FSgnNegative 				; set to -1 if signed
.010b31	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010b33	f0 02		beq $010b37			beq 	_FSgnExit
.010b35	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010b37					_FSgnExit:
.010b37	60		rts				rts
.010b38					_FSgnNegative:
.010b38	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010b3b	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b3d	95 20		sta $20,x			sta 	EXSValueH+0,x
.010b3f	60		rts				rts
.010b40					Function_Random:
.010b40	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b43	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger
.010b46	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010b48	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010b4a	d0 0a		bne $010b56			bne 	_Rnd_NotZero
.010b4c	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010b4f	85 10		sta $10				sta 	DRandom
.010b51	a9 ea 00	lda #$00ea			lda 	#$EA
.010b54	85 12		sta $12				sta 	DRandom+2
.010b56					_Rnd_NotZero:
.010b56	20 61 0b	jsr $010b61			jsr 	_Rnd_Process 				; call randomiser twice
.010b59	95 20		sta $20,x			sta 	EXSValueH+0,x
.010b5b	20 61 0b	jsr $010b61			jsr 	_Rnd_Process
.010b5e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b60	60		rts				rts
.010b61					_Rnd_Process:
.010b61	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010b63	26 12		rol $12				rol 	DRandom+2
.010b65	90 0e		bcc $010b75			bcc 	_Rnd_Exit
.010b67	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010b69	49 54 d4	eor #$d454			eor 	#$D454
.010b6c	85 10		sta $10				sta 	DRandom
.010b6e	a5 12		lda $12				lda 	DRandom+2
.010b70	49 d5 55	eor #$55d5			eor 	#$55D5
.010b73	85 12		sta $12				sta 	DRandom+2
.010b75					_Rnd_Exit:
.010b75	a5 10		lda $10				lda 	DRandom
.010b77	45 12		eor $12				eor 	DRandom+2
.010b79	60		rts				rts
.010b7a					Function_Chr:
.010b7a	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010b7d	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010b80	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b83	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010b86	d0 12		bne $010b9a			bne 	_FCHBad
.010b88	48		pha				pha  								; save char # on stack
.010b89	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010b8c	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010b8f	68		pla				pla 								; restore character number
.010b90	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010b93	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010b95	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010b97	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b99	60		rts				rts
.010b9a					_FCHBad:
.010b9a	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010b9d	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010ba5	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010bb2					Function_Asc:
.010bb2	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010bb5	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010bb8	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010bbb	a8		tay				tay 								; string address in Y
.010bbc	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010bbf	29 ff 00	and #$00ff			and 	#$00FF
.010bc2	f0 0b		beq $010bcf			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010bc4	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010bc7	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010bca	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010bcc	74 20		stz $20,x			stz 	EXSValueH+0,x
.010bce	60		rts				rts
.010bcf					_FASBad:
.010bcf	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010bd2	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010bda	65 20 66 6f 72 20 61 73 63 28 29 00
.010be6					Function_SPC:
.010be6	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010be9	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010bec	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010bef	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010bf2	d0 17		bne $010c0b			bne 	_FSPBad
.010bf4	48		pha				pha 								; save length
.010bf5	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate character space
.010bf8	7a		ply				ply 								; get count in Y
.010bf9	f0 09		beq $010c04			beq 	_FSPExit 					; if zero, just empty string
.010bfb					_FSPCopy:
.010bfb	a9 20 00	lda #$0020			lda 	#" "						; space character
.010bfe	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010c01	88		dey				dey
.010c02	d0 f7		bne $010bfb			bne 	_FSPCopy	 				; do it Y times
.010c04					_FSPExit:
.010c04	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010c06	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c08	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c0a	60		rts				rts
.010c0b					_FSPBad:
.010c0b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c0e	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010c16	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010c22					Function_LEFT:
.010c22	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010c25	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c28	48		pha				pha 								; save string on stack.
.010c29	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010c2c	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010c2f	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010c32	d0 6d		bne $010ca1			bne 	FNStringParameter
.010c34	85 08		sta $08				sta 	DTemp1 						; save count.
.010c36	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010c39	7a		ply				ply 								; Y points to string.
.010c3a	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010c3d	29 ff 00	and #$00ff			and 	#$00FF
.010c40	f0 52		beq $010c94			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010c42	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010c44	f0 55		beq $010c9b			beq 	FNStringY 					; return string in Y if current len = required len.
.010c46	90 53		bcc $010c9b			bcc 	FNStringY 					; if current < required return whole thing.
.010c48	c8		iny				iny 								; take from here - start of string
.010c49	80 33		bra $010c7e			bra 	FNDTemp1Characters
.010c4b					Function_RIGHT:
.010c4b	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010c4e	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c51	48		pha				pha 								; save string on stack.
.010c52	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010c55	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010c58	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010c5b	d0 44		bne $010ca1			bne 	FNStringParameter
.010c5d	85 08		sta $08				sta 	DTemp1 						; save count.
.010c5f	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010c62	7a		ply				ply 								; Y points to string.
.010c63	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010c66	29 ff 00	and #$00ff			and 	#$00FF
.010c69	f0 29		beq $010c94			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010c6b	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010c6d	f0 2c		beq $010c9b			beq 	FNStringY 					; return string in Y if current len = required len.
.010c6f	90 2a		bcc $010c9b			bcc 	FNStringY 					; if current < required return whole thing.
.010c71	38		sec				sec 								; current-required is the number to skip
.010c72	e5 08		sbc $08				sbc 	DTemp1
.010c74	85 0a		sta $0a				sta 	DTemp1+2
.010c76	98		tya				tya
.010c77	18		clc				clc
.010c78	65 0a		adc $0a				adc 	DTemp1+2
.010c7a	a8		tay				tay
.010c7b	c8		iny				iny 								; +1 for the count.
.010c7c	80 00		bra $010c7e			bra 	FNDTemp1Characters
.010c7e					FNDTemp1Characters:
.010c7e	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010c80	f0 12		beq $010c94			beq 	FNStringEmpty 				; if zero, return empty string.
.010c82	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010c85	48		pha				pha 								; save the address
.010c86					_FND1Loop:
.010c86	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010c89	20 65 05	jsr $010565			jsr 	StringWriteCharacter
.010c8c	c8		iny				iny
.010c8d	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010c8f	d0 f5		bne $010c86			bne 	_FND1Loop
.010c91	7a		ply				ply 								; string address in Y
.010c92	80 07		bra $010c9b			bra 	FNStringY
.010c94					FNStringEmpty:
.010c94	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010c97	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; put address of it in Y
.010c9a	a8		tay				tay
.010c9b					FNStringY:
.010c9b	98		tya				tya
.010c9c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c9e	74 22		stz $22,x			stz 	EXSValueH+2,x
.010ca0	60		rts				rts
.010ca1					FNStringParameter:
.010ca1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010ca4	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010cac	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010cb9					Function_MID:
.010cb9	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010cbc	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010cbf	48		pha				pha 								; save string on stack.
.010cc0	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get offset (n)
.010cc3	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010cc6	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010cc9	d0 d6		bne $010ca1			bne 	FNStringParameter
.010ccb	c9 00 00	cmp #$0000			cmp 	#0
.010cce	f0 d1		beq $010ca1			beq 	FNStringParameter 			; or zero
.010cd0	48		pha				pha 								; save start position on stack.
.010cd1	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010cd4	85 08		sta $08				sta 	DTemp1
.010cd6	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010cd8	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010cdb	d0 0e		bne $010ceb			bne 	_FMINoThird
.010cdd	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010cdf	e6 06		inc $06				inc 	DCodePtr
.010ce1	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010ce4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010ce7	d0 b8		bne $010ca1			bne 	FNStringParameter
.010ce9	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010ceb					_FMINoThird:
.010ceb	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010cee	68		pla				pla 								; get offset position
.010cef	85 0c		sta $0c				sta 	DTemp2
.010cf1	7a		ply				ply 								; get address of string in Y
.010cf2	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010cf5	29 ff 00	and #$00ff			and 	#$00FF
.010cf8	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010cfa	90 98		bcc $010c94			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010cfc	38		sec				sec 								; calculate number of characters left after
.010cfd	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010cff	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010d00	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010d02	b0 02		bcs $010d06			bcs 	_FMISufficient
.010d04	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010d06					_FMISufficient:
.010d06	98		tya				tya 								; get address
.010d07	18		clc				clc
.010d08	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010d0a	a8		tay				tay 								; put in Y
.010d0b	82 70 ff	brl $010c7e			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010d0e					Function_Peek:
.010d0e	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d11	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d14	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010d17	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010d19	84 0a		sty $0a				sty 	DTemp1+2
.010d1b	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010d1e	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d20	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010d23	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010d25	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d27	60		rts				rts
.010d28					Function_Deek:
.010d28	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d2b	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d2e	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010d31	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010d33	84 0a		sty $0a				sty 	DTemp1+2
.010d35	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010d38	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d3a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010d3c	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d3e	60		rts				rts
.010d3f					Function_Leek:
.010d3f	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d42	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d45	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010d48	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010d4a	84 0a		sty $0a				sty 	DTemp1+2
.010d4c	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010d4f	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d51	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010d53	c8		iny				iny
.010d54	c8		iny				iny
.010d55	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d57	95 20		sta $20,x			sta 	EXSValueH+0,x
.010d59	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010d5a					Function_VAL:
.010d5a	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d5d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d60	48		pha				pha 								; put string address on stack.
.010d61	20 71 0d	jsr $010d71			jsr 	VALGetBase 					; process , base (shared with STR$())
.010d64	7a		ply				ply 								; get string address back
.010d65	da		phx				phx 								; save X on stack
.010d66	aa		tax				tax 								; base in X
.010d67	98		tya				tya 								; address in A
.010d68	20 ab 0d	jsr $010dab			jsr 	StringToInteger
.010d6b	fa		plx				plx 								; restore X
.010d6c	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d6e	94 20		sty $20,x			sty 	EXSValueH+0,x
.010d70	60		rts				rts
.010d71					VALGetBase:
.010d71	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010d73	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010d76	f0 07		beq $010d7f			beq 	_VGBAlternate
.010d78	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010d7b	a9 0a 00	lda #$000a			lda 	#10
.010d7e	60		rts				rts
.010d7f					_VGBAlternate:
.010d7f	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; skip comma.
.010d82	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010d85	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010d88	d0 0e		bne $010d98			bne 	_VGBBadBase
.010d8a	c9 02 00	cmp #$0002			cmp 	#2
.010d8d	90 09		bcc $010d98			bcc 	_VGBBadBase
.010d8f	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010d92	b0 04		bcs $010d98			bcs 	_VGBBadBase
.010d94	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010d97	60		rts				rts
.010d98					_VGBBadBase:
.010d98	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d9b	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010da3	65 72 20 42 61 73 65 00
.010dab					StringToInteger:
.010dab	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010dad	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010daf	29 ff 00	and #$00ff			and 	#$00FF
.010db2	85 26		sta $26				sta 	DTemp3+2
.010db4	f0 6e		beq $010e24			beq 	_STIError 					; if length zero it's bad.
.010db6	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010db8	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010dba	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010dbc	64 0a		stz $0a				stz 	DTemp1+2
.010dbe	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010dc0	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010dc3	48		pha				pha 								; push on stack
.010dc4	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010dc7	d0 06		bne $010dcf			bne 	_STILoop
.010dc9	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010dcb	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010dcd	f0 55		beq $010e24			beq 	_STIError 					; if only - then error.
.010dcf					_STILoop:
.010dcf	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010dd1	20 43 0e	jsr $010e43			jsr 	MultiplyTemp1ByA
.010dd4	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010dd6	29 ff 00	and #$00ff			and 	#$00FF
.010dd9	20 34 0e	jsr $010e34			jsr 	ConvertUpperCase	 		; make U/C
.010ddc	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010ddf	90 43		bcc $010e24			bcc 	_STIError
.010de1	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010de4	90 0e		bcc $010df4			bcc 	_STIOkay1
.010de6	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010de9	90 39		bcc $010e24			bcc 	_STIError
.010deb	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010dee	b0 34		bcs $010e24			bcs 	_STIError
.010df0	18		clc				clc 								; shift to correct range.
.010df1	69 09 00	adc #$0009			adc 	#9
.010df4					_STIOkay1:
.010df4	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010df7	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010df9	b0 29		bcs $010e24			bcs 	_STIError
.010dfb	18		clc				clc 								; add A to DTemp1
.010dfc	65 08		adc $08				adc 	DTemp1
.010dfe	85 08		sta $08				sta 	DTemp1
.010e00	90 02		bcc $010e04			bcc 	_STINoCarry
.010e02	e6 0a		inc $0a				inc 	DTemp1+2
.010e04					_STINoCarry:
.010e04	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010e06	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010e08	d0 c5		bne $010dcf			bne 	_STILoop 					; loop back.
.010e0a	68		pla				pla 								; get optional minus bac
.010e0b	c9 2d 00	cmp #$002d			cmp 	#"-"
.010e0e	d0 0f		bne $010e1f			bne 	_STINotNegative 			; handle the negative character
.010e10	38		sec				sec 								; negate DTemp1
.010e11	a9 00 00	lda #$0000			lda 	#0
.010e14	e5 08		sbc $08				sbc 	DTemp1
.010e16	85 08		sta $08				sta 	DTemp1
.010e18	a9 00 00	lda #$0000			lda 	#0
.010e1b	e5 0a		sbc $0a				sbc 	DTemp1+2
.010e1d	85 0a		sta $0a				sta 	DTemp1+2
.010e1f					_STINotNegative:
.010e1f	a5 08		lda $08				lda 	DTemp1 						; get the result
.010e21	a4 0a		ldy $0a				ldy 	DTemp1+2
.010e23	60		rts				rts
.010e24					_STIError:
.010e24	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e27	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010e2f	74 61 6e 74 00
.010e34					ConvertUpperCase:
.010e34	c9 61 00	cmp #$0061			cmp 	#'a'
.010e37	90 09		bcc $010e42			bcc 	_CUCExit
.010e39	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010e3c	b0 04		bcs $010e42			bcs 	_CUCExit
.010e3e	38		sec				sec
.010e3f	e9 20 00	sbc #$0020			sbc 	#32
.010e42					_CUCExit:
.010e42	60		rts				rts
.010e43					MultiplyTemp1ByA:
.010e43					_MTGeneral:
.010e43	da		phx				phx
.010e44	aa		tax				tax 								; multiplier in X
.010e45	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010e47	85 0c		sta $0c				sta 	DTemp2
.010e49	a5 0a		lda $0a				lda 	DTemp1+2
.010e4b	85 0e		sta $0e				sta 	DTemp2+2
.010e4d	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010e4f	64 0a		stz $0a				stz 	DTemp1+2
.010e51	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010e54					_MTLoop:
.010e54	8a		txa				txa 								; shift X right into C
.010e55	4a		lsr a				lsr 	a
.010e56	aa		tax				tax
.010e57	90 10		bcc $010e69			bcc 	_MTNoAdd
.010e59	18		clc				clc
.010e5a	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010e5c	65 0c		adc $0c				adc 	DTemp2
.010e5e	85 08		sta $08				sta 	DTemp1
.010e60	a5 0a		lda $0a				lda 	DTemp1+2
.010e62	65 0e		adc $0e				adc 	DTemp2+2
.010e64	85 0a		sta $0a				sta 	DTemp1+2
.010e66	90 01		bcc $010e69			bcc 	_MTNoAdd
.010e68	c8		iny				iny
.010e69					_MTNoAdd:
.010e69	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010e6b	26 0e		rol $0e				rol 	DTemp2+2
.010e6d	90 01		bcc $010e70			bcc 	_MTNoOverflow
.010e6f	c8		iny				iny
.010e70					_MTNoOverflow:
.010e70	8a		txa				txa 								; until multiplier is zero.
.010e71	d0 e1		bne $010e54			bne 	_MTLoop
.010e73	98		tya				tya
.010e74	18		clc				clc
.010e75	69 ff ff	adc #$ffff			adc 	#$FFFF
.010e78	fa		plx				plx 								; restore X
.010e79	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010e7a					Function_Str:
.010e7a	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010e7d	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010e80	48		pha				pha 								; save YA on the stack
.010e81	5a		phy				phy
.010e82	20 71 0d	jsr $010d71			jsr 	VALGetBase 					; process , base (shared with STR$())
.010e85	85 14		sta $14				sta 	DSignCount
.010e87	7a		ply				ply 								; YA is the number
.010e88	68		pla				pla
.010e89	da		phx				phx
.010e8a	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010e8c	20 95 0e	jsr $010e95			jsr 	ConvertToString 			; convert it to a string.
.010e8f	fa		plx				plx 								; restore X
.010e90	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010e92	74 20		stz $20,x			stz 	EXSValueH+0,x
.010e94	60		rts				rts
.010e95					ConvertToString:
.010e95	48		pha				pha
.010e96	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010e99	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate space for return string.
.010e9c	68		pla				pla
.010e9d					ConvertToStringAlreadyAllocated:
.010e9d	da		phx				phx 								; save X (base)
.010e9e	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010ea0	84 26		sty $26				sty 	DTemp3+2
.010ea2	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010ea4	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010ea6	10 15		bpl $010ebd			bpl 	_CTSNotNegative
.010ea8	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010eab	20 27 0f	jsr $010f27			jsr 	CTSOutputA
.010eae	38		sec				sec 								; negate DTemp3 which is the number
.010eaf	a9 00 00	lda #$0000			lda 	#0
.010eb2	e5 24		sbc $24				sbc 	DTemp3
.010eb4	85 24		sta $24				sta 	DTemp3
.010eb6	a9 00 00	lda #$0000			lda 	#0
.010eb9	e5 26		sbc $26				sbc 	DTemp3+2
.010ebb	85 26		sta $26				sta 	DTemp3+2
.010ebd					_CTSNotNegative:
.010ebd	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010ec0	48		pha				pha
.010ec1	a9 00 00	lda #$0000			lda 	#0
.010ec4	48		pha				pha
.010ec5	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010ec7	85 08		sta $08				sta 	DTemp1
.010ec9	64 0a		stz $0a				stz 	DTemp1+2
.010ecb					_CTSMultiplySubtractor:
.010ecb	38		sec				sec 								; check number vs subtractor
.010ecc	a5 24		lda $24				lda 	DTemp3
.010ece	e5 08		sbc $08				sbc 	DTemp1
.010ed0	a5 26		lda $26				lda 	DTemp3+2
.010ed2	e5 0a		sbc $0a				sbc 	DTemp1+2
.010ed4	90 0f		bcc $010ee5			bcc		_CTSScaledUp 				; if >= then scaled up.
.010ed6	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010ed8	48		pha				pha
.010ed9	a5 0a		lda $0a				lda 	DTemp1+2
.010edb	48		pha				pha
.010edc	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010ede	20 43 0e	jsr $010e43			jsr 	MultiplyTemp1ByA
.010ee1	b0 02		bcs $010ee5			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010ee3	80 e6		bra $010ecb			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010ee5					_CTSScaledUp:
.010ee5	7a		ply				ply 								; YA contains the previous divider.
.010ee6	68		pla				pla
.010ee7	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010eea	d0 05		bne $010ef1			bne 	_CTSHasDigit
.010eec	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010eef	f0 20		beq $010f11			beq 	_CTSExit
.010ef1					_CTSHasDigit:
.010ef1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010ef3	84 0e		sty $0e				sty 	DTemp2+2
.010ef5	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010ef8					_CTSSubLoop:
.010ef8	38		sec				sec 								; subtract subtractor from number
.010ef9	a5 24		lda $24				lda 	DTemp3
.010efb	e5 0c		sbc $0c				sbc 	DTemp2
.010efd	a8		tay				tay 								; intermediate in Y
.010efe	a5 26		lda $26				lda 	DTemp3+2
.010f00	e5 0e		sbc $0e				sbc 	DTemp2+2
.010f02	90 07		bcc $010f0b			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010f04	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010f06	84 24		sty $24				sty 	DTemp3
.010f08	e8		inx				inx 								; one more subtraction
.010f09	80 ed		bra $010ef8			bra 	_CTSSubLoop 				; try it again.
.010f0b					_CTSFinishedSubtracting:
.010f0b	8a		txa				txa 								; convert to ASCII.
.010f0c	20 1a 0f	jsr $010f1a			jsr 	CTSOutputHexDigit 			; write that out.
.010f0f	80 d4		bra $010ee5			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010f11					_CTSExit:
.010f11	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010f13	20 1a 0f	jsr $010f1a			jsr 	CTSOutputHexDigit
.010f16	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010f18	fa		plx				plx 								; restore X.
.010f19	60		rts				rts
.010f1a					CTSOutputHexDigit:
.010f1a	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010f1d	90 04		bcc $010f23			bcc 	_CTSNotLetter
.010f1f	18		clc				clc
.010f20	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010f23					_CTSNotLetter:
.010f23	18		clc				clc
.010f24	69 30 00	adc #$0030			adc 	#48
.010f27					CTSOutputA:
.010f27	5a		phy				phy 								; save Y, set Y to current pointer
.010f28	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010f2a	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010f2d	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010f2f	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010f31	1a		inc a				inc 	a
.010f32	92 18		sta ($18)			sta 	(DStartTempString)
.010f34	c2 20		rep #$20			rep 	#$20
.010f36	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010f38	7a		ply				ply 								; restore Y and exit.
.010f39	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010f3a					Function_INSTR:
.010f3a	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns a integer
.010f3d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010f40	48		pha				pha 								; save string to search
.010f41	20 d2 04	jsr $0104d2			jsr 	ExpectComma
.010f44	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010f47	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010f4a	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010f4c	68		pla				pla
.010f4d	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010f4f	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010f51	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010f53	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010f55	38		sec				sec
.010f56	b2 0c		lda ($0c)			lda 	(DTemp2)
.010f58	f2 08		sbc ($08)			sbc		(DTemp1)
.010f5a	c2 20		rep #$20			rep 	#$20
.010f5c	90 2c		bcc $010f8a			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010f5e	29 ff 00	and #$00ff			and 	#$00FF
.010f61	1a		inc a				inc 	a
.010f62	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010f64	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010f66	29 ff 00	and #$00ff			and 	#$00FF
.010f69	f0 22		beq $010f8d			beq 	_FINSError
.010f6b					_FINSLoop:
.010f6b	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010f6d	1a		inc a				inc 	a
.010f6e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010f70	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010f72	29 ff 00	and #$00ff			and 	#$00FF
.010f75	a8		tay				tay									; start comparing at index 1.
.010f76					_FINSCompare:
.010f76	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010f78	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010f7a	29 ff 00	and #$00ff			and 	#$00FF
.010f7d	d0 05		bne $010f84			bne 	_FINSNext
.010f7f	88		dey				dey
.010f80	d0 f4		bne $010f76			bne 	_FINSCompare
.010f82	80 08		bra $010f8c			bra 	_FINSExit
.010f84					_FINSNext:
.010f84	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010f86	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010f88	d0 e1		bne $010f6b			bne 	_FINSLoop
.010f8a					_FINSFail:
.010f8a	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010f8c					_FINSExit:
.010f8c	60		rts				rts
.010f8d					_FINSError:
.010f8d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010f90	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>010f98	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010fa1					Function_UPPER:
.010fa1	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010fa4	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010fa7	48		pha				pha
.010fa8	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010fab	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010fae	68		pla				pla
.010faf	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010fb2	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010fb4	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fb6	a8		tay				tay 								; address in Y
.010fb7	74 20		stz $20,x			stz 	EXSValueH+0,x
.010fb9	da		phx				phx 								; save X
.010fba	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010fbc	29 ff 00	and #$00ff			and 	#$00FF
.010fbf	f0 20		beq $010fe1			beq 	_FUPExit
.010fc1	aa		tax				tax 								; put in X
.010fc2					_FUPLoop:
.010fc2	c8		iny				iny 								; increment and load character
.010fc3	b9 00 00	lda $0000,y			lda 	$0000,y
.010fc6	29 ff 00	and #$00ff			and 	#$00FF
.010fc9	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010fcc	90 10		bcc $010fde			bcc 	_FUPNoChange
.010fce	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010fd1	b0 0b		bcs $010fde			bcs 	_FUPNoChange
.010fd3	38		sec				sec 								; shift case
.010fd4	e9 20 00	sbc #$0020			sbc 	#32
.010fd7	e2 20		sep #$20			sep 	#$20 						; write back
.010fd9	99 00 00	sta $0000,y			sta 	$0000,y
.010fdc	c2 20		rep #$20			rep 	#$20
.010fde					_FUPNoChange:
.010fde	ca		dex				dex 								; do X times
.010fdf	d0 e1		bne $010fc2			bne 	_FUPLoop
.010fe1					_FUPExit:
.010fe1	fa		plx				plx 								; restore X
.010fe2	60		rts				rts
.010fe3					Function_LOWER:
.010fe3	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010fe6	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010fe9	48		pha				pha
.010fea	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.010fed	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.010ff0	68		pla				pla
.010ff1	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.010ff4	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010ff6	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ff8	a8		tay				tay 								; address in Y
.010ff9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ffb	da		phx				phx 								; save X
.010ffc	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010ffe	29 ff 00	and #$00ff			and 	#$00FF
.011001	f0 20		beq $011023			beq 	_FLOExit
.011003	aa		tax				tax 								; put in X
.011004					_FLOLoop:
.011004	c8		iny				iny 								; increment and load character
.011005	b9 00 00	lda $0000,y			lda 	$0000,y
.011008	29 ff 00	and #$00ff			and 	#$00FF
.01100b	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01100e	90 10		bcc $011020			bcc 	_FLONoChange
.011010	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011013	b0 0b		bcs $011020			bcs 	_FLONoChange
.011015	18		clc				clc 								; shift case
.011016	69 20 00	adc #$0020			adc 	#32
.011019	e2 20		sep #$20			sep 	#$20 						; write back
.01101b	99 00 00	sta $0000,y			sta 	$0000,y
.01101e	c2 20		rep #$20			rep 	#$20
.011020					_FLONoChange:
.011020	ca		dex				dex 								; do X times
.011021	d0 e1		bne $011004			bne 	_FLOLoop
.011023					_FLOExit:
.011023	fa		plx				plx 								; restore X
.011024	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.011025					Function_Let:
.011025	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011027	48		pha				pha  								; save on stack for later.
.011028	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.01102b	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01102d	b0 1c		bcs $01104b			bcs 	_FLetFound 					; skip if found.
.01102f	68		pla				pla 								; get and push the first token again.
.011030	48		pha				pha
.011031	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.011034	d0 57		bne $01108d			bne 	_FLError					; arrays, so this causes an error.
.011036	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.011038	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.01103b	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.01103e	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.011040					_FLSkipToken:
.011040	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011042	e6 06		inc $06				inc 	DCodePtr
.011044	e6 06		inc $06				inc 	DCodePtr
.011046	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.011049	d0 f5		bne $011040			bne 	_FLSkipToken
.01104b					_FLetFound:
.01104b	68		pla				pla 								; get and save the first token.
.01104c	48		pha				pha
.01104d	a8		tay				tay 								; put it in Y
.01104e	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.011051	f0 07		beq $01105a			beq 	_FLetNotArray
.011053	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.011055	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.011058	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.01105a					_FLetNotArray:
.01105a	7a		ply				ply 								; get the first token into Y
.01105b	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.01105d	48		pha				pha
.01105e	5a		phy				phy 								; save the first token on the stack.
.01105f	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.011062	20 af 04	jsr $0104af			jsr 	ExpectToken
.011065	68		pla				pla 								; restore the first token.
.011066	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.011069	d0 0f		bne $01107a			bne 	_FLetString 				; skip if string.
.01106b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.01106e	7a		ply				ply 								; get address in Y
.01106f	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.011071	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011074	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.011076	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.011079	60		rts				rts
.01107a					_FLetString:
.01107a	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.01107d	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.01107f	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.011082	7a		ply				ply 								; get address
.011083	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.011086	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.011089	99 02 00	sta $0002,y			sta 	$0002,y
.01108c	60		rts				rts
.01108d					_FLError:
.01108d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011090	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011098	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.0110a0					Command_List:
.0110a0	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.0110a3	20 39 05	jsr $010539		jsr 	StringTempAllocate
.0110a6	85 30		sta $30			sta 	DListBuffer						; save buffer.
.0110a8	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.0110aa	64 2e		stz $2e			stz 	DIndent2
.0110ac	64 32		stz $32			stz 	DTemp4+0 						; low number
.0110ae	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.0110b1	85 34		sta $34			sta 	DTemp4+2 						; high number.
.0110b3	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.0110b5	f0 28		beq $0110df		beq 	_CLIList
.0110b7	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.0110ba	f0 23		beq $0110df		beq 	_CLIList
.0110bc	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.0110bf	c0 00 00	cpy #$0000		cpy 	#0
.0110c2	d0 18		bne $0110dc		bne 	_CLIError
.0110c4	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.0110c6	85 34		sta $34			sta 	DTemp4+2
.0110c8	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.0110ca	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.0110cd	d0 10		bne $0110df		bne 	_CLIList
.0110cf	20 d2 04	jsr $0104d2		jsr 	ExpectComma 					; skip comma
.0110d2	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.0110d5	85 34		sta $34			sta 	DTemp4+2
.0110d7	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.0110da	f0 03		beq $0110df		beq 	_CLIList
.0110dc					_CLIError:
.0110dc	82 c0 f3	brl $01049f		brl 	SyntaxError
.0110df					_CLIList:
.0110df	a9 00 01	lda #$0100		lda 	#Block_ProgramStart 			; work out program start.
.0110e2	18		clc			clc
.0110e3	65 02		adc $02			adc 	DBaseAddress
.0110e5	a8		tay			tay 									; put in Y
.0110e6					_CLINextLine:
.0110e6	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.0110e9	f0 29		beq $011114		beq 	_CLIExit
.0110eb	20 7c 12	jsr $01127c		jsr 	ScanIndent  					; scan for formatting.
.0110ee	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.0110f1	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.0110f3	90 14		bcc $011109		bcc 	_CLIFollowLink
.0110f5	c5 34		cmp $34			cmp 	DTemp4+2
.0110f7	f0 02		beq $0110fb		beq 	_CLIShowLine
.0110f9	b0 0e		bcs $011109		bcs 	_CLIFollowLink
.0110fb					_CLIShowLine:
.0110fb	a5 30		lda $30			lda 	DListBuffer
.0110fd	20 17 11	jsr $011117		jsr 	Detokenise 						; detokenise it
.011100	5a		phy			phy
.011101	a8		tay			tay 									; print buffer out
.011102	20 1f 05	jsr $01051f		jsr 	PrintBasicString
.011105	20 65 f0	jsr $01f065		jsr 	HWNewLine
.011108	7a		ply			ply 									; get address
.011109					_CLIFollowLink:
.011109	98		tya			tya 									; follow link
.01110a	18		clc			clc
.01110b	79 00 00	adc $0000,y		adc 	$0000,y
.01110e	a8		tay			tay
.01110f	20 7f f0	jsr $01f07f		jsr 	HWCheckBreak 					; break key pressed.
.011112	f0 d2		beq $0110e6		beq 	_CLINextLine
.011114					_CLIExit:
.011114	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.011116	60		rts			rts
.011117					Detokenise:
.011117	48		pha			pha
.011118	da		phx			phx
.011119	5a		phy			phy
.01111a	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.01111c	1a		inc a			inc 	a
.01111d	85 1a		sta $1a			sta 	DCurrentTempString
.01111f	64 1c		stz $1c			stz		DConstantShift
.011121	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011124	92 18		sta ($18)		sta 	(DStartTempString)
.011126	5a		phy			phy 									; save Y
.011127	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.01112a	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.01112d	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.011130	20 9d 0e	jsr $010e9d		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011133	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.011135	c5 2e		cmp $2e			cmp 	DIndent2
.011137	90 02		bcc $01113b		bcc 	_DTKSmaller
.011139	a5 2e		lda $2e			lda 	DIndent2
.01113b					_DTKSmaller:
.01113b	0a		asl a			asl 	a
.01113c	69 06 00	adc #$0006		adc 	#6
.01113f	85 08		sta $08			sta 	DTemp1
.011141					_DTKPadLineNo:
.011141	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.011144	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011147	b2 18		lda ($18)		lda 	(DStartTempString)
.011149	29 ff 00	and #$00ff		and 	#$00FF
.01114c	c5 08		cmp $08			cmp 	DTemp1
.01114e	d0 f1		bne $011141		bne 	_DTKPadLineNo
.011150	68		pla			pla 									; get pointer
.011151	18		clc			clc 									; point to start of line
.011152	69 04 00	adc #$0004		adc 	#4
.011155	a8		tay			tay 									; put back in Y.
.011156					_DTKMainLoop:
.011156	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.011159	d0 04		bne $01115f		bne 	_DTKNotZero 					; if zero, return.
.01115b	7a		ply			ply
.01115c	fa		plx			plx
.01115d	68		pla			pla
.01115e	60		rts			rts
.01115f					_DTKNotZero:
.01115f	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.011162	b0 1c		bcs $011180		bcs 	_DTKNotString
.011164	5a		phy			phy										; save token address on stack.
.011165	c8		iny			iny 									; skip first token
.011166	c8		iny			iny
.011167	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.01116a	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01116d	98		tya			tya 									; copy the string out.
.01116e	20 73 05	jsr $010573		jsr 	StringCreateCopy
.011171	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.011174	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011177	68		pla			pla 									; get token, which is its own offset
.011178	a8		tay			tay
.011179	18		clc			clc
.01117a	79 00 00	adc $0000,y		adc 	$0000,y
.01117d	a8		tay			tay
.01117e	80 d6		bra $011156		bra 	_DTKMainLoop
.011180					_DTKNotString:
.011180	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.011183	b0 09		bcs $01118e		bcs 	_DTKNotShift
.011185	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011188	85 1c		sta $1c			sta 	DConstantShift
.01118a	c8		iny			iny 									; skip token.
.01118b	c8		iny			iny
.01118c	80 c8		bra $011156		bra 	_DTKMainLoop
.01118e					_DTKNotShift:
.01118e	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011191	b0 07		bcs $01119a		bcs 	_DTKNotKeyword
.011193	c8		iny			iny 									; skip over token
.011194	c8		iny			iny
.011195	20 14 12	jsr $011214		jsr 	_DTKDecodeKeyword 				; decode it.
.011198	80 bc		bra $011156		bra 	_DTKMainLoop
.01119a					_DTKNotKeyword:
.01119a	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01119d	b0 18		bcs $0111b7		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.01119f	5a		phy			phy 									; save pointer
.0111a0	38		sec			sec  									; shift it in the range 0-32767
.0111a1	e9 00 40	sbc #$4000		sbc 	#$4000
.0111a4	0a		asl a			asl 	a 								; shift it left, losing bit 15
.0111a5	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.0111a7	6a		ror a			ror 	a 								; rotate that into the constant value
.0111a8	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.0111aa	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.0111ad	20 9d 0e	jsr $010e9d		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0111b0	64 1c		stz $1c			stz 	DConstantShift
.0111b2	7a		ply			ply 									; restore pointer
.0111b3	c8		iny			iny 									; skip token.
.0111b4	c8		iny			iny
.0111b5	80 9f		bra $011156		bra 	_DTKMainLoop
.0111b7					_DTKIdentifier:
.0111b7	48		pha			pha 									; save token for typing at end
.0111b8					_DTKILoop:
.0111b8	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0111bb	20 e4 11	jsr $0111e4		jsr 	_DTKIDecodeToken 				; decode it.
.0111be	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.0111c1	c8		iny			iny 									; skip it
.0111c2	c8		iny			iny
.0111c3	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.0111c6	d0 f0		bne $0111b8		bne 	_DTKILoop
.0111c8	68		pla			pla 									; add $( as required.
.0111c9	48		pha			pha 									; comes from the first token.
.0111ca	29 00 20	and #$2000		and 	#IDTypeMask
.0111cd	f0 06		beq $0111d5		beq 	_DTKINotString
.0111cf	a9 24 00	lda #$0024		lda 	#"$"
.0111d2	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111d5					_DTKINotString:
.0111d5	68		pla			pla
.0111d6	29 00 10	and #$1000		and 	#IDArrayMask
.0111d9	f0 06		beq $0111e1		beq 	_DTKINotArray
.0111db	a9 28 00	lda #$0028		lda 	#"("
.0111de	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111e1					_DTKINotArray:
.0111e1	82 72 ff	brl $011156		brl 	_DTKMainLoop
.0111e4					_DTKIDecodeToken:
.0111e4	5a		phy			phy
.0111e5	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.0111e8	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.0111eb					_DTKIDivide:
.0111eb	38		sec			sec
.0111ec	e9 2d 00	sbc #$002d		sbc 	#45
.0111ef	c8		iny			iny
.0111f0	b0 f9		bcs $0111eb		bcs 	_DTKIDivide
.0111f2	69 2d 00	adc #$002d		adc 	#45
.0111f5	20 fe 11	jsr $0111fe		jsr 	_DTKIOutA 						; output low.
.0111f8	98		tya			tya
.0111f9	20 fe 11	jsr $0111fe		jsr 	_DTKIOutA 						; output high
.0111fc	7a		ply			ply
.0111fd	60		rts			rts
.0111fe					_DTKIOutA:
.0111fe	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011201	f0 10		beq $011213		beq 	_DTKIOutExit
.011203	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.011206	90 04		bcc $01120c		bcc 	_DTKIOutAlpha
.011208	38		sec			sec  									; adjust for 0-9
.011209	e9 4b 00	sbc #$004b		sbc 	#$4B
.01120c					_DTKIOutAlpha:
.01120c	18		clc			clc										; adjust for A-Z
.01120d	69 60 00	adc #$0060		adc 	#96
.011210	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011213					_DTKIOutExit:
.011213	60		rts			rts
.011214					_DTKDecodeKeyword:
.011214	48		pha			pha
.011215	da		phx			phx
.011216	5a		phy			phy
.011217	a8		tay			tay 									; save token ID in Y
.011218	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.01121b	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.01121e	48		pha			pha 									; save this flag on a stack
.01121f	5a		phy			phy 									; save the token ID
.011220	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011223	d0 19		bne $01123e		bne 	_DTKNotSpecial1
.011225	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.011227	88		dey			dey
.011228	b9 00 00	lda $0000,y		lda 	$0000,y
.01122b	29 ff 00	and #$00ff		and 	#$00FF
.01122e	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.011231	f0 0b		beq $01123e		beq 	_DTKNotSpecial1
.011233	c9 3a 00	cmp #$003a		cmp 	#":"
.011236	f0 06		beq $01123e		beq 	_DTKNotSpecial1
.011238	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.01123b	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01123e					_DTKNotSpecial1:
.01123e	68		pla			pla
.01123f	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.011242	a8		tay			tay 									; into Y.
.011243	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.011246					_DTKDWorkThrough:
.011246	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.011247	f0 0f		beq $011258		beq 	_DTKDFound
.011249	86 08		stx $08			stx 	DTemp1
.01124b	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.01124f	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.011252	18		clc			clc
.011253	65 08		adc $08			adc 	DTemp1
.011255	aa		tax			tax
.011256	80 ee		bra $011246		bra 	_DTKDWorkThrough
.011258					_DTKDFound:
.011258	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.01125c	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.01125f	3a		dec a			dec 	a
.011260	a8		tay			tay 									; put in Y
.011261					_DTKOut:
.011261	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.011265	29 ff 00	and #$00ff		and 	#$00FF
.011268	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01126b	e8		inx			inx
.01126c	88		dey			dey
.01126d	d0 f2		bne $011261		bne 	_DTKOut
.01126f	68		pla			pla 									; trailing space.
.011270	d0 06		bne $011278		bne 	_DTKNotSpecial2
.011272	a9 20 00	lda #$0020		lda 	#" "
.011275	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011278					_DTKNotSpecial2:
.011278	7a		ply			ply
.011279	fa		plx			plx
.01127a	68		pla			pla
.01127b	60		rts			rts
.01127c					ScanIndent:
.01127c	48		pha			pha
.01127d	5a		phy			phy
.01127e	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.011280	85 2e		sta $2e			sta 	DIndent2
.011282	98		tya			tya
.011283	18		clc			clc 									; point to code.
.011284	69 04 00	adc #$0004		adc 	#4
.011287	a8		tay			tay
.011288					_SILoop:
.011288	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.01128b	f0 35		beq $0112c2		beq 	_SIExit
.01128d	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011290	b0 08		bcs $01129a		bcs 	_SICheckKeyword
.011292	98		tya			tya 									; skip string.
.011293	18		clc			clc
.011294	79 00 00	adc $0000,y		adc 	$0000,y
.011297	a8		tay			tay
.011298	80 ee		bra $011288		bra 	_SILoop
.01129a					_SICheckKeyword:
.01129a	29 00 e0	and #$e000		and 	#$E000
.01129d	c9 00 20	cmp #$2000		cmp 	#$2000
.0112a0	f0 04		beq $0112a6		beq 	_SIFoundKeyword
.0112a2					_SIAdvance:
.0112a2	c8		iny			iny 									; if not, loop round.
.0112a3	c8		iny			iny
.0112a4	80 e2		bra $011288		bra 	_SILoop
.0112a6					_SIFoundKeyword:
.0112a6	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.0112a9	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.0112ac	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.0112af	f0 0d		beq $0112be		beq 	_SIKeyPlus
.0112b1	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.0112b4	d0 ec		bne $0112a2		bne 	_SIAdvance
.0112b6	c6 2c		dec $2c			dec 	DIndent
.0112b8	10 e8		bpl $0112a2		bpl 	_SIAdvance
.0112ba	64 2c		stz $2c			stz 	DIndent
.0112bc	80 e4		bra $0112a2		bra 	_SIAdvance
.0112be					_SIKeyPlus:
.0112be	e6 2c		inc $2c			inc 	DIndent
.0112c0	80 e0		bra $0112a2		bra 	_SIAdvance
.0112c2					_SIExit:
.0112c2	7a		ply			ply
.0112c3	68		pla			pla
.0112c4	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.0112c5					Function_PRINT:
.0112c5	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.0112c7	f0 33		beq $0112fc			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.0112c9	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.0112cc	f0 2e		beq $0112fc			beq 	_FPRExitCR
.0112ce	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.0112d1	f0 23		beq $0112f6			beq 	_FPRSkipLoop
.0112d3	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.0112d6	f0 1b		beq $0112f3			beq 	_FPRNewLine
.0112d8	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.0112db	f0 11		beq $0112ee			beq 	_FPRTab
.0112dd					_FPRExpression:
.0112dd	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.0112e0	b0 06		bcs $0112e8			bcs 	_FPRHaveString
.0112e2	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.0112e5	20 95 0e	jsr $010e95			jsr 	ConvertToString
.0112e8					_FPRHaveString:
.0112e8	a8		tay				tay 								; print the basic String.
.0112e9	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.0112ec	80 d7		bra $0112c5			bra 	Function_Print 				; and go round again.
.0112ee					_FPRTab:
.0112ee	20 78 f0	jsr $01f078			jsr 	HWTab
.0112f1	80 03		bra $0112f6			bra 	_FPRSkipLoop
.0112f3					_FPRNewLine:
.0112f3	20 65 f0	jsr $01f065			jsr 	HWNewLine
.0112f6					_FPRSkipLoop:
.0112f6	e6 06		inc $06				inc 	DCodePtr
.0112f8	e6 06		inc $06				inc 	DCodePtr
.0112fa	80 c9		bra $0112c5			bra 	Function_Print
.0112fc					_FPRExitCR:
.0112fc	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.0112fe	88		dey				dey
.0112ff	88		dey				dey
.011300	b9 00 00	lda $0000,y			lda 	$0000,y
.011303	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.011306	f0 08		beq $011310			beq 	_FPRExit
.011308	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.01130b	f0 03		beq $011310			beq 	_FPRExit
.01130d	20 65 f0	jsr $01f065			jsr 	HWNewLine 					; print a new line.
.011310					_FPRExit:
.011310	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011311					Function_IF:
.011311	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.011314	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011316	05 08		ora $08				ora 	DTemp1
.011318	a8		tay				tay 								; success flag in Y.
.011319	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.01131b	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.01131e	d0 32		bne $011352			bne 	_FIFExtended 				; if so, go to the extended IF.
.011320	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.011322	e6 06		inc $06				inc 	DCodePtr
.011324	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.011327	f0 0f		beq $011338			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011329	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.01132b	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.01132e	90 21		bcc $011351			bcc 	_FIFContinue 				; if not, just carry on exiting.
.011330	c9 00 c0	cmp #$c000			cmp 	#$C000
.011333	b0 1c		bcs $011351			bcs 	_FIFContinue
.011335	4c c7 15	jmp $0115c7			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.011338					_FIFEndOfLine:
.011338	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.01133a	f0 15		beq $011351			beq 	_FIFContinue 				; if done so, continue.
.01133c	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.01133f	90 06		bcc $011347			bcc 	_FIFStringConstant
.011341	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.011343	e6 06		inc $06				inc 	DCodePtr
.011345	80 f1		bra $011338			bra 	_FIFEndOfLine
.011347					_FIFStringConstant:
.011347	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.01134a	18		clc				clc
.01134b	65 06		adc $06				adc 	DCodePtr
.01134d	85 06		sta $06				sta 	DCodePtr
.01134f	80 e7		bra $011338			bra 	_FIFEndOfLine
.011351					_FIFContinue:
.011351	60		rts				rts
.011352					_FIFExtended:
.011352	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.011354	e6 2a		inc $2a				inc 	DStack
.011356	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.011359	a6 2a		ldx $2a				ldx 	DStack
.01135b	95 00		sta $00,x			sta 	$00,x
.01135d	98		tya				tya 								; see if the test was passed.
.01135e	f0 01		beq $011361			beq 	_FIXSkip 					; if zero then it has failed.
.011360	60		rts				rts 								; test passed, so continue executing
.011361					_FIXSkip:
.011361	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.011364	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.011367	20 c7 13	jsr $0113c7			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.01136a	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.01136c	e6 06		inc $06				inc 	DCodePtr
.01136e	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.011371	d0 04		bne $011377			bne 	_FIXNoThrow
.011373	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011375	c6 2a		dec $2a				dec 	DStack
.011377					_FIXNoThrow:
.011377	60		rts				rts
.011378					Handler_ELSE:
.011378	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.01137a	b5 00		lda $00,x			lda 	$00,x
.01137c	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.01137f	d0 12		bne $011393			bne 	_HEBadStructure
.011381	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.011384	a2 00 00	ldx #$0000			ldx 	#$0000
.011387	20 c7 13	jsr $0113c7			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.01138a	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.01138c	e6 06		inc $06				inc 	DCodePtr
.01138e	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011390	c6 2a		dec $2a				dec 	DStack
.011392	60		rts				rts
.011393					_HEBadStructure:
.011393	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011396	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01139e	68 6f 75 74 20 49 66 00
.0113a6					Handler_ENDIF:
.0113a6	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0113a8	b5 00		lda $00,x			lda 	$00,x
.0113aa	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0113ad	d0 05		bne $0113b4			bne 	_HEIBadStructure
.0113af	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0113b1	c6 2a		dec $2a				dec 	DStack
.0113b3	60		rts				rts
.0113b4					_HEIBadStructure:
.0113b4	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0113b7	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>0113bf	68 6f 75 74 20 49 66 00
.0113c7					ScanForwardLevel:
.0113c7	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.0113c9	86 0a		stx $0a				stx 	DTemp1+2
.0113cb	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.0113cd	85 0c		sta $0c				sta 	DTemp2
.0113cf	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.0113d2					_SFLLoop:
.0113d2	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.0113d5	d0 0d		bne $0113e4			bne 	_SFLNoCheck 				; we're in a substructure.
.0113d7	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.0113d9	f0 09		beq $0113e4			beq 	_SFLNoCheck 				; don't check zero
.0113db	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.0113dd	f0 04		beq $0113e3			beq 	_SFLFound
.0113df	c5 0a		cmp $0a				cmp 	DTemp1+2
.0113e1	d0 01		bne $0113e4			bne 	_SFLNoCheck
.0113e3					_SFLFound:
.0113e3	60		rts				rts
.0113e4					_SFLNoCheck:
.0113e4	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.0113e6	f0 4f		beq $011437			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.0113e8	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.0113eb	90 40		bcc $01142d			bcc 	_SFLSkipString 				; then handle that.
.0113ed	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.0113ef	e6 06		inc $06				inc 	DCodePtr
.0113f1	a8		tay				tay 								; put token in Y temporarily.
.0113f2	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.0113f5	c9 00 20	cmp #$2000			cmp 	#$2000
.0113f8	d0 d8		bne $0113d2			bne 	_SFLLoop
.0113fa	98		tya				tya 								; get the token back.
.0113fb	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.0113fe	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011401	f0 cf		beq $0113d2			beq 	_SFLLoop
.011403	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011406	90 ca		bcc $0113d2			bcc 	_SFLLoop
.011408	e8		inx				inx 								; increment the level.
.011409	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.01140c	f0 c4		beq $0113d2			beq 	_SFLLoop
.01140e	ca		dex				dex 								; decrement the level
.01140f	ca		dex				dex 								; one overdoes the previous inx.
.011410	10 c0		bpl $0113d2			bpl 	_SFLLoop 					; if gone -ve then error.
.011412					_SFLError:
.011412	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011414	85 22		sta $22				sta 	DLineNumber
.011416	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011419	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011421	65 20 69 6d 62 61 6c 61 6e 63 65 00
.01142d					_SFLSkipString:
.01142d	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.011430	18		clc				clc
.011431	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.011433	85 06		sta $06				sta 	DCodePtr
.011435	80 9b		bra $0113d2			bra 	_SFLLoop 					; go round again.
.011437					_SFLNextLine:
.011437	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.011439	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.01143c	f0 d4		beq $011412			beq 	_SFLError 					; if zero, then there's no more code to search.
.01143e	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.011441	85 22		sta $22				sta 	DLineNumber
.011443	18		clc				clc
.011444	a5 06		lda $06				lda 	DCodePtr
.011446	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.011449	85 06		sta $06				sta 	DCodePtr
.01144b	80 85		bra $0113d2			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.01144d					Command_FOR:
.01144d	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.01144f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.011452	d0 60		bne $0114b4			bne		_CFOBad
.011454	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.011457	b0 15		bcs $01146e			bcs 	_CFOExists
.011459	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.01145b	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.01145e	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.011461	48		pha				pha 								; save on stack
.011462					_CFOSkipToken:
.011462	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.011464	e6 06		inc $06				inc 	DCodePtr
.011466	e6 06		inc $06				inc 	DCodePtr
.011468	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.01146b	d0 f5		bne $011462			bne 	_CFOSkipToken
.01146d	68		pla				pla 								; restore address
.01146e					_CFOExists:
.01146e	48		pha				pha 								; push variable address on stack
.01146f	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.011472	20 af 04	jsr $0104af			jsr 	ExpectToken
.011475	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.011478	bb		tyx				tyx 								; put high value in X
.011479	7a		ply				ply 								; address in Y
.01147a	99 00 00	sta $0000,y			sta 	$0000,y
.01147d	8a		txa				txa
.01147e	99 02 00	sta $0002,y			sta 	$0002,y
.011481	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.011484	20 af 04	jsr $0104af			jsr 	ExpectToken
.011487	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011489	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.01148b	95 02		sta $02,x			sta 	$02,x
.01148d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01148f	95 04		sta $04,x			sta 	$04,x
.011491	98		tya				tya 								; save variable address at +6
.011492	95 06		sta $06,x			sta 	$06,x
.011494	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.011497	95 08		sta $08,x			sta 	$08,x
.011499	8a		txa				txa 								; add 8 to stack position
.01149a	18		clc				clc
.01149b	69 08 00	adc #$0008			adc 	#8
.01149e	85 2a		sta $2a				sta 	DStack
.0114a0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.0114a3	b2 06		lda ($06)			lda 	(DCodePtr)
.0114a5	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.0114a8	d0 09		bne $0114b3			bne 	_CFONoStep
.0114aa	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.0114ad	20 af 04	jsr $0104af			jsr 	ExpectToken
.0114b0	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.0114b3					_CFONoStep:
.0114b3	60		rts				rts
.0114b4					_CFOBad:
.0114b4	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114b7	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>0114bf	76 61 72 69 61 62 6c 65 00
.0114c8					Command_NEXT:
.0114c8	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.0114ca	b5 00		lda $00,x			lda 	$00,x
.0114cc	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.0114cf	f0 14		beq $0114e5			beq 	_CNXOk
.0114d1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114d4	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>0114dc	68 6f 75 74 20 46 6f 72 00
.0114e5					_CNXOk:
.0114e5	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.0114e7	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.0114ea	90 22		bcc $01150e			bcc 	_CNXNoVariable
.0114ec	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.0114ef	90 08		bcc $0114f9			bcc 	_CNXNextVar 				; not found variable, it's an error.
.0114f1	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.0114f3	ca		dex				dex
.0114f4	ca		dex				dex
.0114f5	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.0114f7	f0 15		beq $01150e			beq 	_CNXNoVariable 				; then continue
.0114f9					_CNXNextVar:
.0114f9	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0114fc	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011504	20 76 61 72 69 61 62 6c 65 00
.01150e					_CNXNoVariable:
.01150e	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011510	48		pha				pha
.011511	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011513	38		sec				sec
.011514	e9 08 00	sbc #$0008			sbc 	#8
.011517	85 2a		sta $2a				sta 	DStack
.011519	aa		tax				tax 								; X points to the stack.
.01151a	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.01151c	85 06		sta $06				sta 	DCodePtr
.01151e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.011521	5a		phy				phy 								; save the target on the stack
.011522	48		pha				pha
.011523	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011526	85 08		sta $08				sta 	DTemp1
.011528	64 0a		stz $0a				stz 	DTemp1+2
.01152a	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.01152c	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.01152f	d0 0b		bne $01153c			bne 	_CNXNoStep
.011531	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.011533	e6 06		inc $06				inc 	DCodePtr
.011535	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.011538	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.01153a	84 0a		sty $0a				sty 	DTemp1+2
.01153c					_CNXNoStep:
.01153c	68		pla				pla 								; save the Target in DTemp2
.01153d	85 0c		sta $0c				sta 	DTemp2
.01153f	68		pla				pla
.011540	85 0e		sta $0e				sta 	DTemp2+2
.011542	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.011544	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.011546	a8		tay				tay
.011547	18		clc				clc
.011548	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.01154b	65 08		adc $08				adc 	DTemp1
.01154d	99 00 00	sta $0000,y			sta 	$0000,y
.011550	b9 02 00	lda $0002,y			lda 	$0002,y
.011553	65 0a		adc $0a				adc 	DTemp1+2
.011555	99 02 00	sta $0002,y			sta 	$0002,y
.011558	38		sec				sec
.011559	a5 0c		lda $0c				lda 	DTemp2
.01155b	f9 00 00	sbc $0000,y			sbc 	$0000,y
.01155e	85 0c		sta $0c				sta 	DTemp2
.011560	a5 0e		lda $0e				lda 	DTemp2+2
.011562	f9 02 00	sbc $0002,y			sbc 	$0002,y
.011565	85 0e		sta $0e				sta 	DTemp2+2
.011567	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011569	f0 0a		beq $011575			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.01156b	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.01156d	45 0a		eor $0a				eor 	DTemp1+2
.01156f	10 04		bpl $011575			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.011571	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.011572	85 06		sta $06				sta 	DCodePtr
.011574	60		rts				rts
.011575					_CNXLoopAgain:
.011575	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011576	18		clc				clc
.011577	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011579	aa		tax				tax
.01157a	69 08 00	adc #$0008			adc 	#8
.01157d	85 2a		sta $2a				sta 	DStack
.01157f	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.011581	85 22		sta $22				sta 	DLineNumber
.011583	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.011584					Function_ONGOTO:
.011584	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.011587	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.01158a	d0 25		bne $0115b1			bne 	_FOGoFail
.01158c	c9 00 00	cmp #$0000			cmp 	#0
.01158f	f0 20		beq $0115b1			beq 	_FOGoFail 					; we start with index = 1
.011591	48		pha				pha 								; save count on stack
.011592	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011595	20 af 04	jsr $0104af			jsr 	ExpectToken
.011598	fa		plx				plx 								; put count in X.
.011599					_FOGoLoop:
.011599	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.01159b	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01159e	90 73		bcc $011613			bcc 	FGOFail 					; if not, then we have an error.
.0115a0	c9 00 c0	cmp #$c000			cmp 	#$C000
.0115a3	b0 6e		bcs $011613			bcs 	FGOFail
.0115a5	ca		dex				dex 								; subtract one, if done, call GOTO code
.0115a6	f0 1f		beq $0115c7			beq 	Function_GOTO
.0115a8	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.0115aa	e6 06		inc $06				inc 	DCodePtr
.0115ac	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; expect a comma
.0115af	80 e8		bra $011599			bra 	_FOGoLoop 					; and loop round.
.0115b1					_FOGoFail:
.0115b1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115b4	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>0115bc	47 6f 74 6f 20 76 61 6c 75 65 00
.0115c7					Function_GOTO:
.0115c7	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.0115c9	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.0115cc	90 45		bcc $011613			bcc 	FGOFail 					; we don't do calculate line numbers.
.0115ce	c9 00 c0	cmp #$c000			cmp 	#$C000
.0115d1	b0 40		bcs $011613			bcs 	FGOFail
.0115d3	38		sec				sec 								; convert to 0-32767
.0115d4	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.0115d7	aa		tax				tax
.0115d8	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.0115db	18		clc				clc
.0115dc	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.0115de	a8		tay				tay
.0115df					_FGOSearch:
.0115df	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.0115e2	f0 18		beq $0115fc			beq 	_FGOUnknown
.0115e4	8a		txa				txa 								; does it match line number ?
.0115e5	d9 02 00	cmp $0002,y			cmp 	$0002,y
.0115e8	f0 08		beq $0115f2			beq 	_FGOFound 					; yes, then found.
.0115ea	98		tya				tya 								; no follow the link
.0115eb	18		clc				clc
.0115ec	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.0115ef	a8		tay				tay
.0115f0	80 ed		bra $0115df			bra 	_FGOSearch 					; and keep looking
.0115f2					_FGOFound:
.0115f2	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.0115f4	98		tya				tya 								; Y + 4 is the code pointer.
.0115f5	18		clc				clc 								; (skipping link and line #)
.0115f6	69 04 00	adc #$0004			adc 	#4
.0115f9	85 06		sta $06				sta 	DCodePtr
.0115fb	60		rts				rts									; and continue
.0115fc					_FGOUnknown:
.0115fc	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0115ff	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011607	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011613					FGOFail:
.011613	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011616	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>01161e	20 4e 75 6d 62 65 72 00
.011626					Function_GOSUB:
.011626	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011628	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.01162a	18		clc				clc
.01162b	69 02 00	adc #$0002			adc 	#2
.01162e	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011630	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011632	95 04		sta $04,x			sta 	$04,x
.011634	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.011637	95 06		sta $06,x			sta 	$06,x
.011639	8a		txa				txa 								; advance stack by 6.
.01163a	18		clc				clc
.01163b	69 06 00	adc #$0006			adc 	#6
.01163e	85 2a		sta $2a				sta 	DStack
.011640	80 85		bra $0115c7			bra 	Function_GOTO 				; and do a GOTO.
.011642					Function_RETURN:
.011642	a6 2a		ldx $2a				ldx 	DStack
.011644	b5 00		lda $00,x			lda 	$00,x
.011646	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.011649	d0 11		bne $01165c			bne 	_FRetFail
.01164b	8a		txa				txa 								; unpick stack.
.01164c	38		sec				sec
.01164d	e9 06 00	sbc #$0006			sbc 	#6
.011650	85 2a		sta $2a				sta 	DStack
.011652	aa		tax				tax
.011653	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011655	85 06		sta $06				sta 	DCodePtr
.011657	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011659	85 22		sta $22				sta 	DLineNumber
.01165b	60		rts				rts
.01165c					_FRetFail:
.01165c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01165f	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011667	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.011674					Function_REPEAT:
.011674	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011676	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011678	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01167a	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01167c	95 04		sta $04,x			sta 	$04,x
.01167e	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.011681	95 06		sta $06,x			sta 	$06,x
.011683	8a		txa				txa 								; advance stack by 6.
.011684	18		clc				clc
.011685	69 06 00	adc #$0006			adc 	#6
.011688	85 2a		sta $2a				sta 	DStack
.01168a	60		rts				rts
.01168b					Function_UNTIL:
.01168b	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.01168d	b5 00		lda $00,x			lda 	$00,x
.01168f	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.011692	d0 26		bne $0116ba			bne 	_FUNFail
.011694	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.011697	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.01169a	d0 15		bne $0116b1			bne 	_FUNExit
.01169c	c9 00 00	cmp #$0000			cmp 	#0
.01169f	d0 10		bne $0116b1			bne 	_FUNExit
.0116a1	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.0116a3	38		sec				sec
.0116a4	e9 06 00	sbc #$0006			sbc 	#6
.0116a7	aa		tax				tax
.0116a8	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0116aa	85 06		sta $06				sta 	DCodePtr
.0116ac	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0116ae	85 22		sta $22				sta 	DLineNumber
.0116b0	60		rts				rts
.0116b1					_FUNExit:
.0116b1	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.0116b3	38		sec				sec
.0116b4	e9 06 00	sbc #$0006			sbc 	#6
.0116b7	85 2a		sta $2a				sta 	DStack
.0116b9	60		rts				rts
.0116ba					_FUNFail:
.0116ba	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116bd	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>0116c5	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.0116d2					Function_WHILE:
.0116d2	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.0116d4	48		pha				pha 								; save on stack
.0116d5	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.0116d8	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.0116db	d0 14		bne $0116f1			bne 	_FWHExecute
.0116dd	c9 00 00	cmp #$0000			cmp 	#0
.0116e0	d0 0f		bne $0116f1			bne 	_FWHExecute
.0116e2	68		pla				pla 								; throw away current instruction
.0116e3	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.0116e6	a2 00 00	ldx #$0000			ldx 	#0
.0116e9	20 c7 13	jsr $0113c7			jsr 	ScanForwardLevel 			; scan forward checking structures
.0116ec	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.0116ee	e6 06		inc $06				inc 	DCodePtr
.0116f0	60		rts				rts
.0116f1					_FWHExecute:
.0116f1	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0116f3	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.0116f4	3a		dec a				dec 	a
.0116f5	3a		dec a				dec 	a
.0116f6	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0116f8	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0116fa	95 04		sta $04,x			sta 	$04,x
.0116fc	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.0116ff	95 06		sta $06,x			sta 	$06,x
.011701	8a		txa				txa 								; advance stack by 6.
.011702	18		clc				clc
.011703	69 06 00	adc #$0006			adc 	#6
.011706	85 2a		sta $2a				sta 	DStack
.011708	60		rts				rts
.011709					Function_WEND:
.011709	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.01170b	b5 00		lda $00,x			lda 	$00,x
.01170d	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.011710	d0 11		bne $011723			bne 	_FWEFail
.011712	8a		txa				txa 								; unpick stack and always loop back.
.011713	38		sec				sec 								; we do the check at the top.
.011714	e9 06 00	sbc #$0006			sbc 	#6
.011717	85 2a		sta $2a				sta 	DStack
.011719	aa		tax				tax
.01171a	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.01171c	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.01171e	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011720	85 22		sta $22				sta 	DLineNumber
.011722	60		rts				rts
.011723					_FWEFail:
.011723	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011726	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>01172e	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.011739					Function_END:
.011739	02 00		cop #$00			cop 	#0
.01173b					Function_RUN:
.01173b	20 a2 17	jsr $0117a2			jsr 	Function_CLEAR 				; clear all variables.
.01173e	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.011740	18		clc				clc
.011741	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.011744					_FRun_NextLineNumber:
.011744	a8		tay				tay 								; put in Y
.011745	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.011748	f0 ef		beq $011739			beq 	Function_END 				; if zero, off the end of the program, so END the program
.01174a	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.01174d	85 22		sta $22				sta 	DLineNumber 				; and save it.
.01174f	98		tya				tya 								; get address back
.011750	18		clc				clc 								; skip over the link/line number
.011751	69 04 00	adc #$0004			adc 	#4
.011754	85 06		sta $06				sta 	DCodePtr
.011756					_FRun_NextInstruction:
.011756	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011758	20 7f f0	jsr $01f07f			jsr 	HWCheckBreak 				; break key pressed.
.01175b	d0 3c		bne $011799			bne 	_FRun_Break
.01175d	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.01175f	f0 32		beq $011793			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011761	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.011764	f0 18		beq $01177e			beq 	_FRun_Colon
.011766	a8		tay				tay 								; save in Y
.011767	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01176a	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.01176d	d0 15		bne $011784			bne 	_FRun_TryLET 				; if not, try LET as a default.
.01176f	98		tya				tya 								; get token back
.011770	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011773	0a		asl a				asl 	a 							; double it into X
.011774	aa		tax				tax
.011775	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011777	e6 06		inc $06				inc 	DCodePtr
.011779	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.01177c	80 d8		bra $011756			bra 	_FRun_NextInstruction 		; do the following instruction.
.01177e					_FRun_Colon:
.01177e	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011780	e6 06		inc $06				inc 	DCodePtr
.011782	80 d2		bra $011756			bra 	_FRun_NextInstruction 		; do the following instruction.
.011784					_FRun_TryLET:
.011784	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.011786	c9 00 c0	cmp #$c000			cmp 	#$C000
.011789	90 05		bcc $011790			bcc		_FRunSyntax 				; no, must be syntax.
.01178b	20 25 10	jsr $011025			jsr 	Function_LET 				; try as a LET.
.01178e	80 c6		bra $011756			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011790					_FRunSyntax:
.011790	82 0c ed	brl $01049f			brl 	SyntaxError
.011793					_FRun_EndInstruction:
.011793	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011795	1a		inc a				inc 	a 							; go to link for next line
.011796	1a		inc a				inc 	a
.011797	80 ab		bra $011744			bra 	_FRun_NextLineNumber
.011799					_FRun_Break:
.011799	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01179c	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.0117a2					Function_CLEAR:
.0117a2	20 ae 17	jsr $0117ae			jsr 	ClearVariablesPointersAndStacks
.0117a5	60		rts				rts
.0117a6					Function_STOP:
.0117a6	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0117a9	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.0117ae					ClearVariablesPointersAndStacks:
.0117ae	a9 80 00	lda #$0080			lda 	#BASStack
.0117b1	85 2a		sta $2a				sta 	DStack
.0117b3	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.0117b5	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.0117b8	a9 00 00	lda #$0000			lda 	#$0000
.0117bb	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0117bd	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.0117bf	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.0117c2	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0117c4	20 eb 17	jsr $0117eb			jsr 	FindCodeEnd 				; find where the program ends.
.0117c7	a8		tay				tay 								; Y points to it.
.0117c8	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.0117cb	99 02 00	sta $0002,y			sta 	$0002,y
.0117ce	99 04 00	sta $0004,y			sta 	$0004,y
.0117d1	98		tya				tya 								; start of working memory up
.0117d2	18		clc				clc
.0117d3	69 06 00	adc #$0006			adc 	#6
.0117d6	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.0117d9	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0117db	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.0117de					_FCLoop:
.0117de	a9 00 00	lda #$0000			lda 	#$0000
.0117e1	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0117e3	c8		iny				iny
.0117e4	c8		iny				iny
.0117e5	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.0117e8	d0 f4		bne $0117de			bne 	_FCLoop
.0117ea	60		rts				rts
.0117eb					FindCodeEnd:
.0117eb	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.0117ee	18		clc				clc
.0117ef	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.0117f1	a8		tay				tay
.0117f2					_FCELoop:
.0117f2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.0117f5	f0 08		beq $0117ff			beq 	_FCEExit
.0117f7	98		tya				tya 								; add offset
.0117f8	18		clc				clc
.0117f9	79 00 00	adc $0000,y			adc 	$0000,y
.0117fc	a8		tay				tay
.0117fd	80 f3		bra $0117f2			bra 	_FCELoop
.0117ff					_FCEExit:
.0117ff	98		tya				tya 								; return in A
.011800	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011801					Function_Dim:
.011801	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011803	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011806	f0 3b		beq $011843			beq		_FDIMNotArray 				; no, error.
.011808	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.01180b	b0 41		bcs $01184e			bcs 	_FDIMExists 				; if it does, that's an error.
.01180d	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01180f	48		pha				pha
.011810	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.011812	48		pha				pha
.011813					_FDIMSkip:
.011813	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011815	e6 06		inc $06				inc 	DCodePtr
.011817	e6 06		inc $06				inc 	DCodePtr
.011819	29 00 08	and #$0800			and 	#IDContMask
.01181c	d0 f5		bne $011813			bne 	_FDIMSkip
.01181e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.011821	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check the ) following.
.011824	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011827	d0 3b		bne $011864			bne 	_FDIMSize
.011829	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.01182c	f0 36		beq $011864			beq 	_FDIMSize
.01182e	7a		ply				ply 								; restore HashTablePtr
.01182f	84 20		sty $20				sty 	DHashTablePtr
.011831	7a		ply				ply 								; so now A is the high index, Y points to the token
.011832	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.011835	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.011837	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.01183a	d0 06		bne $011842			bne 	_FDIMExit
.01183c	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.01183e	e6 06		inc $06				inc 	DCodePtr
.011840	80 bf		bra $011801			bra 	Function_DIM 				; and do another
.011842					_FDIMExit:
.011842	60		rts				rts
.011843					_FDIMNotArray:
.011843	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011846	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.01184e					_FDIMExists:
.01184e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011851	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>011859	65 64 69 6d 65 6e 73 69 6f 6e 00
.011864					_FDIMSize:
.011864	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011867	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01186f	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011875					Function_COLLECT:
.011875	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011877	85 0c		sta $0c				sta 	DTemp2
.011879	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.01187c	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.01187e	85 0e		sta $0e				sta 	DTemp2+2
.011880	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011882	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011884					_FCNextPass:
.011884	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011886	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011888	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.01188a	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.01188d	18		clc				clc
.01188e	65 02		adc $02				adc 	DBaseAddress
.011890	a8		tay				tay 								; put in Y
.011891	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011894					_FCO1:
.011894	20 ba 18	jsr $0118ba			jsr  	COLLECTScanVariable 		; scan that one.
.011897	c8		iny				iny 	 							; go to next pointer
.011898	c8		iny				iny
.011899	ca		dex				dex
.01189a	d0 f8		bne $011894			bne 	_FCO1 						; until done all 16.
.01189c	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01189f					_FCO2:
.01189f	20 ce 18	jsr $0118ce			jsr  	COLLECTScanArray 			; scan that one.
.0118a2	c8		iny				iny 	 							; go to next pointer
.0118a3	c8		iny				iny
.0118a4	ca		dex				dex
.0118a5	d0 f8		bne $01189f			bne 	_FCO2 						; until done all 16.
.0118a7	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.0118a9	f0 0e		beq $0118b9			beq		_FCExit 					; if finished then exit.
.0118ab	48		pha				pha 								; save the target address
.0118ac	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.0118ae	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.0118b0	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make the string concrete.
.0118b3	7a		ply				ply 								; restore the string.
.0118b4	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.0118b7	80 cb		bra $011884			bra		_FCNextPass
.0118b9					_FCExit:
.0118b9	60		rts				rts
.0118ba					COLLECTScanVariable:
.0118ba	da		phx				phx 								; save XY
.0118bb	5a		phy				phy
.0118bc					_CSVLoop:
.0118bc	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0118bf	f0 0a		beq $0118cb			beq 	_CSVExit
.0118c1	a8		tay				tay 								; put new address into Y
.0118c2	18		clc				clc 								; which is four on.
.0118c3	69 04 00	adc #$0004			adc 	#4
.0118c6	20 ef 18	jsr $0118ef			jsr 	COLLECTCheck
.0118c9	80 f1		bra $0118bc			bra 	_CSVLoop
.0118cb					_CSVExit:
.0118cb	7a		ply				ply
.0118cc	fa		plx				plx
.0118cd	60		rts				rts
.0118ce					COLLECTScanArray:
.0118ce	da		phx				phx 								; save XY
.0118cf	5a		phy				phy
.0118d0					_CSALoop:
.0118d0	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.0118d3	f0 17		beq $0118ec			beq 	_CSAExit
.0118d5	a8		tay				tay 								; put new address in Y
.0118d6	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.0118d9	aa		tax				tax
.0118da	e8		inx				inx									; +1 as one more data element.
.0118db	98		tya				tya 								; point A to first element, at +6
.0118dc	18		clc				clc
.0118dd	69 06 00	adc #$0006			adc 	#6
.0118e0					_CSADoAllStrings:
.0118e0	20 ef 18	jsr $0118ef			jsr 	COLLECTCheck 				; collect check the first.
.0118e3	1a		inc a				inc 	a 							; advance the pointer.
.0118e4	1a		inc a				inc 	a
.0118e5	1a		inc a				inc 	a
.0118e6	1a		inc a				inc 	a
.0118e7	ca		dex				dex
.0118e8	d0 f6		bne $0118e0			bne 	_CSADoAllStrings 			; until all strings are done.
.0118ea	80 e4		bra $0118d0			bra 	_CSALoop
.0118ec					_CSAExit:
.0118ec	7a		ply				ply
.0118ed	fa		plx				plx
.0118ee	60		rts				rts
.0118ef					COLLECTCheck:
.0118ef	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.0118f1	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.0118f3	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.0118f5	90 0a		bcc $011901			bcc 	_COCExit
.0118f7	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.0118f9	b0 06		bcs $011901			bcs 	_COCExit
.0118fb	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.0118fd	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.0118ff	85 14		sta $14				sta 	DSignCount
.011901					_COCExit:
.011901	a5 0a		lda $0a				lda 	DTemp1+2
.011903	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011904					Command_POKE:
.011904	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011907	48		pha				pha	 								; save on stack
.011908	5a		phy				phy
.011909	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.01190c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.01190f	fa		plx				plx 								; pull address and store in DTemp1
.011910	86 0a		stx $0a				stx 	DTemp1+2
.011912	fa		plx				plx
.011913	86 08		stx $08				stx 	DTemp1+0
.011915	e2 20		sep #$20			sep 	#$20 						; byte mode
.011917	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011919	c2 20		rep #$20			rep 	#$20 						; word mode
.01191b	60		rts				rts
.01191c					Command_DOKE:
.01191c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.01191f	48		pha				pha	 								; save on stack
.011920	5a		phy				phy
.011921	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.011924	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011927	fa		plx				plx 								; pull address and store in DTemp1
.011928	86 0a		stx $0a				stx 	DTemp1+2
.01192a	fa		plx				plx
.01192b	86 08		stx $08				stx 	DTemp1+0
.01192d	87 08		sta [$08]			sta 	[DTemp1]					; write it
.01192f	60		rts				rts
.011930					Command_LOKE:
.011930	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011933	48		pha				pha	 								; save on stack
.011934	5a		phy				phy
.011935	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.011938	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.01193b	fa		plx				plx 								; pull address and store in DTemp1
.01193c	86 0a		stx $0a				stx 	DTemp1+2
.01193e	fa		plx				plx
.01193f	86 08		stx $08				stx 	DTemp1+0
.011941	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.011943	98		tya				tya
.011944	a0 02 00	ldy #$0002			ldy 	#2
.011947	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.011949	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.01194a					Function_ASSERT:
.01194a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.01194d	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.01194f	05 08		ora $08				ora 	Dtemp1
.011951	f0 01		beq $011954			beq 	_FAssFail
.011953	60		rts				rts
.011954					_FAssFail:
.011954	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011957	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>01195f	61 69 6c 65 64 00
.011965					Function_CLS:
.011965	20 0a f0	jsr $01f00a			jsr 	HWClearScreen
.011968	60		rts				rts
.011969					Function_REM:
.011969	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.01196b	f0 0b		beq $011978			beq 	_FRemSyntax 				; if 0, syntax error
.01196d	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.011970	b0 06		bcs $011978			bcs 	_FRemSyntax
.011972	18		clc				clc 								; add to DCodePtr
.011973	65 06		adc $06				adc 	DCodePtr
.011975	85 06		sta $06				sta 	DCodePtr
.011977	60		rts				rts
.011978					_FRemSyntax:
.011978	82 24 eb	brl $01049f			brl 	SyntaxError
.01197b					Function_LINK:
.01197b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.01197e	85 08		sta $08				sta 	DTemp1 						; target address
.011980	84 0a		sty $0a				sty 	DTemp1+2
.011982	7b		tdc				tda 								; work out what the actual address is
.011983	18		clc				clc
.011984	69 08 00	adc #$0008			adc 	#DTemp1
.011987	8f bc 19 01	sta $0119bc			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.01198b	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.01198d	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011990	48		pha				pha
.011991	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011994	aa		tax				tax
.011995	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011998	a8		tay				tay
.011999	68		pla				pla
.01199a	22 bb 19 01	jsl $0119bb			jsl 	_FLIExecuteIt
.01199e	5a		phy				phy 								; save Y
.01199f	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.0119a1	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.0119a4	8a		txa				txa
.0119a5	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.0119a8	68		pla				pla
.0119a9	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.0119ac	c8		iny				iny 								; point to their high bytes and clear them
.0119ad	c8		iny				iny
.0119ae	a9 00 00	lda #$0000			lda 	#0
.0119b1	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.0119b4	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.0119b7	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.0119ba	60		rts				rts
.0119bb					_FLIExecuteIt:
.0119bb	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.0119be					SwitchBasicInstance:
.0119be	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.0119c0	20 0a f0	jsr $01f00a			jsr 	HWClearScreen 						; clear screen
.0119c3	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.0119c6	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.0119c8	86 02		stx $02				stx		DBaseAddress
.0119ca	84 04		sty $04				sty 	DHighAddress
.0119cc	eb		xba				xba 										; put the page number (goes in the DBR) in B
.0119cd	48		pha				pha 										; then copy it into B.
.0119ce	ab		plb				plb
.0119cf	ab		plb				plb
.0119d0	4c 3b 17	jmp $01173b			jmp 	Function_RUN

;******  Return to file: ../source/start.asm

.01f000	a0 02 00	ldy #$0002			ldy 	#TTest >> 16 						; code called for testing.
.01f003	a9 00 00	lda #$0000			lda 	#TTest & $FFFF
.01f006	20 c8 05	jsr $0105c8			jsr 	Tokenise
.01f009	6b		rtl				rtl

;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.01f00a					HWClearScreen:
.01f00a	48		pha				pha
.01f00b	da		phx				phx
.01f00c	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.01f00f	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.01f012	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f016	ca		dex				dex
.01f017	10 f6		bpl $01f00f			bpl 	_CS0
.01f019	64 28		stz $28				stz 	DCursor
.01f01b	a9 66 20	lda #$2066			lda 	#$2000+HWCursorCharacter
.01f01e	8f 00 00 0f	sta $0f0000			sta 	$F0000
.01f022	fa		plx				plx
.01f023	68		pla				pla
.01f024	60		rts				rts
.01f025					HWPrintChar:
.01f025	48		pha				pha
.01f026	da		phx				phx
.01f027	5a		phy				phy
.01f028	29 ff 00	and #$00ff			and 	#$00FF
.01f02b	c9 61 00	cmp #$0061			cmp 	#"a"
.01f02e	90 0c		bcc $01f03c			bcc 	_HWPCNotLC
.01f030	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01f033	b0 07		bcs $01f03c			bcs 	_HWPCNotLC
.01f035	38		sec				sec
.01f036	e9 20 00	sbc #$0020			sbc 	#32
.01f039	09 80 00	ora #$0080			ora 	#128
.01f03c					_HWPCNotLC:
.01f03c	29 bf 00	and #$00bf			and 	#$BF
.01f03f	a6 28		ldx $28				ldx 	DCursor
.01f041	e2 20		sep #$20			sep 	#$20
.01f043	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f047	c2 20		rep #$20			rep 	#$20
.01f049	e8		inx				inx
.01f04a	8a		txa				txa
.01f04b	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.01f04e	d0 03		bne $01f053			bne 	_HWNotEnd
.01f050	a9 00 00	lda #$0000			lda 	#0
.01f053					_HWNotEnd:
.01f053	85 28		sta $28				sta 	DCursor
.01f055	aa		tax				tax
.01f056	a9 66 00	lda #$0066			lda 	#HWCursorCharacter
.01f059	e2 20		sep #$20			sep 	#$20
.01f05b	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.01f05f	c2 20		rep #$20			rep 	#$20
.01f061	7a		ply				ply
.01f062	fa		plx				plx
.01f063	68		pla				pla
.01f064	60		rts				rts
.01f065					HWNewLine:
.01f065	48		pha				pha
.01f066	da		phx				phx
.01f067	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01f06a					HWMoveCursor:
.01f06a	a9 20 00	lda #$0020			lda 	#32
.01f06d	20 25 f0	jsr $01f025			jsr 	HWPrintChar
.01f070	8a		txa				txa
.01f071	25 28		and $28				and 	DCursor
.01f073	d0 f5		bne $01f06a			bne 	HWMoveCursor
.01f075	fa		plx				plx
.01f076	68		pla				pla
.01f077	60		rts				rts
.01f078	48		pha		HWTab:	pha
.01f079	da		phx				phx
.01f07a	a2 07 00	ldx #$0007			ldx 	#7
.01f07d	80 eb		bra $01f06a			bra 	HWMoveCursor
.01f07f					HWCheckBreak:
.01f07f	af 00 80 0f	lda $0f8000			lda 	$F8000
.01f083	60		rts				rts
.01f084					HWGetKey:
.01f084	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f088	d0 fa		bne $01f084			bne 	HWGetKey
.01f08a					_HWGKWait:
.01f08a	af 10 80 0f	lda $0f8010			lda 	$F8010
.01f08e	f0 fa		beq $01f08a			beq 	_HWGKWait
.01f090	ea		nop				nop
.01f091	60		rts				rts

;******  Return to file: ../source/start.asm

>020000	34 32 20 20 34 30 39 36		TTest:	.text '42  40960 "quoTed" "" "x"  >= * right$( list print abcd$(',0
>020008	30 20 22 71 75 6f 54 65 64 22 20 22 22 20 22 78
>020018	22 20 20 3e 3d 20 2a 20 72 69 67 68 74 24 28 20
>020028	6c 69 73 74 20 70 72 69 6e 74 20 61 62 63 64 24
>020038	28 00
.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	74 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 26 00 01 00 01 c0 06 22
>024108	63 40 25 32 18 c0 06 22 2a 40 25 32 19 c0 06 22
>024118	26 40 25 32 3e 3e 01 40 23 32 05 40 00 00 1e 00
>024128	02 00 35 3e 0a 00 06 42 65 66 6f 72 65 00 23 32
>024138	01 c0 23 32 18 c0 23 32 19 c0 00 00 3e 00 03 00
>024148	3f 3e 02 10 00 40 0a 24 0f 40 0c 26 00 50 25 32
>024158	2b 3e 26 00 23 54 68 69 73 20 69 73 20 69 6e 20
>024168	74 68 65 20 73 74 61 72 74 2e 61 73 6d 20 72 6f
>024178	75 74 69 6e 65 20 3a 29 00 00 1c 00 04 00 35 3e
>024188	08 00 05 41 66 74 65 72 23 32 01 c0 23 32 18 c0
>024198	23 32 19 c0 00 00 14 00 09 00 3e 3e 64 40 23 32
>0241a8	85 40 25 32 36 3e aa 40 00 00 12 00 0b 00 43 3c
>0241b8	09 c0 06 22 01 40 29 38 0f 67 00 00 0a 00 0d 00
>0241c8	48 3a 09 c0 00 00 0c 00 14 00 18 c0 06 22 00 40
>0241d8	00 00 08 00 32 00 40 3c 00 00 08 00 3c 00 35 3e
>0241e8	00 00 0e 00 46 00 45 3a 18 c0 06 22 00 40 00 00
>0241f8	12 00 50 00 43 3c 09 c0 06 22 01 40 29 38 05 40
>024208	00 00 0c 00 5a 00 01 c0 06 22 09 c0 00 00 0a 00
>024218	5f 00 48 3a 09 c0 00 00 08 00 61 00 40 3c 00 00
>024228	16 00 64 00 42 3c 26 32 18 c0 01 20 01 40 27 32
>024238	06 22 00 40 00 00 16 00 6e 00 35 3e 18 c0 23 32
>024248	08 00 04 45 76 65 6e 00 23 32 00 00 0e 00 70 00
>024258	42 3c 18 c0 05 22 05 40 00 00 0e 00 76 00 35 3e
>024268	06 00 02 3e 35 00 00 00 08 00 77 00 3a 3e 00 00
>024278	0e 00 78 00 35 3e 06 00 03 3c 3d 35 00 00 08 00
>024288	81 00 47 3a 00 00 22 00 82 00 42 3c 18 c0 06 22
>024298	08 40 46 3a 35 3e 10 00 0c 49 74 27 73 20 65 69
>0242a8	67 68 74 20 21 00 00 00 08 00 85 00 3a 3e 00 00
>0242b8	14 00 86 00 35 3e 18 c0 23 32 06 00 03 6f 64 64
>0242c8	23 32 00 00 0c 00 87 00 19 c0 06 22 18 c0 00 00
>0242d8	30 00 88 00 40 3c 25 32 35 3e 19 c0 24 32 04 00
>0242e8	01 20 24 32 25 32 19 c0 06 22 19 c0 0b 24 01 40
>0242f8	25 32 45 3a 19 c0 06 22 00 40 25 32 35 3e 00 00
>024308	08 00 8c 00 47 3a 00 00 10 00 96 00 18 c0 06 22
>024318	18 c0 0a 24 01 40 00 00 0e 00 a0 00 45 3a 18 c0
>024328	05 22 0a 40 00 00 12 00 aa 00 43 3c 09 c0 06 22
>024338	00 40 29 38 ff 40 00 00 1c 00 c8 00 3b 3e 1e 10
>024348	00 40 0a 24 09 c0 0a 24 40 40 0c 26 18 40 23 32
>024358	09 c0 00 00 0a 00 d2 00 48 3a 09 c0 00 00 08 00
>024368	ac 2b 30 3e 00 00 00 00 ee ee ee ee 00 00 00 00
>024378	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1991 times (31856 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
