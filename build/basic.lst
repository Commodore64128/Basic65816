
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Sat Jun 15 07:24:20 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 00 fc	ldx #$fc00			ldx 	#$FC00 								; 6502 stack at $FFE0
.0007	9a		txs				txs
.0008	a9 00 fe	lda #$fe00			lda 	#$FE00 								; set DP to $FE00
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c 17 14 01	jmp $011417			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0100					Block_ProgramStart = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	77 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	67 06					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	77 06					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	87 06					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	cb 06					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	32 07					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	97 06					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	14 07					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	f6 06					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	b1 06					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	b1 05					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	32 06					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	3e 08					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	bb 07					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	32 08					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	43 06					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	55 06					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	cc 08					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	ac 08					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	88 08					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	72 08					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	92 0a					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	b2 0b					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	06 09					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	3e 09					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	72 09					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	46 0a					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	60 0a					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	77 0a					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	b2 0c					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	70 0c					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	ae 09					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	77 04					.word IllegalToken             & $FFFF ; token $3020 "mid$("
>010042	d7 09					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	77 04					.word IllegalToken             & $FFFF ; token $3222 ","
>010046	77 04					.word IllegalToken             & $FFFF ; token $3223 ";"
>010048	77 04					.word IllegalToken             & $FFFF ; token $3224 ":"
>01004a	77 04					.word IllegalToken             & $FFFF ; token $3225 "("
>01004c	77 04					.word IllegalToken             & $FFFF ; token $3226 ")"
>01004e	77 04					.word IllegalToken             & $FFFF ; token $3227 "'"
>010050	77 04					.word IllegalToken             & $FFFF ; token $3228 "to"
>010052	77 04					.word IllegalToken             & $FFFF ; token $3229 "step"
>010054	05 14					.word Function_REM             & $FFFF ; token $3e2a "rem"
>010056	f4 0c					.word Function_Let             & $FFFF ; token $3e2b "let"
>010058	e6 13					.word Function_ASSERT          & $FFFF ; token $3e2c "assert"
>01005a	e3 11					.word Function_END             & $FFFF ; token $3e2d "end"
>01005c	e5 11					.word Function_RUN             & $FFFF ; token $3e2e "run"
>01005e	42 12					.word Function_STOP            & $FFFF ; token $3e2f "stop"
>010060	3e 12					.word Function_CLEAR           & $FFFF ; token $3e30 "clear"
>010062	9d 12					.word Function_Dim             & $FFFF ; token $3e31 "dim"
>010064	11 13					.word Function_COLLECT         & $FFFF ; token $3e32 "collect"
>010066	01 14					.word Function_CLS             & $FFFF ; token $3e33 "cls"
>010068	6f 0d					.word Function_PRINT           & $FFFF ; token $3e34 "print"
>01006a	71 10					.word Function_GOTO            & $FFFF ; token $3e35 "goto"
>01006c	d0 10					.word Function_GOSUB           & $FFFF ; token $3e36 "gosub"
>01006e	ec 10					.word Function_RETURN          & $FFFF ; token $3e37 "return"
>010070	2e 10					.word Function_ONGOTO          & $FFFF ; token $3e38 "on"
>010072	22 0e					.word Handler_ELSE             & $FFFF ; token $3e39 "else"
>010074	a0 13					.word Command_POKE             & $FFFF ; token $3e3a "poke"
>010076	b8 13					.word Command_DOKE             & $FFFF ; token $3e3b "doke"
>010078	cc 13					.word Command_LOKE             & $FFFF ; token $3e3c "loke"
>01007a	1e 11					.word Function_REPEAT          & $FFFF ; token $3c3d "repeat"
>01007c	7c 11					.word Function_WHILE           & $FFFF ; token $3c3e "while"
>01007e	bb 0d					.word Function_IF              & $FFFF ; token $3c3f "if"
>010080	f7 0e					.word Command_FOR              & $FFFF ; token $3c40 "for"
>010082	b3 11					.word Function_WEND            & $FFFF ; token $3a41 "wend"
>010084	35 11					.word Function_UNTIL           & $FFFF ; token $3a42 "until"
>010086	77 04					.word IllegalToken             & $FFFF ; token $3a43 "then"
>010088	50 0e					.word Handler_ENDIF            & $FFFF ; token $3a44 "endif"
>01008a	72 0f					.word Command_NEXT             & $FFFF ; token $3a45 "next"
.01008c					TokenText:
>01008c	02 26					 .text $02,"&"        ; token $2001
>01008e	02 7c					 .text $02,"|"        ; token $2002
>010090	02 5e					 .text $02,"^"        ; token $2003
>010092	12 3c					 .text $12,"<"        ; token $2204
>010094	12 3e					 .text $12,">"        ; token $2205
>010096	12 3d					 .text $12,"="        ; token $2206
>010098	13 3c 3d				 .text $13,"<="       ; token $2207
>01009b	13 3e 3d				 .text $13,">="       ; token $2208
>01009e	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a1	22 2b					 .text $22,"+"        ; token $240a
>0100a3	22 2d					 .text $22,"-"        ; token $240b
>0100a5	32 2a					 .text $32,"*"        ; token $260c
>0100a7	32 2f					 .text $32,"/"        ; token $260d
>0100a9	32 25					 .text $32,"%"        ; token $260e
>0100ab	33 3e 3e				 .text $33,">>"       ; token $260f
>0100ae	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b1	85 72 6e 64 28				 .text $85,"rnd("     ; token $3011
>0100b6	85 73 67 6e 28				 .text $85,"sgn("     ; token $3012
>0100bb	85 61 62 73 28				 .text $85,"abs("     ; token $3013
>0100c0	85 6c 65 6e 28				 .text $85,"len("     ; token $3014
>0100c5	85 76 61 6c 28				 .text $85,"val("     ; token $3015
>0100ca	86 73 74 72 24 28			 .text $86,"str$("    ; token $3016
>0100d0	86 63 68 72 24 28			 .text $86,"chr$("    ; token $3017
>0100d6	85 61 73 63 28				 .text $85,"asc("     ; token $3018
>0100db	85 73 70 63 28				 .text $85,"spc("     ; token $3019
>0100e0	86 70 65 65 6b 28			 .text $86,"peek("    ; token $301a
>0100e6	86 64 65 65 6b 28			 .text $86,"deek("    ; token $301b
>0100ec	86 6c 65 65 6b 28			 .text $86,"leek("    ; token $301c
>0100f2	88 6c 6f 77 65 72 24 28			 .text $88,"lower$("  ; token $301d
>0100fa	88 75 70 70 65 72 24 28			 .text $88,"upper$("  ; token $301e
>010102	87 6c 65 66 74 24 28			 .text $87,"left$("   ; token $301f
>010109	86 6d 69 64 24 28			 .text $86,"mid$("    ; token $3020
>01010f	88 72 69 67 68 74 24 28			 .text $88,"right$("  ; token $3021
>010117	92 2c					 .text $92,","        ; token $3222
>010119	92 3b					 .text $92,";"        ; token $3223
>01011b	92 3a					 .text $92,":"        ; token $3224
>01011d	92 28					 .text $92,"("        ; token $3225
>01011f	92 29					 .text $92,")"        ; token $3226
>010121	92 27					 .text $92,"'"        ; token $3227
>010123	93 74 6f				 .text $93,"to"       ; token $3228
>010126	95 73 74 65 70				 .text $95,"step"     ; token $3229
>01012b	f4 72 65 6d				 .text $f4,"rem"      ; token $3e2a
>01012f	f4 6c 65 74				 .text $f4,"let"      ; token $3e2b
>010133	f7 61 73 73 65 72 74			 .text $f7,"assert"   ; token $3e2c
>01013a	f4 65 6e 64				 .text $f4,"end"      ; token $3e2d
>01013e	f4 72 75 6e				 .text $f4,"run"      ; token $3e2e
>010142	f5 73 74 6f 70				 .text $f5,"stop"     ; token $3e2f
>010147	f6 63 6c 65 61 72			 .text $f6,"clear"    ; token $3e30
>01014d	f4 64 69 6d				 .text $f4,"dim"      ; token $3e31
>010151	f8 63 6f 6c 6c 65 63 74			 .text $f8,"collect"  ; token $3e32
>010159	f4 63 6c 73				 .text $f4,"cls"      ; token $3e33
>01015d	f6 70 72 69 6e 74			 .text $f6,"print"    ; token $3e34
>010163	f5 67 6f 74 6f				 .text $f5,"goto"     ; token $3e35
>010168	f6 67 6f 73 75 62			 .text $f6,"gosub"    ; token $3e36
>01016e	f7 72 65 74 75 72 6e			 .text $f7,"return"   ; token $3e37
>010175	f3 6f 6e				 .text $f3,"on"       ; token $3e38
>010178	f5 65 6c 73 65				 .text $f5,"else"     ; token $3e39
>01017d	f5 70 6f 6b 65				 .text $f5,"poke"     ; token $3e3a
>010182	f5 64 6f 6b 65				 .text $f5,"doke"     ; token $3e3b
>010187	f5 6c 6f 6b 65				 .text $f5,"loke"     ; token $3e3c
>01018c	e7 72 65 70 65 61 74			 .text $e7,"repeat"   ; token $3c3d
>010193	e6 77 68 69 6c 65			 .text $e6,"while"    ; token $3c3e
>010199	e3 69 66				 .text $e3,"if"       ; token $3c3f
>01019c	e4 66 6f 72				 .text $e4,"for"      ; token $3c40
>0101a0	d5 77 65 6e 64				 .text $d5,"wend"     ; token $3a41
>0101a5	d6 75 6e 74 69 6c			 .text $d6,"until"    ; token $3a42
>0101ab	d5 74 68 65 6e				 .text $d5,"then"     ; token $3a43
>0101b0	d6 65 6e 64 69 66			 .text $d6,"endif"    ; token $3a44
>0101b6	d5 6e 65 78 74				 .text $d5,"next"     ; token $3a45
>0101bb	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3222					commaTokenID                     = $3222
=$3223					semicolonTokenID                 = $3223
=$3224					colonTokenID                     = $3224
=$3225					lparenTokenID                    = $3225
=$3226					rparenTokenID                    = $3226
=$3227					squoteTokenID                    = $3227
=$3228					toTokenID                        = $3228
=$3229					stepTokenID                      = $3229
=$3e2a					remTokenID                       = $3e2a
=$3e2b					letTokenID                       = $3e2b
=$3e2c					assertTokenID                    = $3e2c
=$3e2d					endTokenID                       = $3e2d
=$3e2e					runTokenID                       = $3e2e
=$3e2f					stopTokenID                      = $3e2f
=$3e30					clearTokenID                     = $3e30
=$3e31					dimTokenID                       = $3e31
=$3e32					collectTokenID                   = $3e32
=$3e33					clsTokenID                       = $3e33
=$3e34					printTokenID                     = $3e34
=$3e35					gotoTokenID                      = $3e35
=$3e36					gosubTokenID                     = $3e36
=$3e37					returnTokenID                    = $3e37
=$3e38					onTokenID                        = $3e38
=$3e39					elseTokenID                      = $3e39
=$3e3a					pokeTokenID                      = $3e3a
=$3e3b					dokeTokenID                      = $3e3b
=$3e3c					lokeTokenID                      = $3e3c
=$3c3d					repeatTokenID                    = $3c3d
=$3c3e					whileTokenID                     = $3c3e
=$3c3f					ifTokenID                        = $3c3f
=$3c40					forTokenID                       = $3c40
=$3a41					wendTokenID                      = $3a41
=$3a42					untilTokenID                     = $3a42
=$3a43					thenTokenID                      = $3a43
=$3a44					endifTokenID                     = $3a44
=$3a45					nextTokenID                      = $3a45

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$80					BASStackSize = $80 							; maximum size of BASIC stack.
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=8					EXSStackElements = 8 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = EXSStackElements*2  			; High word
=32					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101bc					Evaluate:
.0101bc	a2 00 01	ldx #$0100			ldx		#EXSBase 					; reset the stack
.0101bf	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101c2					EvaluateLevel:
.0101c2	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101c5	95 20		sta $20,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101c7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101c9	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101cc	b0 79		bcs $010247			bcs 	_ELVariable
.0101ce	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101d1	b0 16		bcs $0101e9			bcs 	_ELConstant
.0101d3	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101d6	90 7f		bcc $010257			bcc 	_ELStringConstant
.0101d8	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101db	90 03		bcc $0101e0			bcc 	_ELConstantShift
.0101dd	82 94 00	brl $010274			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101e0					_ELConstantShift:
.0101e0	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101e3	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101e5	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101e7	e6 06		inc $06				inc 	DCodePtr
.0101e9					_ELConstant:
.0101e9	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.0101eb	38		sec				sec  								; shift it in the range 0-32767
.0101ec	e9 00 40	sbc #$4000			sbc 	#$4000
.0101ef	0a		asl a				asl 	a 							; shift it left, losing bit 15
.0101f0	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.0101f2	6a		ror a				ror 	a 							; rotate that into the constant value
.0101f3	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.0101f5	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.0101f7	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101f9	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.0101fb	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.0101fd	e6 06		inc $06				inc 	DCodePtr
.0101ff					_ELGotAtom:
.0101ff	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010201	a8		tay				tay 								; save in Y
.010202	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.010205	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.010208	d0 35		bne $01023f			bne 	_ELExit
.01020a	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; get precedence/type
.01020c	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01020f	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010211	98		tya				tya 								; get the keyword token back
.010212	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010215	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.010217	90 26		bcc $01023f			bcc 	_ELExit 					; precedence too low, then exit.
.010219	5a		phy				phy 								; save the binary operator on the stack
.01021a	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.01021c	e6 06		inc $06				inc 	DCodePtr
.01021e	18		clc				clc 								; try the next level up
.01021f	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010222	e8		inx				inx 								; calculate the RHS at the next stack level.
.010223	e8		inx				inx
.010224	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.010227	ca		dex				dex
.010228	ca		dex				dex
.010229	7a		ply				ply 								; get operator token back into Y
.01022a					_ELExecuteY:
.01022a	98		tya				tya
.01022b	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.01022e	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.01022f	9b		txy				txy 								; save X in Y
.010230	aa		tax				tax 								; double keyword ID in X
.010231	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.010235	bb		tyx				tyx 								; restore X.
.010236	8f 3b 02 01	sta $01023b			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.01023a					_ELCallRoutine:
.01023a	20 3a 02	jsr $01023a			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.01023d	80 c0		bra $0101ff			bra 	_ELGotAtom 					; go round operator level again.
.01023f	b5 20		lda $20,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010241	0a		asl a				asl 	a
.010242	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.010244	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010246	60		rts				rts
.010247					_ELVariable:
.010247	16 20		asl $20,x			asl 	EXSPrecType+0,x 			; shift it left
.010249	20 08 03	jsr $010308			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.01024c	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.01024e	94 10		sty $10,x			sty 	EXSValueH+0,x
.010250	76 20		ror $20,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010252	80 ab		bra $0101ff			bra 	_ELGotAtom
.010254					_ELSyntax
.010254	82 31 02	brl $010488			brl 	SyntaxError
.010257					_ELStringConstant:
.010257	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.01025a	f0 f8		beq $010254			beq 	_ELSyntax
.01025c	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.01025e	1a		inc a				inc 	a
.01025f	1a		inc a				inc 	a
.010260	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010262	74 10		stz $10,x			stz 	EXSValueH+0,x 				; high word is zero.
.010264	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.010266	18		clc				clc 								; add to string constant.
.010267	65 06		adc $06				adc 	DCodePtr
.010269	85 06		sta $06				sta 	DCodePtr
.01026b	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; set type to string
.01026d	09 00 80	ora #$8000			ora 	#$8000
.010270	95 20		sta $20,x			sta 	EXSPrecType+0,x
.010272	80 8b		bra $0101ff			bra 	_ELGotAtom
.010274					_ELUnaryKeyword:
.010274	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.010276	a8		tay				tay 								; put the token in Y.
.010277	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010279	e6 06		inc $06				inc 	DCodePtr
.01027b	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.01027e	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010281	f0 a7		beq $01022a			beq 	_ELExecuteY					; go back and execute it
.010283	c0 25 32	cpy #$3225			cpy 	#lparenTokenID 				; is it an open bracket ?
.010286	d0 11		bne $010299			bne 	_ELUnaryOperator 			; it not, try unary operators.
.010288	20 bf 02	jsr $0102bf			jsr 	EvaluateNext 				; evaluate the expression
.01028b	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; consume the right bracket.
.01028e					_ELCopy:
.01028e	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.010290	95 00		sta $00,x			sta 	EXSValueL+0,x
.010292	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010294	95 10		sta $10,x			sta 	EXSValueH+0,x
.010296	82 66 ff	brl $0101ff			brl 	_ELGotAtom 					; and continue.
.010299					_ELUnaryOperator:
.010299	5a		phy				phy 								; save the operator on the stack.
.01029a	e8		inx				inx 								; this is like evaluate next
.01029b	e8		inx				inx
.01029c	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.01029f	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.0102a2	ca		dex				dex 								; unwind the stack.
.0102a3	ca		dex				dex
.0102a4	68		pla				pla 								; restore the unary operator.
.0102a5	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102a8	f0 03		beq $0102ad			beq 	_ELMinus
.0102aa	4c 88 04	jmp $010488			jmp 	SyntaxError
.0102ad					_ELMinus:
.0102ad	38		sec				sec 								; do the negation calculation.
.0102ae	a9 00 00	lda #$0000			lda 	#0
.0102b1	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102b3	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102b5	a9 00 00	lda #$0000			lda 	#0
.0102b8	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0102ba	95 10		sta $10,x			sta 	EXSValueH+0,x
.0102bc	82 40 ff	brl $0101ff			brl 	_ELGotAtom					; and continue.
.0102bf					EvaluateNext:
.0102bf	e8		inx				inx
.0102c0	e8		inx				inx
.0102c1	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102c4	20 c2 01	jsr $0101c2			jsr 	EvaluateLevel
.0102c7	ca		dex				dex
.0102c8	ca		dex				dex
.0102c9	60		rts				rts
.0102ca					EvaluateInteger:
.0102ca	20 bc 01	jsr $0101bc			jsr 	Evaluate
.0102cd	b0 01		bcs $0102d0			bcs 	EIType
.0102cf	60		rts				rts
.0102d0					EIType:
.0102d0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0102d3	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102db	78 70 65 63 74 65 64 00
.0102e3					EvaluateNextInteger:
.0102e3	20 bf 02	jsr $0102bf			jsr 	EvaluateNext
.0102e6	b0 e8		bcs $0102d0			bcs 	EIType
.0102e8	60		rts				rts
.0102e9					EvaluateString:
.0102e9	20 bc 01	jsr $0101bc			jsr 	Evaluate
.0102ec	90 01		bcc $0102ef			bcc 	ESType
.0102ee	60		rts				rts
.0102ef					ESType:
.0102ef	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0102f2	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>0102fa	78 70 65 63 74 65 64 00
.010302					EvaluateNextString:
.010302	20 bf 02	jsr $0102bf			jsr 	EvaluateNext
.010305	90 e8		bcc $0102ef			bcc 	ESType
.010307	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.010308					VariableAccessExpression:
.010308	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.01030a	48		pha				pha
.01030b	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find the variables
.01030e	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010310	90 23		bcc $010335			bcc 	_VANError 					; not found, so report an error.
.010312	68		pla				pla 								; get and save that first token
.010313	48		pha				pha 								; we use it for typing.
.010314	a8		tay				tay 								; put first token in Y.
.010315	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.010318	f0 07		beq $010321			beq 	_VANNotArray
.01031a	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.01031c	20 c0 03	jsr $0103c0			jsr 	VariableSubscript			; index calculation
.01031f	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010321					_VANNotArray:
.010321	68		pla				pla 								; get the token back.
.010322	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.010325	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.010328	38		sec				sec 								; set up return string.
.010329	f0 06		beq $010331			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.01032b	18		clc				clc 								; returning a number, read high data word
.01032c	a0 02 00	ldy #$0002			ldy 	#2
.01032f	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010331					_VANLoadLower:
.010331	a8		tay				tay 								; put A into Y (this is the high byte)
.010332	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.010334	60		rts				rts
.010335					_VANError:
.010335	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010338	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010340	20 75 6e 6b 6e 6f 77 6e 00
.010349					VariableFind:
.010349	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.01034b	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.01034e	90 5c		bcc $0103ac			bcc 	_VFError
.010350	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.010353	b0 11		bcs $010366			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.010355	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.010358	3a		dec a				dec 	a 							; now 0-25
.010359	0a		asl a				asl 	a 							; x 4 and clear carry
.01035a	0a		asl a				asl 	a
.01035b	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.01035e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010360	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010362	e6 06		inc $06				inc 	DCodePtr
.010364	38		sec				sec 								; return with carry set.
.010365	60		rts				rts
.010366					_VFSlowVariable:
.010366	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.010368	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.01036b	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.01036c	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.01036d	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010370	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010372	85 08		sta $08				sta 	DTemp1
.010374	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.010376	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010379	0a		asl a				asl 	a 							; double (word entries) and clear carry
.01037a	65 08		adc $08				adc 	DTemp1
.01037c	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.01037e	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010380					_VFNext:
.010380	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010382	f0 26		beq $0103aa			beq 	_VFFail 					; if zero, then it's the end of the list.
.010384	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.010386	a8		tay				tay 								; read the address of the name at $0002,y
.010387	b9 02 00	lda $0002,y			lda 	$0002,y
.01038a	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01038c	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.01038f					_VFCompare:
.01038f	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.010391	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.010393	d0 eb		bne $010380			bne 	_VFNext 					; if not, go to the next one.
.010395	c8		iny				iny 								; advance token pointer
.010396	c8		iny				iny
.010397	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.01039a	d0 f3		bne $01038f			bne 	_VFCompare
.01039c	98		tya				tya 								; this is the length of the word.
.01039d	18		clc				clc 								; so we add it to the code pointer
.01039e	65 06		adc $06				adc 	DCodePtr
.0103a0	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103a2	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103a4	18		clc				clc 								; four on is the actual data
.0103a5	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103a8	38		sec				sec 								; return with CS indicating success
.0103a9	60		rts				rts
.0103aa					_VFFail:
.0103aa	18		clc				clc
.0103ab	60		rts				rts
.0103ac					_VFError:
.0103ac	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0103af	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103b7	76 61 72 69 61 62 6c 65 00
.0103c0					VariableSubscript:
.0103c0	48		pha				pha		 							; save variable address on stack.
.0103c1	20 e3 02	jsr $0102e3			jsr		EvaluateNextInteger 		; get the subscript
.0103c4	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; skip right bracket.
.0103c7	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103ca	d0 10		bne $0103dc			bne 	_VANSubscript
.0103cc	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103ce	f0 02		beq $0103d2			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103d0	b0 0a		bcs $0103dc			bcs 	_VANSubscript
.0103d2					_VANSubOkay:
.0103d2	0a		asl a				asl 	a 							; double lsword
.0103d3	0a		asl a				asl 	a 							; and again, also clears carry.
.0103d4	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103d6	68		pla				pla 								; restore DVariablePtr
.0103d7	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103d8	1a		inc a				inc 	a
.0103d9	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103db	60		rts				rts
.0103dc					_VANSubscript:
.0103dc	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0103df	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103e7	79 20 53 75 62 73 63 72 69 70 74 00
.0103f3					VariableCreate:
.0103f3	48		pha				pha 								; save count.
.0103f4	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.0103f7	29 00 20	and #$2000			and 	#IDTypeMask
.0103fa	f0 06		beq $010402			beq 	_VCIsInteger 				; if this is zero ... use zero.
.0103fc	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.0103ff	18		clc				clc 								; which is guaranteed by have a 0 length.
.010400	65 02		adc $02				adc 	DBaseAddress
.010402					_VCIsInteger:
.010402	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.010404	68		pla				pla 								; restore count
.010405	48		pha				pha
.010406	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.010407	0a		asl a				asl 	a 							; 2 x # items.
.010408	0a		asl a				asl 	a 							; 4 x # items.
.010409					_VCNotSingle:
.010409	85 08		sta $08				sta 	DTemp1 						; save temporarily
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.01040e	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010411	f0 04		beq $010417			beq 	_VCNotArray
.010413	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.010415	e6 08		inc $08				inc 	DTemp1
.010417					_VCNotArray:
.010417	5a		phy				phy 								; save address of first token on stack.
.010418	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.01041b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01041d	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.01041f	18		clc				clc 								; add 4 for link and name words
.010420	69 04 00	adc #$0004			adc 	#4
.010423	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.010425	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.010427	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010429					_VCErase:
.010429	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.01042b	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.01042e	c8		iny				iny
.01042f	c8		iny				iny
.010430	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010432	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.010434	d0 f3		bne $010429			bne 	_VCErase
.010436	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.010438	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.01043a	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.01043d	68		pla				pla 								; restore the token address
.01043e	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010441	68		pla				pla 								; restore count and store.
.010442	99 04 00	sta $0004,y			sta 	$0004,y
.010445	98		tya				tya 								; update the head link
.010446	92 20		sta ($20)			sta 	(DHashTablePtr)
.010448	18		clc				clc 								; advance pointer to the data bit.
.010449	69 04 00	adc #$0004			adc 	#4
.01044c	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility.asm

.01044d					ErrorHandler:
.01044d	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.01044f	fa		plx				plx 								; address of error message -1
.010450	e8		inx				inx 								; error message.
.010451	20 f4 04	jsr $0104f4			jsr 	PrintROMMessage 			; print message in ROM
.010454	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.010456	f0 15		beq $01046d			beq 	_EHEndMessage
.010458	a2 72 04	ldx #$0472			ldx 	#_EHAt & $FFFF 				; print " at "
.01045b	20 f4 04	jsr $0104f4			jsr 	PrintROMMessage
.01045e	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010460	a0 00 00	ldy #$0000			ldy 	#0
.010463	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.010466	20 cd 0b	jsr $010bcd			jsr 	ConvertToString 			; convert and print it.
.010469	a8		tay				tay
.01046a	20 08 05	jsr $010508			jsr 	PrintBASICString
.01046d					_EHEndMessage:
.01046d	20 69 14	jsr $011469			jsr 	HWNewLine
.010470	80 fe		bra $010470	_EH1:	bra 	_EH1
>010472	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.010477					IllegalToken:
.010477	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01047a	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010482	54 6f 6b 65 6e 00
.010488					SyntaxError:
.010488	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01048b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>010493	72 72 6f 72 00
.010498					ExpectToken:
.010498	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.01049a	d0 05		bne $0104a1			bne 	_CTKError					; error if not
.01049c	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.01049e	e6 06		inc $06				inc 	DCodePtr
.0104a0	60		rts				rts
.0104a1					_CTKError:
.0104a1	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0104a4	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104ac	74 6f 6b 65 6e 00
.0104b2					ExpectRightBracket:
.0104b2	48		pha				pha
.0104b3	a9 26 32	lda #$3226			lda 	#rparenTokenID
.0104b6	20 98 04	jsr $010498			jsr 	ExpectToken
.0104b9	68		pla				pla
.0104ba	60		rts				rts
.0104bb					ExpectComma:
.0104bb	48		pha				pha
.0104bc	a9 22 32	lda #$3222			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104bf	20 98 04	jsr $010498			jsr 	ExpectToken
.0104c2	68		pla				pla
.0104c3	60		rts				rts
.0104c4					CheckBothNumeric:
.0104c4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104c6	15 22		ora $22,x			ora 	EXSPrecType+2,x
.0104c8	30 01		bmi $0104cb			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104ca	60		rts				rts
.0104cb					_CBNFail:
.0104cb	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0104ce	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104d6	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104e4					ResetTypeInteger:
.0104e4	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104e6	29 ff 7f	and #$7fff			and 	#$7FFF
.0104e9	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104eb	60		rts				rts
.0104ec					ResetTypeString:
.0104ec	b5 20		lda $20,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104ee	09 00 80	ora #$8000			ora 	#$8000
.0104f1	95 20		sta $20,x			sta 	EXSPrecType+0,x
.0104f3	60		rts				rts
.0104f4					PrintROMMessage:
.0104f4	48		pha				pha
.0104f5	da		phx				phx
.0104f6					_PRMLoop:
.0104f6	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.0104fa	29 ff 00	and #$00ff			and 	#$00FF
.0104fd	f0 06		beq $010505			beq 	_PRMExit
.0104ff	20 47 14	jsr $011447			jsr 	HWPrintChar
.010502	e8		inx				inx
.010503	80 f1		bra $0104f6			bra 	_PRMLoop
.010505					_PRMExit:
.010505	fa		plx				plx
.010506	68		pla				pla
.010507	60		rts				rts
.010508					PrintBASICString:
.010508	48		pha				pha
.010509	da		phx				phx
.01050a	5a		phy				phy
.01050b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.01050e	29 ff 00	and #$00ff			and 	#$00FF
.010511	f0 0b		beq $01051e			beq 	_PBSExit 					; null string
.010513	aa		tax				tax
.010514					_PBSLoop:
.010514	c8		iny				iny
.010515	b9 00 00	lda $0000,y			lda 	$0000,y
.010518	20 47 14	jsr $011447			jsr 	HWPrintChar
.01051b	ca		dex				dex
.01051c	d0 f6		bne $010514			bne 	_PBSLoop
.01051e					_PBSExit:
.01051e	7a		ply				ply
.01051f	fa		plx				plx
.010520	68		pla				pla
.010521	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/stringutils.asm

.010522					StringTempAllocate:
.010522	48		pha				pha
.010523	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010525	d0 09		bne $010530			bne 	_STANoReset
.010527	5a		phy				phy 								; reset the temp string pointer.
.010528	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01052b	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01052d	85 16		sta $16				sta 	DTempStringPointer
.01052f	7a		ply				ply
.010530					_STANoReset:
.010530	68		pla				pla 								; get length.
.010531	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010534	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010537	18		clc				clc 								; this adds one, for the length.
.010538	65 16		adc $16				adc 	DTempStringPointer
.01053a	85 16		sta $16				sta 	DTempStringPointer
.01053c	48		pha				pha 								; save start address
.01053d	a9 00 00	lda #$0000			lda 	#$0000
.010540	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010542	92 16		sta ($16)			sta		(DTempStringPointer)
.010544	c2 20		rep #$20			rep 	#$20
.010546	68		pla				pla 								; restore start address
.010547	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010549	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01054b	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01054d	60		rts				rts
.01054e					StringWriteCharacter:
.01054e	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010550	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010552	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010554	1a		inc a				inc 	a
.010555	92 18		sta ($18)			sta 	(DStartTempString)
.010557	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010559	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01055b	60		rts				rts
.01055c					StringCreateCopy:
.01055c	a8		tay				tay 								; put pointer to string in Y
.01055d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010560	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010563	f0 17		beq $01057c			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010565	da		phx				phx 								; save X and put the character count in X
.010566	aa		tax				tax
.010567					_SCCCopy:
.010567	c8		iny				iny 								; advance and read (first time skips length)
.010568	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01056a	b9 00 00	lda $0000,y			lda 	$0000,y
.01056d	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.01056f	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010571	1a		inc a				inc 	a
.010572	92 18		sta ($18)			sta 	(DStartTempString)
.010574	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010576	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.010578	ca		dex				dex 								; do X times
.010579	d0 ec		bne $010567			bne 	_SCCCopy
.01057b	fa		plx				plx
.01057c					_SCCExit:
.01057c	60		rts				rts
.01057d					StringMakeConcrete:
.01057d	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010580	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010582	90 0f		bcc $010593			bcc 	_SMCExit
.010584	85 08		sta $08				sta 	DTemp1 						; source
.010586	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.010588	29 ff 00	and #$00ff			and 	#$00FF
.01058b	d0 07		bne $010594			bne 	_SMCNonZero 				; if not "" skip.
.01058d	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.010590	18		clc				clc 								; this reference is used for all empty strings.
.010591	65 02		adc $02				adc 	DBaseAddress
.010593					_SMCExit:
.010593	60		rts				rts
.010594					_SMCNonZero:
.010594	48		pha				pha 								; save on stack.
.010595	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.010598	18		clc				clc
.010599	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.01059c	71 02		adc ($02),y			adc 	(DBaseAddress),y
.01059e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105a0	85 0c		sta $0c				sta 	DTemp2 						; target
.0105a2	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105a3	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105a5					_SMCLoop:
.0105a5	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105a7	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105a9	88		dey				dey 								; Y+1 times.
.0105aa	10 f9		bpl $0105a5			bpl 	_SMCLoop
.0105ac	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105ae	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105b0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.0105b1					Binary_Add:
.0105b1	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; check both same type
.0105b3	55 22		eor $22,x		eor 	EXSPrecType+2,x
.0105b5	30 12		bmi $0105c9		bmi 	_BATypeError
.0105b7	b5 20		lda $20,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0105b9	30 3f		bmi $0105fa		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0105bb	18		clc			clc 										; add the results
.0105bc	b5 00		lda $00,x		lda		EXSValueL+0,x
.0105be	75 02		adc $02,x		adc 	EXSValueL+2,x
.0105c0	95 00		sta $00,x		sta 	EXSValueL+0,x
.0105c2	b5 10		lda $10,x		lda		EXSValueH+0,x
.0105c4	75 12		adc $12,x		adc 	EXSValueH+2,x
.0105c6	95 10		sta $10,x		sta 	EXSValueH+0,x
.0105c8	60		rts			rts
.0105c9					_BATypeError:
.0105c9	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0105cc	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0105d4	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0105e4	65 73 00
.0105e7					_BALengthError:
.0105e7	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0105ea	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0105f2	6f 6f 20 6c 6f 6e 67 00
.0105fa					_BAConcatenateString:
.0105fa	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0105fc	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0105fe	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010600	85 0c		sta $0c			sta 	DTemp2
.010602	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.010604	18		clc			clc 										; work out the total length
.010605	b2 08		lda ($08)		lda 	(DTemp1)
.010607	72 0c		adc ($0c)		adc 	(DTemp2)
.010609	b0 14		bcs $01061f		bcs 	_BAConcatLengthError 				; string is too long.
.01060b	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.01060d	20 22 05	jsr $010522		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.010610	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.010612	74 10		stz $10,x		stz 	EXSValueH+0,x
.010614	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010616	20 5c 05	jsr $01055c		jsr 	StringCreateCopy
.010619	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.01061b	20 5c 05	jsr $01055c		jsr 	StringCreateCopy
.01061e	60		rts			rts
.01061f					_BAConcatLengthError:
.01061f	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010622	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01062a	6f 6f 20 6c 6f 6e 67 00
.010632					Binary_Subtract:
.010632	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010635	38		sec			sec
.010636	b5 00		lda $00,x		lda		EXSValueL+0,x
.010638	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01063a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01063c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01063e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010640	95 10		sta $10,x		sta 	EXSValueH+0,x
.010642	60		rts			rts
.010643					Binary_ShiftRight:
.010643	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010646	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010648	29 3f 00	and #$003f		and 	#63
.01064b	f0 07		beq $010654		beq		_Binary_SRExit
.01064d					_Binary_SRLoop:
.01064d	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01064f	76 00		ror $00,x		ror 	EXSValueL+0,x
.010651	3a		dec a			dec 	a
.010652	d0 f9		bne $01064d		bne 	_Binary_SRLoop
.010654					_Binary_SRExit:
.010654	60		rts			rts
.010655					Binary_ShiftLeft:
.010655	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010658	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01065a	29 3f 00	and #$003f		and 	#63
.01065d	f0 07		beq $010666		beq		_Binary_SLExit
.01065f					_Binary_SLLoop:
.01065f	16 00		asl $00,x		asl 	EXSValueL+0,x
.010661	36 10		rol $10,x		rol 	EXSValueH+0,x
.010663	3a		dec a			dec 	a
.010664	d0 f9		bne $01065f		bne 	_Binary_SLLoop
.010666					_Binary_SLExit:
.010666	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010667					Binary_And:
.010667	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01066a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01066c	35 02		and $02,x		and 	EXSValueL+2,x
.01066e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010670	b5 10		lda $10,x		lda		EXSValueH+0,x
.010672	35 12		and $12,x		and 	EXSValueH+2,x
.010674	95 10		sta $10,x		sta 	EXSValueH+0,x
.010676	60		rts			rts
.010677					Binary_Or:
.010677	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01067a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01067c	15 02		ora $02,x		ora 	EXSValueL+2,x
.01067e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010680	b5 10		lda $10,x		lda		EXSValueH+0,x
.010682	15 12		ora $12,x		ora 	EXSValueH+2,x
.010684	95 10		sta $10,x		sta 	EXSValueH+0,x
.010686	60		rts			rts
.010687					Binary_Xor:
.010687	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.01068a	b5 00		lda $00,x		lda		EXSValueL+0,x
.01068c	55 02		eor $02,x		eor 	EXSValueL+2,x
.01068e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010690	b5 10		lda $10,x		lda		EXSValueH+0,x
.010692	55 12		eor $12,x		eor 	EXSValueH+2,x
.010694	95 10		sta $10,x		sta 	EXSValueH+0,x
.010696	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010697					Binary_Equals:
.010697	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01069a	b0 0e		bcs $0106aa		bcs 	_BEString
.01069c	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01069e	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106a0	d0 4f		bne $0106f1		bne 	Compare_Fail
.0106a2	b5 10		lda $10,x		lda 	EXSValueH,x
.0106a4	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106a6	d0 49		bne $0106f1		bne 	Compare_Fail
.0106a8	80 3f		bra $0106e9		bra 	Compare_Succeed
.0106aa					_BEString:
.0106aa	09 00 00	ora #$0000		ora 	#$0000
.0106ad	f0 3a		beq $0106e9		beq 	Compare_Succeed
.0106af	80 40		bra $0106f1		bra 	Compare_Fail
.0106b1					Binary_NotEquals:
.0106b1	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106b4	b0 0e		bcs $0106c4		bcs 	_BNEString
.0106b6	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0106b8	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0106ba	d0 2d		bne $0106e9		bne 	Compare_Succeed
.0106bc	b5 10		lda $10,x		lda 	EXSValueH,x
.0106be	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.0106c0	d0 27		bne $0106e9		bne 	Compare_Succeed
.0106c2	80 2d		bra $0106f1		bra 	Compare_Fail
.0106c4					_BNEString:
.0106c4	09 00 00	ora #$0000		ora 	#$0000
.0106c7	d0 20		bne $0106e9		bne 	Compare_Succeed
.0106c9	80 26		bra $0106f1		bra 	Compare_Fail
.0106cb					Binary_Less:
.0106cb	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106ce	b0 12		bcs $0106e2		bcs 	_BLString
.0106d0	38		sec			sec
.0106d1	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0106d3	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0106d5	b5 10		lda $10,x		lda 	EXSValueH,x
.0106d7	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0106d9	50 03		bvc $0106de		bvc 	*+5
.0106db	49 00 80	eor #$8000		eor 	#$8000
.0106de	30 09		bmi $0106e9		bmi 	Compare_Succeed
.0106e0	80 0f		bra $0106f1		bra 	Compare_Fail
.0106e2					_BLString:
.0106e2	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0106e5	f0 02		beq $0106e9		beq 	Compare_Succeed
.0106e7	80 08		bra $0106f1		bra 	Compare_Fail
.0106e9					Compare_Succeed:
.0106e9	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0106ec	95 00		sta $00,x		sta 	EXSValueL,x
.0106ee	95 10		sta $10,x		sta 	EXSValueH,x
.0106f0	60		rts			rts
.0106f1					Compare_Fail:
.0106f1	74 00		stz $00,x		stz 	EXSValueL,x
.0106f3	74 10		stz $10,x		stz 	EXSValueH,x
.0106f5	60		rts			rts
.0106f6					Binary_GreaterEqual:
.0106f6	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0106f9	b0 12		bcs $01070d		bcs 	_BGEString
.0106fb	38		sec			sec
.0106fc	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0106fe	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010700	b5 10		lda $10,x		lda 	EXSValueH,x
.010702	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010704	50 03		bvc $010709		bvc 	*+5
.010706	49 00 80	eor #$8000		eor 	#$8000
.010709	10 de		bpl $0106e9		bpl 	Compare_Succeed
.01070b	80 e4		bra $0106f1		bra 	Compare_Fail
.01070d					_BGEString:
.01070d	09 00 00	ora #$0000		ora 	#$0000
.010710	10 d7		bpl $0106e9		bpl 	Compare_Succeed
.010712	80 dd		bra $0106f1		bra 	Compare_Fail
.010714					Binary_LessEqual:
.010714	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010717	b0 12		bcs $01072b		bcs 	_BLEString
.010719	18		clc			clc 									; numeric <= signed
.01071a	b5 00		lda $00,x		lda 	EXSValueL,x
.01071c	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01071e	b5 10		lda $10,x		lda 	EXSValueH,x
.010720	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010722	50 03		bvc $010727		bvc 	*+5
.010724	49 00 80	eor #$8000		eor 	#$8000
.010727	30 c0		bmi $0106e9		bmi 	Compare_Succeed
.010729	80 c6		bra $0106f1		bra 	Compare_Fail
.01072b					_BLEString:
.01072b	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.01072e	d0 b9		bne $0106e9		bne 	Compare_Succeed
.010730	80 bf		bra $0106f1		bra 	Compare_Fail
.010732					Binary_Greater:
.010732	20 50 07	jsr $010750		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010735	b0 12		bcs $010749		bcs 	_BGString
.010737	18		clc			clc 									; numeric > signed
.010738	b5 00		lda $00,x		lda 	EXSValueL,x
.01073a	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01073c	b5 10		lda $10,x		lda 	EXSValueH,x
.01073e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010740	50 03		bvc $010745		bvc 	*+5
.010742	49 00 80	eor #$8000		eor 	#$8000
.010745	10 a2		bpl $0106e9		bpl 	Compare_Succeed
.010747	80 a8		bra $0106f1		bra 	Compare_Fail
.010749					_BGString:
.010749	c9 01 00	cmp #$0001		cmp 	#$0001
.01074c	f0 9b		beq $0106e9		beq 	Compare_Succeed
.01074e	80 a1		bra $0106f1		bra 	Compare_Fail
.010750					CompareTypeCheck:
.010750	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010752	55 22		eor $22,x		eor 	EXSPrecType+2,x
.010754	30 06		bmi $01075c		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010756	b5 20		lda $20,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010758	30 1c		bmi $010776		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.01075a	18		clc			clc 									; if numbers return with carry clear and calculate it.
.01075b	60		rts			rts
.01075c					_CTCFail:
.01075c	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01075f	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010767	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010776					_CTCStringCompare:
.010776	20 e4 04	jsr $0104e4		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010779	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.01077b	85 08		sta $08			sta 	DTemp1
.01077d	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.01077f	85 0c		sta $0c			sta 	DTemp2
.010781	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010784	a8		tay			tay
.010785	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010787	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010789	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.01078b	90 02		bcc $01078f		bcc 	_CTCSmallest
.01078d	b2 0c		lda ($0c)		lda 	(DTemp2)
.01078f					_CTCSmallest:
.01078f	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010791					_CTCCompare:
.010791	c8		iny			iny 									; look at next character (done first, first char is size)
.010792	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010794	30 16		bmi $0107ac		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010796	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010798	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.01079a	f0 f5		beq $010791		beq 	_CTCCompare 					; if zero, try the next character.
.01079c	b0 07		bcs $0107a5		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.01079e					_CTCLess:
.01079e	c2 20		rep #$20		rep 	#$20
.0107a0	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0107a3	80 14		bra $0107b9		bra 	_CTCExit
.0107a5					_CTCGreater:
.0107a5	c2 20		rep #$20		rep 	#$20
.0107a7	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.0107aa	80 0d		bra $0107b9		bra 	_CTCExit
.0107ac					_CTCEqualSoFar:
.0107ac	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.0107ae	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.0107b0	90 ec		bcc $01079e		bcc 	_CTCLess
.0107b2	d0 f1		bne $0107a5		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.0107b4	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.0107b6	a9 00 00	lda #$0000		lda 	#$0000
.0107b9					_CTCExit:
.0107b9	38		sec			sec 									; return with CS indicating string comparison.
.0107ba	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.0107bb					Binary_Divide:
.0107bb	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.0107be	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0107c0	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0107c2	d0 14		bne $0107d8		bne 	_BinaryDivide_Ok
.0107c4	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0107c7	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>0107cf	20 62 79 20 7a 65 72 6f 00
.0107d8					_BinaryDivide_Ok:
.0107d8	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0107da	64 0a		stz $0a			stz 	DTemp1+2
.0107dc	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.0107de	5a		phy			phy 										; save Y (bit counter)
.0107df	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.0107e1	10 07		bpl $0107ea		bpl 	_BinaryDivide_RightDone
.0107e3	e8		inx			inx
.0107e4	e8		inx			inx
.0107e5	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.0107e8	ca		dex			dex
.0107e9	ca		dex			dex
.0107ea					_BinaryDivide_RightDone:
.0107ea	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.0107ec	10 03		bpl $0107f1		bpl 	_BinaryDivide_LeftDone
.0107ee	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.0107f1					_BinaryDivide_LeftDone:
.0107f1	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.0107f4					_BinaryDivide_Loop:
.0107f4	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.0107f6	36 10		rol $10,x		rol 	EXSValueH+0,x
.0107f8	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.0107fa	26 0a		rol $0a			rol 	DTemp1+2
.0107fc	38		sec			sec											; calculate A-M
.0107fd	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.0107ff	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010801	85 0c		sta $0c			sta 	DTemp2
.010803	a5 0a		lda $0a			lda 	DTemp1+2
.010805	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010807	90 08		bcc $010811		bcc 	_Binary_NoSubract 					; if A < M skip this
.010809	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01080b	a5 0c		lda $0c			lda 	DTemp2
.01080d	85 08		sta $08			sta 	DTemp1+0
.01080f	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010811					_Binary_NoSubract:
.010811	88		dey			dey 										; do it 32 times.
.010812	d0 e0		bne $0107f4		bne 	_BinaryDivide_Loop
.010814					_BinaryDivide_Exit:
.010814	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010816	29 01 00	and #$0001		and 	#1
.010819	f0 03		beq $01081e		beq 	_BinaryDivide_Exit2
.01081b	20 20 08	jsr $010820		jsr 	Binary_DivNegate
.01081e					_BinaryDivide_Exit2:
.01081e	7a		ply			ply 										; restore Y
.01081f	60		rts			rts
.010820					Binary_DivNegate:
.010820	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010822	38		sec			sec 										; negate the value at stack X.
.010823	a9 00 00	lda #$0000		lda 	#$0000
.010826	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010828	95 00		sta $00,x		sta 	EXSValueL+0,x
.01082a	a9 00 00	lda #$0000		lda 	#$0000
.01082d	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.01082f	95 10		sta $10,x		sta 	EXSValueH+0,x
.010831	60		rts			rts
.010832					Binary_Modulus:
.010832	20 bb 07	jsr $0107bb		jsr 	Binary_Divide 						; do the divide
.010835	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010837	95 00		sta $00,x		sta 	EXSValueL+0,x
.010839	a5 0a		lda $0a			lda 	DTemp1+2
.01083b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01083d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.01083e					Binary_Multiply:
.01083e	20 c4 04	jsr $0104c4		jsr 	CheckBothNumeric 					; check both values are numeric
.010841	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010843	85 08		sta $08			sta 	DTemp1
.010845	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010847	85 0a		sta $0a			sta		DTemp1+2
.010849	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01084b	74 10		stz $10,x		stz 	EXSValueH+0,x
.01084d					_BinaryMultiply_Loop:
.01084d	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01084f	05 0a		ora $0a			ora 	DTemp1+2
.010851	f0 1e		beq $010871		beq 	_BinaryMultiply_Exit
.010853	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010855	29 01 00	and #$0001		and 	#1
.010858	f0 0d		beq $010867		beq 	_BinaryMultiply_NoAdd
.01085a	18		clc			clc 										; add multiplicand to result.
.01085b	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01085d	75 02		adc $02,x		adc 	EXSValueL+2,x
.01085f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010861	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010863	75 12		adc $12,x		adc 	EXSValueH+2,x
.010865	95 10		sta $10,x		sta 	EXSValueH+0,x
.010867					_BinaryMultiply_NoAdd:
.010867	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010869	66 08		ror $08			ror 	DTemp1
.01086b	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01086d	36 12		rol $12,x		rol 	EXSValueH+2,x
.01086f	80 dc		bra $01084d		bra 	_BinaryMultiply_Loop 				; go round again.
.010871					_BinaryMultiply_Exit:
.010871	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010872					Function_Len:
.010872	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010875	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.010878	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01087b	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.01087d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010880	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010883	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010885	74 10		stz $10,x			stz 	EXSValueH+0,x
.010887	60		rts				rts
.010888					Function_Abs:
.010888	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.01088b	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.01088e	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010891	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010893	30 07		bmi $01089c			bmi 	_FAbsNegative 				; negate it if negative
.010895	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010897	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010899	95 00		sta $00,x			sta 	EXSValueL+0,x
.01089b	60		rts				rts
.01089c					_FAbsNegative:
.01089c	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.01089d	a9 00 00	lda #$0000			lda 	#0
.0108a0	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0108a2	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108a4	a9 00 00	lda #$0000			lda 	#0
.0108a7	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0108a9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108ab	60		rts				rts
.0108ac					Function_Sgn:
.0108ac	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns integer
.0108af	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get an integer
.0108b2	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.0108b5	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0108b7	74 10		stz $10,x			stz 	EXSValueH+0,x
.0108b9	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.0108bb	30 07		bmi $0108c4			bmi 	_FSgnNegative 				; set to -1 if signed
.0108bd	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.0108bf	f0 02		beq $0108c3			beq 	_FSgnExit
.0108c1	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.0108c3					_FSgnExit:
.0108c3	60		rts				rts
.0108c4					_FSgnNegative:
.0108c4	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.0108c7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108c9	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108cb	60		rts				rts
.0108cc					Function_Random:
.0108cc	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.0108cf	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger
.0108d2	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.0108d4	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.0108d6	d0 0a		bne $0108e2			bne 	_Rnd_NotZero
.0108d8	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.0108db	85 10		sta $10				sta 	DRandom
.0108dd	a9 ea 00	lda #$00ea			lda 	#$EA
.0108e0	85 12		sta $12				sta 	DRandom+2
.0108e2					_Rnd_NotZero:
.0108e2	20 ed 08	jsr $0108ed			jsr 	_Rnd_Process 				; call randomiser twice
.0108e5	95 10		sta $10,x			sta 	EXSValueH+0,x
.0108e7	20 ed 08	jsr $0108ed			jsr 	_Rnd_Process
.0108ea	95 00		sta $00,x			sta 	EXSValueL+0,x
.0108ec	60		rts				rts
.0108ed					_Rnd_Process:
.0108ed	06 10		asl $10				asl 	DRandom 					; shift right, exit
.0108ef	26 12		rol $12				rol 	DRandom+2
.0108f1	90 0e		bcc $010901			bcc 	_Rnd_Exit
.0108f3	a5 10		lda $10				lda 	DRandom 					; taps effectively
.0108f5	49 54 d4	eor #$d454			eor 	#$D454
.0108f8	85 10		sta $10				sta 	DRandom
.0108fa	a5 12		lda $12				lda 	DRandom+2
.0108fc	49 d5 55	eor #$55d5			eor 	#$55D5
.0108ff	85 12		sta $12				sta 	DRandom+2
.010901					_Rnd_Exit:
.010901	a5 10		lda $10				lda 	DRandom
.010903	45 12		eor $12				eor 	DRandom+2
.010905	60		rts				rts
.010906					Function_Chr:
.010906	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string
.010909	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get integer
.01090c	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01090f	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010912	d0 12		bne $010926			bne 	_FCHBad
.010914	48		pha				pha  								; save char # on stack
.010915	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010918	20 22 05	jsr $010522			jsr 	StringTempAllocate
.01091b	68		pla				pla 								; restore character number
.01091c	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter 		; write it out.
.01091f	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010921	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010923	74 10		stz $10,x			stz 	EXSValueH+0,x
.010925	60		rts				rts
.010926					_FCHBad:
.010926	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010929	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010931	65 20 66 6f 72 20 63 68 72 24 28 29 00
.01093e					Function_Asc:
.01093e	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010941	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get string
.010944	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010947	a8		tay				tay 								; string address in Y
.010948	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.01094b	29 ff 00	and #$00ff			and 	#$00FF
.01094e	f0 0b		beq $01095b			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010950	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010953	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010956	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010958	74 10		stz $10,x			stz 	EXSValueH+0,x
.01095a	60		rts				rts
.01095b					_FASBad:
.01095b	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01095e	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010966	65 20 66 6f 72 20 61 73 63 28 29 00
.010972					Function_SPC:
.010972	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string
.010975	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010978	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.01097b	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.01097e	d0 17		bne $010997			bne 	_FSPBad
.010980	48		pha				pha 								; save length
.010981	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; allocate character space
.010984	7a		ply				ply 								; get count in Y
.010985	f0 09		beq $010990			beq 	_FSPExit 					; if zero, just empty string
.010987					_FSPCopy:
.010987	a9 20 00	lda #$0020			lda 	#" "						; space character
.01098a	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter 		; write it out.
.01098d	88		dey				dey
.01098e	d0 f7		bne $010987			bne 	_FSPCopy	 				; do it Y times
.010990					_FSPExit:
.010990	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010992	95 00		sta $00,x			sta 	EXSValueL+0,x
.010994	74 10		stz $10,x			stz 	EXSValueH+0,x
.010996	60		rts				rts
.010997					_FSPBad:
.010997	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01099a	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>0109a2	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.0109ae					Function_LEFT:
.0109ae	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.0109b1	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109b4	48		pha				pha 								; save string on stack.
.0109b5	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; get count
.0109b8	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger
.0109bb	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109be	d0 6e		bne $010a2e			bne 	FNStringParameter
.0109c0	85 08		sta $08				sta 	DTemp1 						; save count.
.0109c2	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket
.0109c5	7a		ply				ply 								; Y points to string.
.0109c6	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109c9	29 ff 00	and #$00ff			and 	#$00FF
.0109cc	f0 53		beq $010a21			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109ce	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109d0	f0 56		beq $010a28			beq 	FNStringY 					; return string in Y if current len = required len.
.0109d2	90 54		bcc $010a28			bcc 	FNStringY 					; if current < required return whole thing.
.0109d4	c8		iny				iny 								; take from here - start of string
.0109d5	80 34		bra $010a0b			bra 	FNDTemp1Characters
.0109d7					Function_RIGHT:
.0109d7	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.0109da	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.0109dd	48		pha				pha 								; save string on stack.
.0109de	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; get count
.0109e1	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger
.0109e4	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.0109e7	d0 45		bne $010a2e			bne 	FNStringParameter
.0109e9	85 08		sta $08				sta 	DTemp1 						; save count.
.0109eb	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket
.0109ee	7a		ply				ply 								; Y points to string.
.0109ef	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.0109f2	29 ff 00	and #$00ff			and 	#$00FF
.0109f5	f0 2a		beq $010a21			beq 	FNStringEmpty 				; return empty if zero length anyway.
.0109f7	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.0109f9	f0 2d		beq $010a28			beq 	FNStringY 					; return string in Y if current len = required len.
.0109fb	90 2b		bcc $010a28			bcc 	FNStringY 					; if current < required return whole thing.
.0109fd	ea		nop				nop
.0109fe	38		sec				sec 								; current-required is the number to skip
.0109ff	e5 08		sbc $08				sbc 	DTemp1
.010a01	85 0a		sta $0a				sta 	DTemp1+2
.010a03	98		tya				tya
.010a04	18		clc				clc
.010a05	65 0a		adc $0a				adc 	DTemp1+2
.010a07	a8		tay				tay
.010a08	c8		iny				iny 								; +1 for the count.
.010a09	80 00		bra $010a0b			bra 	FNDTemp1Characters
.010a0b					FNDTemp1Characters:
.010a0b	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010a0d	f0 12		beq $010a21			beq 	FNStringEmpty 				; if zero, return empty string.
.010a0f	20 22 05	jsr $010522			jsr 	StringTempAllocate
.010a12	48		pha				pha 								; save the address
.010a13					_FND1Loop:
.010a13	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010a16	20 4e 05	jsr $01054e			jsr 	StringWriteCharacter
.010a19	c8		iny				iny
.010a1a	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010a1c	d0 f5		bne $010a13			bne 	_FND1Loop
.010a1e	7a		ply				ply 								; string address in Y
.010a1f	80 07		bra $010a28			bra 	FNStringY
.010a21					FNStringEmpty:
.010a21	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010a24	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; put address of it in Y
.010a27	a8		tay				tay
.010a28					FNStringY:
.010a28	98		tya				tya
.010a29	95 00		sta $00,x			sta 	EXSValueL+0,x
.010a2b	74 12		stz $12,x			stz 	EXSValueH+2,x
.010a2d	60		rts				rts
.010a2e					FNStringParameter:
.010a2e	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010a31	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010a39	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010a46					Function_Peek:
.010a46	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010a49	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010a4c	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010a4f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010a51	84 0a		sty $0a				sty 	DTemp1+2
.010a53	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010a56	b7 08		lda [$08],y			lda 	[DTemp1],y
.010a58	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010a5b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010a5d	74 10		stz $10,x			stz 	EXSValueH+0,x
.010a5f	60		rts				rts
.010a60					Function_Deek:
.010a60	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010a63	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010a66	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010a69	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010a6b	84 0a		sty $0a				sty 	DTemp1+2
.010a6d	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010a70	b7 08		lda [$08],y			lda 	[DTemp1],y
.010a72	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010a74	74 10		stz $10,x			stz 	EXSValueH+0,x
.010a76	60		rts				rts
.010a77					Function_Leek:
.010a77	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010a7a	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010a7d	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check )
.010a80	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010a82	84 0a		sty $0a				sty 	DTemp1+2
.010a84	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010a87	b7 08		lda [$08],y			lda 	[DTemp1],y
.010a89	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010a8b	c8		iny				iny
.010a8c	c8		iny				iny
.010a8d	b7 08		lda [$08],y			lda 	[DTemp1],y
.010a8f	95 10		sta $10,x			sta 	EXSValueH+0,x
.010a91	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010a92					Function_VAL:
.010a92	20 e4 04	jsr $0104e4			jsr 	ResetTypeInteger 			; returns an integer
.010a95	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; get the value you are absoluting
.010a98	48		pha				pha 								; put string address on stack.
.010a99	20 a9 0a	jsr $010aa9			jsr 	VALGetBase 					; process , base (shared with STR$())
.010a9c	7a		ply				ply 								; get string address back
.010a9d	da		phx				phx 								; save X on stack
.010a9e	aa		tax				tax 								; base in X
.010a9f	98		tya				tya 								; address in A
.010aa0	20 e3 0a	jsr $010ae3			jsr 	StringToInteger
.010aa3	fa		plx				plx 								; restore X
.010aa4	95 00		sta $00,x			sta 	EXSValueL+0,x
.010aa6	94 10		sty $10,x			sty 	EXSValueH+0,x
.010aa8	60		rts				rts
.010aa9					VALGetBase:
.010aa9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010aab	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if comma, go to get base code.
.010aae	f0 07		beq $010ab7			beq 	_VGBAlternate
.010ab0	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket			; expect ), and return 10.
.010ab3	a9 0a 00	lda #$000a			lda 	#10
.010ab6	60		rts				rts
.010ab7					_VGBAlternate:
.010ab7	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; skip comma.
.010aba	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get base
.010abd	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010ac0	d0 0e		bne $010ad0			bne 	_VGBBadBase
.010ac2	c9 02 00	cmp #$0002			cmp 	#2
.010ac5	90 09		bcc $010ad0			bcc 	_VGBBadBase
.010ac7	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010aca	b0 04		bcs $010ad0			bcs 	_VGBBadBase
.010acc	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; get right bracket and return.
.010acf	60		rts				rts
.010ad0					_VGBBadBase:
.010ad0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010ad3	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010adb	65 72 20 42 61 73 65 00
.010ae3					StringToInteger:
.010ae3	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010ae5	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010ae7	29 ff 00	and #$00ff			and 	#$00FF
.010aea	85 26		sta $26				sta 	DTemp3+2
.010aec	f0 6e		beq $010b5c			beq 	_STIError 					; if length zero it's bad.
.010aee	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010af0	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010af2	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010af4	64 0a		stz $0a				stz 	DTemp1+2
.010af6	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010af8	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010afb	48		pha				pha 								; push on stack
.010afc	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010aff	d0 06		bne $010b07			bne 	_STILoop
.010b01	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010b03	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010b05	f0 55		beq $010b5c			beq 	_STIError 					; if only - then error.
.010b07					_STILoop:
.010b07	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010b09	20 7b 0b	jsr $010b7b			jsr 	MultiplyTemp1ByA
.010b0c	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010b0e	29 ff 00	and #$00ff			and 	#$00FF
.010b11	20 6c 0b	jsr $010b6c			jsr 	ConvertUpperCase	 		; make U/C
.010b14	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010b17	90 43		bcc $010b5c			bcc 	_STIError
.010b19	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010b1c	90 0e		bcc $010b2c			bcc 	_STIOkay1
.010b1e	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010b21	90 39		bcc $010b5c			bcc 	_STIError
.010b23	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010b26	b0 34		bcs $010b5c			bcs 	_STIError
.010b28	18		clc				clc 								; shift to correct range.
.010b29	69 09 00	adc #$0009			adc 	#9
.010b2c					_STIOkay1:
.010b2c	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010b2f	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010b31	b0 29		bcs $010b5c			bcs 	_STIError
.010b33	18		clc				clc 								; add A to DTemp1
.010b34	65 08		adc $08				adc 	DTemp1
.010b36	85 08		sta $08				sta 	DTemp1
.010b38	90 02		bcc $010b3c			bcc 	_STINoCarry
.010b3a	e6 0a		inc $0a				inc 	DTemp1+2
.010b3c					_STINoCarry:
.010b3c	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010b3e	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010b40	d0 c5		bne $010b07			bne 	_STILoop 					; loop back.
.010b42	68		pla				pla 								; get optional minus bac
.010b43	c9 2d 00	cmp #$002d			cmp 	#"-"
.010b46	d0 0f		bne $010b57			bne 	_STINotNegative 			; handle the negative character
.010b48	38		sec				sec 								; negate DTemp1
.010b49	a9 00 00	lda #$0000			lda 	#0
.010b4c	e5 08		sbc $08				sbc 	DTemp1
.010b4e	85 08		sta $08				sta 	DTemp1
.010b50	a9 00 00	lda #$0000			lda 	#0
.010b53	e5 0a		sbc $0a				sbc 	DTemp1+2
.010b55	85 0a		sta $0a				sta 	DTemp1+2
.010b57					_STINotNegative:
.010b57	a5 08		lda $08				lda 	DTemp1 						; get the result
.010b59	a4 0a		ldy $0a				ldy 	DTemp1+2
.010b5b	60		rts				rts
.010b5c					_STIError:
.010b5c	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010b5f	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010b67	74 61 6e 74 00
.010b6c					ConvertUpperCase:
.010b6c	c9 61 00	cmp #$0061			cmp 	#'a'
.010b6f	90 09		bcc $010b7a			bcc 	_CUCExit
.010b71	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010b74	b0 04		bcs $010b7a			bcs 	_CUCExit
.010b76	38		sec				sec
.010b77	e9 20 00	sbc #$0020			sbc 	#32
.010b7a					_CUCExit:
.010b7a	60		rts				rts
.010b7b					MultiplyTemp1ByA:
.010b7b					_MTGeneral:
.010b7b	da		phx				phx
.010b7c	aa		tax				tax 								; multiplier in X
.010b7d	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010b7f	85 0c		sta $0c				sta 	DTemp2
.010b81	a5 0a		lda $0a				lda 	DTemp1+2
.010b83	85 0e		sta $0e				sta 	DTemp2+2
.010b85	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010b87	64 0a		stz $0a				stz 	DTemp1+2
.010b89	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010b8c					_MTLoop:
.010b8c	8a		txa				txa 								; shift X right into C
.010b8d	4a		lsr a				lsr 	a
.010b8e	aa		tax				tax
.010b8f	90 10		bcc $010ba1			bcc 	_MTNoAdd
.010b91	18		clc				clc
.010b92	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010b94	65 0c		adc $0c				adc 	DTemp2
.010b96	85 08		sta $08				sta 	DTemp1
.010b98	a5 0a		lda $0a				lda 	DTemp1+2
.010b9a	65 0e		adc $0e				adc 	DTemp2+2
.010b9c	85 0a		sta $0a				sta 	DTemp1+2
.010b9e	90 01		bcc $010ba1			bcc 	_MTNoAdd
.010ba0	c8		iny				iny
.010ba1					_MTNoAdd:
.010ba1	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ba3	26 0e		rol $0e				rol 	DTemp2+2
.010ba5	90 01		bcc $010ba8			bcc 	_MTNoOverflow
.010ba7	c8		iny				iny
.010ba8					_MTNoOverflow:
.010ba8	8a		txa				txa 								; until multiplier is zero.
.010ba9	d0 e1		bne $010b8c			bne 	_MTLoop
.010bab	98		tya				tya
.010bac	18		clc				clc
.010bad	69 ff ff	adc #$ffff			adc 	#$FFFF
.010bb0	fa		plx				plx 								; restore X
.010bb1	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010bb2					Function_Str:
.010bb2	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010bb5	20 e3 02	jsr $0102e3			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010bb8	48		pha				pha 								; save YA on the stack
.010bb9	5a		phy				phy
.010bba	20 a9 0a	jsr $010aa9			jsr 	VALGetBase 					; process , base (shared with STR$())
.010bbd	85 14		sta $14				sta 	DSignCount
.010bbf	7a		ply				ply 								; YA is the number
.010bc0	68		pla				pla
.010bc1	da		phx				phx
.010bc2	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010bc4	20 cd 0b	jsr $010bcd			jsr 	ConvertToString 			; convert it to a string.
.010bc7	fa		plx				plx 								; restore X
.010bc8	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010bca	74 10		stz $10,x			stz 	EXSValueH+0,x
.010bcc	60		rts				rts
.010bcd					ConvertToString:
.010bcd	da		phx				phx 								; save X (base)
.010bce	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010bd0	84 26		sty $26				sty 	DTemp3+2
.010bd2	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010bd4	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010bd7	20 22 05	jsr $010522			jsr 	StringTempAllocate 			; allocate space for return string.
.010bda	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010bdc	10 15		bpl $010bf3			bpl 	_CTSNotNegative
.010bde	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010be1	20 5d 0c	jsr $010c5d			jsr 	CTSOutputA
.010be4	38		sec				sec 								; negate DTemp3 which is the number
.010be5	a9 00 00	lda #$0000			lda 	#0
.010be8	e5 24		sbc $24				sbc 	DTemp3
.010bea	85 24		sta $24				sta 	DTemp3
.010bec	a9 00 00	lda #$0000			lda 	#0
.010bef	e5 26		sbc $26				sbc 	DTemp3+2
.010bf1	85 26		sta $26				sta 	DTemp3+2
.010bf3					_CTSNotNegative:
.010bf3	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010bf6	48		pha				pha
.010bf7	a9 00 00	lda #$0000			lda 	#0
.010bfa	48		pha				pha
.010bfb	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010bfd	85 08		sta $08				sta 	DTemp1
.010bff	64 0a		stz $0a				stz 	DTemp1+2
.010c01					_CTSMultiplySubtractor:
.010c01	38		sec				sec 								; check number vs subtractor
.010c02	a5 24		lda $24				lda 	DTemp3
.010c04	e5 08		sbc $08				sbc 	DTemp1
.010c06	a5 26		lda $26				lda 	DTemp3+2
.010c08	e5 0a		sbc $0a				sbc 	DTemp1+2
.010c0a	90 0f		bcc $010c1b			bcc		_CTSScaledUp 				; if >= then scaled up.
.010c0c	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010c0e	48		pha				pha
.010c0f	a5 0a		lda $0a				lda 	DTemp1+2
.010c11	48		pha				pha
.010c12	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010c14	20 7b 0b	jsr $010b7b			jsr 	MultiplyTemp1ByA
.010c17	b0 02		bcs $010c1b			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010c19	80 e6		bra $010c01			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010c1b					_CTSScaledUp:
.010c1b	7a		ply				ply 								; YA contains the previous divider.
.010c1c	68		pla				pla
.010c1d	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010c20	d0 05		bne $010c27			bne 	_CTSHasDigit
.010c22	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010c25	f0 20		beq $010c47			beq 	_CTSExit
.010c27					_CTSHasDigit:
.010c27	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010c29	84 0e		sty $0e				sty 	DTemp2+2
.010c2b	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010c2e					_CTSSubLoop:
.010c2e	38		sec				sec 								; subtract subtractor from number
.010c2f	a5 24		lda $24				lda 	DTemp3
.010c31	e5 0c		sbc $0c				sbc 	DTemp2
.010c33	a8		tay				tay 								; intermediate in Y
.010c34	a5 26		lda $26				lda 	DTemp3+2
.010c36	e5 0e		sbc $0e				sbc 	DTemp2+2
.010c38	90 07		bcc $010c41			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010c3a	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010c3c	84 24		sty $24				sty 	DTemp3
.010c3e	e8		inx				inx 								; one more subtraction
.010c3f	80 ed		bra $010c2e			bra 	_CTSSubLoop 				; try it again.
.010c41					_CTSFinishedSubtracting:
.010c41	8a		txa				txa 								; convert to ASCII.
.010c42	20 50 0c	jsr $010c50			jsr 	CTSOutputHexDigit 			; write that out.
.010c45	80 d4		bra $010c1b			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010c47					_CTSExit:
.010c47	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010c49	20 50 0c	jsr $010c50			jsr 	CTSOutputHexDigit
.010c4c	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010c4e	fa		plx				plx 								; restore X.
.010c4f	60		rts				rts
.010c50					CTSOutputHexDigit:
.010c50	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010c53	90 04		bcc $010c59			bcc 	_CTSNotLetter
.010c55	18		clc				clc
.010c56	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010c59					_CTSNotLetter:
.010c59	18		clc				clc
.010c5a	69 30 00	adc #$0030			adc 	#48
.010c5d					CTSOutputA:
.010c5d	5a		phy				phy 								; save Y, set Y to current pointer
.010c5e	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010c60	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010c63	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010c65	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010c67	1a		inc a				inc 	a
.010c68	92 18		sta ($18)			sta 	(DStartTempString)
.010c6a	c2 20		rep #$20			rep 	#$20
.010c6c	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010c6e	7a		ply				ply 								; restore Y and exit.
.010c6f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.010c70					Function_UPPER:
.010c70	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010c73	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; evaluate a string.
.010c76	48		pha				pha
.010c77	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; close call.
.010c7a	20 22 05	jsr $010522			jsr		StringTempAllocate 			; allocate memory for it
.010c7d	68		pla				pla
.010c7e	20 5c 05	jsr $01055c			jsr 	StringCreateCopy 			; create a copy of it.
.010c81	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010c83	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c85	a8		tay				tay 								; address in Y
.010c86	74 10		stz $10,x			stz 	EXSValueH+0,x
.010c88	da		phx				phx 								; save X
.010c89	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010c8b	29 ff 00	and #$00ff			and 	#$00FF
.010c8e	f0 20		beq $010cb0			beq 	_FUPExit
.010c90	aa		tax				tax 								; put in X
.010c91					_FUPLoop:
.010c91	c8		iny				iny 								; increment and load character
.010c92	b9 00 00	lda $0000,y			lda 	$0000,y
.010c95	29 ff 00	and #$00ff			and 	#$00FF
.010c98	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.010c9b	90 10		bcc $010cad			bcc 	_FUPNoChange
.010c9d	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.010ca0	b0 0b		bcs $010cad			bcs 	_FUPNoChange
.010ca2	38		sec				sec 								; shift case
.010ca3	e9 20 00	sbc #$0020			sbc 	#32
.010ca6	e2 20		sep #$20			sep 	#$20 						; write back
.010ca8	99 00 00	sta $0000,y			sta 	$0000,y
.010cab	c2 20		rep #$20			rep 	#$20
.010cad					_FUPNoChange:
.010cad	ca		dex				dex 								; do X times
.010cae	d0 e1		bne $010c91			bne 	_FUPLoop
.010cb0					_FUPExit:
.010cb0	fa		plx				plx 								; restore X
.010cb1	60		rts				rts
.010cb2					Function_LOWER:
.010cb2	20 ec 04	jsr $0104ec			jsr 	ResetTypeString 			; returns a string.
.010cb5	20 02 03	jsr $010302			jsr 	EvaluateNextString 			; evaluate a string.
.010cb8	48		pha				pha
.010cb9	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; close call.
.010cbc	20 22 05	jsr $010522			jsr		StringTempAllocate 			; allocate memory for it
.010cbf	68		pla				pla
.010cc0	20 5c 05	jsr $01055c			jsr 	StringCreateCopy 			; create a copy of it.
.010cc3	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.010cc5	95 00		sta $00,x			sta 	EXSValueL+0,x
.010cc7	a8		tay				tay 								; address in Y
.010cc8	74 10		stz $10,x			stz 	EXSValueH+0,x
.010cca	da		phx				phx 								; save X
.010ccb	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.010ccd	29 ff 00	and #$00ff			and 	#$00FF
.010cd0	f0 20		beq $010cf2			beq 	_FLOExit
.010cd2	aa		tax				tax 								; put in X
.010cd3					_FLOLoop:
.010cd3	c8		iny				iny 								; increment and load character
.010cd4	b9 00 00	lda $0000,y			lda 	$0000,y
.010cd7	29 ff 00	and #$00ff			and 	#$00FF
.010cda	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.010cdd	90 10		bcc $010cef			bcc 	_FLONoChange
.010cdf	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010ce2	b0 0b		bcs $010cef			bcs 	_FLONoChange
.010ce4	18		clc				clc 								; shift case
.010ce5	69 20 00	adc #$0020			adc 	#32
.010ce8	e2 20		sep #$20			sep 	#$20 						; write back
.010cea	99 00 00	sta $0000,y			sta 	$0000,y
.010ced	c2 20		rep #$20			rep 	#$20
.010cef					_FLONoChange:
.010cef	ca		dex				dex 								; do X times
.010cf0	d0 e1		bne $010cd3			bne 	_FLOLoop
.010cf2					_FLOExit:
.010cf2	fa		plx				plx 								; restore X
.010cf3	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.010cf4					Function_Let:
.010cf4	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.010cf6	48		pha				pha  								; save on stack for later.
.010cf7	20 49 03	jsr $010349			jsr 	VariableFind 				; find the variable
.010cfa	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.010cfc	b0 1c		bcs $010d1a			bcs 	_FLetFound 					; skip if found.
.010cfe	68		pla				pla 								; get and push the first token again.
.010cff	48		pha				pha
.010d00	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.010d03	d0 57		bne $010d5c			bne 	_FLError					; arrays, so this causes an error.
.010d05	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010d07	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.010d0a	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create it.
.010d0d	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.010d0f					_FLSkipToken:
.010d0f	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010d11	e6 06		inc $06				inc 	DCodePtr
.010d13	e6 06		inc $06				inc 	DCodePtr
.010d15	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010d18	d0 f5		bne $010d0f			bne 	_FLSkipToken
.010d1a					_FLetFound:
.010d1a	68		pla				pla 								; get and save the first token.
.010d1b	48		pha				pha
.010d1c	a8		tay				tay 								; put it in Y
.010d1d	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.010d20	f0 07		beq $010d29			beq 	_FLetNotArray
.010d22	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.010d24	20 c0 03	jsr $0103c0			jsr 	VariableSubscript			; index calculation
.010d27	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010d29					_FLetNotArray:
.010d29	7a		ply				ply 								; get the first token into Y
.010d2a	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.010d2c	48		pha				pha
.010d2d	5a		phy				phy 								; save the first token on the stack.
.010d2e	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.010d31	20 98 04	jsr $010498			jsr 	ExpectToken
.010d34	68		pla				pla 								; restore the first token.
.010d35	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.010d38	d0 0f		bne $010d49			bne 	_FLetString 				; skip if string.
.010d3a	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; get an integer
.010d3d	7a		ply				ply 								; get address in Y
.010d3e	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.010d40	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010d43	b5 10		lda $10,x			lda 	EXSValueH+0,x 				; get the high word.
.010d45	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.010d48	60		rts				rts
.010d49					_FLetString:
.010d49	20 e9 02	jsr $0102e9			jsr 	EvaluateString 				; get a string.
.010d4c	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.010d4e	20 7d 05	jsr $01057d			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.010d51	7a		ply				ply 								; get address
.010d52	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.010d55	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.010d58	99 02 00	sta $0002,y			sta 	$0002,y
.010d5b	60		rts				rts
.010d5c					_FLError:
.010d5c	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010d5f	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>010d67	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.010d6f					Function_PRINT:
.010d6f	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.010d71	f0 33		beq $010da6			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.010d73	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; likewise if a colon.
.010d76	f0 2e		beq $010da6			beq 	_FPRExitCR
.010d78	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID 			; semicolon, skip it
.010d7b	f0 23		beq $010da0			beq 	_FPRSkipLoop
.010d7d	c9 27 32	cmp #$3227			cmp 	#squoteTokenID 				; single quote is CR
.010d80	f0 1b		beq $010d9d			beq 	_FPRNewLine
.010d82	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; , is tab.
.010d85	f0 11		beq $010d98			beq 	_FPRTab
.010d87					_FPRExpression:
.010d87	20 bc 01	jsr $0101bc			jsr 	Evaluate 					; evaluate a string or integer.
.010d8a	b0 06		bcs $010d92			bcs 	_FPRHaveString
.010d8c	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.010d8f	20 cd 0b	jsr $010bcd			jsr 	ConvertToString
.010d92					_FPRHaveString:
.010d92	a8		tay				tay 								; print the basic String.
.010d93	20 08 05	jsr $010508			jsr 	PrintBASICString
.010d96	80 d7		bra $010d6f			bra 	Function_Print 				; and go round again.
.010d98					_FPRTab:
.010d98	20 7c 14	jsr $01147c			jsr 	HWTab
.010d9b	80 03		bra $010da0			bra 	_FPRSkipLoop
.010d9d					_FPRNewLine:
.010d9d	20 69 14	jsr $011469			jsr 	HWNewLine
.010da0					_FPRSkipLoop:
.010da0	e6 06		inc $06				inc 	DCodePtr
.010da2	e6 06		inc $06				inc 	DCodePtr
.010da4	80 c9		bra $010d6f			bra 	Function_Print
.010da6					_FPRExitCR:
.010da6	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.010da8	88		dey				dey
.010da9	88		dey				dey
.010daa	b9 00 00	lda $0000,y			lda 	$0000,y
.010dad	c9 22 32	cmp #$3222			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.010db0	f0 08		beq $010dba			beq 	_FPRExit
.010db2	c9 23 32	cmp #$3223			cmp 	#semicolonTokenID
.010db5	f0 03		beq $010dba			beq 	_FPRExit
.010db7	20 69 14	jsr $011469			jsr 	HWNewLine 					; print a new line.
.010dba					_FPRExit:
.010dba	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.010dbb					Function_IF:
.010dbb	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; check success.
.010dbe	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.010dc0	05 08		ora $08				ora 	DTemp1
.010dc2	a8		tay				tay 								; success flag in Y.
.010dc3	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.010dc5	c9 43 3a	cmp #$3a43			cmp 	#thenTokenID
.010dc8	d0 32		bne $010dfc			bne 	_FIFExtended 				; if so, go to the extended IF.
.010dca	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.010dcc	e6 06		inc $06				inc 	DCodePtr
.010dce	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.010dd1	f0 0f		beq $010de2			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.010dd3	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.010dd5	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.010dd8	90 21		bcc $010dfb			bcc 	_FIFContinue 				; if not, just carry on exiting.
.010dda	c9 00 c0	cmp #$c000			cmp 	#$C000
.010ddd	b0 1c		bcs $010dfb			bcs 	_FIFContinue
.010ddf	4c 71 10	jmp $011071			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.010de2					_FIFEndOfLine:
.010de2	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.010de4	f0 15		beq $010dfb			beq 	_FIFContinue 				; if done so, continue.
.010de6	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.010de9	90 06		bcc $010df1			bcc 	_FIFStringConstant
.010deb	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.010ded	e6 06		inc $06				inc 	DCodePtr
.010def	80 f1		bra $010de2			bra 	_FIFEndOfLine
.010df1					_FIFStringConstant:
.010df1	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.010df4	18		clc				clc
.010df5	65 06		adc $06				adc 	DCodePtr
.010df7	85 06		sta $06				sta 	DCodePtr
.010df9	80 e7		bra $010de2			bra 	_FIFEndOfLine
.010dfb					_FIFContinue:
.010dfb	60		rts				rts
.010dfc					_FIFExtended:
.010dfc	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.010dfe	e6 2a		inc $2a				inc 	DStack
.010e00	a9 3f 3c	lda #$3c3f			lda 	#ifTokenID
.010e03	a6 2a		ldx $2a				ldx 	DStack
.010e05	95 00		sta $00,x			sta 	$00,x
.010e07	98		tya				tya 								; see if the test was passed.
.010e08	f0 01		beq $010e0b			beq 	_FIXSkip 					; if zero then it has failed.
.010e0a	60		rts				rts 								; test passed, so continue executing
.010e0b					_FIXSkip:
.010e0b	a9 39 3e	lda #$3e39			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.010e0e	a2 44 3a	ldx #$3a44			ldx 	#endifTokenID 				; at the same level.
.010e11	20 71 0e	jsr $010e71			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.010e14	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.010e16	e6 06		inc $06				inc 	DCodePtr
.010e18	c9 44 3a	cmp #$3a44			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.010e1b	d0 04		bne $010e21			bne 	_FIXNoThrow
.010e1d	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010e1f	c6 2a		dec $2a				dec 	DStack
.010e21					_FIXNoThrow:
.010e21	60		rts				rts
.010e22					Handler_ELSE:
.010e22	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010e24	b5 00		lda $00,x			lda 	$00,x
.010e26	c9 3f 3c	cmp #$3c3f			cmp 	#ifTokenID
.010e29	d0 12		bne $010e3d			bne 	_HEBadStructure
.010e2b	a9 44 3a	lda #$3a44			lda 	#endifTokenID 				; only searching one token.
.010e2e	a2 00 00	ldx #$0000			ldx 	#$0000
.010e31	20 71 0e	jsr $010e71			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.010e34	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.010e36	e6 06		inc $06				inc 	DCodePtr
.010e38	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010e3a	c6 2a		dec $2a				dec 	DStack
.010e3c	60		rts				rts
.010e3d					_HEBadStructure:
.010e3d	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010e40	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010e48	68 6f 75 74 20 49 66 00
.010e50					Handler_ENDIF:
.010e50	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.010e52	b5 00		lda $00,x			lda 	$00,x
.010e54	c9 3f 3c	cmp #$3c3f			cmp 	#ifTokenID
.010e57	d0 05		bne $010e5e			bne 	_HEIBadStructure
.010e59	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.010e5b	c6 2a		dec $2a				dec 	DStack
.010e5d	60		rts				rts
.010e5e					_HEIBadStructure:
.010e5e	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010e61	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>010e69	68 6f 75 74 20 49 66 00
.010e71					ScanForwardLevel:
.010e71	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.010e73	86 0a		stx $0a				stx 	DTemp1+2
.010e75	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.010e77	85 0c		sta $0c				sta 	DTemp2
.010e79	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.010e7c					_SFLLoop:
.010e7c	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.010e7f	d0 0d		bne $010e8e			bne 	_SFLNoCheck 				; we're in a substructure.
.010e81	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.010e83	f0 09		beq $010e8e			beq 	_SFLNoCheck 				; don't check zero
.010e85	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.010e87	f0 04		beq $010e8d			beq 	_SFLFound
.010e89	c5 0a		cmp $0a				cmp 	DTemp1+2
.010e8b	d0 01		bne $010e8e			bne 	_SFLNoCheck
.010e8d					_SFLFound:
.010e8d	60		rts				rts
.010e8e					_SFLNoCheck:
.010e8e	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.010e90	f0 4f		beq $010ee1			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.010e92	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.010e95	90 40		bcc $010ed7			bcc 	_SFLSkipString 				; then handle that.
.010e97	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.010e99	e6 06		inc $06				inc 	DCodePtr
.010e9b	a8		tay				tay 								; put token in Y temporarily.
.010e9c	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.010e9f	c9 00 20	cmp #$2000			cmp 	#$2000
.010ea2	d0 d8		bne $010e7c			bne 	_SFLLoop
.010ea4	98		tya				tya 								; get the token back.
.010ea5	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.010ea8	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.010eab	f0 cf		beq $010e7c			beq 	_SFLLoop
.010ead	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.010eb0	90 ca		bcc $010e7c			bcc 	_SFLLoop
.010eb2	e8		inx				inx 								; increment the level.
.010eb3	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.010eb6	f0 c4		beq $010e7c			beq 	_SFLLoop
.010eb8	ca		dex				dex 								; decrement the level
.010eb9	ca		dex				dex 								; one overdoes the previous inx.
.010eba	10 c0		bpl $010e7c			bpl 	_SFLLoop 					; if gone -ve then error.
.010ebc					_SFLError:
.010ebc	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.010ebe	85 22		sta $22				sta 	DLineNumber
.010ec0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010ec3	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>010ecb	65 20 69 6d 62 61 6c 61 6e 63 65 00
.010ed7					_SFLSkipString:
.010ed7	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.010eda	18		clc				clc
.010edb	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.010edd	85 06		sta $06				sta 	DCodePtr
.010edf	80 9b		bra $010e7c			bra 	_SFLLoop 					; go round again.
.010ee1					_SFLNextLine:
.010ee1	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.010ee3	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.010ee6	f0 d4		beq $010ebc			beq 	_SFLError 					; if zero, then there's no more code to search.
.010ee8	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.010eeb	85 22		sta $22				sta 	DLineNumber
.010eed	18		clc				clc
.010eee	a5 06		lda $06				lda 	DCodePtr
.010ef0	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.010ef3	85 06		sta $06				sta 	DCodePtr
.010ef5	80 85		bra $010e7c			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.010ef7					Command_FOR:
.010ef7	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.010ef9	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.010efc	d0 60		bne $010f5e			bne		_CFOBad
.010efe	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find variable
.010f01	b0 15		bcs $010f18			bcs 	_CFOExists
.010f03	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.010f05	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.010f08	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create it.
.010f0b	48		pha				pha 								; save on stack
.010f0c					_CFOSkipToken:
.010f0c	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.010f0e	e6 06		inc $06				inc 	DCodePtr
.010f10	e6 06		inc $06				inc 	DCodePtr
.010f12	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.010f15	d0 f5		bne $010f0c			bne 	_CFOSkipToken
.010f17	68		pla				pla 								; restore address
.010f18					_CFOExists:
.010f18	48		pha				pha 								; push variable address on stack
.010f19	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.010f1c	20 98 04	jsr $010498			jsr 	ExpectToken
.010f1f	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; this is the start value
.010f22	bb		tyx				tyx 								; put high value in X
.010f23	7a		ply				ply 								; address in Y
.010f24	99 00 00	sta $0000,y			sta 	$0000,y
.010f27	8a		txa				txa
.010f28	99 02 00	sta $0002,y			sta 	$0002,y
.010f2b	a9 28 32	lda #$3228			lda 	#toTokenID 					; expect the TO
.010f2e	20 98 04	jsr $010498			jsr 	ExpectToken
.010f31	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.010f33	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.010f35	95 02		sta $02,x			sta 	$02,x
.010f37	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.010f39	95 04		sta $04,x			sta 	$04,x
.010f3b	98		tya				tya 								; save variable address at +6
.010f3c	95 06		sta $06,x			sta 	$06,x
.010f3e	a9 40 3c	lda #$3c40			lda 	#forTokenID 				; save for token at +8
.010f41	95 08		sta $08,x			sta 	$08,x
.010f43	8a		txa				txa 								; add 8 to stack position
.010f44	18		clc				clc
.010f45	69 08 00	adc #$0008			adc 	#8
.010f48	85 2a		sta $2a				sta 	DStack
.010f4a	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.010f4d	b2 06		lda ($06)			lda 	(DCodePtr)
.010f4f	c9 29 32	cmp #$3229			cmp 	#stepTokenID 				; if STEP x is present.
.010f52	d0 09		bne $010f5d			bne 	_CFONoStep
.010f54	a9 29 32	lda #$3229			lda 	#stepTokenID 				; skip STEP
.010f57	20 98 04	jsr $010498			jsr 	ExpectToken
.010f5a	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; and whatever the step is.
.010f5d					_CFONoStep:
.010f5d	60		rts				rts
.010f5e					_CFOBad:
.010f5e	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010f61	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>010f69	76 61 72 69 61 62 6c 65 00
.010f72					Command_NEXT:
.010f72	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.010f74	b5 00		lda $00,x			lda 	$00,x
.010f76	c9 40 3c	cmp #$3c40			cmp 	#forTokenID 				; if not FOR then error
.010f79	f0 14		beq $010f8f			beq 	_CNXOk
.010f7b	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010f7e	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>010f86	68 6f 75 74 20 46 6f 72 00
.010f8f					_CNXOk:
.010f8f	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.010f91	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.010f94	90 22		bcc $010fb8			bcc 	_CNXNoVariable
.010f96	20 49 03	jsr $010349			jsr 	VariableFind 				; get address of variable.
.010f99	90 08		bcc $010fa3			bcc 	_CNXNextVar 				; not found variable, it's an error.
.010f9b	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.010f9d	ca		dex				dex
.010f9e	ca		dex				dex
.010f9f	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.010fa1	f0 15		beq $010fb8			beq 	_CNXNoVariable 				; then continue
.010fa3					_CNXNextVar:
.010fa3	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>010fa6	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>010fae	20 76 61 72 69 61 62 6c 65 00
.010fb8					_CNXNoVariable:
.010fb8	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.010fba	48		pha				pha
.010fbb	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.010fbd	38		sec				sec
.010fbe	e9 08 00	sbc #$0008			sbc 	#8
.010fc1	85 2a		sta $2a				sta 	DStack
.010fc3	aa		tax				tax 								; X points to the stack.
.010fc4	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.010fc6	85 06		sta $06				sta 	DCodePtr
.010fc8	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; this is the target constant
.010fcb	5a		phy				phy 								; save the target on the stack
.010fcc	48		pha				pha
.010fcd	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.010fd0	85 08		sta $08				sta 	DTemp1
.010fd2	64 0a		stz $0a				stz 	DTemp1+2
.010fd4	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.010fd6	c9 29 32	cmp #$3229			cmp 	#stepTokenID
.010fd9	d0 0b		bne $010fe6			bne 	_CNXNoStep
.010fdb	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.010fdd	e6 06		inc $06				inc 	DCodePtr
.010fdf	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; work out the step.
.010fe2	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.010fe4	84 0a		sty $0a				sty 	DTemp1+2
.010fe6					_CNXNoStep:
.010fe6	68		pla				pla 								; save the Target in DTemp2
.010fe7	85 0c		sta $0c				sta 	DTemp2
.010fe9	68		pla				pla
.010fea	85 0e		sta $0e				sta 	DTemp2+2
.010fec	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.010fee	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.010ff0	a8		tay				tay
.010ff1	18		clc				clc
.010ff2	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.010ff5	65 08		adc $08				adc 	DTemp1
.010ff7	99 00 00	sta $0000,y			sta 	$0000,y
.010ffa	b9 02 00	lda $0002,y			lda 	$0002,y
.010ffd	65 0a		adc $0a				adc 	DTemp1+2
.010fff	99 02 00	sta $0002,y			sta 	$0002,y
.011002	38		sec				sec
.011003	a5 0c		lda $0c				lda 	DTemp2
.011005	f9 00 00	sbc $0000,y			sbc 	$0000,y
.011008	85 0c		sta $0c				sta 	DTemp2
.01100a	a5 0e		lda $0e				lda 	DTemp2+2
.01100c	f9 02 00	sbc $0002,y			sbc 	$0002,y
.01100f	85 0e		sta $0e				sta 	DTemp2+2
.011011	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.011013	f0 0a		beq $01101f			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.011015	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.011017	45 0a		eor $0a				eor 	DTemp1+2
.011019	10 04		bpl $01101f			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.01101b	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.01101c	85 06		sta $06				sta 	DCodePtr
.01101e	60		rts				rts
.01101f					_CNXLoopAgain:
.01101f	68		pla				pla 								; throw the original DCodePtr as we're going back.
.011020	18		clc				clc
.011021	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.011023	aa		tax				tax
.011024	69 08 00	adc #$0008			adc 	#8
.011027	85 2a		sta $2a				sta 	DStack
.011029	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.01102b	85 22		sta $22				sta 	DLineNumber
.01102d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.01102e					Function_ONGOTO:
.01102e	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; on what GOTO :)
.011031	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011034	d0 25		bne $01105b			bne 	_FOGoFail
.011036	c9 00 00	cmp #$0000			cmp 	#0
.011039	f0 20		beq $01105b			beq 	_FOGoFail 					; we start with index = 1
.01103b	48		pha				pha 								; save count on stack
.01103c	a9 35 3e	lda #$3e35			lda 	#gotoTokenID 				; expect GOTO
.01103f	20 98 04	jsr $010498			jsr 	ExpectToken
.011042	fa		plx				plx 								; put count in X.
.011043					_FOGoLoop:
.011043	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011045	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011048	90 73		bcc $0110bd			bcc 	FGOFail 					; if not, then we have an error.
.01104a	c9 00 c0	cmp #$c000			cmp 	#$C000
.01104d	b0 6e		bcs $0110bd			bcs 	FGOFail
.01104f	ca		dex				dex 								; subtract one, if done, call GOTO code
.011050	f0 1f		beq $011071			beq 	Function_GOTO
.011052	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011054	e6 06		inc $06				inc 	DCodePtr
.011056	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; expect a comma
.011059	80 e8		bra $011043			bra 	_FOGoLoop 					; and loop round.
.01105b					_FOGoFail:
.01105b	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>01105e	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011066	47 6f 74 6f 20 76 61 6c 75 65 00
.011071					Function_GOTO:
.011071	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011073	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011076	90 45		bcc $0110bd			bcc 	FGOFail 					; we don't do calculate line numbers.
.011078	c9 00 c0	cmp #$c000			cmp 	#$C000
.01107b	b0 40		bcs $0110bd			bcs 	FGOFail
.01107d	38		sec				sec 								; convert to 0-32767
.01107e	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011081	aa		tax				tax
.011082	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; start of program offset
.011085	18		clc				clc
.011086	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011088	a8		tay				tay
.011089					_FGOSearch:
.011089	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01108c	f0 18		beq $0110a6			beq 	_FGOUnknown
.01108e	8a		txa				txa 								; does it match line number ?
.01108f	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011092	f0 08		beq $01109c			beq 	_FGOFound 					; yes, then found.
.011094	98		tya				tya 								; no follow the link
.011095	18		clc				clc
.011096	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011099	a8		tay				tay
.01109a	80 ed		bra $011089			bra 	_FGOSearch 					; and keep looking
.01109c					_FGOFound:
.01109c	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01109e	98		tya				tya 								; Y + 4 is the code pointer.
.01109f	18		clc				clc 								; (skipping link and line #)
.0110a0	69 04 00	adc #$0004			adc 	#4
.0110a3	85 06		sta $06				sta 	DCodePtr
.0110a5	60		rts				rts									; and continue
.0110a6					_FGOUnknown:
.0110a6	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0110a9	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>0110b1	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.0110bd					FGOFail:
.0110bd	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0110c0	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>0110c8	20 4e 75 6d 62 65 72 00
.0110d0					Function_GOSUB:
.0110d0	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0110d2	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0110d4	18		clc				clc
.0110d5	69 02 00	adc #$0002			adc 	#2
.0110d8	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0110da	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0110dc	95 04		sta $04,x			sta 	$04,x
.0110de	a9 36 3e	lda #$3e36			lda 	#gosubTokenID 				; save gosub token at +6
.0110e1	95 06		sta $06,x			sta 	$06,x
.0110e3	8a		txa				txa 								; advance stack by 6.
.0110e4	18		clc				clc
.0110e5	69 06 00	adc #$0006			adc 	#6
.0110e8	85 2a		sta $2a				sta 	DStack
.0110ea	80 85		bra $011071			bra 	Function_GOTO 				; and do a GOTO.
.0110ec					Function_RETURN:
.0110ec	a6 2a		ldx $2a				ldx 	DStack
.0110ee	b5 00		lda $00,x			lda 	$00,x
.0110f0	c9 36 3e	cmp #$3e36			cmp 	#gosubTokenID 				; check top token.
.0110f3	d0 11		bne $011106			bne 	_FRetFail
.0110f5	8a		txa				txa 								; unpick stack.
.0110f6	38		sec				sec
.0110f7	e9 06 00	sbc #$0006			sbc 	#6
.0110fa	85 2a		sta $2a				sta 	DStack
.0110fc	aa		tax				tax
.0110fd	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0110ff	85 06		sta $06				sta 	DCodePtr
.011101	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011103	85 22		sta $22				sta 	DLineNumber
.011105	60		rts				rts
.011106					_FRetFail:
.011106	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011109	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>011111	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.01111e					Function_REPEAT:
.01111e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011120	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.011122	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011124	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011126	95 04		sta $04,x			sta 	$04,x
.011128	a9 3d 3c	lda #$3c3d			lda 	#repeatTokenID 				; save repeat token at +6
.01112b	95 06		sta $06,x			sta 	$06,x
.01112d	8a		txa				txa 								; advance stack by 6.
.01112e	18		clc				clc
.01112f	69 06 00	adc #$0006			adc 	#6
.011132	85 2a		sta $2a				sta 	DStack
.011134	60		rts				rts
.011135					Function_UNTIL:
.011135	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011137	b5 00		lda $00,x			lda 	$00,x
.011139	c9 3d 3c	cmp #$3c3d			cmp 	#repeatTokenID
.01113c	d0 26		bne $011164			bne 	_FUNFail
.01113e	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; .... until what.
.011141	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011144	d0 15		bne $01115b			bne 	_FUNExit
.011146	c9 00 00	cmp #$0000			cmp 	#0
.011149	d0 10		bne $01115b			bne 	_FUNExit
.01114b	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.01114d	38		sec				sec
.01114e	e9 06 00	sbc #$0006			sbc 	#6
.011151	aa		tax				tax
.011152	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011154	85 06		sta $06				sta 	DCodePtr
.011156	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011158	85 22		sta $22				sta 	DLineNumber
.01115a	60		rts				rts
.01115b					_FUNExit:
.01115b	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.01115d	38		sec				sec
.01115e	e9 06 00	sbc #$0006			sbc 	#6
.011161	85 2a		sta $2a				sta 	DStack
.011163	60		rts				rts
.011164					_FUNFail:
.011164	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011167	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>01116f	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.01117c					Function_WHILE:
.01117c	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.01117e	48		pha				pha 								; save on stack
.01117f	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; while what.
.011182	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011185	d0 14		bne $01119b			bne 	_FWHExecute
.011187	c9 00 00	cmp #$0000			cmp 	#0
.01118a	d0 0f		bne $01119b			bne 	_FWHExecute
.01118c	68		pla				pla 								; throw away current instruction
.01118d	a9 41 3a	lda #$3a41			lda 	#wendTokenID 				; skip to WEND
.011190	a2 00 00	ldx #$0000			ldx 	#0
.011193	20 71 0e	jsr $010e71			jsr 	ScanForwardLevel 			; scan forward checking structures
.011196	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011198	e6 06		inc $06				inc 	DCodePtr
.01119a	60		rts				rts
.01119b					_FWHExecute:
.01119b	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01119d	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.01119e	3a		dec a				dec 	a
.01119f	3a		dec a				dec 	a
.0111a0	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0111a2	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0111a4	95 04		sta $04,x			sta 	$04,x
.0111a6	a9 3e 3c	lda #$3c3e			lda 	#whileTokenID 				; save while token at +6
.0111a9	95 06		sta $06,x			sta 	$06,x
.0111ab	8a		txa				txa 								; advance stack by 6.
.0111ac	18		clc				clc
.0111ad	69 06 00	adc #$0006			adc 	#6
.0111b0	85 2a		sta $2a				sta 	DStack
.0111b2	60		rts				rts
.0111b3					Function_WEND:
.0111b3	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.0111b5	b5 00		lda $00,x			lda 	$00,x
.0111b7	c9 3e 3c	cmp #$3c3e			cmp 	#whileTokenID
.0111ba	d0 11		bne $0111cd			bne 	_FWEFail
.0111bc	8a		txa				txa 								; unpick stack and always loop back.
.0111bd	38		sec				sec 								; we do the check at the top.
.0111be	e9 06 00	sbc #$0006			sbc 	#6
.0111c1	85 2a		sta $2a				sta 	DStack
.0111c3	aa		tax				tax
.0111c4	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0111c6	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.0111c8	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0111ca	85 22		sta $22				sta 	DLineNumber
.0111cc	60		rts				rts
.0111cd					_FWEFail:
.0111cd	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0111d0	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0111d8	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0111e3					Function_END:
.0111e3	02 00		cop #$00			cop 	#0
.0111e5					Function_RUN:
.0111e5	20 3e 12	jsr $01123e			jsr 	Function_CLEAR 				; clear all variables.
.0111e8	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0111ea	18		clc				clc
.0111eb	69 00 01	adc #$0100			adc 	#Block_ProgramStart 		; so run from here.
.0111ee					_FRun_NextLineNumber:
.0111ee	a8		tay				tay 								; put in Y
.0111ef	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0111f2	f0 ef		beq $0111e3			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0111f4	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0111f7	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0111f9	98		tya				tya 								; get address back
.0111fa	18		clc				clc 								; skip over the link/line number
.0111fb	69 04 00	adc #$0004			adc 	#4
.0111fe	85 06		sta $06				sta 	DCodePtr
.011200					_FRun_NextInstruction:
.011200	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.011202	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.011204	f0 32		beq $011238			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.011206	c9 24 32	cmp #$3224			cmp 	#colonTokenID 				; colon then skip
.011209	f0 18		beq $011223			beq 	_FRun_Colon
.01120b	a8		tay				tay 								; save in Y
.01120c	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.01120f	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.011212	d0 15		bne $011229			bne 	_FRun_TryLET 				; if not, try LET as a default.
.011214	98		tya				tya 								; get token back
.011215	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.011218	0a		asl a				asl 	a 							; double it into X
.011219	aa		tax				tax
.01121a	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.01121c	e6 06		inc $06				inc 	DCodePtr
.01121e	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011221	80 dd		bra $011200			bra 	_FRun_NextInstruction 		; do the following instruction.
.011223					_FRun_Colon:
.011223	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011225	e6 06		inc $06				inc 	DCodePtr
.011227	80 d7		bra $011200			bra 	_FRun_NextInstruction 		; do the following instruction.
.011229					_FRun_TryLET:
.011229	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.01122b	c9 00 c0	cmp #$c000			cmp 	#$C000
.01122e	90 05		bcc $011235			bcc		_FRunSyntax 				; no, must be syntax.
.011230	20 f4 0c	jsr $010cf4			jsr 	Function_LET 				; try as a LET.
.011233	80 cb		bra $011200			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011235					_FRunSyntax:
.011235	82 50 f2	brl $010488			brl 	SyntaxError
.011238					_FRun_EndInstruction:
.011238	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01123a	1a		inc a				inc 	a 							; go to link for next line
.01123b	1a		inc a				inc 	a
.01123c	80 b0		bra $0111ee			bra 	_FRun_NextLineNumber
.01123e					Function_CLEAR:
.01123e	20 4a 12	jsr $01124a			jsr 	ClearVariablesPointersAndStacks
.011241	60		rts				rts
.011242					Function_STOP:
.011242	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011245	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01124a					ClearVariablesPointersAndStacks:
.01124a	a9 80 00	lda #$0080			lda 	#BASStack
.01124d	85 2a		sta $2a				sta 	DStack
.01124f	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011251	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011254	a9 00 00	lda #$0000			lda 	#$0000
.011257	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011259	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01125b	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01125e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011260	20 87 12	jsr $011287			jsr 	FindCodeEnd 				; find where the program ends.
.011263	a8		tay				tay 								; Y points to it.
.011264	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011267	99 02 00	sta $0002,y			sta 	$0002,y
.01126a	99 04 00	sta $0004,y			sta 	$0004,y
.01126d	98		tya				tya 								; start of working memory up
.01126e	18		clc				clc
.01126f	69 06 00	adc #$0006			adc 	#6
.011272	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011275	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011277	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01127a					_FCLoop:
.01127a	a9 00 00	lda #$0000			lda 	#$0000
.01127d	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01127f	c8		iny				iny
.011280	c8		iny				iny
.011281	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011284	d0 f4		bne $01127a			bne 	_FCLoop
.011286	60		rts				rts
.011287					FindCodeEnd:
.011287	a9 00 01	lda #$0100			lda 	#Block_ProgramStart 		; offset to program
.01128a	18		clc				clc
.01128b	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01128d	a8		tay				tay
.01128e					_FCELoop:
.01128e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011291	f0 08		beq $01129b			beq 	_FCEExit
.011293	98		tya				tya 								; add offset
.011294	18		clc				clc
.011295	79 00 00	adc $0000,y			adc 	$0000,y
.011298	a8		tay				tay
.011299	80 f3		bra $01128e			bra 	_FCELoop
.01129b					_FCEExit:
.01129b	98		tya				tya 								; return in A
.01129c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.01129d					Function_Dim:
.01129d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01129f	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.0112a2	f0 3b		beq $0112df			beq		_FDIMNotArray 				; no, error.
.0112a4	20 49 03	jsr $010349			jsr 	VariableFind 				; try to find it.
.0112a7	b0 41		bcs $0112ea			bcs 	_FDIMExists 				; if it does, that's an error.
.0112a9	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.0112ab	48		pha				pha
.0112ac	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0112ae	48		pha				pha
.0112af					_FDIMSkip:
.0112af	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0112b1	e6 06		inc $06				inc 	DCodePtr
.0112b3	e6 06		inc $06				inc 	DCodePtr
.0112b5	29 00 08	and #$0800			and 	#IDContMask
.0112b8	d0 f5		bne $0112af			bne 	_FDIMSkip
.0112ba	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; evaluate the size
.0112bd	20 b2 04	jsr $0104b2			jsr 	ExpectRightBracket 			; check the ) following.
.0112c0	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0112c3	d0 3b		bne $011300			bne 	_FDIMSize
.0112c5	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0112c8	f0 36		beq $011300			beq 	_FDIMSize
.0112ca	7a		ply				ply 								; restore HashTablePtr
.0112cb	84 20		sty $20				sty 	DHashTablePtr
.0112cd	7a		ply				ply 								; so now A is the high index, Y points to the token
.0112ce	20 f3 03	jsr $0103f3			jsr 	VariableCreate 				; create the variable.
.0112d1	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0112d3	c9 22 32	cmp #$3222			cmp 	#commaTokenID 				; if not a comma, exit
.0112d6	d0 06		bne $0112de			bne 	_FDIMExit
.0112d8	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0112da	e6 06		inc $06				inc 	DCodePtr
.0112dc	80 bf		bra $01129d			bra 	Function_DIM 				; and do another
.0112de					_FDIMExit:
.0112de	60		rts				rts
.0112df					_FDIMNotArray:
.0112df	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0112e2	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0112ea					_FDIMExists:
.0112ea	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0112ed	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0112f5	65 64 69 6d 65 6e 73 69 6f 6e 00
.011300					_FDIMSize:
.011300	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>011303	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>01130b	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011311					Function_COLLECT:
.011311	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011313	85 0c		sta $0c				sta 	DTemp2
.011315	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.011318	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.01131a	85 0e		sta $0e				sta 	DTemp2+2
.01131c	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.01131e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011320					_FCNextPass:
.011320	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011322	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011324	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011326	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.011329	18		clc				clc
.01132a	65 02		adc $02				adc 	DBaseAddress
.01132c	a8		tay				tay 								; put in Y
.01132d	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011330					_FCO1:
.011330	20 56 13	jsr $011356			jsr  	COLLECTScanVariable 		; scan that one.
.011333	c8		iny				iny 	 							; go to next pointer
.011334	c8		iny				iny
.011335	ca		dex				dex
.011336	d0 f8		bne $011330			bne 	_FCO1 						; until done all 16.
.011338	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01133b					_FCO2:
.01133b	20 6a 13	jsr $01136a			jsr  	COLLECTScanArray 			; scan that one.
.01133e	c8		iny				iny 	 							; go to next pointer
.01133f	c8		iny				iny
.011340	ca		dex				dex
.011341	d0 f8		bne $01133b			bne 	_FCO2 						; until done all 16.
.011343	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011345	f0 0e		beq $011355			beq		_FCExit 					; if finished then exit.
.011347	48		pha				pha 								; save the target address
.011348	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01134a	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01134c	20 7d 05	jsr $01057d			jsr 	StringMakeConcrete 			; make the string concrete.
.01134f	7a		ply				ply 								; restore the string.
.011350	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011353	80 cb		bra $011320			bra		_FCNextPass
.011355					_FCExit:
.011355	60		rts				rts
.011356					COLLECTScanVariable:
.011356	da		phx				phx 								; save XY
.011357	5a		phy				phy
.011358					_CSVLoop:
.011358	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01135b	f0 0a		beq $011367			beq 	_CSVExit
.01135d	a8		tay				tay 								; put new address into Y
.01135e	18		clc				clc 								; which is four on.
.01135f	69 04 00	adc #$0004			adc 	#4
.011362	20 8b 13	jsr $01138b			jsr 	COLLECTCheck
.011365	80 f1		bra $011358			bra 	_CSVLoop
.011367					_CSVExit:
.011367	7a		ply				ply
.011368	fa		plx				plx
.011369	60		rts				rts
.01136a					COLLECTScanArray:
.01136a	da		phx				phx 								; save XY
.01136b	5a		phy				phy
.01136c					_CSALoop:
.01136c	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01136f	f0 17		beq $011388			beq 	_CSAExit
.011371	a8		tay				tay 								; put new address in Y
.011372	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011375	aa		tax				tax
.011376	e8		inx				inx									; +1 as one more data element.
.011377	98		tya				tya 								; point A to first element, at +6
.011378	18		clc				clc
.011379	69 06 00	adc #$0006			adc 	#6
.01137c					_CSADoAllStrings:
.01137c	20 8b 13	jsr $01138b			jsr 	COLLECTCheck 				; collect check the first.
.01137f	1a		inc a				inc 	a 							; advance the pointer.
.011380	1a		inc a				inc 	a
.011381	1a		inc a				inc 	a
.011382	1a		inc a				inc 	a
.011383	ca		dex				dex
.011384	d0 f6		bne $01137c			bne 	_CSADoAllStrings 			; until all strings are done.
.011386	80 e4		bra $01136c			bra 	_CSALoop
.011388					_CSAExit:
.011388	7a		ply				ply
.011389	fa		plx				plx
.01138a	60		rts				rts
.01138b					COLLECTCheck:
.01138b	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.01138d	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.01138f	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011391	90 0a		bcc $01139d			bcc 	_COCExit
.011393	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011395	b0 06		bcs $01139d			bcs 	_COCExit
.011397	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.011399	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01139b	85 14		sta $14				sta 	DSignCount
.01139d					_COCExit:
.01139d	a5 0a		lda $0a				lda 	DTemp1+2
.01139f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.0113a0					Command_POKE:
.0113a0	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.0113a3	48		pha				pha	 								; save on stack
.0113a4	5a		phy				phy
.0113a5	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.0113a8	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.0113ab	fa		plx				plx 								; pull address and store in DTemp1
.0113ac	86 0a		stx $0a				stx 	DTemp1+2
.0113ae	fa		plx				plx
.0113af	86 08		stx $08				stx 	DTemp1+0
.0113b1	e2 20		sep #$20			sep 	#$20 						; byte mode
.0113b3	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0113b5	c2 20		rep #$20			rep 	#$20 						; word mode
.0113b7	60		rts				rts
.0113b8					Command_DOKE:
.0113b8	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.0113bb	48		pha				pha	 								; save on stack
.0113bc	5a		phy				phy
.0113bd	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.0113c0	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.0113c3	fa		plx				plx 								; pull address and store in DTemp1
.0113c4	86 0a		stx $0a				stx 	DTemp1+2
.0113c6	fa		plx				plx
.0113c7	86 08		stx $08				stx 	DTemp1+0
.0113c9	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0113cb	60		rts				rts
.0113cc					Command_LOKE:
.0113cc	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; address
.0113cf	48		pha				pha	 								; save on stack
.0113d0	5a		phy				phy
.0113d1	20 bb 04	jsr $0104bb			jsr 	ExpectComma 				; comma seperator.
.0113d4	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; data
.0113d7	fa		plx				plx 								; pull address and store in DTemp1
.0113d8	86 0a		stx $0a				stx 	DTemp1+2
.0113da	fa		plx				plx
.0113db	86 08		stx $08				stx 	DTemp1+0
.0113dd	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0113df	98		tya				tya
.0113e0	a0 02 00	ldy #$0002			ldy 	#2
.0113e3	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0113e5	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0113e6					Function_ASSERT:
.0113e6	20 ca 02	jsr $0102ca			jsr 	EvaluateInteger 			; something that returns an integer.
.0113e9	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0113eb	05 08		ora $08				ora 	Dtemp1
.0113ed	f0 01		beq $0113f0			beq 	_FAssFail
.0113ef	60		rts				rts
.0113f0					_FAssFail:
.0113f0	20 4d 04	jsr $01044d			jsr 	ErrorHandler 						; call error routine
>0113f3	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0113fb	61 69 6c 65 64 00
.011401					Function_CLS:
.011401	20 2c 14	jsr $01142c			jsr 	HWClearScreen
.011404	60		rts				rts
.011405					Function_REM:
.011405	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.011407	f0 0b		beq $011414			beq 	_FRemSyntax 				; if 0, syntax error
.011409	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.01140c	b0 06		bcs $011414			bcs 	_FRemSyntax
.01140e	18		clc				clc 								; add to DCodePtr
.01140f	65 06		adc $06				adc 	DCodePtr
.011411	85 06		sta $06				sta 	DCodePtr
.011413	60		rts				rts
.011414					_FRemSyntax:
.011414	82 71 f0	brl $010488			brl 	SyntaxError

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011417					SwitchBasicInstance:
.011417	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011419	20 2c 14	jsr $01142c			jsr 	HWClearScreen 						; clear screen
.01141c	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.01141f	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011421	86 02		stx $02				stx		DBaseAddress
.011423	84 04		sty $04				sty 	DHighAddress
.011425	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011426	48		pha				pha 										; then copy it into B.
.011427	ab		plb				plb
.011428	ab		plb				plb
.011429	4c e5 11	jmp $0111e5			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/hwinterface.asm

=$01					HWCursorCharacter = $01
=64					sWidth = 64									; this have to be powers of two in this really simple I/O code.
=32					sHeight = 32
.01142c					HWClearScreen:
.01142c	48		pha				pha
.01142d	da		phx				phx
.01142e	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011431	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011434	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011438	ca		dex				dex
.011439	10 f6		bpl $011431			bpl 	_CS0
.01143b	64 28		stz $28				stz 	DCursor
.01143d	a9 01 20	lda #$2001			lda 	#$2000+HWCursorCharacter
.011440	8f 00 00 0f	sta $0f0000			sta 	$F0000
.011444	fa		plx				plx
.011445	68		pla				pla
.011446	60		rts				rts
.011447					HWPrintChar:
.011447	48		pha				pha
.011448	da		phx				phx
.011449	a6 28		ldx $28				ldx 	DCursor
.01144b	e2 20		sep #$20			sep 	#$20
.01144d	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011451	c2 20		rep #$20			rep 	#$20
.011453	e8		inx				inx
.011454	8a		txa				txa
.011455	29 ff 07	and #$07ff			and 	#(sWidth*sHeight-1)
.011458	85 28		sta $28				sta 	DCursor
.01145a	aa		tax				tax
.01145b	a9 01 00	lda #$0001			lda 	#HWCursorCharacter
.01145e	e2 20		sep #$20			sep 	#$20
.011460	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011464	c2 20		rep #$20			rep 	#$20
.011466	fa		plx				plx
.011467	68		pla				pla
.011468	60		rts				rts
.011469					HWNewLine:
.011469	48		pha				pha
.01146a	da		phx				phx
.01146b	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.01146e					HWMoveCursor:
.01146e	a9 20 00	lda #$0020			lda 	#32
.011471	20 47 14	jsr $011447			jsr 	HWPrintChar
.011474	8a		txa				txa
.011475	25 28		and $28				and 	DCursor
.011477	d0 f5		bne $01146e			bne 	HWMoveCursor
.011479	fa		plx				plx
.01147a	68		pla				pla
.01147b	60		rts				rts
.01147c	48		pha		HWTab:	pha
.01147d	da		phx				phx
.01147e	a2 07 00	ldx #$0007			ldx 	#7
.011481	80 eb		bra $01146e			bra 	HWMoveCursor

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	0e 43 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>0240f8	00 00 00 00 00 00 00 00 1e 00 0a 00 2a 3e 16 00
>024108	13 50 4f 4b 45 20 4c 4f 4b 45 20 44 4f 4b 45 20
>024118	74 65 73 74 00 00 20 00 0f 00 01 e0 06 22 0a 00
>024128	06 48 65 6c 6c 6f 20 00 0a 24 0a 00 07 20 57 6f
>024138	72 6c 64 21 00 00 26 00 11 00 34 3e 06 00 02 3e
>024148	3e 00 23 32 1e 30 01 e0 26 32 0a 24 06 00 03 2e
>024158	2e 2e 0a 24 1d 30 01 e0 26 32 00 00 22 00 14 00
>024168	34 3e 08 00 04 34 20 20 5b 00 23 32 1f 30 01 e0
>024178	22 32 04 40 26 32 23 32 04 00 01 5d 00 00 22 00
>024188	15 00 34 3e 08 00 04 32 30 20 5b 00 23 32 1f 30
>024198	01 e0 22 32 14 40 26 32 23 32 04 00 01 5d 00 00
>0241a8	22 00 16 00 34 3e 08 00 04 30 20 20 5b 00 23 32
>0241b8	1f 30 01 e0 22 32 00 40 26 32 23 32 04 00 01 5d
>0241c8	00 00 06 00 17 00 00 00 22 00 1e 00 34 3e 08 00
>0241d8	04 34 20 20 5b 00 23 32 21 30 01 e0 22 32 04 40
>0241e8	26 32 23 32 04 00 01 5d 00 00 22 00 1f 00 34 3e
>0241f8	08 00 04 32 30 20 5b 00 23 32 21 30 01 e0 22 32
>024208	14 40 26 32 23 32 04 00 01 5d 00 00 22 00 20 00
>024218	34 3e 08 00 04 30 20 20 5b 00 23 32 21 30 01 e0
>024228	22 32 00 40 26 32 23 32 04 00 01 5d 00 00 06 00
>024238	21 00 00 00 08 00 64 00 2f 3e 00 00 06 00 65 00
>024248	00 00 1c 00 7d 00 b5 c8 2e c3 06 22 02 40 0c 26
>024258	02 10 00 40 0a 24 04 40 0c 26 00 50 00 00 0a 00
>024268	82 00 36 3e 82 40 00 00 08 00 a0 00 34 3e 00 00
>024278	16 00 aa 00 3c 3e b5 c8 2e c3 0a 24 02 40 22 32
>024288	0b 24 2a 40 00 00 0a 00 b4 00 36 3e e6 40 00 00
>024298	08 00 be 00 2f 3e 00 00 16 00 c8 00 2a 3e 0e 00
>0242a8	0b 44 69 73 70 6c 61 79 20 52 41 4d 00 00 12 00
>0242b8	e6 00 40 3c 41 c4 06 22 00 40 28 32 08 40 00 00
>0242c8	2e 00 f0 00 34 3e 16 30 41 c4 0a 24 b5 c8 2e c3
>0242d8	22 32 10 40 26 32 22 32 16 30 1a 30 41 c4 0a 24
>0242e8	b5 c8 2e c3 26 32 22 32 10 40 26 32 00 00 0a 00
>0242f8	fa 00 45 3a 41 c4 00 00 08 00 04 01 37 3e 00 00
>024308	00 00 ee ee ee ee 00 00 00 00 00 00 00 00 00 00
>024318	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1997 times (31952 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
