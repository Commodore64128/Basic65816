
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Mon Jun 17 09:33:24 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c f8 1a 01	jmp $011af8			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$000e					Block_BootFlag = $000e
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8f 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	53 09					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	63 09					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	73 09					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	b7 09					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	1e 0a					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	83 09					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	00 0a					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	e2 09					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	9d 09					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	9d 08					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	1e 09					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	2a 0b					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	a7 0a					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	1e 0b					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	2f 09					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	41 09					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	b8 0b					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	98 0b					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	74 0b					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	5e 0b					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	d2 0d					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	f2 0e					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	f2 0b					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	2a 0c					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	5e 0c					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	86 0d					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	a0 0d					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	b7 0d					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	5b 10					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	19 10					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	9a 0c					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	31 0d					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	c3 0c					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	b2 0f					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8f 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8f 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8f 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8f 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8f 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8f 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8f 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8f 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	f8 19					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	9d 10					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	d9 19					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	b1 17					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	b3 17					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	33 18					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	2f 18					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	90 18					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	04 19					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	f4 19					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	3d 13					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	3f 16					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	9e 16					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	ba 16					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	fc 15					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	f0 13					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	93 19					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	ab 19					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	bf 19					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	18 11					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	0a 1a					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	ec 16					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	4a 17					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	89 13					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	c5 14					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	81 17					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	03 17					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8f 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	1e 14					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	40 15					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=58					DStack65816 = DPBaseAddress + 58 			; 65816 Stack pointer.
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 32 02	brl $0104a0			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c a0 04	jmp $0104a0			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0c 05	jsr $01050c			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 8a 04	ldx #$048a			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0c 05	jsr $01050c			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 0d 0f	jsr $010f0d			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 2a 05	jsr $01052a			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 c9 1a	jsr $011ac9			jsr 	HWNewLine
.010487	4c 24 1b	jmp $011b24			jmp 	NextCommand 				; get next command.
>01048a	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048f					IllegalToken:
.01048f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010492	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>01049a	54 6f 6b 65 6e 00
.0104a0					SyntaxError:
.0104a0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a3	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104ab	72 72 6f 72 00
.0104b0					ExpectToken:
.0104b0	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b2	d0 05		bne $0104b9			bne 	_CTKError					; error if not
.0104b4	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b6	e6 06		inc $06				inc 	DCodePtr
.0104b8	60		rts				rts
.0104b9					_CTKError:
.0104b9	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bc	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c4	74 6f 6b 65 6e 00
.0104ca					ExpectRightBracket:
.0104ca	48		pha				pha
.0104cb	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104ce	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.0104d1	68		pla				pla
.0104d2	60		rts				rts
.0104d3					ExpectComma:
.0104d3	48		pha				pha
.0104d4	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d7	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.0104da	68		pla				pla
.0104db	60		rts				rts
.0104dc					CheckBothNumeric:
.0104dc	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104de	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104e0	30 01		bmi $0104e3			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e2	60		rts				rts
.0104e3					_CBNFail:
.0104e3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e6	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ee	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fc					ResetTypeInteger:
.0104fc	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fe	29 ff 7f	and #$7fff			and 	#$7FFF
.010501	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010503	60		rts				rts
.010504					ResetTypeString:
.010504	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010506	09 00 80	ora #$8000			ora 	#$8000
.010509	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050b	60		rts				rts
.01050c					PrintROMMessage:
.01050c	48		pha				pha
.01050d	da		phx				phx
.01050e					_PRMLoop:
.01050e	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010512	29 ff 00	and #$00ff			and 	#$00FF
.010515	f0 10		beq $010527			beq 	_PRMExit
.010517	c9 0d 00	cmp #$000d			cmp 	#13
.01051a	d0 05		bne $010521			bne 	_PRMChar
.01051c	20 c9 1a	jsr $011ac9			jsr 	HWNewLine
.01051f	80 03		bra $010524			bra 	_PRMNext
.010521					_PRMChar:
.010521	20 66 1a	jsr $011a66			jsr 	HWPrintChar
.010524					_PRMNext:
.010524	e8		inx				inx
.010525	80 e7		bra $01050e			bra 	_PRMLoop
.010527					_PRMExit:
.010527	fa		plx				plx
.010528	68		pla				pla
.010529	60		rts				rts
.01052a					PrintBASICString:
.01052a	48		pha				pha
.01052b	da		phx				phx
.01052c	5a		phy				phy
.01052d	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010530	29 ff 00	and #$00ff			and 	#$00FF
.010533	f0 0b		beq $010540			beq 	_PBSExit 					; null string
.010535	aa		tax				tax
.010536					_PBSLoop:
.010536	c8		iny				iny
.010537	b9 00 00	lda $0000,y			lda 	$0000,y
.01053a	20 66 1a	jsr $011a66			jsr 	HWPrintChar
.01053d	ca		dex				dex
.01053e	d0 f6		bne $010536			bne 	_PBSLoop
.010540					_PBSExit:
.010540	7a		ply				ply
.010541	fa		plx				plx
.010542	68		pla				pla
.010543	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010544					StringTempAllocate:
.010544	48		pha				pha
.010545	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.010547	d0 09		bne $010552			bne 	_STANoReset
.010549	5a		phy				phy 								; reset the temp string pointer.
.01054a	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01054d	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.01054f	85 16		sta $16				sta 	DTempStringPointer
.010551	7a		ply				ply
.010552					_STANoReset:
.010552	68		pla				pla 								; get length.
.010553	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.010556	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.010559	18		clc				clc 								; this adds one, for the length.
.01055a	65 16		adc $16				adc 	DTempStringPointer
.01055c	85 16		sta $16				sta 	DTempStringPointer
.01055e	48		pha				pha 								; save start address
.01055f	a9 00 00	lda #$0000			lda 	#$0000
.010562	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010564	92 16		sta ($16)			sta		(DTempStringPointer)
.010566	c2 20		rep #$20			rep 	#$20
.010568	68		pla				pla 								; restore start address
.010569	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.01056b	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.01056d	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.01056f	60		rts				rts
.010570					StringWriteCharacter:
.010570	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010572	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010574	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.010576	1a		inc a				inc 	a
.010577	92 18		sta ($18)			sta 	(DStartTempString)
.010579	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.01057b	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.01057d	60		rts				rts
.01057e					StringCreateCopy:
.01057e	a8		tay				tay 								; put pointer to string in Y
.01057f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010582	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.010585	f0 17		beq $01059e			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.010587	da		phx				phx 								; save X and put the character count in X
.010588	aa		tax				tax
.010589					_SCCCopy:
.010589	c8		iny				iny 								; advance and read (first time skips length)
.01058a	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.01058c	b9 00 00	lda $0000,y			lda 	$0000,y
.01058f	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010591	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010593	1a		inc a				inc 	a
.010594	92 18		sta ($18)			sta 	(DStartTempString)
.010596	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.010598	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01059a	ca		dex				dex 								; do X times
.01059b	d0 ec		bne $010589			bne 	_SCCCopy
.01059d	fa		plx				plx
.01059e					_SCCExit:
.01059e	60		rts				rts
.01059f					StringMakeConcrete:
.01059f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.0105a2	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.0105a4	90 0f		bcc $0105b5			bcc 	_SMCExit
.0105a6	85 08		sta $08				sta 	DTemp1 						; source
.0105a8	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.0105aa	29 ff 00	and #$00ff			and 	#$00FF
.0105ad	d0 07		bne $0105b6			bne 	_SMCNonZero 				; if not "" skip.
.0105af	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105b2	18		clc				clc 								; this reference is used for all empty strings.
.0105b3	65 02		adc $02				adc 	DBaseAddress
.0105b5					_SMCExit:
.0105b5	60		rts				rts
.0105b6					_SMCNonZero:
.0105b6	48		pha				pha 								; save on stack.
.0105b7	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105ba	18		clc				clc
.0105bb	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105be	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105c0	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105c2	85 0c		sta $0c				sta 	DTemp2 						; target
.0105c4	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105c5	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105c7					_SMCLoop:
.0105c7	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105c9	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105cb	88		dey				dey 								; Y+1 times.
.0105cc	10 f9		bpl $0105c7			bpl 	_SMCLoop
.0105ce	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105d0	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105d2	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.0105d3					Tokenise:
.0105d3	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0105d5	84 0a		sty $0a				sty 	DTemp1+2
.0105d7	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0105da	18		clc				clc
.0105db	65 02		adc $02				adc 	DBaseAddress
.0105dd	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0105df	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0105e2	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0105e5					_TOKCap:
.0105e5	c8		iny				iny 								; go to next
.0105e6	b7 08		lda [$08],y			lda 	[DTemp1],y
.0105e8	29 ff 00	and #$00ff			and 	#$00FF
.0105eb	f0 22		beq $01060f			beq 	_TOKEndCap
.0105ed	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0105f0	d0 01		bne $0105f3			bne 	_TOKNotQuote
.0105f2	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0105f3					_TOKNotQuote:
.0105f3	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0105f6	90 ed		bcc $0105e5			bcc 	_TOKCap
.0105f8	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0105fb	b0 e8		bcs $0105e5			bcs 	_TOKCap
.0105fd	8a		txa				txa 								; check if in quotes
.0105fe	4a		lsr a				lsr 	a
.0105ff	b0 e4		bcs $0105e5			bcs 	_TOKCap
.010601	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.010603	38		sec				sec
.010604	e9 20 00	sbc #$0020			sbc 	#32
.010607	e2 20		sep #$20			sep 	#$20
.010609	97 08		sta [$08],y			sta 	[DTemp1],y
.01060b	c2 20		rep #$20			rep 	#$20
.01060d	80 d6		bra $0105e5			bra 	_TOKCap
.01060f					_TOKEndCap:
.01060f	c6 08		dec $08				dec 	DTemp1
.010611					_TOKMainNext:
.010611	e6 08		inc $08				inc 	DTemp1
.010613					_TOKMainLoop:
.010613	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.010615	29 ff 00	and #$00ff			and 	#$00FF
.010618	c9 20 00	cmp #$0020			cmp 	#32
.01061b	90 1d		bcc $01063a			bcc 	_TOKExit 					; 0-31 exit.
.01061d	f0 f2		beq $010611			beq 	_TOKMainNext 				; 32 (space) skip.
.01061f	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010622	f0 1d		beq $010641			beq 	_TOKString
.010624	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.010627	90 1d		bcc $010646			bcc 	_TOKPunctuation
.010629	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.01062c	90 42		bcc $010670			bcc 	_TOKNumber
.01062e	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010631	90 13		bcc $010646			bcc 	_TOKPunctuation
.010633	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.010636	90 3d		bcc $010675			bcc 	_TOKIdentifier
.010638	80 0c		bra $010646			bra 	_TOKPunctuation 			; 91-   punctuation.
.01063a					_TOKExit:
.01063a	a9 00 00	lda #$0000			lda 	#$0000
.01063d	20 7a 06	jsr $01067a			jsr 	TOKWriteToken
.010640	60		rts				rts
.010641					_TOKString:
.010641	20 18 07	jsr $010718			jsr 	TOKQuotedString
.010644	80 cd		bra $010613			bra 	_TOKMainLoop
.010646					_TOKPunctuation:
.010646	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.010649	20 7f 07	jsr $01077f			jsr 	TOKKeywordSearch
.01064c	b0 1d		bcs $01066b			bcs 	_TOKFoundPunctuation
.01064e	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010651	20 7f 07	jsr $01077f			jsr 	TOKKeywordSearch
.010654	b0 15		bcs $01066b			bcs 	_TOKFoundPunctuation
.010656	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010659	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010661	61 72 73 65 20 6c 69 6e 65 00
.01066b					_TOKFoundPunctuation:
.01066b	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; output the token and go round again.
.01066e	80 a3		bra $010613			bra 	_TOKMainLoop
.010670					_TOKNumber:
.010670	20 99 06	jsr $010699			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010673	80 9e		bra $010613			bra 	_TOKMainLoop
.010675					_TOKIdentifier:
.010675	20 da 07	jsr $0107da			jsr 	TOKIdentifier
.010678	80 99		bra $010613			bra 	_TOKMainLoop
.01067a					TOKWriteToken:
.01067a	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.01067c	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.01067e	e6 0c		inc $0c				inc 	DTemp2
.010680	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010682	29 ff 00	and #$00ff			and 	#$00FF
.010685	f0 01		beq $010688			beq 	_TOKWriteOverflow
.010687	60		rts				rts
.010688					_TOKWriteOverflow:
.010688	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01068b	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010693	20 6c 6f 6e 67 00
.010699					TOKInteger:
.010699	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.01069b	64 26		stz $26				stz 	DTemp3+2
.01069d					_TOKINLoop:
.01069d	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.01069f	48		pha				pha
.0106a0	a5 24		lda $24				lda 	DTemp3
.0106a2	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.0106a4	26 26		rol $26				rol 	DTemp3+2
.0106a6	06 24		asl $24				asl 	DTemp3
.0106a8	26 26		rol $26				rol 	DTemp3+2
.0106aa	18		clc				clc
.0106ab	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0106ad	85 24		sta $24				sta 	DTemp3
.0106af	68		pla				pla
.0106b0	65 26		adc $26				adc 	DTemp3+2
.0106b2	85 26		sta $26				sta 	DTemp3+2
.0106b4	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0106b6	26 26		rol $26				rol 	DTemp3+2
.0106b8	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0106ba	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0106bd	d0 44		bne $010703			bne 	_TOKINSize
.0106bf	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0106c1	29 0f 00	and #$000f			and 	#15
.0106c4	18		clc				clc
.0106c5	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0106c7	85 24		sta $24				sta 	DTemp3
.0106c9	90 02		bcc $0106cd			bcc 	_TOKINNoCarry
.0106cb	e6 26		inc $26				inc 	DTemp3+2
.0106cd					_TOKINNoCarry:
.0106cd	e6 08		inc $08				inc 	DTemp1 						; look at next
.0106cf	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0106d1	29 ff 00	and #$00ff			and 	#$00FF
.0106d4	c9 30 00	cmp #$0030			cmp 	#"0"
.0106d7	90 05		bcc $0106de			bcc 	_TOKINGotInteger
.0106d9	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0106dc	90 bf		bcc $01069d			bcc		_TOKINLoop
.0106de					_TOKINGotInteger:
.0106de	a5 24		lda $24				lda 	DTemp3 						; lower word
.0106e0	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0106e3	18		clc				clc
.0106e4	69 00 40	adc #$4000			adc 	#$4000
.0106e7	48		pha				pha 								; save it.
.0106e8	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0106ea	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0106ec	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0106ee	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0106f1	b0 10		bcs $010703			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0106f3	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0106f6	f0 06		beq $0106fe			beq 	_TOKINNoShift 				; don't need constant shift.
.0106f8	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0106fb	20 7a 06	jsr $01067a			jsr 	TOKWriteToken
.0106fe					_TOKINNoShift:
.0106fe	68		pla				pla 								; get lower its token
.0106ff	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; output it
.010702	60		rts				rts
.010703					_TOKINSize:
.010703	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010706	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>01070e	74 6f 6f 20 6c 61 72 67 65 00
.010718					TOKQuotedString:
.010718	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.01071a	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.01071c	85 32		sta $32				sta 	DTemp4
.01071e	a5 0a		lda $0a				lda 	DTemp1+2
.010720	85 34		sta $34				sta 	DTemp4+2
.010722					_TOKQFindSize:
.010722	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010724	e6 08		inc $08				inc 	DTemp1
.010726	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.010729	f0 3b		beq $010766			beq 	_TOQImbalance 				; end of line, and no quote found.
.01072b	c9 22 00	cmp #$0022			cmp 	#34
.01072e	d0 f2		bne $010722			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010730	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010732	38		sec				sec
.010733	e5 32		sbc $32				sbc 	DTemp4
.010735	3a		dec a				dec 	a 							; one less character for closing quote
.010736	85 26		sta $26				sta 	DTemp3+2
.010738	18		clc				clc
.010739	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.01073c	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.01073f	20 7a 06	jsr $01067a			jsr 	TOKWriteToken
.010742	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010744	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; effectively a byte-write.
.010747	c6 0c		dec $0c				dec 	DTemp2
.010749	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.01074b	f0 0f		beq $01075c			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.01074d					_TOKQWriteString:
.01074d	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.01074f	29 ff 00	and #$00ff			and 	#$00FF
.010752	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; effectively a byte-write.
.010755	c6 0c		dec $0c				dec 	DTemp2
.010757	e6 32		inc $32				inc 	DTemp4 						; advance character
.010759	ca		dex				dex 								; do X times
.01075a	d0 f1		bne $01074d			bne 	_TOKQWriteString
.01075c					_TOKQWriteEnd:
.01075c	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.01075e	29 01 00	and #$0001			and 	#1
.010761	f0 02		beq $010765			beq 	_TOKQExit
.010763	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.010765					_TOKQExit:
.010765	60		rts				rts
.010766					_TOQImbalance:
.010766	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010769	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010771	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.01077f					TOKKeywordSearch:
.01077f	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010781	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010784	85 34		sta $34				sta 	DTemp4+2
.010786	a2 00 00	ldx #$0000			ldx 	#0
.010789					_TOKScan:
.010789	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; read the first byte
.01078d	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010790	f0 46		beq $0107d8			beq 	_TOKFail 					; if zero then we have failed.
.010792	3a		dec a				dec 	a 							; -1 gives the length.
.010793	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.010795	d0 2f		bne $0107c6			bne 	_TOKNext 					; no, then skip to next token.
.010797	da		phx				phx 								; save X
.010798	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.01079b					_TOKCompare:
.01079b	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.01079d	5f 93 00 01	eor $010093,x			eor 	TokenText+1,x
.0107a1	29 ff 00	and #$00ff			and 	#$00FF
.0107a4	d0 1f		bne $0107c5			bne 	_TOKPopNext 				; if different, pop and goto next.
.0107a6	e8		inx				inx 								; bump X and Y.
.0107a7	c8		iny				iny
.0107a8	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.0107aa	d0 ef		bne $01079b			bne 	_TOKCompare
.0107ac	98		tya				tya 								; add length to the text pointer
.0107ad	18		clc				clc
.0107ae	65 08		adc $08				adc 	DTemp1
.0107b0	85 08		sta $08				sta 	DTemp1
.0107b2	fa		plx				plx 								; restore X.
.0107b3	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the type/token bit.
.0107b7	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0107ba	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0107bb	4a		lsr a				lsr		a
.0107bc	4a		lsr a				lsr 	a
.0107bd	eb		xba				xba
.0107be	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0107c0	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0107c3	38		sec				sec
.0107c4	60		rts				rts
.0107c5					_TOKPopNext:
.0107c5	fa		plx				plx 								; restore X.
.0107c6					_TOKNext:
.0107c6	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the token skip again.
.0107ca	29 0f 00	and #$000f			and 	#$000F
.0107cd	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0107cf	8a		txa				txa
.0107d0	18		clc				clc
.0107d1	65 14		adc $14				adc 	DSignCount
.0107d3	aa		tax				tax
.0107d4	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0107d6	80 b1		bra $010789			bra 	_TOKScan
.0107d8					_TOKFail:
.0107d8	18		clc				clc
.0107d9	60		rts				rts
.0107da					TOKIdentifier:
.0107da	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0107dc	85 24		sta $24				sta 	DTemp3
.0107de					_TOKIFindLength:
.0107de	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0107e0	a7 08		lda [$08]			lda 	[DTemp1]
.0107e2	29 ff 00	and #$00ff			and 	#$00FF
.0107e5	20 85 08	jsr $010885			jsr 	TOKIsIdentifierCharacter
.0107e8	b0 f4		bcs $0107de			bcs 	_TOKIFindLength
.0107ea	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0107ec	38		sec				sec
.0107ed	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0107ef	85 36		sta $36				sta 	DTemp5
.0107f1	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0107f3	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0107f6	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0107f8	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0107fa	29 ff 00	and #$00ff			and 	#$00FF
.0107fd	c9 24 00	cmp #$0024			cmp 	#"$"
.010800	d0 0b		bne $01080d			bne 	_TOKINotString
.010802	e6 08		inc $08				inc 	DTemp1 						; skip $
.010804	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010806	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.010808	09 00 20	ora #$2000			ora 	#IDTypeMask
.01080b	85 26		sta $26				sta 	DTemp3+2
.01080d					_TOKINotString:
.01080d	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.01080f	29 ff 00	and #$00ff			and 	#$00FF
.010812	c9 28 00	cmp #$0028			cmp 	#"("
.010815	d0 0b		bne $010822			bne 	_TOKINotArray
.010817	e6 08		inc $08				inc 	DTemp1 						; skip (
.010819	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.01081b	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.01081d	09 00 10	ora #$1000			ora 	#IDArrayMask
.010820	85 26		sta $26				sta 	DTemp3+2
.010822					_TOKINotArray:
.010822	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010824	85 08		sta $08				sta 	DTemp1
.010826	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.010828	20 7f 07	jsr $01077f			jsr 	TOKKeywordSearch
.01082b	90 04		bcc $010831			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.01082d	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; if CS write token and exit.
.010830	60		rts				rts
.010831					_TOKIIdentifier:
.010831	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010833	e6 08		inc $08				inc 	DTemp1
.010835	20 71 08	jsr $010871			jsr		_TOKIToConstant 			; convert to range 0-35
.010838	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.01083a	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.01083c	f0 1d		beq $01085b			beq 	_TOKINoSecond
.01083e	48		pha				pha 								; save current on stack.
.01083f	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010841	e6 08		inc $08				inc 	DTemp1
.010843	20 71 08	jsr $010871			jsr		_TOKIToConstant 			; convert to range 0-35
.010846	85 14		sta $14				sta 	DSignCount 					; save it.
.010848	0a		asl a				asl 	a 							; x 4
.010849	0a		asl a				asl 	a
.01084a	65 14		adc $14				adc 	DSignCount 					; x 5
.01084c	0a		asl a				asl 	a 							; x 10
.01084d	65 14		adc $14				adc 	DSignCount 					; x 11
.01084f	0a		asl a				asl 	a 							; x 22
.010850	0a		asl a				asl 	a 							; x 44
.010851	65 14		adc $14				adc 	DSignCount 					; x 45
.010853	85 14		sta $14				sta 	DSignCount
.010855	68		pla				pla 								; get old token and add x 45
.010856	18		clc				clc
.010857	65 14		adc $14				adc 	DSignCount
.010859	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.01085b					_TOKINoSecond:
.01085b	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.01085d	f0 03		beq $010862			beq 	_TOKINotLast				; if yes
.01085f	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010862					_TOKINotLast:
.010862	20 7a 06	jsr $01067a			jsr 	TOKWriteToken 				; output the token
.010865	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.010867	d0 c8		bne $010831			bne 	_TOKIIdentifier
.010869					_TOKIOut:
.010869	a5 24		lda $24				lda 	DTemp3 						; get original start position
.01086b	18		clc				clc
.01086c	65 38		adc $38				adc 	DTemp5+2					; add overall length
.01086e	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010870	60		rts				rts
.010871					_TOKIToConstant:
.010871	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010874	c9 41 00	cmp #$0041			cmp 	#65
.010877	90 04		bcc $01087d			bcc 	_TOKITInteger
.010879	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.01087c	60		rts				rts
.01087d					_TOKITInteger:
.01087d	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010880	18		clc				clc
.010881	69 1b 00	adc #$001b			adc 	#27
.010884	60		rts				rts
.010885					TOKIsIdentifierCharacter:
.010885	c9 30 00	cmp #$0030			cmp 	#"0"
.010888	90 0f		bcc $010899			bcc 	_TOKIIFail
.01088a	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.01088d	90 0c		bcc $01089b			bcc 	_TOKIIOk
.01088f	c9 41 00	cmp #$0041			cmp 	#"A"
.010892	90 05		bcc $010899			bcc 	_TOKIIFail
.010894	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.010897	90 02		bcc $01089b			bcc 	_TOKIIOk
.010899					_TOKIIFail:
.010899	18		clc				clc
.01089a	60		rts				rts
.01089b					_TOKIIOk:
.01089b	38		sec				sec
.01089c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.01089d					Binary_Add:
.01089d	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.01089f	55 42		eor $42,x		eor 	EXSPrecType+2,x
.0108a1	30 12		bmi $0108b5		bmi 	_BATypeError
.0108a3	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.0108a5	30 3f		bmi $0108e6		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.0108a7	18		clc			clc 										; add the results
.0108a8	b5 00		lda $00,x		lda		EXSValueL+0,x
.0108aa	75 02		adc $02,x		adc 	EXSValueL+2,x
.0108ac	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108ae	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108b0	75 22		adc $22,x		adc 	EXSValueH+2,x
.0108b2	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108b4	60		rts			rts
.0108b5					_BATypeError:
.0108b5	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0108b8	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0108c0	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0108d0	65 73 00
.0108d3					_BALengthError:
.0108d3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0108d6	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0108de	6f 6f 20 6c 6f 6e 67 00
.0108e6					_BAConcatenateString:
.0108e6	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0108e8	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0108ea	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0108ec	85 0c		sta $0c			sta 	DTemp2
.0108ee	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0108f0	18		clc			clc 										; work out the total length
.0108f1	b2 08		lda ($08)		lda 	(DTemp1)
.0108f3	72 0c		adc ($0c)		adc 	(DTemp2)
.0108f5	b0 14		bcs $01090b		bcs 	_BAConcatLengthError 				; string is too long.
.0108f7	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0108f9	20 44 05	jsr $010544		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0108fc	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0108fe	74 20		stz $20,x		stz 	EXSValueH+0,x
.010900	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.010902	20 7e 05	jsr $01057e		jsr 	StringCreateCopy
.010905	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.010907	20 7e 05	jsr $01057e		jsr 	StringCreateCopy
.01090a	60		rts			rts
.01090b					_BAConcatLengthError:
.01090b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01090e	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>010916	6f 6f 20 6c 6f 6e 67 00
.01091e					Binary_Subtract:
.01091e	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010921	38		sec			sec
.010922	b5 00		lda $00,x		lda		EXSValueL+0,x
.010924	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010926	95 00		sta $00,x		sta 	EXSValueL+0,x
.010928	b5 20		lda $20,x		lda		EXSValueH+0,x
.01092a	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.01092c	95 20		sta $20,x		sta 	EXSValueH+0,x
.01092e	60		rts			rts
.01092f					Binary_ShiftRight:
.01092f	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010932	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010934	29 3f 00	and #$003f		and 	#63
.010937	f0 07		beq $010940		beq		_Binary_SRExit
.010939					_Binary_SRLoop:
.010939	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.01093b	76 00		ror $00,x		ror 	EXSValueL+0,x
.01093d	3a		dec a			dec 	a
.01093e	d0 f9		bne $010939		bne 	_Binary_SRLoop
.010940					_Binary_SRExit:
.010940	60		rts			rts
.010941					Binary_ShiftLeft:
.010941	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010944	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010946	29 3f 00	and #$003f		and 	#63
.010949	f0 07		beq $010952		beq		_Binary_SLExit
.01094b					_Binary_SLLoop:
.01094b	16 00		asl $00,x		asl 	EXSValueL+0,x
.01094d	36 20		rol $20,x		rol 	EXSValueH+0,x
.01094f	3a		dec a			dec 	a
.010950	d0 f9		bne $01094b		bne 	_Binary_SLLoop
.010952					_Binary_SLExit:
.010952	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010953					Binary_And:
.010953	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010956	b5 00		lda $00,x		lda		EXSValueL+0,x
.010958	35 02		and $02,x		and 	EXSValueL+2,x
.01095a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01095c	b5 20		lda $20,x		lda		EXSValueH+0,x
.01095e	35 22		and $22,x		and 	EXSValueH+2,x
.010960	95 20		sta $20,x		sta 	EXSValueH+0,x
.010962	60		rts			rts
.010963					Binary_Or:
.010963	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010966	b5 00		lda $00,x		lda		EXSValueL+0,x
.010968	15 02		ora $02,x		ora 	EXSValueL+2,x
.01096a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01096c	b5 20		lda $20,x		lda		EXSValueH+0,x
.01096e	15 22		ora $22,x		ora 	EXSValueH+2,x
.010970	95 20		sta $20,x		sta 	EXSValueH+0,x
.010972	60		rts			rts
.010973					Binary_Xor:
.010973	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010976	b5 00		lda $00,x		lda		EXSValueL+0,x
.010978	55 02		eor $02,x		eor 	EXSValueL+2,x
.01097a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01097c	b5 20		lda $20,x		lda		EXSValueH+0,x
.01097e	55 22		eor $22,x		eor 	EXSValueH+2,x
.010980	95 20		sta $20,x		sta 	EXSValueH+0,x
.010982	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010983					Binary_Equals:
.010983	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010986	b0 0e		bcs $010996		bcs 	_BEString
.010988	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01098a	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01098c	d0 4f		bne $0109dd		bne 	Compare_Fail
.01098e	b5 20		lda $20,x		lda 	EXSValueH,x
.010990	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010992	d0 49		bne $0109dd		bne 	Compare_Fail
.010994	80 3f		bra $0109d5		bra 	Compare_Succeed
.010996					_BEString:
.010996	09 00 00	ora #$0000		ora 	#$0000
.010999	f0 3a		beq $0109d5		beq 	Compare_Succeed
.01099b	80 40		bra $0109dd		bra 	Compare_Fail
.01099d					Binary_NotEquals:
.01099d	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109a0	b0 0e		bcs $0109b0		bcs 	_BNEString
.0109a2	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.0109a4	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.0109a6	d0 2d		bne $0109d5		bne 	Compare_Succeed
.0109a8	b5 20		lda $20,x		lda 	EXSValueH,x
.0109aa	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0109ac	d0 27		bne $0109d5		bne 	Compare_Succeed
.0109ae	80 2d		bra $0109dd		bra 	Compare_Fail
.0109b0					_BNEString:
.0109b0	09 00 00	ora #$0000		ora 	#$0000
.0109b3	d0 20		bne $0109d5		bne 	Compare_Succeed
.0109b5	80 26		bra $0109dd		bra 	Compare_Fail
.0109b7					Binary_Less:
.0109b7	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109ba	b0 12		bcs $0109ce		bcs 	_BLString
.0109bc	38		sec			sec
.0109bd	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0109bf	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109c1	b5 20		lda $20,x		lda 	EXSValueH,x
.0109c3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109c5	50 03		bvc $0109ca		bvc 	*+5
.0109c7	49 00 80	eor #$8000		eor 	#$8000
.0109ca	30 09		bmi $0109d5		bmi 	Compare_Succeed
.0109cc	80 0f		bra $0109dd		bra 	Compare_Fail
.0109ce					_BLString:
.0109ce	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0109d1	f0 02		beq $0109d5		beq 	Compare_Succeed
.0109d3	80 08		bra $0109dd		bra 	Compare_Fail
.0109d5					Compare_Succeed:
.0109d5	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0109d8	95 00		sta $00,x		sta 	EXSValueL,x
.0109da	95 20		sta $20,x		sta 	EXSValueH,x
.0109dc	60		rts			rts
.0109dd					Compare_Fail:
.0109dd	74 00		stz $00,x		stz 	EXSValueL,x
.0109df	74 20		stz $20,x		stz 	EXSValueH,x
.0109e1	60		rts			rts
.0109e2					Binary_GreaterEqual:
.0109e2	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109e5	b0 12		bcs $0109f9		bcs 	_BGEString
.0109e7	38		sec			sec
.0109e8	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0109ea	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109ec	b5 20		lda $20,x		lda 	EXSValueH,x
.0109ee	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109f0	50 03		bvc $0109f5		bvc 	*+5
.0109f2	49 00 80	eor #$8000		eor 	#$8000
.0109f5	10 de		bpl $0109d5		bpl 	Compare_Succeed
.0109f7	80 e4		bra $0109dd		bra 	Compare_Fail
.0109f9					_BGEString:
.0109f9	09 00 00	ora #$0000		ora 	#$0000
.0109fc	10 d7		bpl $0109d5		bpl 	Compare_Succeed
.0109fe	80 dd		bra $0109dd		bra 	Compare_Fail
.010a00					Binary_LessEqual:
.010a00	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a03	b0 12		bcs $010a17		bcs 	_BLEString
.010a05	18		clc			clc 									; numeric <= signed
.010a06	b5 00		lda $00,x		lda 	EXSValueL,x
.010a08	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a0a	b5 20		lda $20,x		lda 	EXSValueH,x
.010a0c	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a0e	50 03		bvc $010a13		bvc 	*+5
.010a10	49 00 80	eor #$8000		eor 	#$8000
.010a13	30 c0		bmi $0109d5		bmi 	Compare_Succeed
.010a15	80 c6		bra $0109dd		bra 	Compare_Fail
.010a17					_BLEString:
.010a17	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010a1a	d0 b9		bne $0109d5		bne 	Compare_Succeed
.010a1c	80 bf		bra $0109dd		bra 	Compare_Fail
.010a1e					Binary_Greater:
.010a1e	20 3c 0a	jsr $010a3c		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a21	b0 12		bcs $010a35		bcs 	_BGString
.010a23	18		clc			clc 									; numeric > signed
.010a24	b5 00		lda $00,x		lda 	EXSValueL,x
.010a26	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a28	b5 20		lda $20,x		lda 	EXSValueH,x
.010a2a	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a2c	50 03		bvc $010a31		bvc 	*+5
.010a2e	49 00 80	eor #$8000		eor 	#$8000
.010a31	10 a2		bpl $0109d5		bpl 	Compare_Succeed
.010a33	80 a8		bra $0109dd		bra 	Compare_Fail
.010a35					_BGString:
.010a35	c9 01 00	cmp #$0001		cmp 	#$0001
.010a38	f0 9b		beq $0109d5		beq 	Compare_Succeed
.010a3a	80 a1		bra $0109dd		bra 	Compare_Fail
.010a3c					CompareTypeCheck:
.010a3c	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010a3e	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a40	30 06		bmi $010a48		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010a42	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010a44	30 1c		bmi $010a62		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010a46	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010a47	60		rts			rts
.010a48					_CTCFail:
.010a48	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010a4b	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010a53	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010a62					_CTCStringCompare:
.010a62	20 fc 04	jsr $0104fc		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010a65	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010a67	85 08		sta $08			sta 	DTemp1
.010a69	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010a6b	85 0c		sta $0c			sta 	DTemp2
.010a6d	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010a70	a8		tay			tay
.010a71	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010a73	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010a75	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010a77	90 02		bcc $010a7b		bcc 	_CTCSmallest
.010a79	b2 0c		lda ($0c)		lda 	(DTemp2)
.010a7b					_CTCSmallest:
.010a7b	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010a7d					_CTCCompare:
.010a7d	c8		iny			iny 									; look at next character (done first, first char is size)
.010a7e	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010a80	30 16		bmi $010a98		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010a82	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010a84	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010a86	f0 f5		beq $010a7d		beq 	_CTCCompare 					; if zero, try the next character.
.010a88	b0 07		bcs $010a91		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010a8a					_CTCLess:
.010a8a	c2 20		rep #$20		rep 	#$20
.010a8c	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010a8f	80 14		bra $010aa5		bra 	_CTCExit
.010a91					_CTCGreater:
.010a91	c2 20		rep #$20		rep 	#$20
.010a93	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010a96	80 0d		bra $010aa5		bra 	_CTCExit
.010a98					_CTCEqualSoFar:
.010a98	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010a9a	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010a9c	90 ec		bcc $010a8a		bcc 	_CTCLess
.010a9e	d0 f1		bne $010a91		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010aa0	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010aa2	a9 00 00	lda #$0000		lda 	#$0000
.010aa5					_CTCExit:
.010aa5	38		sec			sec 									; return with CS indicating string comparison.
.010aa6	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010aa7					Binary_Divide:
.010aa7	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010aaa	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010aac	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010aae	d0 14		bne $010ac4		bne 	_BinaryDivide_Ok
.010ab0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010ab3	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010abb	20 62 79 20 7a 65 72 6f 00
.010ac4					_BinaryDivide_Ok:
.010ac4	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010ac6	64 0a		stz $0a			stz 	DTemp1+2
.010ac8	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010aca	5a		phy			phy 										; save Y (bit counter)
.010acb	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010acd	10 07		bpl $010ad6		bpl 	_BinaryDivide_RightDone
.010acf	e8		inx			inx
.010ad0	e8		inx			inx
.010ad1	20 0c 0b	jsr $010b0c		jsr 	Binary_DivNegate
.010ad4	ca		dex			dex
.010ad5	ca		dex			dex
.010ad6					_BinaryDivide_RightDone:
.010ad6	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010ad8	10 03		bpl $010add		bpl 	_BinaryDivide_LeftDone
.010ada	20 0c 0b	jsr $010b0c		jsr 	Binary_DivNegate
.010add					_BinaryDivide_LeftDone:
.010add	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010ae0					_BinaryDivide_Loop:
.010ae0	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010ae2	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ae4	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010ae6	26 0a		rol $0a			rol 	DTemp1+2
.010ae8	38		sec			sec											; calculate A-M
.010ae9	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010aeb	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010aed	85 0c		sta $0c			sta 	DTemp2
.010aef	a5 0a		lda $0a			lda 	DTemp1+2
.010af1	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010af3	90 08		bcc $010afd		bcc 	_Binary_NoSubract 					; if A < M skip this
.010af5	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010af7	a5 0c		lda $0c			lda 	DTemp2
.010af9	85 08		sta $08			sta 	DTemp1+0
.010afb	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010afd					_Binary_NoSubract:
.010afd	88		dey			dey 										; do it 32 times.
.010afe	d0 e0		bne $010ae0		bne 	_BinaryDivide_Loop
.010b00					_BinaryDivide_Exit:
.010b00	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010b02	29 01 00	and #$0001		and 	#1
.010b05	f0 03		beq $010b0a		beq 	_BinaryDivide_Exit2
.010b07	20 0c 0b	jsr $010b0c		jsr 	Binary_DivNegate
.010b0a					_BinaryDivide_Exit2:
.010b0a	7a		ply			ply 										; restore Y
.010b0b	60		rts			rts
.010b0c					Binary_DivNegate:
.010b0c	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010b0e	38		sec			sec 										; negate the value at stack X.
.010b0f	a9 00 00	lda #$0000		lda 	#$0000
.010b12	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010b14	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b16	a9 00 00	lda #$0000		lda 	#$0000
.010b19	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010b1b	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b1d	60		rts			rts
.010b1e					Binary_Modulus:
.010b1e	20 a7 0a	jsr $010aa7		jsr 	Binary_Divide 						; do the divide
.010b21	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010b23	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b25	a5 0a		lda $0a			lda 	DTemp1+2
.010b27	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b29	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010b2a					Binary_Multiply:
.010b2a	20 dc 04	jsr $0104dc		jsr 	CheckBothNumeric 					; check both values are numeric
.010b2d	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010b2f	85 08		sta $08			sta 	DTemp1
.010b31	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b33	85 0a		sta $0a			sta		DTemp1+2
.010b35	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010b37	74 20		stz $20,x		stz 	EXSValueH+0,x
.010b39					_BinaryMultiply_Loop:
.010b39	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010b3b	05 0a		ora $0a			ora 	DTemp1+2
.010b3d	f0 1e		beq $010b5d		beq 	_BinaryMultiply_Exit
.010b3f	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010b41	29 01 00	and #$0001		and 	#1
.010b44	f0 0d		beq $010b53		beq 	_BinaryMultiply_NoAdd
.010b46	18		clc			clc 										; add multiplicand to result.
.010b47	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010b49	75 02		adc $02,x		adc 	EXSValueL+2,x
.010b4b	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b4d	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b4f	75 22		adc $22,x		adc 	EXSValueH+2,x
.010b51	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b53					_BinaryMultiply_NoAdd:
.010b53	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010b55	66 08		ror $08			ror 	DTemp1
.010b57	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010b59	36 22		rol $22,x		rol 	EXSValueH+2,x
.010b5b	80 dc		bra $010b39		bra 	_BinaryMultiply_Loop 				; go round again.
.010b5d					_BinaryMultiply_Exit:
.010b5d	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010b5e					Function_Len:
.010b5e	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010b61	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b64	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010b67	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010b69	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010b6c	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010b6f	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010b71	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b73	60		rts				rts
.010b74					Function_Abs:
.010b74	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010b77	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010b7a	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010b7d	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010b7f	30 07		bmi $010b88			bmi 	_FAbsNegative 				; negate it if negative
.010b81	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010b83	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010b85	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b87	60		rts				rts
.010b88					_FAbsNegative:
.010b88	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010b89	a9 00 00	lda #$0000			lda 	#0
.010b8c	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010b8e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b90	a9 00 00	lda #$0000			lda 	#0
.010b93	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010b95	95 20		sta $20,x			sta 	EXSValueH+0,x
.010b97	60		rts				rts
.010b98					Function_Sgn:
.010b98	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns integer
.010b9b	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010b9e	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010ba1	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010ba3	74 20		stz $20,x			stz 	EXSValueH+0,x
.010ba5	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010ba7	30 07		bmi $010bb0			bmi 	_FSgnNegative 				; set to -1 if signed
.010ba9	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010bab	f0 02		beq $010baf			beq 	_FSgnExit
.010bad	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010baf					_FSgnExit:
.010baf	60		rts				rts
.010bb0					_FSgnNegative:
.010bb0	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010bb3	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bb5	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bb7	60		rts				rts
.010bb8					Function_Random:
.010bb8	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010bbb	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger
.010bbe	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010bc0	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010bc2	d0 0a		bne $010bce			bne 	_Rnd_NotZero
.010bc4	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010bc7	85 10		sta $10				sta 	DRandom
.010bc9	a9 ea 00	lda #$00ea			lda 	#$EA
.010bcc	85 12		sta $12				sta 	DRandom+2
.010bce					_Rnd_NotZero:
.010bce	20 d9 0b	jsr $010bd9			jsr 	_Rnd_Process 				; call randomiser twice
.010bd1	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bd3	20 d9 0b	jsr $010bd9			jsr 	_Rnd_Process
.010bd6	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bd8	60		rts				rts
.010bd9					_Rnd_Process:
.010bd9	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010bdb	26 12		rol $12				rol 	DRandom+2
.010bdd	90 0e		bcc $010bed			bcc 	_Rnd_Exit
.010bdf	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010be1	49 54 d4	eor #$d454			eor 	#$D454
.010be4	85 10		sta $10				sta 	DRandom
.010be6	a5 12		lda $12				lda 	DRandom+2
.010be8	49 d5 55	eor #$55d5			eor 	#$55D5
.010beb	85 12		sta $12				sta 	DRandom+2
.010bed					_Rnd_Exit:
.010bed	a5 10		lda $10				lda 	DRandom
.010bef	45 12		eor $12				eor 	DRandom+2
.010bf1	60		rts				rts
.010bf2					Function_Chr:
.010bf2	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string
.010bf5	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010bf8	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010bfb	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010bfe	d0 12		bne $010c12			bne 	_FCHBad
.010c00	48		pha				pha  								; save char # on stack
.010c01	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010c04	20 44 05	jsr $010544			jsr 	StringTempAllocate
.010c07	68		pla				pla 								; restore character number
.010c08	20 70 05	jsr $010570			jsr 	StringWriteCharacter 		; write it out.
.010c0b	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010c0d	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c0f	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c11	60		rts				rts
.010c12					_FCHBad:
.010c12	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c15	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010c1d	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010c2a					Function_Asc:
.010c2a	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010c2d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010c30	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010c33	a8		tay				tay 								; string address in Y
.010c34	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010c37	29 ff 00	and #$00ff			and 	#$00FF
.010c3a	f0 0b		beq $010c47			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010c3c	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010c3f	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010c42	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c44	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c46	60		rts				rts
.010c47					_FASBad:
.010c47	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c4a	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010c52	65 20 66 6f 72 20 61 73 63 28 29 00
.010c5e					Function_SPC:
.010c5e	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string
.010c61	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010c64	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010c67	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010c6a	d0 17		bne $010c83			bne 	_FSPBad
.010c6c	48		pha				pha 								; save length
.010c6d	20 44 05	jsr $010544			jsr 	StringTempAllocate 			; allocate character space
.010c70	7a		ply				ply 								; get count in Y
.010c71	f0 09		beq $010c7c			beq 	_FSPExit 					; if zero, just empty string
.010c73					_FSPCopy:
.010c73	a9 20 00	lda #$0020			lda 	#" "						; space character
.010c76	20 70 05	jsr $010570			jsr 	StringWriteCharacter 		; write it out.
.010c79	88		dey				dey
.010c7a	d0 f7		bne $010c73			bne 	_FSPCopy	 				; do it Y times
.010c7c					_FSPExit:
.010c7c	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010c7e	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c80	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c82	60		rts				rts
.010c83					_FSPBad:
.010c83	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c86	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010c8e	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010c9a					Function_LEFT:
.010c9a	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.010c9d	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010ca0	48		pha				pha 								; save string on stack.
.010ca1	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; get count
.010ca4	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010ca7	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010caa	d0 6d		bne $010d19			bne 	FNStringParameter
.010cac	85 08		sta $08				sta 	DTemp1 						; save count.
.010cae	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket
.010cb1	7a		ply				ply 								; Y points to string.
.010cb2	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010cb5	29 ff 00	and #$00ff			and 	#$00FF
.010cb8	f0 52		beq $010d0c			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010cba	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010cbc	f0 55		beq $010d13			beq 	FNStringY 					; return string in Y if current len = required len.
.010cbe	90 53		bcc $010d13			bcc 	FNStringY 					; if current < required return whole thing.
.010cc0	c8		iny				iny 								; take from here - start of string
.010cc1	80 33		bra $010cf6			bra 	FNDTemp1Characters
.010cc3					Function_RIGHT:
.010cc3	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.010cc6	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010cc9	48		pha				pha 								; save string on stack.
.010cca	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; get count
.010ccd	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010cd0	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010cd3	d0 44		bne $010d19			bne 	FNStringParameter
.010cd5	85 08		sta $08				sta 	DTemp1 						; save count.
.010cd7	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket
.010cda	7a		ply				ply 								; Y points to string.
.010cdb	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010cde	29 ff 00	and #$00ff			and 	#$00FF
.010ce1	f0 29		beq $010d0c			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010ce3	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010ce5	f0 2c		beq $010d13			beq 	FNStringY 					; return string in Y if current len = required len.
.010ce7	90 2a		bcc $010d13			bcc 	FNStringY 					; if current < required return whole thing.
.010ce9	38		sec				sec 								; current-required is the number to skip
.010cea	e5 08		sbc $08				sbc 	DTemp1
.010cec	85 0a		sta $0a				sta 	DTemp1+2
.010cee	98		tya				tya
.010cef	18		clc				clc
.010cf0	65 0a		adc $0a				adc 	DTemp1+2
.010cf2	a8		tay				tay
.010cf3	c8		iny				iny 								; +1 for the count.
.010cf4	80 00		bra $010cf6			bra 	FNDTemp1Characters
.010cf6					FNDTemp1Characters:
.010cf6	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010cf8	f0 12		beq $010d0c			beq 	FNStringEmpty 				; if zero, return empty string.
.010cfa	20 44 05	jsr $010544			jsr 	StringTempAllocate
.010cfd	48		pha				pha 								; save the address
.010cfe					_FND1Loop:
.010cfe	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010d01	20 70 05	jsr $010570			jsr 	StringWriteCharacter
.010d04	c8		iny				iny
.010d05	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010d07	d0 f5		bne $010cfe			bne 	_FND1Loop
.010d09	7a		ply				ply 								; string address in Y
.010d0a	80 07		bra $010d13			bra 	FNStringY
.010d0c					FNStringEmpty:
.010d0c	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010d0f	20 44 05	jsr $010544			jsr 	StringTempAllocate 			; put address of it in Y
.010d12	a8		tay				tay
.010d13					FNStringY:
.010d13	98		tya				tya
.010d14	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d16	74 22		stz $22,x			stz 	EXSValueH+2,x
.010d18	60		rts				rts
.010d19					FNStringParameter:
.010d19	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d1c	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010d24	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010d31					Function_MID:
.010d31	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.010d34	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d37	48		pha				pha 								; save string on stack.
.010d38	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; get offset (n)
.010d3b	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d3e	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d41	d0 d6		bne $010d19			bne 	FNStringParameter
.010d43	c9 00 00	cmp #$0000			cmp 	#0
.010d46	f0 d1		beq $010d19			beq 	FNStringParameter 			; or zero
.010d48	48		pha				pha 								; save start position on stack.
.010d49	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010d4c	85 08		sta $08				sta 	DTemp1
.010d4e	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010d50	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010d53	d0 0e		bne $010d63			bne 	_FMINoThird
.010d55	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010d57	e6 06		inc $06				inc 	DCodePtr
.010d59	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010d5c	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d5f	d0 b8		bne $010d19			bne 	FNStringParameter
.010d61	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010d63					_FMINoThird:
.010d63	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket
.010d66	68		pla				pla 								; get offset position
.010d67	85 0c		sta $0c				sta 	DTemp2
.010d69	7a		ply				ply 								; get address of string in Y
.010d6a	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010d6d	29 ff 00	and #$00ff			and 	#$00FF
.010d70	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010d72	90 98		bcc $010d0c			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010d74	38		sec				sec 								; calculate number of characters left after
.010d75	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010d77	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010d78	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010d7a	b0 02		bcs $010d7e			bcs 	_FMISufficient
.010d7c	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010d7e					_FMISufficient:
.010d7e	98		tya				tya 								; get address
.010d7f	18		clc				clc
.010d80	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010d82	a8		tay				tay 								; put in Y
.010d83	82 70 ff	brl $010cf6			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010d86					Function_Peek:
.010d86	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010d89	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d8c	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010d8f	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010d91	84 0a		sty $0a				sty 	DTemp1+2
.010d93	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010d96	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d98	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010d9b	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010d9d	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d9f	60		rts				rts
.010da0					Function_Deek:
.010da0	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010da3	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010da6	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010da9	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010dab	84 0a		sty $0a				sty 	DTemp1+2
.010dad	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010db0	b7 08		lda [$08],y			lda 	[DTemp1],y
.010db2	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010db4	74 20		stz $20,x			stz 	EXSValueH+0,x
.010db6	60		rts				rts
.010db7					Function_Leek:
.010db7	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010dba	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010dbd	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check )
.010dc0	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010dc2	84 0a		sty $0a				sty 	DTemp1+2
.010dc4	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010dc7	b7 08		lda [$08],y			lda 	[DTemp1],y
.010dc9	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010dcb	c8		iny				iny
.010dcc	c8		iny				iny
.010dcd	b7 08		lda [$08],y			lda 	[DTemp1],y
.010dcf	95 20		sta $20,x			sta 	EXSValueH+0,x
.010dd1	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010dd2					Function_VAL:
.010dd2	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns an integer
.010dd5	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dd8	48		pha				pha 								; put string address on stack.
.010dd9	20 e9 0d	jsr $010de9			jsr 	VALGetBase 					; process , base (shared with STR$())
.010ddc	7a		ply				ply 								; get string address back
.010ddd	da		phx				phx 								; save X on stack
.010dde	aa		tax				tax 								; base in X
.010ddf	98		tya				tya 								; address in A
.010de0	20 23 0e	jsr $010e23			jsr 	StringToInteger
.010de3	fa		plx				plx 								; restore X
.010de4	95 00		sta $00,x			sta 	EXSValueL+0,x
.010de6	94 20		sty $20,x			sty 	EXSValueH+0,x
.010de8	60		rts				rts
.010de9					VALGetBase:
.010de9	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010deb	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010dee	f0 07		beq $010df7			beq 	_VGBAlternate
.010df0	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket			; expect ), and return 10.
.010df3	a9 0a 00	lda #$000a			lda 	#10
.010df6	60		rts				rts
.010df7					_VGBAlternate:
.010df7	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; skip comma.
.010dfa	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010dfd	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010e00	d0 0e		bne $010e10			bne 	_VGBBadBase
.010e02	c9 02 00	cmp #$0002			cmp 	#2
.010e05	90 09		bcc $010e10			bcc 	_VGBBadBase
.010e07	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010e0a	b0 04		bcs $010e10			bcs 	_VGBBadBase
.010e0c	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; get right bracket and return.
.010e0f	60		rts				rts
.010e10					_VGBBadBase:
.010e10	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e13	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010e1b	65 72 20 42 61 73 65 00
.010e23					StringToInteger:
.010e23	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010e25	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010e27	29 ff 00	and #$00ff			and 	#$00FF
.010e2a	85 26		sta $26				sta 	DTemp3+2
.010e2c	f0 6e		beq $010e9c			beq 	_STIError 					; if length zero it's bad.
.010e2e	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010e30	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010e32	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010e34	64 0a		stz $0a				stz 	DTemp1+2
.010e36	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010e38	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010e3b	48		pha				pha 								; push on stack
.010e3c	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010e3f	d0 06		bne $010e47			bne 	_STILoop
.010e41	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010e43	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010e45	f0 55		beq $010e9c			beq 	_STIError 					; if only - then error.
.010e47					_STILoop:
.010e47	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010e49	20 bb 0e	jsr $010ebb			jsr 	MultiplyTemp1ByA
.010e4c	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010e4e	29 ff 00	and #$00ff			and 	#$00FF
.010e51	20 ac 0e	jsr $010eac			jsr 	ConvertUpperCase	 		; make U/C
.010e54	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010e57	90 43		bcc $010e9c			bcc 	_STIError
.010e59	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010e5c	90 0e		bcc $010e6c			bcc 	_STIOkay1
.010e5e	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010e61	90 39		bcc $010e9c			bcc 	_STIError
.010e63	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010e66	b0 34		bcs $010e9c			bcs 	_STIError
.010e68	18		clc				clc 								; shift to correct range.
.010e69	69 09 00	adc #$0009			adc 	#9
.010e6c					_STIOkay1:
.010e6c	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010e6f	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010e71	b0 29		bcs $010e9c			bcs 	_STIError
.010e73	18		clc				clc 								; add A to DTemp1
.010e74	65 08		adc $08				adc 	DTemp1
.010e76	85 08		sta $08				sta 	DTemp1
.010e78	90 02		bcc $010e7c			bcc 	_STINoCarry
.010e7a	e6 0a		inc $0a				inc 	DTemp1+2
.010e7c					_STINoCarry:
.010e7c	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010e7e	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010e80	d0 c5		bne $010e47			bne 	_STILoop 					; loop back.
.010e82	68		pla				pla 								; get optional minus bac
.010e83	c9 2d 00	cmp #$002d			cmp 	#"-"
.010e86	d0 0f		bne $010e97			bne 	_STINotNegative 			; handle the negative character
.010e88	38		sec				sec 								; negate DTemp1
.010e89	a9 00 00	lda #$0000			lda 	#0
.010e8c	e5 08		sbc $08				sbc 	DTemp1
.010e8e	85 08		sta $08				sta 	DTemp1
.010e90	a9 00 00	lda #$0000			lda 	#0
.010e93	e5 0a		sbc $0a				sbc 	DTemp1+2
.010e95	85 0a		sta $0a				sta 	DTemp1+2
.010e97					_STINotNegative:
.010e97	a5 08		lda $08				lda 	DTemp1 						; get the result
.010e99	a4 0a		ldy $0a				ldy 	DTemp1+2
.010e9b	60		rts				rts
.010e9c					_STIError:
.010e9c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e9f	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010ea7	74 61 6e 74 00
.010eac					ConvertUpperCase:
.010eac	c9 61 00	cmp #$0061			cmp 	#'a'
.010eaf	90 09		bcc $010eba			bcc 	_CUCExit
.010eb1	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010eb4	b0 04		bcs $010eba			bcs 	_CUCExit
.010eb6	38		sec				sec
.010eb7	e9 20 00	sbc #$0020			sbc 	#32
.010eba					_CUCExit:
.010eba	60		rts				rts
.010ebb					MultiplyTemp1ByA:
.010ebb					_MTGeneral:
.010ebb	da		phx				phx
.010ebc	aa		tax				tax 								; multiplier in X
.010ebd	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010ebf	85 0c		sta $0c				sta 	DTemp2
.010ec1	a5 0a		lda $0a				lda 	DTemp1+2
.010ec3	85 0e		sta $0e				sta 	DTemp2+2
.010ec5	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010ec7	64 0a		stz $0a				stz 	DTemp1+2
.010ec9	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010ecc					_MTLoop:
.010ecc	8a		txa				txa 								; shift X right into C
.010ecd	4a		lsr a				lsr 	a
.010ece	aa		tax				tax
.010ecf	90 10		bcc $010ee1			bcc 	_MTNoAdd
.010ed1	18		clc				clc
.010ed2	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010ed4	65 0c		adc $0c				adc 	DTemp2
.010ed6	85 08		sta $08				sta 	DTemp1
.010ed8	a5 0a		lda $0a				lda 	DTemp1+2
.010eda	65 0e		adc $0e				adc 	DTemp2+2
.010edc	85 0a		sta $0a				sta 	DTemp1+2
.010ede	90 01		bcc $010ee1			bcc 	_MTNoAdd
.010ee0	c8		iny				iny
.010ee1					_MTNoAdd:
.010ee1	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ee3	26 0e		rol $0e				rol 	DTemp2+2
.010ee5	90 01		bcc $010ee8			bcc 	_MTNoOverflow
.010ee7	c8		iny				iny
.010ee8					_MTNoOverflow:
.010ee8	8a		txa				txa 								; until multiplier is zero.
.010ee9	d0 e1		bne $010ecc			bne 	_MTLoop
.010eeb	98		tya				tya
.010eec	18		clc				clc
.010eed	69 ff ff	adc #$ffff			adc 	#$FFFF
.010ef0	fa		plx				plx 								; restore X
.010ef1	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010ef2					Function_Str:
.010ef2	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.010ef5	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010ef8	48		pha				pha 								; save YA on the stack
.010ef9	5a		phy				phy
.010efa	20 e9 0d	jsr $010de9			jsr 	VALGetBase 					; process , base (shared with STR$())
.010efd	85 14		sta $14				sta 	DSignCount
.010eff	7a		ply				ply 								; YA is the number
.010f00	68		pla				pla
.010f01	da		phx				phx
.010f02	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010f04	20 0d 0f	jsr $010f0d			jsr 	ConvertToString 			; convert it to a string.
.010f07	fa		plx				plx 								; restore X
.010f08	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010f0a	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f0c	60		rts				rts
.010f0d					ConvertToString:
.010f0d	48		pha				pha
.010f0e	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010f11	20 44 05	jsr $010544			jsr 	StringTempAllocate 			; allocate space for return string.
.010f14	68		pla				pla
.010f15					ConvertToStringAlreadyAllocated:
.010f15	da		phx				phx 								; save X (base)
.010f16	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010f18	84 26		sty $26				sty 	DTemp3+2
.010f1a	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010f1c	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010f1e	10 15		bpl $010f35			bpl 	_CTSNotNegative
.010f20	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010f23	20 9f 0f	jsr $010f9f			jsr 	CTSOutputA
.010f26	38		sec				sec 								; negate DTemp3 which is the number
.010f27	a9 00 00	lda #$0000			lda 	#0
.010f2a	e5 24		sbc $24				sbc 	DTemp3
.010f2c	85 24		sta $24				sta 	DTemp3
.010f2e	a9 00 00	lda #$0000			lda 	#0
.010f31	e5 26		sbc $26				sbc 	DTemp3+2
.010f33	85 26		sta $26				sta 	DTemp3+2
.010f35					_CTSNotNegative:
.010f35	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010f38	48		pha				pha
.010f39	a9 00 00	lda #$0000			lda 	#0
.010f3c	48		pha				pha
.010f3d	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010f3f	85 08		sta $08				sta 	DTemp1
.010f41	64 0a		stz $0a				stz 	DTemp1+2
.010f43					_CTSMultiplySubtractor:
.010f43	38		sec				sec 								; check number vs subtractor
.010f44	a5 24		lda $24				lda 	DTemp3
.010f46	e5 08		sbc $08				sbc 	DTemp1
.010f48	a5 26		lda $26				lda 	DTemp3+2
.010f4a	e5 0a		sbc $0a				sbc 	DTemp1+2
.010f4c	90 0f		bcc $010f5d			bcc		_CTSScaledUp 				; if >= then scaled up.
.010f4e	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010f50	48		pha				pha
.010f51	a5 0a		lda $0a				lda 	DTemp1+2
.010f53	48		pha				pha
.010f54	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010f56	20 bb 0e	jsr $010ebb			jsr 	MultiplyTemp1ByA
.010f59	b0 02		bcs $010f5d			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010f5b	80 e6		bra $010f43			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010f5d					_CTSScaledUp:
.010f5d	7a		ply				ply 								; YA contains the previous divider.
.010f5e	68		pla				pla
.010f5f	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010f62	d0 05		bne $010f69			bne 	_CTSHasDigit
.010f64	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010f67	f0 20		beq $010f89			beq 	_CTSExit
.010f69					_CTSHasDigit:
.010f69	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010f6b	84 0e		sty $0e				sty 	DTemp2+2
.010f6d	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010f70					_CTSSubLoop:
.010f70	38		sec				sec 								; subtract subtractor from number
.010f71	a5 24		lda $24				lda 	DTemp3
.010f73	e5 0c		sbc $0c				sbc 	DTemp2
.010f75	a8		tay				tay 								; intermediate in Y
.010f76	a5 26		lda $26				lda 	DTemp3+2
.010f78	e5 0e		sbc $0e				sbc 	DTemp2+2
.010f7a	90 07		bcc $010f83			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010f7c	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010f7e	84 24		sty $24				sty 	DTemp3
.010f80	e8		inx				inx 								; one more subtraction
.010f81	80 ed		bra $010f70			bra 	_CTSSubLoop 				; try it again.
.010f83					_CTSFinishedSubtracting:
.010f83	8a		txa				txa 								; convert to ASCII.
.010f84	20 92 0f	jsr $010f92			jsr 	CTSOutputHexDigit 			; write that out.
.010f87	80 d4		bra $010f5d			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010f89					_CTSExit:
.010f89	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010f8b	20 92 0f	jsr $010f92			jsr 	CTSOutputHexDigit
.010f8e	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010f90	fa		plx				plx 								; restore X.
.010f91	60		rts				rts
.010f92					CTSOutputHexDigit:
.010f92	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010f95	90 04		bcc $010f9b			bcc 	_CTSNotLetter
.010f97	18		clc				clc
.010f98	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010f9b					_CTSNotLetter:
.010f9b	18		clc				clc
.010f9c	69 30 00	adc #$0030			adc 	#48
.010f9f					CTSOutputA:
.010f9f	5a		phy				phy 								; save Y, set Y to current pointer
.010fa0	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010fa2	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010fa5	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010fa7	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010fa9	1a		inc a				inc 	a
.010faa	92 18		sta ($18)			sta 	(DStartTempString)
.010fac	c2 20		rep #$20			rep 	#$20
.010fae	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010fb0	7a		ply				ply 								; restore Y and exit.
.010fb1	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010fb2					Function_INSTR:
.010fb2	20 fc 04	jsr $0104fc			jsr 	ResetTypeInteger 			; returns a integer
.010fb5	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010fb8	48		pha				pha 								; save string to search
.010fb9	20 d3 04	jsr $0104d3			jsr 	ExpectComma
.010fbc	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010fbf	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket
.010fc2	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010fc4	68		pla				pla
.010fc5	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010fc7	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010fc9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010fcb	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010fcd	38		sec				sec
.010fce	b2 0c		lda ($0c)			lda 	(DTemp2)
.010fd0	f2 08		sbc ($08)			sbc		(DTemp1)
.010fd2	c2 20		rep #$20			rep 	#$20
.010fd4	90 2c		bcc $011002			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010fd6	29 ff 00	and #$00ff			and 	#$00FF
.010fd9	1a		inc a				inc 	a
.010fda	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010fdc	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010fde	29 ff 00	and #$00ff			and 	#$00FF
.010fe1	f0 22		beq $011005			beq 	_FINSError
.010fe3					_FINSLoop:
.010fe3	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010fe5	1a		inc a				inc 	a
.010fe6	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fe8	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010fea	29 ff 00	and #$00ff			and 	#$00FF
.010fed	a8		tay				tay									; start comparing at index 1.
.010fee					_FINSCompare:
.010fee	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010ff0	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010ff2	29 ff 00	and #$00ff			and 	#$00FF
.010ff5	d0 05		bne $010ffc			bne 	_FINSNext
.010ff7	88		dey				dey
.010ff8	d0 f4		bne $010fee			bne 	_FINSCompare
.010ffa	80 08		bra $011004			bra 	_FINSExit
.010ffc					_FINSNext:
.010ffc	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010ffe	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.011000	d0 e1		bne $010fe3			bne 	_FINSLoop
.011002					_FINSFail:
.011002	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.011004					_FINSExit:
.011004	60		rts				rts
.011005					_FINSError:
.011005	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011008	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>011010	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.011019					Function_UPPER:
.011019	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.01101c	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.01101f	48		pha				pha
.011020	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; close call.
.011023	20 44 05	jsr $010544			jsr		StringTempAllocate 			; allocate memory for it
.011026	68		pla				pla
.011027	20 7e 05	jsr $01057e			jsr 	StringCreateCopy 			; create a copy of it.
.01102a	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01102c	95 00		sta $00,x			sta 	EXSValueL+0,x
.01102e	a8		tay				tay 								; address in Y
.01102f	74 20		stz $20,x			stz 	EXSValueH+0,x
.011031	da		phx				phx 								; save X
.011032	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011034	29 ff 00	and #$00ff			and 	#$00FF
.011037	f0 20		beq $011059			beq 	_FUPExit
.011039	aa		tax				tax 								; put in X
.01103a					_FUPLoop:
.01103a	c8		iny				iny 								; increment and load character
.01103b	b9 00 00	lda $0000,y			lda 	$0000,y
.01103e	29 ff 00	and #$00ff			and 	#$00FF
.011041	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011044	90 10		bcc $011056			bcc 	_FUPNoChange
.011046	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011049	b0 0b		bcs $011056			bcs 	_FUPNoChange
.01104b	38		sec				sec 								; shift case
.01104c	e9 20 00	sbc #$0020			sbc 	#32
.01104f	e2 20		sep #$20			sep 	#$20 						; write back
.011051	99 00 00	sta $0000,y			sta 	$0000,y
.011054	c2 20		rep #$20			rep 	#$20
.011056					_FUPNoChange:
.011056	ca		dex				dex 								; do X times
.011057	d0 e1		bne $01103a			bne 	_FUPLoop
.011059					_FUPExit:
.011059	fa		plx				plx 								; restore X
.01105a	60		rts				rts
.01105b					Function_LOWER:
.01105b	20 04 05	jsr $010504			jsr 	ResetTypeString 			; returns a string.
.01105e	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.011061	48		pha				pha
.011062	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; close call.
.011065	20 44 05	jsr $010544			jsr		StringTempAllocate 			; allocate memory for it
.011068	68		pla				pla
.011069	20 7e 05	jsr $01057e			jsr 	StringCreateCopy 			; create a copy of it.
.01106c	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.01106e	95 00		sta $00,x			sta 	EXSValueL+0,x
.011070	a8		tay				tay 								; address in Y
.011071	74 20		stz $20,x			stz 	EXSValueH+0,x
.011073	da		phx				phx 								; save X
.011074	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011076	29 ff 00	and #$00ff			and 	#$00FF
.011079	f0 20		beq $01109b			beq 	_FLOExit
.01107b	aa		tax				tax 								; put in X
.01107c					_FLOLoop:
.01107c	c8		iny				iny 								; increment and load character
.01107d	b9 00 00	lda $0000,y			lda 	$0000,y
.011080	29 ff 00	and #$00ff			and 	#$00FF
.011083	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.011086	90 10		bcc $011098			bcc 	_FLONoChange
.011088	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01108b	b0 0b		bcs $011098			bcs 	_FLONoChange
.01108d	18		clc				clc 								; shift case
.01108e	69 20 00	adc #$0020			adc 	#32
.011091	e2 20		sep #$20			sep 	#$20 						; write back
.011093	99 00 00	sta $0000,y			sta 	$0000,y
.011096	c2 20		rep #$20			rep 	#$20
.011098					_FLONoChange:
.011098	ca		dex				dex 								; do X times
.011099	d0 e1		bne $01107c			bne 	_FLOLoop
.01109b					_FLOExit:
.01109b	fa		plx				plx 								; restore X
.01109c	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.01109d					Function_Let:
.01109d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.01109f	48		pha				pha  								; save on stack for later.
.0110a0	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.0110a3	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.0110a5	b0 1c		bcs $0110c3			bcs 	_FLetFound 					; skip if found.
.0110a7	68		pla				pla 								; get and push the first token again.
.0110a8	48		pha				pha
.0110a9	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0110ac	d0 57		bne $011105			bne 	_FLError					; arrays, so this causes an error.
.0110ae	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0110b0	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0110b3	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.0110b6	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0110b8					_FLSkipToken:
.0110b8	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0110ba	e6 06		inc $06				inc 	DCodePtr
.0110bc	e6 06		inc $06				inc 	DCodePtr
.0110be	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0110c1	d0 f5		bne $0110b8			bne 	_FLSkipToken
.0110c3					_FLetFound:
.0110c3	68		pla				pla 								; get and save the first token.
.0110c4	48		pha				pha
.0110c5	a8		tay				tay 								; put it in Y
.0110c6	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0110c9	f0 07		beq $0110d2			beq 	_FLetNotArray
.0110cb	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0110cd	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.0110d0	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0110d2					_FLetNotArray:
.0110d2	7a		ply				ply 								; get the first token into Y
.0110d3	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0110d5	48		pha				pha
.0110d6	5a		phy				phy 								; save the first token on the stack.
.0110d7	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0110da	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.0110dd	68		pla				pla 								; restore the first token.
.0110de	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0110e1	d0 0f		bne $0110f2			bne 	_FLetString 				; skip if string.
.0110e3	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.0110e6	7a		ply				ply 								; get address in Y
.0110e7	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0110e9	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0110ec	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0110ee	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0110f1	60		rts				rts
.0110f2					_FLetString:
.0110f2	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.0110f5	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0110f7	20 9f 05	jsr $01059f			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0110fa	7a		ply				ply 								; get address
.0110fb	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0110fe	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.011101	99 02 00	sta $0002,y			sta 	$0002,y
.011104	60		rts				rts
.011105					_FLError:
.011105	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011108	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011110	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.011118					Command_List:
.011118	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.01111b	20 44 05	jsr $010544		jsr 	StringTempAllocate
.01111e	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011120	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011122	64 2e		stz $2e			stz 	DIndent2
.011124	64 32		stz $32			stz 	DTemp4+0 						; low number
.011126	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.011129	85 34		sta $34			sta 	DTemp4+2 						; high number.
.01112b	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.01112d	f0 28		beq $011157		beq 	_CLIList
.01112f	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.011132	f0 23		beq $011157		beq 	_CLIList
.011134	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.011137	c0 00 00	cpy #$0000		cpy 	#0
.01113a	d0 18		bne $011154		bne 	_CLIError
.01113c	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.01113e	85 34		sta $34			sta 	DTemp4+2
.011140	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011142	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.011145	d0 10		bne $011157		bne 	_CLIList
.011147	20 d3 04	jsr $0104d3		jsr 	ExpectComma 					; skip comma
.01114a	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.01114d	85 34		sta $34			sta 	DTemp4+2
.01114f	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011152	f0 03		beq $011157		beq 	_CLIList
.011154					_CLIError:
.011154	82 49 f3	brl $0104a0		brl 	SyntaxError
.011157					_CLIList:
.011157	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.01115a	18		clc			clc
.01115b	65 02		adc $02			adc 	DBaseAddress
.01115d	a8		tay			tay 									; put in Y
.01115e					_CLINextLine:
.01115e	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011161	f0 29		beq $01118c		beq 	_CLIExit
.011163	20 f4 12	jsr $0112f4		jsr 	ScanIndent  					; scan for formatting.
.011166	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.011169	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.01116b	90 14		bcc $011181		bcc 	_CLIFollowLink
.01116d	c5 34		cmp $34			cmp 	DTemp4+2
.01116f	f0 02		beq $011173		beq 	_CLIShowLine
.011171	b0 0e		bcs $011181		bcs 	_CLIFollowLink
.011173					_CLIShowLine:
.011173	a5 30		lda $30			lda 	DListBuffer
.011175	20 8f 11	jsr $01118f		jsr 	Detokenise 						; detokenise it
.011178	5a		phy			phy
.011179	a8		tay			tay 									; print buffer out
.01117a	20 2a 05	jsr $01052a		jsr 	PrintBasicString
.01117d	20 c9 1a	jsr $011ac9		jsr 	HWNewLine
.011180	7a		ply			ply 									; get address
.011181					_CLIFollowLink:
.011181	98		tya			tya 									; follow link
.011182	18		clc			clc
.011183	79 00 00	adc $0000,y		adc 	$0000,y
.011186	a8		tay			tay
.011187	20 e5 1a	jsr $011ae5		jsr 	HWCheckBreak 					; break key pressed.
.01118a	f0 d2		beq $01115e		beq 	_CLINextLine
.01118c					_CLIExit:
.01118c	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.01118e	60		rts			rts
.01118f					Detokenise:
.01118f	48		pha			pha
.011190	da		phx			phx
.011191	5a		phy			phy
.011192	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011194	1a		inc a			inc 	a
.011195	85 1a		sta $1a			sta 	DCurrentTempString
.011197	64 1c		stz $1c			stz		DConstantShift
.011199	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.01119c	92 18		sta ($18)		sta 	(DStartTempString)
.01119e	5a		phy			phy 									; save Y
.01119f	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.0111a2	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.0111a5	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.0111a8	20 15 0f	jsr $010f15		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0111ab	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0111ad	c5 2e		cmp $2e			cmp 	DIndent2
.0111af	90 02		bcc $0111b3		bcc 	_DTKSmaller
.0111b1	a5 2e		lda $2e			lda 	DIndent2
.0111b3					_DTKSmaller:
.0111b3	0a		asl a			asl 	a
.0111b4	69 06 00	adc #$0006		adc 	#6
.0111b7	85 08		sta $08			sta 	DTemp1
.0111b9					_DTKPadLineNo:
.0111b9	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0111bc	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0111bf	b2 18		lda ($18)		lda 	(DStartTempString)
.0111c1	29 ff 00	and #$00ff		and 	#$00FF
.0111c4	c5 08		cmp $08			cmp 	DTemp1
.0111c6	d0 f1		bne $0111b9		bne 	_DTKPadLineNo
.0111c8	68		pla			pla 									; get pointer
.0111c9	18		clc			clc 									; point to start of line
.0111ca	69 04 00	adc #$0004		adc 	#4
.0111cd	a8		tay			tay 									; put back in Y.
.0111ce					_DTKMainLoop:
.0111ce	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.0111d1	d0 04		bne $0111d7		bne 	_DTKNotZero 					; if zero, return.
.0111d3	7a		ply			ply
.0111d4	fa		plx			plx
.0111d5	68		pla			pla
.0111d6	60		rts			rts
.0111d7					_DTKNotZero:
.0111d7	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.0111da	b0 1c		bcs $0111f8		bcs 	_DTKNotString
.0111dc	5a		phy			phy										; save token address on stack.
.0111dd	c8		iny			iny 									; skip first token
.0111de	c8		iny			iny
.0111df	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0111e2	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0111e5	98		tya			tya 									; copy the string out.
.0111e6	20 7e 05	jsr $01057e		jsr 	StringCreateCopy
.0111e9	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0111ec	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0111ef	68		pla			pla 									; get token, which is its own offset
.0111f0	a8		tay			tay
.0111f1	18		clc			clc
.0111f2	79 00 00	adc $0000,y		adc 	$0000,y
.0111f5	a8		tay			tay
.0111f6	80 d6		bra $0111ce		bra 	_DTKMainLoop
.0111f8					_DTKNotString:
.0111f8	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0111fb	b0 09		bcs $011206		bcs 	_DTKNotShift
.0111fd	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.011200	85 1c		sta $1c			sta 	DConstantShift
.011202	c8		iny			iny 									; skip token.
.011203	c8		iny			iny
.011204	80 c8		bra $0111ce		bra 	_DTKMainLoop
.011206					_DTKNotShift:
.011206	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.011209	b0 07		bcs $011212		bcs 	_DTKNotKeyword
.01120b	c8		iny			iny 									; skip over token
.01120c	c8		iny			iny
.01120d	20 8c 12	jsr $01128c		jsr 	_DTKDecodeKeyword 				; decode it.
.011210	80 bc		bra $0111ce		bra 	_DTKMainLoop
.011212					_DTKNotKeyword:
.011212	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.011215	b0 18		bcs $01122f		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.011217	5a		phy			phy 									; save pointer
.011218	38		sec			sec  									; shift it in the range 0-32767
.011219	e9 00 40	sbc #$4000		sbc 	#$4000
.01121c	0a		asl a			asl 	a 								; shift it left, losing bit 15
.01121d	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.01121f	6a		ror a			ror 	a 								; rotate that into the constant value
.011220	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011222	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.011225	20 15 0f	jsr $010f15		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.011228	64 1c		stz $1c			stz 	DConstantShift
.01122a	7a		ply			ply 									; restore pointer
.01122b	c8		iny			iny 									; skip token.
.01122c	c8		iny			iny
.01122d	80 9f		bra $0111ce		bra 	_DTKMainLoop
.01122f					_DTKIdentifier:
.01122f	48		pha			pha 									; save token for typing at end
.011230					_DTKILoop:
.011230	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011233	20 5c 12	jsr $01125c		jsr 	_DTKIDecodeToken 				; decode it.
.011236	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.011239	c8		iny			iny 									; skip it
.01123a	c8		iny			iny
.01123b	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.01123e	d0 f0		bne $011230		bne 	_DTKILoop
.011240	68		pla			pla 									; add $( as required.
.011241	48		pha			pha 									; comes from the first token.
.011242	29 00 20	and #$2000		and 	#IDTypeMask
.011245	f0 06		beq $01124d		beq 	_DTKINotString
.011247	a9 24 00	lda #$0024		lda 	#"$"
.01124a	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.01124d					_DTKINotString:
.01124d	68		pla			pla
.01124e	29 00 10	and #$1000		and 	#IDArrayMask
.011251	f0 06		beq $011259		beq 	_DTKINotArray
.011253	a9 28 00	lda #$0028		lda 	#"("
.011256	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.011259					_DTKINotArray:
.011259	82 72 ff	brl $0111ce		brl 	_DTKMainLoop
.01125c					_DTKIDecodeToken:
.01125c	5a		phy			phy
.01125d	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.011260	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011263					_DTKIDivide:
.011263	38		sec			sec
.011264	e9 2d 00	sbc #$002d		sbc 	#45
.011267	c8		iny			iny
.011268	b0 f9		bcs $011263		bcs 	_DTKIDivide
.01126a	69 2d 00	adc #$002d		adc 	#45
.01126d	20 76 12	jsr $011276		jsr 	_DTKIOutA 						; output low.
.011270	98		tya			tya
.011271	20 76 12	jsr $011276		jsr 	_DTKIOutA 						; output high
.011274	7a		ply			ply
.011275	60		rts			rts
.011276					_DTKIOutA:
.011276	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.011279	f0 10		beq $01128b		beq 	_DTKIOutExit
.01127b	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.01127e	90 04		bcc $011284		bcc 	_DTKIOutAlpha
.011280	38		sec			sec  									; adjust for 0-9
.011281	e9 4b 00	sbc #$004b		sbc 	#$4B
.011284					_DTKIOutAlpha:
.011284	18		clc			clc										; adjust for A-Z
.011285	69 60 00	adc #$0060		adc 	#96
.011288	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.01128b					_DTKIOutExit:
.01128b	60		rts			rts
.01128c					_DTKDecodeKeyword:
.01128c	48		pha			pha
.01128d	da		phx			phx
.01128e	5a		phy			phy
.01128f	a8		tay			tay 									; save token ID in Y
.011290	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011293	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.011296	48		pha			pha 									; save this flag on a stack
.011297	5a		phy			phy 									; save the token ID
.011298	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.01129b	d0 19		bne $0112b6		bne 	_DTKNotSpecial1
.01129d	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.01129f	88		dey			dey
.0112a0	b9 00 00	lda $0000,y		lda 	$0000,y
.0112a3	29 ff 00	and #$00ff		and 	#$00FF
.0112a6	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.0112a9	f0 0b		beq $0112b6		beq 	_DTKNotSpecial1
.0112ab	c9 3a 00	cmp #$003a		cmp 	#":"
.0112ae	f0 06		beq $0112b6		beq 	_DTKNotSpecial1
.0112b0	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0112b3	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0112b6					_DTKNotSpecial1:
.0112b6	68		pla			pla
.0112b7	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0112ba	a8		tay			tay 									; into Y.
.0112bb	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0112be					_DTKDWorkThrough:
.0112be	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0112bf	f0 0f		beq $0112d0		beq 	_DTKDFound
.0112c1	86 08		stx $08			stx 	DTemp1
.0112c3	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.0112c7	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0112ca	18		clc			clc
.0112cb	65 08		adc $08			adc 	DTemp1
.0112cd	aa		tax			tax
.0112ce	80 ee		bra $0112be		bra 	_DTKDWorkThrough
.0112d0					_DTKDFound:
.0112d0	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.0112d4	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0112d7	3a		dec a			dec 	a
.0112d8	a8		tay			tay 									; put in Y
.0112d9					_DTKOut:
.0112d9	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.0112dd	29 ff 00	and #$00ff		and 	#$00FF
.0112e0	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0112e3	e8		inx			inx
.0112e4	88		dey			dey
.0112e5	d0 f2		bne $0112d9		bne 	_DTKOut
.0112e7	68		pla			pla 									; trailing space.
.0112e8	d0 06		bne $0112f0		bne 	_DTKNotSpecial2
.0112ea	a9 20 00	lda #$0020		lda 	#" "
.0112ed	20 70 05	jsr $010570		jsr 	StringWriteCharacter
.0112f0					_DTKNotSpecial2:
.0112f0	7a		ply			ply
.0112f1	fa		plx			plx
.0112f2	68		pla			pla
.0112f3	60		rts			rts
.0112f4					ScanIndent:
.0112f4	48		pha			pha
.0112f5	5a		phy			phy
.0112f6	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0112f8	85 2e		sta $2e			sta 	DIndent2
.0112fa	98		tya			tya
.0112fb	18		clc			clc 									; point to code.
.0112fc	69 04 00	adc #$0004		adc 	#4
.0112ff	a8		tay			tay
.011300					_SILoop:
.011300	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011303	f0 35		beq $01133a		beq 	_SIExit
.011305	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.011308	b0 08		bcs $011312		bcs 	_SICheckKeyword
.01130a	98		tya			tya 									; skip string.
.01130b	18		clc			clc
.01130c	79 00 00	adc $0000,y		adc 	$0000,y
.01130f	a8		tay			tay
.011310	80 ee		bra $011300		bra 	_SILoop
.011312					_SICheckKeyword:
.011312	29 00 e0	and #$e000		and 	#$E000
.011315	c9 00 20	cmp #$2000		cmp 	#$2000
.011318	f0 04		beq $01131e		beq 	_SIFoundKeyword
.01131a					_SIAdvance:
.01131a	c8		iny			iny 									; if not, loop round.
.01131b	c8		iny			iny
.01131c	80 e2		bra $011300		bra 	_SILoop
.01131e					_SIFoundKeyword:
.01131e	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011321	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011324	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.011327	f0 0d		beq $011336		beq 	_SIKeyPlus
.011329	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.01132c	d0 ec		bne $01131a		bne 	_SIAdvance
.01132e	c6 2c		dec $2c			dec 	DIndent
.011330	10 e8		bpl $01131a		bpl 	_SIAdvance
.011332	64 2c		stz $2c			stz 	DIndent
.011334	80 e4		bra $01131a		bra 	_SIAdvance
.011336					_SIKeyPlus:
.011336	e6 2c		inc $2c			inc 	DIndent
.011338	80 e0		bra $01131a		bra 	_SIAdvance
.01133a					_SIExit:
.01133a	7a		ply			ply
.01133b	68		pla			pla
.01133c	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.01133d					Function_PRINT:
.01133d	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.01133f	f0 33		beq $011374			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011341	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011344	f0 2e		beq $011374			beq 	_FPRExitCR
.011346	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.011349	f0 23		beq $01136e			beq 	_FPRSkipLoop
.01134b	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.01134e	f0 1b		beq $01136b			beq 	_FPRNewLine
.011350	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.011353	f0 11		beq $011366			beq 	_FPRTab
.011355					_FPRExpression:
.011355	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.011358	b0 06		bcs $011360			bcs 	_FPRHaveString
.01135a	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.01135d	20 0d 0f	jsr $010f0d			jsr 	ConvertToString
.011360					_FPRHaveString:
.011360	a8		tay				tay 								; print the basic String.
.011361	20 2a 05	jsr $01052a			jsr 	PrintBASICString
.011364	80 d7		bra $01133d			bra 	Function_Print 				; and go round again.
.011366					_FPRTab:
.011366	20 de 1a	jsr $011ade			jsr 	HWTab
.011369	80 03		bra $01136e			bra 	_FPRSkipLoop
.01136b					_FPRNewLine:
.01136b	20 c9 1a	jsr $011ac9			jsr 	HWNewLine
.01136e					_FPRSkipLoop:
.01136e	e6 06		inc $06				inc 	DCodePtr
.011370	e6 06		inc $06				inc 	DCodePtr
.011372	80 c9		bra $01133d			bra 	Function_Print
.011374					_FPRExitCR:
.011374	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.011376	88		dey				dey
.011377	88		dey				dey
.011378	b9 00 00	lda $0000,y			lda 	$0000,y
.01137b	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.01137e	f0 08		beq $011388			beq 	_FPRExit
.011380	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.011383	f0 03		beq $011388			beq 	_FPRExit
.011385	20 c9 1a	jsr $011ac9			jsr 	HWNewLine 					; print a new line.
.011388					_FPRExit:
.011388	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.011389					Function_IF:
.011389	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.01138c	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.01138e	05 08		ora $08				ora 	DTemp1
.011390	a8		tay				tay 								; success flag in Y.
.011391	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011393	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.011396	d0 32		bne $0113ca			bne 	_FIFExtended 				; if so, go to the extended IF.
.011398	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.01139a	e6 06		inc $06				inc 	DCodePtr
.01139c	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.01139f	f0 0f		beq $0113b0			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.0113a1	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.0113a3	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.0113a6	90 21		bcc $0113c9			bcc 	_FIFContinue 				; if not, just carry on exiting.
.0113a8	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113ab	b0 1c		bcs $0113c9			bcs 	_FIFContinue
.0113ad	4c 3f 16	jmp $01163f			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0113b0					_FIFEndOfLine:
.0113b0	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0113b2	f0 15		beq $0113c9			beq 	_FIFContinue 				; if done so, continue.
.0113b4	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0113b7	90 06		bcc $0113bf			bcc 	_FIFStringConstant
.0113b9	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0113bb	e6 06		inc $06				inc 	DCodePtr
.0113bd	80 f1		bra $0113b0			bra 	_FIFEndOfLine
.0113bf					_FIFStringConstant:
.0113bf	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0113c2	18		clc				clc
.0113c3	65 06		adc $06				adc 	DCodePtr
.0113c5	85 06		sta $06				sta 	DCodePtr
.0113c7	80 e7		bra $0113b0			bra 	_FIFEndOfLine
.0113c9					_FIFContinue:
.0113c9	60		rts				rts
.0113ca					_FIFExtended:
.0113ca	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0113cc	e6 2a		inc $2a				inc 	DStack
.0113ce	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.0113d1	a6 2a		ldx $2a				ldx 	DStack
.0113d3	95 00		sta $00,x			sta 	$00,x
.0113d5	98		tya				tya 								; see if the test was passed.
.0113d6	f0 01		beq $0113d9			beq 	_FIXSkip 					; if zero then it has failed.
.0113d8	60		rts				rts 								; test passed, so continue executing
.0113d9					_FIXSkip:
.0113d9	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0113dc	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.0113df	20 3f 14	jsr $01143f			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0113e2	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0113e4	e6 06		inc $06				inc 	DCodePtr
.0113e6	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0113e9	d0 04		bne $0113ef			bne 	_FIXNoThrow
.0113eb	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0113ed	c6 2a		dec $2a				dec 	DStack
.0113ef					_FIXNoThrow:
.0113ef	60		rts				rts
.0113f0					Handler_ELSE:
.0113f0	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0113f2	b5 00		lda $00,x			lda 	$00,x
.0113f4	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0113f7	d0 12		bne $01140b			bne 	_HEBadStructure
.0113f9	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.0113fc	a2 00 00	ldx #$0000			ldx 	#$0000
.0113ff	20 3f 14	jsr $01143f			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.011402	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.011404	e6 06		inc $06				inc 	DCodePtr
.011406	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011408	c6 2a		dec $2a				dec 	DStack
.01140a	60		rts				rts
.01140b					_HEBadStructure:
.01140b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01140e	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011416	68 6f 75 74 20 49 66 00
.01141e					Handler_ENDIF:
.01141e	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011420	b5 00		lda $00,x			lda 	$00,x
.011422	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.011425	d0 05		bne $01142c			bne 	_HEIBadStructure
.011427	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.011429	c6 2a		dec $2a				dec 	DStack
.01142b	60		rts				rts
.01142c					_HEIBadStructure:
.01142c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01142f	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>011437	68 6f 75 74 20 49 66 00
.01143f					ScanForwardLevel:
.01143f	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011441	86 0a		stx $0a				stx 	DTemp1+2
.011443	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.011445	85 0c		sta $0c				sta 	DTemp2
.011447	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.01144a					_SFLLoop:
.01144a	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.01144d	d0 0d		bne $01145c			bne 	_SFLNoCheck 				; we're in a substructure.
.01144f	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011451	f0 09		beq $01145c			beq 	_SFLNoCheck 				; don't check zero
.011453	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.011455	f0 04		beq $01145b			beq 	_SFLFound
.011457	c5 0a		cmp $0a				cmp 	DTemp1+2
.011459	d0 01		bne $01145c			bne 	_SFLNoCheck
.01145b					_SFLFound:
.01145b	60		rts				rts
.01145c					_SFLNoCheck:
.01145c	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.01145e	f0 4f		beq $0114af			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011460	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011463	90 40		bcc $0114a5			bcc 	_SFLSkipString 				; then handle that.
.011465	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.011467	e6 06		inc $06				inc 	DCodePtr
.011469	a8		tay				tay 								; put token in Y temporarily.
.01146a	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.01146d	c9 00 20	cmp #$2000			cmp 	#$2000
.011470	d0 d8		bne $01144a			bne 	_SFLLoop
.011472	98		tya				tya 								; get the token back.
.011473	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.011476	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.011479	f0 cf		beq $01144a			beq 	_SFLLoop
.01147b	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.01147e	90 ca		bcc $01144a			bcc 	_SFLLoop
.011480	e8		inx				inx 								; increment the level.
.011481	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011484	f0 c4		beq $01144a			beq 	_SFLLoop
.011486	ca		dex				dex 								; decrement the level
.011487	ca		dex				dex 								; one overdoes the previous inx.
.011488	10 c0		bpl $01144a			bpl 	_SFLLoop 					; if gone -ve then error.
.01148a					_SFLError:
.01148a	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.01148c	85 22		sta $22				sta 	DLineNumber
.01148e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011491	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>011499	65 20 69 6d 62 61 6c 61 6e 63 65 00
.0114a5					_SFLSkipString:
.0114a5	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.0114a8	18		clc				clc
.0114a9	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0114ab	85 06		sta $06				sta 	DCodePtr
.0114ad	80 9b		bra $01144a			bra 	_SFLLoop 					; go round again.
.0114af					_SFLNextLine:
.0114af	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0114b1	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0114b4	f0 d4		beq $01148a			beq 	_SFLError 					; if zero, then there's no more code to search.
.0114b6	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0114b9	85 22		sta $22				sta 	DLineNumber
.0114bb	18		clc				clc
.0114bc	a5 06		lda $06				lda 	DCodePtr
.0114be	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0114c1	85 06		sta $06				sta 	DCodePtr
.0114c3	80 85		bra $01144a			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0114c5					Command_FOR:
.0114c5	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0114c7	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0114ca	d0 60		bne $01152c			bne		_CFOBad
.0114cc	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.0114cf	b0 15		bcs $0114e6			bcs 	_CFOExists
.0114d1	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0114d3	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0114d6	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.0114d9	48		pha				pha 								; save on stack
.0114da					_CFOSkipToken:
.0114da	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0114dc	e6 06		inc $06				inc 	DCodePtr
.0114de	e6 06		inc $06				inc 	DCodePtr
.0114e0	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0114e3	d0 f5		bne $0114da			bne 	_CFOSkipToken
.0114e5	68		pla				pla 								; restore address
.0114e6					_CFOExists:
.0114e6	48		pha				pha 								; push variable address on stack
.0114e7	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0114ea	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.0114ed	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.0114f0	bb		tyx				tyx 								; put high value in X
.0114f1	7a		ply				ply 								; address in Y
.0114f2	99 00 00	sta $0000,y			sta 	$0000,y
.0114f5	8a		txa				txa
.0114f6	99 02 00	sta $0002,y			sta 	$0002,y
.0114f9	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.0114fc	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.0114ff	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.011501	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.011503	95 02		sta $02,x			sta 	$02,x
.011505	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011507	95 04		sta $04,x			sta 	$04,x
.011509	98		tya				tya 								; save variable address at +6
.01150a	95 06		sta $06,x			sta 	$06,x
.01150c	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.01150f	95 08		sta $08,x			sta 	$08,x
.011511	8a		txa				txa 								; add 8 to stack position
.011512	18		clc				clc
.011513	69 08 00	adc #$0008			adc 	#8
.011516	85 2a		sta $2a				sta 	DStack
.011518	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.01151b	b2 06		lda ($06)			lda 	(DCodePtr)
.01151d	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.011520	d0 09		bne $01152b			bne 	_CFONoStep
.011522	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.011525	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.011528	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.01152b					_CFONoStep:
.01152b	60		rts				rts
.01152c					_CFOBad:
.01152c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01152f	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>011537	76 61 72 69 61 62 6c 65 00
.011540					Command_NEXT:
.011540	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011542	b5 00		lda $00,x			lda 	$00,x
.011544	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.011547	f0 14		beq $01155d			beq 	_CNXOk
.011549	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01154c	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011554	68 6f 75 74 20 46 6f 72 00
.01155d					_CNXOk:
.01155d	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.01155f	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011562	90 22		bcc $011586			bcc 	_CNXNoVariable
.011564	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.011567	90 08		bcc $011571			bcc 	_CNXNextVar 				; not found variable, it's an error.
.011569	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.01156b	ca		dex				dex
.01156c	ca		dex				dex
.01156d	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.01156f	f0 15		beq $011586			beq 	_CNXNoVariable 				; then continue
.011571					_CNXNextVar:
.011571	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011574	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>01157c	20 76 61 72 69 61 62 6c 65 00
.011586					_CNXNoVariable:
.011586	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.011588	48		pha				pha
.011589	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.01158b	38		sec				sec
.01158c	e9 08 00	sbc #$0008			sbc 	#8
.01158f	85 2a		sta $2a				sta 	DStack
.011591	aa		tax				tax 								; X points to the stack.
.011592	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011594	85 06		sta $06				sta 	DCodePtr
.011596	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.011599	5a		phy				phy 								; save the target on the stack
.01159a	48		pha				pha
.01159b	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.01159e	85 08		sta $08				sta 	DTemp1
.0115a0	64 0a		stz $0a				stz 	DTemp1+2
.0115a2	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.0115a4	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.0115a7	d0 0b		bne $0115b4			bne 	_CNXNoStep
.0115a9	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0115ab	e6 06		inc $06				inc 	DCodePtr
.0115ad	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.0115b0	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0115b2	84 0a		sty $0a				sty 	DTemp1+2
.0115b4					_CNXNoStep:
.0115b4	68		pla				pla 								; save the Target in DTemp2
.0115b5	85 0c		sta $0c				sta 	DTemp2
.0115b7	68		pla				pla
.0115b8	85 0e		sta $0e				sta 	DTemp2+2
.0115ba	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0115bc	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0115be	a8		tay				tay
.0115bf	18		clc				clc
.0115c0	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0115c3	65 08		adc $08				adc 	DTemp1
.0115c5	99 00 00	sta $0000,y			sta 	$0000,y
.0115c8	b9 02 00	lda $0002,y			lda 	$0002,y
.0115cb	65 0a		adc $0a				adc 	DTemp1+2
.0115cd	99 02 00	sta $0002,y			sta 	$0002,y
.0115d0	38		sec				sec
.0115d1	a5 0c		lda $0c				lda 	DTemp2
.0115d3	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0115d6	85 0c		sta $0c				sta 	DTemp2
.0115d8	a5 0e		lda $0e				lda 	DTemp2+2
.0115da	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0115dd	85 0e		sta $0e				sta 	DTemp2+2
.0115df	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0115e1	f0 0a		beq $0115ed			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0115e3	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0115e5	45 0a		eor $0a				eor 	DTemp1+2
.0115e7	10 04		bpl $0115ed			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0115e9	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0115ea	85 06		sta $06				sta 	DCodePtr
.0115ec	60		rts				rts
.0115ed					_CNXLoopAgain:
.0115ed	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0115ee	18		clc				clc
.0115ef	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0115f1	aa		tax				tax
.0115f2	69 08 00	adc #$0008			adc 	#8
.0115f5	85 2a		sta $2a				sta 	DStack
.0115f7	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0115f9	85 22		sta $22				sta 	DLineNumber
.0115fb	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.0115fc					Function_ONGOTO:
.0115fc	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.0115ff	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.011602	d0 25		bne $011629			bne 	_FOGoFail
.011604	c9 00 00	cmp #$0000			cmp 	#0
.011607	f0 20		beq $011629			beq 	_FOGoFail 					; we start with index = 1
.011609	48		pha				pha 								; save count on stack
.01160a	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.01160d	20 b0 04	jsr $0104b0			jsr 	ExpectToken
.011610	fa		plx				plx 								; put count in X.
.011611					_FOGoLoop:
.011611	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011613	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011616	90 73		bcc $01168b			bcc 	FGOFail 					; if not, then we have an error.
.011618	c9 00 c0	cmp #$c000			cmp 	#$C000
.01161b	b0 6e		bcs $01168b			bcs 	FGOFail
.01161d	ca		dex				dex 								; subtract one, if done, call GOTO code
.01161e	f0 1f		beq $01163f			beq 	Function_GOTO
.011620	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011622	e6 06		inc $06				inc 	DCodePtr
.011624	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; expect a comma
.011627	80 e8		bra $011611			bra 	_FOGoLoop 					; and loop round.
.011629					_FOGoFail:
.011629	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01162c	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011634	47 6f 74 6f 20 76 61 6c 75 65 00
.01163f					Function_GOTO:
.01163f	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011641	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011644	90 45		bcc $01168b			bcc 	FGOFail 					; we don't do calculate line numbers.
.011646	c9 00 c0	cmp #$c000			cmp 	#$C000
.011649	b0 40		bcs $01168b			bcs 	FGOFail
.01164b	38		sec				sec 								; convert to 0-32767
.01164c	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.01164f	aa		tax				tax
.011650	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011653	18		clc				clc
.011654	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.011656	a8		tay				tay
.011657					_FGOSearch:
.011657	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01165a	f0 18		beq $011674			beq 	_FGOUnknown
.01165c	8a		txa				txa 								; does it match line number ?
.01165d	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011660	f0 08		beq $01166a			beq 	_FGOFound 					; yes, then found.
.011662	98		tya				tya 								; no follow the link
.011663	18		clc				clc
.011664	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.011667	a8		tay				tay
.011668	80 ed		bra $011657			bra 	_FGOSearch 					; and keep looking
.01166a					_FGOFound:
.01166a	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.01166c	98		tya				tya 								; Y + 4 is the code pointer.
.01166d	18		clc				clc 								; (skipping link and line #)
.01166e	69 04 00	adc #$0004			adc 	#4
.011671	85 06		sta $06				sta 	DCodePtr
.011673	60		rts				rts									; and continue
.011674					_FGOUnknown:
.011674	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011677	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>01167f	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.01168b					FGOFail:
.01168b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01168e	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>011696	20 4e 75 6d 62 65 72 00
.01169e					Function_GOSUB:
.01169e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0116a0	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.0116a2	18		clc				clc
.0116a3	69 02 00	adc #$0002			adc 	#2
.0116a6	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0116a8	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0116aa	95 04		sta $04,x			sta 	$04,x
.0116ac	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0116af	95 06		sta $06,x			sta 	$06,x
.0116b1	8a		txa				txa 								; advance stack by 6.
.0116b2	18		clc				clc
.0116b3	69 06 00	adc #$0006			adc 	#6
.0116b6	85 2a		sta $2a				sta 	DStack
.0116b8	80 85		bra $01163f			bra 	Function_GOTO 				; and do a GOTO.
.0116ba					Function_RETURN:
.0116ba	a6 2a		ldx $2a				ldx 	DStack
.0116bc	b5 00		lda $00,x			lda 	$00,x
.0116be	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0116c1	d0 11		bne $0116d4			bne 	_FRetFail
.0116c3	8a		txa				txa 								; unpick stack.
.0116c4	38		sec				sec
.0116c5	e9 06 00	sbc #$0006			sbc 	#6
.0116c8	85 2a		sta $2a				sta 	DStack
.0116ca	aa		tax				tax
.0116cb	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0116cd	85 06		sta $06				sta 	DCodePtr
.0116cf	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0116d1	85 22		sta $22				sta 	DLineNumber
.0116d3	60		rts				rts
.0116d4					_FRetFail:
.0116d4	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116d7	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0116df	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0116ec					Function_REPEAT:
.0116ec	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0116ee	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0116f0	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0116f2	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0116f4	95 04		sta $04,x			sta 	$04,x
.0116f6	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.0116f9	95 06		sta $06,x			sta 	$06,x
.0116fb	8a		txa				txa 								; advance stack by 6.
.0116fc	18		clc				clc
.0116fd	69 06 00	adc #$0006			adc 	#6
.011700	85 2a		sta $2a				sta 	DStack
.011702	60		rts				rts
.011703					Function_UNTIL:
.011703	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.011705	b5 00		lda $00,x			lda 	$00,x
.011707	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.01170a	d0 26		bne $011732			bne 	_FUNFail
.01170c	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.01170f	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011712	d0 15		bne $011729			bne 	_FUNExit
.011714	c9 00 00	cmp #$0000			cmp 	#0
.011717	d0 10		bne $011729			bne 	_FUNExit
.011719	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.01171b	38		sec				sec
.01171c	e9 06 00	sbc #$0006			sbc 	#6
.01171f	aa		tax				tax
.011720	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011722	85 06		sta $06				sta 	DCodePtr
.011724	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011726	85 22		sta $22				sta 	DLineNumber
.011728	60		rts				rts
.011729					_FUNExit:
.011729	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.01172b	38		sec				sec
.01172c	e9 06 00	sbc #$0006			sbc 	#6
.01172f	85 2a		sta $2a				sta 	DStack
.011731	60		rts				rts
.011732					_FUNFail:
.011732	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011735	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>01173d	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.01174a					Function_WHILE:
.01174a	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.01174c	48		pha				pha 								; save on stack
.01174d	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.011750	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011753	d0 14		bne $011769			bne 	_FWHExecute
.011755	c9 00 00	cmp #$0000			cmp 	#0
.011758	d0 0f		bne $011769			bne 	_FWHExecute
.01175a	68		pla				pla 								; throw away current instruction
.01175b	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.01175e	a2 00 00	ldx #$0000			ldx 	#0
.011761	20 3f 14	jsr $01143f			jsr 	ScanForwardLevel 			; scan forward checking structures
.011764	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.011766	e6 06		inc $06				inc 	DCodePtr
.011768	60		rts				rts
.011769					_FWHExecute:
.011769	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.01176b	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.01176c	3a		dec a				dec 	a
.01176d	3a		dec a				dec 	a
.01176e	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011770	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011772	95 04		sta $04,x			sta 	$04,x
.011774	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.011777	95 06		sta $06,x			sta 	$06,x
.011779	8a		txa				txa 								; advance stack by 6.
.01177a	18		clc				clc
.01177b	69 06 00	adc #$0006			adc 	#6
.01177e	85 2a		sta $2a				sta 	DStack
.011780	60		rts				rts
.011781					Function_WEND:
.011781	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011783	b5 00		lda $00,x			lda 	$00,x
.011785	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.011788	d0 11		bne $01179b			bne 	_FWEFail
.01178a	8a		txa				txa 								; unpick stack and always loop back.
.01178b	38		sec				sec 								; we do the check at the top.
.01178c	e9 06 00	sbc #$0006			sbc 	#6
.01178f	85 2a		sta $2a				sta 	DStack
.011791	aa		tax				tax
.011792	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011794	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.011796	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.011798	85 22		sta $22				sta 	DLineNumber
.01179a	60		rts				rts
.01179b					_FWEFail:
.01179b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01179e	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>0117a6	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0117b1					Function_END:
.0117b1	02 00		cop #$00			cop 	#0
.0117b3					Function_RUN:
.0117b3	20 2f 18	jsr $01182f			jsr 	Function_CLEAR 				; clear all variables.
.0117b6	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0117b8	18		clc				clc
.0117b9	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.0117bc	80 0c		bra $0117ca			bra 	FRun_NextLineNumber
.0117be					RUNExecuteTokenBuffer:
.0117be	64 22		stz $22				stz 	DLineNumber					; zero line number
.0117c0	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; work out code address/
.0117c3	18		clc				clc
.0117c4	65 02		adc $02				adc 	DBaseAddress
.0117c6	85 06		sta $06				sta 	DCodePtr 					; set the code pointer.
.0117c8	80 12		bra $0117dc			bra 	FRun_NextInstruction
.0117ca					FRun_NextLineNumber:
.0117ca	a8		tay				tay 								; put in Y
.0117cb	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0117ce	f0 e1		beq $0117b1			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0117d0	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0117d3	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0117d5	98		tya				tya 								; get address back
.0117d6	18		clc				clc 								; skip over the link/line number
.0117d7	69 04 00	adc #$0004			adc 	#4
.0117da	85 06		sta $06				sta 	DCodePtr
.0117dc					FRun_NextInstruction:
.0117dc	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0117de	20 e5 1a	jsr $011ae5			jsr 	HWCheckBreak 				; break key pressed.
.0117e1	d0 40		bne $011823			bne 	_FRun_Break
.0117e3	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0117e5	f0 32		beq $011819			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0117e7	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.0117ea	f0 18		beq $011804			beq 	_FRun_Colon
.0117ec	a8		tay				tay 								; save in Y
.0117ed	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0117f0	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0117f3	d0 15		bne $01180a			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0117f5	98		tya				tya 								; get token back
.0117f6	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0117f9	0a		asl a				asl 	a 							; double it into X
.0117fa	aa		tax				tax
.0117fb	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0117fd	e6 06		inc $06				inc 	DCodePtr
.0117ff	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.011802	80 d8		bra $0117dc			bra 	FRun_NextInstruction 		; do the following instruction.
.011804					_FRun_Colon:
.011804	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.011806	e6 06		inc $06				inc 	DCodePtr
.011808	80 d2		bra $0117dc			bra 	FRun_NextInstruction 		; do the following instruction.
.01180a					_FRun_TryLET:
.01180a	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.01180c	c9 00 c0	cmp #$c000			cmp 	#$C000
.01180f	90 05		bcc $011816			bcc		_FRunSyntax 				; no, must be syntax.
.011811	20 9d 10	jsr $01109d			jsr 	Function_LET 				; try as a LET.
.011814	80 c6		bra $0117dc			bra 	FRun_NextInstruction 		; if we get away with it, go to next instruction.
.011816					_FRunSyntax:
.011816	82 87 ec	brl $0104a0			brl 	SyntaxError
.011819					_FRun_EndInstruction:
.011819	a5 22		lda $22				lda 	DLineNumber 				; if line number 0, warm start.
.01181b	f0 0f		beq $01182c			beq 	_FRun_WarmStart
.01181d	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.01181f	1a		inc a				inc 	a 							; go to link for next line
.011820	1a		inc a				inc 	a
.011821	80 a7		bra $0117ca			bra 	FRun_NextLineNumber
.011823					_FRun_Break:
.011823	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011826	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.01182c					_FRun_WarmStart:
.01182c	82 ef 02	brl $011b1e			brl 	WarmStart
.01182f					Function_CLEAR:
.01182f	20 3b 18	jsr $01183b			jsr 	ClearVariablesPointersAndStacks
.011832	60		rts				rts
.011833					Function_STOP:
.011833	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011836	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01183b					ClearVariablesPointersAndStacks:
.01183b	a9 80 00	lda #$0080			lda 	#BASStack
.01183e	85 2a		sta $2a				sta 	DStack
.011840	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011842	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011845	a9 00 00	lda #$0000			lda 	#$0000
.011848	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01184a	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01184c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01184f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011851	20 7a 18	jsr $01187a			jsr 	FindCodeEnd 				; find where the program ends.
.011854	a8		tay				tay 								; Y points to it.
.011855	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011858	99 02 00	sta $0002,y			sta 	$0002,y
.01185b	99 04 00	sta $0004,y			sta 	$0004,y
.01185e	98		tya				tya 								; start of working memory up
.01185f	18		clc				clc
.011860	69 06 00	adc #$0006			adc 	#6
.011863	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011866	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011868	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01186b					_FCLoop:
.01186b	a9 00 00	lda #$0000			lda 	#$0000
.01186e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011870	c8		iny				iny
.011871	c8		iny				iny
.011872	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011875	d0 f4		bne $01186b			bne 	_FCLoop
.011877	64 16		stz $16				stz 	DTempStringPointer
.011879	60		rts				rts
.01187a					FindCodeEnd:
.01187a	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.01187d	18		clc				clc
.01187e	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.011880	a8		tay				tay
.011881					_FCELoop:
.011881	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011884	f0 08		beq $01188e			beq 	_FCEExit
.011886	98		tya				tya 								; add offset
.011887	18		clc				clc
.011888	79 00 00	adc $0000,y			adc 	$0000,y
.01188b	a8		tay				tay
.01188c	80 f3		bra $011881			bra 	_FCELoop
.01188e					_FCEExit:
.01188e	98		tya				tya 								; return in A
.01188f	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.011890					Function_Dim:
.011890	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011892	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011895	f0 3b		beq $0118d2			beq		_FDIMNotArray 				; no, error.
.011897	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.01189a	b0 41		bcs $0118dd			bcs 	_FDIMExists 				; if it does, that's an error.
.01189c	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01189e	48		pha				pha
.01189f	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.0118a1	48		pha				pha
.0118a2					_FDIMSkip:
.0118a2	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.0118a4	e6 06		inc $06				inc 	DCodePtr
.0118a6	e6 06		inc $06				inc 	DCodePtr
.0118a8	29 00 08	and #$0800			and 	#IDContMask
.0118ab	d0 f5		bne $0118a2			bne 	_FDIMSkip
.0118ad	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.0118b0	20 ca 04	jsr $0104ca			jsr 	ExpectRightBracket 			; check the ) following.
.0118b3	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.0118b6	d0 3b		bne $0118f3			bne 	_FDIMSize
.0118b8	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.0118bb	f0 36		beq $0118f3			beq 	_FDIMSize
.0118bd	7a		ply				ply 								; restore HashTablePtr
.0118be	84 20		sty $20				sty 	DHashTablePtr
.0118c0	7a		ply				ply 								; so now A is the high index, Y points to the token
.0118c1	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.0118c4	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0118c6	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.0118c9	d0 06		bne $0118d1			bne 	_FDIMExit
.0118cb	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0118cd	e6 06		inc $06				inc 	DCodePtr
.0118cf	80 bf		bra $011890			bra 	Function_DIM 				; and do another
.0118d1					_FDIMExit:
.0118d1	60		rts				rts
.0118d2					_FDIMNotArray:
.0118d2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118d5	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0118dd					_FDIMExists:
.0118dd	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118e0	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0118e8	65 64 69 6d 65 6e 73 69 6f 6e 00
.0118f3					_FDIMSize:
.0118f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118f6	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0118fe	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.011904					Function_COLLECT:
.011904	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.011906	85 0c		sta $0c				sta 	DTemp2
.011908	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.01190b	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.01190d	85 0e		sta $0e				sta 	DTemp2+2
.01190f	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.011911	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011913					_FCNextPass:
.011913	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.011915	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.011917	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.011919	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.01191c	18		clc				clc
.01191d	65 02		adc $02				adc 	DBaseAddress
.01191f	a8		tay				tay 								; put in Y
.011920	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011923					_FCO1:
.011923	20 49 19	jsr $011949			jsr  	COLLECTScanVariable 		; scan that one.
.011926	c8		iny				iny 	 							; go to next pointer
.011927	c8		iny				iny
.011928	ca		dex				dex
.011929	d0 f8		bne $011923			bne 	_FCO1 						; until done all 16.
.01192b	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01192e					_FCO2:
.01192e	20 5d 19	jsr $01195d			jsr  	COLLECTScanArray 			; scan that one.
.011931	c8		iny				iny 	 							; go to next pointer
.011932	c8		iny				iny
.011933	ca		dex				dex
.011934	d0 f8		bne $01192e			bne 	_FCO2 						; until done all 16.
.011936	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011938	f0 0e		beq $011948			beq		_FCExit 					; if finished then exit.
.01193a	48		pha				pha 								; save the target address
.01193b	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01193d	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01193f	20 9f 05	jsr $01059f			jsr 	StringMakeConcrete 			; make the string concrete.
.011942	7a		ply				ply 								; restore the string.
.011943	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011946	80 cb		bra $011913			bra		_FCNextPass
.011948					_FCExit:
.011948	60		rts				rts
.011949					COLLECTScanVariable:
.011949	da		phx				phx 								; save XY
.01194a	5a		phy				phy
.01194b					_CSVLoop:
.01194b	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01194e	f0 0a		beq $01195a			beq 	_CSVExit
.011950	a8		tay				tay 								; put new address into Y
.011951	18		clc				clc 								; which is four on.
.011952	69 04 00	adc #$0004			adc 	#4
.011955	20 7e 19	jsr $01197e			jsr 	COLLECTCheck
.011958	80 f1		bra $01194b			bra 	_CSVLoop
.01195a					_CSVExit:
.01195a	7a		ply				ply
.01195b	fa		plx				plx
.01195c	60		rts				rts
.01195d					COLLECTScanArray:
.01195d	da		phx				phx 								; save XY
.01195e	5a		phy				phy
.01195f					_CSALoop:
.01195f	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011962	f0 17		beq $01197b			beq 	_CSAExit
.011964	a8		tay				tay 								; put new address in Y
.011965	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011968	aa		tax				tax
.011969	e8		inx				inx									; +1 as one more data element.
.01196a	98		tya				tya 								; point A to first element, at +6
.01196b	18		clc				clc
.01196c	69 06 00	adc #$0006			adc 	#6
.01196f					_CSADoAllStrings:
.01196f	20 7e 19	jsr $01197e			jsr 	COLLECTCheck 				; collect check the first.
.011972	1a		inc a				inc 	a 							; advance the pointer.
.011973	1a		inc a				inc 	a
.011974	1a		inc a				inc 	a
.011975	1a		inc a				inc 	a
.011976	ca		dex				dex
.011977	d0 f6		bne $01196f			bne 	_CSADoAllStrings 			; until all strings are done.
.011979	80 e4		bra $01195f			bra 	_CSALoop
.01197b					_CSAExit:
.01197b	7a		ply				ply
.01197c	fa		plx				plx
.01197d	60		rts				rts
.01197e					COLLECTCheck:
.01197e	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.011980	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011982	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011984	90 0a		bcc $011990			bcc 	_COCExit
.011986	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011988	b0 06		bcs $011990			bcs 	_COCExit
.01198a	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01198c	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01198e	85 14		sta $14				sta 	DSignCount
.011990					_COCExit:
.011990	a5 0a		lda $0a				lda 	DTemp1+2
.011992	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011993					Command_POKE:
.011993	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011996	48		pha				pha	 								; save on stack
.011997	5a		phy				phy
.011998	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; comma seperator.
.01199b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.01199e	fa		plx				plx 								; pull address and store in DTemp1
.01199f	86 0a		stx $0a				stx 	DTemp1+2
.0119a1	fa		plx				plx
.0119a2	86 08		stx $08				stx 	DTemp1+0
.0119a4	e2 20		sep #$20			sep 	#$20 						; byte mode
.0119a6	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0119a8	c2 20		rep #$20			rep 	#$20 						; word mode
.0119aa	60		rts				rts
.0119ab					Command_DOKE:
.0119ab	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119ae	48		pha				pha	 								; save on stack
.0119af	5a		phy				phy
.0119b0	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; comma seperator.
.0119b3	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0119b6	fa		plx				plx 								; pull address and store in DTemp1
.0119b7	86 0a		stx $0a				stx 	DTemp1+2
.0119b9	fa		plx				plx
.0119ba	86 08		stx $08				stx 	DTemp1+0
.0119bc	87 08		sta [$08]			sta 	[DTemp1]					; write it
.0119be	60		rts				rts
.0119bf					Command_LOKE:
.0119bf	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119c2	48		pha				pha	 								; save on stack
.0119c3	5a		phy				phy
.0119c4	20 d3 04	jsr $0104d3			jsr 	ExpectComma 				; comma seperator.
.0119c7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0119ca	fa		plx				plx 								; pull address and store in DTemp1
.0119cb	86 0a		stx $0a				stx 	DTemp1+2
.0119cd	fa		plx				plx
.0119ce	86 08		stx $08				stx 	DTemp1+0
.0119d0	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0119d2	98		tya				tya
.0119d3	a0 02 00	ldy #$0002			ldy 	#2
.0119d6	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0119d8	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0119d9					Function_ASSERT:
.0119d9	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.0119dc	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0119de	05 08		ora $08				ora 	Dtemp1
.0119e0	f0 01		beq $0119e3			beq 	_FAssFail
.0119e2	60		rts				rts
.0119e3					_FAssFail:
.0119e3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0119e6	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0119ee	61 69 6c 65 64 00
.0119f4					Function_CLS:
.0119f4	20 4d 1a	jsr $011a4d			jsr 	HWClearScreen
.0119f7	60		rts				rts
.0119f8					Function_REM:
.0119f8	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0119fa	f0 0b		beq $011a07			beq 	_FRemSyntax 				; if 0, syntax error
.0119fc	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0119ff	b0 06		bcs $011a07			bcs 	_FRemSyntax
.011a01	18		clc				clc 								; add to DCodePtr
.011a02	65 06		adc $06				adc 	DCodePtr
.011a04	85 06		sta $06				sta 	DCodePtr
.011a06	60		rts				rts
.011a07					_FRemSyntax:
.011a07	82 96 ea	brl $0104a0			brl 	SyntaxError
.011a0a					Function_LINK:
.011a0a	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.011a0d	85 08		sta $08				sta 	DTemp1 						; target address
.011a0f	84 0a		sty $0a				sty 	DTemp1+2
.011a11	7b		tdc				tda 								; work out what the actual address is
.011a12	18		clc				clc
.011a13	69 08 00	adc #$0008			adc 	#DTemp1
.011a16	8f 4b 1a 01	sta $011a4b			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.011a1a	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.011a1c	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.011a1f	48		pha				pha
.011a20	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011a23	aa		tax				tax
.011a24	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011a27	a8		tay				tay
.011a28	68		pla				pla
.011a29	22 4a 1a 01	jsl $011a4a			jsl 	_FLIExecuteIt
.011a2d	5a		phy				phy 								; save Y
.011a2e	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011a30	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a33	8a		txa				txa
.011a34	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a37	68		pla				pla
.011a38	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a3b	c8		iny				iny 								; point to their high bytes and clear them
.011a3c	c8		iny				iny
.011a3d	a9 00 00	lda #$0000			lda 	#0
.011a40	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a43	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a46	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a49	60		rts				rts
.011a4a					_FLIExecuteIt:
.011a4a	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=$f8020					HWCursor = $F8020
=$f8010					HWKeyPressed = $F8010
=$f8000					HWBreakKey = $F8000
=$f0000					HWScreen = $F0000
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011a4d					HWClearScreen:
.011a4d	48		pha				pha
.011a4e	da		phx				phx
.011a4f	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011a52	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011a55	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a59	ca		dex				dex
.011a5a	10 f6		bpl $011a52			bpl 	_CS0
.011a5c	a9 00 00	lda #$0000			lda 	#0
.011a5f	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011a63	fa		plx				plx
.011a64	68		pla				pla
.011a65	60		rts				rts
.011a66					HWPrintChar:
.011a66	48		pha				pha
.011a67	da		phx				phx
.011a68	5a		phy				phy
.011a69	29 ff 00	and #$00ff			and 	#$00FF
.011a6c	c9 61 00	cmp #$0061			cmp 	#"a"
.011a6f	90 0c		bcc $011a7d			bcc 	_HWPCNotLC
.011a71	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011a74	b0 07		bcs $011a7d			bcs 	_HWPCNotLC
.011a76	38		sec				sec
.011a77	e9 20 00	sbc #$0020			sbc 	#32
.011a7a	09 80 00	ora #$0080			ora 	#128
.011a7d					_HWPCNotLC:
.011a7d	29 bf 00	and #$00bf			and 	#$BF
.011a80	48		pha				pha
.011a81	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011a85	aa		tax				tax
.011a86	68		pla				pla
.011a87	e2 20		sep #$20			sep 	#$20
.011a89	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a8d	c2 20		rep #$20			rep 	#$20
.011a8f	e8		inx				inx
.011a90	8a		txa				txa
.011a91	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011a95	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.011a98	d0 2b		bne $011ac5			bne 	_HWNotEnd
.011a9a	38		sec				sec
.011a9b	e9 40 00	sbc #$0040			sbc 	#sWidth
.011a9e	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011aa2	a2 00 00	ldx #$0000			ldx 	#0
.011aa5					_HWScrollUp:
.011aa5	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011aa9	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011aad	e8		inx				inx
.011aae	e8		inx				inx
.011aaf	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011ab2	d0 f1		bne $011aa5			bne 	_HWScrollUp
.011ab4	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))
.011ab7					_HWBlank:
.011ab7	a9 20 20	lda #$2020			lda 	#$2020
.011aba	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011abe	e8		inx				inx
.011abf	e8		inx				inx
.011ac0	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011ac3	d0 f2		bne $011ab7			bne 	_HWBlank
.011ac5					_HWNotEnd:
.011ac5	7a		ply				ply
.011ac6	fa		plx				plx
.011ac7	68		pla				pla
.011ac8	60		rts				rts
.011ac9					HWNewLine:
.011ac9	48		pha				pha
.011aca	da		phx				phx
.011acb	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011ace					HWMoveCursor:
.011ace	a9 20 00	lda #$0020			lda 	#32
.011ad1	20 66 1a	jsr $011a66			jsr 	HWPrintChar
.011ad4	8a		txa				txa
.011ad5	2f 20 80 0f	and $0f8020			and 	HWCursor
.011ad9	d0 f3		bne $011ace			bne 	HWMoveCursor
.011adb	fa		plx				plx
.011adc	68		pla				pla
.011add	60		rts				rts
.011ade	48		pha		HWTab:	pha
.011adf	da		phx				phx
.011ae0	a2 07 00	ldx #$0007			ldx 	#7
.011ae3	80 e9		bra $011ace			bra 	HWMoveCursor
.011ae5					HWCheckBreak:
.011ae5	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011ae9	60		rts				rts
.011aea					HWGetKey:
.011aea	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011aee	d0 fa		bne $011aea			bne 	HWGetKey
.011af0					_HWGKWait:
.011af0	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011af4	f0 fa		beq $011af0			beq 	_HWGKWait
.011af6	ea		nop				nop
.011af7	60		rts				rts

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011af8					SwitchBasicInstance:
.011af8	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011afa	20 4d 1a	jsr $011a4d			jsr 	HWClearScreen 						; clear screen
.011afd	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011b00	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011b02	86 02		stx $02				stx		DBaseAddress
.011b04	84 04		sty $04				sty 	DHighAddress
.011b06	ba		tsx				tsx 										; save the current SP.
.011b07	86 3a		stx $3a				stx 	DStack65816
.011b09	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011b0a	48		pha				pha 										; then copy it into B.
.011b0b	ab		plb				plb
.011b0c	ab		plb				plb
.011b0d	20 3b 18	jsr $01183b			jsr 	ClearVariablesPointersAndStacks		; clear all variables etc.
.011b10	a0 0e 00	ldy #$000e			ldy 	#Block_BootFlag 					; if boot flag zero, warm start
.011b13	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.011b15	f0 07		beq $011b1e			beq 	WarmStart
.011b17	a9 00 00	lda #$0000			lda 	#$0000 								; reset flag
.011b1a	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011b1c	80 0c		bra $011b2a			bra 	ExecuteTokenBuffer 					; execute contents of token buffer.
.011b1e					WarmStart:
.011b1e	a2 2d 1b	ldx #$1b2d			ldx 	#BasicPrompt & $FFFF
.011b21	20 0c 05	jsr $01050c			jsr 	PrintROMMessage
.011b24					NextCommand:
.011b24	a6 3a		ldx $3a				ldx 	DStack65816 						; reset the CPU stack
.011b26	9a		txs				txs
.011b27	ea		nop				nop
.011b28	80 fe		bra $011b28	w1:		bra 	w1
.011b2a					ExecuteTokenBuffer:
.011b2a	4c be 17	jmp $0117be			jmp 	RUNExecuteTokenBuffer 				; execute the token buffer
.011b2d					BasicPrompt:
>011b2d	52 65 61 64 79 2e 0d 00				.text 	"Ready.",13,0

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 00 00	brl $01f003			brl 	TokenCheckCode
.01f003					TokenCheckCode:
.01f003	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f006	a0 02 00	ldy #$0002			ldy 	#2
.01f009	20 d3 05	jsr $0105d3			jsr 	Tokenise
.01f00c	a6 02		ldx $02				ldx 	DBaseAddress
.01f00e	a0 00 00	ldy #$0000			ldy 	#0
.01f011					_TokeniserTestLoop:
.01f011	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f014	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f017					_TokeniserError:
.01f017	d0 fe		bne $01f017			bne 	_TokeniserError
.01f019	e8		inx				inx
.01f01a	e8		inx				inx
.01f01b	c8		iny				iny
.01f01c	c8		iny				iny
.01f01d	c9 00 00	cmp #$0000			cmp 	#0
.01f020	d0 ef		bne $01f011			bne 	_TokeniserTestLoop
.01f022	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f024	6b		rtl				rtl

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	1a 42 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 29 times (464 bytes)...
>0241f8	00 00 00 00 00 00 00 00 14 00 01 00 3e 3e 25 32
>024208	3f 3e 03 10 00 b0 25 32 30 3e 00 00 00 00 ee ee
>024218	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1756 times (28096 bytes)...
>02aff8	00 00 00 00 00 00 00 00 32 33 37 36 37 39 2f 27
>02b008	25 53 68 24 28 20 52 45 50 45 41 54 3b 62 53 24
>02b018	3a 3e 3e 2c 65 49 71 28 20 6c 65 6e 28 20 34 37
>02b028	30 30 38 39 3b 55 4e 54 49 4c 2a 37 30 35 30 30
>02b038	39 3b 35 34 30 30 32 39 2b 29 28 36 34 38 35 35
>02b048	32 2c 4b 34 64 24 20 31 30 34 38 37 27 69 2a 53
>02b058	54 52 24 28 20 2b 28 33 30 34 34 38 37 2c 33 38
>02b068	38 35 32 36 27 79 7a 25 5a 24 3b 43 76 41 20 76
>02b078	24 25 31 38 34 30 33 35 20 00 00 00 00 00 00 00
>02b088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 22 times (352 bytes)...
>02b1f8	00 00 00 00 00 00 00 00 07 10 6f 60 0d 26 28 32
>02b208	0e 26 7b f1 40 3c 24 32 59 e3 25 32 0f 26 23 32
>02b218	9a d9 11 d0 14 30 0e 10 49 6c 24 32 45 3a 0c 26
>02b228	15 10 f1 81 24 32 10 10 7d 7d 0a 24 27 32 26 32
>02b238	13 10 68 a5 23 32 7e ed 04 e0 f7 68 28 32 09 c0
>02b248	0c 26 16 30 0a 24 26 32 09 10 67 65 23 32 0b 10
>02b258	ae ad 28 32 ab c4 0e 26 1a e0 24 32 e1 cb 01 c0
>02b268	16 e0 0e 26 05 10 e3 8e 00 00 00 00 00 00 00 00
>02b278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 215 times (3440 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
