
; 64tass Turbo Assembler Macro V1.53.1515? listing file
; tass64 --m65816 -f -q -o basic.bin -L basic.lst ../source/start.asm
; Mon Jun 17 07:32:48 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/start.asm

.0000	18		clc				clc											; switch into 65816 16 bit mode.
.0001	fb		xce				xce
.0002	c2 30		rep #$30			rep 	#$30
.0004	a2 fe f3	ldx #$f3fe			ldx 	#DirectPage+CPUStack 				; 65816 Stack
.0007	9a		txs				txs
.0008	a9 00 f0	lda #$f000			lda 	#DirectPage 						; set Direct Page.
.000b	5b		tcd				tcd
.000c	a9 02 00	lda #$0002			lda 	#CodeSpace >> 16 					; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000			ldx 	#CodeSpace & $FFFF 					; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000			ldy 	#CodeEndSpace & $FFFF				; and the end address in Y ($C000)
.0015	5c d6 1a 01	jmp $011ad6			jmp 	SwitchBasicInstance

;******  Processing file: ../source/basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ../source/temp/block.inc

=$0010					Block_FastVariables = $0010
=$0080					Block_HashTable = $0080
=$000f					Block_HashMask = $000f
=$0008					Block_LowMemoryPtr = $0008
=$000a					Block_HighMemoryPtr = $000a
=$000c					Block_EmptyString = $000c
=$0200					Block_ProgramStart = $0200
=$0100					Block_TokenBuffer = $0100
=$0010					Block_HashTableEntrySize = $0010

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/temp/tokens.inc

.010000					CommandJumpTable:
>010000	8e 04					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	48 09					.word Binary_And               & $FFFF ; token $2001 "&"
>010004	58 09					.word Binary_Or                & $FFFF ; token $2002 "|"
>010006	68 09					.word Binary_Xor               & $FFFF ; token $2003 "^"
>010008	ac 09					.word Binary_Less              & $FFFF ; token $2204 "<"
>01000a	13 0a					.word Binary_Greater           & $FFFF ; token $2205 ">"
>01000c	78 09					.word Binary_Equals            & $FFFF ; token $2206 "="
>01000e	f5 09					.word Binary_LessEqual         & $FFFF ; token $2207 "<="
>010010	d7 09					.word Binary_GreaterEqual      & $FFFF ; token $2208 ">="
>010012	92 09					.word Binary_NotEquals         & $FFFF ; token $2209 "<>"
>010014	92 08					.word Binary_Add               & $FFFF ; token $240a "+"
>010016	13 09					.word Binary_Subtract          & $FFFF ; token $240b "-"
>010018	1f 0b					.word Binary_Multiply          & $FFFF ; token $260c "*"
>01001a	9c 0a					.word Binary_Divide            & $FFFF ; token $260d "/"
>01001c	13 0b					.word Binary_Modulus           & $FFFF ; token $260e "%"
>01001e	24 09					.word Binary_ShiftRight        & $FFFF ; token $260f ">>"
>010020	36 09					.word Binary_ShiftLeft         & $FFFF ; token $2610 "<<"
>010022	ad 0b					.word Function_Random          & $FFFF ; token $3011 "rnd("
>010024	8d 0b					.word Function_Sgn             & $FFFF ; token $3012 "sgn("
>010026	69 0b					.word Function_Abs             & $FFFF ; token $3013 "abs("
>010028	53 0b					.word Function_Len             & $FFFF ; token $3014 "len("
>01002a	c7 0d					.word Function_VAL             & $FFFF ; token $3015 "val("
>01002c	e7 0e					.word Function_Str             & $FFFF ; token $3016 "str$("
>01002e	e7 0b					.word Function_Chr             & $FFFF ; token $3017 "chr$("
>010030	1f 0c					.word Function_Asc             & $FFFF ; token $3018 "asc("
>010032	53 0c					.word Function_SPC             & $FFFF ; token $3019 "spc("
>010034	7b 0d					.word Function_Peek            & $FFFF ; token $301a "peek("
>010036	95 0d					.word Function_Deek            & $FFFF ; token $301b "deek("
>010038	ac 0d					.word Function_Leek            & $FFFF ; token $301c "leek("
>01003a	50 10					.word Function_LOWER           & $FFFF ; token $301d "lower$("
>01003c	0e 10					.word Function_UPPER           & $FFFF ; token $301e "upper$("
>01003e	8f 0c					.word Function_LEFT            & $FFFF ; token $301f "left$("
>010040	26 0d					.word Function_MID             & $FFFF ; token $3020 "mid$("
>010042	b8 0c					.word Function_RIGHT           & $FFFF ; token $3021 "right$("
>010044	a7 0f					.word Function_INSTR           & $FFFF ; token $3022 "instr("
>010046	8e 04					.word IllegalToken             & $FFFF ; token $3223 ","
>010048	8e 04					.word IllegalToken             & $FFFF ; token $3224 ";"
>01004a	8e 04					.word IllegalToken             & $FFFF ; token $3225 ":"
>01004c	8e 04					.word IllegalToken             & $FFFF ; token $3226 "("
>01004e	8e 04					.word IllegalToken             & $FFFF ; token $3227 ")"
>010050	8e 04					.word IllegalToken             & $FFFF ; token $3228 "'"
>010052	8e 04					.word IllegalToken             & $FFFF ; token $3829 "to"
>010054	8e 04					.word IllegalToken             & $FFFF ; token $382a "step"
>010056	d6 19					.word Function_REM             & $FFFF ; token $3e2b "rem"
>010058	92 10					.word Function_Let             & $FFFF ; token $3e2c "let"
>01005a	b7 19					.word Function_ASSERT          & $FFFF ; token $3e2d "assert"
>01005c	a6 17					.word Function_END             & $FFFF ; token $3e2e "end"
>01005e	a8 17					.word Function_RUN             & $FFFF ; token $3e2f "run"
>010060	13 18					.word Function_STOP            & $FFFF ; token $3e30 "stop"
>010062	0f 18					.word Function_CLEAR           & $FFFF ; token $3e31 "clear"
>010064	6e 18					.word Function_Dim             & $FFFF ; token $3e32 "dim"
>010066	e2 18					.word Function_COLLECT         & $FFFF ; token $3e33 "collect"
>010068	d2 19					.word Function_CLS             & $FFFF ; token $3e34 "cls"
>01006a	32 13					.word Function_PRINT           & $FFFF ; token $3e35 "print"
>01006c	34 16					.word Function_GOTO            & $FFFF ; token $3e36 "goto"
>01006e	93 16					.word Function_GOSUB           & $FFFF ; token $3e37 "gosub"
>010070	af 16					.word Function_RETURN          & $FFFF ; token $3e38 "return"
>010072	f1 15					.word Function_ONGOTO          & $FFFF ; token $3e39 "on"
>010074	e5 13					.word Handler_ELSE             & $FFFF ; token $3e3a "else"
>010076	71 19					.word Command_POKE             & $FFFF ; token $3e3b "poke"
>010078	89 19					.word Command_DOKE             & $FFFF ; token $3e3c "doke"
>01007a	9d 19					.word Command_LOKE             & $FFFF ; token $3e3d "loke"
>01007c	0d 11					.word Command_List             & $FFFF ; token $3e3e "list"
>01007e	e8 19					.word Function_LINK            & $FFFF ; token $3e3f "link"
>010080	e1 16					.word Function_REPEAT          & $FFFF ; token $3c40 "repeat"
>010082	3f 17					.word Function_WHILE           & $FFFF ; token $3c41 "while"
>010084	7e 13					.word Function_IF              & $FFFF ; token $3c42 "if"
>010086	ba 14					.word Command_FOR              & $FFFF ; token $3c43 "for"
>010088	76 17					.word Function_WEND            & $FFFF ; token $3a44 "wend"
>01008a	f8 16					.word Function_UNTIL           & $FFFF ; token $3a45 "until"
>01008c	8e 04					.word IllegalToken             & $FFFF ; token $3a46 "then"
>01008e	13 14					.word Handler_ENDIF            & $FFFF ; token $3a47 "endif"
>010090	35 15					.word Command_NEXT             & $FFFF ; token $3a48 "next"
.010092					TokenText:
>010092	02 26					 .text $02,"&"        ; token $2001
>010094	02 7c					 .text $02,"|"        ; token $2002
>010096	02 5e					 .text $02,"^"        ; token $2003
>010098	12 3c					 .text $12,"<"        ; token $2204
>01009a	12 3e					 .text $12,">"        ; token $2205
>01009c	12 3d					 .text $12,"="        ; token $2206
>01009e	13 3c 3d				 .text $13,"<="       ; token $2207
>0100a1	13 3e 3d				 .text $13,">="       ; token $2208
>0100a4	13 3c 3e				 .text $13,"<>"       ; token $2209
>0100a7	22 2b					 .text $22,"+"        ; token $240a
>0100a9	22 2d					 .text $22,"-"        ; token $240b
>0100ab	32 2a					 .text $32,"*"        ; token $260c
>0100ad	32 2f					 .text $32,"/"        ; token $260d
>0100af	32 25					 .text $32,"%"        ; token $260e
>0100b1	33 3e 3e				 .text $33,">>"       ; token $260f
>0100b4	33 3c 3c				 .text $33,"<<"       ; token $2610
>0100b7	85 52 4e 44 28				 .text $85,"RND("     ; token $3011
>0100bc	85 53 47 4e 28				 .text $85,"SGN("     ; token $3012
>0100c1	85 41 42 53 28				 .text $85,"ABS("     ; token $3013
>0100c6	85 4c 45 4e 28				 .text $85,"LEN("     ; token $3014
>0100cb	85 56 41 4c 28				 .text $85,"VAL("     ; token $3015
>0100d0	86 53 54 52 24 28			 .text $86,"STR$("    ; token $3016
>0100d6	86 43 48 52 24 28			 .text $86,"CHR$("    ; token $3017
>0100dc	85 41 53 43 28				 .text $85,"ASC("     ; token $3018
>0100e1	85 53 50 43 28				 .text $85,"SPC("     ; token $3019
>0100e6	86 50 45 45 4b 28			 .text $86,"PEEK("    ; token $301a
>0100ec	86 44 45 45 4b 28			 .text $86,"DEEK("    ; token $301b
>0100f2	86 4c 45 45 4b 28			 .text $86,"LEEK("    ; token $301c
>0100f8	88 4c 4f 57 45 52 24 28			 .text $88,"LOWER$("  ; token $301d
>010100	88 55 50 50 45 52 24 28			 .text $88,"UPPER$("  ; token $301e
>010108	87 4c 45 46 54 24 28			 .text $87,"LEFT$("   ; token $301f
>01010f	86 4d 49 44 24 28			 .text $86,"MID$("    ; token $3020
>010115	88 52 49 47 48 54 24 28			 .text $88,"RIGHT$("  ; token $3021
>01011d	87 49 4e 53 54 52 28			 .text $87,"INSTR("   ; token $3022
>010124	92 2c					 .text $92,","        ; token $3223
>010126	92 3b					 .text $92,";"        ; token $3224
>010128	92 3a					 .text $92,":"        ; token $3225
>01012a	92 28					 .text $92,"("        ; token $3226
>01012c	92 29					 .text $92,")"        ; token $3227
>01012e	92 27					 .text $92,"'"        ; token $3228
>010130	c3 54 4f				 .text $c3,"TO"       ; token $3829
>010133	c5 53 54 45 50				 .text $c5,"STEP"     ; token $382a
>010138	f4 52 45 4d				 .text $f4,"REM"      ; token $3e2b
>01013c	f4 4c 45 54				 .text $f4,"LET"      ; token $3e2c
>010140	f7 41 53 53 45 52 54			 .text $f7,"ASSERT"   ; token $3e2d
>010147	f4 45 4e 44				 .text $f4,"END"      ; token $3e2e
>01014b	f4 52 55 4e				 .text $f4,"RUN"      ; token $3e2f
>01014f	f5 53 54 4f 50				 .text $f5,"STOP"     ; token $3e30
>010154	f6 43 4c 45 41 52			 .text $f6,"CLEAR"    ; token $3e31
>01015a	f4 44 49 4d				 .text $f4,"DIM"      ; token $3e32
>01015e	f8 43 4f 4c 4c 45 43 54			 .text $f8,"COLLECT"  ; token $3e33
>010166	f4 43 4c 53				 .text $f4,"CLS"      ; token $3e34
>01016a	f6 50 52 49 4e 54			 .text $f6,"PRINT"    ; token $3e35
>010170	f5 47 4f 54 4f				 .text $f5,"GOTO"     ; token $3e36
>010175	f6 47 4f 53 55 42			 .text $f6,"GOSUB"    ; token $3e37
>01017b	f7 52 45 54 55 52 4e			 .text $f7,"RETURN"   ; token $3e38
>010182	f3 4f 4e				 .text $f3,"ON"       ; token $3e39
>010185	f5 45 4c 53 45				 .text $f5,"ELSE"     ; token $3e3a
>01018a	f5 50 4f 4b 45				 .text $f5,"POKE"     ; token $3e3b
>01018f	f5 44 4f 4b 45				 .text $f5,"DOKE"     ; token $3e3c
>010194	f5 4c 4f 4b 45				 .text $f5,"LOKE"     ; token $3e3d
>010199	f5 4c 49 53 54				 .text $f5,"LIST"     ; token $3e3e
>01019e	f5 4c 49 4e 4b				 .text $f5,"LINK"     ; token $3e3f
>0101a3	e7 52 45 50 45 41 54			 .text $e7,"REPEAT"   ; token $3c40
>0101aa	e6 57 48 49 4c 45			 .text $e6,"WHILE"    ; token $3c41
>0101b0	e3 49 46				 .text $e3,"IF"       ; token $3c42
>0101b3	e4 46 4f 52				 .text $e4,"FOR"      ; token $3c43
>0101b7	d5 57 45 4e 44				 .text $d5,"WEND"     ; token $3a44
>0101bc	d6 55 4e 54 49 4c			 .text $d6,"UNTIL"    ; token $3a45
>0101c2	d5 54 48 45 4e				 .text $d5,"THEN"     ; token $3a46
>0101c7	d6 45 4e 44 49 46			 .text $d6,"ENDIF"    ; token $3a47
>0101cd	d5 4e 45 58 54				 .text $d5,"NEXT"     ; token $3a48
>0101d2	00					.byte $00
=$2001					ampersandTokenID                 = $2001
=$2002					barTokenID                       = $2002
=$2003					hatTokenID                       = $2003
=$2204					lessTokenID                      = $2204
=$2205					greaterTokenID                   = $2205
=$2206					equalTokenID                     = $2206
=$2207					lessequalTokenID                 = $2207
=$2208					greaterequalTokenID              = $2208
=$2209					lessgreaterTokenID               = $2209
=$240a					plusTokenID                      = $240a
=$240b					minusTokenID                     = $240b
=$260c					starTokenID                      = $260c
=$260d					slashTokenID                     = $260d
=$260e					percentTokenID                   = $260e
=$260f					greatergreaterTokenID            = $260f
=$2610					lesslessTokenID                  = $2610
=$3011					rndlparenTokenID                 = $3011
=$3012					sgnlparenTokenID                 = $3012
=$3013					abslparenTokenID                 = $3013
=$3014					lenlparenTokenID                 = $3014
=$3015					vallparenTokenID                 = $3015
=$3016					strdollarlparenTokenID           = $3016
=$3017					chrdollarlparenTokenID           = $3017
=$3018					asclparenTokenID                 = $3018
=$3019					spclparenTokenID                 = $3019
=$301a					peeklparenTokenID                = $301a
=$301b					deeklparenTokenID                = $301b
=$301c					leeklparenTokenID                = $301c
=$301d					lowerdollarlparenTokenID         = $301d
=$301e					upperdollarlparenTokenID         = $301e
=$301f					leftdollarlparenTokenID          = $301f
=$3020					middollarlparenTokenID           = $3020
=$3021					rightdollarlparenTokenID         = $3021
=$3022					instrlparenTokenID               = $3022
=$3223					commaTokenID                     = $3223
=$3224					semicolonTokenID                 = $3224
=$3225					colonTokenID                     = $3225
=$3226					lparenTokenID                    = $3226
=$3227					rparenTokenID                    = $3227
=$3228					squoteTokenID                    = $3228
=$3829					toTokenID                        = $3829
=$382a					stepTokenID                      = $382a
=$3e2b					remTokenID                       = $3e2b
=$3e2c					letTokenID                       = $3e2c
=$3e2d					assertTokenID                    = $3e2d
=$3e2e					endTokenID                       = $3e2e
=$3e2f					runTokenID                       = $3e2f
=$3e30					stopTokenID                      = $3e30
=$3e31					clearTokenID                     = $3e31
=$3e32					dimTokenID                       = $3e32
=$3e33					collectTokenID                   = $3e33
=$3e34					clsTokenID                       = $3e34
=$3e35					printTokenID                     = $3e35
=$3e36					gotoTokenID                      = $3e36
=$3e37					gosubTokenID                     = $3e37
=$3e38					returnTokenID                    = $3e38
=$3e39					onTokenID                        = $3e39
=$3e3a					elseTokenID                      = $3e3a
=$3e3b					pokeTokenID                      = $3e3b
=$3e3c					dokeTokenID                      = $3e3c
=$3e3d					lokeTokenID                      = $3e3d
=$3e3e					listTokenID                      = $3e3e
=$3e3f					linkTokenID                      = $3e3f
=$3c40					repeatTokenID                    = $3c40
=$3c41					whileTokenID                     = $3c41
=$3c42					ifTokenID                        = $3c42
=$3c43					forTokenID                       = $3c43
=$3a44					wendTokenID                      = $3a44
=$3a45					untilTokenID                     = $3a45
=$3a46					thenTokenID                      = $3a46
=$3a47					endifTokenID                     = $3a47
=$3a48					nextTokenID                      = $3a48

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/data.asm

=$f000					DirectPage = $F000
=$00					DPBaseAddress = $00 						; Base address used for direct page.
=0					DPageNumber = DPBaseAddress+0 				; page number of workspace area (upper 8 bits of address)
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DRandom = DPBaseAddress + 16 				; *** LONG *** Random Seed
=20					DSignCount = DPBaseAddress + 20 			; Sign count in division.
=22					DTempStringPointer = DPBaseAddress + 22 	; memory allocated to temp string pointer, going down.
=24					DStartTempString = DPBaseAddress + 24 		; start of current temporary string
=26					DCurrentTempString = DPBaseAddress + 26 	; current position in temporary string.
=28					DConstantShift = DPBaseAddress + 28 		; constant shift store.
=30					DVariablePtr = DPBaseAddress + 30 			; address of found variable.
=32					DHashTablePtr = DPBaseAddress + 32 			; address of hash entry of searched variable.
=34					DLineNumber = DPBaseAddress + 34 			; current line number.
=36					DTemp3 = DPBaseAddress + 36 				; *** LONG *** Temporary Value.
=40					DCursor = DPBaseAddress + 40 				; cursor (for external routines, not used by BASIC)
=42					DStack = DPBaseAddress + 42 				; BASIC stack pointer.
=44					DIndent = DPBaseAddress + 44 				; indent for LIST
=46					DIndent2 = DPBaseAddress + 46 				; previous indent.
=48					DListBuffer = DPBaseAddress + 48 			; list buffer address.
=50					DTemp4 = DPBaseAddress + 50 				; *** LONG *** Temporary Value
=54					DTemp5 = DPBaseAddress + 54 				; *** LONG *** Temporary Value
=$80					BASStack = $80 								; start of Basic stack.
=$180					BASStackSize = $180 						; maximum size of BASIC stack.
=$200					EXSBase = $200 								; Initial value of X at lowest stack level.
=16					EXSStackElements = 16 						; depth of stack.
=0					EXSValueL = 0 								; Low word
=32					EXSValueH = EXSStackElements*2  			; High word
=64					EXSPrecType = EXSStackElements*2*2			; Precedence level / type is in bit 15, 1 = string.
=1022					CPUStack = EXSBase+$200-2 					; CPU Stack initial value.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/expression.asm

.0101d3					Evaluate:
.0101d3	a2 00 02	ldx #$0200			ldx		#EXSBase 					; reset the stack
.0101d6	a9 00 00	lda #$0000			lda 	#0<<TokenShift 				; start at the lowest precedence level.
.0101d9					EvaluateLevel:
.0101d9	29 ff 7f	and #$7fff			and 	#$7FFF 						; zero type bit, which means integer unless we change it.
.0101dc	95 40		sta $40,x			sta 	EXSPrecType+0,x 			; save precedence level.
.0101de	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.0101e0	c9 00 c0	cmp #$c000			cmp 	#$C000 						; if $C000-$CFFF then variable.
.0101e3	b0 79		bcs $01025e			bcs 	_ELVariable
.0101e5	c9 00 40	cmp #$4000			cmp 	#$4000 						; if $4000-$BFFF then constant
.0101e8	b0 16		bcs $010200			bcs 	_ELConstant
.0101ea	c9 00 10	cmp #$1000			cmp 	#$1000 						; if $0000-$00FF then it's a end of line or string.
.0101ed	90 7f		bcc $01026e			bcc 	_ELStringConstant
.0101ef	c9 00 20	cmp #$2000			cmp 	#$2000 						; if $1000-$1FFF then it's a constant shift
.0101f2	90 03		bcc $0101f7			bcc 	_ELConstantShift
.0101f4	82 94 00	brl $01028b			brl 	_ELUnaryKeyword 			; if $2000-$3FFF then it's a unary operator/keyword
.0101f7					_ELConstantShift:
.0101f7	29 ff 0f	and #$0fff			and 	#$0FFF 						; mask out bits 11-0
.0101fa	85 1c		sta $1c				sta 	DConstantShift 				; save in constant shift
.0101fc	e6 06		inc $06				inc 	DCodePtr 					; skip over the token.
.0101fe	e6 06		inc $06				inc 	DCodePtr
.010200					_ELConstant:
.010200	b2 06		lda ($06)			lda 	(DCodePtr)					; get the constant value
.010202	38		sec				sec  								; shift it in the range 0-32767
.010203	e9 00 40	sbc #$4000			sbc 	#$4000
.010206	0a		asl a				asl 	a 							; shift it left, losing bit 15
.010207	46 1c		lsr $1c				lsr 	DConstantShift 				; shift constant right into carry.
.010209	6a		ror a				ror 	a 							; rotate that into the constant value
.01020a	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save as low word
.01020c	a5 1c		lda $1c				lda 	DConstantShift 				; constant shift is high word.
.01020e	95 20		sta $20,x			sta 	EXSValueH+0,x
.010210	64 1c		stz $1c				stz 	DConstantShift 				; clear the constant shift
.010212	e6 06		inc $06				inc 	DCodePtr 					; skip over constant
.010214	e6 06		inc $06				inc 	DCodePtr
.010216					_ELGotAtom:
.010216	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code pointer.
.010218	a8		tay				tay 								; save in Y
.010219	29 00 f0	and #$f000			and 	#$F000 						; is it 0010 xxxk e.g. a binary operator.
.01021c	c9 00 20	cmp #$2000			cmp 	#$2000 						; if not then exit
.01021f	d0 35		bne $010256			bne 	_ELExit
.010221	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; get precedence/type
.010223	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.010226	85 08		sta $08				sta 	DTemp1 						; save in temporary register
.010228	98		tya				tya 								; get the keyword token back
.010229	29 00 1e	and #$1e00			and 	#15 << TokenShift 			; mask out the precedence bits.
.01022c	c5 08		cmp $08				cmp 	DTemp1 						; compare against precedence of the new binary operator.
.01022e	90 26		bcc $010256			bcc 	_ELExit 					; precedence too low, then exit.
.010230	5a		phy				phy 								; save the binary operator on the stack
.010231	e6 06		inc $06				inc 	DCodePtr 					; skip over the binary operator.
.010233	e6 06		inc $06				inc 	DCodePtr
.010235	18		clc				clc 								; try the next level up
.010236	69 00 02	adc #$0200			adc 	#1 << TokenShift
.010239	e8		inx				inx 								; calculate the RHS at the next stack level.
.01023a	e8		inx				inx
.01023b	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.01023e	ca		dex				dex
.01023f	ca		dex				dex
.010240	7a		ply				ply 								; get operator token back into Y
.010241					_ELExecuteY:
.010241	98		tya				tya
.010242	29 ff 01	and #$01ff			and 	#$01FF 						; keyword ID.
.010245	0a		asl a				asl 	a 							; double it as keyword vector table is word data
.010246	9b		txy				txy 								; save X in Y
.010247	aa		tax				tax 								; double keyword ID in X
.010248	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 			; this is the vector address
.01024c	bb		tyx				tyx 								; restore X.
.01024d	8f 52 02 01	sta $010252			sta 	_ELCallRoutine+1 			; Self modifying, will not work in ROM.
.010251					_ELCallRoutine:
.010251	20 51 02	jsr $010251			jsr 	_ELCallRoutine 				; call the new address *MODIFIED*
.010254	80 c0		bra $010216			bra 	_ELGotAtom 					; go round operator level again.
.010256	b5 40		lda $40,x	_ELExit:lda 	EXSPrecType+0,x 			; type into carry
.010258	0a		asl a				asl 	a
.010259	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; put result into YA
.01025b	b4 20		ldy $20,x			ldy 	EXSValueH+0,x
.01025d	60		rts				rts
.01025e					_ELVariable:
.01025e	16 40		asl $40,x			asl 	EXSPrecType+0,x 			; shift it left
.010260	20 1f 03	jsr $01031f			jsr 	VariableAccessExpression	; this will be 'find variable, error if failed', get value.
.010263	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save variable contents in stack
.010265	94 20		sty $20,x			sty 	EXSValueH+0,x
.010267	76 40		ror $40,x			ror 	EXSPrecType+0,x 			; shift right rotating the carry in.
.010269	80 ab		bra $010216			bra 	_ELGotAtom
.01026b					_ELSyntax
.01026b	82 31 02	brl $01049f			brl 	SyntaxError
.01026e					_ELStringConstant:
.01026e	09 00 00	ora #$0000			ora 	#0000 						; if it is $0000 then we have an error, end of line.
.010271	f0 f8		beq $01026b			beq 	_ELSyntax
.010273	a5 06		lda $06				lda 	DCodePtr 					; get the code pointer and add 2, to point to the string
.010275	1a		inc a				inc 	a
.010276	1a		inc a				inc 	a
.010277	95 00		sta $00,x			sta 	EXSValueL+0,x 				; this is the low word
.010279	74 20		stz $20,x			stz 	EXSValueH+0,x 				; high word is zero.
.01027b	b2 06		lda ($06)			lda 	(DCodePtr)					; get length to skip
.01027d	18		clc				clc 								; add to string constant.
.01027e	65 06		adc $06				adc 	DCodePtr
.010280	85 06		sta $06				sta 	DCodePtr
.010282	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; set type to string
.010284	09 00 80	ora #$8000			ora 	#$8000
.010287	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010289	80 8b		bra $010216			bra 	_ELGotAtom
.01028b					_ELUnaryKeyword:
.01028b	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the next token
.01028d	a8		tay				tay 								; put the token in Y.
.01028e	e6 06		inc $06				inc 	DCodePtr 					; skip over it
.010290	e6 06		inc $06				inc 	DCodePtr
.010292	29 00 1e	and #$1e00			and 	#15 << TokenShift			; mask out the keyword type.
.010295	c9 00 10	cmp #$1000			cmp 	#UnaryFunction<<TokenShift 	; if it is xxx1 000x then it's a unary function
.010298	f0 a7		beq $010241			beq 	_ELExecuteY					; go back and execute it
.01029a	c0 26 32	cpy #$3226			cpy 	#lparenTokenID 				; is it an open bracket ?
.01029d	d0 11		bne $0102b0			bne 	_ELUnaryOperator 			; it not, try unary operators.
.01029f	20 d6 02	jsr $0102d6			jsr 	EvaluateNext 				; evaluate the expression
.0102a2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; consume the right bracket.
.0102a5					_ELCopy:
.0102a5	b5 02		lda $02,x			lda 	EXSValueL+2,x 				; just copy the value
.0102a7	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102a9	b5 22		lda $22,x			lda 	EXSValueH+2,x
.0102ab	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102ad	82 66 ff	brl $010216			brl 	_ELGotAtom 					; and continue.
.0102b0					_ELUnaryOperator:
.0102b0	5a		phy				phy 								; save the operator on the stack.
.0102b1	e8		inx				inx 								; this is like evaluate next
.0102b2	e8		inx				inx
.0102b3	a9 00 0e	lda #$0e00			lda 	#7<<TokenShift 				; except we use a very high precedence to make it atomic
.0102b6	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102b9	ca		dex				dex 								; unwind the stack.
.0102ba	ca		dex				dex
.0102bb	68		pla				pla 								; restore the unary operator.
.0102bc	c9 0b 24	cmp #$240b			cmp 	#minusTokenID				; -xxx is unary negation
.0102bf	f0 03		beq $0102c4			beq 	_ELMinus
.0102c1	4c 9f 04	jmp $01049f			jmp 	SyntaxError
.0102c4					_ELMinus:
.0102c4	38		sec				sec 								; do the negation calculation.
.0102c5	a9 00 00	lda #$0000			lda 	#0
.0102c8	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0102ca	95 00		sta $00,x			sta 	EXSValueL+0,x
.0102cc	a9 00 00	lda #$0000			lda 	#0
.0102cf	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.0102d1	95 20		sta $20,x			sta 	EXSValueH+0,x
.0102d3	82 40 ff	brl $010216			brl 	_ELGotAtom					; and continue.
.0102d6					EvaluateNext:
.0102d6	e8		inx				inx
.0102d7	e8		inx				inx
.0102d8	a9 00 00	lda #$0000			lda 	#0<<TokenShift
.0102db	20 d9 01	jsr $0101d9			jsr 	EvaluateLevel
.0102de	ca		dex				dex
.0102df	ca		dex				dex
.0102e0	60		rts				rts
.0102e1					EvaluateInteger:
.0102e1	20 d3 01	jsr $0101d3			jsr 	Evaluate
.0102e4	b0 01		bcs $0102e7			bcs 	EIType
.0102e6	60		rts				rts
.0102e7					EIType:
.0102e7	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0102ea	4e 75 6d 62 65 72 20 65				.text 	"Number expected",$00 								; with this message
>0102f2	78 70 65 63 74 65 64 00
.0102fa					EvaluateNextInteger:
.0102fa	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.0102fd	b0 e8		bcs $0102e7			bcs 	EIType
.0102ff	60		rts				rts
.010300					EvaluateString:
.010300	20 d3 01	jsr $0101d3			jsr 	Evaluate
.010303	90 01		bcc $010306			bcc 	ESType
.010305	60		rts				rts
.010306					ESType:
.010306	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010309	53 74 72 69 6e 67 20 65				.text 	"String expected",$00 								; with this message
>010311	78 70 65 63 74 65 64 00
.010319					EvaluateNextString:
.010319	20 d6 02	jsr $0102d6			jsr 	EvaluateNext
.01031c	90 e8		bcc $010306			bcc 	ESType
.01031e	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable.asm

.01031f					VariableAccessExpression:
.01031f	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, push on stack
.010321	48		pha				pha
.010322	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find the variables
.010325	85 1e		sta $1e				sta 	DVariablePtr 				; store the result in DVariablePtr
.010327	90 23		bcc $01034c			bcc 	_VANError 					; not found, so report an error.
.010329	68		pla				pla 								; get and save that first token
.01032a	48		pha				pha 								; we use it for typing.
.01032b	a8		tay				tay 								; put first token in Y.
.01032c	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.01032f	f0 07		beq $010338			beq 	_VANNotArray
.010331	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A
.010333	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.010336	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.010338					_VANNotArray:
.010338	68		pla				pla 								; get the token back.
.010339	29 00 20	and #$2000			and 	#IDTypeMask 				; this is the integer/string bit. $2000 if string, $0000 if int
.01033c	49 00 20	eor #$2000			eor 	#IDTypeMask 				; now $0000 if string, $2000 if integer.
.01033f	38		sec				sec 								; set up return string.
.010340	f0 06		beq $010348			beq 	_VANLoadLower 				; if zero, Y = 0 and just load the lower address with the variable (string)
.010342	18		clc				clc 								; returning a number, read high data word
.010343	a0 02 00	ldy #$0002			ldy 	#2
.010346	b1 1e		lda ($1e),y			lda 	(DVariablePtr),y
.010348					_VANLoadLower:
.010348	a8		tay				tay 								; put A into Y (this is the high byte)
.010349	b2 1e		lda ($1e)			lda 	(DVariablePtr)				; read the low data word
.01034b	60		rts				rts
.01034c					_VANError:
.01034c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01034f	56 61 72 69 61 62 6c 65				.text 	"Variable unknown",$00 								; with this message
>010357	20 75 6e 6b 6e 6f 77 6e 00
.010360					VariableFind:
.010360	b2 06		lda ($06)			lda 	(DCodePtr)					; look at the first token
.010362	c9 00 c0	cmp #$c000			cmp 	#$C000 						; must be $C000-$FFFF, an identifier.
.010365	90 5c		bcc $0103c3			bcc 	_VFError
.010367	c9 1b c0	cmp #$c01b			cmp 	#$C01A+1					; C01A is identifier, no continuation Z
.01036a	b0 11		bcs $01037d			bcs 	_VFSlowVariable 			; < this it is the fast variable A-Z
.01036c	29 1f 00	and #$001f			and 	#$001F 						; now it is 1-26.
.01036f	3a		dec a				dec 	a 							; now 0-25
.010370	0a		asl a				asl 	a 							; x 4 and clear carry
.010371	0a		asl a				asl 	a
.010372	69 10 00	adc #$0010			adc 	#Block_FastVariables 		; offset to fast variables
.010375	65 02		adc $02				adc 	DBaseAddress 				; now an actual address in A
.010377	e6 06		inc $06				inc 	DCodePtr 					; skip over the token (only one)
.010379	e6 06		inc $06				inc 	DCodePtr
.01037b	38		sec				sec 								; return with carry set.
.01037c	60		rts				rts
.01037d					_VFSlowVariable:
.01037d	b2 06		lda ($06)			lda 	(DCodePtr)					; get the token
.01037f	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask) 	; get the type bits out --tt ---- ---- ----
.010382	eb		xba				xba 								; now this is 0000 0000 00tt 0000 e.g. tt x 16
.010383	0a		asl a				asl 	a 							; there are 32 entries per table, also clc
.010384	69 80 00	adc #$0080			adc 	#Block_HashTable 			; now its the correct has table offset
.010387	65 02		adc $02				adc 	DBaseAddress 				; now the actual address
.010389	85 08		sta $08				sta 	DTemp1
.01038b	b2 06		lda ($06)			lda 	(DCodePtr) 					; get the token - building the hash code.
.01038d	29 0f 00	and #$000f			and 	#Block_HashMask 			; now a mask value.
.010390	0a		asl a				asl 	a 							; double (word entries) and clear carry
.010391	65 08		adc $08				adc 	DTemp1
.010393	85 20		sta $20				sta 	DHashTablePtr 				; save pointer for later
.010395	85 08		sta $08				sta 	DTemp1 						; save in DTemp1, which we will use to follow the chain.
.010397					_VFNext:
.010397	b2 08		lda ($08)			lda 	(DTemp1) 					; normally the link, first time will be the header.
.010399	f0 26		beq $0103c1			beq 	_VFFail 					; if zero, then it's the end of the list.
.01039b	85 08		sta $08				sta 	DTemp1 						; this is the new variable record to check
.01039d	a8		tay				tay 								; read the address of the name at $0002,y
.01039e	b9 02 00	lda $0002,y			lda 	$0002,y
.0103a1	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.0103a3	a0 00 00	ldy #$0000			ldy 	#0 							; start matching lists of tokens
.0103a6					_VFCompare:
.0103a6	b1 0c		lda ($0c),y			lda 	(DTemp2),y 					; see if they match
.0103a8	d1 06		cmp ($06),y			cmp 	(DCodePtr),y
.0103aa	d0 eb		bne $010397			bne 	_VFNext 					; if not, go to the next one.
.0103ac	c8		iny				iny 								; advance token pointer
.0103ad	c8		iny				iny
.0103ae	29 00 08	and #$0800			and 	#IDContMask 				; if continuation bit set, keep going (if they match)
.0103b1	d0 f3		bne $0103a6			bne 	_VFCompare
.0103b3	98		tya				tya 								; this is the length of the word.
.0103b4	18		clc				clc 								; so we add it to the code pointer
.0103b5	65 06		adc $06				adc 	DCodePtr
.0103b7	85 06		sta $06				sta 	DCodePtr 					; now points to the following token.
.0103b9	a5 08		lda $08				lda 	DTemp1 						; this is the variable record
.0103bb	18		clc				clc 								; four on is the actual data
.0103bc	69 04 00	adc #$0004			adc 	#4 							; or it's the index for indexes.
.0103bf	38		sec				sec 								; return with CS indicating success
.0103c0	60		rts				rts
.0103c1					_VFFail:
.0103c1	18		clc				clc
.0103c2	60		rts				rts
.0103c3					_VFError:
.0103c3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103c6	4d 69 73 73 69 6e 67 20				.text 	"Missing variable",$00 								; with this message
>0103ce	76 61 72 69 61 62 6c 65 00
.0103d7					VariableSubscript:
.0103d7	48		pha				pha		 							; save variable address on stack.
.0103d8	20 fa 02	jsr $0102fa			jsr		EvaluateNextInteger 		; get the subscript
.0103db	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; skip right bracket.
.0103de	c0 00 00	cpy #$0000			cpy 	#0 							; msword must be zero
.0103e1	d0 10		bne $0103f3			bne 	_VANSubscript
.0103e3	d2 1e		cmp ($1e)			cmp 	(DVariablePtr)				; the subscript is at +4, so check against that.
.0103e5	f0 02		beq $0103e9			beq 	_VANSubOkay 				; fail if subscript > high subscript
.0103e7	b0 0a		bcs $0103f3			bcs 	_VANSubscript
.0103e9					_VANSubOkay:
.0103e9	0a		asl a				asl 	a 							; double lsword
.0103ea	0a		asl a				asl 	a 							; and again, also clears carry.
.0103eb	85 08		sta $08				sta 	DTemp1	 					; 4 x subscript in DTemp1
.0103ed	68		pla				pla 								; restore DVariablePtr
.0103ee	1a		inc a				inc 	a 							; add 2 to get it past the high subscript
.0103ef	1a		inc a				inc 	a
.0103f0	65 08		adc $08				adc 	DTemp1 						; add the subscript
.0103f2	60		rts				rts
.0103f3					_VANSubscript:
.0103f3	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0103f6	42 61 64 20 41 72 72 61				.text 	"Bad Array Subscript",$00 								; with this message
>0103fe	79 20 53 75 62 73 63 72 69 70 74 00
.01040a					VariableCreate:
.01040a	48		pha				pha 								; save count.
.01040b	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token
.01040e	29 00 20	and #$2000			and 	#IDTypeMask
.010411	f0 06		beq $010419			beq 	_VCIsInteger 				; if this is zero ... use zero.
.010413	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; otherwise fill with this address.
.010416	18		clc				clc 								; which is guaranteed by have a 0 length.
.010417	65 02		adc $02				adc 	DBaseAddress
.010419					_VCIsInteger:
.010419	85 14		sta $14				sta 	DSignCount 					; this is temporary for this
.01041b	68		pla				pla 								; restore count
.01041c	48		pha				pha
.01041d	1a		inc a				inc 	a 							; need 1 more element. If zero, you need one. If high index,size is one more.
.01041e	0a		asl a				asl 	a 							; 2 x # items.
.01041f	0a		asl a				asl 	a 							; 4 x # items.
.010420					_VCNotSingle:
.010420	85 08		sta $08				sta 	DTemp1 						; save temporarily
.010422	b9 00 00	lda $0000,y			lda 	$0000,y 					; get first token.
.010425	29 00 10	and #$1000			and 	#IDArrayMask 				; check array bit.
.010428	f0 04		beq $01042e			beq 	_VCNotArray
.01042a	e6 08		inc $08				inc 	DTemp1 						; if set, add 2 to count, space stores the high index value.
.01042c	e6 08		inc $08				inc 	DTemp1
.01042e					_VCNotArray:
.01042e	5a		phy				phy 								; save address of first token on stack.
.01042f	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; get low memory
.010432	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010434	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010436	18		clc				clc 								; add 4 for link and name words
.010437	69 04 00	adc #$0004			adc 	#4
.01043a	65 08		adc $08				adc 	DTemp1 						; add memory required. already calculate this.
.01043c	91 02		sta ($02),y			sta 	(DBaseAddress),y 			; update low memory
.01043e	a4 0c		ldy $0c				ldy 	DTemp2 						; put the address back in Y
.010440					_VCErase:
.010440	a5 14		lda $14				lda 	DSignCount 					; clear that word to empty string/zero.
.010442	99 04 00	sta $0004,y			sta 	$0004,y 					; data from +4 onwards
.010445	c8		iny				iny
.010446	c8		iny				iny
.010447	c6 08		dec $08				dec 	DTemp1 						; do it DTemp1 times.
.010449	c6 08		dec $08				dec 	DTemp1 						; (this is the count of the data beyond link/name)
.01044b	d0 f3		bne $010440			bne 	_VCErase
.01044d	a4 0c		ldy $0c				ldy 	DTemp2 						; Y is the variable address
.01044f	b2 20		lda ($20)			lda 	(DHashTablePtr)				; get the link to next.
.010451	99 00 00	sta $0000,y			sta 	$0000,y 					; save at offset +0
.010454	68		pla				pla 								; restore the token address
.010455	99 02 00	sta $0002,y			sta 	$0002,y 					; save at offset +2
.010458	68		pla				pla 								; restore count and store.
.010459	99 04 00	sta $0004,y			sta 	$0004,y
.01045c	98		tya				tya 								; update the head link
.01045d	92 20		sta ($20)			sta 	(DHashTablePtr)
.01045f	18		clc				clc 								; advance pointer to the data bit.
.010460	69 04 00	adc #$0004			adc 	#4
.010463	60		rts				rts 								; and done.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/utility.asm

.010464					ErrorHandler:
.010464	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.010466	fa		plx				plx 								; address of error message -1
.010467	e8		inx				inx 								; error message.
.010468	20 0b 05	jsr $01050b			jsr 	PrintROMMessage 			; print message in ROM
.01046b	a5 22		lda $22				lda 	DLineNumber 				; is it line 0 (e.g. typed in)
.01046d	f0 15		beq $010484			beq 	_EHEndMessage
.01046f	a2 89 04	ldx #$0489			ldx 	#_EHAt & $FFFF 				; print " at "
.010472	20 0b 05	jsr $01050b			jsr 	PrintROMMessage
.010475	a5 22		lda $22				lda 	DLineNumber 				; Line# in YA
.010477	a0 00 00	ldy #$0000			ldy 	#0
.01047a	a2 0a 00	ldx #$000a			ldx 	#10 						; base 10
.01047d	20 02 0f	jsr $010f02			jsr 	ConvertToString 			; convert and print it.
.010480	a8		tay				tay
.010481	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.010484					_EHEndMessage:
.010484	20 a7 1a	jsr $011aa7			jsr 	HWNewLine
.010487	80 fe		bra $010487	_EH1:	bra 	_EH1
>010489	20 61 74 20 00			_EHAt:	.text 	" at ",$00
.01048e					IllegalToken:
.01048e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010491	49 6c 6c 65 67 61 6c 20				.text 	"Illegal Token",$00 								; with this message
>010499	54 6f 6b 65 6e 00
.01049f					SyntaxError:
.01049f	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104a2	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",$00 								; with this message
>0104aa	72 72 6f 72 00
.0104af					ExpectToken:
.0104af	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0104b1	d0 05		bne $0104b8			bne 	_CTKError					; error if not
.0104b3	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0104b5	e6 06		inc $06				inc 	DCodePtr
.0104b7	60		rts				rts
.0104b8					_CTKError:
.0104b8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104bb	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00 								; with this message
>0104c3	74 6f 6b 65 6e 00
.0104c9					ExpectRightBracket:
.0104c9	48		pha				pha
.0104ca	a9 27 32	lda #$3227			lda 	#rparenTokenID
.0104cd	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d0	68		pla				pla
.0104d1	60		rts				rts
.0104d2					ExpectComma:
.0104d2	48		pha				pha
.0104d3	a9 23 32	lda #$3223			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0104d6	20 af 04	jsr $0104af			jsr 	ExpectToken
.0104d9	68		pla				pla
.0104da	60		rts				rts
.0104db					CheckBothNumeric:
.0104db	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; OR together their prec/type
.0104dd	15 42		ora $42,x			ora 	EXSPrecType+2,x
.0104df	30 01		bmi $0104e2			bmi 	_CBNFail 					; need to both be zero in bit 15
.0104e1	60		rts				rts
.0104e2					_CBNFail:
.0104e2	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0104e5	4f 70 65 72 61 74 6f 72				.text 	"Operator integer only",$00 								; with this message
>0104ed	20 69 6e 74 65 67 65 72 20 6f 6e 6c 79 00
.0104fb					ResetTypeInteger:
.0104fb	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.0104fd	29 ff 7f	and #$7fff			and 	#$7FFF
.010500	95 40		sta $40,x			sta 	EXSPrecType+0,x
.010502	60		rts				rts
.010503					ResetTypeString:
.010503	b5 40		lda $40,x			lda 	EXSPrecType+0,x 			; clear bit 15
.010505	09 00 80	ora #$8000			ora 	#$8000
.010508	95 40		sta $40,x			sta 	EXSPrecType+0,x
.01050a	60		rts				rts
.01050b					PrintROMMessage:
.01050b	48		pha				pha
.01050c	da		phx				phx
.01050d					_PRMLoop:
.01050d	bf 00 00 01	lda $010000,x			lda 	StartOfBasicCode,x 			; print characters until $00 found.
.010511	29 ff 00	and #$00ff			and 	#$00FF
.010514	f0 06		beq $01051c			beq 	_PRMExit
.010516	20 44 1a	jsr $011a44			jsr 	HWPrintChar
.010519	e8		inx				inx
.01051a	80 f1		bra $01050d			bra 	_PRMLoop
.01051c					_PRMExit:
.01051c	fa		plx				plx
.01051d	68		pla				pla
.01051e	60		rts				rts
.01051f					PrintBASICString:
.01051f	48		pha				pha
.010520	da		phx				phx
.010521	5a		phy				phy
.010522	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length
.010525	29 ff 00	and #$00ff			and 	#$00FF
.010528	f0 0b		beq $010535			beq 	_PBSExit 					; null string
.01052a	aa		tax				tax
.01052b					_PBSLoop:
.01052b	c8		iny				iny
.01052c	b9 00 00	lda $0000,y			lda 	$0000,y
.01052f	20 44 1a	jsr $011a44			jsr 	HWPrintChar
.010532	ca		dex				dex
.010533	d0 f6		bne $01052b			bne 	_PBSLoop
.010535					_PBSExit:
.010535	7a		ply				ply
.010536	fa		plx				plx
.010537	68		pla				pla
.010538	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/stringutils.asm

.010539					StringTempAllocate:
.010539	48		pha				pha
.01053a	a5 16		lda $16				lda 	DTempStringPointer 			; needs resetting ?
.01053c	d0 09		bne $010547			bne 	_STANoReset
.01053e	5a		phy				phy 								; reset the temp string pointer.
.01053f	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.010542	b1 02		lda ($02),y			lda 	(DBaseAddress),y
.010544	85 16		sta $16				sta 	DTempStringPointer
.010546	7a		ply				ply
.010547					_STANoReset:
.010547	68		pla				pla 								; get length.
.010548	29 ff 00	and #$00ff			and 	#$00FF 						; check it's a byte size
.01054b	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement add to temporary pointer.
.01054e	18		clc				clc 								; this adds one, for the length.
.01054f	65 16		adc $16				adc 	DTempStringPointer
.010551	85 16		sta $16				sta 	DTempStringPointer
.010553	48		pha				pha 								; save start address
.010554	a9 00 00	lda #$0000			lda 	#$0000
.010557	e2 20		sep #$20			sep 	#$20 						; zero the length of this new string.
.010559	92 16		sta ($16)			sta		(DTempStringPointer)
.01055b	c2 20		rep #$20			rep 	#$20
.01055d	68		pla				pla 								; restore start address
.01055e	85 18		sta $18				sta 	DStartTempString 			; start of new temporary string.
.010560	85 1a		sta $1a				sta 	DCurrentTempString 			; save current temporary string
.010562	e6 1a		inc $1a				inc 	DCurrentTempString 			; step over length byte.
.010564	60		rts				rts
.010565					StringWriteCharacter:
.010565	e2 20		sep #$20			sep 	#$20						; 8 bit mode
.010567	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; save character
.010569	b2 18		lda ($18)			lda 	(DStartTempString) 			; bump length
.01056b	1a		inc a				inc 	a
.01056c	92 18		sta ($18)			sta 	(DStartTempString)
.01056e	c2 20		rep #$20			rep 	#$20						; 16 bit mode
.010570	e6 1a		inc $1a				inc 	DCurrentTempString 			; increment write pointer
.010572	60		rts				rts
.010573					StringCreateCopy:
.010573	a8		tay				tay 								; put pointer to string in Y
.010574	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the first byte, the length.
.010577	29 ff 00	and #$00ff			and 	#$00FF 						; mask out the length byte.
.01057a	f0 17		beq $010593			beq 	_SCCExit 					; do nothing if length zero (the length byte is reset when allocated)
.01057c	da		phx				phx 								; save X and put the character count in X
.01057d	aa		tax				tax
.01057e					_SCCCopy:
.01057e	c8		iny				iny 								; advance and read (first time skips length)
.01057f	e2 20		sep #$20			sep 	#$20 						; switch to 8 bit mode.
.010581	b9 00 00	lda $0000,y			lda 	$0000,y
.010584	92 1a		sta ($1a)			sta 	(DCurrentTempString) 		; write into target
.010586	b2 18		lda ($18)			lda 	(DStartTempString)			; one more character
.010588	1a		inc a				inc 	a
.010589	92 18		sta ($18)			sta 	(DStartTempString)
.01058b	c2 20		rep #$20			rep 	#$20 						; switch back to 16 bit mode
.01058d	e6 1a		inc $1a				inc 	DCurrentTempString 			; bump target pointer
.01058f	ca		dex				dex 								; do X times
.010590	d0 ec		bne $01057e			bne 	_SCCCopy
.010592	fa		plx				plx
.010593					_SCCExit:
.010593	60		rts				rts
.010594					StringMakeConcrete:
.010594	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr 		; compare the address against low memory.
.010597	d1 02		cmp ($02),y			cmp 	(DBaseAddress),y 			; if the address is < this, then it doesn't need concreting.
.010599	90 0f		bcc $0105aa			bcc 	_SMCExit
.01059b	85 08		sta $08				sta 	DTemp1 						; source
.01059d	b2 08		lda ($08)			lda 	(DTemp1)					; get length
.01059f	29 ff 00	and #$00ff			and 	#$00FF
.0105a2	d0 07		bne $0105ab			bne 	_SMCNonZero 				; if not "" skip.
.0105a4	a9 0c 00	lda #$000c			lda 	#Block_EmptyString 			; empty string, return the null pointer in low memory
.0105a7	18		clc				clc 								; this reference is used for all empty strings.
.0105a8	65 02		adc $02				adc 	DBaseAddress
.0105aa					_SMCExit:
.0105aa	60		rts				rts
.0105ab					_SMCNonZero:
.0105ab	48		pha				pha 								; save on stack.
.0105ac	49 ff ff	eor #$ffff			eor 	#$FFFF 						; 2's complement with carry clear, allocate one more.
.0105af	18		clc				clc
.0105b0	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; add to the high pointer to create space
.0105b3	71 02		adc ($02),y			adc 	(DBaseAddress),y
.0105b5	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0105b7	85 0c		sta $0c				sta 	DTemp2 						; target
.0105b9	7a		ply				ply 								; get length copy from here until Y goes -ve
.0105ba	e2 20		sep #$20			sep 	#$20 						; 8 bit mode.
.0105bc					_SMCLoop:
.0105bc	b1 08		lda ($08),y			lda 	(DTemp1),y 					; copy from source to target
.0105be	91 0c		sta ($0c),y			sta 	(DTemp2),y
.0105c0	88		dey				dey 								; Y+1 times.
.0105c1	10 f9		bpl $0105bc			bpl 	_SMCLoop
.0105c3	c2 20		rep #$20			rep 	#$20 						; 16 bit mode.
.0105c5	a5 0c		lda $0c				lda 	DTemp2 						; return new string address.
.0105c7	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/tokeniser.asm

.0105c8					Tokenise:
.0105c8	85 08		sta $08				sta 	DTemp1						; DTemp1 is the string to tokenise.
.0105ca	84 0a		sty $0a				sty 	DTemp1+2
.0105cc	a9 00 01	lda #$0100			lda 	#Block_TokenBuffer 			; reset workspace pointer.
.0105cf	18		clc				clc
.0105d0	65 02		adc $02				adc 	DBaseAddress
.0105d2	85 0c		sta $0c				sta 	DTemp2 						; which is DTemp2
.0105d4	a0 ff ff	ldy #$ffff			ldy 	#-1 						; index
.0105d7	a2 00 00	ldx #$0000			ldx 	#0 							; bit 0 1 when in quotes.
.0105da					_TOKCap:
.0105da	c8		iny				iny 								; go to next
.0105db	b7 08		lda [$08],y			lda 	[DTemp1],y
.0105dd	29 ff 00	and #$00ff			and 	#$00FF
.0105e0	f0 22		beq $010604			beq 	_TOKEndCap
.0105e2	c9 22 00	cmp #$0022			cmp 	#'"'						; quote mark
.0105e5	d0 01		bne $0105e8			bne 	_TOKNotQuote
.0105e7	e8		inx				inx  								; X counts them, bit 0 is yes/no.
.0105e8					_TOKNotQuote:
.0105e8	c9 61 00	cmp #$0061			cmp 	#"a"						; skip if L/C
.0105eb	90 ed		bcc $0105da			bcc 	_TOKCap
.0105ed	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.0105f0	b0 e8		bcs $0105da			bcs 	_TOKCap
.0105f2	8a		txa				txa 								; check if in quotes
.0105f3	4a		lsr a				lsr 	a
.0105f4	b0 e4		bcs $0105da			bcs 	_TOKCap
.0105f6	b7 08		lda [$08],y			lda 	[DTemp1],y 					; capitalise
.0105f8	38		sec				sec
.0105f9	e9 20 00	sbc #$0020			sbc 	#32
.0105fc	e2 20		sep #$20			sep 	#$20
.0105fe	97 08		sta [$08],y			sta 	[DTemp1],y
.010600	c2 20		rep #$20			rep 	#$20
.010602	80 d6		bra $0105da			bra 	_TOKCap
.010604					_TOKEndCap:
.010604	c6 08		dec $08				dec 	DTemp1
.010606					_TOKMainNext:
.010606	e6 08		inc $08				inc 	DTemp1
.010608					_TOKMainLoop:
.010608	a7 08		lda [$08]			lda 	[DTemp1] 					; get first character
.01060a	29 ff 00	and #$00ff			and 	#$00FF
.01060d	c9 20 00	cmp #$0020			cmp 	#32
.010610	90 1d		bcc $01062f			bcc 	_TOKExit 					; 0-31 exit.
.010612	f0 f2		beq $010606			beq 	_TOKMainNext 				; 32 (space) skip.
.010614	c9 22 00	cmp #$0022			cmp 	#34 						; if 34 (quote marks) do a string.
.010617	f0 1d		beq $010636			beq 	_TOKString
.010619	c9 30 00	cmp #$0030			cmp 	#48 						; 33-47 (not 34) check for punctuation.
.01061c	90 1d		bcc $01063b			bcc 	_TOKPunctuation
.01061e	c9 3a 00	cmp #$003a			cmp 	#58 						; 48-57 tokenise a number
.010621	90 42		bcc $010665			bcc 	_TOKNumber
.010623	c9 41 00	cmp #$0041			cmp 	#65 						; 58-64 more punctuation
.010626	90 13		bcc $01063b			bcc 	_TOKPunctuation
.010628	c9 5b 00	cmp #$005b			cmp 	#91 						; 65-90 identifier/keyword.
.01062b	90 3d		bcc $01066a			bcc 	_TOKIdentifier
.01062d	80 0c		bra $01063b			bra 	_TOKPunctuation 			; 91-   punctuation.
.01062f					_TOKExit:
.01062f	a9 00 00	lda #$0000			lda 	#$0000
.010632	20 6f 06	jsr $01066f			jsr 	TOKWriteToken
.010635	60		rts				rts
.010636					_TOKString:
.010636	20 0d 07	jsr $01070d			jsr 	TOKQuotedString
.010639	80 cd		bra $010608			bra 	_TOKMainLoop
.01063b					_TOKPunctuation:
.01063b	a2 02 00	ldx #$0002			ldx 	#2 							; try 2 character tokens.
.01063e	20 74 07	jsr $010774			jsr 	TOKKeywordSearch
.010641	b0 1d		bcs $010660			bcs 	_TOKFoundPunctuation
.010643	a2 01 00	ldx #$0001			ldx 	#1 							; failed, try 1 character token.
.010646	20 74 07	jsr $010774			jsr 	TOKKeywordSearch
.010649	b0 15		bcs $010660			bcs 	_TOKFoundPunctuation
.01064b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01064e	43 61 6e 6e 6f 74 20 70				.text 	"Cannot parse line",$00 								; with this message
>010656	61 72 73 65 20 6c 69 6e 65 00
.010660					_TOKFoundPunctuation:
.010660	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; output the token and go round again.
.010663	80 a3		bra $010608			bra 	_TOKMainLoop
.010665					_TOKNumber:
.010665	20 8e 06	jsr $01068e			jsr 	TOKInteger 					; tokenise integer out of the token text.
.010668	80 9e		bra $010608			bra 	_TOKMainLoop
.01066a					_TOKIdentifier:
.01066a	20 cf 07	jsr $0107cf			jsr 	TOKIdentifier
.01066d	80 99		bra $010608			bra 	_TOKMainLoop
.01066f					TOKWriteToken:
.01066f	92 0c		sta ($0c)			sta 	(DTemp2)					; write out
.010671	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer
.010673	e6 0c		inc $0c				inc 	DTemp2
.010675	a5 0c		lda $0c				lda 	DTemp2 						; overflow ??
.010677	29 ff 00	and #$00ff			and 	#$00FF
.01067a	f0 01		beq $01067d			beq 	_TOKWriteOverflow
.01067c	60		rts				rts
.01067d					_TOKWriteOverflow:
.01067d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010680	4c 69 6e 65 20 74 6f 6f				.text 	"Line too long",$00 								; with this message
>010688	20 6c 6f 6e 67 00
.01068e					TOKInteger:
.01068e	64 24		stz $24				stz 	DTemp3 						; we're going to build it in DTemp3
.010690	64 26		stz $26				stz 	DTemp3+2
.010692					_TOKINLoop:
.010692	a5 26		lda $26				lda 	DTemp3+2 					; push DTemp3+2 on the stack/A
.010694	48		pha				pha
.010695	a5 24		lda $24				lda 	DTemp3
.010697	06 24		asl $24				asl 	DTemp3 						; multiply it by 4
.010699	26 26		rol $26				rol 	DTemp3+2
.01069b	06 24		asl $24				asl 	DTemp3
.01069d	26 26		rol $26				rol 	DTemp3+2
.01069f	18		clc				clc
.0106a0	65 24		adc $24				adc 	DTemp3 						; add saved value, so it's x 5
.0106a2	85 24		sta $24				sta 	DTemp3
.0106a4	68		pla				pla
.0106a5	65 26		adc $26				adc 	DTemp3+2
.0106a7	85 26		sta $26				sta 	DTemp3+2
.0106a9	06 24		asl $24				asl 	DTemp3 						; multiply it by 2, e.g. x 10
.0106ab	26 26		rol $26				rol 	DTemp3+2
.0106ad	a5 26		lda $26				lda 	DTemp3+2 					; we can't cope with that big an integer
.0106af	29 00 f0	and #$f000			and 	#$F000						; can't directly tokenise MAXINT.
.0106b2	d0 44		bne $0106f8			bne 	_TOKINSize
.0106b4	a7 08		lda [$08]			lda 	[DTemp1]					; get the character value, we know this is 0-9
.0106b6	29 0f 00	and #$000f			and 	#15
.0106b9	18		clc				clc
.0106ba	65 24		adc $24				adc 	DTemp3 						; add to the running count
.0106bc	85 24		sta $24				sta 	DTemp3
.0106be	90 02		bcc $0106c2			bcc 	_TOKINNoCarry
.0106c0	e6 26		inc $26				inc 	DTemp3+2
.0106c2					_TOKINNoCarry:
.0106c2	e6 08		inc $08				inc 	DTemp1 						; look at next
.0106c4	a7 08		lda [$08]			lda 	[DTemp1] 					; loop back if 0..9
.0106c6	29 ff 00	and #$00ff			and 	#$00FF
.0106c9	c9 30 00	cmp #$0030			cmp 	#"0"
.0106cc	90 05		bcc $0106d3			bcc 	_TOKINGotInteger
.0106ce	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.0106d1	90 bf		bcc $010692			bcc		_TOKINLoop
.0106d3					_TOKINGotInteger:
.0106d3	a5 24		lda $24				lda 	DTemp3 						; lower word
.0106d5	29 ff 7f	and #$7fff			and 	#$7FFF 						; convert to a token
.0106d8	18		clc				clc
.0106d9	69 00 40	adc #$4000			adc 	#$4000
.0106dc	48		pha				pha 								; save it.
.0106dd	06 24		asl $24				asl 	DTemp3 						; shift bit15 into the high word
.0106df	26 26		rol $26				rol 	DTemp3+2 					; which is the constant shift.
.0106e1	a5 26		lda $26				lda 	DTemp3+2 					; look at C/Shift
.0106e3	c9 00 10	cmp #$1000			cmp 	#$1000	 					; overflow ?
.0106e6	b0 10		bcs $0106f8			bcs 	_TOKINSize 					; if so, we can't tokenise the number.
.0106e8	29 ff 0f	and #$0fff			and 	#$0FFF 						; get bits / check zero
.0106eb	f0 06		beq $0106f3			beq 	_TOKINNoShift 				; don't need constant shift.
.0106ed	09 00 10	ora #$1000			ora 	#$1000	 					; make token $1xxx
.0106f0	20 6f 06	jsr $01066f			jsr 	TOKWriteToken
.0106f3					_TOKINNoShift:
.0106f3	68		pla				pla 								; get lower its token
.0106f4	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; output it
.0106f7	60		rts				rts
.0106f8					_TOKINSize:
.0106f8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0106fb	49 6e 74 65 67 65 72 20				.text 	"Integer too large",$00 								; with this message
>010703	74 6f 6f 20 6c 61 72 67 65 00
.01070d					TOKQuotedString:
.01070d	e6 08		inc $08				inc 	DTemp1 						; skip over the initial quote
.01070f	a5 08		lda $08				lda 	DTemp1 						; save start of string in DTemp4
.010711	85 32		sta $32				sta 	DTemp4
.010713	a5 0a		lda $0a				lda 	DTemp1+2
.010715	85 34		sta $34				sta 	DTemp4+2
.010717					_TOKQFindSize:
.010717	a7 08		lda [$08]			lda 	[DTemp1]					; get character, bump pointer
.010719	e6 08		inc $08				inc 	DTemp1
.01071b	29 ff 00	and #$00ff			and 	#$00FF						; mask 8 bits
.01071e	f0 3b		beq $01075b			beq 	_TOQImbalance 				; end of line, and no quote found.
.010720	c9 22 00	cmp #$0022			cmp 	#34
.010723	d0 f2		bne $010717			bne 	_TOKQFindSize 				; at end DTemp1 points after quote.
.010725	a5 08		lda $08				lda 	DTemp1 						; work out length, save in DTemp3+2
.010727	38		sec				sec
.010728	e5 32		sbc $32				sbc 	DTemp4
.01072a	3a		dec a				dec 	a 							; one less character for closing quote
.01072b	85 26		sta $26				sta 	DTemp3+2
.01072d	18		clc				clc
.01072e	69 04 00	adc #$0004			adc 	#2+1+1 						; two for header, 1 for size, 1 for round up.
.010731	29 fe ff	and #$fffe			and 	#$FFFE 						; force to even gives token.
.010734	20 6f 06	jsr $01066f			jsr 	TOKWriteToken
.010737	a5 26		lda $26				lda 	DTemp3+2 					; this is the count.
.010739	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; effectively a byte-write.
.01073c	c6 0c		dec $0c				dec 	DTemp2
.01073e	a6 26		ldx $26				ldx 	DTemp3+2 					; this the count.
.010740	f0 0f		beq $010751			beq		_TOKQWriteEnd 				; if zero, no need to write anything
.010742					_TOKQWriteString:
.010742	a7 32		lda [$32]			lda 	[DTemp4] 					; read character from start
.010744	29 ff 00	and #$00ff			and 	#$00FF
.010747	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; effectively a byte-write.
.01074a	c6 0c		dec $0c				dec 	DTemp2
.01074c	e6 32		inc $32				inc 	DTemp4 						; advance character
.01074e	ca		dex				dex 								; do X times
.01074f	d0 f1		bne $010742			bne 	_TOKQWriteString
.010751					_TOKQWriteEnd:
.010751	a5 0c		lda $0c				lda 	DTemp2 						; are we on an even byte.
.010753	29 01 00	and #$0001			and 	#1
.010756	f0 02		beq $01075a			beq 	_TOKQExit
.010758	e6 0c		inc $0c				inc 	DTemp2 						; we wrote values with the high byte 0, so just correct
.01075a					_TOKQExit:
.01075a	60		rts				rts
.01075b					_TOQImbalance:
.01075b	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01075e	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00 								; with this message
>010766	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.010774					TOKKeywordSearch:
.010774	86 32		stx $32				stx 	DTemp4 						; save length in DTemp4
.010776	a9 01 00	lda #$0001			lda 	#1 							; token number in DTemp4+2
.010779	85 34		sta $34				sta 	DTemp4+2
.01077b	a2 00 00	ldx #$0000			ldx 	#0
.01077e					_TOKScan:
.01077e	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; read the first byte
.010782	29 0f 00	and #$000f			and 	#$000F 						; and the Nibble which is skip to the next.
.010785	f0 46		beq $0107cd			beq 	_TOKFail 					; if zero then we have failed.
.010787	3a		dec a				dec 	a 							; -1 gives the length.
.010788	c5 32		cmp $32				cmp 	DTemp4 						; is this token that length.
.01078a	d0 2f		bne $0107bb			bne 	_TOKNext 					; no, then skip to next token.
.01078c	da		phx				phx 								; save X
.01078d	a0 00 00	ldy #$0000			ldy 	#0 							; start comparing
.010790					_TOKCompare:
.010790	b7 08		lda [$08],y			lda 	[DTemp1],y 					; get character
.010792	5f 93 00 01	eor $010093,x			eor 	TokenText+1,x
.010796	29 ff 00	and #$00ff			and 	#$00FF
.010799	d0 1f		bne $0107ba			bne 	_TOKPopNext 				; if different, pop and goto next.
.01079b	e8		inx				inx 								; bump X and Y.
.01079c	c8		iny				iny
.01079d	c4 32		cpy $32				cpy 	DTemp4 						; matched whole length
.01079f	d0 ef		bne $010790			bne 	_TOKCompare
.0107a1	98		tya				tya 								; add length to the text pointer
.0107a2	18		clc				clc
.0107a3	65 08		adc $08				adc 	DTemp1
.0107a5	85 08		sta $08				sta 	DTemp1
.0107a7	fa		plx				plx 								; restore X.
.0107a8	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the type/token bit.
.0107ac	29 f0 00	and #$00f0			and 	#$00F0 						; get the type out
.0107af	4a		lsr a				lsr 	a 							; shift into bit 1, then swap into bit 9
.0107b0	4a		lsr a				lsr		a
.0107b1	4a		lsr a				lsr 	a
.0107b2	eb		xba				xba
.0107b3	05 34		ora $34				ora 	DTemp4+2 					; OR in keyword number
.0107b5	09 00 20	ora #$2000			ora 	#$2000 						; set upper bits
.0107b8	38		sec				sec
.0107b9	60		rts				rts
.0107ba					_TOKPopNext:
.0107ba	fa		plx				plx 								; restore X.
.0107bb					_TOKNext:
.0107bb	bf 92 00 01	lda $010092,x			lda 	TokenText,x 				; get the token skip again.
.0107bf	29 0f 00	and #$000f			and 	#$000F
.0107c2	85 14		sta $14				sta 	DSignCount 					; save it in DTemp3 so we can add it to X
.0107c4	8a		txa				txa
.0107c5	18		clc				clc
.0107c6	65 14		adc $14				adc 	DSignCount
.0107c8	aa		tax				tax
.0107c9	e6 34		inc $34				inc 	DTemp4+2 					; bump keyword index
.0107cb	80 b1		bra $01077e			bra 	_TOKScan
.0107cd					_TOKFail:
.0107cd	18		clc				clc
.0107ce	60		rts				rts
.0107cf					TOKIdentifier:
.0107cf	a5 08		lda $08				lda 	DTemp1 						; save start of identifier in DTemp3
.0107d1	85 24		sta $24				sta 	DTemp3
.0107d3					_TOKIFindLength:
.0107d3	e6 08		inc $08				inc 	DTemp1						; we know the first one is A-Z
.0107d5	a7 08		lda [$08]			lda 	[DTemp1]
.0107d7	29 ff 00	and #$00ff			and 	#$00FF
.0107da	20 7a 08	jsr $01087a			jsr 	TOKIsIdentifierCharacter
.0107dd	b0 f4		bcs $0107d3			bcs 	_TOKIFindLength
.0107df	a5 08		lda $08				lda 	DTemp1 						; calculate base identifier length.
.0107e1	38		sec				sec
.0107e2	e5 24		sbc $24				sbc 	DTemp3 						; i.e. the # characters in the actual name
.0107e4	85 36		sta $36				sta 	DTemp5
.0107e6	85 38		sta $38				sta 	DTemp5+2 					; this is the name length including $(
.0107e8	a9 00 c0	lda #$c000			lda 	#$C000						; this is the upper bits - 11<type><arr> 1xxx
.0107eb	85 26		sta $26				sta 	DTemp3+2 					; used for building an identifier.
.0107ed	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.0107ef	29 ff 00	and #$00ff			and 	#$00FF
.0107f2	c9 24 00	cmp #$0024			cmp 	#"$"
.0107f5	d0 0b		bne $010802			bne 	_TOKINotString
.0107f7	e6 08		inc $08				inc 	DTemp1 						; skip $
.0107f9	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.0107fb	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.0107fd	09 00 20	ora #$2000			ora 	#IDTypeMask
.010800	85 26		sta $26				sta 	DTemp3+2
.010802					_TOKINotString:
.010802	a7 08		lda [$08]			lda 	[DTemp1]					; string follows
.010804	29 ff 00	and #$00ff			and 	#$00FF
.010807	c9 28 00	cmp #$0028			cmp 	#"("
.01080a	d0 0b		bne $010817			bne 	_TOKINotArray
.01080c	e6 08		inc $08				inc 	DTemp1 						; skip (
.01080e	e6 38		inc $38				inc 	DTemp5+2 					; token length.
.010810	a5 26		lda $26				lda 	DTemp3+2 					; set type mask bit
.010812	09 00 10	ora #$1000			ora 	#IDArrayMask
.010815	85 26		sta $26				sta 	DTemp3+2
.010817					_TOKINotArray:
.010817	a5 24		lda $24				lda 	DTemp3 						; reset the scan position
.010819	85 08		sta $08				sta 	DTemp1
.01081b	a6 38		ldx $38				ldx 	DTemp5+2 					; so see if it is a token first.
.01081d	20 74 07	jsr $010774			jsr 	TOKKeywordSearch
.010820	90 04		bcc $010826			bcc 	_TOKIIdentifier 			; if CC it's an identifier.
.010822	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; if CS write token and exit.
.010825	60		rts				rts
.010826					_TOKIIdentifier:
.010826	a7 08		lda [$08]			lda 	[DTemp1]					; get the first character
.010828	e6 08		inc $08				inc 	DTemp1
.01082a	20 66 08	jsr $010866			jsr		_TOKIToConstant 			; convert to range 0-35
.01082d	05 26		ora $26				ora 	DTemp3+2 					; put in the upper bits.
.01082f	c6 36		dec $36				dec 	DTemp5 						; decrement the identifier length
.010831	f0 1d		beq $010850			beq 	_TOKINoSecond
.010833	48		pha				pha 								; save current on stack.
.010834	a7 08		lda [$08]			lda 	[DTemp1]					; get the next character
.010836	e6 08		inc $08				inc 	DTemp1
.010838	20 66 08	jsr $010866			jsr		_TOKIToConstant 			; convert to range 0-35
.01083b	85 14		sta $14				sta 	DSignCount 					; save it.
.01083d	0a		asl a				asl 	a 							; x 4
.01083e	0a		asl a				asl 	a
.01083f	65 14		adc $14				adc 	DSignCount 					; x 5
.010841	0a		asl a				asl 	a 							; x 10
.010842	65 14		adc $14				adc 	DSignCount 					; x 11
.010844	0a		asl a				asl 	a 							; x 22
.010845	0a		asl a				asl 	a 							; x 44
.010846	65 14		adc $14				adc 	DSignCount 					; x 45
.010848	85 14		sta $14				sta 	DSignCount
.01084a	68		pla				pla 								; get old token and add x 45
.01084b	18		clc				clc
.01084c	65 14		adc $14				adc 	DSignCount
.01084e	c6 36		dec $36				dec 	DTemp5 						; decrement the count.
.010850					_TOKINoSecond:
.010850	a6 36		ldx $36				ldx 	DTemp5 						; is the count now zero.
.010852	f0 03		beq $010857			beq 	_TOKINotLast				; if yes
.010854	09 00 08	ora #$0800			ora 	#IDContMask 				; set the continuation bit.
.010857					_TOKINotLast:
.010857	20 6f 06	jsr $01066f			jsr 	TOKWriteToken 				; output the token
.01085a	a5 36		lda $36				lda 	DTemp5						; loop back if more to do.
.01085c	d0 c8		bne $010826			bne 	_TOKIIdentifier
.01085e					_TOKIOut:
.01085e	a5 24		lda $24				lda 	DTemp3 						; get original start position
.010860	18		clc				clc
.010861	65 38		adc $38				adc 	DTemp5+2					; add overall length
.010863	85 08		sta $08				sta 	DTemp1 						; this is the end position
.010865	60		rts				rts
.010866					_TOKIToConstant:
.010866	29 ff 00	and #$00ff			and 	#$00FF 						; byte value
.010869	c9 41 00	cmp #$0041			cmp 	#65
.01086c	90 04		bcc $010872			bcc 	_TOKITInteger
.01086e	29 1f 00	and #$001f			and 	#31 						; it's A-Z, so return 1-26
.010871	60		rts				rts
.010872					_TOKITInteger:
.010872	29 0f 00	and #$000f			and 	#15 						; its 0-9 which are 27-36
.010875	18		clc				clc
.010876	69 1b 00	adc #$001b			adc 	#27
.010879	60		rts				rts
.01087a					TOKIsIdentifierCharacter:
.01087a	c9 30 00	cmp #$0030			cmp 	#"0"
.01087d	90 0f		bcc $01088e			bcc 	_TOKIIFail
.01087f	c9 3a 00	cmp #$003a			cmp 	#"9"+1
.010882	90 0c		bcc $010890			bcc 	_TOKIIOk
.010884	c9 41 00	cmp #$0041			cmp 	#"A"
.010887	90 05		bcc $01088e			bcc 	_TOKIIFail
.010889	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.01088c	90 02		bcc $010890			bcc 	_TOKIIOk
.01088e					_TOKIIFail:
.01088e	18		clc				clc
.01088f	60		rts				rts
.010890					_TOKIIOk:
.010890	38		sec				sec
.010891	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/arithmetic.asm

.010892					Binary_Add:
.010892	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; check both same type
.010894	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010896	30 12		bmi $0108aa		bmi 	_BATypeError
.010898	b5 40		lda $40,x		lda 	EXSPrecType+0,x 					; see if they are strings
.01089a	30 3f		bmi $0108db		bmi 	_BAConcatenateString 				; if so , do the concatenation code.
.01089c	18		clc			clc 										; add the results
.01089d	b5 00		lda $00,x		lda		EXSValueL+0,x
.01089f	75 02		adc $02,x		adc 	EXSValueL+2,x
.0108a1	95 00		sta $00,x		sta 	EXSValueL+0,x
.0108a3	b5 20		lda $20,x		lda		EXSValueH+0,x
.0108a5	75 22		adc $22,x		adc 	EXSValueH+2,x
.0108a7	95 20		sta $20,x		sta 	EXSValueH+0,x
.0108a9	60		rts			rts
.0108aa					_BATypeError:
.0108aa	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0108ad	2b 20 6f 70 65 72 61 74				.text 	"+ operator can't mix types",$00 								; with this message
>0108b5	6f 72 20 63 61 6e 27 74 20 6d 69 78 20 74 79 70
>0108c5	65 73 00
.0108c8					_BALengthError:
.0108c8	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0108cb	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>0108d3	6f 6f 20 6c 6f 6e 67 00
.0108db					_BAConcatenateString:
.0108db	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; save pointers in DTemp1/DTemp2
.0108dd	85 08		sta $08			sta 	DTemp1 								; they are the first and second strings.
.0108df	b5 02		lda $02,x		lda 	EXSValueL+2,x
.0108e1	85 0c		sta $0c			sta 	DTemp2
.0108e3	e2 20		sep #$20		sep 	#$20								; switch into byte mode.
.0108e5	18		clc			clc 										; work out the total length
.0108e6	b2 08		lda ($08)		lda 	(DTemp1)
.0108e8	72 0c		adc ($0c)		adc 	(DTemp2)
.0108ea	b0 14		bcs $010900		bcs 	_BAConcatLengthError 				; string is too long.
.0108ec	c2 20		rep #$20		rep 	#$20 								; back to 16 bit mode.
.0108ee	20 39 05	jsr $010539		jsr 	StringTempAllocate 					; allocate string of that size in temp memory.
.0108f1	95 00		sta $00,x		sta 	EXSValueL+0,x 						; update the return value to that address.
.0108f3	74 20		stz $20,x		stz 	EXSValueH+0,x
.0108f5	a5 08		lda $08			lda 	DTemp1 								; copy first string there.
.0108f7	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0108fa	a5 0c		lda $0c			lda 	DTemp2 								; copy second string there.
.0108fc	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0108ff	60		rts			rts
.010900					_BAConcatLengthError:
.010900	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010903	53 74 72 69 6e 67 20 74				.text 	"String too long",$00 								; with this message
>01090b	6f 6f 20 6c 6f 6e 67 00
.010913					Binary_Subtract:
.010913	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010916	38		sec			sec
.010917	b5 00		lda $00,x		lda		EXSValueL+0,x
.010919	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01091b	95 00		sta $00,x		sta 	EXSValueL+0,x
.01091d	b5 20		lda $20,x		lda		EXSValueH+0,x
.01091f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010921	95 20		sta $20,x		sta 	EXSValueH+0,x
.010923	60		rts			rts
.010924					Binary_ShiftRight:
.010924	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010927	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010929	29 3f 00	and #$003f		and 	#63
.01092c	f0 07		beq $010935		beq		_Binary_SRExit
.01092e					_Binary_SRLoop:
.01092e	56 20		lsr $20,x		lsr 	EXSValueH+0,x
.010930	76 00		ror $00,x		ror 	EXSValueL+0,x
.010932	3a		dec a			dec 	a
.010933	d0 f9		bne $01092e		bne 	_Binary_SRLoop
.010935					_Binary_SRExit:
.010935	60		rts			rts
.010936					Binary_ShiftLeft:
.010936	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010939	b5 02		lda $02,x		lda 	EXSValueL+2,x
.01093b	29 3f 00	and #$003f		and 	#63
.01093e	f0 07		beq $010947		beq		_Binary_SLExit
.010940					_Binary_SLLoop:
.010940	16 00		asl $00,x		asl 	EXSValueL+0,x
.010942	36 20		rol $20,x		rol 	EXSValueH+0,x
.010944	3a		dec a			dec 	a
.010945	d0 f9		bne $010940		bne 	_Binary_SLLoop
.010947					_Binary_SLExit:
.010947	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/bitwise.asm

.010948					Binary_And:
.010948	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01094b	b5 00		lda $00,x		lda		EXSValueL+0,x
.01094d	35 02		and $02,x		and 	EXSValueL+2,x
.01094f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010951	b5 20		lda $20,x		lda		EXSValueH+0,x
.010953	35 22		and $22,x		and 	EXSValueH+2,x
.010955	95 20		sta $20,x		sta 	EXSValueH+0,x
.010957	60		rts			rts
.010958					Binary_Or:
.010958	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01095b	b5 00		lda $00,x		lda		EXSValueL+0,x
.01095d	15 02		ora $02,x		ora 	EXSValueL+2,x
.01095f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010961	b5 20		lda $20,x		lda		EXSValueH+0,x
.010963	15 22		ora $22,x		ora 	EXSValueH+2,x
.010965	95 20		sta $20,x		sta 	EXSValueH+0,x
.010967	60		rts			rts
.010968					Binary_Xor:
.010968	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.01096b	b5 00		lda $00,x		lda		EXSValueL+0,x
.01096d	55 02		eor $02,x		eor 	EXSValueL+2,x
.01096f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010971	b5 20		lda $20,x		lda		EXSValueH+0,x
.010973	55 22		eor $22,x		eor 	EXSValueH+2,x
.010975	95 20		sta $20,x		sta 	EXSValueH+0,x
.010977	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/comparison.asm

.010978					Binary_Equals:
.010978	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.01097b	b0 0e		bcs $01098b		bcs 	_BEString
.01097d	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01097f	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.010981	d0 4f		bne $0109d2		bne 	Compare_Fail
.010983	b5 20		lda $20,x		lda 	EXSValueH,x
.010985	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.010987	d0 49		bne $0109d2		bne 	Compare_Fail
.010989	80 3f		bra $0109ca		bra 	Compare_Succeed
.01098b					_BEString:
.01098b	09 00 00	ora #$0000		ora 	#$0000
.01098e	f0 3a		beq $0109ca		beq 	Compare_Succeed
.010990	80 40		bra $0109d2		bra 	Compare_Fail
.010992					Binary_NotEquals:
.010992	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010995	b0 0e		bcs $0109a5		bcs 	_BNEString
.010997	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010999	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01099b	d0 2d		bne $0109ca		bne 	Compare_Succeed
.01099d	b5 20		lda $20,x		lda 	EXSValueH,x
.01099f	d5 22		cmp $22,x		cmp 	EXSValueH+2,x
.0109a1	d0 27		bne $0109ca		bne 	Compare_Succeed
.0109a3	80 2d		bra $0109d2		bra 	Compare_Fail
.0109a5					_BNEString:
.0109a5	09 00 00	ora #$0000		ora 	#$0000
.0109a8	d0 20		bne $0109ca		bne 	Compare_Succeed
.0109aa	80 26		bra $0109d2		bra 	Compare_Fail
.0109ac					Binary_Less:
.0109ac	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109af	b0 12		bcs $0109c3		bcs 	_BLString
.0109b1	38		sec			sec
.0109b2	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.0109b4	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109b6	b5 20		lda $20,x		lda 	EXSValueH,x
.0109b8	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109ba	50 03		bvc $0109bf		bvc 	*+5
.0109bc	49 00 80	eor #$8000		eor 	#$8000
.0109bf	30 09		bmi $0109ca		bmi 	Compare_Succeed
.0109c1	80 0f		bra $0109d2		bra 	Compare_Fail
.0109c3					_BLString:
.0109c3	c9 ff ff	cmp #$ffff		cmp 	#$FFFF 							; string
.0109c6	f0 02		beq $0109ca		beq 	Compare_Succeed
.0109c8	80 08		bra $0109d2		bra 	Compare_Fail
.0109ca					Compare_Succeed:
.0109ca	a9 ff ff	lda #$ffff		lda 	#$FFFF
.0109cd	95 00		sta $00,x		sta 	EXSValueL,x
.0109cf	95 20		sta $20,x		sta 	EXSValueH,x
.0109d1	60		rts			rts
.0109d2					Compare_Fail:
.0109d2	74 00		stz $00,x		stz 	EXSValueL,x
.0109d4	74 20		stz $20,x		stz 	EXSValueH,x
.0109d6	60		rts			rts
.0109d7					Binary_GreaterEqual:
.0109d7	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109da	b0 12		bcs $0109ee		bcs 	_BGEString
.0109dc	38		sec			sec
.0109dd	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0109df	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109e1	b5 20		lda $20,x		lda 	EXSValueH,x
.0109e3	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.0109e5	50 03		bvc $0109ea		bvc 	*+5
.0109e7	49 00 80	eor #$8000		eor 	#$8000
.0109ea	10 de		bpl $0109ca		bpl 	Compare_Succeed
.0109ec	80 e4		bra $0109d2		bra 	Compare_Fail
.0109ee					_BGEString:
.0109ee	09 00 00	ora #$0000		ora 	#$0000
.0109f1	10 d7		bpl $0109ca		bpl 	Compare_Succeed
.0109f3	80 dd		bra $0109d2		bra 	Compare_Fail
.0109f5					Binary_LessEqual:
.0109f5	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.0109f8	b0 12		bcs $010a0c		bcs 	_BLEString
.0109fa	18		clc			clc 									; numeric <= signed
.0109fb	b5 00		lda $00,x		lda 	EXSValueL,x
.0109fd	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0109ff	b5 20		lda $20,x		lda 	EXSValueH,x
.010a01	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a03	50 03		bvc $010a08		bvc 	*+5
.010a05	49 00 80	eor #$8000		eor 	#$8000
.010a08	30 c0		bmi $0109ca		bmi 	Compare_Succeed
.010a0a	80 c6		bra $0109d2		bra 	Compare_Fail
.010a0c					_BLEString:
.010a0c	c9 01 00	cmp #$0001		cmp 	#$0001 							; string
.010a0f	d0 b9		bne $0109ca		bne 	Compare_Succeed
.010a11	80 bf		bra $0109d2		bra 	Compare_Fail
.010a13					Binary_Greater:
.010a13	20 31 0a	jsr $010a31		jsr 	CompareTypeCheck 				; which types are we comparing ?
.010a16	b0 12		bcs $010a2a		bcs 	_BGString
.010a18	18		clc			clc 									; numeric > signed
.010a19	b5 00		lda $00,x		lda 	EXSValueL,x
.010a1b	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010a1d	b5 20		lda $20,x		lda 	EXSValueH,x
.010a1f	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010a21	50 03		bvc $010a26		bvc 	*+5
.010a23	49 00 80	eor #$8000		eor 	#$8000
.010a26	10 a2		bpl $0109ca		bpl 	Compare_Succeed
.010a28	80 a8		bra $0109d2		bra 	Compare_Fail
.010a2a					_BGString:
.010a2a	c9 01 00	cmp #$0001		cmp 	#$0001
.010a2d	f0 9b		beq $0109ca		beq 	Compare_Succeed
.010a2f	80 a1		bra $0109d2		bra 	Compare_Fail
.010a31					CompareTypeCheck:
.010a31	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; xor the type bits (bit 15)
.010a33	55 42		eor $42,x		eor 	EXSPrecType+2,x
.010a35	30 06		bmi $010a3d		bmi 	_CTCFail 						; if different types cannot be compared, must be the same !
.010a37	b5 40		lda $40,x		lda 	EXSPrecType+0,x 				; get the type they (both) are.
.010a39	30 1c		bmi $010a57		bmi 	_CTCStringCompare 				; if strings, do a string comparison.
.010a3b	18		clc			clc 									; if numbers return with carry clear and calculate it.
.010a3c	60		rts			rts
.010a3d					_CTCFail:
.010a3d	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010a40	43 6f 6d 70 61 72 69 73				.text 	"Comparison mixed types",$00 								; with this message
>010a48	6f 6e 20 6d 69 78 65 64 20 74 79 70 65 73 00
.010a57					_CTCStringCompare:
.010a57	20 fb 04	jsr $0104fb		jsr 	ResetTypeInteger 				; two strings return integer not string.
.010a5a	b5 00		lda $00,x		lda 	EXSValueL+0,x 					; copy address of string 1 -> DTemp1
.010a5c	85 08		sta $08			sta 	DTemp1
.010a5e	b5 02		lda $02,x		lda 	EXSValueL+2,x 					; copy address of string 2 -> DTemp2
.010a60	85 0c		sta $0c			sta 	DTemp2
.010a62	a9 00 00	lda #$0000		lda 	#$0000 							; clear AY
.010a65	a8		tay			tay
.010a66	e2 20		sep #$20		sep 	#$20 							; 8 bit data mode.
.010a68	b2 08		lda ($08)		lda 	(DTemp1) 						; get the length of the shorter string
.010a6a	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010a6c	90 02		bcc $010a70		bcc 	_CTCSmallest
.010a6e	b2 0c		lda ($0c)		lda 	(DTemp2)
.010a70					_CTCSmallest:
.010a70	85 14		sta $14			sta		DSignCount 						; use this as a comparison count. Check to see they match fires
.010a72					_CTCCompare:
.010a72	c8		iny			iny 									; look at next character (done first, first char is size)
.010a73	c6 14		dec $14			dec 	DSignCount 						; decrement counter
.010a75	30 16		bmi $010a8d		bmi 	_CTCEqualSoFar 					; if -ve the strings are the same as far as the shortest.
.010a77	b1 08		lda ($08),y		lda 	(DTemp1),y						; compare s1[y] - s2[y]
.010a79	d1 0c		cmp ($0c),y		cmp 	(DTemp2),y
.010a7b	f0 f5		beq $010a72		beq 	_CTCCompare 					; if zero, try the next character.
.010a7d	b0 07		bcs $010a86		bcs 	_CTCGreater 					; Strings are different in their common length. Return -ve then s2 > s1
.010a7f					_CTCLess:
.010a7f	c2 20		rep #$20		rep 	#$20
.010a81	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010a84	80 14		bra $010a9a		bra 	_CTCExit
.010a86					_CTCGreater:
.010a86	c2 20		rep #$20		rep 	#$20
.010a88	a9 01 00	lda #$0001		lda 	#$0001 							; return +1 and CS
.010a8b	80 0d		bra $010a9a		bra 	_CTCExit
.010a8d					_CTCEqualSoFar:
.010a8d	b2 08		lda ($08)		lda 	(DTemp1) 						; if len(s1) < len(s2) then s1 is the smaller
.010a8f	d2 0c		cmp ($0c)		cmp 	(DTemp2)
.010a91	90 ec		bcc $010a7f		bcc 	_CTCLess
.010a93	d0 f1		bne $010a86		bne 	_CTCGreater 					; if len(s1) > len(s2) then s2 is the smaller
.010a95	c2 20		rep #$20		rep 	#$20 	 						; if lengths are the same, then the strings are the same.
.010a97	a9 00 00	lda #$0000		lda 	#$0000
.010a9a					_CTCExit:
.010a9a	38		sec			sec 									; return with CS indicating string comparison.
.010a9b	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/divide.asm

.010a9c					Binary_Divide:
.010a9c	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010a9f	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.010aa1	15 22		ora $22,x		ora	 	EXSValueH+2,x
.010aa3	d0 14		bne $010ab9		bne 	_BinaryDivide_Ok
.010aa5	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010aa8	44 69 76 69 73 69 6f 6e				.text 	"Division by zero",$00 								; with this message
>010ab0	20 62 79 20 7a 65 72 6f 00
.010ab9					_BinaryDivide_Ok:
.010ab9	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.010abb	64 0a		stz $0a			stz 	DTemp1+2
.010abd	64 14		stz $14			stz 	DSignCount  						; zero sign count.
.010abf	5a		phy			phy 										; save Y (bit counter)
.010ac0	b5 22		lda $22,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010ac2	10 07		bpl $010acb		bpl 	_BinaryDivide_RightDone
.010ac4	e8		inx			inx
.010ac5	e8		inx			inx
.010ac6	20 01 0b	jsr $010b01		jsr 	Binary_DivNegate
.010ac9	ca		dex			dex
.010aca	ca		dex			dex
.010acb					_BinaryDivide_RightDone:
.010acb	b5 20		lda $20,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.010acd	10 03		bpl $010ad2		bpl 	_BinaryDivide_LeftDone
.010acf	20 01 0b	jsr $010b01		jsr 	Binary_DivNegate
.010ad2					_BinaryDivide_LeftDone:
.010ad2	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010ad5					_BinaryDivide_Loop:
.010ad5	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010ad7	36 20		rol $20,x		rol 	EXSValueH+0,x
.010ad9	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.010adb	26 0a		rol $0a			rol 	DTemp1+2
.010add	38		sec			sec											; calculate A-M
.010ade	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010ae0	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010ae2	85 0c		sta $0c			sta 	DTemp2
.010ae4	a5 0a		lda $0a			lda 	DTemp1+2
.010ae6	f5 22		sbc $22,x		sbc 	EXSValueH+2,x
.010ae8	90 08		bcc $010af2		bcc 	_Binary_NoSubract 					; if A < M skip this
.010aea	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.010aec	a5 0c		lda $0c			lda 	DTemp2
.010aee	85 08		sta $08			sta 	DTemp1+0
.010af0	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010af2					_Binary_NoSubract:
.010af2	88		dey			dey 										; do it 32 times.
.010af3	d0 e0		bne $010ad5		bne 	_BinaryDivide_Loop
.010af5					_BinaryDivide_Exit:
.010af5	a5 14		lda $14			lda 	DSignCount 							; restore sign
.010af7	29 01 00	and #$0001		and 	#1
.010afa	f0 03		beq $010aff		beq 	_BinaryDivide_Exit2
.010afc	20 01 0b	jsr $010b01		jsr 	Binary_DivNegate
.010aff					_BinaryDivide_Exit2:
.010aff	7a		ply			ply 										; restore Y
.010b00	60		rts			rts
.010b01					Binary_DivNegate:
.010b01	e6 14		inc $14			inc 	DSignCount 							; increment the count of signs.
.010b03	38		sec			sec 										; negate the value at stack X.
.010b04	a9 00 00	lda #$0000		lda 	#$0000
.010b07	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.010b09	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b0b	a9 00 00	lda #$0000		lda 	#$0000
.010b0e	f5 20		sbc $20,x		sbc 	EXSValueH+0,x
.010b10	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b12	60		rts			rts
.010b13					Binary_Modulus:
.010b13	20 9c 0a	jsr $010a9c		jsr 	Binary_Divide 						; do the divide
.010b16	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010b18	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b1a	a5 0a		lda $0a			lda 	DTemp1+2
.010b1c	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b1e	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/binary/multiply.asm

.010b1f					Binary_Multiply:
.010b1f	20 db 04	jsr $0104db		jsr 	CheckBothNumeric 					; check both values are numeric
.010b22	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010b24	85 08		sta $08			sta 	DTemp1
.010b26	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b28	85 0a		sta $0a			sta		DTemp1+2
.010b2a	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.010b2c	74 20		stz $20,x		stz 	EXSValueH+0,x
.010b2e					_BinaryMultiply_Loop:
.010b2e	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.010b30	05 0a		ora $0a			ora 	DTemp1+2
.010b32	f0 1e		beq $010b52		beq 	_BinaryMultiply_Exit
.010b34	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010b36	29 01 00	and #$0001		and 	#1
.010b39	f0 0d		beq $010b48		beq 	_BinaryMultiply_NoAdd
.010b3b	18		clc			clc 										; add multiplicand to result.
.010b3c	b5 00		lda $00,x		lda 	EXSValueL+0,x
.010b3e	75 02		adc $02,x		adc 	EXSValueL+2,x
.010b40	95 00		sta $00,x		sta 	EXSValueL+0,x
.010b42	b5 20		lda $20,x		lda 	EXSValueH+0,x
.010b44	75 22		adc $22,x		adc 	EXSValueH+2,x
.010b46	95 20		sta $20,x		sta 	EXSValueH+0,x
.010b48					_BinaryMultiply_NoAdd:
.010b48	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010b4a	66 08		ror $08			ror 	DTemp1
.010b4c	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.010b4e	36 22		rol $22,x		rol 	EXSValueH+2,x
.010b50	80 dc		bra $010b2e		bra 	_BinaryMultiply_Loop 				; go round again.
.010b52					_BinaryMultiply_Exit:
.010b52	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/simpleunary.asm

.010b53					Function_Len:
.010b53	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010b56	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010b59	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b5c	b4 02		ldy $02,x			ldy 	EXSValueL+2,x 				; address of string.
.010b5e	b9 00 00	lda $0000,y			lda 	$0000,y 					; get the string length
.010b61	29 ff 00	and #$00ff			and 	#$00FF 						; as a byte
.010b64	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return it
.010b66	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b68	60		rts				rts
.010b69					Function_Abs:
.010b69	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010b6c	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010b6f	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b72	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.010b74	30 07		bmi $010b7d			bmi 	_FAbsNegative 				; negate it if negative
.010b76	95 20		sta $20,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.010b78	b5 02		lda $02,x			lda 	EXSValueL+2,x
.010b7a	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b7c	60		rts				rts
.010b7d					_FAbsNegative:
.010b7d	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.010b7e	a9 00 00	lda #$0000			lda 	#0
.010b81	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010b83	95 00		sta $00,x			sta 	EXSValueL+0,x
.010b85	a9 00 00	lda #$0000			lda 	#0
.010b88	f5 22		sbc $22,x			sbc 	EXSValueH+2,x
.010b8a	95 20		sta $20,x			sta 	EXSValueH+0,x
.010b8c	60		rts				rts
.010b8d					Function_Sgn:
.010b8d	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns integer
.010b90	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get an integer
.010b93	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010b96	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.010b98	74 20		stz $20,x			stz 	EXSValueH+0,x
.010b9a	b5 22		lda $22,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper word.
.010b9c	30 07		bmi $010ba5			bmi 	_FSgnNegative 				; set to -1 if signed
.010b9e	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010ba0	f0 02		beq $010ba4			beq 	_FSgnExit
.010ba2	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010ba4					_FSgnExit:
.010ba4	60		rts				rts
.010ba5					_FSgnNegative:
.010ba5	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.010ba8	95 00		sta $00,x			sta 	EXSValueL+0,x
.010baa	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bac	60		rts				rts
.010bad					Function_Random:
.010bad	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010bb0	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger
.010bb3	a5 10		lda $10				lda 	DRandom 					; check for non-zero
.010bb5	05 12		ora $12				ora 	DRandom+2 					; they don't like these :)
.010bb7	d0 0a		bne $010bc3			bne 	_Rnd_NotZero
.010bb9	a9 b5 00	lda #$00b5			lda 	#$B5 						; initialise it to the same value.
.010bbc	85 10		sta $10				sta 	DRandom
.010bbe	a9 ea 00	lda #$00ea			lda 	#$EA
.010bc1	85 12		sta $12				sta 	DRandom+2
.010bc3					_Rnd_NotZero:
.010bc3	20 ce 0b	jsr $010bce			jsr 	_Rnd_Process 				; call randomiser twice
.010bc6	95 20		sta $20,x			sta 	EXSValueH+0,x
.010bc8	20 ce 0b	jsr $010bce			jsr 	_Rnd_Process
.010bcb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010bcd	60		rts				rts
.010bce					_Rnd_Process:
.010bce	06 10		asl $10				asl 	DRandom 					; shift right, exit
.010bd0	26 12		rol $12				rol 	DRandom+2
.010bd2	90 0e		bcc $010be2			bcc 	_Rnd_Exit
.010bd4	a5 10		lda $10				lda 	DRandom 					; taps effectively
.010bd6	49 54 d4	eor #$d454			eor 	#$D454
.010bd9	85 10		sta $10				sta 	DRandom
.010bdb	a5 12		lda $12				lda 	DRandom+2
.010bdd	49 d5 55	eor #$55d5			eor 	#$55D5
.010be0	85 12		sta $12				sta 	DRandom+2
.010be2					_Rnd_Exit:
.010be2	a5 10		lda $10				lda 	DRandom
.010be4	45 12		eor $12				eor 	DRandom+2
.010be6	60		rts				rts
.010be7					Function_Chr:
.010be7	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010bea	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer
.010bed	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010bf0	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010bf3	d0 12		bne $010c07			bne 	_FCHBad
.010bf5	48		pha				pha  								; save char # on stack
.010bf6	a9 01 00	lda #$0001			lda 	#1 							; allocate a single character string
.010bf9	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010bfc	68		pla				pla 								; restore character number
.010bfd	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010c00	a5 18		lda $18				lda 	DStartTempString 			; return the string address
.010c02	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c04	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c06	60		rts				rts
.010c07					_FCHBad:
.010c07	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c0a	42 61 64 20 76 61 6c 75				.text 	"Bad value for chr$()",$00 								; with this message
>010c12	65 20 66 6f 72 20 63 68 72 24 28 29 00
.010c1f					Function_Asc:
.010c1f	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010c22	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get string
.010c25	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010c28	a8		tay				tay 								; string address in Y
.010c29	b9 00 00	lda $0000,y			lda 	$0000,y 					; check length non zero
.010c2c	29 ff 00	and #$00ff			and 	#$00FF
.010c2f	f0 0b		beq $010c3c			beq 	_FASBad 					; what does ASC("") do ? return 0 - error here.
.010c31	b9 01 00	lda $0001,y			lda 	$0001,y 					; get first char
.010c34	29 ff 00	and #$00ff			and 	#$00FF 						; mask it
.010c37	95 00		sta $00,x			sta 	EXSValueL+0,x 				; and return that.
.010c39	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c3b	60		rts				rts
.010c3c					_FASBad:
.010c3c	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c3f	42 61 64 20 76 61 6c 75				.text 	"Bad value for asc()",$00 								; with this message
>010c47	65 20 66 6f 72 20 61 73 63 28 29 00
.010c53					Function_SPC:
.010c53	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string
.010c56	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get integer, which is the length.
.010c59	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010c5c	c0 00 00	cpy #$0000			cpy 	#0 							; must be 0-255
.010c5f	d0 17		bne $010c78			bne 	_FSPBad
.010c61	48		pha				pha 								; save length
.010c62	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate character space
.010c65	7a		ply				ply 								; get count in Y
.010c66	f0 09		beq $010c71			beq 	_FSPExit 					; if zero, just empty string
.010c68					_FSPCopy:
.010c68	a9 20 00	lda #$0020			lda 	#" "						; space character
.010c6b	20 65 05	jsr $010565			jsr 	StringWriteCharacter 		; write it out.
.010c6e	88		dey				dey
.010c6f	d0 f7		bne $010c68			bne 	_FSPCopy	 				; do it Y times
.010c71					_FSPExit:
.010c71	a5 18		lda $18				lda 	DStartTempString 			; return that address
.010c73	95 00		sta $00,x			sta 	EXSValueL+0,x
.010c75	74 20		stz $20,x			stz 	EXSValueH+0,x
.010c77	60		rts				rts
.010c78					_FSPBad:
.010c78	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010c7b	42 61 64 20 76 61 6c 75				.text 	"Bad value for spc()",$00 								; with this message
>010c83	65 20 66 6f 72 20 73 70 63 28 29 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/string.asm

.010c8f					Function_LEFT:
.010c8f	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010c92	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010c95	48		pha				pha 								; save string on stack.
.010c96	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010c99	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010c9c	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010c9f	d0 6d		bne $010d0e			bne 	FNStringParameter
.010ca1	85 08		sta $08				sta 	DTemp1 						; save count.
.010ca3	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010ca6	7a		ply				ply 								; Y points to string.
.010ca7	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010caa	29 ff 00	and #$00ff			and 	#$00FF
.010cad	f0 52		beq $010d01			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010caf	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010cb1	f0 55		beq $010d08			beq 	FNStringY 					; return string in Y if current len = required len.
.010cb3	90 53		bcc $010d08			bcc 	FNStringY 					; if current < required return whole thing.
.010cb5	c8		iny				iny 								; take from here - start of string
.010cb6	80 33		bra $010ceb			bra 	FNDTemp1Characters
.010cb8					Function_RIGHT:
.010cb8	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010cbb	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010cbe	48		pha				pha 								; save string on stack.
.010cbf	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get count
.010cc2	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010cc5	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010cc8	d0 44		bne $010d0e			bne 	FNStringParameter
.010cca	85 08		sta $08				sta 	DTemp1 						; save count.
.010ccc	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010ccf	7a		ply				ply 								; Y points to string.
.010cd0	b9 00 00	lda $0000,y			lda 	$0000,y 					; get length of string
.010cd3	29 ff 00	and #$00ff			and 	#$00FF
.010cd6	f0 29		beq $010d01			beq 	FNStringEmpty 				; return empty if zero length anyway.
.010cd8	c5 08		cmp $08				cmp 	DTemp1 						; compare current vs required length
.010cda	f0 2c		beq $010d08			beq 	FNStringY 					; return string in Y if current len = required len.
.010cdc	90 2a		bcc $010d08			bcc 	FNStringY 					; if current < required return whole thing.
.010cde	38		sec				sec 								; current-required is the number to skip
.010cdf	e5 08		sbc $08				sbc 	DTemp1
.010ce1	85 0a		sta $0a				sta 	DTemp1+2
.010ce3	98		tya				tya
.010ce4	18		clc				clc
.010ce5	65 0a		adc $0a				adc 	DTemp1+2
.010ce7	a8		tay				tay
.010ce8	c8		iny				iny 								; +1 for the count.
.010ce9	80 00		bra $010ceb			bra 	FNDTemp1Characters
.010ceb					FNDTemp1Characters:
.010ceb	a5 08		lda $08				lda 	DTemp1 						; we need this big a string.
.010ced	f0 12		beq $010d01			beq 	FNStringEmpty 				; if zero, return empty string.
.010cef	20 39 05	jsr $010539			jsr 	StringTempAllocate
.010cf2	48		pha				pha 								; save the address
.010cf3					_FND1Loop:
.010cf3	b9 00 00	lda $0000,y			lda 	$0000,y 					; character to copy
.010cf6	20 65 05	jsr $010565			jsr 	StringWriteCharacter
.010cf9	c8		iny				iny
.010cfa	c6 08		dec $08				dec 	DTemp1 						; DTemp1 times
.010cfc	d0 f5		bne $010cf3			bne 	_FND1Loop
.010cfe	7a		ply				ply 								; string address in Y
.010cff	80 07		bra $010d08			bra 	FNStringY
.010d01					FNStringEmpty:
.010d01	a9 00 00	lda #$0000			lda 	#0 							; return an empty string.
.010d04	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; put address of it in Y
.010d07	a8		tay				tay
.010d08					FNStringY:
.010d08	98		tya				tya
.010d09	95 00		sta $00,x			sta 	EXSValueL+0,x
.010d0b	74 22		stz $22,x			stz 	EXSValueH+2,x
.010d0d	60		rts				rts
.010d0e					FNStringParameter:
.010d0e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010d11	42 61 64 20 53 74 72 69				.text 	"Bad String Operation",$00 								; with this message
>010d19	6e 67 20 4f 70 65 72 61 74 69 6f 6e 00
.010d26					Function_MID:
.010d26	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010d29	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010d2c	48		pha				pha 								; save string on stack.
.010d2d	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; get offset (n)
.010d30	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger
.010d33	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d36	d0 d6		bne $010d0e			bne 	FNStringParameter
.010d38	c9 00 00	cmp #$0000			cmp 	#0
.010d3b	f0 d1		beq $010d0e			beq 	FNStringParameter 			; or zero
.010d3d	48		pha				pha 								; save start position on stack.
.010d3e	a9 ff 00	lda #$00ff			lda 	#255 						; default third parameter is 255 e.g. whole string
.010d41	85 08		sta $08				sta 	DTemp1
.010d43	b2 06		lda ($06)			lda 	(DCodePtr) 					; is there a comma
.010d45	c9 23 32	cmp #$3223			cmp 	#commaTokenID
.010d48	d0 0e		bne $010d58			bne 	_FMINoThird
.010d4a	e6 06		inc $06				inc 	DCodePtr 					; skip the comma
.010d4c	e6 06		inc $06				inc 	DCodePtr
.010d4e	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; how many to do (n1)
.010d51	c0 00 00	cpy #$0000			cpy 	#0 							; can't be high
.010d54	d0 b8		bne $010d0e			bne 	FNStringParameter
.010d56	85 08		sta $08				sta 	DTemp1 						; save in DTemp1 (characters to count)
.010d58					_FMINoThird:
.010d58	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010d5b	68		pla				pla 								; get offset position
.010d5c	85 0c		sta $0c				sta 	DTemp2
.010d5e	7a		ply				ply 								; get address of string in Y
.010d5f	b9 00 00	lda $0000,y			lda		$0000,y 					; get length
.010d62	29 ff 00	and #$00ff			and 	#$00FF
.010d65	c5 0c		cmp $0c				cmp 	DTemp2 						; check length of string vs offset position
.010d67	90 98		bcc $010d01			bcc 	FNStringEmpty 				; if length <= offset position then return ""
.010d69	38		sec				sec 								; calculate number of characters left after
.010d6a	e5 0c		sbc $0c				sbc 	DTemp2 						; offset
.010d6c	1a		inc a				inc 	a 							; there is one more because of index starts at 1.
.010d6d	c5 08		cmp $08				cmp 	DTemp1 						; available -- chars required.
.010d6f	b0 02		bcs $010d73			bcs 	_FMISufficient
.010d71	85 08		sta $08				sta 	DTemp1 						; if available < chars required, only copy those
.010d73					_FMISufficient:
.010d73	98		tya				tya 								; get address
.010d74	18		clc				clc
.010d75	65 0c		adc $0c				adc 	DTemp2 						; add the offset, the extra 1 (index) skips length
.010d77	a8		tay				tay 								; put in Y
.010d78	82 70 ff	brl $010ceb			brl 	FNDTemp1Characters			; and copy them.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/memread.asm

.010d7b					Function_Peek:
.010d7b	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d7e	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d81	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010d84	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010d86	84 0a		sty $0a				sty 	DTemp1+2
.010d88	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010d8b	b7 08		lda [$08],y			lda 	[DTemp1],y
.010d8d	29 ff 00	and #$00ff			and 	#$00FF 						; mask
.010d90	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010d92	74 20		stz $20,x			stz 	EXSValueH+0,x
.010d94	60		rts				rts
.010d95					Function_Deek:
.010d95	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010d98	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010d9b	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010d9e	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010da0	84 0a		sty $0a				sty 	DTemp1+2
.010da2	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010da5	b7 08		lda [$08],y			lda 	[DTemp1],y
.010da7	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010da9	74 20		stz $20,x			stz 	EXSValueH+0,x
.010dab	60		rts				rts
.010dac					Function_Leek:
.010dac	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010daf	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010db2	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check )
.010db5	85 08		sta $08				sta 	DTemp1 						; save address in DTemp
.010db7	84 0a		sty $0a				sty 	DTemp1+2
.010db9	a0 00 00	ldy #$0000			ldy 	#0							; read data
.010dbc	b7 08		lda [$08],y			lda 	[DTemp1],y
.010dbe	95 00		sta $00,x			sta 	EXSValueL+0,x 				; write out.
.010dc0	c8		iny				iny
.010dc1	c8		iny				iny
.010dc2	b7 08		lda [$08],y			lda 	[DTemp1],y
.010dc4	95 20		sta $20,x			sta 	EXSValueH+0,x
.010dc6	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/val.asm

.010dc7					Function_VAL:
.010dc7	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns an integer
.010dca	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; get the value you are absoluting
.010dcd	48		pha				pha 								; put string address on stack.
.010dce	20 de 0d	jsr $010dde			jsr 	VALGetBase 					; process , base (shared with STR$())
.010dd1	7a		ply				ply 								; get string address back
.010dd2	da		phx				phx 								; save X on stack
.010dd3	aa		tax				tax 								; base in X
.010dd4	98		tya				tya 								; address in A
.010dd5	20 18 0e	jsr $010e18			jsr 	StringToInteger
.010dd8	fa		plx				plx 								; restore X
.010dd9	95 00		sta $00,x			sta 	EXSValueL+0,x
.010ddb	94 20		sty $20,x			sty 	EXSValueH+0,x
.010ddd	60		rts				rts
.010dde					VALGetBase:
.010dde	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next
.010de0	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if comma, go to get base code.
.010de3	f0 07		beq $010dec			beq 	_VGBAlternate
.010de5	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket			; expect ), and return 10.
.010de8	a9 0a 00	lda #$000a			lda 	#10
.010deb	60		rts				rts
.010dec					_VGBAlternate:
.010dec	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; skip comma.
.010def	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get base
.010df2	c0 00 00	cpy #$0000			cpy 	#0							; check base legal
.010df5	d0 0e		bne $010e05			bne 	_VGBBadBase
.010df7	c9 02 00	cmp #$0002			cmp 	#2
.010dfa	90 09		bcc $010e05			bcc 	_VGBBadBase
.010dfc	c9 11 00	cmp #$0011			cmp 	#16+1						; 0-9A-F
.010dff	b0 04		bcs $010e05			bcs 	_VGBBadBase
.010e01	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; get right bracket and return.
.010e04	60		rts				rts
.010e05					_VGBBadBase:
.010e05	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e08	42 61 64 20 4e 75 6d 62				.text 	"Bad Number Base",$00 								; with this message
>010e10	65 72 20 42 61 73 65 00
.010e18					StringToInteger:
.010e18	85 24		sta $24				sta 	DTemp3 						; DTemp3 is the character pointer
.010e1a	b2 24		lda ($24)			lda 	(DTemp3)					; DTemp3+2 is the character count to do.
.010e1c	29 ff 00	and #$00ff			and 	#$00FF
.010e1f	85 26		sta $26				sta 	DTemp3+2
.010e21	f0 6e		beq $010e91			beq 	_STIError 					; if length zero it's bad.
.010e23	e6 24		inc $24				inc 	DTemp3 						; skip length byte.
.010e25	86 14		stx $14				stx 	DSignCount 					; Signcount is the base, 2-16.
.010e27	64 08		stz $08				stz 	DTemp1 						; Zero DTemp1, this is the result register.
.010e29	64 0a		stz $0a				stz 	DTemp1+2
.010e2b	b2 24		lda ($24)			lda 	(DTemp3)					; look at first character
.010e2d	29 ff 00	and #$00ff			and 	#$00FF 						; mask off
.010e30	48		pha				pha 								; push on stack
.010e31	c9 2d 00	cmp #$002d			cmp 	#"-"						; if not -, skip
.010e34	d0 06		bne $010e3c			bne 	_STILoop
.010e36	e6 24		inc $24				inc 	DTemp3 						; advance pointer over minus sign
.010e38	c6 26		dec $26				dec 	DTemp3+2					; dec count
.010e3a	f0 55		beq $010e91			beq 	_STIError 					; if only - then error.
.010e3c					_STILoop:
.010e3c	a5 14		lda $14				lda 	DSignCount 					; multiply DTemp1 by DSignCount
.010e3e	20 b0 0e	jsr $010eb0			jsr 	MultiplyTemp1ByA
.010e41	b2 24		lda ($24)			lda 	(DTemp3)					; get character, mask
.010e43	29 ff 00	and #$00ff			and 	#$00FF
.010e46	20 a1 0e	jsr $010ea1			jsr 	ConvertUpperCase	 		; make U/C
.010e49	c9 30 00	cmp #$0030			cmp 	#'0' 						; validate it check if 0-9
.010e4c	90 43		bcc $010e91			bcc 	_STIError
.010e4e	c9 3a 00	cmp #$003a			cmp 	#'9'+1
.010e51	90 0e		bcc $010e61			bcc 	_STIOkay1
.010e53	c9 41 00	cmp #$0041			cmp 	#'A' 						; check if A-Z
.010e56	90 39		bcc $010e91			bcc 	_STIError
.010e58	c9 5b 00	cmp #$005b			cmp 	#'Z'+1
.010e5b	b0 34		bcs $010e91			bcs 	_STIError
.010e5d	18		clc				clc 								; shift to correct range.
.010e5e	69 09 00	adc #$0009			adc 	#9
.010e61					_STIOkay1:
.010e61	29 0f 00	and #$000f			and 	#15 						; now in range 0-35
.010e64	c5 14		cmp $14				cmp 	DSignCount 					; error if >= base
.010e66	b0 29		bcs $010e91			bcs 	_STIError
.010e68	18		clc				clc 								; add A to DTemp1
.010e69	65 08		adc $08				adc 	DTemp1
.010e6b	85 08		sta $08				sta 	DTemp1
.010e6d	90 02		bcc $010e71			bcc 	_STINoCarry
.010e6f	e6 0a		inc $0a				inc 	DTemp1+2
.010e71					_STINoCarry:
.010e71	e6 24		inc $24				inc 	DTemp3 						; get character, pre-increment because of count byte
.010e73	c6 26		dec $26				dec 	DTemp3+2 					; decrement counter
.010e75	d0 c5		bne $010e3c			bne 	_STILoop 					; loop back.
.010e77	68		pla				pla 								; get optional minus bac
.010e78	c9 2d 00	cmp #$002d			cmp 	#"-"
.010e7b	d0 0f		bne $010e8c			bne 	_STINotNegative 			; handle the negative character
.010e7d	38		sec				sec 								; negate DTemp1
.010e7e	a9 00 00	lda #$0000			lda 	#0
.010e81	e5 08		sbc $08				sbc 	DTemp1
.010e83	85 08		sta $08				sta 	DTemp1
.010e85	a9 00 00	lda #$0000			lda 	#0
.010e88	e5 0a		sbc $0a				sbc 	DTemp1+2
.010e8a	85 0a		sta $0a				sta 	DTemp1+2
.010e8c					_STINotNegative:
.010e8c	a5 08		lda $08				lda 	DTemp1 						; get the result
.010e8e	a4 0a		ldy $0a				ldy 	DTemp1+2
.010e90	60		rts				rts
.010e91					_STIError:
.010e91	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010e94	42 61 64 20 63 6f 6e 73				.text 	"Bad constant",$00 								; with this message
>010e9c	74 61 6e 74 00
.010ea1					ConvertUpperCase:
.010ea1	c9 61 00	cmp #$0061			cmp 	#'a'
.010ea4	90 09		bcc $010eaf			bcc 	_CUCExit
.010ea6	c9 7b 00	cmp #$007b			cmp 	#'z'+1
.010ea9	b0 04		bcs $010eaf			bcs 	_CUCExit
.010eab	38		sec				sec
.010eac	e9 20 00	sbc #$0020			sbc 	#32
.010eaf					_CUCExit:
.010eaf	60		rts				rts
.010eb0					MultiplyTemp1ByA:
.010eb0					_MTGeneral:
.010eb0	da		phx				phx
.010eb1	aa		tax				tax 								; multiplier in X
.010eb2	a5 08		lda $08				lda 	DTemp1 						; copy DTemp1 to DTemp2
.010eb4	85 0c		sta $0c				sta 	DTemp2
.010eb6	a5 0a		lda $0a				lda 	DTemp1+2
.010eb8	85 0e		sta $0e				sta 	DTemp2+2
.010eba	64 08		stz $08				stz 	DTemp1 						; zero DTemp1
.010ebc	64 0a		stz $0a				stz 	DTemp1+2
.010ebe	a0 00 00	ldy #$0000			ldy 	#0 		 					; this is the 'high byte' of the result.
.010ec1					_MTLoop:
.010ec1	8a		txa				txa 								; shift X right into C
.010ec2	4a		lsr a				lsr 	a
.010ec3	aa		tax				tax
.010ec4	90 10		bcc $010ed6			bcc 	_MTNoAdd
.010ec6	18		clc				clc
.010ec7	a5 08		lda $08				lda 	DTemp1 						; add if LSB set
.010ec9	65 0c		adc $0c				adc 	DTemp2
.010ecb	85 08		sta $08				sta 	DTemp1
.010ecd	a5 0a		lda $0a				lda 	DTemp1+2
.010ecf	65 0e		adc $0e				adc 	DTemp2+2
.010ed1	85 0a		sta $0a				sta 	DTemp1+2
.010ed3	90 01		bcc $010ed6			bcc 	_MTNoAdd
.010ed5	c8		iny				iny
.010ed6					_MTNoAdd:
.010ed6	06 0c		asl $0c				asl 	DTemp2  					; shift multiplicand left
.010ed8	26 0e		rol $0e				rol 	DTemp2+2
.010eda	90 01		bcc $010edd			bcc 	_MTNoOverflow
.010edc	c8		iny				iny
.010edd					_MTNoOverflow:
.010edd	8a		txa				txa 								; until multiplier is zero.
.010ede	d0 e1		bne $010ec1			bne 	_MTLoop
.010ee0	98		tya				tya
.010ee1	18		clc				clc
.010ee2	69 ff ff	adc #$ffff			adc 	#$FFFF
.010ee5	fa		plx				plx 								; restore X
.010ee6	60		rts				rts 								; and exit

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/str.asm

.010ee7					Function_Str:
.010ee7	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.010eea	20 fa 02	jsr $0102fa			jsr 	EvaluateNextInteger 		; get the value you are absoluting
.010eed	48		pha				pha 								; save YA on the stack
.010eee	5a		phy				phy
.010eef	20 de 0d	jsr $010dde			jsr 	VALGetBase 					; process , base (shared with STR$())
.010ef2	85 14		sta $14				sta 	DSignCount
.010ef4	7a		ply				ply 								; YA is the number
.010ef5	68		pla				pla
.010ef6	da		phx				phx
.010ef7	a6 14		ldx $14				ldx 	DSignCount 					; X is the base.
.010ef9	20 02 0f	jsr $010f02			jsr 	ConvertToString 			; convert it to a string.
.010efc	fa		plx				plx 								; restore X
.010efd	95 00		sta $00,x			sta 	EXSValueL+0,x 				; save the result
.010eff	74 20		stz $20,x			stz 	EXSValueH+0,x
.010f01	60		rts				rts
.010f02					ConvertToString:
.010f02	48		pha				pha
.010f03	a9 22 00	lda #$0022			lda 	#34 						; enough space for Base 2.
.010f06	20 39 05	jsr $010539			jsr 	StringTempAllocate 			; allocate space for return string.
.010f09	68		pla				pla
.010f0a					ConvertToStringAlreadyAllocated:
.010f0a	da		phx				phx 								; save X (base)
.010f0b	85 24		sta $24				sta 	DTemp3 						; save number in DTemp3
.010f0d	84 26		sty $26				sty 	DTemp3+2
.010f0f	86 14		stx $14				stx 	DSignCount 					; save base in DSignCount.
.010f11	a5 26		lda $26				lda 	DTemp3+2 					; is number -ve.
.010f13	10 15		bpl $010f2a			bpl 	_CTSNotNegative
.010f15	a9 2d 00	lda #$002d			lda 	#"-"						; output a minus character to the new string
.010f18	20 94 0f	jsr $010f94			jsr 	CTSOutputA
.010f1b	38		sec				sec 								; negate DTemp3 which is the number
.010f1c	a9 00 00	lda #$0000			lda 	#0
.010f1f	e5 24		sbc $24				sbc 	DTemp3
.010f21	85 24		sta $24				sta 	DTemp3
.010f23	a9 00 00	lda #$0000			lda 	#0
.010f26	e5 26		sbc $26				sbc 	DTemp3+2
.010f28	85 26		sta $26				sta 	DTemp3+2
.010f2a					_CTSNotNegative:
.010f2a	a9 01 00	lda #$0001			lda 	#1 							; push 32-bit 1 on stack, which is the first subtractor.
.010f2d	48		pha				pha
.010f2e	a9 00 00	lda #$0000			lda 	#0
.010f31	48		pha				pha
.010f32	a5 14		lda $14				lda 	DSignCount 					; reset DTemp1, the subtractor to the base value
.010f34	85 08		sta $08				sta 	DTemp1
.010f36	64 0a		stz $0a				stz 	DTemp1+2
.010f38					_CTSMultiplySubtractor:
.010f38	38		sec				sec 								; check number vs subtractor
.010f39	a5 24		lda $24				lda 	DTemp3
.010f3b	e5 08		sbc $08				sbc 	DTemp1
.010f3d	a5 26		lda $26				lda 	DTemp3+2
.010f3f	e5 0a		sbc $0a				sbc 	DTemp1+2
.010f41	90 0f		bcc $010f52			bcc		_CTSScaledUp 				; if >= then scaled up.
.010f43	a5 08		lda $08				lda 	DTemp1 						; push subtractor on the stack
.010f45	48		pha				pha
.010f46	a5 0a		lda $0a				lda 	DTemp1+2
.010f48	48		pha				pha
.010f49	a5 14		lda $14				lda 	DSignCount 					; multiply subtractor by base
.010f4b	20 b0 0e	jsr $010eb0			jsr 	MultiplyTemp1ByA
.010f4e	b0 02		bcs $010f52			bcs 	_CTSScaledUp 				; if overflow, start subtracting.
.010f50	80 e6		bra $010f38			bra 	_CTSMultiplySubtractor 		; otherwise try the next x base.
.010f52					_CTSScaledUp:
.010f52	7a		ply				ply 								; YA contains the previous divider.
.010f53	68		pla				pla
.010f54	c0 00 00	cpy #$0000			cpy 	#0 							; has that divider reached one yet ?
.010f57	d0 05		bne $010f5e			bne 	_CTSHasDigit
.010f59	c9 01 00	cmp #$0001			cmp 	#1 							; if so, then we've just got that digit left.
.010f5c	f0 20		beq $010f7e			beq 	_CTSExit
.010f5e					_CTSHasDigit:
.010f5e	85 0c		sta $0c				sta 	DTemp2 						; save in DTemp2
.010f60	84 0e		sty $0e				sty 	DTemp2+2
.010f62	a2 00 00	ldx #$0000			ldx 	#0 							; this is the count.
.010f65					_CTSSubLoop:
.010f65	38		sec				sec 								; subtract subtractor from number
.010f66	a5 24		lda $24				lda 	DTemp3
.010f68	e5 0c		sbc $0c				sbc 	DTemp2
.010f6a	a8		tay				tay 								; intermediate in Y
.010f6b	a5 26		lda $26				lda 	DTemp3+2
.010f6d	e5 0e		sbc $0e				sbc 	DTemp2+2
.010f6f	90 07		bcc $010f78			bcc 	_CTSFinishedSubtracting 	; if number < subtractor then completed this one.
.010f71	85 26		sta $26				sta 	DTemp3+2 					; output the number to DTemp3.
.010f73	84 24		sty $24				sty 	DTemp3
.010f75	e8		inx				inx 								; one more subtraction
.010f76	80 ed		bra $010f65			bra 	_CTSSubLoop 				; try it again.
.010f78					_CTSFinishedSubtracting:
.010f78	8a		txa				txa 								; convert to ASCII.
.010f79	20 87 0f	jsr $010f87			jsr 	CTSOutputHexDigit 			; write that out.
.010f7c	80 d4		bra $010f52			bra 	_CTSScaledUp 				; go pop the next subtactor and do that.
.010f7e					_CTSExit:
.010f7e	a5 24		lda $24				lda 	DTemp3 						; output last digit
.010f80	20 87 0f	jsr $010f87			jsr 	CTSOutputHexDigit
.010f83	a5 18		lda $18				lda 	DStartTempString 			; return string address.
.010f85	fa		plx				plx 								; restore X.
.010f86	60		rts				rts
.010f87					CTSOutputHexDigit:
.010f87	c9 0a 00	cmp #$000a			cmp 	#10 						; 0-9 are 48-56
.010f8a	90 04		bcc $010f90			bcc 	_CTSNotLetter
.010f8c	18		clc				clc
.010f8d	69 27 00	adc #$0027			adc 	#65-58+32 					; shift for bases > 10
.010f90					_CTSNotLetter:
.010f90	18		clc				clc
.010f91	69 30 00	adc #$0030			adc 	#48
.010f94					CTSOutputA:
.010f94	5a		phy				phy 								; save Y, set Y to current pointer
.010f95	a4 1a		ldy $1a				ldy 	DCurrentTempString
.010f97	99 00 00	sta $0000,y			sta 	$0000,y 					; write out, with a following zero.
.010f9a	e2 20		sep #$20			sep 	#$20 						; save in 8 bit mode.
.010f9c	b2 18		lda ($18)			lda 	(DStartTempString)			; increment character count.
.010f9e	1a		inc a				inc 	a
.010f9f	92 18		sta ($18)			sta 	(DStartTempString)
.010fa1	c2 20		rep #$20			rep 	#$20
.010fa3	e6 1a		inc $1a				inc 	DCurrentTempString 			; advance the pointer.
.010fa5	7a		ply				ply 								; restore Y and exit.
.010fa6	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/instr.asm

.010fa7					Function_INSTR:
.010fa7	20 fb 04	jsr $0104fb			jsr 	ResetTypeInteger 			; returns a integer
.010faa	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.010fad	48		pha				pha 								; save string to search
.010fae	20 d2 04	jsr $0104d2			jsr 	ExpectComma
.010fb1	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; string to search for
.010fb4	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket
.010fb7	85 08		sta $08				sta 	DTemp1 						; DTemp1 is the string to search for
.010fb9	68		pla				pla
.010fba	85 0c		sta $0c				sta 	DTemp2 						; DTemp2 is the string to search.
.010fbc	74 20		stz $20,x			stz 	EXSValueH+0,x 				; set high word to zero.
.010fbe	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero low word.
.010fc0	e2 20		sep #$20			sep 	#$20 						; calculate len(search)-len(lookfor)
.010fc2	38		sec				sec
.010fc3	b2 0c		lda ($0c)			lda 	(DTemp2)
.010fc5	f2 08		sbc ($08)			sbc		(DTemp1)
.010fc7	c2 20		rep #$20			rep 	#$20
.010fc9	90 2c		bcc $010ff7			bcc 	_FINSFail 					; if the string being searched is shorter, fail.
.010fcb	29 ff 00	and #$00ff			and 	#$00FF
.010fce	1a		inc a				inc 	a
.010fcf	85 24		sta $24				sta 	DTemp3 						; this is the number of matches we can try.
.010fd1	b2 08		lda ($08)			lda 	(DTemp1) 					; fail if first string is ""
.010fd3	29 ff 00	and #$00ff			and 	#$00FF
.010fd6	f0 22		beq $010ffa			beq 	_FINSError
.010fd8					_FINSLoop:
.010fd8	b5 00		lda $00,x			lda 	EXSValueL+0,x 				; pre-increment as we start indices at 1.
.010fda	1a		inc a				inc 	a
.010fdb	95 00		sta $00,x			sta 	EXSValueL+0,x
.010fdd	b2 08		lda ($08)			lda 	(DTemp1) 					; characters to match
.010fdf	29 ff 00	and #$00ff			and 	#$00FF
.010fe2	a8		tay				tay									; start comparing at index 1.
.010fe3					_FINSCompare:
.010fe3	b1 08		lda ($08),y			lda 	(DTemp1),y 					; char match ?
.010fe5	51 0c		eor ($0c),y			eor 	(DTemp2),y
.010fe7	29 ff 00	and #$00ff			and 	#$00FF
.010fea	d0 05		bne $010ff1			bne 	_FINSNext
.010fec	88		dey				dey
.010fed	d0 f4		bne $010fe3			bne 	_FINSCompare
.010fef	80 08		bra $010ff9			bra 	_FINSExit
.010ff1					_FINSNext:
.010ff1	e6 0c		inc $0c				inc 	DTemp2 						; bump pointer in string being searched
.010ff3	c6 24		dec $24				dec 	DTemp3 						; keep trying this many times
.010ff5	d0 e1		bne $010fd8			bne 	_FINSLoop
.010ff7					_FINSFail:
.010ff7	74 00		stz $00,x			stz 	EXSValueL+0,x 				; return 0
.010ff9					_FINSExit:
.010ff9	60		rts				rts
.010ffa					_FINSError:
.010ffa	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>010ffd	4e 6f 20 53 65 61 72 63				.text 	"No Search String",$00 								; with this message
>011005	68 20 53 74 72 69 6e 67 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/unary/caseconv.asm

.01100e					Function_UPPER:
.01100e	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.011011	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.011014	48		pha				pha
.011015	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.011018	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.01101b	68		pla				pla
.01101c	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.01101f	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011021	95 00		sta $00,x			sta 	EXSValueL+0,x
.011023	a8		tay				tay 								; address in Y
.011024	74 20		stz $20,x			stz 	EXSValueH+0,x
.011026	da		phx				phx 								; save X
.011027	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.011029	29 ff 00	and #$00ff			and 	#$00FF
.01102c	f0 20		beq $01104e			beq 	_FUPExit
.01102e	aa		tax				tax 								; put in X
.01102f					_FUPLoop:
.01102f	c8		iny				iny 								; increment and load character
.011030	b9 00 00	lda $0000,y			lda 	$0000,y
.011033	29 ff 00	and #$00ff			and 	#$00FF
.011036	c9 61 00	cmp #$0061			cmp 	#"a" 						; check range
.011039	90 10		bcc $01104b			bcc 	_FUPNoChange
.01103b	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.01103e	b0 0b		bcs $01104b			bcs 	_FUPNoChange
.011040	38		sec				sec 								; shift case
.011041	e9 20 00	sbc #$0020			sbc 	#32
.011044	e2 20		sep #$20			sep 	#$20 						; write back
.011046	99 00 00	sta $0000,y			sta 	$0000,y
.011049	c2 20		rep #$20			rep 	#$20
.01104b					_FUPNoChange:
.01104b	ca		dex				dex 								; do X times
.01104c	d0 e1		bne $01102f			bne 	_FUPLoop
.01104e					_FUPExit:
.01104e	fa		plx				plx 								; restore X
.01104f	60		rts				rts
.011050					Function_LOWER:
.011050	20 03 05	jsr $010503			jsr 	ResetTypeString 			; returns a string.
.011053	20 19 03	jsr $010319			jsr 	EvaluateNextString 			; evaluate a string.
.011056	48		pha				pha
.011057	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; close call.
.01105a	20 39 05	jsr $010539			jsr		StringTempAllocate 			; allocate memory for it
.01105d	68		pla				pla
.01105e	20 73 05	jsr $010573			jsr 	StringCreateCopy 			; create a copy of it.
.011061	a5 18		lda $18				lda 	DStartTempString 			; A = start of temporary string.
.011063	95 00		sta $00,x			sta 	EXSValueL+0,x
.011065	a8		tay				tay 								; address in Y
.011066	74 20		stz $20,x			stz 	EXSValueH+0,x
.011068	da		phx				phx 								; save X
.011069	b2 18		lda ($18)			lda 	(DStartTempString)			; get string length
.01106b	29 ff 00	and #$00ff			and 	#$00FF
.01106e	f0 20		beq $011090			beq 	_FLOExit
.011070	aa		tax				tax 								; put in X
.011071					_FLOLoop:
.011071	c8		iny				iny 								; increment and load character
.011072	b9 00 00	lda $0000,y			lda 	$0000,y
.011075	29 ff 00	and #$00ff			and 	#$00FF
.011078	c9 41 00	cmp #$0041			cmp 	#"A" 						; check range
.01107b	90 10		bcc $01108d			bcc 	_FLONoChange
.01107d	c9 5b 00	cmp #$005b			cmp 	#"Z"+1
.011080	b0 0b		bcs $01108d			bcs 	_FLONoChange
.011082	18		clc				clc 								; shift case
.011083	69 20 00	adc #$0020			adc 	#32
.011086	e2 20		sep #$20			sep 	#$20 						; write back
.011088	99 00 00	sta $0000,y			sta 	$0000,y
.01108b	c2 20		rep #$20			rep 	#$20
.01108d					_FLONoChange:
.01108d	ca		dex				dex 								; do X times
.01108e	d0 e1		bne $011071			bne 	_FLOLoop
.011090					_FLOExit:
.011090	fa		plx				plx 								; restore X
.011091	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/let.asm

.011092					Function_Let:
.011092	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011094	48		pha				pha  								; save on stack for later.
.011095	20 60 03	jsr $010360			jsr 	VariableFind 				; find the variable
.011098	85 1e		sta $1e				sta 	DVariablePtr 				; save where it is.
.01109a	b0 1c		bcs $0110b8			bcs 	_FLetFound 					; skip if found.
.01109c	68		pla				pla 								; get and push the first token again.
.01109d	48		pha				pha
.01109e	29 00 10	and #$1000			and 	#IDArrayMask 				; if it is an array, you can't autoinstantiate it, you have to DIM it.
.0110a1	d0 57		bne $0110fa			bne 	_FLError					; arrays, so this causes an error.
.0110a3	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0110a5	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array, just a single value.
.0110a8	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.0110ab	85 1e		sta $1e				sta 	DVariablePtr 				; save the data address.
.0110ad					_FLSkipToken:
.0110ad	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0110af	e6 06		inc $06				inc 	DCodePtr
.0110b1	e6 06		inc $06				inc 	DCodePtr
.0110b3	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0110b6	d0 f5		bne $0110ad			bne 	_FLSkipToken
.0110b8					_FLetFound:
.0110b8	68		pla				pla 								; get and save the first token.
.0110b9	48		pha				pha
.0110ba	a8		tay				tay 								; put it in Y
.0110bb	29 00 10	and #$1000			and 	#IDArrayMask				; is it an array ?
.0110be	f0 07		beq $0110c7			beq 	_FLetNotArray
.0110c0	a5 1e		lda $1e				lda 	DVariablePtr 				; variable pointer into A, first token in A
.0110c2	20 d7 03	jsr $0103d7			jsr 	VariableSubscript			; index calculation
.0110c5	85 1e		sta $1e				sta 	DVariablePtr 				; and write it back.
.0110c7					_FLetNotArray:
.0110c7	7a		ply				ply 								; get the first token into Y
.0110c8	a5 1e		lda $1e				lda 	DVariablePtr 				; save the target address on the stack.
.0110ca	48		pha				pha
.0110cb	5a		phy				phy 								; save the first token on the stack.
.0110cc	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check the = and skip it.
.0110cf	20 af 04	jsr $0104af			jsr 	ExpectToken
.0110d2	68		pla				pla 								; restore the first token.
.0110d3	29 00 20	and #$2000			and 	#IDTypeMask 				; check the type bit
.0110d6	d0 0f		bne $0110e7			bne 	_FLetString 				; skip if string.
.0110d8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; get an integer
.0110db	7a		ply				ply 								; get address in Y
.0110dc	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word.
.0110de	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0110e1	b5 20		lda $20,x			lda 	EXSValueH+0,x 				; get the high word.
.0110e3	99 02 00	sta $0002,y			sta 	$0002,y 					; save that
.0110e6	60		rts				rts
.0110e7					_FLetString:
.0110e7	20 00 03	jsr $010300			jsr 	EvaluateString 				; get a string.
.0110ea	b5 00		lda $00,x			lda 	EXSValueL+0,x				; get the low word, the address
.0110ec	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make a copy of it in permanent store.
.0110ef	7a		ply				ply 								; get address
.0110f0	99 00 00	sta $0000,y			sta 	$0000,y 					; save in variable low.
.0110f3	a9 00 00	lda #$0000			lda 	#$0000 						; clear variable high
.0110f6	99 02 00	sta $0002,y			sta 	$0002,y
.0110f9	60		rts				rts
.0110fa					_FLError:
.0110fa	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0110fd	55 6e 64 65 66 69 6e 65				.text 	"Undefined array",$00 								; with this message
>011105	64 20 61 72 72 61 79 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/list.asm

.01110d					Command_List:
.01110d	a9 ff 00	lda #$00ff		lda 	#255 							; create a buffer to use.
.011110	20 39 05	jsr $010539		jsr 	StringTempAllocate
.011113	85 30		sta $30			sta 	DListBuffer						; save buffer.
.011115	64 2c		stz $2c			stz 	DIndent 						; reset the indents
.011117	64 2e		stz $2e			stz 	DIndent2
.011119	64 32		stz $32			stz 	DTemp4+0 						; low number
.01111b	a9 ff 7f	lda #$7fff		lda 	#$7FFF
.01111e	85 34		sta $34			sta 	DTemp4+2 						; high number.
.011120	b2 06		lda ($06)		lda 	(DCodePtr)						; anything else ?
.011122	f0 28		beq $01114c		beq 	_CLIList
.011124	c9 25 32	cmp #$3225		cmp 	#colonTokenID
.011127	f0 23		beq $01114c		beq 	_CLIList
.011129	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; yes, first number
.01112c	c0 00 00	cpy #$0000		cpy 	#0
.01112f	d0 18		bne $011149		bne 	_CLIError
.011131	85 32		sta $32			sta 	DTemp4+0 						; which becomes the first and the last :)
.011133	85 34		sta $34			sta 	DTemp4+2
.011135	b2 06		lda ($06)		lda 	(DCodePtr) 						; , follows ?
.011137	c9 23 32	cmp #$3223		cmp 	#commaTokenID
.01113a	d0 10		bne $01114c		bne 	_CLIList
.01113c	20 d2 04	jsr $0104d2		jsr 	ExpectComma 					; skip comma
.01113f	20 fa 02	jsr $0102fa		jsr 	EvaluateNextInteger 			; get end line.
.011142	85 34		sta $34			sta 	DTemp4+2
.011144	c0 00 00	cpy #$0000		cpy 	#0 								; if legal continue.
.011147	f0 03		beq $01114c		beq 	_CLIList
.011149					_CLIError:
.011149	82 53 f3	brl $01049f		brl 	SyntaxError
.01114c					_CLIList:
.01114c	a9 00 02	lda #$0200		lda 	#Block_ProgramStart 			; work out program start.
.01114f	18		clc			clc
.011150	65 02		adc $02			adc 	DBaseAddress
.011152	a8		tay			tay 									; put in Y
.011153					_CLINextLine:
.011153	b9 00 00	lda $0000,y		lda 	$0000,y 						; check end of program
.011156	f0 29		beq $011181		beq 	_CLIExit
.011158	20 e9 12	jsr $0112e9		jsr 	ScanIndent  					; scan for formatting.
.01115b	b9 02 00	lda $0002,y		lda 	$0002,y 						; get line number.
.01115e	c5 32		cmp $32			cmp 	DTemp4+0 						; check if it is in range.
.011160	90 14		bcc $011176		bcc 	_CLIFollowLink
.011162	c5 34		cmp $34			cmp 	DTemp4+2
.011164	f0 02		beq $011168		beq 	_CLIShowLine
.011166	b0 0e		bcs $011176		bcs 	_CLIFollowLink
.011168					_CLIShowLine:
.011168	a5 30		lda $30			lda 	DListBuffer
.01116a	20 84 11	jsr $011184		jsr 	Detokenise 						; detokenise it
.01116d	5a		phy			phy
.01116e	a8		tay			tay 									; print buffer out
.01116f	20 1f 05	jsr $01051f		jsr 	PrintBasicString
.011172	20 a7 1a	jsr $011aa7		jsr 	HWNewLine
.011175	7a		ply			ply 									; get address
.011176					_CLIFollowLink:
.011176	98		tya			tya 									; follow link
.011177	18		clc			clc
.011178	79 00 00	adc $0000,y		adc 	$0000,y
.01117b	a8		tay			tay
.01117c	20 c3 1a	jsr $011ac3		jsr 	HWCheckBreak 					; break key pressed.
.01117f	f0 d2		beq $011153		beq 	_CLINextLine
.011181					_CLIExit:
.011181	64 2c		stz $2c			stz 	DIndent 						; reset the indent
.011183	60		rts			rts
.011184					Detokenise:
.011184	48		pha			pha
.011185	da		phx			phx
.011186	5a		phy			phy
.011187	85 18		sta $18			sta 	DStartTempString 				; set the temp function pointers to this buffer
.011189	1a		inc a			inc 	a
.01118a	85 1a		sta $1a			sta 	DCurrentTempString
.01118c	64 1c		stz $1c			stz		DConstantShift
.01118e	a9 00 00	lda #$0000		lda 	#$0000 							; write zero, clearing the string size.
.011191	92 18		sta ($18)		sta 	(DStartTempString)
.011193	5a		phy			phy 									; save Y
.011194	b9 02 00	lda $0002,y		lda 	$0002,y 						; read the line number.
.011197	a0 00 00	ldy #$0000		ldy 	#$0000 							; the high byte is 0
.01119a	a2 0a 00	ldx #$000a		ldx 	#10 							; in BASE 10.
.01119d	20 0a 0f	jsr $010f0a		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.0111a0	a5 2c		lda $2c			lda 	DIndent 						; work out indent, which is the smaller of this/last
.0111a2	c5 2e		cmp $2e			cmp 	DIndent2
.0111a4	90 02		bcc $0111a8		bcc 	_DTKSmaller
.0111a6	a5 2e		lda $2e			lda 	DIndent2
.0111a8					_DTKSmaller:
.0111a8	0a		asl a			asl 	a
.0111a9	69 06 00	adc #$0006		adc 	#6
.0111ac	85 08		sta $08			sta 	DTemp1
.0111ae					_DTKPadLineNo:
.0111ae	a9 20 00	lda #$0020		lda 	#32 							; pad out to 6+indent*2 characters.
.0111b1	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111b4	b2 18		lda ($18)		lda 	(DStartTempString)
.0111b6	29 ff 00	and #$00ff		and 	#$00FF
.0111b9	c5 08		cmp $08			cmp 	DTemp1
.0111bb	d0 f1		bne $0111ae		bne 	_DTKPadLineNo
.0111bd	68		pla			pla 									; get pointer
.0111be	18		clc			clc 									; point to start of line
.0111bf	69 04 00	adc #$0004		adc 	#4
.0111c2	a8		tay			tay 									; put back in Y.
.0111c3					_DTKMainLoop:
.0111c3	b9 00 00	lda $0000,y		lda 	$0000,y 						; look at first token.
.0111c6	d0 04		bne $0111cc		bne 	_DTKNotZero 					; if zero, return.
.0111c8	7a		ply			ply
.0111c9	fa		plx			plx
.0111ca	68		pla			pla
.0111cb	60		rts			rts
.0111cc					_DTKNotZero:
.0111cc	c9 00 01	cmp #$0100		cmp 	#$0100 							; is it a quoted string $0000-$00FF
.0111cf	b0 1c		bcs $0111ed		bcs 	_DTKNotString
.0111d1	5a		phy			phy										; save token address on stack.
.0111d2	c8		iny			iny 									; skip first token
.0111d3	c8		iny			iny
.0111d4	a9 22 00	lda #$0022		lda 	#34 							; write out opening quote
.0111d7	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111da	98		tya			tya 									; copy the string out.
.0111db	20 73 05	jsr $010573		jsr 	StringCreateCopy
.0111de	a9 22 00	lda #$0022		lda 	#34 							; write out closing quote
.0111e1	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0111e4	68		pla			pla 									; get token, which is its own offset
.0111e5	a8		tay			tay
.0111e6	18		clc			clc
.0111e7	79 00 00	adc $0000,y		adc 	$0000,y
.0111ea	a8		tay			tay
.0111eb	80 d6		bra $0111c3		bra 	_DTKMainLoop
.0111ed					_DTKNotString:
.0111ed	c9 00 20	cmp #$2000		cmp 	#$2000							; if $1000-$1FFF then constant shift
.0111f0	b0 09		bcs $0111fb		bcs 	_DTKNotShift
.0111f2	29 ff 0f	and #$0fff		and 	#$0FFF 							; store in shift
.0111f5	85 1c		sta $1c			sta 	DConstantShift
.0111f7	c8		iny			iny 									; skip token.
.0111f8	c8		iny			iny
.0111f9	80 c8		bra $0111c3		bra 	_DTKMainLoop
.0111fb					_DTKNotShift:
.0111fb	c9 00 40	cmp #$4000		cmp 	#$4000 							; if $2000-$3FFF it's a token.
.0111fe	b0 07		bcs $011207		bcs 	_DTKNotKeyword
.011200	c8		iny			iny 									; skip over token
.011201	c8		iny			iny
.011202	20 81 12	jsr $011281		jsr 	_DTKDecodeKeyword 				; decode it.
.011205	80 bc		bra $0111c3		bra 	_DTKMainLoop
.011207					_DTKNotKeyword:
.011207	c9 00 c0	cmp #$c000		cmp 	#$C000							; if $4000-$BFFF it's a (possibly shifted) constant.
.01120a	b0 18		bcs $011224		bcs 	_DTKIdentifier 					; if $C000-$CFFF it's an identifier.
.01120c	5a		phy			phy 									; save pointer
.01120d	38		sec			sec  									; shift it in the range 0-32767
.01120e	e9 00 40	sbc #$4000		sbc 	#$4000
.011211	0a		asl a			asl 	a 								; shift it left, losing bit 15
.011212	46 1c		lsr $1c			lsr 	DConstantShift 					; shift constant right into carry.
.011214	6a		ror a			ror 	a 								; rotate that into the constant value
.011215	a4 1c		ldy $1c			ldy 	DConstantShift 					; YA number
.011217	a2 0a 00	ldx #$000a		ldx 	#10 							; output base.
.01121a	20 0a 0f	jsr $010f0a		jsr 	ConvertToStringAlreadyAllocated	; convert to string in situ.
.01121d	64 1c		stz $1c			stz 	DConstantShift
.01121f	7a		ply			ply 									; restore pointer
.011220	c8		iny			iny 									; skip token.
.011221	c8		iny			iny
.011222	80 9f		bra $0111c3		bra 	_DTKMainLoop
.011224					_DTKIdentifier:
.011224	48		pha			pha 									; save token for typing at end
.011225					_DTKILoop:
.011225	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.011228	20 51 12	jsr $011251		jsr 	_DTKIDecodeToken 				; decode it.
.01122b	b9 00 00	lda $0000,y		lda 	$0000,y 						; get the token again
.01122e	c8		iny			iny 									; skip it
.01122f	c8		iny			iny
.011230	29 00 08	and #$0800		and 	#IDContMask 					; continuation ?
.011233	d0 f0		bne $011225		bne 	_DTKILoop
.011235	68		pla			pla 									; add $( as required.
.011236	48		pha			pha 									; comes from the first token.
.011237	29 00 20	and #$2000		and 	#IDTypeMask
.01123a	f0 06		beq $011242		beq 	_DTKINotString
.01123c	a9 24 00	lda #$0024		lda 	#"$"
.01123f	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011242					_DTKINotString:
.011242	68		pla			pla
.011243	29 00 10	and #$1000		and 	#IDArrayMask
.011246	f0 06		beq $01124e		beq 	_DTKINotArray
.011248	a9 28 00	lda #$0028		lda 	#"("
.01124b	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.01124e					_DTKINotArray:
.01124e	82 72 ff	brl $0111c3		brl 	_DTKMainLoop
.011251					_DTKIDecodeToken:
.011251	5a		phy			phy
.011252	29 ff 07	and #$07ff		and		#$07FF 							; mask off the identifier bit.
.011255	a0 ff ff	ldy #$ffff		ldy 	#-1 							; first, divide by 45 getting remainder.
.011258					_DTKIDivide:
.011258	38		sec			sec
.011259	e9 2d 00	sbc #$002d		sbc 	#45
.01125c	c8		iny			iny
.01125d	b0 f9		bcs $011258		bcs 	_DTKIDivide
.01125f	69 2d 00	adc #$002d		adc 	#45
.011262	20 6b 12	jsr $01126b		jsr 	_DTKIOutA 						; output low.
.011265	98		tya			tya
.011266	20 6b 12	jsr $01126b		jsr 	_DTKIOutA 						; output high
.011269	7a		ply			ply
.01126a	60		rts			rts
.01126b					_DTKIOutA:
.01126b	09 00 00	ora #$0000		ora 	#$0000 							; exit if 0
.01126e	f0 10		beq $011280		beq 	_DTKIOutExit
.011270	c9 1b 00	cmp #$001b		cmp 	#27 							; skip if A-Z
.011273	90 04		bcc $011279		bcc 	_DTKIOutAlpha
.011275	38		sec			sec  									; adjust for 0-9
.011276	e9 4b 00	sbc #$004b		sbc 	#$4B
.011279					_DTKIOutAlpha:
.011279	18		clc			clc										; adjust for A-Z
.01127a	69 60 00	adc #$0060		adc 	#96
.01127d	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.011280					_DTKIOutExit:
.011280	60		rts			rts
.011281					_DTKDecodeKeyword:
.011281	48		pha			pha
.011282	da		phx			phx
.011283	5a		phy			phy
.011284	a8		tay			tay 									; save token ID in Y
.011285	29 00 18	and #$1800		and 	#$1800 							; is it a keyword
.011288	49 00 18	eor #$1800		eor 	#$1800 							; now zero if it is.
.01128b	48		pha			pha 									; save this flag on a stack
.01128c	5a		phy			phy 									; save the token ID
.01128d	c9 00 00	cmp #$0000		cmp 	#0 								; check if spacing perhaps required.
.011290	d0 19		bne $0112ab		bne 	_DTKNotSpecial1
.011292	a4 1a		ldy $1a			ldy 	DCurrentTempString 				; what was the last character out ?
.011294	88		dey			dey
.011295	b9 00 00	lda $0000,y		lda 	$0000,y
.011298	29 ff 00	and #$00ff		and 	#$00FF
.01129b	c9 20 00	cmp #$0020		cmp 	#" " 							; if space or colon, not needed/
.01129e	f0 0b		beq $0112ab		beq 	_DTKNotSpecial1
.0112a0	c9 3a 00	cmp #$003a		cmp 	#":"
.0112a3	f0 06		beq $0112ab		beq 	_DTKNotSpecial1
.0112a5	a9 20 00	lda #$0020		lda 	#" "							; output space otherwise.
.0112a8	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0112ab					_DTKNotSpecial1:
.0112ab	68		pla			pla
.0112ac	29 ff 01	and #$01ff		and 	#$01FF 							; this is the keyword number.
.0112af	a8		tay			tay 									; into Y.
.0112b0	a2 00 00	ldx #$0000		ldx 	#0 								; offset into the ROM table, token text
.0112b3					_DTKDWorkThrough:
.0112b3	88		dey			dey 									; reached the token (tokens start at 1 in text table)
.0112b4	f0 0f		beq $0112c5		beq 	_DTKDFound
.0112b6	86 08		stx $08			stx 	DTemp1
.0112b8	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; read the type/skip byte.
.0112bc	29 0f 00	and #$000f		and 	#$000F 							; bytes to skip
.0112bf	18		clc			clc
.0112c0	65 08		adc $08			adc 	DTemp1
.0112c2	aa		tax			tax
.0112c3	80 ee		bra $0112b3		bra 	_DTKDWorkThrough
.0112c5					_DTKDFound:
.0112c5	bf 92 00 01	lda $010092,x		lda 	TokenText,x 					; get skip
.0112c9	29 0f 00	and #$000f		and 	#$000F 					 		; length is skip -1
.0112cc	3a		dec a			dec 	a
.0112cd	a8		tay			tay 									; put in Y
.0112ce					_DTKOut:
.0112ce	bf 93 00 01	lda $010093,x		lda 	TokenText+1,x 					; output it.
.0112d2	29 ff 00	and #$00ff		and 	#$00FF
.0112d5	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0112d8	e8		inx			inx
.0112d9	88		dey			dey
.0112da	d0 f2		bne $0112ce		bne 	_DTKOut
.0112dc	68		pla			pla 									; trailing space.
.0112dd	d0 06		bne $0112e5		bne 	_DTKNotSpecial2
.0112df	a9 20 00	lda #$0020		lda 	#" "
.0112e2	20 65 05	jsr $010565		jsr 	StringWriteCharacter
.0112e5					_DTKNotSpecial2:
.0112e5	7a		ply			ply
.0112e6	fa		plx			plx
.0112e7	68		pla			pla
.0112e8	60		rts			rts
.0112e9					ScanIndent:
.0112e9	48		pha			pha
.0112ea	5a		phy			phy
.0112eb	a5 2c		lda $2c			lda 	DIndent  						; save the old indentation
.0112ed	85 2e		sta $2e			sta 	DIndent2
.0112ef	98		tya			tya
.0112f0	18		clc			clc 									; point to code.
.0112f1	69 04 00	adc #$0004		adc 	#4
.0112f4	a8		tay			tay
.0112f5					_SILoop:
.0112f5	b9 00 00	lda $0000,y		lda 	$0000,y 						; get token
.0112f8	f0 35		beq $01132f		beq 	_SIExit
.0112fa	c9 00 01	cmp #$0100		cmp 	#$0100							; is it a string ?
.0112fd	b0 08		bcs $011307		bcs 	_SICheckKeyword
.0112ff	98		tya			tya 									; skip string.
.011300	18		clc			clc
.011301	79 00 00	adc $0000,y		adc 	$0000,y
.011304	a8		tay			tay
.011305	80 ee		bra $0112f5		bra 	_SILoop
.011307					_SICheckKeyword:
.011307	29 00 e0	and #$e000		and 	#$E000
.01130a	c9 00 20	cmp #$2000		cmp 	#$2000
.01130d	f0 04		beq $011313		beq 	_SIFoundKeyword
.01130f					_SIAdvance:
.01130f	c8		iny			iny 									; if not, loop round.
.011310	c8		iny			iny
.011311	80 e2		bra $0112f5		bra 	_SILoop
.011313					_SIFoundKeyword:
.011313	b9 00 00	lda $0000,y		lda 	$0000,y 						; get keyword
.011316	29 00 1e	and #$1e00		and 	#15<<9							; extract type
.011319	c9 00 1c	cmp #$1c00		cmp 	#14<<9
.01131c	f0 0d		beq $01132b		beq 	_SIKeyPlus
.01131e	c9 00 1a	cmp #$1a00		cmp 	#13<<9 							; and adjust DIndent appropriately.
.011321	d0 ec		bne $01130f		bne 	_SIAdvance
.011323	c6 2c		dec $2c			dec 	DIndent
.011325	10 e8		bpl $01130f		bpl 	_SIAdvance
.011327	64 2c		stz $2c			stz 	DIndent
.011329	80 e4		bra $01130f		bra 	_SIAdvance
.01132b					_SIKeyPlus:
.01132b	e6 2c		inc $2c			inc 	DIndent
.01132d	80 e0		bra $01130f		bra 	_SIAdvance
.01132f					_SIExit:
.01132f	7a		ply			ply
.011330	68		pla			pla
.011331	60		rts			rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/print.asm

.011332					Function_PRINT:
.011332	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at first characteer
.011334	f0 33		beq $011369			beq 	_FPRExitCR 					; if zero, then exit with CR, maybe.
.011336	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; likewise if a colon.
.011339	f0 2e		beq $011369			beq 	_FPRExitCR
.01133b	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID 			; semicolon, skip it
.01133e	f0 23		beq $011363			beq 	_FPRSkipLoop
.011340	c9 28 32	cmp #$3228			cmp 	#squoteTokenID 				; single quote is CR
.011343	f0 1b		beq $011360			beq 	_FPRNewLine
.011345	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; , is tab.
.011348	f0 11		beq $01135b			beq 	_FPRTab
.01134a					_FPRExpression:
.01134a	20 d3 01	jsr $0101d3			jsr 	Evaluate 					; evaluate a string or integer.
.01134d	b0 06		bcs $011355			bcs 	_FPRHaveString
.01134f	a2 0a 00	ldx #$000a			ldx 	#10 						; convert to string
.011352	20 02 0f	jsr $010f02			jsr 	ConvertToString
.011355					_FPRHaveString:
.011355	a8		tay				tay 								; print the basic String.
.011356	20 1f 05	jsr $01051f			jsr 	PrintBASICString
.011359	80 d7		bra $011332			bra 	Function_Print 				; and go round again.
.01135b					_FPRTab:
.01135b	20 bc 1a	jsr $011abc			jsr 	HWTab
.01135e	80 03		bra $011363			bra 	_FPRSkipLoop
.011360					_FPRNewLine:
.011360	20 a7 1a	jsr $011aa7			jsr 	HWNewLine
.011363					_FPRSkipLoop:
.011363	e6 06		inc $06				inc 	DCodePtr
.011365	e6 06		inc $06				inc 	DCodePtr
.011367	80 c9		bra $011332			bra 	Function_Print
.011369					_FPRExitCR:
.011369	a4 06		ldy $06				ldy 	DCodePtr 					; was the previous token a ; or ,
.01136b	88		dey				dey
.01136c	88		dey				dey
.01136d	b9 00 00	lda $0000,y			lda 	$0000,y
.011370	c9 23 32	cmp #$3223			cmp 	#commaTokenID 	 			; if so, don't do a new line at the end of the instruction.
.011373	f0 08		beq $01137d			beq 	_FPRExit
.011375	c9 24 32	cmp #$3224			cmp 	#semicolonTokenID
.011378	f0 03		beq $01137d			beq 	_FPRExit
.01137a	20 a7 1a	jsr $011aa7			jsr 	HWNewLine 					; print a new line.
.01137d					_FPRExit:
.01137d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/if.asm

.01137e					Function_IF:
.01137e	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; check success.
.011381	84 08		sty $08				sty 	DTemp1 						; work out if non-zero
.011383	05 08		ora $08				ora 	DTemp1
.011385	a8		tay				tay 								; success flag in Y.
.011386	b2 06		lda ($06)			lda 	(DCodePtr) 					; does THEN follow
.011388	c9 46 3a	cmp #$3a46			cmp 	#thenTokenID
.01138b	d0 32		bne $0113bf			bne 	_FIFExtended 				; if so, go to the extended IF.
.01138d	e6 06		inc $06				inc 	DCodePtr 					; skip over THEN token.
.01138f	e6 06		inc $06				inc 	DCodePtr
.011391	c0 00 00	cpy #$0000			cpy 	#0 							; was it successful.
.011394	f0 0f		beq $0113a5			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.011396	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if there is a number there.
.011398	c9 00 40	cmp #$4000			cmp 	#$4000 						; is it a numeric constant.
.01139b	90 21		bcc $0113be			bcc 	_FIFContinue 				; if not, just carry on exiting.
.01139d	c9 00 c0	cmp #$c000			cmp 	#$C000
.0113a0	b0 1c		bcs $0113be			bcs 	_FIFContinue
.0113a2	4c 34 16	jmp $011634			jmp		Function_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.0113a5					_FIFEndOfLine:
.0113a5	b2 06		lda ($06)			lda 	(DCodePtr) 					; reached the end of the line.
.0113a7	f0 15		beq $0113be			beq 	_FIFContinue 				; if done so, continue.
.0113a9	c9 00 01	cmp #$0100			cmp 	#$0100	 					; string constant ?
.0113ac	90 06		bcc $0113b4			bcc 	_FIFStringConstant
.0113ae	e6 06		inc $06				inc 	DCodePtr 					; if not, just skip the token
.0113b0	e6 06		inc $06				inc 	DCodePtr
.0113b2	80 f1		bra $0113a5			bra 	_FIFEndOfLine
.0113b4					_FIFStringConstant:
.0113b4	29 ff 00	and #$00ff			and 	#$00FF 						; add to CodePtr to skip string.
.0113b7	18		clc				clc
.0113b8	65 06		adc $06				adc 	DCodePtr
.0113ba	85 06		sta $06				sta 	DCodePtr
.0113bc	80 e7		bra $0113a5			bra 	_FIFEndOfLine
.0113be					_FIFContinue:
.0113be	60		rts				rts
.0113bf					_FIFExtended:
.0113bf	e6 2a		inc $2a				inc 	DStack 						; put IF on the top of the stack
.0113c1	e6 2a		inc $2a				inc 	DStack
.0113c3	a9 42 3c	lda #$3c42			lda 	#ifTokenID
.0113c6	a6 2a		ldx $2a				ldx 	DStack
.0113c8	95 00		sta $00,x			sta 	$00,x
.0113ca	98		tya				tya 								; see if the test was passed.
.0113cb	f0 01		beq $0113ce			beq 	_FIXSkip 					; if zero then it has failed.
.0113cd	60		rts				rts 								; test passed, so continue executing
.0113ce					_FIXSkip:
.0113ce	a9 3a 3e	lda #$3e3a			lda 	#elseTokenID 				; scan forward till found either ELSE or ENDIF
.0113d1	a2 47 3a	ldx #$3a47			ldx 	#endifTokenID 				; at the same level.
.0113d4	20 34 14	jsr $011434			jsr 	ScanForwardLevel 			; scan forward, returns what found in A.
.0113d7	e6 06		inc $06				inc 	DCodePtr 					; skip over the ELSE or ENDIF
.0113d9	e6 06		inc $06				inc 	DCodePtr
.0113db	c9 47 3a	cmp #$3a47			cmp 	#endifTokenID 				; if ENDIF token ID, then throw the TOS as ended
.0113de	d0 04		bne $0113e4			bne 	_FIXNoThrow
.0113e0	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0113e2	c6 2a		dec $2a				dec 	DStack
.0113e4					_FIXNoThrow:
.0113e4	60		rts				rts
.0113e5					Handler_ELSE:
.0113e5	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.0113e7	b5 00		lda $00,x			lda 	$00,x
.0113e9	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.0113ec	d0 12		bne $011400			bne 	_HEBadStructure
.0113ee	a9 47 3a	lda #$3a47			lda 	#endifTokenID 				; only searching one token.
.0113f1	a2 00 00	ldx #$0000			ldx 	#$0000
.0113f4	20 34 14	jsr $011434			jsr 	ScanForwardLevel 			; so this will find the ENDIF
.0113f7	e6 06		inc $06				inc 	DCodePtr 					; skip over the ENDIF
.0113f9	e6 06		inc $06				inc 	DCodePtr
.0113fb	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.0113fd	c6 2a		dec $2a				dec 	DStack
.0113ff	60		rts				rts
.011400					_HEBadStructure:
.011400	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011403	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01140b	68 6f 75 74 20 49 66 00
.011413					Handler_ENDIF:
.011413	a6 2a		ldx $2a				ldx 	DStack	 					; check the top of stack is IF.
.011415	b5 00		lda $00,x			lda 	$00,x
.011417	c9 42 3c	cmp #$3c42			cmp 	#ifTokenID
.01141a	d0 05		bne $011421			bne 	_HEIBadStructure
.01141c	c6 2a		dec $2a				dec 	DStack 						; throw the token IF on the stack top.
.01141e	c6 2a		dec $2a				dec 	DStack
.011420	60		rts				rts
.011421					_HEIBadStructure:
.011421	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011424	45 6c 73 65 20 77 69 74				.text 	"Else without If",$00 								; with this message
>01142c	68 6f 75 74 20 49 66 00
.011434					ScanForwardLevel:
.011434	85 08		sta $08				sta 	DTemp1 						; save test in DTemp1 and DTemp1+2
.011436	86 0a		stx $0a				stx 	DTemp1+2
.011438	a5 22		lda $22				lda 	DLineNumber 				; save original line number for error
.01143a	85 0c		sta $0c				sta 	DTemp2
.01143c	a2 00 00	ldx #$0000			ldx 	#0 							; X is the level counter.
.01143f					_SFLLoop:
.01143f	e0 00 00	cpx #$0000			cpx 	#0 							; if X != 0 then don't test tokens for exit.
.011442	d0 0d		bne $011451			bne 	_SFLNoCheck 				; we're in a substructure.
.011444	b2 06		lda ($06)			lda 	(DCodePtr)					; what's there
.011446	f0 09		beq $011451			beq 	_SFLNoCheck 				; don't check zero
.011448	c5 08		cmp $08				cmp 	DTemp1 						; does it match either token ?
.01144a	f0 04		beq $011450			beq 	_SFLFound
.01144c	c5 0a		cmp $0a				cmp 	DTemp1+2
.01144e	d0 01		bne $011451			bne 	_SFLNoCheck
.011450					_SFLFound:
.011450	60		rts				rts
.011451					_SFLNoCheck:
.011451	b2 06		lda ($06)			lda 	(DCodePtr) 					; what is the token.
.011453	f0 4f		beq $0114a4			beq 	_SFLNextLine 				; if $0000 go to the next line (end of line marker)
.011455	c9 00 01	cmp #$0100			cmp 	#$0100 						; is it a string.
.011458	90 40		bcc $01149a			bcc 	_SFLSkipString 				; then handle that.
.01145a	e6 06		inc $06				inc 	DCodePtr 					; skip over the token
.01145c	e6 06		inc $06				inc 	DCodePtr
.01145e	a8		tay				tay 								; put token in Y temporarily.
.01145f	29 00 e0	and #$e000			and 	#$E000 						; if not a keyword 010x xxxx xxxx xxxx
.011462	c9 00 20	cmp #$2000			cmp 	#$2000
.011465	d0 d8		bne $01143f			bne 	_SFLLoop
.011467	98		tya				tya 								; get the token back.
.011468	29 00 1e	and #$1e00			and 	#15 << 9 					; get out token type xxxA AAAx xxxx xxxx
.01146b	c9 00 1e	cmp #$1e00			cmp 	#15 << 9 					; 15 is a standard keyword
.01146e	f0 cf		beq $01143f			beq 	_SFLLoop
.011470	c9 00 1a	cmp #$1a00			cmp 	#13 << 9 					; < 13 is also standard
.011473	90 ca		bcc $01143f			bcc 	_SFLLoop
.011475	e8		inx				inx 								; increment the level.
.011476	c9 00 1c	cmp #$1c00			cmp 	#14 << 9 					; if keyword +, loop back.
.011479	f0 c4		beq $01143f			beq 	_SFLLoop
.01147b	ca		dex				dex 								; decrement the level
.01147c	ca		dex				dex 								; one overdoes the previous inx.
.01147d	10 c0		bpl $01143f			bpl 	_SFLLoop 					; if gone -ve then error.
.01147f					_SFLError:
.01147f	a5 0c		lda $0c				lda 	DTemp2 						; get original line number
.011481	85 22		sta $22				sta 	DLineNumber
.011483	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011486	53 74 72 75 63 74 75 72				.text 	"Structure imbalance",$00 								; with this message
>01148e	65 20 69 6d 62 61 6c 61 6e 63 65 00
.01149a					_SFLSkipString:
.01149a	29 ff 00	and #$00ff			and 	#$00FF 						; token length of string
.01149d	18		clc				clc
.01149e	65 06		adc $06				adc 	DCodePtr 					; add to code pointer and save out
.0114a0	85 06		sta $06				sta 	DCodePtr
.0114a2	80 9b		bra $01143f			bra 	_SFLLoop 					; go round again.
.0114a4					_SFLNextLine:
.0114a4	a4 06		ldy $06				ldy 	DCodePtr 					; put code pointer into Y
.0114a6	b9 02 00	lda $0002,y			lda 	$0002,y 					; look at the link for the next line.
.0114a9	f0 d4		beq $01147f			beq 	_SFLError 					; if zero, then there's no more code to search.
.0114ab	b9 04 00	lda $0004,y			lda 	$0004,y 					; update the line number so it's still correct.
.0114ae	85 22		sta $22				sta 	DLineNumber
.0114b0	18		clc				clc
.0114b1	a5 06		lda $06				lda 	DCodePtr
.0114b3	69 06 00	adc #$0006			adc 	#6 							; skip $00 marker, link, new line
.0114b6	85 06		sta $06				sta 	DCodePtr
.0114b8	80 85		bra $01143f			bra 	_SFLLoop 					; and start this one.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/for.asm

.0114ba					Command_FOR:
.0114ba	b2 06		lda ($06)			lda 	(DCodePtr)					; look at first word
.0114bc	29 00 30	and #$3000			and 	#(IDTypeMask+IDArrayMask)	; check to see if it is type $00 e.g. integer variable
.0114bf	d0 60		bne $011521			bne		_CFOBad
.0114c1	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find variable
.0114c4	b0 15		bcs $0114db			bcs 	_CFOExists
.0114c6	a4 06		ldy $06				ldy 	DCodePtr 					; Y is the address of the name
.0114c8	a9 00 00	lda #$0000			lda 	#0 							; A = 0 because it's not an array.
.0114cb	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create it.
.0114ce	48		pha				pha 								; save on stack
.0114cf					_CFOSkipToken:
.0114cf	b2 06		lda ($06)			lda 	(DCodePtr) 					; skip over the token
.0114d1	e6 06		inc $06				inc 	DCodePtr
.0114d3	e6 06		inc $06				inc 	DCodePtr
.0114d5	29 00 08	and #$0800			and 	#IDContMask 				; if there is a continuation
.0114d8	d0 f5		bne $0114cf			bne 	_CFOSkipToken
.0114da	68		pla				pla 								; restore address
.0114db					_CFOExists:
.0114db	48		pha				pha 								; push variable address on stack
.0114dc	a9 06 22	lda #$2206			lda 	#equalTokenID 				; check for =
.0114df	20 af 04	jsr $0104af			jsr 	ExpectToken
.0114e2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the start value
.0114e5	bb		tyx				tyx 								; put high value in X
.0114e6	7a		ply				ply 								; address in Y
.0114e7	99 00 00	sta $0000,y			sta 	$0000,y
.0114ea	8a		txa				txa
.0114eb	99 02 00	sta $0002,y			sta 	$0002,y
.0114ee	a9 29 38	lda #$3829			lda 	#toTokenID 					; expect the TO
.0114f1	20 af 04	jsr $0104af			jsr 	ExpectToken
.0114f4	a6 2a		ldx $2a				ldx 	DStack 						; get the stack.
.0114f6	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +2 (after "TO")
.0114f8	95 02		sta $02,x			sta 	$02,x
.0114fa	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0114fc	95 04		sta $04,x			sta 	$04,x
.0114fe	98		tya				tya 								; save variable address at +6
.0114ff	95 06		sta $06,x			sta 	$06,x
.011501	a9 43 3c	lda #$3c43			lda 	#forTokenID 				; save for token at +8
.011504	95 08		sta $08,x			sta 	$08,x
.011506	8a		txa				txa 								; add 8 to stack position
.011507	18		clc				clc
.011508	69 08 00	adc #$0008			adc 	#8
.01150b	85 2a		sta $2a				sta 	DStack
.01150d	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; the end value, which we don't want this time.
.011510	b2 06		lda ($06)			lda 	(DCodePtr)
.011512	c9 2a 38	cmp #$382a			cmp 	#stepTokenID 				; if STEP x is present.
.011515	d0 09		bne $011520			bne 	_CFONoStep
.011517	a9 2a 38	lda #$382a			lda 	#stepTokenID 				; skip STEP
.01151a	20 af 04	jsr $0104af			jsr 	ExpectToken
.01151d	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; and whatever the step is.
.011520					_CFONoStep:
.011520	60		rts				rts
.011521					_CFOBad:
.011521	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011524	42 61 64 20 46 4f 52 20				.text 	"Bad FOR variable",$00 								; with this message
>01152c	76 61 72 69 61 62 6c 65 00
.011535					Command_NEXT:
.011535	a6 2a		ldx $2a				ldx 	DStack 						; look at TOS
.011537	b5 00		lda $00,x			lda 	$00,x
.011539	c9 43 3c	cmp #$3c43			cmp 	#forTokenID 				; if not FOR then error
.01153c	f0 14		beq $011552			beq 	_CNXOk
.01153e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011541	4e 65 78 74 20 77 69 74				.text 	"Next without For",$00 								; with this message
>011549	68 6f 75 74 20 46 6f 72 00
.011552					_CNXOk:
.011552	b2 06		lda ($06)			lda 	(DCodePtr)					; if there's an identifier here.
.011554	c9 00 c0	cmp #$c000			cmp 	#$C000 						; e.g. NEXT <var>
.011557	90 22		bcc $01157b			bcc 	_CNXNoVariable
.011559	20 60 03	jsr $010360			jsr 	VariableFind 				; get address of variable.
.01155c	90 08		bcc $011566			bcc 	_CNXNextVar 				; not found variable, it's an error.
.01155e	a6 2a		ldx $2a				ldx 	DStack 						; point X to variable address
.011560	ca		dex				dex
.011561	ca		dex				dex
.011562	d5 00		cmp $00,x			cmp 	$00,x 						; same variable as the found one.
.011564	f0 15		beq $01157b			beq 	_CNXNoVariable 				; then continue
.011566					_CNXNextVar:
.011566	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011569	42 61 64 20 4e 45 58 54				.text 	"Bad NEXT variable",$00 								; with this message
>011571	20 76 61 72 69 61 62 6c 65 00
.01157b					_CNXNoVariable:
.01157b	a5 06		lda $06				lda 	DCodePtr 					; save the following position on the stack in case we are done.
.01157d	48		pha				pha
.01157e	a5 2a		lda $2a				lda 	DStack 						; subtract 8 from stack
.011580	38		sec				sec
.011581	e9 08 00	sbc #$0008			sbc 	#8
.011584	85 2a		sta $2a				sta 	DStack
.011586	aa		tax				tax 								; X points to the stack.
.011587	b5 02		lda $02,x			lda 	$02,x 						; put the old pointer in the pointer (e.g. after TO)
.011589	85 06		sta $06				sta 	DCodePtr
.01158b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; this is the target constant
.01158e	5a		phy				phy 								; save the target on the stack
.01158f	48		pha				pha
.011590	a9 01 00	lda #$0001			lda 	#1 							; set DTemp1 (the count) to 1
.011593	85 08		sta $08				sta 	DTemp1
.011595	64 0a		stz $0a				stz 	DTemp1+2
.011597	b2 06		lda ($06)			lda 	(DCodePtr)					; does a STEP follow.
.011599	c9 2a 38	cmp #$382a			cmp 	#stepTokenID
.01159c	d0 0b		bne $0115a9			bne 	_CNXNoStep
.01159e	e6 06		inc $06				inc 	DCodePtr 					; skip over the step
.0115a0	e6 06		inc $06				inc 	DCodePtr
.0115a2	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; work out the step.
.0115a5	85 08		sta $08				sta 	DTemp1 						; and save in DTemp1
.0115a7	84 0a		sty $0a				sty 	DTemp1+2
.0115a9					_CNXNoStep:
.0115a9	68		pla				pla 								; save the Target in DTemp2
.0115aa	85 0c		sta $0c				sta 	DTemp2
.0115ac	68		pla				pla
.0115ad	85 0e		sta $0e				sta 	DTemp2+2
.0115af	a6 2a		ldx $2a				ldx 	DStack 						; get the stack
.0115b1	b5 06		lda $06,x			lda 	$06,x 						; address of variable into Y
.0115b3	a8		tay				tay
.0115b4	18		clc				clc
.0115b5	b9 00 00	lda $0000,y			lda 	$0000,y 					; add the step (DTemp1) to the target
.0115b8	65 08		adc $08				adc 	DTemp1
.0115ba	99 00 00	sta $0000,y			sta 	$0000,y
.0115bd	b9 02 00	lda $0002,y			lda 	$0002,y
.0115c0	65 0a		adc $0a				adc 	DTemp1+2
.0115c2	99 02 00	sta $0002,y			sta 	$0002,y
.0115c5	38		sec				sec
.0115c6	a5 0c		lda $0c				lda 	DTemp2
.0115c8	f9 00 00	sbc $0000,y			sbc 	$0000,y
.0115cb	85 0c		sta $0c				sta 	DTemp2
.0115cd	a5 0e		lda $0e				lda 	DTemp2+2
.0115cf	f9 02 00	sbc $0002,y			sbc 	$0002,y
.0115d2	85 0e		sta $0e				sta 	DTemp2+2
.0115d4	05 0c		ora $0c				ora 	DTemp2 						; if zero (Target = Result)
.0115d6	f0 0a		beq $0115e2			beq 	_CNXLoopAgain 				; then loop again, as we have to be past the target.
.0115d8	a5 0e		lda $0e				lda 	DTemp2+2 					; if sign(target-counter) == sign(step)
.0115da	45 0a		eor $0a				eor 	DTemp1+2
.0115dc	10 04		bpl $0115e2			bpl		_CNXLoopAgain 				; we aren't there yet, so loop again.
.0115de	68		pla				pla 								; restore the original DCodePtr as we are exiting the structure
.0115df	85 06		sta $06				sta 	DCodePtr
.0115e1	60		rts				rts
.0115e2					_CNXLoopAgain:
.0115e2	68		pla				pla 								; throw the original DCodePtr as we're going back.
.0115e3	18		clc				clc
.0115e4	a5 2a		lda $2a				lda 	DStack 						; fix the stack back so we can loop round again.
.0115e6	aa		tax				tax
.0115e7	69 08 00	adc #$0008			adc 	#8
.0115ea	85 2a		sta $2a				sta 	DStack
.0115ec	b5 04		lda $04,x			lda		$04,x 						; because we've jumped to the top, get the line number
.0115ee	85 22		sta $22				sta 	DLineNumber
.0115f0	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/transfer.asm

.0115f1					Function_ONGOTO:
.0115f1	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; on what GOTO :)
.0115f4	c0 00 00	cpy #$0000			cpy 	#0 							; check range. ON x GOTO x1,x2,x3,x4. 0 is illegal.
.0115f7	d0 25		bne $01161e			bne 	_FOGoFail
.0115f9	c9 00 00	cmp #$0000			cmp 	#0
.0115fc	f0 20		beq $01161e			beq 	_FOGoFail 					; we start with index = 1
.0115fe	48		pha				pha 								; save count on stack
.0115ff	a9 36 3e	lda #$3e36			lda 	#gotoTokenID 				; expect GOTO
.011602	20 af 04	jsr $0104af			jsr 	ExpectToken
.011605	fa		plx				plx 								; put count in X.
.011606					_FOGoLoop:
.011606	b2 06		lda ($06)			lda 	(DCodePtr) 					; check the next value is a constant.
.011608	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.01160b	90 73		bcc $011680			bcc 	FGOFail 					; if not, then we have an error.
.01160d	c9 00 c0	cmp #$c000			cmp 	#$C000
.011610	b0 6e		bcs $011680			bcs 	FGOFail
.011612	ca		dex				dex 								; subtract one, if done, call GOTO code
.011613	f0 1f		beq $011634			beq 	Function_GOTO
.011615	e6 06		inc $06				inc 	DCodePtr 					; step over the constant
.011617	e6 06		inc $06				inc 	DCodePtr
.011619	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; expect a comma
.01161c	80 e8		bra $011606			bra 	_FOGoLoop 					; and loop round.
.01161e					_FOGoFail:
.01161e	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011621	42 61 64 20 4f 6e 2e 2e				.text 	"Bad On..Goto value",$00 								; with this message
>011629	47 6f 74 6f 20 76 61 6c 75 65 00
.011634					Function_GOTO:
.011634	b2 06		lda ($06)			lda 	(DCodePtr) 					; look at the number
.011636	c9 00 40	cmp #$4000			cmp 	#$4000						; range 4000-BFFF
.011639	90 45		bcc $011680			bcc 	FGOFail 					; we don't do calculate line numbers.
.01163b	c9 00 c0	cmp #$c000			cmp 	#$C000
.01163e	b0 40		bcs $011680			bcs 	FGOFail
.011640	38		sec				sec 								; convert to 0-32767
.011641	e9 00 40	sbc #$4000			sbc 	#$4000 						; and put in X.
.011644	aa		tax				tax
.011645	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; start of program offset
.011648	18		clc				clc
.011649	65 02		adc $02				adc 	DBaseAddress 				; now an address into Y
.01164b	a8		tay				tay
.01164c					_FGOSearch:
.01164c	b9 00 00	lda $0000,y			lda 	$0000,y 					; look at link , exit if zero, reached end of program.
.01164f	f0 18		beq $011669			beq 	_FGOUnknown
.011651	8a		txa				txa 								; does it match line number ?
.011652	d9 02 00	cmp $0002,y			cmp 	$0002,y
.011655	f0 08		beq $01165f			beq 	_FGOFound 					; yes, then found.
.011657	98		tya				tya 								; no follow the link
.011658	18		clc				clc
.011659	79 00 00	adc $0000,y			adc 	$0000,y 					; add offset to address
.01165c	a8		tay				tay
.01165d	80 ed		bra $01164c			bra 	_FGOSearch 					; and keep looking
.01165f					_FGOFound:
.01165f	85 22		sta $22				sta 	DLineNumber 				; store as new line number
.011661	98		tya				tya 								; Y + 4 is the code pointer.
.011662	18		clc				clc 								; (skipping link and line #)
.011663	69 04 00	adc #$0004			adc 	#4
.011666	85 06		sta $06				sta 	DCodePtr
.011668	60		rts				rts									; and continue
.011669					_FGOUnknown:
.011669	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01166c	55 6e 6b 6e 6f 77 6e 20				.text 	"Unknown Line Number",$00 								; with this message
>011674	4c 69 6e 65 20 4e 75 6d 62 65 72 00
.011680					FGOFail:
.011680	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011683	42 61 64 20 4c 69 6e 65				.text 	"Bad Line Number",$00 								; with this message
>01168b	20 4e 75 6d 62 65 72 00
.011693					Function_GOSUB:
.011693	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011695	a5 06		lda $06				lda 	DCodePtr 					; save code ptr at +0 , 2 added to skip line number
.011697	18		clc				clc
.011698	69 02 00	adc #$0002			adc 	#2
.01169b	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.01169d	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.01169f	95 04		sta $04,x			sta 	$04,x
.0116a1	a9 37 3e	lda #$3e37			lda 	#gosubTokenID 				; save gosub token at +6
.0116a4	95 06		sta $06,x			sta 	$06,x
.0116a6	8a		txa				txa 								; advance stack by 6.
.0116a7	18		clc				clc
.0116a8	69 06 00	adc #$0006			adc 	#6
.0116ab	85 2a		sta $2a				sta 	DStack
.0116ad	80 85		bra $011634			bra 	Function_GOTO 				; and do a GOTO.
.0116af					Function_RETURN:
.0116af	a6 2a		ldx $2a				ldx 	DStack
.0116b1	b5 00		lda $00,x			lda 	$00,x
.0116b3	c9 37 3e	cmp #$3e37			cmp 	#gosubTokenID 				; check top token.
.0116b6	d0 11		bne $0116c9			bne 	_FRetFail
.0116b8	8a		txa				txa 								; unpick stack.
.0116b9	38		sec				sec
.0116ba	e9 06 00	sbc #$0006			sbc 	#6
.0116bd	85 2a		sta $2a				sta 	DStack
.0116bf	aa		tax				tax
.0116c0	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.0116c2	85 06		sta $06				sta 	DCodePtr
.0116c4	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.0116c6	85 22		sta $22				sta 	DLineNumber
.0116c8	60		rts				rts
.0116c9					_FRetFail:
.0116c9	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0116cc	52 65 74 75 72 6e 20 77				.text 	"Return without Gosub",$00 								; with this message
>0116d4	69 74 68 6f 75 74 20 47 6f 73 75 62 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/repeat.asm

.0116e1					Function_REPEAT:
.0116e1	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.0116e3	a5 06		lda $06				lda 	DCodePtr 					; save code ptr
.0116e5	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.0116e7	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.0116e9	95 04		sta $04,x			sta 	$04,x
.0116eb	a9 40 3c	lda #$3c40			lda 	#repeatTokenID 				; save repeat token at +6
.0116ee	95 06		sta $06,x			sta 	$06,x
.0116f0	8a		txa				txa 								; advance stack by 6.
.0116f1	18		clc				clc
.0116f2	69 06 00	adc #$0006			adc 	#6
.0116f5	85 2a		sta $2a				sta 	DStack
.0116f7	60		rts				rts
.0116f8					Function_UNTIL:
.0116f8	a6 2a		ldx $2a				ldx 	DStack 						; check top token is REPEAT
.0116fa	b5 00		lda $00,x			lda 	$00,x
.0116fc	c9 40 3c	cmp #$3c40			cmp 	#repeatTokenID
.0116ff	d0 26		bne $011727			bne 	_FUNFail
.011701	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; .... until what.
.011704	c0 00 00	cpy #$0000			cpy 	#0 							; exit if non-zero
.011707	d0 15		bne $01171e			bne 	_FUNExit
.011709	c9 00 00	cmp #$0000			cmp 	#0
.01170c	d0 10		bne $01171e			bne 	_FUNExit
.01170e	a5 2a		lda $2a				lda 	DStack 						; unpick stack but don't remove it.
.011710	38		sec				sec
.011711	e9 06 00	sbc #$0006			sbc 	#6
.011714	aa		tax				tax
.011715	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011717	85 06		sta $06				sta 	DCodePtr
.011719	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01171b	85 22		sta $22				sta 	DLineNumber
.01171d	60		rts				rts
.01171e					_FUNExit:
.01171e	a5 2a		lda $2a				lda 	DStack 						; unpick stack.
.011720	38		sec				sec
.011721	e9 06 00	sbc #$0006			sbc 	#6
.011724	85 2a		sta $2a				sta 	DStack
.011726	60		rts				rts
.011727					_FUNFail:
.011727	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>01172a	55 6e 74 69 6c 20 77 69				.text 	"Until without Repeat",$00 								; with this message
>011732	74 68 6f 75 74 20 52 65 70 65 61 74 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/while.asm

.01173f					Function_WHILE:
.01173f	a5 06		lda $06				lda 	DCodePtr 					; get the current instruction
.011741	48		pha				pha 								; save on stack
.011742	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; while what.
.011745	c0 00 00	cpy #$0000			cpy 	#0 							; do the body if non-zero.
.011748	d0 14		bne $01175e			bne 	_FWHExecute
.01174a	c9 00 00	cmp #$0000			cmp 	#0
.01174d	d0 0f		bne $01175e			bne 	_FWHExecute
.01174f	68		pla				pla 								; throw away current instruction
.011750	a9 44 3a	lda #$3a44			lda 	#wendTokenID 				; skip to WEND
.011753	a2 00 00	ldx #$0000			ldx 	#0
.011756	20 34 14	jsr $011434			jsr 	ScanForwardLevel 			; scan forward checking structures
.011759	e6 06		inc $06				inc 	DCodePtr 					; and skip over the WEND.
.01175b	e6 06		inc $06				inc 	DCodePtr
.01175d	60		rts				rts
.01175e					_FWHExecute:
.01175e	a6 2a		ldx $2a				ldx 	DStack 						; point Y to the stack.
.011760	68		pla				pla 								; save code ptr-2 so we re-execute the WHILE.
.011761	3a		dec a				dec 	a
.011762	3a		dec a				dec 	a
.011763	95 02		sta $02,x			sta 	$02,x 						; save pos at +2
.011765	a5 22		lda $22				lda 	DLineNumber 				; save line number at +4
.011767	95 04		sta $04,x			sta 	$04,x
.011769	a9 41 3c	lda #$3c41			lda 	#whileTokenID 				; save while token at +6
.01176c	95 06		sta $06,x			sta 	$06,x
.01176e	8a		txa				txa 								; advance stack by 6.
.01176f	18		clc				clc
.011770	69 06 00	adc #$0006			adc 	#6
.011773	85 2a		sta $2a				sta 	DStack
.011775	60		rts				rts
.011776					Function_WEND:
.011776	a6 2a		ldx $2a				ldx 	DStack 						; check top token is WHILE
.011778	b5 00		lda $00,x			lda 	$00,x
.01177a	c9 41 3c	cmp #$3c41			cmp 	#whileTokenID
.01177d	d0 11		bne $011790			bne 	_FWEFail
.01177f	8a		txa				txa 								; unpick stack and always loop back.
.011780	38		sec				sec 								; we do the check at the top.
.011781	e9 06 00	sbc #$0006			sbc 	#6
.011784	85 2a		sta $2a				sta 	DStack
.011786	aa		tax				tax
.011787	b5 02		lda $02,x			lda 	$02,x 						; copy code pointer out.
.011789	85 06		sta $06				sta 	DCodePtr 					; goes back to the WHILE token.
.01178b	b5 04		lda $04,x			lda 	$04,x 						; copy line number out
.01178d	85 22		sta $22				sta 	DLineNumber
.01178f	60		rts				rts
.011790					_FWEFail:
.011790	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011793	57 65 6e 64 20 77 69 74				.text 	"Wend without While",$00 								; with this message
>01179b	68 6f 75 74 20 57 68 69 6c 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/run.asm

.0117a6					Function_END:
.0117a6	02 00		cop #$00			cop 	#0
.0117a8					Function_RUN:
.0117a8	20 0f 18	jsr $01180f			jsr 	Function_CLEAR 				; clear all variables.
.0117ab	a5 02		lda $02				lda 	DBaseAddress 				; work out the first instruction.
.0117ad	18		clc				clc
.0117ae	69 00 02	adc #$0200			adc 	#Block_ProgramStart 		; so run from here.
.0117b1					_FRun_NextLineNumber:
.0117b1	a8		tay				tay 								; put in Y
.0117b2	b9 00 00	lda $0000,y			lda 	$0000,y 					; read the link token.
.0117b5	f0 ef		beq $0117a6			beq 	Function_END 				; if zero, off the end of the program, so END the program
.0117b7	b9 02 00	lda $0002,y			lda 	$0002,y 					; read the line number
.0117ba	85 22		sta $22				sta 	DLineNumber 				; and save it.
.0117bc	98		tya				tya 								; get address back
.0117bd	18		clc				clc 								; skip over the link/line number
.0117be	69 04 00	adc #$0004			adc 	#4
.0117c1	85 06		sta $06				sta 	DCodePtr
.0117c3					_FRun_NextInstruction:
.0117c3	64 16		stz $16				stz 	DTempStringPointer 			; force reset on next string allocation.
.0117c5	20 c3 1a	jsr $011ac3			jsr 	HWCheckBreak 				; break key pressed.
.0117c8	d0 3c		bne $011806			bne 	_FRun_Break
.0117ca	b2 06		lda ($06)			lda 	(DCodePtr)					; what's next
.0117cc	f0 32		beq $011800			beq 	_FRun_EndInstruction		; if end of this line, then go to next line.
.0117ce	c9 25 32	cmp #$3225			cmp 	#colonTokenID 				; colon then skip
.0117d1	f0 18		beq $0117eb			beq 	_FRun_Colon
.0117d3	a8		tay				tay 								; save in Y
.0117d4	29 00 e8	and #$e800			and 	#$E800 						; see if it is a keyword. 1111 1xxk kkkk kkkk e.g. types 11xx
.0117d7	c9 00 28	cmp #$2800			cmp 	#$2800 						; so it only runs 1100-1111 keywords.
.0117da	d0 15		bne $0117f1			bne 	_FRun_TryLET 				; if not, try LET as a default.
.0117dc	98		tya				tya 								; get token back
.0117dd	29 ff 01	and #$01ff			and 	#$01FF 						; mask out keyword
.0117e0	0a		asl a				asl 	a 							; double it into X
.0117e1	aa		tax				tax
.0117e2	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0117e4	e6 06		inc $06				inc 	DCodePtr
.0117e6	fc 00 00	jsr ($010000,x)			jsr 	(CommandJumpTable,x)		; and call that routine
.0117e9	80 d8		bra $0117c3			bra 	_FRun_NextInstruction 		; do the following instruction.
.0117eb					_FRun_Colon:
.0117eb	e6 06		inc $06				inc 	DCodePtr 					; skip over token
.0117ed	e6 06		inc $06				inc 	DCodePtr
.0117ef	80 d2		bra $0117c3			bra 	_FRun_NextInstruction 		; do the following instruction.
.0117f1					_FRun_TryLET:
.0117f1	b2 06		lda ($06)			lda 	(DCodePtr) 					; look to see if it's an identifier.
.0117f3	c9 00 c0	cmp #$c000			cmp 	#$C000
.0117f6	90 05		bcc $0117fd			bcc		_FRunSyntax 				; no, must be syntax.
.0117f8	20 92 10	jsr $011092			jsr 	Function_LET 				; try as a LET.
.0117fb	80 c6		bra $0117c3			bra 	_FRun_NextInstruction 		; if we get away with it, go to next instruction.
.0117fd					_FRunSyntax:
.0117fd	82 9f ec	brl $01049f			brl 	SyntaxError
.011800					_FRun_EndInstruction:
.011800	a5 06		lda $06				lda 	DCodePtr 					; address of terminating NULL.
.011802	1a		inc a				inc 	a 							; go to link for next line
.011803	1a		inc a				inc 	a
.011804	80 ab		bra $0117b1			bra 	_FRun_NextLineNumber
.011806					_FRun_Break:
.011806	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011809	42 72 65 61 6b 00				.text 	"Break",$00 								; with this message
.01180f					Function_CLEAR:
.01180f	20 1b 18	jsr $01181b			jsr 	ClearVariablesPointersAndStacks
.011812	60		rts				rts
.011813					Function_STOP:
.011813	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>011816	53 74 6f 70 00					.text 	"Stop",$00 								; with this message
.01181b					ClearVariablesPointersAndStacks:
.01181b	a9 80 00	lda #$0080			lda 	#BASStack
.01181e	85 2a		sta $2a				sta 	DStack
.011820	64 80		stz $80				stz 	BASStack 					; any structure popping this => error
.011822	a0 0c 00	ldy #$000c			ldy 	#Block_EmptyString
.011825	a9 00 00	lda #$0000			lda 	#$0000
.011828	91 02		sta ($02),y			sta 	(DBaseAddress),y
.01182a	a5 04		lda $04				lda 	DHighAddress				; reset the end of memory pointer
.01182c	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr
.01182f	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011831	20 58 18	jsr $011858			jsr 	FindCodeEnd 				; find where the program ends.
.011834	a8		tay				tay 								; Y points to it.
.011835	a9 ee ee	lda #$eeee			lda 	#$EEEE 						; put the marker in.
.011838	99 02 00	sta $0002,y			sta 	$0002,y
.01183b	99 04 00	sta $0004,y			sta 	$0004,y
.01183e	98		tya				tya 								; start of working memory up
.01183f	18		clc				clc
.011840	69 06 00	adc #$0006			adc 	#6
.011843	a0 08 00	ldy #$0008			ldy 	#Block_LowMemoryPtr
.011846	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011848	a0 80 00	ldy #$0080			ldy 	#Block_HashTable
.01184b					_FCLoop:
.01184b	a9 00 00	lda #$0000			lda 	#$0000
.01184e	91 02		sta ($02),y			sta 	(DBaseAddress),y
.011850	c8		iny				iny
.011851	c8		iny				iny
.011852	c0 00 01	cpy #$0100			cpy 	#Block_HashTable+Block_HashTableEntrySize*4*2
.011855	d0 f4		bne $01184b			bne 	_FCLoop
.011857	60		rts				rts
.011858					FindCodeEnd:
.011858	a9 00 02	lda #$0200			lda 	#Block_ProgramStart 		; offset to program
.01185b	18		clc				clc
.01185c	65 02		adc $02				adc 	DBaseAddress 				; now an actual address
.01185e	a8		tay				tay
.01185f					_FCELoop:
.01185f	b9 00 00	lda $0000,y			lda 	$0000,y 					; get link.
.011862	f0 08		beq $01186c			beq 	_FCEExit
.011864	98		tya				tya 								; add offset
.011865	18		clc				clc
.011866	79 00 00	adc $0000,y			adc 	$0000,y
.011869	a8		tay				tay
.01186a	80 f3		bra $01185f			bra 	_FCELoop
.01186c					_FCEExit:
.01186c	98		tya				tya 								; return in A
.01186d	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/dim.asm

.01186e					Function_Dim:
.01186e	b2 06		lda ($06)			lda 	(DCodePtr)					; get the first token, for typing.
.011870	29 00 10	and #$1000			and 	#IDArrayMask 				; is it an array ?
.011873	f0 3b		beq $0118b0			beq		_FDIMNotArray 				; no, error.
.011875	20 60 03	jsr $010360			jsr 	VariableFind 				; try to find it.
.011878	b0 41		bcs $0118bb			bcs 	_FDIMExists 				; if it does, that's an error.
.01187a	a5 06		lda $06				lda 	DCodePtr 					; push the variable identifier address on the stack
.01187c	48		pha				pha
.01187d	a5 20		lda $20				lda 	DHashTablePtr 				; push the hash value on the stack as well, as evaluateinteger might change it
.01187f	48		pha				pha
.011880					_FDIMSkip:
.011880	b2 06		lda ($06)			lda 	(DCodePtr)					; skip over the token.
.011882	e6 06		inc $06				inc 	DCodePtr
.011884	e6 06		inc $06				inc 	DCodePtr
.011886	29 00 08	and #$0800			and 	#IDContMask
.011889	d0 f5		bne $011880			bne 	_FDIMSkip
.01188b	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; evaluate the size
.01188e	20 c9 04	jsr $0104c9			jsr 	ExpectRightBracket 			; check the ) following.
.011891	c0 00 00	cpy #$0000			cpy 	#0 							; if MSWord is non zero, obviously it's a non starter.
.011894	d0 3b		bne $0118d1			bne 	_FDIMSize
.011896	c9 00 00	cmp #$0000			cmp 	#0 							; need at least one element.
.011899	f0 36		beq $0118d1			beq 	_FDIMSize
.01189b	7a		ply				ply 								; restore HashTablePtr
.01189c	84 20		sty $20				sty 	DHashTablePtr
.01189e	7a		ply				ply 								; so now A is the high index, Y points to the token
.01189f	20 0a 04	jsr $01040a			jsr 	VariableCreate 				; create the variable.
.0118a2	b2 06		lda ($06)			lda 	(DCodePtr)					; look at next character
.0118a4	c9 23 32	cmp #$3223			cmp 	#commaTokenID 				; if not a comma, exit
.0118a7	d0 06		bne $0118af			bne 	_FDIMExit
.0118a9	e6 06		inc $06				inc 	DCodePtr 					; skip comma
.0118ab	e6 06		inc $06				inc 	DCodePtr
.0118ad	80 bf		bra $01186e			bra 	Function_DIM 				; and do another
.0118af					_FDIMExit:
.0118af	60		rts				rts
.0118b0					_FDIMNotArray:
.0118b0	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118b3	42 61 64 20 44 49 4d 00				.text 	"Bad DIM",$00 								; with this message
.0118bb					_FDIMExists:
.0118bb	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118be	43 61 6e 6e 6f 74 20 52				.text 	"Cannot Redimension",$00 								; with this message
>0118c6	65 64 69 6d 65 6e 73 69 6f 6e 00
.0118d1					_FDIMSize:
.0118d1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0118d4	44 49 4d 20 74 6f 6f 20				.text 	"DIM too large",$00 								; with this message
>0118dc	6c 61 72 67 65 00

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/collect.asm

.0118e2					Function_COLLECT:
.0118e2	a5 04		lda $04				lda 	DHighAddress 				; DTemp2 is the highest value the pointer can be - must be < this.
.0118e4	85 0c		sta $0c				sta 	DTemp2
.0118e6	a0 0a 00	ldy #$000a			ldy 	#Block_HighMemoryPtr 		; DTemp2+2 is the smallest value that the pointer can be.
.0118e9	b1 02		lda ($02),y			lda 	(DBaseAddress),y 			; this starts off at the start of the current string area.
.0118eb	85 0e		sta $0e				sta 	DTemp2+2
.0118ed	a5 04		lda $04				lda 	DHighAddress 				; reset the current string area
.0118ef	91 02		sta ($02),y			sta 	(DBaseAddress),y
.0118f1					_FCNextPass:
.0118f1	a5 0e		lda $0e				lda 	DTemp2+2					; lowest permission allowable
.0118f3	85 08		sta $08				sta 	DTemp1 						; and goes up as you scan through. Must be >= this.
.0118f5	64 14		stz $14				stz 	DSignCount 					; DSignCount is the address of the string reference, so (DStringPtr)
.0118f7	a9 c0 00	lda #$00c0			lda 	#Block_HashTable+Block_HashTableEntrySize*2*2
.0118fa	18		clc				clc
.0118fb	65 02		adc $02				adc 	DBaseAddress
.0118fd	a8		tay				tay 								; put in Y
.0118fe	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.011901					_FCO1:
.011901	20 27 19	jsr $011927			jsr  	COLLECTScanVariable 		; scan that one.
.011904	c8		iny				iny 	 							; go to next pointer
.011905	c8		iny				iny
.011906	ca		dex				dex
.011907	d0 f8		bne $011901			bne 	_FCO1 						; until done all 16.
.011909	a2 10 00	ldx #$0010			ldx 	#16 						; there are 16 to do.
.01190c					_FCO2:
.01190c	20 3b 19	jsr $01193b			jsr  	COLLECTScanArray 			; scan that one.
.01190f	c8		iny				iny 	 							; go to next pointer
.011910	c8		iny				iny
.011911	ca		dex				dex
.011912	d0 f8		bne $01190c			bne 	_FCO2 						; until done all 16.
.011914	a5 14		lda $14				lda 	DSignCount 					; get the string pointer.
.011916	f0 0e		beq $011926			beq		_FCExit 					; if finished then exit.
.011918	48		pha				pha 								; save the target address
.011919	b2 14		lda ($14)			lda 	(DSignCount)				; the address of the string text is the highest next time round.
.01191b	85 0c		sta $0c				sta 	DTemp2 						; store in DTemp2
.01191d	20 94 05	jsr $010594			jsr 	StringMakeConcrete 			; make the string concrete.
.011920	7a		ply				ply 								; restore the string.
.011921	99 00 00	sta $0000,y			sta 	$0000,y 					; update the pointer.
.011924	80 cb		bra $0118f1			bra		_FCNextPass
.011926					_FCExit:
.011926	60		rts				rts
.011927					COLLECTScanVariable:
.011927	da		phx				phx 								; save XY
.011928	5a		phy				phy
.011929					_CSVLoop:
.011929	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.01192c	f0 0a		beq $011938			beq 	_CSVExit
.01192e	a8		tay				tay 								; put new address into Y
.01192f	18		clc				clc 								; which is four on.
.011930	69 04 00	adc #$0004			adc 	#4
.011933	20 5c 19	jsr $01195c			jsr 	COLLECTCheck
.011936	80 f1		bra $011929			bra 	_CSVLoop
.011938					_CSVExit:
.011938	7a		ply				ply
.011939	fa		plx				plx
.01193a	60		rts				rts
.01193b					COLLECTScanArray:
.01193b	da		phx				phx 								; save XY
.01193c	5a		phy				phy
.01193d					_CSALoop:
.01193d	b9 00 00	lda $0000,y			lda 	$0000,y 					; read link.
.011940	f0 17		beq $011959			beq 	_CSAExit
.011942	a8		tay				tay 								; put new address in Y
.011943	b9 04 00	lda $0004,y			lda 	$0004,y 					; array max subscript in X
.011946	aa		tax				tax
.011947	e8		inx				inx									; +1 as one more data element.
.011948	98		tya				tya 								; point A to first element, at +6
.011949	18		clc				clc
.01194a	69 06 00	adc #$0006			adc 	#6
.01194d					_CSADoAllStrings:
.01194d	20 5c 19	jsr $01195c			jsr 	COLLECTCheck 				; collect check the first.
.011950	1a		inc a				inc 	a 							; advance the pointer.
.011951	1a		inc a				inc 	a
.011952	1a		inc a				inc 	a
.011953	1a		inc a				inc 	a
.011954	ca		dex				dex
.011955	d0 f6		bne $01194d			bne 	_CSADoAllStrings 			; until all strings are done.
.011957	80 e4		bra $01193d			bra 	_CSALoop
.011959					_CSAExit:
.011959	7a		ply				ply
.01195a	fa		plx				plx
.01195b	60		rts				rts
.01195c					COLLECTCheck:
.01195c	85 0a		sta $0a				sta 	DTemp1+2 					; save address here.
.01195e	b2 0a		lda ($0a)			lda 	(DTemp1+2) 					; get the actual string address
.011960	c5 08		cmp $08				cmp 	DTemp1						; if <= DTemp1 then exit
.011962	90 0a		bcc $01196e			bcc 	_COCExit
.011964	c5 0c		cmp $0c				cmp 	DTemp2 						; if >= DTemp2 then exit.
.011966	b0 06		bcs $01196e			bcs 	_COCExit
.011968	85 08		sta $08				sta 	DTemp1 						; save the best score in DTemp1
.01196a	a5 0a		lda $0a				lda 	DTemp1+2 					; and copy the address to DSignCount
.01196c	85 14		sta $14				sta 	DSignCount
.01196e					_COCExit:
.01196e	a5 0a		lda $0a				lda 	DTemp1+2
.011970	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/memwrite.asm

.011971					Command_POKE:
.011971	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.011974	48		pha				pha	 								; save on stack
.011975	5a		phy				phy
.011976	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.011979	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.01197c	fa		plx				plx 								; pull address and store in DTemp1
.01197d	86 0a		stx $0a				stx 	DTemp1+2
.01197f	fa		plx				plx
.011980	86 08		stx $08				stx 	DTemp1+0
.011982	e2 20		sep #$20			sep 	#$20 						; byte mode
.011984	87 08		sta [$08]			sta 	[DTemp1]					; write it
.011986	c2 20		rep #$20			rep 	#$20 						; word mode
.011988	60		rts				rts
.011989					Command_DOKE:
.011989	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.01198c	48		pha				pha	 								; save on stack
.01198d	5a		phy				phy
.01198e	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.011991	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.011994	fa		plx				plx 								; pull address and store in DTemp1
.011995	86 0a		stx $0a				stx 	DTemp1+2
.011997	fa		plx				plx
.011998	86 08		stx $08				stx 	DTemp1+0
.01199a	87 08		sta [$08]			sta 	[DTemp1]					; write it
.01199c	60		rts				rts
.01199d					Command_LOKE:
.01199d	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; address
.0119a0	48		pha				pha	 								; save on stack
.0119a1	5a		phy				phy
.0119a2	20 d2 04	jsr $0104d2			jsr 	ExpectComma 				; comma seperator.
.0119a5	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; data
.0119a8	fa		plx				plx 								; pull address and store in DTemp1
.0119a9	86 0a		stx $0a				stx 	DTemp1+2
.0119ab	fa		plx				plx
.0119ac	86 08		stx $08				stx 	DTemp1+0
.0119ae	87 08		sta [$08]			sta 	[DTemp1]					; write it (low)
.0119b0	98		tya				tya
.0119b1	a0 02 00	ldy #$0002			ldy 	#2
.0119b4	97 08		sta [$08],y			sta 	[DTemp1],y 					; write it (high)
.0119b6	60		rts				rts

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/commands/miscellany.asm

.0119b7					Function_ASSERT:
.0119b7	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; something that returns an integer.
.0119ba	84 08		sty $08				sty 	DTemp1 						; check if result is zero.
.0119bc	05 08		ora $08				ora 	Dtemp1
.0119be	f0 01		beq $0119c1			beq 	_FAssFail
.0119c0	60		rts				rts
.0119c1					_FAssFail:
.0119c1	20 64 04	jsr $010464			jsr 	ErrorHandler 						; call error routine
>0119c4	61 73 73 65 72 74 20 66				.text 	"assert failed",$00 								; with this message
>0119cc	61 69 6c 65 64 00
.0119d2					Function_CLS:
.0119d2	20 2b 1a	jsr $011a2b			jsr 	HWClearScreen
.0119d5	60		rts				rts
.0119d6					Function_REM:
.0119d6	b2 06		lda ($06)			lda 	(DCodePtr) 					; get code ptr.
.0119d8	f0 0b		beq $0119e5			beq 	_FRemSyntax 				; if 0, syntax error
.0119da	c9 00 01	cmp #$0100			cmp 	#$0100 						; if not $00xx syntax error
.0119dd	b0 06		bcs $0119e5			bcs 	_FRemSyntax
.0119df	18		clc				clc 								; add to DCodePtr
.0119e0	65 06		adc $06				adc 	DCodePtr
.0119e2	85 06		sta $06				sta 	DCodePtr
.0119e4	60		rts				rts
.0119e5					_FRemSyntax:
.0119e5	82 b7 ea	brl $01049f			brl 	SyntaxError
.0119e8					Function_LINK:
.0119e8	20 e1 02	jsr $0102e1			jsr 	EvaluateInteger 			; call address same page.
.0119eb	85 08		sta $08				sta 	DTemp1 						; target address
.0119ed	84 0a		sty $0a				sty 	DTemp1+2
.0119ef	7b		tdc				tda 								; work out what the actual address is
.0119f0	18		clc				clc
.0119f1	69 08 00	adc #$0008			adc 	#DTemp1
.0119f4	8f 29 1a 01	sta $011a29			sta 	_FLIExecuteIt+1 			; and overwrite it. Surely to fuck there has
.0119f8	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Load
.0119fa	b9 10 00	lda $0010,y			lda 	("A"-"A")*4+Block_FastVariables,y
.0119fd	48		pha				pha
.0119fe	b9 6c 00	lda $006c,y			lda 	("X"-"A")*4+Block_FastVariables,y
.011a01	aa		tax				tax
.011a02	b9 70 00	lda $0070,y			lda 	("Y"-"A")*4+Block_FastVariables,y
.011a05	a8		tay				tay
.011a06	68		pla				pla
.011a07	22 28 1a 01	jsl $011a28			jsl 	_FLIExecuteIt
.011a0b	5a		phy				phy 								; save Y
.011a0c	a4 02		ldy $02				ldy 	DBaseAddress 				; point Y to DBaseAddress + Save
.011a0e	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a11	8a		txa				txa
.011a12	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a15	68		pla				pla
.011a16	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a19	c8		iny				iny 								; point to their high bytes and clear them
.011a1a	c8		iny				iny
.011a1b	a9 00 00	lda #$0000			lda 	#0
.011a1e	99 10 00	sta $0010,y			sta 	("A"-"A")*4+Block_FastVariables,y
.011a21	99 6c 00	sta $006c,y			sta 	("X"-"A")*4+Block_FastVariables,y
.011a24	99 70 00	sta $0070,y			sta 	("Y"-"A")*4+Block_FastVariables,y
.011a27	60		rts				rts
.011a28					_FLIExecuteIt:
.011a28	dc 08 00	jmp [$0008]			jmp 	[DTemp1]					; go wherever.

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/utility/hwinterface.asm

=$66					HWCursorCharacter = $66
=$f8020					HWCursor = $F8020
=$f8010					HWKeyPressed = $F8010
=$f8000					HWBreakKey = $F8000
=$f0000					HWScreen = $F0000
=64					sWidth = 64					; this has to be powers of two in this really simple I/O code.
=32					sHeight = 32
.011a2b					HWClearScreen:
.011a2b	48		pha				pha
.011a2c	da		phx				phx
.011a2d	a2 fe 07	ldx #$07fe			ldx 	#sWidth*sHeight-2
.011a30	a9 20 20	lda #$2020	_CS0:	lda 	#$2020
.011a33	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a37	ca		dex				dex
.011a38	10 f6		bpl $011a30			bpl 	_CS0
.011a3a	a9 00 00	lda #$0000			lda 	#0
.011a3d	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011a41	fa		plx				plx
.011a42	68		pla				pla
.011a43	60		rts				rts
.011a44					HWPrintChar:
.011a44	48		pha				pha
.011a45	da		phx				phx
.011a46	5a		phy				phy
.011a47	29 ff 00	and #$00ff			and 	#$00FF
.011a4a	c9 61 00	cmp #$0061			cmp 	#"a"
.011a4d	90 0c		bcc $011a5b			bcc 	_HWPCNotLC
.011a4f	c9 7b 00	cmp #$007b			cmp 	#"z"+1
.011a52	b0 07		bcs $011a5b			bcs 	_HWPCNotLC
.011a54	38		sec				sec
.011a55	e9 20 00	sbc #$0020			sbc 	#32
.011a58	09 80 00	ora #$0080			ora 	#128
.011a5b					_HWPCNotLC:
.011a5b	29 bf 00	and #$00bf			and 	#$BF
.011a5e	48		pha				pha
.011a5f	af 20 80 0f	lda $0f8020			lda 	HWCursor
.011a63	aa		tax				tax
.011a64	68		pla				pla
.011a65	e2 20		sep #$20			sep 	#$20
.011a67	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a6b	c2 20		rep #$20			rep 	#$20
.011a6d	e8		inx				inx
.011a6e	8a		txa				txa
.011a6f	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011a73	c9 00 08	cmp #$0800			cmp 	#(sWidth*sHeight)
.011a76	d0 2b		bne $011aa3			bne 	_HWNotEnd
.011a78	38		sec				sec
.011a79	e9 40 00	sbc #$0040			sbc 	#sWidth
.011a7c	8f 20 80 0f	sta $0f8020			sta 	HWCursor
.011a80	a2 00 00	ldx #$0000			ldx 	#0
.011a83					_HWScrollUp:
.011a83	bf 40 00 0f	lda $0f0040,x			lda 	$F0000+sWidth,x
.011a87	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a8b	e8		inx				inx
.011a8c	e8		inx				inx
.011a8d	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011a90	d0 f1		bne $011a83			bne 	_HWScrollUp
.011a92	a2 c0 07	ldx #$07c0			ldx 	#(sWidth*(sHeight-1))
.011a95					_HWBlank:
.011a95	a9 20 20	lda #$2020			lda 	#$2020
.011a98	9f 00 00 0f	sta $0f0000,x			sta 	$F0000,x
.011a9c	e8		inx				inx
.011a9d	e8		inx				inx
.011a9e	e0 00 08	cpx #$0800			cpx 	#sWidth*sHeight
.011aa1	d0 f2		bne $011a95			bne 	_HWBlank
.011aa3					_HWNotEnd:
.011aa3	7a		ply				ply
.011aa4	fa		plx				plx
.011aa5	68		pla				pla
.011aa6	60		rts				rts
.011aa7					HWNewLine:
.011aa7	48		pha				pha
.011aa8	da		phx				phx
.011aa9	a2 3f 00	ldx #$003f			ldx 	#sWidth-1
.011aac					HWMoveCursor:
.011aac	a9 20 00	lda #$0020			lda 	#32
.011aaf	20 44 1a	jsr $011a44			jsr 	HWPrintChar
.011ab2	8a		txa				txa
.011ab3	2f 20 80 0f	and $0f8020			and 	HWCursor
.011ab7	d0 f3		bne $011aac			bne 	HWMoveCursor
.011ab9	fa		plx				plx
.011aba	68		pla				pla
.011abb	60		rts				rts
.011abc	48		pha		HWTab:	pha
.011abd	da		phx				phx
.011abe	a2 07 00	ldx #$0007			ldx 	#7
.011ac1	80 e9		bra $011aac			bra 	HWMoveCursor
.011ac3					HWCheckBreak:
.011ac3	af 00 80 0f	lda $0f8000			lda 	HWBreakKey
.011ac7	60		rts				rts
.011ac8					HWGetKey:
.011ac8	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011acc	d0 fa		bne $011ac8			bne 	HWGetKey
.011ace					_HWGKWait:
.011ace	af 10 80 0f	lda $0f8010			lda 	HWKeyPressed
.011ad2	f0 fa		beq $011ace			beq 	_HWGKWait
.011ad4	ea		nop				nop
.011ad5	60		rts				rts

;******  Return to file: ../source/basic.asm

=$2000					IDTypeMask = $2000 									; bit masks in identifier.
=$1000					IDArrayMask = $1000
=$0800					IDContMask = $0800
=8					UnaryFunction = 8 									; Unary function Token Type ID.
=9					TokenShift = 9										; Token shift to reach precedence.
.011ad6					SwitchBasicInstance:
.011ad6	c2 30		rep #$30			rep 	#$30 								; 16 bit A:X mode.
.011ad8	20 2b 1a	jsr $011a2b			jsr 	HWClearScreen 						; clear screen
.011adb	29 ff 00	and #$00ff			and 	#$00FF 								; make page number 24 bit
.011ade	85 00		sta $00				sta 	DPageNumber 						; save page, base, high in RAM.
.011ae0	86 02		stx $02				stx		DBaseAddress
.011ae2	84 04		sty $04				sty 	DHighAddress
.011ae4	eb		xba				xba 										; put the page number (goes in the DBR) in B
.011ae5	48		pha				pha 										; then copy it into B.
.011ae6	ab		plb				plb
.011ae7	ab		plb				plb
.011ae8	4c a8 17	jmp $0117a8			jmp 	Function_RUN

;******  Return to file: ../source/start.asm


;******  Processing file: ../source/utility/testing.asm

.01f000	82 04 00	brl $01f007			brl 	TokenCheckCode
.01f004	82 22 00	brl $01f029			brl 	CommandExecCode
.01f007					TokenCheckCode:
.01f007	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f00a	a0 02 00	ldy #$0002			ldy 	#2
.01f00d	20 c8 05	jsr $0105c8			jsr 	Tokenise
.01f010	a6 02		ldx $02				ldx 	DBaseAddress
.01f012	a0 00 00	ldy #$0000			ldy 	#0
.01f015					_TokeniserTestLoop:
.01f015	bd 00 01	lda $0100,x			lda 	Block_TokenBuffer,x					; compare workspace vs answer
.01f018	d9 00 b2	cmp $b200,y			cmp 	$B200,y
.01f01b					_TokeniserError:
.01f01b	d0 fe		bne $01f01b			bne 	_TokeniserError
.01f01d	e8		inx				inx
.01f01e	e8		inx				inx
.01f01f	c8		iny				iny
.01f020	c8		iny				iny
.01f021	c9 00 00	cmp #$0000			cmp 	#0
.01f024	d0 ef		bne $01f015			bne 	_TokeniserTestLoop
.01f026	02 00		cop #$00			cop 	#0 									; exit successfully.
.01f028	6b		rtl				rtl
.01f029					CommandExecCode:
.01f029	a9 00 b0	lda #$b000			lda 	#$B000 								; the text is at $2B000
.01f02c	a0 02 00	ldy #$0002			ldy 	#2
.01f02f	20 c8 05	jsr $0105c8			jsr 	Tokenise
.01f032	ea		nop				nop

;******  Return to file: ../source/start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00				.binary "temp/basic.bin"
>024008	1a 42 00 c0 00 00 00 00 00 00 00 00 00 00 00 00
>024018	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 29 times (464 bytes)...
>0241f8	00 00 00 00 00 00 00 00 14 00 01 00 3e 3e 25 32
>024208	3f 3e 03 10 00 b0 25 32 30 3e 00 00 00 00 ee ee
>024218	ee ee 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024228	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1756 times (28096 bytes)...
>02aff8	00 00 00 00 00 00 00 00 3e 3d 28 37 30 38 39 39
>02b008	37 2a 57 48 49 4c 45 20 3e 3d 2b 61 73 63 28 20
>02b018	57 45 4e 44 20 31 36 39 34 37 38 2b 39 35 38 37
>02b028	37 39 20 35 31 31 35 33 39 2b 58 58 70 24 2c 56
>02b038	4c 2c 73 32 34 28 29 39 35 31 30 36 38 27 44 64
>02b048	28 42 24 28 3b 62 39 24 2a 7c 3b 70 24 2a 35 38
>02b058	32 34 39 36 28 4d 49 69 28 2f 32 30 32 34 31 38
>02b068	2c 58 73 62 28 2c 36 35 32 36 30 34 3a 72 65 74
>02b078	75 72 6e 2a 4d 2d 28 2b 00 00 00 00 00 00 00 00
>02b088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 22 times (352 bytes)...
>02b1f8	00 00 00 00 00 00 00 00 08 22 26 32 15 10 85 91
>02b208	0c 26 41 3c 08 22 0a 24 18 30 44 3a 05 10 06 56
>02b218	0a 24 1d 10 3b 61 0f 10 33 8e 0a 24 50 ec 10 e0
>02b228	23 32 32 c2 23 32 2c dd 1f d0 27 32 1d 10 1c 43
>02b238	28 32 b8 d0 02 f0 24 32 56 e6 0c 26 02 20 24 32
>02b248	10 e0 0c 26 11 10 60 a3 26 32 a2 d9 09 d0 0d 26
>02b258	06 10 b2 56 23 32 6f db 02 d0 23 32 13 10 3c b5
>02b268	25 32 38 3e 0c 26 0d c0 0b 24 26 32 0a 24 00 00
>02b278	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 215 times (3440 bytes)...
>02bff8	00 00 00 00 00 00 00 00
.02c000					CodeEndSpace:

;******  End of listing
