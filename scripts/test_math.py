# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		test_math.py
#		Purpose :	Create a pile of memory variables, check the arithmetic/bitwise functions.
#					(generated by script, not by LET instructions)
#					Also checks assignment retrieval.
#
#		NOTE: 		modulus is not currently working.
#
#		Date :		8th June 2019
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import re,os,sys,random
from dispvariables import *
from variables import *

def pickOne(varSet,operator):
	variable = varSet[random.randint(0,len(varSet)-1)]
	variable = variable.pickElement()
	if random.randint(0,1) == 0:
		variable[0] = variable[1]
	return variable

def calculate(op,a,b):
	if (op == "/" or op == "%") and b == 0:
		return 0
	''
	if op == "+":
		return a+b
	if op == "-":
		return a-b
	if op == "*":
		return a*b	
	if op == "/":
		return int(a/b)
	if op == "&":
		return a & b
	if op == "|":
		return a | b
	if op == "^":
		return a ^ b
	if op == "%":
		return a % b

	assert False
if __name__ == "__main__":
	blk = ListableVariableBlock(0x4000,0x8000)
	#
	#		Pick a random seed, but one we can retry if required.
	#
	random.seed()
	seed = random.randint(0,65535)
	print("***** ROOT SEED {0} *****".format(seed))
	random.seed(seed)
	#
	#		Create a pile of variable objects
	#
	operatorList = "+-*/&|^"
	maxInt = pow(2,27)
	#
	variables = []
	for i in range(0,100):
		variables.append(IntegerVariable())
		variables.append(IntegerArray())
	#
	#		Generate code to check that the variable does equal the value.
	#
	for i in range(0,900):
		operator = operatorList[random.randint(0,len(operatorList))-1]
		v1 = pickOne(variables,operator)
		v2 = pickOne(variables,operator)
		result = calculate(operator,v1[1],v2[1])
		reject = (operator == "*" and abs(result)>=maxInt)
		reject = reject or (operator == "/" and v2[1] == 0)
		reject = reject or (operator == "%" and v2[1] == 0)
		if not reject:
			line = "assert ({0} {1} {2}) = {3}".format(v1[0],operator,v2[0],result)
			blk.addBASICLine(None,line)
			#print(line)
	#
	#		Create variables in memory (done after program)
	#
	for v in variables:
		v.importVariable(blk)
	#
	#blk.listVariables()
	blk.showStatus()
	blk.exportFile("temp/basic.bin")
